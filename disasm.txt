
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 79 fc 00 00       	call   c000fc99 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 8e 02 00       	call   c0028e48 <_init>
c0000025:	c3                   	ret    
c0000026:	bb de 9a 02 c0       	mov    ebx,0xc0029ade
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ec 9a 02 c0    	cmp    ebx,0xc0029aec
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 e3 02 c0       	mov    eax,0xc002e3b8
c0000049:	3d b8 e3 02 c0       	cmp    eax,0xc002e3b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 e3 02 c0       	push   0xc002e3b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 e3 02 c0       	mov    eax,0xc002e3b8
c0000075:	2d b8 e3 02 c0       	sub    eax,0xc002e3b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 e3 02 c0       	push   0xc002e3b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 e9 02 c0 00 	cmp    BYTE PTR ds:0xc002e9e8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f4 9a 02 c0       	mov    ebx,0xc0029af4
c00000bb:	81 eb f0 9a 02 c0    	sub    ebx,0xc0029af0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f0 9a 02 c0       	mov    esi,0xc0029af0
c00000ca:	a1 ec e9 02 c0       	mov    eax,ds:0xc002e9ec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec e9 02 c0       	mov    ds:0xc002e9ec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec e9 02 c0       	mov    eax,ds:0xc002e9ec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 e3 02 c0       	push   0xc002e3b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9e8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 e9 02 c0       	push   0xc002e9f0
c000012c:	68 b8 e3 02 c0       	push   0xc002e3b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 87 d9 01 00       	call   c001dd2a <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 ee 28 01 00       	call   c0012ca9 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 65 d9 01 00       	call   c001dd2a <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 0d de 01 00       	call   c001e1f1 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 6b e4 01 00       	call   c001e858 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 30 ee 02 c0 	lgdtd  ds:0xc002ee30
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 e8 45 01 00       	call   c0014bc9 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000645 <hexStrToInt>:
c0000645:	56                   	push   esi
c0000646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064a:	31 d2                	xor    edx,edx

c000064c <hexStrToInt.looping>:
c000064c:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064d:	84 c0                	test   al,al
c000064f:	74 0d                	je     c000065e <hexStrToInt.end>
c0000651:	d4 40                	aam    0x40
c0000653:	d5 39                	aad    0x39
c0000655:	2c 30                	sub    al,0x30
c0000657:	c1 e2 04             	shl    edx,0x4
c000065a:	08 c2                	or     dl,al
c000065c:	eb ee                	jmp    c000064c <hexStrToInt.looping>

c000065e <hexStrToInt.end>:
c000065e:	89 d0                	mov    eax,edx
c0000660:	5e                   	pop    esi
c0000661:	c3                   	ret    
c0000662:	66 90                	xchg   ax,ax

c0000664 <memcmp>:
c0000664:	56                   	push   esi
c0000665:	53                   	push   ebx
c0000666:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000672:	85 f6                	test   esi,esi
c0000674:	74 1d                	je     c0000693 <memcmp+0x2f>
c0000676:	8a 08                	mov    cl,BYTE PTR [eax]
c0000678:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067b:	38 cb                	cmp    bl,cl
c000067d:	75 19                	jne    c0000698 <memcmp+0x34>
c000067f:	01 c6                	add    esi,eax
c0000681:	eb 0a                	jmp    c000068d <memcmp+0x29>
c0000683:	90                   	nop
c0000684:	8a 08                	mov    cl,BYTE PTR [eax]
c0000686:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000689:	38 d9                	cmp    cl,bl
c000068b:	75 0b                	jne    c0000698 <memcmp+0x34>
c000068d:	40                   	inc    eax
c000068e:	42                   	inc    edx
c000068f:	39 f0                	cmp    eax,esi
c0000691:	75 f1                	jne    c0000684 <memcmp+0x20>
c0000693:	31 c0                	xor    eax,eax
c0000695:	5b                   	pop    ebx
c0000696:	5e                   	pop    esi
c0000697:	c3                   	ret    
c0000698:	0f b6 c1             	movzx  eax,cl
c000069b:	29 d8                	sub    eax,ebx
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memmove>:
c00006a0:	55                   	push   ebp
c00006a1:	57                   	push   edi
c00006a2:	56                   	push   esi
c00006a3:	53                   	push   ebx
c00006a4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b0:	39 dd                	cmp    ebp,ebx
c00006b2:	0f 83 80 00 00 00    	jae    c0000738 <memmove+0x98>
c00006b8:	85 d2                	test   edx,edx
c00006ba:	74 74                	je     c0000730 <memmove+0x90>
c00006bc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006bf:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c2:	39 cd                	cmp    ebp,ecx
c00006c4:	0f 93 c1             	setae  cl
c00006c7:	39 f3                	cmp    ebx,esi
c00006c9:	0f 93 c0             	setae  al
c00006cc:	89 c6                	mov    esi,eax
c00006ce:	09 ce                	or     esi,ecx
c00006d0:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d3:	89 f0                	mov    eax,esi
c00006d5:	83 f9 0c             	cmp    ecx,0xc
c00006d8:	0f 97 c1             	seta   cl
c00006db:	84 c8                	test   al,cl
c00006dd:	74 75                	je     c0000754 <memmove+0xb4>
c00006df:	89 e9                	mov    ecx,ebp
c00006e1:	09 d9                	or     ecx,ebx
c00006e3:	83 e1 03             	and    ecx,0x3
c00006e6:	75 6c                	jne    c0000754 <memmove+0xb4>
c00006e8:	89 d7                	mov    edi,edx
c00006ea:	89 d9                	mov    ecx,ebx
c00006ec:	83 e7 fc             	and    edi,0xfffffffc
c00006ef:	89 ee                	mov    esi,ebp
c00006f1:	01 df                	add    edi,ebx
c00006f3:	90                   	nop
c00006f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006f6:	83 c6 04             	add    esi,0x4
c00006f9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006fc:	83 c1 04             	add    ecx,0x4
c00006ff:	39 f9                	cmp    ecx,edi
c0000701:	75 f1                	jne    c00006f4 <memmove+0x54>
c0000703:	89 d1                	mov    ecx,edx
c0000705:	89 d7                	mov    edi,edx
c0000707:	83 e1 fc             	and    ecx,0xfffffffc
c000070a:	29 cf                	sub    edi,ecx
c000070c:	01 cb                	add    ebx,ecx
c000070e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000712:	39 ca                	cmp    edx,ecx
c0000714:	74 1a                	je     c0000730 <memmove+0x90>
c0000716:	8a 03                	mov    al,BYTE PTR [ebx]
c0000718:	83 ff 01             	cmp    edi,0x1
c000071b:	88 06                	mov    BYTE PTR [esi],al
c000071d:	74 11                	je     c0000730 <memmove+0x90>
c000071f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000722:	83 ff 02             	cmp    edi,0x2
c0000725:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000728:	74 06                	je     c0000730 <memmove+0x90>
c000072a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000072d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000730:	5b                   	pop    ebx
c0000731:	89 e8                	mov    eax,ebp
c0000733:	5e                   	pop    esi
c0000734:	5f                   	pop    edi
c0000735:	5d                   	pop    ebp
c0000736:	c3                   	ret    
c0000737:	90                   	nop
c0000738:	76 f6                	jbe    c0000730 <memmove+0x90>
c000073a:	85 d2                	test   edx,edx
c000073c:	74 f2                	je     c0000730 <memmove+0x90>
c000073e:	4b                   	dec    ebx
c000073f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000742:	66 90                	xchg   ax,ax
c0000744:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000747:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074a:	4a                   	dec    edx
c000074b:	75 f7                	jne    c0000744 <memmove+0xa4>
c000074d:	5b                   	pop    ebx
c000074e:	89 e8                	mov    eax,ebp
c0000750:	5e                   	pop    esi
c0000751:	5f                   	pop    edi
c0000752:	5d                   	pop    ebp
c0000753:	c3                   	ret    
c0000754:	01 ea                	add    edx,ebp
c0000756:	89 e9                	mov    ecx,ebp
c0000758:	8a 03                	mov    al,BYTE PTR [ebx]
c000075a:	41                   	inc    ecx
c000075b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000075e:	43                   	inc    ebx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	75 f5                	jne    c0000758 <memmove+0xb8>
c0000763:	eb cb                	jmp    c0000730 <memmove+0x90>
c0000765:	8d 76 00             	lea    esi,[esi+0x0]

c0000768 <memcpy>:
c0000768:	57                   	push   edi
c0000769:	56                   	push   esi
c000076a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000076e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000772:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000776:	89 c7                	mov    edi,eax
c0000778:	fc                   	cld    
c0000779:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000077b:	5e                   	pop    esi
c000077c:	5f                   	pop    edi
c000077d:	c3                   	ret    
c000077e:	66 90                	xchg   ax,ax

c0000780 <memset>:
c0000780:	57                   	push   edi
c0000781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000785:	85 c9                	test   ecx,ecx
c0000787:	74 0b                	je     c0000794 <memset+0x14>
c0000789:	fc                   	cld    
c000078a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000792:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000798:	5f                   	pop    edi
c0000799:	c3                   	ret    
c000079a:	66 90                	xchg   ax,ax

c000079c <strlen>:
c000079c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007a5:	74 09                	je     c00007b0 <strlen+0x14>
c00007a7:	90                   	nop
c00007a8:	40                   	inc    eax
c00007a9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007ad:	75 f9                	jne    c00007a8 <strlen+0xc>
c00007af:	c3                   	ret    
c00007b0:	c3                   	ret    
c00007b1:	8d 76 00             	lea    esi,[esi+0x0]

c00007b4 <strpbrk>:
c00007b4:	57                   	push   edi
c00007b5:	56                   	push   esi
c00007b6:	53                   	push   ebx
c00007b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c1:	84 db                	test   bl,bl
c00007c3:	74 21                	je     c00007e6 <strpbrk+0x32>
c00007c5:	8a 07                	mov    al,BYTE PTR [edi]
c00007c7:	84 c0                	test   al,al
c00007c9:	74 14                	je     c00007df <strpbrk+0x2b>
c00007cb:	38 d8                	cmp    al,bl
c00007cd:	74 19                	je     c00007e8 <strpbrk+0x34>
c00007cf:	89 fa                	mov    edx,edi
c00007d1:	eb 05                	jmp    c00007d8 <strpbrk+0x24>
c00007d3:	90                   	nop
c00007d4:	38 d9                	cmp    cl,bl
c00007d6:	74 10                	je     c00007e8 <strpbrk+0x34>
c00007d8:	42                   	inc    edx
c00007d9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007db:	84 c9                	test   cl,cl
c00007dd:	75 f5                	jne    c00007d4 <strpbrk+0x20>
c00007df:	46                   	inc    esi
c00007e0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007e2:	84 db                	test   bl,bl
c00007e4:	75 e1                	jne    c00007c7 <strpbrk+0x13>
c00007e6:	31 f6                	xor    esi,esi
c00007e8:	89 f0                	mov    eax,esi
c00007ea:	5b                   	pop    ebx
c00007eb:	5e                   	pop    esi
c00007ec:	5f                   	pop    edi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strtok>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007fa:	85 db                	test   ebx,ebx
c00007fc:	75 07                	jne    c0000805 <strtok+0x15>
c00007fe:	eb 2c                	jmp    c000082c <strtok+0x3c>
c0000800:	43                   	inc    ebx
c0000801:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000805:	56                   	push   esi
c0000806:	53                   	push   ebx
c0000807:	e8 a8 ff ff ff       	call   c00007b4 <strpbrk>
c000080c:	5a                   	pop    edx
c000080d:	a3 08 ea 02 c0       	mov    ds:0xc002ea08,eax
c0000812:	59                   	pop    ecx
c0000813:	39 d8                	cmp    eax,ebx
c0000815:	74 e9                	je     c0000800 <strtok+0x10>
c0000817:	85 c0                	test   eax,eax
c0000819:	74 1b                	je     c0000836 <strtok+0x46>
c000081b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000081e:	8d 50 01             	lea    edx,[eax+0x1]
c0000821:	89 d8                	mov    eax,ebx
c0000823:	89 15 08 ea 02 c0    	mov    DWORD PTR ds:0xc002ea08,edx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    
c000082c:	8b 1d 08 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea08
c0000832:	85 db                	test   ebx,ebx
c0000834:	75 cf                	jne    c0000805 <strtok+0x15>
c0000836:	31 c0                	xor    eax,eax
c0000838:	5b                   	pop    ebx
c0000839:	5e                   	pop    esi
c000083a:	c3                   	ret    
c000083b:	90                   	nop

c000083c <strcpy>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000845:	89 c3                	mov    ebx,eax
c0000847:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000849:	84 d2                	test   dl,dl
c000084b:	74 0d                	je     c000085a <strcpy+0x1e>
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	88 13                	mov    BYTE PTR [ebx],dl
c0000852:	41                   	inc    ecx
c0000853:	43                   	inc    ebx
c0000854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000856:	84 d2                	test   dl,dl
c0000858:	75 f6                	jne    c0000850 <strcpy+0x14>
c000085a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000085d:	5b                   	pop    ebx
c000085e:	c3                   	ret    
c000085f:	90                   	nop

c0000860 <strncpy>:
c0000860:	55                   	push   ebp
c0000861:	57                   	push   edi
c0000862:	56                   	push   esi
c0000863:	53                   	push   ebx
c0000864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000868:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000086c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000870:	85 c0                	test   eax,eax
c0000872:	74 39                	je     c00008ad <strncpy+0x4d>
c0000874:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000876:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000879:	8d 55 01             	lea    edx,[ebp+0x1]
c000087c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 31                	je     c00008b4 <strncpy+0x54>
c0000883:	85 c9                	test   ecx,ecx
c0000885:	74 26                	je     c00008ad <strncpy+0x4d>
c0000887:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000088a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000088d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000890:	8d 46 02             	lea    eax,[esi+0x2]
c0000893:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000896:	84 db                	test   bl,bl
c0000898:	75 0f                	jne    c00008a9 <strncpy+0x49>
c000089a:	eb 18                	jmp    c00008b4 <strncpy+0x54>
c000089c:	40                   	inc    eax
c000089d:	42                   	inc    edx
c000089e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a1:	49                   	dec    ecx
c00008a2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a5:	84 db                	test   bl,bl
c00008a7:	74 0b                	je     c00008b4 <strncpy+0x54>
c00008a9:	85 c9                	test   ecx,ecx
c00008ab:	75 ef                	jne    c000089c <strncpy+0x3c>
c00008ad:	5b                   	pop    ebx
c00008ae:	89 e8                	mov    eax,ebp
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	5d                   	pop    ebp
c00008b3:	c3                   	ret    
c00008b4:	85 c9                	test   ecx,ecx
c00008b6:	74 f5                	je     c00008ad <strncpy+0x4d>
c00008b8:	fc                   	cld    
c00008b9:	31 c0                	xor    eax,eax
c00008bb:	89 d7                	mov    edi,edx
c00008bd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008bf:	89 e8                	mov    eax,ebp
c00008c1:	5b                   	pop    ebx
c00008c2:	5e                   	pop    esi
c00008c3:	5f                   	pop    edi
c00008c4:	5d                   	pop    ebp
c00008c5:	c3                   	ret    
c00008c6:	66 90                	xchg   ax,ax

c00008c8 <strcmp>:
c00008c8:	56                   	push   esi
c00008c9:	53                   	push   ebx
c00008ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008d4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008d7:	38 d1                	cmp    cl,dl
c00008d9:	75 1d                	jne    c00008f8 <strcmp+0x30>
c00008db:	84 c9                	test   cl,cl
c00008dd:	74 21                	je     c0000900 <strcmp+0x38>
c00008df:	b8 01 00 00 00       	mov    eax,0x1
c00008e4:	eb 07                	jmp    c00008ed <strcmp+0x25>
c00008e6:	66 90                	xchg   ax,ax
c00008e8:	40                   	inc    eax
c00008e9:	84 d2                	test   dl,dl
c00008eb:	74 13                	je     c0000900 <strcmp+0x38>
c00008ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008f4:	38 ca                	cmp    dl,cl
c00008f6:	74 f0                	je     c00008e8 <strcmp+0x20>
c00008f8:	0f b6 c2             	movzx  eax,dl
c00008fb:	5b                   	pop    ebx
c00008fc:	29 c8                	sub    eax,ecx
c00008fe:	5e                   	pop    esi
c00008ff:	c3                   	ret    
c0000900:	31 c0                	xor    eax,eax
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	c3                   	ret    
c0000905:	8d 76 00             	lea    esi,[esi+0x0]

c0000908 <strchr>:
c0000908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000090c:	8a 10                	mov    dl,BYTE PTR [eax]
c000090e:	84 d2                	test   dl,dl
c0000910:	74 15                	je     c0000927 <strchr+0x1f>
c0000912:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000916:	38 ca                	cmp    dl,cl
c0000918:	75 06                	jne    c0000920 <strchr+0x18>
c000091a:	eb 0e                	jmp    c000092a <strchr+0x22>
c000091c:	38 ca                	cmp    dl,cl
c000091e:	74 09                	je     c0000929 <strchr+0x21>
c0000920:	40                   	inc    eax
c0000921:	8a 10                	mov    dl,BYTE PTR [eax]
c0000923:	84 d2                	test   dl,dl
c0000925:	75 f5                	jne    c000091c <strchr+0x14>
c0000927:	31 c0                	xor    eax,eax
c0000929:	c3                   	ret    
c000092a:	c3                   	ret    
c000092b:	90                   	nop

c000092c <strncmp>:
c000092c:	57                   	push   edi
c000092d:	56                   	push   esi
c000092e:	53                   	push   ebx
c000092f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000093b:	85 ff                	test   edi,edi
c000093d:	74 28                	je     c0000967 <strncmp+0x3b>
c000093f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000941:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000944:	38 d1                	cmp    cl,dl
c0000946:	75 28                	jne    c0000970 <strncmp+0x44>
c0000948:	8d 46 01             	lea    eax,[esi+0x1]
c000094b:	84 c9                	test   cl,cl
c000094d:	74 18                	je     c0000967 <strncmp+0x3b>
c000094f:	01 fe                	add    esi,edi
c0000951:	eb 0f                	jmp    c0000962 <strncmp+0x36>
c0000953:	90                   	nop
c0000954:	8a 10                	mov    dl,BYTE PTR [eax]
c0000956:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000959:	38 ca                	cmp    dl,cl
c000095b:	75 13                	jne    c0000970 <strncmp+0x44>
c000095d:	40                   	inc    eax
c000095e:	84 d2                	test   dl,dl
c0000960:	74 05                	je     c0000967 <strncmp+0x3b>
c0000962:	43                   	inc    ebx
c0000963:	39 c6                	cmp    esi,eax
c0000965:	75 ed                	jne    c0000954 <strncmp+0x28>
c0000967:	5b                   	pop    ebx
c0000968:	31 c0                	xor    eax,eax
c000096a:	5e                   	pop    esi
c000096b:	5f                   	pop    edi
c000096c:	c3                   	ret    
c000096d:	8d 76 00             	lea    esi,[esi+0x0]
c0000970:	5b                   	pop    ebx
c0000971:	0f b6 c2             	movzx  eax,dl
c0000974:	5e                   	pop    esi
c0000975:	29 c8                	sub    eax,ecx
c0000977:	5f                   	pop    edi
c0000978:	c3                   	ret    
c0000979:	8d 76 00             	lea    esi,[esi+0x0]

c000097c <strcat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000986:	89 c3                	mov    ebx,eax
c0000988:	eb 04                	jmp    c000098e <strcat+0x12>
c000098a:	66 90                	xchg   ax,ax
c000098c:	89 d3                	mov    ebx,edx
c000098e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f5                	jne    c000098c <strcat+0x10>
c0000997:	31 d2                	xor    edx,edx
c0000999:	8d 76 00             	lea    esi,[esi+0x0]
c000099c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000099f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009a2:	42                   	inc    edx
c00009a3:	84 c9                	test   cl,cl
c00009a5:	75 f5                	jne    c000099c <strcat+0x20>
c00009a7:	5b                   	pop    ebx
c00009a8:	5e                   	pop    esi
c00009a9:	c3                   	ret    
c00009aa:	66 90                	xchg   ax,ax

c00009ac <strncat>:
c00009ac:	56                   	push   esi
c00009ad:	53                   	push   ebx
c00009ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009ba:	85 f6                	test   esi,esi
c00009bc:	74 1e                	je     c00009dc <strncat+0x30>
c00009be:	89 c2                	mov    edx,eax
c00009c0:	42                   	inc    edx
c00009c1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009c5:	75 f9                	jne    c00009c0 <strncat+0x14>
c00009c7:	01 ce                	add    esi,ecx
c00009c9:	eb 06                	jmp    c00009d1 <strncat+0x25>
c00009cb:	90                   	nop
c00009cc:	39 f1                	cmp    ecx,esi
c00009ce:	74 10                	je     c00009e0 <strncat+0x34>
c00009d0:	42                   	inc    edx
c00009d1:	41                   	inc    ecx
c00009d2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d8:	84 db                	test   bl,bl
c00009da:	75 f0                	jne    c00009cc <strncat+0x20>
c00009dc:	5b                   	pop    ebx
c00009dd:	5e                   	pop    esi
c00009de:	c3                   	ret    
c00009df:	90                   	nop
c00009e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009e3:	5b                   	pop    ebx
c00009e4:	5e                   	pop    esi
c00009e5:	c3                   	ret    
c00009e6:	66 90                	xchg   ax,ax

c00009e8 <strstr>:
c00009e8:	57                   	push   edi
c00009e9:	56                   	push   esi
c00009ea:	53                   	push   ebx
c00009eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009f3:	57                   	push   edi
c00009f4:	e8 a3 fd ff ff       	call   c000079c <strlen>
c00009f9:	59                   	pop    ecx
c00009fa:	85 c0                	test   eax,eax
c00009fc:	74 2a                	je     c0000a28 <strstr+0x40>
c00009fe:	89 c6                	mov    esi,eax
c0000a00:	eb 12                	jmp    c0000a14 <strstr+0x2c>
c0000a02:	66 90                	xchg   ax,ax
c0000a04:	56                   	push   esi
c0000a05:	57                   	push   edi
c0000a06:	53                   	push   ebx
c0000a07:	e8 58 fc ff ff       	call   c0000664 <memcmp>
c0000a0c:	83 c4 0c             	add    esp,0xc
c0000a0f:	85 c0                	test   eax,eax
c0000a11:	74 15                	je     c0000a28 <strstr+0x40>
c0000a13:	43                   	inc    ebx
c0000a14:	53                   	push   ebx
c0000a15:	e8 82 fd ff ff       	call   c000079c <strlen>
c0000a1a:	5a                   	pop    edx
c0000a1b:	39 f0                	cmp    eax,esi
c0000a1d:	73 e5                	jae    c0000a04 <strstr+0x1c>
c0000a1f:	5b                   	pop    ebx
c0000a20:	31 c0                	xor    eax,eax
c0000a22:	5e                   	pop    esi
c0000a23:	5f                   	pop    edi
c0000a24:	c3                   	ret    
c0000a25:	8d 76 00             	lea    esi,[esi+0x0]
c0000a28:	89 d8                	mov    eax,ebx
c0000a2a:	5b                   	pop    ebx
c0000a2b:	5e                   	pop    esi
c0000a2c:	5f                   	pop    edi
c0000a2d:	c3                   	ret    
c0000a2e:	66 90                	xchg   ax,ax

c0000a30 <toupper>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 00 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd6500],0x2
c0000a3e:	74 03                	je     c0000a43 <toupper+0x13>
c0000a40:	83 e8 20             	sub    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <tolower>:
c0000a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a48:	0f b6 d0             	movzx  edx,al
c0000a4b:	f6 82 00 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6500],0x1
c0000a52:	74 03                	je     c0000a57 <tolower+0x13>
c0000a54:	83 c0 20             	add    eax,0x20
c0000a57:	c3                   	ret    

c0000a58 <simple_strtoul>:
c0000a58:	55                   	push   ebp
c0000a59:	57                   	push   edi
c0000a5a:	56                   	push   esi
c0000a5b:	53                   	push   ebx
c0000a5c:	83 ec 08             	sub    esp,0x8
c0000a5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a67:	90                   	nop
c0000a68:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a6b:	f6 82 00 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd6500],0x8
c0000a72:	75 05                	jne    c0000a79 <simple_strtoul+0x21>
c0000a74:	80 fa 09             	cmp    dl,0x9
c0000a77:	75 03                	jne    c0000a7c <simple_strtoul+0x24>
c0000a79:	41                   	inc    ecx
c0000a7a:	eb ec                	jmp    c0000a68 <simple_strtoul+0x10>
c0000a7c:	80 fa 2d             	cmp    dl,0x2d
c0000a7f:	0f 84 1b 01 00 00    	je     c0000ba0 <simple_strtoul+0x148>
c0000a85:	80 fa 2b             	cmp    dl,0x2b
c0000a88:	0f 84 c2 00 00 00    	je     c0000b50 <simple_strtoul+0xf8>
c0000a8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a96:	85 f6                	test   esi,esi
c0000a98:	0f 85 c3 00 00 00    	jne    c0000b61 <simple_strtoul+0x109>
c0000a9e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa0:	80 fa 30             	cmp    dl,0x30
c0000aa3:	0f 84 47 01 00 00    	je     c0000bf0 <simple_strtoul+0x198>
c0000aa9:	be 0a 00 00 00       	mov    esi,0xa
c0000aae:	84 d2                	test   dl,dl
c0000ab0:	0f 84 6f 01 00 00    	je     c0000c25 <simple_strtoul+0x1cd>
c0000ab6:	31 ed                	xor    ebp,ebp
c0000ab8:	31 ff                	xor    edi,edi
c0000aba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac1:	eb 2b                	jmp    c0000aee <simple_strtoul+0x96>
c0000ac3:	90                   	nop
c0000ac4:	83 eb 30             	sub    ebx,0x30
c0000ac7:	39 f3                	cmp    ebx,esi
c0000ac9:	73 4d                	jae    c0000b18 <simple_strtoul+0xc0>
c0000acb:	31 d2                	xor    edx,edx
c0000acd:	89 d8                	mov    eax,ebx
c0000acf:	f7 d0                	not    eax
c0000ad1:	f7 f6                	div    esi
c0000ad3:	39 f8                	cmp    eax,edi
c0000ad5:	0f 82 b1 00 00 00    	jb     c0000b8c <simple_strtoul+0x134>
c0000adb:	0f af fe             	imul   edi,esi
c0000ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ae5:	01 df                	add    edi,ebx
c0000ae7:	41                   	inc    ecx
c0000ae8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aea:	84 d2                	test   dl,dl
c0000aec:	74 2a                	je     c0000b18 <simple_strtoul+0xc0>
c0000aee:	0f b6 da             	movzx  ebx,dl
c0000af1:	f6 83 00 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6500],0x4
c0000af8:	75 ca                	jne    c0000ac4 <simple_strtoul+0x6c>
c0000afa:	0f be d2             	movsx  edx,dl
c0000afd:	52                   	push   edx
c0000afe:	e8 2d ff ff ff       	call   c0000a30 <toupper>
c0000b03:	5b                   	pop    ebx
c0000b04:	0f b6 d0             	movzx  edx,al
c0000b07:	f6 82 00 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6500],0x1
c0000b0e:	74 08                	je     c0000b18 <simple_strtoul+0xc0>
c0000b10:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b13:	39 f3                	cmp    ebx,esi
c0000b15:	72 b4                	jb     c0000acb <simple_strtoul+0x73>
c0000b17:	90                   	nop
c0000b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1c:	85 c0                	test   eax,eax
c0000b1e:	74 14                	je     c0000b34 <simple_strtoul+0xdc>
c0000b20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b23:	09 f8                	or     eax,edi
c0000b25:	75 71                	jne    c0000b98 <simple_strtoul+0x140>
c0000b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b2f:	31 ff                	xor    edi,edi
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	90                   	nop
c0000b34:	4d                   	dec    ebp
c0000b35:	75 05                	jne    c0000b3c <simple_strtoul+0xe4>
c0000b37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b3c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b41:	75 02                	jne    c0000b45 <simple_strtoul+0xed>
c0000b43:	f7 df                	neg    edi
c0000b45:	83 c4 08             	add    esp,0x8
c0000b48:	89 f8                	mov    eax,edi
c0000b4a:	5b                   	pop    ebx
c0000b4b:	5e                   	pop    esi
c0000b4c:	5f                   	pop    edi
c0000b4d:	5d                   	pop    ebp
c0000b4e:	c3                   	ret    
c0000b4f:	90                   	nop
c0000b50:	41                   	inc    ecx
c0000b51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b59:	85 f6                	test   esi,esi
c0000b5b:	0f 84 3d ff ff ff    	je     c0000a9e <simple_strtoul+0x46>
c0000b61:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b64:	83 f8 22             	cmp    eax,0x22
c0000b67:	77 6a                	ja     c0000bd3 <simple_strtoul+0x17b>
c0000b69:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b6b:	83 fe 08             	cmp    esi,0x8
c0000b6e:	0f 84 a2 00 00 00    	je     c0000c16 <simple_strtoul+0x1be>
c0000b74:	83 fe 10             	cmp    esi,0x10
c0000b77:	0f 85 31 ff ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000b7d:	80 fa 30             	cmp    dl,0x30
c0000b80:	74 2c                	je     c0000bae <simple_strtoul+0x156>
c0000b82:	be 10 00 00 00       	mov    esi,0x10
c0000b87:	e9 22 ff ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000b8c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b91:	31 ff                	xor    edi,edi
c0000b93:	e9 4f ff ff ff       	jmp    c0000ae7 <simple_strtoul+0x8f>
c0000b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b9e:	eb 94                	jmp    c0000b34 <simple_strtoul+0xdc>
c0000ba0:	41                   	inc    ecx
c0000ba1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba9:	e9 e8 fe ff ff       	jmp    c0000a96 <simple_strtoul+0x3e>
c0000bae:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bb2:	88 04 24             	mov    BYTE PTR [esp],al
c0000bb5:	50                   	push   eax
c0000bb6:	e8 89 fe ff ff       	call   c0000a44 <tolower>
c0000bbb:	5e                   	pop    esi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	0f 84 84 00 00 00    	je     c0000c49 <simple_strtoul+0x1f1>
c0000bc5:	41                   	inc    ecx
c0000bc6:	be 10 00 00 00       	mov    esi,0x10
c0000bcb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bce:	e9 db fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000bd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bd7:	85 ff                	test   edi,edi
c0000bd9:	74 5c                	je     c0000c37 <simple_strtoul+0x1df>
c0000bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bdf:	85 c9                	test   ecx,ecx
c0000be1:	75 4e                	jne    c0000c31 <simple_strtoul+0x1d9>
c0000be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be9:	31 ff                	xor    edi,edi
c0000beb:	e9 4c ff ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000bf0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bf4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bf7:	50                   	push   eax
c0000bf8:	e8 47 fe ff ff       	call   c0000a44 <tolower>
c0000bfd:	5d                   	pop    ebp
c0000bfe:	83 f8 78             	cmp    eax,0x78
c0000c01:	74 3b                	je     c0000c3e <simple_strtoul+0x1e6>
c0000c03:	41                   	inc    ecx
c0000c04:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c07:	80 fa 30             	cmp    dl,0x30
c0000c0a:	74 13                	je     c0000c1f <simple_strtoul+0x1c7>
c0000c0c:	be 08 00 00 00       	mov    esi,0x8
c0000c11:	e9 98 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000c16:	80 fa 30             	cmp    dl,0x30
c0000c19:	0f 85 8f fe ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000c1f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c22:	41                   	inc    ecx
c0000c23:	eb e7                	jmp    c0000c0c <simple_strtoul+0x1b4>
c0000c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c29:	85 d2                	test   edx,edx
c0000c2b:	74 0a                	je     c0000c37 <simple_strtoul+0x1df>
c0000c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c35:	89 30                	mov    DWORD PTR [eax],esi
c0000c37:	31 ff                	xor    edi,edi
c0000c39:	e9 fe fe ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000c3e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c41:	83 c1 02             	add    ecx,0x2
c0000c44:	e9 34 ff ff ff       	jmp    c0000b7d <simple_strtoul+0x125>
c0000c49:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c4c:	be 10 00 00 00       	mov    esi,0x10
c0000c51:	83 c1 02             	add    ecx,0x2
c0000c54:	e9 55 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>

c0000c59 <largebin_index>:
c0000c59:	89 c2                	mov    edx,eax
c0000c5b:	c1 ea 08             	shr    edx,0x8
c0000c5e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c64:	77 10                	ja     c0000c76 <largebin_index+0x1d>
c0000c66:	0f bd d2             	bsr    edx,edx
c0000c69:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c6c:	d3 e8                	shr    eax,cl
c0000c6e:	83 e0 03             	and    eax,0x3
c0000c71:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c75:	c3                   	ret    
c0000c76:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c7b:	c3                   	ret    

c0000c7c <malloc_init_state>:
c0000c7c:	53                   	push   ebx
c0000c7d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c80:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c86:	89 d1                	mov    ecx,edx
c0000c88:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c8b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c8e:	83 c2 08             	add    edx,0x8
c0000c91:	39 da                	cmp    edx,ebx
c0000c93:	75 f3                	jne    c0000c88 <malloc_init_state+0xc>
c0000c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c97:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca1:	83 e2 03             	and    edx,0x3
c0000ca4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cae:	83 ca 48             	or     edx,0x48
c0000cb1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cbb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cc5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ccc:	89 10                	mov    DWORD PTR [eax],edx
c0000cce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cdb:	5b                   	pop    ebx
c0000cdc:	c3                   	ret    

c0000cdd <malloc_consolidate>:
c0000cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cdf:	85 d2                	test   edx,edx
c0000ce1:	0f 84 d8 00 00 00    	je     c0000dbf <malloc_consolidate+0xe2>
c0000ce7:	55                   	push   ebp
c0000ce8:	83 e2 fd             	and    edx,0xfffffffd
c0000ceb:	57                   	push   edi
c0000cec:	89 c5                	mov    ebp,eax
c0000cee:	56                   	push   esi
c0000cef:	8d 78 34             	lea    edi,[eax+0x34]
c0000cf2:	53                   	push   ebx
c0000cf3:	83 ec 10             	sub    esp,0x10
c0000cf6:	89 10                	mov    DWORD PTR [eax],edx
c0000cf8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cfc:	c1 ea 03             	shr    edx,0x3
c0000cff:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d03:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d0a:	85 d2                	test   edx,edx
c0000d0c:	0f 84 98 00 00 00    	je     c0000daa <malloc_consolidate+0xcd>
c0000d12:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d19:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d1c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d23:	89 f9                	mov    ecx,edi
c0000d25:	83 e1 fe             	and    ecx,0xfffffffe
c0000d28:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d2e:	83 e3 fc             	and    ebx,0xfffffffc
c0000d31:	83 e7 01             	and    edi,0x1
c0000d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d37:	75 14                	jne    c0000d4d <malloc_consolidate+0x70>
c0000d39:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d3b:	29 fa                	sub    edx,edi
c0000d3d:	01 f9                	add    ecx,edi
c0000d3f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d42:	89 fb                	mov    ebx,edi
c0000d44:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d47:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d4a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d4d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d50:	74 40                	je     c0000d92 <malloc_consolidate+0xb5>
c0000d52:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d55:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d58:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d5c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d5f:	83 e7 01             	and    edi,0x1
c0000d62:	75 0e                	jne    c0000d72 <malloc_consolidate+0x95>
c0000d64:	01 d9                	add    ecx,ebx
c0000d66:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d6f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d72:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d75:	89 ce                	mov    esi,ecx
c0000d77:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d7a:	83 ce 01             	or     esi,0x1
c0000d7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d80:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d83:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d86:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d8a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d8d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d90:	eb 0c                	jmp    c0000d9e <malloc_consolidate+0xc1>
c0000d92:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d95:	83 c9 01             	or     ecx,0x1
c0000d98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d9b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000da2:	85 d2                	test   edx,edx
c0000da4:	0f 85 6f ff ff ff    	jne    c0000d19 <malloc_consolidate+0x3c>
c0000daa:	83 c5 04             	add    ebp,0x4
c0000dad:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db1:	0f 85 50 ff ff ff    	jne    c0000d07 <malloc_consolidate+0x2a>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	5b                   	pop    ebx
c0000dbb:	5e                   	pop    esi
c0000dbc:	5f                   	pop    edi
c0000dbd:	5d                   	pop    ebp
c0000dbe:	c3                   	ret    
c0000dbf:	e9 b8 fe ff ff       	jmp    c0000c7c <malloc_init_state>

c0000dc4 <dlfree>:
c0000dc4:	57                   	push   edi
c0000dc5:	56                   	push   esi
c0000dc6:	53                   	push   ebx
c0000dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcb:	85 db                	test   ebx,ebx
c0000dcd:	0f 84 e2 00 00 00    	je     c0000eb5 <dlfree+0xf1>
c0000dd3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd6:	8b 0d 20 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea20
c0000ddc:	89 f0                	mov    eax,esi
c0000dde:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de1:	83 e0 fc             	and    eax,0xfffffffc
c0000de4:	39 c1                	cmp    ecx,eax
c0000de6:	72 24                	jb     c0000e0c <dlfree+0x48>
c0000de8:	83 c9 03             	or     ecx,0x3
c0000deb:	c1 e8 03             	shr    eax,0x3
c0000dee:	89 0d 20 ea 02 c0    	mov    DWORD PTR ds:0xc002ea20,ecx
c0000df4:	83 e8 02             	sub    eax,0x2
c0000df7:	8b 0c 85 24 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd15dc]
c0000dfe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e00:	89 14 85 24 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd15dc],edx
c0000e07:	e9 a9 00 00 00       	jmp    c0000eb5 <dlfree+0xf1>
c0000e0c:	83 e6 02             	and    esi,0x2
c0000e0f:	0f 85 a0 00 00 00    	jne    c0000eb5 <dlfree+0xf1>
c0000e15:	83 c9 01             	or     ecx,0x1
c0000e18:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1b:	89 0d 20 ea 02 c0    	mov    DWORD PTR ds:0xc002ea20,ecx
c0000e21:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e24:	83 e1 fc             	and    ecx,0xfffffffc
c0000e27:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2b:	75 13                	jne    c0000e40 <dlfree+0x7c>
c0000e2d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e30:	29 da                	sub    edx,ebx
c0000e32:	01 d8                	add    eax,ebx
c0000e34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e40:	39 35 4c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea4c,esi
c0000e46:	74 40                	je     c0000e88 <dlfree+0xc4>
c0000e48:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e4f:	80 e3 01             	and    bl,0x1
c0000e52:	75 0e                	jne    c0000e62 <dlfree+0x9e>
c0000e54:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e57:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5a:	01 c8                	add    eax,ecx
c0000e5c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e5f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e62:	8b 0d 5c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea5c
c0000e68:	c7 42 0c 54 ea 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ea54
c0000e6f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e72:	89 15 5c ea 02 c0    	mov    DWORD PTR ds:0xc002ea5c,edx
c0000e78:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7b:	89 c1                	mov    ecx,eax
c0000e7d:	83 c9 01             	or     ecx,0x1
c0000e80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e83:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e86:	eb 10                	jmp    c0000e98 <dlfree+0xd4>
c0000e88:	01 c8                	add    eax,ecx
c0000e8a:	89 c1                	mov    ecx,eax
c0000e8c:	83 c9 01             	or     ecx,0x1
c0000e8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e92:	89 15 4c ea 02 c0    	mov    DWORD PTR ds:0xc002ea4c,edx
c0000e98:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9d:	76 16                	jbe    c0000eb5 <dlfree+0xf1>
c0000e9f:	f6 05 20 ea 02 c0 02 	test   BYTE PTR ds:0xc002ea20,0x2
c0000ea6:	74 0d                	je     c0000eb5 <dlfree+0xf1>
c0000ea8:	5b                   	pop    ebx
c0000ea9:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	e9 28 fe ff ff       	jmp    c0000cdd <malloc_consolidate>
c0000eb5:	5b                   	pop    ebx
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	c3                   	ret    

c0000eb9 <sYSMALLOc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	89 d3                	mov    ebx,edx
c0000ebf:	83 ec 2c             	sub    esp,0x2c
c0000ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ecc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed6:	74 1f                	je     c0000ef7 <sYSMALLOc+0x3e>
c0000ed8:	89 d8                	mov    eax,ebx
c0000eda:	e8 fe fd ff ff       	call   c0000cdd <malloc_consolidate>
c0000edf:	83 ec 0c             	sub    esp,0xc
c0000ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee6:	83 e8 07             	sub    eax,0x7
c0000ee9:	50                   	push   eax
c0000eea:	e8 30 02 00 00       	call   c000111f <dlmalloc>
c0000eef:	83 c4 10             	add    esp,0x10
c0000ef2:	e9 20 02 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000ef7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efa:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f03:	83 e0 fc             	and    eax,0xfffffffc
c0000f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f0e:	83 c0 10             	add    eax,0x10
c0000f11:	01 c1                	add    ecx,eax
c0000f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f17:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f1e:	74 04                	je     c0000f24 <sYSMALLOc+0x6b>
c0000f20:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f24:	f7 da                	neg    edx
c0000f26:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f2e:	21 d1                	and    ecx,edx
c0000f30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f34:	7f 07                	jg     c0000f3d <sYSMALLOc+0x84>
c0000f36:	31 c0                	xor    eax,eax
c0000f38:	e9 da 01 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000f3d:	83 ec 0c             	sub    esp,0xc
c0000f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f44:	e8 27 e8 00 00       	call   c000f770 <sbrk>
c0000f49:	83 c4 10             	add    esp,0x10
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f51:	74 e3                	je     c0000f36 <sYSMALLOc+0x7d>
c0000f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f57:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f5e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f64:	39 f1                	cmp    ecx,esi
c0000f66:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6c:	75 13                	jne    c0000f81 <sYSMALLOc+0xc8>
c0000f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f72:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f76:	83 c8 01             	or     eax,0x1
c0000f79:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7c:	e9 3e 01 00 00       	jmp    c00010bf <sYSMALLOc+0x206>
c0000f81:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f87:	88 d0                	mov    al,dl
c0000f89:	83 e0 01             	and    eax,0x1
c0000f8c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f95:	0f 95 c0             	setne  al
c0000f98:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9c:	39 f1                	cmp    ecx,esi
c0000f9e:	76 12                	jbe    c0000fb2 <sYSMALLOc+0xf9>
c0000fa0:	84 c0                	test   al,al
c0000fa2:	74 0e                	je     c0000fb2 <sYSMALLOc+0xf9>
c0000fa4:	83 e2 fe             	and    edx,0xfffffffe
c0000fa7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fad:	e9 83 00 00 00       	jmp    c0001035 <sYSMALLOc+0x17c>
c0000fb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb7:	74 7c                	je     c0001035 <sYSMALLOc+0x17c>
c0000fb9:	84 c0                	test   al,al
c0000fbb:	74 0c                	je     c0000fc9 <sYSMALLOc+0x110>
c0000fbd:	89 f0                	mov    eax,esi
c0000fbf:	29 c8                	sub    eax,ecx
c0000fc1:	01 e8                	add    eax,ebp
c0000fc3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc9:	89 f2                	mov    edx,esi
c0000fcb:	83 e2 07             	and    edx,0x7
c0000fce:	74 0c                	je     c0000fdc <sYSMALLOc+0x123>
c0000fd0:	b8 08 00 00 00       	mov    eax,0x8
c0000fd5:	29 d0                	sub    eax,edx
c0000fd7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fda:	eb 04                	jmp    c0000fe0 <sYSMALLOc+0x127>
c0000fdc:	89 f5                	mov    ebp,esi
c0000fde:	31 c0                	xor    eax,eax
c0000fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fec:	01 c1                	add    ecx,eax
c0000fee:	83 ec 0c             	sub    esp,0xc
c0000ff1:	01 f1                	add    ecx,esi
c0000ff3:	01 ca                	add    edx,ecx
c0000ff5:	29 c8                	sub    eax,ecx
c0000ff7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffb:	01 c2                	add    edx,eax
c0000ffd:	52                   	push   edx
c0000ffe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001002:	e8 69 e7 00 00       	call   c000f770 <sbrk>
c0001007:	83 c4 10             	add    esp,0x10
c000100a:	83 f8 ff             	cmp    eax,0xffffffff
c000100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001011:	75 0f                	jne    c0001022 <sYSMALLOc+0x169>
c0001013:	83 ec 0c             	sub    esp,0xc
c0001016:	6a 00                	push   0x0
c0001018:	e8 53 e7 00 00       	call   c000f770 <sbrk>
c000101d:	83 c4 10             	add    esp,0x10
c0001020:	eb 30                	jmp    c0001052 <sYSMALLOc+0x199>
c0001022:	39 c6                	cmp    esi,eax
c0001024:	76 33                	jbe    c0001059 <sYSMALLOc+0x1a0>
c0001026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001031:	01 f0                	add    eax,esi
c0001033:	eb 1d                	jmp    c0001052 <sYSMALLOc+0x199>
c0001035:	83 ec 0c             	sub    esp,0xc
c0001038:	89 f5                	mov    ebp,esi
c000103a:	6a 00                	push   0x0
c000103c:	e8 2f e7 00 00       	call   c000f770 <sbrk>
c0001041:	89 c2                	mov    edx,eax
c0001043:	29 f2                	sub    edx,esi
c0001045:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001052:	31 d2                	xor    edx,edx
c0001054:	83 f8 ff             	cmp    eax,0xffffffff
c0001057:	74 66                	je     c00010bf <sYSMALLOc+0x206>
c0001059:	29 e8                	sub    eax,ebp
c000105b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000105e:	01 d0                	add    eax,edx
c0001060:	83 c8 01             	or     eax,0x1
c0001063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001066:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001071:	74 4c                	je     c00010bf <sYSMALLOc+0x206>
c0001073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001077:	83 e8 0c             	sub    eax,0xc
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c2                	mov    edx,eax
c000107f:	83 ca 01             	or     edx,0x1
c0001082:	83 f8 0f             	cmp    eax,0xf
c0001085:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001088:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001090:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001098:	76 25                	jbe    c00010bf <sYSMALLOc+0x206>
c000109a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a0:	83 ec 0c             	sub    esp,0xc
c00010a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ad:	83 c7 08             	add    edi,0x8
c00010b0:	57                   	push   edi
c00010b1:	e8 0e fd ff ff       	call   c0000dc4 <dlfree>
c00010b6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x21a>
c00010cd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010df:	73 06                	jae    c00010e7 <sYSMALLOc+0x22e>
c00010e1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ed:	83 e2 fc             	and    edx,0xfffffffc
c00010f0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f4:	0f 82 3c fe ff ff    	jb     c0000f36 <sYSMALLOc+0x7d>
c00010fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010fe:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001101:	29 fa                	sub    edx,edi
c0001103:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001106:	83 ca 01             	or     edx,0x1
c0001109:	89 fb                	mov    ebx,edi
c000110b:	83 c0 08             	add    eax,0x8
c000110e:	83 cb 01             	or     ebx,0x1
c0001111:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	83 c4 2c             	add    esp,0x2c
c000111a:	5b                   	pop    ebx
c000111b:	5e                   	pop    esi
c000111c:	5f                   	pop    edi
c000111d:	5d                   	pop    ebp
c000111e:	c3                   	ret    

c000111f <dlmalloc>:
c000111f:	55                   	push   ebp
c0001120:	57                   	push   edi
c0001121:	56                   	push   esi
c0001122:	53                   	push   ebx
c0001123:	83 ec 1c             	sub    esp,0x1c
c0001126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112a:	83 f8 df             	cmp    eax,0xffffffdf
c000112d:	0f 87 70 03 00 00    	ja     c00014a3 <dlmalloc+0x384>
c0001133:	83 c0 0b             	add    eax,0xb
c0001136:	be 10 00 00 00       	mov    esi,0x10
c000113b:	83 f8 0f             	cmp    eax,0xf
c000113e:	76 05                	jbe    c0001145 <dlmalloc+0x26>
c0001140:	83 e0 f8             	and    eax,0xfffffff8
c0001143:	89 c6                	mov    esi,eax
c0001145:	8b 3d 20 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea20
c000114b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001151:	75 17                	jne    c000116a <dlmalloc+0x4b>
c0001153:	85 ff                	test   edi,edi
c0001155:	0f 85 05 03 00 00    	jne    c0001460 <dlmalloc+0x341>
c000115b:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001160:	e8 78 fb ff ff       	call   c0000cdd <malloc_consolidate>
c0001165:	e9 f6 02 00 00       	jmp    c0001460 <dlmalloc+0x341>
c000116a:	39 f7                	cmp    edi,esi
c000116c:	72 1f                	jb     c000118d <dlmalloc+0x6e>
c000116e:	89 f2                	mov    edx,esi
c0001170:	c1 ea 03             	shr    edx,0x3
c0001173:	83 ea 02             	sub    edx,0x2
c0001176:	8b 04 95 24 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15dc]
c000117d:	85 c0                	test   eax,eax
c000117f:	74 0c                	je     c000118d <dlmalloc+0x6e>
c0001181:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001184:	89 0c 95 24 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd15dc],ecx
c000118b:	eb 30                	jmp    c00011bd <dlmalloc+0x9e>
c000118d:	89 f0                	mov    eax,esi
c000118f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001195:	77 2e                	ja     c00011c5 <dlmalloc+0xa6>
c0001197:	c1 e8 03             	shr    eax,0x3
c000119a:	8d 14 c5 54 ea 02 c0 	lea    edx,[eax*8-0x3ffd15ac]
c00011a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ab:	39 c3                	cmp    ebx,eax
c00011ad:	74 2e                	je     c00011dd <dlmalloc+0xbe>
c00011af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011ba:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bd:	83 c0 08             	add    eax,0x8
c00011c0:	e9 e0 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c00011c5:	e8 8f fa ff ff       	call   c0000c59 <largebin_index>
c00011ca:	83 e7 02             	and    edi,0x2
c00011cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d1:	74 0a                	je     c00011dd <dlmalloc+0xbe>
c00011d3:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c00011d8:	e8 00 fb ff ff       	call   c0000cdd <malloc_consolidate>
c00011dd:	8d 46 10             	lea    eax,[esi+0x10]
c00011e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e4:	8b 1d 60 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea60
c00011ea:	81 fb 54 ea 02 c0    	cmp    ebx,0xc002ea54
c00011f0:	0f 84 13 01 00 00    	je     c0001309 <dlmalloc+0x1ea>
c00011f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fc:	83 e7 fc             	and    edi,0xfffffffc
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	77 4c                	ja     c0001253 <dlmalloc+0x134>
c0001207:	3d 54 ea 02 c0       	cmp    eax,0xc002ea54
c000120c:	75 45                	jne    c0001253 <dlmalloc+0x134>
c000120e:	39 1d 50 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea50,ebx
c0001214:	75 3d                	jne    c0001253 <dlmalloc+0x134>
c0001216:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121a:	73 37                	jae    c0001253 <dlmalloc+0x134>
c000121c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000121f:	89 fa                	mov    edx,edi
c0001221:	a3 5c ea 02 c0       	mov    ds:0xc002ea5c,eax
c0001226:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c000122b:	a3 50 ea 02 c0       	mov    ds:0xc002ea50,eax
c0001230:	29 f2                	sub    edx,esi
c0001232:	c7 40 08 54 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea54
c0001239:	c7 40 0c 54 ea 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ea54
c0001240:	83 ce 01             	or     esi,0x1
c0001243:	89 d1                	mov    ecx,edx
c0001245:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001248:	83 c9 01             	or     ecx,0x1
c000124b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000124e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001251:	eb 15                	jmp    c0001268 <dlmalloc+0x149>
c0001253:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0001258:	39 fe                	cmp    esi,edi
c000125a:	c7 40 08 54 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea54
c0001261:	75 0d                	jne    c0001270 <dlmalloc+0x151>
c0001263:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001268:	8d 43 08             	lea    eax,[ebx+0x8]
c000126b:	e9 35 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001270:	89 f8                	mov    eax,edi
c0001272:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001278:	77 19                	ja     c0001293 <dlmalloc+0x174>
c000127a:	c1 e8 03             	shr    eax,0x3
c000127d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001280:	83 c2 0d             	add    edx,0xd
c0001283:	8d 2c 95 18 ea 02 c0 	lea    ebp,[edx*4-0x3ffd15e8]
c000128a:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c0001291:	eb 46                	jmp    c00012d9 <dlmalloc+0x1ba>
c0001293:	e8 c1 f9 ff ff       	call   c0000c59 <largebin_index>
c0001298:	8d 14 00             	lea    edx,[eax+eax*1]
c000129b:	83 c2 0d             	add    edx,0xd
c000129e:	8d 0c 95 20 ea 02 c0 	lea    ecx,[edx*4-0x3ffd15e0]
c00012a5:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c00012ac:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b3:	89 d5                	mov    ebp,edx
c00012b5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b9:	74 1e                	je     c00012d9 <dlmalloc+0x1ba>
c00012bb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012be:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c1:	77 12                	ja     c00012d5 <dlmalloc+0x1b6>
c00012c3:	83 cf 01             	or     edi,0x1
c00012c6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c9:	76 05                	jbe    c00012d0 <dlmalloc+0x1b1>
c00012cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ce:	eb f6                	jmp    c00012c6 <dlmalloc+0x1a7>
c00012d0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d3:	eb 04                	jmp    c00012d9 <dlmalloc+0x1ba>
c00012d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d9:	89 c7                	mov    edi,eax
c00012db:	88 c1                	mov    cl,al
c00012dd:	c1 ff 05             	sar    edi,0x5
c00012e0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e4:	bf 01 00 00 00       	mov    edi,0x1
c00012e9:	d3 e7                	shl    edi,cl
c00012eb:	89 f8                	mov    eax,edi
c00012ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f1:	09 04 bd 54 ed 02 c0 	or     DWORD PTR [edi*4-0x3ffd12ac],eax
c00012f8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012fe:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001301:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001304:	e9 db fe ff ff       	jmp    c00011e4 <dlmalloc+0xc5>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	76 78                	jbe    c0001389 <dlmalloc+0x26a>
c0001311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001315:	8d 04 c5 54 ea 02 c0 	lea    eax,[eax*8-0x3ffd15ac]
c000131c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000131f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001322:	39 ca                	cmp    edx,ecx
c0001324:	74 63                	je     c0001389 <dlmalloc+0x26a>
c0001326:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001329:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132c:	83 e3 fc             	and    ebx,0xfffffffc
c000132f:	39 de                	cmp    esi,ebx
c0001331:	77 52                	ja     c0001385 <dlmalloc+0x266>
c0001333:	89 df                	mov    edi,ebx
c0001335:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001338:	29 f7                	sub    edi,esi
c000133a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133d:	01 d3                	add    ebx,edx
c000133f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001342:	83 ff 0f             	cmp    edi,0xf
c0001345:	8d 42 08             	lea    eax,[edx+0x8]
c0001348:	77 09                	ja     c0001353 <dlmalloc+0x234>
c000134a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000134e:	e9 52 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001353:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001356:	83 ce 01             	or     esi,0x1
c0001359:	89 0d 5c ea 02 c0    	mov    DWORD PTR ds:0xc002ea5c,ecx
c000135f:	89 0d 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,ecx
c0001365:	c7 41 08 54 ea 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ea54
c000136c:	c7 41 0c 54 ea 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ea54
c0001373:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001376:	89 fa                	mov    edx,edi
c0001378:	83 ca 01             	or     edx,0x1
c000137b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000137e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001380:	e9 20 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001385:	89 c2                	mov    edx,eax
c0001387:	eb 99                	jmp    c0001322 <dlmalloc+0x203>
c0001389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138d:	b8 01 00 00 00       	mov    eax,0x1
c0001392:	41                   	inc    ecx
c0001393:	89 cb                	mov    ebx,ecx
c0001395:	8d 14 cd 4c ea 02 c0 	lea    edx,[ecx*8-0x3ffd15b4]
c000139c:	c1 eb 05             	shr    ebx,0x5
c000139f:	d3 e0                	shl    eax,cl
c00013a1:	8b 3c 9d 54 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd12ac]
c00013a8:	39 f8                	cmp    eax,edi
c00013aa:	77 04                	ja     c00013b0 <dlmalloc+0x291>
c00013ac:	85 c0                	test   eax,eax
c00013ae:	75 26                	jne    c00013d6 <dlmalloc+0x2b7>
c00013b0:	43                   	inc    ebx
c00013b1:	83 fb 02             	cmp    ebx,0x2
c00013b4:	0f 87 a6 00 00 00    	ja     c0001460 <dlmalloc+0x341>
c00013ba:	8b 3c 9d 54 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd12ac]
c00013c1:	85 ff                	test   edi,edi
c00013c3:	74 eb                	je     c00013b0 <dlmalloc+0x291>
c00013c5:	89 d8                	mov    eax,ebx
c00013c7:	c1 e0 06             	shl    eax,0x6
c00013ca:	8d 14 85 4c ea 02 c0 	lea    edx,[eax*4-0x3ffd15b4]
c00013d1:	b8 01 00 00 00       	mov    eax,0x1
c00013d6:	85 f8                	test   eax,edi
c00013d8:	75 07                	jne    c00013e1 <dlmalloc+0x2c2>
c00013da:	83 c2 08             	add    edx,0x8
c00013dd:	01 c0                	add    eax,eax
c00013df:	eb f5                	jmp    c00013d6 <dlmalloc+0x2b7>
c00013e1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e4:	39 ca                	cmp    edx,ecx
c00013e6:	75 14                	jne    c00013fc <dlmalloc+0x2dd>
c00013e8:	89 c1                	mov    ecx,eax
c00013ea:	83 c2 08             	add    edx,0x8
c00013ed:	f7 d1                	not    ecx
c00013ef:	01 c0                	add    eax,eax
c00013f1:	21 cf                	and    edi,ecx
c00013f3:	89 3c 9d 54 ed 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd12ac],edi
c00013fa:	eb ac                	jmp    c00013a8 <dlmalloc+0x289>
c00013fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013ff:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001402:	83 e0 fc             	and    eax,0xfffffffc
c0001405:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001408:	89 c3                	mov    ebx,eax
c000140a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140d:	29 f3                	sub    ebx,esi
c000140f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001412:	83 fb 0f             	cmp    ebx,0xf
c0001415:	8d 41 08             	lea    eax,[ecx+0x8]
c0001418:	77 09                	ja     c0001423 <dlmalloc+0x304>
c000141a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000141e:	e9 82 00 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001423:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001426:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142c:	89 3d 5c ea 02 c0    	mov    DWORD PTR ds:0xc002ea5c,edi
c0001432:	89 3d 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,edi
c0001438:	c7 47 08 54 ea 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ea54
c000143f:	c7 47 0c 54 ea 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ea54
c0001446:	77 06                	ja     c000144e <dlmalloc+0x32f>
c0001448:	89 3d 50 ea 02 c0    	mov    DWORD PTR ds:0xc002ea50,edi
c000144e:	83 ce 01             	or     esi,0x1
c0001451:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001454:	89 d9                	mov    ecx,ebx
c0001456:	83 c9 01             	or     ecx,0x1
c0001459:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145c:	89 1a                	mov    DWORD PTR [edx],ebx
c000145e:	eb 45                	jmp    c00014a5 <dlmalloc+0x386>
c0001460:	a1 4c ea 02 c0       	mov    eax,ds:0xc002ea4c
c0001465:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146b:	83 e2 fc             	and    edx,0xfffffffc
c000146e:	39 d1                	cmp    ecx,edx
c0001470:	77 1e                	ja     c0001490 <dlmalloc+0x371>
c0001472:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001475:	89 f3                	mov    ebx,esi
c0001477:	89 0d 4c ea 02 c0    	mov    DWORD PTR ds:0xc002ea4c,ecx
c000147d:	83 cb 01             	or     ebx,0x1
c0001480:	29 f2                	sub    edx,esi
c0001482:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001485:	83 ca 01             	or     edx,0x1
c0001488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148b:	e9 2d fd ff ff       	jmp    c00011bd <dlmalloc+0x9e>
c0001490:	83 c4 1c             	add    esp,0x1c
c0001493:	89 f0                	mov    eax,esi
c0001495:	5b                   	pop    ebx
c0001496:	ba 20 ea 02 c0       	mov    edx,0xc002ea20
c000149b:	5e                   	pop    esi
c000149c:	5f                   	pop    edi
c000149d:	5d                   	pop    ebp
c000149e:	e9 16 fa ff ff       	jmp    c0000eb9 <sYSMALLOc>
c00014a3:	31 c0                	xor    eax,eax
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	5b                   	pop    ebx
c00014a9:	5e                   	pop    esi
c00014aa:	5f                   	pop    edi
c00014ab:	5d                   	pop    ebp
c00014ac:	c3                   	ret    

c00014ad <iALLOc>:
c00014ad:	55                   	push   ebp
c00014ae:	89 c5                	mov    ebp,eax
c00014b0:	57                   	push   edi
c00014b1:	56                   	push   esi
c00014b2:	53                   	push   ebx
c00014b3:	83 ec 2c             	sub    esp,0x2c
c00014b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c2:	83 3d 20 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea20,0x0
c00014c9:	75 12                	jne    c00014dd <iALLOc+0x30>
c00014cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014cf:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c00014d4:	e8 04 f8 ff ff       	call   c0000cdd <malloc_consolidate>
c00014d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	74 12                	je     c00014f6 <iALLOc+0x49>
c00014e4:	85 ed                	test   ebp,ebp
c00014e6:	0f 84 64 01 00 00    	je     c0001650 <iALLOc+0x1a3>
c00014ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f4:	eb 33                	jmp    c0001529 <iALLOc+0x7c>
c00014f6:	85 ed                	test   ebp,ebp
c00014f8:	75 14                	jne    c000150e <iALLOc+0x61>
c00014fa:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001502:	83 c4 2c             	add    esp,0x2c
c0001505:	5b                   	pop    ebx
c0001506:	5e                   	pop    esi
c0001507:	5f                   	pop    edi
c0001508:	5d                   	pop    ebp
c0001509:	e9 11 fc ff ff       	jmp    c000111f <dlmalloc>
c000150e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001515:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151d:	83 f8 0f             	cmp    eax,0xf
c0001520:	76 07                	jbe    c0001529 <iALLOc+0x7c>
c0001522:	83 e0 f8             	and    eax,0xfffffff8
c0001525:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001529:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000152e:	75 09                	jne    c0001539 <iALLOc+0x8c>
c0001530:	89 d0                	mov    eax,edx
c0001532:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001535:	31 f6                	xor    esi,esi
c0001537:	eb 3b                	jmp    c0001574 <iALLOc+0xc7>
c0001539:	8b 02                	mov    eax,DWORD PTR [edx]
c000153b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001543:	83 c0 0b             	add    eax,0xb
c0001546:	83 f8 0f             	cmp    eax,0xf
c0001549:	76 07                	jbe    c0001552 <iALLOc+0xa5>
c000154b:	83 e0 f8             	and    eax,0xfffffff8
c000154e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001556:	0f af f5             	imul   esi,ebp
c0001559:	eb 25                	jmp    c0001580 <iALLOc+0xd3>
c000155b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001560:	bb 10 00 00 00       	mov    ebx,0x10
c0001565:	83 f9 0f             	cmp    ecx,0xf
c0001568:	76 05                	jbe    c000156f <iALLOc+0xc2>
c000156a:	83 e1 f8             	and    ecx,0xfffffff8
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	01 de                	add    esi,ebx
c0001571:	83 c0 04             	add    eax,0x4
c0001574:	39 c7                	cmp    edi,eax
c0001576:	75 e3                	jne    c000155b <iALLOc+0xae>
c0001578:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001580:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001584:	8b 1d 74 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed74
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	c7 05 74 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed74,0x0
c0001597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000159f:	50                   	push   eax
c00015a0:	e8 7a fb ff ff       	call   c000111f <dlmalloc>
c00015a5:	83 c4 10             	add    esp,0x10
c00015a8:	89 1d 74 ed 02 c0    	mov    DWORD PTR ds:0xc002ed74,ebx
c00015ae:	85 c0                	test   eax,eax
c00015b0:	0f 84 92 00 00 00    	je     c0001648 <iALLOc+0x19b>
c00015b6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b9:	8d 78 f8             	lea    edi,[eax-0x8]
c00015bc:	83 e3 fc             	and    ebx,0xfffffffc
c00015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c8:	74 1e                	je     c00015e8 <iALLOc+0x13b>
c00015ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ce:	89 d9                	mov    ecx,ebx
c00015d0:	52                   	push   edx
c00015d1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d5:	83 e9 04             	sub    ecx,0x4
c00015d8:	51                   	push   ecx
c00015d9:	6a 00                	push   0x0
c00015db:	50                   	push   eax
c00015dc:	e8 9f f1 ff ff       	call   c0000780 <memset>
c00015e1:	83 c4 10             	add    esp,0x10
c00015e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ed:	75 14                	jne    c0001603 <iALLOc+0x156>
c00015ef:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f2:	29 f3                	sub    ebx,esi
c00015f4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f7:	83 cb 01             	or     ebx,0x1
c00015fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001601:	89 f3                	mov    ebx,esi
c0001603:	31 c0                	xor    eax,eax
c0001605:	4d                   	dec    ebp
c0001606:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001609:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160d:	39 c5                	cmp    ebp,eax
c000160f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001612:	74 2c                	je     c0001640 <iALLOc+0x193>
c0001614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001618:	85 c9                	test   ecx,ecx
c000161a:	75 15                	jne    c0001631 <iALLOc+0x184>
c000161c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000161f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001622:	b9 10 00 00 00       	mov    ecx,0x10
c0001627:	83 fe 0f             	cmp    esi,0xf
c000162a:	76 05                	jbe    c0001631 <iALLOc+0x184>
c000162c:	83 e6 f8             	and    esi,0xfffffff8
c000162f:	89 f1                	mov    ecx,esi
c0001631:	89 ce                	mov    esi,ecx
c0001633:	29 cb                	sub    ebx,ecx
c0001635:	83 ce 01             	or     esi,0x1
c0001638:	40                   	inc    eax
c0001639:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163c:	01 cf                	add    edi,ecx
c000163e:	eb c6                	jmp    c0001606 <iALLOc+0x159>
c0001640:	83 cb 01             	or     ebx,0x1
c0001643:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001646:	eb 08                	jmp    c0001650 <iALLOc+0x1a3>
c0001648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001654:	83 c4 2c             	add    esp,0x2c
c0001657:	5b                   	pop    ebx
c0001658:	5e                   	pop    esi
c0001659:	5f                   	pop    edi
c000165a:	5d                   	pop    ebp
c000165b:	c3                   	ret    

c000165c <dlrealloc>:
c000165c:	55                   	push   ebp
c000165d:	57                   	push   edi
c000165e:	56                   	push   esi
c000165f:	53                   	push   ebx
c0001660:	83 ec 1c             	sub    esp,0x1c
c0001663:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166b:	85 db                	test   ebx,ebx
c000166d:	75 10                	jne    c000167f <dlrealloc+0x23>
c000166f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001673:	83 c4 1c             	add    esp,0x1c
c0001676:	5b                   	pop    ebx
c0001677:	5e                   	pop    esi
c0001678:	5f                   	pop    edi
c0001679:	5d                   	pop    ebp
c000167a:	e9 a0 fa ff ff       	jmp    c000111f <dlmalloc>
c000167f:	83 f8 df             	cmp    eax,0xffffffdf
c0001682:	76 07                	jbe    c000168b <dlrealloc+0x2f>
c0001684:	31 db                	xor    ebx,ebx
c0001686:	e9 7c 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c000168b:	83 c0 0b             	add    eax,0xb
c000168e:	bf 10 00 00 00       	mov    edi,0x10
c0001693:	83 f8 0f             	cmp    eax,0xf
c0001696:	76 05                	jbe    c000169d <dlrealloc+0x41>
c0001698:	83 e0 f8             	and    eax,0xfffffff8
c000169b:	89 c7                	mov    edi,eax
c000169d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a3:	89 c6                	mov    esi,eax
c00016a5:	83 e6 fc             	and    esi,0xfffffffc
c00016a8:	a8 02                	test   al,0x2
c00016aa:	75 d8                	jne    c0001684 <dlrealloc+0x28>
c00016ac:	39 f7                	cmp    edi,esi
c00016ae:	0f 86 15 01 00 00    	jbe    c00017c9 <dlrealloc+0x16d>
c00016b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bb:	39 15 4c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea4c,edx
c00016c1:	75 33                	jne    c00016f6 <dlrealloc+0x9a>
c00016c3:	83 e1 fc             	and    ecx,0xfffffffc
c00016c6:	01 f1                	add    ecx,esi
c00016c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d3:	77 49                	ja     c000171e <dlrealloc+0xc2>
c00016d5:	01 fd                	add    ebp,edi
c00016d7:	83 e0 01             	and    eax,0x1
c00016da:	09 f8                	or     eax,edi
c00016dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016df:	89 2d 4c ea 02 c0    	mov    DWORD PTR ds:0xc002ea4c,ebp
c00016e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e9:	29 f8                	sub    eax,edi
c00016eb:	83 c8 01             	or     eax,0x1
c00016ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f1:	e9 11 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c00016f6:	89 c8                	mov    eax,ecx
c00016f8:	83 e0 fe             	and    eax,0xfffffffe
c00016fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001700:	75 1c                	jne    c000171e <dlrealloc+0xc2>
c0001702:	83 e1 fc             	and    ecx,0xfffffffc
c0001705:	01 f1                	add    ecx,esi
c0001707:	39 cf                	cmp    edi,ecx
c0001709:	77 13                	ja     c000171e <dlrealloc+0xc2>
c000170b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000170e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001711:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001714:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001717:	89 ce                	mov    esi,ecx
c0001719:	e9 ab 00 00 00       	jmp    c00017c9 <dlrealloc+0x16d>
c000171e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001722:	8d 47 f9             	lea    eax,[edi-0x7]
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	50                   	push   eax
c0001729:	e8 f1 f9 ff ff       	call   c000111f <dlmalloc>
c000172e:	83 c4 10             	add    esp,0x10
c0001731:	89 c1                	mov    ecx,eax
c0001733:	85 c0                	test   eax,eax
c0001735:	0f 84 49 ff ff ff    	je     c0001684 <dlrealloc+0x28>
c000173b:	8d 40 f8             	lea    eax,[eax-0x8]
c000173e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001742:	39 c2                	cmp    edx,eax
c0001744:	75 0a                	jne    c0001750 <dlrealloc+0xf4>
c0001746:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	01 c6                	add    esi,eax
c000174e:	eb 79                	jmp    c00017c9 <dlrealloc+0x16d>
c0001750:	83 ee 04             	sub    esi,0x4
c0001753:	83 fe 27             	cmp    esi,0x27
c0001756:	76 16                	jbe    c000176e <dlrealloc+0x112>
c0001758:	50                   	push   eax
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	51                   	push   ecx
c000175c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001760:	e8 03 f0 ff ff       	call   c0000768 <memcpy>
c0001765:	83 c4 10             	add    esp,0x10
c0001768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176c:	eb 43                	jmp    c00017b1 <dlrealloc+0x155>
c000176e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001770:	83 fe 13             	cmp    esi,0x13
c0001773:	89 01                	mov    DWORD PTR [ecx],eax
c0001775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001778:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000177e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001781:	76 2e                	jbe    c00017b1 <dlrealloc+0x155>
c0001783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001786:	83 fe 1b             	cmp    esi,0x1b
c0001789:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000178f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001792:	76 1d                	jbe    c00017b1 <dlrealloc+0x155>
c0001794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001797:	83 fe 23             	cmp    esi,0x23
c000179a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a3:	76 0c                	jbe    c00017b1 <dlrealloc+0x155>
c00017a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b5:	83 ec 0c             	sub    esp,0xc
c00017b8:	53                   	push   ebx
c00017b9:	e8 06 f6 ff ff       	call   c0000dc4 <dlfree>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c5:	89 cb                	mov    ebx,ecx
c00017c7:	eb 3e                	jmp    c0001807 <dlrealloc+0x1ab>
c00017c9:	89 f2                	mov    edx,esi
c00017cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ce:	29 fa                	sub    edx,edi
c00017d0:	83 e1 01             	and    ecx,0x1
c00017d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d7:	83 fa 0f             	cmp    edx,0xf
c00017da:	77 0b                	ja     c00017e7 <dlrealloc+0x18b>
c00017dc:	09 ce                	or     esi,ecx
c00017de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e5:	eb 20                	jmp    c0001807 <dlrealloc+0x1ab>
c00017e7:	01 fd                	add    ebp,edi
c00017e9:	83 ec 0c             	sub    esp,0xc
c00017ec:	09 cf                	or     edi,ecx
c00017ee:	83 ca 01             	or     edx,0x1
c00017f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f4:	83 c5 08             	add    ebp,0x8
c00017f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fe:	55                   	push   ebp
c00017ff:	e8 c0 f5 ff ff       	call   c0000dc4 <dlfree>
c0001804:	83 c4 10             	add    esp,0x10
c0001807:	83 c4 1c             	add    esp,0x1c
c000180a:	89 d8                	mov    eax,ebx
c000180c:	5b                   	pop    ebx
c000180d:	5e                   	pop    esi
c000180e:	5f                   	pop    edi
c000180f:	5d                   	pop    ebp
c0001810:	c3                   	ret    

c0001811 <dlmemalign>:
c0001811:	55                   	push   ebp
c0001812:	57                   	push   edi
c0001813:	56                   	push   esi
c0001814:	53                   	push   ebx
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001820:	83 fa 08             	cmp    edx,0x8
c0001823:	77 10                	ja     c0001835 <dlmemalign+0x24>
c0001825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001829:	83 c4 0c             	add    esp,0xc
c000182c:	5b                   	pop    ebx
c000182d:	5e                   	pop    esi
c000182e:	5f                   	pop    edi
c000182f:	5d                   	pop    ebp
c0001830:	e9 ea f8 ff ff       	jmp    c000111f <dlmalloc>
c0001835:	bf 10 00 00 00       	mov    edi,0x10
c000183a:	83 fa 0f             	cmp    edx,0xf
c000183d:	76 13                	jbe    c0001852 <dlmemalign+0x41>
c000183f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001842:	85 d1                	test   ecx,edx
c0001844:	75 04                	jne    c000184a <dlmemalign+0x39>
c0001846:	89 d7                	mov    edi,edx
c0001848:	eb 08                	jmp    c0001852 <dlmemalign+0x41>
c000184a:	39 d7                	cmp    edi,edx
c000184c:	73 04                	jae    c0001852 <dlmemalign+0x41>
c000184e:	01 ff                	add    edi,edi
c0001850:	eb f8                	jmp    c000184a <dlmemalign+0x39>
c0001852:	83 f8 df             	cmp    eax,0xffffffdf
c0001855:	76 07                	jbe    c000185e <dlmemalign+0x4d>
c0001857:	31 c0                	xor    eax,eax
c0001859:	e9 ce 00 00 00       	jmp    c000192c <dlmemalign+0x11b>
c000185e:	83 c0 0b             	add    eax,0xb
c0001861:	bd 10 00 00 00       	mov    ebp,0x10
c0001866:	83 f8 0f             	cmp    eax,0xf
c0001869:	76 05                	jbe    c0001870 <dlmemalign+0x5f>
c000186b:	83 e0 f8             	and    eax,0xfffffff8
c000186e:	89 c5                	mov    ebp,eax
c0001870:	83 ec 0c             	sub    esp,0xc
c0001873:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001877:	50                   	push   eax
c0001878:	e8 a2 f8 ff ff       	call   c000111f <dlmalloc>
c000187d:	83 c4 10             	add    esp,0x10
c0001880:	89 c1                	mov    ecx,eax
c0001882:	85 c0                	test   eax,eax
c0001884:	74 d1                	je     c0001857 <dlmemalign+0x46>
c0001886:	31 d2                	xor    edx,edx
c0001888:	8d 70 f8             	lea    esi,[eax-0x8]
c000188b:	f7 f7                	div    edi
c000188d:	85 d2                	test   edx,edx
c000188f:	74 62                	je     c00018f3 <dlmemalign+0xe2>
c0001891:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001895:	89 f8                	mov    eax,edi
c0001897:	f7 d8                	neg    eax
c0001899:	21 c3                	and    ebx,eax
c000189b:	83 eb 08             	sub    ebx,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	29 f0                	sub    eax,esi
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	77 02                	ja     c00018a9 <dlmemalign+0x98>
c00018a7:	01 fb                	add    ebx,edi
c00018a9:	89 d8                	mov    eax,ebx
c00018ab:	29 f0                	sub    eax,esi
c00018ad:	89 c6                	mov    esi,eax
c00018af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b2:	89 c2                	mov    edx,eax
c00018b4:	83 e2 fc             	and    edx,0xfffffffc
c00018b7:	29 f2                	sub    edx,esi
c00018b9:	a8 02                	test   al,0x2
c00018bb:	74 10                	je     c00018cd <dlmemalign+0xbc>
c00018bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c0:	83 ca 02             	or     edx,0x2
c00018c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c6:	89 33                	mov    DWORD PTR [ebx],esi
c00018c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cb:	eb 5f                	jmp    c000192c <dlmemalign+0x11b>
c00018cd:	83 ec 0c             	sub    esp,0xc
c00018d0:	89 d0                	mov    eax,edx
c00018d2:	83 c8 01             	or     eax,0x1
c00018d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e0:	83 e0 01             	and    eax,0x1
c00018e3:	09 f0                	or     eax,esi
c00018e5:	89 de                	mov    esi,ebx
c00018e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ea:	51                   	push   ecx
c00018eb:	e8 d4 f4 ff ff       	call   c0000dc4 <dlfree>
c00018f0:	83 c4 10             	add    esp,0x10
c00018f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f6:	a8 02                	test   al,0x2
c00018f8:	75 2f                	jne    c0001929 <dlmemalign+0x118>
c00018fa:	83 e0 fc             	and    eax,0xfffffffc
c00018fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001900:	39 c2                	cmp    edx,eax
c0001902:	73 25                	jae    c0001929 <dlmemalign+0x118>
c0001904:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	29 e8                	sub    eax,ebp
c000190c:	83 c2 08             	add    edx,0x8
c000190f:	83 c8 01             	or     eax,0x1
c0001912:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001915:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001918:	83 e0 01             	and    eax,0x1
c000191b:	09 c5                	or     ebp,eax
c000191d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001920:	52                   	push   edx
c0001921:	e8 9e f4 ff ff       	call   c0000dc4 <dlfree>
c0001926:	83 c4 10             	add    esp,0x10
c0001929:	8d 46 08             	lea    eax,[esi+0x8]
c000192c:	83 c4 0c             	add    esp,0xc
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlcalloc>:
c0001934:	53                   	push   ebx
c0001935:	83 ec 14             	sub    esp,0x14
c0001938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001941:	50                   	push   eax
c0001942:	e8 d8 f7 ff ff       	call   c000111f <dlmalloc>
c0001947:	83 c4 10             	add    esp,0x10
c000194a:	89 c3                	mov    ebx,eax
c000194c:	85 c0                	test   eax,eax
c000194e:	74 77                	je     c00019c7 <dlcalloc+0x93>
c0001950:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001953:	89 d0                	mov    eax,edx
c0001955:	83 e0 fc             	and    eax,0xfffffffc
c0001958:	80 e2 02             	and    dl,0x2
c000195b:	75 5a                	jne    c00019b7 <dlcalloc+0x83>
c000195d:	83 e8 04             	sub    eax,0x4
c0001960:	83 f8 27             	cmp    eax,0x27
c0001963:	76 03                	jbe    c0001968 <dlcalloc+0x34>
c0001965:	51                   	push   ecx
c0001966:	eb 53                	jmp    c00019bb <dlcalloc+0x87>
c0001968:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000196e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001975:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197c:	83 f8 13             	cmp    eax,0x13
c000197f:	76 46                	jbe    c00019c7 <dlcalloc+0x93>
c0001981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000198f:	83 f8 1b             	cmp    eax,0x1b
c0001992:	76 33                	jbe    c00019c7 <dlcalloc+0x93>
c0001994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a2:	83 f8 23             	cmp    eax,0x23
c00019a5:	76 20                	jbe    c00019c7 <dlcalloc+0x93>
c00019a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b5:	eb 10                	jmp    c00019c7 <dlcalloc+0x93>
c00019b7:	83 e8 08             	sub    eax,0x8
c00019ba:	52                   	push   edx
c00019bb:	50                   	push   eax
c00019bc:	6a 00                	push   0x0
c00019be:	53                   	push   ebx
c00019bf:	e8 bc ed ff ff       	call   c0000780 <memset>
c00019c4:	83 c4 10             	add    esp,0x10
c00019c7:	89 d8                	mov    eax,ebx
c00019c9:	83 c4 08             	add    esp,0x8
c00019cc:	5b                   	pop    ebx
c00019cd:	c3                   	ret    

c00019ce <dlcfree>:
c00019ce:	e9 f1 f3 ff ff       	jmp    c0000dc4 <dlfree>

c00019d3 <dlindependent_calloc>:
c00019d3:	83 ec 28             	sub    esp,0x28
c00019d6:	b9 03 00 00 00       	mov    ecx,0x3
c00019db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ef:	e8 b9 fa ff ff       	call   c00014ad <iALLOc>
c00019f4:	83 c4 2c             	add    esp,0x2c
c00019f7:	c3                   	ret    

c00019f8 <dlindependent_comalloc>:
c00019f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a00:	31 c9                	xor    ecx,ecx
c0001a02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0a:	e9 9e fa ff ff       	jmp    c00014ad <iALLOc>

c0001a0f <dlvalloc>:
c0001a0f:	83 ec 0c             	sub    esp,0xc
c0001a12:	83 3d 20 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea20,0x0
c0001a19:	75 0a                	jne    c0001a25 <dlvalloc+0x16>
c0001a1b:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001a20:	e8 b8 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a25:	50                   	push   eax
c0001a26:	50                   	push   eax
c0001a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2b:	ff 35 7c ed 02 c0    	push   DWORD PTR ds:0xc002ed7c
c0001a31:	e8 db fd ff ff       	call   c0001811 <dlmemalign>
c0001a36:	83 c4 1c             	add    esp,0x1c
c0001a39:	c3                   	ret    

c0001a3a <dlpvalloc>:
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 3d 20 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea20,0x0
c0001a44:	75 0a                	jne    c0001a50 <dlpvalloc+0x16>
c0001a46:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001a4b:	e8 8d f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a50:	a1 7c ed 02 c0       	mov    eax,ds:0xc002ed7c
c0001a55:	89 c1                	mov    ecx,eax
c0001a57:	52                   	push   edx
c0001a58:	f7 d9                	neg    ecx
c0001a5a:	52                   	push   edx
c0001a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a63:	21 ca                	and    edx,ecx
c0001a65:	52                   	push   edx
c0001a66:	50                   	push   eax
c0001a67:	e8 a5 fd ff ff       	call   c0001811 <dlmemalign>
c0001a6c:	83 c4 1c             	add    esp,0x1c
c0001a6f:	c3                   	ret    

c0001a70 <dlmalloc_trim>:
c0001a70:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001a75:	e8 63 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a7a:	31 c0                	xor    eax,eax
c0001a7c:	c3                   	ret    

c0001a7d <dlmalloc_usable_size>:
c0001a7d:	53                   	push   ebx
c0001a7e:	31 c0                	xor    eax,eax
c0001a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a84:	85 c9                	test   ecx,ecx
c0001a86:	74 24                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001a88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8b:	f6 c2 02             	test   dl,0x2
c0001a8e:	74 08                	je     c0001a98 <dlmalloc_usable_size+0x1b>
c0001a90:	83 e2 fc             	and    edx,0xfffffffc
c0001a93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a96:	eb 14                	jmp    c0001aac <dlmalloc_usable_size+0x2f>
c0001a98:	89 d3                	mov    ebx,edx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001a9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa4:	74 06                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001aa6:	83 e2 fc             	and    edx,0xfffffffc
c0001aa9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aac:	5b                   	pop    ebx
c0001aad:	c3                   	ret    

c0001aae <dlmallinfo>:
c0001aae:	55                   	push   ebp
c0001aaf:	57                   	push   edi
c0001ab0:	56                   	push   esi
c0001ab1:	53                   	push   ebx
c0001ab2:	83 ec 08             	sub    esp,0x8
c0001ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab9:	83 3d 4c ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea4c,0x0
c0001ac0:	75 0a                	jne    c0001acc <dlmallinfo+0x1e>
c0001ac2:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001ac7:	e8 11 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001acc:	a1 4c ea 02 c0       	mov    eax,ds:0xc002ea4c
c0001ad1:	31 ed                	xor    ebp,ebp
c0001ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad6:	31 c9                	xor    ecx,ecx
c0001ad8:	83 e0 fc             	and    eax,0xfffffffc
c0001adb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adf:	31 c0                	xor    eax,eax
c0001ae1:	8b 14 85 24 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd15dc]
c0001ae8:	85 d2                	test   edx,edx
c0001aea:	74 0e                	je     c0001afa <dlmallinfo+0x4c>
c0001aec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aef:	45                   	inc    ebp
c0001af0:	83 e6 fc             	and    esi,0xfffffffc
c0001af3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af6:	01 f1                	add    ecx,esi
c0001af8:	eb ee                	jmp    c0001ae8 <dlmallinfo+0x3a>
c0001afa:	40                   	inc    eax
c0001afb:	83 f8 0a             	cmp    eax,0xa
c0001afe:	75 e1                	jne    c0001ae1 <dlmallinfo+0x33>
c0001b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b0e:	b8 54 ea 02 c0       	mov    eax,0xc002ea54
c0001b13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b16:	39 f0                	cmp    eax,esi
c0001b18:	74 10                	je     c0001b2a <dlmallinfo+0x7c>
c0001b1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001b20:	83 e7 fc             	and    edi,0xfffffffc
c0001b23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b26:	01 fa                	add    edx,edi
c0001b28:	eb ec                	jmp    c0001b16 <dlmallinfo+0x68>
c0001b2a:	83 c0 08             	add    eax,0x8
c0001b2d:	3d 4c ed 02 c0       	cmp    eax,0xc002ed4c
c0001b32:	75 df                	jne    c0001b13 <dlmallinfo+0x65>
c0001b34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b37:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3d:	a1 88 ed 02 c0       	mov    eax,ds:0xc002ed88
c0001b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b45:	89 03                	mov    DWORD PTR [ebx],eax
c0001b47:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4a:	8b 35 70 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed70
c0001b50:	29 d0                	sub    eax,edx
c0001b52:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b58:	8b 35 84 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed84
c0001b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b65:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b68:	8b 35 94 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed94
c0001b6e:	89 d8                	mov    eax,ebx
c0001b70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b73:	83 c4 08             	add    esp,0x8
c0001b76:	5b                   	pop    ebx
c0001b77:	5e                   	pop    esi
c0001b78:	5f                   	pop    edi
c0001b79:	5d                   	pop    ebp
c0001b7a:	c2 04 00             	ret    0x4

c0001b7d <dlmalloc_stats>:
c0001b7d:	83 ec 30             	sub    esp,0x30
c0001b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b84:	50                   	push   eax
c0001b85:	e8 24 ff ff ff       	call   c0001aae <dlmallinfo>
c0001b8a:	83 c4 30             	add    esp,0x30
c0001b8d:	c3                   	ret    

c0001b8e <dlmallopt>:
c0001b8e:	56                   	push   esi
c0001b8f:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c0001b94:	53                   	push   ebx
c0001b95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9d:	e8 3b f1 ff ff       	call   c0000cdd <malloc_consolidate>
c0001ba2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba5:	83 f8 05             	cmp    eax,0x5
c0001ba8:	77 67                	ja     c0001c11 <dlmallopt+0x83>
c0001baa:	ff 24 85 04 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd63fc]
c0001bb1:	83 fb 50             	cmp    ebx,0x50
c0001bb4:	77 5b                	ja     c0001c11 <dlmallopt+0x83>
c0001bb6:	ba 08 00 00 00       	mov    edx,0x8
c0001bbb:	85 db                	test   ebx,ebx
c0001bbd:	74 12                	je     c0001bd1 <dlmallopt+0x43>
c0001bbf:	83 c3 0b             	add    ebx,0xb
c0001bc2:	ba 10 00 00 00       	mov    edx,0x10
c0001bc7:	83 fb 0f             	cmp    ebx,0xf
c0001bca:	76 05                	jbe    c0001bd1 <dlmallopt+0x43>
c0001bcc:	89 da                	mov    edx,ebx
c0001bce:	83 e2 f8             	and    edx,0xfffffff8
c0001bd1:	a1 20 ea 02 c0       	mov    eax,ds:0xc002ea20
c0001bd6:	83 e0 03             	and    eax,0x3
c0001bd9:	09 d0                	or     eax,edx
c0001bdb:	a3 20 ea 02 c0       	mov    ds:0xc002ea20,eax
c0001be0:	eb 31                	jmp    c0001c13 <dlmallopt+0x85>
c0001be2:	89 1d 64 ed 02 c0    	mov    DWORD PTR ds:0xc002ed64,ebx
c0001be8:	eb 06                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bea:	89 1d 68 ed 02 c0    	mov    DWORD PTR ds:0xc002ed68,ebx
c0001bf0:	be 01 00 00 00       	mov    esi,0x1
c0001bf5:	eb 1c                	jmp    c0001c13 <dlmallopt+0x85>
c0001bf7:	89 1d 6c ed 02 c0    	mov    DWORD PTR ds:0xc002ed6c,ebx
c0001bfd:	eb f1                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bff:	31 f6                	xor    esi,esi
c0001c01:	85 db                	test   ebx,ebx
c0001c03:	75 0e                	jne    c0001c13 <dlmallopt+0x85>
c0001c05:	c7 05 74 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed74,0x0
c0001c0f:	eb df                	jmp    c0001bf0 <dlmallopt+0x62>
c0001c11:	31 f6                	xor    esi,esi
c0001c13:	89 f0                	mov    eax,esi
c0001c15:	5b                   	pop    ebx
c0001c16:	5e                   	pop    esi
c0001c17:	c3                   	ret    

c0001c18 <disk_status>:
c0001c18:	31 c0                	xor    eax,eax
c0001c1a:	c3                   	ret    

c0001c1b <disk_initialize>:
c0001c1b:	31 c0                	xor    eax,eax
c0001c1d:	c3                   	ret    

c0001c1e <disk_read>:
c0001c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c23:	0f b6 04 85 00 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb00]
c0001c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2f:	e9 9e f8 01 00       	jmp    c00214d2 <fatWrapperReadDisk>

c0001c34 <disk_write>:
c0001c34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c39:	0f b6 04 85 00 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb00]
c0001c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c45:	e9 cf f8 01 00       	jmp    c0021519 <fatWrapperWriteDisk>

c0001c4a <disk_ioctl>:
c0001c4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c58:	0f b6 04 85 00 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb00]
c0001c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c64:	e9 f7 f8 01 00       	jmp    c0021560 <fatWrapperIoctl>

c0001c69 <ld_word>:
c0001c69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c70:	c1 e2 08             	shl    edx,0x8
c0001c73:	09 d0                	or     eax,edx
c0001c75:	c3                   	ret    

c0001c76 <ld_dword>:
c0001c76:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7a:	89 d1                	mov    ecx,edx
c0001c7c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c80:	c1 e1 08             	shl    ecx,0x8
c0001c83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c86:	09 ca                	or     edx,ecx
c0001c88:	c1 e2 08             	shl    edx,0x8
c0001c8b:	09 d0                	or     eax,edx
c0001c8d:	c3                   	ret    

c0001c8e <ld_qword>:
c0001c8e:	57                   	push   edi
c0001c8f:	56                   	push   esi
c0001c90:	53                   	push   ebx
c0001c91:	31 db                	xor    ebx,ebx
c0001c93:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c96:	89 df                	mov    edi,ebx
c0001c98:	89 ce                	mov    esi,ecx
c0001c9a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca2:	c1 e6 08             	shl    esi,0x8
c0001ca5:	09 f2                	or     edx,esi
c0001ca7:	89 d6                	mov    esi,edx
c0001ca9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cad:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb1:	c1 e6 08             	shl    esi,0x8
c0001cb4:	09 f2                	or     edx,esi
c0001cb6:	89 d6                	mov    esi,edx
c0001cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc3:	c1 e6 08             	shl    esi,0x8
c0001cc6:	89 fb                	mov    ebx,edi
c0001cc8:	09 f2                	or     edx,esi
c0001cca:	89 d1                	mov    ecx,edx
c0001ccc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd0:	c1 e1 08             	shl    ecx,0x8
c0001cd3:	89 da                	mov    edx,ebx
c0001cd5:	09 c8                	or     eax,ecx
c0001cd7:	5b                   	pop    ebx
c0001cd8:	5e                   	pop    esi
c0001cd9:	5f                   	pop    edi
c0001cda:	c3                   	ret    

c0001cdb <st_word>:
c0001cdb:	66 89 10             	mov    WORD PTR [eax],dx
c0001cde:	c3                   	ret    

c0001cdf <st_dword>:
c0001cdf:	89 10                	mov    DWORD PTR [eax],edx
c0001ce1:	c3                   	ret    

c0001ce2 <st_qword>:
c0001ce2:	89 10                	mov    DWORD PTR [eax],edx
c0001ce4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce7:	c3                   	ret    

c0001ce8 <mem_cpy>:
c0001ce8:	85 c9                	test   ecx,ecx
c0001cea:	74 10                	je     c0001cfc <mem_cpy+0x14>
c0001cec:	57                   	push   edi
c0001ced:	01 c1                	add    ecx,eax
c0001cef:	56                   	push   esi
c0001cf0:	89 c7                	mov    edi,eax
c0001cf2:	89 d6                	mov    esi,edx
c0001cf4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf5:	39 f9                	cmp    ecx,edi
c0001cf7:	75 fb                	jne    c0001cf4 <mem_cpy+0xc>
c0001cf9:	5e                   	pop    esi
c0001cfa:	5f                   	pop    edi
c0001cfb:	c3                   	ret    
c0001cfc:	c3                   	ret    

c0001cfd <mem_set>:
c0001cfd:	01 c1                	add    ecx,eax
c0001cff:	40                   	inc    eax
c0001d00:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d03:	39 c8                	cmp    eax,ecx
c0001d05:	75 f8                	jne    c0001cff <mem_set+0x2>
c0001d07:	c3                   	ret    

c0001d08 <mem_cmp>:
c0001d08:	57                   	push   edi
c0001d09:	56                   	push   esi
c0001d0a:	89 c6                	mov    esi,eax
c0001d0c:	53                   	push   ebx
c0001d0d:	46                   	inc    esi
c0001d0e:	42                   	inc    edx
c0001d0f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d13:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d17:	29 fb                	sub    ebx,edi
c0001d19:	89 cf                	mov    edi,ecx
c0001d1b:	29 f7                	sub    edi,esi
c0001d1d:	01 c7                	add    edi,eax
c0001d1f:	74 04                	je     c0001d25 <mem_cmp+0x1d>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	74 e8                	je     c0001d0d <mem_cmp+0x5>
c0001d25:	89 d8                	mov    eax,ebx
c0001d27:	5b                   	pop    ebx
c0001d28:	5e                   	pop    esi
c0001d29:	5f                   	pop    edi
c0001d2a:	c3                   	ret    

c0001d2b <chk_chr>:
c0001d2b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d2e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d31:	74 07                	je     c0001d3a <chk_chr+0xf>
c0001d33:	39 d1                	cmp    ecx,edx
c0001d35:	74 03                	je     c0001d3a <chk_chr+0xf>
c0001d37:	40                   	inc    eax
c0001d38:	eb f1                	jmp    c0001d2b <chk_chr>
c0001d3a:	89 c8                	mov    eax,ecx
c0001d3c:	c3                   	ret    

c0001d3d <dbc_1st>:
c0001d3d:	31 c0                	xor    eax,eax
c0001d3f:	c3                   	ret    

c0001d40 <dbc_2nd>:
c0001d40:	31 c0                	xor    eax,eax
c0001d42:	c3                   	ret    

c0001d43 <tchar2uni>:
c0001d43:	57                   	push   edi
c0001d44:	89 c7                	mov    edi,eax
c0001d46:	56                   	push   esi
c0001d47:	53                   	push   ebx
c0001d48:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d4f:	84 c9                	test   cl,cl
c0001d51:	78 0a                	js     c0001d5d <tchar2uni+0x1a>
c0001d53:	0f b6 d1             	movzx  edx,cl
c0001d56:	89 f3                	mov    ebx,esi
c0001d58:	e9 9f 00 00 00       	jmp    c0001dfc <tchar2uni+0xb9>
c0001d5d:	88 ca                	mov    dl,cl
c0001d5f:	83 e2 e0             	and    edx,0xffffffe0
c0001d62:	80 fa c0             	cmp    dl,0xc0
c0001d65:	75 0c                	jne    c0001d73 <tchar2uni+0x30>
c0001d67:	89 ca                	mov    edx,ecx
c0001d69:	b9 01 00 00 00       	mov    ecx,0x1
c0001d6e:	83 e2 1f             	and    edx,0x1f
c0001d71:	eb 2e                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d73:	88 ca                	mov    dl,cl
c0001d75:	83 e2 f0             	and    edx,0xfffffff0
c0001d78:	80 fa e0             	cmp    dl,0xe0
c0001d7b:	75 0c                	jne    c0001d89 <tchar2uni+0x46>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0001d84:	83 e2 0f             	and    edx,0xf
c0001d87:	eb 18                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d89:	88 ca                	mov    dl,cl
c0001d8b:	83 e2 f8             	and    edx,0xfffffff8
c0001d8e:	88 d0                	mov    al,dl
c0001d90:	83 ca ff             	or     edx,0xffffffff
c0001d93:	3c f0                	cmp    al,0xf0
c0001d95:	75 6c                	jne    c0001e03 <tchar2uni+0xc0>
c0001d97:	89 ca                	mov    edx,ecx
c0001d99:	b9 03 00 00 00       	mov    ecx,0x3
c0001d9e:	83 e2 07             	and    edx,0x7
c0001da1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da5:	46                   	inc    esi
c0001da6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da9:	88 c8                	mov    al,cl
c0001dab:	83 e0 c0             	and    eax,0xffffffc0
c0001dae:	3c 80                	cmp    al,0x80
c0001db0:	75 4e                	jne    c0001e00 <tchar2uni+0xbd>
c0001db2:	c1 e2 06             	shl    edx,0x6
c0001db5:	83 e1 3f             	and    ecx,0x3f
c0001db8:	09 ca                	or     edx,ecx
c0001dba:	39 de                	cmp    esi,ebx
c0001dbc:	75 e7                	jne    c0001da5 <tchar2uni+0x62>
c0001dbe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc7:	77 37                	ja     c0001e00 <tchar2uni+0xbd>
c0001dc9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dcf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd5:	76 29                	jbe    c0001e00 <tchar2uni+0xbd>
c0001dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddd:	76 1d                	jbe    c0001dfc <tchar2uni+0xb9>
c0001ddf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001deb:	c1 e1 06             	shl    ecx,0x6
c0001dee:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfc:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dfe:	eb 03                	jmp    c0001e03 <tchar2uni+0xc0>
c0001e00:	83 ca ff             	or     edx,0xffffffff
c0001e03:	5b                   	pop    ebx
c0001e04:	89 d0                	mov    eax,edx
c0001e06:	5e                   	pop    esi
c0001e07:	5f                   	pop    edi
c0001e08:	c3                   	ret    

c0001e09 <put_utf>:
c0001e09:	53                   	push   ebx
c0001e0a:	83 f8 7f             	cmp    eax,0x7f
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	b0 00                	mov    al,0x0
c0001e11:	77 11                	ja     c0001e24 <put_utf+0x1b>
c0001e13:	85 c9                	test   ecx,ecx
c0001e15:	0f 84 e5 00 00 00    	je     c0001f00 <put_utf+0xf7>
c0001e1b:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1d:	b0 01                	mov    al,0x1
c0001e1f:	e9 dc 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e24:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2a:	77 23                	ja     c0001e4f <put_utf+0x46>
c0001e2c:	83 f9 01             	cmp    ecx,0x1
c0001e2f:	0f 86 cb 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e35:	89 d8                	mov    eax,ebx
c0001e37:	83 e3 3f             	and    ebx,0x3f
c0001e3a:	c1 e8 06             	shr    eax,0x6
c0001e3d:	83 cb 80             	or     ebx,0xffffff80
c0001e40:	83 c8 c0             	or     eax,0xffffffc0
c0001e43:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e46:	88 02                	mov    BYTE PTR [edx],al
c0001e48:	b0 02                	mov    al,0x2
c0001e4a:	e9 b1 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e4f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e55:	77 40                	ja     c0001e97 <put_utf+0x8e>
c0001e57:	83 f9 02             	cmp    ecx,0x2
c0001e5a:	0f 86 a0 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e60:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e66:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6c:	0f 86 8e 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e72:	89 d8                	mov    eax,ebx
c0001e74:	c1 e8 0c             	shr    eax,0xc
c0001e77:	83 c8 e0             	or     eax,0xffffffe0
c0001e7a:	88 02                	mov    BYTE PTR [edx],al
c0001e7c:	89 d8                	mov    eax,ebx
c0001e7e:	83 e3 3f             	and    ebx,0x3f
c0001e81:	c1 e8 06             	shr    eax,0x6
c0001e84:	83 cb 80             	or     ebx,0xffffff80
c0001e87:	83 e0 3f             	and    eax,0x3f
c0001e8a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8d:	83 c8 80             	or     eax,0xffffff80
c0001e90:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e93:	b0 03                	mov    al,0x3
c0001e95:	eb 69                	jmp    c0001f00 <put_utf+0xf7>
c0001e97:	83 f9 03             	cmp    ecx,0x3
c0001e9a:	76 64                	jbe    c0001f00 <put_utf+0xf7>
c0001e9c:	89 d9                	mov    ecx,ebx
c0001e9e:	0f b7 c3             	movzx  eax,bx
c0001ea1:	66 31 c9             	xor    cx,cx
c0001ea4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eaa:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb0:	c1 e9 06             	shr    ecx,0x6
c0001eb3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb9:	77 43                	ja     c0001efe <put_utf+0xf5>
c0001ebb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec1:	77 3b                	ja     c0001efe <put_utf+0xf5>
c0001ec3:	09 cb                	or     ebx,ecx
c0001ec5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecb:	89 d8                	mov    eax,ebx
c0001ecd:	c1 e8 12             	shr    eax,0x12
c0001ed0:	83 c8 f0             	or     eax,0xfffffff0
c0001ed3:	88 02                	mov    BYTE PTR [edx],al
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	83 c8 80             	or     eax,0xffffff80
c0001ee0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee3:	89 d8                	mov    eax,ebx
c0001ee5:	83 e3 3f             	and    ebx,0x3f
c0001ee8:	c1 e8 06             	shr    eax,0x6
c0001eeb:	83 cb 80             	or     ebx,0xffffff80
c0001eee:	83 e0 3f             	and    eax,0x3f
c0001ef1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef4:	83 c8 80             	or     eax,0xffffff80
c0001ef7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efa:	b0 04                	mov    al,0x4
c0001efc:	eb 02                	jmp    c0001f00 <put_utf+0xf7>
c0001efe:	31 c0                	xor    eax,eax
c0001f00:	5b                   	pop    ebx
c0001f01:	c3                   	ret    

c0001f02 <clst2sect>:
c0001f02:	89 c1                	mov    ecx,eax
c0001f04:	83 ea 02             	sub    edx,0x2
c0001f07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0a:	83 e8 02             	sub    eax,0x2
c0001f0d:	39 d0                	cmp    eax,edx
c0001f0f:	76 0d                	jbe    c0001f1e <clst2sect+0x1c>
c0001f11:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f15:	f7 e2                	mul    edx
c0001f17:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1d:	c3                   	ret    
c0001f1e:	31 c0                	xor    eax,eax
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	c3                   	ret    

c0001f23 <clmt_clust>:
c0001f23:	57                   	push   edi
c0001f24:	89 cf                	mov    edi,ecx
c0001f26:	56                   	push   esi
c0001f27:	89 d6                	mov    esi,edx
c0001f29:	53                   	push   ebx
c0001f2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f2e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f31:	89 f2                	mov    edx,esi
c0001f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f35:	c1 ef 09             	shr    edi,0x9
c0001f38:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f3f:	89 f9                	mov    ecx,edi
c0001f41:	31 ff                	xor    edi,edi
c0001f43:	57                   	push   edi
c0001f44:	56                   	push   esi
c0001f45:	51                   	push   ecx
c0001f46:	52                   	push   edx
c0001f47:	e8 58 52 02 00       	call   c00271a4 <__udivdi3>
c0001f4c:	83 c4 10             	add    esp,0x10
c0001f4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f51:	85 d2                	test   edx,edx
c0001f53:	74 10                	je     c0001f65 <clmt_clust+0x42>
c0001f55:	39 d0                	cmp    eax,edx
c0001f57:	72 07                	jb     c0001f60 <clmt_clust+0x3d>
c0001f59:	29 d0                	sub    eax,edx
c0001f5b:	83 c3 08             	add    ebx,0x8
c0001f5e:	eb ef                	jmp    c0001f4f <clmt_clust+0x2c>
c0001f60:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f63:	89 c2                	mov    edx,eax
c0001f65:	5b                   	pop    ebx
c0001f66:	89 d0                	mov    eax,edx
c0001f68:	5e                   	pop    esi
c0001f69:	5f                   	pop    edi
c0001f6a:	c3                   	ret    

c0001f6b <pick_lfn>:
c0001f6b:	55                   	push   ebp
c0001f6c:	57                   	push   edi
c0001f6d:	56                   	push   esi
c0001f6e:	89 d6                	mov    esi,edx
c0001f70:	53                   	push   ebx
c0001f71:	89 c3                	mov    ebx,eax
c0001f73:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f76:	e8 ee fc ff ff       	call   c0001c69 <ld_word>
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 04                	je     c0001f84 <pick_lfn+0x19>
c0001f80:	31 c0                	xor    eax,eax
c0001f82:	eb 5c                	jmp    c0001fe0 <pick_lfn+0x75>
c0001f84:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f87:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8c:	83 e1 bf             	and    ecx,0xffffffbf
c0001f8f:	31 ff                	xor    edi,edi
c0001f91:	49                   	dec    ecx
c0001f92:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f95:	0f b6 87 20 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd62e0]
c0001f9c:	01 f0                	add    eax,esi
c0001f9e:	e8 c6 fc ff ff       	call   c0001c69 <ld_word>
c0001fa3:	66 85 ed             	test   bp,bp
c0001fa6:	74 11                	je     c0001fb9 <pick_lfn+0x4e>
c0001fa8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fae:	77 d0                	ja     c0001f80 <pick_lfn+0x15>
c0001fb0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb4:	89 c5                	mov    ebp,eax
c0001fb6:	41                   	inc    ecx
c0001fb7:	eb 04                	jmp    c0001fbd <pick_lfn+0x52>
c0001fb9:	66 40                	inc    ax
c0001fbb:	75 c3                	jne    c0001f80 <pick_lfn+0x15>
c0001fbd:	47                   	inc    edi
c0001fbe:	83 ff 0d             	cmp    edi,0xd
c0001fc1:	75 d2                	jne    c0001f95 <pick_lfn+0x2a>
c0001fc3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc6:	74 13                	je     c0001fdb <pick_lfn+0x70>
c0001fc8:	66 85 ed             	test   bp,bp
c0001fcb:	74 0e                	je     c0001fdb <pick_lfn+0x70>
c0001fcd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd3:	77 ab                	ja     c0001f80 <pick_lfn+0x15>
c0001fd5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdb:	b8 01 00 00 00       	mov    eax,0x1
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <put_lfn>:
c0001fe5:	55                   	push   ebp
c0001fe6:	31 ed                	xor    ebp,ebp
c0001fe8:	57                   	push   edi
c0001fe9:	89 d7                	mov    edi,edx
c0001feb:	56                   	push   esi
c0001fec:	31 f6                	xor    esi,esi
c0001fee:	53                   	push   ebx
c0001fef:	83 ec 08             	sub    esp,0x8
c0001ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ffd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002003:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002006:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002009:	31 d2                	xor    edx,edx
c000200b:	e8 cb fc ff ff       	call   c0001cdb <st_word>
c0002010:	0f b6 d9             	movzx  ebx,cl
c0002013:	4b                   	dec    ebx
c0002014:	6b db 0d             	imul   ebx,ebx,0xd
c0002017:	66 83 fe ff          	cmp    si,0xffff
c000201b:	74 08                	je     c0002025 <put_lfn+0x40>
c000201d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002020:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002024:	43                   	inc    ebx
c0002025:	0f b6 85 20 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd62e0]
c000202c:	0f b7 d6             	movzx  edx,si
c000202f:	01 f8                	add    eax,edi
c0002031:	e8 a5 fc ff ff       	call   c0001cdb <st_word>
c0002036:	66 85 f6             	test   si,si
c0002039:	75 03                	jne    c000203e <put_lfn+0x59>
c000203b:	83 ce ff             	or     esi,0xffffffff
c000203e:	45                   	inc    ebp
c000203f:	83 fd 0d             	cmp    ebp,0xd
c0002042:	75 d3                	jne    c0002017 <put_lfn+0x32>
c0002044:	66 46                	inc    si
c0002046:	74 0a                	je     c0002052 <put_lfn+0x6d>
c0002048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002050:	75 09                	jne    c000205b <put_lfn+0x76>
c0002052:	88 c8                	mov    al,cl
c0002054:	83 c8 40             	or     eax,0x40
c0002057:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000205f:	88 07                	mov    BYTE PTR [edi],al
c0002061:	83 c4 08             	add    esp,0x8
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	5d                   	pop    ebp
c0002068:	c3                   	ret    

c0002069 <gen_numname>:
c0002069:	57                   	push   edi
c000206a:	89 cf                	mov    edi,ecx
c000206c:	56                   	push   esi
c000206d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002072:	53                   	push   ebx
c0002073:	89 c6                	mov    esi,eax
c0002075:	83 ec 10             	sub    esp,0x10
c0002078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207c:	e8 67 fc ff ff       	call   c0001ce8 <mem_cpy>
c0002081:	83 fb 05             	cmp    ebx,0x5
c0002084:	76 2d                	jbe    c00020b3 <gen_numname+0x4a>
c0002086:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002089:	66 85 c0             	test   ax,ax
c000208c:	74 25                	je     c00020b3 <gen_numname+0x4a>
c000208e:	83 c7 02             	add    edi,0x2
c0002091:	ba 10 00 00 00       	mov    edx,0x10
c0002096:	01 db                	add    ebx,ebx
c0002098:	89 c1                	mov    ecx,eax
c000209a:	66 d1 e8             	shr    ax,1
c000209d:	83 e1 01             	and    ecx,0x1
c00020a0:	01 cb                	add    ebx,ecx
c00020a2:	0f ba e3 10          	bt     ebx,0x10
c00020a6:	73 06                	jae    c00020ae <gen_numname+0x45>
c00020a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ae:	4a                   	dec    edx
c00020af:	75 e5                	jne    c0002096 <gen_numname+0x2d>
c00020b1:	eb d3                	jmp    c0002086 <gen_numname+0x1d>
c00020b3:	b8 07 00 00 00       	mov    eax,0x7
c00020b8:	88 d9                	mov    cl,bl
c00020ba:	83 e1 0f             	and    ecx,0xf
c00020bd:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c0:	80 fa 39             	cmp    dl,0x39
c00020c3:	76 03                	jbe    c00020c8 <gen_numname+0x5f>
c00020c5:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020cf:	89 da                	mov    edx,ebx
c00020d1:	c1 ea 04             	shr    edx,0x4
c00020d4:	83 fb 0f             	cmp    ebx,0xf
c00020d7:	76 06                	jbe    c00020df <gen_numname+0x76>
c00020d9:	89 c8                	mov    eax,ecx
c00020db:	89 d3                	mov    ebx,edx
c00020dd:	eb d9                	jmp    c00020b8 <gen_numname+0x4f>
c00020df:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e4:	31 d2                	xor    edx,edx
c00020e6:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e9:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ec:	39 ca                	cmp    edx,ecx
c00020ee:	73 18                	jae    c0002108 <gen_numname+0x9f>
c00020f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f3:	3c 20                	cmp    al,0x20
c00020f5:	74 11                	je     c0002108 <gen_numname+0x9f>
c00020f7:	e8 41 fc ff ff       	call   c0001d3d <dbc_1st>
c00020fc:	85 c0                	test   eax,eax
c00020fe:	74 05                	je     c0002105 <gen_numname+0x9c>
c0002100:	39 d3                	cmp    ebx,edx
c0002102:	74 04                	je     c0002108 <gen_numname+0x9f>
c0002104:	42                   	inc    edx
c0002105:	42                   	inc    edx
c0002106:	eb e1                	jmp    c00020e9 <gen_numname+0x80>
c0002108:	b0 20                	mov    al,0x20
c000210a:	83 f9 07             	cmp    ecx,0x7
c000210d:	77 05                	ja     c0002114 <gen_numname+0xab>
c000210f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002113:	41                   	inc    ecx
c0002114:	42                   	inc    edx
c0002115:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002119:	83 fa 07             	cmp    edx,0x7
c000211c:	76 ea                	jbe    c0002108 <gen_numname+0x9f>
c000211e:	83 c4 10             	add    esp,0x10
c0002121:	5b                   	pop    ebx
c0002122:	5e                   	pop    esi
c0002123:	5f                   	pop    edi
c0002124:	c3                   	ret    

c0002125 <sum_sfn>:
c0002125:	31 c9                	xor    ecx,ecx
c0002127:	31 d2                	xor    edx,edx
c0002129:	d0 ca                	ror    dl,1
c000212b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000212e:	41                   	inc    ecx
c000212f:	83 f9 0b             	cmp    ecx,0xb
c0002132:	75 f5                	jne    c0002129 <sum_sfn+0x4>
c0002134:	88 d0                	mov    al,dl
c0002136:	c3                   	ret    

c0002137 <xdir_sum>:
c0002137:	56                   	push   esi
c0002138:	31 c9                	xor    ecx,ecx
c000213a:	53                   	push   ebx
c000213b:	31 d2                	xor    edx,edx
c000213d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002141:	43                   	inc    ebx
c0002142:	c1 e3 05             	shl    ebx,0x5
c0002145:	83 fa 02             	cmp    edx,0x2
c0002148:	74 0b                	je     c0002155 <xdir_sum+0x1e>
c000214a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000214e:	66 d1 c9             	ror    cx,1
c0002151:	01 f1                	add    ecx,esi
c0002153:	eb 05                	jmp    c000215a <xdir_sum+0x23>
c0002155:	ba 03 00 00 00       	mov    edx,0x3
c000215a:	42                   	inc    edx
c000215b:	39 d3                	cmp    ebx,edx
c000215d:	77 e6                	ja     c0002145 <xdir_sum+0xe>
c000215f:	89 c8                	mov    eax,ecx
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	c3                   	ret    

c0002164 <xsum32>:
c0002164:	d1 ca                	ror    edx,1
c0002166:	0f b6 c0             	movzx  eax,al
c0002169:	01 d0                	add    eax,edx
c000216b:	c3                   	ret    

c000216c <get_xfileinfo>:
c000216c:	55                   	push   ebp
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	57                   	push   edi
c0002170:	bd 40 00 00 00       	mov    ebp,0x40
c0002175:	56                   	push   esi
c0002176:	31 ff                	xor    edi,edi
c0002178:	53                   	push   ebx
c0002179:	89 c6                	mov    esi,eax
c000217b:	83 ec 0c             	sub    esp,0xc
c000217e:	89 d3                	mov    ebx,edx
c0002180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002187:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000218e:	76 6d                	jbe    c00021fd <get_xfileinfo+0x91>
c0002190:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002196:	76 0b                	jbe    c00021a3 <get_xfileinfo+0x37>
c0002198:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219c:	bf 01 00 00 00       	mov    edi,0x1
c00021a1:	eb 63                	jmp    c0002206 <get_xfileinfo+0x9a>
c00021a3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a9:	75 03                	jne    c00021ae <get_xfileinfo+0x42>
c00021ab:	83 c5 02             	add    ebp,0x2
c00021ae:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b1:	83 c5 02             	add    ebp,0x2
c00021b4:	e8 b0 fa ff ff       	call   c0001c69 <ld_word>
c00021b9:	ff 04 24             	inc    DWORD PTR [esp]
c00021bc:	66 85 c9             	test   cx,cx
c00021bf:	75 0d                	jne    c00021ce <get_xfileinfo+0x62>
c00021c1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c7:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021cc:	76 2b                	jbe    c00021f9 <get_xfileinfo+0x8d>
c00021ce:	c1 e1 10             	shl    ecx,0x10
c00021d1:	ba ff 00 00 00       	mov    edx,0xff
c00021d6:	0f b7 c0             	movzx  eax,ax
c00021d9:	29 fa                	sub    edx,edi
c00021db:	09 c8                	or     eax,ecx
c00021dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e9:	e8 1b fc ff ff       	call   c0001e09 <put_utf>
c00021ee:	84 c0                	test   al,al
c00021f0:	74 a6                	je     c0002198 <get_xfileinfo+0x2c>
c00021f2:	0f b6 c0             	movzx  eax,al
c00021f5:	01 c7                	add    edi,eax
c00021f7:	31 c0                	xor    eax,eax
c00021f9:	89 c1                	mov    ecx,eax
c00021fb:	eb 8a                	jmp    c0002187 <get_xfileinfo+0x1b>
c00021fd:	85 ff                	test   edi,edi
c00021ff:	74 97                	je     c0002198 <get_xfileinfo+0x2c>
c0002201:	66 85 c9             	test   cx,cx
c0002204:	75 92                	jne    c0002198 <get_xfileinfo+0x2c>
c0002206:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220b:	31 c0                	xor    eax,eax
c000220d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002211:	31 d2                	xor    edx,edx
c0002213:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002216:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002219:	80 e1 10             	and    cl,0x10
c000221c:	75 08                	jne    c0002226 <get_xfileinfo+0xba>
c000221e:	8d 46 38             	lea    eax,[esi+0x38]
c0002221:	e8 68 fa ff ff       	call   c0001c8e <ld_qword>
c0002226:	89 03                	mov    DWORD PTR [ebx],eax
c0002228:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222b:	8d 46 0c             	lea    eax,[esi+0xc]
c000222e:	e8 36 fa ff ff       	call   c0001c69 <ld_word>
c0002233:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002237:	8d 46 0e             	lea    eax,[esi+0xe]
c000223a:	e8 2a fa ff ff       	call   c0001c69 <ld_word>
c000223f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002243:	83 c4 0c             	add    esp,0xc
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    

c000224b <get_ldnumber>:
c000224b:	8b 10                	mov    edx,DWORD PTR [eax]
c000224d:	85 d2                	test   edx,edx
c000224f:	74 14                	je     c0002265 <get_ldnumber+0x1a>
c0002251:	56                   	push   esi
c0002252:	53                   	push   ebx
c0002253:	89 d3                	mov    ebx,edx
c0002255:	43                   	inc    ebx
c0002256:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002259:	80 f9 1f             	cmp    cl,0x1f
c000225c:	76 0d                	jbe    c000226b <get_ldnumber+0x20>
c000225e:	80 f9 3a             	cmp    cl,0x3a
c0002261:	75 f2                	jne    c0002255 <get_ldnumber+0xa>
c0002263:	eb 0a                	jmp    c000226f <get_ldnumber+0x24>
c0002265:	83 c9 ff             	or     ecx,0xffffffff
c0002268:	89 c8                	mov    eax,ecx
c000226a:	c3                   	ret    
c000226b:	31 c9                	xor    ecx,ecx
c000226d:	eb 24                	jmp    c0002293 <get_ldnumber+0x48>
c000226f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002272:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002275:	80 f9 09             	cmp    cl,0x9
c0002278:	77 16                	ja     c0002290 <get_ldnumber+0x45>
c000227a:	83 c2 02             	add    edx,0x2
c000227d:	83 c9 ff             	or     ecx,0xffffffff
c0002280:	39 d3                	cmp    ebx,edx
c0002282:	75 0f                	jne    c0002293 <get_ldnumber+0x48>
c0002284:	89 f2                	mov    edx,esi
c0002286:	89 18                	mov    DWORD PTR [eax],ebx
c0002288:	0f be ca             	movsx  ecx,dl
c000228b:	83 e9 30             	sub    ecx,0x30
c000228e:	eb 03                	jmp    c0002293 <get_ldnumber+0x48>
c0002290:	83 c9 ff             	or     ecx,0xffffffff
c0002293:	89 c8                	mov    eax,ecx
c0002295:	5b                   	pop    ebx
c0002296:	5e                   	pop    esi
c0002297:	c3                   	ret    

c0002298 <crc32>:
c0002298:	56                   	push   esi
c0002299:	89 d6                	mov    esi,edx
c000229b:	53                   	push   ebx
c000229c:	b2 01                	mov    dl,0x1
c000229e:	bb 08 00 00 00       	mov    ebx,0x8
c00022a3:	89 f1                	mov    ecx,esi
c00022a5:	84 d1                	test   cl,dl
c00022a7:	0f 95 c1             	setne  cl
c00022aa:	0f b6 c9             	movzx  ecx,cl
c00022ad:	31 c1                	xor    ecx,eax
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	d1 e8                	shr    eax,1
c00022b3:	80 e1 01             	and    cl,0x1
c00022b6:	74 05                	je     c00022bd <crc32+0x25>
c00022b8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bd:	d1 e2                	shl    edx,1
c00022bf:	4b                   	dec    ebx
c00022c0:	75 e1                	jne    c00022a3 <crc32+0xb>
c00022c2:	5b                   	pop    ebx
c00022c3:	5e                   	pop    esi
c00022c4:	c3                   	ret    

c00022c5 <test_gpt_header>:
c00022c5:	55                   	push   ebp
c00022c6:	b9 10 00 00 00       	mov    ecx,0x10
c00022cb:	57                   	push   edi
c00022cc:	ba 20 9c 02 c0       	mov    edx,0xc0029c20
c00022d1:	56                   	push   esi
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	53                   	push   ebx
c00022d5:	89 c3                	mov    ebx,eax
c00022d7:	e8 2c fa ff ff       	call   c0001d08 <mem_cmp>
c00022dc:	85 c0                	test   eax,eax
c00022de:	75 55                	jne    c0002335 <test_gpt_header+0x70>
c00022e0:	89 c7                	mov    edi,eax
c00022e2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e7:	83 ce ff             	or     esi,0xffffffff
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	83 fd 03             	cmp    ebp,0x3
c00022ef:	76 05                	jbe    c00022f6 <test_gpt_header+0x31>
c00022f1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f6:	89 f0                	mov    eax,esi
c00022f8:	45                   	inc    ebp
c00022f9:	e8 9a ff ff ff       	call   c0002298 <crc32>
c00022fe:	83 fd 4c             	cmp    ebp,0x4c
c0002301:	89 c6                	mov    esi,eax
c0002303:	75 e5                	jne    c00022ea <test_gpt_header+0x25>
c0002305:	8d 43 10             	lea    eax,[ebx+0x10]
c0002308:	f7 d6                	not    esi
c000230a:	e8 67 f9 ff ff       	call   c0001c76 <ld_dword>
c000230f:	39 c6                	cmp    esi,eax
c0002311:	75 22                	jne    c0002335 <test_gpt_header+0x70>
c0002313:	8d 43 54             	lea    eax,[ebx+0x54]
c0002316:	e8 5b f9 ff ff       	call   c0001c76 <ld_dword>
c000231b:	83 c0 80             	add    eax,0xffffff80
c000231e:	75 15                	jne    c0002335 <test_gpt_header+0x70>
c0002320:	8d 43 50             	lea    eax,[ebx+0x50]
c0002323:	e8 4e f9 ff ff       	call   c0001c76 <ld_dword>
c0002328:	3d 80 00 00 00       	cmp    eax,0x80
c000232d:	0f 96 c0             	setbe  al
c0002330:	0f b6 c0             	movzx  eax,al
c0002333:	89 c7                	mov    edi,eax
c0002335:	5b                   	pop    ebx
c0002336:	89 f8                	mov    eax,edi
c0002338:	5e                   	pop    esi
c0002339:	5f                   	pop    edi
c000233a:	5d                   	pop    ebp
c000233b:	c3                   	ret    

c000233c <make_rand>:
c000233c:	56                   	push   esi
c000233d:	85 c0                	test   eax,eax
c000233f:	53                   	push   ebx
c0002340:	75 05                	jne    c0002347 <make_rand+0xb>
c0002342:	b8 01 00 00 00       	mov    eax,0x1
c0002347:	01 d1                	add    ecx,edx
c0002349:	bb 08 00 00 00       	mov    ebx,0x8
c000234e:	89 c6                	mov    esi,eax
c0002350:	d1 e8                	shr    eax,1
c0002352:	83 e6 01             	and    esi,0x1
c0002355:	85 f6                	test   esi,esi
c0002357:	74 05                	je     c000235e <make_rand+0x22>
c0002359:	35 00 00 00 a3       	xor    eax,0xa3000000
c000235e:	4b                   	dec    ebx
c000235f:	75 ed                	jne    c000234e <make_rand+0x12>
c0002361:	42                   	inc    edx
c0002362:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002365:	39 ca                	cmp    edx,ecx
c0002367:	75 e0                	jne    c0002349 <make_rand+0xd>
c0002369:	5b                   	pop    ebx
c000236a:	5e                   	pop    esi
c000236b:	c3                   	ret    

c000236c <validate>:
c000236c:	56                   	push   esi
c000236d:	53                   	push   ebx
c000236e:	89 d6                	mov    esi,edx
c0002370:	51                   	push   ecx
c0002371:	85 c0                	test   eax,eax
c0002373:	75 09                	jne    c000237e <validate+0x12>
c0002375:	b8 09 00 00 00       	mov    eax,0x9
c000237a:	31 c9                	xor    ecx,ecx
c000237c:	eb 2f                	jmp    c00023ad <validate+0x41>
c000237e:	89 c3                	mov    ebx,eax
c0002380:	8b 00                	mov    eax,DWORD PTR [eax]
c0002382:	85 c0                	test   eax,eax
c0002384:	74 ef                	je     c0002375 <validate+0x9>
c0002386:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002389:	74 ea                	je     c0002375 <validate+0x9>
c000238b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000238f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002393:	75 e0                	jne    c0002375 <validate+0x9>
c0002395:	83 ec 0c             	sub    esp,0xc
c0002398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239c:	50                   	push   eax
c000239d:	e8 76 f8 ff ff       	call   c0001c18 <disk_status>
c00023a2:	83 c4 10             	add    esp,0x10
c00023a5:	a8 01                	test   al,0x1
c00023a7:	75 cc                	jne    c0002375 <validate+0x9>
c00023a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ab:	31 c0                	xor    eax,eax
c00023ad:	89 0e                	mov    DWORD PTR [esi],ecx
c00023af:	5a                   	pop    edx
c00023b0:	5b                   	pop    ebx
c00023b1:	5e                   	pop    esi
c00023b2:	c3                   	ret    

c00023b3 <sync_window>:
c00023b3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b7:	0f 84 85 00 00 00    	je     c0002442 <sync_window+0x8f>
c00023bd:	55                   	push   ebp
c00023be:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c1:	57                   	push   edi
c00023c2:	56                   	push   esi
c00023c3:	53                   	push   ebx
c00023c4:	89 c3                	mov    ebx,eax
c00023c6:	83 ec 28             	sub    esp,0x28
c00023c9:	6a 01                	push   0x1
c00023cb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ce:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d1:	55                   	push   ebp
c00023d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d6:	50                   	push   eax
c00023d7:	e8 58 f8 ff ff       	call   c0001c34 <disk_write>
c00023dc:	83 c4 20             	add    esp,0x20
c00023df:	ba 01 00 00 00       	mov    edx,0x1
c00023e4:	85 c0                	test   eax,eax
c00023e6:	75 50                	jne    c0002438 <sync_window+0x85>
c00023e8:	31 ff                	xor    edi,edi
c00023ea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fb:	89 c6                	mov    esi,eax
c00023fd:	89 d7                	mov    edi,edx
c00023ff:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002402:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002406:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002409:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002411:	73 23                	jae    c0002436 <sync_window+0x83>
c0002413:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002417:	75 1d                	jne    c0002436 <sync_window+0x83>
c0002419:	83 ec 0c             	sub    esp,0xc
c000241c:	6a 01                	push   0x1
c000241e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002422:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002426:	52                   	push   edx
c0002427:	50                   	push   eax
c0002428:	55                   	push   ebp
c0002429:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242d:	50                   	push   eax
c000242e:	e8 01 f8 ff ff       	call   c0001c34 <disk_write>
c0002433:	83 c4 20             	add    esp,0x20
c0002436:	31 d2                	xor    edx,edx
c0002438:	83 c4 1c             	add    esp,0x1c
c000243b:	89 d0                	mov    eax,edx
c000243d:	5b                   	pop    ebx
c000243e:	5e                   	pop    esi
c000243f:	5f                   	pop    edi
c0002440:	5d                   	pop    ebp
c0002441:	c3                   	ret    
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 d0                	mov    eax,edx
c0002446:	c3                   	ret    

c0002447 <move_window>:
c0002447:	56                   	push   esi
c0002448:	53                   	push   ebx
c0002449:	89 c3                	mov    ebx,eax
c000244b:	83 ec 14             	sub    esp,0x14
c000244e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002451:	75 07                	jne    c000245a <move_window+0x13>
c0002453:	31 f6                	xor    esi,esi
c0002455:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002458:	74 59                	je     c00024b3 <move_window+0x6c>
c000245a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000245e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002462:	89 d8                	mov    eax,ebx
c0002464:	e8 4a ff ff ff       	call   c00023b3 <sync_window>
c0002469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246d:	89 c6                	mov    esi,eax
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002475:	75 3c                	jne    c00024b3 <move_window+0x6c>
c0002477:	83 ec 0c             	sub    esp,0xc
c000247a:	8d 43 54             	lea    eax,[ebx+0x54]
c000247d:	6a 01                	push   0x1
c000247f:	51                   	push   ecx
c0002480:	52                   	push   edx
c0002481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002485:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002489:	50                   	push   eax
c000248a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248e:	50                   	push   eax
c000248f:	e8 8a f7 ff ff       	call   c0001c1e <disk_read>
c0002494:	83 c4 20             	add    esp,0x20
c0002497:	85 c0                	test   eax,eax
c0002499:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a1:	74 0a                	je     c00024ad <move_window+0x66>
c00024a3:	83 ca ff             	or     edx,0xffffffff
c00024a6:	be 01 00 00 00       	mov    esi,0x1
c00024ab:	89 d1                	mov    ecx,edx
c00024ad:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	83 c4 14             	add    esp,0x14
c00024b8:	5b                   	pop    ebx
c00024b9:	5e                   	pop    esi
c00024ba:	c3                   	ret    

c00024bb <check_fs>:
c00024bb:	53                   	push   ebx
c00024bc:	89 c3                	mov    ebx,eax
c00024be:	83 ec 08             	sub    esp,0x8
c00024c1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024cc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d3:	e8 6f ff ff ff       	call   c0002447 <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	0f 85 89 00 00 00    	jne    c000256e <check_fs+0xb3>
c00024e5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024eb:	e8 79 f7 ff ff       	call   c0001c69 <ld_word>
c00024f0:	ba 03 00 00 00       	mov    edx,0x3
c00024f5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f9:	75 73                	jne    c000256e <check_fs+0xb3>
c00024fb:	ba 40 9d 02 c0       	mov    edx,0xc0029d40
c0002500:	8d 43 54             	lea    eax,[ebx+0x54]
c0002503:	b9 0b 00 00 00       	mov    ecx,0xb
c0002508:	e8 fb f7 ff ff       	call   c0001d08 <mem_cmp>
c000250d:	ba 01 00 00 00       	mov    edx,0x1
c0002512:	85 c0                	test   eax,eax
c0002514:	74 58                	je     c000256e <check_fs+0xb3>
c0002516:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002519:	8d 50 18             	lea    edx,[eax+0x18]
c000251c:	80 fa 01             	cmp    dl,0x1
c000251f:	76 09                	jbe    c000252a <check_fs+0x6f>
c0002521:	ba 02 00 00 00       	mov    edx,0x2
c0002526:	3c eb                	cmp    al,0xeb
c0002528:	75 44                	jne    c000256e <check_fs+0xb3>
c000252a:	ba 10 d2 02 c0       	mov    edx,0xc002d210
c000252f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002535:	b9 03 00 00 00       	mov    ecx,0x3
c000253a:	e8 c9 f7 ff ff       	call   c0001d08 <mem_cmp>
c000253f:	31 d2                	xor    edx,edx
c0002541:	85 c0                	test   eax,eax
c0002543:	74 29                	je     c000256e <check_fs+0xb3>
c0002545:	ba 4c 9d 02 c0       	mov    edx,0xc0029d4c
c000254a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002550:	b9 05 00 00 00       	mov    ecx,0x5
c0002555:	e8 ae f7 ff ff       	call   c0001d08 <mem_cmp>
c000255a:	31 d2                	xor    edx,edx
c000255c:	85 c0                	test   eax,eax
c000255e:	74 0e                	je     c000256e <check_fs+0xb3>
c0002560:	31 d2                	xor    edx,edx
c0002562:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002569:	0f 95 c2             	setne  dl
c000256c:	01 d2                	add    edx,edx
c000256e:	89 d0                	mov    eax,edx
c0002570:	83 c4 08             	add    esp,0x8
c0002573:	5b                   	pop    ebx
c0002574:	c3                   	ret    

c0002575 <find_volume>:
c0002575:	55                   	push   ebp
c0002576:	31 c9                	xor    ecx,ecx
c0002578:	57                   	push   edi
c0002579:	56                   	push   esi
c000257a:	89 d6                	mov    esi,edx
c000257c:	53                   	push   ebx
c000257d:	31 d2                	xor    edx,edx
c000257f:	83 ec 3c             	sub    esp,0x3c
c0002582:	89 c3                	mov    ebx,eax
c0002584:	e8 32 ff ff ff       	call   c00024bb <check_fs>
c0002589:	83 f8 02             	cmp    eax,0x2
c000258c:	74 0e                	je     c000259c <find_volume+0x27>
c000258e:	0f 87 5d 01 00 00    	ja     c00026f1 <find_volume+0x17c>
c0002594:	85 f6                	test   esi,esi
c0002596:	0f 84 55 01 00 00    	je     c00026f1 <find_volume+0x17c>
c000259c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a3:	0f 85 dd 00 00 00    	jne    c0002686 <find_volume+0x111>
c00025a9:	31 c9                	xor    ecx,ecx
c00025ab:	ba 01 00 00 00       	mov    edx,0x1
c00025b0:	89 d8                	mov    eax,ebx
c00025b2:	e8 90 fe ff ff       	call   c0002447 <move_window>
c00025b7:	85 c0                	test   eax,eax
c00025b9:	74 0a                	je     c00025c5 <find_volume+0x50>
c00025bb:	b8 04 00 00 00       	mov    eax,0x4
c00025c0:	e9 2c 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025c5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c8:	89 e8                	mov    eax,ebp
c00025ca:	e8 f6 fc ff ff       	call   c00022c5 <test_gpt_header>
c00025cf:	85 c0                	test   eax,eax
c00025d1:	75 0a                	jne    c00025dd <find_volume+0x68>
c00025d3:	b8 03 00 00 00       	mov    eax,0x3
c00025d8:	e9 14 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025dd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e3:	e8 8e f6 ff ff       	call   c0001c76 <ld_dword>
c00025e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ec:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f2:	e8 97 f6 ff ff       	call   c0001c8e <ld_qword>
c00025f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000260f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002613:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002617:	74 ba                	je     c00025d3 <find_volume+0x5e>
c0002619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	c1 e7 07             	shl    edi,0x7
c0002622:	89 d8                	mov    eax,ebx
c0002624:	89 fa                	mov    edx,edi
c0002626:	c1 ea 09             	shr    edx,0x9
c0002629:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002631:	e8 11 fe ff ff       	call   c0002447 <move_window>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 81                	jne    c00025bb <find_volume+0x46>
c000263a:	81 e7 80 01 00 00    	and    edi,0x180
c0002640:	b9 10 00 00 00       	mov    ecx,0x10
c0002645:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002649:	ba 30 9d 02 c0       	mov    edx,0xc0029d30
c000264e:	e8 b5 f6 ff ff       	call   c0001d08 <mem_cmp>
c0002653:	85 c0                	test   eax,eax
c0002655:	75 29                	jne    c0002680 <find_volume+0x10b>
c0002657:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000265f:	e8 2a f6 ff ff       	call   c0001c8e <ld_qword>
c0002664:	89 d1                	mov    ecx,edx
c0002666:	89 c2                	mov    edx,eax
c0002668:	89 d8                	mov    eax,ebx
c000266a:	e8 4c fe ff ff       	call   c00024bb <check_fs>
c000266f:	85 f6                	test   esi,esi
c0002671:	75 07                	jne    c000267a <find_volume+0x105>
c0002673:	83 f8 01             	cmp    eax,0x1
c0002676:	77 08                	ja     c0002680 <find_volume+0x10b>
c0002678:	eb 77                	jmp    c00026f1 <find_volume+0x17c>
c000267a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000267e:	74 71                	je     c00026f1 <find_volume+0x17c>
c0002680:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002684:	eb 89                	jmp    c000260f <find_volume+0x9a>
c0002686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002690:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269a:	89 cd                	mov    ebp,ecx
c000269c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a0:	89 f8                	mov    eax,edi
c00026a2:	83 c7 10             	add    edi,0x10
c00026a5:	e8 cc f5 ff ff       	call   c0001c76 <ld_dword>
c00026aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ae:	89 01                	mov    DWORD PTR [ecx],eax
c00026b0:	83 c1 04             	add    ecx,0x4
c00026b3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b7:	75 e3                	jne    c000269c <find_volume+0x127>
c00026b9:	31 ff                	xor    edi,edi
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 03                	je     c00026c2 <find_volume+0x14d>
c00026bf:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c6:	85 d2                	test   edx,edx
c00026c8:	74 14                	je     c00026de <find_volume+0x169>
c00026ca:	31 c9                	xor    ecx,ecx
c00026cc:	89 d8                	mov    eax,ebx
c00026ce:	e8 e8 fd ff ff       	call   c00024bb <check_fs>
c00026d3:	83 f8 01             	cmp    eax,0x1
c00026d6:	76 19                	jbe    c00026f1 <find_volume+0x17c>
c00026d8:	85 f6                	test   esi,esi
c00026da:	74 0f                	je     c00026eb <find_volume+0x176>
c00026dc:	eb 13                	jmp    c00026f1 <find_volume+0x17c>
c00026de:	85 f6                	test   esi,esi
c00026e0:	0f 85 ed fe ff ff    	jne    c00025d3 <find_volume+0x5e>
c00026e6:	b8 03 00 00 00       	mov    eax,0x3
c00026eb:	47                   	inc    edi
c00026ec:	83 ff 03             	cmp    edi,0x3
c00026ef:	76 d1                	jbe    c00026c2 <find_volume+0x14d>
c00026f1:	83 c4 3c             	add    esp,0x3c
c00026f4:	5b                   	pop    ebx
c00026f5:	5e                   	pop    esi
c00026f6:	5f                   	pop    edi
c00026f7:	5d                   	pop    ebp
c00026f8:	c3                   	ret    

c00026f9 <mount_volume>:
c00026f9:	55                   	push   ebp
c00026fa:	57                   	push   edi
c00026fb:	89 cf                	mov    edi,ecx
c00026fd:	56                   	push   esi
c00026fe:	53                   	push   ebx
c00026ff:	bb 0b 00 00 00       	mov    ebx,0xb
c0002704:	83 ec 3c             	sub    esp,0x3c
c0002707:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002711:	e8 35 fb ff ff       	call   c000224b <get_ldnumber>
c0002716:	85 c0                	test   eax,eax
c0002718:	0f 88 3a 05 00 00    	js     c0002c58 <mount_volume+0x55f>
c000271e:	8b 2c 85 c0 ed 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1240]
c0002725:	89 c6                	mov    esi,eax
c0002727:	bb 0c 00 00 00       	mov    ebx,0xc
c000272c:	85 ed                	test   ebp,ebp
c000272e:	0f 84 24 05 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002738:	83 e7 fe             	and    edi,0xfffffffe
c000273b:	89 2a                	mov    DWORD PTR [edx],ebp
c000273d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002741:	74 32                	je     c0002775 <mount_volume+0x7c>
c0002743:	83 ec 0c             	sub    esp,0xc
c0002746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274a:	50                   	push   eax
c000274b:	e8 c8 f4 ff ff       	call   c0001c18 <disk_status>
c0002750:	83 c4 10             	add    esp,0x10
c0002753:	a8 01                	test   al,0x1
c0002755:	75 1e                	jne    c0002775 <mount_volume+0x7c>
c0002757:	31 db                	xor    ebx,ebx
c0002759:	89 f9                	mov    ecx,edi
c000275b:	84 c9                	test   cl,cl
c000275d:	0f 84 f5 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002763:	a8 04                	test   al,0x4
c0002765:	0f 84 ed 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c000276b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002770:	e9 e3 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002775:	83 ec 0c             	sub    esp,0xc
c0002778:	89 f0                	mov    eax,esi
c000277a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000277e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002781:	0f b6 f0             	movzx  esi,al
c0002784:	bb 03 00 00 00       	mov    ebx,0x3
c0002789:	56                   	push   esi
c000278a:	e8 8c f4 ff ff       	call   c0001c1b <disk_initialize>
c000278f:	83 c4 10             	add    esp,0x10
c0002792:	a8 01                	test   al,0x1
c0002794:	0f 85 be 04 00 00    	jne    c0002c58 <mount_volume+0x55f>
c000279a:	89 f9                	mov    ecx,edi
c000279c:	84 c9                	test   cl,cl
c000279e:	74 04                	je     c00027a4 <mount_volume+0xab>
c00027a0:	a8 04                	test   al,0x4
c00027a2:	75 c7                	jne    c000276b <mount_volume+0x72>
c00027a4:	31 d2                	xor    edx,edx
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	e8 c8 fd ff ff       	call   c0002575 <find_volume>
c00027ad:	83 f8 04             	cmp    eax,0x4
c00027b0:	75 0a                	jne    c00027bc <mount_volume+0xc3>
c00027b2:	bb 01 00 00 00       	mov    ebx,0x1
c00027b7:	e9 9c 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027bc:	83 f8 01             	cmp    eax,0x1
c00027bf:	76 0a                	jbe    c00027cb <mount_volume+0xd2>
c00027c1:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c6:	e9 8d 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027cb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ce:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d9:	75 17                	jne    c00027f2 <mount_volume+0xf9>
c00027db:	b8 0b 00 00 00       	mov    eax,0xb
c00027e0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e5:	75 da                	jne    c00027c1 <mount_volume+0xc8>
c00027e7:	40                   	inc    eax
c00027e8:	83 f8 40             	cmp    eax,0x40
c00027eb:	75 f3                	jne    c00027e0 <mount_volume+0xe7>
c00027ed:	e9 5a 02 00 00       	jmp    c0002a4c <mount_volume+0x353>
c00027f2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f5:	e8 6f f4 ff ff       	call   c0001c69 <ld_word>
c00027fa:	66 3d 00 02          	cmp    ax,0x200
c00027fe:	75 c1                	jne    c00027c1 <mount_volume+0xc8>
c0002800:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002803:	e8 61 f4 ff ff       	call   c0001c69 <ld_word>
c0002808:	0f b7 c0             	movzx  eax,ax
c000280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000280f:	85 c0                	test   eax,eax
c0002811:	75 0c                	jne    c000281f <mount_volume+0x126>
c0002813:	8d 45 78             	lea    eax,[ebp+0x78]
c0002816:	e8 5b f4 ff ff       	call   c0001c76 <ld_dword>
c000281b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002823:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002826:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	48                   	dec    eax
c0002831:	3c 01                	cmp    al,0x1
c0002833:	77 8c                	ja     c00027c1 <mount_volume+0xc8>
c0002835:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002839:	89 c3                	mov    ebx,eax
c000283b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000283f:	66 85 c0             	test   ax,ax
c0002842:	0f 84 79 ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002848:	8d 40 ff             	lea    eax,[eax-0x1]
c000284b:	85 d8                	test   eax,ebx
c000284d:	0f 85 6e ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002853:	8d 45 65             	lea    eax,[ebp+0x65]
c0002856:	e8 0e f4 ff ff       	call   c0001c69 <ld_word>
c000285b:	89 c7                	mov    edi,eax
c000285d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002861:	a8 0f                	test   al,0xf
c0002863:	0f 85 58 ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002869:	8d 45 67             	lea    eax,[ebp+0x67]
c000286c:	e8 f8 f3 ff ff       	call   c0001c69 <ld_word>
c0002871:	0f b7 f0             	movzx  esi,ax
c0002874:	85 f6                	test   esi,esi
c0002876:	75 0a                	jne    c0002882 <mount_volume+0x189>
c0002878:	8d 45 74             	lea    eax,[ebp+0x74]
c000287b:	e8 f6 f3 ff ff       	call   c0001c76 <ld_dword>
c0002880:	89 c6                	mov    esi,eax
c0002882:	8d 45 62             	lea    eax,[ebp+0x62]
c0002885:	e8 df f3 ff ff       	call   c0001c69 <ld_word>
c000288a:	66 85 c0             	test   ax,ax
c000288d:	0f 84 2e ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002893:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002898:	0f b7 c8             	movzx  ecx,ax
c000289b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a4:	89 fa                	mov    edx,edi
c00028a6:	66 c1 ea 04          	shr    dx,0x4
c00028aa:	0f b7 d2             	movzx  edx,dx
c00028ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b8:	39 c6                	cmp    esi,eax
c00028ba:	0f 82 01 ff ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028c0:	29 c6                	sub    esi,eax
c00028c2:	31 d2                	xor    edx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	f7 f3                	div    ebx
c00028c8:	39 de                	cmp    esi,ebx
c00028ca:	0f 82 f1 fe ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d5:	0f 87 e6 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00028db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e0:	0f 86 63 03 00 00    	jbe    c0002c49 <mount_volume+0x550>
c00028e6:	bb 03 00 00 00       	mov    ebx,0x3
c00028eb:	8d 70 02             	lea    esi,[eax+0x2]
c00028ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fc:	31 d2                	xor    edx,edx
c00028fe:	89 c8                	mov    eax,ecx
c0002900:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000290f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292d:	83 fb 03             	cmp    ebx,0x3
c0002930:	75 2b                	jne    c000295d <mount_volume+0x264>
c0002932:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002935:	e8 2f f3 ff ff       	call   c0001c69 <ld_word>
c000293a:	66 09 c7             	or     di,ax
c000293d:	0f 85 7e fe ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002943:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002949:	c1 e6 02             	shl    esi,0x2
c000294c:	e8 25 f3 ff ff       	call   c0001c76 <ld_dword>
c0002951:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002958:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295b:	eb 30                	jmp    c000298d <mount_volume+0x294>
c000295d:	66 85 ff             	test   di,di
c0002960:	0f 84 5b fe ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002966:	31 d2                	xor    edx,edx
c0002968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002970:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297a:	83 fb 02             	cmp    ebx,0x2
c000297d:	75 04                	jne    c0002983 <mount_volume+0x28a>
c000297f:	01 f6                	add    esi,esi
c0002981:	eb 0a                	jmp    c000298d <mount_volume+0x294>
c0002983:	8d 04 76             	lea    eax,[esi+esi*2]
c0002986:	83 e6 01             	and    esi,0x1
c0002989:	d1 e8                	shr    eax,1
c000298b:	01 c6                	add    esi,eax
c000298d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002993:	c1 ee 09             	shr    esi,0x9
c0002996:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299a:	0f 87 21 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00029a0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ae:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b2:	83 fb 03             	cmp    ebx,0x3
c00029b5:	75 7a                	jne    c0002a31 <mount_volume+0x338>
c00029b7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bd:	e8 a7 f2 ff ff       	call   c0001c69 <ld_word>
c00029c2:	66 48                	dec    ax
c00029c4:	75 6b                	jne    c0002a31 <mount_volume+0x338>
c00029c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ce:	83 c2 01             	add    edx,0x1
c00029d1:	89 e8                	mov    eax,ebp
c00029d3:	83 d1 00             	adc    ecx,0x0
c00029d6:	e8 6c fa ff ff       	call   c0002447 <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	75 52                	jne    c0002a31 <mount_volume+0x338>
c00029df:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e9:	e8 7b f2 ff ff       	call   c0001c69 <ld_word>
c00029ee:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f2:	75 3d                	jne    c0002a31 <mount_volume+0x338>
c00029f4:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f7:	e8 7a f2 ff ff       	call   c0001c76 <ld_dword>
c00029fc:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a01:	75 2e                	jne    c0002a31 <mount_volume+0x338>
c0002a03:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a09:	e8 68 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a0e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a13:	75 1c                	jne    c0002a31 <mount_volume+0x338>
c0002a15:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1b:	e8 56 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a20:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a23:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a29:	e8 48 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a2e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a31:	66 a1 a0 ed 02 c0    	mov    ax,ds:0xc002eda0
c0002a37:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3a:	40                   	inc    eax
c0002a3b:	31 db                	xor    ebx,ebx
c0002a3d:	66 a3 a0 ed 02 c0    	mov    ds:0xc002eda0,ax
c0002a43:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a47:	e9 0c 02 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002a4c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a52:	e8 12 f2 ff ff       	call   c0001c69 <ld_word>
c0002a57:	66 3d 00 01          	cmp    ax,0x100
c0002a5b:	0f 85 60 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a61:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a68:	0f 85 53 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a6e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a74:	e8 15 f2 ff ff       	call   c0001c8e <ld_qword>
c0002a79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a81:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a87:	e8 ea f1 ff ff       	call   c0001c76 <ld_dword>
c0002a8c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a8f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a95:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a98:	fe c8                	dec    al
c0002a9a:	0f 85 21 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002aa0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa7:	bb 01 00 00 00       	mov    ebx,0x1
c0002aac:	d3 e3                	shl    ebx,cl
c0002aae:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab2:	66 85 db             	test   bx,bx
c0002ab5:	0f 84 06 fd ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002abb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac1:	e8 b0 f1 ff ff       	call   c0001c76 <ld_dword>
c0002ac6:	89 c6                	mov    esi,eax
c0002ac8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acd:	0f 87 ee fc ff ff    	ja     c00027c1 <mount_volume+0xc8>
c0002ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad7:	8d 40 02             	lea    eax,[eax+0x2]
c0002ada:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002add:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aed:	e8 84 f1 ff ff       	call   c0001c76 <ld_dword>
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b04:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b07:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b10:	e8 61 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b23:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b26:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b29:	0f b7 c3             	movzx  eax,bx
c0002b2c:	31 d2                	xor    edx,edx
c0002b2e:	0f af f0             	imul   esi,eax
c0002b31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b35:	89 f0                	mov    eax,esi
c0002b37:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b3f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b43:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b47:	39 c1                	cmp    ecx,eax
c0002b49:	89 df                	mov    edi,ebx
c0002b4b:	19 d7                	sbb    edi,edx
c0002b4d:	0f 82 6e fc ff ff    	jb     c00027c1 <mount_volume+0xc8>
c0002b53:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b59:	31 db                	xor    ebx,ebx
c0002b5b:	e8 16 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b60:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b67:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b72:	85 db                	test   ebx,ebx
c0002b74:	75 39                	jne    c0002baf <mount_volume+0x4b6>
c0002b76:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b7e:	0f 86 3d fc ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002b84:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b87:	31 ff                	xor    edi,edi
c0002b89:	89 e8                	mov    eax,ebp
c0002b8b:	e8 72 f3 ff ff       	call   c0001f02 <clst2sect>
c0002b90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b94:	01 c6                	add    esi,eax
c0002b96:	89 e8                	mov    eax,ebp
c0002b98:	11 d7                	adc    edi,edx
c0002b9a:	89 f2                	mov    edx,esi
c0002b9c:	89 f9                	mov    ecx,edi
c0002b9e:	e8 a4 f8 ff ff       	call   c0002447 <move_window>
c0002ba3:	85 c0                	test   eax,eax
c0002ba5:	0f 85 07 fc ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002bab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002baf:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb4:	74 0b                	je     c0002bc1 <mount_volume+0x4c8>
c0002bb6:	83 c3 20             	add    ebx,0x20
c0002bb9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bbf:	eb b1                	jmp    c0002b72 <mount_volume+0x479>
c0002bc1:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc8:	e8 a9 f0 ff ff       	call   c0001c76 <ld_dword>
c0002bcd:	89 c3                	mov    ebx,eax
c0002bcf:	83 f8 01             	cmp    eax,0x1
c0002bd2:	0f 86 e9 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002bd8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdb:	0f 86 e0 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002be1:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be8:	0f af c2             	imul   eax,edx
c0002beb:	31 d2                	xor    edx,edx
c0002bed:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	89 da                	mov    edx,ebx
c0002bfd:	89 e8                	mov    eax,ebp
c0002bff:	c1 ea 07             	shr    edx,0x7
c0002c02:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c05:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c08:	e8 3a f8 ff ff       	call   c0002447 <move_window>
c0002c0d:	85 c0                	test   eax,eax
c0002c0f:	0f 85 9d fb ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002c15:	89 d8                	mov    eax,ebx
c0002c17:	83 e0 7f             	and    eax,0x7f
c0002c1a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1d:	e8 54 f0 ff ff       	call   c0001c76 <ld_dword>
c0002c22:	83 f8 ff             	cmp    eax,0xffffffff
c0002c25:	74 0a                	je     c0002c31 <mount_volume+0x538>
c0002c27:	43                   	inc    ebx
c0002c28:	39 d8                	cmp    eax,ebx
c0002c2a:	74 cd                	je     c0002bf9 <mount_volume+0x500>
c0002c2c:	e9 90 fb ff ff       	jmp    c00027c1 <mount_volume+0xc8>
c0002c31:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c38:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c3f:	bb 04 00 00 00       	mov    ebx,0x4
c0002c44:	e9 e8 fd ff ff       	jmp    c0002a31 <mount_volume+0x338>
c0002c49:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c4e:	19 db                	sbb    ebx,ebx
c0002c50:	83 c3 02             	add    ebx,0x2
c0002c53:	e9 93 fc ff ff       	jmp    c00028eb <mount_volume+0x1f2>
c0002c58:	83 c4 3c             	add    esp,0x3c
c0002c5b:	89 d8                	mov    eax,ebx
c0002c5d:	5b                   	pop    ebx
c0002c5e:	5e                   	pop    esi
c0002c5f:	5f                   	pop    edi
c0002c60:	5d                   	pop    ebp
c0002c61:	c3                   	ret    

c0002c62 <find_bitmap>:
c0002c62:	55                   	push   ebp
c0002c63:	57                   	push   edi
c0002c64:	89 c7                	mov    edi,eax
c0002c66:	56                   	push   esi
c0002c67:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6a:	53                   	push   ebx
c0002c6b:	83 ec 1c             	sub    esp,0x1c
c0002c6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c75:	83 e8 02             	sub    eax,0x2
c0002c78:	39 f0                	cmp    eax,esi
c0002c7a:	77 02                	ja     c0002c7e <find_bitmap+0x1c>
c0002c7c:	31 f6                	xor    esi,esi
c0002c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c82:	89 f3                	mov    ebx,esi
c0002c84:	31 ed                	xor    ebp,ebp
c0002c86:	31 c9                	xor    ecx,ecx
c0002c88:	89 da                	mov    edx,ebx
c0002c8a:	89 f8                	mov    eax,edi
c0002c8c:	c1 ea 0c             	shr    edx,0xc
c0002c8f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c92:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c95:	e8 ad f7 ff ff       	call   c0002447 <move_window>
c0002c9a:	85 c0                	test   eax,eax
c0002c9c:	75 68                	jne    c0002d06 <find_bitmap+0xa4>
c0002c9e:	89 da                	mov    edx,ebx
c0002ca0:	89 d9                	mov    ecx,ebx
c0002ca2:	c1 ea 03             	shr    edx,0x3
c0002ca5:	83 e1 07             	and    ecx,0x7
c0002ca8:	b8 01 00 00 00       	mov    eax,0x1
c0002cad:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb3:	d3 e0                	shl    eax,cl
c0002cb5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb8:	83 e9 02             	sub    ecx,0x2
c0002cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cbf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc3:	43                   	inc    ebx
c0002cc4:	21 c1                	and    ecx,eax
c0002cc6:	d1 e0                	shl    eax,1
c0002cc8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ccc:	77 09                	ja     c0002cd7 <find_bitmap+0x75>
c0002cce:	31 db                	xor    ebx,ebx
c0002cd0:	ba 00 02 00 00       	mov    edx,0x200
c0002cd5:	31 c0                	xor    eax,eax
c0002cd7:	84 c9                	test   cl,cl
c0002cd9:	75 10                	jne    c0002ceb <find_bitmap+0x89>
c0002cdb:	45                   	inc    ebp
c0002cdc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce0:	75 0f                	jne    c0002cf1 <find_bitmap+0x8f>
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	83 c0 02             	add    eax,0x2
c0002ce9:	eb 22                	jmp    c0002d0d <find_bitmap+0xab>
c0002ceb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cef:	31 ed                	xor    ebp,ebp
c0002cf1:	39 de                	cmp    esi,ebx
c0002cf3:	74 16                	je     c0002d0b <find_bitmap+0xa9>
c0002cf5:	84 c0                	test   al,al
c0002cf7:	75 c6                	jne    c0002cbf <find_bitmap+0x5d>
c0002cf9:	42                   	inc    edx
c0002cfa:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d00:	77 84                	ja     c0002c86 <find_bitmap+0x24>
c0002d02:	b0 01                	mov    al,0x1
c0002d04:	eb b9                	jmp    c0002cbf <find_bitmap+0x5d>
c0002d06:	83 c8 ff             	or     eax,0xffffffff
c0002d09:	eb 02                	jmp    c0002d0d <find_bitmap+0xab>
c0002d0b:	31 c0                	xor    eax,eax
c0002d0d:	83 c4 1c             	add    esp,0x1c
c0002d10:	5b                   	pop    ebx
c0002d11:	5e                   	pop    esi
c0002d12:	5f                   	pop    edi
c0002d13:	5d                   	pop    ebp
c0002d14:	c3                   	ret    

c0002d15 <change_bitmap>:
c0002d15:	55                   	push   ebp
c0002d16:	89 cd                	mov    ebp,ecx
c0002d18:	57                   	push   edi
c0002d19:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1c:	56                   	push   esi
c0002d1d:	89 c7                	mov    edi,eax
c0002d1f:	53                   	push   ebx
c0002d20:	89 c8                	mov    eax,ecx
c0002d22:	83 ec 1c             	sub    esp,0x1c
c0002d25:	31 d2                	xor    edx,edx
c0002d27:	89 ce                	mov    esi,ecx
c0002d29:	c1 e8 0c             	shr    eax,0xc
c0002d2c:	bb 01 00 00 00       	mov    ebx,0x1
c0002d31:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d34:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d37:	c1 ee 03             	shr    esi,0x3
c0002d3a:	83 e1 07             	and    ecx,0x7
c0002d3d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d43:	d3 e3                	shl    ebx,cl
c0002d45:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	89 d3                	mov    ebx,edx
c0002d4d:	83 c1 01             	add    ecx,0x1
c0002d50:	83 d3 00             	adc    ebx,0x0
c0002d53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d57:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5b:	89 d1                	mov    ecx,edx
c0002d5d:	89 c2                	mov    edx,eax
c0002d5f:	89 f8                	mov    eax,edi
c0002d61:	e8 e1 f6 ff ff       	call   c0002447 <move_window>
c0002d66:	89 c1                	mov    ecx,eax
c0002d68:	85 c0                	test   eax,eax
c0002d6a:	75 48                	jne    c0002db4 <change_bitmap+0x9f>
c0002d6c:	31 d2                	xor    edx,edx
c0002d6e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d72:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d76:	0f 95 c2             	setne  dl
c0002d79:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7d:	74 3c                	je     c0002dbb <change_bitmap+0xa6>
c0002d7f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d83:	4d                   	dec    ebp
c0002d84:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d88:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8c:	74 32                	je     c0002dc0 <change_bitmap+0xab>
c0002d8e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d92:	75 d8                	jne    c0002d6c <change_bitmap+0x57>
c0002d94:	8d 46 01             	lea    eax,[esi+0x1]
c0002d97:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9c:	89 c3                	mov    ebx,eax
c0002d9e:	31 f6                	xor    esi,esi
c0002da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dae:	74 99                	je     c0002d49 <change_bitmap+0x34>
c0002db0:	89 de                	mov    esi,ebx
c0002db2:	eb b8                	jmp    c0002d6c <change_bitmap+0x57>
c0002db4:	b9 01 00 00 00       	mov    ecx,0x1
c0002db9:	eb 05                	jmp    c0002dc0 <change_bitmap+0xab>
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	83 c4 1c             	add    esp,0x1c
c0002dc3:	89 c8                	mov    eax,ecx
c0002dc5:	5b                   	pop    ebx
c0002dc6:	5e                   	pop    esi
c0002dc7:	5f                   	pop    edi
c0002dc8:	5d                   	pop    ebp
c0002dc9:	c3                   	ret    

c0002dca <put_fat>:
c0002dca:	83 fa 01             	cmp    edx,0x1
c0002dcd:	0f 86 7b 01 00 00    	jbe    c0002f4e <put_fat+0x184>
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	89 cf                	mov    edi,ecx
c0002dd7:	56                   	push   esi
c0002dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddd:	53                   	push   ebx
c0002dde:	89 c6                	mov    esi,eax
c0002de0:	83 ec 1c             	sub    esp,0x1c
c0002de3:	89 d3                	mov    ebx,edx
c0002de5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de8:	0f 86 68 01 00 00    	jbe    c0002f56 <put_fat+0x18c>
c0002dee:	8a 00                	mov    al,BYTE PTR [eax]
c0002df0:	3c 02                	cmp    al,0x2
c0002df2:	0f 84 c7 00 00 00    	je     c0002ebf <put_fat+0xf5>
c0002df8:	77 09                	ja     c0002e03 <put_fat+0x39>
c0002dfa:	fe c8                	dec    al
c0002dfc:	74 17                	je     c0002e15 <put_fat+0x4b>
c0002dfe:	e9 53 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e03:	b9 02 00 00 00       	mov    ecx,0x2
c0002e08:	3c 04                	cmp    al,0x4
c0002e0a:	0f 86 e1 00 00 00    	jbe    c0002ef1 <put_fat+0x127>
c0002e10:	e9 41 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e15:	89 d5                	mov    ebp,edx
c0002e17:	31 c9                	xor    ecx,ecx
c0002e19:	d1 ed                	shr    ebp,1
c0002e1b:	89 f0                	mov    eax,esi
c0002e1d:	01 d5                	add    ebp,edx
c0002e1f:	89 ea                	mov    edx,ebp
c0002e21:	c1 ea 09             	shr    edx,0x9
c0002e24:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e27:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2a:	e8 18 f6 ff ff       	call   c0002447 <move_window>
c0002e2f:	89 c1                	mov    ecx,eax
c0002e31:	85 c0                	test   eax,eax
c0002e33:	0f 85 1d 01 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e39:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e40:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e43:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e51:	89 f8                	mov    eax,edi
c0002e53:	83 e3 01             	and    ebx,0x1
c0002e56:	74 0d                	je     c0002e65 <put_fat+0x9b>
c0002e58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5b:	89 fa                	mov    edx,edi
c0002e5d:	83 e0 0f             	and    eax,0xf
c0002e60:	c1 e2 04             	shl    edx,0x4
c0002e63:	09 d0                	or     eax,edx
c0002e65:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6c:	31 c9                	xor    ecx,ecx
c0002e6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e72:	c1 ea 09             	shr    edx,0x9
c0002e75:	89 f0                	mov    eax,esi
c0002e77:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7d:	e8 c5 f5 ff ff       	call   c0002447 <move_window>
c0002e82:	89 c1                	mov    ecx,eax
c0002e84:	85 c0                	test   eax,eax
c0002e86:	0f 85 ca 00 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e96:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9a:	85 db                	test   ebx,ebx
c0002e9c:	74 07                	je     c0002ea5 <put_fat+0xdb>
c0002e9e:	c1 ef 04             	shr    edi,0x4
c0002ea1:	89 fa                	mov    edx,edi
c0002ea3:	eb 0e                	jmp    c0002eb3 <put_fat+0xe9>
c0002ea5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea8:	c1 ef 08             	shr    edi,0x8
c0002eab:	83 e2 f0             	and    edx,0xfffffff0
c0002eae:	83 e7 0f             	and    edi,0xf
c0002eb1:	09 fa                	or     edx,edi
c0002eb3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eba:	e9 97 00 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002ebf:	31 c9                	xor    ecx,ecx
c0002ec1:	c1 ea 08             	shr    edx,0x8
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ecc:	e8 76 f5 ff ff       	call   c0002447 <move_window>
c0002ed1:	89 c1                	mov    ecx,eax
c0002ed3:	85 c0                	test   eax,eax
c0002ed5:	75 7f                	jne    c0002f56 <put_fat+0x18c>
c0002ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edb:	01 db                	add    ebx,ebx
c0002edd:	0f b7 d7             	movzx  edx,di
c0002ee0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eea:	e8 ec ed ff ff       	call   c0001cdb <st_word>
c0002eef:	eb 53                	jmp    c0002f44 <put_fat+0x17a>
c0002ef1:	31 c9                	xor    ecx,ecx
c0002ef3:	c1 ea 07             	shr    edx,0x7
c0002ef6:	89 f0                	mov    eax,esi
c0002ef8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002efe:	e8 44 f5 ff ff       	call   c0002447 <move_window>
c0002f03:	89 c1                	mov    ecx,eax
c0002f05:	85 c0                	test   eax,eax
c0002f07:	75 4d                	jne    c0002f56 <put_fat+0x18c>
c0002f09:	c1 e3 02             	shl    ebx,0x2
c0002f0c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f12:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f15:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f19:	74 1c                	je     c0002f37 <put_fat+0x16d>
c0002f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f25:	89 d8                	mov    eax,ebx
c0002f27:	e8 4a ed ff ff       	call   c0001c76 <ld_dword>
c0002f2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f30:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f35:	09 c7                	or     edi,eax
c0002f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3b:	89 fa                	mov    edx,edi
c0002f3d:	89 d8                	mov    eax,ebx
c0002f3f:	e8 9b ed ff ff       	call   c0001cdf <st_dword>
c0002f44:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	eb 08                	jmp    c0002f56 <put_fat+0x18c>
c0002f4e:	b9 02 00 00 00       	mov    ecx,0x2
c0002f53:	89 c8                	mov    eax,ecx
c0002f55:	c3                   	ret    
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	89 c8                	mov    eax,ecx
c0002f5b:	5b                   	pop    ebx
c0002f5c:	5e                   	pop    esi
c0002f5d:	5f                   	pop    edi
c0002f5e:	5d                   	pop    ebp
c0002f5f:	c3                   	ret    

c0002f60 <fill_last_frag>:
c0002f60:	57                   	push   edi
c0002f61:	89 cf                	mov    edi,ecx
c0002f63:	56                   	push   esi
c0002f64:	89 d6                	mov    esi,edx
c0002f66:	53                   	push   ebx
c0002f67:	89 c3                	mov    ebx,eax
c0002f69:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6c:	85 c0                	test   eax,eax
c0002f6e:	74 21                	je     c0002f91 <fill_last_frag+0x31>
c0002f70:	89 f9                	mov    ecx,edi
c0002f72:	83 f8 01             	cmp    eax,0x1
c0002f75:	76 05                	jbe    c0002f7c <fill_last_frag+0x1c>
c0002f77:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7a:	29 c1                	sub    ecx,eax
c0002f7c:	8d 56 01             	lea    edx,[esi+0x1]
c0002f7f:	29 c2                	sub    edx,eax
c0002f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f83:	e8 42 fe ff ff       	call   c0002dca <put_fat>
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	75 05                	jne    c0002f91 <fill_last_frag+0x31>
c0002f8c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f8f:	eb d8                	jmp    c0002f69 <fill_last_frag+0x9>
c0002f91:	5b                   	pop    ebx
c0002f92:	5e                   	pop    esi
c0002f93:	5f                   	pop    edi
c0002f94:	c3                   	ret    

c0002f95 <fill_first_frag>:
c0002f95:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f99:	75 2d                	jne    c0002fc8 <fill_first_frag+0x33>
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa6:	01 d7                	add    edi,edx
c0002fa8:	39 fa                	cmp    edx,edi
c0002faa:	74 14                	je     c0002fc0 <fill_first_frag+0x2b>
c0002fac:	8d 72 01             	lea    esi,[edx+0x1]
c0002faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb1:	89 f1                	mov    ecx,esi
c0002fb3:	e8 12 fe ff ff       	call   c0002dca <put_fat>
c0002fb8:	89 f2                	mov    edx,esi
c0002fba:	85 c0                	test   eax,eax
c0002fbc:	74 ea                	je     c0002fa8 <fill_first_frag+0x13>
c0002fbe:	eb 0b                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc4:	31 c0                	xor    eax,eax
c0002fc6:	eb 03                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc8:	31 c0                	xor    eax,eax
c0002fca:	c3                   	ret    
c0002fcb:	5b                   	pop    ebx
c0002fcc:	5e                   	pop    esi
c0002fcd:	5f                   	pop    edi
c0002fce:	c3                   	ret    

c0002fcf <get_fat>:
c0002fcf:	83 fa 01             	cmp    edx,0x1
c0002fd2:	0f 86 db 01 00 00    	jbe    c00031b3 <get_fat+0x1e4>
c0002fd8:	55                   	push   ebp
c0002fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fde:	57                   	push   edi
c0002fdf:	56                   	push   esi
c0002fe0:	53                   	push   ebx
c0002fe1:	83 ec 1c             	sub    esp,0x1c
c0002fe4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe9:	0f 86 cc 01 00 00    	jbe    c00031bb <get_fat+0x1ec>
c0002fef:	89 c3                	mov    ebx,eax
c0002ff1:	89 d6                	mov    esi,edx
c0002ff3:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff5:	3c 02                	cmp    al,0x2
c0002ff7:	0f 84 99 00 00 00    	je     c0003096 <get_fat+0xc7>
c0002ffd:	77 09                	ja     c0003008 <get_fat+0x39>
c0002fff:	fe c8                	dec    al
c0003001:	74 1a                	je     c000301d <get_fat+0x4e>
c0003003:	e9 b3 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003008:	3c 03                	cmp    al,0x3
c000300a:	0f 84 b5 00 00 00    	je     c00030c5 <get_fat+0xf6>
c0003010:	3c 04                	cmp    al,0x4
c0003012:	0f 84 e3 00 00 00    	je     c00030fb <get_fat+0x12c>
c0003018:	e9 9e 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c000301d:	89 d3                	mov    ebx,edx
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	d1 eb                	shr    ebx,1
c0003023:	89 f8                	mov    eax,edi
c0003025:	01 d3                	add    ebx,edx
c0003027:	89 da                	mov    edx,ebx
c0003029:	c1 ea 09             	shr    edx,0x9
c000302c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000302f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003032:	e8 10 f4 ff ff       	call   c0002447 <move_window>
c0003037:	85 c0                	test   eax,eax
c0003039:	74 08                	je     c0003043 <get_fat+0x74>
c000303b:	83 c9 ff             	or     ecx,0xffffffff
c000303e:	e9 78 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003043:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003046:	31 c9                	xor    ecx,ecx
c0003048:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000304e:	89 ea                	mov    edx,ebp
c0003050:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003054:	c1 ea 09             	shr    edx,0x9
c0003057:	89 f8                	mov    eax,edi
c0003059:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000305f:	e8 e3 f3 ff ff       	call   c0002447 <move_window>
c0003064:	85 c0                	test   eax,eax
c0003066:	75 d3                	jne    c000303b <get_fat+0x6c>
c0003068:	0f b6 c3             	movzx  eax,bl
c000306b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003071:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003076:	c1 e3 08             	shl    ebx,0x8
c0003079:	09 c3                	or     ebx,eax
c000307b:	89 d9                	mov    ecx,ebx
c000307d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003083:	83 e6 01             	and    esi,0x1
c0003086:	0f 84 2f 01 00 00    	je     c00031bb <get_fat+0x1ec>
c000308c:	89 d9                	mov    ecx,ebx
c000308e:	c1 e9 04             	shr    ecx,0x4
c0003091:	e9 25 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003096:	31 c9                	xor    ecx,ecx
c0003098:	c1 ea 08             	shr    edx,0x8
c000309b:	89 f8                	mov    eax,edi
c000309d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a3:	e8 9f f3 ff ff       	call   c0002447 <move_window>
c00030a8:	85 c0                	test   eax,eax
c00030aa:	75 8f                	jne    c000303b <get_fat+0x6c>
c00030ac:	01 f6                	add    esi,esi
c00030ae:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b8:	e8 ac eb ff ff       	call   c0001c69 <ld_word>
c00030bd:	0f b7 c8             	movzx  ecx,ax
c00030c0:	e9 f6 00 00 00       	jmp    c00031bb <get_fat+0x1ec>
c00030c5:	31 c9                	xor    ecx,ecx
c00030c7:	c1 ea 07             	shr    edx,0x7
c00030ca:	89 f8                	mov    eax,edi
c00030cc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030cf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d2:	e8 70 f3 ff ff       	call   c0002447 <move_window>
c00030d7:	85 c0                	test   eax,eax
c00030d9:	0f 85 5c ff ff ff    	jne    c000303b <get_fat+0x6c>
c00030df:	c1 e6 02             	shl    esi,0x2
c00030e2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ec:	e8 85 eb ff ff       	call   c0001c76 <ld_dword>
c00030f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f6:	e9 b4 00 00 00       	jmp    c00031af <get_fat+0x1e0>
c00030fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003101:	89 d1                	mov    ecx,edx
c0003103:	09 c1                	or     ecx,eax
c0003105:	74 06                	je     c000310d <get_fat+0x13e>
c0003107:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310b:	75 0f                	jne    c000311c <get_fat+0x14d>
c000310d:	b9 01 00 00 00       	mov    ecx,0x1
c0003112:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003116:	0f 85 9f 00 00 00    	jne    c00031bb <get_fat+0x1ec>
c000311c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003120:	89 f5                	mov    ebp,esi
c0003122:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003127:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312d:	80 f9 02             	cmp    cl,0x2
c0003130:	75 35                	jne    c0003167 <get_fat+0x198>
c0003132:	83 c0 ff             	add    eax,0xffffffff
c0003135:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313a:	83 d2 ff             	adc    edx,0xffffffff
c000313d:	31 db                	xor    ebx,ebx
c000313f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003143:	53                   	push   ebx
c0003144:	c1 ea 09             	shr    edx,0x9
c0003147:	51                   	push   ecx
c0003148:	52                   	push   edx
c0003149:	50                   	push   eax
c000314a:	e8 55 40 02 00       	call   c00271a4 <__udivdi3>
c000314f:	83 c4 10             	add    esp,0x10
c0003152:	b9 01 00 00 00       	mov    ecx,0x1
c0003157:	39 c5                	cmp    ebp,eax
c0003159:	77 60                	ja     c00031bb <get_fat+0x1ec>
c000315b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003160:	74 59                	je     c00031bb <get_fat+0x1ec>
c0003162:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003165:	eb 54                	jmp    c00031bb <get_fat+0x1ec>
c0003167:	80 f9 03             	cmp    cl,0x3
c000316a:	75 05                	jne    c0003171 <get_fat+0x1a2>
c000316c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000316f:	77 f1                	ja     c0003162 <get_fat+0x193>
c0003171:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003176:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317a:	75 3f                	jne    c00031bb <get_fat+0x1ec>
c000317c:	31 c9                	xor    ecx,ecx
c000317e:	89 f2                	mov    edx,esi
c0003180:	89 f8                	mov    eax,edi
c0003182:	c1 ea 07             	shr    edx,0x7
c0003185:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003188:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318b:	e8 b7 f2 ff ff       	call   c0002447 <move_window>
c0003190:	85 c0                	test   eax,eax
c0003192:	0f 85 a3 fe ff ff    	jne    c000303b <get_fat+0x6c>
c0003198:	c1 e6 02             	shl    esi,0x2
c000319b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a5:	e8 cc ea ff ff       	call   c0001c76 <ld_dword>
c00031aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031af:	89 c1                	mov    ecx,eax
c00031b1:	eb 08                	jmp    c00031bb <get_fat+0x1ec>
c00031b3:	b9 01 00 00 00       	mov    ecx,0x1
c00031b8:	89 c8                	mov    eax,ecx
c00031ba:	c3                   	ret    
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	89 c8                	mov    eax,ecx
c00031c0:	5b                   	pop    ebx
c00031c1:	5e                   	pop    esi
c00031c2:	5f                   	pop    edi
c00031c3:	5d                   	pop    ebp
c00031c4:	c3                   	ret    

c00031c5 <dir_sdi>:
c00031c5:	55                   	push   ebp
c00031c6:	57                   	push   edi
c00031c7:	56                   	push   esi
c00031c8:	53                   	push   ebx
c00031c9:	89 c3                	mov    ebx,eax
c00031cb:	83 ec 1c             	sub    esp,0x1c
c00031ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d0:	31 c0                	xor    eax,eax
c00031d2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d5:	0f 94 c0             	sete   al
c00031d8:	48                   	dec    eax
c00031d9:	25 00 00 20 f0       	and    eax,0xf0200000
c00031de:	05 00 00 00 10       	add    eax,0x10000000
c00031e3:	39 d0                	cmp    eax,edx
c00031e5:	77 0a                	ja     c00031f1 <dir_sdi+0x2c>
c00031e7:	b8 02 00 00 00       	mov    eax,0x2
c00031ec:	e9 c4 00 00 00       	jmp    c00032b5 <dir_sdi+0xf0>
c00031f1:	89 d6                	mov    esi,edx
c00031f3:	f6 c2 1f             	test   dl,0x1f
c00031f6:	75 ef                	jne    c00031e7 <dir_sdi+0x22>
c00031f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031fe:	85 c9                	test   ecx,ecx
c0003200:	75 2d                	jne    c000322f <dir_sdi+0x6a>
c0003202:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003205:	77 1b                	ja     c0003222 <dir_sdi+0x5d>
c0003207:	89 f2                	mov    edx,esi
c0003209:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320d:	c1 ea 05             	shr    edx,0x5
c0003210:	39 c2                	cmp    edx,eax
c0003212:	73 d3                	jae    c00031e7 <dir_sdi+0x22>
c0003214:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003217:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003220:	eb 4b                	jmp    c000326d <dir_sdi+0xa8>
c0003222:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003225:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003229:	85 c0                	test   eax,eax
c000322b:	74 da                	je     c0003207 <dir_sdi+0x42>
c000322d:	89 c1                	mov    ecx,eax
c000322f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003233:	c1 e5 09             	shl    ebp,0x9
c0003236:	89 ca                	mov    edx,ecx
c0003238:	39 ee                	cmp    esi,ebp
c000323a:	72 1c                	jb     c0003258 <dir_sdi+0x93>
c000323c:	89 d8                	mov    eax,ebx
c000323e:	e8 8c fd ff ff       	call   c0002fcf <get_fat>
c0003243:	89 c1                	mov    ecx,eax
c0003245:	83 f8 ff             	cmp    eax,0xffffffff
c0003248:	74 66                	je     c00032b0 <dir_sdi+0xeb>
c000324a:	83 f8 01             	cmp    eax,0x1
c000324d:	76 98                	jbe    c00031e7 <dir_sdi+0x22>
c000324f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003252:	76 93                	jbe    c00031e7 <dir_sdi+0x22>
c0003254:	29 ee                	sub    esi,ebp
c0003256:	eb de                	jmp    c0003236 <dir_sdi+0x71>
c0003258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325c:	89 f8                	mov    eax,edi
c000325e:	e8 9f ec ff ff       	call   c0001f02 <clst2sect>
c0003263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003267:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003273:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003276:	89 d1                	mov    ecx,edx
c0003278:	09 c1                	or     ecx,eax
c000327a:	0f 84 67 ff ff ff    	je     c00031e7 <dir_sdi+0x22>
c0003280:	89 f1                	mov    ecx,esi
c0003282:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328a:	c1 e9 09             	shr    ecx,0x9
c000328d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003295:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003299:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ac:	31 c0                	xor    eax,eax
c00032ae:	eb 05                	jmp    c00032b5 <dir_sdi+0xf0>
c00032b0:	b8 01 00 00 00       	mov    eax,0x1
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	5b                   	pop    ebx
c00032b9:	5e                   	pop    esi
c00032ba:	5f                   	pop    edi
c00032bb:	5d                   	pop    ebp
c00032bc:	c3                   	ret    

c00032bd <create_chain>:
c00032bd:	55                   	push   ebp
c00032be:	89 c5                	mov    ebp,eax
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	85 d2                	test   edx,edx
c00032c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ce:	75 0e                	jne    c00032de <create_chain+0x21>
c00032d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d3:	85 ff                	test   edi,edi
c00032d5:	74 39                	je     c0003310 <create_chain+0x53>
c00032d7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032da:	77 39                	ja     c0003315 <create_chain+0x58>
c00032dc:	eb 32                	jmp    c0003310 <create_chain+0x53>
c00032de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e2:	e8 e8 fc ff ff       	call   c0002fcf <get_fat>
c00032e7:	89 c3                	mov    ebx,eax
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	77 0a                	ja     c00032f8 <create_chain+0x3b>
c00032ee:	bb 01 00 00 00       	mov    ebx,0x1
c00032f3:	e9 ba 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c00032f8:	83 f8 ff             	cmp    eax,0xffffffff
c00032fb:	0f 84 62 01 00 00    	je     c0003463 <create_chain+0x1a6>
c0003301:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003304:	0f 87 a8 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c000330a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000330e:	eb 05                	jmp    c0003315 <create_chain+0x58>
c0003310:	bf 01 00 00 00       	mov    edi,0x1
c0003315:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003319:	75 07                	jne    c0003322 <create_chain+0x65>
c000331b:	31 db                	xor    ebx,ebx
c000331d:	e9 90 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c0003322:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003325:	75 74                	jne    c000339b <create_chain+0xde>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	89 fa                	mov    edx,edi
c000332e:	89 f0                	mov    eax,esi
c0003330:	e8 2d f9 ff ff       	call   c0002c62 <find_bitmap>
c0003335:	89 c3                	mov    ebx,eax
c0003337:	8d 40 ff             	lea    eax,[eax-0x1]
c000333a:	83 f8 fd             	cmp    eax,0xfffffffd
c000333d:	0f 87 6f 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	b9 01 00 00 00       	mov    ecx,0x1
c000334b:	6a 01                	push   0x1
c000334d:	89 da                	mov    edx,ebx
c000334f:	89 f0                	mov    eax,esi
c0003351:	e8 bf f9 ff ff       	call   c0002d15 <change_bitmap>
c0003356:	83 c4 10             	add    esp,0x10
c0003359:	83 f8 02             	cmp    eax,0x2
c000335c:	74 90                	je     c00032ee <create_chain+0x31>
c000335e:	83 f8 01             	cmp    eax,0x1
c0003361:	0f 84 fc 00 00 00    	je     c0003463 <create_chain+0x1a6>
c0003367:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336c:	75 09                	jne    c0003377 <create_chain+0xba>
c000336e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003372:	e9 0c 01 00 00       	jmp    c0003483 <create_chain+0x1c6>
c0003377:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337b:	0f 85 e7 00 00 00    	jne    c0003468 <create_chain+0x1ab>
c0003381:	8d 57 01             	lea    edx,[edi+0x1]
c0003384:	39 da                	cmp    edx,ebx
c0003386:	0f 84 f7 00 00 00    	je     c0003483 <create_chain+0x1c6>
c000338c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000338f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003393:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003396:	e9 cd 00 00 00       	jmp    c0003468 <create_chain+0x1ab>
c000339b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000339f:	75 41                	jne    c00033e2 <create_chain+0x125>
c00033a1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a7:	77 05                	ja     c00033ae <create_chain+0xf1>
c00033a9:	bb 02 00 00 00       	mov    ebx,0x2
c00033ae:	89 da                	mov    edx,ebx
c00033b0:	89 e8                	mov    eax,ebp
c00033b2:	e8 18 fc ff ff       	call   c0002fcf <get_fat>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 2e ff ff ff    	je     c00032ee <create_chain+0x31>
c00033c0:	83 f8 ff             	cmp    eax,0xffffffff
c00033c3:	0f 84 9a 00 00 00    	je     c0003463 <create_chain+0x1a6>
c00033c9:	85 c0                	test   eax,eax
c00033cb:	74 11                	je     c00033de <create_chain+0x121>
c00033cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d0:	83 f8 01             	cmp    eax,0x1
c00033d3:	76 0d                	jbe    c00033e2 <create_chain+0x125>
c00033d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d8:	76 08                	jbe    c00033e2 <create_chain+0x125>
c00033da:	89 c7                	mov    edi,eax
c00033dc:	eb 04                	jmp    c00033e2 <create_chain+0x125>
c00033de:	85 db                	test   ebx,ebx
c00033e0:	75 38                	jne    c000341a <create_chain+0x15d>
c00033e2:	89 fb                	mov    ebx,edi
c00033e4:	43                   	inc    ebx
c00033e5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e8:	77 0e                	ja     c00033f8 <create_chain+0x13b>
c00033ea:	83 ff 01             	cmp    edi,0x1
c00033ed:	0f 86 28 ff ff ff    	jbe    c000331b <create_chain+0x5e>
c00033f3:	bb 02 00 00 00       	mov    ebx,0x2
c00033f8:	89 da                	mov    edx,ebx
c00033fa:	89 e8                	mov    eax,ebp
c00033fc:	e8 ce fb ff ff       	call   c0002fcf <get_fat>
c0003401:	85 c0                	test   eax,eax
c0003403:	74 15                	je     c000341a <create_chain+0x15d>
c0003405:	83 f8 01             	cmp    eax,0x1
c0003408:	0f 84 e0 fe ff ff    	je     c00032ee <create_chain+0x31>
c000340e:	40                   	inc    eax
c000340f:	74 52                	je     c0003463 <create_chain+0x1a6>
c0003411:	39 fb                	cmp    ebx,edi
c0003413:	75 cf                	jne    c00033e4 <create_chain+0x127>
c0003415:	e9 01 ff ff ff       	jmp    c000331b <create_chain+0x5e>
c000341a:	83 c9 ff             	or     ecx,0xffffffff
c000341d:	89 da                	mov    edx,ebx
c000341f:	89 f0                	mov    eax,esi
c0003421:	e8 a4 f9 ff ff       	call   c0002dca <put_fat>
c0003426:	85 c0                	test   eax,eax
c0003428:	75 32                	jne    c000345c <create_chain+0x19f>
c000342a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000342f:	74 11                	je     c0003442 <create_chain+0x185>
c0003431:	89 d9                	mov    ecx,ebx
c0003433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003437:	89 f0                	mov    eax,esi
c0003439:	e8 8c f9 ff ff       	call   c0002dca <put_fat>
c000343e:	85 c0                	test   eax,eax
c0003440:	75 1a                	jne    c000345c <create_chain+0x19f>
c0003442:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003445:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003448:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000344e:	39 d0                	cmp    eax,edx
c0003450:	77 04                	ja     c0003456 <create_chain+0x199>
c0003452:	48                   	dec    eax
c0003453:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003456:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345a:	eb 56                	jmp    c00034b2 <create_chain+0x1f5>
c000345c:	48                   	dec    eax
c000345d:	0f 85 8b fe ff ff    	jne    c00032ee <create_chain+0x31>
c0003463:	83 cb ff             	or     ebx,0xffffffff
c0003466:	eb 4a                	jmp    c00034b2 <create_chain+0x1f5>
c0003468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000346f:	41                   	inc    ecx
c0003470:	39 d9                	cmp    ecx,ebx
c0003472:	75 19                	jne    c000348d <create_chain+0x1d0>
c0003474:	b9 02 00 00 00       	mov    ecx,0x2
c0003479:	85 d2                	test   edx,edx
c000347b:	74 03                	je     c0003480 <create_chain+0x1c3>
c000347d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003480:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003483:	85 c0                	test   eax,eax
c0003485:	0f 85 63 fe ff ff    	jne    c00032ee <create_chain+0x31>
c000348b:	eb b5                	jmp    c0003442 <create_chain+0x185>
c000348d:	85 d2                	test   edx,edx
c000348f:	75 07                	jne    c0003498 <create_chain+0x1db>
c0003491:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000349e:	89 e8                	mov    eax,ebp
c00034a0:	e8 bb fa ff ff       	call   c0002f60 <fill_last_frag>
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 b3                	jne    c000345c <create_chain+0x19f>
c00034a9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b0:	eb 90                	jmp    c0003442 <create_chain+0x185>
c00034b2:	83 c4 1c             	add    esp,0x1c
c00034b5:	89 d8                	mov    eax,ebx
c00034b7:	5b                   	pop    ebx
c00034b8:	5e                   	pop    esi
c00034b9:	5f                   	pop    edi
c00034ba:	5d                   	pop    ebp
c00034bb:	c3                   	ret    

c00034bc <remove_chain>:
c00034bc:	55                   	push   ebp
c00034bd:	57                   	push   edi
c00034be:	56                   	push   esi
c00034bf:	53                   	push   ebx
c00034c0:	83 ec 1c             	sub    esp,0x1c
c00034c3:	83 fa 01             	cmp    edx,0x1
c00034c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ca:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034cc:	77 0a                	ja     c00034d8 <remove_chain+0x1c>
c00034ce:	b8 02 00 00 00       	mov    eax,0x2
c00034d3:	e9 24 01 00 00       	jmp    c00035fc <remove_chain+0x140>
c00034d8:	89 d6                	mov    esi,edx
c00034da:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034dd:	76 ef                	jbe    c00034ce <remove_chain+0x12>
c00034df:	89 c7                	mov    edi,eax
c00034e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e6:	75 06                	jne    c00034ee <remove_chain+0x32>
c00034e8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ec:	eb 54                	jmp    c0003542 <remove_chain+0x86>
c00034ee:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f1:	75 06                	jne    c00034f9 <remove_chain+0x3d>
c00034f3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f7:	74 ef                	je     c00034e8 <remove_chain+0x2c>
c00034f9:	83 c9 ff             	or     ecx,0xffffffff
c00034fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003500:	89 d8                	mov    eax,ebx
c0003502:	e8 c3 f8 ff ff       	call   c0002dca <put_fat>
c0003507:	85 c0                	test   eax,eax
c0003509:	74 dd                	je     c00034e8 <remove_chain+0x2c>
c000350b:	e9 ec 00 00 00       	jmp    c00035fc <remove_chain+0x140>
c0003510:	83 f8 01             	cmp    eax,0x1
c0003513:	74 b9                	je     c00034ce <remove_chain+0x12>
c0003515:	83 f8 ff             	cmp    eax,0xffffffff
c0003518:	74 6d                	je     c0003587 <remove_chain+0xcb>
c000351a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351d:	75 6f                	jne    c000358e <remove_chain+0xd2>
c000351f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003522:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003525:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003528:	39 d0                	cmp    eax,edx
c000352a:	73 08                	jae    c0003534 <remove_chain+0x78>
c000352c:	40                   	inc    eax
c000352d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003531:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003534:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003537:	39 e9                	cmp    ecx,ebp
c0003539:	75 64                	jne    c000359f <remove_chain+0xe3>
c000353b:	89 ee                	mov    esi,ebp
c000353d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003540:	76 0f                	jbe    c0003551 <remove_chain+0x95>
c0003542:	89 f2                	mov    edx,esi
c0003544:	89 f8                	mov    eax,edi
c0003546:	e8 84 fa ff ff       	call   c0002fcf <get_fat>
c000354b:	89 c5                	mov    ebp,eax
c000354d:	85 c0                	test   eax,eax
c000354f:	75 bf                	jne    c0003510 <remove_chain+0x54>
c0003551:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003554:	0f 85 a0 00 00 00    	jne    c00035fa <remove_chain+0x13e>
c000355a:	eb 6c                	jmp    c00035c8 <remove_chain+0x10c>
c000355c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000355f:	84 c0                	test   al,al
c0003561:	75 7d                	jne    c00035e0 <remove_chain+0x124>
c0003563:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003566:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356a:	0f 84 86 00 00 00    	je     c00035f6 <remove_chain+0x13a>
c0003570:	89 da                	mov    edx,ebx
c0003572:	89 f8                	mov    eax,edi
c0003574:	e8 56 fa ff ff       	call   c0002fcf <get_fat>
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	0f 86 4c ff ff ff    	jbe    c00034ce <remove_chain+0x12>
c0003582:	83 f8 ff             	cmp    eax,0xffffffff
c0003585:	75 4e                	jne    c00035d5 <remove_chain+0x119>
c0003587:	b8 01 00 00 00       	mov    eax,0x1
c000358c:	eb 6e                	jmp    c00035fc <remove_chain+0x140>
c000358e:	31 c9                	xor    ecx,ecx
c0003590:	89 f2                	mov    edx,esi
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 31 f8 ff ff       	call   c0002dca <put_fat>
c0003599:	85 c0                	test   eax,eax
c000359b:	74 82                	je     c000351f <remove_chain+0x63>
c000359d:	eb 5d                	jmp    c00035fc <remove_chain+0x140>
c000359f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a2:	75 1b                	jne    c00035bf <remove_chain+0x103>
c00035a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	83 ec 0c             	sub    esp,0xc
c00035ad:	6a 00                	push   0x0
c00035af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b3:	e8 5d f7 ff ff       	call   c0002d15 <change_bitmap>
c00035b8:	83 c4 10             	add    esp,0x10
c00035bb:	85 c0                	test   eax,eax
c00035bd:	75 3d                	jne    c00035fc <remove_chain+0x140>
c00035bf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c3:	e9 73 ff ff ff       	jmp    c000353b <remove_chain+0x7f>
c00035c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cd:	75 8d                	jne    c000355c <remove_chain+0xa0>
c00035cf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d3:	eb 25                	jmp    c00035fa <remove_chain+0x13e>
c00035d5:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d8:	89 c3                	mov    ebx,eax
c00035da:	39 c2                	cmp    edx,eax
c00035dc:	74 88                	je     c0003566 <remove_chain+0xaa>
c00035de:	eb 1a                	jmp    c00035fa <remove_chain+0x13e>
c00035e0:	3c 03                	cmp    al,0x3
c00035e2:	75 16                	jne    c00035fa <remove_chain+0x13e>
c00035e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035eb:	77 0d                	ja     c00035fa <remove_chain+0x13e>
c00035ed:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f4:	72 04                	jb     c00035fa <remove_chain+0x13e>
c00035f6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fa:	31 c0                	xor    eax,eax
c00035fc:	83 c4 1c             	add    esp,0x1c
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_clear>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	56                   	push   esi
c0003607:	89 c6                	mov    esi,eax
c0003609:	53                   	push   ebx
c000360a:	83 ec 1c             	sub    esp,0x1c
c000360d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003611:	e8 9d ed ff ff       	call   c00023b3 <sync_window>
c0003616:	85 c0                	test   eax,eax
c0003618:	0f 85 de 00 00 00    	jne    c00036fc <dir_clear+0xf8>
c000361e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003622:	89 f0                	mov    eax,esi
c0003624:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003627:	e8 d6 e8 ff ff       	call   c0001f02 <clst2sect>
c000362c:	b9 00 02 00 00       	mov    ecx,0x200
c0003631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003639:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000363f:	89 e8                	mov    eax,ebp
c0003641:	31 d2                	xor    edx,edx
c0003643:	e8 b5 e6 ff ff       	call   c0001cfd <mem_set>
c0003648:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364c:	c1 e3 09             	shl    ebx,0x9
c000364f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003655:	76 1f                	jbe    c0003676 <dir_clear+0x72>
c0003657:	bb 00 80 00 00       	mov    ebx,0x8000
c000365c:	eb 18                	jmp    c0003676 <dir_clear+0x72>
c000365e:	83 ec 0c             	sub    esp,0xc
c0003661:	53                   	push   ebx
c0003662:	e8 35 4e 00 00       	call   c000849c <ff_memalloc>
c0003667:	83 c4 10             	add    esp,0x10
c000366a:	89 c7                	mov    edi,eax
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 8f 00 00 00    	jne    c0003703 <dir_clear+0xff>
c0003674:	d1 eb                	shr    ebx,1
c0003676:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367c:	77 e0                	ja     c000365e <dir_clear+0x5a>
c000367e:	31 db                	xor    ebx,ebx
c0003680:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003684:	39 d8                	cmp    eax,ebx
c0003686:	76 66                	jbe    c00036ee <dir_clear+0xea>
c0003688:	83 ec 0c             	sub    esp,0xc
c000368b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000368f:	6a 01                	push   0x1
c0003691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003699:	55                   	push   ebp
c000369a:	50                   	push   eax
c000369b:	e8 94 e5 ff ff       	call   c0001c34 <disk_write>
c00036a0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 3d                	jne    c00036ee <dir_clear+0xea>
c00036b1:	43                   	inc    ebx
c00036b2:	eb cc                	jmp    c0003680 <dir_clear+0x7c>
c00036b4:	83 ec 0c             	sub    esp,0xc
c00036b7:	31 d2                	xor    edx,edx
c00036b9:	55                   	push   ebp
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c4:	52                   	push   edx
c00036c5:	50                   	push   eax
c00036c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ca:	57                   	push   edi
c00036cb:	50                   	push   eax
c00036cc:	e8 63 e5 ff ff       	call   c0001c34 <disk_write>
c00036d1:	83 c4 20             	add    esp,0x20
c00036d4:	85 c0                	test   eax,eax
c00036d6:	75 0a                	jne    c00036e2 <dir_clear+0xde>
c00036d8:	01 eb                	add    ebx,ebp
c00036da:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036de:	39 d8                	cmp    eax,ebx
c00036e0:	77 d2                	ja     c00036b4 <dir_clear+0xb0>
c00036e2:	83 ec 0c             	sub    esp,0xc
c00036e5:	57                   	push   edi
c00036e6:	e8 c7 4d 00 00       	call   c00084b2 <ff_memfree>
c00036eb:	83 c4 10             	add    esp,0x10
c00036ee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f2:	39 d8                	cmp    eax,ebx
c00036f4:	0f 95 c0             	setne  al
c00036f7:	0f b6 c0             	movzx  eax,al
c00036fa:	eb 19                	jmp    c0003715 <dir_clear+0x111>
c00036fc:	b8 01 00 00 00       	mov    eax,0x1
c0003701:	eb 12                	jmp    c0003715 <dir_clear+0x111>
c0003703:	89 d9                	mov    ecx,ebx
c0003705:	31 d2                	xor    edx,edx
c0003707:	c1 eb 09             	shr    ebx,0x9
c000370a:	e8 ee e5 ff ff       	call   c0001cfd <mem_set>
c000370f:	89 dd                	mov    ebp,ebx
c0003711:	31 db                	xor    ebx,ebx
c0003713:	eb c5                	jmp    c00036da <dir_clear+0xd6>
c0003715:	83 c4 1c             	add    esp,0x1c
c0003718:	5b                   	pop    ebx
c0003719:	5e                   	pop    esi
c000371a:	5f                   	pop    edi
c000371b:	5d                   	pop    ebp
c000371c:	c3                   	ret    

c000371d <dir_next>:
c000371d:	55                   	push   ebp
c000371e:	57                   	push   edi
c000371f:	56                   	push   esi
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 1c             	sub    esp,0x1c
c0003726:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000372f:	8d 78 20             	lea    edi,[eax+0x20]
c0003732:	31 c0                	xor    eax,eax
c0003734:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003738:	0f 94 c0             	sete   al
c000373b:	48                   	dec    eax
c000373c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003741:	05 00 00 00 10       	add    eax,0x10000000
c0003746:	39 f8                	cmp    eax,edi
c0003748:	77 0e                	ja     c0003758 <dir_next+0x3b>
c000374a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003751:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003758:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000375e:	b8 04 00 00 00       	mov    eax,0x4
c0003763:	89 ce                	mov    esi,ecx
c0003765:	09 d6                	or     esi,edx
c0003767:	0f 84 da 00 00 00    	je     c0003847 <dir_next+0x12a>
c000376d:	89 f8                	mov    eax,edi
c000376f:	25 ff 01 00 00       	and    eax,0x1ff
c0003774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003778:	0f 85 b9 00 00 00    	jne    c0003837 <dir_next+0x11a>
c000377e:	83 c2 01             	add    edx,0x1
c0003781:	83 d1 00             	adc    ecx,0x0
c0003784:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378d:	85 d2                	test   edx,edx
c000378f:	75 29                	jne    c00037ba <dir_next+0x9d>
c0003791:	89 fa                	mov    edx,edi
c0003793:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003797:	c1 ea 05             	shr    edx,0x5
c000379a:	39 c2                	cmp    edx,eax
c000379c:	0f 82 95 00 00 00    	jb     c0003837 <dir_next+0x11a>
c00037a2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b0:	b8 04 00 00 00       	mov    eax,0x4
c00037b5:	e9 8d 00 00 00       	jmp    c0003847 <dir_next+0x12a>
c00037ba:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037be:	89 f9                	mov    ecx,edi
c00037c0:	48                   	dec    eax
c00037c1:	c1 e9 09             	shr    ecx,0x9
c00037c4:	85 c8                	test   eax,ecx
c00037c6:	75 6f                	jne    c0003837 <dir_next+0x11a>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	e8 00 f8 ff ff       	call   c0002fcf <get_fat>
c00037cf:	89 c6                	mov    esi,eax
c00037d1:	83 f8 01             	cmp    eax,0x1
c00037d4:	77 07                	ja     c00037dd <dir_next+0xc0>
c00037d6:	b8 02 00 00 00       	mov    eax,0x2
c00037db:	eb 6a                	jmp    c0003847 <dir_next+0x12a>
c00037dd:	83 f8 ff             	cmp    eax,0xffffffff
c00037e0:	75 07                	jne    c00037e9 <dir_next+0xcc>
c00037e2:	b8 01 00 00 00       	mov    eax,0x1
c00037e7:	eb 5e                	jmp    c0003847 <dir_next+0x12a>
c00037e9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ec:	77 37                	ja     c0003825 <dir_next+0x108>
c00037ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f3:	74 ad                	je     c00037a2 <dir_next+0x85>
c00037f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f8:	89 d8                	mov    eax,ebx
c00037fa:	e8 be fa ff ff       	call   c00032bd <create_chain>
c00037ff:	89 c6                	mov    esi,eax
c0003801:	b8 07 00 00 00       	mov    eax,0x7
c0003806:	85 f6                	test   esi,esi
c0003808:	74 3d                	je     c0003847 <dir_next+0x12a>
c000380a:	83 fe 01             	cmp    esi,0x1
c000380d:	74 c7                	je     c00037d6 <dir_next+0xb9>
c000380f:	83 fe ff             	cmp    esi,0xffffffff
c0003812:	74 ce                	je     c00037e2 <dir_next+0xc5>
c0003814:	89 f2                	mov    edx,esi
c0003816:	89 e8                	mov    eax,ebp
c0003818:	e8 e7 fd ff ff       	call   c0003604 <dir_clear>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 c1                	jne    c00037e2 <dir_next+0xc5>
c0003821:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003825:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003828:	89 f2                	mov    edx,esi
c000382a:	89 e8                	mov    eax,ebp
c000382c:	e8 d1 e6 ff ff       	call   c0001f02 <clst2sect>
c0003831:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003834:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000383e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003842:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003845:	31 c0                	xor    eax,eax
c0003847:	83 c4 1c             	add    esp,0x1c
c000384a:	5b                   	pop    ebx
c000384b:	5e                   	pop    esi
c000384c:	5f                   	pop    edi
c000384d:	5d                   	pop    ebp
c000384e:	c3                   	ret    

c000384f <load_xdir>:
c000384f:	55                   	push   ebp
c0003850:	57                   	push   edi
c0003851:	56                   	push   esi
c0003852:	89 c6                	mov    esi,eax
c0003854:	53                   	push   ebx
c0003855:	83 ec 1c             	sub    esp,0x1c
c0003858:	8b 00                	mov    eax,DWORD PTR [eax]
c000385a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003863:	e8 df eb ff ff       	call   c0002447 <move_window>
c0003868:	89 c3                	mov    ebx,eax
c000386a:	85 c0                	test   eax,eax
c000386c:	0f 85 0c 01 00 00    	jne    c000397e <load_xdir+0x12f>
c0003872:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003875:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003878:	0f 85 fb 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c000387e:	89 f8                	mov    eax,edi
c0003880:	b9 20 00 00 00       	mov    ecx,0x20
c0003885:	e8 5e e4 ff ff       	call   c0001ce8 <mem_cpy>
c000388a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000388e:	40                   	inc    eax
c000388f:	c1 e0 05             	shl    eax,0x5
c0003892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003896:	83 e8 60             	sub    eax,0x60
c0003899:	3d 00 02 00 00       	cmp    eax,0x200
c000389e:	0f 87 d5 00 00 00    	ja     c0003979 <load_xdir+0x12a>
c00038a4:	31 d2                	xor    edx,edx
c00038a6:	89 f0                	mov    eax,esi
c00038a8:	e8 70 fe ff ff       	call   c000371d <dir_next>
c00038ad:	89 c3                	mov    ebx,eax
c00038af:	83 f8 04             	cmp    eax,0x4
c00038b2:	0f 84 c1 00 00 00    	je     c0003979 <load_xdir+0x12a>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 85 be 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038c0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c8:	e8 7a eb ff ff       	call   c0002447 <move_window>
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	85 c0                	test   eax,eax
c00038d1:	0f 85 a7 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038d7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038da:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038dd:	0f 85 96 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c00038e3:	8d 47 20             	lea    eax,[edi+0x20]
c00038e6:	b9 20 00 00 00       	mov    ecx,0x20
c00038eb:	e8 f8 e3 ff ff       	call   c0001ce8 <mem_cpy>
c00038f0:	31 d2                	xor    edx,edx
c00038f2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fb:	83 c0 2c             	add    eax,0x2c
c00038fe:	f7 f1                	div    ecx
c0003900:	c1 e0 05             	shl    eax,0x5
c0003903:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003907:	77 70                	ja     c0003979 <load_xdir+0x12a>
c0003909:	bd 40 00 00 00       	mov    ebp,0x40
c000390e:	31 d2                	xor    edx,edx
c0003910:	89 f0                	mov    eax,esi
c0003912:	e8 06 fe ff ff       	call   c000371d <dir_next>
c0003917:	89 c3                	mov    ebx,eax
c0003919:	83 f8 04             	cmp    eax,0x4
c000391c:	74 5b                	je     c0003979 <load_xdir+0x12a>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 5c                	jne    c000397e <load_xdir+0x12f>
c0003922:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003925:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003928:	8b 06                	mov    eax,DWORD PTR [esi]
c000392a:	e8 18 eb ff ff       	call   c0002447 <move_window>
c000392f:	89 c3                	mov    ebx,eax
c0003931:	85 c0                	test   eax,eax
c0003933:	75 49                	jne    c000397e <load_xdir+0x12f>
c0003935:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003938:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393b:	75 3c                	jne    c0003979 <load_xdir+0x12a>
c000393d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003943:	77 0d                	ja     c0003952 <load_xdir+0x103>
c0003945:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003948:	b9 20 00 00 00       	mov    ecx,0x20
c000394d:	e8 96 e3 ff ff       	call   c0001ce8 <mem_cpy>
c0003952:	83 c5 20             	add    ebp,0x20
c0003955:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003959:	77 b3                	ja     c000390e <load_xdir+0xbf>
c000395b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003961:	77 1b                	ja     c000397e <load_xdir+0x12f>
c0003963:	89 f8                	mov    eax,edi
c0003965:	e8 cd e7 ff ff       	call   c0002137 <xdir_sum>
c000396a:	89 c1                	mov    ecx,eax
c000396c:	8d 47 02             	lea    eax,[edi+0x2]
c000396f:	e8 f5 e2 ff ff       	call   c0001c69 <ld_word>
c0003974:	66 39 c1             	cmp    cx,ax
c0003977:	74 05                	je     c000397e <load_xdir+0x12f>
c0003979:	bb 02 00 00 00       	mov    ebx,0x2
c000397e:	83 c4 1c             	add    esp,0x1c
c0003981:	89 d8                	mov    eax,ebx
c0003983:	5b                   	pop    ebx
c0003984:	5e                   	pop    esi
c0003985:	5f                   	pop    edi
c0003986:	5d                   	pop    ebp
c0003987:	c3                   	ret    

c0003988 <load_obj_xdir>:
c0003988:	53                   	push   ebx
c0003989:	89 c3                	mov    ebx,eax
c000398b:	83 ec 08             	sub    esp,0x8
c000398e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003990:	89 03                	mov    DWORD PTR [ebx],eax
c0003992:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003995:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003998:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000399e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a8:	30 c0                	xor    al,al
c00039aa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b4:	89 d8                	mov    eax,ebx
c00039b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039bc:	e8 04 f8 ff ff       	call   c00031c5 <dir_sdi>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	75 0b                	jne    c00039d0 <load_obj_xdir+0x48>
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	83 c4 08             	add    esp,0x8
c00039ca:	5b                   	pop    ebx
c00039cb:	e9 7f fe ff ff       	jmp    c000384f <load_xdir>
c00039d0:	83 c4 08             	add    esp,0x8
c00039d3:	5b                   	pop    ebx
c00039d4:	c3                   	ret    

c00039d5 <dir_read>:
c00039d5:	55                   	push   ebp
c00039d6:	bd 04 00 00 00       	mov    ebp,0x4
c00039db:	57                   	push   edi
c00039dc:	56                   	push   esi
c00039dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e2:	53                   	push   ebx
c00039e3:	89 c3                	mov    ebx,eax
c00039e5:	83 ec 1c             	sub    esp,0x1c
c00039e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ec:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ee:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f9:	89 c8                	mov    eax,ecx
c00039fb:	09 d0                	or     eax,edx
c00039fd:	0f 84 25 01 00 00    	je     c0003b28 <dir_read+0x153>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 3d ea ff ff       	call   c0002447 <move_window>
c0003a0a:	89 c5                	mov    ebp,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 23 01 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a14:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a17:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a19:	84 c9                	test   cl,cl
c0003a1b:	0f 84 11 01 00 00    	je     c0003b32 <dir_read+0x15d>
c0003a21:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a24:	75 48                	jne    c0003a6e <dir_read+0x99>
c0003a26:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2b:	74 10                	je     c0003a3d <dir_read+0x68>
c0003a2d:	80 f9 83             	cmp    cl,0x83
c0003a30:	0f 85 dd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a36:	31 ed                	xor    ebp,ebp
c0003a38:	e9 08 01 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a3d:	80 f9 85             	cmp    cl,0x85
c0003a40:	0f 85 cd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a49:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4c:	89 d8                	mov    eax,ebx
c0003a4e:	e8 fc fd ff ff       	call   c000384f <load_xdir>
c0003a53:	89 c5                	mov    ebp,eax
c0003a55:	85 c0                	test   eax,eax
c0003a57:	0f 85 da 00 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a60:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a63:	83 e0 3f             	and    eax,0x3f
c0003a66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a69:	e9 d7 00 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a6e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a71:	83 e0 3f             	and    eax,0x3f
c0003a74:	80 f9 2e             	cmp    cl,0x2e
c0003a77:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	0f 84 8a 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a84:	80 f9 e5             	cmp    cl,0xe5
c0003a87:	0f 84 81 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a91:	83 e0 1f             	and    eax,0x1f
c0003a94:	83 f8 08             	cmp    eax,0x8
c0003a97:	0f 94 c0             	sete   al
c0003a9a:	0f b6 c0             	movzx  eax,al
c0003a9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa1:	75 6b                	jne    c0003b0e <dir_read+0x139>
c0003aa3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa8:	75 44                	jne    c0003aee <dir_read+0x119>
c0003aaa:	f6 c1 40             	test   cl,0x40
c0003aad:	74 12                	je     c0003ac1 <dir_read+0xec>
c0003aaf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab2:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003abf:	eb 06                	jmp    c0003ac7 <dir_read+0xf2>
c0003ac1:	89 f0                	mov    eax,esi
c0003ac3:	38 c8                	cmp    al,cl
c0003ac5:	75 47                	jne    c0003b0e <dir_read+0x139>
c0003ac7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acb:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad3:	75 3e                	jne    c0003b13 <dir_read+0x13e>
c0003ad5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003adc:	e8 8a e4 ff ff       	call   c0001f6b <pick_lfn>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 2e                	je     c0003b13 <dir_read+0x13e>
c0003ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae9:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aec:	eb 25                	jmp    c0003b13 <dir_read+0x13e>
c0003aee:	89 f0                	mov    eax,esi
c0003af0:	84 c0                	test   al,al
c0003af2:	75 11                	jne    c0003b05 <dir_read+0x130>
c0003af4:	89 d0                	mov    eax,edx
c0003af6:	e8 2a e6 ff ff       	call   c0002125 <sum_sfn>
c0003afb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003aff:	0f 84 31 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b05:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0c:	eb 37                	jmp    c0003b45 <dir_read+0x170>
c0003b0e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b13:	31 d2                	xor    edx,edx
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 01 fc ff ff       	call   c000371d <dir_next>
c0003b1c:	89 c5                	mov    ebp,eax
c0003b1e:	85 c0                	test   eax,eax
c0003b20:	0f 84 cd fe ff ff    	je     c00039f3 <dir_read+0x1e>
c0003b26:	eb 0f                	jmp    c0003b37 <dir_read+0x162>
c0003b28:	85 ed                	test   ebp,ebp
c0003b2a:	0f 84 06 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b30:	eb 05                	jmp    c0003b37 <dir_read+0x162>
c0003b32:	bd 04 00 00 00       	mov    ebp,0x4
c0003b37:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b3e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b45:	83 c4 1c             	add    esp,0x1c
c0003b48:	89 e8                	mov    eax,ebp
c0003b4a:	5b                   	pop    ebx
c0003b4b:	5e                   	pop    esi
c0003b4c:	5f                   	pop    edi
c0003b4d:	5d                   	pop    ebp
c0003b4e:	c3                   	ret    

c0003b4f <dir_alloc>:
c0003b4f:	55                   	push   ebp
c0003b50:	89 d5                	mov    ebp,edx
c0003b52:	57                   	push   edi
c0003b53:	31 d2                	xor    edx,edx
c0003b55:	56                   	push   esi
c0003b56:	53                   	push   ebx
c0003b57:	89 c3                	mov    ebx,eax
c0003b59:	83 ec 0c             	sub    esp,0xc
c0003b5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b5e:	e8 62 f6 ff ff       	call   c00031c5 <dir_sdi>
c0003b63:	85 c0                	test   eax,eax
c0003b65:	75 4e                	jne    c0003bb5 <dir_alloc+0x66>
c0003b67:	31 f6                	xor    esi,esi
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f8                	mov    eax,edi
c0003b71:	e8 d1 e8 ff ff       	call   c0002447 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 3b                	jne    c0003bb5 <dir_alloc+0x66>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b80:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b82:	75 07                	jne    c0003b8b <dir_alloc+0x3c>
c0003b84:	f7 d2                	not    edx
c0003b86:	c0 ea 07             	shr    dl,0x7
c0003b89:	eb 0d                	jmp    c0003b98 <dir_alloc+0x49>
c0003b8b:	84 d2                	test   dl,dl
c0003b8d:	0f 94 c1             	sete   cl
c0003b90:	80 fa e5             	cmp    dl,0xe5
c0003b93:	0f 94 c2             	sete   dl
c0003b96:	09 ca                	or     edx,ecx
c0003b98:	84 d2                	test   dl,dl
c0003b9a:	74 07                	je     c0003ba3 <dir_alloc+0x54>
c0003b9c:	46                   	inc    esi
c0003b9d:	39 ee                	cmp    esi,ebp
c0003b9f:	75 04                	jne    c0003ba5 <dir_alloc+0x56>
c0003ba1:	eb 1c                	jmp    c0003bbf <dir_alloc+0x70>
c0003ba3:	31 f6                	xor    esi,esi
c0003ba5:	ba 01 00 00 00       	mov    edx,0x1
c0003baa:	89 d8                	mov    eax,ebx
c0003bac:	e8 6c fb ff ff       	call   c000371d <dir_next>
c0003bb1:	85 c0                	test   eax,eax
c0003bb3:	74 b4                	je     c0003b69 <dir_alloc+0x1a>
c0003bb5:	83 f8 04             	cmp    eax,0x4
c0003bb8:	75 05                	jne    c0003bbf <dir_alloc+0x70>
c0003bba:	b8 07 00 00 00       	mov    eax,0x7
c0003bbf:	83 c4 0c             	add    esp,0xc
c0003bc2:	5b                   	pop    ebx
c0003bc3:	5e                   	pop    esi
c0003bc4:	5f                   	pop    edi
c0003bc5:	5d                   	pop    ebp
c0003bc6:	c3                   	ret    

c0003bc7 <store_xdir>:
c0003bc7:	55                   	push   ebp
c0003bc8:	57                   	push   edi
c0003bc9:	89 c7                	mov    edi,eax
c0003bcb:	56                   	push   esi
c0003bcc:	53                   	push   ebx
c0003bcd:	83 ec 0c             	sub    esp,0xc
c0003bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd5:	89 e8                	mov    eax,ebp
c0003bd7:	e8 5b e5 ff ff       	call   c0002137 <xdir_sum>
c0003bdc:	0f b7 d0             	movzx  edx,ax
c0003bdf:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be2:	e8 f4 e0 ff ff       	call   c0001cdb <st_word>
c0003be7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003beb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bee:	89 f8                	mov    eax,edi
c0003bf0:	e8 d0 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003bf5:	89 c6                	mov    esi,eax
c0003bf7:	85 f6                	test   esi,esi
c0003bf9:	75 3d                	jne    c0003c38 <store_xdir+0x71>
c0003bfb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bfe:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c03:	e8 3f e8 ff ff       	call   c0002447 <move_window>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	75 2a                	jne    c0003c38 <store_xdir+0x71>
c0003c0e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c11:	b9 20 00 00 00       	mov    ecx,0x20
c0003c16:	89 ea                	mov    edx,ebp
c0003c18:	e8 cb e0 ff ff       	call   c0001ce8 <mem_cpy>
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	85 db                	test   ebx,ebx
c0003c21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c25:	74 11                	je     c0003c38 <store_xdir+0x71>
c0003c27:	31 d2                	xor    edx,edx
c0003c29:	89 f8                	mov    eax,edi
c0003c2b:	83 c5 20             	add    ebp,0x20
c0003c2e:	e8 ea fa ff ff       	call   c000371d <dir_next>
c0003c33:	4b                   	dec    ebx
c0003c34:	89 c6                	mov    esi,eax
c0003c36:	eb bf                	jmp    c0003bf7 <store_xdir+0x30>
c0003c38:	89 f0                	mov    eax,esi
c0003c3a:	83 fe 02             	cmp    esi,0x2
c0003c3d:	76 05                	jbe    c0003c44 <store_xdir+0x7d>
c0003c3f:	b8 02 00 00 00       	mov    eax,0x2
c0003c44:	83 c4 0c             	add    esp,0xc
c0003c47:	5b                   	pop    ebx
c0003c48:	5e                   	pop    esi
c0003c49:	5f                   	pop    edi
c0003c4a:	5d                   	pop    ebp
c0003c4b:	c3                   	ret    

c0003c4c <dir_remove>:
c0003c4c:	57                   	push   edi
c0003c4d:	56                   	push   esi
c0003c4e:	53                   	push   ebx
c0003c4f:	89 c3                	mov    ebx,eax
c0003c51:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c54:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c56:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c59:	83 fa ff             	cmp    edx,0xffffffff
c0003c5c:	74 09                	je     c0003c67 <dir_remove+0x1b>
c0003c5e:	e8 62 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003c63:	85 c0                	test   eax,eax
c0003c65:	75 41                	jne    c0003ca8 <dir_remove+0x5c>
c0003c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6d:	89 f0                	mov    eax,esi
c0003c6f:	e8 d3 e7 ff ff       	call   c0002447 <move_window>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	75 26                	jne    c0003c9e <dir_remove+0x52>
c0003c78:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c7e:	75 05                	jne    c0003c85 <dir_remove+0x39>
c0003c80:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c83:	eb 03                	jmp    c0003c88 <dir_remove+0x3c>
c0003c85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c8f:	73 17                	jae    c0003ca8 <dir_remove+0x5c>
c0003c91:	31 d2                	xor    edx,edx
c0003c93:	89 d8                	mov    eax,ebx
c0003c95:	e8 83 fa ff ff       	call   c000371d <dir_next>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	74 c9                	je     c0003c67 <dir_remove+0x1b>
c0003c9e:	83 f8 04             	cmp    eax,0x4
c0003ca1:	75 05                	jne    c0003ca8 <dir_remove+0x5c>
c0003ca3:	b8 02 00 00 00       	mov    eax,0x2
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	c3                   	ret    

c0003cac <create_name>:
c0003cac:	55                   	push   ebp
c0003cad:	89 d5                	mov    ebp,edx
c0003caf:	57                   	push   edi
c0003cb0:	89 c7                	mov    edi,eax
c0003cb2:	56                   	push   esi
c0003cb3:	31 f6                	xor    esi,esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 3c             	sub    esp,0x3c
c0003cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ccc:	e8 72 e0 ff ff       	call   c0001d43 <tchar2uni>
c0003cd1:	89 c3                	mov    ebx,eax
c0003cd3:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd6:	75 0a                	jne    c0003ce2 <create_name+0x36>
c0003cd8:	b8 06 00 00 00       	mov    eax,0x6
c0003cdd:	e9 9e 02 00 00       	jmp    c0003f80 <create_name+0x2d4>
c0003ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce7:	76 0c                	jbe    c0003cf5 <create_name+0x49>
c0003ce9:	c1 e8 10             	shr    eax,0x10
c0003cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf4:	46                   	inc    esi
c0003cf5:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf9:	76 4f                	jbe    c0003d4a <create_name+0x9e>
c0003cfb:	66 83 fb 5c          	cmp    bx,0x5c
c0003cff:	74 35                	je     c0003d36 <create_name+0x8a>
c0003d01:	66 83 fb 2f          	cmp    bx,0x2f
c0003d05:	74 2f                	je     c0003d36 <create_name+0x8a>
c0003d07:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0b:	77 11                	ja     c0003d1e <create_name+0x72>
c0003d0d:	0f b7 d3             	movzx  edx,bx
c0003d10:	b8 52 9d 02 c0       	mov    eax,0xc0029d52
c0003d15:	e8 11 e0 ff ff       	call   c0001d2b <chk_chr>
c0003d1a:	85 c0                	test   eax,eax
c0003d1c:	75 ba                	jne    c0003cd8 <create_name+0x2c>
c0003d1e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d24:	77 b2                	ja     c0003cd8 <create_name+0x2c>
c0003d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d2e:	46                   	inc    esi
c0003d2f:	eb 97                	jmp    c0003cc8 <create_name+0x1c>
c0003d31:	40                   	inc    eax
c0003d32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3c:	80 fa 2f             	cmp    dl,0x2f
c0003d3f:	74 f0                	je     c0003d31 <create_name+0x85>
c0003d41:	80 fa 5c             	cmp    dl,0x5c
c0003d44:	74 eb                	je     c0003d31 <create_name+0x85>
c0003d46:	31 db                	xor    ebx,ebx
c0003d48:	eb 02                	jmp    c0003d4c <create_name+0xa0>
c0003d4a:	b3 04                	mov    bl,0x4
c0003d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d50:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d53:	85 f6                	test   esi,esi
c0003d55:	74 18                	je     c0003d6f <create_name+0xc3>
c0003d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d60:	66 83 f8 20          	cmp    ax,0x20
c0003d64:	74 06                	je     c0003d6c <create_name+0xc0>
c0003d66:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6a:	75 03                	jne    c0003d6f <create_name+0xc3>
c0003d6c:	4e                   	dec    esi
c0003d6d:	eb e4                	jmp    c0003d53 <create_name+0xa7>
c0003d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d73:	31 ed                	xor    ebp,ebp
c0003d75:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7b:	85 f6                	test   esi,esi
c0003d7d:	0f 84 55 ff ff ff    	je     c0003cd8 <create_name+0x2c>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d8e:	66 83 f8 20          	cmp    ax,0x20
c0003d92:	75 04                	jne    c0003d98 <create_name+0xec>
c0003d94:	89 d5                	mov    ebp,edx
c0003d96:	eb eb                	jmp    c0003d83 <create_name+0xd7>
c0003d98:	85 ed                	test   ebp,ebp
c0003d9a:	75 06                	jne    c0003da2 <create_name+0xf6>
c0003d9c:	66 83 f8 2e          	cmp    ax,0x2e
c0003da0:	75 08                	jne    c0003daa <create_name+0xfe>
c0003da2:	83 cb 03             	or     ebx,0x3
c0003da5:	eb 03                	jmp    c0003daa <create_name+0xfe>
c0003da7:	4e                   	dec    esi
c0003da8:	74 0c                	je     c0003db6 <create_name+0x10a>
c0003daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dae:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db4:	75 f1                	jne    c0003da7 <create_name+0xfb>
c0003db6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dbe:	ba 20 00 00 00       	mov    edx,0x20
c0003dc3:	e8 35 df ff ff       	call   c0001cfd <mem_set>
c0003dc8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd0:	31 c9                	xor    ecx,ecx
c0003dd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de6:	66 85 ed             	test   bp,bp
c0003de9:	0f 84 30 01 00 00    	je     c0003f1f <create_name+0x273>
c0003def:	66 83 fd 20          	cmp    bp,0x20
c0003df3:	74 10                	je     c0003e05 <create_name+0x159>
c0003df5:	66 83 fd 2e          	cmp    bp,0x2e
c0003df9:	75 13                	jne    c0003e0e <create_name+0x162>
c0003dfb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dff:	0f 84 6b 01 00 00    	je     c0003f70 <create_name+0x2c4>
c0003e05:	83 cb 03             	or     ebx,0x3
c0003e08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0c:	eb c9                	jmp    c0003dd7 <create_name+0x12b>
c0003e0e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e12:	73 0b                	jae    c0003e1f <create_name+0x173>
c0003e14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e18:	75 47                	jne    c0003e61 <create_name+0x1b5>
c0003e1a:	e9 51 01 00 00       	jmp    c0003f70 <create_name+0x2c4>
c0003e1f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e24:	75 10                	jne    c0003e36 <create_name+0x18a>
c0003e26:	83 cb 03             	or     ebx,0x3
c0003e29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e31:	e9 e9 00 00 00       	jmp    c0003f1f <create_name+0x273>
c0003e36:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3a:	74 0d                	je     c0003e49 <create_name+0x19d>
c0003e3c:	83 cb 03             	or     ebx,0x3
c0003e3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e43:	0f 87 d6 00 00 00    	ja     c0003f1f <create_name+0x273>
c0003e49:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e52:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5a:	b9 08 00 00 00       	mov    ecx,0x8
c0003e5f:	eb a7                	jmp    c0003e08 <create_name+0x15c>
c0003e61:	66 83 fd 7f          	cmp    bp,0x7f
c0003e65:	76 68                	jbe    c0003ecf <create_name+0x223>
c0003e67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6b:	88 da                	mov    dl,bl
c0003e6d:	83 ca 02             	or     edx,0x2
c0003e70:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e74:	50                   	push   eax
c0003e75:	50                   	push   eax
c0003e76:	68 b5 01 00 00       	push   0x1b5
c0003e7b:	55                   	push   ebp
c0003e7c:	e8 48 46 00 00       	call   c00084c9 <ff_uni2oem>
c0003e81:	83 c4 10             	add    esp,0x10
c0003e84:	89 c5                	mov    ebp,eax
c0003e86:	a8 80                	test   al,0x80
c0003e88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	74 0c                	je     c0003e9e <create_name+0x1f2>
c0003e92:	83 e5 7f             	and    ebp,0x7f
c0003e95:	0f b6 ad a0 9c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6360]
c0003e9c:	eb 2a                	jmp    c0003ec8 <create_name+0x21c>
c0003e9e:	66 3d ff 00          	cmp    ax,0xff
c0003ea2:	76 24                	jbe    c0003ec8 <create_name+0x21c>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	48                   	dec    eax
c0003ea9:	39 c8                	cmp    eax,ecx
c0003eab:	77 0c                	ja     c0003eb9 <create_name+0x20d>
c0003ead:	83 cb 03             	or     ebx,0x3
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	e9 4f ff ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003eb9:	89 e8                	mov    eax,ebp
c0003ebb:	88 d3                	mov    bl,dl
c0003ebd:	66 c1 e8 08          	shr    ax,0x8
c0003ec1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec5:	41                   	inc    ecx
c0003ec6:	eb 4b                	jmp    c0003f13 <create_name+0x267>
c0003ec8:	88 d3                	mov    bl,dl
c0003eca:	66 85 ed             	test   bp,bp
c0003ecd:	74 19                	je     c0003ee8 <create_name+0x23c>
c0003ecf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed3:	0f b7 d5             	movzx  edx,bp
c0003ed6:	b8 5b 9d 02 c0       	mov    eax,0xc0029d5b
c0003edb:	e8 4b de ff ff       	call   c0001d2b <chk_chr>
c0003ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee4:	85 c0                	test   eax,eax
c0003ee6:	74 0a                	je     c0003ef2 <create_name+0x246>
c0003ee8:	83 cb 03             	or     ebx,0x3
c0003eeb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef0:	eb 21                	jmp    c0003f13 <create_name+0x267>
c0003ef2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef5:	66 83 f8 19          	cmp    ax,0x19
c0003ef9:	77 07                	ja     c0003f02 <create_name+0x256>
c0003efb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f00:	eb 11                	jmp    c0003f13 <create_name+0x267>
c0003f02:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f05:	66 83 f8 19          	cmp    ax,0x19
c0003f09:	77 08                	ja     c0003f13 <create_name+0x267>
c0003f0b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f10:	83 ed 20             	sub    ebp,0x20
c0003f13:	89 e8                	mov    eax,ebp
c0003f15:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f19:	41                   	inc    ecx
c0003f1a:	e9 e9 fe ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003f1f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f23:	75 04                	jne    c0003f29 <create_name+0x27d>
c0003f25:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f29:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f2e:	75 05                	jne    c0003f35 <create_name+0x289>
c0003f30:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f39:	83 e0 0c             	and    eax,0xc
c0003f3c:	3c 0c                	cmp    al,0xc
c0003f3e:	74 0b                	je     c0003f4b <create_name+0x29f>
c0003f40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f44:	83 e0 03             	and    eax,0x3
c0003f47:	3c 03                	cmp    al,0x3
c0003f49:	75 05                	jne    c0003f50 <create_name+0x2a4>
c0003f4b:	83 cb 02             	or     ebx,0x2
c0003f4e:	eb 19                	jmp    c0003f69 <create_name+0x2bd>
c0003f50:	f6 c3 02             	test   bl,0x2
c0003f53:	75 14                	jne    c0003f69 <create_name+0x2bd>
c0003f55:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5a:	74 03                	je     c0003f5f <create_name+0x2b3>
c0003f5c:	83 cb 10             	or     ebx,0x10
c0003f5f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f64:	74 03                	je     c0003f69 <create_name+0x2bd>
c0003f66:	83 cb 08             	or     ebx,0x8
c0003f69:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6c:	31 c0                	xor    eax,eax
c0003f6e:	eb 10                	jmp    c0003f80 <create_name+0x2d4>
c0003f70:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f75:	0f 85 ce fe ff ff    	jne    c0003e49 <create_name+0x19d>
c0003f7b:	e9 a6 fe ff ff       	jmp    c0003e26 <create_name+0x17a>
c0003f80:	83 c4 3c             	add    esp,0x3c
c0003f83:	5b                   	pop    ebx
c0003f84:	5e                   	pop    esi
c0003f85:	5f                   	pop    edi
c0003f86:	5d                   	pop    ebp
c0003f87:	c3                   	ret    

c0003f88 <xname_sum>:
c0003f88:	56                   	push   esi
c0003f89:	53                   	push   ebx
c0003f8a:	89 c6                	mov    esi,eax
c0003f8c:	51                   	push   ecx
c0003f8d:	31 db                	xor    ebx,ebx
c0003f8f:	83 c6 02             	add    esi,0x2
c0003f92:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f96:	66 85 c0             	test   ax,ax
c0003f99:	74 1f                	je     c0003fba <xname_sum+0x32>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	66 d1 cb             	ror    bx,1
c0003fa1:	50                   	push   eax
c0003fa2:	e8 1e 46 00 00       	call   c00085c5 <ff_wtoupper>
c0003fa7:	83 c4 10             	add    esp,0x10
c0003faa:	0f b6 d0             	movzx  edx,al
c0003fad:	66 c1 e8 08          	shr    ax,0x8
c0003fb1:	01 d3                	add    ebx,edx
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	01 c3                	add    ebx,eax
c0003fb8:	eb d5                	jmp    c0003f8f <xname_sum+0x7>
c0003fba:	89 d8                	mov    eax,ebx
c0003fbc:	5a                   	pop    edx
c0003fbd:	5b                   	pop    ebx
c0003fbe:	5e                   	pop    esi
c0003fbf:	c3                   	ret    

c0003fc0 <create_xdir>:
c0003fc0:	55                   	push   ebp
c0003fc1:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc6:	57                   	push   edi
c0003fc7:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcc:	56                   	push   esi
c0003fcd:	31 ff                	xor    edi,edi
c0003fcf:	53                   	push   ebx
c0003fd0:	be 40 00 00 00       	mov    esi,0x40
c0003fd5:	89 c3                	mov    ebx,eax
c0003fd7:	83 ec 1c             	sub    esp,0x1c
c0003fda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fde:	31 d2                	xor    edx,edx
c0003fe0:	e8 18 dd ff ff       	call   c0001cfd <mem_set>
c0003fe5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fec:	31 c9                	xor    ecx,ecx
c0003fee:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff5:	83 c6 02             	add    esi,0x2
c0003ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffc:	66 85 ed             	test   bp,bp
c0003fff:	74 12                	je     c0004013 <create_xdir+0x53>
c0004001:	0f b6 c1             	movzx  eax,cl
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400c:	66 83 fd 01          	cmp    bp,0x1
c0004010:	80 d9 ff             	sbb    cl,0xff
c0004013:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004016:	0f b7 d5             	movzx  edx,bp
c0004019:	83 c6 02             	add    esi,0x2
c000401c:	e8 ba dc ff ff       	call   c0001cdb <st_word>
c0004021:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004027:	75 d3                	jne    c0003ffc <create_xdir+0x3c>
c0004029:	8d 47 01             	lea    eax,[edi+0x1]
c000402c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004030:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004034:	0f b6 c1             	movzx  eax,cl
c0004037:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403c:	74 07                	je     c0004045 <create_xdir+0x85>
c000403e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004043:	eb a9                	jmp    c0003fee <create_xdir+0x2e>
c0004045:	8d 47 02             	lea    eax,[edi+0x2]
c0004048:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000404e:	89 d0                	mov    eax,edx
c0004050:	e8 33 ff ff ff       	call   c0003f88 <xname_sum>
c0004055:	83 c4 1c             	add    esp,0x1c
c0004058:	0f b7 d0             	movzx  edx,ax
c000405b:	8d 43 24             	lea    eax,[ebx+0x24]
c000405e:	5b                   	pop    ebx
c000405f:	5e                   	pop    esi
c0004060:	5f                   	pop    edi
c0004061:	5d                   	pop    ebp
c0004062:	e9 74 dc ff ff       	jmp    c0001cdb <st_word>

c0004067 <cmp_lfn>:
c0004067:	55                   	push   ebp
c0004068:	57                   	push   edi
c0004069:	89 d7                	mov    edi,edx
c000406b:	56                   	push   esi
c000406c:	53                   	push   ebx
c000406d:	83 ec 1c             	sub    esp,0x1c
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004077:	e8 ed db ff ff       	call   c0001c69 <ld_word>
c000407c:	66 85 c0             	test   ax,ax
c000407f:	74 07                	je     c0004088 <cmp_lfn+0x21>
c0004081:	31 c0                	xor    eax,eax
c0004083:	e9 9a 00 00 00       	jmp    c0004122 <cmp_lfn+0xbb>
c0004088:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408a:	bd 01 00 00 00       	mov    ebp,0x1
c000408f:	83 e3 3f             	and    ebx,0x3f
c0004092:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409a:	4b                   	dec    ebx
c000409b:	6b db 0d             	imul   ebx,ebx,0xd
c000409e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a2:	0f b6 80 20 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62e0]
c00040a9:	01 f8                	add    eax,edi
c00040ab:	e8 b9 db ff ff       	call   c0001c69 <ld_word>
c00040b0:	66 85 ed             	test   bp,bp
c00040b3:	89 c6                	mov    esi,eax
c00040b5:	74 3c                	je     c00040f3 <cmp_lfn+0x8c>
c00040b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bd:	77 c2                	ja     c0004081 <cmp_lfn+0x1a>
c00040bf:	83 ec 0c             	sub    esp,0xc
c00040c2:	0f b7 c0             	movzx  eax,ax
c00040c5:	50                   	push   eax
c00040c6:	e8 fa 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040cb:	89 c5                	mov    ebp,eax
c00040cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040df:	e8 e1 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040e4:	83 c4 10             	add    esp,0x10
c00040e7:	39 c5                	cmp    ebp,eax
c00040e9:	75 96                	jne    c0004081 <cmp_lfn+0x1a>
c00040eb:	89 f5                	mov    ebp,esi
c00040ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f1:	eb 04                	jmp    c00040f7 <cmp_lfn+0x90>
c00040f3:	66 46                	inc    si
c00040f5:	75 8a                	jne    c0004081 <cmp_lfn+0x1a>
c00040f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004100:	75 9c                	jne    c000409e <cmp_lfn+0x37>
c0004102:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004105:	74 16                	je     c000411d <cmp_lfn+0xb6>
c0004107:	66 85 ed             	test   bp,bp
c000410a:	74 11                	je     c000411d <cmp_lfn+0xb6>
c000410c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004110:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004115:	0f 94 c0             	sete   al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	eb 05                	jmp    c0004122 <cmp_lfn+0xbb>
c000411d:	b8 01 00 00 00       	mov    eax,0x1
c0004122:	83 c4 1c             	add    esp,0x1c
c0004125:	5b                   	pop    ebx
c0004126:	5e                   	pop    esi
c0004127:	5f                   	pop    edi
c0004128:	5d                   	pop    ebp
c0004129:	c3                   	ret    

c000412a <dir_find>:
c000412a:	55                   	push   ebp
c000412b:	31 d2                	xor    edx,edx
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	89 c3                	mov    ebx,eax
c0004132:	83 ec 1c             	sub    esp,0x1c
c0004135:	8b 30                	mov    esi,DWORD PTR [eax]
c0004137:	e8 89 f0 ff ff       	call   c00031c5 <dir_sdi>
c000413c:	89 04 24             	mov    DWORD PTR [esp],eax
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 9e 01 00 00    	jne    c00042e5 <dir_find+0x1bb>
c0004147:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414a:	0f 85 8d 00 00 00    	jne    c00041dd <dir_find+0xb3>
c0004150:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004153:	e8 30 fe ff ff       	call   c0003f88 <xname_sum>
c0004158:	89 c7                	mov    edi,eax
c000415a:	31 d2                	xor    edx,edx
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 72 f8 ff ff       	call   c00039d5 <dir_read>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 5e 01 00 00    	jne    c00042c9 <dir_find+0x19f>
c000416b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000416e:	8d 41 24             	lea    eax,[ecx+0x24]
c0004171:	e8 f3 da ff ff       	call   c0001c69 <ld_word>
c0004176:	66 39 f8             	cmp    ax,di
c0004179:	75 df                	jne    c000415a <dir_find+0x30>
c000417b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000417e:	31 ed                	xor    ebp,ebp
c0004180:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004184:	ba 40 00 00 00       	mov    edx,0x40
c0004189:	89 e9                	mov    ecx,ebp
c000418b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000418f:	0f 84 42 01 00 00    	je     c00042d7 <dir_find+0x1ad>
c0004195:	f6 c2 1f             	test   dl,0x1f
c0004198:	75 03                	jne    c000419d <dir_find+0x73>
c000419a:	83 c2 02             	add    edx,0x2
c000419d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a1:	89 d0                	mov    eax,edx
c00041a3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a6:	e8 be da ff ff       	call   c0001c69 <ld_word>
c00041ab:	83 ec 0c             	sub    esp,0xc
c00041ae:	0f b7 c0             	movzx  eax,ax
c00041b1:	50                   	push   eax
c00041b2:	e8 0e 44 00 00       	call   c00085c5 <ff_wtoupper>
c00041b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041be:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c5:	e8 fb 43 00 00       	call   c00085c5 <ff_wtoupper>
c00041ca:	83 c4 10             	add    esp,0x10
c00041cd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d1:	75 87                	jne    c000415a <dir_find+0x30>
c00041d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d7:	45                   	inc    ebp
c00041d8:	83 c2 02             	add    edx,0x2
c00041db:	eb ac                	jmp    c0004189 <dir_find+0x5f>
c00041dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f4:	89 f0                	mov    eax,esi
c00041f6:	e8 4c e2 ff ff       	call   c0002447 <move_window>
c00041fb:	85 c0                	test   eax,eax
c00041fd:	0f 85 c6 00 00 00    	jne    c00042c9 <dir_find+0x19f>
c0004203:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004206:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004209:	84 c9                	test   cl,cl
c000420b:	0f 84 bd 00 00 00    	je     c00042ce <dir_find+0x1a4>
c0004211:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004214:	88 d0                	mov    al,dl
c0004216:	83 e0 3f             	and    eax,0x3f
c0004219:	80 f9 e5             	cmp    cl,0xe5
c000421c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000421f:	0f 84 87 00 00 00    	je     c00042ac <dir_find+0x182>
c0004225:	80 e2 08             	and    dl,0x8
c0004228:	74 06                	je     c0004230 <dir_find+0x106>
c000422a:	3c 0f                	cmp    al,0xf
c000422c:	75 7e                	jne    c00042ac <dir_find+0x182>
c000422e:	eb 04                	jmp    c0004234 <dir_find+0x10a>
c0004230:	3c 0f                	cmp    al,0xf
c0004232:	75 4c                	jne    c0004280 <dir_find+0x156>
c0004234:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004238:	75 7e                	jne    c00042b8 <dir_find+0x18e>
c000423a:	f6 c1 40             	test   cl,0x40
c000423d:	74 12                	je     c0004251 <dir_find+0x127>
c000423f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004242:	83 e1 bf             	and    ecx,0xffffffbf
c0004245:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004249:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424f:	eb 06                	jmp    c0004257 <dir_find+0x12d>
c0004251:	89 f8                	mov    eax,edi
c0004253:	38 c8                	cmp    al,cl
c0004255:	75 5c                	jne    c00042b3 <dir_find+0x189>
c0004257:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004260:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004263:	75 53                	jne    c00042b8 <dir_find+0x18e>
c0004265:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004269:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426c:	89 ea                	mov    edx,ebp
c000426e:	e8 f4 fd ff ff       	call   c0004067 <cmp_lfn>
c0004273:	85 c0                	test   eax,eax
c0004275:	74 41                	je     c00042b8 <dir_find+0x18e>
c0004277:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000427e:	eb 38                	jmp    c00042b8 <dir_find+0x18e>
c0004280:	89 f8                	mov    eax,edi
c0004282:	84 c0                	test   al,al
c0004284:	75 0d                	jne    c0004293 <dir_find+0x169>
c0004286:	89 e8                	mov    eax,ebp
c0004288:	e8 98 de ff ff       	call   c0002125 <sum_sfn>
c000428d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004291:	74 52                	je     c00042e5 <dir_find+0x1bb>
c0004293:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004297:	75 13                	jne    c00042ac <dir_find+0x182>
c0004299:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429c:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 60 da ff ff       	call   c0001d08 <mem_cmp>
c00042a8:	85 c0                	test   eax,eax
c00042aa:	74 39                	je     c00042e5 <dir_find+0x1bb>
c00042ac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b8:	31 d2                	xor    edx,edx
c00042ba:	89 d8                	mov    eax,ebx
c00042bc:	e8 5c f4 ff ff       	call   c000371d <dir_next>
c00042c1:	85 c0                	test   eax,eax
c00042c3:	0f 84 25 ff ff ff    	je     c00041ee <dir_find+0xc4>
c00042c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00042cc:	eb 17                	jmp    c00042e5 <dir_find+0x1bb>
c00042ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d5:	eb 0e                	jmp    c00042e5 <dir_find+0x1bb>
c00042d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042da:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042df:	0f 85 75 fe ff ff    	jne    c000415a <dir_find+0x30>
c00042e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e8:	83 c4 1c             	add    esp,0x1c
c00042eb:	5b                   	pop    ebx
c00042ec:	5e                   	pop    esi
c00042ed:	5f                   	pop    edi
c00042ee:	5d                   	pop    ebp
c00042ef:	c3                   	ret    

c00042f0 <dir_register>:
c00042f0:	55                   	push   ebp
c00042f1:	57                   	push   edi
c00042f2:	56                   	push   esi
c00042f3:	be 06 00 00 00       	mov    esi,0x6
c00042f8:	53                   	push   ebx
c00042f9:	83 ec 6c             	sub    esp,0x6c
c00042fc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004300:	0f 85 62 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004306:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004308:	31 ff                	xor    edi,edi
c000430a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004312:	74 03                	je     c0004317 <dir_register+0x27>
c0004314:	47                   	inc    edi
c0004315:	eb f6                	jmp    c000430d <dir_register+0x1d>
c0004317:	89 c3                	mov    ebx,eax
c0004319:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431d:	0f 85 e1 00 00 00    	jne    c0004404 <dir_register+0x114>
c0004323:	83 c7 0e             	add    edi,0xe
c0004326:	b9 0f 00 00 00       	mov    ecx,0xf
c000432b:	89 f8                	mov    eax,edi
c000432d:	31 d2                	xor    edx,edx
c000432f:	f7 f1                	div    ecx
c0004331:	8d 50 02             	lea    edx,[eax+0x2]
c0004334:	89 c7                	mov    edi,eax
c0004336:	89 d8                	mov    eax,ebx
c0004338:	e8 12 f8 ff ff       	call   c0003b4f <dir_alloc>
c000433d:	89 c6                	mov    esi,eax
c000433f:	85 c0                	test   eax,eax
c0004341:	0f 85 21 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004347:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004350:	c1 e7 05             	shl    edi,0x5
c0004353:	29 f8                	sub    eax,edi
c0004355:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004358:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435b:	a8 04                	test   al,0x4
c000435d:	0f 84 91 00 00 00    	je     c00043f4 <dir_register+0x104>
c0004363:	83 e0 fb             	and    eax,0xfffffffb
c0004366:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004369:	89 d8                	mov    eax,ebx
c000436b:	e8 25 ec ff ff       	call   c0002f95 <fill_first_frag>
c0004370:	85 c0                	test   eax,eax
c0004372:	0f 85 ee 01 00 00    	jne    c0004566 <dir_register+0x276>
c0004378:	83 c9 ff             	or     ecx,0xffffffff
c000437b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 db eb ff ff       	call   c0002f60 <fill_last_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 d9 01 00 00    	jne    c0004566 <dir_register+0x276>
c000438d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004391:	74 61                	je     c00043f4 <dir_register+0x104>
c0004393:	89 da                	mov    edx,ebx
c0004395:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004399:	e8 ea f5 ff ff       	call   c0003988 <load_obj_xdir>
c000439e:	85 c0                	test   eax,eax
c00043a0:	0f 85 c0 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043a6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043aa:	31 c9                	xor    ecx,ecx
c00043ac:	c1 e2 09             	shl    edx,0x9
c00043af:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043be:	83 c0 38             	add    eax,0x38
c00043c1:	e8 1c d9 ff ff       	call   c0001ce2 <st_qword>
c00043c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043cc:	83 c0 28             	add    eax,0x28
c00043cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d2:	e8 0b d9 ff ff       	call   c0001ce2 <st_qword>
c00043d7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043dd:	83 c8 01             	or     eax,0x1
c00043e0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e7:	e8 db f7 ff ff       	call   c0003bc7 <store_xdir>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 85 72 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fa:	e8 c1 fb ff ff       	call   c0003fc0 <create_xdir>
c00043ff:	e9 64 01 00 00       	jmp    c0004568 <dir_register+0x278>
c0004404:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004407:	b9 0c 00 00 00       	mov    ecx,0xc
c000440c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004410:	89 c2                	mov    edx,eax
c0004412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004416:	e8 cd d8 ff ff       	call   c0001ce8 <mem_cpy>
c000441b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004420:	74 58                	je     c000447a <dir_register+0x18a>
c0004422:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004426:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000442e:	83 ec 0c             	sub    esp,0xc
c0004431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004438:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004440:	e8 24 dc ff ff       	call   c0002069 <gen_numname>
c0004445:	89 d8                	mov    eax,ebx
c0004447:	e8 de fc ff ff       	call   c000412a <dir_find>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	89 c6                	mov    esi,eax
c0004451:	85 c0                	test   eax,eax
c0004453:	75 15                	jne    c000446a <dir_register+0x17a>
c0004455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004459:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000445e:	75 ce                	jne    c000442e <dir_register+0x13e>
c0004460:	be 07 00 00 00       	mov    esi,0x7
c0004465:	e9 fe 00 00 00       	jmp    c0004568 <dir_register+0x278>
c000446a:	83 f8 04             	cmp    eax,0x4
c000446d:	0f 85 f5 00 00 00    	jne    c0004568 <dir_register+0x278>
c0004473:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004477:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447a:	b9 01 00 00 00       	mov    ecx,0x1
c000447f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004484:	74 0f                	je     c0004495 <dir_register+0x1a5>
c0004486:	b9 0d 00 00 00       	mov    ecx,0xd
c000448b:	8d 47 0c             	lea    eax,[edi+0xc]
c000448e:	31 d2                	xor    edx,edx
c0004490:	f7 f1                	div    ecx
c0004492:	8d 48 01             	lea    ecx,[eax+0x1]
c0004495:	89 ca                	mov    edx,ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 ad f6 ff ff       	call   c0003b4f <dir_alloc>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 bc 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b0:	49                   	dec    ecx
c00044b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b5:	74 6a                	je     c0004521 <dir_register+0x231>
c00044b7:	89 c8                	mov    eax,ecx
c00044b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044bc:	c1 e0 05             	shl    eax,0x5
c00044bf:	29 c2                	sub    edx,eax
c00044c1:	89 d8                	mov    eax,ebx
c00044c3:	e8 fd ec ff ff       	call   c00031c5 <dir_sdi>
c00044c8:	89 c6                	mov    esi,eax
c00044ca:	85 c0                	test   eax,eax
c00044cc:	0f 85 96 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d6:	e8 4a dc ff ff       	call   c0002125 <sum_sfn>
c00044db:	0f b6 f8             	movzx  edi,al
c00044de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e4:	89 e8                	mov    eax,ebp
c00044e6:	e8 5c df ff ff       	call   c0002447 <move_window>
c00044eb:	89 c6                	mov    esi,eax
c00044ed:	85 c0                	test   eax,eax
c00044ef:	75 77                	jne    c0004568 <dir_register+0x278>
c00044f1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f9:	83 ec 0c             	sub    esp,0xc
c00044fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044ff:	57                   	push   edi
c0004500:	e8 e0 da ff ff       	call   c0001fe5 <put_lfn>
c0004505:	31 d2                	xor    edx,edx
c0004507:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450b:	89 d8                	mov    eax,ebx
c000450d:	e8 0b f2 ff ff       	call   c000371d <dir_next>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	89 c6                	mov    esi,eax
c0004517:	85 c0                	test   eax,eax
c0004519:	75 4d                	jne    c0004568 <dir_register+0x278>
c000451b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000451f:	75 bd                	jne    c00044de <dir_register+0x1ee>
c0004521:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004527:	89 e8                	mov    eax,ebp
c0004529:	e8 19 df ff ff       	call   c0002447 <move_window>
c000452e:	89 c6                	mov    esi,eax
c0004530:	85 c0                	test   eax,eax
c0004532:	75 34                	jne    c0004568 <dir_register+0x278>
c0004534:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004537:	b9 20 00 00 00       	mov    ecx,0x20
c000453c:	31 d2                	xor    edx,edx
c000453e:	e8 ba d7 ff ff       	call   c0001cfd <mem_set>
c0004543:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454a:	b9 0b 00 00 00       	mov    ecx,0xb
c000454f:	e8 94 d7 ff ff       	call   c0001ce8 <mem_cpy>
c0004554:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004557:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455a:	83 e0 18             	and    eax,0x18
c000455d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004560:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004564:	eb 02                	jmp    c0004568 <dir_register+0x278>
c0004566:	89 c6                	mov    esi,eax
c0004568:	83 c4 6c             	add    esp,0x6c
c000456b:	89 f0                	mov    eax,esi
c000456d:	5b                   	pop    ebx
c000456e:	5e                   	pop    esi
c000456f:	5f                   	pop    edi
c0004570:	5d                   	pop    ebp
c0004571:	c3                   	ret    

c0004572 <sync_fs>:
c0004572:	56                   	push   esi
c0004573:	53                   	push   ebx
c0004574:	53                   	push   ebx
c0004575:	89 c3                	mov    ebx,eax
c0004577:	e8 37 de ff ff       	call   c00023b3 <sync_window>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 85 b1 00 00 00    	jne    c0004635 <sync_fs+0xc3>
c0004584:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004587:	0f 85 8e 00 00 00    	jne    c000461b <sync_fs+0xa9>
c000458d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004591:	0f 85 84 00 00 00    	jne    c000461b <sync_fs+0xa9>
c0004597:	b9 00 02 00 00       	mov    ecx,0x200
c000459c:	8d 73 54             	lea    esi,[ebx+0x54]
c000459f:	31 d2                	xor    edx,edx
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	e8 55 d7 ff ff       	call   c0001cfd <mem_set>
c00045a8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ae:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b3:	e8 23 d7 ff ff       	call   c0001cdb <st_word>
c00045b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 1b d7 ff ff       	call   c0001cdf <st_dword>
c00045c4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00045cf:	e8 0b d7 ff ff       	call   c0001cdf <st_dword>
c00045d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045dd:	e8 fd d6 ff ff       	call   c0001cdf <st_dword>
c00045e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045eb:	e8 ef d6 ff ff       	call   c0001cdf <st_dword>
c00045f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f6:	83 c0 01             	add    eax,0x1
c00045f9:	83 d2 00             	adc    edx,0x0
c00045fc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045ff:	83 ec 0c             	sub    esp,0xc
c0004602:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004605:	6a 01                	push   0x1
c0004607:	52                   	push   edx
c0004608:	50                   	push   eax
c0004609:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460d:	56                   	push   esi
c000460e:	50                   	push   eax
c000460f:	e8 20 d6 ff ff       	call   c0001c34 <disk_write>
c0004614:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004618:	83 c4 20             	add    esp,0x20
c000461b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000461f:	51                   	push   ecx
c0004620:	6a 00                	push   0x0
c0004622:	6a 00                	push   0x0
c0004624:	50                   	push   eax
c0004625:	e8 20 d6 ff ff       	call   c0001c4a <disk_ioctl>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	85 c0                	test   eax,eax
c000462f:	0f 95 c0             	setne  al
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	5a                   	pop    edx
c0004636:	5b                   	pop    ebx
c0004637:	5e                   	pop    esi
c0004638:	c3                   	ret    

c0004639 <create_partition>:
c0004639:	55                   	push   ebp
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	57                   	push   edi
c000463e:	56                   	push   esi
c000463f:	53                   	push   ebx
c0004640:	83 ec 60             	sub    esp,0x60
c0004643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004647:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000464f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004653:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004657:	50                   	push   eax
c0004658:	6a 01                	push   0x1
c000465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000465e:	e8 e7 d5 ff ff       	call   c0001c4a <disk_ioctl>
c0004663:	83 c4 10             	add    esp,0x10
c0004666:	85 c0                	test   eax,eax
c0004668:	74 0a                	je     c0004674 <create_partition+0x3b>
c000466a:	b8 01 00 00 00       	mov    eax,0x1
c000466f:	e9 67 05 00 00       	jmp    c0004bdb <create_partition+0x5a2>
c0004674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004678:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004680:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004684:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004689:	0f 86 ed 03 00 00    	jbe    c0004a7c <create_partition+0x443>
c000468f:	83 c0 df             	add    eax,0xffffffdf
c0004692:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ad:	83 c0 bd             	add    eax,0xffffffbd
c00046b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b7:	83 d2 ff             	adc    edx,0xffffffff
c00046ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ca:	be 22 00 00 00       	mov    esi,0x22
c00046cf:	31 ff                	xor    edi,edi
c00046d1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ed:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f3:	75 0e                	jne    c0004703 <create_partition+0xca>
c00046f5:	b9 00 02 00 00       	mov    ecx,0x200
c00046fa:	31 d2                	xor    edx,edx
c00046fc:	89 d8                	mov    eax,ebx
c00046fe:	e8 fa d5 ff ff       	call   c0001cfd <mem_set>
c0004703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000470f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004712:	0f 84 23 01 00 00    	je     c000483b <create_partition+0x202>
c0004718:	89 f0                	mov    eax,esi
c000471a:	89 fa                	mov    edx,edi
c000471c:	05 ff 07 00 00       	add    eax,0x7ff
c0004721:	83 d2 00             	adc    edx,0x0
c0004724:	89 c1                	mov    ecx,eax
c0004726:	89 d7                	mov    edi,edx
c0004728:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000472e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004732:	89 ce                	mov    esi,ecx
c0004734:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004740:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004747:	89 04 24             	mov    DWORD PTR [esp],eax
c000474a:	b8 64 00 00 00       	mov    eax,0x64
c000474f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004752:	b8 00 00 00 00       	mov    eax,0x0
c0004757:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475b:	72 41                	jb     c000479e <create_partition+0x165>
c000475d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004765:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000476e:	01 c1                	add    ecx,eax
c0004770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004774:	f7 24 24             	mul    DWORD PTR [esp]
c0004777:	6a 00                	push   0x0
c0004779:	01 ca                	add    edx,ecx
c000477b:	6a 64                	push   0x64
c000477d:	52                   	push   edx
c000477e:	50                   	push   eax
c000477f:	e8 20 2a 02 00       	call   c00271a4 <__udivdi3>
c0004784:	83 c4 10             	add    esp,0x10
c0004787:	05 ff 07 00 00       	add    eax,0x7ff
c000478c:	83 d2 00             	adc    edx,0x0
c000478f:	89 c1                	mov    ecx,eax
c0004791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004795:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000479e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a5:	01 f0                	add    eax,esi
c00047a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ab:	11 fa                	adc    edx,edi
c00047ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b1:	19 d1                	sbb    ecx,edx
c00047b3:	73 2e                	jae    c00047e3 <create_partition+0x1aa>
c00047b5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b9:	89 f8                	mov    eax,edi
c00047bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ce:	73 6b                	jae    c000483b <create_partition+0x202>
c00047d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d8:	29 f0                	sub    eax,esi
c00047da:	19 fa                	sbb    edx,edi
c00047dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00047df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ea:	74 4f                	je     c000483b <create_partition+0x202>
c00047ec:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ef:	b9 10 00 00 00       	mov    ecx,0x10
c00047f4:	ba 30 9d 02 c0       	mov    edx,0xc0029d30
c00047f9:	e8 ea d4 ff ff       	call   c0001ce8 <mem_cpy>
c00047fe:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480b:	e8 2c db ff ff       	call   c000233c <make_rand>
c0004810:	89 f2                	mov    edx,esi
c0004812:	89 f9                	mov    ecx,edi
c0004814:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004818:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481c:	e8 c1 d4 ff ff       	call   c0001ce2 <st_qword>
c0004821:	03 34 24             	add    esi,DWORD PTR [esp]
c0004824:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004828:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	83 c2 ff             	add    edx,0xffffffff
c0004833:	83 d1 ff             	adc    ecx,0xffffffff
c0004836:	e8 a7 d4 ff ff       	call   c0001ce2 <st_qword>
c000483b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000483f:	83 e8 80             	sub    eax,0xffffff80
c0004842:	89 c5                	mov    ebp,eax
c0004844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004848:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000484e:	75 6b                	jne    c00048bb <create_partition+0x282>
c0004850:	45                   	inc    ebp
c0004851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004855:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485a:	e8 39 da ff ff       	call   c0002298 <crc32>
c000485f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004869:	75 e5                	jne    c0004850 <create_partition+0x217>
c000486b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000486f:	31 d2                	xor    edx,edx
c0004871:	83 ec 0c             	sub    esp,0xc
c0004874:	c1 ed 09             	shr    ebp,0x9
c0004877:	6a 01                	push   0x1
c0004879:	8d 45 02             	lea    eax,[ebp+0x2]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 ac d3 ff ff       	call   c0001c34 <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 d7 fd ff ff    	jne    c000466a <create_partition+0x31>
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	31 d2                	xor    edx,edx
c0004898:	6a 01                	push   0x1
c000489a:	89 e8                	mov    eax,ebp
c000489c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a4:	52                   	push   edx
c00048a5:	50                   	push   eax
c00048a6:	53                   	push   ebx
c00048a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ab:	e8 84 d3 ff ff       	call   c0001c34 <disk_write>
c00048b0:	83 c4 20             	add    esp,0x20
c00048b3:	85 c0                	test   eax,eax
c00048b5:	0f 85 af fd ff ff    	jne    c000466a <create_partition+0x31>
c00048bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c3:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c8:	74 0d                	je     c00048d7 <create_partition+0x29e>
c00048ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d2:	e9 12 fe ff ff       	jmp    c00046e9 <create_partition+0xb0>
c00048d7:	31 d2                	xor    edx,edx
c00048d9:	b9 00 02 00 00       	mov    ecx,0x200
c00048de:	89 d8                	mov    eax,ebx
c00048e0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e3:	e8 15 d4 ff ff       	call   c0001cfd <mem_set>
c00048e8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048eb:	b9 10 00 00 00       	mov    ecx,0x10
c00048f0:	ba 20 9c 02 c0       	mov    edx,0xc0029c20
c00048f5:	89 d8                	mov    eax,ebx
c00048f7:	e8 ec d3 ff ff       	call   c0001ce8 <mem_cpy>
c00048fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004900:	8d 43 58             	lea    eax,[ebx+0x58]
c0004903:	f7 d2                	not    edx
c0004905:	e8 d5 d3 ff ff       	call   c0001cdf <st_dword>
c000490a:	8d 43 18             	lea    eax,[ebx+0x18]
c000490d:	31 c9                	xor    ecx,ecx
c000490f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004912:	ba 01 00 00 00       	mov    edx,0x1
c0004917:	e8 c6 d3 ff ff       	call   c0001ce2 <st_qword>
c000491c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004920:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004924:	83 c2 ff             	add    edx,0xffffffff
c0004927:	89 e8                	mov    eax,ebp
c0004929:	83 d1 ff             	adc    ecx,0xffffffff
c000492c:	e8 b1 d3 ff ff       	call   c0001ce2 <st_qword>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	8d 43 28             	lea    eax,[ebx+0x28]
c0004936:	ba 22 00 00 00       	mov    edx,0x22
c000493b:	e8 a2 d3 ff ff       	call   c0001ce2 <st_qword>
c0004940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004944:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004948:	83 c2 de             	add    edx,0xffffffde
c000494b:	8d 43 30             	lea    eax,[ebx+0x30]
c000494e:	83 d1 ff             	adc    ecx,0xffffffff
c0004951:	31 f6                	xor    esi,esi
c0004953:	e8 8a d3 ff ff       	call   c0001ce2 <st_qword>
c0004958:	8d 43 54             	lea    eax,[ebx+0x54]
c000495b:	ba 80 00 00 00       	mov    edx,0x80
c0004960:	e8 7a d3 ff ff       	call   c0001cdf <st_dword>
c0004965:	8d 43 50             	lea    eax,[ebx+0x50]
c0004968:	ba 80 00 00 00       	mov    edx,0x80
c000496d:	e8 6d d3 ff ff       	call   c0001cdf <st_dword>
c0004972:	ba 02 00 00 00       	mov    edx,0x2
c0004977:	89 f8                	mov    eax,edi
c0004979:	e8 61 d3 ff ff       	call   c0001cdf <st_dword>
c000497e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004981:	b9 10 00 00 00       	mov    ecx,0x10
c0004986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498a:	e8 ad d9 ff ff       	call   c000233c <make_rand>
c000498f:	83 c8 ff             	or     eax,0xffffffff
c0004992:	46                   	inc    esi
c0004993:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004998:	e8 fb d8 ff ff       	call   c0002298 <crc32>
c000499d:	83 fe 5c             	cmp    esi,0x5c
c00049a0:	75 f0                	jne    c0004992 <create_partition+0x359>
c00049a2:	f7 d0                	not    eax
c00049a4:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a7:	89 c2                	mov    edx,eax
c00049a9:	89 f0                	mov    eax,esi
c00049ab:	e8 2f d3 ff ff       	call   c0001cdf <st_dword>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 01                	push   0x1
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 71 d2 ff ff       	call   c0001c34 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 9c fc ff ff    	jne    c000466a <create_partition+0x31>
c00049ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d6:	83 c2 ff             	add    edx,0xffffffff
c00049d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049dc:	83 d1 ff             	adc    ecx,0xffffffff
c00049df:	e8 fe d2 ff ff       	call   c0001ce2 <st_qword>
c00049e4:	ba 01 00 00 00       	mov    edx,0x1
c00049e9:	31 c9                	xor    ecx,ecx
c00049eb:	89 e8                	mov    eax,ebp
c00049ed:	e8 f0 d2 ff ff       	call   c0001ce2 <st_qword>
c00049f2:	89 f8                	mov    eax,edi
c00049f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fc:	31 ff                	xor    edi,edi
c00049fe:	e8 df d2 ff ff       	call   c0001ce2 <st_qword>
c0004a03:	89 f0                	mov    eax,esi
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	e8 d3 d2 ff ff       	call   c0001cdf <st_dword>
c0004a0c:	83 c8 ff             	or     eax,0xffffffff
c0004a0f:	47                   	inc    edi
c0004a10:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a15:	e8 7e d8 ff ff       	call   c0002298 <crc32>
c0004a1a:	83 ff 5c             	cmp    edi,0x5c
c0004a1d:	75 f0                	jne    c0004a0f <create_partition+0x3d6>
c0004a1f:	f7 d0                	not    eax
c0004a21:	89 c2                	mov    edx,eax
c0004a23:	89 f0                	mov    eax,esi
c0004a25:	e8 b5 d2 ff ff       	call   c0001cdf <st_dword>
c0004a2a:	83 ec 0c             	sub    esp,0xc
c0004a2d:	6a 01                	push   0x1
c0004a2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a33:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a37:	83 c0 ff             	add    eax,0xffffffff
c0004a3a:	83 d2 ff             	adc    edx,0xffffffff
c0004a3d:	52                   	push   edx
c0004a3e:	50                   	push   eax
c0004a3f:	53                   	push   ebx
c0004a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a44:	e8 eb d1 ff ff       	call   c0001c34 <disk_write>
c0004a49:	83 c4 20             	add    esp,0x20
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	0f 85 16 fc ff ff    	jne    c000466a <create_partition+0x31>
c0004a54:	31 d2                	xor    edx,edx
c0004a56:	89 d8                	mov    eax,ebx
c0004a58:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5d:	e8 9b d2 ff ff       	call   c0001cfd <mem_set>
c0004a62:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a68:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6d:	ba 30 9c 02 c0       	mov    edx,0xc0029c30
c0004a72:	e8 71 d2 ff ff       	call   c0001ce8 <mem_cpy>
c0004a77:	e9 21 01 00 00       	jmp    c0004b9d <create_partition+0x564>
c0004a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a80:	b9 05 00 00 00       	mov    ecx,0x5
c0004a85:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a88:	bf 08 00 00 00       	mov    edi,0x8
c0004a8d:	89 f8                	mov    eax,edi
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f b6 f0             	movzx  esi,al
c0004a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a97:	f7 f6                	div    esi
c0004a99:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a9e:	76 0a                	jbe    c0004aaa <create_partition+0x471>
c0004aa0:	d1 e7                	shl    edi,1
c0004aa2:	49                   	dec    ecx
c0004aa3:	75 e8                	jne    c0004a8d <create_partition+0x454>
c0004aa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aaa:	b9 00 02 00 00       	mov    ecx,0x200
c0004aaf:	31 d2                	xor    edx,edx
c0004ab1:	89 d8                	mov    eax,ebx
c0004ab3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab9:	e8 3f d2 ff ff       	call   c0001cfd <mem_set>
c0004abe:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac6:	31 d2                	xor    edx,edx
c0004ac8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad0:	f7 f1                	div    ecx
c0004ad2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004adb:	89 f8                	mov    eax,edi
c0004add:	0f b6 c0             	movzx  eax,al
c0004ae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae4:	e9 80 00 00 00       	jmp    c0004b69 <create_partition+0x530>
c0004ae9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aec:	29 cf                	sub    edi,ecx
c0004aee:	89 ca                	mov    edx,ecx
c0004af0:	89 f0                	mov    eax,esi
c0004af2:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af7:	e8 e3 d1 ff ff       	call   c0001cdf <st_dword>
c0004afc:	8d 46 04             	lea    eax,[esi+0x4]
c0004aff:	89 fa                	mov    edx,edi
c0004b01:	83 c6 10             	add    esi,0x10
c0004b04:	e8 d6 d1 ff ff       	call   c0001cdf <st_dword>
c0004b09:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0d:	31 d2                	xor    edx,edx
c0004b0f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b12:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b16:	89 c8                	mov    eax,ecx
c0004b18:	01 f9                	add    ecx,edi
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d5                	mov    ebp,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	45                   	inc    ebp
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b28:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2b:	89 c2                	mov    edx,eax
c0004b2d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b30:	c1 ea 02             	shr    edx,0x2
c0004b33:	83 e2 c0             	and    edx,0xffffffc0
c0004b36:	09 ea                	or     edx,ebp
c0004b38:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	f7 f5                	div    ebp
c0004b44:	89 d7                	mov    edi,edx
c0004b46:	31 d2                	xor    edx,edx
c0004b48:	47                   	inc    edi
c0004b49:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b50:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b53:	89 c5                	mov    ebp,eax
c0004b55:	c1 ed 02             	shr    ebp,0x2
c0004b58:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5b:	09 ef                	or     edi,ebp
c0004b5d:	89 fa                	mov    edx,edi
c0004b5f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b62:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b67:	74 34                	je     c0004b9d <create_partition+0x564>
c0004b69:	85 c9                	test   ecx,ecx
c0004b6b:	74 30                	je     c0004b9d <create_partition+0x564>
c0004b6d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b70:	76 2b                	jbe    c0004b9d <create_partition+0x564>
c0004b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7d:	83 ff 64             	cmp    edi,0x64
c0004b80:	76 4b                	jbe    c0004bcd <create_partition+0x594>
c0004b82:	89 f8                	mov    eax,edi
c0004b84:	01 c8                	add    eax,ecx
c0004b86:	0f 82 5d ff ff ff    	jb     c0004ae9 <create_partition+0x4b0>
c0004b8c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b8f:	0f 87 54 ff ff ff    	ja     c0004ae9 <create_partition+0x4b0>
c0004b95:	85 ff                	test   edi,edi
c0004b97:	0f 85 51 ff ff ff    	jne    c0004aee <create_partition+0x4b5>
c0004b9d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba8:	e8 2e d1 ff ff       	call   c0001cdb <st_word>
c0004bad:	83 ec 0c             	sub    esp,0xc
c0004bb0:	6a 01                	push   0x1
c0004bb2:	6a 00                	push   0x0
c0004bb4:	6a 00                	push   0x0
c0004bb6:	53                   	push   ebx
c0004bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbb:	e8 74 d0 ff ff       	call   c0001c34 <disk_write>
c0004bc0:	83 c4 20             	add    esp,0x20
c0004bc3:	85 c0                	test   eax,eax
c0004bc5:	0f 95 c0             	setne  al
c0004bc8:	0f b6 c0             	movzx  eax,al
c0004bcb:	eb 0e                	jmp    c0004bdb <create_partition+0x5a2>
c0004bcd:	74 07                	je     c0004bd6 <create_partition+0x59d>
c0004bcf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd4:	eb ac                	jmp    c0004b82 <create_partition+0x549>
c0004bd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd9:	eb a7                	jmp    c0004b82 <create_partition+0x549>
c0004bdb:	83 c4 5c             	add    esp,0x5c
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <get_fileinfo>:
c0004be3:	55                   	push   ebp
c0004be4:	57                   	push   edi
c0004be5:	56                   	push   esi
c0004be6:	53                   	push   ebx
c0004be7:	83 ec 1c             	sub    esp,0x1c
c0004bea:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bec:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfa:	0f 84 dc 01 00 00    	je     c0004ddc <get_fileinfo+0x1f9>
c0004c00:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c03:	75 0f                	jne    c0004c14 <get_fileinfo+0x31>
c0004c05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c08:	83 c4 1c             	add    esp,0x1c
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	5f                   	pop    edi
c0004c0e:	5d                   	pop    ebp
c0004c0f:	e9 58 d5 ff ff       	jmp    c000216c <get_xfileinfo>
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1c:	74 6a                	je     c0004c88 <get_fileinfo+0xa5>
c0004c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c26:	31 ed                	xor    ebp,ebp
c0004c28:	31 ff                	xor    edi,edi
c0004c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c35:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c39:	66 85 d2             	test   dx,dx
c0004c3c:	74 3e                	je     c0004c7c <get_fileinfo+0x99>
c0004c3e:	66 85 ed             	test   bp,bp
c0004c41:	75 0c                	jne    c0004c4f <get_fileinfo+0x6c>
c0004c43:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c49:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4d:	76 22                	jbe    c0004c71 <get_fileinfo+0x8e>
c0004c4f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c54:	89 e8                	mov    eax,ebp
c0004c56:	29 f9                	sub    ecx,edi
c0004c58:	c1 e0 10             	shl    eax,0x10
c0004c5b:	09 d0                	or     eax,edx
c0004c5d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c61:	e8 a3 d1 ff ff       	call   c0001e09 <put_utf>
c0004c66:	84 c0                	test   al,al
c0004c68:	74 10                	je     c0004c7a <get_fileinfo+0x97>
c0004c6a:	0f b6 c0             	movzx  eax,al
c0004c6d:	31 d2                	xor    edx,edx
c0004c6f:	01 c7                	add    edi,eax
c0004c71:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c76:	89 d5                	mov    ebp,edx
c0004c78:	eb b0                	jmp    c0004c2a <get_fileinfo+0x47>
c0004c7a:	31 ff                	xor    edi,edi
c0004c7c:	66 85 ed             	test   bp,bp
c0004c7f:	74 02                	je     c0004c83 <get_fileinfo+0xa0>
c0004c81:	31 ff                	xor    edi,edi
c0004c83:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c88:	31 ff                	xor    edi,edi
c0004c8a:	31 c9                	xor    ecx,ecx
c0004c8c:	83 f9 0a             	cmp    ecx,0xa
c0004c8f:	0f 87 ad 00 00 00    	ja     c0004d42 <get_fileinfo+0x15f>
c0004c95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c9f:	66 83 fa 20          	cmp    dx,0x20
c0004ca3:	0f 84 92 00 00 00    	je     c0004d3b <get_fileinfo+0x158>
c0004ca9:	66 83 fa 05          	cmp    dx,0x5
c0004cad:	75 05                	jne    c0004cb4 <get_fileinfo+0xd1>
c0004caf:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb4:	83 ff 0b             	cmp    edi,0xb
c0004cb7:	77 0b                	ja     c0004cc4 <get_fileinfo+0xe1>
c0004cb9:	83 fd 09             	cmp    ebp,0x9
c0004cbc:	75 06                	jne    c0004cc4 <get_fileinfo+0xe1>
c0004cbe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc3:	47                   	inc    edi
c0004cc4:	0f b7 c2             	movzx  eax,dx
c0004cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccb:	e8 6d d0 ff ff       	call   c0001d3d <dbc_1st>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 2f                	je     c0004d03 <get_fileinfo+0x120>
c0004cd4:	83 fd 08             	cmp    ebp,0x8
c0004cd7:	74 2a                	je     c0004d03 <get_fileinfo+0x120>
c0004cd9:	83 fd 0b             	cmp    ebp,0xb
c0004cdc:	74 25                	je     c0004d03 <get_fileinfo+0x120>
c0004cde:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce9:	e8 52 d0 ff ff       	call   c0001d40 <dbc_2nd>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 11                	je     c0004d03 <get_fileinfo+0x120>
c0004cf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfb:	c1 e2 08             	shl    edx,0x8
c0004cfe:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d01:	09 c2                	or     edx,eax
c0004d03:	0f b7 d2             	movzx  edx,dx
c0004d06:	50                   	push   eax
c0004d07:	50                   	push   eax
c0004d08:	68 b5 01 00 00       	push   0x1b5
c0004d0d:	52                   	push   edx
c0004d0e:	e8 46 38 00 00       	call   c0008559 <ff_oem2uni>
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	66 85 c0             	test   ax,ax
c0004d19:	75 04                	jne    c0004d1f <get_fileinfo+0x13c>
c0004d1b:	31 ff                	xor    edi,edi
c0004d1d:	eb 23                	jmp    c0004d42 <get_fileinfo+0x15f>
c0004d1f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d24:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d28:	29 f9                	sub    ecx,edi
c0004d2a:	0f b7 c0             	movzx  eax,ax
c0004d2d:	e8 d7 d0 ff ff       	call   c0001e09 <put_utf>
c0004d32:	84 c0                	test   al,al
c0004d34:	74 e5                	je     c0004d1b <get_fileinfo+0x138>
c0004d36:	0f b6 c0             	movzx  eax,al
c0004d39:	01 c7                	add    edi,eax
c0004d3b:	89 e9                	mov    ecx,ebp
c0004d3d:	e9 4a ff ff ff       	jmp    c0004c8c <get_fileinfo+0xa9>
c0004d42:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d47:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4b:	75 54                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d4d:	85 ff                	test   edi,edi
c0004d4f:	75 0b                	jne    c0004d5c <get_fileinfo+0x179>
c0004d51:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d55:	ba 01 00 00 00       	mov    edx,0x1
c0004d5a:	eb 33                	jmp    c0004d8f <get_fileinfo+0x1ac>
c0004d5c:	b1 08                	mov    cl,0x8
c0004d5e:	31 d2                	xor    edx,edx
c0004d60:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d66:	84 c0                	test   al,al
c0004d68:	74 25                	je     c0004d8f <get_fileinfo+0x1ac>
c0004d6a:	66 83 f8 2e          	cmp    ax,0x2e
c0004d6e:	74 16                	je     c0004d86 <get_fileinfo+0x1a3>
c0004d70:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d73:	66 83 ff 19          	cmp    di,0x19
c0004d77:	77 0f                	ja     c0004d88 <get_fileinfo+0x1a5>
c0004d79:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d7f:	74 07                	je     c0004d88 <get_fileinfo+0x1a5>
c0004d81:	83 c0 20             	add    eax,0x20
c0004d84:	eb 02                	jmp    c0004d88 <get_fileinfo+0x1a5>
c0004d86:	b1 10                	mov    cl,0x10
c0004d88:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8c:	42                   	inc    edx
c0004d8d:	eb d1                	jmp    c0004d60 <get_fileinfo+0x17d>
c0004d8f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d97:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9b:	75 04                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d9d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004daa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dad:	83 c0 1c             	add    eax,0x1c
c0004db0:	e8 c1 ce ff ff       	call   c0001c76 <ld_dword>
c0004db5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0004dbe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc1:	83 c0 16             	add    eax,0x16
c0004dc4:	e8 a0 ce ff ff       	call   c0001c69 <ld_word>
c0004dc9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd0:	83 c0 18             	add    eax,0x18
c0004dd3:	e8 91 ce ff ff       	call   c0001c69 <ld_word>
c0004dd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ddc:	83 c4 1c             	add    esp,0x1c
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	5d                   	pop    ebp
c0004de3:	c3                   	ret    

c0004de4 <ld_clust.isra.0>:
c0004de4:	56                   	push   esi
c0004de5:	89 c6                	mov    esi,eax
c0004de7:	53                   	push   ebx
c0004de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	e8 77 ce ff ff       	call   c0001c69 <ld_word>
c0004df2:	0f b7 c8             	movzx  ecx,ax
c0004df5:	89 f0                	mov    eax,esi
c0004df7:	3c 03                	cmp    al,0x3
c0004df9:	75 0d                	jne    c0004e08 <ld_clust.isra.0+0x24>
c0004dfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dfe:	e8 66 ce ff ff       	call   c0001c69 <ld_word>
c0004e03:	c1 e0 10             	shl    eax,0x10
c0004e06:	09 c1                	or     ecx,eax
c0004e08:	89 c8                	mov    eax,ecx
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <st_clust.isra.1>:
c0004e0d:	56                   	push   esi
c0004e0e:	89 c6                	mov    esi,eax
c0004e10:	53                   	push   ebx
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	0f b7 d1             	movzx  edx,cx
c0004e16:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e19:	e8 bd ce ff ff       	call   c0001cdb <st_word>
c0004e1e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e21:	75 0f                	jne    c0004e32 <st_clust.isra.1+0x25>
c0004e23:	c1 e9 10             	shr    ecx,0x10
c0004e26:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e29:	89 ca                	mov    edx,ecx
c0004e2b:	5b                   	pop    ebx
c0004e2c:	5e                   	pop    esi
c0004e2d:	e9 a9 ce ff ff       	jmp    c0001cdb <st_word>
c0004e32:	5b                   	pop    ebx
c0004e33:	5e                   	pop    esi
c0004e34:	c3                   	ret    

c0004e35 <init_alloc_info.isra.2>:
c0004e35:	56                   	push   esi
c0004e36:	53                   	push   ebx
c0004e37:	89 c6                	mov    esi,eax
c0004e39:	89 d3                	mov    ebx,edx
c0004e3b:	51                   	push   ecx
c0004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e3e:	83 c0 34             	add    eax,0x34
c0004e41:	e8 30 ce ff ff       	call   c0001c76 <ld_dword>
c0004e46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4b:	83 c0 38             	add    eax,0x38
c0004e4e:	e8 3b ce ff ff       	call   c0001c8e <ld_qword>
c0004e53:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e56:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e59:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e65:	83 e0 02             	and    eax,0x2
c0004e68:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5b                   	pop    ebx
c0004e6d:	5e                   	pop    esi
c0004e6e:	c3                   	ret    

c0004e6f <follow_path>:
c0004e6f:	56                   	push   esi
c0004e70:	53                   	push   ebx
c0004e71:	89 c3                	mov    ebx,eax
c0004e73:	83 ec 14             	sub    esp,0x14
c0004e76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e80:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e82:	80 fa 5c             	cmp    dl,0x5c
c0004e85:	75 07                	jne    c0004e8e <follow_path+0x1f>
c0004e87:	40                   	inc    eax
c0004e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8c:	eb ee                	jmp    c0004e7c <follow_path+0xd>
c0004e8e:	80 fa 2f             	cmp    dl,0x2f
c0004e91:	74 f4                	je     c0004e87 <follow_path+0x18>
c0004e93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea4:	77 52                	ja     c0004ef8 <follow_path+0x89>
c0004ea6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eaa:	31 d2                	xor    edx,edx
c0004eac:	89 d8                	mov    eax,ebx
c0004eae:	e8 12 e3 ff ff       	call   c00031c5 <dir_sdi>
c0004eb3:	eb 7c                	jmp    c0004f31 <follow_path+0xc2>
c0004eb5:	89 d8                	mov    eax,ebx
c0004eb7:	e8 6e f2 ff ff       	call   c000412a <dir_find>
c0004ebc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	75 46                	jne    c0004f09 <follow_path+0x9a>
c0004ec3:	80 e2 04             	and    dl,0x4
c0004ec6:	75 69                	jne    c0004f31 <follow_path+0xc2>
c0004ec8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ecc:	74 5e                	je     c0004f2c <follow_path+0xbd>
c0004ece:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed0:	3c 04                	cmp    al,0x4
c0004ed2:	75 41                	jne    c0004f15 <follow_path+0xa6>
c0004ed4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ede:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee1:	30 c0                	xor    al,al
c0004ee3:	09 d0                	or     eax,edx
c0004ee5:	89 da                	mov    edx,ebx
c0004ee7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef3:	e8 3d ff ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0004ef8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 a9 ed ff ff       	call   c0003cac <create_name>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	74 ae                	je     c0004eb5 <follow_path+0x46>
c0004f07:	eb 28                	jmp    c0004f31 <follow_path+0xc2>
c0004f09:	83 f8 04             	cmp    eax,0x4
c0004f0c:	75 23                	jne    c0004f31 <follow_path+0xc2>
c0004f0e:	80 e2 04             	and    dl,0x4
c0004f11:	74 19                	je     c0004f2c <follow_path+0xbd>
c0004f13:	eb 1c                	jmp    c0004f31 <follow_path+0xc2>
c0004f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f18:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f1e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f22:	e8 bd fe ff ff       	call   c0004de4 <ld_clust.isra.0>
c0004f27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2a:	eb cc                	jmp    c0004ef8 <follow_path+0x89>
c0004f2c:	b8 05 00 00 00       	mov    eax,0x5
c0004f31:	83 c4 14             	add    esp,0x14
c0004f34:	5b                   	pop    ebx
c0004f35:	5e                   	pop    esi
c0004f36:	c3                   	ret    

c0004f37 <f_mount>:
c0004f37:	53                   	push   ebx
c0004f38:	83 ec 18             	sub    esp,0x18
c0004f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4b:	e8 fb d2 ff ff       	call   c000224b <get_ldnumber>
c0004f50:	89 c2                	mov    edx,eax
c0004f52:	b8 0b 00 00 00       	mov    eax,0xb
c0004f57:	85 d2                	test   edx,edx
c0004f59:	78 39                	js     c0004f94 <f_mount+0x5d>
c0004f5b:	8b 04 95 c0 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1240]
c0004f62:	85 c0                	test   eax,eax
c0004f64:	74 03                	je     c0004f69 <f_mount+0x32>
c0004f66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6d:	85 c0                	test   eax,eax
c0004f6f:	74 03                	je     c0004f74 <f_mount+0x3d>
c0004f71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	89 04 95 c0 ed 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1240],eax
c0004f7f:	31 c0                	xor    eax,eax
c0004f81:	84 db                	test   bl,bl
c0004f83:	74 0f                	je     c0004f94 <f_mount+0x5d>
c0004f85:	31 c9                	xor    ecx,ecx
c0004f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8f:	e8 65 d7 ff ff       	call   c00026f9 <mount_volume>
c0004f94:	83 c4 18             	add    esp,0x18
c0004f97:	5b                   	pop    ebx
c0004f98:	c3                   	ret    

c0004f99 <f_open>:
c0004f99:	55                   	push   ebp
c0004f9a:	bd 09 00 00 00       	mov    ebp,0x9
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	53                   	push   ebx
c0004fa2:	83 ec 7c             	sub    esp,0x7c
c0004fa5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fac:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb3:	85 db                	test   ebx,ebx
c0004fb5:	0f 84 10 04 00 00    	je     c00053cb <f_open+0x432>
c0004fbb:	89 fe                	mov    esi,edi
c0004fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc1:	83 e6 3f             	and    esi,0x3f
c0004fc4:	89 f0                	mov    eax,esi
c0004fc6:	0f b6 c8             	movzx  ecx,al
c0004fc9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd0:	e8 24 d7 ff ff       	call   c00026f9 <mount_volume>
c0004fd5:	89 c5                	mov    ebp,eax
c0004fd7:	85 c0                	test   eax,eax
c0004fd9:	0f 85 e6 03 00 00    	jne    c00053c5 <f_open+0x42c>
c0004fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe3:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fec:	83 ec 0c             	sub    esp,0xc
c0004fef:	68 60 04 00 00       	push   0x460
c0004ff4:	e8 a3 34 00 00       	call   c000849c <ff_memalloc>
c0004ff9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ffd:	83 c4 10             	add    esp,0x10
c0005000:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005005:	0f 84 c0 03 00 00    	je     c00053cb <f_open+0x432>
c000500b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005013:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005019:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000501f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005026:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502a:	e8 40 fe ff ff       	call   c0004e6f <follow_path>
c000502f:	89 c5                	mov    ebp,eax
c0005031:	85 c0                	test   eax,eax
c0005033:	75 0c                	jne    c0005041 <f_open+0xa8>
c0005035:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503a:	79 05                	jns    c0005041 <f_open+0xa8>
c000503c:	bd 06 00 00 00       	mov    ebp,0x6
c0005041:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005047:	0f 84 84 01 00 00    	je     c00051d1 <f_open+0x238>
c000504d:	85 ed                	test   ebp,ebp
c000504f:	74 20                	je     c0005071 <f_open+0xd8>
c0005051:	83 fd 04             	cmp    ebp,0x4
c0005054:	0f 85 58 03 00 00    	jne    c00053b2 <f_open+0x419>
c000505a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000505e:	83 ce 08             	or     esi,0x8
c0005061:	e8 8a f2 ff ff       	call   c00042f0 <dir_register>
c0005066:	89 c5                	mov    ebp,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	74 2f                	je     c000509b <f_open+0x102>
c000506c:	e9 41 03 00 00       	jmp    c00053b2 <f_open+0x419>
c0005071:	bd 07 00 00 00       	mov    ebp,0x7
c0005076:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507b:	0f 85 31 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005081:	bd 08 00 00 00       	mov    ebp,0x8
c0005086:	f7 c7 04 00 00 00    	test   edi,0x4
c000508c:	0f 85 20 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005092:	83 e7 08             	and    edi,0x8
c0005095:	0f 84 65 01 00 00    	je     c0005200 <f_open+0x267>
c000509b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000509f:	8a 02                	mov    al,BYTE PTR [edx]
c00050a1:	3c 04                	cmp    al,0x4
c00050a3:	0f 85 97 00 00 00    	jne    c0005140 <f_open+0x1a7>
c00050a9:	8d 42 10             	lea    eax,[edx+0x10]
c00050ac:	89 13                	mov    DWORD PTR [ebx],edx
c00050ae:	89 da                	mov    edx,ebx
c00050b0:	e8 80 fd ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c3:	83 c0 02             	add    eax,0x2
c00050c6:	e8 32 cc ff ff       	call   c0001cfd <mem_set>
c00050cb:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d0:	31 d2                	xor    edx,edx
c00050d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d9:	83 c0 26             	add    eax,0x26
c00050dc:	e8 1c cc ff ff       	call   c0001cfd <mem_set>
c00050e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f4:	83 c0 08             	add    eax,0x8
c00050f7:	e8 e3 cb ff ff       	call   c0001cdf <st_dword>
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005103:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005107:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510b:	e8 b7 ea ff ff       	call   c0003bc7 <store_xdir>
c0005110:	89 c5                	mov    ebp,eax
c0005112:	85 c0                	test   eax,eax
c0005114:	0f 85 98 02 00 00    	jne    c00053b2 <f_open+0x419>
c000511a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511d:	85 d2                	test   edx,edx
c000511f:	0f 84 db 00 00 00    	je     c0005200 <f_open+0x267>
c0005125:	31 c9                	xor    ecx,ecx
c0005127:	89 d8                	mov    eax,ebx
c0005129:	e8 8e e3 ff ff       	call   c00034bc <remove_chain>
c000512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005132:	89 c5                	mov    ebp,eax
c0005134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005137:	48                   	dec    eax
c0005138:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513b:	e9 b8 00 00 00       	jmp    c00051f8 <f_open+0x25f>
c0005140:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005144:	89 ea                	mov    edx,ebp
c0005146:	e8 99 fc ff ff       	call   c0004de4 <ld_clust.isra.0>
c000514b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005150:	89 c7                	mov    edi,eax
c0005152:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005155:	e8 85 cb ff ff       	call   c0001cdf <st_dword>
c000515a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515e:	31 c9                	xor    ecx,ecx
c0005160:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516c:	e8 9c fc ff ff       	call   c0004e0d <st_clust.isra.1>
c0005171:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005175:	31 d2                	xor    edx,edx
c0005177:	83 c0 1c             	add    eax,0x1c
c000517a:	e8 60 cb ff ff       	call   c0001cdf <st_dword>
c000517f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005183:	85 ff                	test   edi,edi
c0005185:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005189:	74 75                	je     c0005200 <f_open+0x267>
c000518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518f:	31 c9                	xor    ecx,ecx
c0005191:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005194:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005197:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000519f:	89 fa                	mov    edx,edi
c00051a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a5:	e8 12 e3 ff ff       	call   c00034bc <remove_chain>
c00051aa:	89 c5                	mov    ebp,eax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	0f 85 fe 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c0:	4f                   	dec    edi
c00051c1:	e8 81 d2 ff ff       	call   c0002447 <move_window>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051cc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051cf:	eb 27                	jmp    c00051f8 <f_open+0x25f>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 d9 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051d9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051dd:	bd 04 00 00 00       	mov    ebp,0x4
c00051e2:	a8 10                	test   al,0x10
c00051e4:	0f 85 c8 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051ea:	83 e7 02             	and    edi,0x2
c00051ed:	74 11                	je     c0005200 <f_open+0x267>
c00051ef:	bd 07 00 00 00       	mov    ebp,0x7
c00051f4:	a8 01                	test   al,0x1
c00051f6:	eb 02                	jmp    c00051fa <f_open+0x261>
c00051f8:	85 ed                	test   ebp,ebp
c00051fa:	0f 85 b2 01 00 00    	jne    c00053b2 <f_open+0x419>
c0005200:	f7 c6 08 00 00 00    	test   esi,0x8
c0005206:	74 03                	je     c000520b <f_open+0x272>
c0005208:	83 ce 40             	or     esi,0x40
c000520b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000520f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005212:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005215:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005218:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000521f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005222:	8a 02                	mov    al,BYTE PTR [edx]
c0005224:	3c 04                	cmp    al,0x4
c0005226:	75 2a                	jne    c0005252 <f_open+0x2b9>
c0005228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005231:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005238:	30 c0                	xor    al,al
c000523a:	09 c8                	or     eax,ecx
c000523c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000523f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005243:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005246:	8d 42 10             	lea    eax,[edx+0x10]
c0005249:	89 da                	mov    edx,ebx
c000524b:	e8 e5 fb ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0005250:	eb 1c                	jmp    c000526e <f_open+0x2d5>
c0005252:	89 fa                	mov    edx,edi
c0005254:	e8 8b fb ff ff       	call   c0004de4 <ld_clust.isra.0>
c0005259:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000525f:	e8 12 ca ff ff       	call   c0001c76 <ld_dword>
c0005264:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005272:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005279:	89 03                	mov    DWORD PTR [ebx],eax
c000527b:	31 d2                	xor    edx,edx
c000527d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005281:	b9 00 02 00 00       	mov    ecx,0x200
c0005286:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000528e:	89 f0                	mov    eax,esi
c0005290:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005297:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b6:	e8 42 ca ff ff       	call   c0001cfd <mem_set>
c00052bb:	83 e6 20             	and    esi,0x20
c00052be:	75 07                	jne    c00052c7 <f_open+0x32e>
c00052c0:	31 ed                	xor    ebp,ebp
c00052c2:	e9 eb 00 00 00       	jmp    c00053b2 <f_open+0x419>
c00052c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052dd:	74 e1                	je     c00052c0 <f_open+0x327>
c00052df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ea:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f8:	31 ff                	xor    edi,edi
c00052fa:	c1 e5 09             	shl    ebp,0x9
c00052fd:	89 ee                	mov    esi,ebp
c00052ff:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005303:	89 f8                	mov    eax,edi
c0005305:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005309:	73 22                	jae    c000532d <f_open+0x394>
c000530b:	89 d8                	mov    eax,ebx
c000530d:	e8 bd dc ff ff       	call   c0002fcf <get_fat>
c0005312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005316:	89 c2                	mov    edx,eax
c0005318:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531c:	83 f8 01             	cmp    eax,0x1
c000531f:	76 10                	jbe    c0005331 <f_open+0x398>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 d9                	jne    c00052ff <f_open+0x366>
c0005326:	bd 01 00 00 00       	mov    ebp,0x1
c000532b:	eb 09                	jmp    c0005336 <f_open+0x39d>
c000532d:	31 ed                	xor    ebp,ebp
c000532f:	eb 05                	jmp    c0005336 <f_open+0x39d>
c0005331:	bd 02 00 00 00       	mov    ebp,0x2
c0005336:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005339:	85 ed                	test   ebp,ebp
c000533b:	75 75                	jne    c00053b2 <f_open+0x419>
c000533d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005341:	25 ff 01 00 00       	and    eax,0x1ff
c0005346:	0f 84 74 ff ff ff    	je     c00052c0 <f_open+0x327>
c000534c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005350:	bd 02 00 00 00       	mov    ebp,0x2
c0005355:	89 c8                	mov    eax,ecx
c0005357:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535b:	e8 a2 cb ff ff       	call   c0001f02 <clst2sect>
c0005360:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005364:	89 d7                	mov    edi,edx
c0005366:	09 c7                	or     edi,eax
c0005368:	74 48                	je     c00053b2 <f_open+0x419>
c000536a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000536e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537a:	0f ac fe 09          	shrd   esi,edi,0x9
c000537e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005382:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005386:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005389:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538d:	83 ec 0c             	sub    esp,0xc
c0005390:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005393:	6a 01                	push   0x1
c0005395:	52                   	push   edx
c0005396:	50                   	push   eax
c0005397:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539f:	50                   	push   eax
c00053a0:	e8 79 c8 ff ff       	call   c0001c1e <disk_read>
c00053a5:	83 c4 20             	add    esp,0x20
c00053a8:	85 c0                	test   eax,eax
c00053aa:	0f 95 c0             	setne  al
c00053ad:	0f b6 c0             	movzx  eax,al
c00053b0:	89 c5                	mov    ebp,eax
c00053b2:	83 ec 0c             	sub    esp,0xc
c00053b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b9:	e8 f4 30 00 00       	call   c00084b2 <ff_memfree>
c00053be:	83 c4 10             	add    esp,0x10
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	74 06                	je     c00053cb <f_open+0x432>
c00053c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cb:	83 c4 7c             	add    esp,0x7c
c00053ce:	89 e8                	mov    eax,ebp
c00053d0:	5b                   	pop    ebx
c00053d1:	5e                   	pop    esi
c00053d2:	5f                   	pop    edi
c00053d3:	5d                   	pop    ebp
c00053d4:	c3                   	ret    

c00053d5 <f_read>:
c00053d5:	55                   	push   ebp
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	53                   	push   ebx
c00053d9:	83 ec 2c             	sub    esp,0x2c
c00053dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	89 d8                	mov    eax,ebx
c00053f0:	e8 77 cf ff ff       	call   c000236c <validate>
c00053f5:	89 c5                	mov    ebp,eax
c00053f7:	85 c0                	test   eax,eax
c00053f9:	0f 85 4c 02 00 00    	jne    c000564b <f_read+0x276>
c00053ff:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005403:	85 ed                	test   ebp,ebp
c0005405:	0f 85 40 02 00 00    	jne    c000564b <f_read+0x276>
c000540b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000540f:	0f 84 31 02 00 00    	je     c0005646 <f_read+0x271>
c0005415:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005418:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000541e:	bf 00 00 00 00       	mov    edi,0x0
c0005423:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005426:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542a:	89 d1                	mov    ecx,edx
c000542c:	19 f9                	sbb    ecx,edi
c000542e:	0f 83 cf 00 00 00    	jae    c0005503 <f_read+0x12e>
c0005434:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005438:	e9 c6 00 00 00       	jmp    c0005503 <f_read+0x12e>
c000543d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005440:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005443:	89 d0                	mov    eax,edx
c0005445:	25 ff 01 00 00       	and    eax,0x1ff
c000544a:	0f 85 c9 01 00 00    	jne    c0005619 <f_read+0x244>
c0005450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005454:	89 d6                	mov    esi,edx
c0005456:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545a:	89 cf                	mov    edi,ecx
c000545c:	48                   	dec    eax
c000545d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005461:	21 f0                	and    eax,esi
c0005463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005467:	0f 84 a6 00 00 00    	je     c0005513 <f_read+0x13e>
c000546d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005471:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005474:	89 c8                	mov    eax,ecx
c0005476:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005479:	e8 84 ca ff ff       	call   c0001f02 <clst2sect>
c000547e:	89 d7                	mov    edi,edx
c0005480:	09 c7                	or     edi,eax
c0005482:	0f 84 b4 00 00 00    	je     c000553c <f_read+0x167>
c0005488:	31 ff                	xor    edi,edi
c000548a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000548e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005491:	01 c6                	add    esi,eax
c0005493:	11 d7                	adc    edi,edx
c0005495:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549d:	0f 86 fd 00 00 00    	jbe    c00055a0 <f_read+0x1cb>
c00054a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ab:	c1 e8 09             	shr    eax,0x9
c00054ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b5:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b8:	39 c2                	cmp    edx,eax
c00054ba:	76 07                	jbe    c00054c3 <f_read+0xee>
c00054bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c3:	83 ec 0c             	sub    esp,0xc
c00054c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ca:	57                   	push   edi
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d4:	50                   	push   eax
c00054d5:	e8 44 c7 ff ff       	call   c0001c1e <disk_read>
c00054da:	83 c4 20             	add    esp,0x20
c00054dd:	85 c0                	test   eax,eax
c00054df:	75 6e                	jne    c000554f <f_read+0x17a>
c00054e1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e5:	78 7e                	js     c0005565 <f_read+0x190>
c00054e7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ea:	c1 e6 09             	shl    esi,0x9
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fb:	01 30                	add    DWORD PTR [eax],esi
c00054fd:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005500:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005503:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005508:	0f 85 2f ff ff ff    	jne    c000543d <f_read+0x68>
c000550e:	e9 38 01 00 00       	jmp    c000564b <f_read+0x276>
c0005513:	89 c8                	mov    eax,ecx
c0005515:	09 d0                	or     eax,edx
c0005517:	75 05                	jne    c000551e <f_read+0x149>
c0005519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551c:	eb 19                	jmp    c0005537 <f_read+0x162>
c000551e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005522:	74 09                	je     c000552d <f_read+0x158>
c0005524:	89 d8                	mov    eax,ebx
c0005526:	e8 f8 c9 ff ff       	call   c0001f23 <clmt_clust>
c000552b:	eb 0a                	jmp    c0005537 <f_read+0x162>
c000552d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005530:	89 d8                	mov    eax,ebx
c0005532:	e8 98 da ff ff       	call   c0002fcf <get_fat>
c0005537:	83 f8 01             	cmp    eax,0x1
c000553a:	77 0e                	ja     c000554a <f_read+0x175>
c000553c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005540:	bd 02 00 00 00       	mov    ebp,0x2
c0005545:	e9 01 01 00 00       	jmp    c000564b <f_read+0x276>
c000554a:	83 f8 ff             	cmp    eax,0xffffffff
c000554d:	75 0e                	jne    c000555d <f_read+0x188>
c000554f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005553:	bd 01 00 00 00       	mov    ebp,0x1
c0005558:	e9 ee 00 00 00       	jmp    c000564b <f_read+0x276>
c000555d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005560:	e9 08 ff ff ff       	jmp    c000546d <f_read+0x98>
c0005565:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005568:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556b:	29 f0                	sub    eax,esi
c000556d:	19 fa                	sbb    edx,edi
c000556f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005572:	89 d7                	mov    edi,edx
c0005574:	ba 00 00 00 00       	mov    edx,0x0
c0005579:	89 f9                	mov    ecx,edi
c000557b:	19 d1                	sbb    ecx,edx
c000557d:	0f 83 64 ff ff ff    	jae    c00054e7 <f_read+0x112>
c0005583:	89 c7                	mov    edi,eax
c0005585:	8d 53 50             	lea    edx,[ebx+0x50]
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558f:	b9 00 02 00 00       	mov    ecx,0x200
c0005594:	01 f8                	add    eax,edi
c0005596:	e8 4d c7 ff ff       	call   c0001ce8 <mem_cpy>
c000559b:	e9 47 ff ff ff       	jmp    c00054e7 <f_read+0x112>
c00055a0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ad:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b1:	75 05                	jne    c00055b8 <f_read+0x1e3>
c00055b3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b6:	74 5b                	je     c0005613 <f_read+0x23e>
c00055b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c3:	79 2a                	jns    c00055ef <f_read+0x21a>
c00055c5:	83 ec 0c             	sub    esp,0xc
c00055c8:	6a 01                	push   0x1
c00055ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 54 c6 ff ff       	call   c0001c34 <disk_write>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 64 ff ff ff    	jne    c000554f <f_read+0x17a>
c00055eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ef:	83 ec 0c             	sub    esp,0xc
c00055f2:	6a 01                	push   0x1
c00055f4:	57                   	push   edi
c00055f5:	56                   	push   esi
c00055f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005602:	50                   	push   eax
c0005603:	e8 16 c6 ff ff       	call   c0001c1e <disk_read>
c0005608:	83 c4 20             	add    esp,0x20
c000560b:	85 c0                	test   eax,eax
c000560d:	0f 85 3c ff ff ff    	jne    c000554f <f_read+0x17a>
c0005613:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005616:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005619:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561c:	ba 00 02 00 00       	mov    edx,0x200
c0005621:	25 ff 01 00 00       	and    eax,0x1ff
c0005626:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562a:	29 c2                	sub    edx,eax
c000562c:	39 d6                	cmp    esi,edx
c000562e:	76 02                	jbe    c0005632 <f_read+0x25d>
c0005630:	89 d6                	mov    esi,edx
c0005632:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005636:	89 f1                	mov    ecx,esi
c0005638:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563c:	e8 a7 c6 ff ff       	call   c0001ce8 <mem_cpy>
c0005641:	e9 a7 fe ff ff       	jmp    c00054ed <f_read+0x118>
c0005646:	bd 07 00 00 00       	mov    ebp,0x7
c000564b:	83 c4 2c             	add    esp,0x2c
c000564e:	89 e8                	mov    eax,ebp
c0005650:	5b                   	pop    ebx
c0005651:	5e                   	pop    esi
c0005652:	5f                   	pop    edi
c0005653:	5d                   	pop    ebp
c0005654:	c3                   	ret    

c0005655 <f_write>:
c0005655:	55                   	push   ebp
c0005656:	57                   	push   edi
c0005657:	56                   	push   esi
c0005658:	53                   	push   ebx
c0005659:	83 ec 2c             	sub    esp,0x2c
c000565c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005660:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000566e:	89 d8                	mov    eax,ebx
c0005670:	e8 f7 cc ff ff       	call   c000236c <validate>
c0005675:	89 c5                	mov    ebp,eax
c0005677:	85 c0                	test   eax,eax
c0005679:	0f 85 86 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000567f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005683:	85 ed                	test   ebp,ebp
c0005685:	0f 85 7a 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000568b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000568f:	0f 84 6b 02 00 00    	je     c0005900 <f_write+0x2ab>
c0005695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005699:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569c:	0f 84 43 01 00 00    	je     c00057e5 <f_write+0x190>
c00056a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a5:	89 c1                	mov    ecx,eax
c00056a7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ab:	0f 83 34 01 00 00    	jae    c00057e5 <f_write+0x190>
c00056b1:	f7 d0                	not    eax
c00056b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b7:	e9 29 01 00 00       	jmp    c00057e5 <f_write+0x190>
c00056bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056bf:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c2:	89 d0                	mov    eax,edx
c00056c4:	25 ff 01 00 00       	and    eax,0x1ff
c00056c9:	0f 85 00 02 00 00    	jne    c00058cf <f_write+0x27a>
c00056cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d3:	89 d6                	mov    esi,edx
c00056d5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d9:	89 cf                	mov    edi,ecx
c00056db:	48                   	dec    eax
c00056dc:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e0:	21 f0                	and    eax,esi
c00056e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e6:	0f 84 06 01 00 00    	je     c00057f2 <f_write+0x19d>
c00056ec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f0:	0f 88 6e 01 00 00    	js     c0005864 <f_write+0x20f>
c00056f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056fd:	89 c8                	mov    eax,ecx
c00056ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005703:	e8 fa c7 ff ff       	call   c0001f02 <clst2sect>
c0005708:	89 d1                	mov    ecx,edx
c000570a:	09 c1                	or     ecx,eax
c000570c:	0f 84 1c 01 00 00    	je     c000582e <f_write+0x1d9>
c0005712:	31 ff                	xor    edi,edi
c0005714:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571c:	01 c6                	add    esi,eax
c000571e:	11 d7                	adc    edi,edx
c0005720:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005728:	0f 86 63 01 00 00    	jbe    c0005891 <f_write+0x23c>
c000572e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005736:	c1 e8 09             	shr    eax,0x9
c0005739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005741:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005745:	39 c2                	cmp    edx,eax
c0005747:	76 08                	jbe    c0005751 <f_write+0xfc>
c0005749:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005751:	83 ec 0c             	sub    esp,0xc
c0005754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005758:	57                   	push   edi
c0005759:	56                   	push   esi
c000575a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000575e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005762:	50                   	push   eax
c0005763:	e8 cc c4 ff ff       	call   c0001c34 <disk_write>
c0005768:	83 c4 20             	add    esp,0x20
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 ce 00 00 00    	jne    c0005841 <f_write+0x1ec>
c0005773:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005779:	29 f0                	sub    eax,esi
c000577b:	19 fa                	sbb    edx,edi
c000577d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005781:	89 d7                	mov    edi,edx
c0005783:	ba 00 00 00 00       	mov    edx,0x0
c0005788:	89 f9                	mov    ecx,edi
c000578a:	19 d1                	sbb    ecx,edx
c000578c:	73 1c                	jae    c00057aa <f_write+0x155>
c000578e:	89 c7                	mov    edi,eax
c0005790:	b9 00 02 00 00       	mov    ecx,0x200
c0005795:	c1 e7 09             	shl    edi,0x9
c0005798:	8d 43 50             	lea    eax,[ebx+0x50]
c000579b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000579f:	89 fa                	mov    edx,edi
c00057a1:	e8 42 c5 ff ff       	call   c0001ce8 <mem_cpy>
c00057a6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ae:	c1 e6 09             	shl    esi,0x9
c00057b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b5:	31 ff                	xor    edi,edi
c00057b7:	01 30                	add    DWORD PTR [eax],esi
c00057b9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ca:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cd:	89 c1                	mov    ecx,eax
c00057cf:	39 f2                	cmp    edx,esi
c00057d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d7:	19 f9                	sbb    ecx,edi
c00057d9:	73 04                	jae    c00057df <f_write+0x18a>
c00057db:	89 f2                	mov    edx,esi
c00057dd:	89 f8                	mov    eax,edi
c00057df:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ea:	0f 85 cc fe ff ff    	jne    c00056bc <f_write+0x67>
c00057f0:	eb 2e                	jmp    c0005820 <f_write+0x1cb>
c00057f2:	89 c8                	mov    eax,ecx
c00057f4:	09 d0                	or     eax,edx
c00057f6:	75 0b                	jne    c0005803 <f_write+0x1ae>
c00057f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 28                	jne    c0005829 <f_write+0x1d4>
c0005801:	eb 12                	jmp    c0005815 <f_write+0x1c0>
c0005803:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005807:	74 09                	je     c0005812 <f_write+0x1bd>
c0005809:	89 d8                	mov    eax,ebx
c000580b:	e8 13 c7 ff ff       	call   c0001f23 <clmt_clust>
c0005810:	eb 0a                	jmp    c000581c <f_write+0x1c7>
c0005812:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005815:	89 d8                	mov    eax,ebx
c0005817:	e8 a1 da ff ff       	call   c00032bd <create_chain>
c000581c:	85 c0                	test   eax,eax
c000581e:	75 09                	jne    c0005829 <f_write+0x1d4>
c0005820:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005824:	e9 dc 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c0005829:	83 f8 01             	cmp    eax,0x1
c000582c:	75 0e                	jne    c000583c <f_write+0x1e7>
c000582e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005832:	bd 02 00 00 00       	mov    ebp,0x2
c0005837:	e9 c9 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000583c:	83 f8 ff             	cmp    eax,0xffffffff
c000583f:	75 0e                	jne    c000584f <f_write+0x1fa>
c0005841:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005845:	bd 01 00 00 00       	mov    ebp,0x1
c000584a:	e9 b6 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000584f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005852:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005856:	0f 85 90 fe ff ff    	jne    c00056ec <f_write+0x97>
c000585c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000585f:	e9 88 fe ff ff       	jmp    c00056ec <f_write+0x97>
c0005864:	83 ec 0c             	sub    esp,0xc
c0005867:	8d 43 50             	lea    eax,[ebx+0x50]
c000586a:	6a 01                	push   0x1
c000586c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000586f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005872:	50                   	push   eax
c0005873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005877:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587b:	50                   	push   eax
c000587c:	e8 b3 c3 ff ff       	call   c0001c34 <disk_write>
c0005881:	83 c4 20             	add    esp,0x20
c0005884:	85 c0                	test   eax,eax
c0005886:	75 b9                	jne    c0005841 <f_write+0x1ec>
c0005888:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588c:	e9 65 fe ff ff       	jmp    c00056f6 <f_write+0xa1>
c0005891:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005894:	75 05                	jne    c000589b <f_write+0x246>
c0005896:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005899:	74 2e                	je     c00058c9 <f_write+0x274>
c000589b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a7:	73 20                	jae    c00058c9 <f_write+0x274>
c00058a9:	83 ec 0c             	sub    esp,0xc
c00058ac:	8d 43 50             	lea    eax,[ebx+0x50]
c00058af:	6a 01                	push   0x1
c00058b1:	57                   	push   edi
c00058b2:	56                   	push   esi
c00058b3:	50                   	push   eax
c00058b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b8:	50                   	push   eax
c00058b9:	e8 60 c3 ff ff       	call   c0001c1e <disk_read>
c00058be:	83 c4 20             	add    esp,0x20
c00058c1:	85 c0                	test   eax,eax
c00058c3:	0f 85 78 ff ff ff    	jne    c0005841 <f_write+0x1ec>
c00058c9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058cc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d2:	ba 00 02 00 00       	mov    edx,0x200
c00058d7:	25 ff 01 00 00       	and    eax,0x1ff
c00058dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e0:	29 c2                	sub    edx,eax
c00058e2:	39 d6                	cmp    esi,edx
c00058e4:	76 02                	jbe    c00058e8 <f_write+0x293>
c00058e6:	89 d6                	mov    esi,edx
c00058e8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ec:	89 f1                	mov    ecx,esi
c00058ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f2:	e8 f1 c3 ff ff       	call   c0001ce8 <mem_cpy>
c00058f7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fb:	e9 b1 fe ff ff       	jmp    c00057b1 <f_write+0x15c>
c0005900:	bd 07 00 00 00       	mov    ebp,0x7
c0005905:	83 c4 2c             	add    esp,0x2c
c0005908:	89 e8                	mov    eax,ebp
c000590a:	5b                   	pop    ebx
c000590b:	5e                   	pop    esi
c000590c:	5f                   	pop    edi
c000590d:	5d                   	pop    ebp
c000590e:	c3                   	ret    

c000590f <f_sync>:
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 64             	sub    esp,0x64
c0005914:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005918:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591c:	89 d8                	mov    eax,ebx
c000591e:	e8 49 ca ff ff       	call   c000236c <validate>
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 85 ba 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000592b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000592e:	f6 c2 40             	test   dl,0x40
c0005931:	0f 84 ae 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c0005937:	84 d2                	test   dl,dl
c0005939:	79 33                	jns    c000596e <f_sync+0x5f>
c000593b:	83 ec 0c             	sub    esp,0xc
c000593e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005941:	6a 01                	push   0x1
c0005943:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005946:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005949:	50                   	push   eax
c000594a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005952:	50                   	push   eax
c0005953:	e8 dc c2 ff ff       	call   c0001c34 <disk_write>
c0005958:	83 c4 20             	add    esp,0x20
c000595b:	89 c2                	mov    edx,eax
c000595d:	b8 01 00 00 00       	mov    eax,0x1
c0005962:	85 d2                	test   edx,edx
c0005964:	0f 85 7b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000596a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005972:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005975:	0f 85 11 01 00 00    	jne    c0005a8c <f_sync+0x17d>
c000597b:	89 d8                	mov    eax,ebx
c000597d:	e8 13 d6 ff ff       	call   c0002f95 <fill_first_frag>
c0005982:	85 c0                	test   eax,eax
c0005984:	0f 85 5b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000598a:	83 c9 ff             	or     ecx,0xffffffff
c000598d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 c9 d5 ff ff       	call   c0002f60 <fill_last_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 46 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000599f:	83 ec 0c             	sub    esp,0xc
c00059a2:	68 60 04 00 00       	push   0x460
c00059a7:	e8 f0 2a 00 00       	call   c000849c <ff_memalloc>
c00059ac:	83 c4 10             	add    esp,0x10
c00059af:	89 c6                	mov    esi,eax
c00059b1:	b8 11 00 00 00       	mov    eax,0x11
c00059b6:	85 f6                	test   esi,esi
c00059b8:	0f 84 27 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c00059be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ce:	89 da                	mov    edx,ebx
c00059d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d4:	e8 af df ff ff       	call   c0003988 <load_obj_xdir>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 95 00 00 00    	jne    c0005a76 <f_sync+0x167>
c00059e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ec:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ef:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f2:	83 ca 01             	or     edx,0x1
c00059f5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fe:	83 c0 34             	add    eax,0x34
c0005a01:	e8 d9 c2 ff ff       	call   c0001cdf <st_dword>
c0005a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a10:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a13:	83 c0 38             	add    eax,0x38
c0005a16:	e8 c7 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a28:	83 c0 28             	add    eax,0x28
c0005a2b:	e8 b2 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a34:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3c:	83 c0 0c             	add    eax,0xc
c0005a3f:	e8 9b c2 ff ff       	call   c0001cdf <st_dword>
c0005a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a4f:	31 d2                	xor    edx,edx
c0005a51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a54:	83 c0 10             	add    eax,0x10
c0005a57:	e8 83 c2 ff ff       	call   c0001cdf <st_dword>
c0005a5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a60:	e8 62 e1 ff ff       	call   c0003bc7 <store_xdir>
c0005a65:	85 c0                	test   eax,eax
c0005a67:	75 0d                	jne    c0005a76 <f_sync+0x167>
c0005a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6d:	e8 00 eb ff ff       	call   c0004572 <sync_fs>
c0005a72:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7a:	83 ec 0c             	sub    esp,0xc
c0005a7d:	56                   	push   esi
c0005a7e:	e8 2f 2a 00 00       	call   c00084b2 <ff_memfree>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	eb 59                	jmp    c0005ae5 <f_sync+0x1d6>
c0005a8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a8f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a92:	e8 b0 c9 ff ff       	call   c0002447 <move_window>
c0005a97:	85 c0                	test   eax,eax
c0005a99:	75 4a                	jne    c0005ae5 <f_sync+0x1d6>
c0005a9b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a9e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa2:	89 f2                	mov    edx,esi
c0005aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa9:	e8 5f f3 ff ff       	call   c0004e0d <st_clust.isra.1>
c0005aae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab1:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab4:	e8 26 c2 ff ff       	call   c0001cdf <st_dword>
c0005ab9:	8d 46 16             	lea    eax,[esi+0x16]
c0005abc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac1:	e8 19 c2 ff ff       	call   c0001cdf <st_dword>
c0005ac6:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac9:	31 d2                	xor    edx,edx
c0005acb:	e8 0b c2 ff ff       	call   c0001cdb <st_word>
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	e8 91 ea ff ff       	call   c0004572 <sync_fs>
c0005ae1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae5:	83 c4 64             	add    esp,0x64
c0005ae8:	5b                   	pop    ebx
c0005ae9:	5e                   	pop    esi
c0005aea:	c3                   	ret    

c0005aeb <f_close>:
c0005aeb:	53                   	push   ebx
c0005aec:	83 ec 24             	sub    esp,0x24
c0005aef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af3:	53                   	push   ebx
c0005af4:	e8 16 fe ff ff       	call   c000590f <f_sync>
c0005af9:	83 c4 10             	add    esp,0x10
c0005afc:	85 c0                	test   eax,eax
c0005afe:	75 15                	jne    c0005b15 <f_close+0x2a>
c0005b00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b04:	89 d8                	mov    eax,ebx
c0005b06:	e8 61 c8 ff ff       	call   c000236c <validate>
c0005b0b:	85 c0                	test   eax,eax
c0005b0d:	75 06                	jne    c0005b15 <f_close+0x2a>
c0005b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b15:	83 c4 18             	add    esp,0x18
c0005b18:	5b                   	pop    ebx
c0005b19:	c3                   	ret    

c0005b1a <f_lseek>:
c0005b1a:	55                   	push   ebp
c0005b1b:	57                   	push   edi
c0005b1c:	56                   	push   esi
c0005b1d:	53                   	push   ebx
c0005b1e:	83 ec 3c             	sub    esp,0x3c
c0005b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3a:	e8 2d c8 ff ff       	call   c000236c <validate>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	85 c0                	test   eax,eax
c0005b45:	0f 85 7a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b4b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b53:	85 c0                	test   eax,eax
c0005b55:	0f 85 6a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b62:	74 0c                	je     c0005b70 <f_lseek+0x56>
c0005b64:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b67:	85 c0                	test   eax,eax
c0005b69:	75 1f                	jne    c0005b8a <f_lseek+0x70>
c0005b6b:	e9 b5 01 00 00       	jmp    c0005d25 <f_lseek+0x20b>
c0005b70:	83 c9 ff             	or     ecx,0xffffffff
c0005b73:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 e3 d3 ff ff       	call   c0002f60 <fill_last_frag>
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	74 e3                	je     c0005b64 <f_lseek+0x4a>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	e9 3b 04 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005b8a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b8f:	0f 85 ac 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b95:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b99:	0f 85 a2 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b9f:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba7:	be 02 00 00 00       	mov    esi,0x2
c0005bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb0:	85 ed                	test   ebp,ebp
c0005bb2:	74 73                	je     c0005c27 <f_lseek+0x10d>
c0005bb4:	89 e9                	mov    ecx,ebp
c0005bb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbd:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc0:	89 ca                	mov    edx,ecx
c0005bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc6:	89 d8                	mov    eax,ebx
c0005bc8:	e8 02 d4 ff ff       	call   c0002fcf <get_fat>
c0005bcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd1:	83 f8 01             	cmp    eax,0x1
c0005bd4:	77 11                	ja     c0005be7 <f_lseek+0xcd>
c0005bd6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bda:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be2:	e9 de 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005be7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bea:	75 11                	jne    c0005bfd <f_lseek+0xe3>
c0005bec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf8:	e9 c8 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005bfd:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c00:	89 c1                	mov    ecx,eax
c0005c02:	39 c2                	cmp    edx,eax
c0005c04:	74 b7                	je     c0005bbd <f_lseek+0xa3>
c0005c06:	83 c6 02             	add    esi,0x2
c0005c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0d:	72 0b                	jb     c0005c1a <f_lseek+0x100>
c0005c0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c12:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c15:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c17:	83 c7 08             	add    edi,0x8
c0005c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c1e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c21:	76 04                	jbe    c0005c27 <f_lseek+0x10d>
c0005c23:	89 c5                	mov    ebp,eax
c0005c25:	eb 8d                	jmp    c0005bb4 <f_lseek+0x9a>
c0005c27:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c2e:	89 30                	mov    DWORD PTR [eax],esi
c0005c30:	0f 87 87 03 00 00    	ja     c0005fbd <f_lseek+0x4a3>
c0005c36:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3c:	e9 84 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005c41:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c53:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c5e:	73 0f                	jae    c0005c6f <f_lseek+0x155>
c0005c60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c85:	0f 84 3a 03 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005c8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c93:	83 c6 ff             	add    esi,0xffffffff
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	83 d7 ff             	adc    edi,0xffffffff
c0005c9b:	89 f2                	mov    edx,esi
c0005c9d:	89 f9                	mov    ecx,edi
c0005c9f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca6:	e8 78 c2 ff ff       	call   c0001f23 <clmt_clust>
c0005cab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005caf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb2:	89 c2                	mov    edx,eax
c0005cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb8:	89 c8                	mov    eax,ecx
c0005cba:	e8 43 c2 ff ff       	call   c0001f02 <clst2sect>
c0005cbf:	89 d7                	mov    edi,edx
c0005cc1:	09 c7                	or     edi,eax
c0005cc3:	0f 84 0d ff ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005cc9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd3:	0f 84 ec 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005cd9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cec:	4d                   	dec    ebp
c0005ced:	31 ff                	xor    edi,edi
c0005cef:	21 ee                	and    esi,ebp
c0005cf1:	01 c6                	add    esi,eax
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	11 d7                	adc    edi,edx
c0005cf8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfb:	39 fa                	cmp    edx,edi
c0005cfd:	75 08                	jne    c0005d07 <f_lseek+0x1ed>
c0005cff:	39 f0                	cmp    eax,esi
c0005d01:	0f 84 be 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005d07:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d0e:	0f 89 80 02 00 00    	jns    c0005f94 <f_lseek+0x47a>
c0005d14:	83 ec 0c             	sub    esp,0xc
c0005d17:	6a 01                	push   0x1
c0005d19:	52                   	push   edx
c0005d1a:	50                   	push   eax
c0005d1b:	55                   	push   ebp
c0005d1c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d20:	e9 5a 02 00 00       	jmp    c0005f7f <f_lseek+0x465>
c0005d25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d29:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2c:	74 16                	je     c0005d44 <f_lseek+0x22a>
c0005d2e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d33:	76 0f                	jbe    c0005d44 <f_lseek+0x22a>
c0005d35:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4d:	89 c7                	mov    edi,eax
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	73 0d                	jae    c0005d62 <f_lseek+0x248>
c0005d55:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d59:	75 07                	jne    c0005d62 <f_lseek+0x248>
c0005d5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d65:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d73:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7d:	75 09                	jne    c0005d88 <f_lseek+0x26e>
c0005d7f:	31 f6                	xor    esi,esi
c0005d81:	31 ff                	xor    edi,edi
c0005d83:	e9 af 01 00 00       	jmp    c0005f37 <f_lseek+0x41d>
c0005d88:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8c:	89 d7                	mov    edi,edx
c0005d8e:	c1 e1 09             	shl    ecx,0x9
c0005d91:	09 c7                	or     edi,eax
c0005d93:	89 cd                	mov    ebp,ecx
c0005d95:	74 6d                	je     c0005e04 <f_lseek+0x2ea>
c0005d97:	83 c0 ff             	add    eax,0xffffffff
c0005d9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d9e:	83 d2 ff             	adc    edx,0xffffffff
c0005da1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da8:	83 c0 ff             	add    eax,0xffffffff
c0005dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005daf:	83 d2 ff             	adc    edx,0xffffffff
c0005db2:	31 ff                	xor    edi,edi
c0005db4:	57                   	push   edi
c0005db5:	51                   	push   ecx
c0005db6:	52                   	push   edx
c0005db7:	50                   	push   eax
c0005db8:	e8 e7 13 02 00       	call   c00271a4 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc8:	57                   	push   edi
c0005dc9:	55                   	push   ebp
c0005dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd2:	e8 cd 13 02 00       	call   c00271a4 <__udivdi3>
c0005dd7:	83 c4 10             	add    esp,0x10
c0005dda:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de2:	19 d1                	sbb    ecx,edx
c0005de4:	72 1e                	jb     c0005e04 <f_lseek+0x2ea>
c0005de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dea:	89 e9                	mov    ecx,ebp
c0005dec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005def:	f7 d9                	neg    ecx
c0005df1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dfe:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e02:	eb 28                	jmp    c0005e2c <f_lseek+0x312>
c0005e04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e07:	85 c0                	test   eax,eax
c0005e09:	75 1e                	jne    c0005e29 <f_lseek+0x30f>
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	89 d8                	mov    eax,ebx
c0005e0f:	e8 a9 d4 ff ff       	call   c00032bd <create_chain>
c0005e14:	83 f8 01             	cmp    eax,0x1
c0005e17:	0f 84 b9 fd ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0005e20:	0f 84 c6 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005e26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e29:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2c:	85 c0                	test   eax,eax
c0005e2e:	0f 84 4b ff ff ff    	je     c0005d7f <f_lseek+0x265>
c0005e34:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e40:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e47:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e51:	0f 83 9d 00 00 00    	jae    c0005ef4 <f_lseek+0x3da>
c0005e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e62:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e66:	01 f2                	add    edx,esi
c0005e68:	11 f9                	adc    ecx,edi
c0005e6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e72:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e75:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e78:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7b:	f6 c1 02             	test   cl,0x2
c0005e7e:	74 35                	je     c0005eb5 <f_lseek+0x39b>
c0005e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e84:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e87:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e8e:	73 16                	jae    c0005ea6 <f_lseek+0x38c>
c0005e90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e98:	88 ca                	mov    dl,cl
c0005e9a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9d:	83 ca 40             	or     edx,0x40
c0005ea0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea6:	89 c2                	mov    edx,eax
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 0e d4 ff ff       	call   c00032bd <create_chain>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	75 0b                	jne    c0005ebe <f_lseek+0x3a4>
c0005eb3:	eb 30                	jmp    c0005ee5 <f_lseek+0x3cb>
c0005eb5:	89 c2                	mov    edx,eax
c0005eb7:	89 d8                	mov    eax,ebx
c0005eb9:	e8 11 d1 ff ff       	call   c0002fcf <get_fat>
c0005ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec1:	0f 84 25 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005ec7:	83 f8 01             	cmp    eax,0x1
c0005eca:	0f 86 06 fd ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed7:	0f 86 f9 fc ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005edd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee0:	e9 5b ff ff ff       	jmp    c0005e40 <f_lseek+0x326>
c0005ee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005efe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f01:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f04:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0a:	0f 84 6f fe ff ff    	je     c0005d7f <f_lseek+0x265>
c0005f10:	89 c2                	mov    edx,eax
c0005f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f16:	e8 e7 bf ff ff       	call   c0001f02 <clst2sect>
c0005f1b:	89 d7                	mov    edi,edx
c0005f1d:	09 c7                	or     edi,eax
c0005f1f:	0f 84 b1 fc ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005f25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f30:	c1 ef 09             	shr    edi,0x9
c0005f33:	01 c6                	add    esi,eax
c0005f35:	11 d7                	adc    edi,edx
c0005f37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f40:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f43:	19 d1                	sbb    ecx,edx
c0005f45:	73 0a                	jae    c0005f51 <f_lseek+0x437>
c0005f47:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f51:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f56:	74 6d                	je     c0005fc5 <f_lseek+0x4ab>
c0005f58:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f5e:	39 fa                	cmp    edx,edi
c0005f60:	75 04                	jne    c0005f66 <f_lseek+0x44c>
c0005f62:	39 f0                	cmp    eax,esi
c0005f64:	74 5f                	je     c0005fc5 <f_lseek+0x4ab>
c0005f66:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f69:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6d:	79 25                	jns    c0005f94 <f_lseek+0x47a>
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	6a 01                	push   0x1
c0005f74:	52                   	push   edx
c0005f75:	50                   	push   eax
c0005f76:	55                   	push   ebp
c0005f77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7f:	50                   	push   eax
c0005f80:	e8 af bc ff ff       	call   c0001c34 <disk_write>
c0005f85:	83 c4 20             	add    esp,0x20
c0005f88:	85 c0                	test   eax,eax
c0005f8a:	0f 85 5c fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005f90:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	6a 01                	push   0x1
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	55                   	push   ebp
c0005f9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa4:	50                   	push   eax
c0005fa5:	e8 74 bc ff ff       	call   c0001c1e <disk_read>
c0005faa:	83 c4 20             	add    esp,0x20
c0005fad:	85 c0                	test   eax,eax
c0005faf:	0f 85 37 fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005fb5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbb:	eb 08                	jmp    c0005fc5 <f_lseek+0x4ab>
c0005fbd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc9:	83 c4 3c             	add    esp,0x3c
c0005fcc:	5b                   	pop    ebx
c0005fcd:	5e                   	pop    esi
c0005fce:	5f                   	pop    edi
c0005fcf:	5d                   	pop    ebp
c0005fd0:	c3                   	ret    

c0005fd1 <f_opendir>:
c0005fd1:	56                   	push   esi
c0005fd2:	b8 09 00 00 00       	mov    eax,0x9
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 24             	sub    esp,0x24
c0005fdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fdf:	85 db                	test   ebx,ebx
c0005fe1:	0f 84 e6 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0005fe7:	31 c9                	xor    ecx,ecx
c0005fe9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fed:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff1:	e8 03 c7 ff ff       	call   c00026f9 <mount_volume>
c0005ff6:	85 c0                	test   eax,eax
c0005ff8:	0f 85 c9 00 00 00    	jne    c00060c7 <f_opendir+0xf6>
c0005ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006002:	83 ec 0c             	sub    esp,0xc
c0006005:	89 03                	mov    DWORD PTR [ebx],eax
c0006007:	68 60 04 00 00       	push   0x460
c000600c:	e8 8b 24 00 00       	call   c000849c <ff_memalloc>
c0006011:	83 c4 10             	add    esp,0x10
c0006014:	89 c6                	mov    esi,eax
c0006016:	b8 11 00 00 00       	mov    eax,0x11
c000601b:	85 f6                	test   esi,esi
c000601d:	0f 84 aa 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0006023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006027:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006030:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006033:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006037:	89 d8                	mov    eax,ebx
c0006039:	e8 31 ee ff ff       	call   c0004e6f <follow_path>
c000603e:	85 c0                	test   eax,eax
c0006040:	75 61                	jne    c00060a3 <f_opendir+0xd2>
c0006042:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006046:	78 46                	js     c000608e <f_opendir+0xbd>
c0006048:	b8 05 00 00 00       	mov    eax,0x5
c000604d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006051:	74 50                	je     c00060a3 <f_opendir+0xd2>
c0006053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006057:	8a 01                	mov    al,BYTE PTR [ecx]
c0006059:	3c 04                	cmp    al,0x4
c000605b:	75 26                	jne    c0006083 <f_opendir+0xb2>
c000605d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006060:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006063:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006066:	30 d2                	xor    dl,dl
c0006068:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606c:	09 c2                	or     edx,eax
c000606e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006071:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006074:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006077:	89 da                	mov    edx,ebx
c0006079:	8d 41 10             	lea    eax,[ecx+0x10]
c000607c:	e8 b4 ed ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006081:	eb 0b                	jmp    c000608e <f_opendir+0xbd>
c0006083:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006086:	e8 59 ed ff ff       	call   c0004de4 <ld_clust.isra.0>
c000608b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000608e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006092:	31 d2                	xor    edx,edx
c0006094:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006098:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609c:	89 d8                	mov    eax,ebx
c000609e:	e8 22 d1 ff ff       	call   c00031c5 <dir_sdi>
c00060a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	56                   	push   esi
c00060ab:	e8 02 24 00 00       	call   c00084b2 <ff_memfree>
c00060b0:	83 c4 10             	add    esp,0x10
c00060b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b7:	83 f8 04             	cmp    eax,0x4
c00060ba:	74 06                	je     c00060c2 <f_opendir+0xf1>
c00060bc:	85 c0                	test   eax,eax
c00060be:	74 0d                	je     c00060cd <f_opendir+0xfc>
c00060c0:	eb 05                	jmp    c00060c7 <f_opendir+0xf6>
c00060c2:	b8 05 00 00 00       	mov    eax,0x5
c00060c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cd:	83 c4 24             	add    esp,0x24
c00060d0:	5b                   	pop    ebx
c00060d1:	5e                   	pop    esi
c00060d2:	c3                   	ret    

c00060d3 <f_closedir>:
c00060d3:	53                   	push   ebx
c00060d4:	83 ec 18             	sub    esp,0x18
c00060d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 86 c2 ff ff       	call   c000236c <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 06                	jne    c00060f0 <f_closedir+0x1d>
c00060ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f0:	83 c4 18             	add    esp,0x18
c00060f3:	5b                   	pop    ebx
c00060f4:	c3                   	ret    

c00060f5 <f_readdir>:
c00060f5:	57                   	push   edi
c00060f6:	56                   	push   esi
c00060f7:	53                   	push   ebx
c00060f8:	83 ec 20             	sub    esp,0x20
c00060fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006107:	89 d8                	mov    eax,ebx
c0006109:	e8 5e c2 ff ff       	call   c000236c <validate>
c000610e:	85 c0                	test   eax,eax
c0006110:	75 77                	jne    c0006189 <f_readdir+0x94>
c0006112:	85 ff                	test   edi,edi
c0006114:	75 0b                	jne    c0006121 <f_readdir+0x2c>
c0006116:	31 d2                	xor    edx,edx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 a6 d0 ff ff       	call   c00031c5 <dir_sdi>
c000611f:	eb 68                	jmp    c0006189 <f_readdir+0x94>
c0006121:	83 ec 0c             	sub    esp,0xc
c0006124:	68 60 04 00 00       	push   0x460
c0006129:	e8 6e 23 00 00       	call   c000849c <ff_memalloc>
c000612e:	83 c4 10             	add    esp,0x10
c0006131:	89 c6                	mov    esi,eax
c0006133:	b8 11 00 00 00       	mov    eax,0x11
c0006138:	85 f6                	test   esi,esi
c000613a:	74 4d                	je     c0006189 <f_readdir+0x94>
c000613c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006140:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006146:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006149:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614c:	31 d2                	xor    edx,edx
c000614e:	89 d8                	mov    eax,ebx
c0006150:	e8 80 d8 ff ff       	call   c00039d5 <dir_read>
c0006155:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615a:	75 19                	jne    c0006175 <f_readdir+0x80>
c000615c:	89 fa                	mov    edx,edi
c000615e:	89 d8                	mov    eax,ebx
c0006160:	e8 7e ea ff ff       	call   c0004be3 <get_fileinfo>
c0006165:	31 d2                	xor    edx,edx
c0006167:	89 d8                	mov    eax,ebx
c0006169:	e8 af d5 ff ff       	call   c000371d <dir_next>
c000616e:	83 f8 04             	cmp    eax,0x4
c0006171:	75 02                	jne    c0006175 <f_readdir+0x80>
c0006173:	31 c0                	xor    eax,eax
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	83 ec 0c             	sub    esp,0xc
c000617c:	56                   	push   esi
c000617d:	e8 30 23 00 00       	call   c00084b2 <ff_memfree>
c0006182:	83 c4 10             	add    esp,0x10
c0006185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006189:	83 c4 20             	add    esp,0x20
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	c3                   	ret    

c0006190 <f_stat>:
c0006190:	57                   	push   edi
c0006191:	31 c9                	xor    ecx,ecx
c0006193:	56                   	push   esi
c0006194:	53                   	push   ebx
c0006195:	83 ec 50             	sub    esp,0x50
c0006198:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619c:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a4:	e8 50 c5 ff ff       	call   c00026f9 <mount_volume>
c00061a9:	89 c3                	mov    ebx,eax
c00061ab:	85 c0                	test   eax,eax
c00061ad:	75 67                	jne    c0006216 <f_stat+0x86>
c00061af:	83 ec 0c             	sub    esp,0xc
c00061b2:	bb 11 00 00 00       	mov    ebx,0x11
c00061b7:	68 60 04 00 00       	push   0x460
c00061bc:	e8 db 22 00 00       	call   c000849c <ff_memalloc>
c00061c1:	83 c4 10             	add    esp,0x10
c00061c4:	89 c6                	mov    esi,eax
c00061c6:	85 c0                	test   eax,eax
c00061c8:	74 4c                	je     c0006216 <f_stat+0x86>
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061de:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e2:	e8 88 ec ff ff       	call   c0004e6f <follow_path>
c00061e7:	89 c3                	mov    ebx,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	75 1d                	jne    c000620a <f_stat+0x7a>
c00061ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f2:	78 11                	js     c0006205 <f_stat+0x75>
c00061f4:	85 ff                	test   edi,edi
c00061f6:	74 12                	je     c000620a <f_stat+0x7a>
c00061f8:	89 fa                	mov    edx,edi
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 e0 e9 ff ff       	call   c0004be3 <get_fileinfo>
c0006203:	eb 05                	jmp    c000620a <f_stat+0x7a>
c0006205:	bb 06 00 00 00       	mov    ebx,0x6
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	56                   	push   esi
c000620e:	e8 9f 22 00 00       	call   c00084b2 <ff_memfree>
c0006213:	83 c4 10             	add    esp,0x10
c0006216:	83 c4 50             	add    esp,0x50
c0006219:	89 d8                	mov    eax,ebx
c000621b:	5b                   	pop    ebx
c000621c:	5e                   	pop    esi
c000621d:	5f                   	pop    edi
c000621e:	c3                   	ret    

c000621f <f_getfree>:
c000621f:	55                   	push   ebp
c0006220:	31 c9                	xor    ecx,ecx
c0006222:	57                   	push   edi
c0006223:	56                   	push   esi
c0006224:	53                   	push   ebx
c0006225:	83 ec 5c             	sub    esp,0x5c
c0006228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006230:	e8 c4 c4 ff ff       	call   c00026f9 <mount_volume>
c0006235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006239:	85 c0                	test   eax,eax
c000623b:	0f 85 9d 01 00 00    	jne    c00063de <f_getfree+0x1bf>
c0006241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006245:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006249:	89 02                	mov    DWORD PTR [edx],eax
c000624b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000624e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006251:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006254:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006258:	39 f2                	cmp    edx,esi
c000625a:	77 0b                	ja     c0006267 <f_getfree+0x48>
c000625c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006260:	89 10                	mov    DWORD PTR [eax],edx
c0006262:	e9 77 01 00 00       	jmp    c00063de <f_getfree+0x1bf>
c0006267:	8a 10                	mov    dl,BYTE PTR [eax]
c0006269:	80 fa 01             	cmp    dl,0x1
c000626c:	75 3a                	jne    c00062a8 <f_getfree+0x89>
c000626e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006272:	be 02 00 00 00       	mov    esi,0x2
c0006277:	31 db                	xor    ebx,ebx
c0006279:	89 f2                	mov    edx,esi
c000627b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000627f:	e8 4b cd ff ff       	call   c0002fcf <get_fat>
c0006284:	83 f8 ff             	cmp    eax,0xffffffff
c0006287:	0f 84 28 01 00 00    	je     c00063b5 <f_getfree+0x196>
c000628d:	83 f8 01             	cmp    eax,0x1
c0006290:	0f 84 29 01 00 00    	je     c00063bf <f_getfree+0x1a0>
c0006296:	83 d3 00             	adc    ebx,0x0
c0006299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629d:	46                   	inc    esi
c000629e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a1:	77 d6                	ja     c0006279 <f_getfree+0x5a>
c00062a3:	e9 25 01 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c00062a8:	80 fa 04             	cmp    dl,0x4
c00062ab:	0f 85 88 00 00 00    	jne    c0006339 <f_getfree+0x11a>
c00062b1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b4:	31 ed                	xor    ebp,ebp
c00062b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c1:	31 db                	xor    ebx,ebx
c00062c3:	85 ed                	test   ebp,ebp
c00062c5:	75 3f                	jne    c0006306 <f_getfree+0xe7>
c00062c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062cf:	83 c0 01             	add    eax,0x1
c00062d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d6:	83 d2 00             	adc    edx,0x0
c00062d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e9:	e8 59 c1 ff ff       	call   c0002447 <move_window>
c00062ee:	85 c0                	test   eax,eax
c00062f0:	0f 85 d3 00 00 00    	jne    c00063c9 <f_getfree+0x1aa>
c00062f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006311:	89 cf                	mov    edi,ecx
c0006313:	85 f6                	test   esi,esi
c0006315:	74 12                	je     c0006329 <f_getfree+0x10a>
c0006317:	88 c1                	mov    cl,al
c0006319:	83 e1 01             	and    ecx,0x1
c000631c:	80 f9 01             	cmp    cl,0x1
c000631f:	83 d3 00             	adc    ebx,0x0
c0006322:	d0 e8                	shr    al,1
c0006324:	4e                   	dec    esi
c0006325:	39 fe                	cmp    esi,edi
c0006327:	75 ea                	jne    c0006313 <f_getfree+0xf4>
c0006329:	45                   	inc    ebp
c000632a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006330:	85 f6                	test   esi,esi
c0006332:	75 8f                	jne    c00062c3 <f_getfree+0xa4>
c0006334:	e9 94 00 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c0006339:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000633f:	31 f6                	xor    esi,esi
c0006341:	31 db                	xor    ebx,ebx
c0006343:	85 f6                	test   esi,esi
c0006345:	75 1b                	jne    c0006362 <f_getfree+0x143>
c0006347:	89 d7                	mov    edi,edx
c0006349:	89 cd                	mov    ebp,ecx
c000634b:	83 c7 01             	add    edi,0x1
c000634e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006352:	83 d5 00             	adc    ebp,0x0
c0006355:	e8 ed c0 ff ff       	call   c0002447 <move_window>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 6b                	jne    c00063c9 <f_getfree+0x1aa>
c000635e:	89 fa                	mov    edx,edi
c0006360:	89 e9                	mov    ecx,ebp
c0006362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006366:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000636e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006375:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006379:	75 11                	jne    c000638c <f_getfree+0x16d>
c000637b:	e8 e9 b8 ff ff       	call   c0001c69 <ld_word>
c0006380:	66 83 f8 01          	cmp    ax,0x1
c0006384:	83 d3 00             	adc    ebx,0x0
c0006387:	83 c6 02             	add    esi,0x2
c000638a:	eb 13                	jmp    c000639f <f_getfree+0x180>
c000638c:	e8 e5 b8 ff ff       	call   c0001c76 <ld_dword>
c0006391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006396:	83 f8 01             	cmp    eax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 04             	add    esi,0x4
c000639f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ad:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b1:	75 90                	jne    c0006343 <f_getfree+0x124>
c00063b3:	eb 18                	jmp    c00063cd <f_getfree+0x1ae>
c00063b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bd:	eb 0e                	jmp    c00063cd <f_getfree+0x1ae>
c00063bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c7:	eb 04                	jmp    c00063cd <f_getfree+0x1ae>
c00063c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d1:	89 18                	mov    DWORD PTR [eax],ebx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063da:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e2:	83 c4 5c             	add    esp,0x5c
c00063e5:	5b                   	pop    ebx
c00063e6:	5e                   	pop    esi
c00063e7:	5f                   	pop    edi
c00063e8:	5d                   	pop    ebp
c00063e9:	c3                   	ret    

c00063ea <f_truncate>:
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 14             	sub    esp,0x14
c00063ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f7:	89 d8                	mov    eax,ebx
c00063f9:	e8 6e bf ff ff       	call   c000236c <validate>
c00063fe:	89 c6                	mov    esi,eax
c0006400:	85 c0                	test   eax,eax
c0006402:	0f 85 d2 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006408:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640c:	85 f6                	test   esi,esi
c000640e:	0f 85 c6 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006414:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006418:	0f 84 b7 00 00 00    	je     c00064d5 <f_truncate+0xeb>
c000641e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006421:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006424:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006427:	89 d1                	mov    ecx,edx
c0006429:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642c:	0f 83 a8 00 00 00    	jae    c00064da <f_truncate+0xf0>
c0006432:	09 c2                	or     edx,eax
c0006434:	75 15                	jne    c000644b <f_truncate+0x61>
c0006436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006439:	31 c9                	xor    ecx,ecx
c000643b:	89 d8                	mov    eax,ebx
c000643d:	e8 7a d0 ff ff       	call   c00034bc <remove_chain>
c0006442:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006449:	eb 35                	jmp    c0006480 <f_truncate+0x96>
c000644b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000644e:	89 d8                	mov    eax,ebx
c0006450:	e8 7a cb ff ff       	call   c0002fcf <get_fat>
c0006455:	89 c2                	mov    edx,eax
c0006457:	b8 01 00 00 00       	mov    eax,0x1
c000645c:	83 fa ff             	cmp    edx,0xffffffff
c000645f:	74 1f                	je     c0006480 <f_truncate+0x96>
c0006461:	b8 02 00 00 00       	mov    eax,0x2
c0006466:	83 fa 01             	cmp    edx,0x1
c0006469:	74 15                	je     c0006480 <f_truncate+0x96>
c000646b:	31 c0                	xor    eax,eax
c000646d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006471:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006474:	76 0a                	jbe    c0006480 <f_truncate+0x96>
c0006476:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006479:	89 d8                	mov    eax,ebx
c000647b:	e8 3c d0 ff ff       	call   c00034bc <remove_chain>
c0006480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006486:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006489:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000648f:	83 ca 40             	or     edx,0x40
c0006492:	85 c0                	test   eax,eax
c0006494:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006497:	75 35                	jne    c00064ce <f_truncate+0xe4>
c0006499:	84 d2                	test   dl,dl
c000649b:	79 3d                	jns    c00064da <f_truncate+0xf0>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a3:	6a 01                	push   0x1
c00064a5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ab:	50                   	push   eax
c00064ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b4:	50                   	push   eax
c00064b5:	e8 7a b7 ff ff       	call   c0001c34 <disk_write>
c00064ba:	83 c4 20             	add    esp,0x20
c00064bd:	85 c0                	test   eax,eax
c00064bf:	75 08                	jne    c00064c9 <f_truncate+0xdf>
c00064c1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c5:	31 f6                	xor    esi,esi
c00064c7:	eb 11                	jmp    c00064da <f_truncate+0xf0>
c00064c9:	b8 01 00 00 00       	mov    eax,0x1
c00064ce:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	eb 05                	jmp    c00064da <f_truncate+0xf0>
c00064d5:	be 07 00 00 00       	mov    esi,0x7
c00064da:	89 f0                	mov    eax,esi
c00064dc:	83 c4 14             	add    esp,0x14
c00064df:	5b                   	pop    ebx
c00064e0:	5e                   	pop    esi
c00064e1:	c3                   	ret    

c00064e2 <f_unlink>:
c00064e2:	56                   	push   esi
c00064e3:	b9 02 00 00 00       	mov    ecx,0x2
c00064e8:	53                   	push   ebx
c00064e9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fa:	e8 fa c1 ff ff       	call   c00026f9 <mount_volume>
c00064ff:	85 c0                	test   eax,eax
c0006501:	0f 85 55 01 00 00    	jne    c000665c <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	83 ec 0c             	sub    esp,0xc
c000650e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006512:	68 60 04 00 00       	push   0x460
c0006517:	e8 80 1f 00 00       	call   c000849c <ff_memalloc>
c000651c:	83 c4 10             	add    esp,0x10
c000651f:	89 c3                	mov    ebx,eax
c0006521:	b8 11 00 00 00       	mov    eax,0x11
c0006526:	85 db                	test   ebx,ebx
c0006528:	0f 84 2e 01 00 00    	je     c000665c <f_unlink+0x17a>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006538:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000653e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006545:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006549:	e8 21 e9 ff ff       	call   c0004e6f <follow_path>
c000654e:	85 c0                	test   eax,eax
c0006550:	0f 85 f2 00 00 00    	jne    c0006648 <f_unlink+0x166>
c0006556:	b8 06 00 00 00       	mov    eax,0x6
c000655b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006563:	0f 88 df 00 00 00    	js     c0006648 <f_unlink+0x166>
c0006569:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000656e:	74 0a                	je     c000657a <f_unlink+0x98>
c0006570:	b8 07 00 00 00       	mov    eax,0x7
c0006575:	e9 ce 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c000657a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006582:	8a 02                	mov    al,BYTE PTR [edx]
c0006584:	3c 04                	cmp    al,0x4
c0006586:	75 12                	jne    c000659a <f_unlink+0xb8>
c0006588:	8d 42 10             	lea    eax,[edx+0x10]
c000658b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000658f:	e8 a1 e8 ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006598:	eb 0e                	jmp    c00065a8 <f_unlink+0xc6>
c000659a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a1:	e8 3e e8 ff ff       	call   c0004de4 <ld_clust.isra.0>
c00065a6:	89 c6                	mov    esi,eax
c00065a8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ad:	75 12                	jne    c00065c1 <f_unlink+0xdf>
c00065af:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b3:	e8 94 d6 ff ff       	call   c0003c4c <dir_remove>
c00065b8:	85 c0                	test   eax,eax
c00065ba:	74 6c                	je     c0006628 <f_unlink+0x146>
c00065bc:	e9 87 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c00065c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d6:	75 21                	jne    c00065f9 <f_unlink+0x117>
c00065d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ee:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f9:	31 d2                	xor    edx,edx
c00065fb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006602:	e8 be cb ff ff       	call   c00031c5 <dir_sdi>
c0006607:	85 c0                	test   eax,eax
c0006609:	75 3d                	jne    c0006648 <f_unlink+0x166>
c000660b:	31 d2                	xor    edx,edx
c000660d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006614:	e8 bc d3 ff ff       	call   c00039d5 <dir_read>
c0006619:	85 c0                	test   eax,eax
c000661b:	0f 84 4f ff ff ff    	je     c0006570 <f_unlink+0x8e>
c0006621:	83 f8 04             	cmp    eax,0x4
c0006624:	75 22                	jne    c0006648 <f_unlink+0x166>
c0006626:	eb 87                	jmp    c00065af <f_unlink+0xcd>
c0006628:	85 f6                	test   esi,esi
c000662a:	75 0b                	jne    c0006637 <f_unlink+0x155>
c000662c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006630:	e8 3d df ff ff       	call   c0004572 <sync_fs>
c0006635:	eb 11                	jmp    c0006648 <f_unlink+0x166>
c0006637:	31 c9                	xor    ecx,ecx
c0006639:	89 f2                	mov    edx,esi
c000663b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000663f:	e8 78 ce ff ff       	call   c00034bc <remove_chain>
c0006644:	85 c0                	test   eax,eax
c0006646:	74 e4                	je     c000662c <f_unlink+0x14a>
c0006648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664c:	83 ec 0c             	sub    esp,0xc
c000664f:	53                   	push   ebx
c0006650:	e8 5d 1e 00 00       	call   c00084b2 <ff_memfree>
c0006655:	83 c4 10             	add    esp,0x10
c0006658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	c3                   	ret    

c0006665 <f_mkdir>:
c0006665:	57                   	push   edi
c0006666:	b9 02 00 00 00       	mov    ecx,0x2
c000666b:	56                   	push   esi
c000666c:	53                   	push   ebx
c000666d:	83 c4 80             	add    esp,0xffffff80
c0006670:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006674:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667b:	e8 79 c0 ff ff       	call   c00026f9 <mount_volume>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 85 fe 01 00 00    	jne    c0006888 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	bb 11 00 00 00       	mov    ebx,0x11
c0006693:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	68 60 04 00 00       	push   0x460
c000669f:	e8 f8 1d 00 00       	call   c000849c <ff_memalloc>
c00066a4:	83 c4 10             	add    esp,0x10
c00066a7:	89 c7                	mov    edi,eax
c00066a9:	85 c0                	test   eax,eax
c00066ab:	0f 84 d7 01 00 00    	je     c0006888 <f_mkdir+0x223>
c00066b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066cc:	e8 9e e7 ff ff       	call   c0004e6f <follow_path>
c00066d1:	89 c3                	mov    ebx,eax
c00066d3:	85 c0                	test   eax,eax
c00066d5:	74 3e                	je     c0006715 <f_mkdir+0xb0>
c00066d7:	83 f8 04             	cmp    eax,0x4
c00066da:	75 3e                	jne    c000671a <f_mkdir+0xb5>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	31 d2                	xor    edx,edx
c00066e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ea:	e8 ce cb ff ff       	call   c00032bd <create_chain>
c00066ef:	89 c6                	mov    esi,eax
c00066f1:	85 c0                	test   eax,eax
c00066f3:	74 0c                	je     c0006701 <f_mkdir+0x9c>
c00066f5:	bb 02 00 00 00       	mov    ebx,0x2
c00066fa:	83 f8 01             	cmp    eax,0x1
c00066fd:	74 07                	je     c0006706 <f_mkdir+0xa1>
c00066ff:	eb 2a                	jmp    c000672b <f_mkdir+0xc6>
c0006701:	bb 07 00 00 00       	mov    ebx,0x7
c0006706:	31 c9                	xor    ecx,ecx
c0006708:	89 f2                	mov    edx,esi
c000670a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000670e:	e8 a9 cd ff ff       	call   c00034bc <remove_chain>
c0006713:	eb 05                	jmp    c000671a <f_mkdir+0xb5>
c0006715:	bb 08 00 00 00       	mov    ebx,0x8
c000671a:	83 ec 0c             	sub    esp,0xc
c000671d:	57                   	push   edi
c000671e:	e8 8f 1d 00 00       	call   c00084b2 <ff_memfree>
c0006723:	83 c4 10             	add    esp,0x10
c0006726:	e9 5d 01 00 00       	jmp    c0006888 <f_mkdir+0x223>
c000672b:	bb 01 00 00 00       	mov    ebx,0x1
c0006730:	83 f8 ff             	cmp    eax,0xffffffff
c0006733:	74 d1                	je     c0006706 <f_mkdir+0xa1>
c0006735:	89 f2                	mov    edx,esi
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	e8 c4 ce ff ff       	call   c0003604 <dir_clear>
c0006740:	89 c3                	mov    ebx,eax
c0006742:	85 c0                	test   eax,eax
c0006744:	75 c0                	jne    c0006706 <f_mkdir+0xa1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674d:	74 69                	je     c00067b8 <f_mkdir+0x153>
c000674f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006754:	83 c0 54             	add    eax,0x54
c0006757:	ba 20 00 00 00       	mov    edx,0x20
c000675c:	e8 9c b5 ff ff       	call   c0001cfd <mem_set>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	ba 00 00 21 50       	mov    edx,0x50210000
c000676a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000676e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006772:	83 c0 6a             	add    eax,0x6a
c0006775:	e8 65 b5 ff ff       	call   c0001cdf <st_dword>
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	89 f1                	mov    ecx,esi
c0006780:	8d 50 54             	lea    edx,[eax+0x54]
c0006783:	e8 85 e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	b9 20 00 00 00       	mov    ecx,0x20
c0006791:	8d 50 54             	lea    edx,[eax+0x54]
c0006794:	83 c0 74             	add    eax,0x74
c0006797:	e8 4c b5 ff ff       	call   c0001ce8 <mem_cpy>
c000679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a8:	8d 50 74             	lea    edx,[eax+0x74]
c00067ab:	e8 5d e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067bc:	e8 2f db ff ff       	call   c00042f0 <dir_register>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 85 3b ff ff ff    	jne    c0006706 <f_mkdir+0xa1>
c00067cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d2:	75 74                	jne    c0006848 <f_mkdir+0x1e3>
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067dc:	83 c0 0c             	add    eax,0xc
c00067df:	e8 fb b4 ff ff       	call   c0001cdf <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	89 f2                	mov    edx,esi
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	83 c0 34             	add    eax,0x34
c00067f0:	e8 ea b4 ff ff       	call   c0001cdf <st_dword>
c00067f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006800:	c1 e2 09             	shl    edx,0x9
c0006803:	83 c0 38             	add    eax,0x38
c0006806:	e8 d4 b4 ff ff       	call   c0001cdf <st_dword>
c000680b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006813:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006816:	c1 e2 09             	shl    edx,0x9
c0006819:	83 c0 28             	add    eax,0x28
c000681c:	e8 be b4 ff ff       	call   c0001cdf <st_dword>
c0006821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006837:	e8 8b d3 ff ff       	call   c0003bc7 <store_xdir>
c000683c:	89 c3                	mov    ebx,eax
c000683e:	85 c0                	test   eax,eax
c0006840:	0f 85 d4 fe ff ff    	jne    c000671a <f_mkdir+0xb5>
c0006846:	eb 30                	jmp    c0006878 <f_mkdir+0x213>
c0006848:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006851:	83 c0 16             	add    eax,0x16
c0006854:	e8 86 b4 ff ff       	call   c0001cdf <st_dword>
c0006859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685d:	89 f1                	mov    ecx,esi
c000685f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006863:	e8 a5 e5 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006868:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	e8 f1 dc ff ff       	call   c0004572 <sync_fs>
c0006881:	89 c3                	mov    ebx,eax
c0006883:	e9 92 fe ff ff       	jmp    c000671a <f_mkdir+0xb5>
c0006888:	83 ec 80             	sub    esp,0xffffff80
c000688b:	89 d8                	mov    eax,ebx
c000688d:	5b                   	pop    ebx
c000688e:	5e                   	pop    esi
c000688f:	5f                   	pop    edi
c0006890:	c3                   	ret    

c0006891 <f_rename>:
c0006891:	55                   	push   ebp
c0006892:	57                   	push   edi
c0006893:	56                   	push   esi
c0006894:	53                   	push   ebx
c0006895:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a2:	e8 a4 b9 ff ff       	call   c000224b <get_ldnumber>
c00068a7:	b9 02 00 00 00       	mov    ecx,0x2
c00068ac:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b7:	e8 3d be ff ff       	call   c00026f9 <mount_volume>
c00068bc:	85 c0                	test   eax,eax
c00068be:	0f 85 b5 02 00 00    	jne    c0006b79 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	83 ec 0c             	sub    esp,0xc
c00068cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068cf:	68 60 04 00 00       	push   0x460
c00068d4:	e8 c3 1b 00 00       	call   c000849c <ff_memalloc>
c00068d9:	83 c4 10             	add    esp,0x10
c00068dc:	89 c3                	mov    ebx,eax
c00068de:	b8 11 00 00 00       	mov    eax,0x11
c00068e3:	85 db                	test   ebx,ebx
c00068e5:	0f 84 8e 02 00 00    	je     c0006b79 <f_rename+0x2e8>
c00068eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ef:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006902:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006906:	e8 64 e5 ff ff       	call   c0004e6f <follow_path>
c000690b:	85 c0                	test   eax,eax
c000690d:	0f 85 52 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006913:	b8 06 00 00 00       	mov    eax,0x6
c0006918:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006920:	0f 85 3f 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692d:	0f 85 05 01 00 00    	jne    c0006a38 <f_rename+0x1a7>
c0006933:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006936:	b9 40 00 00 00       	mov    ecx,0x40
c000693b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693f:	e8 a4 b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006944:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006949:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006954:	e8 8f b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006959:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 03 e5 ff ff       	call   c0004e6f <follow_path>
c000696c:	85 c0                	test   eax,eax
c000696e:	75 29                	jne    c0006999 <f_rename+0x108>
c0006970:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006974:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697b:	74 0a                	je     c0006987 <f_rename+0xf6>
c000697d:	b8 08 00 00 00       	mov    eax,0x8
c0006982:	e9 de 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006987:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000698e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006995:	75 e6                	jne    c000697d <f_rename+0xec>
c0006997:	eb 09                	jmp    c00069a2 <f_rename+0x111>
c0006999:	83 f8 04             	cmp    eax,0x4
c000699c:	0f 85 c3 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 42 d9 ff ff       	call   c00042f0 <dir_register>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	0f 85 af 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c0:	89 c5                	mov    ebp,eax
c00069c2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c9:	8d 46 24             	lea    eax,[esi+0x24]
c00069cc:	e8 98 b2 ff ff       	call   c0001c69 <ld_word>
c00069d1:	b9 40 00 00 00       	mov    ecx,0x40
c00069d6:	89 c7                	mov    edi,eax
c00069d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069dc:	89 f0                	mov    eax,esi
c00069de:	e8 05 b3 ff ff       	call   c0001ce8 <mem_cpy>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	89 e9                	mov    ecx,ebp
c00069e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ec:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fa:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069fd:	0f b7 d7             	movzx  edx,di
c0006a00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a03:	83 c0 24             	add    eax,0x24
c0006a06:	e8 d0 b2 ff ff       	call   c0001cdb <st_word>
c0006a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a12:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a15:	a8 10                	test   al,0x10
c0006a17:	75 06                	jne    c0006a1f <f_rename+0x18e>
c0006a19:	83 c8 20             	or     eax,0x20
c0006a1c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a1f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a26:	e8 9c d1 ff ff       	call   c0003bc7 <store_xdir>
c0006a2b:	85 c0                	test   eax,eax
c0006a2d:	0f 84 1c 01 00 00    	je     c0006b4f <f_rename+0x2be>
c0006a33:	e9 2d 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006a38:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a48:	e8 9b b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a4d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a52:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a56:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5d:	e8 86 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a62:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a69:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a70:	e8 fa e3 ff ff       	call   c0004e6f <follow_path>
c0006a75:	85 c0                	test   eax,eax
c0006a77:	75 27                	jne    c0006aa0 <f_rename+0x20f>
c0006a79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a84:	0f 85 f3 fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a91:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a98:	0f 85 df fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a9e:	eb 09                	jmp    c0006aa9 <f_rename+0x218>
c0006aa0:	83 f8 04             	cmp    eax,0x4
c0006aa3:	0f 85 bc 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006aa9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab0:	e8 3b d8 ff ff       	call   c00042f0 <dir_register>
c0006ab5:	85 c0                	test   eax,eax
c0006ab7:	0f 85 a8 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006abd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac4:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac9:	8d 46 0d             	lea    eax,[esi+0xd]
c0006acc:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad0:	e8 13 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006ad5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad9:	a8 10                	test   al,0x10
c0006adb:	75 03                	jne    c0006ae0 <f_rename+0x24f>
c0006add:	83 c8 20             	or     eax,0x20
c0006ae0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aeb:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aef:	74 5e                	je     c0006b4f <f_rename+0x2be>
c0006af1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afc:	74 51                	je     c0006b4f <f_rename+0x2be>
c0006afe:	89 f2                	mov    edx,esi
c0006b00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b04:	8a 07                	mov    al,BYTE PTR [edi]
c0006b06:	e8 d9 e2 ff ff       	call   c0004de4 <ld_clust.isra.0>
c0006b0b:	89 c2                	mov    edx,eax
c0006b0d:	89 f8                	mov    eax,edi
c0006b0f:	e8 ee b3 ff ff       	call   c0001f02 <clst2sect>
c0006b14:	89 c6                	mov    esi,eax
c0006b16:	89 d1                	mov    ecx,edx
c0006b18:	b8 02 00 00 00       	mov    eax,0x2
c0006b1d:	09 f2                	or     edx,esi
c0006b1f:	74 44                	je     c0006b65 <f_rename+0x2d4>
c0006b21:	89 f2                	mov    edx,esi
c0006b23:	89 f8                	mov    eax,edi
c0006b25:	e8 1d b9 ff ff       	call   c0002447 <move_window>
c0006b2a:	85 c0                	test   eax,eax
c0006b2c:	75 37                	jne    c0006b65 <f_rename+0x2d4>
c0006b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b32:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b36:	75 17                	jne    c0006b4f <f_rename+0x2be>
c0006b38:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b42:	e8 c6 e2 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b4f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b53:	e8 f4 d0 ff ff       	call   c0003c4c <dir_remove>
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	75 09                	jne    c0006b65 <f_rename+0x2d4>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	e8 0d da ff ff       	call   c0004572 <sync_fs>
c0006b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	53                   	push   ebx
c0006b6d:	e8 40 19 00 00       	call   c00084b2 <ff_memfree>
c0006b72:	83 c4 10             	add    esp,0x10
c0006b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b79:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b7f:	5b                   	pop    ebx
c0006b80:	5e                   	pop    esi
c0006b81:	5f                   	pop    edi
c0006b82:	5d                   	pop    ebp
c0006b83:	c3                   	ret    

c0006b84 <f_chmod>:
c0006b84:	57                   	push   edi
c0006b85:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8a:	56                   	push   esi
c0006b8b:	53                   	push   ebx
c0006b8c:	83 ec 60             	sub    esp,0x60
c0006b8f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b93:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b97:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b9f:	e8 55 bb ff ff       	call   c00026f9 <mount_volume>
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	0f 85 af 00 00 00    	jne    c0006c5b <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	83 ec 0c             	sub    esp,0xc
c0006bb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb7:	68 60 04 00 00       	push   0x460
c0006bbc:	e8 db 18 00 00       	call   c000849c <ff_memalloc>
c0006bc1:	83 c4 10             	add    esp,0x10
c0006bc4:	89 c6                	mov    esi,eax
c0006bc6:	b8 11 00 00 00       	mov    eax,0x11
c0006bcb:	85 f6                	test   esi,esi
c0006bcd:	0f 84 88 00 00 00    	je     c0006c5b <f_chmod+0xd7>
c0006bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006beb:	e8 7f e2 ff ff       	call   c0004e6f <follow_path>
c0006bf0:	85 c0                	test   eax,eax
c0006bf2:	75 53                	jne    c0006c47 <f_chmod+0xc3>
c0006bf4:	b8 06 00 00 00       	mov    eax,0x6
c0006bf9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bfe:	75 47                	jne    c0006c47 <f_chmod+0xc3>
c0006c00:	89 f9                	mov    ecx,edi
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	83 e1 27             	and    ecx,0x27
c0006c09:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0c:	75 1d                	jne    c0006c2b <f_chmod+0xa7>
c0006c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c11:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c14:	21 cb                	and    ebx,ecx
c0006c16:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c19:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c20:	e8 a2 cf ff ff       	call   c0003bc7 <store_xdir>
c0006c25:	85 c0                	test   eax,eax
c0006c27:	75 1e                	jne    c0006c47 <f_chmod+0xc3>
c0006c29:	eb 13                	jmp    c0006c3e <f_chmod+0xba>
c0006c2b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c2f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c32:	21 cb                	and    ebx,ecx
c0006c34:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c37:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	e8 2b d9 ff ff       	call   c0004572 <sync_fs>
c0006c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4b:	83 ec 0c             	sub    esp,0xc
c0006c4e:	56                   	push   esi
c0006c4f:	e8 5e 18 00 00       	call   c00084b2 <ff_memfree>
c0006c54:	83 c4 10             	add    esp,0x10
c0006c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5b:	83 c4 60             	add    esp,0x60
c0006c5e:	5b                   	pop    ebx
c0006c5f:	5e                   	pop    esi
c0006c60:	5f                   	pop    edi
c0006c61:	c3                   	ret    

c0006c62 <f_utime>:
c0006c62:	56                   	push   esi
c0006c63:	b9 02 00 00 00       	mov    ecx,0x2
c0006c68:	53                   	push   ebx
c0006c69:	83 ec 64             	sub    esp,0x64
c0006c6c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c78:	e8 7c ba ff ff       	call   c00026f9 <mount_volume>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	0f 85 b5 00 00 00    	jne    c0006d3a <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	83 ec 0c             	sub    esp,0xc
c0006c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c90:	68 60 04 00 00       	push   0x460
c0006c95:	e8 02 18 00 00       	call   c000849c <ff_memalloc>
c0006c9a:	83 c4 10             	add    esp,0x10
c0006c9d:	89 c3                	mov    ebx,eax
c0006c9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ca4:	85 db                	test   ebx,ebx
c0006ca6:	0f 84 8e 00 00 00    	je     c0006d3a <f_utime+0xd8>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc4:	e8 a6 e1 ff ff       	call   c0004e6f <follow_path>
c0006cc9:	85 c0                	test   eax,eax
c0006ccb:	75 59                	jne    c0006d26 <f_utime+0xc4>
c0006ccd:	b8 06 00 00 00       	mov    eax,0x6
c0006cd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd7:	75 4d                	jne    c0006d26 <f_utime+0xc4>
c0006cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce5:	c1 e2 10             	shl    edx,0x10
c0006ce8:	09 ca                	or     edx,ecx
c0006cea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ced:	75 1a                	jne    c0006d09 <f_utime+0xa7>
c0006cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf2:	83 c0 0c             	add    eax,0xc
c0006cf5:	e8 e5 af ff ff       	call   c0001cdf <st_dword>
c0006cfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cfe:	e8 c4 ce ff ff       	call   c0003bc7 <store_xdir>
c0006d03:	85 c0                	test   eax,eax
c0006d05:	75 1f                	jne    c0006d26 <f_utime+0xc4>
c0006d07:	eb 14                	jmp    c0006d1d <f_utime+0xbb>
c0006d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0d:	83 c0 16             	add    eax,0x16
c0006d10:	e8 ca af ff ff       	call   c0001cdf <st_dword>
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	e8 4c d8 ff ff       	call   c0004572 <sync_fs>
c0006d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2a:	83 ec 0c             	sub    esp,0xc
c0006d2d:	53                   	push   ebx
c0006d2e:	e8 7f 17 00 00       	call   c00084b2 <ff_memfree>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3a:	83 c4 64             	add    esp,0x64
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	c3                   	ret    

c0006d40 <f_getlabel>:
c0006d40:	55                   	push   ebp
c0006d41:	31 c9                	xor    ecx,ecx
c0006d43:	57                   	push   edi
c0006d44:	56                   	push   esi
c0006d45:	53                   	push   ebx
c0006d46:	83 ec 6c             	sub    esp,0x6c
c0006d49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d54:	e8 a0 b9 ff ff       	call   c00026f9 <mount_volume>
c0006d59:	89 c6                	mov    esi,eax
c0006d5b:	85 c0                	test   eax,eax
c0006d5d:	0f 85 c1 01 00 00    	jne    c0006f24 <f_getlabel+0x1e4>
c0006d63:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6b:	0f 84 5f 01 00 00    	je     c0006ed0 <f_getlabel+0x190>
c0006d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d75:	31 d2                	xor    edx,edx
c0006d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d87:	e8 39 c4 ff ff       	call   c00031c5 <dir_sdi>
c0006d8c:	85 c0                	test   eax,eax
c0006d8e:	0f 85 2d 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006d94:	ba 01 00 00 00       	mov    edx,0x1
c0006d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9d:	e8 33 cc ff ff       	call   c00039d5 <dir_read>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	0f 85 17 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db1:	74 09                	je     c0006dbc <f_getlabel+0x7c>
c0006db3:	31 db                	xor    ebx,ebx
c0006db5:	31 c9                	xor    ecx,ecx
c0006db7:	e9 c8 00 00 00       	jmp    c0006e84 <f_getlabel+0x144>
c0006dbc:	31 ed                	xor    ebp,ebp
c0006dbe:	31 db                	xor    ebx,ebx
c0006dc0:	31 ff                	xor    edi,edi
c0006dc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dca:	39 fa                	cmp    edx,edi
c0006dcc:	76 4b                	jbe    c0006e19 <f_getlabel+0xd9>
c0006dce:	47                   	inc    edi
c0006dcf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd2:	01 d0                	add    eax,edx
c0006dd4:	e8 90 ae ff ff       	call   c0001c69 <ld_word>
c0006dd9:	66 85 ed             	test   bp,bp
c0006ddc:	75 0d                	jne    c0006deb <f_getlabel+0xab>
c0006dde:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de9:	76 28                	jbe    c0006e13 <f_getlabel+0xd3>
c0006deb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df2:	89 e9                	mov    ecx,ebp
c0006df4:	01 da                	add    edx,ebx
c0006df6:	c1 e1 10             	shl    ecx,0x10
c0006df9:	0f b7 c0             	movzx  eax,ax
c0006dfc:	09 c8                	or     eax,ecx
c0006dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0006e03:	e8 01 b0 ff ff       	call   c0001e09 <put_utf>
c0006e08:	84 c0                	test   al,al
c0006e0a:	74 0b                	je     c0006e17 <f_getlabel+0xd7>
c0006e0c:	0f b6 c0             	movzx  eax,al
c0006e0f:	01 c3                	add    ebx,eax
c0006e11:	31 c0                	xor    eax,eax
c0006e13:	89 c5                	mov    ebp,eax
c0006e15:	eb ab                	jmp    c0006dc2 <f_getlabel+0x82>
c0006e17:	31 db                	xor    ebx,ebx
c0006e19:	66 85 ed             	test   bp,bp
c0006e1c:	74 02                	je     c0006e20 <f_getlabel+0xe0>
c0006e1e:	31 db                	xor    ebx,ebx
c0006e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e27:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2b:	e9 a0 00 00 00       	jmp    c0006ed0 <f_getlabel+0x190>
c0006e30:	83 ff 0b             	cmp    edi,0xb
c0006e33:	74 11                	je     c0006e46 <f_getlabel+0x106>
c0006e35:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e41:	c1 e0 08             	shl    eax,0x8
c0006e44:	09 c2                	or     edx,eax
c0006e46:	0f b7 d2             	movzx  edx,dx
c0006e49:	50                   	push   eax
c0006e4a:	50                   	push   eax
c0006e4b:	68 b5 01 00 00       	push   0x1b5
c0006e50:	52                   	push   edx
c0006e51:	e8 03 17 00 00       	call   c0008559 <ff_oem2uni>
c0006e56:	83 c4 10             	add    esp,0x10
c0006e59:	66 85 c0             	test   ax,ax
c0006e5c:	74 46                	je     c0006ea4 <f_getlabel+0x164>
c0006e5e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e65:	0f b7 c0             	movzx  eax,ax
c0006e68:	01 da                	add    edx,ebx
c0006e6a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e6f:	e8 95 af ff ff       	call   c0001e09 <put_utf>
c0006e74:	84 c0                	test   al,al
c0006e76:	74 2c                	je     c0006ea4 <f_getlabel+0x164>
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	01 c3                	add    ebx,eax
c0006e7d:	83 ff 0b             	cmp    edi,0xb
c0006e80:	74 24                	je     c0006ea6 <f_getlabel+0x166>
c0006e82:	89 f9                	mov    ecx,edi
c0006e84:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e88:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e90:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e99:	e8 9f ae ff ff       	call   c0001d3d <dbc_1st>
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	74 a4                	je     c0006e46 <f_getlabel+0x106>
c0006ea2:	eb 8c                	jmp    c0006e30 <f_getlabel+0xf0>
c0006ea4:	31 db                	xor    ebx,ebx
c0006ea6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb7:	74 17                	je     c0006ed0 <f_getlabel+0x190>
c0006eb9:	4b                   	dec    ebx
c0006eba:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebd:	74 ee                	je     c0006ead <f_getlabel+0x16d>
c0006ebf:	eb 0f                	jmp    c0006ed0 <f_getlabel+0x190>
c0006ec1:	83 f8 04             	cmp    eax,0x4
c0006ec4:	75 5c                	jne    c0006f22 <f_getlabel+0x1e2>
c0006ec6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed8:	74 4a                	je     c0006f24 <f_getlabel+0x1e4>
c0006eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ede:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee4:	e8 5e b5 ff ff       	call   c0002447 <move_window>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	75 35                	jne    c0006f24 <f_getlabel+0x1e4>
c0006eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef3:	b8 43 00 00 00       	mov    eax,0x43
c0006ef8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efa:	80 f9 03             	cmp    cl,0x3
c0006efd:	74 0f                	je     c0006f0e <f_getlabel+0x1ce>
c0006eff:	31 c0                	xor    eax,eax
c0006f01:	80 f9 04             	cmp    cl,0x4
c0006f04:	0f 94 c0             	sete   al
c0006f07:	48                   	dec    eax
c0006f08:	83 e0 c3             	and    eax,0xffffffc3
c0006f0b:	83 c0 64             	add    eax,0x64
c0006f0e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f12:	e8 5f ad ff ff       	call   c0001c76 <ld_dword>
c0006f17:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f1e:	89 07                	mov    DWORD PTR [edi],eax
c0006f20:	eb 02                	jmp    c0006f24 <f_getlabel+0x1e4>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	83 c4 6c             	add    esp,0x6c
c0006f27:	89 f0                	mov    eax,esi
c0006f29:	5b                   	pop    ebx
c0006f2a:	5e                   	pop    esi
c0006f2b:	5f                   	pop    edi
c0006f2c:	5d                   	pop    ebp
c0006f2d:	c3                   	ret    

c0006f2e <f_setlabel>:
c0006f2e:	56                   	push   esi
c0006f2f:	b9 02 00 00 00       	mov    ecx,0x2
c0006f34:	53                   	push   ebx
c0006f35:	83 ec 74             	sub    esp,0x74
c0006f38:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f43:	e8 b1 b7 ff ff       	call   c00026f9 <mount_volume>
c0006f48:	89 c6                	mov    esi,eax
c0006f4a:	85 c0                	test   eax,eax
c0006f4c:	0f 85 41 02 00 00    	jne    c0007193 <f_setlabel+0x265>
c0006f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f59:	0f 85 8e 00 00 00    	jne    c0006fed <f_setlabel+0xbf>
c0006f5f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f64:	31 d2                	xor    edx,edx
c0006f66:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	e8 8c ad ff ff       	call   c0001cfd <mem_set>
c0006f71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7b:	0f 86 0a 01 00 00    	jbe    c000708b <f_setlabel+0x15d>
c0006f81:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f88:	e8 b6 ad ff ff       	call   c0001d43 <tchar2uni>
c0006f8d:	89 c6                	mov    esi,eax
c0006f8f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f94:	76 2a                	jbe    c0006fc0 <f_setlabel+0x92>
c0006f96:	83 f8 ff             	cmp    eax,0xffffffff
c0006f99:	74 05                	je     c0006fa0 <f_setlabel+0x72>
c0006f9b:	83 fb 09             	cmp    ebx,0x9
c0006f9e:	76 0a                	jbe    c0006faa <f_setlabel+0x7c>
c0006fa0:	be 06 00 00 00       	mov    esi,0x6
c0006fa5:	e9 e9 01 00 00       	jmp    c0007193 <f_setlabel+0x265>
c0006faa:	89 c2                	mov    edx,eax
c0006fac:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb3:	c1 ea 10             	shr    edx,0x10
c0006fb6:	01 c8                	add    eax,ecx
c0006fb8:	43                   	inc    ebx
c0006fb9:	e8 1d ad ff ff       	call   c0001cdb <st_word>
c0006fbe:	eb 04                	jmp    c0006fc4 <f_setlabel+0x96>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	74 dc                	je     c0006fa0 <f_setlabel+0x72>
c0006fc4:	89 f2                	mov    edx,esi
c0006fc6:	b8 77 9c 02 c0       	mov    eax,0xc0029c77
c0006fcb:	e8 5b ad ff ff       	call   c0001d2b <chk_chr>
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	75 cc                	jne    c0006fa0 <f_setlabel+0x72>
c0006fd4:	83 fb 0a             	cmp    ebx,0xa
c0006fd7:	77 c7                	ja     c0006fa0 <f_setlabel+0x72>
c0006fd9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fdc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe0:	0f b7 d6             	movzx  edx,si
c0006fe3:	01 c8                	add    eax,ecx
c0006fe5:	43                   	inc    ebx
c0006fe6:	e8 f0 ac ff ff       	call   c0001cdb <st_word>
c0006feb:	eb 84                	jmp    c0006f71 <f_setlabel+0x43>
c0006fed:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff2:	ba 20 00 00 00       	mov    edx,0x20
c0006ff7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffb:	31 db                	xor    ebx,ebx
c0006ffd:	e8 fb ac ff ff       	call   c0001cfd <mem_set>
c0007002:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007009:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700c:	76 60                	jbe    c000706e <f_setlabel+0x140>
c000700e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007015:	e8 29 ad ff ff       	call   c0001d43 <tchar2uni>
c000701a:	3d ff ff 00 00       	cmp    eax,0xffff
c000701f:	0f 87 7b ff ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	e8 97 15 00 00       	call   c00085c5 <ff_wtoupper>
c000702e:	5a                   	pop    edx
c000702f:	59                   	pop    ecx
c0007030:	68 b5 01 00 00       	push   0x1b5
c0007035:	50                   	push   eax
c0007036:	e8 8e 14 00 00       	call   c00084c9 <ff_uni2oem>
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	89 c6                	mov    esi,eax
c0007040:	66 85 c0             	test   ax,ax
c0007043:	0f 84 57 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007049:	0f b7 d0             	movzx  edx,ax
c000704c:	b8 70 9c 02 c0       	mov    eax,0xc0029c70
c0007051:	e8 d5 ac ff ff       	call   c0001d2b <chk_chr>
c0007056:	85 c0                	test   eax,eax
c0007058:	0f 85 42 ff ff ff    	jne    c0006fa0 <f_setlabel+0x72>
c000705e:	66 81 fe ff 00       	cmp    si,0xff
c0007063:	0f 87 14 01 00 00    	ja     c000717d <f_setlabel+0x24f>
c0007069:	e9 fa 00 00 00       	jmp    c0007168 <f_setlabel+0x23a>
c000706e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007073:	0f 84 27 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007079:	85 db                	test   ebx,ebx
c000707b:	74 0e                	je     c000708b <f_setlabel+0x15d>
c000707d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007080:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007085:	75 04                	jne    c000708b <f_setlabel+0x15d>
c0007087:	89 c3                	mov    ebx,eax
c0007089:	eb ee                	jmp    c0007079 <f_setlabel+0x14b>
c000708b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708f:	31 d2                	xor    edx,edx
c0007091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007095:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a1:	e8 1f c1 ff ff       	call   c00031c5 <dir_sdi>
c00070a6:	89 c6                	mov    esi,eax
c00070a8:	85 c0                	test   eax,eax
c00070aa:	0f 85 e3 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c00070b0:	ba 01 00 00 00       	mov    edx,0x1
c00070b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b9:	e8 17 c9 ff ff       	call   c00039d5 <dir_read>
c00070be:	85 c0                	test   eax,eax
c00070c0:	75 21                	jne    c00070e3 <f_setlabel+0x1b5>
c00070c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ca:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cd:	74 5d                	je     c000712c <f_setlabel+0x1fe>
c00070cf:	85 db                	test   ebx,ebx
c00070d1:	74 0b                	je     c00070de <f_setlabel+0x1b0>
c00070d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070dc:	eb 70                	jmp    c000714e <f_setlabel+0x220>
c00070de:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e1:	eb 70                	jmp    c0007153 <f_setlabel+0x225>
c00070e3:	83 f8 04             	cmp    eax,0x4
c00070e6:	75 7c                	jne    c0007164 <f_setlabel+0x236>
c00070e8:	85 db                	test   ebx,ebx
c00070ea:	0f 84 a3 00 00 00    	je     c0007193 <f_setlabel+0x265>
c00070f0:	ba 01 00 00 00       	mov    edx,0x1
c00070f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f9:	e8 51 ca ff ff       	call   c0003b4f <dir_alloc>
c00070fe:	89 c6                	mov    esi,eax
c0007100:	85 c0                	test   eax,eax
c0007102:	0f 85 8b 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c0007108:	31 d2                	xor    edx,edx
c000710a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710e:	b9 20 00 00 00       	mov    ecx,0x20
c0007113:	e8 e5 ab ff ff       	call   c0001cfd <mem_set>
c0007118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	75 18                	jne    c000713d <f_setlabel+0x20f>
c0007125:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000712f:	b9 16 00 00 00       	mov    ecx,0x16
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	83 c0 02             	add    eax,0x2
c000713b:	eb 9b                	jmp    c00070d8 <f_setlabel+0x1aa>
c000713d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007141:	b9 0b 00 00 00       	mov    ecx,0xb
c0007146:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714e:	e8 95 ab ff ff       	call   c0001ce8 <mem_cpy>
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	e8 0e d4 ff ff       	call   c0004572 <sync_fs>
c0007164:	89 c6                	mov    esi,eax
c0007166:	eb 2b                	jmp    c0007193 <f_setlabel+0x265>
c0007168:	83 fb 0a             	cmp    ebx,0xa
c000716b:	0f 87 2f fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007171:	89 f0                	mov    eax,esi
c0007173:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007177:	43                   	inc    ebx
c0007178:	e9 85 fe ff ff       	jmp    c0007002 <f_setlabel+0xd4>
c000717d:	83 fb 09             	cmp    ebx,0x9
c0007180:	0f 87 1a fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	66 c1 e8 08          	shr    ax,0x8
c000718c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007190:	43                   	inc    ebx
c0007191:	eb de                	jmp    c0007171 <f_setlabel+0x243>
c0007193:	89 f0                	mov    eax,esi
c0007195:	83 c4 74             	add    esp,0x74
c0007198:	5b                   	pop    ebx
c0007199:	5e                   	pop    esi
c000719a:	c3                   	ret    

c000719b <f_forward>:
c000719b:	55                   	push   ebp
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	53                   	push   ebx
c000719f:	83 ec 2c             	sub    esp,0x2c
c00071a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b4:	89 d8                	mov    eax,ebx
c00071b6:	e8 b1 b1 ff ff       	call   c000236c <validate>
c00071bb:	89 c5                	mov    ebp,eax
c00071bd:	85 c0                	test   eax,eax
c00071bf:	0f 85 aa 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c9:	85 ed                	test   ebp,ebp
c00071cb:	0f 85 9e 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071d1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d5:	0f 84 8f 01 00 00    	je     c000736a <f_forward+0x1cf>
c00071db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e4:	bf 00 00 00 00       	mov    edi,0x0
c00071e9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ec:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f0:	89 d1                	mov    ecx,edx
c00071f2:	19 f9                	sbb    ecx,edi
c00071f4:	0f 83 cf 00 00 00    	jae    c00072c9 <f_forward+0x12e>
c00071fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071fe:	e9 c6 00 00 00       	jmp    c00072c9 <f_forward+0x12e>
c0007203:	50                   	push   eax
c0007204:	50                   	push   eax
c0007205:	6a 00                	push   0x0
c0007207:	6a 00                	push   0x0
c0007209:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	85 c0                	test   eax,eax
c0007212:	0f 84 57 01 00 00    	je     c000736f <f_forward+0x1d4>
c0007218:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007222:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007226:	89 d7                	mov    edi,edx
c0007228:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722b:	89 c6                	mov    esi,eax
c000722d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007231:	21 ce                	and    esi,ecx
c0007233:	89 c1                	mov    ecx,eax
c0007235:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723b:	0f 84 98 00 00 00    	je     c00072d9 <f_forward+0x13e>
c0007241:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007245:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007248:	89 c8                	mov    eax,ecx
c000724a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000724e:	e8 af ac ff ff       	call   c0001f02 <clst2sect>
c0007253:	89 d7                	mov    edi,edx
c0007255:	09 c7                	or     edi,eax
c0007257:	0f 84 9e 00 00 00    	je     c00072fb <f_forward+0x160>
c000725d:	31 ff                	xor    edi,edi
c000725f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007262:	01 c6                	add    esi,eax
c0007264:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007268:	11 d7                	adc    edi,edx
c000726a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007274:	39 fa                	cmp    edx,edi
c0007276:	0f 85 a2 00 00 00    	jne    c000731e <f_forward+0x183>
c000727c:	39 f0                	cmp    eax,esi
c000727e:	0f 85 9a 00 00 00    	jne    c000731e <f_forward+0x183>
c0007284:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007287:	ba 00 02 00 00       	mov    edx,0x200
c000728c:	25 ff 01 00 00       	and    eax,0x1ff
c0007291:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007295:	29 c2                	sub    edx,eax
c0007297:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729d:	39 d1                	cmp    ecx,edx
c000729f:	76 02                	jbe    c00072a3 <f_forward+0x108>
c00072a1:	89 d1                	mov    ecx,edx
c00072a3:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a6:	52                   	push   edx
c00072a7:	01 c6                	add    esi,eax
c00072a9:	52                   	push   edx
c00072aa:	51                   	push   ecx
c00072ab:	56                   	push   esi
c00072ac:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 44                	je     c00072fb <f_forward+0x160>
c00072b7:	31 ff                	xor    edi,edi
c00072b9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072bc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c7:	01 07                	add    DWORD PTR [edi],eax
c00072c9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ce:	0f 85 2f ff ff ff    	jne    c0007203 <f_forward+0x68>
c00072d4:	e9 96 00 00 00       	jmp    c000736f <f_forward+0x1d4>
c00072d9:	85 f6                	test   esi,esi
c00072db:	0f 85 60 ff ff ff    	jne    c0007241 <f_forward+0xa6>
c00072e1:	89 d7                	mov    edi,edx
c00072e3:	09 c7                	or     edi,eax
c00072e5:	75 05                	jne    c00072ec <f_forward+0x151>
c00072e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ea:	eb 0a                	jmp    c00072f6 <f_forward+0x15b>
c00072ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ef:	89 d8                	mov    eax,ebx
c00072f1:	e8 d9 bc ff ff       	call   c0002fcf <get_fat>
c00072f6:	83 f8 01             	cmp    eax,0x1
c00072f9:	77 0b                	ja     c0007306 <f_forward+0x16b>
c00072fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072ff:	bd 02 00 00 00       	mov    ebp,0x2
c0007304:	eb 69                	jmp    c000736f <f_forward+0x1d4>
c0007306:	83 f8 ff             	cmp    eax,0xffffffff
c0007309:	75 0b                	jne    c0007316 <f_forward+0x17b>
c000730b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000730f:	bd 01 00 00 00       	mov    ebp,0x1
c0007314:	eb 59                	jmp    c000736f <f_forward+0x1d4>
c0007316:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007319:	e9 23 ff ff ff       	jmp    c0007241 <f_forward+0xa6>
c000731e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007322:	79 20                	jns    c0007344 <f_forward+0x1a9>
c0007324:	83 ec 0c             	sub    esp,0xc
c0007327:	6a 01                	push   0x1
c0007329:	52                   	push   edx
c000732a:	50                   	push   eax
c000732b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007333:	50                   	push   eax
c0007334:	e8 fb a8 ff ff       	call   c0001c34 <disk_write>
c0007339:	83 c4 20             	add    esp,0x20
c000733c:	85 c0                	test   eax,eax
c000733e:	75 cb                	jne    c000730b <f_forward+0x170>
c0007340:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	6a 01                	push   0x1
c0007349:	57                   	push   edi
c000734a:	56                   	push   esi
c000734b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007353:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007357:	50                   	push   eax
c0007358:	e8 c1 a8 ff ff       	call   c0001c1e <disk_read>
c000735d:	83 c4 20             	add    esp,0x20
c0007360:	85 c0                	test   eax,eax
c0007362:	0f 84 1c ff ff ff    	je     c0007284 <f_forward+0xe9>
c0007368:	eb a1                	jmp    c000730b <f_forward+0x170>
c000736a:	bd 07 00 00 00       	mov    ebp,0x7
c000736f:	83 c4 2c             	add    esp,0x2c
c0007372:	89 e8                	mov    eax,ebp
c0007374:	5b                   	pop    ebx
c0007375:	5e                   	pop    esi
c0007376:	5f                   	pop    edi
c0007377:	5d                   	pop    ebp
c0007378:	c3                   	ret    

c0007379 <f_mkfs>:
c0007379:	55                   	push   ebp
c000737a:	57                   	push   edi
c000737b:	56                   	push   esi
c000737c:	53                   	push   ebx
c000737d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007382:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007388:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000738f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007396:	e8 b0 ae ff ff       	call   c000224b <get_ldnumber>
c000739b:	85 c0                	test   eax,eax
c000739d:	0f 88 ec 10 00 00    	js     c000848f <f_mkfs+0x1116>
c00073a3:	8b 14 85 c0 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1240]
c00073aa:	85 d2                	test   edx,edx
c00073ac:	74 03                	je     c00073b1 <f_mkfs+0x38>
c00073ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b1:	85 f6                	test   esi,esi
c00073b3:	75 05                	jne    c00073ba <f_mkfs+0x41>
c00073b5:	be 60 9c 02 c0       	mov    esi,0xc0029c60
c00073ba:	83 ec 0c             	sub    esp,0xc
c00073bd:	0f b6 c0             	movzx  eax,al
c00073c0:	bb 03 00 00 00       	mov    ebx,0x3
c00073c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cd:	e8 49 a8 ff ff       	call   c0001c1b <disk_initialize>
c00073d2:	83 c4 10             	add    esp,0x10
c00073d5:	a8 01                	test   al,0x1
c00073d7:	0f 85 b2 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073dd:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e2:	a8 04                	test   al,0x4
c00073e4:	0f 85 a5 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f1:	85 c0                	test   eax,eax
c00073f3:	75 20                	jne    c0007415 <f_mkfs+0x9c>
c00073f5:	51                   	push   ecx
c00073f6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fa:	50                   	push   eax
c00073fb:	6a 03                	push   0x3
c00073fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007401:	e8 44 a8 ff ff       	call   c0001c4a <disk_ioctl>
c0007406:	83 c4 10             	add    esp,0x10
c0007409:	85 c0                	test   eax,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0x9c>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007419:	8d 42 ff             	lea    eax,[edx-0x1]
c000741c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007421:	77 04                	ja     c0007427 <f_mkfs+0xae>
c0007423:	85 c2                	test   edx,eax
c0007425:	74 08                	je     c000742f <f_mkfs+0xb6>
c0007427:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007432:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007436:	48                   	dec    eax
c0007437:	3c 01                	cmp    al,0x1
c0007439:	76 05                	jbe    c0007440 <f_mkfs+0xc7>
c000743b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007440:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007447:	48                   	dec    eax
c0007448:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xdd>
c000744f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007454:	74 08                	je     c000745e <f_mkfs+0xe5>
c0007456:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000745e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007461:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007467:	77 07                	ja     c0007470 <f_mkfs+0xf7>
c0007469:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746c:	85 d8                	test   eax,ebx
c000746e:	74 02                	je     c0007472 <f_mkfs+0xf9>
c0007470:	31 db                	xor    ebx,ebx
c0007472:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747d:	77 0a                	ja     c0007489 <f_mkfs+0x110>
c000747f:	bb 11 00 00 00       	mov    ebx,0x11
c0007484:	e9 06 10 00 00       	jmp    c000848f <f_mkfs+0x1116>
c0007489:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007490:	8b 36                	mov    esi,DWORD PTR [esi]
c0007492:	85 ed                	test   ebp,ebp
c0007494:	75 1e                	jne    c00074b4 <f_mkfs+0x13b>
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a5:	50                   	push   eax
c00074a6:	e8 f1 0f 00 00       	call   c000849c <ff_memalloc>
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	89 c5                	mov    ebp,eax
c00074b0:	85 c0                	test   eax,eax
c00074b2:	74 cb                	je     c000747f <f_mkfs+0x106>
c00074b4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074bc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c4:	52                   	push   edx
c00074c5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c9:	50                   	push   eax
c00074ca:	6a 01                	push   0x1
c00074cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d0:	e8 75 a7 ff ff       	call   c0001c4a <disk_ioctl>
c00074d5:	83 c4 10             	add    esp,0x10
c00074d8:	85 c0                	test   eax,eax
c00074da:	0f 85 4a 0f 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ea:	83 e1 0f             	and    ecx,0xf
c00074ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f9:	83 e6 08             	and    esi,0x8
c00074fc:	75 56                	jne    c0007554 <f_mkfs+0x1db>
c00074fe:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007502:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007506:	83 ff 00             	cmp    edi,0x0
c0007509:	76 20                	jbe    c000752b <f_mkfs+0x1b2>
c000750b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007510:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007518:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000751e:	83 d7 ff             	adc    edi,0xffffffff
c0007521:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007525:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007529:	eb 21                	jmp    c000754c <f_mkfs+0x1d3>
c000752b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007530:	39 f2                	cmp    edx,esi
c0007532:	19 f8                	sbb    eax,edi
c0007534:	73 1e                	jae    c0007554 <f_mkfs+0x1db>
c0007536:	83 c6 c1             	add    esi,0xffffffc1
c0007539:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007541:	83 d7 ff             	adc    edi,0xffffffff
c0007544:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007548:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007554:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007558:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755c:	89 04 24             	mov    DWORD PTR [esp],eax
c000755f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007563:	31 c0                	xor    eax,eax
c0007565:	ba 7f 00 00 00       	mov    edx,0x7f
c000756a:	89 c7                	mov    edi,eax
c000756c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000756f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007573:	0f 83 c5 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007579:	89 df                	mov    edi,ebx
c000757b:	c1 ef 09             	shr    edi,0x9
c000757e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007582:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007589:	c1 ef 09             	shr    edi,0x9
c000758c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007591:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007595:	74 29                	je     c00075c0 <f_mkfs+0x247>
c0007597:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a2:	0f 97 c2             	seta   dl
c00075a5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ac:	0f 92 c0             	setb   al
c00075af:	08 c2                	or     dl,al
c00075b1:	75 5b                	jne    c000760e <f_mkfs+0x295>
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	83 e0 07             	and    eax,0x7
c00075ba:	3c 04                	cmp    al,0x4
c00075bc:	74 50                	je     c000760e <f_mkfs+0x295>
c00075be:	eb 1b                	jmp    c00075db <f_mkfs+0x262>
c00075c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c5:	0f 87 73 0a 00 00    	ja     c000803e <f_mkfs+0xcc5>
c00075cb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d1:	76 08                	jbe    c00075db <f_mkfs+0x262>
c00075d3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075df:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e3:	83 e0 01             	and    eax,0x1
c00075e6:	80 e1 02             	and    cl,0x2
c00075e9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ed:	74 0d                	je     c00075fc <f_mkfs+0x283>
c00075ef:	84 c0                	test   al,al
c00075f1:	0f 84 53 09 00 00    	je     c0007f4a <f_mkfs+0xbd1>
c00075f7:	e9 12 08 00 00       	jmp    c0007e0e <f_mkfs+0xa95>
c00075fc:	bb 13 00 00 00       	mov    ebx,0x13
c0007601:	84 c0                	test   al,al
c0007603:	0f 85 05 08 00 00    	jne    c0007e0e <f_mkfs+0xa95>
c0007609:	e9 39 0e 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c000760e:	31 c0                	xor    eax,eax
c0007610:	ba ff 0f 00 00       	mov    edx,0xfff
c0007615:	89 c7                	mov    edi,eax
c0007617:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000761e:	0f 83 1a 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007624:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762a:	77 39                	ja     c0007665 <f_mkfs+0x2ec>
c000762c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007631:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007639:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007640:	73 08                	jae    c000764a <f_mkfs+0x2d1>
c0007642:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000764f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007652:	b8 00 00 00 00       	mov    eax,0x0
c0007657:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765b:	73 08                	jae    c0007665 <f_mkfs+0x2ec>
c000765d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766d:	83 c0 20             	add    eax,0x20
c0007670:	83 d2 00             	adc    edx,0x0
c0007673:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007677:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767f:	31 d2                	xor    edx,edx
c0007681:	31 ff                	xor    edi,edi
c0007683:	52                   	push   edx
c0007684:	89 fb                	mov    ebx,edi
c0007686:	50                   	push   eax
c0007687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768f:	e8 10 fb 01 00       	call   c00271a4 <__udivdi3>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	c1 e0 02             	shl    eax,0x2
c000769a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000769e:	05 07 02 00 00       	add    eax,0x207
c00076a3:	89 f1                	mov    ecx,esi
c00076a5:	c1 e8 09             	shr    eax,0x9
c00076a8:	83 c1 ff             	add    ecx,0xffffffff
c00076ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076af:	83 d3 ff             	adc    ebx,0xffffffff
c00076b2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076ba:	31 d2                	xor    edx,edx
c00076bc:	01 c8                	add    eax,ecx
c00076be:	11 da                	adc    edx,ebx
c00076c0:	89 c1                	mov    ecx,eax
c00076c2:	f7 de                	neg    esi
c00076c4:	89 d0                	mov    eax,edx
c00076c6:	83 d7 00             	adc    edi,0x0
c00076c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cd:	f7 df                	neg    edi
c00076cf:	21 f1                	and    ecx,esi
c00076d1:	21 f8                	and    eax,edi
c00076d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ea:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ee:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f2:	89 df                	mov    edi,ebx
c00076f4:	d1 ea                	shr    edx,1
c00076f6:	39 c1                	cmp    ecx,eax
c00076f8:	19 d7                	sbb    edi,edx
c00076fa:	0f 83 3e 09 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007704:	31 d2                	xor    edx,edx
c0007706:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007719:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007725:	83 f8 0f             	cmp    eax,0xf
c0007728:	0f 86 10 09 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c000772e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007736:	0f 87 02 09 00 00    	ja     c000803e <f_mkfs+0xcc5>
c000773c:	31 d2                	xor    edx,edx
c000773e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007742:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774a:	83 c0 07             	add    eax,0x7
c000774d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007755:	c1 e8 03             	shr    eax,0x3
c0007758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000775f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	c1 e0 09             	shl    eax,0x9
c000776a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000776e:	48                   	dec    eax
c000776f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007773:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007777:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000777f:	31 d2                	xor    edx,edx
c0007781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007785:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007790:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007795:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007799:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a5:	31 ff                	xor    edi,edi
c00077a7:	31 f6                	xor    esi,esi
c00077a9:	31 db                	xor    ebx,ebx
c00077ab:	85 ff                	test   edi,edi
c00077ad:	74 05                	je     c00077b4 <f_mkfs+0x43b>
c00077af:	4f                   	dec    edi
c00077b0:	74 44                	je     c00077f6 <f_mkfs+0x47d>
c00077b2:	eb 4f                	jmp    c0007803 <f_mkfs+0x48a>
c00077b4:	83 ec 0c             	sub    esp,0xc
c00077b7:	0f b7 c3             	movzx  eax,bx
c00077ba:	50                   	push   eax
c00077bb:	e8 05 0e 00 00       	call   c00085c5 <ff_wtoupper>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	89 c1                	mov    ecx,eax
c00077c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c8:	66 39 c3             	cmp    bx,ax
c00077cb:	75 3e                	jne    c000780b <f_mkfs+0x492>
c00077cd:	be 01 00 00 00       	mov    esi,0x1
c00077d2:	89 df                	mov    edi,ebx
c00077d4:	66 01 f7             	add    di,si
c00077d7:	75 07                	jne    c00077e0 <f_mkfs+0x467>
c00077d9:	83 fe 7f             	cmp    esi,0x7f
c00077dc:	77 31                	ja     c000780f <f_mkfs+0x496>
c00077de:	eb 16                	jmp    c00077f6 <f_mkfs+0x47d>
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	0f b7 ff             	movzx  edi,di
c00077e6:	57                   	push   edi
c00077e7:	e8 d9 0d 00 00       	call   c00085c5 <ff_wtoupper>
c00077ec:	83 c4 10             	add    esp,0x10
c00077ef:	39 c7                	cmp    edi,eax
c00077f1:	75 e6                	jne    c00077d9 <f_mkfs+0x460>
c00077f3:	46                   	inc    esi
c00077f4:	eb dc                	jmp    c00077d2 <f_mkfs+0x459>
c00077f6:	31 c0                	xor    eax,eax
c00077f8:	89 d9                	mov    ecx,ebx
c00077fa:	4e                   	dec    esi
c00077fb:	0f 95 c0             	setne  al
c00077fe:	43                   	inc    ebx
c00077ff:	89 c7                	mov    edi,eax
c0007801:	eb 14                	jmp    c0007817 <f_mkfs+0x49e>
c0007803:	89 f1                	mov    ecx,esi
c0007805:	01 f3                	add    ebx,esi
c0007807:	31 ff                	xor    edi,edi
c0007809:	eb 0c                	jmp    c0007817 <f_mkfs+0x49e>
c000780b:	89 d3                	mov    ebx,edx
c000780d:	eb 08                	jmp    c0007817 <f_mkfs+0x49e>
c000780f:	bf 02 00 00 00       	mov    edi,0x2
c0007814:	83 c9 ff             	or     ecx,0xffffffff
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000781e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007822:	0f b6 c1             	movzx  eax,cl
c0007825:	e8 3a a9 ff ff       	call   c0002164 <xsum32>
c000782a:	66 c1 e9 08          	shr    cx,0x8
c000782e:	89 c2                	mov    edx,eax
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007837:	0f b7 c1             	movzx  eax,cx
c000783a:	e8 25 a9 ff ff       	call   c0002164 <xsum32>
c000783f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007844:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007848:	66 85 db             	test   bx,bx
c000784b:	74 1f                	je     c000786c <f_mkfs+0x4f3>
c000784d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007850:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007857:	83 c0 02             	add    eax,0x2
c000785a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007860:	39 c2                	cmp    edx,eax
c0007862:	74 08                	je     c000786c <f_mkfs+0x4f3>
c0007864:	89 04 24             	mov    DWORD PTR [esp],eax
c0007867:	e9 3f ff ff ff       	jmp    c00077ab <f_mkfs+0x432>
c000786c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	05 01 02 00 00       	add    eax,0x201
c0007877:	c1 e8 09             	shr    eax,0x9
c000787a:	50                   	push   eax
c000787b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000787f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007887:	55                   	push   ebp
c0007888:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788c:	e8 a3 a3 ff ff       	call   c0001c34 <disk_write>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	85 c0                	test   eax,eax
c0007896:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007899:	0f 85 8b 0b 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000789f:	89 d0                	mov    eax,edx
c00078a1:	31 d2                	xor    edx,edx
c00078a3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ab:	66 85 db             	test   bx,bx
c00078ae:	74 04                	je     c00078b4 <f_mkfs+0x53b>
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	eb b0                	jmp    c0007864 <f_mkfs+0x4eb>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d7:	c1 eb 09             	shr    ebx,0x9
c00078da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f1:	8d 70 01             	lea    esi,[eax+0x1]
c00078f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fc:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007903:	31 d2                	xor    edx,edx
c0007905:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790a:	89 04 24             	mov    DWORD PTR [esp],eax
c000790d:	89 c1                	mov    ecx,eax
c000790f:	89 e8                	mov    eax,ebp
c0007911:	e8 e7 a3 ff ff       	call   c0001cfd <mem_set>
c0007916:	31 c0                	xor    eax,eax
c0007918:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791b:	76 10                	jbe    c000792d <f_mkfs+0x5b4>
c000791d:	83 fe 07             	cmp    esi,0x7
c0007920:	76 0b                	jbe    c000792d <f_mkfs+0x5b4>
c0007922:	40                   	inc    eax
c0007923:	83 ee 08             	sub    esi,0x8
c0007926:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792b:	eb eb                	jmp    c0007918 <f_mkfs+0x59f>
c000792d:	b2 01                	mov    dl,0x1
c000792f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007933:	85 f6                	test   esi,esi
c0007935:	74 0c                	je     c0007943 <f_mkfs+0x5ca>
c0007937:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793a:	76 07                	jbe    c0007943 <f_mkfs+0x5ca>
c000793c:	08 11                	or     BYTE PTR [ecx],dl
c000793e:	4e                   	dec    esi
c000793f:	d1 e2                	shl    edx,1
c0007941:	eb f0                	jmp    c0007933 <f_mkfs+0x5ba>
c0007943:	89 df                	mov    edi,ebx
c0007945:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007949:	76 04                	jbe    c000794f <f_mkfs+0x5d6>
c000794b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000794f:	83 ec 0c             	sub    esp,0xc
c0007952:	57                   	push   edi
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795b:	55                   	push   ebp
c000795c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007960:	e8 cf a2 ff ff       	call   c0001c34 <disk_write>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	85 c0                	test   eax,eax
c000796a:	0f 85 ba 0a 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007970:	31 d2                	xor    edx,edx
c0007972:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007976:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797a:	29 fb                	sub    ebx,edi
c000797c:	0f 85 7a ff ff ff    	jne    c00078fc <f_mkfs+0x583>
c0007982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000798e:	31 f6                	xor    esi,esi
c0007990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007994:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007997:	31 d2                	xor    edx,edx
c0007999:	89 e8                	mov    eax,ebp
c000799b:	e8 5d a3 ff ff       	call   c0001cfd <mem_set>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	85 db                	test   ebx,ebx
c00079a4:	75 40                	jne    c00079e6 <f_mkfs+0x66d>
c00079a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ab:	89 e8                	mov    eax,ebp
c00079ad:	bb 02 00 00 00       	mov    ebx,0x2
c00079b2:	e8 28 a3 ff ff       	call   c0001cdf <st_dword>
c00079b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00079ba:	83 ca ff             	or     edx,0xffffffff
c00079bd:	e8 1d a3 ff ff       	call   c0001cdf <st_dword>
c00079c2:	b9 08 00 00 00       	mov    ecx,0x8
c00079c7:	eb 1d                	jmp    c00079e6 <f_mkfs+0x66d>
c00079c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079cc:	76 3b                	jbe    c0007a09 <f_mkfs+0x690>
c00079ce:	43                   	inc    ebx
c00079cf:	83 fe 01             	cmp    esi,0x1
c00079d2:	89 da                	mov    edx,ebx
c00079d4:	77 03                	ja     c00079d9 <f_mkfs+0x660>
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079dd:	4e                   	dec    esi
c00079de:	e8 fc a2 ff ff       	call   c0001cdf <st_dword>
c00079e3:	83 c1 04             	add    ecx,0x4
c00079e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ea:	85 f6                	test   esi,esi
c00079ec:	75 db                	jne    c00079c9 <f_mkfs+0x650>
c00079ee:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f3:	77 14                	ja     c0007a09 <f_mkfs+0x690>
c00079f5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a00:	85 f6                	test   esi,esi
c0007a02:	74 05                	je     c0007a09 <f_mkfs+0x690>
c0007a04:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a07:	77 dd                	ja     c00079e6 <f_mkfs+0x66d>
c0007a09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a11:	39 cf                	cmp    edi,ecx
c0007a13:	76 02                	jbe    c0007a17 <f_mkfs+0x69e>
c0007a15:	89 cf                	mov    edi,ecx
c0007a17:	83 ec 0c             	sub    esp,0xc
c0007a1a:	57                   	push   edi
c0007a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a23:	55                   	push   ebp
c0007a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a28:	e8 07 a2 ff ff       	call   c0001c34 <disk_write>
c0007a2d:	83 c4 20             	add    esp,0x20
c0007a30:	85 c0                	test   eax,eax
c0007a32:	0f 85 f2 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007a38:	31 d2                	xor    edx,edx
c0007a3a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a3e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a42:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a46:	0f 85 48 ff ff ff    	jne    c0007994 <f_mkfs+0x61b>
c0007a4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	89 e8                	mov    eax,ebp
c0007a53:	31 ff                	xor    edi,edi
c0007a55:	e8 a3 a2 ff ff       	call   c0001cfd <mem_set>
c0007a5a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5d:	ba 02 00 00 00       	mov    edx,0x2
c0007a62:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a66:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6a:	e8 70 a2 ff ff       	call   c0001cdf <st_dword>
c0007a6f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a72:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a76:	e8 64 a2 ff ff       	call   c0001cdf <st_dword>
c0007a7b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a7e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a82:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a86:	e8 54 a2 ff ff       	call   c0001cdf <st_dword>
c0007a8b:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a92:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a96:	83 c2 02             	add    edx,0x2
c0007a99:	e8 41 a2 ff ff       	call   c0001cdf <st_dword>
c0007a9e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa9:	e8 31 a2 ff ff       	call   c0001cdf <st_dword>
c0007aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab7:	89 c6                	mov    esi,eax
c0007ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007acf:	39 cb                	cmp    ebx,ecx
c0007ad1:	76 02                	jbe    c0007ad5 <f_mkfs+0x75c>
c0007ad3:	89 cb                	mov    ebx,ecx
c0007ad5:	83 ec 0c             	sub    esp,0xc
c0007ad8:	53                   	push   ebx
c0007ad9:	57                   	push   edi
c0007ada:	56                   	push   esi
c0007adb:	55                   	push   ebp
c0007adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae0:	e8 4f a1 ff ff       	call   c0001c34 <disk_write>
c0007ae5:	83 c4 20             	add    esp,0x20
c0007ae8:	85 c0                	test   eax,eax
c0007aea:	0f 85 3a 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007af0:	31 d2                	xor    edx,edx
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	89 e8                	mov    eax,ebp
c0007af9:	e8 ff a1 ff ff       	call   c0001cfd <mem_set>
c0007afe:	31 d2                	xor    edx,edx
c0007b00:	01 de                	add    esi,ebx
c0007b02:	11 d7                	adc    edi,edx
c0007b04:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b07:	75 bf                	jne    c0007ac8 <f_mkfs+0x74f>
c0007b09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b11:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b19:	b9 00 02 00 00       	mov    ecx,0x200
c0007b1e:	31 d2                	xor    edx,edx
c0007b20:	89 e8                	mov    eax,ebp
c0007b22:	e8 d6 a1 ff ff       	call   c0001cfd <mem_set>
c0007b27:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2c:	ba 40 9d 02 c0       	mov    edx,0xc0029d40
c0007b31:	89 e8                	mov    eax,ebp
c0007b33:	e8 b0 a1 ff ff       	call   c0001ce8 <mem_cpy>
c0007b38:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b43:	e8 9a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b48:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b4f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b53:	e8 8a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b58:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5b:	ba 20 00 00 00       	mov    edx,0x20
c0007b60:	e8 7a a1 ff ff       	call   c0001cdf <st_dword>
c0007b65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6d:	e8 6d a1 ff ff       	call   c0001cdf <st_dword>
c0007b72:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b7e:	e8 5c a1 ff ff       	call   c0001cdf <st_dword>
c0007b83:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8a:	e8 50 a1 ff ff       	call   c0001cdf <st_dword>
c0007b8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b93:	8d 50 02             	lea    edx,[eax+0x2]
c0007b96:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b99:	e8 41 a1 ff ff       	call   c0001cdf <st_dword>
c0007b9e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba6:	e8 34 a1 ff ff       	call   c0001cdf <st_dword>
c0007bab:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bae:	ba 00 01 00 00       	mov    edx,0x100
c0007bb3:	e8 23 a1 ff ff       	call   c0001cdb <st_word>
c0007bb8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbc:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc1:	48                   	dec    eax
c0007bc2:	74 05                	je     c0007bc9 <f_mkfs+0x850>
c0007bc4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc7:	eb f8                	jmp    c0007bc1 <f_mkfs+0x848>
c0007bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd9:	74 05                	je     c0007be0 <f_mkfs+0x867>
c0007bdb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bde:	eb f5                	jmp    c0007bd5 <f_mkfs+0x85c>
c0007be0:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be3:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bee:	31 db                	xor    ebx,ebx
c0007bf0:	e8 e6 a0 ff ff       	call   c0001cdb <st_word>
c0007bf5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c03:	e8 d3 a0 ff ff       	call   c0001cdb <st_word>
c0007c08:	31 c9                	xor    ecx,ecx
c0007c0a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0d:	83 f8 01             	cmp    eax,0x1
c0007c10:	76 13                	jbe    c0007c25 <f_mkfs+0x8ac>
c0007c12:	83 f9 70             	cmp    ecx,0x70
c0007c15:	74 0e                	je     c0007c25 <f_mkfs+0x8ac>
c0007c17:	89 da                	mov    edx,ebx
c0007c19:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c1e:	e8 41 a5 ff ff       	call   c0002164 <xsum32>
c0007c23:	89 c3                	mov    ebx,eax
c0007c25:	41                   	inc    ecx
c0007c26:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2c:	75 dc                	jne    c0007c0a <f_mkfs+0x891>
c0007c2e:	89 f0                	mov    eax,esi
c0007c30:	89 fa                	mov    edx,edi
c0007c32:	83 c0 01             	add    eax,0x1
c0007c35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c39:	83 d2 00             	adc    edx,0x0
c0007c3c:	83 ec 0c             	sub    esp,0xc
c0007c3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c43:	6a 01                	push   0x1
c0007c45:	57                   	push   edi
c0007c46:	56                   	push   esi
c0007c47:	55                   	push   ebp
c0007c48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4c:	e8 e3 9f ff ff       	call   c0001c34 <disk_write>
c0007c51:	83 c4 20             	add    esp,0x20
c0007c54:	85 c0                	test   eax,eax
c0007c56:	0f 85 ce 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007c5c:	31 d2                	xor    edx,edx
c0007c5e:	b9 00 02 00 00       	mov    ecx,0x200
c0007c63:	89 e8                	mov    eax,ebp
c0007c65:	e8 93 a0 ff ff       	call   c0001cfd <mem_set>
c0007c6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c72:	e8 64 a0 ff ff       	call   c0001cdb <st_word>
c0007c77:	89 f0                	mov    eax,esi
c0007c79:	89 fa                	mov    edx,edi
c0007c7b:	83 c0 09             	add    eax,0x9
c0007c7e:	83 d2 00             	adc    edx,0x0
c0007c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c88:	31 c9                	xor    ecx,ecx
c0007c8a:	41                   	inc    ecx
c0007c8b:	89 da                	mov    edx,ebx
c0007c8d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c92:	e8 cd a4 ff ff       	call   c0002164 <xsum32>
c0007c97:	89 c3                	mov    ebx,eax
c0007c99:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c9f:	75 e9                	jne    c0007c8a <f_mkfs+0x911>
c0007ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca9:	83 c0 01             	add    eax,0x1
c0007cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb0:	83 d2 00             	adc    edx,0x0
c0007cb3:	83 ec 0c             	sub    esp,0xc
c0007cb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cba:	6a 01                	push   0x1
c0007cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc4:	55                   	push   ebp
c0007cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc9:	e8 66 9f ff ff       	call   c0001c34 <disk_write>
c0007cce:	83 c4 20             	add    esp,0x20
c0007cd1:	85 c0                	test   eax,eax
c0007cd3:	0f 85 51 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce1:	75 09                	jne    c0007cec <f_mkfs+0x973>
c0007ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cea:	74 12                	je     c0007cfe <f_mkfs+0x985>
c0007cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfc:	eb 8a                	jmp    c0007c88 <f_mkfs+0x90f>
c0007cfe:	31 d2                	xor    edx,edx
c0007d00:	b9 00 02 00 00       	mov    ecx,0x200
c0007d05:	89 e8                	mov    eax,ebp
c0007d07:	e8 f1 9f ff ff       	call   c0001cfd <mem_set>
c0007d0c:	83 c6 0b             	add    esi,0xb
c0007d0f:	83 d7 00             	adc    edi,0x0
c0007d12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d16:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1a:	31 c9                	xor    ecx,ecx
c0007d1c:	41                   	inc    ecx
c0007d1d:	89 da                	mov    edx,ebx
c0007d1f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d24:	e8 3b a4 ff ff       	call   c0002164 <xsum32>
c0007d29:	89 c3                	mov    ebx,eax
c0007d2b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d31:	75 e9                	jne    c0007d1c <f_mkfs+0x9a3>
c0007d33:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d36:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3a:	83 c6 01             	add    esi,0x1
c0007d3d:	83 d7 00             	adc    edi,0x0
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	6a 01                	push   0x1
c0007d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4d:	55                   	push   ebp
c0007d4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d52:	e8 dd 9e ff ff       	call   c0001c34 <disk_write>
c0007d57:	83 c4 20             	add    esp,0x20
c0007d5a:	85 c0                	test   eax,eax
c0007d5c:	0f 85 c8 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007d62:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d66:	75 06                	jne    c0007d6e <f_mkfs+0x9f5>
c0007d68:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6c:	74 09                	je     c0007d77 <f_mkfs+0x9fe>
c0007d6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d71:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d75:	eb a3                	jmp    c0007d1a <f_mkfs+0x9a1>
c0007d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7b:	89 da                	mov    edx,ebx
c0007d7d:	01 e8                	add    eax,ebp
c0007d7f:	e8 5b 9f ff ff       	call   c0001cdf <st_dword>
c0007d84:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d89:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d91:	75 e4                	jne    c0007d77 <f_mkfs+0x9fe>
c0007d93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d96:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9a:	83 c6 02             	add    esi,0x2
c0007d9d:	83 d7 00             	adc    edi,0x0
c0007da0:	83 ec 0c             	sub    esp,0xc
c0007da3:	6a 01                	push   0x1
c0007da5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dad:	55                   	push   ebp
c0007dae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db2:	e8 7d 9e ff ff       	call   c0001c34 <disk_write>
c0007db7:	83 c4 20             	add    esp,0x20
c0007dba:	85 c0                	test   eax,eax
c0007dbc:	0f 85 68 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007dc2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc7:	74 0d                	je     c0007dd6 <f_mkfs+0xa5d>
c0007dc9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd1:	e9 43 fd ff ff       	jmp    c0007b19 <f_mkfs+0x7a0>
c0007dd6:	b1 07                	mov    cl,0x7
c0007dd8:	e9 e3 05 00 00       	jmp    c00083c0 <f_mkfs+0x1047>
c0007ddd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de2:	0f 85 4f 02 00 00    	jne    c0008037 <f_mkfs+0xcbe>
c0007de8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ded:	0f 86 22 02 00 00    	jbe    c0008015 <f_mkfs+0xc9c>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	0f 85 81 06 00 00    	jne    c000847f <f_mkfs+0x1106>
c0007dfe:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e05:	83 f8 40             	cmp    eax,0x40
c0007e08:	0f 87 51 06 00 00    	ja     c000845f <f_mkfs+0x10e6>
c0007e0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e12:	85 ff                	test   edi,edi
c0007e14:	75 1c                	jne    c0007e32 <f_mkfs+0xab9>
c0007e16:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e19:	ba 40 9c 02 c0       	mov    edx,0xc0029c40
c0007e1e:	c1 e9 0c             	shr    ecx,0xc
c0007e21:	bf 01 00 00 00       	mov    edi,0x1
c0007e26:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e29:	66 85 c0             	test   ax,ax
c0007e2c:	0f 85 95 01 00 00    	jne    c0007fc7 <f_mkfs+0xc4e>
c0007e32:	31 d2                	xor    edx,edx
c0007e34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e37:	f7 f7                	div    edi
c0007e39:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3e:	0f 86 95 01 00 00    	jbe    c0007fd9 <f_mkfs+0xc60>
c0007e44:	83 c0 02             	add    eax,0x2
c0007e47:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4c:	01 c0                	add    eax,eax
c0007e4e:	05 ff 01 00 00       	add    eax,0x1ff
c0007e53:	be 01 00 00 00       	mov    esi,0x1
c0007e58:	c1 e8 09             	shr    eax,0x9
c0007e5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e63:	c1 e0 05             	shl    eax,0x5
c0007e66:	c1 e8 09             	shr    eax,0x9
c0007e69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e72:	31 d2                	xor    edx,edx
c0007e74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e78:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7c:	89 f0                	mov    eax,esi
c0007e7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e82:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e92:	31 d2                	xor    edx,edx
c0007e94:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e99:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea1:	31 db                	xor    ebx,ebx
c0007ea3:	01 c8                	add    eax,ecx
c0007ea5:	11 da                	adc    edx,ebx
c0007ea7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eab:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eaf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebb:	f7 da                	neg    edx
c0007ebd:	21 d1                	and    ecx,edx
c0007ebf:	29 d9                	sub    ecx,ebx
c0007ec1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec6:	0f 85 20 01 00 00    	jne    c0007fec <f_mkfs+0xc73>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	01 ce                	add    esi,ecx
c0007ed0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed8:	31 d2                	xor    edx,edx
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee0:	c1 e0 04             	shl    eax,0x4
c0007ee3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eeb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007eef:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef6:	19 d3                	sbb    ebx,edx
c0007ef8:	0f 82 40 01 00 00    	jb     c000803e <f_mkfs+0xcc5>
c0007efe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f05:	89 c8                	mov    eax,ecx
c0007f07:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f10:	29 f0                	sub    eax,esi
c0007f12:	29 d0                	sub    eax,edx
c0007f14:	31 d2                	xor    edx,edx
c0007f16:	f7 f7                	div    edi
c0007f18:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	0f 85 b8 fe ff ff    	jne    c0007ddd <f_mkfs+0xa64>
c0007f25:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2a:	0f 87 1d 01 00 00    	ja     c000804d <f_mkfs+0xcd4>
c0007f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f35:	0f 85 03 01 00 00    	jne    c000803e <f_mkfs+0xcc5>
c0007f3b:	83 ff 01             	cmp    edi,0x1
c0007f3e:	0f 86 fa 00 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c0007f44:	d1 ef                	shr    edi,1
c0007f46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	85 db                	test   ebx,ebx
c0007f53:	75 2d                	jne    c0007f82 <f_mkfs+0xc09>
c0007f55:	89 cb                	mov    ebx,ecx
c0007f57:	ba 50 9c 02 c0       	mov    edx,0xc0029c50
c0007f5c:	c1 eb 11             	shr    ebx,0x11
c0007f5f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f67:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6a:	66 85 c0             	test   ax,ax
c0007f6d:	74 11                	je     c0007f80 <f_mkfs+0xc07>
c0007f6f:	83 c2 02             	add    edx,0x2
c0007f72:	39 d8                	cmp    eax,ebx
c0007f74:	77 0a                	ja     c0007f80 <f_mkfs+0xc07>
c0007f76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f7e:	eb e7                	jmp    c0007f67 <f_mkfs+0xbee>
c0007f80:	31 db                	xor    ebx,ebx
c0007f82:	31 d2                	xor    edx,edx
c0007f84:	89 c8                	mov    eax,ecx
c0007f86:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f91:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f96:	c1 ea 09             	shr    edx,0x9
c0007f99:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f9e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa2:	0f 87 96 00 00 00    	ja     c000803e <f_mkfs+0xcc5>
c0007fa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fac:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb8:	be 20 00 00 00       	mov    esi,0x20
c0007fbd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc2:	e9 a6 fe ff ff       	jmp    c0007e6d <f_mkfs+0xaf4>
c0007fc7:	83 c2 02             	add    edx,0x2
c0007fca:	39 c8                	cmp    eax,ecx
c0007fcc:	0f 87 60 fe ff ff    	ja     c0007e32 <f_mkfs+0xab9>
c0007fd2:	01 ff                	add    edi,edi
c0007fd4:	e9 4d fe ff ff       	jmp    c0007e26 <f_mkfs+0xaad>
c0007fd9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fdc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe1:	40                   	inc    eax
c0007fe2:	d1 e8                	shr    eax,1
c0007fe4:	83 c0 03             	add    eax,0x3
c0007fe7:	e9 62 fe ff ff       	jmp    c0007e4e <f_mkfs+0xad5>
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	89 c8                	mov    eax,ecx
c0007ff0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff4:	85 d2                	test   edx,edx
c0007ff6:	74 0c                	je     c0008004 <f_mkfs+0xc8b>
c0007ff8:	49                   	dec    ecx
c0007ff9:	46                   	inc    esi
c0007ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fff:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008004:	89 c8                	mov    eax,ecx
c0008006:	31 d2                	xor    edx,edx
c0008008:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008010:	e9 c3 fe ff ff       	jmp    c0007ed8 <f_mkfs+0xb5f>
c0008015:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801a:	77 31                	ja     c000804d <f_mkfs+0xcd4>
c000801c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008021:	75 1b                	jne    c000803e <f_mkfs+0xcc5>
c0008023:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802a:	3d 80 00 00 00       	cmp    eax,0x80
c000802f:	0f 86 d9 fd ff ff    	jbe    c0007e0e <f_mkfs+0xa95>
c0008035:	eb 07                	jmp    c000803e <f_mkfs+0xcc5>
c0008037:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803c:	76 0a                	jbe    c0008048 <f_mkfs+0xccf>
c000803e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008043:	e9 ff 03 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c0008048:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804d:	31 d2                	xor    edx,edx
c000804f:	b9 00 02 00 00       	mov    ecx,0x200
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 a2 9c ff ff       	call   c0001cfd <mem_set>
c000805b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008060:	ba 62 9d 02 c0       	mov    edx,0xc0029d62
c0008065:	89 e8                	mov    eax,ebp
c0008067:	e8 7c 9c ff ff       	call   c0001ce8 <mem_cpy>
c000806c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000806f:	ba 00 02 00 00       	mov    edx,0x200
c0008074:	e8 62 9c ff ff       	call   c0001cdb <st_word>
c0008079:	89 f8                	mov    eax,edi
c000807b:	0f b7 d6             	movzx  edx,si
c000807e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008081:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008084:	e8 52 9c ff ff       	call   c0001cdb <st_word>
c0008089:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008092:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008095:	75 08                	jne    c000809f <f_mkfs+0xd26>
c0008097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000809f:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a6:	e8 30 9c ff ff       	call   c0001cdb <st_word>
c00080ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b4:	39 d0                	cmp    eax,edx
c00080b6:	b8 00 00 00 00       	mov    eax,0x0
c00080bb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080bf:	72 0a                	jb     c00080cb <f_mkfs+0xd52>
c00080c1:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c4:	e8 12 9c ff ff       	call   c0001cdb <st_word>
c00080c9:	eb 08                	jmp    c00080d3 <f_mkfs+0xd5a>
c00080cb:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ce:	e8 0c 9c ff ff       	call   c0001cdf <st_dword>
c00080d3:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00080db:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080df:	e8 f7 9b ff ff       	call   c0001cdb <st_word>
c00080e4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e7:	ba ff 00 00 00       	mov    edx,0xff
c00080ec:	e8 ea 9b ff ff       	call   c0001cdb <st_word>
c00080f1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f8:	e8 e2 9b ff ff       	call   c0001cdf <st_dword>
c00080fd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008102:	75 57                	jne    c000815b <f_mkfs+0xde2>
c0008104:	8d 45 43             	lea    eax,[ebp+0x43]
c0008107:	ba 00 00 21 50       	mov    edx,0x50210000
c000810c:	e8 ce 9b ff ff       	call   c0001cdf <st_dword>
c0008111:	8d 45 24             	lea    eax,[ebp+0x24]
c0008114:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008118:	e8 c2 9b ff ff       	call   c0001cdf <st_dword>
c000811d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008120:	ba 02 00 00 00       	mov    edx,0x2
c0008125:	e8 b5 9b ff ff       	call   c0001cdf <st_dword>
c000812a:	8d 45 30             	lea    eax,[ebp+0x30]
c000812d:	ba 01 00 00 00       	mov    edx,0x1
c0008132:	e8 a4 9b ff ff       	call   c0001cdb <st_word>
c0008137:	8d 45 32             	lea    eax,[ebp+0x32]
c000813a:	ba 06 00 00 00       	mov    edx,0x6
c000813f:	e8 97 9b ff ff       	call   c0001cdb <st_word>
c0008144:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008148:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814c:	8d 45 47             	lea    eax,[ebp+0x47]
c000814f:	b9 13 00 00 00       	mov    ecx,0x13
c0008154:	ba 6e 9d 02 c0       	mov    edx,0xc0029d6e
c0008159:	eb 2f                	jmp    c000818a <f_mkfs+0xe11>
c000815b:	8d 45 27             	lea    eax,[ebp+0x27]
c000815e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008163:	e8 77 9b ff ff       	call   c0001cdf <st_dword>
c0008168:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008170:	e8 66 9b ff ff       	call   c0001cdb <st_word>
c0008175:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008179:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008180:	b9 13 00 00 00       	mov    ecx,0x13
c0008185:	ba 82 9d 02 c0       	mov    edx,0xc0029d82
c000818a:	e8 59 9b ff ff       	call   c0001ce8 <mem_cpy>
c000818f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008195:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819a:	89 f0                	mov    eax,esi
c000819c:	e8 3a 9b ff ff       	call   c0001cdb <st_word>
c00081a1:	83 ec 0c             	sub    esp,0xc
c00081a4:	6a 01                	push   0x1
c00081a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ae:	55                   	push   ebp
c00081af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b3:	e8 7c 9a ff ff       	call   c0001c34 <disk_write>
c00081b8:	83 c4 20             	add    esp,0x20
c00081bb:	85 c0                	test   eax,eax
c00081bd:	0f 85 67 02 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00081c3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c8:	0f 85 b7 00 00 00    	jne    c0008285 <f_mkfs+0xf0c>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	6a 01                	push   0x1
c00081d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081db:	83 c0 06             	add    eax,0x6
c00081de:	83 d2 00             	adc    edx,0x0
c00081e1:	52                   	push   edx
c00081e2:	50                   	push   eax
c00081e3:	55                   	push   ebp
c00081e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e8:	e8 47 9a ff ff       	call   c0001c34 <disk_write>
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	b9 00 02 00 00       	mov    ecx,0x200
c00081f5:	31 d2                	xor    edx,edx
c00081f7:	89 e8                	mov    eax,ebp
c00081f9:	e8 ff 9a ff ff       	call   c0001cfd <mem_set>
c00081fe:	ba 52 52 61 41       	mov    edx,0x41615252
c0008203:	89 e8                	mov    eax,ebp
c0008205:	e8 d5 9a ff ff       	call   c0001cdf <st_dword>
c000820a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008210:	ba 72 72 41 61       	mov    edx,0x61417272
c0008215:	e8 c5 9a ff ff       	call   c0001cdf <st_dword>
c000821a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008223:	e8 b7 9a ff ff       	call   c0001cdf <st_dword>
c0008228:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000822e:	ba 02 00 00 00       	mov    edx,0x2
c0008233:	e8 a7 9a ff ff       	call   c0001cdf <st_dword>
c0008238:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823d:	89 f0                	mov    eax,esi
c000823f:	e8 97 9a ff ff       	call   c0001cdb <st_word>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	6a 01                	push   0x1
c0008249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008251:	83 c0 07             	add    eax,0x7
c0008254:	83 d2 00             	adc    edx,0x0
c0008257:	52                   	push   edx
c0008258:	50                   	push   eax
c0008259:	55                   	push   ebp
c000825a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825e:	e8 d1 99 ff ff       	call   c0001c34 <disk_write>
c0008263:	83 c4 14             	add    esp,0x14
c0008266:	6a 01                	push   0x1
c0008268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008270:	83 c0 01             	add    eax,0x1
c0008273:	83 d2 00             	adc    edx,0x0
c0008276:	52                   	push   edx
c0008277:	50                   	push   eax
c0008278:	55                   	push   ebp
c0008279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827d:	e8 b2 99 ff ff       	call   c0001c34 <disk_write>
c0008282:	83 c4 20             	add    esp,0x20
c0008285:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828c:	31 d2                	xor    edx,edx
c000828e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008294:	31 db                	xor    ebx,ebx
c0008296:	89 e8                	mov    eax,ebp
c0008298:	e8 60 9a ff ff       	call   c0001cfd <mem_set>
c000829d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a9:	0f 94 c3             	sete   bl
c00082ac:	4b                   	dec    ebx
c00082ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082be:	75 21                	jne    c00082e1 <f_mkfs+0xf68>
c00082c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c5:	89 e8                	mov    eax,ebp
c00082c7:	e8 13 9a ff ff       	call   c0001cdf <st_dword>
c00082cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00082cf:	83 ca ff             	or     edx,0xffffffff
c00082d2:	e8 08 9a ff ff       	call   c0001cdf <st_dword>
c00082d7:	8d 45 08             	lea    eax,[ebp+0x8]
c00082da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082df:	eb 04                	jmp    c00082e5 <f_mkfs+0xf6c>
c00082e1:	89 da                	mov    edx,ebx
c00082e3:	89 e8                	mov    eax,ebp
c00082e5:	e8 f5 99 ff ff       	call   c0001cdf <st_dword>
c00082ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fa:	39 ce                	cmp    esi,ecx
c00082fc:	76 02                	jbe    c0008300 <f_mkfs+0xf87>
c00082fe:	89 ce                	mov    esi,ecx
c0008300:	83 ec 0c             	sub    esp,0xc
c0008303:	56                   	push   esi
c0008304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830c:	55                   	push   ebp
c000830d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008311:	e8 1e 99 ff ff       	call   c0001c34 <disk_write>
c0008316:	83 c4 20             	add    esp,0x20
c0008319:	85 c0                	test   eax,eax
c000831b:	0f 85 09 01 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0008321:	31 d2                	xor    edx,edx
c0008323:	b9 00 02 00 00       	mov    ecx,0x200
c0008328:	89 e8                	mov    eax,ebp
c000832a:	e8 ce 99 ff ff       	call   c0001cfd <mem_set>
c000832f:	31 d2                	xor    edx,edx
c0008331:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008335:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008339:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833d:	75 b3                	jne    c00082f2 <f_mkfs+0xf79>
c000833f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008342:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008349:	40                   	inc    eax
c000834a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000834e:	0f 87 65 ff ff ff    	ja     c00082b9 <f_mkfs+0xf40>
c0008354:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008359:	74 04                	je     c000835f <f_mkfs+0xfe6>
c000835b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000835f:	89 fb                	mov    ebx,edi
c0008361:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008365:	76 04                	jbe    c000836b <f_mkfs+0xff2>
c0008367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836b:	83 ec 0c             	sub    esp,0xc
c000836e:	53                   	push   ebx
c000836f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008373:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008377:	55                   	push   ebp
c0008378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837c:	e8 b3 98 ff ff       	call   c0001c34 <disk_write>
c0008381:	83 c4 20             	add    esp,0x20
c0008384:	85 c0                	test   eax,eax
c0008386:	0f 85 9e 00 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000838c:	31 d2                	xor    edx,edx
c000838e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008392:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008396:	29 df                	sub    edi,ebx
c0008398:	75 c5                	jne    c000835f <f_mkfs+0xfe6>
c000839a:	b1 0c                	mov    cl,0xc
c000839c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a1:	74 1d                	je     c00083c0 <f_mkfs+0x1047>
c00083a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a8:	b1 06                	mov    cl,0x6
c00083aa:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ae:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b2:	72 0c                	jb     c00083c0 <f_mkfs+0x1047>
c00083b4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b9:	0f 94 c1             	sete   cl
c00083bc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c5:	75 4c                	jne    c0008413 <f_mkfs+0x109a>
c00083c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083dd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f3:	0f b6 c9             	movzx  ecx,cl
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	55                   	push   ebp
c00083fa:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008405:	e8 2f c2 ff ff       	call   c0004639 <create_partition>
c000840a:	83 c4 10             	add    esp,0x10
c000840d:	89 c3                	mov    ebx,eax
c000840f:	85 c0                	test   eax,eax
c0008411:	75 34                	jne    c0008447 <f_mkfs+0x10ce>
c0008413:	31 db                	xor    ebx,ebx
c0008415:	50                   	push   eax
c0008416:	6a 00                	push   0x0
c0008418:	6a 00                	push   0x0
c000841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000841e:	e8 27 98 ff ff       	call   c0001c4a <disk_ioctl>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	85 c0                	test   eax,eax
c0008428:	74 1d                	je     c0008447 <f_mkfs+0x10ce>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 0c                	jne    c0008440 <f_mkfs+0x10c7>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 75 00 00 00       	call   c00084b2 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	bb 01 00 00 00       	mov    ebx,0x1
c0008445:	eb 48                	jmp    c000848f <f_mkfs+0x1116>
c0008447:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844f:	75 3e                	jne    c000848f <f_mkfs+0x1116>
c0008451:	83 ec 0c             	sub    esp,0xc
c0008454:	55                   	push   ebp
c0008455:	e8 58 00 00 00       	call   c00084b2 <ff_memfree>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	eb 30                	jmp    c000848f <f_mkfs+0x1116>
c000845f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008464:	0f 85 eb fa ff ff    	jne    c0007f55 <f_mkfs+0xbdc>
c000846a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000846e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008474:	0f 86 b8 f9 ff ff    	jbe    c0007e32 <f_mkfs+0xab9>
c000847a:	e9 bf fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000847f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008484:	0f 85 c0 fa ff ff    	jne    c0007f4a <f_mkfs+0xbd1>
c000848a:	e9 af fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000848f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008495:	89 d8                	mov    eax,ebx
c0008497:	5b                   	pop    ebx
c0008498:	5e                   	pop    esi
c0008499:	5f                   	pop    edi
c000849a:	5d                   	pop    ebp
c000849b:	c3                   	ret    

c000849c <ff_memalloc>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	83 ec 0c             	sub    esp,0xc
c00084a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a6:	e8 69 74 00 00       	call   c000f914 <malloc>
c00084ab:	83 c4 10             	add    esp,0x10
c00084ae:	83 c4 0c             	add    esp,0xc
c00084b1:	c3                   	ret    

c00084b2 <ff_memfree>:
c00084b2:	83 ec 0c             	sub    esp,0xc
c00084b5:	83 ec 0c             	sub    esp,0xc
c00084b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bc:	e8 63 74 00 00       	call   c000f924 <free>
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	90                   	nop
c00084c5:	83 c4 0c             	add    esp,0xc
c00084c8:	c3                   	ret    

c00084c9 <ff_uni2oem>:
c00084c9:	83 ec 14             	sub    esp,0x14
c00084cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084db:	c7 44 24 0c a0 a0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a0a0
c00084e3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e8:	77 0b                	ja     c00084f5 <ff_uni2oem+0x2c>
c00084ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	eb 5b                	jmp    c0008550 <ff_uni2oem+0x87>
c00084f5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084fd:	77 51                	ja     c0008550 <ff_uni2oem+0x87>
c00084ff:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008505:	75 49                	jne    c0008550 <ff_uni2oem+0x87>
c0008507:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000850e:	eb 0b                	jmp    c000851b <ff_uni2oem+0x52>
c0008510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008515:	40                   	inc    eax
c0008516:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008521:	77 1b                	ja     c000853e <ff_uni2oem+0x75>
c0008523:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008528:	01 c0                	add    eax,eax
c000852a:	89 c2                	mov    edx,eax
c000852c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008530:	01 d0                	add    eax,edx
c0008532:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008535:	0f b7 c0             	movzx  eax,ax
c0008538:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853c:	75 d2                	jne    c0008510 <ff_uni2oem+0x47>
c000853e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008543:	83 e8 80             	sub    eax,0xffffff80
c0008546:	25 ff 00 00 00       	and    eax,0xff
c000854b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008550:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008555:	83 c4 14             	add    esp,0x14
c0008558:	c3                   	ret    

c0008559 <ff_oem2uni>:
c0008559:	83 ec 18             	sub    esp,0x18
c000855c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008564:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008569:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008574:	c7 44 24 10 a0 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0a0
c000857c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008582:	77 0b                	ja     c000858f <ff_oem2uni+0x36>
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858d:	eb 2d                	jmp    c00085bc <ff_oem2uni+0x63>
c000858f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008595:	75 25                	jne    c00085bc <ff_oem2uni+0x63>
c0008597:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000859e:	77 1c                	ja     c00085bc <ff_oem2uni+0x63>
c00085a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085aa:	01 c0                	add    eax,eax
c00085ac:	89 c2                	mov    edx,eax
c00085ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b2:	01 d0                	add    eax,edx
c00085b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085bc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c1:	83 c4 18             	add    esp,0x18
c00085c4:	c3                   	ret    

c00085c5 <ff_wtoupper>:
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d0:	0f 87 3e 01 00 00    	ja     c0008714 <ff_wtoupper+0x14f>
c00085d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e6:	77 07                	ja     c00085ef <ff_wtoupper+0x2a>
c00085e8:	b8 a0 9e 02 c0       	mov    eax,0xc0029ea0
c00085ed:	eb 05                	jmp    c00085f4 <ff_wtoupper+0x2f>
c00085ef:	b8 e0 9d 02 c0       	mov    eax,0xc0029de0
c00085f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fc:	8d 50 02             	lea    edx,[eax+0x2]
c00085ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008603:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008606:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008611:	0f 84 f4 00 00 00    	je     c000870b <ff_wtoupper+0x146>
c0008617:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008621:	0f 82 e4 00 00 00    	jb     c000870b <ff_wtoupper+0x146>
c0008627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862b:	8d 50 02             	lea    edx,[eax+0x2]
c000862e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000863f:	66 c1 e8 08          	shr    ax,0x8
c0008643:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008648:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000864f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008654:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008659:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000865e:	01 ca                	add    edx,ecx
c0008660:	39 d0                	cmp    eax,edx
c0008662:	0f 8d 86 00 00 00    	jge    c00086ee <ff_wtoupper+0x129>
c0008668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866d:	83 f8 08             	cmp    eax,0x8
c0008670:	0f 87 94 00 00 00    	ja     c000870a <ff_wtoupper+0x145>
c0008676:	8b 04 85 a0 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6260]
c000867d:	ff e0                	jmp    eax
c000867f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008684:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008689:	29 c2                	sub    edx,eax
c000868b:	89 d0                	mov    eax,edx
c000868d:	01 c0                	add    eax,eax
c000868f:	89 c2                	mov    edx,eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	01 d0                	add    eax,edx
c0008697:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000869f:	eb 4b                	jmp    c00086ec <ff_wtoupper+0x127>
c00086a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086aa:	83 e0 01             	and    eax,0x1
c00086ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b2:	eb 38                	jmp    c00086ec <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086ba:	eb 30                	jmp    c00086ec <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c2:	eb 28                	jmp    c00086ec <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ca:	eb 20                	jmp    c00086ec <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d2:	eb 18                	jmp    c00086ec <ff_wtoupper+0x127>
c00086d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086da:	eb 10                	jmp    c00086ec <ff_wtoupper+0x127>
c00086dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e2:	eb 08                	jmp    c00086ec <ff_wtoupper+0x127>
c00086e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086eb:	90                   	nop
c00086ec:	eb 1c                	jmp    c000870a <ff_wtoupper+0x145>
c00086ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f4:	0f 85 fe fe ff ff    	jne    c00085f8 <ff_wtoupper+0x33>
c00086fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086ff:	01 c0                	add    eax,eax
c0008701:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008705:	e9 ee fe ff ff       	jmp    c00085f8 <ff_wtoupper+0x33>
c000870a:	90                   	nop
c000870b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008718:	83 c4 10             	add    esp,0x10
c000871b:	c3                   	ret    

c000871c <psrc_set_converter>:
c000871c:	56                   	push   esi
c000871d:	89 d6                	mov    esi,edx
c000871f:	53                   	push   ebx
c0008720:	89 c3                	mov    ebx,eax
c0008722:	83 ec 0c             	sub    esp,0xc
c0008725:	52                   	push   edx
c0008726:	50                   	push   eax
c0008727:	e8 6f 55 00 00       	call   c000dc9b <sinc_set_converter>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	85 c0                	test   eax,eax
c0008731:	74 25                	je     c0008758 <psrc_set_converter+0x3c>
c0008733:	50                   	push   eax
c0008734:	50                   	push   eax
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	e8 17 5d 00 00       	call   c000e453 <zoh_set_converter>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	85 c0                	test   eax,eax
c0008741:	74 15                	je     c0008758 <psrc_set_converter+0x3c>
c0008743:	51                   	push   ecx
c0008744:	51                   	push   ecx
c0008745:	56                   	push   esi
c0008746:	53                   	push   ebx
c0008747:	e8 0f 11 00 00       	call   c000985b <linear_set_converter>
c000874c:	83 c4 10             	add    esp,0x10
c000874f:	ba 0a 00 00 00       	mov    edx,0xa
c0008754:	85 c0                	test   eax,eax
c0008756:	75 02                	jne    c000875a <psrc_set_converter+0x3e>
c0008758:	31 d2                	xor    edx,edx
c000875a:	89 d0                	mov    eax,edx
c000875c:	5a                   	pop    edx
c000875d:	5b                   	pop    ebx
c000875e:	5e                   	pop    esi
c000875f:	c3                   	ret    

c0008760 <src_delete>:
c0008760:	53                   	push   ebx
c0008761:	83 ec 08             	sub    esp,0x8
c0008764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008768:	85 db                	test   ebx,ebx
c000876a:	74 29                	je     c0008795 <src_delete+0x35>
c000876c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000876f:	85 c0                	test   eax,eax
c0008771:	74 0c                	je     c000877f <src_delete+0x1f>
c0008773:	83 ec 0c             	sub    esp,0xc
c0008776:	50                   	push   eax
c0008777:	e8 a8 71 00 00       	call   c000f924 <free>
c000877c:	83 c4 10             	add    esp,0x10
c000877f:	50                   	push   eax
c0008780:	6a 3c                	push   0x3c
c0008782:	6a 00                	push   0x0
c0008784:	53                   	push   ebx
c0008785:	e8 f6 7f ff ff       	call   c0000780 <memset>
c000878a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878d:	e8 92 71 00 00       	call   c000f924 <free>
c0008792:	83 c4 10             	add    esp,0x10
c0008795:	31 c0                	xor    eax,eax
c0008797:	83 c4 08             	add    esp,0x8
c000879a:	5b                   	pop    ebx
c000879b:	c3                   	ret    

c000879c <src_process>:
c000879c:	55                   	push   ebp
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 1c             	sub    esp,0x1c
c00087a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ab:	85 ed                	test   ebp,ebp
c00087ad:	0f 84 6f 01 00 00    	je     c0008922 <src_process+0x186>
c00087b3:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b7:	0f 84 6c 01 00 00    	je     c0008929 <src_process+0x18d>
c00087bd:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c1:	0f 84 62 01 00 00    	je     c0008929 <src_process+0x18d>
c00087c7:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ce:	0f 85 5c 01 00 00    	jne    c0008930 <src_process+0x194>
c00087d4:	85 db                	test   ebx,ebx
c00087d6:	0f 84 5b 01 00 00    	je     c0008937 <src_process+0x19b>
c00087dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087de:	85 f6                	test   esi,esi
c00087e0:	0f 84 58 01 00 00    	je     c000893e <src_process+0x1a2>
c00087e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e9:	85 ff                	test   edi,edi
c00087eb:	0f 84 4d 01 00 00    	je     c000893e <src_process+0x1a2>
c00087f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087ff:	68 00 00 70 3f       	push   0x3f700000
c0008804:	6a 00                	push   0x0
c0008806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880e:	e8 64 04 02 00       	call   c0028c77 <__ltdf2>
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	0f 88 27 01 00 00    	js     c0008945 <src_process+0x1a9>
c000881e:	68 00 00 70 40       	push   0x40700000
c0008823:	6a 00                	push   0x0
c0008825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882d:	e8 27 04 02 00       	call   c0028c59 <__gtdf2>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	85 c0                	test   eax,eax
c0008837:	0f 8f 08 01 00 00    	jg     c0008945 <src_process+0x1a9>
c000883d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008841:	79 07                	jns    c000884a <src_process+0xae>
c0008843:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884d:	85 c0                	test   eax,eax
c000884f:	79 50                	jns    c00088a1 <src_process+0x105>
c0008851:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008858:	39 fe                	cmp    esi,edi
c000885a:	72 37                	jb     c0008893 <src_process+0xf7>
c000885c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886a:	68 00 00 70 3f       	push   0x3f700000
c000886f:	6a 00                	push   0x0
c0008871:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008874:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008877:	e8 fb 03 02 00       	call   c0028c77 <__ltdf2>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	85 c0                	test   eax,eax
c0008881:	79 37                	jns    c00088ba <src_process+0x11e>
c0008883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000888e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008891:	eb 27                	jmp    c00088ba <src_process+0x11e>
c0008893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008896:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889a:	8d 04 86             	lea    eax,[esi+eax*4]
c000889d:	39 c7                	cmp    edi,eax
c000889f:	eb 0d                	jmp    c00088ae <src_process+0x112>
c00088a1:	39 fe                	cmp    esi,edi
c00088a3:	72 ee                	jb     c0008893 <src_process+0xf7>
c00088a5:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a9:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ac:	39 c6                	cmp    esi,eax
c00088ae:	73 ac                	jae    c000885c <src_process+0xc0>
c00088b0:	b8 10 00 00 00       	mov    eax,0x10
c00088b5:	e9 90 00 00 00       	jmp    c000894a <src_process+0x1ae>
c00088ba:	83 ec 10             	sub    esp,0x10
c00088bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c9:	e8 ae fa 01 00       	call   c002837c <__subdf3>
c00088ce:	83 c4 18             	add    esp,0x18
c00088d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	e8 30 05 02 00       	call   c0028e10 <fabs>
c00088e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	68 af 03 d2 3c       	push   0x3cd203af
c00088f0:	68 16 56 e7 9e       	push   0x9ee75616
c00088f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fd:	e8 75 03 02 00       	call   c0028c77 <__ltdf2>
c0008902:	83 c4 10             	add    esp,0x10
c0008905:	85 c0                	test   eax,eax
c0008907:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000890f:	79 05                	jns    c0008916 <src_process+0x17a>
c0008911:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008914:	eb 03                	jmp    c0008919 <src_process+0x17d>
c0008916:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008919:	83 c4 1c             	add    esp,0x1c
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	5d                   	pop    ebp
c0008920:	ff e0                	jmp    eax
c0008922:	b8 02 00 00 00       	mov    eax,0x2
c0008927:	eb 21                	jmp    c000894a <src_process+0x1ae>
c0008929:	b8 07 00 00 00       	mov    eax,0x7
c000892e:	eb 1a                	jmp    c000894a <src_process+0x1ae>
c0008930:	b8 12 00 00 00       	mov    eax,0x12
c0008935:	eb 13                	jmp    c000894a <src_process+0x1ae>
c0008937:	b8 03 00 00 00       	mov    eax,0x3
c000893c:	eb 0c                	jmp    c000894a <src_process+0x1ae>
c000893e:	b8 04 00 00 00       	mov    eax,0x4
c0008943:	eb 05                	jmp    c000894a <src_process+0x1ae>
c0008945:	b8 06 00 00 00       	mov    eax,0x6
c000894a:	83 c4 1c             	add    esp,0x1c
c000894d:	5b                   	pop    ebx
c000894e:	5e                   	pop    esi
c000894f:	5f                   	pop    edi
c0008950:	5d                   	pop    ebp
c0008951:	c3                   	ret    

c0008952 <src_callback_read>:
c0008952:	55                   	push   ebp
c0008953:	57                   	push   edi
c0008954:	56                   	push   esi
c0008955:	53                   	push   ebx
c0008956:	83 ec 3c             	sub    esp,0x3c
c0008959:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008961:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008965:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008969:	85 ed                	test   ebp,ebp
c000896b:	0f 8e 52 01 00 00    	jle    c0008ac3 <src_callback_read+0x171>
c0008971:	85 db                	test   ebx,ebx
c0008973:	0f 84 4a 01 00 00    	je     c0008ac3 <src_callback_read+0x171>
c0008979:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008980:	74 0c                	je     c000898e <src_callback_read+0x3c>
c0008982:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008989:	e9 35 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c000898e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008992:	75 0c                	jne    c00089a0 <src_callback_read+0x4e>
c0008994:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899b:	e9 23 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c00089a0:	51                   	push   ecx
c00089a1:	6a 24                	push   0x24
c00089a3:	6a 00                	push   0x0
c00089a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a9:	50                   	push   eax
c00089aa:	e8 d1 7d ff ff       	call   c0000780 <memset>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	68 00 00 70 3f       	push   0x3f700000
c00089b7:	6a 00                	push   0x0
c00089b9:	57                   	push   edi
c00089ba:	56                   	push   esi
c00089bb:	e8 b7 02 02 00       	call   c0028c77 <__ltdf2>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	85 c0                	test   eax,eax
c00089c5:	78 3e                	js     c0008a05 <src_callback_read+0xb3>
c00089c7:	68 00 00 70 40       	push   0x40700000
c00089cc:	6a 00                	push   0x0
c00089ce:	57                   	push   edi
c00089cf:	56                   	push   esi
c00089d0:	e8 84 02 02 00       	call   c0028c59 <__gtdf2>
c00089d5:	83 c4 10             	add    esp,0x10
c00089d8:	85 c0                	test   eax,eax
c00089da:	7f 29                	jg     c0008a05 <src_callback_read+0xb3>
c00089dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e8:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ef:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	31 f6                	xor    esi,esi
c00089f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a00:	e9 97 00 00 00       	jmp    c0008a9c <src_callback_read+0x14a>
c0008a05:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0c:	e9 b2 00 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c0008a11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a19:	52                   	push   edx
c0008a1a:	52                   	push   edx
c0008a1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a1f:	50                   	push   eax
c0008a20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a23:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 08                	jne    c0008a41 <src_callback_read+0xef>
c0008a39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a41:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a48:	50                   	push   eax
c0008a49:	50                   	push   eax
c0008a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a4e:	50                   	push   eax
c0008a4f:	53                   	push   ebx
c0008a50:	e8 47 fd ff ff       	call   c000879c <src_process>
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5f:	85 c0                	test   eax,eax
c0008a61:	75 49                	jne    c0008aac <src_callback_read+0x15a>
c0008a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a67:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6a:	89 f9                	mov    ecx,edi
c0008a6c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a70:	0f af ca             	imul   ecx,edx
c0008a73:	c1 e1 02             	shl    ecx,0x2
c0008a76:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a7e:	0f af d1             	imul   edx,ecx
c0008a81:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a85:	c1 e2 02             	shl    edx,0x2
c0008a88:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8c:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a94:	74 12                	je     c0008aa8 <src_callback_read+0x156>
c0008a96:	39 d5                	cmp    ebp,edx
c0008a98:	7e 14                	jle    c0008aae <src_callback_read+0x15c>
c0008a9a:	89 d6                	mov    esi,edx
c0008a9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa1:	75 9e                	jne    c0008a41 <src_callback_read+0xef>
c0008aa3:	e9 69 ff ff ff       	jmp    c0008a11 <src_callback_read+0xbf>
c0008aa8:	85 c9                	test   ecx,ecx
c0008aaa:	75 ea                	jne    c0008a96 <src_callback_read+0x144>
c0008aac:	89 f2                	mov    edx,esi
c0008aae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abb:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008abe:	74 05                	je     c0008ac5 <src_callback_read+0x173>
c0008ac0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac3:	31 d2                	xor    edx,edx
c0008ac5:	83 c4 3c             	add    esp,0x3c
c0008ac8:	89 d0                	mov    eax,edx
c0008aca:	5b                   	pop    ebx
c0008acb:	5e                   	pop    esi
c0008acc:	5f                   	pop    edi
c0008acd:	5d                   	pop    ebp
c0008ace:	c3                   	ret    

c0008acf <src_set_ratio>:
c0008acf:	57                   	push   edi
c0008ad0:	ba 02 00 00 00       	mov    edx,0x2
c0008ad5:	56                   	push   esi
c0008ad6:	53                   	push   ebx
c0008ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008adf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae3:	85 db                	test   ebx,ebx
c0008ae5:	74 4c                	je     c0008b33 <src_set_ratio+0x64>
c0008ae7:	ba 07 00 00 00       	mov    edx,0x7
c0008aec:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af0:	74 41                	je     c0008b33 <src_set_ratio+0x64>
c0008af2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af6:	74 3b                	je     c0008b33 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 3f       	push   0x3f700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 71 01 02 00       	call   c0028c77 <__ltdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	78 21                	js     c0008b33 <src_set_ratio+0x64>
c0008b12:	68 00 00 70 40       	push   0x40700000
c0008b17:	6a 00                	push   0x0
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	e8 39 01 02 00       	call   c0028c59 <__gtdf2>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 06 00 00 00       	mov    edx,0x6
c0008b28:	85 c0                	test   eax,eax
c0008b2a:	7f 07                	jg     c0008b33 <src_set_ratio+0x64>
c0008b2c:	89 33                	mov    DWORD PTR [ebx],esi
c0008b2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b31:	31 d2                	xor    edx,edx
c0008b33:	5b                   	pop    ebx
c0008b34:	89 d0                	mov    eax,edx
c0008b36:	5e                   	pop    esi
c0008b37:	5f                   	pop    edi
c0008b38:	c3                   	ret    

c0008b39 <src_get_channels>:
c0008b39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3d:	b8 02 00 00 00       	mov    eax,0x2
c0008b42:	85 d2                	test   edx,edx
c0008b44:	74 14                	je     c0008b5a <src_get_channels+0x21>
c0008b46:	b8 07 00 00 00       	mov    eax,0x7
c0008b4b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b4f:	74 09                	je     c0008b5a <src_get_channels+0x21>
c0008b51:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b55:	74 03                	je     c0008b5a <src_get_channels+0x21>
c0008b57:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5a:	c3                   	ret    

c0008b5b <src_reset>:
c0008b5b:	53                   	push   ebx
c0008b5c:	b8 02 00 00 00       	mov    eax,0x2
c0008b61:	83 ec 08             	sub    esp,0x8
c0008b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b68:	85 db                	test   ebx,ebx
c0008b6a:	74 36                	je     c0008ba2 <src_reset+0x47>
c0008b6c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b6f:	85 c0                	test   eax,eax
c0008b71:	74 09                	je     c0008b7c <src_reset+0x21>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	53                   	push   ebx
c0008b77:	ff d0                	call   eax
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	31 c0                	xor    eax,eax
c0008b7e:	31 d2                	xor    edx,edx
c0008b80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b83:	89 03                	mov    DWORD PTR [ebx],eax
c0008b85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b88:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b92:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba0:	31 c0                	xor    eax,eax
c0008ba2:	83 c4 08             	add    esp,0x8
c0008ba5:	5b                   	pop    ebx
c0008ba6:	c3                   	ret    

c0008ba7 <src_new>:
c0008ba7:	57                   	push   edi
c0008ba8:	56                   	push   esi
c0008ba9:	53                   	push   ebx
c0008baa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb2:	85 f6                	test   esi,esi
c0008bb4:	74 73                	je     c0008c29 <src_new+0x82>
c0008bb6:	85 ff                	test   edi,edi
c0008bb8:	7f 08                	jg     c0008bc2 <src_new+0x1b>
c0008bba:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc0:	eb 1e                	jmp    c0008be0 <src_new+0x39>
c0008bc2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc8:	50                   	push   eax
c0008bc9:	50                   	push   eax
c0008bca:	6a 3c                	push   0x3c
c0008bcc:	6a 01                	push   0x1
c0008bce:	e8 71 6d 00 00       	call   c000f944 <calloc>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	89 c3                	mov    ebx,eax
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	75 10                	jne    c0008bec <src_new+0x45>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	75 04                	jne    c0008be4 <src_new+0x3d>
c0008be0:	31 db                	xor    ebx,ebx
c0008be2:	eb 4b                	jmp    c0008c2f <src_new+0x88>
c0008be4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bea:	eb 43                	jmp    c0008c2f <src_new+0x88>
c0008bec:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bef:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfa:	e8 1d fb ff ff       	call   c000871c <psrc_set_converter>
c0008bff:	85 c0                	test   eax,eax
c0008c01:	74 18                	je     c0008c1b <src_new+0x74>
c0008c03:	85 f6                	test   esi,esi
c0008c05:	74 06                	je     c0008c0d <src_new+0x66>
c0008c07:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0d:	83 ec 0c             	sub    esp,0xc
c0008c10:	53                   	push   ebx
c0008c11:	31 db                	xor    ebx,ebx
c0008c13:	e8 0c 6d 00 00       	call   c000f924 <free>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	83 ec 0c             	sub    esp,0xc
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 37 ff ff ff       	call   c0008b5b <src_reset>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	eb 06                	jmp    c0008c2f <src_new+0x88>
c0008c29:	85 ff                	test   edi,edi
c0008c2b:	7f 9b                	jg     c0008bc8 <src_new+0x21>
c0008c2d:	eb b1                	jmp    c0008be0 <src_new+0x39>
c0008c2f:	89 d8                	mov    eax,ebx
c0008c31:	5b                   	pop    ebx
c0008c32:	5e                   	pop    esi
c0008c33:	5f                   	pop    edi
c0008c34:	c3                   	ret    

c0008c35 <src_callback_new>:
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	53                   	push   ebx
c0008c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c40:	85 f6                	test   esi,esi
c0008c42:	75 0e                	jne    c0008c52 <src_callback_new+0x1d>
c0008c44:	31 db                	xor    ebx,ebx
c0008c46:	85 c0                	test   eax,eax
c0008c48:	74 47                	je     c0008c91 <src_callback_new+0x5c>
c0008c4a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c50:	eb 3f                	jmp    c0008c91 <src_callback_new+0x5c>
c0008c52:	85 c0                	test   eax,eax
c0008c54:	74 06                	je     c0008c5c <src_callback_new+0x27>
c0008c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5c:	51                   	push   ecx
c0008c5d:	50                   	push   eax
c0008c5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c66:	e8 3c ff ff ff       	call   c0008ba7 <src_new>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 c3                	mov    ebx,eax
c0008c70:	85 c0                	test   eax,eax
c0008c72:	74 1d                	je     c0008c91 <src_callback_new+0x5c>
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	50                   	push   eax
c0008c78:	e8 de fe ff ff       	call   c0008b5b <src_reset>
c0008c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c81:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c88:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	89 d8                	mov    eax,ebx
c0008c93:	5a                   	pop    edx
c0008c94:	5b                   	pop    ebx
c0008c95:	5e                   	pop    esi
c0008c96:	c3                   	ret    

c0008c97 <src_get_name>:
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 14             	sub    esp,0x14
c0008c9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c9f:	53                   	push   ebx
c0008ca0:	e8 d0 4f 00 00       	call   c000dc75 <sinc_get_name>
c0008ca5:	83 c4 10             	add    esp,0x10
c0008ca8:	85 c0                	test   eax,eax
c0008caa:	75 1d                	jne    c0008cc9 <src_get_name+0x32>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	53                   	push   ebx
c0008cb0:	e8 80 57 00 00       	call   c000e435 <zoh_get_name>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 0d                	jne    c0008cc9 <src_get_name+0x32>
c0008cbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	e9 74 0b 00 00       	jmp    c000983d <linear_get_name>
c0008cc9:	83 c4 08             	add    esp,0x8
c0008ccc:	5b                   	pop    ebx
c0008ccd:	c3                   	ret    

c0008cce <src_get_description>:
c0008cce:	53                   	push   ebx
c0008ccf:	83 ec 14             	sub    esp,0x14
c0008cd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd6:	53                   	push   ebx
c0008cd7:	e8 ac 4f 00 00       	call   c000dc88 <sinc_get_description>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	85 c0                	test   eax,eax
c0008ce1:	75 1d                	jne    c0008d00 <src_get_description+0x32>
c0008ce3:	83 ec 0c             	sub    esp,0xc
c0008ce6:	53                   	push   ebx
c0008ce7:	e8 58 57 00 00       	call   c000e444 <zoh_get_description>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	85 c0                	test   eax,eax
c0008cf1:	75 0d                	jne    c0008d00 <src_get_description+0x32>
c0008cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf7:	83 c4 08             	add    esp,0x8
c0008cfa:	5b                   	pop    ebx
c0008cfb:	e9 4c 0b 00 00       	jmp    c000984c <linear_get_description>
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	c3                   	ret    

c0008d05 <src_get_version>:
c0008d05:	b8 a0 a1 02 c0       	mov    eax,0xc002a1a0
c0008d0a:	c3                   	ret    

c0008d0b <src_is_valid_ratio>:
c0008d0b:	83 ec 1c             	sub    esp,0x1c
c0008d0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	68 00 00 70 3f       	push   0x3f700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 45 ff 01 00       	call   c0028c77 <__ltdf2>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	85 c0                	test   eax,eax
c0008d39:	78 1e                	js     c0008d59 <src_is_valid_ratio+0x4e>
c0008d3b:	68 00 00 70 40       	push   0x40700000
c0008d40:	6a 00                	push   0x0
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 0a ff 01 00       	call   c0028c59 <__gtdf2>
c0008d4f:	31 d2                	xor    edx,edx
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	0f 9e c2             	setle  dl
c0008d59:	89 d0                	mov    eax,edx
c0008d5b:	83 c4 1c             	add    esp,0x1c
c0008d5e:	c3                   	ret    

c0008d5f <src_error>:
c0008d5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 03                	je     c0008d6c <src_error+0xd>
c0008d69:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6c:	c3                   	ret    

c0008d6d <src_strerror>:
c0008d6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d71:	31 c0                	xor    eax,eax
c0008d73:	83 fa 17             	cmp    edx,0x17
c0008d76:	77 07                	ja     c0008d7f <src_strerror+0x12>
c0008d78:	8b 04 95 00 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5a00]
c0008d7f:	c3                   	ret    

c0008d80 <src_simple>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	83 ec 18             	sub    esp,0x18
c0008d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8d:	50                   	push   eax
c0008d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d96:	e8 0c fe ff ff       	call   c0008ba7 <src_new>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	85 c0                	test   eax,eax
c0008da0:	75 06                	jne    c0008da8 <src_simple+0x28>
c0008da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da6:	eb 25                	jmp    c0008dcd <src_simple+0x4d>
c0008da8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008daf:	89 c3                	mov    ebx,eax
c0008db1:	50                   	push   eax
c0008db2:	50                   	push   eax
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	e8 e2 f9 ff ff       	call   c000879c <src_process>
c0008dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc1:	e8 9a f9 ff ff       	call   c0008760 <src_delete>
c0008dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	83 c4 14             	add    esp,0x14
c0008dd0:	5b                   	pop    ebx
c0008dd1:	5e                   	pop    esi
c0008dd2:	c3                   	ret    

c0008dd3 <src_short_to_float_array>:
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 18             	sub    esp,0x18
c0008dd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddb:	85 db                	test   ebx,ebx
c0008ddd:	74 54                	je     c0008e33 <src_short_to_float_array+0x60>
c0008ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de3:	4b                   	dec    ebx
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008deb:	50                   	push   eax
c0008dec:	e8 1a fc 01 00       	call   c0028a0b <__floatsidf>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfc:	68 00 00 00 3f       	push   0x3f000000
c0008e01:	6a 00                	push   0x0
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0b:	e8 98 f5 01 00       	call   c00283a8 <__muldf3>
c0008e10:	59                   	pop    ecx
c0008e11:	59                   	pop    ecx
c0008e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e22:	e8 54 fe 01 00       	call   c0028c7b <__truncdfsf2>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e2e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e31:	eb a8                	jmp    c0008ddb <src_short_to_float_array+0x8>
c0008e33:	83 c4 18             	add    esp,0x18
c0008e36:	5b                   	pop    ebx
c0008e37:	c3                   	ret    

c0008e38 <src_float_to_short_array>:
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 14             	sub    esp,0x14
c0008e3d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e45:	85 db                	test   ebx,ebx
c0008e47:	0f 84 a4 00 00 00    	je     c0008ef1 <src_float_to_short_array+0xb9>
c0008e4d:	83 ec 0c             	sub    esp,0xc
c0008e50:	4b                   	dec    ebx
c0008e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e58:	e8 42 ff 01 00       	call   c0028d9f <__extendsfdf2>
c0008e5d:	83 c4 10             	add    esp,0x10
c0008e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e68:	68 00 00 e0 41       	push   0x41e00000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e77:	e8 2c f5 01 00       	call   c00283a8 <__muldf3>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 ff ff df 41       	push   0x41dfffff
c0008e8c:	68 00 00 c0 ff       	push   0xffc00000
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e99:	e8 d7 fd 01 00       	call   c0028c75 <__gedf2>
c0008e9e:	83 c4 10             	add    esp,0x10
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	78 08                	js     c0008ead <src_float_to_short_array+0x75>
c0008ea5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eab:	eb 98                	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ead:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb2:	6a 00                	push   0x0
c0008eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	e8 b8 fd 01 00       	call   c0028c79 <__ledf2>
c0008ec1:	83 c4 10             	add    esp,0x10
c0008ec4:	85 c0                	test   eax,eax
c0008ec6:	7f 0b                	jg     c0008ed3 <src_float_to_short_array+0x9b>
c0008ec8:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ece:	e9 72 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ed3:	50                   	push   eax
c0008ed4:	50                   	push   eax
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 4e ff 01 00       	call   c0028e30 <lrint>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	c1 f8 10             	sar    eax,0x10
c0008ee8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eec:	e9 54 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ef1:	83 c4 14             	add    esp,0x14
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	c3                   	ret    

c0008ef7 <src_int_to_float_array>:
c0008ef7:	53                   	push   ebx
c0008ef8:	83 ec 18             	sub    esp,0x18
c0008efb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008eff:	85 db                	test   ebx,ebx
c0008f01:	74 52                	je     c0008f55 <src_int_to_float_array+0x5e>
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	4b                   	dec    ebx
c0008f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f0e:	e8 f8 fa 01 00       	call   c0028a0b <__floatsidf>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f1e:	68 00 00 00 3e       	push   0x3e000000
c0008f23:	6a 00                	push   0x0
c0008f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	e8 76 f4 01 00       	call   c00283a8 <__muldf3>
c0008f32:	59                   	pop    ecx
c0008f33:	59                   	pop    ecx
c0008f34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f44:	e8 32 fd 01 00       	call   c0028c7b <__truncdfsf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f50:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f53:	eb aa                	jmp    c0008eff <src_int_to_float_array+0x8>
c0008f55:	83 c4 18             	add    esp,0x18
c0008f58:	5b                   	pop    ebx
c0008f59:	c3                   	ret    

c0008f5a <src_float_to_int_array>:
c0008f5a:	56                   	push   esi
c0008f5b:	53                   	push   ebx
c0008f5c:	83 ec 14             	sub    esp,0x14
c0008f5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f63:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f67:	85 db                	test   ebx,ebx
c0008f69:	0f 84 a2 00 00 00    	je     c0009011 <src_float_to_int_array+0xb7>
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	4b                   	dec    ebx
c0008f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7a:	e8 20 fe 01 00       	call   c0028d9f <__extendsfdf2>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8a:	68 00 00 e0 41       	push   0x41e00000
c0008f8f:	6a 00                	push   0x0
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	e8 0a f4 01 00       	call   c00283a8 <__muldf3>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa9:	68 ff ff df 41       	push   0x41dfffff
c0008fae:	68 00 00 c0 ff       	push   0xffc00000
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	e8 b5 fc 01 00       	call   c0028c75 <__gedf2>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	85 c0                	test   eax,eax
c0008fc5:	78 09                	js     c0008fd0 <src_float_to_int_array+0x76>
c0008fc7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fce:	eb 97                	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008fd0:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd5:	6a 00                	push   0x0
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdf:	e8 95 fc 01 00       	call   c0028c79 <__ledf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	7f 0c                	jg     c0008ff7 <src_float_to_int_array+0x9d>
c0008feb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff2:	e9 70 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008ff7:	50                   	push   eax
c0008ff8:	50                   	push   eax
c0008ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009001:	e8 2a fe 01 00       	call   c0028e30 <lrint>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900c:	e9 56 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0009011:	83 c4 14             	add    esp,0x14
c0009014:	5b                   	pop    ebx
c0009015:	5e                   	pop    esi
c0009016:	c3                   	ret    

c0009017 <linear_vari_process>:
c0009017:	55                   	push   ebp
c0009018:	31 d2                	xor    edx,edx
c000901a:	57                   	push   edi
c000901b:	56                   	push   esi
c000901c:	53                   	push   ebx
c000901d:	83 ec 3c             	sub    esp,0x3c
c0009020:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009024:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009028:	0f 8e d3 07 00 00    	jle    c0009801 <linear_vari_process+0x7ea>
c000902e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009032:	ba 05 00 00 00       	mov    edx,0x5
c0009037:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903a:	85 db                	test   ebx,ebx
c000903c:	0f 84 bf 07 00 00    	je     c0009801 <linear_vari_process+0x7ea>
c0009042:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009045:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009049:	74 19                	je     c0009064 <linear_vari_process+0x4d>
c000904b:	31 d2                	xor    edx,edx
c000904d:	39 c2                	cmp    edx,eax
c000904f:	7d 0c                	jge    c000905d <linear_vari_process+0x46>
c0009051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009053:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009056:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905a:	42                   	inc    edx
c000905b:	eb f0                	jmp    c000904d <linear_vari_process+0x36>
c000905d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009064:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009067:	0f af d0             	imul   edx,eax
c000906a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009071:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009078:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009082:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009086:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009089:	8b 00                	mov    eax,DWORD PTR [eax]
c000908b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	68 00 00 70 3f       	push   0x3f700000
c0009098:	6a 00                	push   0x0
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a2:	e8 d0 fb 01 00       	call   c0028c77 <__ltdf2>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	ba 16 00 00 00       	mov    edx,0x16
c00090af:	85 c0                	test   eax,eax
c00090b1:	0f 88 4a 07 00 00    	js     c0009801 <linear_vari_process+0x7ea>
c00090b7:	68 00 00 70 40       	push   0x40700000
c00090bc:	6a 00                	push   0x0
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 8e fb 01 00       	call   c0028c59 <__gtdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	ba 16 00 00 00       	mov    edx,0x16
c00090d3:	85 c0                	test   eax,eax
c00090d5:	0f 8f 26 07 00 00    	jg     c0009801 <linear_vari_process+0x7ea>
c00090db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ed:	68 00 00 f0 3f       	push   0x3ff00000
c00090f2:	6a 00                	push   0x0
c00090f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	e8 76 fb 01 00       	call   c0028c77 <__ltdf2>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	85 c0                	test   eax,eax
c0009106:	0f 89 89 02 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c000910c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000910f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009112:	0f 8d 7d 02 00 00    	jge    c0009395 <linear_vari_process+0x37e>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 e8 f8 01 00       	call   c0028a0b <__floatsidf>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	89 04 24             	mov    DWORD PTR [esp],eax
c0009129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912d:	68 00 00 f0 3f       	push   0x3ff00000
c0009132:	6a 00                	push   0x0
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913c:	e8 ea eb 01 00       	call   c0027d2b <__adddf3>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914c:	52                   	push   edx
c000914d:	50                   	push   eax
c000914e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	e8 4d f2 01 00       	call   c00283a8 <__muldf3>
c000915b:	5d                   	pop    ebp
c000915c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009160:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009164:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009167:	e8 9f f8 01 00       	call   c0028a0b <__floatsidf>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009177:	52                   	push   edx
c0009178:	50                   	push   eax
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	e8 a5 eb 01 00       	call   c0027d2b <__adddf3>
c0009186:	59                   	pop    ecx
c0009187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000918f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009192:	e8 74 f8 01 00       	call   c0028a0b <__floatsidf>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a2:	52                   	push   edx
c00091a3:	50                   	push   eax
c00091a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ac:	e8 c4 fa 01 00       	call   c0028c75 <__gedf2>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	85 c0                	test   eax,eax
c00091b6:	0f 89 d9 01 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c00091bc:	85 ff                	test   edi,edi
c00091be:	0f 8e f4 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c00091c4:	83 ec 10             	sub    esp,0x10
c00091c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d4:	ff 30                	push   DWORD PTR [eax]
c00091d6:	e8 a1 f1 01 00       	call   c002837c <__subdf3>
c00091db:	83 c4 18             	add    esp,0x18
c00091de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e6:	52                   	push   edx
c00091e7:	50                   	push   eax
c00091e8:	e8 23 fc 01 00       	call   c0028e10 <fabs>
c00091ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091fd:	68 23 42 92 0c       	push   0xc924223
c0009202:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920a:	e8 4a fa 01 00       	call   c0028c59 <__gtdf2>
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	85 c0                	test   eax,eax
c0009214:	0f 8e 9e 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c000921a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000921e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009221:	8b 00                	mov    eax,DWORD PTR [eax]
c0009223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009227:	89 04 24             	mov    DWORD PTR [esp],eax
c000922a:	52                   	push   edx
c000922b:	50                   	push   eax
c000922c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000922f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009232:	e8 45 f1 01 00       	call   c002837c <__subdf3>
c0009237:	59                   	pop    ecx
c0009238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009243:	e8 c3 f7 01 00       	call   c0028a0b <__floatsidf>
c0009248:	83 c4 10             	add    esp,0x10
c000924b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 46 f1 01 00       	call   c00283a8 <__muldf3>
c0009262:	5f                   	pop    edi
c0009263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009267:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000926e:	e8 98 f7 01 00       	call   c0028a0b <__floatsidf>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927e:	52                   	push   edx
c000927f:	50                   	push   eax
c0009280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 ff f3 01 00       	call   c002868c <__divdf3>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a8:	e8 7e ea 01 00       	call   c0027d2b <__adddf3>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b8:	31 ff                	xor    edi,edi
c00092ba:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bd:	0f 8e 9d 00 00 00    	jle    c0009360 <linear_vari_process+0x349>
c00092c3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c6:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d6:	52                   	push   edx
c00092d7:	52                   	push   edx
c00092d8:	55                   	push   ebp
c00092d9:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092dc:	47                   	inc    edi
c00092dd:	e8 de e3 01 00       	call   c00276c0 <__subsf3>
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 b5 fa 01 00       	call   c0028d9f <__extendsfdf2>
c00092ea:	83 c4 10             	add    esp,0x10
c00092ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 9e f0 01 00       	call   c00283a8 <__muldf3>
c000930a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009315:	e8 85 fa 01 00       	call   c0028d9f <__extendsfdf2>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009325:	52                   	push   edx
c0009326:	50                   	push   eax
c0009327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932f:	e8 f7 e9 01 00       	call   c0027d2b <__adddf3>
c0009334:	59                   	pop    ecx
c0009335:	5d                   	pop    ebp
c0009336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000933e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009342:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009346:	e8 30 f9 01 00       	call   c0028c7b <__truncdfsf2>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009355:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009358:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935b:	e9 5a ff ff ff       	jmp    c00092ba <linear_vari_process+0x2a3>
c0009360:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009368:	68 00 00 f0 3f       	push   0x3ff00000
c000936d:	6a 00                	push   0x0
c000936f:	e8 18 f3 01 00       	call   c002868c <__divdf3>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	89 04 24             	mov    DWORD PTR [esp],eax
c000937a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009388:	e8 9e e9 01 00       	call   c0027d2b <__adddf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	e9 50 fd ff ff       	jmp    c00090e5 <linear_vari_process+0xce>
c0009395:	50                   	push   eax
c0009396:	50                   	push   eax
c0009397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939f:	e8 8c fa 01 00       	call   c0028e30 <lrint>
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	50                   	push   eax
c00093a8:	e8 5e f6 01 00       	call   c0028a0b <__floatsidf>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	52                   	push   edx
c00093b9:	50                   	push   eax
c00093ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c2:	e8 b5 ef 01 00       	call   c002837c <__subdf3>
c00093c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093cf:	83 c4 20             	add    esp,0x20
c00093d2:	6a 00                	push   0x0
c00093d4:	6a 00                	push   0x0
c00093d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093de:	e8 94 f8 01 00       	call   c0028c77 <__ltdf2>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	85 c0                	test   eax,eax
c00093e8:	79 1e                	jns    c0009408 <linear_vari_process+0x3f1>
c00093ea:	68 00 00 f0 3f       	push   0x3ff00000
c00093ef:	6a 00                	push   0x0
c00093f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f9:	e8 2d e9 01 00       	call   c0027d2b <__adddf3>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	89 04 24             	mov    DWORD PTR [esp],eax
c0009404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009408:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940b:	83 ec 10             	sub    esp,0x10
c000940e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	e8 59 ef 01 00       	call   c002837c <__subdf3>
c0009423:	83 c4 18             	add    esp,0x18
c0009426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000942e:	52                   	push   edx
c000942f:	50                   	push   eax
c0009430:	e8 fb f9 01 00       	call   c0028e30 <lrint>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	0f af f8             	imul   edi,eax
c000943b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000943e:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009441:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009444:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009447:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944a:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000944e:	0f 8d 13 03 00 00    	jge    c0009767 <linear_vari_process+0x750>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945a:	e8 ac f5 01 00       	call   c0028a0b <__floatsidf>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	e8 29 ef 01 00       	call   c00283a8 <__muldf3>
c000947f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948a:	e8 7c f5 01 00       	call   c0028a0b <__floatsidf>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	52                   	push   edx
c000949b:	50                   	push   eax
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	e8 82 e8 01 00       	call   c0027d2b <__adddf3>
c00094a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b4:	e8 52 f5 01 00       	call   c0028a0b <__floatsidf>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c4:	52                   	push   edx
c00094c5:	50                   	push   eax
c00094c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	e8 a4 f7 01 00       	call   c0028c77 <__ltdf2>
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094dc:	0f 89 85 02 00 00    	jns    c0009767 <linear_vari_process+0x750>
c00094e2:	85 c9                	test   ecx,ecx
c00094e4:	0f 8e f5 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c00094ea:	83 ec 10             	sub    esp,0x10
c00094ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fa:	ff 30                	push   DWORD PTR [eax]
c00094fc:	e8 7b ee 01 00       	call   c002837c <__subdf3>
c0009501:	83 c4 18             	add    esp,0x18
c0009504:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009508:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950c:	52                   	push   edx
c000950d:	50                   	push   eax
c000950e:	e8 fd f8 01 00       	call   c0028e10 <fabs>
c0009513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009517:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009523:	68 23 42 92 0c       	push   0xc924223
c0009528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	e8 24 f7 01 00       	call   c0028c59 <__gtdf2>
c0009535:	83 c4 10             	add    esp,0x10
c0009538:	85 c0                	test   eax,eax
c000953a:	0f 8e 9f 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c0009540:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009544:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009547:	8b 00                	mov    eax,DWORD PTR [eax]
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009551:	52                   	push   edx
c0009552:	50                   	push   eax
c0009553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009559:	e8 1e ee 01 00       	call   c002837c <__subdf3>
c000955e:	5f                   	pop    edi
c000955f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009563:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009567:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956a:	e8 9c f4 01 00       	call   c0028a0b <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	e8 1f ee 01 00       	call   c00283a8 <__muldf3>
c0009589:	5d                   	pop    ebp
c000958a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000958e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009592:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009595:	e8 71 f4 01 00       	call   c0028a0b <__floatsidf>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a5:	52                   	push   edx
c00095a6:	50                   	push   eax
c00095a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095af:	e8 d8 f0 01 00       	call   c002868c <__divdf3>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cf:	e8 57 e7 01 00       	call   c0027d2b <__adddf3>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095df:	31 ff                	xor    edi,edi
c00095e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e4:	39 f8                	cmp    eax,edi
c00095e6:	0f 8e ac 00 00 00    	jle    c0009698 <linear_vari_process+0x681>
c00095ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f1:	29 c1                	sub    ecx,eax
c00095f3:	89 c8                	mov    eax,ecx
c00095f5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f8:	01 f8                	add    eax,edi
c00095fa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960b:	51                   	push   ecx
c000960c:	01 f8                	add    eax,edi
c000960e:	51                   	push   ecx
c000960f:	47                   	inc    edi
c0009610:	55                   	push   ebp
c0009611:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009614:	e8 a7 e0 01 00       	call   c00276c0 <__subsf3>
c0009619:	89 04 24             	mov    DWORD PTR [esp],eax
c000961c:	e8 7e f7 01 00       	call   c0028d9f <__extendsfdf2>
c0009621:	83 c4 10             	add    esp,0x10
c0009624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009628:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009630:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	e8 67 ed 01 00       	call   c00283a8 <__muldf3>
c0009641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964c:	e8 4e f7 01 00       	call   c0028d9f <__extendsfdf2>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009658:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965c:	52                   	push   edx
c000965d:	50                   	push   eax
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009666:	e8 c0 e6 01 00       	call   c0027d2b <__adddf3>
c000966b:	5d                   	pop    ebp
c000966c:	59                   	pop    ecx
c000966d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009671:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967d:	e8 f9 f5 01 00       	call   c0028c7b <__truncdfsf2>
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009690:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009693:	e9 49 ff ff ff       	jmp    c00095e1 <linear_vari_process+0x5ca>
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	68 00 00 f0 3f       	push   0x3ff00000
c00096a5:	6a 00                	push   0x0
c00096a7:	e8 e0 ef 01 00       	call   c002868c <__divdf3>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 5f e6 01 00       	call   c0027d2b <__adddf3>
c00096cc:	59                   	pop    ecx
c00096cd:	5f                   	pop    edi
c00096ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096de:	e8 4d f7 01 00       	call   c0028e30 <lrint>
c00096e3:	83 ec 0c             	sub    esp,0xc
c00096e6:	50                   	push   eax
c00096e7:	e8 1f f3 01 00       	call   c0028a0b <__floatsidf>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f7:	52                   	push   edx
c00096f8:	50                   	push   eax
c00096f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009701:	e8 76 ec 01 00       	call   c002837c <__subdf3>
c0009706:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000970e:	83 c4 20             	add    esp,0x20
c0009711:	6a 00                	push   0x0
c0009713:	6a 00                	push   0x0
c0009715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971d:	e8 55 f5 01 00       	call   c0028c77 <__ltdf2>
c0009722:	83 c4 10             	add    esp,0x10
c0009725:	85 c0                	test   eax,eax
c0009727:	79 1e                	jns    c0009747 <linear_vari_process+0x730>
c0009729:	68 00 00 f0 3f       	push   0x3ff00000
c000972e:	6a 00                	push   0x0
c0009730:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009734:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009738:	e8 ee e5 01 00       	call   c0027d2b <__adddf3>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009747:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974a:	83 ec 10             	sub    esp,0x10
c000974d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009755:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009759:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975d:	e8 1a ec 01 00       	call   c002837c <__subdf3>
c0009762:	e9 bc fc ff ff       	jmp    c0009423 <linear_vari_process+0x40c>
c0009767:	39 fd                	cmp    ebp,edi
c0009769:	7d 38                	jge    c00097a3 <linear_vari_process+0x78c>
c000976b:	83 ec 0c             	sub    esp,0xc
c000976e:	89 f8                	mov    eax,edi
c0009770:	29 e8                	sub    eax,ebp
c0009772:	99                   	cdq    
c0009773:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009776:	50                   	push   eax
c0009777:	e8 8f f2 01 00       	call   c0028a0b <__floatsidf>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009791:	e8 95 e5 01 00       	call   c0027d2b <__adddf3>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979c:	89 04 24             	mov    DWORD PTR [esp],eax
c000979f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ae:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b7:	85 c0                	test   eax,eax
c00097b9:	7f 29                	jg     c00097e4 <linear_vari_process+0x7cd>
c00097bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c7:	89 01                	mov    DWORD PTR [ecx],eax
c00097c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097cf:	99                   	cdq    
c00097d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d9:	99                   	cdq    
c00097da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097dd:	31 d2                	xor    edx,edx
c00097df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e2:	eb 1d                	jmp    c0009801 <linear_vari_process+0x7ea>
c00097e4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e7:	31 d2                	xor    edx,edx
c00097e9:	29 c8                	sub    eax,ecx
c00097eb:	c1 e0 02             	shl    eax,0x2
c00097ee:	39 d1                	cmp    ecx,edx
c00097f0:	7e c9                	jle    c00097bb <linear_vari_process+0x7a4>
c00097f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f4:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f7:	83 c0 04             	add    eax,0x4
c00097fa:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097fe:	42                   	inc    edx
c00097ff:	eb ed                	jmp    c00097ee <linear_vari_process+0x7d7>
c0009801:	83 c4 3c             	add    esp,0x3c
c0009804:	89 d0                	mov    eax,edx
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <linear_reset>:
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009812:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009815:	85 c0                	test   eax,eax
c0009817:	74 20                	je     c0009839 <linear_reset+0x2e>
c0009819:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981c:	83 c0 1c             	add    eax,0x1c
c000981f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009822:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009829:	c1 e2 02             	shl    edx,0x2
c000982c:	51                   	push   ecx
c000982d:	52                   	push   edx
c000982e:	6a 00                	push   0x0
c0009830:	50                   	push   eax
c0009831:	e8 4a 6f ff ff       	call   c0000780 <memset>
c0009836:	83 c4 10             	add    esp,0x10
c0009839:	83 c4 0c             	add    esp,0xc
c000983c:	c3                   	ret    

c000983d <linear_get_name>:
c000983d:	31 c0                	xor    eax,eax
c000983f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009844:	75 05                	jne    c000984b <linear_get_name+0xe>
c0009846:	b8 60 a6 02 c0       	mov    eax,0xc002a660
c000984b:	c3                   	ret    

c000984c <linear_get_description>:
c000984c:	31 c0                	xor    eax,eax
c000984e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009853:	75 05                	jne    c000985a <linear_get_description+0xe>
c0009855:	b8 74 a6 02 c0       	mov    eax,0xc002a674
c000985a:	c3                   	ret    

c000985b <linear_set_converter>:
c000985b:	53                   	push   ebx
c000985c:	b8 0a 00 00 00       	mov    eax,0xa
c0009861:	83 ec 08             	sub    esp,0x8
c0009864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009868:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986d:	75 6e                	jne    c00098dd <linear_set_converter+0x82>
c000986f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009872:	85 c0                	test   eax,eax
c0009874:	74 13                	je     c0009889 <linear_set_converter+0x2e>
c0009876:	83 ec 0c             	sub    esp,0xc
c0009879:	50                   	push   eax
c000987a:	e8 a5 60 00 00       	call   c000f924 <free>
c000987f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009886:	83 c4 10             	add    esp,0x10
c0009889:	50                   	push   eax
c000988a:	50                   	push   eax
c000988b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009895:	50                   	push   eax
c0009896:	6a 01                	push   0x1
c0009898:	e8 a7 60 00 00       	call   c000f944 <calloc>
c000989d:	83 c4 10             	add    esp,0x10
c00098a0:	89 c2                	mov    edx,eax
c00098a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a5:	85 d2                	test   edx,edx
c00098a7:	b8 01 00 00 00       	mov    eax,0x1
c00098ac:	74 2f                	je     c00098dd <linear_set_converter+0x82>
c00098ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b1:	83 ec 0c             	sub    esp,0xc
c00098b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bd:	c7 43 24 17 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009017
c00098c4:	c7 43 20 17 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009017
c00098cb:	c7 43 28 0b 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980b
c00098d2:	53                   	push   ebx
c00098d3:	e8 33 ff ff ff       	call   c000980b <linear_reset>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	31 c0                	xor    eax,eax
c00098dd:	83 c4 08             	add    esp,0x8
c00098e0:	5b                   	pop    ebx
c00098e1:	c3                   	ret    

c00098e2 <int_to_fp>:
c00098e2:	c1 e0 0c             	shl    eax,0xc
c00098e5:	c3                   	ret    

c00098e6 <fp_to_int>:
c00098e6:	c1 f8 0c             	sar    eax,0xc
c00098e9:	c3                   	ret    

c00098ea <fp_fraction_part>:
c00098ea:	25 ff 0f 00 00       	and    eax,0xfff
c00098ef:	c3                   	ret    

c00098f0 <fp_to_double>:
c00098f0:	83 ec 1c             	sub    esp,0x1c
c00098f3:	e8 f2 ff ff ff       	call   c00098ea <fp_fraction_part>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 0a f1 01 00       	call   c0028a0b <__floatsidf>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990c:	68 00 00 30 3f       	push   0x3f300000
c0009911:	6a 00                	push   0x0
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 88 ea 01 00       	call   c00283a8 <__muldf3>
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <calc_output_single>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	89 c6                	mov    esi,eax
c0009929:	53                   	push   ebx
c000992a:	89 d3                	mov    ebx,edx
c000992c:	83 ec 4c             	sub    esp,0x4c
c000992f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009936:	e8 a7 ff ff ff       	call   c00098e2 <int_to_fp>
c000993b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000993e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009942:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009946:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994d:	99                   	cdq    
c000994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009956:	f7 fb                	idiv   ebx
c0009958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009960:	89 da                	mov    edx,ebx
c0009962:	0f af d0             	imul   edx,eax
c0009965:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009971:	29 c2                	sub    edx,eax
c0009973:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997a:	83 c5 04             	add    ebp,0x4
c000997d:	e8 6e ff ff ff       	call   c00098f0 <fp_to_double>
c0009982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000998e:	e8 53 ff ff ff       	call   c00098e6 <fp_to_int>
c0009993:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009996:	52                   	push   edx
c0009997:	52                   	push   edx
c0009998:	51                   	push   ecx
c0009999:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a1:	e8 1a dd 01 00       	call   c00276c0 <__subsf3>
c00099a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a9:	e8 f1 f3 01 00       	call   c0028d9f <__extendsfdf2>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c9:	e8 da e9 01 00       	call   c00283a8 <__muldf3>
c00099ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099dd:	e8 bd f3 01 00       	call   c0028d9f <__extendsfdf2>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ed:	52                   	push   edx
c00099ee:	50                   	push   eax
c00099ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f7:	e8 2f e3 01 00       	call   c0027d2b <__adddf3>
c00099fc:	59                   	pop    ecx
c00099fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a05:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0b:	e8 8f f3 01 00       	call   c0028d9f <__extendsfdf2>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a25:	e8 7e e9 01 00       	call   c00283a8 <__muldf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a35:	52                   	push   edx
c0009a36:	50                   	push   eax
c0009a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3f:	e8 e7 e2 01 00       	call   c0027d2b <__adddf3>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a4f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a53:	0f 89 1d ff ff ff    	jns    c0009976 <calc_output_single+0x52>
c0009a59:	89 d9                	mov    ecx,ebx
c0009a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a5f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a63:	89 dd                	mov    ebp,ebx
c0009a65:	29 c8                	sub    eax,ecx
c0009a67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a6f:	99                   	cdq    
c0009a70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a78:	f7 fb                	idiv   ebx
c0009a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a7e:	0f af e8             	imul   ebp,eax
c0009a81:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a85:	01 cd                	add    ebp,ecx
c0009a87:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8a:	89 e8                	mov    eax,ebp
c0009a8c:	83 ee 04             	sub    esi,0x4
c0009a8f:	e8 5c fe ff ff       	call   c00098f0 <fp_to_double>
c0009a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	29 dd                	sub    ebp,ebx
c0009aa0:	e8 41 fe ff ff       	call   c00098e6 <fp_to_int>
c0009aa5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa8:	52                   	push   edx
c0009aa9:	52                   	push   edx
c0009aaa:	51                   	push   ecx
c0009aab:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aaf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab3:	e8 08 dc 01 00       	call   c00276c0 <__subsf3>
c0009ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abb:	e8 df f2 01 00       	call   c0028d9f <__extendsfdf2>
c0009ac0:	83 c4 10             	add    esp,0x10
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adb:	e8 c8 e8 01 00       	call   c00283a8 <__muldf3>
c0009ae0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aef:	e8 ab f2 01 00       	call   c0028d9f <__extendsfdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aff:	52                   	push   edx
c0009b00:	50                   	push   eax
c0009b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b09:	e8 1d e2 01 00       	call   c0027d2b <__adddf3>
c0009b0e:	59                   	pop    ecx
c0009b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b17:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1d:	e8 7d f2 01 00       	call   c0028d9f <__extendsfdf2>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b37:	e8 6c e8 01 00       	call   c00283a8 <__muldf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b47:	52                   	push   edx
c0009b48:	50                   	push   eax
c0009b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b51:	e8 d5 e1 01 00       	call   c0027d2b <__adddf3>
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	85 ed                	test   ebp,ebp
c0009b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b63:	0f 8f 21 ff ff ff    	jg     c0009a8a <calc_output_single+0x166>
c0009b69:	52                   	push   edx
c0009b6a:	50                   	push   eax
c0009b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b73:	e8 b3 e1 01 00       	call   c0027d2b <__adddf3>
c0009b78:	83 c4 5c             	add    esp,0x5c
c0009b7b:	5b                   	pop    ebx
c0009b7c:	5e                   	pop    esi
c0009b7d:	5f                   	pop    edi
c0009b7e:	5d                   	pop    ebp
c0009b7f:	c3                   	ret    

c0009b80 <calc_output_stereo>:
c0009b80:	55                   	push   ebp
c0009b81:	89 cd                	mov    ebp,ecx
c0009b83:	57                   	push   edi
c0009b84:	56                   	push   esi
c0009b85:	53                   	push   ebx
c0009b86:	89 c3                	mov    ebx,eax
c0009b88:	83 ec 6c             	sub    esp,0x6c
c0009b8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba8:	e8 35 fd ff ff       	call   c00098e2 <int_to_fp>
c0009bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc1:	29 c8                	sub    eax,ecx
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bcc:	0f af d0             	imul   edx,eax
c0009bcf:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd2:	31 d2                	xor    edx,edx
c0009bd4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bdc:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bdf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bee:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf1:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf6:	29 c1                	sub    ecx,eax
c0009bf8:	31 c0                	xor    eax,eax
c0009bfa:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c05:	83 c7 08             	add    edi,0x8
c0009c08:	e8 e3 fc ff ff       	call   c00098f0 <fp_to_double>
c0009c0d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c19:	e8 c8 fc ff ff       	call   c00098e6 <fp_to_int>
c0009c1e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c21:	52                   	push   edx
c0009c22:	52                   	push   edx
c0009c23:	51                   	push   ecx
c0009c24:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2c:	e8 8f da 01 00       	call   c00276c0 <__subsf3>
c0009c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c34:	e8 66 f1 01 00       	call   c0028d9f <__extendsfdf2>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c54:	e8 4f e7 01 00       	call   c00283a8 <__muldf3>
c0009c59:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c64:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c68:	e8 32 f1 01 00       	call   c0028d9f <__extendsfdf2>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c74:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c78:	52                   	push   edx
c0009c79:	50                   	push   eax
c0009c7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c82:	e8 a4 e0 01 00       	call   c0027d2b <__adddf3>
c0009c87:	59                   	pop    ecx
c0009c88:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c90:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c96:	e8 04 f1 01 00       	call   c0028d9f <__extendsfdf2>
c0009c9b:	83 c4 10             	add    esp,0x10
c0009c9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009caa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb6:	e8 ed e6 01 00       	call   c00283a8 <__muldf3>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc6:	52                   	push   edx
c0009cc7:	50                   	push   eax
c0009cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd0:	e8 56 e0 01 00       	call   c0027d2b <__adddf3>
c0009cd5:	59                   	pop    ecx
c0009cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cda:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cde:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce4:	e8 b6 f0 01 00       	call   c0028d9f <__extendsfdf2>
c0009ce9:	83 c4 10             	add    esp,0x10
c0009cec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d04:	e8 9f e6 01 00       	call   c00283a8 <__muldf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d10:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d14:	52                   	push   edx
c0009d15:	50                   	push   eax
c0009d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1e:	e8 08 e0 01 00       	call   c0027d2b <__adddf3>
c0009d23:	83 c4 10             	add    esp,0x10
c0009d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d2e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d32:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d36:	0f 89 c5 fe ff ff    	jns    c0009c01 <calc_output_stereo+0x81>
c0009d3c:	29 e9                	sub    ecx,ebp
c0009d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d46:	29 c8                	sub    eax,ecx
c0009d48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d50:	99                   	cdq    
c0009d51:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d55:	31 d2                	xor    edx,edx
c0009d57:	0f af f8             	imul   edi,eax
c0009d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d5e:	40                   	inc    eax
c0009d5f:	01 cf                	add    edi,ecx
c0009d61:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d66:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d72:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7b:	89 f8                	mov    eax,edi
c0009d7d:	83 eb 08             	sub    ebx,0x8
c0009d80:	e8 6b fb ff ff       	call   c00098f0 <fp_to_double>
c0009d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8d:	89 f8                	mov    eax,edi
c0009d8f:	e8 52 fb ff ff       	call   c00098e6 <fp_to_int>
c0009d94:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d97:	52                   	push   edx
c0009d98:	52                   	push   edx
c0009d99:	55                   	push   ebp
c0009d9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d9e:	e8 1d d9 01 00       	call   c00276c0 <__subsf3>
c0009da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da6:	e8 f4 ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc6:	e8 dd e5 01 00       	call   c00283a8 <__muldf3>
c0009dcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd6:	e8 c4 ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de6:	52                   	push   edx
c0009de7:	50                   	push   eax
c0009de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df0:	e8 36 df 01 00       	call   c0027d2b <__adddf3>
c0009df5:	59                   	pop    ecx
c0009df6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfa:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dfe:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e04:	e8 96 ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009e09:	83 c4 10             	add    esp,0x10
c0009e0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e24:	e8 7f e5 01 00       	call   c00283a8 <__muldf3>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e34:	52                   	push   edx
c0009e35:	50                   	push   eax
c0009e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3e:	e8 e8 de 01 00       	call   c0027d2b <__adddf3>
c0009e43:	5d                   	pop    ebp
c0009e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e52:	e8 48 ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e72:	e8 31 e5 01 00       	call   c00283a8 <__muldf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e82:	52                   	push   edx
c0009e83:	50                   	push   eax
c0009e84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8c:	e8 9a de 01 00       	call   c0027d2b <__adddf3>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea0:	85 ff                	test   edi,edi
c0009ea2:	0f 8f d3 fe ff ff    	jg     c0009d7b <calc_output_stereo+0x1fb>
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	e8 6e de 01 00       	call   c0027d2b <__adddf3>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed8:	e8 cb e4 01 00       	call   c00283a8 <__muldf3>
c0009edd:	59                   	pop    ecx
c0009ede:	5b                   	pop    ebx
c0009edf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eef:	e8 87 ed 01 00       	call   c0028c7b <__truncdfsf2>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009efe:	89 03                	mov    DWORD PTR [ebx],eax
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	e8 16 de 01 00       	call   c0027d2b <__adddf3>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f30:	e8 73 e4 01 00       	call   c00283a8 <__muldf3>
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f47:	e8 2f ed 01 00       	call   c0028c7b <__truncdfsf2>
c0009f4c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f53:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f56:	83 c4 7c             	add    esp,0x7c
c0009f59:	5b                   	pop    ebx
c0009f5a:	5e                   	pop    esi
c0009f5b:	5f                   	pop    edi
c0009f5c:	5d                   	pop    ebp
c0009f5d:	c3                   	ret    

c0009f5e <calc_output_quad>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	89 c6                	mov    esi,eax
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 7c             	sub    esp,0x7c
c0009f67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f6f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f76:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f88:	e8 55 f9 ff ff       	call   c00098e2 <int_to_fp>
c0009f8d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f90:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f93:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f9f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa3:	99                   	cdq    
c0009fa4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fac:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009faf:	31 d2                	xor    edx,edx
c0009fb1:	0f af d8             	imul   ebx,eax
c0009fb4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbc:	0f af c7             	imul   eax,edi
c0009fbf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc3:	29 c1                	sub    ecx,eax
c0009fc5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcd:	31 c0                	xor    eax,eax
c0009fcf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fea:	89 d8                	mov    eax,ebx
c0009fec:	83 c7 10             	add    edi,0x10
c0009fef:	e8 fc f8 ff ff       	call   c00098f0 <fp_to_double>
c0009ff4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffc:	89 d8                	mov    eax,ebx
c0009ffe:	e8 e3 f8 ff ff       	call   c00098e6 <fp_to_int>
c000a003:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a007:	52                   	push   edx
c000a008:	52                   	push   edx
c000a009:	51                   	push   ecx
c000a00a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 a9 d6 01 00       	call   c00276c0 <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 80 ed 01 00       	call   c0028d9f <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 69 e3 01 00       	call   c00283a8 <__muldf3>
c000a03f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a047:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04e:	e8 4c ed 01 00       	call   c0028d9f <__extendsfdf2>
c000a053:	83 c4 10             	add    esp,0x10
c000a056:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05e:	52                   	push   edx
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a068:	e8 be dc 01 00       	call   c0027d2b <__adddf3>
c000a06d:	59                   	pop    ecx
c000a06e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a072:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a076:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07c:	e8 1e ed 01 00       	call   c0028d9f <__extendsfdf2>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a088:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	e8 07 e3 01 00       	call   c00283a8 <__muldf3>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b6:	e8 70 dc 01 00       	call   c0027d2b <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ca:	e8 d0 ec 01 00       	call   c0028d9f <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 b9 e2 01 00       	call   c00283a8 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a104:	e8 22 dc 01 00       	call   c0027d2b <__adddf3>
c000a109:	59                   	pop    ecx
c000a10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a10e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a112:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a118:	e8 82 ec 01 00       	call   c0028d9f <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 6b e2 01 00       	call   c00283a8 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a152:	e8 d4 db 01 00       	call   c0027d2b <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a160:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a166:	e8 34 ec 01 00       	call   c0028d9f <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 1d e2 01 00       	call   c00283a8 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a0:	e8 86 db 01 00       	call   c0027d2b <__adddf3>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b4:	0f 89 30 fe ff ff    	jns    c0009fea <calc_output_quad+0x8c>
c000a1ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d2:	29 c8                	sub    eax,ecx
c000a1d4:	99                   	cdq    
c000a1d5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d9:	31 d2                	xor    edx,edx
c000a1db:	0f af d8             	imul   ebx,eax
c000a1de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e2:	40                   	inc    eax
c000a1e3:	01 cb                	add    ebx,ecx
c000a1e5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ea:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ee:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f6:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a201:	31 c0                	xor    eax,eax
c000a203:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a207:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a20f:	89 d8                	mov    eax,ebx
c000a211:	83 ee 10             	sub    esi,0x10
c000a214:	e8 d7 f6 ff ff       	call   c00098f0 <fp_to_double>
c000a219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a221:	89 d8                	mov    eax,ebx
c000a223:	e8 be f6 ff ff       	call   c00098e6 <fp_to_int>
c000a228:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22c:	52                   	push   edx
c000a22d:	52                   	push   edx
c000a22e:	57                   	push   edi
c000a22f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a233:	e8 88 d4 01 00       	call   c00276c0 <__subsf3>
c000a238:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23b:	e8 5f eb 01 00       	call   c0028d9f <__extendsfdf2>
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a247:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a253:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a257:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25b:	e8 48 e1 01 00       	call   c00283a8 <__muldf3>
c000a260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26b:	e8 2f eb 01 00       	call   c0028d9f <__extendsfdf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a277:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27b:	52                   	push   edx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a285:	e8 a1 da 01 00       	call   c0027d2b <__adddf3>
c000a28a:	59                   	pop    ecx
c000a28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a28f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a293:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a299:	e8 01 eb 01 00       	call   c0028d9f <__extendsfdf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b9:	e8 ea e0 01 00       	call   c00283a8 <__muldf3>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c9:	52                   	push   edx
c000a2ca:	50                   	push   eax
c000a2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d3:	e8 53 da 01 00       	call   c0027d2b <__adddf3>
c000a2d8:	5f                   	pop    edi
c000a2d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e7:	e8 b3 ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a303:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a307:	e8 9c e0 01 00       	call   c00283a8 <__muldf3>
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a313:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a317:	52                   	push   edx
c000a318:	50                   	push   eax
c000a319:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a321:	e8 05 da 01 00       	call   c0027d2b <__adddf3>
c000a326:	59                   	pop    ecx
c000a327:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a32f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a335:	e8 65 ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a341:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a351:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a355:	e8 4e e0 01 00       	call   c00283a8 <__muldf3>
c000a35a:	83 c4 10             	add    esp,0x10
c000a35d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a361:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a365:	52                   	push   edx
c000a366:	50                   	push   eax
c000a367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36f:	e8 b7 d9 01 00       	call   c0027d2b <__adddf3>
c000a374:	5f                   	pop    edi
c000a375:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a379:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a383:	e8 17 ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a38f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a3:	e8 00 e0 01 00       	call   c00283a8 <__muldf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b3:	52                   	push   edx
c000a3b4:	50                   	push   eax
c000a3b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bd:	e8 69 d9 01 00       	call   c0027d2b <__adddf3>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d1:	85 db                	test   ebx,ebx
c000a3d3:	0f 8f 36 fe ff ff    	jg     c000a20f <calc_output_quad+0x2b1>
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	e8 3d d9 01 00       	call   c0027d2b <__adddf3>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	e8 9a df 01 00       	call   c00283a8 <__muldf3>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	e8 56 e8 01 00       	call   c0028c7b <__truncdfsf2>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a42f:	89 06                	mov    DWORD PTR [esi],eax
c000a431:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a435:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a439:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a441:	e8 e5 d8 01 00       	call   c0027d2b <__adddf3>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	e8 42 df 01 00       	call   c00283a8 <__muldf3>
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 fe e7 01 00       	call   c0028c7b <__truncdfsf2>
c000a47d:	83 c4 10             	add    esp,0x10
c000a480:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a487:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49a:	e8 8c d8 01 00       	call   c0027d2b <__adddf3>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	e8 e9 de 01 00       	call   c00283a8 <__muldf3>
c000a4bf:	5d                   	pop    ebp
c000a4c0:	59                   	pop    ecx
c000a4c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 a5 e7 01 00       	call   c0028c7b <__truncdfsf2>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	e8 33 d8 01 00       	call   c0027d2b <__adddf3>
c000a4f8:	83 c4 10             	add    esp,0x10
c000a4fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	e8 90 de 01 00       	call   c00283a8 <__muldf3>
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a51e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52a:	e8 4c e7 01 00       	call   c0028c7b <__truncdfsf2>
c000a52f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a536:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a539:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a53f:	5b                   	pop    ebx
c000a540:	5e                   	pop    esi
c000a541:	5f                   	pop    edi
c000a542:	5d                   	pop    ebp
c000a543:	c3                   	ret    

c000a544 <calc_output_hex>:
c000a544:	55                   	push   ebp
c000a545:	89 cd                	mov    ebp,ecx
c000a547:	57                   	push   edi
c000a548:	56                   	push   esi
c000a549:	53                   	push   ebx
c000a54a:	89 c3                	mov    ebx,eax
c000a54c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a552:	89 14 24             	mov    DWORD PTR [esp],edx
c000a555:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a56e:	e8 6f f3 ff ff       	call   c00098e2 <int_to_fp>
c000a573:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57d:	29 c8                	sub    eax,ecx
c000a57f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a583:	99                   	cdq    
c000a584:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a58f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a597:	0f af f8             	imul   edi,eax
c000a59a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59d:	01 cf                	add    edi,ecx
c000a59f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5aa:	0f af c2             	imul   eax,edx
c000a5ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b1:	29 c1                	sub    ecx,eax
c000a5b3:	31 d2                	xor    edx,edx
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e2:	89 f8                	mov    eax,edi
c000a5e4:	e8 07 f3 ff ff       	call   c00098f0 <fp_to_double>
c000a5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f1:	89 f8                	mov    eax,edi
c000a5f3:	e8 ee f2 ff ff       	call   c00098e6 <fp_to_int>
c000a5f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5ff:	52                   	push   edx
c000a600:	52                   	push   edx
c000a601:	51                   	push   ecx
c000a602:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a606:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a611:	e8 aa d0 01 00       	call   c00276c0 <__subsf3>
c000a616:	89 04 24             	mov    DWORD PTR [esp],eax
c000a619:	e8 81 e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a61e:	83 c4 10             	add    esp,0x10
c000a621:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a625:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	e8 6a dd 01 00       	call   c00283a8 <__muldf3>
c000a63e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a646:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64d:	e8 4d e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a652:	83 c4 10             	add    esp,0x10
c000a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a659:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65d:	52                   	push   edx
c000a65e:	50                   	push   eax
c000a65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a667:	e8 bf d6 01 00       	call   c0027d2b <__adddf3>
c000a66c:	59                   	pop    ecx
c000a66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a671:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a675:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67b:	e8 1f e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a687:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a697:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69b:	e8 08 dd 01 00       	call   c00283a8 <__muldf3>
c000a6a0:	83 c4 10             	add    esp,0x10
c000a6a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ab:	52                   	push   edx
c000a6ac:	50                   	push   eax
c000a6ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b5:	e8 71 d6 01 00       	call   c0027d2b <__adddf3>
c000a6ba:	59                   	pop    ecx
c000a6bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c9:	e8 d1 e6 01 00       	call   c0028d9f <__extendsfdf2>
c000a6ce:	83 c4 10             	add    esp,0x10
c000a6d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e9:	e8 ba dc 01 00       	call   c00283a8 <__muldf3>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f9:	52                   	push   edx
c000a6fa:	50                   	push   eax
c000a6fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a703:	e8 23 d6 01 00       	call   c0027d2b <__adddf3>
c000a708:	59                   	pop    ecx
c000a709:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a711:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a717:	e8 83 e6 01 00       	call   c0028d9f <__extendsfdf2>
c000a71c:	83 c4 10             	add    esp,0x10
c000a71f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a723:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a733:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a737:	e8 6c dc 01 00       	call   c00283a8 <__muldf3>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a743:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a747:	52                   	push   edx
c000a748:	50                   	push   eax
c000a749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a751:	e8 d5 d5 01 00       	call   c0027d2b <__adddf3>
c000a756:	59                   	pop    ecx
c000a757:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a75f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a765:	e8 35 e6 01 00       	call   c0028d9f <__extendsfdf2>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a771:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a781:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a785:	e8 1e dc 01 00       	call   c00283a8 <__muldf3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a791:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79f:	e8 87 d5 01 00       	call   c0027d2b <__adddf3>
c000a7a4:	59                   	pop    ecx
c000a7a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b3:	e8 e7 e5 01 00       	call   c0028d9f <__extendsfdf2>
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d3:	e8 d0 db 01 00       	call   c00283a8 <__muldf3>
c000a7d8:	83 c4 10             	add    esp,0x10
c000a7db:	83 c6 18             	add    esi,0x18
c000a7de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e6:	52                   	push   edx
c000a7e7:	50                   	push   eax
c000a7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f0:	e8 36 d5 01 00       	call   c0027d2b <__adddf3>
c000a7f5:	59                   	pop    ecx
c000a7f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a804:	e8 96 e5 01 00       	call   c0028d9f <__extendsfdf2>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a810:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a820:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a824:	e8 7f db 01 00       	call   c00283a8 <__muldf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a834:	52                   	push   edx
c000a835:	50                   	push   eax
c000a836:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83e:	e8 e8 d4 01 00       	call   c0027d2b <__adddf3>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a84e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a851:	0f 89 8b fd ff ff    	jns    c000a5e2 <calc_output_hex+0x9e>
c000a857:	31 f6                	xor    esi,esi
c000a859:	31 ff                	xor    edi,edi
c000a85b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a85f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a862:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a866:	29 e9                	sub    ecx,ebp
c000a868:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86c:	29 c8                	sub    eax,ecx
c000a86e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a871:	99                   	cdq    
c000a872:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a876:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a879:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87d:	0f af e8             	imul   ebp,eax
c000a880:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a884:	40                   	inc    eax
c000a885:	01 cd                	add    ebp,ecx
c000a887:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a890:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a894:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a898:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a89f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a7:	89 e8                	mov    eax,ebp
c000a8a9:	e8 42 f0 ff ff       	call   c00098f0 <fp_to_double>
c000a8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b6:	89 e8                	mov    eax,ebp
c000a8b8:	e8 29 f0 ff ff       	call   c00098e6 <fp_to_int>
c000a8bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c4:	52                   	push   edx
c000a8c5:	52                   	push   edx
c000a8c6:	51                   	push   ecx
c000a8c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d9:	e8 e2 cd 01 00       	call   c00276c0 <__subsf3>
c000a8de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e1:	e8 b9 e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a901:	e8 a2 da 01 00       	call   c00283a8 <__muldf3>
c000a906:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a911:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a918:	e8 82 e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a924:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a928:	52                   	push   edx
c000a929:	50                   	push   eax
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 f4 d3 01 00       	call   c0027d2b <__adddf3>
c000a937:	59                   	pop    ecx
c000a938:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a940:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a946:	e8 54 e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a952:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a962:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a966:	e8 3d da 01 00       	call   c00283a8 <__muldf3>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a972:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a976:	52                   	push   edx
c000a977:	50                   	push   eax
c000a978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a980:	e8 a6 d3 01 00       	call   c0027d2b <__adddf3>
c000a985:	59                   	pop    ecx
c000a986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a98e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a994:	e8 06 e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b4:	e8 ef d9 01 00       	call   c00283a8 <__muldf3>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ce:	e8 58 d3 01 00       	call   c0027d2b <__adddf3>
c000a9d3:	59                   	pop    ecx
c000a9d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e2:	e8 b8 e3 01 00       	call   c0028d9f <__extendsfdf2>
c000a9e7:	83 c4 10             	add    esp,0x10
c000a9ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa02:	e8 a1 d9 01 00       	call   c00283a8 <__muldf3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa12:	52                   	push   edx
c000aa13:	50                   	push   eax
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1c:	e8 0a d3 01 00       	call   c0027d2b <__adddf3>
c000aa21:	59                   	pop    ecx
c000aa22:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa26:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa30:	e8 6a e3 01 00       	call   c0028d9f <__extendsfdf2>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa48:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa50:	e8 53 d9 01 00       	call   c00283a8 <__muldf3>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa60:	52                   	push   edx
c000aa61:	50                   	push   eax
c000aa62:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa66:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6a:	e8 bc d2 01 00       	call   c0027d2b <__adddf3>
c000aa6f:	59                   	pop    ecx
c000aa70:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa74:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa78:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa7e:	e8 1c e3 01 00       	call   c0028d9f <__extendsfdf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9e:	e8 05 d9 01 00       	call   c00283a8 <__muldf3>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	83 eb 18             	sub    ebx,0x18
c000aaa9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab1:	52                   	push   edx
c000aab2:	50                   	push   eax
c000aab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabb:	e8 6b d2 01 00       	call   c0027d2b <__adddf3>
c000aac0:	59                   	pop    ecx
c000aac1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aacf:	e8 cb e2 01 00       	call   c0028d9f <__extendsfdf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aadf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaeb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaef:	e8 b4 d8 01 00       	call   c00283a8 <__muldf3>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaff:	52                   	push   edx
c000ab00:	50                   	push   eax
c000ab01:	57                   	push   edi
c000ab02:	56                   	push   esi
c000ab03:	e8 23 d2 01 00       	call   c0027d2b <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 c6                	mov    esi,eax
c000ab0d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab10:	89 d7                	mov    edi,edx
c000ab12:	85 ed                	test   ebp,ebp
c000ab14:	0f 8f 8d fd ff ff    	jg     c000a8a7 <calc_output_hex+0x363>
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	e8 fc d1 01 00       	call   c0027d2b <__adddf3>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	e8 5a d8 01 00       	call   c00283a8 <__muldf3>
c000ab4e:	59                   	pop    ecx
c000ab4f:	5b                   	pop    ebx
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab60:	e8 16 e1 01 00       	call   c0028c7b <__truncdfsf2>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ab71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab81:	e8 a5 d1 01 00       	call   c0027d2b <__adddf3>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	e8 03 d8 01 00       	call   c00283a8 <__muldf3>
c000aba5:	5d                   	pop    ebp
c000aba6:	59                   	pop    ecx
c000aba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb7:	e8 bf e0 01 00       	call   c0028c7b <__truncdfsf2>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd9:	e8 4d d1 01 00       	call   c0027d2b <__adddf3>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	e8 ab d7 01 00       	call   c00283a8 <__muldf3>
c000abfd:	5b                   	pop    ebx
c000abfe:	5d                   	pop    ebp
c000abff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0f:	e8 67 e0 01 00       	call   c0028c7b <__truncdfsf2>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac31:	e8 f5 d0 01 00       	call   c0027d2b <__adddf3>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	e8 53 d7 01 00       	call   c00283a8 <__muldf3>
c000ac55:	59                   	pop    ecx
c000ac56:	5b                   	pop    ebx
c000ac57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac67:	e8 0f e0 01 00       	call   c0028c7b <__truncdfsf2>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac76:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac89:	e8 9d d0 01 00       	call   c0027d2b <__adddf3>
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	e8 fb d6 01 00       	call   c00283a8 <__muldf3>
c000acad:	5d                   	pop    ebp
c000acae:	59                   	pop    ecx
c000acaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbf:	e8 b7 df 01 00       	call   c0028c7b <__truncdfsf2>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdb:	e8 4b d0 01 00       	call   c0027d2b <__adddf3>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	e8 a9 d6 01 00       	call   c00283a8 <__muldf3>
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad11:	e8 65 df 01 00       	call   c0028c7b <__truncdfsf2>
c000ad16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad26:	5b                   	pop    ebx
c000ad27:	5e                   	pop    esi
c000ad28:	5f                   	pop    edi
c000ad29:	5d                   	pop    ebp
c000ad2a:	c3                   	ret    

c000ad2b <sinc_reset>:
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	51                   	push   ecx
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad35:	85 db                	test   ebx,ebx
c000ad37:	74 59                	je     c000ad92 <sinc_reset+0x67>
c000ad39:	31 d2                	xor    edx,edx
c000ad3b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad42:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad45:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad48:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad4f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad56:	31 c0                	xor    eax,eax
c000ad58:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad5e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad64:	52                   	push   edx
c000ad65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad68:	c1 e0 02             	shl    eax,0x2
c000ad6b:	50                   	push   eax
c000ad6c:	6a 00                	push   0x0
c000ad6e:	56                   	push   esi
c000ad6f:	e8 0c 5a ff ff       	call   c0000780 <memset>
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7a:	c1 e0 02             	shl    eax,0x2
c000ad7d:	50                   	push   eax
c000ad7e:	68 aa 00 00 00       	push   0xaa
c000ad83:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad86:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad89:	50                   	push   eax
c000ad8a:	e8 f1 59 ff ff       	call   c0000780 <memset>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	58                   	pop    eax
c000ad93:	5b                   	pop    ebx
c000ad94:	5e                   	pop    esi
c000ad95:	c3                   	ret    

c000ad96 <calc_output_multi>:
c000ad96:	55                   	push   ebp
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	89 c6                	mov    esi,eax
c000ad9b:	53                   	push   ebx
c000ad9c:	83 ec 4c             	sub    esp,0x4c
c000ad9f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adab:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adaf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbb:	8d 46 44             	lea    eax,[esi+0x44]
c000adbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adce:	e8 0f eb ff ff       	call   c00098e2 <int_to_fp>
c000add3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adda:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adde:	99                   	cdq    
c000addf:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade7:	0f af d0             	imul   edx,eax
c000adea:	0f af c3             	imul   eax,ebx
c000aded:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf1:	29 c1                	sub    ecx,eax
c000adf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfb:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae06:	57                   	push   edi
c000ae07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae11:	e8 6a 59 ff ff       	call   c0000780 <memset>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1d:	89 df                	mov    edi,ebx
c000ae1f:	e8 cc ea ff ff       	call   c00098f0 <fp_to_double>
c000ae24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae30:	e8 b1 ea ff ff       	call   c00098e6 <fp_to_int>
c000ae35:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae38:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3b:	51                   	push   ecx
c000ae3c:	51                   	push   ecx
c000ae3d:	55                   	push   ebp
c000ae3e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae42:	e8 79 c8 01 00       	call   c00276c0 <__subsf3>
c000ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4a:	e8 50 df 01 00       	call   c0028d9f <__extendsfdf2>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6a:	e8 39 d5 01 00       	call   c00283a8 <__muldf3>
c000ae6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7a:	e8 20 df 01 00       	call   c0028d9f <__extendsfdf2>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8a:	52                   	push   edx
c000ae8b:	50                   	push   eax
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 92 ce 01 00       	call   c0027d2b <__adddf3>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea4:	89 f8                	mov    eax,edi
c000aea6:	b9 08 00 00 00       	mov    ecx,0x8
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	4a                   	dec    edx
c000aeaf:	83 fa 06             	cmp    edx,0x6
c000aeb2:	77 07                	ja     c000aebb <calc_output_multi+0x125>
c000aeb4:	ff 24 95 a4 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd595c]
c000aebb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aebe:	4f                   	dec    edi
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed4:	e8 c6 de 01 00       	call   c0028d9f <__extendsfdf2>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef4:	e8 af d4 01 00       	call   c00283a8 <__muldf3>
c000aef9:	83 c4 10             	add    esp,0x10
c000aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af04:	52                   	push   edx
c000af05:	50                   	push   eax
c000af06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0c:	e8 1a ce 01 00       	call   c0027d2b <__adddf3>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af17:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1d:	4f                   	dec    edi
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af28:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af2f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af33:	e8 67 de 01 00       	call   c0028d9f <__extendsfdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af53:	e8 50 d4 01 00       	call   c00283a8 <__muldf3>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af63:	52                   	push   edx
c000af64:	50                   	push   eax
c000af65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6b:	e8 bb cd 01 00       	call   c0027d2b <__adddf3>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af76:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7c:	4f                   	dec    edi
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af92:	e8 08 de 01 00       	call   c0028d9f <__extendsfdf2>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb2:	e8 f1 d3 01 00       	call   c00283a8 <__muldf3>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc2:	52                   	push   edx
c000afc3:	50                   	push   eax
c000afc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afca:	e8 5c cd 01 00       	call   c0027d2b <__adddf3>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdb:	4f                   	dec    edi
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff1:	e8 a9 dd 01 00       	call   c0028d9f <__extendsfdf2>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000affd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b009:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b011:	e8 92 d3 01 00       	call   c00283a8 <__muldf3>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b021:	52                   	push   edx
c000b022:	50                   	push   eax
c000b023:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b026:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b029:	e8 fd cc 01 00       	call   c0027d2b <__adddf3>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b034:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b037:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03a:	4f                   	dec    edi
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b045:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b050:	e8 4a dd 01 00       	call   c0028d9f <__extendsfdf2>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b068:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b070:	e8 33 d3 01 00       	call   c00283a8 <__muldf3>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b085:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b088:	e8 9e cc 01 00       	call   c0027d2b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b093:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b096:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b099:	4f                   	dec    edi
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0af:	e8 eb dc 01 00       	call   c0028d9f <__extendsfdf2>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cf:	e8 d4 d2 01 00       	call   c00283a8 <__muldf3>
c000b0d4:	83 c4 10             	add    esp,0x10
c000b0d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0df:	52                   	push   edx
c000b0e0:	50                   	push   eax
c000b0e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e7:	e8 3f cc 01 00       	call   c0027d2b <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f8:	4f                   	dec    edi
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b103:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b10e:	e8 8c dc 01 00       	call   c0028d9f <__extendsfdf2>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12e:	e8 75 d2 01 00       	call   c00283a8 <__muldf3>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13e:	52                   	push   edx
c000b13f:	50                   	push   eax
c000b140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b143:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b146:	e8 e0 cb 01 00       	call   c0027d2b <__adddf3>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b151:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b157:	4f                   	dec    edi
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b162:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b169:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16d:	e8 2d dc 01 00       	call   c0028d9f <__extendsfdf2>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b179:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b185:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18d:	e8 16 d2 01 00       	call   c00283a8 <__muldf3>
c000b192:	83 c4 10             	add    esp,0x10
c000b195:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b199:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19d:	52                   	push   edx
c000b19e:	50                   	push   eax
c000b19f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a5:	e8 81 cb 01 00       	call   c0027d2b <__adddf3>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b3:	85 ff                	test   edi,edi
c000b1b5:	0f 8f e9 fc ff ff    	jg     c000aea4 <calc_output_multi+0x10e>
c000b1bb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c7:	0f 89 4c fc ff ff    	jns    c000ae19 <calc_output_multi+0x83>
c000b1cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d5:	29 c8                	sub    eax,ecx
c000b1d7:	99                   	cdq    
c000b1d8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e0:	0f af d0             	imul   edx,eax
c000b1e3:	40                   	inc    eax
c000b1e4:	01 d1                	add    ecx,edx
c000b1e6:	0f af c3             	imul   eax,ebx
c000b1e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ed:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f4:	55                   	push   ebp
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	6a 00                	push   0x0
c000b1fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1ff:	e8 7c 55 ff ff       	call   c0000780 <memset>
c000b204:	83 c4 10             	add    esp,0x10
c000b207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20b:	e8 e0 e6 ff ff       	call   c00098f0 <fp_to_double>
c000b210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21c:	e8 c5 e6 ff ff       	call   c00098e6 <fp_to_int>
c000b221:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b224:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b227:	57                   	push   edi
c000b228:	57                   	push   edi
c000b229:	89 df                	mov    edi,ebx
c000b22b:	55                   	push   ebp
c000b22c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b230:	e8 8b c4 01 00       	call   c00276c0 <__subsf3>
c000b235:	89 04 24             	mov    DWORD PTR [esp],eax
c000b238:	e8 62 db 01 00       	call   c0028d9f <__extendsfdf2>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	e8 4b d1 01 00       	call   c00283a8 <__muldf3>
c000b25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b268:	e8 32 db 01 00       	call   c0028d9f <__extendsfdf2>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b274:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b278:	52                   	push   edx
c000b279:	50                   	push   eax
c000b27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 a4 ca 01 00       	call   c0027d2b <__adddf3>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b28e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b292:	89 f8                	mov    eax,edi
c000b294:	b9 08 00 00 00       	mov    ecx,0x8
c000b299:	99                   	cdq    
c000b29a:	f7 f9                	idiv   ecx
c000b29c:	4a                   	dec    edx
c000b29d:	83 fa 06             	cmp    edx,0x6
c000b2a0:	77 07                	ja     c000b2a9 <calc_output_multi+0x513>
c000b2a2:	ff 24 95 c0 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5940]
c000b2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ad:	4f                   	dec    edi
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2bf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c3:	e8 d7 da 01 00       	call   c0028d9f <__extendsfdf2>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e3:	e8 c0 d0 01 00       	call   c00283a8 <__muldf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f3:	52                   	push   edx
c000b2f4:	50                   	push   eax
c000b2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fb:	e8 2b ca 01 00       	call   c0027d2b <__adddf3>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b306:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30d:	4f                   	dec    edi
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b318:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b31f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b323:	e8 77 da 01 00       	call   c0028d9f <__extendsfdf2>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b343:	e8 60 d0 01 00       	call   c00283a8 <__muldf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b353:	52                   	push   edx
c000b354:	50                   	push   eax
c000b355:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b358:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35b:	e8 cb c9 01 00       	call   c0027d2b <__adddf3>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b366:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36d:	4f                   	dec    edi
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b378:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b37f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b383:	e8 17 da 01 00       	call   c0028d9f <__extendsfdf2>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b38f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a3:	e8 00 d0 01 00       	call   c00283a8 <__muldf3>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b3:	52                   	push   edx
c000b3b4:	50                   	push   eax
c000b3b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bb:	e8 6b c9 01 00       	call   c0027d2b <__adddf3>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cd:	4f                   	dec    edi
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3df:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e3:	e8 b7 d9 01 00       	call   c0028d9f <__extendsfdf2>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b403:	e8 a0 cf 01 00       	call   c00283a8 <__muldf3>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b413:	52                   	push   edx
c000b414:	50                   	push   eax
c000b415:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b418:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41b:	e8 0b c9 01 00       	call   c0027d2b <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b426:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42d:	4f                   	dec    edi
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b438:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b43f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b443:	e8 57 d9 01 00       	call   c0028d9f <__extendsfdf2>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b44f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b463:	e8 40 cf 01 00       	call   c00283a8 <__muldf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b473:	52                   	push   edx
c000b474:	50                   	push   eax
c000b475:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b478:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47b:	e8 ab c8 01 00       	call   c0027d2b <__adddf3>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b486:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	4f                   	dec    edi
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b498:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b49f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a3:	e8 f7 d8 01 00       	call   c0028d9f <__extendsfdf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c3:	e8 e0 ce 01 00       	call   c00283a8 <__muldf3>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4db:	e8 4b c8 01 00       	call   c0027d2b <__adddf3>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4f                   	dec    edi
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4ff:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b503:	e8 97 d8 01 00       	call   c0028d9f <__extendsfdf2>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b523:	e8 80 ce 01 00       	call   c00283a8 <__muldf3>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b533:	52                   	push   edx
c000b534:	50                   	push   eax
c000b535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b538:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53b:	e8 eb c7 01 00       	call   c0027d2b <__adddf3>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b546:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4f                   	dec    edi
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b558:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b55f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b563:	e8 37 d8 01 00       	call   c0028d9f <__extendsfdf2>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b56f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b583:	e8 20 ce 01 00       	call   c00283a8 <__muldf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b593:	52                   	push   edx
c000b594:	50                   	push   eax
c000b595:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b598:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59b:	e8 8b c7 01 00       	call   c0027d2b <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a9:	85 ff                	test   edi,edi
c000b5ab:	0f 8f e1 fc ff ff    	jg     c000b292 <calc_output_multi+0x4fc>
c000b5b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c2:	0f 8f 3f fc ff ff    	jg     c000b207 <calc_output_multi+0x471>
c000b5c8:	be 08 00 00 00       	mov    esi,0x8
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 fe                	idiv   esi
c000b5d2:	4a                   	dec    edx
c000b5d3:	83 fa 06             	cmp    edx,0x6
c000b5d6:	77 07                	ja     c000b5df <calc_output_multi+0x849>
c000b5d8:	ff 24 95 dc a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5924]
c000b5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e3:	4b                   	dec    ebx
c000b5e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f6:	e8 30 c7 01 00       	call   c0027d2b <__adddf3>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b616:	e8 8d cd 01 00       	call   c00283a8 <__muldf3>
c000b61b:	5d                   	pop    ebp
c000b61c:	59                   	pop    ecx
c000b61d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b621:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	e8 49 d6 01 00       	call   c0028c7b <__truncdfsf2>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b639:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b640:	4b                   	dec    ebx
c000b641:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b645:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b650:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b653:	e8 d3 c6 01 00       	call   c0027d2b <__adddf3>
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b673:	e8 30 cd 01 00       	call   c00283a8 <__muldf3>
c000b678:	59                   	pop    ecx
c000b679:	5f                   	pop    edi
c000b67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	e8 ec d5 01 00       	call   c0028c7b <__truncdfsf2>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b696:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69d:	4b                   	dec    ebx
c000b69e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b0:	e8 76 c6 01 00       	call   c0027d2b <__adddf3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d0:	e8 d3 cc 01 00       	call   c00283a8 <__muldf3>
c000b6d5:	5f                   	pop    edi
c000b6d6:	5d                   	pop    ebp
c000b6d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	e8 8f d5 01 00       	call   c0028c7b <__truncdfsf2>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	4b                   	dec    ebx
c000b6fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70d:	e8 19 c6 01 00       	call   c0027d2b <__adddf3>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72d:	e8 76 cc 01 00       	call   c00283a8 <__muldf3>
c000b732:	5d                   	pop    ebp
c000b733:	59                   	pop    ecx
c000b734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	e8 32 d5 01 00       	call   c0028c7b <__truncdfsf2>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b750:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b757:	4b                   	dec    ebx
c000b758:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b763:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b767:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76a:	e8 bc c5 01 00       	call   c0027d2b <__adddf3>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b776:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78a:	e8 19 cc 01 00       	call   c00283a8 <__muldf3>
c000b78f:	59                   	pop    ecx
c000b790:	5f                   	pop    edi
c000b791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	e8 d5 d4 01 00       	call   c0028c7b <__truncdfsf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b4:	4b                   	dec    ebx
c000b7b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c7:	e8 5f c5 01 00       	call   c0027d2b <__adddf3>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e7:	e8 bc cb 01 00       	call   c00283a8 <__muldf3>
c000b7ec:	5f                   	pop    edi
c000b7ed:	5d                   	pop    ebp
c000b7ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	e8 78 d4 01 00       	call   c0028c7b <__truncdfsf2>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	4b                   	dec    ebx
c000b812:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b816:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b821:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b824:	e8 02 c5 01 00       	call   c0027d2b <__adddf3>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 5f cb 01 00       	call   c00283a8 <__muldf3>
c000b849:	5d                   	pop    ebp
c000b84a:	59                   	pop    ecx
c000b84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b84f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	e8 1b d4 01 00       	call   c0028c7b <__truncdfsf2>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b867:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	4b                   	dec    ebx
c000b86f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b873:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b881:	e8 a5 c4 01 00       	call   c0027d2b <__adddf3>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	e8 02 cb 01 00       	call   c00283a8 <__muldf3>
c000b8a6:	59                   	pop    ecx
c000b8a7:	5f                   	pop    edi
c000b8a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b8:	e8 be d3 01 00       	call   c0028c7b <__truncdfsf2>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	85 db                	test   ebx,ebx
c000b8c2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c9:	0f 8f fe fc ff ff    	jg     c000b5cd <calc_output_multi+0x837>
c000b8cf:	83 c4 4c             	add    esp,0x4c
c000b8d2:	5b                   	pop    ebx
c000b8d3:	5e                   	pop    esi
c000b8d4:	5f                   	pop    edi
c000b8d5:	5d                   	pop    ebp
c000b8d6:	c3                   	ret    

c000b8d7 <double_to_fp>:
c000b8d7:	83 ec 0c             	sub    esp,0xc
c000b8da:	68 00 00 b0 40       	push   0x40b00000
c000b8df:	6a 00                	push   0x0
c000b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	e8 ba ca 01 00       	call   c00283a8 <__muldf3>
c000b8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	e9 32 d5 01 00       	jmp    c0028e30 <lrint>

c000b8fe <prepare_data>:
c000b8fe:	55                   	push   ebp
c000b8ff:	57                   	push   edi
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	83 ec 1c             	sub    esp,0x1c
c000b905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b909:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90d:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b911:	0f 89 57 01 00 00    	jns    c000ba6e <prepare_data+0x170>
c000b917:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	75 0d                	jne    c000b92e <prepare_data+0x30>
c000b921:	8d 14 36             	lea    edx,[esi+esi*1]
c000b924:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b927:	29 d0                	sub    eax,edx
c000b929:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92c:	eb 44                	jmp    c000b972 <prepare_data+0x74>
c000b92e:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b931:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b934:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b937:	39 c1                	cmp    ecx,eax
c000b939:	7d 04                	jge    c000b93f <prepare_data+0x41>
c000b93b:	29 d0                	sub    eax,edx
c000b93d:	eb 2d                	jmp    c000b96c <prepare_data+0x6e>
c000b93f:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b945:	29 d7                	sub    edi,edx
c000b947:	01 f7                	add    edi,esi
c000b949:	51                   	push   ecx
c000b94a:	29 f2                	sub    edx,esi
c000b94c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b953:	8d 14 90             	lea    edx,[eax+edx*4]
c000b956:	51                   	push   ecx
c000b957:	52                   	push   edx
c000b958:	50                   	push   eax
c000b959:	e8 42 4d ff ff       	call   c00006a0 <memmove>
c000b95e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b961:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b964:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b967:	29 f0                	sub    eax,esi
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	29 f0                	sub    eax,esi
c000b96e:	79 02                	jns    c000b972 <prepare_data+0x74>
c000b970:	31 c0                	xor    eax,eax
c000b972:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b975:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b978:	29 ef                	sub    edi,ebp
c000b97a:	39 c7                	cmp    edi,eax
c000b97c:	7e 02                	jle    c000b980 <prepare_data+0x82>
c000b97e:	89 c7                	mov    edi,eax
c000b980:	89 f8                	mov    eax,edi
c000b982:	99                   	cdq    
c000b983:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b986:	b8 15 00 00 00       	mov    eax,0x15
c000b98b:	29 d7                	sub    edi,edx
c000b98d:	0f 88 dd 00 00 00    	js     c000ba70 <prepare_data+0x172>
c000b993:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b996:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b999:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99c:	0f 8f ce 00 00 00    	jg     c000ba70 <prepare_data+0x172>
c000b9a2:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a8:	50                   	push   eax
c000b9a9:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b0:	50                   	push   eax
c000b9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b7:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9ba:	50                   	push   eax
c000b9bb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c2:	50                   	push   eax
c000b9c3:	e8 a0 4d ff ff       	call   c0000768 <memcpy>
c000b9c8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cb:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ce:	01 fd                	add    ebp,edi
c000b9d0:	01 f9                	add    ecx,edi
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d8:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9db:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f 85 86 00 00 00    	jne    c000ba6e <prepare_data+0x170>
c000b9e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9eb:	89 e8                	mov    eax,ebp
c000b9ed:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f0:	29 c8                	sub    eax,ecx
c000b9f2:	39 f8                	cmp    eax,edi
c000b9f4:	7d 78                	jge    c000ba6e <prepare_data+0x170>
c000b9f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fa:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9fe:	74 6e                	je     c000ba6e <prepare_data+0x170>
c000ba00:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba07:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0a:	29 ef                	sub    edi,ebp
c000ba0c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba10:	7c 29                	jl     c000ba3b <prepare_data+0x13d>
c000ba12:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba15:	29 f1                	sub    ecx,esi
c000ba17:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba1e:	55                   	push   ebp
c000ba1f:	50                   	push   eax
c000ba20:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba23:	50                   	push   eax
c000ba24:	52                   	push   edx
c000ba25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba29:	e8 72 4c ff ff       	call   c00006a0 <memmove>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba34:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba41:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba44:	83 c6 05             	add    esi,0x5
c000ba47:	78 07                	js     c000ba50 <prepare_data+0x152>
c000ba49:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4c:	39 cf                	cmp    edi,ecx
c000ba4e:	7e 04                	jle    c000ba54 <prepare_data+0x156>
c000ba50:	89 ce                	mov    esi,ecx
c000ba52:	29 c6                	sub    esi,eax
c000ba54:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba57:	51                   	push   ecx
c000ba58:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba5f:	51                   	push   ecx
c000ba60:	6a 00                	push   0x0
c000ba62:	50                   	push   eax
c000ba63:	e8 18 4d ff ff       	call   c0000780 <memset>
c000ba68:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	31 c0                	xor    eax,eax
c000ba70:	83 c4 1c             	add    esp,0x1c
c000ba73:	5b                   	pop    ebx
c000ba74:	5e                   	pop    esi
c000ba75:	5f                   	pop    edi
c000ba76:	5d                   	pop    ebp
c000ba77:	c3                   	ret    

c000ba78 <sinc_multichan_vari_process>:
c000ba78:	55                   	push   ebp
c000ba79:	ba 05 00 00 00       	mov    edx,0x5
c000ba7e:	57                   	push   edi
c000ba7f:	56                   	push   esi
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 4c             	sub    esp,0x4c
c000ba84:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba8f:	85 db                	test   ebx,ebx
c000ba91:	0f 84 9b 06 00 00    	je     c000c132 <sinc_multichan_vari_process+0x6ba>
c000ba97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9d:	0f af c5             	imul   eax,ebp
c000baa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab4:	0f af c5             	imul   eax,ebp
c000bab7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babd:	8b 06                	mov    eax,DWORD PTR [esi]
c000babf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	68 00 00 70 3f       	push   0x3f700000
c000bacc:	6a 00                	push   0x0
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad6:	e8 9c d1 01 00       	call   c0028c77 <__ltdf2>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	ba 16 00 00 00       	mov    edx,0x16
c000bae3:	85 c0                	test   eax,eax
c000bae5:	0f 88 47 06 00 00    	js     c000c132 <sinc_multichan_vari_process+0x6ba>
c000baeb:	68 00 00 70 40       	push   0x40700000
c000baf0:	6a 00                	push   0x0
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 5a d1 01 00       	call   c0028c59 <__gtdf2>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	ba 16 00 00 00       	mov    edx,0x16
c000bb07:	85 c0                	test   eax,eax
c000bb09:	0f 8f 23 06 00 00    	jg     c000c132 <sinc_multichan_vari_process+0x6ba>
c000bb0f:	83 ec 0c             	sub    esp,0xc
c000bb12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb15:	e8 f1 ce 01 00       	call   c0028a0b <__floatsidf>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb25:	68 00 00 00 40       	push   0x40000000
c000bb2a:	6a 00                	push   0x0
c000bb2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	e8 f2 c1 01 00       	call   c0027d2b <__adddf3>
c000bb39:	59                   	pop    ecx
c000bb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb3e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb45:	e8 c1 ce 01 00       	call   c0028a0b <__floatsidf>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	52                   	push   edx
c000bb56:	50                   	push   eax
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	e8 28 cb 01 00       	call   c002868c <__divdf3>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb6f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb72:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	e8 c7 d0 01 00       	call   c0028c59 <__gtdf2>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	7e 2d                	jle    c000bbc6 <sinc_multichan_vari_process+0x14e>
c000bb99:	68 00 00 f0 3f       	push   0x3ff00000
c000bb9e:	6a 00                	push   0x0
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba8:	e8 ca d0 01 00       	call   c0028c77 <__ltdf2>
c000bbad:	83 c4 10             	add    esp,0x10
c000bbb0:	85 c0                	test   eax,eax
c000bbb2:	79 4d                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc4:	eb 1b                	jmp    c000bbe1 <sinc_multichan_vari_process+0x169>
c000bbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcb:	6a 00                	push   0x0
c000bbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd5:	e8 9d d0 01 00       	call   c0028c77 <__ltdf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	79 20                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 96 ca 01 00       	call   c002868c <__divdf3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 20 d2 01 00       	call   c0028e30 <lrint>
c000bc10:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc13:	40                   	inc    eax
c000bc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc18:	0f af c5             	imul   eax,ebp
c000bc1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc26:	58                   	pop    eax
c000bc27:	5a                   	pop    edx
c000bc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc30:	e8 fb d1 01 00       	call   c0028e30 <lrint>
c000bc35:	83 ec 0c             	sub    esp,0xc
c000bc38:	50                   	push   eax
c000bc39:	e8 cd cd 01 00       	call   c0028a0b <__floatsidf>
c000bc3e:	83 c4 10             	add    esp,0x10
c000bc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc49:	52                   	push   edx
c000bc4a:	50                   	push   eax
c000bc4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc53:	e8 24 c7 01 00       	call   c002837c <__subdf3>
c000bc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc60:	83 c4 20             	add    esp,0x20
c000bc63:	6a 00                	push   0x0
c000bc65:	6a 00                	push   0x0
c000bc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6f:	e8 03 d0 01 00       	call   c0028c77 <__ltdf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	79 1f                	jns    c000bc9a <sinc_multichan_vari_process+0x222>
c000bc7b:	68 00 00 f0 3f       	push   0x3ff00000
c000bc80:	6a 00                	push   0x0
c000bc82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8a:	e8 9c c0 01 00       	call   c0027d2b <__adddf3>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9d:	83 ec 10             	sub    esp,0x10
c000bca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb7:	e8 c0 c6 01 00       	call   c002837c <__subdf3>
c000bcbc:	83 c4 18             	add    esp,0x18
c000bcbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	e8 62 d1 01 00       	call   c0028e30 <lrint>
c000bcce:	0f af e8             	imul   ebp,eax
c000bcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd5:	01 e8                	add    eax,ebp
c000bcd7:	99                   	cdq    
c000bcd8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce6:	68 00 00 f0 3f       	push   0x3ff00000
c000bceb:	6a 00                	push   0x0
c000bced:	e8 9a c9 01 00       	call   c002868c <__divdf3>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcfd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd02:	68 23 42 92 0c       	push   0xc924223
c000bd07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0f:	e8 17 c0 01 00       	call   c0027d2b <__adddf3>
c000bd14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1c:	83 c4 20             	add    esp,0x20
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd35:	7d 50                	jge    c000bd87 <sinc_multichan_vari_process+0x30f>
c000bd37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3d:	01 c8                	add    eax,ecx
c000bd3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd42:	99                   	cdq    
c000bd43:	f7 f9                	idiv   ecx
c000bd45:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd49:	7d 0c                	jge    c000bd57 <sinc_multichan_vari_process+0x2df>
c000bd4b:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd4e:	85 ed                	test   ebp,ebp
c000bd50:	79 6b                	jns    c000bdbd <sinc_multichan_vari_process+0x345>
c000bd52:	e9 e6 00 00 00       	jmp    c000be3d <sinc_multichan_vari_process+0x3c5>
c000bd57:	50                   	push   eax
c000bd58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5c:	57                   	push   edi
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 9b fb ff ff       	call   c000b8fe <prepare_data>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	89 c2                	mov    edx,eax
c000bd68:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6b:	85 c0                	test   eax,eax
c000bd6d:	0f 85 bf 03 00 00    	jne    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bd73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd76:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd79:	01 c8                	add    eax,ecx
c000bd7b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 f9                	idiv   ecx
c000bd81:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd85:	7c c4                	jl     c000bd4b <sinc_multichan_vari_process+0x2d3>
c000bd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd92:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9d:	89 06                	mov    DWORD PTR [esi],eax
c000bd9f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda5:	99                   	cdq    
c000bda6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdaf:	99                   	cdq    
c000bdb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb8:	e9 75 03 00 00       	jmp    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc3:	e8 43 cc 01 00       	call   c0028a0b <__floatsidf>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde3:	e8 43 bf 01 00       	call   c0027d2b <__adddf3>
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	e8 23 bf 01 00       	call   c0027d2b <__adddf3>
c000be08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be13:	e8 f3 cb 01 00       	call   c0028a0b <__floatsidf>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2d:	e8 43 ce 01 00       	call   c0028c75 <__gedf2>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	85 c0                	test   eax,eax
c000be37:	0f 89 4a ff ff ff    	jns    c000bd87 <sinc_multichan_vari_process+0x30f>
c000be3d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be41:	0f 8e ed 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be47:	83 ec 10             	sub    esp,0x10
c000be4a:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4d:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be53:	ff 36                	push   DWORD PTR [esi]
c000be55:	e8 22 c5 01 00       	call   c002837c <__subdf3>
c000be5a:	83 c4 18             	add    esp,0x18
c000be5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be65:	52                   	push   edx
c000be66:	50                   	push   eax
c000be67:	e8 a4 cf 01 00       	call   c0028e10 <fabs>
c000be6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be89:	e8 cb cd 01 00       	call   c0028c59 <__gtdf2>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	85 c0                	test   eax,eax
c000be93:	0f 8e 9b 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be99:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea6:	52                   	push   edx
c000bea7:	50                   	push   eax
c000bea8:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beab:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beae:	e8 c9 c4 01 00       	call   c002837c <__subdf3>
c000beb3:	59                   	pop    ecx
c000beb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bebf:	e8 47 cb 01 00       	call   c0028a0b <__floatsidf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000becf:	52                   	push   edx
c000bed0:	50                   	push   eax
c000bed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	e8 ca c4 01 00       	call   c00283a8 <__muldf3>
c000bede:	5d                   	pop    ebp
c000bedf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beea:	e8 1c cb 01 00       	call   c0028a0b <__floatsidf>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf04:	e8 83 c7 01 00       	call   c002868c <__divdf3>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf24:	e8 02 be 01 00       	call   c0027d2b <__adddf3>
c000bf29:	83 c4 10             	add    esp,0x10
c000bf2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3a:	e8 cc ca 01 00       	call   c0028a0b <__floatsidf>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	e8 18 cd 01 00       	call   c0028c77 <__ltdf2>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	85 c0                	test   eax,eax
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf70:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf74:	78 10                	js     c000bf86 <sinc_multichan_vari_process+0x50e>
c000bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	e8 0d c4 01 00       	call   c00283a8 <__muldf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	5d                   	pop    ebp
c000bf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfad:	e8 25 f9 ff ff       	call   c000b8d7 <double_to_fp>
c000bfb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc4:	e8 df c3 01 00       	call   c00283a8 <__muldf3>
c000bfc9:	83 c4 18             	add    esp,0x18
c000bfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd4:	52                   	push   edx
c000bfd5:	50                   	push   eax
c000bfd6:	e8 fc f8 ff ff       	call   c000b8d7 <double_to_fp>
c000bfdb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe5:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	50                   	push   eax
c000bfeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfee:	e8 18 ca 01 00       	call   c0028a0b <__floatsidf>
c000bff3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	e8 7c c6 01 00       	call   c002868c <__divdf3>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c017:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01b:	52                   	push   edx
c000c01c:	89 ea                	mov    edx,ebp
c000c01e:	50                   	push   eax
c000c01f:	89 d8                	mov    eax,ebx
c000c021:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c024:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c028:	e8 69 ed ff ff       	call   c000ad96 <calc_output_multi>
c000c02d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c030:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c043:	e8 44 c6 01 00       	call   c002868c <__divdf3>
c000c048:	83 c4 10             	add    esp,0x10
c000c04b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c04f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c063:	e8 c3 bc 01 00       	call   c0027d2b <__adddf3>
c000c068:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c070:	83 c4 28             	add    esp,0x28
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07b:	e8 b0 cd 01 00       	call   c0028e30 <lrint>
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	50                   	push   eax
c000c084:	e8 82 c9 01 00       	call   c0028a0b <__floatsidf>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c090:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c094:	52                   	push   edx
c000c095:	50                   	push   eax
c000c096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09e:	e8 d9 c2 01 00       	call   c002837c <__subdf3>
c000c0a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ab:	83 c4 20             	add    esp,0x20
c000c0ae:	6a 00                	push   0x0
c000c0b0:	6a 00                	push   0x0
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	e8 b8 cb 01 00       	call   c0028c77 <__ltdf2>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	79 20                	jns    c000c0e6 <sinc_multichan_vari_process+0x66e>
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 50 bc 01 00       	call   c0027d2b <__adddf3>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c103:	e8 74 c2 01 00       	call   c002837c <__subdf3>
c000c108:	83 c4 18             	add    esp,0x18
c000c10b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c10f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	e8 16 cd 01 00       	call   c0028e30 <lrint>
c000c11a:	0f af e8             	imul   ebp,eax
c000c11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	01 e8                	add    eax,ebp
c000c126:	99                   	cdq    
c000c127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12d:	e9 fd fb ff ff       	jmp    c000bd2f <sinc_multichan_vari_process+0x2b7>
c000c132:	83 c4 4c             	add    esp,0x4c
c000c135:	89 d0                	mov    eax,edx
c000c137:	5b                   	pop    ebx
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	5d                   	pop    ebp
c000c13b:	c3                   	ret    

c000c13c <sinc_hex_vari_process>:
c000c13c:	55                   	push   ebp
c000c13d:	ba 05 00 00 00       	mov    edx,0x5
c000c142:	57                   	push   edi
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 4c             	sub    esp,0x4c
c000c148:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c150:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c153:	85 db                	test   ebx,ebx
c000c155:	0f 84 9c 06 00 00    	je     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c15b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c15e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c161:	0f af c7             	imul   eax,edi
c000c164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c167:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c178:	0f af c7             	imul   eax,edi
c000c17b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c17e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c181:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c184:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18c:	68 00 00 70 3f       	push   0x3f700000
c000c191:	6a 00                	push   0x0
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 d7 ca 01 00       	call   c0028c77 <__ltdf2>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	ba 16 00 00 00       	mov    edx,0x16
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	0f 88 47 06 00 00    	js     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1b0:	68 00 00 70 40       	push   0x40700000
c000c1b5:	6a 00                	push   0x0
c000c1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bf:	e8 95 ca 01 00       	call   c0028c59 <__gtdf2>
c000c1c4:	83 c4 10             	add    esp,0x10
c000c1c7:	ba 16 00 00 00       	mov    edx,0x16
c000c1cc:	85 c0                	test   eax,eax
c000c1ce:	0f 8f 23 06 00 00    	jg     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1da:	e8 2c c8 01 00       	call   c0028a0b <__floatsidf>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ea:	68 00 00 00 40       	push   0x40000000
c000c1ef:	6a 00                	push   0x0
c000c1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	e8 2d bb 01 00       	call   c0027d2b <__adddf3>
c000c1fe:	59                   	pop    ecx
c000c1ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c203:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c207:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20a:	e8 fc c7 01 00       	call   c0028a0b <__floatsidf>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	52                   	push   edx
c000c21b:	50                   	push   eax
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	e8 63 c4 01 00       	call   c002868c <__divdf3>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c234:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c237:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	e8 02 ca 01 00       	call   c0028c59 <__gtdf2>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	85 c0                	test   eax,eax
c000c25c:	7e 2d                	jle    c000c28b <sinc_hex_vari_process+0x14f>
c000c25e:	68 00 00 f0 3f       	push   0x3ff00000
c000c263:	6a 00                	push   0x0
c000c265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26d:	e8 05 ca 01 00       	call   c0028c77 <__ltdf2>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	79 4d                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c289:	eb 1b                	jmp    c000c2a6 <sinc_hex_vari_process+0x16a>
c000c28b:	68 00 00 f0 3f       	push   0x3ff00000
c000c290:	6a 00                	push   0x0
c000c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29a:	e8 d8 c9 01 00       	call   c0028c77 <__ltdf2>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	85 c0                	test   eax,eax
c000c2a4:	79 20                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c2a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 d1 c3 01 00       	call   c002868c <__divdf3>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c6:	50                   	push   eax
c000c2c7:	50                   	push   eax
c000c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d0:	e8 5b cb 01 00       	call   c0028e30 <lrint>
c000c2d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d8:	40                   	inc    eax
c000c2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dd:	0f af c7             	imul   eax,edi
c000c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2eb:	58                   	pop    eax
c000c2ec:	5a                   	pop    edx
c000c2ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f5:	e8 36 cb 01 00       	call   c0028e30 <lrint>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 08 c7 01 00       	call   c0028a0b <__floatsidf>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c30e:	52                   	push   edx
c000c30f:	50                   	push   eax
c000c310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c318:	e8 5f c0 01 00       	call   c002837c <__subdf3>
c000c31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c325:	83 c4 20             	add    esp,0x20
c000c328:	6a 00                	push   0x0
c000c32a:	6a 00                	push   0x0
c000c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c334:	e8 3e c9 01 00       	call   c0028c77 <__ltdf2>
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	85 c0                	test   eax,eax
c000c33e:	79 1f                	jns    c000c35f <sinc_hex_vari_process+0x223>
c000c340:	68 00 00 f0 3f       	push   0x3ff00000
c000c345:	6a 00                	push   0x0
c000c347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34f:	e8 d7 b9 01 00       	call   c0027d2b <__adddf3>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c362:	83 ec 10             	sub    esp,0x10
c000c365:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c369:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37c:	e8 fb bf 01 00       	call   c002837c <__subdf3>
c000c381:	83 c4 18             	add    esp,0x18
c000c384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38c:	52                   	push   edx
c000c38d:	50                   	push   eax
c000c38e:	e8 9d ca 01 00       	call   c0028e30 <lrint>
c000c393:	0f af f8             	imul   edi,eax
c000c396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39a:	01 f8                	add    eax,edi
c000c39c:	99                   	cdq    
c000c39d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b0:	6a 00                	push   0x0
c000c3b2:	e8 d5 c2 01 00       	call   c002868c <__divdf3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c7:	68 23 42 92 0c       	push   0xc924223
c000c3cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d4:	e8 52 b9 01 00       	call   c0027d2b <__adddf3>
c000c3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3dd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e1:	83 c4 20             	add    esp,0x20
c000c3e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ec:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fa:	7d 50                	jge    c000c44c <sinc_hex_vari_process+0x310>
c000c3fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c402:	01 c8                	add    eax,ecx
c000c404:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c407:	99                   	cdq    
c000c408:	f7 f9                	idiv   ecx
c000c40a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c40e:	7d 0c                	jge    c000c41c <sinc_hex_vari_process+0x2e0>
c000c410:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c413:	85 ff                	test   edi,edi
c000c415:	79 6c                	jns    c000c483 <sinc_hex_vari_process+0x347>
c000c417:	e9 e7 00 00 00       	jmp    c000c503 <sinc_hex_vari_process+0x3c7>
c000c41c:	50                   	push   eax
c000c41d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c421:	56                   	push   esi
c000c422:	53                   	push   ebx
c000c423:	e8 d6 f4 ff ff       	call   c000b8fe <prepare_data>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	89 c2                	mov    edx,eax
c000c42d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c430:	85 c0                	test   eax,eax
c000c432:	0f 85 bf 03 00 00    	jne    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c438:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c43e:	01 c8                	add    eax,ecx
c000c440:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c443:	99                   	cdq    
c000c444:	f7 f9                	idiv   ecx
c000c446:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44a:	7c c4                	jl     c000c410 <sinc_hex_vari_process+0x2d4>
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c454:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c457:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c462:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c465:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46b:	99                   	cdq    
c000c46c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c46f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c472:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c475:	99                   	cdq    
c000c476:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c479:	31 d2                	xor    edx,edx
c000c47b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c47e:	e9 74 03 00 00       	jmp    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c489:	e8 7d c5 01 00       	call   c0028a0b <__floatsidf>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c495:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c499:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a9:	e8 7d b8 01 00       	call   c0027d2b <__adddf3>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	e8 5d b8 01 00       	call   c0027d2b <__adddf3>
c000c4ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d9:	e8 2d c5 01 00       	call   c0028a0b <__floatsidf>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f3:	e8 7d c7 01 00       	call   c0028c75 <__gedf2>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	0f 89 49 ff ff ff    	jns    c000c44c <sinc_hex_vari_process+0x310>
c000c503:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c507:	0f 8e ef 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c50d:	83 ec 10             	sub    esp,0x10
c000c510:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c513:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c516:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c519:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51c:	e8 5b be 01 00       	call   c002837c <__subdf3>
c000c521:	83 c4 18             	add    esp,0x18
c000c524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c528:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	e8 dd c8 01 00       	call   c0028e10 <fabs>
c000c533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c537:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c543:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c550:	e8 04 c7 01 00       	call   c0028c59 <__gtdf2>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	85 c0                	test   eax,eax
c000c55a:	0f 8e 9c 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c573:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c576:	e8 01 be 01 00       	call   c002837c <__subdf3>
c000c57b:	59                   	pop    ecx
c000c57c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c580:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c584:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c587:	e8 7f c4 01 00       	call   c0028a0b <__floatsidf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	e8 02 be 01 00       	call   c00283a8 <__muldf3>
c000c5a6:	5f                   	pop    edi
c000c5a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5af:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b2:	e8 54 c4 01 00       	call   c0028a0b <__floatsidf>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c2:	52                   	push   edx
c000c5c3:	50                   	push   eax
c000c5c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cc:	e8 bb c0 01 00       	call   c002868c <__divdf3>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ec:	e8 3a b7 01 00       	call   c0027d2b <__adddf3>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c602:	e8 04 c4 01 00       	call   c0028a0b <__floatsidf>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c60e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 50 c6 01 00       	call   c0028c77 <__ltdf2>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	85 c0                	test   eax,eax
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c634:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c638:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63c:	78 10                	js     c000c64e <sinc_hex_vari_process+0x512>
c000c63e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	e8 45 bd 01 00       	call   c00283a8 <__muldf3>
c000c663:	59                   	pop    ecx
c000c664:	5f                   	pop    edi
c000c665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c675:	e8 5d f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c67a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67e:	89 c7                	mov    edi,eax
c000c680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68c:	e8 17 bd 01 00       	call   c00283a8 <__muldf3>
c000c691:	83 c4 18             	add    esp,0x18
c000c694:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c698:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69c:	52                   	push   edx
c000c69d:	50                   	push   eax
c000c69e:	e8 34 f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c6a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6aa:	83 c4 0c             	add    esp,0xc
c000c6ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b0:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b3:	50                   	push   eax
c000c6b4:	50                   	push   eax
c000c6b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b8:	e8 4e c3 01 00       	call   c0028a0b <__floatsidf>
c000c6bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	e8 b2 bf 01 00       	call   c002868c <__divdf3>
c000c6da:	83 c4 18             	add    esp,0x18
c000c6dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e5:	52                   	push   edx
c000c6e6:	89 fa                	mov    edx,edi
c000c6e8:	50                   	push   eax
c000c6e9:	89 d8                	mov    eax,ebx
c000c6eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ef:	e8 50 de ff ff       	call   c000a544 <calc_output_hex>
c000c6f4:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c708:	e8 7f bf 01 00       	call   c002868c <__divdf3>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c728:	e8 fe b5 01 00       	call   c0027d2b <__adddf3>
c000c72d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c735:	83 c4 18             	add    esp,0x18
c000c738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	e8 eb c6 01 00       	call   c0028e30 <lrint>
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 bd c2 01 00       	call   c0028a0b <__floatsidf>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c755:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c759:	52                   	push   edx
c000c75a:	50                   	push   eax
c000c75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c763:	e8 14 bc 01 00       	call   c002837c <__subdf3>
c000c768:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c770:	83 c4 20             	add    esp,0x20
c000c773:	6a 00                	push   0x0
c000c775:	6a 00                	push   0x0
c000c777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77f:	e8 f3 c4 01 00       	call   c0028c77 <__ltdf2>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	85 c0                	test   eax,eax
c000c789:	79 20                	jns    c000c7ab <sinc_hex_vari_process+0x66f>
c000c78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 8b b5 01 00       	call   c0027d2b <__adddf3>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ae:	83 ec 10             	sub    esp,0x10
c000c7b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c8:	e8 af bb 01 00       	call   c002837c <__subdf3>
c000c7cd:	83 c4 18             	add    esp,0x18
c000c7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d8:	52                   	push   edx
c000c7d9:	50                   	push   eax
c000c7da:	e8 51 c6 01 00       	call   c0028e30 <lrint>
c000c7df:	0f af f8             	imul   edi,eax
c000c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	01 f8                	add    eax,edi
c000c7eb:	99                   	cdq    
c000c7ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f2:	e9 fd fb ff ff       	jmp    c000c3f4 <sinc_hex_vari_process+0x2b8>
c000c7f7:	83 c4 4c             	add    esp,0x4c
c000c7fa:	89 d0                	mov    eax,edx
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	5d                   	pop    ebp
c000c800:	c3                   	ret    

c000c801 <sinc_quad_vari_process>:
c000c801:	55                   	push   ebp
c000c802:	ba 05 00 00 00       	mov    edx,0x5
c000c807:	57                   	push   edi
c000c808:	56                   	push   esi
c000c809:	53                   	push   ebx
c000c80a:	83 ec 4c             	sub    esp,0x4c
c000c80d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c811:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c815:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c818:	85 db                	test   ebx,ebx
c000c81a:	0f 84 9c 06 00 00    	je     c000cebc <sinc_quad_vari_process+0x6bb>
c000c820:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c823:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c826:	0f af c7             	imul   eax,edi
c000c829:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c82f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c836:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83d:	0f af c7             	imul   eax,edi
c000c840:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c843:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c846:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c849:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c851:	68 00 00 70 3f       	push   0x3f700000
c000c856:	6a 00                	push   0x0
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 12 c4 01 00       	call   c0028c77 <__ltdf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	ba 16 00 00 00       	mov    edx,0x16
c000c86d:	85 c0                	test   eax,eax
c000c86f:	0f 88 47 06 00 00    	js     c000cebc <sinc_quad_vari_process+0x6bb>
c000c875:	68 00 00 70 40       	push   0x40700000
c000c87a:	6a 00                	push   0x0
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c884:	e8 d0 c3 01 00       	call   c0028c59 <__gtdf2>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	ba 16 00 00 00       	mov    edx,0x16
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8f 23 06 00 00    	jg     c000cebc <sinc_quad_vari_process+0x6bb>
c000c899:	83 ec 0c             	sub    esp,0xc
c000c89c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c89f:	e8 67 c1 01 00       	call   c0028a0b <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8af:	68 00 00 00 40       	push   0x40000000
c000c8b4:	6a 00                	push   0x0
c000c8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	e8 68 b4 01 00       	call   c0027d2b <__adddf3>
c000c8c3:	59                   	pop    ecx
c000c8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8cf:	e8 37 c1 01 00       	call   c0028a0b <__floatsidf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	52                   	push   edx
c000c8e0:	50                   	push   eax
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	e8 9e bd 01 00       	call   c002868c <__divdf3>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fc:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	e8 3d c3 01 00       	call   c0028c59 <__gtdf2>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	85 c0                	test   eax,eax
c000c921:	7e 2d                	jle    c000c950 <sinc_quad_vari_process+0x14f>
c000c923:	68 00 00 f0 3f       	push   0x3ff00000
c000c928:	6a 00                	push   0x0
c000c92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	e8 40 c3 01 00       	call   c0028c77 <__ltdf2>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	85 c0                	test   eax,eax
c000c93c:	79 4d                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94e:	eb 1b                	jmp    c000c96b <sinc_quad_vari_process+0x16a>
c000c950:	68 00 00 f0 3f       	push   0x3ff00000
c000c955:	6a 00                	push   0x0
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95f:	e8 13 c3 01 00       	call   c0028c77 <__ltdf2>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	85 c0                	test   eax,eax
c000c969:	79 20                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 0c bd 01 00       	call   c002868c <__divdf3>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c987:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98b:	50                   	push   eax
c000c98c:	50                   	push   eax
c000c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c995:	e8 96 c4 01 00       	call   c0028e30 <lrint>
c000c99a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99d:	40                   	inc    eax
c000c99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a2:	0f af c7             	imul   eax,edi
c000c9a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b0:	58                   	pop    eax
c000c9b1:	5a                   	pop    edx
c000c9b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ba:	e8 71 c4 01 00       	call   c0028e30 <lrint>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	e8 43 c0 01 00       	call   c0028a0b <__floatsidf>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d3:	52                   	push   edx
c000c9d4:	50                   	push   eax
c000c9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9dd:	e8 9a b9 01 00       	call   c002837c <__subdf3>
c000c9e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	6a 00                	push   0x0
c000c9ef:	6a 00                	push   0x0
c000c9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f9:	e8 79 c2 01 00       	call   c0028c77 <__ltdf2>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	85 c0                	test   eax,eax
c000ca03:	79 1f                	jns    c000ca24 <sinc_quad_vari_process+0x223>
c000ca05:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0a:	6a 00                	push   0x0
c000ca0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca14:	e8 12 b3 01 00       	call   c0027d2b <__adddf3>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca27:	83 ec 10             	sub    esp,0x10
c000ca2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca41:	e8 36 b9 01 00       	call   c002837c <__subdf3>
c000ca46:	83 c4 18             	add    esp,0x18
c000ca49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca51:	52                   	push   edx
c000ca52:	50                   	push   eax
c000ca53:	e8 d8 c3 01 00       	call   c0028e30 <lrint>
c000ca58:	0f af f8             	imul   edi,eax
c000ca5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca5f:	01 f8                	add    eax,edi
c000ca61:	99                   	cdq    
c000ca62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca70:	68 00 00 f0 3f       	push   0x3ff00000
c000ca75:	6a 00                	push   0x0
c000ca77:	e8 10 bc 01 00       	call   c002868c <__divdf3>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca87:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8c:	68 23 42 92 0c       	push   0xc924223
c000ca91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca99:	e8 8d b2 01 00       	call   c0027d2b <__adddf3>
c000ca9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa6:	83 c4 20             	add    esp,0x20
c000caa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cabf:	7d 50                	jge    c000cb11 <sinc_quad_vari_process+0x310>
c000cac1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac7:	01 c8                	add    eax,ecx
c000cac9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cacc:	99                   	cdq    
c000cacd:	f7 f9                	idiv   ecx
c000cacf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad3:	7d 0c                	jge    c000cae1 <sinc_quad_vari_process+0x2e0>
c000cad5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad8:	85 ff                	test   edi,edi
c000cada:	79 6c                	jns    c000cb48 <sinc_quad_vari_process+0x347>
c000cadc:	e9 e7 00 00 00       	jmp    c000cbc8 <sinc_quad_vari_process+0x3c7>
c000cae1:	50                   	push   eax
c000cae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	e8 11 ee ff ff       	call   c000b8fe <prepare_data>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	89 c2                	mov    edx,eax
c000caf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf5:	85 c0                	test   eax,eax
c000caf7:	0f 85 bf 03 00 00    	jne    c000cebc <sinc_quad_vari_process+0x6bb>
c000cafd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb00:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb03:	01 c8                	add    eax,ecx
c000cb05:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb08:	99                   	cdq    
c000cb09:	f7 f9                	idiv   ecx
c000cb0b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb0f:	7c c4                	jl     c000cad5 <sinc_quad_vari_process+0x2d4>
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb30:	99                   	cdq    
c000cb31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3a:	99                   	cdq    
c000cb3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3e:	31 d2                	xor    edx,edx
c000cb40:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb43:	e9 74 03 00 00       	jmp    c000cebc <sinc_quad_vari_process+0x6bb>
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb4e:	e8 b8 be 01 00       	call   c0028a0b <__floatsidf>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6e:	e8 b8 b1 01 00       	call   c0027d2b <__adddf3>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	e8 98 b1 01 00       	call   c0027d2b <__adddf3>
c000cb93:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb9e:	e8 68 be 01 00       	call   c0028a0b <__floatsidf>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbae:	52                   	push   edx
c000cbaf:	50                   	push   eax
c000cbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb8:	e8 b8 c0 01 00       	call   c0028c75 <__gedf2>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	85 c0                	test   eax,eax
c000cbc2:	0f 89 49 ff ff ff    	jns    c000cb11 <sinc_quad_vari_process+0x310>
c000cbc8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbcc:	0f 8e ef 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cbd2:	83 ec 10             	sub    esp,0x10
c000cbd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe1:	e8 96 b7 01 00       	call   c002837c <__subdf3>
c000cbe6:	83 c4 18             	add    esp,0x18
c000cbe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	e8 18 c2 01 00       	call   c0028e10 <fabs>
c000cbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc08:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	e8 3f c0 01 00       	call   c0028c59 <__gtdf2>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	0f 8e 9c 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cc25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc28:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc33:	52                   	push   edx
c000cc34:	50                   	push   eax
c000cc35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc38:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3b:	e8 3c b7 01 00       	call   c002837c <__subdf3>
c000cc40:	59                   	pop    ecx
c000cc41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4c:	e8 ba bd 01 00       	call   c0028a0b <__floatsidf>
c000cc51:	83 c4 10             	add    esp,0x10
c000cc54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5c:	52                   	push   edx
c000cc5d:	50                   	push   eax
c000cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	e8 3d b7 01 00       	call   c00283a8 <__muldf3>
c000cc6b:	5f                   	pop    edi
c000cc6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc70:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc77:	e8 8f bd 01 00       	call   c0028a0b <__floatsidf>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc87:	52                   	push   edx
c000cc88:	50                   	push   eax
c000cc89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc91:	e8 f6 b9 01 00       	call   c002868c <__divdf3>
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb1:	e8 75 b0 01 00       	call   c0027d2b <__adddf3>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc1:	83 ec 0c             	sub    esp,0xc
c000ccc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc7:	e8 3f bd 01 00       	call   c0028a0b <__floatsidf>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 8b bf 01 00       	call   c0028c77 <__ltdf2>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccfd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd01:	78 10                	js     c000cd13 <sinc_quad_vari_process+0x512>
c000cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	e8 80 b6 01 00       	call   c00283a8 <__muldf3>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3a:	e8 98 eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd43:	89 c7                	mov    edi,eax
c000cd45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd51:	e8 52 b6 01 00       	call   c00283a8 <__muldf3>
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd61:	52                   	push   edx
c000cd62:	50                   	push   eax
c000cd63:	e8 6f eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd75:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd78:	50                   	push   eax
c000cd79:	50                   	push   eax
c000cd7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7d:	e8 89 bc 01 00       	call   c0028a0b <__floatsidf>
c000cd82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	e8 ed b8 01 00       	call   c002868c <__divdf3>
c000cd9f:	83 c4 18             	add    esp,0x18
c000cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdaa:	52                   	push   edx
c000cdab:	89 fa                	mov    edx,edi
c000cdad:	50                   	push   eax
c000cdae:	89 d8                	mov    eax,ebx
c000cdb0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb4:	e8 a5 d1 ff ff       	call   c0009f5e <calc_output_quad>
c000cdb9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcd:	e8 ba b8 01 00       	call   c002868c <__divdf3>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cded:	e8 39 af 01 00       	call   c0027d2b <__adddf3>
c000cdf2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfa:	83 c4 18             	add    esp,0x18
c000cdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	e8 26 c0 01 00       	call   c0028e30 <lrint>
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	50                   	push   eax
c000ce0e:	e8 f8 bb 01 00       	call   c0028a0b <__floatsidf>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1e:	52                   	push   edx
c000ce1f:	50                   	push   eax
c000ce20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce28:	e8 4f b5 01 00       	call   c002837c <__subdf3>
c000ce2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce35:	83 c4 20             	add    esp,0x20
c000ce38:	6a 00                	push   0x0
c000ce3a:	6a 00                	push   0x0
c000ce3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce44:	e8 2e be 01 00       	call   c0028c77 <__ltdf2>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	85 c0                	test   eax,eax
c000ce4e:	79 20                	jns    c000ce70 <sinc_quad_vari_process+0x66f>
c000ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 c6 ae 01 00       	call   c0027d2b <__adddf3>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce73:	83 ec 10             	sub    esp,0x10
c000ce76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8d:	e8 ea b4 01 00       	call   c002837c <__subdf3>
c000ce92:	83 c4 18             	add    esp,0x18
c000ce95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9d:	52                   	push   edx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 8c bf 01 00       	call   c0028e30 <lrint>
c000cea4:	0f af f8             	imul   edi,eax
c000cea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	01 f8                	add    eax,edi
c000ceb0:	99                   	cdq    
c000ceb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb7:	e9 fd fb ff ff       	jmp    c000cab9 <sinc_quad_vari_process+0x2b8>
c000cebc:	83 c4 4c             	add    esp,0x4c
c000cebf:	89 d0                	mov    eax,edx
c000cec1:	5b                   	pop    ebx
c000cec2:	5e                   	pop    esi
c000cec3:	5f                   	pop    edi
c000cec4:	5d                   	pop    ebp
c000cec5:	c3                   	ret    

c000cec6 <sinc_stereo_vari_process>:
c000cec6:	55                   	push   ebp
c000cec7:	ba 05 00 00 00       	mov    edx,0x5
c000cecc:	57                   	push   edi
c000cecd:	56                   	push   esi
c000cece:	53                   	push   ebx
c000cecf:	83 ec 4c             	sub    esp,0x4c
c000ced2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceda:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedd:	85 db                	test   ebx,ebx
c000cedf:	0f 84 9c 06 00 00    	je     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cee5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceeb:	0f af c7             	imul   eax,edi
c000ceee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf02:	0f af c7             	imul   eax,edi
c000cf05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf16:	68 00 00 70 3f       	push   0x3f700000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf25:	e8 4d bd 01 00       	call   c0028c77 <__ltdf2>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ba 16 00 00 00       	mov    edx,0x16
c000cf32:	85 c0                	test   eax,eax
c000cf34:	0f 88 47 06 00 00    	js     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf3a:	68 00 00 70 40       	push   0x40700000
c000cf3f:	6a 00                	push   0x0
c000cf41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf49:	e8 0b bd 01 00       	call   c0028c59 <__gtdf2>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	ba 16 00 00 00       	mov    edx,0x16
c000cf56:	85 c0                	test   eax,eax
c000cf58:	0f 8f 23 06 00 00    	jg     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf64:	e8 a2 ba 01 00       	call   c0028a0b <__floatsidf>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf74:	68 00 00 00 40       	push   0x40000000
c000cf79:	6a 00                	push   0x0
c000cf7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	e8 a3 ad 01 00       	call   c0027d2b <__adddf3>
c000cf88:	59                   	pop    ecx
c000cf89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf94:	e8 72 ba 01 00       	call   c0028a0b <__floatsidf>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	e8 d9 b6 01 00       	call   c002868c <__divdf3>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	e8 78 bc 01 00       	call   c0028c59 <__gtdf2>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	85 c0                	test   eax,eax
c000cfe6:	7e 2d                	jle    c000d015 <sinc_stereo_vari_process+0x14f>
c000cfe8:	68 00 00 f0 3f       	push   0x3ff00000
c000cfed:	6a 00                	push   0x0
c000cfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff7:	e8 7b bc 01 00       	call   c0028c77 <__ltdf2>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	85 c0                	test   eax,eax
c000d001:	79 4d                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d00f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d013:	eb 1b                	jmp    c000d030 <sinc_stereo_vari_process+0x16a>
c000d015:	68 00 00 f0 3f       	push   0x3ff00000
c000d01a:	6a 00                	push   0x0
c000d01c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d024:	e8 4e bc 01 00       	call   c0028c77 <__ltdf2>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	85 c0                	test   eax,eax
c000d02e:	79 20                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d034:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 47 b6 01 00       	call   c002868c <__divdf3>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d050:	50                   	push   eax
c000d051:	50                   	push   eax
c000d052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05a:	e8 d1 bd 01 00       	call   c0028e30 <lrint>
c000d05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d062:	40                   	inc    eax
c000d063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d067:	0f af c7             	imul   eax,edi
c000d06a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d075:	58                   	pop    eax
c000d076:	5a                   	pop    edx
c000d077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07f:	e8 ac bd 01 00       	call   c0028e30 <lrint>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	50                   	push   eax
c000d088:	e8 7e b9 01 00       	call   c0028a0b <__floatsidf>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d098:	52                   	push   edx
c000d099:	50                   	push   eax
c000d09a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a2:	e8 d5 b2 01 00       	call   c002837c <__subdf3>
c000d0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0af:	83 c4 20             	add    esp,0x20
c000d0b2:	6a 00                	push   0x0
c000d0b4:	6a 00                	push   0x0
c000d0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0be:	e8 b4 bb 01 00       	call   c0028c77 <__ltdf2>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	85 c0                	test   eax,eax
c000d0c8:	79 1f                	jns    c000d0e9 <sinc_stereo_vari_process+0x223>
c000d0ca:	68 00 00 f0 3f       	push   0x3ff00000
c000d0cf:	6a 00                	push   0x0
c000d0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d9:	e8 4d ac 01 00       	call   c0027d2b <__adddf3>
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ec:	83 ec 10             	sub    esp,0x10
c000d0ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d106:	e8 71 b2 01 00       	call   c002837c <__subdf3>
c000d10b:	83 c4 18             	add    esp,0x18
c000d10e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d116:	52                   	push   edx
c000d117:	50                   	push   eax
c000d118:	e8 13 bd 01 00       	call   c0028e30 <lrint>
c000d11d:	0f af f8             	imul   edi,eax
c000d120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d124:	01 f8                	add    eax,edi
c000d126:	99                   	cdq    
c000d127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d135:	68 00 00 f0 3f       	push   0x3ff00000
c000d13a:	6a 00                	push   0x0
c000d13c:	e8 4b b5 01 00       	call   c002868c <__divdf3>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d151:	68 23 42 92 0c       	push   0xc924223
c000d156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15e:	e8 c8 ab 01 00       	call   c0027d2b <__adddf3>
c000d163:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d167:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16b:	83 c4 20             	add    esp,0x20
c000d16e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d176:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d17e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d181:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d184:	7d 50                	jge    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d186:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d189:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18c:	01 c8                	add    eax,ecx
c000d18e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d191:	99                   	cdq    
c000d192:	f7 f9                	idiv   ecx
c000d194:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d198:	7d 0c                	jge    c000d1a6 <sinc_stereo_vari_process+0x2e0>
c000d19a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19d:	85 ff                	test   edi,edi
c000d19f:	79 6c                	jns    c000d20d <sinc_stereo_vari_process+0x347>
c000d1a1:	e9 e7 00 00 00       	jmp    c000d28d <sinc_stereo_vari_process+0x3c7>
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ab:	56                   	push   esi
c000d1ac:	53                   	push   ebx
c000d1ad:	e8 4c e7 ff ff       	call   c000b8fe <prepare_data>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	89 c2                	mov    edx,eax
c000d1b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1ba:	85 c0                	test   eax,eax
c000d1bc:	0f 85 bf 03 00 00    	jne    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d1c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c8:	01 c8                	add    eax,ecx
c000d1ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 f9                	idiv   ecx
c000d1d0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d4:	7c c4                	jl     c000d19a <sinc_stereo_vari_process+0x2d4>
c000d1d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1de:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f5:	99                   	cdq    
c000d1f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1ff:	99                   	cdq    
c000d200:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d203:	31 d2                	xor    edx,edx
c000d205:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d208:	e9 74 03 00 00       	jmp    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d213:	e8 f3 b7 01 00       	call   c0028a0b <__floatsidf>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d223:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d233:	e8 f3 aa 01 00       	call   c0027d2b <__adddf3>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d243:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d247:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	e8 d3 aa 01 00       	call   c0027d2b <__adddf3>
c000d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d263:	e8 a3 b7 01 00       	call   c0028a0b <__floatsidf>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d273:	52                   	push   edx
c000d274:	50                   	push   eax
c000d275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27d:	e8 f3 b9 01 00       	call   c0028c75 <__gedf2>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	85 c0                	test   eax,eax
c000d287:	0f 89 49 ff ff ff    	jns    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d28d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d291:	0f 8e ef 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a6:	e8 d1 b0 01 00       	call   c002837c <__subdf3>
c000d2ab:	83 c4 18             	add    esp,0x18
c000d2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 53 bb 01 00       	call   c0028e10 <fabs>
c000d2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2da:	e8 7a b9 01 00       	call   c0028c59 <__gtdf2>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	0f 8e 9c 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d2ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ed:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d300:	e8 77 b0 01 00       	call   c002837c <__subdf3>
c000d305:	59                   	pop    ecx
c000d306:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d30e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d311:	e8 f5 b6 01 00       	call   c0028a0b <__floatsidf>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d321:	52                   	push   edx
c000d322:	50                   	push   eax
c000d323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	e8 78 b0 01 00       	call   c00283a8 <__muldf3>
c000d330:	5f                   	pop    edi
c000d331:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d335:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d339:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33c:	e8 ca b6 01 00       	call   c0028a0b <__floatsidf>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34c:	52                   	push   edx
c000d34d:	50                   	push   eax
c000d34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d356:	e8 31 b3 01 00       	call   c002868c <__divdf3>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d362:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d376:	e8 b0 a9 01 00       	call   c0027d2b <__adddf3>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38c:	e8 7a b6 01 00       	call   c0028a0b <__floatsidf>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 c6 b8 01 00       	call   c0028c77 <__ltdf2>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c6:	78 10                	js     c000d3d8 <sinc_stereo_vari_process+0x512>
c000d3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	e8 bb af 01 00       	call   c00283a8 <__muldf3>
c000d3ed:	59                   	pop    ecx
c000d3ee:	5f                   	pop    edi
c000d3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3ff:	e8 d3 e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d404:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d408:	89 c7                	mov    edi,eax
c000d40a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d416:	e8 8d af 01 00       	call   c00283a8 <__muldf3>
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d426:	52                   	push   edx
c000d427:	50                   	push   eax
c000d428:	e8 aa e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d42d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d430:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43a:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43d:	50                   	push   eax
c000d43e:	50                   	push   eax
c000d43f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d442:	e8 c4 b5 01 00       	call   c0028a0b <__floatsidf>
c000d447:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	e8 28 b2 01 00       	call   c002868c <__divdf3>
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46f:	52                   	push   edx
c000d470:	89 fa                	mov    edx,edi
c000d472:	50                   	push   eax
c000d473:	89 d8                	mov    eax,ebx
c000d475:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d479:	e8 02 c7 ff ff       	call   c0009b80 <calc_output_stereo>
c000d47e:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d492:	e8 f5 b1 01 00       	call   c002868c <__divdf3>
c000d497:	83 c4 10             	add    esp,0x10
c000d49a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d49e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b2:	e8 74 a8 01 00       	call   c0027d2b <__adddf3>
c000d4b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	e8 61 b9 01 00       	call   c0028e30 <lrint>
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 33 b5 01 00       	call   c0028a0b <__floatsidf>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e3:	52                   	push   edx
c000d4e4:	50                   	push   eax
c000d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ed:	e8 8a ae 01 00       	call   c002837c <__subdf3>
c000d4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d509:	e8 69 b7 01 00       	call   c0028c77 <__ltdf2>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	85 c0                	test   eax,eax
c000d513:	79 20                	jns    c000d535 <sinc_stereo_vari_process+0x66f>
c000d515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 01 a8 01 00       	call   c0027d2b <__adddf3>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d535:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d538:	83 ec 10             	sub    esp,0x10
c000d53b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d53f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d552:	e8 25 ae 01 00       	call   c002837c <__subdf3>
c000d557:	83 c4 18             	add    esp,0x18
c000d55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	e8 c7 b8 01 00       	call   c0028e30 <lrint>
c000d569:	0f af f8             	imul   edi,eax
c000d56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	01 f8                	add    eax,edi
c000d575:	99                   	cdq    
c000d576:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d579:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57c:	e9 fd fb ff ff       	jmp    c000d17e <sinc_stereo_vari_process+0x2b8>
c000d581:	83 c4 4c             	add    esp,0x4c
c000d584:	89 d0                	mov    eax,edx
c000d586:	5b                   	pop    ebx
c000d587:	5e                   	pop    esi
c000d588:	5f                   	pop    edi
c000d589:	5d                   	pop    ebp
c000d58a:	c3                   	ret    

c000d58b <sinc_mono_vari_process>:
c000d58b:	55                   	push   ebp
c000d58c:	ba 05 00 00 00       	mov    edx,0x5
c000d591:	57                   	push   edi
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 4c             	sub    esp,0x4c
c000d597:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d59f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a2:	85 db                	test   ebx,ebx
c000d5a4:	0f 84 c1 06 00 00    	je     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d5aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b0:	0f af c7             	imul   eax,edi
c000d5b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c7:	0f af c7             	imul   eax,edi
c000d5ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5de:	68 00 00 70 3f       	push   0x3f700000
c000d5e3:	6a 00                	push   0x0
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ed:	e8 85 b6 01 00       	call   c0028c77 <__ltdf2>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 16 00 00 00       	mov    edx,0x16
c000d5fa:	85 c0                	test   eax,eax
c000d5fc:	0f 88 69 06 00 00    	js     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d602:	68 00 00 70 40       	push   0x40700000
c000d607:	6a 00                	push   0x0
c000d609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d611:	e8 43 b6 01 00       	call   c0028c59 <__gtdf2>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	ba 16 00 00 00       	mov    edx,0x16
c000d61e:	85 c0                	test   eax,eax
c000d620:	0f 8f 45 06 00 00    	jg     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62c:	e8 da b3 01 00       	call   c0028a0b <__floatsidf>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63c:	68 00 00 00 40       	push   0x40000000
c000d641:	6a 00                	push   0x0
c000d643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	e8 db a6 01 00       	call   c0027d2b <__adddf3>
c000d650:	59                   	pop    ecx
c000d651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d655:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65c:	e8 aa b3 01 00       	call   c0028a0b <__floatsidf>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	52                   	push   edx
c000d66d:	50                   	push   eax
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	e8 11 b0 01 00       	call   c002868c <__divdf3>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d686:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d689:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	e8 b0 b5 01 00       	call   c0028c59 <__gtdf2>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	85 c0                	test   eax,eax
c000d6ae:	7e 2d                	jle    c000d6dd <sinc_mono_vari_process+0x152>
c000d6b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b5:	6a 00                	push   0x0
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 b3 b5 01 00       	call   c0028c77 <__ltdf2>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	85 c0                	test   eax,eax
c000d6c9:	79 4d                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6db:	eb 1b                	jmp    c000d6f8 <sinc_mono_vari_process+0x16d>
c000d6dd:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e2:	6a 00                	push   0x0
c000d6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ec:	e8 86 b5 01 00       	call   c0028c77 <__ltdf2>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	79 20                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 7f af 01 00       	call   c002868c <__divdf3>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d714:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d718:	50                   	push   eax
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d722:	e8 09 b7 01 00       	call   c0028e30 <lrint>
c000d727:	40                   	inc    eax
c000d728:	0f af c7             	imul   eax,edi
c000d72b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d72f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d733:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d736:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d741:	58                   	pop    eax
c000d742:	5a                   	pop    edx
c000d743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d747:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74b:	e8 e0 b6 01 00       	call   c0028e30 <lrint>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	50                   	push   eax
c000d754:	e8 b2 b2 01 00       	call   c0028a0b <__floatsidf>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d764:	52                   	push   edx
c000d765:	50                   	push   eax
c000d766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76e:	e8 09 ac 01 00       	call   c002837c <__subdf3>
c000d773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77b:	83 c4 20             	add    esp,0x20
c000d77e:	6a 00                	push   0x0
c000d780:	6a 00                	push   0x0
c000d782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78a:	e8 e8 b4 01 00       	call   c0028c77 <__ltdf2>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	85 c0                	test   eax,eax
c000d794:	79 1f                	jns    c000d7b5 <sinc_mono_vari_process+0x22a>
c000d796:	68 00 00 f0 3f       	push   0x3ff00000
c000d79b:	6a 00                	push   0x0
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a5:	e8 81 a5 01 00       	call   c0027d2b <__adddf3>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b5:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bb:	83 ec 10             	sub    esp,0x10
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ce:	e8 a9 ab 01 00       	call   c002837c <__subdf3>
c000d7d3:	83 c4 18             	add    esp,0x18
c000d7d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7de:	52                   	push   edx
c000d7df:	50                   	push   eax
c000d7e0:	e8 4b b6 01 00       	call   c0028e30 <lrint>
c000d7e5:	0f af f8             	imul   edi,eax
c000d7e8:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f2:	99                   	cdq    
c000d7f3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d801:	55                   	push   ebp
c000d802:	57                   	push   edi
c000d803:	e8 84 ae 01 00       	call   c002868c <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d818:	68 23 42 92 0c       	push   0xc924223
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d825:	e8 01 a5 01 00       	call   c0027d2b <__adddf3>
c000d82a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d82e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d832:	83 c4 20             	add    esp,0x20
c000d835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d840:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d843:	7d 54                	jge    c000d899 <sinc_mono_vari_process+0x30e>
c000d845:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d848:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84b:	01 c8                	add    eax,ecx
c000d84d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d850:	99                   	cdq    
c000d851:	f7 f9                	idiv   ecx
c000d853:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d857:	7d 0c                	jge    c000d865 <sinc_mono_vari_process+0x2da>
c000d859:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85c:	85 ff                	test   edi,edi
c000d85e:	79 73                	jns    c000d8d3 <sinc_mono_vari_process+0x348>
c000d860:	e9 ee 00 00 00       	jmp    c000d953 <sinc_mono_vari_process+0x3c8>
c000d865:	50                   	push   eax
c000d866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	e8 8d e0 ff ff       	call   c000b8fe <prepare_data>
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87d:	85 d2                	test   edx,edx
c000d87f:	0f 85 e6 03 00 00    	jne    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d885:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d888:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88b:	01 c8                	add    eax,ecx
c000d88d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d890:	99                   	cdq    
c000d891:	f7 f9                	idiv   ecx
c000d893:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d897:	7c c0                	jl     c000d859 <sinc_mono_vari_process+0x2ce>
c000d899:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b3:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bb:	99                   	cdq    
c000d8bc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c5:	99                   	cdq    
c000d8c6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ce:	e9 98 03 00 00       	jmp    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d9:	e8 2d b1 01 00       	call   c0028a0b <__floatsidf>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f9:	e8 2d a4 01 00       	call   c0027d2b <__adddf3>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	e8 0d a4 01 00       	call   c0027d2b <__adddf3>
c000d91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d925:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d929:	e8 dd b0 01 00       	call   c0028a0b <__floatsidf>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d935:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d939:	52                   	push   edx
c000d93a:	50                   	push   eax
c000d93b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d943:	e8 11 b3 01 00       	call   c0028c59 <__gtdf2>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	85 c0                	test   eax,eax
c000d94d:	0f 8f 46 ff ff ff    	jg     c000d899 <sinc_mono_vari_process+0x30e>
c000d953:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d957:	0f 8e f5 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d95d:	83 ec 10             	sub    esp,0x10
c000d960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d963:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d966:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96d:	ff 30                	push   DWORD PTR [eax]
c000d96f:	e8 08 aa 01 00       	call   c002837c <__subdf3>
c000d974:	83 c4 18             	add    esp,0x18
c000d977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d97f:	52                   	push   edx
c000d980:	50                   	push   eax
c000d981:	e8 8a b4 01 00       	call   c0028e10 <fabs>
c000d986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d996:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a3:	e8 b1 b2 01 00       	call   c0028c59 <__gtdf2>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	0f 8e 9f 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d9b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c4:	52                   	push   edx
c000d9c5:	50                   	push   eax
c000d9c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9cc:	e8 ab a9 01 00       	call   c002837c <__subdf3>
c000d9d1:	5f                   	pop    edi
c000d9d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9da:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9dd:	e8 29 b0 01 00       	call   c0028a0b <__floatsidf>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ed:	52                   	push   edx
c000d9ee:	50                   	push   eax
c000d9ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	e8 ac a9 01 00       	call   c00283a8 <__muldf3>
c000d9fc:	5d                   	pop    ebp
c000d9fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da05:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da08:	e8 fe af 01 00       	call   c0028a0b <__floatsidf>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da18:	52                   	push   edx
c000da19:	50                   	push   eax
c000da1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da22:	e8 65 ac 01 00       	call   c002868c <__divdf3>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da42:	e8 e4 a2 01 00       	call   c0027d2b <__adddf3>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da58:	e8 ae af 01 00       	call   c0028a0b <__floatsidf>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 fa b1 01 00       	call   c0028c77 <__ltdf2>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	85 c0                	test   eax,eax
c000da82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da8e:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da92:	78 10                	js     c000daa4 <sinc_mono_vari_process+0x519>
c000da94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	e8 ef a8 01 00       	call   c00283a8 <__muldf3>
c000dab9:	59                   	pop    ecx
c000daba:	5f                   	pop    edi
c000dabb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dabf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacb:	e8 07 de ff ff       	call   c000b8d7 <double_to_fp>
c000dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae2:	e8 c1 a8 01 00       	call   c00283a8 <__muldf3>
c000dae7:	83 c4 18             	add    esp,0x18
c000daea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf2:	52                   	push   edx
c000daf3:	50                   	push   eax
c000daf4:	e8 de dd ff ff       	call   c000b8d7 <double_to_fp>
c000daf9:	83 ec 0c             	sub    esp,0xc
c000dafc:	89 c5                	mov    ebp,eax
c000dafe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db01:	e8 05 af 01 00       	call   c0028a0b <__floatsidf>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db11:	52                   	push   edx
c000db12:	50                   	push   eax
c000db13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1b:	e8 6c ab 01 00       	call   c002868c <__divdf3>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	89 e9                	mov    ecx,ebp
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	89 fa                	mov    edx,edi
c000db31:	e8 ee bd ff ff       	call   c0009924 <calc_output_single>
c000db36:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db39:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db44:	52                   	push   edx
c000db45:	50                   	push   eax
c000db46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4e:	e8 55 a8 01 00       	call   c00283a8 <__muldf3>
c000db53:	59                   	pop    ecx
c000db54:	59                   	pop    ecx
c000db55:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db59:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db65:	e8 11 b1 01 00       	call   c0028c7b <__truncdfsf2>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db70:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db83:	e8 04 ab 01 00       	call   c002868c <__divdf3>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba3:	e8 83 a1 01 00       	call   c0027d2b <__adddf3>
c000dba8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb0:	83 c4 18             	add    esp,0x18
c000dbb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbb:	e8 70 b2 01 00       	call   c0028e30 <lrint>
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	50                   	push   eax
c000dbc4:	e8 42 ae 01 00       	call   c0028a0b <__floatsidf>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd4:	52                   	push   edx
c000dbd5:	50                   	push   eax
c000dbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbde:	e8 99 a7 01 00       	call   c002837c <__subdf3>
c000dbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbeb:	83 c4 20             	add    esp,0x20
c000dbee:	6a 00                	push   0x0
c000dbf0:	6a 00                	push   0x0
c000dbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfa:	e8 78 b0 01 00       	call   c0028c77 <__ltdf2>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	85 c0                	test   eax,eax
c000dc04:	79 20                	jns    c000dc26 <sinc_mono_vari_process+0x69b>
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 10 a1 01 00       	call   c0027d2b <__adddf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc26:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc29:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2c:	83 ec 10             	sub    esp,0x10
c000dc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3f:	e8 38 a7 01 00       	call   c002837c <__subdf3>
c000dc44:	83 c4 18             	add    esp,0x18
c000dc47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc4f:	52                   	push   edx
c000dc50:	50                   	push   eax
c000dc51:	e8 da b1 01 00       	call   c0028e30 <lrint>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	0f af f8             	imul   edi,eax
c000dc5c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc5f:	99                   	cdq    
c000dc60:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc63:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc66:	e9 d2 fb ff ff       	jmp    c000d83d <sinc_mono_vari_process+0x2b2>
c000dc6b:	83 c4 4c             	add    esp,0x4c
c000dc6e:	89 d0                	mov    eax,edx
c000dc70:	5b                   	pop    ebx
c000dc71:	5e                   	pop    esi
c000dc72:	5f                   	pop    edi
c000dc73:	5d                   	pop    ebp
c000dc74:	c3                   	ret    

c000dc75 <sinc_get_name>:
c000dc75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	83 fa 02             	cmp    edx,0x2
c000dc7e:	77 07                	ja     c000dc87 <sinc_get_name+0x12>
c000dc80:	8b 04 95 04 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58fc]
c000dc87:	c3                   	ret    

c000dc88 <sinc_get_description>:
c000dc88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8c:	31 c0                	xor    eax,eax
c000dc8e:	83 fa 02             	cmp    edx,0x2
c000dc91:	77 07                	ja     c000dc9a <sinc_get_description+0x12>
c000dc93:	8b 04 95 f8 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5908]
c000dc9a:	c3                   	ret    

c000dc9b <sinc_set_converter>:
c000dc9b:	53                   	push   ebx
c000dc9c:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcac:	85 c0                	test   eax,eax
c000dcae:	74 13                	je     c000dcc3 <sinc_set_converter+0x28>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	50                   	push   eax
c000dcb4:	e8 6b 1c 00 00       	call   c000f924 <free>
c000dcb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	50                   	push   eax
c000dcc4:	68 44 08 00 00       	push   0x844
c000dcc9:	6a 00                	push   0x0
c000dccb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccf:	50                   	push   eax
c000dcd0:	e8 ab 2a ff ff       	call   c0000780 <memset>
c000dcd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd8:	83 c4 10             	add    esp,0x10
c000dcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000dce0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce6:	7f 6e                	jg     c000dd56 <sinc_set_converter+0xbb>
c000dce8:	83 fa 01             	cmp    edx,0x1
c000dceb:	75 10                	jne    c000dcfd <sinc_set_converter+0x62>
c000dced:	c7 43 24 8b d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58b
c000dcf4:	c7 43 20 8b d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58b
c000dcfb:	eb 4d                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dcfd:	83 fa 02             	cmp    edx,0x2
c000dd00:	75 10                	jne    c000dd12 <sinc_set_converter+0x77>
c000dd02:	c7 43 24 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec6
c000dd09:	c7 43 20 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec6
c000dd10:	eb 38                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd12:	83 fa 04             	cmp    edx,0x4
c000dd15:	75 10                	jne    c000dd27 <sinc_set_converter+0x8c>
c000dd17:	c7 43 24 01 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c801
c000dd1e:	c7 43 20 01 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c801
c000dd25:	eb 23                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd27:	83 fa 06             	cmp    edx,0x6
c000dd2a:	75 10                	jne    c000dd3c <sinc_set_converter+0xa1>
c000dd2c:	c7 43 24 3c c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13c
c000dd33:	c7 43 20 3c c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13c
c000dd3a:	eb 0e                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd3c:	c7 43 24 78 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba78
c000dd43:	c7 43 20 78 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba78
c000dd4a:	c7 43 28 2b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2b
c000dd51:	b8 0a 00 00 00       	mov    eax,0xa
c000dd56:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <zoh_vari_process>:
c000dd5e:	55                   	push   ebp
c000dd5f:	31 d2                	xor    edx,edx
c000dd61:	57                   	push   edi
c000dd62:	56                   	push   esi
c000dd63:	53                   	push   ebx
c000dd64:	83 ec 3c             	sub    esp,0x3c
c000dd67:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd6f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd73:	0f 8e 80 06 00 00    	jle    c000e3f9 <zoh_vari_process+0x69b>
c000dd79:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7c:	ba 05 00 00 00       	mov    edx,0x5
c000dd81:	85 db                	test   ebx,ebx
c000dd83:	0f 84 70 06 00 00    	je     c000e3f9 <zoh_vari_process+0x69b>
c000dd89:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd90:	74 19                	je     c000ddab <zoh_vari_process+0x4d>
c000dd92:	31 d2                	xor    edx,edx
c000dd94:	39 c2                	cmp    edx,eax
c000dd96:	7d 0c                	jge    c000dda4 <zoh_vari_process+0x46>
c000dd98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9a:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9d:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda1:	42                   	inc    edx
c000dda2:	eb f0                	jmp    c000dd94 <zoh_vari_process+0x36>
c000dda4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddab:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddae:	0f af d0             	imul   edx,eax
c000ddb1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddbf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd6:	68 00 00 70 3f       	push   0x3f700000
c000dddb:	6a 00                	push   0x0
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde5:	e8 8d ae 01 00       	call   c0028c77 <__ltdf2>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	ba 16 00 00 00       	mov    edx,0x16
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	0f 88 ff 05 00 00    	js     c000e3f9 <zoh_vari_process+0x69b>
c000ddfa:	68 00 00 70 40       	push   0x40700000
c000ddff:	6a 00                	push   0x0
c000de01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de09:	e8 4b ae 01 00       	call   c0028c59 <__gtdf2>
c000de0e:	83 c4 10             	add    esp,0x10
c000de11:	ba 16 00 00 00       	mov    edx,0x16
c000de16:	85 c0                	test   eax,eax
c000de18:	0f 8f db 05 00 00    	jg     c000e3f9 <zoh_vari_process+0x69b>
c000de1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de21:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2c:	68 00 00 f0 3f       	push   0x3ff00000
c000de31:	6a 00                	push   0x0
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 37 ae 01 00       	call   c0028c77 <__ltdf2>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	85 c0                	test   eax,eax
c000de45:	0f 89 da 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000de4b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de4e:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de51:	0f 8d ce 01 00 00    	jge    c000e025 <zoh_vari_process+0x2c7>
c000de57:	83 ec 0c             	sub    esp,0xc
c000de5a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5d:	e8 a9 ab 01 00       	call   c0028a0b <__floatsidf>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 27 a5 01 00       	call   c00283a8 <__muldf3>
c000de81:	59                   	pop    ecx
c000de82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8d:	e8 79 ab 01 00       	call   c0028a0b <__floatsidf>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	e8 7f 9e 01 00       	call   c0027d2b <__adddf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb8:	e8 4e ab 01 00       	call   c0028a0b <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dece:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded2:	e8 9e ad 01 00       	call   c0028c75 <__gedf2>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	85 c0                	test   eax,eax
c000dedc:	0f 89 43 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000dee2:	85 ed                	test   ebp,ebp
c000dee4:	0f 8e ec 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def3:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def6:	ff 37                	push   DWORD PTR [edi]
c000def8:	e8 7f a4 01 00       	call   c002837c <__subdf3>
c000defd:	83 c4 18             	add    esp,0x18
c000df00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df08:	52                   	push   edx
c000df09:	50                   	push   eax
c000df0a:	e8 01 af 01 00       	call   c0028e10 <fabs>
c000df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df1f:	68 23 42 92 0c       	push   0xc924223
c000df24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2c:	e8 28 ad 01 00       	call   c0028c59 <__gtdf2>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 8e 9a 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000df3c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df3e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df41:	89 04 24             	mov    DWORD PTR [esp],eax
c000df44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df48:	52                   	push   edx
c000df49:	50                   	push   eax
c000df4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df50:	e8 27 a4 01 00       	call   c002837c <__subdf3>
c000df55:	59                   	pop    ecx
c000df56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df61:	e8 a5 aa 01 00       	call   c0028a0b <__floatsidf>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df71:	52                   	push   edx
c000df72:	50                   	push   eax
c000df73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	e8 28 a4 01 00       	call   c00283a8 <__muldf3>
c000df80:	5d                   	pop    ebp
c000df81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8c:	e8 7a aa 01 00       	call   c0028a0b <__floatsidf>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9c:	52                   	push   edx
c000df9d:	50                   	push   eax
c000df9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa6:	e8 e1 a6 01 00       	call   c002868c <__divdf3>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc6:	e8 60 9d 01 00       	call   c0027d2b <__adddf3>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd6:	31 c0                	xor    eax,eax
c000dfd8:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdb:	7e 13                	jle    c000dff0 <zoh_vari_process+0x292>
c000dfdd:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe7:	40                   	inc    eax
c000dfe8:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfeb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfee:	eb e8                	jmp    c000dfd8 <zoh_vari_process+0x27a>
c000dff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff8:	68 00 00 f0 3f       	push   0x3ff00000
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 88 a6 01 00       	call   c002868c <__divdf3>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e00e:	52                   	push   edx
c000e00f:	50                   	push   eax
c000e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	e8 0e 9d 01 00       	call   c0027d2b <__adddf3>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 ff fd ff ff       	jmp    c000de24 <zoh_vari_process+0xc6>
c000e025:	55                   	push   ebp
c000e026:	55                   	push   ebp
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 fc ad 01 00       	call   c0028e30 <lrint>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 ce a9 01 00       	call   c0028a0b <__floatsidf>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e044:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e048:	52                   	push   edx
c000e049:	50                   	push   eax
c000e04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e052:	e8 25 a3 01 00       	call   c002837c <__subdf3>
c000e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	6a 00                	push   0x0
c000e064:	6a 00                	push   0x0
c000e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06e:	e8 04 ac 01 00       	call   c0028c77 <__ltdf2>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	79 1e                	jns    c000e098 <zoh_vari_process+0x33a>
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e089:	e8 9d 9c 01 00       	call   c0027d2b <__adddf3>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 04 24             	mov    DWORD PTR [esp],eax
c000e094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e098:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09b:	83 ec 10             	sub    esp,0x10
c000e09e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ae:	e8 c9 a2 01 00       	call   c002837c <__subdf3>
c000e0b3:	83 c4 18             	add    esp,0x18
c000e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0be:	52                   	push   edx
c000e0bf:	50                   	push   eax
c000e0c0:	e8 6b ad 01 00       	call   c0028e30 <lrint>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	0f af e8             	imul   ebp,eax
c000e0cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ce:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e2:	0f 8d 7a 02 00 00    	jge    c000e362 <zoh_vari_process+0x604>
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 18 a9 01 00       	call   c0028a0b <__floatsidf>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	e8 95 a2 01 00       	call   c00283a8 <__muldf3>
c000e113:	59                   	pop    ecx
c000e114:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e118:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e120:	e8 e6 a8 01 00       	call   c0028a0b <__floatsidf>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e130:	52                   	push   edx
c000e131:	50                   	push   eax
c000e132:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	e8 ec 9b 01 00       	call   c0027d2b <__adddf3>
c000e13f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14a:	e8 bc a8 01 00       	call   c0028a0b <__floatsidf>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e156:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15a:	52                   	push   edx
c000e15b:	50                   	push   eax
c000e15c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e164:	e8 10 ab 01 00       	call   c0028c79 <__ledf2>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	85 c0                	test   eax,eax
c000e16e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e172:	0f 8f ea 01 00 00    	jg     c000e362 <zoh_vari_process+0x604>
c000e178:	85 c9                	test   ecx,ecx
c000e17a:	0f 8e ed 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e180:	83 ec 10             	sub    esp,0x10
c000e183:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e186:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e189:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18c:	ff 37                	push   DWORD PTR [edi]
c000e18e:	e8 e9 a1 01 00       	call   c002837c <__subdf3>
c000e193:	83 c4 18             	add    esp,0x18
c000e196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e19e:	52                   	push   edx
c000e19f:	50                   	push   eax
c000e1a0:	e8 6b ac 01 00       	call   c0028e10 <fabs>
c000e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b5:	68 23 42 92 0c       	push   0xc924223
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	e8 92 aa 01 00       	call   c0028c59 <__gtdf2>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	85 c0                	test   eax,eax
c000e1cc:	0f 8e 9b 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e7:	e8 90 a1 01 00       	call   c002837c <__subdf3>
c000e1ec:	5d                   	pop    ebp
c000e1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f8:	e8 0e a8 01 00       	call   c0028a0b <__floatsidf>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e208:	52                   	push   edx
c000e209:	50                   	push   eax
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	e8 91 a1 01 00       	call   c00283a8 <__muldf3>
c000e217:	59                   	pop    ecx
c000e218:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e220:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e223:	e8 e3 a7 01 00       	call   c0028a0b <__floatsidf>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23d:	e8 4a a4 01 00       	call   c002868c <__divdf3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25d:	e8 c9 9a 01 00       	call   c0027d2b <__adddf3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26d:	31 d2                	xor    edx,edx
c000e26f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e272:	39 d0                	cmp    eax,edx
c000e274:	7e 1d                	jle    c000e293 <zoh_vari_process+0x535>
c000e276:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e279:	29 c1                	sub    ecx,eax
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e27f:	01 d0                	add    eax,edx
c000e281:	42                   	inc    edx
c000e282:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e285:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28b:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e28e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e291:	eb dc                	jmp    c000e26f <zoh_vari_process+0x511>
c000e293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e297:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29b:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a0:	6a 00                	push   0x0
c000e2a2:	e8 e5 a3 01 00       	call   c002868c <__divdf3>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 64 9a 01 00       	call   c0027d2b <__adddf3>
c000e2c7:	5d                   	pop    ebp
c000e2c8:	59                   	pop    ecx
c000e2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d9:	e8 52 ab 01 00       	call   c0028e30 <lrint>
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 24 a7 01 00       	call   c0028a0b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f2:	52                   	push   edx
c000e2f3:	50                   	push   eax
c000e2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fc:	e8 7b a0 01 00       	call   c002837c <__subdf3>
c000e301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e305:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	6a 00                	push   0x0
c000e30e:	6a 00                	push   0x0
c000e310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e314:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e318:	e8 5a a9 01 00       	call   c0028c77 <__ltdf2>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	79 1e                	jns    c000e342 <zoh_vari_process+0x5e4>
c000e324:	68 00 00 f0 3f       	push   0x3ff00000
c000e329:	6a 00                	push   0x0
c000e32b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e333:	e8 f3 99 01 00       	call   c0027d2b <__adddf3>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e33e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e342:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e345:	83 ec 10             	sub    esp,0x10
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	e8 1f a0 01 00       	call   c002837c <__subdf3>
c000e35d:	e9 51 fd ff ff       	jmp    c000e0b3 <zoh_vari_process+0x355>
c000e362:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e366:	7d 3a                	jge    c000e3a2 <zoh_vari_process+0x644>
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	29 e8                	sub    eax,ebp
c000e371:	99                   	cdq    
c000e372:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e375:	50                   	push   eax
c000e376:	e8 90 a6 01 00       	call   c0028a0b <__floatsidf>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e386:	52                   	push   edx
c000e387:	50                   	push   eax
c000e388:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e390:	e8 96 99 01 00       	call   c0027d2b <__adddf3>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a9:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ac:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	7f 25                	jg     c000e3db <zoh_vari_process+0x67d>
c000e3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3be:	89 07                	mov    DWORD PTR [edi],eax
c000e3c0:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c6:	99                   	cdq    
c000e3c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d0:	99                   	cdq    
c000e3d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d4:	31 d2                	xor    edx,edx
c000e3d6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d9:	eb 1e                	jmp    c000e3f9 <zoh_vari_process+0x69b>
c000e3db:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3de:	31 d2                	xor    edx,edx
c000e3e0:	29 c8                	sub    eax,ecx
c000e3e2:	c1 e0 02             	shl    eax,0x2
c000e3e5:	39 d1                	cmp    ecx,edx
c000e3e7:	7e cd                	jle    c000e3b6 <zoh_vari_process+0x658>
c000e3e9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3eb:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ef:	83 c0 04             	add    eax,0x4
c000e3f2:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f6:	42                   	inc    edx
c000e3f7:	eb ec                	jmp    c000e3e5 <zoh_vari_process+0x687>
c000e3f9:	83 c4 3c             	add    esp,0x3c
c000e3fc:	89 d0                	mov    eax,edx
c000e3fe:	5b                   	pop    ebx
c000e3ff:	5e                   	pop    esi
c000e400:	5f                   	pop    edi
c000e401:	5d                   	pop    ebp
c000e402:	c3                   	ret    

c000e403 <zoh_reset>:
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40d:	85 c0                	test   eax,eax
c000e40f:	74 20                	je     c000e431 <zoh_reset+0x2e>
c000e411:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e414:	83 c0 1c             	add    eax,0x1c
c000e417:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e421:	c1 e2 02             	shl    edx,0x2
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	6a 00                	push   0x0
c000e428:	50                   	push   eax
c000e429:	e8 52 23 ff ff       	call   c0000780 <memset>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    

c000e435 <zoh_get_name>:
c000e435:	31 c0                	xor    eax,eax
c000e437:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43c:	75 05                	jne    c000e443 <zoh_get_name+0xe>
c000e43e:	b8 1e a8 02 c0       	mov    eax,0xc002a81e
c000e443:	c3                   	ret    

c000e444 <zoh_get_description>:
c000e444:	31 c0                	xor    eax,eax
c000e446:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44b:	75 05                	jne    c000e452 <zoh_get_description+0xe>
c000e44d:	b8 2f a8 02 c0       	mov    eax,0xc002a82f
c000e452:	c3                   	ret    

c000e453 <zoh_set_converter>:
c000e453:	53                   	push   ebx
c000e454:	b8 0a 00 00 00       	mov    eax,0xa
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e465:	75 6e                	jne    c000e4d5 <zoh_set_converter+0x82>
c000e467:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46a:	85 c0                	test   eax,eax
c000e46c:	74 13                	je     c000e481 <zoh_set_converter+0x2e>
c000e46e:	83 ec 0c             	sub    esp,0xc
c000e471:	50                   	push   eax
c000e472:	e8 ad 14 00 00       	call   c000f924 <free>
c000e477:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	50                   	push   eax
c000e482:	50                   	push   eax
c000e483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e486:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48d:	50                   	push   eax
c000e48e:	6a 01                	push   0x1
c000e490:	e8 af 14 00 00       	call   c000f944 <calloc>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	89 c2                	mov    edx,eax
c000e49a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49d:	85 d2                	test   edx,edx
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	74 2f                	je     c000e4d5 <zoh_set_converter+0x82>
c000e4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4af:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b5:	c7 43 24 5e dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd5e
c000e4bc:	c7 43 20 5e dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd5e
c000e4c3:	c7 43 28 03 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e403
c000e4ca:	53                   	push   ebx
c000e4cb:	e8 33 ff ff ff       	call   c000e403 <zoh_reset>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	31 c0                	xor    eax,eax
c000e4d5:	83 c4 08             	add    esp,0x8
c000e4d8:	5b                   	pop    ebx
c000e4d9:	c3                   	ret    

c000e4da <CPU::current()>:
c000e4da:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000e4df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e5:	90                   	nop
c000e4e6:	c3                   	ret    

c000e4e7 <operator new(unsigned long)>:
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f1:	e8 1e 14 00 00       	call   c000f914 <malloc>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	83 c4 0c             	add    esp,0xc
c000e4fc:	c3                   	ret    

c000e4fd <operator delete(void*)>:
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	83 ec 0c             	sub    esp,0xc
c000e503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e507:	e8 28 14 00 00       	call   c000f934 <rfree>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	90                   	nop
c000e510:	83 c4 0c             	add    esp,0xc
c000e513:	c3                   	ret    

c000e514 <disableIRQs()>:
c000e514:	fa                   	cli    
c000e515:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e51a:	40                   	inc    eax
c000e51b:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e520:	90                   	nop
c000e521:	c3                   	ret    

c000e522 <enableIRQs()>:
c000e522:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e527:	48                   	dec    eax
c000e528:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e52d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e532:	85 c0                	test   eax,eax
c000e534:	75 01                	jne    c000e537 <enableIRQs()+0x15>
c000e536:	fb                   	sti    
c000e537:	90                   	nop
c000e538:	c3                   	ret    

c000e539 <lockScheduler()>:
c000e539:	fa                   	cli    
c000e53a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e53f:	40                   	inc    eax
c000e540:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e545:	90                   	nop
c000e546:	c3                   	ret    

c000e547 <unlockScheduler()>:
c000e547:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e54c:	48                   	dec    eax
c000e54d:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e552:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e557:	85 c0                	test   eax,eax
c000e559:	75 01                	jne    c000e55c <unlockScheduler()+0x15>
c000e55b:	fb                   	sti    
c000e55c:	90                   	nop
c000e55d:	c3                   	ret    

c000e55e <lockStuff()>:
c000e55e:	fa                   	cli    
c000e55f:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e564:	40                   	inc    eax
c000e565:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e56a:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c000e56f:	40                   	inc    eax
c000e570:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c000e575:	90                   	nop
c000e576:	c3                   	ret    

c000e577 <unlockStuff()>:
c000e577:	83 ec 0c             	sub    esp,0xc
c000e57a:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c000e57f:	48                   	dec    eax
c000e580:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c000e585:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c000e58a:	85 c0                	test   eax,eax
c000e58c:	75 18                	jne    c000e5a6 <unlockStuff()+0x2f>
c000e58e:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c000e593:	85 c0                	test   eax,eax
c000e595:	74 0f                	je     c000e5a6 <unlockStuff()+0x2f>
c000e597:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c000e5a1:	e8 d8 fe 00 00       	call   c001e47e <schedule()>
c000e5a6:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e5ab:	48                   	dec    eax
c000e5ac:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e5b1:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e5b6:	85 c0                	test   eax,eax
c000e5b8:	75 01                	jne    c000e5bb <unlockStuff()+0x44>
c000e5ba:	fb                   	sti    
c000e5bb:	90                   	nop
c000e5bc:	83 c4 0c             	add    esp,0xc
c000e5bf:	c3                   	ret    

c000e5c0 <Virt::getAKernelVAS()>:
c000e5c0:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c000e5c5:	90                   	nop
c000e5c6:	c3                   	ret    

c000e5c7 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e5c7:	83 ec 0c             	sub    esp,0xc
c000e5ca:	83 ec 08             	sub    esp,0x8
c000e5cd:	68 66 a8 02 c0       	push   0xc002a866
c000e5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5d6:	e8 ed 22 ff ff       	call   c00008c8 <strcmp>
c000e5db:	83 c4 10             	add    esp,0x10
c000e5de:	85 c0                	test   eax,eax
c000e5e0:	0f 94 c0             	sete   al
c000e5e3:	84 c0                	test   al,al
c000e5e5:	74 0a                	je     c000e5f1 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e5e7:	b8 28 ee 02 c0       	mov    eax,0xc002ee28
c000e5ec:	e9 e3 00 00 00       	jmp    c000e6d4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5f1:	83 ec 08             	sub    esp,0x8
c000e5f4:	68 6f a8 02 c0       	push   0xc002a86f
c000e5f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5fd:	e8 c6 22 ff ff       	call   c00008c8 <strcmp>
c000e602:	83 c4 10             	add    esp,0x10
c000e605:	85 c0                	test   eax,eax
c000e607:	0f 94 c0             	sete   al
c000e60a:	84 c0                	test   al,al
c000e60c:	74 0a                	je     c000e618 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e60e:	b8 a4 71 02 c0       	mov    eax,0xc00271a4
c000e613:	e9 bc 00 00 00       	jmp    c000e6d4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e618:	83 ec 08             	sub    esp,0x8
c000e61b:	68 79 a8 02 c0       	push   0xc002a879
c000e620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e624:	e8 9f 22 ff ff       	call   c00008c8 <strcmp>
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	85 c0                	test   eax,eax
c000e62e:	0f 94 c0             	sete   al
c000e631:	84 c0                	test   al,al
c000e633:	74 0a                	je     c000e63f <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e635:	b8 d8 6e 02 c0       	mov    eax,0xc0026ed8
c000e63a:	e9 95 00 00 00       	jmp    c000e6d4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e63f:	83 ec 08             	sub    esp,0x8
c000e642:	68 82 a8 02 c0       	push   0xc002a882
c000e647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e64b:	e8 78 22 ff ff       	call   c00008c8 <strcmp>
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	85 c0                	test   eax,eax
c000e655:	0f 94 c0             	sete   al
c000e658:	84 c0                	test   al,al
c000e65a:	74 07                	je     c000e663 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e65c:	b8 a4 72 02 c0       	mov    eax,0xc00272a4
c000e661:	eb 71                	jmp    c000e6d4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e663:	83 ec 08             	sub    esp,0x8
c000e666:	68 8c a8 02 c0       	push   0xc002a88c
c000e66b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e66f:	e8 54 22 ff ff       	call   c00008c8 <strcmp>
c000e674:	83 c4 10             	add    esp,0x10
c000e677:	85 c0                	test   eax,eax
c000e679:	0f 94 c0             	sete   al
c000e67c:	84 c0                	test   al,al
c000e67e:	74 07                	je     c000e687 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e680:	b8 24 70 02 c0       	mov    eax,0xc0027024
c000e685:	eb 4d                	jmp    c000e6d4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e687:	83 ec 08             	sub    esp,0x8
c000e68a:	68 95 a8 02 c0       	push   0xc002a895
c000e68f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e693:	e8 30 22 ff ff       	call   c00008c8 <strcmp>
c000e698:	83 c4 10             	add    esp,0x10
c000e69b:	85 c0                	test   eax,eax
c000e69d:	0f 94 c0             	sete   al
c000e6a0:	84 c0                	test   al,al
c000e6a2:	74 07                	je     c000e6ab <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e6a4:	b8 2c ee 02 c0       	mov    eax,0xc002ee2c
c000e6a9:	eb 29                	jmp    c000e6d4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6ab:	83 ec 08             	sub    esp,0x8
c000e6ae:	68 a2 a8 02 c0       	push   0xc002a8a2
c000e6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6b7:	e8 0c 22 ff ff       	call   c00008c8 <strcmp>
c000e6bc:	83 c4 10             	add    esp,0x10
c000e6bf:	85 c0                	test   eax,eax
c000e6c1:	0f 94 c0             	sete   al
c000e6c4:	84 c0                	test   al,al
c000e6c6:	74 07                	je     c000e6cf <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e6c8:	b8 2d ee 02 c0       	mov    eax,0xc002ee2d
c000e6cd:	eb 05                	jmp    c000e6d4 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6cf:	b8 00 00 00 00       	mov    eax,0x0
c000e6d4:	83 c4 0c             	add    esp,0xc
c000e6d7:	c3                   	ret    

c000e6d8 <Computer::close(int, int, void*)>:
c000e6d8:	57                   	push   edi
c000e6d9:	56                   	push   esi
c000e6da:	53                   	push   ebx
c000e6db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e6e7:	83 ec 0c             	sub    esp,0xc
c000e6ea:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e6f0:	e8 81 5d 00 00       	call   c0014476 <Device::closeAll()>
c000e6f5:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e6fb:	83 c4 10             	add    esp,0x10
c000e6fe:	8b 10                	mov    edx,DWORD PTR [eax]
c000e700:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e704:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e70c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e710:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e714:	5b                   	pop    ebx
c000e715:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e718:	5e                   	pop    esi
c000e719:	5f                   	pop    edi
c000e71a:	ff e0                	jmp    eax

c000e71c <Krnl::firstTask()>:
c000e71c:	53                   	push   ebx
c000e71d:	83 ec 14             	sub    esp,0x14
c000e720:	fb                   	sti    
c000e721:	68 3f 07 00 00       	push   0x73f
c000e726:	e8 e9 11 00 00       	call   c000f914 <malloc>
c000e72b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e732:	89 c3                	mov    ebx,eax
c000e734:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c000e73a:	68 af a8 02 c0       	push   0xc002a8af
c000e73f:	6a 01                	push   0x1
c000e741:	50                   	push   eax
c000e742:	e8 fb f8 00 00       	call   c001e042 <Process::Process(bool, char const*, Process*, char**)>
c000e747:	83 c4 20             	add    esp,0x20
c000e74a:	68 ff 00 00 00       	push   0xff
c000e74f:	6a 00                	push   0x0
c000e751:	68 a7 f2 00 c0       	push   0xc000f2a7
c000e756:	53                   	push   ebx
c000e757:	e8 de fa 00 00       	call   c001e23a <Process::createThread(void (*)(void*), void*, int)>
c000e75c:	6a 7a                	push   0x7a
c000e75e:	6a 00                	push   0x0
c000e760:	68 b8 ec 01 c0       	push   0xc001ecb8
c000e765:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c000e76b:	e8 ca fa 00 00       	call   c001e23a <Process::createThread(void (*)(void*), void*, int)>
c000e770:	83 c4 20             	add    esp,0x20
c000e773:	a3 48 23 03 c0       	mov    ds:0xc0032348,eax
c000e778:	c6 05 2d ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee2d,0x1
c000e77f:	e8 88 09 01 00       	call   c001f10c <Vm::initialise8086()>
c000e784:	e8 cd 4a 00 00       	call   c0013256 <Fs::initVFS()>
c000e789:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000e78e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e794:	8b 10                	mov    edx,DWORD PTR [eax]
c000e796:	6a 00                	push   0x0
c000e798:	6a 00                	push   0x0
c000e79a:	6a 00                	push   0x0
c000e79c:	50                   	push   eax
c000e79d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e7a0:	e8 2b e1 00 00       	call   c001c8d0 <Sys::loadSyscalls()>
c000e7a5:	e8 a4 bf 00 00       	call   c001a74e <Krnl::loadSystemEnv()>
c000e7aa:	83 c4 0c             	add    esp,0xc
c000e7ad:	6a 3a                	push   0x3a
c000e7af:	68 bc a8 02 c0       	push   0xc002a8bc
c000e7b4:	68 c5 a8 02 c0       	push   0xc002a8c5
c000e7b9:	e8 b6 cc 00 00       	call   c001b474 <Reg::readIntWithDefault(char*, char*, int)>
c000e7be:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7c1:	e8 80 55 00 00       	call   c0013d46 <User::loadClockSettings(int)>
c000e7c6:	58                   	pop    eax
c000e7c7:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000e7cc:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e7d2:	e8 73 5c 00 00       	call   c001444a <Device::loadDriversForAll()>
c000e7d7:	e8 b8 ba 00 00       	call   c001a294 <Krnl::startCPUs()>
c000e7dc:	5a                   	pop    edx
c000e7dd:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c000e7e3:	59                   	pop    ecx
c000e7e4:	6a 01                	push   0x1
c000e7e6:	68 cd a8 02 c0       	push   0xc002a8cd
c000e7eb:	e8 b0 f2 00 00       	call   c001daa0 <Thr::loadDLL(char const*, bool)>
c000e7f0:	5a                   	pop    edx
c000e7f1:	59                   	pop    ecx
c000e7f2:	53                   	push   ebx
c000e7f3:	50                   	push   eax
c000e7f4:	e8 d2 f4 00 00       	call   c001dccb <Thr::executeDLL(unsigned long, void*)>
c000e7f9:	83 c4 10             	add    esp,0x10
c000e7fc:	83 ec 0c             	sub    esp,0xc
c000e7ff:	6a 02                	push   0x2
c000e801:	e8 77 fe 00 00       	call   c001e67d <blockTask(TaskState)>
c000e806:	83 c4 10             	add    esp,0x10
c000e809:	eb f1                	jmp    c000e7fc <Krnl::firstTask()+0xe0>
c000e80b:	90                   	nop

c000e80c <Computer::Computer()>:
c000e80c:	83 ec 0c             	sub    esp,0xc
c000e80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e813:	83 ec 08             	sub    esp,0x8
c000e816:	68 e9 a8 02 c0       	push   0xc002a8e9
c000e81b:	50                   	push   eax
c000e81c:	e8 cf 5c 00 00       	call   c00144f0 <Device::Device(char const*)>
c000e821:	83 c4 10             	add    esp,0x10
c000e824:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c000e829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82d:	89 10                	mov    DWORD PTR [eax],edx
c000e82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e833:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e841:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e855:	83 ca 04             	or     edx,0x4
c000e858:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e862:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e868:	0f b6 d0             	movzx  edx,al
c000e86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e880:	0f b6 d0             	movzx  edx,al
c000e883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e887:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e896:	8d 50 01             	lea    edx,[eax+0x1]
c000e899:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e89d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8a3:	0f b6 d0             	movzx  edx,al
c000e8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8aa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8ae:	83 e1 3f             	and    ecx,0x3f
c000e8b1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bf:	0f b6 d0             	movzx  edx,al
c000e8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c6:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d7:	0f b6 d0             	movzx  edx,al
c000e8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8de:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8ed:	8d 50 01             	lea    edx,[eax+0x1]
c000e8f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8f4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8fa:	0f b6 d0             	movzx  edx,al
c000e8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e901:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e905:	83 e1 3f             	and    ecx,0x3f
c000e908:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e910:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e916:	0f b6 d0             	movzx  edx,al
c000e919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e91d:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e928:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e92e:	0f b6 d0             	movzx  edx,al
c000e931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e935:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e944:	8d 50 01             	lea    edx,[eax+0x1]
c000e947:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e94b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e951:	0f b6 d0             	movzx  edx,al
c000e954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e958:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e95c:	83 e1 3f             	and    ecx,0x3f
c000e95f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e963:	90                   	nop
c000e964:	83 c4 0c             	add    esp,0xc
c000e967:	c3                   	ret    

c000e968 <Computer::setBootMessage(char const*)>:
c000e968:	c3                   	ret    
c000e969:	90                   	nop

c000e96a <Computer::detectFeatures()>:
c000e96a:	55                   	push   ebp
c000e96b:	57                   	push   edi
c000e96c:	56                   	push   esi
c000e96d:	53                   	push   ebx
c000e96e:	83 ec 1c             	sub    esp,0x1c
c000e971:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e975:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e97f:	e8 60 19 ff ff       	call   c00002e4 <detectCPUID>
c000e984:	85 c0                	test   eax,eax
c000e986:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98c:	0f 95 c2             	setne  dl
c000e98f:	83 e0 fd             	and    eax,0xfffffffd
c000e992:	d1 e2                	shl    edx,1
c000e994:	09 d0                	or     eax,edx
c000e996:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e99c:	a8 02                	test   al,0x2
c000e99e:	75 46                	jne    c000e9e6 <Computer::detectFeatures()+0x7c>
c000e9a0:	f6 05 41 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee41,0x4
c000e9a7:	74 07                	je     c000e9b0 <Computer::detectFeatures()+0x46>
c000e9a9:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e9b0:	e8 b1 84 01 00       	call   c0026e66 <x87Detect>
c000e9b5:	83 e0 01             	and    eax,0x1
c000e9b8:	c1 e0 04             	shl    eax,0x4
c000e9bb:	88 c2                	mov    dl,al
c000e9bd:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c3:	83 e0 ef             	and    eax,0xffffffef
c000e9c6:	09 d0                	or     eax,edx
c000e9c8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9ce:	a8 10                	test   al,0x10
c000e9d0:	0f 85 2a 01 00 00    	jne    c000eb00 <Computer::detectFeatures()+0x196>
c000e9d6:	84 c0                	test   al,al
c000e9d8:	0f 88 45 01 00 00    	js     c000eb23 <Computer::detectFeatures()+0x1b9>
c000e9de:	83 c4 1c             	add    esp,0x1c
c000e9e1:	5b                   	pop    ebx
c000e9e2:	5e                   	pop    esi
c000e9e3:	5f                   	pop    edi
c000e9e4:	5d                   	pop    ebp
c000e9e5:	c3                   	ret    
c000e9e6:	83 ec 0c             	sub    esp,0xc
c000e9e9:	6a 20                	push   0x20
c000e9eb:	e8 b6 a5 00 00       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c000e9f0:	83 e0 01             	and    eax,0x1
c000e9f3:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9fa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea00:	83 e0 f7             	and    eax,0xfffffff7
c000ea03:	09 d0                	or     eax,edx
c000ea05:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea0b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ea12:	e8 8f a5 00 00       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c000ea17:	83 e0 01             	and    eax,0x1
c000ea1a:	88 c2                	mov    dl,al
c000ea1c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea22:	83 e0 fe             	and    eax,0xfffffffe
c000ea25:	09 d0                	or     eax,edx
c000ea27:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea2d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ea34:	e8 6d a5 00 00       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c000ea39:	c1 e0 07             	shl    eax,0x7
c000ea3c:	88 c2                	mov    dl,al
c000ea3e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea44:	83 e0 7f             	and    eax,0x7f
c000ea47:	09 d0                	or     eax,edx
c000ea49:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea4f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea56:	e8 4b a5 00 00       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c000ea5b:	83 c4 10             	add    esp,0x10
c000ea5e:	83 e0 01             	and    eax,0x1
c000ea61:	c1 e0 05             	shl    eax,0x5
c000ea64:	88 c2                	mov    dl,al
c000ea66:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea6c:	83 e0 df             	and    eax,0xffffffdf
c000ea6f:	09 d0                	or     eax,edx
c000ea71:	f7 05 40 ee 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ee40,0x401
c000ea7b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea81:	0f 84 c2 00 00 00    	je     c000eb49 <Computer::detectFeatures()+0x1df>
c000ea87:	83 e0 fe             	and    eax,0xfffffffe
c000ea8a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea90:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea96:	88 c2                	mov    dl,al
c000ea98:	83 e2 09             	and    edx,0x9
c000ea9b:	fe ca                	dec    dl
c000ea9d:	75 09                	jne    c000eaa8 <Computer::detectFeatures()+0x13e>
c000ea9f:	83 e0 fe             	and    eax,0xfffffffe
c000eaa2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa8:	83 ec 0c             	sub    esp,0xc
c000eaab:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eaaf:	50                   	push   eax
c000eab0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000eab4:	55                   	push   ebp
c000eab5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000eab9:	57                   	push   edi
c000eaba:	8d 74 24 18          	lea    esi,[esp+0x18]
c000eabe:	56                   	push   esi
c000eabf:	68 00 00 00 80       	push   0x80000000
c000eac4:	e8 59 a4 00 00       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eac9:	83 c4 20             	add    esp,0x20
c000eacc:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ead3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ead7:	0f 86 c3 fe ff ff    	jbe    c000e9a0 <Computer::detectFeatures()+0x36>
c000eadd:	83 ec 0c             	sub    esp,0xc
c000eae0:	50                   	push   eax
c000eae1:	55                   	push   ebp
c000eae2:	57                   	push   edi
c000eae3:	56                   	push   esi
c000eae4:	68 01 00 00 80       	push   0x80000001
c000eae9:	e8 34 a4 00 00       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eaee:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eaf8:	83 c4 20             	add    esp,0x20
c000eafb:	e9 a0 fe ff ff       	jmp    c000e9a0 <Computer::detectFeatures()+0x36>
c000eb00:	e8 1b 83 01 00       	call   c0026e20 <absolutelyNoChanceInHell>
c000eb05:	88 c2                	mov    dl,al
c000eb07:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb0d:	c1 e2 07             	shl    edx,0x7
c000eb10:	83 e0 7f             	and    eax,0x7f
c000eb13:	09 d0                	or     eax,edx
c000eb15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb1b:	84 c0                	test   al,al
c000eb1d:	0f 89 bb fe ff ff    	jns    c000e9de <Computer::detectFeatures()+0x74>
c000eb23:	e8 d8 82 01 00       	call   c0026e00 <avxDetect>
c000eb28:	83 e0 01             	and    eax,0x1
c000eb2b:	c1 e0 05             	shl    eax,0x5
c000eb2e:	88 c2                	mov    dl,al
c000eb30:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb36:	83 e0 df             	and    eax,0xffffffdf
c000eb39:	09 d0                	or     eax,edx
c000eb3b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb41:	83 c4 1c             	add    esp,0x1c
c000eb44:	5b                   	pop    ebx
c000eb45:	5e                   	pop    esi
c000eb46:	5f                   	pop    edi
c000eb47:	5d                   	pop    ebp
c000eb48:	c3                   	ret    
c000eb49:	83 ec 0c             	sub    esp,0xc
c000eb4c:	68 00 02 00 00       	push   0x200
c000eb51:	e8 50 a4 00 00       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c000eb56:	83 c4 10             	add    esp,0x10
c000eb59:	83 e0 01             	and    eax,0x1
c000eb5c:	88 c2                	mov    dl,al
c000eb5e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb64:	83 e0 fe             	and    eax,0xfffffffe
c000eb67:	09 d0                	or     eax,edx
c000eb69:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb6f:	e9 1c ff ff ff       	jmp    c000ea90 <Computer::detectFeatures()+0x126>

c000eb74 <Computer::displayFeatures()>:
c000eb74:	53                   	push   ebx
c000eb75:	83 ec 14             	sub    esp,0x14
c000eb78:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb7c:	68 f9 a8 02 c0       	push   0xc002a8f9
c000eb81:	e8 45 43 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb90:	0f 85 73 02 00 00    	jne    c000ee09 <Computer::displayFeatures()+0x295>
c000eb96:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 0c a9 02 c0       	push   0xc002a90c
c000eba4:	e8 22 43 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000ebb3:	0f 85 8c 02 00 00    	jne    c000ee45 <Computer::displayFeatures()+0x2d1>
c000ebb9:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 1d a9 02 c0       	push   0xc002a91d
c000ebc7:	e8 ff 42 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000ebd6:	0f 85 5f 02 00 00    	jne    c000ee3b <Computer::displayFeatures()+0x2c7>
c000ebdc:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 2e a9 02 c0       	push   0xc002a92e
c000ebea:	e8 dc 42 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ebf9:	0f 85 32 02 00 00    	jne    c000ee31 <Computer::displayFeatures()+0x2bd>
c000ebff:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 3f a9 02 c0       	push   0xc002a93f
c000ec0d:	e8 b9 42 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ec1c:	0f 85 05 02 00 00    	jne    c000ee27 <Computer::displayFeatures()+0x2b3>
c000ec22:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 50 a9 02 c0       	push   0xc002a950
c000ec30:	e8 96 42 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec3f:	0f 85 d8 01 00 00    	jne    c000ee1d <Computer::displayFeatures()+0x2a9>
c000ec45:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 61 a9 02 c0       	push   0xc002a961
c000ec53:	e8 73 42 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec62:	0f 85 ab 01 00 00    	jne    c000ee13 <Computer::displayFeatures()+0x29f>
c000ec68:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 72 a9 02 c0       	push   0xc002a972
c000ec76:	e8 50 42 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec85:	0f 88 1b 02 00 00    	js     c000eea6 <Computer::displayFeatures()+0x332>
c000ec8b:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 83 a9 02 c0       	push   0xc002a983
c000ec99:	e8 2d 42 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000eca8:	0f 85 a1 01 00 00    	jne    c000ee4f <Computer::displayFeatures()+0x2db>
c000ecae:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 94 a9 02 c0       	push   0xc002a994
c000ecbc:	e8 0a 42 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000eccb:	0f 85 cb 01 00 00    	jne    c000ee9c <Computer::displayFeatures()+0x328>
c000ecd1:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 a5 a9 02 c0       	push   0xc002a9a5
c000ecdf:	e8 e7 41 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ecee:	0f 85 9e 01 00 00    	jne    c000ee92 <Computer::displayFeatures()+0x31e>
c000ecf4:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 b6 a9 02 c0       	push   0xc002a9b6
c000ed02:	e8 c4 41 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ed11:	0f 85 71 01 00 00    	jne    c000ee88 <Computer::displayFeatures()+0x314>
c000ed17:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed1c:	83 ec 08             	sub    esp,0x8
c000ed1f:	50                   	push   eax
c000ed20:	68 c7 a9 02 c0       	push   0xc002a9c7
c000ed25:	e8 a1 41 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ed2a:	83 c4 10             	add    esp,0x10
c000ed2d:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ed34:	0f 85 44 01 00 00    	jne    c000ee7e <Computer::displayFeatures()+0x30a>
c000ed3a:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed3f:	83 ec 08             	sub    esp,0x8
c000ed42:	50                   	push   eax
c000ed43:	68 d8 a9 02 c0       	push   0xc002a9d8
c000ed48:	e8 7e 41 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ed4d:	83 c4 10             	add    esp,0x10
c000ed50:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed57:	0f 85 17 01 00 00    	jne    c000ee74 <Computer::displayFeatures()+0x300>
c000ed5d:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 e9 a9 02 c0       	push   0xc002a9e9
c000ed6b:	e8 5b 41 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ed70:	83 c4 10             	add    esp,0x10
c000ed73:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed7a:	0f 85 ea 00 00 00    	jne    c000ee6a <Computer::displayFeatures()+0x2f6>
c000ed80:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed85:	83 ec 08             	sub    esp,0x8
c000ed88:	50                   	push   eax
c000ed89:	68 fa a9 02 c0       	push   0xc002a9fa
c000ed8e:	e8 38 41 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ed93:	83 c4 10             	add    esp,0x10
c000ed96:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed9d:	0f 88 0d 01 00 00    	js     c000eeb0 <Computer::displayFeatures()+0x33c>
c000eda3:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000eda8:	83 ec 08             	sub    esp,0x8
c000edab:	50                   	push   eax
c000edac:	68 0b aa 02 c0       	push   0xc002aa0b
c000edb1:	e8 15 41 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000edb6:	83 c4 10             	add    esp,0x10
c000edb9:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000edc0:	0f 85 9a 00 00 00    	jne    c000ee60 <Computer::displayFeatures()+0x2ec>
c000edc6:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000edcb:	83 ec 08             	sub    esp,0x8
c000edce:	50                   	push   eax
c000edcf:	68 1c aa 02 c0       	push   0xc002aa1c
c000edd4:	e8 f2 40 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000edd9:	83 c4 10             	add    esp,0x10
c000eddc:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ede3:	75 74                	jne    c000ee59 <Computer::displayFeatures()+0x2e5>
c000ede5:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000edea:	83 ec 08             	sub    esp,0x8
c000eded:	50                   	push   eax
c000edee:	68 2d aa 02 c0       	push   0xc002aa2d
c000edf3:	e8 d3 40 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000edf8:	c7 44 24 20 94 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c494
c000ee00:	83 c4 18             	add    esp,0x18
c000ee03:	5b                   	pop    ebx
c000ee04:	e9 c2 40 00 00       	jmp    c0012ecb <Dbg::kprintf(char const*, ...)>
c000ee09:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee0e:	e9 88 fd ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0x27>
c000ee13:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee18:	e9 50 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0xf9>
c000ee1d:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee22:	e9 23 fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0xd6>
c000ee27:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee2c:	e9 f6 fd ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0xb3>
c000ee31:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee36:	e9 c9 fd ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x90>
c000ee3b:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee40:	e9 9c fd ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x6d>
c000ee45:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee4a:	e9 6f fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x4a>
c000ee4f:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee54:	e9 5a fe ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x13f>
c000ee59:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee5e:	eb 8a                	jmp    c000edea <Computer::displayFeatures()+0x276>
c000ee60:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee65:	e9 61 ff ff ff       	jmp    c000edcb <Computer::displayFeatures()+0x257>
c000ee6a:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee6f:	e9 11 ff ff ff       	jmp    c000ed85 <Computer::displayFeatures()+0x211>
c000ee74:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee79:	e9 e4 fe ff ff       	jmp    c000ed62 <Computer::displayFeatures()+0x1ee>
c000ee7e:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee83:	e9 b7 fe ff ff       	jmp    c000ed3f <Computer::displayFeatures()+0x1cb>
c000ee88:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee8d:	e9 8a fe ff ff       	jmp    c000ed1c <Computer::displayFeatures()+0x1a8>
c000ee92:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee97:	e9 5d fe ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x185>
c000ee9c:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000eea1:	e9 30 fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x162>
c000eea6:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000eeab:	e9 e0 fd ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x11c>
c000eeb0:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000eeb5:	e9 ee fe ff ff       	jmp    c000eda8 <Computer::displayFeatures()+0x234>

c000eeba <Computer::rdmsr(unsigned int)>:
c000eeba:	83 ec 0c             	sub    esp,0xc
c000eebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eec1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eec8:	74 0a                	je     c000eed4 <Computer::rdmsr(unsigned int)+0x1a>
c000eeca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eece:	0f 32                	rdmsr  
c000eed0:	83 c4 0c             	add    esp,0xc
c000eed3:	c3                   	ret    
c000eed4:	83 ec 0c             	sub    esp,0xc
c000eed7:	68 3e aa 02 c0       	push   0xc002aa3e
c000eedc:	e8 a6 b9 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000eee1:	83 c4 10             	add    esp,0x10
c000eee4:	eb e4                	jmp    c000eeca <Computer::rdmsr(unsigned int)+0x10>

c000eee6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eee6:	57                   	push   edi
c000eee7:	56                   	push   esi
c000eee8:	52                   	push   edx
c000eee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eeed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eef1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eef5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eefc:	74 0e                	je     c000ef0c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eefe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef02:	89 f0                	mov    eax,esi
c000ef04:	89 fa                	mov    edx,edi
c000ef06:	0f 30                	wrmsr  
c000ef08:	58                   	pop    eax
c000ef09:	5e                   	pop    esi
c000ef0a:	5f                   	pop    edi
c000ef0b:	c3                   	ret    
c000ef0c:	83 ec 0c             	sub    esp,0xc
c000ef0f:	68 44 aa 02 c0       	push   0xc002aa44
c000ef14:	e8 6e b9 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000ef19:	83 c4 10             	add    esp,0x10
c000ef1c:	eb e0                	jmp    c000eefe <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ef1e <Computer::nmiEnabled()>:
c000ef1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef22:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ef28:	c3                   	ret    
c000ef29:	90                   	nop

c000ef2a <Computer::readCMOS(unsigned char)>:
c000ef2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef2e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef35:	19 c0                	sbb    eax,eax
c000ef37:	83 e0 80             	and    eax,0xffffff80
c000ef3a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef3e:	e6 70                	out    0x70,al
c000ef40:	e4 71                	in     al,0x71
c000ef42:	c3                   	ret    
c000ef43:	90                   	nop

c000ef44 <Computer::enableNMI(bool)>:
c000ef44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef4c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef52:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef5a:	eb ce                	jmp    c000ef2a <Computer::readCMOS(unsigned char)>

c000ef5c <Computer::open(int, int, void*)>:
c000ef5c:	56                   	push   esi
c000ef5d:	53                   	push   ebx
c000ef5e:	83 ec 10             	sub    esp,0x10
c000ef61:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef65:	f6 05 40 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee40,0x4
c000ef6c:	68 68 12 00 00       	push   0x1268
c000ef71:	0f 94 05 64 dd 02 c0 	sete   BYTE PTR ds:0xc002dd64
c000ef78:	e8 97 09 00 00       	call   c000f914 <malloc>
c000ef7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef80:	89 c6                	mov    esi,eax
c000ef82:	e8 a3 93 00 00       	call   c001832a <ACPI::ACPI()>
c000ef87:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef8d:	58                   	pop    eax
c000ef8e:	5a                   	pop    edx
c000ef8f:	56                   	push   esi
c000ef90:	53                   	push   ebx
c000ef91:	e8 6a 53 00 00       	call   c0014300 <Device::addChild(Device*)>
c000ef96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef99:	e8 cc f9 ff ff       	call   c000e96a <Computer::detectFeatures()>
c000ef9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efa1:	e8 ce fb ff ff       	call   c000eb74 <Computer::displayFeatures()>
c000efa6:	59                   	pop    ecx
c000efa7:	5e                   	pop    esi
c000efa8:	6a 01                	push   0x1
c000efaa:	53                   	push   ebx
c000efab:	e8 94 ff ff ff       	call   c000ef44 <Computer::enableNMI(bool)>
c000efb0:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000efb7:	e8 58 09 00 00       	call   c000f914 <malloc>
c000efbc:	89 04 24             	mov    DWORD PTR [esp],eax
c000efbf:	89 c6                	mov    esi,eax
c000efc1:	e8 98 a0 00 00       	call   c001905e <CPU::CPU()>
c000efc6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000efcc:	58                   	pop    eax
c000efcd:	5a                   	pop    edx
c000efce:	56                   	push   esi
c000efcf:	53                   	push   ebx
c000efd0:	e8 2b 53 00 00       	call   c0014300 <Device::addChild(Device*)>
c000efd5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000efdb:	8b 10                	mov    edx,DWORD PTR [eax]
c000efdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efe1:	6a 00                	push   0x0
c000efe3:	6a 00                	push   0x0
c000efe5:	50                   	push   eax
c000efe6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efe9:	83 c4 20             	add    esp,0x20
c000efec:	e8 a3 58 00 00       	call   c0014894 <setupFPU()>
c000eff1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000eff7:	85 c0                	test   eax,eax
c000eff9:	74 1f                	je     c000f01a <Computer::open(int, int, void*)+0xbe>
c000effb:	83 ec 08             	sub    esp,0x8
c000effe:	50                   	push   eax
c000efff:	53                   	push   ebx
c000f000:	e8 fb 52 00 00       	call   c0014300 <Device::addChild(Device*)>
c000f005:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000f00b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f00d:	6a 00                	push   0x0
c000f00f:	6a 00                	push   0x0
c000f011:	6a 00                	push   0x0
c000f013:	50                   	push   eax
c000f014:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f017:	83 c4 20             	add    esp,0x20
c000f01a:	83 ec 0c             	sub    esp,0xc
c000f01d:	68 1c e7 00 c0       	push   0xc000e71c
c000f022:	e8 35 f3 00 00       	call   c001e35c <setupMultitasking(void (*)())>
c000f027:	83 c4 14             	add    esp,0x14
c000f02a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f02f:	5b                   	pop    ebx
c000f030:	5e                   	pop    esi
c000f031:	c3                   	ret    

c000f032 <Computer::disableNMI()>:
c000f032:	6a 00                	push   0x0
c000f034:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f038:	e8 07 ff ff ff       	call   c000ef44 <Computer::enableNMI(bool)>
c000f03d:	58                   	pop    eax
c000f03e:	5a                   	pop    edx
c000f03f:	c3                   	ret    

c000f040 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f044:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f04b:	19 c0                	sbb    eax,eax
c000f04d:	83 e0 80             	and    eax,0xffffff80
c000f050:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f054:	e6 70                	out    0x70,al
c000f056:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f05a:	e6 71                	out    0x71,al
c000f05c:	c3                   	ret    
c000f05d:	90                   	nop

c000f05e <Computer::handleNMI()>:
c000f05e:	56                   	push   esi
c000f05f:	53                   	push   ebx
c000f060:	83 ec 10             	sub    esp,0x10
c000f063:	e4 92                	in     al,0x92
c000f065:	89 c6                	mov    esi,eax
c000f067:	e4 61                	in     al,0x61
c000f069:	68 4a aa 02 c0       	push   0xc002aa4a
c000f06e:	88 c3                	mov    bl,al
c000f070:	e8 56 3e 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000f075:	83 c4 10             	add    esp,0x10
c000f078:	83 e6 10             	and    esi,0x10
c000f07b:	75 0d                	jne    c000f08a <Computer::handleNMI()+0x2c>
c000f07d:	f6 c3 40             	test   bl,0x40
c000f080:	75 1d                	jne    c000f09f <Computer::handleNMI()+0x41>
c000f082:	84 db                	test   bl,bl
c000f084:	78 2d                	js     c000f0b3 <Computer::handleNMI()+0x55>
c000f086:	58                   	pop    eax
c000f087:	5b                   	pop    ebx
c000f088:	5e                   	pop    esi
c000f089:	c3                   	ret    
c000f08a:	83 ec 0c             	sub    esp,0xc
c000f08d:	68 5b aa 02 c0       	push   0xc002aa5b
c000f092:	e8 f0 b7 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000f097:	83 c4 10             	add    esp,0x10
c000f09a:	f6 c3 40             	test   bl,0x40
c000f09d:	74 e3                	je     c000f082 <Computer::handleNMI()+0x24>
c000f09f:	83 ec 0c             	sub    esp,0xc
c000f0a2:	68 68 aa 02 c0       	push   0xc002aa68
c000f0a7:	e8 db b7 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000f0ac:	83 c4 10             	add    esp,0x10
c000f0af:	84 db                	test   bl,bl
c000f0b1:	79 d3                	jns    c000f086 <Computer::handleNMI()+0x28>
c000f0b3:	c7 44 24 10 72 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa72
c000f0bb:	5a                   	pop    edx
c000f0bc:	5b                   	pop    ebx
c000f0bd:	5e                   	pop    esi
c000f0be:	e9 c4 b7 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c000f0c3:	90                   	nop

c000f0c4 <Computer::setDiskActivityLight(int, bool)>:
c000f0c4:	56                   	push   esi
c000f0c5:	53                   	push   ebx
c000f0c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0ca:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0cf:	77 1b                	ja     c000f0ec <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0d1:	e4 92                	in     al,0x92
c000f0d3:	bb 40 00 00 00       	mov    ebx,0x40
c000f0d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0dc:	89 da                	mov    edx,ebx
c000f0de:	d3 e2                	shl    edx,cl
c000f0e0:	89 f1                	mov    ecx,esi
c000f0e2:	f7 d2                	not    edx
c000f0e4:	d3 e3                	shl    ebx,cl
c000f0e6:	21 d0                	and    eax,edx
c000f0e8:	09 d8                	or     eax,ebx
c000f0ea:	e6 92                	out    0x92,al
c000f0ec:	5b                   	pop    ebx
c000f0ed:	5e                   	pop    esi
c000f0ee:	c3                   	ret    
c000f0ef:	90                   	nop

c000f0f0 <GDTEntry::setBase(unsigned int)>:
c000f0f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0f8:	89 c1                	mov    ecx,eax
c000f0fa:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0fe:	c1 e9 10             	shr    ecx,0x10
c000f101:	c1 e8 18             	shr    eax,0x18
c000f104:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f107:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f10a:	c3                   	ret    
c000f10b:	90                   	nop

c000f10c <GDTEntry::setLimit(unsigned int)>:
c000f10c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f114:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f117:	66 89 01             	mov    WORD PTR [ecx],ax
c000f11a:	83 e2 f0             	and    edx,0xfffffff0
c000f11d:	c1 e8 10             	shr    eax,0x10
c000f120:	83 e0 0f             	and    eax,0xf
c000f123:	09 d0                	or     eax,edx
c000f125:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f128:	c3                   	ret    
c000f129:	90                   	nop

c000f12a <GDT::GDT()>:
c000f12a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f12e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f13e:	90                   	nop
c000f13f:	c3                   	ret    

c000f140 <GDT::addEntry(GDTEntry)>:
c000f140:	53                   	push   ebx
c000f141:	83 ec 0c             	sub    esp,0xc
c000f144:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f148:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f14a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f151:	52                   	push   edx
c000f152:	50                   	push   eax
c000f153:	68 ac aa 02 c0       	push   0xc002aaac
c000f158:	e8 6e 3d 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000f15d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f15f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f163:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f167:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f16b:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f16f:	8d 50 01             	lea    edx,[eax+0x1]
c000f172:	c1 e0 03             	shl    eax,0x3
c000f175:	89 13                	mov    DWORD PTR [ebx],edx
c000f177:	83 c4 18             	add    esp,0x18
c000f17a:	5b                   	pop    ebx
c000f17b:	c3                   	ret    

c000f17c <GDT::getNumberOfEntries()>:
c000f17c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f180:	8b 00                	mov    eax,DWORD PTR [eax]
c000f182:	c3                   	ret    
c000f183:	90                   	nop

c000f184 <GDT::flush()>:
c000f184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f188:	8b 10                	mov    edx,DWORD PTR [eax]
c000f18a:	83 c0 04             	add    eax,0x4
c000f18d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f194:	a3 32 ee 02 c0       	mov    ds:0xc002ee32,eax
c000f199:	66 89 15 30 ee 02 c0 	mov    WORD PTR ds:0xc002ee30,dx
c000f1a0:	e9 ab 12 ff ff       	jmp    c0000450 <loadGDT>
c000f1a5:	90                   	nop

c000f1a6 <GDT::setup()>:
c000f1a6:	55                   	push   ebp
c000f1a7:	57                   	push   edi
c000f1a8:	56                   	push   esi
c000f1a9:	53                   	push   ebx
c000f1aa:	83 ec 3c             	sub    esp,0x3c
c000f1ad:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f1b1:	6a 00                	push   0x0
c000f1b3:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f1b7:	53                   	push   ebx
c000f1b8:	e8 33 ff ff ff       	call   c000f0f0 <GDTEntry::setBase(unsigned int)>
c000f1bd:	6a 00                	push   0x0
c000f1bf:	53                   	push   ebx
c000f1c0:	e8 47 ff ff ff       	call   c000f10c <GDTEntry::setLimit(unsigned int)>
c000f1c5:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f1cd:	6a 00                	push   0x0
c000f1cf:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1d3:	53                   	push   ebx
c000f1d4:	e8 17 ff ff ff       	call   c000f0f0 <GDTEntry::setBase(unsigned int)>
c000f1d9:	68 ff ff ff 00       	push   0xffffff
c000f1de:	53                   	push   ebx
c000f1df:	e8 28 ff ff ff       	call   c000f10c <GDTEntry::setLimit(unsigned int)>
c000f1e4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1e8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1ed:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f1f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1f6:	83 c4 20             	add    esp,0x20
c000f1f9:	6a 00                	push   0x0
c000f1fb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1ff:	53                   	push   ebx
c000f200:	e8 eb fe ff ff       	call   c000f0f0 <GDTEntry::setBase(unsigned int)>
c000f205:	68 ff ff ff 00       	push   0xffffff
c000f20a:	53                   	push   ebx
c000f20b:	e8 fc fe ff ff       	call   c000f10c <GDTEntry::setLimit(unsigned int)>
c000f210:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f214:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f218:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f21c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f220:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f224:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f229:	0d 00 92 c0 00       	or     eax,0xc09200
c000f22e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f232:	89 d8                	mov    eax,ebx
c000f234:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f238:	80 cc 60             	or     ah,0x60
c000f23b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f23f:	83 c4 0c             	add    esp,0xc
c000f242:	89 f8                	mov    eax,edi
c000f244:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f248:	80 cc 60             	or     ah,0x60
c000f24b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f24f:	89 c7                	mov    edi,eax
c000f251:	55                   	push   ebp
c000f252:	e8 e9 fe ff ff       	call   c000f140 <GDT::addEntry(GDTEntry)>
c000f257:	83 c4 0c             	add    esp,0xc
c000f25a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f25e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f262:	55                   	push   ebp
c000f263:	e8 d8 fe ff ff       	call   c000f140 <GDT::addEntry(GDTEntry)>
c000f268:	83 c4 0c             	add    esp,0xc
c000f26b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f26f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f273:	55                   	push   ebp
c000f274:	e8 c7 fe ff ff       	call   c000f140 <GDT::addEntry(GDTEntry)>
c000f279:	83 c4 0c             	add    esp,0xc
c000f27c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f280:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f284:	53                   	push   ebx
c000f285:	51                   	push   ecx
c000f286:	55                   	push   ebp
c000f287:	e8 b4 fe ff ff       	call   c000f140 <GDT::addEntry(GDTEntry)>
c000f28c:	83 c4 0c             	add    esp,0xc
c000f28f:	57                   	push   edi
c000f290:	56                   	push   esi
c000f291:	55                   	push   ebp
c000f292:	e8 a9 fe ff ff       	call   c000f140 <GDT::addEntry(GDTEntry)>
c000f297:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f29a:	e8 e5 fe ff ff       	call   c000f184 <GDT::flush()>
c000f29f:	83 c4 4c             	add    esp,0x4c
c000f2a2:	5b                   	pop    ebx
c000f2a3:	5e                   	pop    esi
c000f2a4:	5f                   	pop    edi
c000f2a5:	5d                   	pop    ebp
c000f2a6:	c3                   	ret    

c000f2a7 <idleFunction(void*)>:
c000f2a7:	53                   	push   ebx
c000f2a8:	83 ec 08             	sub    esp,0x8
c000f2ab:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000f2b0:	48                   	dec    eax
c000f2b1:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000f2b6:	75 01                	jne    c000f2b9 <idleFunction(void*)+0x12>
c000f2b8:	fb                   	sti    
c000f2b9:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000f2be:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f2c4:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f2cb:	74 3c                	je     c000f309 <idleFunction(void*)+0x62>
c000f2cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f2d4:	74 33                	je     c000f309 <idleFunction(void*)+0x62>
c000f2d6:	31 db                	xor    ebx,ebx
c000f2d8:	52                   	push   edx
c000f2d9:	52                   	push   edx
c000f2da:	68 e1 00 00 00       	push   0xe1
c000f2df:	50                   	push   eax
c000f2e0:	e8 d5 fb ff ff       	call   c000eeba <Computer::rdmsr(unsigned int)>
c000f2e5:	53                   	push   ebx
c000f2e6:	83 e0 02             	and    eax,0x2
c000f2e9:	50                   	push   eax
c000f2ea:	68 e1 00 00 00       	push   0xe1
c000f2ef:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c000f2f5:	e8 ec fb ff ff       	call   c000eee6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2fa:	83 c4 20             	add    esp,0x20
c000f2fd:	e8 7d 0f ff ff       	call   c000027f <doTPAUSE>
c000f302:	e8 a9 9b 01 00       	call   c0028eb0 <idleCommon()>
c000f307:	eb f4                	jmp    c000f2fd <idleFunction(void*)+0x56>
c000f309:	fb                   	sti    
c000f30a:	f4                   	hlt    
c000f30b:	e8 a0 9b 01 00       	call   c0028eb0 <idleCommon()>
c000f310:	eb f7                	jmp    c000f309 <idleFunction(void*)+0x62>

c000f312 <IDTEntry::IDTEntry(bool)>:
c000f312:	83 ec 04             	sub    esp,0x4
c000f315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f319:	88 04 24             	mov    BYTE PTR [esp],al
c000f31c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f320:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f326:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f32a:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f32e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f332:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f335:	83 e2 f0             	and    edx,0xfffffff0
c000f338:	83 ca 0e             	or     edx,0xe
c000f33b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f33e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f342:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f345:	83 e2 ef             	and    edx,0xffffffef
c000f348:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f34b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f34f:	74 04                	je     c000f355 <IDTEntry::IDTEntry(bool)+0x43>
c000f351:	b2 03                	mov    dl,0x3
c000f353:	eb 02                	jmp    c000f357 <IDTEntry::IDTEntry(bool)+0x45>
c000f355:	b2 00                	mov    dl,0x0
c000f357:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f35b:	83 e2 03             	and    edx,0x3
c000f35e:	88 d1                	mov    cl,dl
c000f360:	c1 e1 05             	shl    ecx,0x5
c000f363:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f366:	83 e2 9f             	and    edx,0xffffff9f
c000f369:	09 ca                	or     edx,ecx
c000f36b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f36e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f372:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f375:	83 ca 80             	or     edx,0xffffff80
c000f378:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f37b:	90                   	nop
c000f37c:	83 c4 04             	add    esp,0x4
c000f37f:	c3                   	ret    

c000f380 <IDTEntry::setOffset(unsigned int)>:
c000f380:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f388:	66 89 02             	mov    WORD PTR [edx],ax
c000f38b:	c1 e8 10             	shr    eax,0x10
c000f38e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f392:	c3                   	ret    
c000f393:	90                   	nop

c000f394 <IDT::IDT()>:
c000f394:	90                   	nop
c000f395:	c3                   	ret    

c000f396 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f39a:	83 c0 30             	add    eax,0x30
c000f39d:	c3                   	ret    

c000f39e <IDT::addEntry(IDTEntry, int)>:
c000f39e:	53                   	push   ebx
c000f39f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f3a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3af:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f3b2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f3b6:	5b                   	pop    ebx
c000f3b7:	c3                   	ret    

c000f3b8 <IDT::addEntry(int, void (*)(), bool)>:
c000f3b8:	53                   	push   ebx
c000f3b9:	83 ec 10             	sub    esp,0x10
c000f3bc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3c1:	50                   	push   eax
c000f3c2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3c6:	53                   	push   ebx
c000f3c7:	e8 46 ff ff ff       	call   c000f312 <IDTEntry::IDTEntry(bool)>
c000f3cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3d0:	53                   	push   ebx
c000f3d1:	e8 aa ff ff ff       	call   c000f380 <IDTEntry::setOffset(unsigned int)>
c000f3d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3e6:	e8 b3 ff ff ff       	call   c000f39e <IDT::addEntry(IDTEntry, int)>
c000f3eb:	83 c4 30             	add    esp,0x30
c000f3ee:	5b                   	pop    ebx
c000f3ef:	c3                   	ret    

c000f3f0 <IDT::flush()>:
c000f3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3f4:	66 c7 05 38 ee 02 c0 ff 07 	mov    WORD PTR ds:0xc002ee38,0x7ff
c000f3fd:	a3 3a ee 02 c0       	mov    ds:0xc002ee3a,eax
c000f402:	0f 01 1d 38 ee 02 c0 	lidtd  ds:0xc002ee38
c000f409:	c3                   	ret    

c000f40a <IDT::setup()>:
c000f40a:	57                   	push   edi
c000f40b:	56                   	push   esi
c000f40c:	53                   	push   ebx
c000f40d:	83 ec 10             	sub    esp,0x10
c000f410:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f414:	6a 00                	push   0x0
c000f416:	68 70 04 00 c0       	push   0xc0000470
c000f41b:	6a 00                	push   0x0
c000f41d:	53                   	push   ebx
c000f41e:	e8 95 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f423:	6a 00                	push   0x0
c000f425:	68 80 04 00 c0       	push   0xc0000480
c000f42a:	6a 01                	push   0x1
c000f42c:	53                   	push   ebx
c000f42d:	e8 86 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f432:	83 c4 20             	add    esp,0x20
c000f435:	6a 00                	push   0x0
c000f437:	68 8a 04 00 c0       	push   0xc000048a
c000f43c:	6a 02                	push   0x2
c000f43e:	53                   	push   ebx
c000f43f:	e8 74 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f444:	6a 00                	push   0x0
c000f446:	68 94 04 00 c0       	push   0xc0000494
c000f44b:	6a 03                	push   0x3
c000f44d:	53                   	push   ebx
c000f44e:	e8 65 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f453:	83 c4 20             	add    esp,0x20
c000f456:	6a 00                	push   0x0
c000f458:	68 9e 04 00 c0       	push   0xc000049e
c000f45d:	6a 04                	push   0x4
c000f45f:	53                   	push   ebx
c000f460:	e8 53 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f465:	6a 00                	push   0x0
c000f467:	68 a8 04 00 c0       	push   0xc00004a8
c000f46c:	6a 05                	push   0x5
c000f46e:	53                   	push   ebx
c000f46f:	e8 44 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f474:	83 c4 20             	add    esp,0x20
c000f477:	6a 00                	push   0x0
c000f479:	68 b2 04 00 c0       	push   0xc00004b2
c000f47e:	6a 06                	push   0x6
c000f480:	53                   	push   ebx
c000f481:	e8 32 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f486:	6a 00                	push   0x0
c000f488:	68 bc 04 00 c0       	push   0xc00004bc
c000f48d:	6a 07                	push   0x7
c000f48f:	53                   	push   ebx
c000f490:	e8 23 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f495:	83 c4 20             	add    esp,0x20
c000f498:	6a 00                	push   0x0
c000f49a:	68 c6 04 00 c0       	push   0xc00004c6
c000f49f:	6a 08                	push   0x8
c000f4a1:	53                   	push   ebx
c000f4a2:	e8 11 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f4a7:	6a 00                	push   0x0
c000f4a9:	68 ce 04 00 c0       	push   0xc00004ce
c000f4ae:	6a 09                	push   0x9
c000f4b0:	53                   	push   ebx
c000f4b1:	e8 02 ff ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f4b6:	83 c4 20             	add    esp,0x20
c000f4b9:	6a 00                	push   0x0
c000f4bb:	68 d8 04 00 c0       	push   0xc00004d8
c000f4c0:	6a 0a                	push   0xa
c000f4c2:	53                   	push   ebx
c000f4c3:	e8 f0 fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f4c8:	6a 00                	push   0x0
c000f4ca:	68 e0 04 00 c0       	push   0xc00004e0
c000f4cf:	6a 0b                	push   0xb
c000f4d1:	53                   	push   ebx
c000f4d2:	e8 e1 fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f4d7:	83 c4 20             	add    esp,0x20
c000f4da:	6a 00                	push   0x0
c000f4dc:	68 e8 04 00 c0       	push   0xc00004e8
c000f4e1:	6a 0c                	push   0xc
c000f4e3:	53                   	push   ebx
c000f4e4:	e8 cf fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f4e9:	6a 00                	push   0x0
c000f4eb:	68 f0 04 00 c0       	push   0xc00004f0
c000f4f0:	6a 0d                	push   0xd
c000f4f2:	53                   	push   ebx
c000f4f3:	e8 c0 fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f4f8:	83 c4 20             	add    esp,0x20
c000f4fb:	6a 00                	push   0x0
c000f4fd:	68 f8 04 00 c0       	push   0xc00004f8
c000f502:	6a 0e                	push   0xe
c000f504:	53                   	push   ebx
c000f505:	e8 ae fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f50a:	6a 00                	push   0x0
c000f50c:	68 00 05 00 c0       	push   0xc0000500
c000f511:	6a 0f                	push   0xf
c000f513:	53                   	push   ebx
c000f514:	e8 9f fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f519:	83 c4 20             	add    esp,0x20
c000f51c:	6a 00                	push   0x0
c000f51e:	68 0a 05 00 c0       	push   0xc000050a
c000f523:	6a 10                	push   0x10
c000f525:	53                   	push   ebx
c000f526:	e8 8d fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f52b:	6a 00                	push   0x0
c000f52d:	68 14 05 00 c0       	push   0xc0000514
c000f532:	6a 11                	push   0x11
c000f534:	53                   	push   ebx
c000f535:	e8 7e fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f53a:	83 c4 20             	add    esp,0x20
c000f53d:	6a 00                	push   0x0
c000f53f:	68 1e 05 00 c0       	push   0xc000051e
c000f544:	6a 12                	push   0x12
c000f546:	53                   	push   ebx
c000f547:	e8 6c fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f54c:	6a 01                	push   0x1
c000f54e:	68 b8 05 00 c0       	push   0xc00005b8
c000f553:	6a 60                	push   0x60
c000f555:	53                   	push   ebx
c000f556:	e8 5d fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f55b:	83 c4 20             	add    esp,0x20
c000f55e:	6a 00                	push   0x0
c000f560:	68 bf 05 00 c0       	push   0xc00005bf
c000f565:	6a 20                	push   0x20
c000f567:	53                   	push   ebx
c000f568:	e8 4b fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f56d:	6a 00                	push   0x0
c000f56f:	68 aa 05 00 c0       	push   0xc00005aa
c000f574:	6a 21                	push   0x21
c000f576:	53                   	push   ebx
c000f577:	e8 3c fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f57c:	83 c4 20             	add    esp,0x20
c000f57f:	6a 00                	push   0x0
c000f581:	68 b1 05 00 c0       	push   0xc00005b1
c000f586:	6a 22                	push   0x22
c000f588:	53                   	push   ebx
c000f589:	e8 2a fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f58e:	6a 00                	push   0x0
c000f590:	68 28 05 00 c0       	push   0xc0000528
c000f595:	6a 23                	push   0x23
c000f597:	53                   	push   ebx
c000f598:	e8 1b fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f59d:	83 c4 20             	add    esp,0x20
c000f5a0:	6a 00                	push   0x0
c000f5a2:	68 32 05 00 c0       	push   0xc0000532
c000f5a7:	6a 24                	push   0x24
c000f5a9:	53                   	push   ebx
c000f5aa:	e8 09 fe ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f5af:	6a 00                	push   0x0
c000f5b1:	68 3c 05 00 c0       	push   0xc000053c
c000f5b6:	6a 25                	push   0x25
c000f5b8:	53                   	push   ebx
c000f5b9:	e8 fa fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f5be:	83 c4 20             	add    esp,0x20
c000f5c1:	6a 00                	push   0x0
c000f5c3:	68 46 05 00 c0       	push   0xc0000546
c000f5c8:	6a 26                	push   0x26
c000f5ca:	53                   	push   ebx
c000f5cb:	e8 e8 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f5d0:	6a 00                	push   0x0
c000f5d2:	68 50 05 00 c0       	push   0xc0000550
c000f5d7:	6a 27                	push   0x27
c000f5d9:	53                   	push   ebx
c000f5da:	e8 d9 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f5df:	83 c4 20             	add    esp,0x20
c000f5e2:	6a 00                	push   0x0
c000f5e4:	68 5a 05 00 c0       	push   0xc000055a
c000f5e9:	6a 28                	push   0x28
c000f5eb:	53                   	push   ebx
c000f5ec:	e8 c7 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f5f1:	6a 00                	push   0x0
c000f5f3:	68 64 05 00 c0       	push   0xc0000564
c000f5f8:	6a 29                	push   0x29
c000f5fa:	53                   	push   ebx
c000f5fb:	e8 b8 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f600:	83 c4 20             	add    esp,0x20
c000f603:	6a 00                	push   0x0
c000f605:	68 6e 05 00 c0       	push   0xc000056e
c000f60a:	6a 2a                	push   0x2a
c000f60c:	53                   	push   ebx
c000f60d:	e8 a6 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f612:	6a 00                	push   0x0
c000f614:	68 78 05 00 c0       	push   0xc0000578
c000f619:	6a 2b                	push   0x2b
c000f61b:	53                   	push   ebx
c000f61c:	e8 97 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f621:	83 c4 20             	add    esp,0x20
c000f624:	6a 00                	push   0x0
c000f626:	68 82 05 00 c0       	push   0xc0000582
c000f62b:	6a 2c                	push   0x2c
c000f62d:	53                   	push   ebx
c000f62e:	e8 85 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f633:	6a 00                	push   0x0
c000f635:	68 8c 05 00 c0       	push   0xc000058c
c000f63a:	6a 2d                	push   0x2d
c000f63c:	53                   	push   ebx
c000f63d:	e8 76 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f642:	83 c4 20             	add    esp,0x20
c000f645:	6a 00                	push   0x0
c000f647:	68 96 05 00 c0       	push   0xc0000596
c000f64c:	6a 2e                	push   0x2e
c000f64e:	53                   	push   ebx
c000f64f:	e8 64 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f654:	6a 00                	push   0x0
c000f656:	68 a0 05 00 c0       	push   0xc00005a0
c000f65b:	6a 2f                	push   0x2f
c000f65d:	53                   	push   ebx
c000f65e:	e8 55 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f663:	83 c4 20             	add    esp,0x20
c000f666:	6a 00                	push   0x0
c000f668:	68 f5 05 00 c0       	push   0xc00005f5
c000f66d:	6a 30                	push   0x30
c000f66f:	53                   	push   ebx
c000f670:	e8 43 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f675:	6a 00                	push   0x0
c000f677:	68 ff 05 00 c0       	push   0xc00005ff
c000f67c:	6a 31                	push   0x31
c000f67e:	53                   	push   ebx
c000f67f:	e8 34 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f684:	83 c4 20             	add    esp,0x20
c000f687:	6a 00                	push   0x0
c000f689:	68 09 06 00 c0       	push   0xc0000609
c000f68e:	6a 32                	push   0x32
c000f690:	53                   	push   ebx
c000f691:	e8 22 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f696:	6a 00                	push   0x0
c000f698:	68 13 06 00 c0       	push   0xc0000613
c000f69d:	6a 33                	push   0x33
c000f69f:	53                   	push   ebx
c000f6a0:	e8 13 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f6a5:	83 c4 20             	add    esp,0x20
c000f6a8:	6a 00                	push   0x0
c000f6aa:	68 1d 06 00 c0       	push   0xc000061d
c000f6af:	6a 34                	push   0x34
c000f6b1:	53                   	push   ebx
c000f6b2:	e8 01 fd ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f6b7:	6a 00                	push   0x0
c000f6b9:	68 27 06 00 c0       	push   0xc0000627
c000f6be:	6a 35                	push   0x35
c000f6c0:	53                   	push   ebx
c000f6c1:	e8 f2 fc ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f6c6:	83 c4 20             	add    esp,0x20
c000f6c9:	6a 00                	push   0x0
c000f6cb:	68 31 06 00 c0       	push   0xc0000631
c000f6d0:	6a 36                	push   0x36
c000f6d2:	53                   	push   ebx
c000f6d3:	e8 e0 fc ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f6d8:	6a 00                	push   0x0
c000f6da:	68 3b 06 00 c0       	push   0xc000063b
c000f6df:	6a 37                	push   0x37
c000f6e1:	53                   	push   ebx
c000f6e2:	e8 d1 fc ff ff       	call   c000f3b8 <IDT::addEntry(int, void (*)(), bool)>
c000f6e7:	83 c4 1c             	add    esp,0x1c
c000f6ea:	6a 03                	push   0x3
c000f6ec:	6a 02                	push   0x2
c000f6ee:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c000f6f4:	e8 05 2d 00 00       	call   c00123fe <VAS::allocatePages(int, int)>
c000f6f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f700:	89 c6                	mov    esi,eax
c000f702:	e8 0d 02 00 00       	call   c000f914 <malloc>
c000f707:	81 c6 00 20 00 00    	add    esi,0x2000
c000f70d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f710:	89 c7                	mov    edi,eax
c000f712:	e8 df 1c 00 00       	call   c00113f6 <TSS::TSS()>
c000f717:	83 c4 0c             	add    esp,0xc
c000f71a:	68 c6 04 00 c0       	push   0xc00004c6
c000f71f:	56                   	push   esi
c000f720:	57                   	push   edi
c000f721:	e8 10 1d 00 00       	call   c0011436 <TSS::setup(unsigned long, unsigned long)>
c000f726:	89 c6                	mov    esi,eax
c000f728:	58                   	pop    eax
c000f729:	5a                   	pop    edx
c000f72a:	6a 00                	push   0x0
c000f72c:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f730:	50                   	push   eax
c000f731:	e8 dc fb ff ff       	call   c000f312 <IDTEntry::IDTEntry(bool)>
c000f736:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f73a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f73f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f746:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f74c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f750:	80 ce 05             	or     dh,0x5
c000f753:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f756:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f75a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f75e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f761:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f764:	e8 87 fc ff ff       	call   c000f3f0 <IDT::flush()>
c000f769:	83 c4 20             	add    esp,0x20
c000f76c:	5b                   	pop    ebx
c000f76d:	5e                   	pop    esi
c000f76e:	5f                   	pop    edi
c000f76f:	c3                   	ret    

c000f770 <sbrk>:
c000f770:	55                   	push   ebp
c000f771:	57                   	push   edi
c000f772:	56                   	push   esi
c000f773:	53                   	push   ebx
c000f774:	83 ec 1c             	sub    esp,0x1c
c000f777:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f77b:	85 c0                	test   eax,eax
c000f77d:	74 3e                	je     c000f7bd <sbrk+0x4d>
c000f77f:	78 43                	js     c000f7c4 <sbrk+0x54>
c000f781:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c000f787:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f78d:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f793:	83 e2 01             	and    edx,0x1
c000f796:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f79a:	8b 0d 54 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd54
c000f7a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f7a4:	05 ff 0f 00 00       	add    eax,0xfff
c000f7a9:	89 c2                	mov    edx,eax
c000f7ab:	78 2f                	js     c000f7dc <sbrk+0x6c>
c000f7ad:	c1 fa 0c             	sar    edx,0xc
c000f7b0:	89 d7                	mov    edi,edx
c000f7b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7b6:	be 00 00 00 00       	mov    esi,0x0
c000f7bb:	eb 36                	jmp    c000f7f3 <sbrk+0x83>
c000f7bd:	a1 54 dd 02 c0       	mov    eax,ds:0xc002dd54
c000f7c2:	eb 73                	jmp    c000f837 <sbrk+0xc7>
c000f7c4:	83 ec 08             	sub    esp,0x8
c000f7c7:	50                   	push   eax
c000f7c8:	68 c8 aa 02 c0       	push   0xc002aac8
c000f7cd:	e8 f9 36 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000f7d2:	83 c4 10             	add    esp,0x10
c000f7d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7da:	eb 5b                	jmp    c000f837 <sbrk+0xc7>
c000f7dc:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7e2:	eb c9                	jmp    c000f7ad <sbrk+0x3d>
c000f7e4:	81 05 54 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dd54,0x1000
c000f7ee:	46                   	inc    esi
c000f7ef:	39 f7                	cmp    edi,esi
c000f7f1:	74 33                	je     c000f826 <sbrk+0xb6>
c000f7f3:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c000f7f9:	8b 2d 54 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002dd54
c000f7ff:	e8 7c 07 00 00       	call   c000ff80 <Phys::allocatePage()>
c000f804:	68 01 0c 00 00       	push   0xc01
c000f809:	55                   	push   ebp
c000f80a:	50                   	push   eax
c000f80b:	53                   	push   ebx
c000f80c:	e8 eb 2a 00 00       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f811:	83 c4 10             	add    esp,0x10
c000f814:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f819:	74 c9                	je     c000f7e4 <sbrk+0x74>
c000f81b:	8b 1d 54 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd54
c000f821:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f824:	eb be                	jmp    c000f7e4 <sbrk+0x74>
c000f826:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f82b:	75 12                	jne    c000f83f <sbrk+0xcf>
c000f82d:	0f 20 d8             	mov    eax,cr3
c000f830:	0f 22 d8             	mov    cr3,eax
c000f833:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f837:	83 c4 1c             	add    esp,0x1c
c000f83a:	5b                   	pop    ebx
c000f83b:	5e                   	pop    esi
c000f83c:	5f                   	pop    edi
c000f83d:	5d                   	pop    ebp
c000f83e:	c3                   	ret    
c000f83f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f843:	89 cb                	mov    ebx,ecx
c000f845:	c1 eb 0a             	shr    ebx,0xa
c000f848:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f84e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f854:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f858:	c1 e0 0c             	shl    eax,0xc
c000f85b:	01 c8                	add    eax,ecx
c000f85d:	c1 e8 0a             	shr    eax,0xa
c000f860:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f865:	2d 00 00 40 00       	sub    eax,0x400000
c000f86a:	39 c3                	cmp    ebx,eax
c000f86c:	77 c5                	ja     c000f833 <sbrk+0xc3>
c000f86e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f871:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f877:	39 d8                	cmp    eax,ebx
c000f879:	73 f3                	jae    c000f86e <sbrk+0xfe>
c000f87b:	eb b6                	jmp    c000f833 <sbrk+0xc3>

c000f87d <mmap>:
c000f87d:	83 ec 18             	sub    esp,0x18
c000f880:	68 f8 aa 02 c0       	push   0xc002aaf8
c000f885:	e8 fd af 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000f88a:	b8 00 00 00 00       	mov    eax,0x0
c000f88f:	83 c4 1c             	add    esp,0x1c
c000f892:	c3                   	ret    

c000f893 <munmap>:
c000f893:	83 ec 18             	sub    esp,0x18
c000f896:	68 fd aa 02 c0       	push   0xc002aafd
c000f89b:	e8 e7 af 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000f8a0:	b8 00 00 00 00       	mov    eax,0x0
c000f8a5:	83 c4 1c             	add    esp,0x1c
c000f8a8:	c3                   	ret    

c000f8a9 <liballoc_lock()>:
c000f8a9:	fa                   	cli    
c000f8aa:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c000f8b0:	b8 00 00 00 00       	mov    eax,0x0
c000f8b5:	c3                   	ret    

c000f8b6 <liballoc_unlock()>:
c000f8b6:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000f8bb:	48                   	dec    eax
c000f8bc:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000f8c1:	75 01                	jne    c000f8c4 <liballoc_unlock()+0xe>
c000f8c3:	fb                   	sti    
c000f8c4:	b8 00 00 00 00       	mov    eax,0x0
c000f8c9:	c3                   	ret    

c000f8ca <liballoc_alloc(int)>:
c000f8ca:	83 ec 10             	sub    esp,0x10
c000f8cd:	68 01 08 00 00       	push   0x801
c000f8d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8d6:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c000f8dc:	e8 1d 2b 00 00       	call   c00123fe <VAS::allocatePages(int, int)>
c000f8e1:	83 c4 1c             	add    esp,0x1c
c000f8e4:	c3                   	ret    

c000f8e5 <liballoc_free(void*, int)>:
c000f8e5:	83 ec 14             	sub    esp,0x14
c000f8e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8ec:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c000f8f2:	e8 b1 27 00 00       	call   c00120a8 <VAS::freeAllocatedPages(unsigned long)>
c000f8f7:	b8 00 00 00 00       	mov    eax,0x0
c000f8fc:	83 c4 1c             	add    esp,0x1c
c000f8ff:	c3                   	ret    

c000f900 <realloc>:
c000f900:	83 ec 14             	sub    esp,0x14
c000f903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f907:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f90b:	e8 4c 1d ff ff       	call   c000165c <dlrealloc>
c000f910:	83 c4 1c             	add    esp,0x1c
c000f913:	c3                   	ret    

c000f914 <malloc>:
c000f914:	83 ec 18             	sub    esp,0x18
c000f917:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f91b:	e8 ff 17 ff ff       	call   c000111f <dlmalloc>
c000f920:	83 c4 1c             	add    esp,0x1c
c000f923:	c3                   	ret    

c000f924 <free>:
c000f924:	83 ec 18             	sub    esp,0x18
c000f927:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f92b:	e8 94 14 ff ff       	call   c0000dc4 <dlfree>
c000f930:	83 c4 1c             	add    esp,0x1c
c000f933:	c3                   	ret    

c000f934 <rfree>:
c000f934:	83 ec 18             	sub    esp,0x18
c000f937:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f93b:	e8 84 14 ff ff       	call   c0000dc4 <dlfree>
c000f940:	83 c4 1c             	add    esp,0x1c
c000f943:	c3                   	ret    

c000f944 <calloc>:
c000f944:	56                   	push   esi
c000f945:	53                   	push   ebx
c000f946:	83 ec 10             	sub    esp,0x10
c000f949:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f94d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f952:	53                   	push   ebx
c000f953:	e8 bc ff ff ff       	call   c000f914 <malloc>
c000f958:	89 c6                	mov    esi,eax
c000f95a:	83 c4 0c             	add    esp,0xc
c000f95d:	53                   	push   ebx
c000f95e:	6a 00                	push   0x0
c000f960:	50                   	push   eax
c000f961:	e8 1a 0e ff ff       	call   c0000780 <memset>
c000f966:	89 f0                	mov    eax,esi
c000f968:	83 c4 14             	add    esp,0x14
c000f96b:	5b                   	pop    ebx
c000f96c:	5e                   	pop    esi
c000f96d:	c3                   	ret    

c000f96e <hwTextMode_loadInData(VgaText*)>:
c000f96e:	55                   	push   ebp
c000f96f:	a1 60 dd 02 c0       	mov    eax,ds:0xc002dd60
c000f974:	57                   	push   edi
c000f975:	56                   	push   esi
c000f976:	53                   	push   ebx
c000f977:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f97b:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f97e:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f981:	85 d2                	test   edx,edx
c000f983:	7e 29                	jle    c000f9ae <hwTextMode_loadInData(VgaText*)+0x40>
c000f985:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f98b:	31 f6                	xor    esi,esi
c000f98d:	29 cd                	sub    ebp,ecx
c000f98f:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f992:	31 c0                	xor    eax,eax
c000f994:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f998:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f99c:	40                   	inc    eax
c000f99d:	83 f8 50             	cmp    eax,0x50
c000f9a0:	75 f2                	jne    c000f994 <hwTextMode_loadInData(VgaText*)+0x26>
c000f9a2:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f9a8:	46                   	inc    esi
c000f9a9:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f9ac:	7f e1                	jg     c000f98f <hwTextMode_loadInData(VgaText*)+0x21>
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	5f                   	pop    edi
c000f9b1:	5d                   	pop    ebp
c000f9b2:	c3                   	ret    

c000f9b3 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f9b3:	55                   	push   ebp
c000f9b4:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000f9bb:	57                   	push   edi
c000f9bc:	56                   	push   esi
c000f9bd:	53                   	push   ebx
c000f9be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9c2:	75 44                	jne    c000fa08 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f9c4:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9c7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9ca:	8b 15 60 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd60
c000f9d0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f9d4:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9da:	eb 08                	jmp    c000f9e4 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f9dc:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9df:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9e2:	89 da                	mov    edx,ebx
c000f9e4:	83 e5 0f             	and    ebp,0xf
c000f9e7:	c1 e0 04             	shl    eax,0x4
c000f9ea:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f9ed:	0f b6 c0             	movzx  eax,al
c000f9f0:	41                   	inc    ecx
c000f9f1:	09 e8                	or     eax,ebp
c000f9f3:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f9f7:	c1 e0 08             	shl    eax,0x8
c000f9fa:	09 e8                	or     eax,ebp
c000f9fc:	39 fb                	cmp    ebx,edi
c000f9fe:	66 89 02             	mov    WORD PTR [edx],ax
c000fa01:	75 d9                	jne    c000f9dc <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000fa03:	5b                   	pop    ebx
c000fa04:	5e                   	pop    esi
c000fa05:	5f                   	pop    edi
c000fa06:	5d                   	pop    ebp
c000fa07:	c3                   	ret    
c000fa08:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000fa0f:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000fa16:	31 c0                	xor    eax,eax
c000fa18:	bd 02 00 00 00       	mov    ebp,0x2
c000fa1d:	eb ab                	jmp    c000f9ca <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000fa1f <hwTextMode_showCursor(VgaText*, bool)>:
c000fa1f:	56                   	push   esi
c000fa20:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fa27:	53                   	push   ebx
c000fa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa2c:	75 36                	jne    c000fa64 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000fa2e:	84 c0                	test   al,al
c000fa30:	74 35                	je     c000fa67 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000fa32:	bb d4 03 00 00       	mov    ebx,0x3d4
c000fa37:	b0 0a                	mov    al,0xa
c000fa39:	89 da                	mov    edx,ebx
c000fa3b:	ee                   	out    dx,al
c000fa3c:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa41:	89 ca                	mov    edx,ecx
c000fa43:	ec                   	in     al,dx
c000fa44:	b2 0f                	mov    dl,0xf
c000fa46:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa4a:	83 e0 c0             	and    eax,0xffffffc0
c000fa4d:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000fa50:	09 d0                	or     eax,edx
c000fa52:	89 ca                	mov    edx,ecx
c000fa54:	ee                   	out    dx,al
c000fa55:	b0 0b                	mov    al,0xb
c000fa57:	89 da                	mov    edx,ebx
c000fa59:	ee                   	out    dx,al
c000fa5a:	89 ca                	mov    edx,ecx
c000fa5c:	ec                   	in     al,dx
c000fa5d:	83 e0 e0             	and    eax,0xffffffe0
c000fa60:	83 c8 0f             	or     eax,0xf
c000fa63:	ee                   	out    dx,al
c000fa64:	5b                   	pop    ebx
c000fa65:	5e                   	pop    esi
c000fa66:	c3                   	ret    
c000fa67:	b0 0a                	mov    al,0xa
c000fa69:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa6e:	ee                   	out    dx,al
c000fa6f:	b0 20                	mov    al,0x20
c000fa71:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa76:	ee                   	out    dx,al
c000fa77:	5b                   	pop    ebx
c000fa78:	5e                   	pop    esi
c000fa79:	c3                   	ret    

c000fa7a <hwTextMode_update(VgaText*)>:
c000fa7a:	c3                   	ret    

c000fa7b <hwTextMode_updateCursor(VgaText*)>:
c000fa7b:	56                   	push   esi
c000fa7c:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fa83:	53                   	push   ebx
c000fa84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa88:	75 36                	jne    c000fac0 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa8a:	be d4 03 00 00       	mov    esi,0x3d4
c000fa8f:	b9 19 00 00 00       	mov    ecx,0x19
c000fa94:	89 f2                	mov    edx,esi
c000fa96:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa99:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa9c:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa9f:	c1 e1 04             	shl    ecx,0x4
c000faa2:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000faa5:	b0 0f                	mov    al,0xf
c000faa7:	ee                   	out    dx,al
c000faa8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000faad:	88 c8                	mov    al,cl
c000faaf:	89 da                	mov    edx,ebx
c000fab1:	ee                   	out    dx,al
c000fab2:	b0 0e                	mov    al,0xe
c000fab4:	89 f2                	mov    edx,esi
c000fab6:	ee                   	out    dx,al
c000fab7:	89 c8                	mov    eax,ecx
c000fab9:	89 da                	mov    edx,ebx
c000fabb:	66 c1 e8 08          	shr    ax,0x8
c000fabf:	ee                   	out    dx,al
c000fac0:	5b                   	pop    ebx
c000fac1:	5e                   	pop    esi
c000fac2:	c3                   	ret    

c000fac3 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fac3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fac7:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000face:	75 38                	jne    c000fb08 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fad0:	ba da 03 00 00       	mov    edx,0x3da
c000fad5:	84 c0                	test   al,al
c000fad7:	75 18                	jne    c000faf1 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fad9:	ec                   	in     al,dx
c000fada:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fadf:	b0 30                	mov    al,0x30
c000fae1:	89 ca                	mov    edx,ecx
c000fae3:	ee                   	out    dx,al
c000fae4:	ba c1 03 00 00       	mov    edx,0x3c1
c000fae9:	ec                   	in     al,dx
c000faea:	83 c8 08             	or     eax,0x8
c000faed:	89 ca                	mov    edx,ecx
c000faef:	ee                   	out    dx,al
c000faf0:	c3                   	ret    
c000faf1:	ec                   	in     al,dx
c000faf2:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000faf7:	b0 30                	mov    al,0x30
c000faf9:	89 ca                	mov    edx,ecx
c000fafb:	ee                   	out    dx,al
c000fafc:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb01:	ec                   	in     al,dx
c000fb02:	83 e0 f7             	and    eax,0xfffffff7
c000fb05:	89 ca                	mov    edx,ecx
c000fb07:	ee                   	out    dx,al
c000fb08:	c3                   	ret    

c000fb09 <hwTextMode_scrollScreen(VgaText*)>:
c000fb09:	55                   	push   ebp
c000fb0a:	57                   	push   edi
c000fb0b:	56                   	push   esi
c000fb0c:	53                   	push   ebx
c000fb0d:	83 ec 1c             	sub    esp,0x1c
c000fb10:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb14:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fb1b:	74 0e                	je     c000fb2b <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fb1d:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fb24:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fb2b:	a1 60 dd 02 c0       	mov    eax,ds:0xc002dd60
c000fb30:	bd 02 00 00 00       	mov    ebp,0x2
c000fb35:	05 a0 00 00 00       	add    eax,0xa0
c000fb3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb3e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb42:	31 c0                	xor    eax,eax
c000fb44:	eb 0b                	jmp    c000fb51 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fb46:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb4c:	74 51                	je     c000fb9f <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fb4e:	43                   	inc    ebx
c000fb4f:	89 f0                	mov    eax,esi
c000fb51:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb57:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb5d:	88 13                	mov    BYTE PTR [ebx],dl
c000fb5f:	8d 70 01             	lea    esi,[eax+0x1]
c000fb62:	83 fd 18             	cmp    ebp,0x18
c000fb65:	75 df                	jne    c000fb46 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb67:	a8 01                	test   al,0x1
c000fb69:	75 13                	jne    c000fb7e <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb6b:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb6e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb74:	75 d8                	jne    c000fb4e <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb76:	83 c4 1c             	add    esp,0x1c
c000fb79:	5b                   	pop    ebx
c000fb7a:	5e                   	pop    esi
c000fb7b:	5f                   	pop    edi
c000fb7c:	5d                   	pop    ebp
c000fb7d:	c3                   	ret    
c000fb7e:	83 ec 08             	sub    esp,0x8
c000fb81:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb85:	50                   	push   eax
c000fb86:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb8a:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb8e:	50                   	push   eax
c000fb8f:	e8 18 0c 00 00       	call   c00107ac <VgaText::combineColours(unsigned char, unsigned char)>
c000fb94:	83 c4 10             	add    esp,0x10
c000fb97:	88 07                	mov    BYTE PTR [edi],al
c000fb99:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb9d:	eb cf                	jmp    c000fb6e <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb9f:	45                   	inc    ebp
c000fba0:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fba8:	eb 94                	jmp    c000fb3e <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fbaa <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fbaa:	57                   	push   edi
c000fbab:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fbb2:	56                   	push   esi
c000fbb3:	53                   	push   ebx
c000fbb4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fbb8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fbbc:	75 62                	jne    c000fc20 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fbbe:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fbc3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fbc8:	83 ec 08             	sub    esp,0x8
c000fbcb:	52                   	push   edx
c000fbcc:	50                   	push   eax
c000fbcd:	e8 da 0b 00 00       	call   c00107ac <VgaText::combineColours(unsigned char, unsigned char)>
c000fbd2:	5a                   	pop    edx
c000fbd3:	0f b6 c0             	movzx  eax,al
c000fbd6:	59                   	pop    ecx
c000fbd7:	50                   	push   eax
c000fbd8:	0f be c3             	movsx  eax,bl
c000fbdb:	50                   	push   eax
c000fbdc:	e8 71 0c 00 00       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	8b 35 60 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd60
c000fbea:	80 3d c0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eec0,0x0
c000fbf1:	74 07                	je     c000fbfa <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fbf3:	66 0f be c3          	movsx  ax,bl
c000fbf7:	80 cc 02             	or     ah,0x2
c000fbfa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbfe:	ba 19 00 00 00       	mov    edx,0x19
c000fc03:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fc06:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fc09:	8d 14 92             	lea    edx,[edx+edx*4]
c000fc0c:	c1 e1 04             	shl    ecx,0x4
c000fc0f:	c1 e2 04             	shl    edx,0x4
c000fc12:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fc16:	01 ca                	add    edx,ecx
c000fc18:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fc1c:	5b                   	pop    ebx
c000fc1d:	5e                   	pop    esi
c000fc1e:	5f                   	pop    edi
c000fc1f:	c3                   	ret    
c000fc20:	b8 02 00 00 00       	mov    eax,0x2
c000fc25:	31 d2                	xor    edx,edx
c000fc27:	eb 9f                	jmp    c000fbc8 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fc29 <setupTextMode()>:
c000fc29:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fc2e:	83 e0 30             	and    eax,0x30
c000fc31:	66 83 f8 30          	cmp    ax,0x30
c000fc35:	75 11                	jne    c000fc48 <setupTextMode()+0x1f>
c000fc37:	81 2d 60 dd 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dd60,0x8000
c000fc41:	c6 05 c0 ee 02 c0 01 	mov    BYTE PTR ds:0xc002eec0,0x1
c000fc48:	c7 05 f8 ee 02 c0 c3 fa 00 c0 	mov    DWORD PTR ds:0xc002eef8,0xc000fac3
c000fc52:	c7 05 e4 ee 02 c0 6e f9 00 c0 	mov    DWORD PTR ds:0xc002eee4,0xc000f96e
c000fc5c:	c7 05 e0 ee 02 c0 b3 f9 00 c0 	mov    DWORD PTR ds:0xc002eee0,0xc000f9b3
c000fc66:	c7 05 ec ee 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002eeec,0xc000fb09
c000fc70:	c7 05 f4 ee 02 c0 1f fa 00 c0 	mov    DWORD PTR ds:0xc002eef4,0xc000fa1f
c000fc7a:	c7 05 e8 ee 02 c0 7a fa 00 c0 	mov    DWORD PTR ds:0xc002eee8,0xc000fa7a
c000fc84:	c7 05 f0 ee 02 c0 7b fa 00 c0 	mov    DWORD PTR ds:0xc002eef0,0xc000fa7b
c000fc8e:	c7 05 fc ee 02 c0 aa fb 00 c0 	mov    DWORD PTR ds:0xc002eefc,0xc000fbaa
c000fc98:	c3                   	ret    

c000fc99 <kernel_main>:
c000fc99:	57                   	push   edi
c000fc9a:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc9f:	56                   	push   esi
c000fca0:	89 fa                	mov    edx,edi
c000fca2:	53                   	push   ebx
c000fca3:	31 f6                	xor    esi,esi
c000fca5:	83 ec 2c             	sub    esp,0x2c
c000fca8:	89 f0                	mov    eax,esi
c000fcaa:	ee                   	out    dx,al
c000fcab:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fcb0:	b0 80                	mov    al,0x80
c000fcb2:	89 da                	mov    edx,ebx
c000fcb4:	ee                   	out    dx,al
c000fcb5:	b1 03                	mov    cl,0x3
c000fcb7:	ba f8 03 00 00       	mov    edx,0x3f8
c000fcbc:	88 c8                	mov    al,cl
c000fcbe:	ee                   	out    dx,al
c000fcbf:	89 f0                	mov    eax,esi
c000fcc1:	89 fa                	mov    edx,edi
c000fcc3:	ee                   	out    dx,al
c000fcc4:	88 c8                	mov    al,cl
c000fcc6:	89 da                	mov    edx,ebx
c000fcc8:	ee                   	out    dx,al
c000fcc9:	b0 c7                	mov    al,0xc7
c000fccb:	ba fa 03 00 00       	mov    edx,0x3fa
c000fcd0:	ee                   	out    dx,al
c000fcd1:	b0 0b                	mov    al,0xb
c000fcd3:	ba fc 03 00 00       	mov    edx,0x3fc
c000fcd8:	ee                   	out    dx,al
c000fcd9:	68 04 ab 02 c0       	push   0xc002ab04
c000fcde:	e8 e8 31 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000fce3:	e8 56 09 00 00       	call   c001063e <installVgaTextImplementation()>
c000fce8:	e8 3c ff ff ff       	call   c000fc29 <setupTextMode()>
c000fced:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fcf2:	05 ff 0f 00 00       	add    eax,0xfff
c000fcf7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fcfc:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcff:	e8 f5 03 00 00       	call   c00100f9 <Phys::physicalMemorySetup(unsigned int)>
c000fd04:	e8 7b 1f 00 00       	call   c0011c84 <Virt::virtualMemorySetup()>
c000fd09:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fd0f:	83 c4 10             	add    esp,0x10
c000fd12:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fd18:	75 0e                	jne    c000fd28 <kernel_main+0x8f>
c000fd1a:	89 d8                	mov    eax,ebx
c000fd1c:	25 48 03 00 00       	and    eax,0x348
c000fd21:	3d 00 03 00 00       	cmp    eax,0x300
c000fd26:	74 10                	je     c000fd38 <kernel_main+0x9f>
c000fd28:	83 ec 0c             	sub    esp,0xc
c000fd2b:	68 95 c4 02 c0       	push   0xc002c495
c000fd30:	e8 52 ab 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000fd35:	83 c4 10             	add    esp,0x10
c000fd38:	83 ec 0c             	sub    esp,0xc
c000fd3b:	89 1d 40 ee 02 c0    	mov    DWORD PTR ds:0xc002ee40,ebx
c000fd41:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd45:	53                   	push   ebx
c000fd46:	e8 85 21 00 00       	call   c0011ed0 <VAS::VAS()>
c000fd4b:	89 1d b0 ef 02 c0    	mov    DWORD PTR ds:0xc002efb0,ebx
c000fd51:	e8 ca 02 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd56:	c7 04 24 1b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab1b
c000fd5d:	e8 69 31 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000fd62:	e8 9c 1f 00 00       	call   c0011d03 <Virt::swappingSetup()>
c000fd67:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd6e:	e8 a1 fb ff ff       	call   c000f914 <malloc>
c000fd73:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd76:	89 c6                	mov    esi,eax
c000fd78:	e8 8f ea ff ff       	call   c000e80c <Computer::Computer()>
c000fd7d:	58                   	pop    eax
c000fd7e:	89 35 28 ee 02 c0    	mov    DWORD PTR ds:0xc002ee28,esi
c000fd84:	5a                   	pop    edx
c000fd85:	56                   	push   esi
c000fd86:	68 38 ab 02 c0       	push   0xc002ab38
c000fd8b:	e8 3b 31 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000fd90:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c000fd95:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd97:	6a 00                	push   0x0
c000fd99:	6a 00                	push   0x0
c000fd9b:	6a 00                	push   0x0
c000fd9d:	50                   	push   eax
c000fd9e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fda1:	83 c4 14             	add    esp,0x14
c000fda4:	53                   	push   ebx
c000fda5:	e8 d6 23 00 00       	call   c0012180 <VAS::~VAS()>
c000fdaa:	c7 04 24 4b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab4b
c000fdb1:	e8 d1 aa 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000fdb6:	83 c4 30             	add    esp,0x30
c000fdb9:	5b                   	pop    ebx
c000fdba:	5e                   	pop    esi
c000fdbb:	5f                   	pop    edi
c000fdbc:	c3                   	ret    

c000fdbd <Phys::allocateDMA(unsigned long)>:
c000fdbd:	55                   	push   ebp
c000fdbe:	31 d2                	xor    edx,edx
c000fdc0:	57                   	push   edi
c000fdc1:	31 ed                	xor    ebp,ebp
c000fdc3:	56                   	push   esi
c000fdc4:	31 c9                	xor    ecx,ecx
c000fdc6:	53                   	push   ebx
c000fdc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdcb:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fdd1:	31 c0                	xor    eax,eax
c000fdd3:	c1 ee 0c             	shr    esi,0xc
c000fdd6:	eb 17                	jmp    c000fdef <Phys::allocateDMA(unsigned long)+0x32>
c000fdd8:	85 c9                	test   ecx,ecx
c000fdda:	75 04                	jne    c000fde0 <Phys::allocateDMA(unsigned long)+0x23>
c000fddc:	89 d5                	mov    ebp,edx
c000fdde:	89 d0                	mov    eax,edx
c000fde0:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fde3:	39 de                	cmp    esi,ebx
c000fde5:	74 20                	je     c000fe07 <Phys::allocateDMA(unsigned long)+0x4a>
c000fde7:	42                   	inc    edx
c000fde8:	89 d9                	mov    ecx,ebx
c000fdea:	83 fa 2f             	cmp    edx,0x2f
c000fded:	7f 11                	jg     c000fe00 <Phys::allocateDMA(unsigned long)+0x43>
c000fdef:	80 ba 80 ee 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1180],0x0
c000fdf6:	74 e0                	je     c000fdd8 <Phys::allocateDMA(unsigned long)+0x1b>
c000fdf8:	31 c9                	xor    ecx,ecx
c000fdfa:	42                   	inc    edx
c000fdfb:	83 fa 2f             	cmp    edx,0x2f
c000fdfe:	7e ef                	jle    c000fdef <Phys::allocateDMA(unsigned long)+0x32>
c000fe00:	5b                   	pop    ebx
c000fe01:	31 c0                	xor    eax,eax
c000fe03:	5e                   	pop    esi
c000fe04:	5f                   	pop    edi
c000fe05:	5d                   	pop    ebp
c000fe06:	c3                   	ret    
c000fe07:	8d 14 30             	lea    edx,[eax+esi*1]
c000fe0a:	89 d7                	mov    edi,edx
c000fe0c:	4f                   	dec    edi
c000fe0d:	79 03                	jns    c000fe12 <Phys::allocateDMA(unsigned long)+0x55>
c000fe0f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fe12:	c1 ff 04             	sar    edi,0x4
c000fe15:	89 c2                	mov    edx,eax
c000fe17:	c1 fa 04             	sar    edx,0x4
c000fe1a:	39 fa                	cmp    edx,edi
c000fe1c:	75 2f                	jne    c000fe4d <Phys::allocateDMA(unsigned long)+0x90>
c000fe1e:	85 db                	test   ebx,ebx
c000fe20:	74 1a                	je     c000fe3c <Phys::allocateDMA(unsigned long)+0x7f>
c000fe22:	be 80 ee 02 c0       	mov    esi,0xc002ee80
c000fe27:	8d 90 80 ee 02 c0    	lea    edx,[eax-0x3ffd1180]
c000fe2d:	f7 d6                	not    esi
c000fe2f:	29 c6                	sub    esi,eax
c000fe31:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe34:	42                   	inc    edx
c000fe35:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fe38:	39 d9                	cmp    ecx,ebx
c000fe3a:	7f f5                	jg     c000fe31 <Phys::allocateDMA(unsigned long)+0x74>
c000fe3c:	85 ff                	test   edi,edi
c000fe3e:	74 13                	je     c000fe53 <Phys::allocateDMA(unsigned long)+0x96>
c000fe40:	5b                   	pop    ebx
c000fe41:	05 50 20 0c 00       	add    eax,0xc2050
c000fe46:	5e                   	pop    esi
c000fe47:	c1 e0 0c             	shl    eax,0xc
c000fe4a:	5f                   	pop    edi
c000fe4b:	5d                   	pop    ebp
c000fe4c:	c3                   	ret    
c000fe4d:	89 ea                	mov    edx,ebp
c000fe4f:	31 c9                	xor    ecx,ecx
c000fe51:	eb a7                	jmp    c000fdfa <Phys::allocateDMA(unsigned long)+0x3d>
c000fe53:	5b                   	pop    ebx
c000fe54:	c1 e0 0c             	shl    eax,0xc
c000fe57:	5e                   	pop    esi
c000fe58:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe5d:	5f                   	pop    edi
c000fe5e:	5d                   	pop    ebp
c000fe5f:	c3                   	ret    

c000fe60 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe68:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe6e:	c1 e9 0c             	shr    ecx,0xc
c000fe71:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe76:	76 25                	jbe    c000fe9d <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe78:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe7d:	c1 e8 0c             	shr    eax,0xc
c000fe80:	8d 50 10             	lea    edx,[eax+0x10]
c000fe83:	85 c9                	test   ecx,ecx
c000fe85:	74 15                	je     c000fe9c <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe87:	8d 82 80 ee 02 c0    	lea    eax,[edx-0x3ffd1180]
c000fe8d:	8d 94 11 80 ee 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1180]
c000fe94:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe97:	40                   	inc    eax
c000fe98:	39 d0                	cmp    eax,edx
c000fe9a:	75 f8                	jne    c000fe94 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe9c:	c3                   	ret    
c000fe9d:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fea3:	c1 ea 0c             	shr    edx,0xc
c000fea6:	eb db                	jmp    c000fe83 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fea8 <Phys::setPageState(unsigned long, bool)>:
c000fea8:	56                   	push   esi
c000fea9:	ba 01 00 00 00       	mov    edx,0x1
c000feae:	53                   	push   ebx
c000feaf:	8b 35 58 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd58
c000feb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000feb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000febd:	89 c8                	mov    eax,ecx
c000febf:	83 e1 07             	and    ecx,0x7
c000fec2:	c1 e8 03             	shr    eax,0x3
c000fec5:	d3 e3                	shl    ebx,cl
c000fec7:	01 c6                	add    esi,eax
c000fec9:	d3 e2                	shl    edx,cl
c000fecb:	f7 d2                	not    edx
c000fecd:	20 16                	and    BYTE PTR [esi],dl
c000fecf:	03 05 58 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd58
c000fed5:	08 18                	or     BYTE PTR [eax],bl
c000fed7:	5b                   	pop    ebx
c000fed8:	5e                   	pop    esi
c000fed9:	c3                   	ret    

c000feda <Phys::getPageState(unsigned long)>:
c000feda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fede:	8b 15 58 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd58
c000fee4:	89 c8                	mov    eax,ecx
c000fee6:	83 e1 07             	and    ecx,0x7
c000fee9:	c1 e8 03             	shr    eax,0x3
c000feec:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fef0:	d3 f8                	sar    eax,cl
c000fef2:	83 e0 01             	and    eax,0x1
c000fef5:	c3                   	ret    

c000fef6 <Phys::freePage(unsigned long)>:
c000fef6:	53                   	push   ebx
c000fef7:	83 ec 08             	sub    esp,0x8
c000fefa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fefe:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000ff04:	76 57                	jbe    c000ff5d <Phys::freePage(unsigned long)+0x67>
c000ff06:	c1 eb 0c             	shr    ebx,0xc
c000ff09:	53                   	push   ebx
c000ff0a:	e8 cb ff ff ff       	call   c000feda <Phys::getPageState(unsigned long)>
c000ff0f:	5a                   	pop    edx
c000ff10:	84 c0                	test   al,al
c000ff12:	74 5b                	je     c000ff6f <Phys::freePage(unsigned long)+0x79>
c000ff14:	a1 70 ee 02 c0       	mov    eax,ds:0xc002ee70
c000ff19:	48                   	dec    eax
c000ff1a:	a3 70 ee 02 c0       	mov    ds:0xc002ee70,eax
c000ff1f:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff22:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff25:	c1 e0 02             	shl    eax,0x2
c000ff28:	99                   	cdq    
c000ff29:	f7 3d 74 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee74
c000ff2f:	39 05 6c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee6c,eax
c000ff35:	75 13                	jne    c000ff4a <Phys::freePage(unsigned long)+0x54>
c000ff37:	83 ec 08             	sub    esp,0x8
c000ff3a:	6a 00                	push   0x0
c000ff3c:	53                   	push   ebx
c000ff3d:	e8 66 ff ff ff       	call   c000fea8 <Phys::setPageState(unsigned long, bool)>
c000ff42:	83 c4 10             	add    esp,0x10
c000ff45:	83 c4 08             	add    esp,0x8
c000ff48:	5b                   	pop    ebx
c000ff49:	c3                   	ret    
c000ff4a:	83 ec 0c             	sub    esp,0xc
c000ff4d:	a3 6c ee 02 c0       	mov    ds:0xc002ee6c,eax
c000ff52:	50                   	push   eax
c000ff53:	e8 14 0a 00 00       	call   c001096c <VgaText::updateRAMUsageDisplay(int)>
c000ff58:	83 c4 10             	add    esp,0x10
c000ff5b:	eb da                	jmp    c000ff37 <Phys::freePage(unsigned long)+0x41>
c000ff5d:	68 00 10 00 00       	push   0x1000
c000ff62:	53                   	push   ebx
c000ff63:	e8 f8 fe ff ff       	call   c000fe60 <Phys::freeDMA(unsigned long, unsigned long)>
c000ff68:	59                   	pop    ecx
c000ff69:	5b                   	pop    ebx
c000ff6a:	83 c4 08             	add    esp,0x8
c000ff6d:	5b                   	pop    ebx
c000ff6e:	c3                   	ret    
c000ff6f:	c7 44 24 10 66 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab66
c000ff77:	83 c4 08             	add    esp,0x8
c000ff7a:	5b                   	pop    ebx
c000ff7b:	e9 07 a9 00 00       	jmp    c001a887 <Krnl::panic(char const*)>

c000ff80 <Phys::allocatePage()>:
c000ff80:	56                   	push   esi
c000ff81:	53                   	push   ebx
c000ff82:	51                   	push   ecx
c000ff83:	8b 35 64 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee64
c000ff89:	89 f3                	mov    ebx,esi
c000ff8b:	eb 0a                	jmp    c000ff97 <Phys::allocatePage()+0x17>
c000ff8d:	89 1d 64 ee 02 c0    	mov    DWORD PTR ds:0xc002ee64,ebx
c000ff93:	39 de                	cmp    esi,ebx
c000ff95:	74 24                	je     c000ffbb <Phys::allocatePage()+0x3b>
c000ff97:	53                   	push   ebx
c000ff98:	e8 3d ff ff ff       	call   c000feda <Phys::getPageState(unsigned long)>
c000ff9d:	5a                   	pop    edx
c000ff9e:	84 c0                	test   al,al
c000ffa0:	74 77                	je     c0010019 <Phys::allocatePage()+0x99>
c000ffa2:	43                   	inc    ebx
c000ffa3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffa9:	75 e2                	jne    c000ff8d <Phys::allocatePage()+0xd>
c000ffab:	31 db                	xor    ebx,ebx
c000ffad:	c7 05 64 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee64,0x0
c000ffb7:	39 de                	cmp    esi,ebx
c000ffb9:	75 dc                	jne    c000ff97 <Phys::allocatePage()+0x17>
c000ffbb:	83 ec 0c             	sub    esp,0xc
c000ffbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffc3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffc6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffcc:	e8 27 2c 00 00       	call   c0012bf8 <VAS::scanForEviction()>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	85 c0                	test   eax,eax
c000ffd6:	75 76                	jne    c001004e <Phys::allocatePage()+0xce>
c000ffd8:	83 ec 0c             	sub    esp,0xc
c000ffdb:	68 7c ab 02 c0       	push   0xc002ab7c
c000ffe0:	e8 e6 2e 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c000ffe5:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ffec:	e8 cc fd ff ff       	call   c000fdbd <Phys::allocateDMA(unsigned long)>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	85 c0                	test   eax,eax
c000fff6:	75 56                	jne    c001004e <Phys::allocatePage()+0xce>
c000fff8:	83 ec 0c             	sub    esp,0xc
c000fffb:	68 8d ab 02 c0       	push   0xc002ab8d
c0010000:	e8 82 a8 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0010005:	83 c4 10             	add    esp,0x10
c0010008:	8b 1d 64 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee64
c001000e:	53                   	push   ebx
c001000f:	e8 c6 fe ff ff       	call   c000feda <Phys::getPageState(unsigned long)>
c0010014:	5a                   	pop    edx
c0010015:	84 c0                	test   al,al
c0010017:	75 89                	jne    c000ffa2 <Phys::allocatePage()+0x22>
c0010019:	6a 01                	push   0x1
c001001b:	53                   	push   ebx
c001001c:	e8 87 fe ff ff       	call   c000fea8 <Phys::setPageState(unsigned long, bool)>
c0010021:	a1 70 ee 02 c0       	mov    eax,ds:0xc002ee70
c0010026:	59                   	pop    ecx
c0010027:	40                   	inc    eax
c0010028:	5b                   	pop    ebx
c0010029:	a3 70 ee 02 c0       	mov    ds:0xc002ee70,eax
c001002e:	8d 04 80             	lea    eax,[eax+eax*4]
c0010031:	8d 04 80             	lea    eax,[eax+eax*4]
c0010034:	c1 e0 02             	shl    eax,0x2
c0010037:	99                   	cdq    
c0010038:	f7 3d 74 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee74
c001003e:	39 05 6c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee6c,eax
c0010044:	75 0c                	jne    c0010052 <Phys::allocatePage()+0xd2>
c0010046:	a1 64 ee 02 c0       	mov    eax,ds:0xc002ee64
c001004b:	c1 e0 0c             	shl    eax,0xc
c001004e:	5a                   	pop    edx
c001004f:	5b                   	pop    ebx
c0010050:	5e                   	pop    esi
c0010051:	c3                   	ret    
c0010052:	83 ec 0c             	sub    esp,0xc
c0010055:	a3 6c ee 02 c0       	mov    ds:0xc002ee6c,eax
c001005a:	50                   	push   eax
c001005b:	e8 0c 09 00 00       	call   c001096c <VgaText::updateRAMUsageDisplay(int)>
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	eb e1                	jmp    c0010046 <Phys::allocatePage()+0xc6>

c0010065 <Phys::allocateContiguousPages(int)>:
c0010065:	57                   	push   edi
c0010066:	56                   	push   esi
c0010067:	53                   	push   ebx
c0010068:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001006c:	fa                   	cli    
c001006d:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c0010073:	31 db                	xor    ebx,ebx
c0010075:	85 db                	test   ebx,ebx
c0010077:	75 11                	jne    c001008a <Phys::allocateContiguousPages(int)+0x25>
c0010079:	e8 02 ff ff ff       	call   c000ff80 <Phys::allocatePage()>
c001007e:	83 fe 01             	cmp    esi,0x1
c0010081:	89 c7                	mov    edi,eax
c0010083:	74 21                	je     c00100a6 <Phys::allocateContiguousPages(int)+0x41>
c0010085:	bb 01 00 00 00       	mov    ebx,0x1
c001008a:	e8 f1 fe ff ff       	call   c000ff80 <Phys::allocatePage()>
c001008f:	89 da                	mov    edx,ebx
c0010091:	c1 e2 0c             	shl    edx,0xc
c0010094:	01 fa                	add    edx,edi
c0010096:	39 c2                	cmp    edx,eax
c0010098:	74 20                	je     c00100ba <Phys::allocateContiguousPages(int)+0x55>
c001009a:	bb 01 00 00 00       	mov    ebx,0x1
c001009f:	89 c7                	mov    edi,eax
c00100a1:	83 fe 01             	cmp    esi,0x1
c00100a4:	75 e4                	jne    c001008a <Phys::allocateContiguousPages(int)+0x25>
c00100a6:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00100ab:	48                   	dec    eax
c00100ac:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00100b1:	75 01                	jne    c00100b4 <Phys::allocateContiguousPages(int)+0x4f>
c00100b3:	fb                   	sti    
c00100b4:	89 f8                	mov    eax,edi
c00100b6:	5b                   	pop    ebx
c00100b7:	5e                   	pop    esi
c00100b8:	5f                   	pop    edi
c00100b9:	c3                   	ret    
c00100ba:	43                   	inc    ebx
c00100bb:	39 f3                	cmp    ebx,esi
c00100bd:	75 b6                	jne    c0010075 <Phys::allocateContiguousPages(int)+0x10>
c00100bf:	eb e5                	jmp    c00100a6 <Phys::allocateContiguousPages(int)+0x41>

c00100c1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100c1:	56                   	push   esi
c00100c2:	53                   	push   ebx
c00100c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100c7:	39 1d 68 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee68,ebx
c00100cd:	73 06                	jae    c00100d5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100cf:	89 1d 68 ee 02 c0    	mov    DWORD PTR ds:0xc002ee68,ebx
c00100d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100d9:	c1 eb 0c             	shr    ebx,0xc
c00100dc:	c1 e8 0c             	shr    eax,0xc
c00100df:	39 d8                	cmp    eax,ebx
c00100e1:	73 13                	jae    c00100f6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100e3:	6a 00                	push   0x0
c00100e5:	8d 70 01             	lea    esi,[eax+0x1]
c00100e8:	50                   	push   eax
c00100e9:	e8 ba fd ff ff       	call   c000fea8 <Phys::setPageState(unsigned long, bool)>
c00100ee:	5a                   	pop    edx
c00100ef:	89 f0                	mov    eax,esi
c00100f1:	59                   	pop    ecx
c00100f2:	39 f3                	cmp    ebx,esi
c00100f4:	75 ed                	jne    c00100e3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100f6:	5b                   	pop    ebx
c00100f7:	5e                   	pop    esi
c00100f8:	c3                   	ret    

c00100f9 <Phys::physicalMemorySetup(unsigned int)>:
c00100f9:	55                   	push   ebp
c00100fa:	57                   	push   edi
c00100fb:	56                   	push   esi
c00100fc:	53                   	push   ebx
c00100fd:	31 db                	xor    ebx,ebx
c00100ff:	83 ec 40             	sub    esp,0x40
c0010102:	6a 30                	push   0x30
c0010104:	6a 00                	push   0x0
c0010106:	68 80 ee 02 c0       	push   0xc002ee80
c001010b:	e8 70 06 ff ff       	call   c0000780 <memset>
c0010110:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010114:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010119:	05 00 10 00 00       	add    eax,0x1000
c001011e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010122:	83 c4 10             	add    esp,0x10
c0010125:	83 ec 08             	sub    esp,0x8
c0010128:	6a 01                	push   0x1
c001012a:	53                   	push   ebx
c001012b:	43                   	inc    ebx
c001012c:	e8 77 fd ff ff       	call   c000fea8 <Phys::setPageState(unsigned long, bool)>
c0010131:	83 c4 10             	add    esp,0x10
c0010134:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001013a:	75 e9                	jne    c0010125 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001013c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010143:	66 85 c0             	test   ax,ax
c0010146:	0f 84 8e 01 00 00    	je     c00102da <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001014c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010150:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010158:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001015c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010161:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010165:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001016d:	eb 15                	jmp    c0010184 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001016f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010173:	83 c3 18             	add    ebx,0x18
c0010176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001017a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001017e:	0f 84 66 01 00 00    	je     c00102ea <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010184:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010187:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001018a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001018d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010191:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010195:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010197:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001019a:	01 f0                	add    eax,esi
c001019c:	55                   	push   ebp
c001019d:	11 fa                	adc    edx,edi
c001019f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101a3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00101a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101ab:	56                   	push   esi
c00101ac:	68 c8 ab 02 c0       	push   0xc002abc8
c00101b1:	e8 15 2d 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00101b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ba:	83 c4 10             	add    esp,0x10
c00101bd:	09 f8                	or     eax,edi
c00101bf:	0f 85 25 01 00 00    	jne    c00102ea <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101c5:	4d                   	dec    ebp
c00101c6:	75 a7                	jne    c001016f <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c8:	ba 00 00 08 00       	mov    edx,0x80000
c00101cd:	89 c1                	mov    ecx,eax
c00101cf:	39 f2                	cmp    edx,esi
c00101d1:	19 f9                	sbb    ecx,edi
c00101d3:	0f 82 a7 00 00 00    	jb     c0010280 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101d9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101dd:	89 c1                	mov    ecx,eax
c00101df:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101e3:	0f 83 97 00 00 00    	jae    c0010280 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101e9:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101ee:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101f2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101f6:	39 fa                	cmp    edx,edi
c00101f8:	19 e8                	sbb    eax,ebp
c00101fa:	0f 82 14 01 00 00    	jb     c0010314 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010200:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010204:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010208:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001020e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010213:	83 d5 ff             	adc    ebp,0xffffffff
c0010216:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001021a:	31 c0                	xor    eax,eax
c001021c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010220:	39 fa                	cmp    edx,edi
c0010222:	89 c1                	mov    ecx,eax
c0010224:	19 e9                	sbb    ecx,ebp
c0010226:	0f 83 43 ff ff ff    	jae    c001016f <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022c:	be 00 00 08 00       	mov    esi,0x80000
c0010231:	50                   	push   eax
c0010232:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010236:	57                   	push   edi
c0010237:	56                   	push   esi
c0010238:	68 ec ab 02 c0       	push   0xc002abec
c001023d:	e8 89 2c 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0010242:	5a                   	pop    edx
c0010243:	59                   	pop    ecx
c0010244:	57                   	push   edi
c0010245:	56                   	push   esi
c0010246:	e8 76 fe ff ff       	call   c00100c1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001024b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001024f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010253:	83 c4 0c             	add    esp,0xc
c0010256:	0f ac d0 0c          	shrd   eax,edx,0xc
c001025a:	03 05 74 ee 02 c0    	add    eax,DWORD PTR ds:0xc002ee74
c0010260:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010267:	a3 74 ee 02 c0       	mov    ds:0xc002ee74,eax
c001026c:	52                   	push   edx
c001026d:	50                   	push   eax
c001026e:	68 a9 ab 02 c0       	push   0xc002aba9
c0010273:	e8 53 2c 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0010278:	83 c4 10             	add    esp,0x10
c001027b:	e9 ef fe ff ff       	jmp    c001016f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010280:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010284:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010288:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001028c:	39 ea                	cmp    edx,ebp
c001028e:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010292:	0f 82 d7 fe ff ff    	jb     c001016f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010298:	ba ff 1f 00 00       	mov    edx,0x1fff
c001029d:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00102a1:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00102a5:	0f 83 c4 fe ff ff    	jae    c001016f <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102ab:	39 ee                	cmp    esi,ebp
c00102ad:	89 f8                	mov    eax,edi
c00102af:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102b3:	0f 83 78 ff ff ff    	jae    c0010231 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102c1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102c5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102c9:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102d1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102d5:	e9 57 ff ff ff       	jmp    c0010231 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102da:	83 ec 0c             	sub    esp,0xc
c00102dd:	68 9b ab 02 c0       	push   0xc002ab9b
c00102e2:	e8 a0 a5 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00102e7:	83 c4 10             	add    esp,0x10
c00102ea:	bb 40 01 00 00       	mov    ebx,0x140
c00102ef:	83 ec 08             	sub    esp,0x8
c00102f2:	6a 00                	push   0x0
c00102f4:	53                   	push   ebx
c00102f5:	43                   	inc    ebx
c00102f6:	e8 ad fb ff ff       	call   c000fea8 <Phys::setPageState(unsigned long, bool)>
c00102fb:	ff 05 74 ee 02 c0    	inc    DWORD PTR ds:0xc002ee74
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001030a:	75 e3                	jne    c00102ef <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001030c:	83 c4 3c             	add    esp,0x3c
c001030f:	5b                   	pop    ebx
c0010310:	5e                   	pop    esi
c0010311:	5f                   	pop    edi
c0010312:	5d                   	pop    ebp
c0010313:	c3                   	ret    
c0010314:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001031c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010324:	e9 d7 fe ff ff       	jmp    c0010200 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010329:	90                   	nop

c001032a <Pipe::isAtty()>:
c001032a:	31 c0                	xor    eax,eax
c001032c:	c3                   	ret    
c001032d:	90                   	nop

c001032e <Pipe::~Pipe()>:
c001032e:	83 ec 0c             	sub    esp,0xc
c0010331:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c0010336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033a:	89 10                	mov    DWORD PTR [eax],edx
c001033c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010340:	83 ec 0c             	sub    esp,0xc
c0010343:	50                   	push   eax
c0010344:	e8 1b 15 00 00       	call   c0011864 <UnixFile::~UnixFile()>
c0010349:	83 c4 10             	add    esp,0x10
c001034c:	90                   	nop
c001034d:	83 c4 0c             	add    esp,0xc
c0010350:	c3                   	ret    
c0010351:	90                   	nop

c0010352 <Pipe::~Pipe()>:
c0010352:	83 ec 0c             	sub    esp,0xc
c0010355:	83 ec 0c             	sub    esp,0xc
c0010358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001035c:	e8 cd ff ff ff       	call   c001032e <Pipe::~Pipe()>
c0010361:	83 c4 10             	add    esp,0x10
c0010364:	83 ec 08             	sub    esp,0x8
c0010367:	6a 20                	push   0x20
c0010369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001036d:	e8 79 2a 00 00       	call   c0012deb <operator delete(void*, unsigned long)>
c0010372:	83 c4 10             	add    esp,0x10
c0010375:	83 c4 0c             	add    esp,0xc
c0010378:	c3                   	ret    
c0010379:	90                   	nop

c001037a <Pipe::read(unsigned long long, void*, int*)>:
c001037a:	55                   	push   ebp
c001037b:	57                   	push   edi
c001037c:	56                   	push   esi
c001037d:	53                   	push   ebx
c001037e:	83 ec 1c             	sub    esp,0x1c
c0010381:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010385:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010389:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001038d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010390:	89 c8                	mov    eax,ecx
c0010392:	99                   	cdq    
c0010393:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010397:	74 24                	je     c00103bd <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010399:	39 f9                	cmp    ecx,edi
c001039b:	89 d1                	mov    ecx,edx
c001039d:	19 f1                	sbb    ecx,esi
c001039f:	73 1c                	jae    c00103bd <Pipe::read(unsigned long long, void*, int*)+0x43>
c00103a1:	fa                   	cli    
c00103a2:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c00103a8:	e8 d1 e0 00 00       	call   c001e47e <schedule()>
c00103ad:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00103b2:	48                   	dec    eax
c00103b3:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00103b8:	75 d3                	jne    c001038d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103ba:	fb                   	sti    
c00103bb:	eb d0                	jmp    c001038d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103bd:	39 f8                	cmp    eax,edi
c00103bf:	89 d1                	mov    ecx,edx
c00103c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103c5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103c9:	19 f1                	sbb    ecx,esi
c00103cb:	73 08                	jae    c00103d5 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00103cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103d8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103db:	29 c6                	sub    esi,eax
c00103dd:	89 f1                	mov    ecx,esi
c00103df:	c1 f9 1f             	sar    ecx,0x1f
c00103e2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00103e6:	89 ca                	mov    edx,ecx
c00103e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103ec:	19 d1                	sbb    ecx,edx
c00103ee:	73 04                	jae    c00103f4 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00103f0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103f8:	89 fd                	mov    ebp,edi
c00103fa:	29 f5                	sub    ebp,esi
c00103fc:	85 f6                	test   esi,esi
c00103fe:	74 12                	je     c0010412 <Pipe::read(unsigned long long, void*, int*)+0x98>
c0010400:	52                   	push   edx
c0010401:	56                   	push   esi
c0010402:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010405:	50                   	push   eax
c0010406:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001040a:	e8 59 03 ff ff       	call   c0000768 <memcpy>
c001040f:	83 c4 10             	add    esp,0x10
c0010412:	85 ed                	test   ebp,ebp
c0010414:	74 12                	je     c0010428 <Pipe::read(unsigned long long, void*, int*)+0xae>
c0010416:	50                   	push   eax
c0010417:	55                   	push   ebp
c0010418:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001041b:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001041f:	56                   	push   esi
c0010420:	e8 43 03 ff ff       	call   c0000768 <memcpy>
c0010425:	83 c4 10             	add    esp,0x10
c0010428:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001042b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001042e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010431:	99                   	cdq    
c0010432:	89 f7                	mov    edi,esi
c0010434:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010438:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001043c:	c1 ff 1f             	sar    edi,0x1f
c001043f:	57                   	push   edi
c0010440:	56                   	push   esi
c0010441:	52                   	push   edx
c0010442:	50                   	push   eax
c0010443:	e8 5c 6e 01 00       	call   c00272a4 <__umoddi3>
c0010448:	83 c4 10             	add    esp,0x10
c001044b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001044e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010453:	75 10                	jne    c0010465 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010455:	83 ec 0c             	sub    esp,0xc
c0010458:	68 15 ac 02 c0       	push   0xc002ac15
c001045d:	e8 25 a4 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0010462:	83 c4 10             	add    esp,0x10
c0010465:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001046d:	89 10                	mov    DWORD PTR [eax],edx
c001046f:	83 c4 1c             	add    esp,0x1c
c0010472:	31 c0                	xor    eax,eax
c0010474:	5b                   	pop    ebx
c0010475:	5e                   	pop    esi
c0010476:	5f                   	pop    edi
c0010477:	5d                   	pop    ebp
c0010478:	c3                   	ret    
c0010479:	90                   	nop

c001047a <Pipe::write(unsigned long long, void*, int*)>:
c001047a:	55                   	push   ebp
c001047b:	57                   	push   edi
c001047c:	56                   	push   esi
c001047d:	53                   	push   ebx
c001047e:	83 ec 1c             	sub    esp,0x1c
c0010481:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010485:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010489:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001048d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010490:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010493:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010496:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001049a:	89 de                	mov    esi,ebx
c001049c:	89 df                	mov    edi,ebx
c001049e:	c1 ff 1f             	sar    edi,0x1f
c00104a1:	01 c6                	add    esi,eax
c00104a3:	89 c8                	mov    eax,ecx
c00104a5:	11 d7                	adc    edi,edx
c00104a7:	99                   	cdq    
c00104a8:	39 f1                	cmp    ecx,esi
c00104aa:	89 d0                	mov    eax,edx
c00104ac:	19 f8                	sbb    eax,edi
c00104ae:	b8 01 00 00 00       	mov    eax,0x1
c00104b3:	0f 82 80 00 00 00    	jb     c0010539 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00104b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104bc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00104bf:	01 d8                	add    eax,ebx
c00104c1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00104c5:	99                   	cdq    
c00104c6:	f7 f9                	idiv   ecx
c00104c8:	29 d1                	sub    ecx,edx
c00104ca:	89 d7                	mov    edi,edx
c00104cc:	89 c8                	mov    eax,ecx
c00104ce:	99                   	cdq    
c00104cf:	39 ce                	cmp    esi,ecx
c00104d1:	19 d3                	sbb    ebx,edx
c00104d3:	bb 00 00 00 00       	mov    ebx,0x0
c00104d8:	72 04                	jb     c00104de <Pipe::write(unsigned long long, void*, int*)+0x64>
c00104da:	89 f3                	mov    ebx,esi
c00104dc:	29 cb                	sub    ebx,ecx
c00104de:	89 f1                	mov    ecx,esi
c00104e0:	29 d9                	sub    ecx,ebx
c00104e2:	74 1a                	je     c00104fe <Pipe::write(unsigned long long, void*, int*)+0x84>
c00104e4:	52                   	push   edx
c00104e5:	51                   	push   ecx
c00104e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104ea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104ee:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104f1:	57                   	push   edi
c00104f2:	e8 71 02 ff ff       	call   c0000768 <memcpy>
c00104f7:	83 c4 10             	add    esp,0x10
c00104fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104fe:	85 db                	test   ebx,ebx
c0010500:	74 12                	je     c0010514 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010502:	50                   	push   eax
c0010503:	53                   	push   ebx
c0010504:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010508:	51                   	push   ecx
c0010509:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001050c:	e8 57 02 ff ff       	call   c0000768 <memcpy>
c0010511:	83 c4 10             	add    esp,0x10
c0010514:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010517:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001051c:	75 10                	jne    c001052e <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001051e:	83 ec 0c             	sub    esp,0xc
c0010521:	68 31 ac 02 c0       	push   0xc002ac31
c0010526:	e8 5c a3 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001052b:	83 c4 10             	add    esp,0x10
c001052e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010532:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010535:	89 38                	mov    DWORD PTR [eax],edi
c0010537:	31 c0                	xor    eax,eax
c0010539:	83 c4 1c             	add    esp,0x1c
c001053c:	5b                   	pop    ebx
c001053d:	5e                   	pop    esi
c001053e:	5f                   	pop    edi
c001053f:	5d                   	pop    ebp
c0010540:	c3                   	ret    
c0010541:	90                   	nop

c0010542 <Pipe::Pipe(int)>:
c0010542:	83 ec 0c             	sub    esp,0xc
c0010545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010549:	83 ec 08             	sub    esp,0x8
c001054c:	6a 00                	push   0x0
c001054e:	50                   	push   eax
c001054f:	e8 2e 11 00 00       	call   c0011682 <UnixFile::UnixFile(int)>
c0010554:	83 c4 10             	add    esp,0x10
c0010557:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c001055c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010560:	89 10                	mov    DWORD PTR [eax],edx
c0010562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010566:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001056a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001056d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010571:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010583:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	50                   	push   eax
c001058b:	e8 84 f3 ff ff       	call   c000f914 <malloc>
c0010590:	83 c4 10             	add    esp,0x10
c0010593:	89 c2                	mov    edx,eax
c0010595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010599:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001059c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105a4:	90                   	nop
c00105a5:	83 c4 0c             	add    esp,0xc
c00105a8:	c3                   	ret    
c00105a9:	90                   	nop

c00105aa <VgaText::isAtty()>:
c00105aa:	b0 01                	mov    al,0x1
c00105ac:	c3                   	ret    
c00105ad:	90                   	nop

c00105ae <VgaText::~VgaText()>:
c00105ae:	83 ec 0c             	sub    esp,0xc
c00105b1:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c00105b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ba:	89 10                	mov    DWORD PTR [eax],edx
c00105bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c0:	83 ec 0c             	sub    esp,0xc
c00105c3:	50                   	push   eax
c00105c4:	e8 9b 12 00 00       	call   c0011864 <UnixFile::~UnixFile()>
c00105c9:	83 c4 10             	add    esp,0x10
c00105cc:	90                   	nop
c00105cd:	83 c4 0c             	add    esp,0xc
c00105d0:	c3                   	ret    
c00105d1:	90                   	nop

c00105d2 <VgaText::~VgaText()>:
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	83 ec 0c             	sub    esp,0xc
c00105d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105dc:	e8 cd ff ff ff       	call   c00105ae <VgaText::~VgaText()>
c00105e1:	83 c4 10             	add    esp,0x10
c00105e4:	83 ec 08             	sub    esp,0x8
c00105e7:	68 c4 02 00 00       	push   0x2c4
c00105ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f0:	e8 f6 27 00 00       	call   c0012deb <operator delete(void*, unsigned long)>
c00105f5:	83 c4 10             	add    esp,0x10
c00105f8:	83 c4 0c             	add    esp,0xc
c00105fb:	c3                   	ret    

c00105fc <VgaText::read(unsigned long long, void*, int*)>:
c00105fc:	83 ec 10             	sub    esp,0x10
c00105ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010603:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001060b:	e8 7e 5d 00 00       	call   c001638e <readKeyboard(VgaText*, char*, unsigned long)>
c0010610:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010614:	89 02                	mov    DWORD PTR [edx],eax
c0010616:	31 c0                	xor    eax,eax
c0010618:	83 c4 1c             	add    esp,0x1c
c001061b:	c3                   	ret    

c001061c <setTerminalScrollLock(bool)>:
c001061c:	c3                   	ret    

c001061d <addToTerminalCycle(VgaText*)>:
c001061d:	8b 15 00 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef00
c0010623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010627:	85 d2                	test   edx,edx
c0010629:	75 09                	jne    c0010634 <addToTerminalCycle(VgaText*)+0x17>
c001062b:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001062e:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c0010633:	c3                   	ret    
c0010634:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010637:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001063a:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001063d:	c3                   	ret    

c001063e <installVgaTextImplementation()>:
c001063e:	83 ec 10             	sub    esp,0x10
c0010641:	6a 20                	push   0x20
c0010643:	6a 00                	push   0x0
c0010645:	68 e0 ee 02 c0       	push   0xc002eee0
c001064a:	e8 31 01 ff ff       	call   c0000780 <memset>
c001064f:	83 c4 1c             	add    esp,0x1c
c0010652:	c3                   	ret    

c0010653 <scrollTerminalScrollLock(int)>:
c0010653:	c3                   	ret    

c0010654 <VgaText::load()>:
c0010654:	53                   	push   ebx
c0010655:	31 c0                	xor    eax,eax
c0010657:	83 ec 58             	sub    esp,0x58
c001065a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001065e:	89 e2                	mov    edx,esp
c0010660:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010664:	40                   	inc    eax
c0010665:	83 f8 50             	cmp    eax,0x50
c0010668:	75 f6                	jne    c0010660 <VgaText::load()+0xc>
c001066a:	31 c0                	xor    eax,eax
c001066c:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010673:	84 c9                	test   cl,cl
c0010675:	74 06                	je     c001067d <VgaText::load()+0x29>
c0010677:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001067a:	40                   	inc    eax
c001067b:	eb ef                	jmp    c001066c <VgaText::load()+0x18>
c001067d:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010680:	85 c0                	test   eax,eax
c0010682:	74 09                	je     c001068d <VgaText::load()+0x39>
c0010684:	51                   	push   ecx
c0010685:	51                   	push   ecx
c0010686:	52                   	push   edx
c0010687:	53                   	push   ebx
c0010688:	ff d0                	call   eax
c001068a:	83 c4 10             	add    esp,0x10
c001068d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010690:	85 c0                	test   eax,eax
c0010692:	74 09                	je     c001069d <VgaText::load()+0x49>
c0010694:	83 ec 0c             	sub    esp,0xc
c0010697:	53                   	push   ebx
c0010698:	ff d0                	call   eax
c001069a:	83 c4 10             	add    esp,0x10
c001069d:	83 c4 58             	add    esp,0x58
c00106a0:	5b                   	pop    ebx
c00106a1:	c3                   	ret    

c00106a2 <VgaText::updateCursor()>:
c00106a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a6:	39 05 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,eax
c00106ac:	75 09                	jne    c00106b7 <VgaText::updateCursor()+0x15>
c00106ae:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00106b1:	85 c0                	test   eax,eax
c00106b3:	74 02                	je     c00106b7 <VgaText::updateCursor()+0x15>
c00106b5:	ff e0                	jmp    eax
c00106b7:	c3                   	ret    

c00106b8 <VgaText::showCursor(bool)>:
c00106b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106c0:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00106c3:	c3                   	ret    

c00106c4 <VgaText::disableBlink(bool)>:
c00106c4:	56                   	push   esi
c00106c5:	53                   	push   ebx
c00106c6:	51                   	push   ecx
c00106c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106cf:	39 1d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ebx
c00106d5:	75 15                	jne    c00106ec <VgaText::disableBlink(bool)+0x28>
c00106d7:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00106da:	85 c0                	test   eax,eax
c00106dc:	74 0e                	je     c00106ec <VgaText::disableBlink(bool)+0x28>
c00106de:	89 f1                	mov    ecx,esi
c00106e0:	52                   	push   edx
c00106e1:	52                   	push   edx
c00106e2:	0f b6 d1             	movzx  edx,cl
c00106e5:	52                   	push   edx
c00106e6:	53                   	push   ebx
c00106e7:	ff d0                	call   eax
c00106e9:	83 c4 10             	add    esp,0x10
c00106ec:	89 f0                	mov    eax,esi
c00106ee:	83 f0 01             	xor    eax,0x1
c00106f1:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00106f4:	58                   	pop    eax
c00106f5:	5b                   	pop    ebx
c00106f6:	5e                   	pop    esi
c00106f7:	c3                   	ret    

c00106f8 <VgaText::doANSI_SGR(int)>:
c00106f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010700:	85 d2                	test   edx,edx
c0010702:	75 0b                	jne    c001070f <VgaText::doANSI_SGR(int)+0x17>
c0010704:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010707:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001070a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001070d:	eb 59                	jmp    c0010768 <VgaText::doANSI_SGR(int)+0x70>
c001070f:	83 fa 07             	cmp    edx,0x7
c0010712:	75 0b                	jne    c001071f <VgaText::doANSI_SGR(int)+0x27>
c0010714:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010717:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001071a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001071d:	eb 49                	jmp    c0010768 <VgaText::doANSI_SGR(int)+0x70>
c001071f:	83 fa 1b             	cmp    edx,0x1b
c0010722:	74 e0                	je     c0010704 <VgaText::doANSI_SGR(int)+0xc>
c0010724:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010727:	83 f9 07             	cmp    ecx,0x7
c001072a:	77 09                	ja     c0010735 <VgaText::doANSI_SGR(int)+0x3d>
c001072c:	8b 14 8d 80 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2280]
c0010733:	eb 20                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x5d>
c0010735:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010738:	83 f9 07             	cmp    ecx,0x7
c001073b:	77 09                	ja     c0010746 <VgaText::doANSI_SGR(int)+0x4e>
c001073d:	8b 14 8d 80 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2280]
c0010744:	eb 22                	jmp    c0010768 <VgaText::doANSI_SGR(int)+0x70>
c0010746:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010749:	83 f9 07             	cmp    ecx,0x7
c001074c:	77 0b                	ja     c0010759 <VgaText::doANSI_SGR(int)+0x61>
c001074e:	8b 14 95 38 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23c8]
c0010755:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010758:	c3                   	ret    
c0010759:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001075c:	83 f9 07             	cmp    ecx,0x7
c001075f:	77 0a                	ja     c001076b <VgaText::doANSI_SGR(int)+0x73>
c0010761:	8b 14 95 10 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23f0]
c0010768:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001076b:	c3                   	ret    

c001076c <VgaText::setDefaultBgColour(VgaColour)>:
c001076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010774:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010777:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001077a:	c3                   	ret    
c001077b:	90                   	nop

c001077c <VgaText::setDefaultFgColour(VgaColour)>:
c001077c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010784:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010787:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001078a:	c3                   	ret    
c001078b:	90                   	nop

c001078c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001078c:	53                   	push   ebx
c001078d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010791:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010795:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010799:	51                   	push   ecx
c001079a:	e8 cd ff ff ff       	call   c001076c <VgaText::setDefaultBgColour(VgaColour)>
c001079f:	58                   	pop    eax
c00107a0:	5a                   	pop    edx
c00107a1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107a9:	5b                   	pop    ebx
c00107aa:	eb d0                	jmp    c001077c <VgaText::setDefaultFgColour(VgaColour)>

c00107ac <VgaText::combineColours(unsigned char, unsigned char)>:
c00107ac:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107b0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107b5:	83 e0 0f             	and    eax,0xf
c00107b8:	c1 e2 04             	shl    edx,0x4
c00107bb:	09 d0                	or     eax,edx
c00107bd:	c3                   	ret    

c00107be <VgaText::scrollScreen()>:
c00107be:	55                   	push   ebp
c00107bf:	b9 01 00 00 00       	mov    ecx,0x1
c00107c4:	57                   	push   edi
c00107c5:	56                   	push   esi
c00107c6:	53                   	push   ebx
c00107c7:	83 ec 0c             	sub    esp,0xc
c00107ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107ce:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00107d4:	31 ff                	xor    edi,edi
c00107d6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00107d9:	83 f9 17             	cmp    ecx,0x17
c00107dc:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00107df:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00107e6:	75 27                	jne    c001080f <VgaText::scrollScreen()+0x51>
c00107e8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00107eb:	01 f5                	add    ebp,esi
c00107ed:	f7 c7 01 00 00 00    	test   edi,0x1
c00107f3:	74 16                	je     c001080b <VgaText::scrollScreen()+0x4d>
c00107f5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00107f9:	50                   	push   eax
c00107fa:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00107fe:	50                   	push   eax
c00107ff:	e8 a8 ff ff ff       	call   c00107ac <VgaText::combineColours(unsigned char, unsigned char)>
c0010804:	5a                   	pop    edx
c0010805:	5a                   	pop    edx
c0010806:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010809:	eb 04                	jmp    c001080f <VgaText::scrollScreen()+0x51>
c001080b:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001080f:	47                   	inc    edi
c0010810:	46                   	inc    esi
c0010811:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010817:	75 bd                	jne    c00107d6 <VgaText::scrollScreen()+0x18>
c0010819:	41                   	inc    ecx
c001081a:	83 f9 18             	cmp    ecx,0x18
c001081d:	75 af                	jne    c00107ce <VgaText::scrollScreen()+0x10>
c001081f:	39 1d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ebx
c0010825:	75 1b                	jne    c0010842 <VgaText::scrollScreen()+0x84>
c0010827:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001082b:	74 05                	je     c0010832 <VgaText::scrollScreen()+0x74>
c001082d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010830:	eb 10                	jmp    c0010842 <VgaText::scrollScreen()+0x84>
c0010832:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010835:	85 c0                	test   eax,eax
c0010837:	74 09                	je     c0010842 <VgaText::scrollScreen()+0x84>
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	53                   	push   ebx
c001083d:	ff d0                	call   eax
c001083f:	83 c4 10             	add    esp,0x10
c0010842:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010846:	83 c4 0c             	add    esp,0xc
c0010849:	5b                   	pop    ebx
c001084a:	5e                   	pop    esi
c001084b:	5f                   	pop    edi
c001084c:	5d                   	pop    ebp
c001084d:	e9 50 fe ff ff       	jmp    c00106a2 <VgaText::updateCursor()>

c0010852 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010852:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010857:	c1 e0 08             	shl    eax,0x8
c001085a:	89 c2                	mov    edx,eax
c001085c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010861:	09 d0                	or     eax,edx
c0010863:	c3                   	ret    

c0010864 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010864:	56                   	push   esi
c0010865:	53                   	push   ebx
c0010866:	51                   	push   ecx
c0010867:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001086b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010870:	50                   	push   eax
c0010871:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010876:	50                   	push   eax
c0010877:	e8 30 ff ff ff       	call   c00107ac <VgaText::combineColours(unsigned char, unsigned char)>
c001087c:	5b                   	pop    ebx
c001087d:	0f b6 c0             	movzx  eax,al
c0010880:	5e                   	pop    esi
c0010881:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010886:	50                   	push   eax
c0010887:	53                   	push   ebx
c0010888:	e8 c5 ff ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c001088d:	5a                   	pop    edx
c001088e:	5e                   	pop    esi
c001088f:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010892:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010898:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001089c:	0f b7 d2             	movzx  edx,dx
c001089f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00108a3:	39 0d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ecx
c00108a9:	75 10                	jne    c00108bb <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108ab:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00108ae:	85 c0                	test   eax,eax
c00108b0:	74 09                	je     c00108bb <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108b2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108b6:	5a                   	pop    edx
c00108b7:	5b                   	pop    ebx
c00108b8:	5e                   	pop    esi
c00108b9:	ff e0                	jmp    eax
c00108bb:	58                   	pop    eax
c00108bc:	5b                   	pop    ebx
c00108bd:	5e                   	pop    esi
c00108be:	c3                   	ret    
c00108bf:	90                   	nop

c00108c0 <VgaText::getCursorX()>:
c00108c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00108c7:	c3                   	ret    

c00108c8 <VgaText::getCursorY()>:
c00108c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108cc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00108cf:	c3                   	ret    

c00108d0 <VgaText::setCursor(int, int)>:
c00108d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108d8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00108db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00108e2:	e9 bb fd ff ff       	jmp    c00106a2 <VgaText::updateCursor()>
c00108e7:	90                   	nop

c00108e8 <VgaText::setCursorX(int)>:
c00108e8:	83 ec 10             	sub    esp,0x10
c00108eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ef:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00108f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f6:	50                   	push   eax
c00108f7:	e8 d4 ff ff ff       	call   c00108d0 <VgaText::setCursor(int, int)>
c00108fc:	83 c4 1c             	add    esp,0x1c
c00108ff:	c3                   	ret    

c0010900 <VgaText::setCursorY(int)>:
c0010900:	83 ec 10             	sub    esp,0x10
c0010903:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010907:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001090b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001090e:	50                   	push   eax
c001090f:	e8 bc ff ff ff       	call   c00108d0 <VgaText::setCursor(int, int)>
c0010914:	83 c4 1c             	add    esp,0x1c
c0010917:	c3                   	ret    

c0010918 <VgaText::incrementCursor(bool)>:
c0010918:	56                   	push   esi
c0010919:	53                   	push   ebx
c001091a:	51                   	push   ecx
c001091b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001091f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010923:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010926:	40                   	inc    eax
c0010927:	83 f8 50             	cmp    eax,0x50
c001092a:	74 05                	je     c0010931 <VgaText::incrementCursor(bool)+0x19>
c001092c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001092f:	eb 24                	jmp    c0010955 <VgaText::incrementCursor(bool)+0x3d>
c0010931:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010934:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001093b:	8d 50 01             	lea    edx,[eax+0x1]
c001093e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010941:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010944:	75 0f                	jne    c0010955 <VgaText::incrementCursor(bool)+0x3d>
c0010946:	83 ec 0c             	sub    esp,0xc
c0010949:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001094c:	53                   	push   ebx
c001094d:	e8 6c fe ff ff       	call   c00107be <VgaText::scrollScreen()>
c0010952:	83 c4 10             	add    esp,0x10
c0010955:	89 f0                	mov    eax,esi
c0010957:	84 c0                	test   al,al
c0010959:	74 0c                	je     c0010967 <VgaText::incrementCursor(bool)+0x4f>
c001095b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001095f:	5a                   	pop    edx
c0010960:	5b                   	pop    ebx
c0010961:	5e                   	pop    esi
c0010962:	e9 3b fd ff ff       	jmp    c00106a2 <VgaText::updateCursor()>
c0010967:	58                   	pop    eax
c0010968:	5b                   	pop    ebx
c0010969:	5e                   	pop    esi
c001096a:	c3                   	ret    
c001096b:	90                   	nop

c001096c <VgaText::updateRAMUsageDisplay(int)>:
c001096c:	56                   	push   esi
c001096d:	8b 35 60 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd60
c0010973:	53                   	push   ebx
c0010974:	bb 0a 00 00 00       	mov    ebx,0xa
c0010979:	6a 0f                	push   0xf
c001097b:	6a 00                	push   0x0
c001097d:	e8 2a fe ff ff       	call   c00107ac <VgaText::combineColours(unsigned char, unsigned char)>
c0010982:	5a                   	pop    edx
c0010983:	59                   	pop    ecx
c0010984:	0f b6 c8             	movzx  ecx,al
c0010987:	51                   	push   ecx
c0010988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098c:	99                   	cdq    
c001098d:	f7 fb                	idiv   ebx
c001098f:	89 d3                	mov    ebx,edx
c0010991:	83 c0 30             	add    eax,0x30
c0010994:	83 c3 30             	add    ebx,0x30
c0010997:	0f be c0             	movsx  eax,al
c001099a:	0f b6 db             	movzx  ebx,bl
c001099d:	50                   	push   eax
c001099e:	e8 af fe ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c00109a3:	5a                   	pop    edx
c00109a4:	5a                   	pop    edx
c00109a5:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109ac:	51                   	push   ecx
c00109ad:	53                   	push   ebx
c00109ae:	e8 9f fe ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5b                   	pop    ebx
c00109b4:	5a                   	pop    edx
c00109b5:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109bc:	51                   	push   ecx
c00109bd:	6a 25                	push   0x25
c00109bf:	e8 8e fe ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c4:	59                   	pop    ecx
c00109c5:	5b                   	pop    ebx
c00109c6:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109cd:	5b                   	pop    ebx
c00109ce:	5e                   	pop    esi
c00109cf:	c3                   	ret    

c00109d0 <VgaText::updateDiskUsage()>:
c00109d0:	55                   	push   ebp
c00109d1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109d6:	57                   	push   edi
c00109d7:	8b 3d 60 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd60
c00109dd:	56                   	push   esi
c00109de:	53                   	push   ebx
c00109df:	6a 0f                	push   0xf
c00109e1:	6a 00                	push   0x0
c00109e3:	e8 c4 fd ff ff       	call   c00107ac <VgaText::combineColours(unsigned char, unsigned char)>
c00109e8:	5a                   	pop    edx
c00109e9:	0f b6 d8             	movzx  ebx,al
c00109ec:	59                   	pop    ecx
c00109ed:	8b 35 88 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033188
c00109f3:	53                   	push   ebx
c00109f4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109f9:	89 f0                	mov    eax,esi
c00109fb:	99                   	cdq    
c00109fc:	f7 fd                	idiv   ebp
c00109fe:	99                   	cdq    
c00109ff:	f7 f9                	idiv   ecx
c0010a01:	8d 42 30             	lea    eax,[edx+0x30]
c0010a04:	0f b6 c0             	movzx  eax,al
c0010a07:	50                   	push   eax
c0010a08:	e8 45 fe ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0d:	5d                   	pop    ebp
c0010a0e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a13:	5a                   	pop    edx
c0010a14:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a18:	53                   	push   ebx
c0010a19:	89 f0                	mov    eax,esi
c0010a1b:	99                   	cdq    
c0010a1c:	f7 fd                	idiv   ebp
c0010a1e:	99                   	cdq    
c0010a1f:	f7 f9                	idiv   ecx
c0010a21:	8d 42 30             	lea    eax,[edx+0x30]
c0010a24:	0f b6 c0             	movzx  eax,al
c0010a27:	50                   	push   eax
c0010a28:	e8 25 fe ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2d:	5d                   	pop    ebp
c0010a2e:	bd 64 00 00 00       	mov    ebp,0x64
c0010a33:	5a                   	pop    edx
c0010a34:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a3b:	53                   	push   ebx
c0010a3c:	89 f0                	mov    eax,esi
c0010a3e:	99                   	cdq    
c0010a3f:	f7 fd                	idiv   ebp
c0010a41:	99                   	cdq    
c0010a42:	f7 f9                	idiv   ecx
c0010a44:	8d 42 30             	lea    eax,[edx+0x30]
c0010a47:	0f b6 c0             	movzx  eax,al
c0010a4a:	50                   	push   eax
c0010a4b:	e8 02 fe ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a50:	5d                   	pop    ebp
c0010a51:	5a                   	pop    edx
c0010a52:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a59:	53                   	push   ebx
c0010a5a:	89 f0                	mov    eax,esi
c0010a5c:	99                   	cdq    
c0010a5d:	f7 f9                	idiv   ecx
c0010a5f:	89 d6                	mov    esi,edx
c0010a61:	99                   	cdq    
c0010a62:	f7 f9                	idiv   ecx
c0010a64:	8d 42 30             	lea    eax,[edx+0x30]
c0010a67:	0f b6 c0             	movzx  eax,al
c0010a6a:	50                   	push   eax
c0010a6b:	e8 e2 fd ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a70:	5d                   	pop    ebp
c0010a71:	5a                   	pop    edx
c0010a72:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a79:	53                   	push   ebx
c0010a7a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a7d:	0f b6 f0             	movzx  esi,al
c0010a80:	56                   	push   esi
c0010a81:	e8 cc fd ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a86:	5e                   	pop    esi
c0010a87:	8b 35 84 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033184
c0010a8d:	5d                   	pop    ebp
c0010a8e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a95:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a9a:	53                   	push   ebx
c0010a9b:	89 f0                	mov    eax,esi
c0010a9d:	99                   	cdq    
c0010a9e:	f7 fd                	idiv   ebp
c0010aa0:	99                   	cdq    
c0010aa1:	f7 f9                	idiv   ecx
c0010aa3:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa6:	0f b6 c0             	movzx  eax,al
c0010aa9:	50                   	push   eax
c0010aaa:	e8 a3 fd ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaf:	5a                   	pop    edx
c0010ab0:	5d                   	pop    ebp
c0010ab1:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ab8:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010abd:	53                   	push   ebx
c0010abe:	89 f0                	mov    eax,esi
c0010ac0:	99                   	cdq    
c0010ac1:	f7 fd                	idiv   ebp
c0010ac3:	99                   	cdq    
c0010ac4:	f7 f9                	idiv   ecx
c0010ac6:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac9:	0f b6 c0             	movzx  eax,al
c0010acc:	50                   	push   eax
c0010acd:	e8 80 fd ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad2:	5a                   	pop    edx
c0010ad3:	5d                   	pop    ebp
c0010ad4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010adb:	bd 64 00 00 00       	mov    ebp,0x64
c0010ae0:	53                   	push   ebx
c0010ae1:	89 f0                	mov    eax,esi
c0010ae3:	99                   	cdq    
c0010ae4:	f7 fd                	idiv   ebp
c0010ae6:	99                   	cdq    
c0010ae7:	f7 f9                	idiv   ecx
c0010ae9:	83 c2 30             	add    edx,0x30
c0010aec:	0f b6 d2             	movzx  edx,dl
c0010aef:	52                   	push   edx
c0010af0:	e8 5d fd ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af5:	5a                   	pop    edx
c0010af6:	5d                   	pop    ebp
c0010af7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010afe:	53                   	push   ebx
c0010aff:	89 f0                	mov    eax,esi
c0010b01:	99                   	cdq    
c0010b02:	f7 f9                	idiv   ecx
c0010b04:	89 d6                	mov    esi,edx
c0010b06:	99                   	cdq    
c0010b07:	f7 f9                	idiv   ecx
c0010b09:	8d 42 30             	lea    eax,[edx+0x30]
c0010b0c:	0f b6 c0             	movzx  eax,al
c0010b0f:	50                   	push   eax
c0010b10:	e8 3d fd ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b15:	5a                   	pop    edx
c0010b16:	59                   	pop    ecx
c0010b17:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b1e:	53                   	push   ebx
c0010b1f:	8d 46 30             	lea    eax,[esi+0x30]
c0010b22:	0f b6 f0             	movzx  esi,al
c0010b25:	56                   	push   esi
c0010b26:	e8 27 fd ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2b:	5b                   	pop    ebx
c0010b2c:	5e                   	pop    esi
c0010b2d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b34:	5b                   	pop    ebx
c0010b35:	5e                   	pop    esi
c0010b36:	5f                   	pop    edi
c0010b37:	5d                   	pop    ebp
c0010b38:	c3                   	ret    
c0010b39:	90                   	nop

c0010b3a <VgaText::updateTitle()>:
c0010b3a:	53                   	push   ebx
c0010b3b:	31 c0                	xor    eax,eax
c0010b3d:	83 ec 58             	sub    esp,0x58
c0010b40:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b44:	89 e1                	mov    ecx,esp
c0010b46:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b4a:	40                   	inc    eax
c0010b4b:	83 f8 50             	cmp    eax,0x50
c0010b4e:	75 f6                	jne    c0010b46 <VgaText::updateTitle()+0xc>
c0010b50:	31 c0                	xor    eax,eax
c0010b52:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010b59:	84 db                	test   bl,bl
c0010b5b:	74 06                	je     c0010b63 <VgaText::updateTitle()+0x29>
c0010b5d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b60:	40                   	inc    eax
c0010b61:	eb ef                	jmp    c0010b52 <VgaText::updateTitle()+0x18>
c0010b63:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010b66:	85 c0                	test   eax,eax
c0010b68:	74 09                	je     c0010b73 <VgaText::updateTitle()+0x39>
c0010b6a:	53                   	push   ebx
c0010b6b:	53                   	push   ebx
c0010b6c:	51                   	push   ecx
c0010b6d:	52                   	push   edx
c0010b6e:	ff d0                	call   eax
c0010b70:	83 c4 10             	add    esp,0x10
c0010b73:	e8 58 fe ff ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0010b78:	83 c4 58             	add    esp,0x58
c0010b7b:	5b                   	pop    ebx
c0010b7c:	c3                   	ret    
c0010b7d:	90                   	nop

c0010b7e <VgaText::setTitleTextColour(VgaColour)>:
c0010b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b86:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b89:	eb af                	jmp    c0010b3a <VgaText::updateTitle()>
c0010b8b:	90                   	nop

c0010b8c <VgaText::setTitleColour(VgaColour)>:
c0010b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b94:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b97:	eb a1                	jmp    c0010b3a <VgaText::updateTitle()>
c0010b99:	90                   	nop

c0010b9a <VgaText::setTitle(char*)>:
c0010b9a:	53                   	push   ebx
c0010b9b:	83 ec 10             	sub    esp,0x10
c0010b9e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba6:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010bac:	50                   	push   eax
c0010bad:	e8 8a fc fe ff       	call   c000083c <strcpy>
c0010bb2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bb6:	83 c4 18             	add    esp,0x18
c0010bb9:	5b                   	pop    ebx
c0010bba:	e9 7b ff ff ff       	jmp    c0010b3a <VgaText::updateTitle()>
c0010bbf:	90                   	nop

c0010bc0 <VgaText::decrementCursor(bool)>:
c0010bc0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bc8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010bcb:	85 c0                	test   eax,eax
c0010bcd:	74 04                	je     c0010bd3 <VgaText::decrementCursor(bool)+0x13>
c0010bcf:	48                   	dec    eax
c0010bd0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010bd3:	84 c9                	test   cl,cl
c0010bd5:	74 09                	je     c0010be0 <VgaText::decrementCursor(bool)+0x20>
c0010bd7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bdb:	e9 c2 fa ff ff       	jmp    c00106a2 <VgaText::updateCursor()>
c0010be0:	c3                   	ret    
c0010be1:	90                   	nop

c0010be2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010be2:	53                   	push   ebx
c0010be3:	83 ec 08             	sub    esp,0x8
c0010be6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bf2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bf6:	3c 07                	cmp    al,0x7
c0010bf8:	75 2a                	jne    c0010c24 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bfa:	a1 b8 ef 02 c0       	mov    eax,ds:0xc002efb8
c0010bff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c07:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c0f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c1b:	83 c4 08             	add    esp,0x8
c0010c1e:	5b                   	pop    ebx
c0010c1f:	e9 b4 30 00 00       	jmp    c0013cd8 <Buzzer::beep(int, int, bool)>
c0010c24:	3c 0d                	cmp    al,0xd
c0010c26:	75 09                	jne    c0010c31 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010c28:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c2f:	eb 2c                	jmp    c0010c5d <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010c31:	3c 0a                	cmp    al,0xa
c0010c33:	75 31                	jne    c0010c66 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010c35:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010c38:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0010c42:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010c45:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010c48:	75 0f                	jne    c0010c59 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010c4a:	83 ec 0c             	sub    esp,0xc
c0010c4d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010c50:	53                   	push   ebx
c0010c51:	e8 68 fb ff ff       	call   c00107be <VgaText::scrollScreen()>
c0010c56:	83 c4 10             	add    esp,0x10
c0010c59:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c5d:	83 c4 08             	add    esp,0x8
c0010c60:	5b                   	pop    ebx
c0010c61:	e9 3c fa ff ff       	jmp    c00106a2 <VgaText::updateCursor()>
c0010c66:	3c 08                	cmp    al,0x8
c0010c68:	75 25                	jne    c0010c8f <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010c6a:	50                   	push   eax
c0010c6b:	50                   	push   eax
c0010c6c:	6a 01                	push   0x1
c0010c6e:	53                   	push   ebx
c0010c6f:	e8 4c ff ff ff       	call   c0010bc0 <VgaText::decrementCursor(bool)>
c0010c74:	5a                   	pop    edx
c0010c75:	59                   	pop    ecx
c0010c76:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c79:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c7c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c7f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c82:	6a 20                	push   0x20
c0010c84:	53                   	push   ebx
c0010c85:	e8 da fb ff ff       	call   c0010864 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c8a:	83 c4 28             	add    esp,0x28
c0010c8d:	5b                   	pop    ebx
c0010c8e:	c3                   	ret    
c0010c8f:	83 ec 08             	sub    esp,0x8
c0010c92:	0f be c0             	movsx  eax,al
c0010c95:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c98:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c9b:	51                   	push   ecx
c0010c9c:	52                   	push   edx
c0010c9d:	50                   	push   eax
c0010c9e:	53                   	push   ebx
c0010c9f:	e8 c0 fb ff ff       	call   c0010864 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ca4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ca8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cb0:	83 c4 28             	add    esp,0x28
c0010cb3:	5b                   	pop    ebx
c0010cb4:	e9 5f fc ff ff       	jmp    c0010918 <VgaText::incrementCursor(bool)>
c0010cb9:	90                   	nop

c0010cba <VgaText::isShowingCursor()>:
c0010cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cbe:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010cc1:	c3                   	ret    

c0010cc2 <VgaText::isBlinkDisabled()>:
c0010cc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc6:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010cc9:	83 f0 01             	xor    eax,0x1
c0010ccc:	c3                   	ret    
c0010ccd:	90                   	nop

c0010cce <VgaText::setCursorHeight(int)>:
c0010cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cd6:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010cd9:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010cdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ce1:	e9 d2 f9 ff ff       	jmp    c00106b8 <VgaText::showCursor(bool)>

c0010ce6 <VgaText::getCursorHeight()>:
c0010ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010ced:	c3                   	ret    

c0010cee <setActiveTerminal(VgaText*)>:
c0010cee:	53                   	push   ebx
c0010cef:	83 ec 08             	sub    esp,0x8
c0010cf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf6:	85 db                	test   ebx,ebx
c0010cf8:	75 11                	jne    c0010d0b <setActiveTerminal(VgaText*)+0x1d>
c0010cfa:	c7 44 24 10 6c ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac6c
c0010d02:	83 c4 08             	add    esp,0x8
c0010d05:	5b                   	pop    ebx
c0010d06:	e9 7c 9b 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c0010d0b:	50                   	push   eax
c0010d0c:	50                   	push   eax
c0010d0d:	53                   	push   ebx
c0010d0e:	68 7a ac 02 c0       	push   0xc002ac7a
c0010d13:	e8 b3 21 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0010d18:	a1 04 ef 02 c0       	mov    eax,ds:0xc002ef04
c0010d1d:	83 c4 10             	add    esp,0x10
c0010d20:	85 c0                	test   eax,eax
c0010d22:	74 0c                	je     c0010d30 <setActiveTerminal(VgaText*)+0x42>
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	50                   	push   eax
c0010d28:	e8 75 f9 ff ff       	call   c00106a2 <VgaText::updateCursor()>
c0010d2d:	83 c4 10             	add    esp,0x10
c0010d30:	89 1d 04 ef 02 c0    	mov    DWORD PTR ds:0xc002ef04,ebx
c0010d36:	51                   	push   ecx
c0010d37:	51                   	push   ecx
c0010d38:	53                   	push   ebx
c0010d39:	68 92 ac 02 c0       	push   0xc002ac92
c0010d3e:	e8 88 21 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0010d43:	83 c4 0c             	add    esp,0xc
c0010d46:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d4c:	53                   	push   ebx
c0010d4d:	e8 7e fb ff ff       	call   c00108d0 <VgaText::setCursor(int, int)>
c0010d52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d55:	e8 68 ff ff ff       	call   c0010cc2 <VgaText::isBlinkDisabled()>
c0010d5a:	5a                   	pop    edx
c0010d5b:	0f b6 c0             	movzx  eax,al
c0010d5e:	59                   	pop    ecx
c0010d5f:	50                   	push   eax
c0010d60:	53                   	push   ebx
c0010d61:	e8 5e f9 ff ff       	call   c00106c4 <VgaText::disableBlink(bool)>
c0010d66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d69:	e8 78 ff ff ff       	call   c0010ce6 <VgaText::getCursorHeight()>
c0010d6e:	5a                   	pop    edx
c0010d6f:	59                   	pop    ecx
c0010d70:	50                   	push   eax
c0010d71:	53                   	push   ebx
c0010d72:	e8 57 ff ff ff       	call   c0010cce <VgaText::setCursorHeight(int)>
c0010d77:	83 c4 10             	add    esp,0x10
c0010d7a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d7e:	75 07                	jne    c0010d87 <setActiveTerminal(VgaText*)+0x99>
c0010d80:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d8b:	83 c4 08             	add    esp,0x8
c0010d8e:	5b                   	pop    ebx
c0010d8f:	e9 c0 f8 ff ff       	jmp    c0010654 <VgaText::load()>

c0010d94 <doTerminalCycle()>:
c0010d94:	83 ec 18             	sub    esp,0x18
c0010d97:	a1 00 ef 02 c0       	mov    eax,ds:0xc002ef00
c0010d9c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d9f:	50                   	push   eax
c0010da0:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c0010da5:	e8 44 ff ff ff       	call   c0010cee <setActiveTerminal(VgaText*)>
c0010daa:	83 c4 1c             	add    esp,0x1c
c0010dad:	c3                   	ret    

c0010dae <VgaText::doUpdate()>:
c0010dae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010db2:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010db5:	85 c0                	test   eax,eax
c0010db7:	74 02                	je     c0010dbb <VgaText::doUpdate()+0xd>
c0010db9:	ff e0                	jmp    eax
c0010dbb:	c3                   	ret    

c0010dbc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dbc:	55                   	push   ebp
c0010dbd:	31 ed                	xor    ebp,ebp
c0010dbf:	57                   	push   edi
c0010dc0:	56                   	push   esi
c0010dc1:	53                   	push   ebx
c0010dc2:	83 ec 1c             	sub    esp,0x1c
c0010dc5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010dc9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dce:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010dd5:	50                   	push   eax
c0010dd6:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ddb:	50                   	push   eax
c0010ddc:	e8 cb f9 ff ff       	call   c00107ac <VgaText::combineColours(unsigned char, unsigned char)>
c0010de1:	59                   	pop    ecx
c0010de2:	0f b6 c0             	movzx  eax,al
c0010de5:	5e                   	pop    esi
c0010de6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010deb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010def:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010df2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010df6:	0f b7 f6             	movzx  esi,si
c0010df9:	01 f6                	add    esi,esi
c0010dfb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dfe:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010e01:	84 c0                	test   al,al
c0010e03:	0f 84 fd 00 00 00    	je     c0010f06 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010e09:	3c 0d                	cmp    al,0xd
c0010e0b:	75 0c                	jne    c0010e19 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010e0d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e14:	e9 e7 00 00 00       	jmp    c0010f00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e19:	3c 0a                	cmp    al,0xa
c0010e1b:	75 47                	jne    c0010e64 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010e1d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010e20:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e27:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e2a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010e2d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010e30:	75 0f                	jne    c0010e41 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010e32:	83 ec 0c             	sub    esp,0xc
c0010e35:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010e38:	53                   	push   ebx
c0010e39:	e8 80 f9 ff ff       	call   c00107be <VgaText::scrollScreen()>
c0010e3e:	83 c4 10             	add    esp,0x10
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	31 ed                	xor    ebp,ebp
c0010e46:	53                   	push   ebx
c0010e47:	e8 56 f8 ff ff       	call   c00106a2 <VgaText::updateCursor()>
c0010e4c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e51:	83 c4 10             	add    esp,0x10
c0010e54:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e57:	0f b7 f6             	movzx  esi,si
c0010e5a:	01 f6                	add    esi,esi
c0010e5c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e5f:	e9 9c 00 00 00       	jmp    c0010f00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e64:	3c 08                	cmp    al,0x8
c0010e66:	75 35                	jne    c0010e9d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010e68:	56                   	push   esi
c0010e69:	56                   	push   esi
c0010e6a:	6a 01                	push   0x1
c0010e6c:	53                   	push   ebx
c0010e6d:	e8 4e fd ff ff       	call   c0010bc0 <VgaText::decrementCursor(bool)>
c0010e72:	58                   	pop    eax
c0010e73:	5a                   	pop    edx
c0010e74:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e77:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e7a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e7d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e80:	6a 20                	push   0x20
c0010e82:	53                   	push   ebx
c0010e83:	e8 dc f9 ff ff       	call   c0010864 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e88:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e8d:	83 c4 20             	add    esp,0x20
c0010e90:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e93:	0f b7 f6             	movzx  esi,si
c0010e96:	01 f6                	add    esi,esi
c0010e98:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e9b:	eb 63                	jmp    c0010f00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e9d:	51                   	push   ecx
c0010e9e:	51                   	push   ecx
c0010e9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ea3:	50                   	push   eax
c0010ea4:	e8 a9 f9 ff ff       	call   c0010852 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ea9:	83 c4 10             	add    esp,0x10
c0010eac:	66 89 06             	mov    WORD PTR [esi],ax
c0010eaf:	39 1d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ebx
c0010eb5:	75 21                	jne    c0010ed8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010eb7:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010eba:	85 c0                	test   eax,eax
c0010ebc:	74 1a                	je     c0010ed8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ebe:	52                   	push   edx
c0010ebf:	52                   	push   edx
c0010ec0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ec3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ec6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010eca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ece:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010ed1:	51                   	push   ecx
c0010ed2:	53                   	push   ebx
c0010ed3:	ff d0                	call   eax
c0010ed5:	83 c4 20             	add    esp,0x20
c0010ed8:	83 c6 02             	add    esi,0x2
c0010edb:	50                   	push   eax
c0010edc:	50                   	push   eax
c0010edd:	6a 00                	push   0x0
c0010edf:	53                   	push   ebx
c0010ee0:	e8 33 fa ff ff       	call   c0010918 <VgaText::incrementCursor(bool)>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010eec:	75 0d                	jne    c0010efb <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010eee:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010ef3:	0f b7 f6             	movzx  esi,si
c0010ef6:	01 f6                	add    esi,esi
c0010ef8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010efb:	bd 01 00 00 00       	mov    ebp,0x1
c0010f00:	47                   	inc    edi
c0010f01:	e9 f8 fe ff ff       	jmp    c0010dfe <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010f06:	83 ec 0c             	sub    esp,0xc
c0010f09:	53                   	push   ebx
c0010f0a:	e8 93 f7 ff ff       	call   c00106a2 <VgaText::updateCursor()>
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	89 e8                	mov    eax,ebp
c0010f14:	84 c0                	test   al,al
c0010f16:	74 0c                	je     c0010f24 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010f18:	83 ec 0c             	sub    esp,0xc
c0010f1b:	53                   	push   ebx
c0010f1c:	e8 8d fe ff ff       	call   c0010dae <VgaText::doUpdate()>
c0010f21:	83 c4 10             	add    esp,0x10
c0010f24:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f2b:	83 c4 1c             	add    esp,0x1c
c0010f2e:	5b                   	pop    ebx
c0010f2f:	5e                   	pop    esi
c0010f30:	5f                   	pop    edi
c0010f31:	5d                   	pop    ebp
c0010f32:	c3                   	ret    
c0010f33:	90                   	nop

c0010f34 <VgaText::clearScreen()>:
c0010f34:	57                   	push   edi
c0010f35:	56                   	push   esi
c0010f36:	31 f6                	xor    esi,esi
c0010f38:	53                   	push   ebx
c0010f39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f3d:	52                   	push   edx
c0010f3e:	6a 00                	push   0x0
c0010f40:	6a 00                	push   0x0
c0010f42:	53                   	push   ebx
c0010f43:	e8 88 f9 ff ff       	call   c00108d0 <VgaText::setCursor(int, int)>
c0010f48:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010f4f:	83 c4 10             	add    esp,0x10
c0010f52:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010f55:	7e 20                	jle    c0010f77 <VgaText::clearScreen()+0x43>
c0010f57:	31 ff                	xor    edi,edi
c0010f59:	50                   	push   eax
c0010f5a:	50                   	push   eax
c0010f5b:	56                   	push   esi
c0010f5c:	57                   	push   edi
c0010f5d:	47                   	inc    edi
c0010f5e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f61:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f64:	6a 20                	push   0x20
c0010f66:	53                   	push   ebx
c0010f67:	e8 f8 f8 ff ff       	call   c0010864 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f6c:	83 c4 20             	add    esp,0x20
c0010f6f:	83 ff 50             	cmp    edi,0x50
c0010f72:	75 e5                	jne    c0010f59 <VgaText::clearScreen()+0x25>
c0010f74:	46                   	inc    esi
c0010f75:	eb db                	jmp    c0010f52 <VgaText::clearScreen()+0x1e>
c0010f77:	83 ec 0c             	sub    esp,0xc
c0010f7a:	53                   	push   ebx
c0010f7b:	e8 2e fe ff ff       	call   c0010dae <VgaText::doUpdate()>
c0010f80:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	5b                   	pop    ebx
c0010f8b:	5e                   	pop    esi
c0010f8c:	5f                   	pop    edi
c0010f8d:	c3                   	ret    

c0010f8e <VgaText::putchar(char)>:
c0010f8e:	56                   	push   esi
c0010f8f:	53                   	push   ebx
c0010f90:	83 ec 14             	sub    esp,0x14
c0010f93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f9b:	3c 5b                	cmp    al,0x5b
c0010f9d:	75 18                	jne    c0010fb7 <VgaText::putchar(char)+0x29>
c0010f9f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010fa3:	74 1f                	je     c0010fc4 <VgaText::putchar(char)+0x36>
c0010fa5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010fab:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010fb2:	e9 bd 00 00 00       	jmp    c0011074 <VgaText::putchar(char)+0xe6>
c0010fb7:	3c 1b                	cmp    al,0x1b
c0010fb9:	75 09                	jne    c0010fc4 <VgaText::putchar(char)+0x36>
c0010fbb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010fbf:	e9 b0 00 00 00       	jmp    c0011074 <VgaText::putchar(char)+0xe6>
c0010fc4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010fc7:	84 c9                	test   cl,cl
c0010fc9:	0f 84 92 00 00 00    	je     c0011061 <VgaText::putchar(char)+0xd3>
c0010fcf:	8d 50 c0             	lea    edx,[eax-0x40]
c0010fd2:	80 fa 3e             	cmp    dl,0x3e
c0010fd5:	77 76                	ja     c001104d <VgaText::putchar(char)+0xbf>
c0010fd7:	3c 6d                	cmp    al,0x6d
c0010fd9:	75 47                	jne    c0011022 <VgaText::putchar(char)+0x94>
c0010fdb:	31 f6                	xor    esi,esi
c0010fdd:	31 d2                	xor    edx,edx
c0010fdf:	31 c0                	xor    eax,eax
c0010fe1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010fe4:	7e 2d                	jle    c0011013 <VgaText::putchar(char)+0x85>
c0010fe6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010feb:	80 fa 3b             	cmp    dl,0x3b
c0010fee:	75 17                	jne    c0011007 <VgaText::putchar(char)+0x79>
c0010ff0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ff4:	50                   	push   eax
c0010ff5:	53                   	push   ebx
c0010ff6:	e8 fd f6 ff ff       	call   c00106f8 <VgaText::doANSI_SGR(int)>
c0010ffb:	59                   	pop    ecx
c0010ffc:	31 d2                	xor    edx,edx
c0010ffe:	58                   	pop    eax
c0010fff:	31 c0                	xor    eax,eax
c0011001:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011005:	eb 09                	jmp    c0011010 <VgaText::putchar(char)+0x82>
c0011007:	6b c0 0a             	imul   eax,eax,0xa
c001100a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001100e:	88 ca                	mov    dl,cl
c0011010:	46                   	inc    esi
c0011011:	eb ce                	jmp    c0010fe1 <VgaText::putchar(char)+0x53>
c0011013:	84 d2                	test   dl,dl
c0011015:	74 2e                	je     c0011045 <VgaText::putchar(char)+0xb7>
c0011017:	50                   	push   eax
c0011018:	53                   	push   ebx
c0011019:	e8 da f6 ff ff       	call   c00106f8 <VgaText::doANSI_SGR(int)>
c001101e:	58                   	pop    eax
c001101f:	5a                   	pop    edx
c0011020:	eb 23                	jmp    c0011045 <VgaText::putchar(char)+0xb7>
c0011022:	3c 4a                	cmp    al,0x4a
c0011024:	75 1f                	jne    c0011045 <VgaText::putchar(char)+0xb7>
c0011026:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001102a:	75 19                	jne    c0011045 <VgaText::putchar(char)+0xb7>
c001102c:	83 ec 0c             	sub    esp,0xc
c001102f:	53                   	push   ebx
c0011030:	e8 ff fe ff ff       	call   c0010f34 <VgaText::clearScreen()>
c0011035:	83 c4 0c             	add    esp,0xc
c0011038:	6a 00                	push   0x0
c001103a:	6a 00                	push   0x0
c001103c:	53                   	push   ebx
c001103d:	e8 8e f8 ff ff       	call   c00108d0 <VgaText::setCursor(int, int)>
c0011042:	83 c4 10             	add    esp,0x10
c0011045:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001104b:	eb 27                	jmp    c0011074 <VgaText::putchar(char)+0xe6>
c001104d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0011050:	83 fa 0e             	cmp    edx,0xe
c0011053:	7f 1f                	jg     c0011074 <VgaText::putchar(char)+0xe6>
c0011055:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011058:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001105b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c001105f:	eb 13                	jmp    c0011074 <VgaText::putchar(char)+0xe6>
c0011061:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011064:	0f be c0             	movsx  eax,al
c0011067:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001106a:	50                   	push   eax
c001106b:	53                   	push   ebx
c001106c:	e8 71 fb ff ff       	call   c0010be2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011071:	83 c4 10             	add    esp,0x10
c0011074:	83 c4 14             	add    esp,0x14
c0011077:	5b                   	pop    ebx
c0011078:	5e                   	pop    esi
c0011079:	c3                   	ret    

c001107a <VgaText::puts(char const*)>:
c001107a:	53                   	push   ebx
c001107b:	83 ec 08             	sub    esp,0x8
c001107e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011082:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011085:	84 c0                	test   al,al
c0011087:	74 12                	je     c001109b <VgaText::puts(char const*)+0x21>
c0011089:	43                   	inc    ebx
c001108a:	51                   	push   ecx
c001108b:	51                   	push   ecx
c001108c:	50                   	push   eax
c001108d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011091:	e8 f8 fe ff ff       	call   c0010f8e <VgaText::putchar(char)>
c0011096:	83 c4 10             	add    esp,0x10
c0011099:	eb e7                	jmp    c0011082 <VgaText::puts(char const*)+0x8>
c001109b:	83 c4 08             	add    esp,0x8
c001109e:	5b                   	pop    ebx
c001109f:	c3                   	ret    

c00110a0 <VgaText::putx(unsigned int)>:
c00110a0:	57                   	push   edi
c00110a1:	b9 11 00 00 00       	mov    ecx,0x11
c00110a6:	56                   	push   esi
c00110a7:	be ae ac 02 c0       	mov    esi,0xc002acae
c00110ac:	53                   	push   ebx
c00110ad:	83 ec 20             	sub    esp,0x20
c00110b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110b4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00110b8:	fc                   	cld    
c00110b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110bb:	be 08 00 00 00       	mov    esi,0x8
c00110c0:	50                   	push   eax
c00110c1:	50                   	push   eax
c00110c2:	89 d8                	mov    eax,ebx
c00110c4:	c1 e3 04             	shl    ebx,0x4
c00110c7:	c1 e8 1c             	shr    eax,0x1c
c00110ca:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00110cf:	50                   	push   eax
c00110d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110d4:	e8 b5 fe ff ff       	call   c0010f8e <VgaText::putchar(char)>
c00110d9:	83 c4 10             	add    esp,0x10
c00110dc:	4e                   	dec    esi
c00110dd:	75 e1                	jne    c00110c0 <VgaText::putx(unsigned int)+0x20>
c00110df:	83 c4 20             	add    esp,0x20
c00110e2:	5b                   	pop    ebx
c00110e3:	5e                   	pop    esi
c00110e4:	5f                   	pop    edi
c00110e5:	c3                   	ret    

c00110e6 <VgaText::VgaText(char const*)>:
c00110e6:	57                   	push   edi
c00110e7:	56                   	push   esi
c00110e8:	53                   	push   ebx
c00110e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ed:	83 ec 08             	sub    esp,0x8
c00110f0:	6a 00                	push   0x0
c00110f2:	50                   	push   eax
c00110f3:	e8 8a 05 00 00       	call   c0011682 <UnixFile::UnixFile(int)>
c00110f8:	83 c4 10             	add    esp,0x10
c00110fb:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c0011100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011104:	89 10                	mov    DWORD PTR [eax],edx
c0011106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011115:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001111c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011120:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011128:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001112c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011130:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011146:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001114d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011151:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001115c:	8d 50 60             	lea    edx,[eax+0x60]
c001115f:	bb e0 ee 02 c0       	mov    ebx,0xc002eee0
c0011164:	b8 08 00 00 00       	mov    eax,0x8
c0011169:	fc                   	cld    
c001116a:	89 d7                	mov    edi,edx
c001116c:	89 de                	mov    esi,ebx
c001116e:	89 c1                	mov    ecx,eax
c0011170:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011176:	05 82 00 00 00       	add    eax,0x82
c001117b:	83 ec 08             	sub    esp,0x8
c001117e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011182:	50                   	push   eax
c0011183:	e8 b4 f6 fe ff       	call   c000083c <strcpy>
c0011188:	83 c4 10             	add    esp,0x10
c001118b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0011196:	83 ec 0c             	sub    esp,0xc
c0011199:	6a 01                	push   0x1
c001119b:	e8 25 09 00 00       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c00111a0:	83 c4 10             	add    esp,0x10
c00111a3:	89 c2                	mov    edx,eax
c00111a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00111ac:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c00111b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111b9:	89 c6                	mov    esi,eax
c00111bb:	e8 c0 ed ff ff       	call   c000ff80 <Phys::allocatePage()>
c00111c0:	6a 05                	push   0x5
c00111c2:	56                   	push   esi
c00111c3:	50                   	push   eax
c00111c4:	53                   	push   ebx
c00111c5:	e8 32 11 00 00       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c00111ca:	83 c4 10             	add    esp,0x10
c00111cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111d4:	83 ec 04             	sub    esp,0x4
c00111d7:	68 00 0f 00 00       	push   0xf00
c00111dc:	6a 00                	push   0x0
c00111de:	50                   	push   eax
c00111df:	e8 9c f5 fe ff       	call   c0000780 <memset>
c00111e4:	83 c4 10             	add    esp,0x10
c00111e7:	83 ec 04             	sub    esp,0x4
c00111ea:	6a 00                	push   0x0
c00111ec:	6a 07                	push   0x7
c00111ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111f2:	e8 95 f5 ff ff       	call   c001078c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00111f7:	83 c4 10             	add    esp,0x10
c00111fa:	83 ec 08             	sub    esp,0x8
c00111fd:	6a 02                	push   0x2
c00111ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011203:	e8 c6 fa ff ff       	call   c0010cce <VgaText::setCursorHeight(int)>
c0011208:	83 c4 10             	add    esp,0x10
c001120b:	83 ec 04             	sub    esp,0x4
c001120e:	6a 00                	push   0x0
c0011210:	6a 00                	push   0x0
c0011212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011216:	e8 b5 f6 ff ff       	call   c00108d0 <VgaText::setCursor(int, int)>
c001121b:	83 c4 10             	add    esp,0x10
c001121e:	83 ec 08             	sub    esp,0x8
c0011221:	6a 01                	push   0x1
c0011223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011227:	e8 8c f4 ff ff       	call   c00106b8 <VgaText::showCursor(bool)>
c001122c:	83 c4 10             	add    esp,0x10
c001122f:	83 ec 08             	sub    esp,0x8
c0011232:	6a 01                	push   0x1
c0011234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011238:	e8 87 f4 ff ff       	call   c00106c4 <VgaText::disableBlink(bool)>
c001123d:	83 c4 10             	add    esp,0x10
c0011240:	83 ec 0c             	sub    esp,0xc
c0011243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011247:	e8 e8 fc ff ff       	call   c0010f34 <VgaText::clearScreen()>
c001124c:	83 c4 10             	add    esp,0x10
c001124f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011253:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125b:	05 02 01 00 00       	add    eax,0x102
c0011260:	83 ec 04             	sub    esp,0x4
c0011263:	68 96 00 00 00       	push   0x96
c0011268:	6a 00                	push   0x0
c001126a:	50                   	push   eax
c001126b:	e8 10 f5 fe ff       	call   c0000780 <memset>
c0011270:	83 c4 10             	add    esp,0x10
c0011273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011277:	05 98 01 00 00       	add    eax,0x198
c001127c:	83 ec 04             	sub    esp,0x4
c001127f:	68 2c 01 00 00       	push   0x12c
c0011284:	6a 00                	push   0x0
c0011286:	50                   	push   eax
c0011287:	e8 f4 f4 fe ff       	call   c0000780 <memset>
c001128c:	83 c4 10             	add    esp,0x10
c001128f:	90                   	nop
c0011290:	5b                   	pop    ebx
c0011291:	5e                   	pop    esi
c0011292:	5f                   	pop    edi
c0011293:	c3                   	ret    

c0011294 <VgaText::receiveKey(unsigned char)>:
c0011294:	55                   	push   ebp
c0011295:	57                   	push   edi
c0011296:	56                   	push   esi
c0011297:	53                   	push   ebx
c0011298:	83 ec 1c             	sub    esp,0x1c
c001129b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001129f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112a3:	84 db                	test   bl,bl
c00112a5:	0f 84 c9 00 00 00    	je     c0011374 <VgaText::receiveKey(unsigned char)+0xe0>
c00112ab:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00112b1:	80 fb 08             	cmp    bl,0x8
c00112b4:	75 2c                	jne    c00112e2 <VgaText::receiveKey(unsigned char)+0x4e>
c00112b6:	83 ec 0c             	sub    esp,0xc
c00112b9:	57                   	push   edi
c00112ba:	e8 dd f4 fe ff       	call   c000079c <strlen>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	85 c0                	test   eax,eax
c00112c4:	74 41                	je     c0011307 <VgaText::receiveKey(unsigned char)+0x73>
c00112c6:	50                   	push   eax
c00112c7:	50                   	push   eax
c00112c8:	6a 08                	push   0x8
c00112ca:	56                   	push   esi
c00112cb:	e8 be fc ff ff       	call   c0010f8e <VgaText::putchar(char)>
c00112d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112d3:	e8 c4 f4 fe ff       	call   c000079c <strlen>
c00112d8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00112e0:	eb 22                	jmp    c0011304 <VgaText::receiveKey(unsigned char)+0x70>
c00112e2:	0f be c3             	movsx  eax,bl
c00112e5:	52                   	push   edx
c00112e6:	52                   	push   edx
c00112e7:	50                   	push   eax
c00112e8:	56                   	push   esi
c00112e9:	e8 a0 fc ff ff       	call   c0010f8e <VgaText::putchar(char)>
c00112ee:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00112f2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00112f7:	59                   	pop    ecx
c00112f8:	5d                   	pop    ebp
c00112f9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00112fd:	50                   	push   eax
c00112fe:	57                   	push   edi
c00112ff:	e8 78 f6 fe ff       	call   c000097c <strcat>
c0011304:	83 c4 10             	add    esp,0x10
c0011307:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c001130e:	75 05                	jne    c0011315 <VgaText::receiveKey(unsigned char)+0x81>
c0011310:	80 fb 0a             	cmp    bl,0xa
c0011313:	75 53                	jne    c0011368 <VgaText::receiveKey(unsigned char)+0xd4>
c0011315:	83 ec 0c             	sub    esp,0xc
c0011318:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c001131e:	53                   	push   ebx
c001131f:	e8 78 f4 fe ff       	call   c000079c <strlen>
c0011324:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011327:	89 c5                	mov    ebp,eax
c0011329:	e8 6e f4 fe ff       	call   c000079c <strlen>
c001132e:	83 c4 10             	add    esp,0x10
c0011331:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011335:	3d 2c 01 00 00       	cmp    eax,0x12c
c001133a:	76 10                	jbe    c001134c <VgaText::receiveKey(unsigned char)+0xb8>
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	68 bf ac 02 c0       	push   0xc002acbf
c0011344:	e8 3e 95 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011349:	83 c4 10             	add    esp,0x10
c001134c:	50                   	push   eax
c001134d:	50                   	push   eax
c001134e:	57                   	push   edi
c001134f:	53                   	push   ebx
c0011350:	e8 27 f6 fe ff       	call   c000097c <strcat>
c0011355:	83 c4 0c             	add    esp,0xc
c0011358:	68 96 00 00 00       	push   0x96
c001135d:	6a 00                	push   0x0
c001135f:	57                   	push   edi
c0011360:	e8 1b f4 fe ff       	call   c0000780 <memset>
c0011365:	83 c4 10             	add    esp,0x10
c0011368:	83 ec 0c             	sub    esp,0xc
c001136b:	56                   	push   esi
c001136c:	e8 3d fa ff ff       	call   c0010dae <VgaText::doUpdate()>
c0011371:	83 c4 10             	add    esp,0x10
c0011374:	83 c4 1c             	add    esp,0x1c
c0011377:	5b                   	pop    ebx
c0011378:	5e                   	pop    esi
c0011379:	5f                   	pop    edi
c001137a:	5d                   	pop    ebp
c001137b:	c3                   	ret    

c001137c <VgaText::write(unsigned long long, void*, int*)>:
c001137c:	55                   	push   ebp
c001137d:	57                   	push   edi
c001137e:	56                   	push   esi
c001137f:	53                   	push   ebx
c0011380:	83 ec 0c             	sub    esp,0xc
c0011383:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011387:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001138b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001138f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011396:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011399:	39 eb                	cmp    ebx,ebp
c001139b:	74 13                	je     c00113b0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001139d:	43                   	inc    ebx
c001139e:	50                   	push   eax
c001139f:	50                   	push   eax
c00113a0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113a4:	50                   	push   eax
c00113a5:	56                   	push   esi
c00113a6:	e8 e3 fb ff ff       	call   c0010f8e <VgaText::putchar(char)>
c00113ab:	83 c4 10             	add    esp,0x10
c00113ae:	eb e9                	jmp    c0011399 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00113b0:	83 ec 0c             	sub    esp,0xc
c00113b3:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00113ba:	56                   	push   esi
c00113bb:	e8 ee f9 ff ff       	call   c0010dae <VgaText::doUpdate()>
c00113c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00113c4:	89 38                	mov    DWORD PTR [eax],edi
c00113c6:	83 c4 1c             	add    esp,0x1c
c00113c9:	31 c0                	xor    eax,eax
c00113cb:	5b                   	pop    ebx
c00113cc:	5e                   	pop    esi
c00113cd:	5f                   	pop    edi
c00113ce:	5d                   	pop    ebp
c00113cf:	c3                   	ret    

c00113d0 <newTerminal(char*)>:
c00113d0:	83 ec 28             	sub    esp,0x28
c00113d3:	68 c4 02 00 00       	push   0x2c4
c00113d8:	e8 37 e5 ff ff       	call   c000f914 <malloc>
c00113dd:	5a                   	pop    edx
c00113de:	59                   	pop    ecx
c00113df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113e3:	50                   	push   eax
c00113e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113e8:	e8 f9 fc ff ff       	call   c00110e6 <VgaText::VgaText(char const*)>
c00113ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113f1:	83 c4 2c             	add    esp,0x2c
c00113f4:	c3                   	ret    
c00113f5:	90                   	nop

c00113f6 <TSS::TSS()>:
c00113f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011401:	90                   	nop
c0011402:	c3                   	ret    
c0011403:	90                   	nop

c0011404 <TSS::setESP(unsigned long)>:
c0011404:	55                   	push   ebp
c0011405:	89 e5                	mov    ebp,esp
c0011407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001140d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011410:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011413:	90                   	nop
c0011414:	5d                   	pop    ebp
c0011415:	c3                   	ret    

c0011416 <TSS::flush()>:
c0011416:	55                   	push   ebp
c0011417:	89 e5                	mov    ebp,esp
c0011419:	83 ec 10             	sub    esp,0x10
c001141c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001141f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011421:	83 c8 03             	or     eax,0x3
c0011424:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011428:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001142c:	66 89 d0             	mov    ax,dx
c001142f:	0f 00 d8             	ltr    ax
c0011432:	90                   	nop
c0011433:	c9                   	leave  
c0011434:	c3                   	ret    
c0011435:	90                   	nop

c0011436 <TSS::setup(unsigned long, unsigned long)>:
c0011436:	55                   	push   ebp
c0011437:	89 e5                	mov    ebp,esp
c0011439:	83 ec 18             	sub    esp,0x18
c001143c:	83 ec 0c             	sub    esp,0xc
c001143f:	6a 68                	push   0x68
c0011441:	e8 ce e4 ff ff       	call   c000f914 <malloc>
c0011446:	83 c4 10             	add    esp,0x10
c0011449:	89 c2                	mov    edx,eax
c001144b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001144e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011454:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011457:	83 ec 04             	sub    esp,0x4
c001145a:	6a 68                	push   0x68
c001145c:	6a 00                	push   0x0
c001145e:	50                   	push   eax
c001145f:	e8 1c f3 fe ff       	call   c0000780 <memset>
c0011464:	83 c4 10             	add    esp,0x10
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011476:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011479:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001147f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011485:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011488:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001148b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011491:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001149d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00114af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00114bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00114c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114cd:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00114d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00114dc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00114df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f1:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00114f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114fe:	0f 20 da             	mov    edx,cr3
c0011501:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011504:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011507:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001150a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011510:	83 ec 08             	sub    esp,0x8
c0011513:	50                   	push   eax
c0011514:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011517:	50                   	push   eax
c0011518:	e8 d3 db ff ff       	call   c000f0f0 <GDTEntry::setBase(unsigned int)>
c001151d:	83 c4 10             	add    esp,0x10
c0011520:	83 ec 08             	sub    esp,0x8
c0011523:	6a 68                	push   0x68
c0011525:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011528:	50                   	push   eax
c0011529:	e8 de db ff ff       	call   c000f10c <GDTEntry::setLimit(unsigned int)>
c001152e:	83 c4 10             	add    esp,0x10
c0011531:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011535:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011538:	83 e0 0f             	and    eax,0xf
c001153b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001153e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011541:	83 c8 40             	or     eax,0x40
c0011544:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011547:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001154c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011552:	05 78 01 00 00       	add    eax,0x178
c0011557:	83 ec 04             	sub    esp,0x4
c001155a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001155d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011560:	50                   	push   eax
c0011561:	e8 da db ff ff       	call   c000f140 <GDT::addEntry(GDTEntry)>
c0011566:	83 c4 10             	add    esp,0x10
c0011569:	89 c2                	mov    edx,eax
c001156b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156e:	89 10                	mov    DWORD PTR [eax],edx
c0011570:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0011575:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001157b:	05 78 01 00 00       	add    eax,0x178
c0011580:	83 ec 0c             	sub    esp,0xc
c0011583:	50                   	push   eax
c0011584:	e8 fb db ff ff       	call   c000f184 <GDT::flush()>
c0011589:	83 c4 10             	add    esp,0x10
c001158c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011591:	83 ec 08             	sub    esp,0x8
c0011594:	50                   	push   eax
c0011595:	68 28 ad 02 c0       	push   0xc002ad28
c001159a:	e8 2c 19 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001159f:	83 c4 10             	add    esp,0x10
c00115a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00115a7:	c9                   	leave  
c00115a8:	c3                   	ret    
c00115a9:	90                   	nop

c00115aa <ReservedFilename::read(unsigned long long, void*, int*)>:
c00115aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115ba:	75 08                	jne    c00115c4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00115bc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115c2:	eb 38                	jmp    c00115fc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00115c4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115c9:	75 17                	jne    c00115e2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00115cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115d3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00115db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115df:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00115e2:	89 c1                	mov    ecx,eax
c00115e4:	83 e1 fd             	and    ecx,0xfffffffd
c00115e7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00115ed:	74 cd                	je     c00115bc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115ef:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115f4:	83 e0 ef             	and    eax,0xffffffef
c00115f7:	83 f8 08             	cmp    eax,0x8
c00115fa:	76 c0                	jbe    c00115bc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115fc:	31 c0                	xor    eax,eax
c00115fe:	c3                   	ret    
c00115ff:	90                   	nop

c0011600 <ReservedFilename::isAtty()>:
c0011600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011604:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011607:	31 c0                	xor    eax,eax
c0011609:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001160f:	74 09                	je     c001161a <ReservedFilename::isAtty()+0x1a>
c0011611:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011617:	0f 94 c0             	sete   al
c001161a:	c3                   	ret    
c001161b:	90                   	nop

c001161c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001161c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011620:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011624:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001162b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011630:	75 08                	jne    c001163a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011632:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011638:	eb 3d                	jmp    c0011677 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001163a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001163f:	75 17                	jne    c0011658 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011641:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011646:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011649:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001164f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011651:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011655:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011658:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001165d:	75 04                	jne    c0011663 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001165f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011661:	eb 14                	jmp    c0011677 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011663:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011668:	74 c8                	je     c0011632 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001166a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001166f:	83 e0 ef             	and    eax,0xffffffef
c0011672:	83 f8 08             	cmp    eax,0x8
c0011675:	76 bb                	jbe    c0011632 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011677:	31 c0                	xor    eax,eax
c0011679:	c3                   	ret    

c001167a <UnixFile::getFileDescriptor()>:
c001167a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011681:	c3                   	ret    

c0011682 <UnixFile::UnixFile(int)>:
c0011682:	53                   	push   ebx
c0011683:	83 ec 28             	sub    esp,0x28
c0011686:	ba 14 ae 02 c0       	mov    edx,0xc002ae14
c001168b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001168f:	89 10                	mov    DWORD PTR [eax],edx
c0011691:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011699:	0f 8f 8c 01 00 00    	jg     c001182b <UnixFile::UnixFile(int)+0x1a9>
c001169f:	a1 c0 dd 02 c0       	mov    eax,ds:0xc002ddc0
c00116a4:	8d 50 01             	lea    edx,[eax+0x1]
c00116a7:	89 15 c0 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc0,edx
c00116ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116b1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00116b4:	83 ec 08             	sub    esp,0x8
c00116b7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00116bb:	68 98 ef 02 c0       	push   0xc002ef98
c00116c0:	e8 67 78 01 00       	call   c0028f2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	a0 94 ef 02 c0       	mov    al,ds:0xc002ef94
c00116cd:	83 f0 01             	xor    eax,0x1
c00116d0:	84 c0                	test   al,al
c00116d2:	0f 84 54 01 00 00    	je     c001182c <UnixFile::UnixFile(int)+0x1aa>
c00116d8:	c6 05 94 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef94,0x1
c00116df:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00116e7:	83 ec 0c             	sub    esp,0xc
c00116ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116ee:	e8 21 e2 ff ff       	call   c000f914 <malloc>
c00116f3:	83 c4 10             	add    esp,0x10
c00116f6:	89 c3                	mov    ebx,eax
c00116f8:	83 ec 08             	sub    esp,0x8
c00116fb:	68 03 ff ff 0f       	push   0xfffff03
c0011700:	53                   	push   ebx
c0011701:	e8 2c 01 00 00       	call   c0011832 <ReservedFilename::ReservedFilename(int)>
c0011706:	83 c4 10             	add    esp,0x10
c0011709:	89 1d 8c ef 02 c0    	mov    DWORD PTR ds:0xc002ef8c,ebx
c001170f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011717:	83 ec 0c             	sub    esp,0xc
c001171a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001171e:	e8 f1 e1 ff ff       	call   c000f914 <malloc>
c0011723:	83 c4 10             	add    esp,0x10
c0011726:	89 c3                	mov    ebx,eax
c0011728:	83 ec 08             	sub    esp,0x8
c001172b:	68 01 ff ff 0f       	push   0xfffff01
c0011730:	53                   	push   ebx
c0011731:	e8 fc 00 00 00       	call   c0011832 <ReservedFilename::ReservedFilename(int)>
c0011736:	83 c4 10             	add    esp,0x10
c0011739:	89 1d 90 ef 02 c0    	mov    DWORD PTR ds:0xc002ef90,ebx
c001173f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011747:	83 ec 0c             	sub    esp,0xc
c001174a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001174e:	e8 c1 e1 ff ff       	call   c000f914 <malloc>
c0011753:	83 c4 10             	add    esp,0x10
c0011756:	89 c3                	mov    ebx,eax
c0011758:	83 ec 08             	sub    esp,0x8
c001175b:	68 00 ff ff 0f       	push   0xfffff00
c0011760:	53                   	push   ebx
c0011761:	e8 cc 00 00 00       	call   c0011832 <ReservedFilename::ReservedFilename(int)>
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	89 1d 84 ef 02 c0    	mov    DWORD PTR ds:0xc002ef84,ebx
c001176f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011777:	83 ec 0c             	sub    esp,0xc
c001177a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001177e:	e8 91 e1 ff ff       	call   c000f914 <malloc>
c0011783:	83 c4 10             	add    esp,0x10
c0011786:	89 c3                	mov    ebx,eax
c0011788:	83 ec 08             	sub    esp,0x8
c001178b:	68 02 ff ff 0f       	push   0xfffff02
c0011790:	53                   	push   ebx
c0011791:	e8 9c 00 00 00       	call   c0011832 <ReservedFilename::ReservedFilename(int)>
c0011796:	83 c4 10             	add    esp,0x10
c0011799:	89 1d 88 ef 02 c0    	mov    DWORD PTR ds:0xc002ef88,ebx
c001179f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117a7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00117ac:	7f 7e                	jg     c001182c <UnixFile::UnixFile(int)+0x1aa>
c00117ae:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00117b6:	83 ec 0c             	sub    esp,0xc
c00117b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117bd:	e8 52 e1 ff ff       	call   c000f914 <malloc>
c00117c2:	83 c4 10             	add    esp,0x10
c00117c5:	89 c3                	mov    ebx,eax
c00117c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117cb:	05 10 ff ff 0f       	add    eax,0xfffff10
c00117d0:	83 ec 08             	sub    esp,0x8
c00117d3:	50                   	push   eax
c00117d4:	53                   	push   ebx
c00117d5:	e8 58 00 00 00       	call   c0011832 <ReservedFilename::ReservedFilename(int)>
c00117da:	83 c4 10             	add    esp,0x10
c00117dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117e1:	89 1c 85 60 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10a0],ebx
c00117e8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00117f0:	83 ec 0c             	sub    esp,0xc
c00117f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117f7:	e8 18 e1 ff ff       	call   c000f914 <malloc>
c00117fc:	83 c4 10             	add    esp,0x10
c00117ff:	89 c3                	mov    ebx,eax
c0011801:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011805:	05 20 ff ff 0f       	add    eax,0xfffff20
c001180a:	83 ec 08             	sub    esp,0x8
c001180d:	50                   	push   eax
c001180e:	53                   	push   ebx
c001180f:	e8 1e 00 00 00       	call   c0011832 <ReservedFilename::ReservedFilename(int)>
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001181b:	89 1c 85 20 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10e0],ebx
c0011822:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011826:	e9 7c ff ff ff       	jmp    c00117a7 <UnixFile::UnixFile(int)+0x125>
c001182b:	90                   	nop
c001182c:	83 c4 28             	add    esp,0x28
c001182f:	5b                   	pop    ebx
c0011830:	c3                   	ret    
c0011831:	90                   	nop

c0011832 <ReservedFilename::ReservedFilename(int)>:
c0011832:	83 ec 0c             	sub    esp,0xc
c0011835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011839:	83 ec 08             	sub    esp,0x8
c001183c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011840:	50                   	push   eax
c0011841:	e8 3c fe ff ff       	call   c0011682 <UnixFile::UnixFile(int)>
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c001184e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011852:	89 10                	mov    DWORD PTR [eax],edx
c0011854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011858:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001185c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001185f:	90                   	nop
c0011860:	83 c4 0c             	add    esp,0xc
c0011863:	c3                   	ret    

c0011864 <UnixFile::~UnixFile()>:
c0011864:	83 ec 1c             	sub    esp,0x1c
c0011867:	ba 14 ae 02 c0       	mov    edx,0xc002ae14
c001186c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011870:	89 10                	mov    DWORD PTR [eax],edx
c0011872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011879:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001187e:	7f 73                	jg     c00118f3 <UnixFile::~UnixFile()+0x8f>
c0011880:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011888:	83 ec 0c             	sub    esp,0xc
c001188b:	68 98 ef 02 c0       	push   0xc002ef98
c0011890:	e8 6b 77 01 00       	call   c0029000 <LinkedList<UnixFile>::getFirstElement()>
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	68 98 ef 02 c0       	push   0xc002ef98
c00118a4:	e8 5f 77 01 00       	call   c0029008 <LinkedList<UnixFile>::removeFirst()>
c00118a9:	83 c4 10             	add    esp,0x10
c00118ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118b0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00118b4:	74 40                	je     c00118f6 <UnixFile::~UnixFile()+0x92>
c00118b6:	83 ec 08             	sub    esp,0x8
c00118b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118bd:	68 98 ef 02 c0       	push   0xc002ef98
c00118c2:	e8 65 76 01 00       	call   c0028f2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00118c7:	83 c4 10             	add    esp,0x10
c00118ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118ce:	8d 50 01             	lea    edx,[eax+0x1]
c00118d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00118d5:	3d 88 13 00 00       	cmp    eax,0x1388
c00118da:	0f 94 c0             	sete   al
c00118dd:	84 c0                	test   al,al
c00118df:	74 a7                	je     c0011888 <UnixFile::~UnixFile()+0x24>
c00118e1:	83 ec 0c             	sub    esp,0xc
c00118e4:	68 ec ad 02 c0       	push   0xc002adec
c00118e9:	e8 99 8f 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	eb 95                	jmp    c0011888 <UnixFile::~UnixFile()+0x24>
c00118f3:	90                   	nop
c00118f4:	eb 01                	jmp    c00118f7 <UnixFile::~UnixFile()+0x93>
c00118f6:	90                   	nop
c00118f7:	90                   	nop
c00118f8:	83 c4 1c             	add    esp,0x1c
c00118fb:	c3                   	ret    

c00118fc <UnixFile::~UnixFile()>:
c00118fc:	83 ec 0c             	sub    esp,0xc
c00118ff:	83 ec 0c             	sub    esp,0xc
c0011902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011906:	e8 59 ff ff ff       	call   c0011864 <UnixFile::~UnixFile()>
c001190b:	83 c4 10             	add    esp,0x10
c001190e:	83 ec 08             	sub    esp,0x8
c0011911:	6a 0c                	push   0xc
c0011913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011917:	e8 cf 14 00 00       	call   c0012deb <operator delete(void*, unsigned long)>
c001191c:	83 c4 10             	add    esp,0x10
c001191f:	83 c4 0c             	add    esp,0xc
c0011922:	c3                   	ret    
c0011923:	90                   	nop

c0011924 <ReservedFilename::~ReservedFilename()>:
c0011924:	83 ec 0c             	sub    esp,0xc
c0011927:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c001192c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011930:	89 10                	mov    DWORD PTR [eax],edx
c0011932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011936:	83 ec 0c             	sub    esp,0xc
c0011939:	50                   	push   eax
c001193a:	e8 25 ff ff ff       	call   c0011864 <UnixFile::~UnixFile()>
c001193f:	83 c4 10             	add    esp,0x10
c0011942:	90                   	nop
c0011943:	83 c4 0c             	add    esp,0xc
c0011946:	c3                   	ret    
c0011947:	90                   	nop

c0011948 <ReservedFilename::~ReservedFilename()>:
c0011948:	83 ec 0c             	sub    esp,0xc
c001194b:	83 ec 0c             	sub    esp,0xc
c001194e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011952:	e8 cd ff ff ff       	call   c0011924 <ReservedFilename::~ReservedFilename()>
c0011957:	83 c4 10             	add    esp,0x10
c001195a:	83 ec 08             	sub    esp,0x8
c001195d:	6a 0c                	push   0xc
c001195f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011963:	e8 83 14 00 00       	call   c0012deb <operator delete(void*, unsigned long)>
c0011968:	83 c4 10             	add    esp,0x10
c001196b:	83 c4 0c             	add    esp,0xc
c001196e:	c3                   	ret    

c001196f <getFromFileDescriptor(int)>:
c001196f:	53                   	push   ebx
c0011970:	83 ec 08             	sub    esp,0x8
c0011973:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011977:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001197d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011983:	7f 2c                	jg     c00119b1 <getFromFileDescriptor(int)+0x42>
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	68 98 ef 02 c0       	push   0xc002ef98
c001198d:	e8 6e 76 01 00       	call   c0029000 <LinkedList<UnixFile>::getFirstElement()>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	85 c0                	test   eax,eax
c0011997:	75 04                	jne    c001199d <getFromFileDescriptor(int)+0x2e>
c0011999:	31 c0                	xor    eax,eax
c001199b:	eb 6e                	jmp    c0011a0b <getFromFileDescriptor(int)+0x9c>
c001199d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119a0:	74 69                	je     c0011a0b <getFromFileDescriptor(int)+0x9c>
c00119a2:	52                   	push   edx
c00119a3:	52                   	push   edx
c00119a4:	50                   	push   eax
c00119a5:	68 98 ef 02 c0       	push   0xc002ef98
c00119aa:	e8 fb 76 01 00       	call   c00290aa <LinkedList<UnixFile>::getNext(UnixFile*)>
c00119af:	eb e1                	jmp    c0011992 <getFromFileDescriptor(int)+0x23>
c00119b1:	a1 8c ef 02 c0       	mov    eax,ds:0xc002ef8c
c00119b6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00119bc:	74 4d                	je     c0011a0b <getFromFileDescriptor(int)+0x9c>
c00119be:	a1 90 ef 02 c0       	mov    eax,ds:0xc002ef90
c00119c3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00119c9:	74 40                	je     c0011a0b <getFromFileDescriptor(int)+0x9c>
c00119cb:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c00119d0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00119d6:	74 33                	je     c0011a0b <getFromFileDescriptor(int)+0x9c>
c00119d8:	a1 84 ef 02 c0       	mov    eax,ds:0xc002ef84
c00119dd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00119e3:	74 26                	je     c0011a0b <getFromFileDescriptor(int)+0x9c>
c00119e5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00119eb:	83 f8 08             	cmp    eax,0x8
c00119ee:	77 09                	ja     c00119f9 <getFromFileDescriptor(int)+0x8a>
c00119f0:	8b 04 85 60 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10a0]
c00119f7:	eb 12                	jmp    c0011a0b <getFromFileDescriptor(int)+0x9c>
c00119f9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00119ff:	83 fb 08             	cmp    ebx,0x8
c0011a02:	77 95                	ja     c0011999 <getFromFileDescriptor(int)+0x2a>
c0011a04:	8b 04 9d 20 ef 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd10e0]
c0011a0b:	83 c4 08             	add    esp,0x8
c0011a0e:	5b                   	pop    ebx
c0011a0f:	c3                   	ret    

c0011a10 <__static_initialization_and_destruction_0(int, int)>:
c0011a10:	83 ec 0c             	sub    esp,0xc
c0011a13:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a18:	75 34                	jne    c0011a4e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a1a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a22:	75 2a                	jne    c0011a4e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a24:	83 ec 0c             	sub    esp,0xc
c0011a27:	68 98 ef 02 c0       	push   0xc002ef98
c0011a2c:	e8 a3 74 01 00       	call   c0028ed4 <LinkedList<UnixFile>::LinkedList()>
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	83 ec 04             	sub    esp,0x4
c0011a37:	68 50 dd 02 c0       	push   0xc002dd50
c0011a3c:	68 98 ef 02 c0       	push   0xc002ef98
c0011a41:	68 d2 8e 02 c0       	push   0xc0028ed2
c0011a46:	e8 1a 13 00 00       	call   c0012d65 <__cxa_atexit>
c0011a4b:	83 c4 10             	add    esp,0x10
c0011a4e:	90                   	nop
c0011a4f:	83 c4 0c             	add    esp,0xc
c0011a52:	c3                   	ret    

c0011a53 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011a53:	83 ec 0c             	sub    esp,0xc
c0011a56:	83 ec 08             	sub    esp,0x8
c0011a59:	68 ff ff 00 00       	push   0xffff
c0011a5e:	6a 01                	push   0x1
c0011a60:	e8 ab ff ff ff       	call   c0011a10 <__static_initialization_and_destruction_0(int, int)>
c0011a65:	83 c4 10             	add    esp,0x10
c0011a68:	83 c4 0c             	add    esp,0xc
c0011a6b:	c3                   	ret    

c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a6c:	53                   	push   ebx
c0011a6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a75:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a7b:	89 c8                	mov    eax,ecx
c0011a7d:	d1 e8                	shr    eax,1
c0011a7f:	03 05 c8 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddc8
c0011a85:	83 e1 01             	and    ecx,0x1
c0011a88:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a8a:	75 09                	jne    c0011a95 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a8c:	83 e2 f0             	and    edx,0xfffffff0
c0011a8f:	09 da                	or     edx,ebx
c0011a91:	88 10                	mov    BYTE PTR [eax],dl
c0011a93:	5b                   	pop    ebx
c0011a94:	c3                   	ret    
c0011a95:	c1 e3 04             	shl    ebx,0x4
c0011a98:	83 e2 0f             	and    edx,0xf
c0011a9b:	09 da                	or     edx,ebx
c0011a9d:	88 10                	mov    BYTE PTR [eax],dl
c0011a9f:	5b                   	pop    ebx
c0011aa0:	c3                   	ret    

c0011aa1 <Virt::getPageState(unsigned long)>:
c0011aa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aa5:	8b 0d c8 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddc8
c0011aab:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011ab1:	89 d0                	mov    eax,edx
c0011ab3:	d1 e8                	shr    eax,1
c0011ab5:	83 e2 01             	and    edx,0x1
c0011ab8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011abb:	75 04                	jne    c0011ac1 <Virt::getPageState(unsigned long)+0x20>
c0011abd:	83 e0 0f             	and    eax,0xf
c0011ac0:	c3                   	ret    
c0011ac1:	c0 e8 04             	shr    al,0x4
c0011ac4:	c3                   	ret    

c0011ac5 <Virt::allocateKernelVirtualPages(int)>:
c0011ac5:	55                   	push   ebp
c0011ac6:	31 ed                	xor    ebp,ebp
c0011ac8:	57                   	push   edi
c0011ac9:	56                   	push   esi
c0011aca:	53                   	push   ebx
c0011acb:	31 db                	xor    ebx,ebx
c0011acd:	83 ec 1c             	sub    esp,0x1c
c0011ad0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011ad4:	8b 3d c4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002ddc4
c0011ada:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011adf:	57                   	push   edi
c0011ae0:	e8 bc ff ff ff       	call   c0011aa1 <Virt::getPageState(unsigned long)>
c0011ae5:	5a                   	pop    edx
c0011ae6:	84 c0                	test   al,al
c0011ae8:	75 3a                	jne    c0011b24 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011aea:	85 db                	test   ebx,ebx
c0011aec:	75 02                	jne    c0011af0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011aee:	89 fd                	mov    ebp,edi
c0011af0:	43                   	inc    ebx
c0011af1:	39 f3                	cmp    ebx,esi
c0011af3:	74 5a                	je     c0011b4f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011af5:	47                   	inc    edi
c0011af6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011afc:	76 31                	jbe    c0011b2f <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011afe:	c7 05 c4 dd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002ddc4,0xc8000
c0011b08:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b0d:	75 28                	jne    c0011b37 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b0f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b14:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b19:	57                   	push   edi
c0011b1a:	e8 82 ff ff ff       	call   c0011aa1 <Virt::getPageState(unsigned long)>
c0011b1f:	5a                   	pop    edx
c0011b20:	84 c0                	test   al,al
c0011b22:	74 c6                	je     c0011aea <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b24:	31 db                	xor    ebx,ebx
c0011b26:	47                   	inc    edi
c0011b27:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b2d:	77 cf                	ja     c0011afe <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b2f:	89 3d c4 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc4,edi
c0011b35:	eb a8                	jmp    c0011adf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b37:	83 ec 0c             	sub    esp,0xc
c0011b3a:	68 44 ae 02 c0       	push   0xc002ae44
c0011b3f:	e8 43 8d 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011b44:	8b 3d c4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002ddc4
c0011b4a:	83 c4 10             	add    esp,0x10
c0011b4d:	eb 90                	jmp    c0011adf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b4f:	89 2d c4 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc4,ebp
c0011b55:	4b                   	dec    ebx
c0011b56:	74 5f                	je     c0011bb7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011b58:	85 f6                	test   esi,esi
c0011b5a:	74 3d                	je     c0011b99 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b5c:	89 e8                	mov    eax,ebp
c0011b5e:	31 db                	xor    ebx,ebx
c0011b60:	8d 7e ff             	lea    edi,[esi-0x1]
c0011b63:	eb 14                	jmp    c0011b79 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011b65:	6a 01                	push   0x1
c0011b67:	43                   	inc    ebx
c0011b68:	50                   	push   eax
c0011b69:	e8 fe fe ff ff       	call   c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b6e:	58                   	pop    eax
c0011b6f:	39 f3                	cmp    ebx,esi
c0011b71:	5a                   	pop    edx
c0011b72:	74 25                	je     c0011b99 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b74:	a1 c4 dd 02 c0       	mov    eax,ds:0xc002ddc4
c0011b79:	8d 50 01             	lea    edx,[eax+0x1]
c0011b7c:	85 db                	test   ebx,ebx
c0011b7e:	89 15 c4 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc4,edx
c0011b84:	74 20                	je     c0011ba6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b86:	39 df                	cmp    edi,ebx
c0011b88:	75 db                	jne    c0011b65 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b8a:	6a 03                	push   0x3
c0011b8c:	43                   	inc    ebx
c0011b8d:	50                   	push   eax
c0011b8e:	e8 d9 fe ff ff       	call   c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b93:	59                   	pop    ecx
c0011b94:	39 f3                	cmp    ebx,esi
c0011b96:	58                   	pop    eax
c0011b97:	75 db                	jne    c0011b74 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b99:	83 c4 1c             	add    esp,0x1c
c0011b9c:	89 e8                	mov    eax,ebp
c0011b9e:	5b                   	pop    ebx
c0011b9f:	c1 e0 0c             	shl    eax,0xc
c0011ba2:	5e                   	pop    esi
c0011ba3:	5f                   	pop    edi
c0011ba4:	5d                   	pop    ebp
c0011ba5:	c3                   	ret    
c0011ba6:	6a 02                	push   0x2
c0011ba8:	bb 01 00 00 00       	mov    ebx,0x1
c0011bad:	50                   	push   eax
c0011bae:	e8 b9 fe ff ff       	call   c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bb3:	58                   	pop    eax
c0011bb4:	5a                   	pop    edx
c0011bb5:	eb bd                	jmp    c0011b74 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bb7:	6a 04                	push   0x4
c0011bb9:	8d 45 01             	lea    eax,[ebp+0x1]
c0011bbc:	55                   	push   ebp
c0011bbd:	a3 c4 dd 02 c0       	mov    ds:0xc002ddc4,eax
c0011bc2:	e8 a5 fe ff ff       	call   c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc7:	59                   	pop    ecx
c0011bc8:	89 e8                	mov    eax,ebp
c0011bca:	5b                   	pop    ebx
c0011bcb:	c1 e0 0c             	shl    eax,0xc
c0011bce:	83 c4 1c             	add    esp,0x1c
c0011bd1:	5b                   	pop    ebx
c0011bd2:	5e                   	pop    esi
c0011bd3:	5f                   	pop    edi
c0011bd4:	5d                   	pop    ebp
c0011bd5:	c3                   	ret    

c0011bd6 <Virt::freeSwapfilePage(unsigned long)>:
c0011bd6:	53                   	push   ebx
c0011bd7:	8b 15 ac ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efac
c0011bdd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011be1:	b8 01 00 00 00       	mov    eax,0x1
c0011be6:	89 cb                	mov    ebx,ecx
c0011be8:	d3 e0                	shl    eax,cl
c0011bea:	c1 eb 05             	shr    ebx,0x5
c0011bed:	f7 d0                	not    eax
c0011bef:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011bf2:	5b                   	pop    ebx
c0011bf3:	c3                   	ret    

c0011bf4 <Virt::swapIDToSector(unsigned long)>:
c0011bf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf8:	0f af 05 cc dd 02 c0 	imul   eax,DWORD PTR ds:0xc002ddcc
c0011bff:	03 05 d4 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddd4
c0011c05:	c3                   	ret    

c0011c06 <Virt::allocateSwapfilePage()>:
c0011c06:	55                   	push   ebp
c0011c07:	31 d2                	xor    edx,edx
c0011c09:	57                   	push   edi
c0011c0a:	56                   	push   esi
c0011c0b:	53                   	push   ebx
c0011c0c:	83 ec 0c             	sub    esp,0xc
c0011c0f:	8b 0d cc dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddcc
c0011c15:	a1 d0 dd 02 c0       	mov    eax,ds:0xc002ddd0
c0011c1a:	f7 f1                	div    ecx
c0011c1c:	39 0d d0 dd 02 c0    	cmp    DWORD PTR ds:0xc002ddd0,ecx
c0011c22:	72 2d                	jb     c0011c51 <Virt::allocateSwapfilePage()+0x4b>
c0011c24:	8b 35 ac ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efac
c0011c2a:	8b 16                	mov    edx,DWORD PTR [esi]
c0011c2c:	f6 c2 01             	test   dl,0x1
c0011c2f:	74 3c                	je     c0011c6d <Virt::allocateSwapfilePage()+0x67>
c0011c31:	31 c9                	xor    ecx,ecx
c0011c33:	bf 01 00 00 00       	mov    edi,0x1
c0011c38:	eb 12                	jmp    c0011c4c <Virt::allocateSwapfilePage()+0x46>
c0011c3a:	89 fd                	mov    ebp,edi
c0011c3c:	89 ca                	mov    edx,ecx
c0011c3e:	d3 e5                	shl    ebp,cl
c0011c40:	c1 ea 05             	shr    edx,0x5
c0011c43:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011c46:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c48:	85 ea                	test   edx,ebp
c0011c4a:	74 2a                	je     c0011c76 <Virt::allocateSwapfilePage()+0x70>
c0011c4c:	41                   	inc    ecx
c0011c4d:	39 c8                	cmp    eax,ecx
c0011c4f:	77 e9                	ja     c0011c3a <Virt::allocateSwapfilePage()+0x34>
c0011c51:	83 ec 0c             	sub    esp,0xc
c0011c54:	68 cb af 02 c0       	push   0xc002afcb
c0011c59:	e8 29 8c 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011c5e:	83 c4 10             	add    esp,0x10
c0011c61:	31 c9                	xor    ecx,ecx
c0011c63:	83 c4 0c             	add    esp,0xc
c0011c66:	89 c8                	mov    eax,ecx
c0011c68:	5b                   	pop    ebx
c0011c69:	5e                   	pop    esi
c0011c6a:	5f                   	pop    edi
c0011c6b:	5d                   	pop    ebp
c0011c6c:	c3                   	ret    
c0011c6d:	89 f3                	mov    ebx,esi
c0011c6f:	bd 01 00 00 00       	mov    ebp,0x1
c0011c74:	31 c9                	xor    ecx,ecx
c0011c76:	09 ea                	or     edx,ebp
c0011c78:	89 c8                	mov    eax,ecx
c0011c7a:	89 13                	mov    DWORD PTR [ebx],edx
c0011c7c:	83 c4 0c             	add    esp,0xc
c0011c7f:	5b                   	pop    ebx
c0011c80:	5e                   	pop    esi
c0011c81:	5f                   	pop    edi
c0011c82:	5d                   	pop    ebp
c0011c83:	c3                   	ret    

c0011c84 <Virt::virtualMemorySetup()>:
c0011c84:	53                   	push   ebx
c0011c85:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c8a:	83 ec 08             	sub    esp,0x8
c0011c8d:	6a 0f                	push   0xf
c0011c8f:	53                   	push   ebx
c0011c90:	43                   	inc    ebx
c0011c91:	e8 d6 fd ff ff       	call   c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c96:	59                   	pop    ecx
c0011c97:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c9d:	58                   	pop    eax
c0011c9e:	75 ed                	jne    c0011c8d <Virt::virtualMemorySetup()+0x9>
c0011ca0:	83 ec 08             	sub    esp,0x8
c0011ca3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011ca8:	68 00 00 00 c8       	push   0xc8000000
c0011cad:	68 e2 af 02 c0       	push   0xc002afe2
c0011cb2:	e8 14 12 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0011cb7:	58                   	pop    eax
c0011cb8:	5a                   	pop    edx
c0011cb9:	68 00 f0 ff ef       	push   0xeffff000
c0011cbe:	68 f6 af 02 c0       	push   0xc002aff6
c0011cc3:	e8 03 12 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0011cc8:	83 c4 10             	add    esp,0x10
c0011ccb:	83 ec 08             	sub    esp,0x8
c0011cce:	6a 00                	push   0x0
c0011cd0:	53                   	push   ebx
c0011cd1:	43                   	inc    ebx
c0011cd2:	e8 95 fd ff ff       	call   c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cd7:	83 c4 10             	add    esp,0x10
c0011cda:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011ce0:	75 e9                	jne    c0011ccb <Virt::virtualMemorySetup()+0x47>
c0011ce2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011ce7:	83 ec 08             	sub    esp,0x8
c0011cea:	6a 0f                	push   0xf
c0011cec:	53                   	push   ebx
c0011ced:	43                   	inc    ebx
c0011cee:	e8 79 fd ff ff       	call   c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011cfc:	75 e9                	jne    c0011ce7 <Virt::virtualMemorySetup()+0x63>
c0011cfe:	83 c4 08             	add    esp,0x8
c0011d01:	5b                   	pop    ebx
c0011d02:	c3                   	ret    

c0011d03 <Virt::swappingSetup()>:
c0011d03:	c3                   	ret    

c0011d04 <Virt::setupPageSwapping(int)>:
c0011d04:	57                   	push   edi
c0011d05:	56                   	push   esi
c0011d06:	53                   	push   ebx
c0011d07:	83 ec 1c             	sub    esp,0x1c
c0011d0a:	68 0a b0 02 c0       	push   0xc002b00a
c0011d0f:	e8 b7 11 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0011d14:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d1b:	e8 f4 db ff ff       	call   c000f914 <malloc>
c0011d20:	83 c4 0c             	add    esp,0xc
c0011d23:	89 c6                	mov    esi,eax
c0011d25:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c0011d2b:	68 1e b0 02 c0       	push   0xc002b01e
c0011d30:	50                   	push   eax
c0011d31:	e8 f4 16 00 00       	call   c001342a <File::File(char const*, Process*)>
c0011d36:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d39:	e8 c8 18 00 00       	call   c0013606 <File::unlink()>
c0011d3e:	59                   	pop    ecx
c0011d3f:	5b                   	pop    ebx
c0011d40:	6a 12                	push   0x12
c0011d42:	56                   	push   esi
c0011d43:	e8 46 17 00 00       	call   c001348e <File::open(FileOpenMode)>
c0011d48:	83 c4 10             	add    esp,0x10
c0011d4b:	85 c0                	test   eax,eax
c0011d4d:	0f 85 5b 01 00 00    	jne    c0011eae <Virt::setupPageSwapping(int)+0x1aa>
c0011d53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d57:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d5f:	c1 e3 08             	shl    ebx,0x8
c0011d62:	83 ec 0c             	sub    esp,0xc
c0011d65:	68 00 00 01 00       	push   0x10000
c0011d6a:	e8 a5 db ff ff       	call   c000f914 <malloc>
c0011d6f:	83 c4 0c             	add    esp,0xc
c0011d72:	89 c7                	mov    edi,eax
c0011d74:	68 00 00 01 00       	push   0x10000
c0011d79:	68 ee 00 00 00       	push   0xee
c0011d7e:	50                   	push   eax
c0011d7f:	e8 fc e9 fe ff       	call   c0000780 <memset>
c0011d84:	83 c4 10             	add    esp,0x10
c0011d87:	85 db                	test   ebx,ebx
c0011d89:	79 03                	jns    c0011d8e <Virt::setupPageSwapping(int)+0x8a>
c0011d8b:	83 c3 0f             	add    ebx,0xf
c0011d8e:	c1 fb 04             	sar    ebx,0x4
c0011d91:	4b                   	dec    ebx
c0011d92:	83 fb ff             	cmp    ebx,0xffffffff
c0011d95:	74 4f                	je     c0011de6 <Virt::setupPageSwapping(int)+0xe2>
c0011d97:	83 ec 0c             	sub    esp,0xc
c0011d9a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d9c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011da0:	52                   	push   edx
c0011da1:	57                   	push   edi
c0011da2:	6a 00                	push   0x0
c0011da4:	68 00 00 01 00       	push   0x10000
c0011da9:	56                   	push   esi
c0011daa:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011dad:	83 c4 20             	add    esp,0x20
c0011db0:	85 c0                	test   eax,eax
c0011db2:	0f 85 e0 00 00 00    	jne    c0011e98 <Virt::setupPageSwapping(int)+0x194>
c0011db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dbc:	3d 00 00 01 00       	cmp    eax,0x10000
c0011dc1:	74 ce                	je     c0011d91 <Virt::setupPageSwapping(int)+0x8d>
c0011dc3:	83 ec 08             	sub    esp,0x8
c0011dc6:	4b                   	dec    ebx
c0011dc7:	50                   	push   eax
c0011dc8:	68 71 b0 02 c0       	push   0xc002b071
c0011dcd:	e8 f9 10 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0011dd2:	c7 04 24 7a b0 02 c0 	mov    DWORD PTR [esp],0xc002b07a
c0011dd9:	e8 a9 8a 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	83 fb ff             	cmp    ebx,0xffffffff
c0011de4:	75 b1                	jne    c0011d97 <Virt::setupPageSwapping(int)+0x93>
c0011de6:	83 ec 0c             	sub    esp,0xc
c0011de9:	56                   	push   esi
c0011dea:	e8 fd 16 00 00       	call   c00134ec <File::close()>
c0011def:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011df2:	e8 3d db ff ff       	call   c000f934 <rfree>
c0011df7:	83 c4 10             	add    esp,0x10
c0011dfa:	85 f6                	test   esi,esi
c0011dfc:	74 0c                	je     c0011e0a <Virt::setupPageSwapping(int)+0x106>
c0011dfe:	83 ec 0c             	sub    esp,0xc
c0011e01:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e03:	56                   	push   esi
c0011e04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e07:	83 c4 10             	add    esp,0x10
c0011e0a:	83 ec 08             	sub    esp,0x8
c0011e0d:	a1 48 f4 02 c0       	mov    eax,ds:0xc002f448
c0011e12:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011e18:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e1a:	68 1e b0 02 c0       	push   0xc002b01e
c0011e1f:	50                   	push   eax
c0011e20:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011e23:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e27:	c6 05 d8 dd 02 c0 43 	mov    BYTE PTR ds:0xc002ddd8,0x43
c0011e2e:	c1 e2 0b             	shl    edx,0xb
c0011e31:	a3 d4 dd 02 c0       	mov    ds:0xc002ddd4,eax
c0011e36:	89 15 d0 dd 02 c0    	mov    DWORD PTR ds:0xc002ddd0,edx
c0011e3c:	c7 05 cc dd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002ddcc,0x8
c0011e46:	c1 ea 08             	shr    edx,0x8
c0011e49:	89 14 24             	mov    DWORD PTR [esp],edx
c0011e4c:	e8 c3 da ff ff       	call   c000f914 <malloc>
c0011e51:	83 c4 0c             	add    esp,0xc
c0011e54:	89 c1                	mov    ecx,eax
c0011e56:	a3 ac ef 02 c0       	mov    ds:0xc002efac,eax
c0011e5b:	31 d2                	xor    edx,edx
c0011e5d:	a1 d0 dd 02 c0       	mov    eax,ds:0xc002ddd0
c0011e62:	f7 35 cc dd 02 c0    	div    DWORD PTR ds:0xc002ddcc
c0011e68:	c1 e8 05             	shr    eax,0x5
c0011e6b:	50                   	push   eax
c0011e6c:	6a 00                	push   0x0
c0011e6e:	51                   	push   ecx
c0011e6f:	e8 0c e9 fe ff       	call   c0000780 <memset>
c0011e74:	58                   	pop    eax
c0011e75:	a1 d0 dd 02 c0       	mov    eax,ds:0xc002ddd0
c0011e7a:	5a                   	pop    edx
c0011e7b:	31 d2                	xor    edx,edx
c0011e7d:	f7 35 cc dd 02 c0    	div    DWORD PTR ds:0xc002ddcc
c0011e83:	c1 e8 05             	shr    eax,0x5
c0011e86:	50                   	push   eax
c0011e87:	68 80 b0 02 c0       	push   0xc002b080
c0011e8c:	e8 3a 10 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0011e91:	83 c4 20             	add    esp,0x20
c0011e94:	5b                   	pop    ebx
c0011e95:	5e                   	pop    esi
c0011e96:	5f                   	pop    edi
c0011e97:	c3                   	ret    
c0011e98:	83 ec 08             	sub    esp,0x8
c0011e9b:	50                   	push   eax
c0011e9c:	68 59 b0 02 c0       	push   0xc002b059
c0011ea1:	e8 25 10 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0011ea6:	83 c4 10             	add    esp,0x10
c0011ea9:	e9 0a ff ff ff       	jmp    c0011db8 <Virt::setupPageSwapping(int)+0xb4>
c0011eae:	83 ec 08             	sub    esp,0x8
c0011eb1:	50                   	push   eax
c0011eb2:	68 35 b0 02 c0       	push   0xc002b035
c0011eb7:	e8 0f 10 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0011ebc:	c7 04 24 3e b0 02 c0 	mov    DWORD PTR [esp],0xc002b03e
c0011ec3:	e8 bf 89 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011ec8:	83 c4 10             	add    esp,0x10
c0011ecb:	e9 83 fe ff ff       	jmp    c0011d53 <Virt::setupPageSwapping(int)+0x4f>

c0011ed0 <VAS::VAS()>:
c0011ed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ed4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011edb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011edf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eea:	a3 b0 ef 02 c0       	mov    ds:0xc002efb0,eax
c0011eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ef3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011ef7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011efb:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f02:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f09:	90                   	nop
c0011f0a:	c3                   	ret    
c0011f0b:	90                   	nop

c0011f0c <VAS::VAS(VAS*)>:
c0011f0c:	83 ec 0c             	sub    esp,0xc
c0011f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f1e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f25:	83 ec 0c             	sub    esp,0xc
c0011f28:	68 64 ae 02 c0       	push   0xc002ae64
c0011f2d:	e8 55 89 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011f32:	83 c4 10             	add    esp,0x10
c0011f35:	90                   	nop
c0011f36:	83 c4 0c             	add    esp,0xc
c0011f39:	c3                   	ret    

c0011f3a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f3e:	89 c2                	mov    edx,eax
c0011f40:	c1 e8 0a             	shr    eax,0xa
c0011f43:	c1 ea 16             	shr    edx,0x16
c0011f46:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f4b:	19 c9                	sbb    ecx,ecx
c0011f4d:	c1 e2 0c             	shl    edx,0xc
c0011f50:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f56:	25 fc 0f 00 00       	and    eax,0xffc
c0011f5b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f62:	01 d0                	add    eax,edx
c0011f64:	c3                   	ret    
c0011f65:	90                   	nop

c0011f66 <VAS::getPageTableEntry(unsigned long)>:
c0011f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f6a:	89 ca                	mov    edx,ecx
c0011f6c:	c1 e9 0a             	shr    ecx,0xa
c0011f6f:	c1 ea 16             	shr    edx,0x16
c0011f72:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f78:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f7e:	c1 e0 0c             	shl    eax,0xc
c0011f81:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f84:	c3                   	ret    

c0011f85 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f85:	57                   	push   edi
c0011f86:	56                   	push   esi
c0011f87:	be 01 00 00 00       	mov    esi,0x1
c0011f8c:	53                   	push   ebx
c0011f8d:	83 ec 10             	sub    esp,0x10
c0011f90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f94:	c1 eb 0c             	shr    ebx,0xc
c0011f97:	eb 3f                	jmp    c0011fd8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f99:	83 ec 08             	sub    esp,0x8
c0011f9c:	57                   	push   edi
c0011f9d:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c0011fa3:	e8 be ff ff ff       	call   c0011f66 <VAS::getPageTableEntry(unsigned long)>
c0011fa8:	83 c4 10             	add    esp,0x10
c0011fab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fb1:	f6 c4 04             	test   ah,0x4
c0011fb4:	75 5f                	jne    c0012015 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011fb6:	80 fa 04             	cmp    dl,0x4
c0011fb9:	74 78                	je     c0012033 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011fbb:	80 fa 02             	cmp    dl,0x2
c0011fbe:	0f 84 88 00 00 00    	je     c001204c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011fc4:	80 fa 03             	cmp    dl,0x3
c0011fc7:	0f 84 ad 00 00 00    	je     c001207a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011fcd:	fe ca                	dec    dl
c0011fcf:	0f 84 92 00 00 00    	je     c0012067 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fd5:	43                   	inc    ebx
c0011fd6:	31 f6                	xor    esi,esi
c0011fd8:	53                   	push   ebx
c0011fd9:	89 df                	mov    edi,ebx
c0011fdb:	e8 c1 fa ff ff       	call   c0011aa1 <Virt::getPageState(unsigned long)>
c0011fe0:	c1 e7 0c             	shl    edi,0xc
c0011fe3:	59                   	pop    ecx
c0011fe4:	84 c0                	test   al,al
c0011fe6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011fea:	75 ad                	jne    c0011f99 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011fec:	83 ec 0c             	sub    esp,0xc
c0011fef:	68 9b b0 02 c0       	push   0xc002b09b
c0011ff4:	e8 8e 88 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011ff9:	58                   	pop    eax
c0011ffa:	5a                   	pop    edx
c0011ffb:	57                   	push   edi
c0011ffc:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c0012002:	e8 5f ff ff ff       	call   c0011f66 <VAS::getPageTableEntry(unsigned long)>
c0012007:	83 c4 10             	add    esp,0x10
c001200a:	8b 00                	mov    eax,DWORD PTR [eax]
c001200c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012010:	f6 c4 04             	test   ah,0x4
c0012013:	74 c0                	je     c0011fd5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012015:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012019:	25 00 f0 ff ff       	and    eax,0xfffff000
c001201e:	83 ec 0c             	sub    esp,0xc
c0012021:	50                   	push   eax
c0012022:	e8 cf de ff ff       	call   c000fef6 <Phys::freePage(unsigned long)>
c0012027:	83 c4 10             	add    esp,0x10
c001202a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001202e:	80 fa 04             	cmp    dl,0x4
c0012031:	75 88                	jne    c0011fbb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012033:	89 f0                	mov    eax,esi
c0012035:	84 c0                	test   al,al
c0012037:	75 47                	jne    c0012080 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012039:	c7 44 24 20 88 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae88
c0012041:	83 c4 10             	add    esp,0x10
c0012044:	5b                   	pop    ebx
c0012045:	5e                   	pop    esi
c0012046:	5f                   	pop    edi
c0012047:	e9 3b 88 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c001204c:	89 f0                	mov    eax,esi
c001204e:	84 c0                	test   al,al
c0012050:	75 15                	jne    c0012067 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012052:	83 ec 0c             	sub    esp,0xc
c0012055:	68 b7 b0 02 c0       	push   0xc002b0b7
c001205a:	e8 28 88 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001205f:	83 c4 10             	add    esp,0x10
c0012062:	e9 6e ff ff ff       	jmp    c0011fd5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012067:	83 ec 08             	sub    esp,0x8
c001206a:	6a 00                	push   0x0
c001206c:	53                   	push   ebx
c001206d:	e8 fa f9 ff ff       	call   c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012072:	83 c4 10             	add    esp,0x10
c0012075:	e9 5b ff ff ff       	jmp    c0011fd5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001207a:	89 f0                	mov    eax,esi
c001207c:	84 c0                	test   al,al
c001207e:	75 15                	jne    c0012095 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012080:	83 ec 08             	sub    esp,0x8
c0012083:	6a 00                	push   0x0
c0012085:	53                   	push   ebx
c0012086:	e8 e1 f9 ff ff       	call   c0011a6c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001208b:	83 c4 10             	add    esp,0x10
c001208e:	83 c4 10             	add    esp,0x10
c0012091:	5b                   	pop    ebx
c0012092:	5e                   	pop    esi
c0012093:	5f                   	pop    edi
c0012094:	c3                   	ret    
c0012095:	c7 44 24 20 d3 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b0d3
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	5b                   	pop    ebx
c00120a1:	5e                   	pop    esi
c00120a2:	5f                   	pop    edi
c00120a3:	e9 df 87 00 00       	jmp    c001a887 <Krnl::panic(char const*)>

c00120a8 <VAS::freeAllocatedPages(unsigned long)>:
c00120a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120b0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120b4:	74 09                	je     c00120bf <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120ba:	e9 c6 fe ff ff       	jmp    c0011f85 <Virt::freeKernelVirtualPages(unsigned long)>
c00120bf:	c7 44 24 04 ac ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aeac
c00120c7:	e9 ff 0d 00 00       	jmp    c0012ecb <Dbg::kprintf(char const*, ...)>

c00120cc <VAS::virtualToPhysical(unsigned long)>:
c00120cc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120d0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120d4:	e8 8d fe ff ff       	call   c0011f66 <VAS::getPageTableEntry(unsigned long)>
c00120d9:	5a                   	pop    edx
c00120da:	8b 00                	mov    eax,DWORD PTR [eax]
c00120dc:	59                   	pop    ecx
c00120dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120e2:	c3                   	ret    
c00120e3:	90                   	nop

c00120e4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00120e4:	55                   	push   ebp
c00120e5:	57                   	push   edi
c00120e6:	56                   	push   esi
c00120e7:	53                   	push   ebx
c00120e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00120ec:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00120f0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00120f4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00120f8:	85 db                	test   ebx,ebx
c00120fa:	7e 22                	jle    c001211e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00120fc:	c1 e3 0c             	shl    ebx,0xc
c00120ff:	01 f3                	add    ebx,esi
c0012101:	56                   	push   esi
c0012102:	81 c6 00 10 00 00    	add    esi,0x1000
c0012108:	55                   	push   ebp
c0012109:	e8 58 fe ff ff       	call   c0011f66 <VAS::getPageTableEntry(unsigned long)>
c001210e:	5a                   	pop    edx
c001210f:	59                   	pop    ecx
c0012110:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012112:	21 f9                	and    ecx,edi
c0012114:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012118:	39 f3                	cmp    ebx,esi
c001211a:	89 08                	mov    DWORD PTR [eax],ecx
c001211c:	75 e3                	jne    c0012101 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001211e:	5b                   	pop    ebx
c001211f:	5e                   	pop    esi
c0012120:	5f                   	pop    edi
c0012121:	5d                   	pop    ebp
c0012122:	c3                   	ret    
c0012123:	90                   	nop

c0012124 <VAS::setToWriteCombining(unsigned long, int)>:
c0012124:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0012129:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001212f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012136:	75 01                	jne    c0012139 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012138:	c3                   	ret    
c0012139:	68 80 00 00 00       	push   0x80
c001213e:	6a ff                	push   0xffffffff
c0012140:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012144:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012148:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001214c:	e8 93 ff ff ff       	call   c00120e4 <VAS::reflagRange(unsigned long, int, int, int)>
c0012151:	83 c4 14             	add    esp,0x14
c0012154:	c3                   	ret    
c0012155:	90                   	nop

c0012156 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012156:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001215b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001215f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012166:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012169:	19 c0                	sbb    eax,eax
c001216b:	83 ca 03             	or     edx,0x3
c001216e:	83 e0 fc             	and    eax,0xfffffffc
c0012171:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012178:	0f 20 d8             	mov    eax,cr3
c001217b:	0f 22 d8             	mov    cr3,eax
c001217e:	c3                   	ret    
c001217f:	90                   	nop

c0012180 <VAS::~VAS()>:
c0012180:	83 ec 2c             	sub    esp,0x2c
c0012183:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001218b:	fa                   	cli    
c001218c:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0012191:	40                   	inc    eax
c0012192:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0012197:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001219c:	8b 00                	mov    eax,DWORD PTR [eax]
c001219e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121a1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00121ab:	6a 01                	push   0x1
c00121ad:	50                   	push   eax
c00121ae:	e8 a3 ff ff ff       	call   c0012156 <VAS::mapOtherVASIn(bool, VAS*)>
c00121b3:	83 c4 0c             	add    esp,0xc
c00121b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121be:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00121c6:	0f 8f d4 00 00 00    	jg     c00122a0 <VAS::~VAS()+0x120>
c00121cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121d7:	c1 e2 02             	shl    edx,0x2
c00121da:	01 d0                	add    eax,edx
c00121dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00121de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00121e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121e6:	83 e0 01             	and    eax,0x1
c00121e9:	0f 84 a8 00 00 00    	je     c0012297 <VAS::~VAS()+0x117>
c00121ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00121f7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00121ff:	7f 72                	jg     c0012273 <VAS::~VAS()+0xf3>
c0012201:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012205:	c1 e0 0a             	shl    eax,0xa
c0012208:	89 c2                	mov    edx,eax
c001220a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001220e:	01 d0                	add    eax,edx
c0012210:	c1 e0 0c             	shl    eax,0xc
c0012213:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012217:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001221c:	8b 00                	mov    eax,DWORD PTR [eax]
c001221e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012221:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001222b:	6a 01                	push   0x1
c001222d:	50                   	push   eax
c001222e:	e8 07 fd ff ff       	call   c0011f3a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012233:	83 c4 0c             	add    esp,0xc
c0012236:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001223a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001223e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012240:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012248:	25 01 04 00 00       	and    eax,0x401
c001224d:	3d 01 04 00 00       	cmp    eax,0x401
c0012252:	75 19                	jne    c001226d <VAS::~VAS()+0xed>
c0012254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012258:	25 00 f0 ff ff       	and    eax,0xfffff000
c001225d:	83 ec 0c             	sub    esp,0xc
c0012260:	50                   	push   eax
c0012261:	e8 90 dc ff ff       	call   c000fef6 <Phys::freePage(unsigned long)>
c0012266:	83 c4 10             	add    esp,0x10
c0012269:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001226d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012271:	eb 84                	jmp    c00121f7 <VAS::~VAS()+0x77>
c0012273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012277:	25 00 04 00 00       	and    eax,0x400
c001227c:	74 19                	je     c0012297 <VAS::~VAS()+0x117>
c001227e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012282:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012287:	83 ec 0c             	sub    esp,0xc
c001228a:	50                   	push   eax
c001228b:	e8 66 dc ff ff       	call   c000fef6 <Phys::freePage(unsigned long)>
c0012290:	83 c4 10             	add    esp,0x10
c0012293:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012297:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001229b:	e9 1e ff ff ff       	jmp    c00121be <VAS::~VAS()+0x3e>
c00122a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122a7:	83 ec 0c             	sub    esp,0xc
c00122aa:	50                   	push   eax
c00122ab:	e8 d5 fc ff ff       	call   c0011f85 <Virt::freeKernelVirtualPages(unsigned long)>
c00122b0:	83 c4 10             	add    esp,0x10
c00122b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00122ba:	83 ec 0c             	sub    esp,0xc
c00122bd:	50                   	push   eax
c00122be:	e8 33 dc ff ff       	call   c000fef6 <Phys::freePage(unsigned long)>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00122ce:	c1 e0 02             	shl    eax,0x2
c00122d1:	83 ec 08             	sub    esp,0x8
c00122d4:	50                   	push   eax
c00122d5:	68 d0 ae 02 c0       	push   0xc002aed0
c00122da:	e8 ec 0b 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00122df:	83 c4 10             	add    esp,0x10
c00122e2:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00122e7:	48                   	dec    eax
c00122e8:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00122ed:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00122f2:	85 c0                	test   eax,eax
c00122f4:	75 01                	jne    c00122f7 <VAS::~VAS()+0x177>
c00122f6:	fb                   	sti    
c00122f7:	90                   	nop
c00122f8:	83 c4 2c             	add    esp,0x2c
c00122fb:	c3                   	ret    

c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>:
c00122fc:	55                   	push   ebp
c00122fd:	57                   	push   edi
c00122fe:	56                   	push   esi
c00122ff:	53                   	push   ebx
c0012300:	83 ec 1c             	sub    esp,0x1c
c0012303:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012307:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001230b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012311:	77 08                	ja     c001231b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012313:	0f 20 d8             	mov    eax,cr3
c0012316:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012319:	75 47                	jne    c0012362 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001231b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001231f:	09 d8                	or     eax,ebx
c0012321:	a9 ff 0f 00 00       	test   eax,0xfff
c0012326:	75 57                	jne    c001237f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012328:	89 de                	mov    esi,ebx
c001232a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001232d:	c1 ee 16             	shr    esi,0x16
c0012330:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012337:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001233b:	74 54                	je     c0012391 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001233d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012341:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012347:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001234b:	c1 e6 0c             	shl    esi,0xc
c001234e:	c1 eb 0a             	shr    ebx,0xa
c0012351:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012357:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001235a:	83 c4 1c             	add    esp,0x1c
c001235d:	5b                   	pop    ebx
c001235e:	5e                   	pop    esi
c001235f:	5f                   	pop    edi
c0012360:	5d                   	pop    ebp
c0012361:	c3                   	ret    
c0012362:	83 ec 0c             	sub    esp,0xc
c0012365:	68 f0 ae 02 c0       	push   0xc002aef0
c001236a:	e8 5c 0b 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012376:	09 d8                	or     eax,ebx
c0012378:	a9 ff 0f 00 00       	test   eax,0xfff
c001237d:	74 a9                	je     c0012328 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001237f:	83 ec 0c             	sub    esp,0xc
c0012382:	68 58 af 02 c0       	push   0xc002af58
c0012387:	e8 fb 84 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001238c:	83 c4 10             	add    esp,0x10
c001238f:	eb 97                	jmp    c0012328 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012391:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012395:	e8 e6 db ff ff       	call   c000ff80 <Phys::allocatePage()>
c001239a:	83 ec 0c             	sub    esp,0xc
c001239d:	89 c5                	mov    ebp,eax
c001239f:	8b 0d b0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efb0
c00123a5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00123a9:	6a 01                	push   0x1
c00123ab:	e8 15 f7 ff ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c00123b0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123b7:	6a 01                	push   0x1
c00123b9:	50                   	push   eax
c00123ba:	55                   	push   ebp
c00123bb:	81 cd 07 04 00 00    	or     ebp,0x407
c00123c1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123c5:	51                   	push   ecx
c00123c6:	e8 27 02 00 00       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123cb:	83 c4 1c             	add    esp,0x1c
c00123ce:	68 00 10 00 00       	push   0x1000
c00123d3:	6a 00                	push   0x0
c00123d5:	50                   	push   eax
c00123d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123da:	e8 a1 e3 fe ff       	call   c0000780 <memset>
c00123df:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123e6:	e8 9a fb ff ff       	call   c0011f85 <Virt::freeKernelVirtualPages(unsigned long)>
c00123eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123ef:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00123f8:	e9 40 ff ff ff       	jmp    c001233d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00123fd:	90                   	nop

c00123fe <VAS::allocatePages(int, int)>:
c00123fe:	55                   	push   ebp
c00123ff:	57                   	push   edi
c0012400:	56                   	push   esi
c0012401:	53                   	push   ebx
c0012402:	83 ec 1c             	sub    esp,0x1c
c0012405:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012409:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001240e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012414:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001241a:	83 e0 01             	and    eax,0x1
c001241d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012421:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012425:	0f 85 cc 00 00 00    	jne    c00124f7 <VAS::allocatePages(int, int)+0xf9>
c001242b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001242e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012432:	85 c0                	test   eax,eax
c0012434:	0f 84 a1 00 00 00    	je     c00124db <VAS::allocatePages(int, int)+0xdd>
c001243a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001243e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012442:	c1 e6 0c             	shl    esi,0xc
c0012445:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012449:	85 c0                	test   eax,eax
c001244b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001244e:	7e 33                	jle    c0012483 <VAS::allocatePages(int, int)+0x85>
c0012450:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012454:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012458:	81 cd 00 04 00 00    	or     ebp,0x400
c001245e:	e8 1d db ff ff       	call   c000ff80 <Phys::allocatePage()>
c0012463:	55                   	push   ebp
c0012464:	53                   	push   ebx
c0012465:	50                   	push   eax
c0012466:	57                   	push   edi
c0012467:	e8 90 fe ff ff       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c001246c:	83 c4 10             	add    esp,0x10
c001246f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012474:	74 03                	je     c0012479 <VAS::allocatePages(int, int)+0x7b>
c0012476:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012479:	81 c3 00 10 00 00    	add    ebx,0x1000
c001247f:	39 de                	cmp    esi,ebx
c0012481:	75 db                	jne    c001245e <VAS::allocatePages(int, int)+0x60>
c0012483:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012488:	75 12                	jne    c001249c <VAS::allocatePages(int, int)+0x9e>
c001248a:	0f 20 d8             	mov    eax,cr3
c001248d:	0f 22 d8             	mov    cr3,eax
c0012490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012494:	83 c4 1c             	add    esp,0x1c
c0012497:	5b                   	pop    ebx
c0012498:	5e                   	pop    esi
c0012499:	5f                   	pop    edi
c001249a:	5d                   	pop    ebp
c001249b:	c3                   	ret    
c001249c:	c1 ee 0a             	shr    esi,0xa
c001249f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124a3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124a9:	c1 eb 0a             	shr    ebx,0xa
c00124ac:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124b2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124b8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124be:	39 c3                	cmp    ebx,eax
c00124c0:	77 ce                	ja     c0012490 <VAS::allocatePages(int, int)+0x92>
c00124c2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124c5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124cb:	39 d8                	cmp    eax,ebx
c00124cd:	73 f3                	jae    c00124c2 <VAS::allocatePages(int, int)+0xc4>
c00124cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124d3:	83 c4 1c             	add    esp,0x1c
c00124d6:	5b                   	pop    ebx
c00124d7:	5e                   	pop    esi
c00124d8:	5f                   	pop    edi
c00124d9:	5d                   	pop    ebp
c00124da:	c3                   	ret    
c00124db:	83 ec 0c             	sub    esp,0xc
c00124de:	68 7c af 02 c0       	push   0xc002af7c
c00124e3:	e8 9f 83 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00124e8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124ef:	83 c4 10             	add    esp,0x10
c00124f2:	e9 43 ff ff ff       	jmp    c001243a <VAS::allocatePages(int, int)+0x3c>
c00124f7:	83 ec 0c             	sub    esp,0xc
c00124fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124fe:	e8 c2 f5 ff ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c0012503:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012507:	83 c4 10             	add    esp,0x10
c001250a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001250f:	0f 87 9b 00 00 00    	ja     c00125b0 <VAS::allocatePages(int, int)+0x1b2>
c0012515:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012519:	85 d2                	test   edx,edx
c001251b:	7e 3c                	jle    c0012559 <VAS::allocatePages(int, int)+0x15b>
c001251d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012521:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012525:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012529:	c1 e5 0c             	shl    ebp,0xc
c001252c:	81 ce 00 04 00 00    	or     esi,0x400
c0012532:	01 dd                	add    ebp,ebx
c0012534:	e8 47 da ff ff       	call   c000ff80 <Phys::allocatePage()>
c0012539:	56                   	push   esi
c001253a:	53                   	push   ebx
c001253b:	50                   	push   eax
c001253c:	57                   	push   edi
c001253d:	e8 ba fd ff ff       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012542:	83 c4 10             	add    esp,0x10
c0012545:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001254a:	74 03                	je     c001254f <VAS::allocatePages(int, int)+0x151>
c001254c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001254f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012555:	39 dd                	cmp    ebp,ebx
c0012557:	75 db                	jne    c0012534 <VAS::allocatePages(int, int)+0x136>
c0012559:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001255e:	0f 84 26 ff ff ff    	je     c001248a <VAS::allocatePages(int, int)+0x8c>
c0012564:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012568:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001256c:	89 d3                	mov    ebx,edx
c001256e:	c1 e0 0c             	shl    eax,0xc
c0012571:	c1 eb 0a             	shr    ebx,0xa
c0012574:	01 d0                	add    eax,edx
c0012576:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001257c:	c1 e8 0a             	shr    eax,0xa
c001257f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012585:	25 00 f0 ff ff       	and    eax,0xfffff000
c001258a:	2d 00 00 40 00       	sub    eax,0x400000
c001258f:	39 c3                	cmp    ebx,eax
c0012591:	0f 87 f9 fe ff ff    	ja     c0012490 <VAS::allocatePages(int, int)+0x92>
c0012597:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001259a:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125a0:	39 d8                	cmp    eax,ebx
c00125a2:	73 f3                	jae    c0012597 <VAS::allocatePages(int, int)+0x199>
c00125a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125a8:	83 c4 1c             	add    esp,0x1c
c00125ab:	5b                   	pop    ebx
c00125ac:	5e                   	pop    esi
c00125ad:	5f                   	pop    edi
c00125ae:	5d                   	pop    ebp
c00125af:	c3                   	ret    
c00125b0:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00125b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125bb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125c2:	0f 84 4d ff ff ff    	je     c0012515 <VAS::allocatePages(int, int)+0x117>
c00125c8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00125d0:	e9 40 ff ff ff       	jmp    c0012515 <VAS::allocatePages(int, int)+0x117>
c00125d5:	90                   	nop

c00125d6 <VAS::setCPUSpecific(unsigned long)>:
c00125d6:	83 ec 0c             	sub    esp,0xc
c00125d9:	6a 05                	push   0x5
c00125db:	68 00 00 40 c2       	push   0xc2400000
c00125e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e8:	e8 0f fd ff ff       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c00125ed:	83 c4 1c             	add    esp,0x1c
c00125f0:	c3                   	ret    
c00125f1:	90                   	nop

c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00125f2:	55                   	push   ebp
c00125f3:	57                   	push   edi
c00125f4:	56                   	push   esi
c00125f5:	53                   	push   ebx
c00125f6:	83 ec 1c             	sub    esp,0x1c
c00125f9:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00125fe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012602:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012608:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001260c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012612:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012616:	83 e0 01             	and    eax,0x1
c0012619:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001261d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012621:	85 c0                	test   eax,eax
c0012623:	7e 39                	jle    c001265e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012625:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012629:	89 f3                	mov    ebx,esi
c001262b:	c1 e0 0c             	shl    eax,0xc
c001262e:	01 f0                	add    eax,esi
c0012630:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012634:	55                   	push   ebp
c0012635:	53                   	push   ebx
c0012636:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001263a:	29 f0                	sub    eax,esi
c001263c:	01 d8                	add    eax,ebx
c001263e:	50                   	push   eax
c001263f:	57                   	push   edi
c0012640:	e8 b7 fc ff ff       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012645:	83 c4 10             	add    esp,0x10
c0012648:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001264d:	74 03                	je     c0012652 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001264f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012652:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012658:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001265c:	75 d6                	jne    c0012634 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001265e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012663:	75 10                	jne    c0012675 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012665:	0f 20 d8             	mov    eax,cr3
c0012668:	0f 22 d8             	mov    cr3,eax
c001266b:	83 c4 1c             	add    esp,0x1c
c001266e:	89 f0                	mov    eax,esi
c0012670:	5b                   	pop    ebx
c0012671:	5e                   	pop    esi
c0012672:	5f                   	pop    edi
c0012673:	5d                   	pop    ebp
c0012674:	c3                   	ret    
c0012675:	89 f3                	mov    ebx,esi
c0012677:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001267b:	c1 eb 0a             	shr    ebx,0xa
c001267e:	c1 e0 0c             	shl    eax,0xc
c0012681:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012687:	01 f0                	add    eax,esi
c0012689:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001268f:	c1 e8 0a             	shr    eax,0xa
c0012692:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012697:	2d 00 00 40 00       	sub    eax,0x400000
c001269c:	39 c3                	cmp    ebx,eax
c001269e:	77 cb                	ja     c001266b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126a0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126a3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126a9:	39 d8                	cmp    eax,ebx
c00126ab:	73 f3                	jae    c00126a0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126ad:	83 c4 1c             	add    esp,0x1c
c00126b0:	89 f0                	mov    eax,esi
c00126b2:	5b                   	pop    ebx
c00126b3:	5e                   	pop    esi
c00126b4:	5f                   	pop    edi
c00126b5:	5d                   	pop    ebp
c00126b6:	c3                   	ret    
c00126b7:	90                   	nop

c00126b8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126b8:	55                   	push   ebp
c00126b9:	57                   	push   edi
c00126ba:	56                   	push   esi
c00126bb:	53                   	push   ebx
c00126bc:	83 ec 1c             	sub    esp,0x1c
c00126bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126c3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126c7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00126cf:	a9 ff 0f 00 00       	test   eax,0xfff
c00126d4:	75 4a                	jne    c0012720 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00126d6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00126da:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126dd:	c1 eb 16             	shr    ebx,0x16
c00126e0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00126e7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00126eb:	74 4d                	je     c001273a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00126ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126f1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00126f5:	c1 e8 0a             	shr    eax,0xa
c00126f8:	80 fa 01             	cmp    dl,0x1
c00126fb:	19 d2                	sbb    edx,edx
c00126fd:	c1 e3 0c             	shl    ebx,0xc
c0012700:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012704:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001270a:	25 fc 0f 00 00       	and    eax,0xffc
c001270f:	01 d8                	add    eax,ebx
c0012711:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012718:	83 c4 1c             	add    esp,0x1c
c001271b:	5b                   	pop    ebx
c001271c:	5e                   	pop    esi
c001271d:	5f                   	pop    edi
c001271e:	5d                   	pop    ebp
c001271f:	c3                   	ret    
c0012720:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012724:	83 ec 0c             	sub    esp,0xc
c0012727:	68 a8 af 02 c0       	push   0xc002afa8
c001272c:	e8 56 81 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0012731:	83 c4 10             	add    esp,0x10
c0012734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012738:	eb 9c                	jmp    c00126d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001273a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001273e:	e8 3d d8 ff ff       	call   c000ff80 <Phys::allocatePage()>
c0012743:	83 ec 0c             	sub    esp,0xc
c0012746:	89 c5                	mov    ebp,eax
c0012748:	8b 0d b0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efb0
c001274e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012752:	6a 01                	push   0x1
c0012754:	e8 6c f3 ff ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c0012759:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012760:	6a 01                	push   0x1
c0012762:	50                   	push   eax
c0012763:	55                   	push   ebp
c0012764:	81 cd 07 04 00 00    	or     ebp,0x407
c001276a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001276e:	51                   	push   ecx
c001276f:	e8 7e fe ff ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012774:	83 c4 1c             	add    esp,0x1c
c0012777:	68 00 10 00 00       	push   0x1000
c001277c:	6a 00                	push   0x0
c001277e:	50                   	push   eax
c001277f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012783:	e8 f8 df fe ff       	call   c0000780 <memset>
c0012788:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001278c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001278f:	e8 f1 f7 ff ff       	call   c0011f85 <Virt::freeKernelVirtualPages(unsigned long)>
c0012794:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012797:	83 c4 10             	add    esp,0x10
c001279a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001279d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127a1:	e9 47 ff ff ff       	jmp    c00126ed <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00127a6 <VAS::VAS(bool)>:
c00127a6:	53                   	push   ebx
c00127a7:	83 ec 28             	sub    esp,0x28
c00127aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127ae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00127c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127cc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00127d0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00127d3:	e8 a8 d7 ff ff       	call   c000ff80 <Phys::allocatePage()>
c00127d8:	89 c2                	mov    edx,eax
c00127da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00127e1:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c00127e7:	83 ec 0c             	sub    esp,0xc
c00127ea:	6a 01                	push   0x1
c00127ec:	e8 d4 f2 ff ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c00127f1:	83 c4 10             	add    esp,0x10
c00127f4:	89 c2                	mov    edx,eax
c00127f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00127fd:	83 ec 0c             	sub    esp,0xc
c0012800:	6a 03                	push   0x3
c0012802:	6a 01                	push   0x1
c0012804:	52                   	push   edx
c0012805:	50                   	push   eax
c0012806:	53                   	push   ebx
c0012807:	e8 e6 fd ff ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001280c:	83 c4 20             	add    esp,0x20
c001280f:	89 c2                	mov    edx,eax
c0012811:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012815:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012818:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012820:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012828:	7f 1c                	jg     c0012846 <VAS::VAS(bool)+0xa0>
c001282a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012831:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012835:	c1 e2 02             	shl    edx,0x2
c0012838:	01 d0                	add    eax,edx
c001283a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012840:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012844:	eb da                	jmp    c0012820 <VAS::VAS(bool)+0x7a>
c0012846:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001284e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012856:	7f 7a                	jg     c00128d2 <VAS::VAS(bool)+0x12c>
c0012858:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001285c:	2d 00 02 00 00       	sub    eax,0x200
c0012861:	c1 e0 0c             	shl    eax,0xc
c0012864:	83 c8 03             	or     eax,0x3
c0012867:	89 c2                	mov    edx,eax
c0012869:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001286e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012874:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001287a:	83 e0 10             	and    eax,0x10
c001287d:	84 c0                	test   al,al
c001287f:	74 07                	je     c0012888 <VAS::VAS(bool)+0xe2>
c0012881:	b8 00 01 00 00       	mov    eax,0x100
c0012886:	eb 05                	jmp    c001288d <VAS::VAS(bool)+0xe7>
c0012888:	b8 00 00 00 00       	mov    eax,0x0
c001288d:	09 d0                	or     eax,edx
c001288f:	89 c1                	mov    ecx,eax
c0012891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012895:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012898:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001289c:	c1 e2 02             	shl    edx,0x2
c001289f:	01 d0                	add    eax,edx
c00128a1:	89 ca                	mov    edx,ecx
c00128a3:	89 10                	mov    DWORD PTR [eax],edx
c00128a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128a9:	2d 40 03 00 00       	sub    eax,0x340
c00128ae:	83 f8 7f             	cmp    eax,0x7f
c00128b1:	77 16                	ja     c00128c9 <VAS::VAS(bool)+0x123>
c00128b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128be:	c1 e2 02             	shl    edx,0x2
c00128c1:	01 d0                	add    eax,edx
c00128c3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128c9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00128cd:	e9 7c ff ff ff       	jmp    c001284e <VAS::VAS(bool)+0xa8>
c00128d2:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00128d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128dd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e3:	83 e0 10             	and    eax,0x10
c00128e6:	84 c0                	test   al,al
c00128e8:	74 07                	je     c00128f1 <VAS::VAS(bool)+0x14b>
c00128ea:	b8 03 41 00 00       	mov    eax,0x4103
c00128ef:	eb 05                	jmp    c00128f6 <VAS::VAS(bool)+0x150>
c00128f1:	b8 03 40 00 00       	mov    eax,0x4003
c00128f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00128fa:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00128fd:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012903:	89 02                	mov    DWORD PTR [edx],eax
c0012905:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001290a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012910:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012916:	83 ec 08             	sub    esp,0x8
c0012919:	50                   	push   eax
c001291a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001291e:	e8 b3 fc ff ff       	call   c00125d6 <VAS::setCPUSpecific(unsigned long)>
c0012923:	83 c4 10             	add    esp,0x10
c0012926:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001292a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001292d:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0012932:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012938:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001293e:	83 e0 10             	and    eax,0x10
c0012941:	84 c0                	test   al,al
c0012943:	74 07                	je     c001294c <VAS::VAS(bool)+0x1a6>
c0012945:	b8 00 01 00 00       	mov    eax,0x100
c001294a:	eb 05                	jmp    c0012951 <VAS::VAS(bool)+0x1ab>
c001294c:	b8 00 00 00 00       	mov    eax,0x0
c0012951:	09 c2                	or     edx,eax
c0012953:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001295a:	05 fc 0f 00 00       	add    eax,0xffc
c001295f:	83 ca 03             	or     edx,0x3
c0012962:	89 10                	mov    DWORD PTR [eax],edx
c0012964:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0012969:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296f:	83 ec 0c             	sub    esp,0xc
c0012972:	50                   	push   eax
c0012973:	e8 74 1c 00 00       	call   c00145ec <Device::getName()>
c0012978:	83 c4 10             	add    esp,0x10
c001297b:	83 ec 08             	sub    esp,0x8
c001297e:	68 ed b0 02 c0       	push   0xc002b0ed
c0012983:	50                   	push   eax
c0012984:	e8 3f df fe ff       	call   c00008c8 <strcmp>
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	85 c0                	test   eax,eax
c001298e:	0f 94 c0             	sete   al
c0012991:	84 c0                	test   al,al
c0012993:	0f 84 87 00 00 00    	je     c0012a20 <VAS::VAS(bool)+0x27a>
c0012999:	fa                   	cli    
c001299a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001299f:	40                   	inc    eax
c00129a0:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00129a5:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00129aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129b0:	05 7c 09 00 00       	add    eax,0x97c
c00129b5:	83 ec 0c             	sub    esp,0xc
c00129b8:	50                   	push   eax
c00129b9:	e8 d8 c9 ff ff       	call   c000f396 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129be:	83 c4 10             	add    esp,0x10
c00129c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129c6:	89 c3                	mov    ebx,eax
c00129c8:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00129cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d3:	05 7c 09 00 00       	add    eax,0x97c
c00129d8:	83 ec 0c             	sub    esp,0xc
c00129db:	50                   	push   eax
c00129dc:	e8 b5 c9 ff ff       	call   c000f396 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129e1:	83 c4 10             	add    esp,0x10
c00129e4:	83 ec 08             	sub    esp,0x8
c00129e7:	50                   	push   eax
c00129e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129ec:	e8 75 f5 ff ff       	call   c0011f66 <VAS::getPageTableEntry(unsigned long)>
c00129f1:	83 c4 10             	add    esp,0x10
c00129f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00129f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129fb:	6a 11                	push   0x11
c00129fd:	53                   	push   ebx
c00129fe:	50                   	push   eax
c00129ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a03:	e8 f4 f8 ff ff       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a08:	83 c4 10             	add    esp,0x10
c0012a0b:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0012a10:	48                   	dec    eax
c0012a11:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0012a16:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0012a1b:	85 c0                	test   eax,eax
c0012a1d:	75 01                	jne    c0012a20 <VAS::VAS(bool)+0x27a>
c0012a1f:	fb                   	sti    
c0012a20:	90                   	nop
c0012a21:	83 c4 28             	add    esp,0x28
c0012a24:	5b                   	pop    ebx
c0012a25:	c3                   	ret    

c0012a26 <VAS::evict(unsigned long)>:
c0012a26:	55                   	push   ebp
c0012a27:	57                   	push   edi
c0012a28:	56                   	push   esi
c0012a29:	53                   	push   ebx
c0012a2a:	83 ec 1c             	sub    esp,0x1c
c0012a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a31:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a39:	e8 c8 f1 ff ff       	call   c0011c06 <Virt::allocateSwapfilePage()>
c0012a3e:	89 c7                	mov    edi,eax
c0012a40:	a1 cc dd 02 c0       	mov    eax,ds:0xc002ddcc
c0012a45:	85 c0                	test   eax,eax
c0012a47:	7e 3d                	jle    c0012a86 <VAS::evict(unsigned long)+0x60>
c0012a49:	89 ee                	mov    esi,ebp
c0012a4b:	31 db                	xor    ebx,ebx
c0012a4d:	83 ec 0c             	sub    esp,0xc
c0012a50:	57                   	push   edi
c0012a51:	e8 9e f1 ff ff       	call   c0011bf4 <Virt::swapIDToSector(unsigned long)>
c0012a56:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a59:	01 d8                	add    eax,ebx
c0012a5b:	6a 01                	push   0x1
c0012a5d:	31 d2                	xor    edx,edx
c0012a5f:	43                   	inc    ebx
c0012a60:	52                   	push   edx
c0012a61:	81 c6 00 02 00 00    	add    esi,0x200
c0012a67:	50                   	push   eax
c0012a68:	0f be 05 d8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddd8
c0012a6f:	ff 34 85 3c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc4]
c0012a76:	e8 47 3e 00 00       	call   c00168c2 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a7b:	83 c4 20             	add    esp,0x20
c0012a7e:	39 1d cc dd 02 c0    	cmp    DWORD PTR ds:0xc002ddcc,ebx
c0012a84:	7f c7                	jg     c0012a4d <VAS::evict(unsigned long)+0x27>
c0012a86:	83 ec 08             	sub    esp,0x8
c0012a89:	c1 e7 0b             	shl    edi,0xb
c0012a8c:	55                   	push   ebp
c0012a8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a91:	e8 d0 f4 ff ff       	call   c0011f66 <VAS::getPageTableEntry(unsigned long)>
c0012a96:	83 c4 0c             	add    esp,0xc
c0012a99:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a9b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012aa1:	09 d7                	or     edi,edx
c0012aa3:	89 38                	mov    DWORD PTR [eax],edi
c0012aa5:	a1 a8 ef 02 c0       	mov    eax,ds:0xc002efa8
c0012aaa:	40                   	inc    eax
c0012aab:	a3 a8 ef 02 c0       	mov    ds:0xc002efa8,eax
c0012ab0:	0f 20 da             	mov    edx,cr3
c0012ab3:	0f 22 da             	mov    cr3,edx
c0012ab6:	50                   	push   eax
c0012ab7:	55                   	push   ebp
c0012ab8:	68 fb b0 02 c0       	push   0xc002b0fb
c0012abd:	e8 09 04 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0012ac2:	a1 a4 ef 02 c0       	mov    eax,ds:0xc002efa4
c0012ac7:	c7 44 24 40 10 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b110
c0012acf:	8d 50 01             	lea    edx,[eax+0x1]
c0012ad2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012ad6:	89 15 a4 ef 02 c0    	mov    DWORD PTR ds:0xc002efa4,edx
c0012adc:	83 c4 2c             	add    esp,0x2c
c0012adf:	5b                   	pop    ebx
c0012ae0:	5e                   	pop    esi
c0012ae1:	5f                   	pop    edi
c0012ae2:	5d                   	pop    ebp
c0012ae3:	e9 e3 03 00 00       	jmp    c0012ecb <Dbg::kprintf(char const*, ...)>

c0012ae8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012ae8:	55                   	push   ebp
c0012ae9:	57                   	push   edi
c0012aea:	56                   	push   esi
c0012aeb:	53                   	push   ebx
c0012aec:	83 ec 0c             	sub    esp,0xc
c0012aef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012af3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012af9:	0f 84 dc 00 00 00    	je     c0012bdb <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012aff:	56                   	push   esi
c0012b00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b04:	e8 5d f4 ff ff       	call   c0011f66 <VAS::getPageTableEntry(unsigned long)>
c0012b09:	5b                   	pop    ebx
c0012b0a:	85 c0                	test   eax,eax
c0012b0c:	5f                   	pop    edi
c0012b0d:	89 c3                	mov    ebx,eax
c0012b0f:	0f 84 c6 00 00 00    	je     c0012bdb <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012b15:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b17:	31 c0                	xor    eax,eax
c0012b19:	89 fa                	mov    edx,edi
c0012b1b:	81 e2 01 04 00 00    	and    edx,0x401
c0012b21:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b27:	0f 85 b0 00 00 00    	jne    c0012bdd <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b2d:	e8 4e d4 ff ff       	call   c000ff80 <Phys::allocatePage()>
c0012b32:	c1 ef 0b             	shr    edi,0xb
c0012b35:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b37:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b3d:	09 c2                	or     edx,eax
c0012b3f:	81 ca 01 08 00 00    	or     edx,0x801
c0012b45:	89 13                	mov    DWORD PTR [ebx],edx
c0012b47:	8b 0d cc dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddcc
c0012b4d:	85 c9                	test   ecx,ecx
c0012b4f:	7e 3d                	jle    c0012b8e <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b51:	89 f5                	mov    ebp,esi
c0012b53:	31 db                	xor    ebx,ebx
c0012b55:	83 ec 0c             	sub    esp,0xc
c0012b58:	57                   	push   edi
c0012b59:	e8 96 f0 ff ff       	call   c0011bf4 <Virt::swapIDToSector(unsigned long)>
c0012b5e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b61:	01 d8                	add    eax,ebx
c0012b63:	6a 01                	push   0x1
c0012b65:	31 d2                	xor    edx,edx
c0012b67:	43                   	inc    ebx
c0012b68:	52                   	push   edx
c0012b69:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b6f:	50                   	push   eax
c0012b70:	0f be 05 d8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddd8
c0012b77:	ff 34 85 3c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc4]
c0012b7e:	e8 d3 3c 00 00       	call   c0016856 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b83:	83 c4 20             	add    esp,0x20
c0012b86:	39 1d cc dd 02 c0    	cmp    DWORD PTR ds:0xc002ddcc,ebx
c0012b8c:	7f c7                	jg     c0012b55 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b8e:	a1 a8 ef 02 c0       	mov    eax,ds:0xc002efa8
c0012b93:	48                   	dec    eax
c0012b94:	52                   	push   edx
c0012b95:	a3 a8 ef 02 c0       	mov    ds:0xc002efa8,eax
c0012b9a:	50                   	push   eax
c0012b9b:	56                   	push   esi
c0012b9c:	68 21 b1 02 c0       	push   0xc002b121
c0012ba1:	e8 25 03 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0012ba6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ba9:	e8 28 f0 ff ff       	call   c0011bd6 <Virt::freeSwapfilePage(unsigned long)>
c0012bae:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	48                   	dec    eax
c0012bb7:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0012bbc:	85 c0                	test   eax,eax
c0012bbe:	75 01                	jne    c0012bc1 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012bc0:	fb                   	sti    
c0012bc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bc5:	25 ff 0f 00 00       	and    eax,0xfff
c0012bca:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012bcf:	77 14                	ja     c0012be5 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012bd1:	0f 20 d8             	mov    eax,cr3
c0012bd4:	0f 22 d8             	mov    cr3,eax
c0012bd7:	b0 01                	mov    al,0x1
c0012bd9:	eb 02                	jmp    c0012bdd <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012bdb:	31 c0                	xor    eax,eax
c0012bdd:	83 c4 0c             	add    esp,0xc
c0012be0:	5b                   	pop    ebx
c0012be1:	5e                   	pop    esi
c0012be2:	5f                   	pop    edi
c0012be3:	5d                   	pop    ebp
c0012be4:	c3                   	ret    
c0012be5:	83 ec 0c             	sub    esp,0xc
c0012be8:	68 36 b1 02 c0       	push   0xc002b136
c0012bed:	e8 d9 02 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0012bf2:	83 c4 10             	add    esp,0x10
c0012bf5:	eb da                	jmp    c0012bd1 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012bf7:	90                   	nop

c0012bf8 <VAS::scanForEviction()>:
c0012bf8:	57                   	push   edi
c0012bf9:	56                   	push   esi
c0012bfa:	53                   	push   ebx
c0012bfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bff:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c02:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c08:	75 0e                	jne    c0012c18 <VAS::scanForEviction()+0x20>
c0012c0a:	89 da                	mov    edx,ebx
c0012c0c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c0f:	c1 ea 16             	shr    edx,0x16
c0012c12:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c16:	74 48                	je     c0012c60 <VAS::scanForEviction()+0x68>
c0012c18:	53                   	push   ebx
c0012c19:	56                   	push   esi
c0012c1a:	e8 47 f3 ff ff       	call   c0011f66 <VAS::getPageTableEntry(unsigned long)>
c0012c1f:	5a                   	pop    edx
c0012c20:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c22:	59                   	pop    ecx
c0012c23:	89 fa                	mov    edx,edi
c0012c25:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c2b:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c31:	74 3d                	je     c0012c70 <VAS::scanForEviction()+0x78>
c0012c33:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c39:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c3f:	76 2a                	jbe    c0012c6b <VAS::scanForEviction()+0x73>
c0012c41:	31 db                	xor    ebx,ebx
c0012c43:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c4a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c50:	75 c6                	jne    c0012c18 <VAS::scanForEviction()+0x20>
c0012c52:	89 da                	mov    edx,ebx
c0012c54:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c57:	c1 ea 16             	shr    edx,0x16
c0012c5a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c5e:	75 b8                	jne    c0012c18 <VAS::scanForEviction()+0x20>
c0012c60:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c66:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c69:	eb 97                	jmp    c0012c02 <VAS::scanForEviction()+0xa>
c0012c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c6e:	eb 92                	jmp    c0012c02 <VAS::scanForEviction()+0xa>
c0012c70:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c76:	74 bb                	je     c0012c33 <VAS::scanForEviction()+0x3b>
c0012c78:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c7e:	74 0a                	je     c0012c8a <VAS::scanForEviction()+0x92>
c0012c80:	83 e7 df             	and    edi,0xffffffdf
c0012c83:	89 38                	mov    DWORD PTR [eax],edi
c0012c85:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c88:	eb a9                	jmp    c0012c33 <VAS::scanForEviction()+0x3b>
c0012c8a:	83 ec 08             	sub    esp,0x8
c0012c8d:	53                   	push   ebx
c0012c8e:	56                   	push   esi
c0012c8f:	e8 92 fd ff ff       	call   c0012a26 <VAS::evict(unsigned long)>
c0012c94:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	89 f8                	mov    eax,edi
c0012ca0:	5b                   	pop    ebx
c0012ca1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ca6:	5e                   	pop    esi
c0012ca7:	5f                   	pop    edi
c0012ca8:	c3                   	ret    

c0012ca9 <mapVASFirstTime>:
c0012ca9:	55                   	push   ebp
c0012caa:	57                   	push   edi
c0012cab:	56                   	push   esi
c0012cac:	53                   	push   ebx
c0012cad:	83 ec 0c             	sub    esp,0xc
c0012cb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cb5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cb8:	4a                   	dec    edx
c0012cb9:	0f 84 8e 00 00 00    	je     c0012d4d <mapVASFirstTime+0xa4>
c0012cbf:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012cc2:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012cc5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012cca:	c1 e5 15             	shl    ebp,0x15
c0012ccd:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012cd2:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012cd8:	29 eb                	sub    ebx,ebp
c0012cda:	29 ee                	sub    esi,ebp
c0012cdc:	e8 9f d2 ff ff       	call   c000ff80 <Phys::allocatePage()>
c0012ce1:	83 ec 0c             	sub    esp,0xc
c0012ce4:	68 03 04 00 00       	push   0x403
c0012ce9:	6a 01                	push   0x1
c0012ceb:	53                   	push   ebx
c0012cec:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cf2:	50                   	push   eax
c0012cf3:	57                   	push   edi
c0012cf4:	e8 f9 f8 ff ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cf9:	83 c4 20             	add    esp,0x20
c0012cfc:	39 f3                	cmp    ebx,esi
c0012cfe:	75 dc                	jne    c0012cdc <mapVASFirstTime+0x33>
c0012d00:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d05:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d0a:	29 ee                	sub    esi,ebp
c0012d0c:	29 e8                	sub    eax,ebp
c0012d0e:	89 c5                	mov    ebp,eax
c0012d10:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d14:	19 db                	sbb    ebx,ebx
c0012d16:	e8 65 d2 ff ff       	call   c000ff80 <Phys::allocatePage()>
c0012d1b:	83 e3 04             	and    ebx,0x4
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d27:	53                   	push   ebx
c0012d28:	6a 01                	push   0x1
c0012d2a:	56                   	push   esi
c0012d2b:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d31:	50                   	push   eax
c0012d32:	57                   	push   edi
c0012d33:	e8 ba f8 ff ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d38:	83 c4 20             	add    esp,0x20
c0012d3b:	39 f5                	cmp    ebp,esi
c0012d3d:	75 d1                	jne    c0012d10 <mapVASFirstTime+0x67>
c0012d3f:	0f 20 d8             	mov    eax,cr3
c0012d42:	0f 22 d8             	mov    cr3,eax
c0012d45:	83 c4 0c             	add    esp,0xc
c0012d48:	5b                   	pop    ebx
c0012d49:	5e                   	pop    esi
c0012d4a:	5f                   	pop    edi
c0012d4b:	5d                   	pop    ebp
c0012d4c:	c3                   	ret    
c0012d4d:	83 ec 0c             	sub    esp,0xc
c0012d50:	68 46 b1 02 c0       	push   0xc002b146
c0012d55:	e8 71 01 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0012d5a:	83 c4 10             	add    esp,0x10
c0012d5d:	83 c4 0c             	add    esp,0xc
c0012d60:	5b                   	pop    ebx
c0012d61:	5e                   	pop    esi
c0012d62:	5f                   	pop    edi
c0012d63:	5d                   	pop    ebp
c0012d64:	c3                   	ret    

c0012d65 <__cxa_atexit>:
c0012d65:	31 c0                	xor    eax,eax
c0012d67:	c3                   	ret    

c0012d68 <__cxa_finalize>:
c0012d68:	c3                   	ret    

c0012d69 <__stack_chk_fail>:
c0012d69:	55                   	push   ebp
c0012d6a:	89 e5                	mov    ebp,esp
c0012d6c:	83 ec 14             	sub    esp,0x14
c0012d6f:	68 5f b1 02 c0       	push   0xc002b15f
c0012d74:	e8 52 01 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0012d79:	58                   	pop    eax
c0012d7a:	5a                   	pop    edx
c0012d7b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d7e:	68 af b1 02 c0       	push   0xc002b1af
c0012d83:	e8 43 01 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0012d88:	59                   	pop    ecx
c0012d89:	58                   	pop    eax
c0012d8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d8d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d90:	68 af b1 02 c0       	push   0xc002b1af
c0012d95:	e8 31 01 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0012d9a:	5a                   	pop    edx
c0012d9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d9e:	59                   	pop    ecx
c0012d9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012da1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012da4:	68 af b1 02 c0       	push   0xc002b1af
c0012da9:	e8 1d 01 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0012dae:	5a                   	pop    edx
c0012daf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012db2:	59                   	pop    ecx
c0012db3:	8b 00                	mov    eax,DWORD PTR [eax]
c0012db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012db7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dba:	68 af b1 02 c0       	push   0xc002b1af
c0012dbf:	e8 07 01 00 00       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0012dc4:	c7 04 24 b7 b1 02 c0 	mov    DWORD PTR [esp],0xc002b1b7
c0012dcb:	e8 b7 7a 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0012dd0:	83 c4 10             	add    esp,0x10
c0012dd3:	c9                   	leave  
c0012dd4:	c3                   	ret    

c0012dd5 <__cxa_pure_virtual>:
c0012dd5:	83 ec 18             	sub    esp,0x18
c0012dd8:	68 cf b1 02 c0       	push   0xc002b1cf
c0012ddd:	e8 a5 7a 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0012de2:	83 c4 1c             	add    esp,0x1c
c0012de5:	c3                   	ret    

c0012de6 <operator new[](unsigned long)>:
c0012de6:	e9 29 cb ff ff       	jmp    c000f914 <malloc>

c0012deb <operator delete(void*, unsigned long)>:
c0012deb:	e9 44 cb ff ff       	jmp    c000f934 <rfree>

c0012df0 <operator delete[](void*)>:
c0012df0:	e9 3f cb ff ff       	jmp    c000f934 <rfree>

c0012df5 <operator delete[](void*, unsigned long)>:
c0012df5:	e9 3a cb ff ff       	jmp    c000f934 <rfree>

c0012dfa <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012dfa:	57                   	push   edi
c0012dfb:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e00:	56                   	push   esi
c0012e01:	be e4 b1 02 c0       	mov    esi,0xc002b1e4
c0012e06:	53                   	push   ebx
c0012e07:	83 ec 40             	sub    esp,0x40
c0012e0a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e0e:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e12:	fc                   	cld    
c0012e13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e15:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e19:	83 f9 3e             	cmp    ecx,0x3e
c0012e1c:	7e 05                	jle    c0012e23 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e1e:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e23:	89 df                	mov    edi,ebx
c0012e25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e29:	eb 02                	jmp    c0012e2d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e2b:	89 c7                	mov    edi,eax
c0012e2d:	31 d2                	xor    edx,edx
c0012e2f:	46                   	inc    esi
c0012e30:	89 f8                	mov    eax,edi
c0012e32:	f7 f1                	div    ecx
c0012e34:	39 cf                	cmp    edi,ecx
c0012e36:	73 f3                	jae    c0012e2b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e38:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e3b:	eb 02                	jmp    c0012e3f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e3d:	89 c3                	mov    ebx,eax
c0012e3f:	31 d2                	xor    edx,edx
c0012e41:	4e                   	dec    esi
c0012e42:	89 d8                	mov    eax,ebx
c0012e44:	f7 f1                	div    ecx
c0012e46:	39 cb                	cmp    ebx,ecx
c0012e48:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e4c:	88 16                	mov    BYTE PTR [esi],dl
c0012e4e:	73 ed                	jae    c0012e3d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e50:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e54:	83 c4 40             	add    esp,0x40
c0012e57:	5b                   	pop    ebx
c0012e58:	5e                   	pop    esi
c0012e59:	5f                   	pop    edi
c0012e5a:	c3                   	ret    

c0012e5b <Dbg::logc(char)>:
c0012e5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e5f:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e64:	ec                   	in     al,dx
c0012e65:	a8 20                	test   al,0x20
c0012e67:	74 fb                	je     c0012e64 <Dbg::logc(char)+0x9>
c0012e69:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e6e:	88 c8                	mov    al,cl
c0012e70:	ee                   	out    dx,al
c0012e71:	c3                   	ret    

c0012e72 <Dbg::logs(char*)>:
c0012e72:	53                   	push   ebx
c0012e73:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e77:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e7a:	84 c0                	test   al,al
c0012e7c:	74 0f                	je     c0012e8d <Dbg::logs(char*)+0x1b>
c0012e7e:	50                   	push   eax
c0012e7f:	43                   	inc    ebx
c0012e80:	e8 d6 ff ff ff       	call   c0012e5b <Dbg::logc(char)>
c0012e85:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e88:	5a                   	pop    edx
c0012e89:	84 c0                	test   al,al
c0012e8b:	75 f1                	jne    c0012e7e <Dbg::logs(char*)+0xc>
c0012e8d:	5b                   	pop    ebx
c0012e8e:	c3                   	ret    

c0012e8f <Dbg::logWriteInt(unsigned int)>:
c0012e8f:	83 ec 10             	sub    esp,0x10
c0012e92:	6a 0a                	push   0xa
c0012e94:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e98:	50                   	push   eax
c0012e99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e9d:	e8 58 ff ff ff       	call   c0012dfa <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ea2:	50                   	push   eax
c0012ea3:	e8 ca ff ff ff       	call   c0012e72 <Dbg::logs(char*)>
c0012ea8:	83 c4 20             	add    esp,0x20
c0012eab:	c3                   	ret    

c0012eac <Dbg::logWriteIntBase(unsigned int, int)>:
c0012eac:	83 ec 10             	sub    esp,0x10
c0012eaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012eb7:	50                   	push   eax
c0012eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ebc:	e8 39 ff ff ff       	call   c0012dfa <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ec1:	50                   	push   eax
c0012ec2:	e8 ab ff ff ff       	call   c0012e72 <Dbg::logs(char*)>
c0012ec7:	83 c4 20             	add    esp,0x20
c0012eca:	c3                   	ret    

c0012ecb <Dbg::kprintf(char const*, ...)>:
c0012ecb:	55                   	push   ebp
c0012ecc:	57                   	push   edi
c0012ecd:	56                   	push   esi
c0012ece:	53                   	push   ebx
c0012ecf:	83 ec 0c             	sub    esp,0xc
c0012ed2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ed6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012eda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ede:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ee1:	84 c0                	test   al,al
c0012ee3:	74 4a                	je     c0012f2f <Dbg::kprintf(char const*, ...)+0x64>
c0012ee5:	31 db                	xor    ebx,ebx
c0012ee7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012eea:	3c 25                	cmp    al,0x25
c0012eec:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012eef:	0f 85 e4 00 00 00    	jne    c0012fd9 <Dbg::kprintf(char const*, ...)+0x10e>
c0012ef5:	83 c3 02             	add    ebx,0x2
c0012ef8:	8a 07                	mov    al,BYTE PTR [edi]
c0012efa:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012efd:	83 e8 25             	sub    eax,0x25
c0012f00:	3c 53                	cmp    al,0x53
c0012f02:	0f 87 ba 00 00 00    	ja     c0012fc2 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f08:	0f b6 c0             	movzx  eax,al
c0012f0b:	ff 24 85 24 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4ddc]
c0012f12:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f16:	89 c8                	mov    eax,ecx
c0012f18:	83 c1 04             	add    ecx,0x4
c0012f1b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f1f:	ff 30                	push   DWORD PTR [eax]
c0012f21:	e8 4c ff ff ff       	call   c0012e72 <Dbg::logs(char*)>
c0012f26:	58                   	pop    eax
c0012f27:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f2b:	84 c0                	test   al,al
c0012f2d:	75 b8                	jne    c0012ee7 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f2f:	83 c4 0c             	add    esp,0xc
c0012f32:	5b                   	pop    ebx
c0012f33:	5e                   	pop    esi
c0012f34:	5f                   	pop    edi
c0012f35:	5d                   	pop    ebp
c0012f36:	c3                   	ret    
c0012f37:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f3b:	89 d0                	mov    eax,edx
c0012f3d:	83 c2 04             	add    edx,0x4
c0012f40:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f44:	ff 30                	push   DWORD PTR [eax]
c0012f46:	e8 44 ff ff ff       	call   c0012e8f <Dbg::logWriteInt(unsigned int)>
c0012f4b:	58                   	pop    eax
c0012f4c:	eb d9                	jmp    c0012f27 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f52:	89 d0                	mov    eax,edx
c0012f54:	83 c2 04             	add    edx,0x4
c0012f57:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f5e:	50                   	push   eax
c0012f5f:	e8 f7 fe ff ff       	call   c0012e5b <Dbg::logc(char)>
c0012f64:	58                   	pop    eax
c0012f65:	eb c0                	jmp    c0012f27 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f67:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f6b:	89 c8                	mov    eax,ecx
c0012f6d:	83 c1 04             	add    ecx,0x4
c0012f70:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f74:	ff 30                	push   DWORD PTR [eax]
c0012f76:	e8 14 ff ff ff       	call   c0012e8f <Dbg::logWriteInt(unsigned int)>
c0012f7b:	5f                   	pop    edi
c0012f7c:	eb a9                	jmp    c0012f27 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f7e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f82:	89 c8                	mov    eax,ecx
c0012f84:	83 c1 04             	add    ecx,0x4
c0012f87:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f8b:	6a 10                	push   0x10
c0012f8d:	ff 30                	push   DWORD PTR [eax]
c0012f8f:	e8 18 ff ff ff       	call   c0012eac <Dbg::logWriteIntBase(unsigned int, int)>
c0012f94:	59                   	pop    ecx
c0012f95:	5f                   	pop    edi
c0012f96:	eb 8f                	jmp    c0012f27 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f9c:	89 d0                	mov    eax,edx
c0012f9e:	83 c2 08             	add    edx,0x8
c0012fa1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fa5:	6a 10                	push   0x10
c0012fa7:	ff 30                	push   DWORD PTR [eax]
c0012fa9:	e8 fe fe ff ff       	call   c0012eac <Dbg::logWriteIntBase(unsigned int, int)>
c0012fae:	58                   	pop    eax
c0012faf:	5a                   	pop    edx
c0012fb0:	e9 72 ff ff ff       	jmp    c0012f27 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fb5:	6a 25                	push   0x25
c0012fb7:	e8 9f fe ff ff       	call   c0012e5b <Dbg::logc(char)>
c0012fbc:	58                   	pop    eax
c0012fbd:	e9 65 ff ff ff       	jmp    c0012f27 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fc2:	6a 25                	push   0x25
c0012fc4:	e8 92 fe ff ff       	call   c0012e5b <Dbg::logc(char)>
c0012fc9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fcc:	50                   	push   eax
c0012fcd:	e8 89 fe ff ff       	call   c0012e5b <Dbg::logc(char)>
c0012fd2:	5a                   	pop    edx
c0012fd3:	59                   	pop    ecx
c0012fd4:	e9 4e ff ff ff       	jmp    c0012f27 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fd9:	50                   	push   eax
c0012fda:	89 eb                	mov    ebx,ebp
c0012fdc:	e8 7a fe ff ff       	call   c0012e5b <Dbg::logc(char)>
c0012fe1:	89 fd                	mov    ebp,edi
c0012fe3:	58                   	pop    eax
c0012fe4:	e9 3e ff ff ff       	jmp    c0012f27 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe9:	90                   	nop

c0012fea <File::read(unsigned long long, void*, int*)>:
c0012fea:	53                   	push   ebx
c0012feb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ff3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ffa:	3c 19                	cmp    al,0x19
c0012ffc:	77 35                	ja     c0013033 <File::read(unsigned long long, void*, int*)+0x49>
c0012ffe:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0013005:	85 c0                	test   eax,eax
c0013007:	74 2a                	je     c0013033 <File::read(unsigned long long, void*, int*)+0x49>
c0013009:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001300f:	85 c0                	test   eax,eax
c0013011:	74 20                	je     c0013033 <File::read(unsigned long long, void*, int*)+0x49>
c0013013:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013017:	74 21                	je     c001303a <File::read(unsigned long long, void*, int*)+0x50>
c0013019:	8b 08                	mov    ecx,DWORD PTR [eax]
c001301b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001301f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013025:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013029:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001302d:	5b                   	pop    ebx
c001302e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013031:	ff e0                	jmp    eax
c0013033:	b8 0b 00 00 00       	mov    eax,0xb
c0013038:	eb 05                	jmp    c001303f <File::read(unsigned long long, void*, int*)+0x55>
c001303a:	b8 05 00 00 00       	mov    eax,0x5
c001303f:	5b                   	pop    ebx
c0013040:	c3                   	ret    
c0013041:	90                   	nop

c0013042 <File::write(unsigned long long, void*, int*)>:
c0013042:	53                   	push   ebx
c0013043:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013047:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001304b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013052:	3c 19                	cmp    al,0x19
c0013054:	77 35                	ja     c001308b <File::write(unsigned long long, void*, int*)+0x49>
c0013056:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c001305d:	85 c0                	test   eax,eax
c001305f:	74 2a                	je     c001308b <File::write(unsigned long long, void*, int*)+0x49>
c0013061:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013067:	85 c0                	test   eax,eax
c0013069:	74 20                	je     c001308b <File::write(unsigned long long, void*, int*)+0x49>
c001306b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001306f:	74 21                	je     c0013092 <File::write(unsigned long long, void*, int*)+0x50>
c0013071:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013073:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013077:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001307d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013085:	5b                   	pop    ebx
c0013086:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013089:	ff e0                	jmp    eax
c001308b:	b8 0b 00 00 00       	mov    eax,0xb
c0013090:	eb 05                	jmp    c0013097 <File::write(unsigned long long, void*, int*)+0x55>
c0013092:	b8 05 00 00 00       	mov    eax,0x5
c0013097:	5b                   	pop    ebx
c0013098:	c3                   	ret    
c0013099:	90                   	nop

c001309a <Directory::read(unsigned long long, void*, int*)>:
c001309a:	53                   	push   ebx
c001309b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001309f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130a3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130aa:	3c 19                	cmp    al,0x19
c00130ac:	77 35                	ja     c00130e3 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130ae:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c00130b5:	85 c0                	test   eax,eax
c00130b7:	74 2a                	je     c00130e3 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130b9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130bf:	85 c0                	test   eax,eax
c00130c1:	74 20                	je     c00130e3 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130c3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130c7:	74 21                	je     c00130ea <Directory::read(unsigned long long, void*, int*)+0x50>
c00130c9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130cb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130cf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130dd:	5b                   	pop    ebx
c00130de:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130e1:	ff e0                	jmp    eax
c00130e3:	b8 0b 00 00 00       	mov    eax,0xb
c00130e8:	eb 05                	jmp    c00130ef <Directory::read(unsigned long long, void*, int*)+0x55>
c00130ea:	b8 05 00 00 00       	mov    eax,0x5
c00130ef:	5b                   	pop    ebx
c00130f0:	c3                   	ret    
c00130f1:	90                   	nop

c00130f2 <Directory::write(unsigned long long, void*, int*)>:
c00130f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130f6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013102:	80 fa 19             	cmp    dl,0x19
c0013105:	77 18                	ja     c001311f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013107:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c001310e:	85 d2                	test   edx,edx
c0013110:	74 0d                	je     c001311f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013112:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013119:	19 c0                	sbb    eax,eax
c001311b:	83 e0 0a             	and    eax,0xa
c001311e:	40                   	inc    eax
c001311f:	c3                   	ret    

c0013120 <File::isAtty()>:
c0013120:	31 c0                	xor    eax,eax
c0013122:	c3                   	ret    
c0013123:	90                   	nop

c0013124 <Directory::isAtty()>:
c0013124:	31 c0                	xor    eax,eax
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013128:	b8 0a 00 00 00       	mov    eax,0xa
c001312d:	c3                   	ret    

c001312e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001312e:	b8 0a 00 00 00       	mov    eax,0xa
c0013133:	c3                   	ret    

c0013134 <Filesystem::getFileFirstSector(char const*)>:
c0013134:	31 c0                	xor    eax,eax
c0013136:	31 d2                	xor    edx,edx
c0013138:	c3                   	ret    
c0013139:	90                   	nop

c001313a <File::~File()>:
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c0013142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013146:	89 10                	mov    DWORD PTR [eax],edx
c0013148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314c:	83 ec 0c             	sub    esp,0xc
c001314f:	50                   	push   eax
c0013150:	e8 0f e7 ff ff       	call   c0011864 <UnixFile::~UnixFile()>
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	90                   	nop
c0013159:	83 c4 0c             	add    esp,0xc
c001315c:	c3                   	ret    
c001315d:	90                   	nop

c001315e <File::~File()>:
c001315e:	83 ec 0c             	sub    esp,0xc
c0013161:	83 ec 0c             	sub    esp,0xc
c0013164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013168:	e8 cd ff ff ff       	call   c001313a <File::~File()>
c001316d:	83 c4 10             	add    esp,0x10
c0013170:	83 ec 08             	sub    esp,0x8
c0013173:	68 14 01 00 00       	push   0x114
c0013178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001317c:	e8 6a fc ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0013181:	83 c4 10             	add    esp,0x10
c0013184:	83 c4 0c             	add    esp,0xc
c0013187:	c3                   	ret    

c0013188 <Directory::~Directory()>:
c0013188:	83 ec 0c             	sub    esp,0xc
c001318b:	ba 00 b4 02 c0       	mov    edx,0xc002b400
c0013190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013194:	89 10                	mov    DWORD PTR [eax],edx
c0013196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319a:	83 ec 0c             	sub    esp,0xc
c001319d:	50                   	push   eax
c001319e:	e8 c1 e6 ff ff       	call   c0011864 <UnixFile::~UnixFile()>
c00131a3:	83 c4 10             	add    esp,0x10
c00131a6:	90                   	nop
c00131a7:	83 c4 0c             	add    esp,0xc
c00131aa:	c3                   	ret    
c00131ab:	90                   	nop

c00131ac <Directory::~Directory()>:
c00131ac:	83 ec 0c             	sub    esp,0xc
c00131af:	83 ec 0c             	sub    esp,0xc
c00131b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b6:	e8 cd ff ff ff       	call   c0013188 <Directory::~Directory()>
c00131bb:	83 c4 10             	add    esp,0x10
c00131be:	83 ec 08             	sub    esp,0x8
c00131c1:	68 14 01 00 00       	push   0x114
c00131c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ca:	e8 1c fc ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	83 c4 0c             	add    esp,0xc
c00131d5:	c3                   	ret    

c00131d6 <Filesystem::Filesystem()>:
c00131d6:	ba 7c b3 02 c0       	mov    edx,0xc002b37c
c00131db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131df:	89 10                	mov    DWORD PTR [eax],edx
c00131e1:	8b 15 b4 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efb4
c00131e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f2:	a3 b4 ef 02 c0       	mov    ds:0xc002efb4,eax
c00131f7:	90                   	nop
c00131f8:	c3                   	ret    
c00131f9:	90                   	nop

c00131fa <Filesystem::~Filesystem()>:
c00131fa:	ba 7c b3 02 c0       	mov    edx,0xc002b37c
c00131ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013203:	89 10                	mov    DWORD PTR [eax],edx
c0013205:	90                   	nop
c0013206:	c3                   	ret    
c0013207:	90                   	nop

c0013208 <Filesystem::~Filesystem()>:
c0013208:	83 ec 0c             	sub    esp,0xc
c001320b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001320f:	e8 e6 ff ff ff       	call   c00131fa <Filesystem::~Filesystem()>
c0013214:	83 c4 04             	add    esp,0x4
c0013217:	83 ec 08             	sub    esp,0x8
c001321a:	6a 08                	push   0x8
c001321c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013220:	e8 c6 fb ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0013225:	83 c4 10             	add    esp,0x10
c0013228:	83 c4 0c             	add    esp,0xc
c001322b:	c3                   	ret    

c001322c <Fs::getcwd(Process*, char*, int)>:
c001322c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013230:	31 c0                	xor    eax,eax
c0013232:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013235:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013239:	7d 15                	jge    c0013250 <Fs::getcwd(Process*, char*, int)+0x24>
c001323b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001323f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013246:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013249:	84 c9                	test   cl,cl
c001324b:	74 06                	je     c0013253 <Fs::getcwd(Process*, char*, int)+0x27>
c001324d:	40                   	inc    eax
c001324e:	eb e2                	jmp    c0013232 <Fs::getcwd(Process*, char*, int)+0x6>
c0013250:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013253:	31 c0                	xor    eax,eax
c0013255:	c3                   	ret    

c0013256 <Fs::initVFS()>:
c0013256:	83 ec 18             	sub    esp,0x18
c0013259:	6a 08                	push   0x8
c001325b:	e8 b4 c6 ff ff       	call   c000f914 <malloc>
c0013260:	89 04 24             	mov    DWORD PTR [esp],eax
c0013263:	e8 fc e3 00 00       	call   c0021664 <FAT::FAT()>
c0013268:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001326f:	e8 a0 c6 ff ff       	call   c000f914 <malloc>
c0013274:	89 04 24             	mov    DWORD PTR [esp],eax
c0013277:	e8 40 f6 00 00       	call   c00228bc <ISO9660::ISO9660()>
c001327c:	83 c4 1c             	add    esp,0x1c
c001327f:	c3                   	ret    

c0013280 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013280:	55                   	push   ebp
c0013281:	57                   	push   edi
c0013282:	56                   	push   esi
c0013283:	53                   	push   ebx
c0013284:	81 ec 10 04 00 00    	sub    esp,0x410
c001328a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013291:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013298:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001329f:	68 00 04 00 00       	push   0x400
c00132a4:	6a 00                	push   0x0
c00132a6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132aa:	56                   	push   esi
c00132ab:	e8 d0 d4 fe ff       	call   c0000780 <memset>
c00132b0:	83 c4 10             	add    esp,0x10
c00132b3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132b7:	75 0b                	jne    c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132b9:	50                   	push   eax
c00132ba:	50                   	push   eax
c00132bb:	57                   	push   edi
c00132bc:	56                   	push   esi
c00132bd:	e8 7a d5 fe ff       	call   c000083c <strcpy>
c00132c2:	eb 41                	jmp    c0013305 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132c4:	8a 07                	mov    al,BYTE PTR [edi]
c00132c6:	3c 5c                	cmp    al,0x5c
c00132c8:	74 04                	je     c00132ce <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132ca:	3c 2f                	cmp    al,0x2f
c00132cc:	75 18                	jne    c00132e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132ce:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132d1:	3c 60                	cmp    al,0x60
c00132d3:	7e 03                	jle    c00132d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132d5:	83 e8 20             	sub    eax,0x20
c00132d8:	88 04 24             	mov    BYTE PTR [esp],al
c00132db:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132e2:	50                   	push   eax
c00132e3:	50                   	push   eax
c00132e4:	eb 18                	jmp    c00132fe <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132e6:	50                   	push   eax
c00132e7:	50                   	push   eax
c00132e8:	55                   	push   ebp
c00132e9:	56                   	push   esi
c00132ea:	e8 4d d5 fe ff       	call   c000083c <strcpy>
c00132ef:	5a                   	pop    edx
c00132f0:	59                   	pop    ecx
c00132f1:	68 91 cb 02 c0       	push   0xc002cb91
c00132f6:	56                   	push   esi
c00132f7:	e8 80 d6 fe ff       	call   c000097c <strcat>
c00132fc:	5d                   	pop    ebp
c00132fd:	58                   	pop    eax
c00132fe:	57                   	push   edi
c00132ff:	56                   	push   esi
c0013300:	e8 77 d6 fe ff       	call   c000097c <strcat>
c0013305:	83 c4 10             	add    esp,0x10
c0013308:	8a 04 24             	mov    al,BYTE PTR [esp]
c001330b:	3c 60                	cmp    al,0x60
c001330d:	7e 03                	jle    c0013312 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001330f:	83 e8 20             	sub    eax,0x20
c0013312:	88 04 24             	mov    BYTE PTR [esp],al
c0013315:	88 03                	mov    BYTE PTR [ebx],al
c0013317:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001331e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013324:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013328:	bf 03 00 00 00       	mov    edi,0x3
c001332d:	b8 03 00 00 00       	mov    eax,0x3
c0013332:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013335:	84 d2                	test   dl,dl
c0013337:	0f 84 91 00 00 00    	je     c00133ce <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001333d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013340:	80 fa 5c             	cmp    dl,0x5c
c0013343:	74 05                	je     c001334a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013345:	80 fa 2f             	cmp    dl,0x2f
c0013348:	75 12                	jne    c001335c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001334a:	89 c5                	mov    ebp,eax
c001334c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013351:	74 09                	je     c001335c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013353:	40                   	inc    eax
c0013354:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013358:	89 cf                	mov    edi,ecx
c001335a:	eb d6                	jmp    c0013332 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001335c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013361:	75 5b                	jne    c00133be <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013363:	80 fa 2e             	cmp    dl,0x2e
c0013366:	75 56                	jne    c00133be <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013368:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001336c:	74 19                	je     c0013387 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001336e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013373:	74 53                	je     c00133c8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013375:	89 f9                	mov    ecx,edi
c0013377:	41                   	inc    ecx
c0013378:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001337b:	80 fa 2f             	cmp    dl,0x2f
c001337e:	74 f7                	je     c0013377 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013380:	80 fa 5c             	cmp    dl,0x5c
c0013383:	74 f2                	je     c0013377 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013385:	eb d1                	jmp    c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013387:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001338c:	74 3a                	je     c00133c8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001338e:	83 f8 03             	cmp    eax,0x3
c0013391:	74 c5                	je     c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013393:	41                   	inc    ecx
c0013394:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013397:	80 fa 2f             	cmp    dl,0x2f
c001339a:	74 f7                	je     c0013393 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001339c:	80 fa 5c             	cmp    dl,0x5c
c001339f:	74 f2                	je     c0013393 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133a1:	48                   	dec    eax
c00133a2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133a6:	75 06                	jne    c00133ae <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133a8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ac:	eb f3                	jmp    c00133a1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133ae:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133b2:	74 07                	je     c00133bb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133b4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133b8:	48                   	dec    eax
c00133b9:	eb f3                	jmp    c00133ae <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133bb:	40                   	inc    eax
c00133bc:	eb 9a                	jmp    c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133be:	80 fa 2f             	cmp    dl,0x2f
c00133c1:	74 95                	je     c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c3:	80 fa 5c             	cmp    dl,0x5c
c00133c6:	74 90                	je     c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133cb:	40                   	inc    eax
c00133cc:	eb 8a                	jmp    c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133ce:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133d2:	83 ec 0c             	sub    esp,0xc
c00133d5:	53                   	push   ebx
c00133d6:	e8 c1 d3 fe ff       	call   c000079c <strlen>
c00133db:	83 c4 10             	add    esp,0x10
c00133de:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133e3:	75 26                	jne    c001340b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133e5:	83 ec 0c             	sub    esp,0xc
c00133e8:	53                   	push   ebx
c00133e9:	e8 ae d3 fe ff       	call   c000079c <strlen>
c00133ee:	83 c4 10             	add    esp,0x10
c00133f1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133f6:	74 26                	je     c001341e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133f8:	83 ec 0c             	sub    esp,0xc
c00133fb:	53                   	push   ebx
c00133fc:	e8 9b d3 fe ff       	call   c000079c <strlen>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013409:	eb c7                	jmp    c00133d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001340b:	83 ec 0c             	sub    esp,0xc
c001340e:	53                   	push   ebx
c001340f:	e8 88 d3 fe ff       	call   c000079c <strlen>
c0013414:	83 c4 10             	add    esp,0x10
c0013417:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001341c:	74 c7                	je     c00133e5 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001341e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013424:	5b                   	pop    ebx
c0013425:	5e                   	pop    esi
c0013426:	5f                   	pop    edi
c0013427:	5d                   	pop    ebp
c0013428:	c3                   	ret    
c0013429:	90                   	nop

c001342a <File::File(char const*, Process*)>:
c001342a:	83 ec 0c             	sub    esp,0xc
c001342d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013431:	83 ec 08             	sub    esp,0x8
c0013434:	6a 00                	push   0x0
c0013436:	50                   	push   eax
c0013437:	e8 46 e2 ff ff       	call   c0011682 <UnixFile::UnixFile(int)>
c001343c:	83 c4 10             	add    esp,0x10
c001343f:	ba e4 b3 02 c0       	mov    edx,0xc002b3e4
c0013444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013448:	89 10                	mov    DWORD PTR [eax],edx
c001344a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001344e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013458:	83 c0 0d             	add    eax,0xd
c001345b:	83 ec 04             	sub    esp,0x4
c001345e:	52                   	push   edx
c001345f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013463:	50                   	push   eax
c0013464:	e8 17 fe ff ff       	call   c0013280 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013469:	83 c4 10             	add    esp,0x10
c001346c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013470:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013473:	8d 50 bf             	lea    edx,[eax-0x41]
c0013476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013484:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013488:	90                   	nop
c0013489:	83 c4 0c             	add    esp,0xc
c001348c:	c3                   	ret    
c001348d:	90                   	nop

c001348e <File::open(FileOpenMode)>:
c001348e:	53                   	push   ebx
c001348f:	b8 0b 00 00 00       	mov    eax,0xb
c0013494:	83 ec 08             	sub    esp,0x8
c0013497:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001349b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134a2:	80 fa 19             	cmp    dl,0x19
c00134a5:	77 40                	ja     c00134e7 <File::open(FileOpenMode)+0x59>
c00134a7:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c00134ae:	85 d2                	test   edx,edx
c00134b0:	74 35                	je     c00134e7 <File::open(FileOpenMode)+0x59>
c00134b2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134b8:	85 d2                	test   edx,edx
c00134ba:	74 2b                	je     c00134e7 <File::open(FileOpenMode)+0x59>
c00134bc:	b8 06 00 00 00       	mov    eax,0x6
c00134c1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134c5:	75 20                	jne    c00134e7 <File::open(FileOpenMode)+0x59>
c00134c7:	8b 02                	mov    eax,DWORD PTR [edx]
c00134c9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134d3:	51                   	push   ecx
c00134d4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134d7:	51                   	push   ecx
c00134d8:	52                   	push   edx
c00134d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	85 c0                	test   eax,eax
c00134e1:	75 04                	jne    c00134e7 <File::open(FileOpenMode)+0x59>
c00134e3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134e7:	83 c4 08             	add    esp,0x8
c00134ea:	5b                   	pop    ebx
c00134eb:	c3                   	ret    

c00134ec <File::close()>:
c00134ec:	53                   	push   ebx
c00134ed:	b8 0b 00 00 00       	mov    eax,0xb
c00134f2:	83 ec 08             	sub    esp,0x8
c00134f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134f9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013500:	80 fa 19             	cmp    dl,0x19
c0013503:	77 41                	ja     c0013546 <File::close()+0x5a>
c0013505:	8b 1c 95 40 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0bc0]
c001350c:	85 db                	test   ebx,ebx
c001350e:	74 36                	je     c0013546 <File::close()+0x5a>
c0013510:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013517:	74 2d                	je     c0013546 <File::close()+0x5a>
c0013519:	b8 05 00 00 00       	mov    eax,0x5
c001351e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013522:	74 22                	je     c0013546 <File::close()+0x5a>
c0013524:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013528:	8b 04 95 40 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0bc0]
c001352f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013535:	53                   	push   ebx
c0013536:	53                   	push   ebx
c0013537:	8b 10                	mov    edx,DWORD PTR [eax]
c0013539:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001353f:	50                   	push   eax
c0013540:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013543:	83 c4 10             	add    esp,0x10
c0013546:	83 c4 08             	add    esp,0x8
c0013549:	5b                   	pop    ebx
c001354a:	c3                   	ret    
c001354b:	90                   	nop

c001354c <File::seek(unsigned long long)>:
c001354c:	56                   	push   esi
c001354d:	53                   	push   ebx
c001354e:	b8 0b 00 00 00       	mov    eax,0xb
c0013553:	51                   	push   ecx
c0013554:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013558:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001355c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013563:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013567:	80 fa 19             	cmp    dl,0x19
c001356a:	77 31                	ja     c001359d <File::seek(unsigned long long)+0x51>
c001356c:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c0013573:	85 d2                	test   edx,edx
c0013575:	74 26                	je     c001359d <File::seek(unsigned long long)+0x51>
c0013577:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001357d:	85 d2                	test   edx,edx
c001357f:	74 1c                	je     c001359d <File::seek(unsigned long long)+0x51>
c0013581:	b8 05 00 00 00       	mov    eax,0x5
c0013586:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001358a:	74 11                	je     c001359d <File::seek(unsigned long long)+0x51>
c001358c:	8b 02                	mov    eax,DWORD PTR [edx]
c001358e:	53                   	push   ebx
c001358f:	51                   	push   ecx
c0013590:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013596:	52                   	push   edx
c0013597:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001359a:	83 c4 10             	add    esp,0x10
c001359d:	5a                   	pop    edx
c001359e:	5b                   	pop    ebx
c001359f:	5e                   	pop    esi
c00135a0:	c3                   	ret    
c00135a1:	90                   	nop

c00135a2 <File::tell(unsigned long long*)>:
c00135a2:	83 ec 0c             	sub    esp,0xc
c00135a5:	b8 0b 00 00 00       	mov    eax,0xb
c00135aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135ae:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135b5:	80 fa 19             	cmp    dl,0x19
c00135b8:	77 34                	ja     c00135ee <File::tell(unsigned long long*)+0x4c>
c00135ba:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c00135c1:	85 d2                	test   edx,edx
c00135c3:	74 29                	je     c00135ee <File::tell(unsigned long long*)+0x4c>
c00135c5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135cb:	85 d2                	test   edx,edx
c00135cd:	74 1f                	je     c00135ee <File::tell(unsigned long long*)+0x4c>
c00135cf:	b8 05 00 00 00       	mov    eax,0x5
c00135d4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135d8:	74 14                	je     c00135ee <File::tell(unsigned long long*)+0x4c>
c00135da:	50                   	push   eax
c00135db:	8b 02                	mov    eax,DWORD PTR [edx]
c00135dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135e7:	52                   	push   edx
c00135e8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135eb:	83 c4 10             	add    esp,0x10
c00135ee:	83 c4 0c             	add    esp,0xc
c00135f1:	c3                   	ret    

c00135f2 <File::rewind()>:
c00135f2:	83 ec 10             	sub    esp,0x10
c00135f5:	6a 00                	push   0x0
c00135f7:	6a 00                	push   0x0
c00135f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135fd:	e8 4a ff ff ff       	call   c001354c <File::seek(unsigned long long)>
c0013602:	83 c4 1c             	add    esp,0x1c
c0013605:	c3                   	ret    

c0013606 <File::unlink()>:
c0013606:	83 ec 0c             	sub    esp,0xc
c0013609:	b8 0b 00 00 00       	mov    eax,0xb
c001360e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013612:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013619:	80 f9 19             	cmp    cl,0x19
c001361c:	77 2f                	ja     c001364d <File::unlink()+0x47>
c001361e:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013625:	85 c9                	test   ecx,ecx
c0013627:	74 24                	je     c001364d <File::unlink()+0x47>
c0013629:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001362f:	85 c9                	test   ecx,ecx
c0013631:	74 1a                	je     c001364d <File::unlink()+0x47>
c0013633:	b8 06 00 00 00       	mov    eax,0x6
c0013638:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001363c:	75 0f                	jne    c001364d <File::unlink()+0x47>
c001363e:	83 c2 0d             	add    edx,0xd
c0013641:	50                   	push   eax
c0013642:	50                   	push   eax
c0013643:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013645:	52                   	push   edx
c0013646:	51                   	push   ecx
c0013647:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001364a:	83 c4 10             	add    esp,0x10
c001364d:	83 c4 0c             	add    esp,0xc
c0013650:	c3                   	ret    
c0013651:	90                   	nop

c0013652 <File::rename(char const*)>:
c0013652:	83 ec 0c             	sub    esp,0xc
c0013655:	b8 0b 00 00 00       	mov    eax,0xb
c001365a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001365e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013665:	80 f9 19             	cmp    cl,0x19
c0013668:	77 32                	ja     c001369c <File::rename(char const*)+0x4a>
c001366a:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013671:	85 c9                	test   ecx,ecx
c0013673:	74 27                	je     c001369c <File::rename(char const*)+0x4a>
c0013675:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001367b:	85 c9                	test   ecx,ecx
c001367d:	74 1d                	je     c001369c <File::rename(char const*)+0x4a>
c001367f:	b8 06 00 00 00       	mov    eax,0x6
c0013684:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013688:	75 12                	jne    c001369c <File::rename(char const*)+0x4a>
c001368a:	83 c2 0d             	add    edx,0xd
c001368d:	50                   	push   eax
c001368e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013694:	52                   	push   edx
c0013695:	51                   	push   ecx
c0013696:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013699:	83 c4 10             	add    esp,0x10
c001369c:	83 c4 0c             	add    esp,0xc
c001369f:	c3                   	ret    

c00136a0 <File::chfatattr(unsigned char, unsigned char)>:
c00136a0:	57                   	push   edi
c00136a1:	b8 0b 00 00 00       	mov    eax,0xb
c00136a6:	56                   	push   esi
c00136a7:	53                   	push   ebx
c00136a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136bb:	80 f9 19             	cmp    cl,0x19
c00136be:	77 37                	ja     c00136f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136c0:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c00136c7:	85 c9                	test   ecx,ecx
c00136c9:	74 2c                	je     c00136f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d1:	85 c9                	test   ecx,ecx
c00136d3:	74 22                	je     c00136f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136d5:	b8 06 00 00 00       	mov    eax,0x6
c00136da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136de:	75 17                	jne    c00136f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136e0:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136e2:	89 f0                	mov    eax,esi
c00136e4:	83 c2 0d             	add    edx,0xd
c00136e7:	0f b6 f0             	movzx  esi,al
c00136ea:	0f b6 db             	movzx  ebx,bl
c00136ed:	56                   	push   esi
c00136ee:	53                   	push   ebx
c00136ef:	52                   	push   edx
c00136f0:	51                   	push   ecx
c00136f1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136f4:	83 c4 10             	add    esp,0x10
c00136f7:	5b                   	pop    ebx
c00136f8:	5e                   	pop    esi
c00136f9:	5f                   	pop    edi
c00136fa:	c3                   	ret    
c00136fb:	90                   	nop

c00136fc <File::exists()>:
c00136fc:	83 ec 0c             	sub    esp,0xc
c00136ff:	31 c0                	xor    eax,eax
c0013701:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013705:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001370c:	80 f9 19             	cmp    cl,0x19
c001370f:	77 24                	ja     c0013735 <File::exists()+0x39>
c0013711:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013718:	85 c9                	test   ecx,ecx
c001371a:	74 19                	je     c0013735 <File::exists()+0x39>
c001371c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013722:	85 c9                	test   ecx,ecx
c0013724:	74 0f                	je     c0013735 <File::exists()+0x39>
c0013726:	83 c2 0d             	add    edx,0xd
c0013729:	50                   	push   eax
c001372a:	50                   	push   eax
c001372b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001372d:	52                   	push   edx
c001372e:	51                   	push   ecx
c001372f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013732:	83 c4 10             	add    esp,0x10
c0013735:	83 c4 0c             	add    esp,0xc
c0013738:	c3                   	ret    
c0013739:	90                   	nop

c001373a <File::stat(unsigned long long*, bool*)>:
c001373a:	56                   	push   esi
c001373b:	53                   	push   ebx
c001373c:	50                   	push   eax
c001373d:	b8 0b 00 00 00       	mov    eax,0xb
c0013742:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013746:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001374a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013751:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013755:	80 f9 19             	cmp    cl,0x19
c0013758:	77 3d                	ja     c0013797 <File::stat(unsigned long long*, bool*)+0x5d>
c001375a:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013761:	85 c9                	test   ecx,ecx
c0013763:	74 32                	je     c0013797 <File::stat(unsigned long long*, bool*)+0x5d>
c0013765:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001376b:	85 c9                	test   ecx,ecx
c001376d:	74 28                	je     c0013797 <File::stat(unsigned long long*, bool*)+0x5d>
c001376f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013771:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013775:	74 13                	je     c001378a <File::stat(unsigned long long*, bool*)+0x50>
c0013777:	83 ec 04             	sub    esp,0x4
c001377a:	56                   	push   esi
c001377b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013781:	51                   	push   ecx
c0013782:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013785:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013788:	eb 0a                	jmp    c0013794 <File::stat(unsigned long long*, bool*)+0x5a>
c001378a:	53                   	push   ebx
c001378b:	83 c2 0d             	add    edx,0xd
c001378e:	56                   	push   esi
c001378f:	52                   	push   edx
c0013790:	51                   	push   ecx
c0013791:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	5a                   	pop    edx
c0013798:	5b                   	pop    ebx
c0013799:	5e                   	pop    esi
c001379a:	c3                   	ret    

c001379b <Fs::setcwd(Process*, char*)>:
c001379b:	55                   	push   ebp
c001379c:	57                   	push   edi
c001379d:	56                   	push   esi
c001379e:	53                   	push   ebx
c001379f:	81 ec 20 02 00 00    	sub    esp,0x220
c00137a5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137ac:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137b2:	57                   	push   edi
c00137b3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137ba:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137be:	56                   	push   esi
c00137bf:	e8 bc fa ff ff       	call   c0013280 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137c4:	89 34 24             	mov    DWORD PTR [esp],esi
c00137c7:	e8 d0 cf fe ff       	call   c000079c <strlen>
c00137cc:	83 c4 10             	add    esp,0x10
c00137cf:	83 f8 02             	cmp    eax,0x2
c00137d2:	77 17                	ja     c00137eb <Fs::setcwd(Process*, char*)+0x50>
c00137d4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137d9:	83 e8 41             	sub    eax,0x41
c00137dc:	83 f8 19             	cmp    eax,0x19
c00137df:	76 24                	jbe    c0013805 <Fs::setcwd(Process*, char*)+0x6a>
c00137e1:	b8 03 00 00 00       	mov    eax,0x3
c00137e6:	e9 e0 00 00 00       	jmp    c00138cb <Fs::setcwd(Process*, char*)+0x130>
c00137eb:	83 ec 0c             	sub    esp,0xc
c00137ee:	56                   	push   esi
c00137ef:	e8 a8 cf fe ff       	call   c000079c <strlen>
c00137f4:	83 c4 10             	add    esp,0x10
c00137f7:	83 f8 03             	cmp    eax,0x3
c00137fa:	75 34                	jne    c0013830 <Fs::setcwd(Process*, char*)+0x95>
c00137fc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013801:	75 2d                	jne    c0013830 <Fs::setcwd(Process*, char*)+0x95>
c0013803:	eb cf                	jmp    c00137d4 <Fs::setcwd(Process*, char*)+0x39>
c0013805:	8b 14 85 40 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0bc0]
c001380c:	b8 05 00 00 00       	mov    eax,0x5
c0013811:	85 d2                	test   edx,edx
c0013813:	0f 84 b2 00 00 00    	je     c00138cb <Fs::setcwd(Process*, char*)+0x130>
c0013819:	b8 06 00 00 00       	mov    eax,0x6
c001381e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013825:	0f 85 92 00 00 00    	jne    c00138bd <Fs::setcwd(Process*, char*)+0x122>
c001382b:	e9 9b 00 00 00       	jmp    c00138cb <Fs::setcwd(Process*, char*)+0x130>
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	68 14 01 00 00       	push   0x114
c0013838:	e8 d7 c0 ff ff       	call   c000f914 <malloc>
c001383d:	83 c4 0c             	add    esp,0xc
c0013840:	89 c3                	mov    ebx,eax
c0013842:	55                   	push   ebp
c0013843:	56                   	push   esi
c0013844:	50                   	push   eax
c0013845:	e8 e0 fb ff ff       	call   c001342a <File::File(char const*, Process*)>
c001384a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001384f:	83 c4 0c             	add    esp,0xc
c0013852:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013856:	50                   	push   eax
c0013857:	8d 44 24 10          	lea    eax,[esp+0x10]
c001385b:	50                   	push   eax
c001385c:	53                   	push   ebx
c001385d:	e8 d8 fe ff ff       	call   c001373a <File::stat(unsigned long long*, bool*)>
c0013862:	83 c4 10             	add    esp,0x10
c0013865:	83 f8 02             	cmp    eax,0x2
c0013868:	74 04                	je     c001386e <Fs::setcwd(Process*, char*)+0xd3>
c001386a:	85 c0                	test   eax,eax
c001386c:	74 1c                	je     c001388a <Fs::setcwd(Process*, char*)+0xef>
c001386e:	b8 01 00 00 00       	mov    eax,0x1
c0013873:	85 db                	test   ebx,ebx
c0013875:	74 54                	je     c00138cb <Fs::setcwd(Process*, char*)+0x130>
c0013877:	83 ec 0c             	sub    esp,0xc
c001387a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001387c:	53                   	push   ebx
c001387d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013880:	83 c4 10             	add    esp,0x10
c0013883:	b8 01 00 00 00       	mov    eax,0x1
c0013888:	eb 41                	jmp    c00138cb <Fs::setcwd(Process*, char*)+0x130>
c001388a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001388f:	75 1c                	jne    c00138ad <Fs::setcwd(Process*, char*)+0x112>
c0013891:	b8 02 00 00 00       	mov    eax,0x2
c0013896:	85 db                	test   ebx,ebx
c0013898:	74 31                	je     c00138cb <Fs::setcwd(Process*, char*)+0x130>
c001389a:	83 ec 0c             	sub    esp,0xc
c001389d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001389f:	53                   	push   ebx
c00138a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138a3:	83 c4 10             	add    esp,0x10
c00138a6:	b8 02 00 00 00       	mov    eax,0x2
c00138ab:	eb 1e                	jmp    c00138cb <Fs::setcwd(Process*, char*)+0x130>
c00138ad:	85 db                	test   ebx,ebx
c00138af:	74 0c                	je     c00138bd <Fs::setcwd(Process*, char*)+0x122>
c00138b1:	83 ec 0c             	sub    esp,0xc
c00138b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b6:	53                   	push   ebx
c00138b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	50                   	push   eax
c00138be:	50                   	push   eax
c00138bf:	56                   	push   esi
c00138c0:	57                   	push   edi
c00138c1:	e8 76 cf fe ff       	call   c000083c <strcpy>
c00138c6:	83 c4 10             	add    esp,0x10
c00138c9:	31 c0                	xor    eax,eax
c00138cb:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138d1:	5b                   	pop    ebx
c00138d2:	5e                   	pop    esi
c00138d3:	5f                   	pop    edi
c00138d4:	5d                   	pop    ebp
c00138d5:	c3                   	ret    

c00138d6 <Directory::Directory(char const*, Process*)>:
c00138d6:	83 ec 0c             	sub    esp,0xc
c00138d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138dd:	83 ec 08             	sub    esp,0x8
c00138e0:	6a 00                	push   0x0
c00138e2:	50                   	push   eax
c00138e3:	e8 9a dd ff ff       	call   c0011682 <UnixFile::UnixFile(int)>
c00138e8:	83 c4 10             	add    esp,0x10
c00138eb:	ba 00 b4 02 c0       	mov    edx,0xc002b400
c00138f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f4:	89 10                	mov    DWORD PTR [eax],edx
c00138f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138fa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013904:	83 c0 0d             	add    eax,0xd
c0013907:	83 ec 04             	sub    esp,0x4
c001390a:	52                   	push   edx
c001390b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001390f:	50                   	push   eax
c0013910:	e8 6b f9 ff ff       	call   c0013280 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013915:	83 c4 10             	add    esp,0x10
c0013918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001391f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013926:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001392c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013930:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013934:	90                   	nop
c0013935:	83 c4 0c             	add    esp,0xc
c0013938:	c3                   	ret    
c0013939:	90                   	nop

c001393a <Directory::open()>:
c001393a:	53                   	push   ebx
c001393b:	b8 0b 00 00 00       	mov    eax,0xb
c0013940:	83 ec 08             	sub    esp,0x8
c0013943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013947:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001394e:	80 fa 19             	cmp    dl,0x19
c0013951:	77 3d                	ja     c0013990 <Directory::open()+0x56>
c0013953:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c001395a:	85 d2                	test   edx,edx
c001395c:	74 32                	je     c0013990 <Directory::open()+0x56>
c001395e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013964:	85 d2                	test   edx,edx
c0013966:	74 28                	je     c0013990 <Directory::open()+0x56>
c0013968:	b8 06 00 00 00       	mov    eax,0x6
c001396d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013971:	75 1d                	jne    c0013990 <Directory::open()+0x56>
c0013973:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013979:	50                   	push   eax
c001397a:	8b 02                	mov    eax,DWORD PTR [edx]
c001397c:	51                   	push   ecx
c001397d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013980:	51                   	push   ecx
c0013981:	52                   	push   edx
c0013982:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013985:	83 c4 10             	add    esp,0x10
c0013988:	85 c0                	test   eax,eax
c001398a:	75 04                	jne    c0013990 <Directory::open()+0x56>
c001398c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013990:	83 c4 08             	add    esp,0x8
c0013993:	5b                   	pop    ebx
c0013994:	c3                   	ret    
c0013995:	90                   	nop

c0013996 <Directory::close()>:
c0013996:	53                   	push   ebx
c0013997:	b8 0b 00 00 00       	mov    eax,0xb
c001399c:	83 ec 08             	sub    esp,0x8
c001399f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139a3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139aa:	80 fa 19             	cmp    dl,0x19
c00139ad:	77 41                	ja     c00139f0 <Directory::close()+0x5a>
c00139af:	8b 1c 95 40 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0bc0]
c00139b6:	85 db                	test   ebx,ebx
c00139b8:	74 36                	je     c00139f0 <Directory::close()+0x5a>
c00139ba:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139c1:	74 2d                	je     c00139f0 <Directory::close()+0x5a>
c00139c3:	b8 05 00 00 00       	mov    eax,0x5
c00139c8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139cc:	74 22                	je     c00139f0 <Directory::close()+0x5a>
c00139ce:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139d2:	8b 04 95 40 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0bc0]
c00139d9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139df:	53                   	push   ebx
c00139e0:	53                   	push   ebx
c00139e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00139e3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139e9:	50                   	push   eax
c00139ea:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139ed:	83 c4 10             	add    esp,0x10
c00139f0:	83 c4 08             	add    esp,0x8
c00139f3:	5b                   	pop    ebx
c00139f4:	c3                   	ret    
c00139f5:	90                   	nop

c00139f6 <Directory::unlink()>:
c00139f6:	83 ec 0c             	sub    esp,0xc
c00139f9:	b8 0b 00 00 00       	mov    eax,0xb
c00139fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a02:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a09:	80 f9 19             	cmp    cl,0x19
c0013a0c:	77 2f                	ja     c0013a3d <Directory::unlink()+0x47>
c0013a0e:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013a15:	85 c9                	test   ecx,ecx
c0013a17:	74 24                	je     c0013a3d <Directory::unlink()+0x47>
c0013a19:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a1f:	85 c9                	test   ecx,ecx
c0013a21:	74 1a                	je     c0013a3d <Directory::unlink()+0x47>
c0013a23:	b8 06 00 00 00       	mov    eax,0x6
c0013a28:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a2c:	75 0f                	jne    c0013a3d <Directory::unlink()+0x47>
c0013a2e:	83 c2 0d             	add    edx,0xd
c0013a31:	50                   	push   eax
c0013a32:	50                   	push   eax
c0013a33:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a35:	52                   	push   edx
c0013a36:	51                   	push   ecx
c0013a37:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a3a:	83 c4 10             	add    esp,0x10
c0013a3d:	83 c4 0c             	add    esp,0xc
c0013a40:	c3                   	ret    
c0013a41:	90                   	nop

c0013a42 <Directory::rename(char const*)>:
c0013a42:	83 ec 0c             	sub    esp,0xc
c0013a45:	b8 0b 00 00 00       	mov    eax,0xb
c0013a4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a55:	80 f9 19             	cmp    cl,0x19
c0013a58:	77 32                	ja     c0013a8c <Directory::rename(char const*)+0x4a>
c0013a5a:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013a61:	85 c9                	test   ecx,ecx
c0013a63:	74 27                	je     c0013a8c <Directory::rename(char const*)+0x4a>
c0013a65:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a6b:	85 c9                	test   ecx,ecx
c0013a6d:	74 1d                	je     c0013a8c <Directory::rename(char const*)+0x4a>
c0013a6f:	b8 06 00 00 00       	mov    eax,0x6
c0013a74:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a78:	75 12                	jne    c0013a8c <Directory::rename(char const*)+0x4a>
c0013a7a:	83 c2 0d             	add    edx,0xd
c0013a7d:	50                   	push   eax
c0013a7e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a84:	52                   	push   edx
c0013a85:	51                   	push   ecx
c0013a86:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a89:	83 c4 10             	add    esp,0x10
c0013a8c:	83 c4 0c             	add    esp,0xc
c0013a8f:	c3                   	ret    

c0013a90 <Directory::exists()>:
c0013a90:	83 ec 0c             	sub    esp,0xc
c0013a93:	31 c0                	xor    eax,eax
c0013a95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a99:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa0:	80 f9 19             	cmp    cl,0x19
c0013aa3:	77 24                	ja     c0013ac9 <Directory::exists()+0x39>
c0013aa5:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013aac:	85 c9                	test   ecx,ecx
c0013aae:	74 19                	je     c0013ac9 <Directory::exists()+0x39>
c0013ab0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ab6:	85 c9                	test   ecx,ecx
c0013ab8:	74 0f                	je     c0013ac9 <Directory::exists()+0x39>
c0013aba:	83 c2 0d             	add    edx,0xd
c0013abd:	50                   	push   eax
c0013abe:	50                   	push   eax
c0013abf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac1:	52                   	push   edx
c0013ac2:	51                   	push   ecx
c0013ac3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013ac6:	83 c4 10             	add    esp,0x10
c0013ac9:	83 c4 0c             	add    esp,0xc
c0013acc:	c3                   	ret    
c0013acd:	90                   	nop

c0013ace <Directory::read(dirent*)>:
c0013ace:	83 ec 1c             	sub    esp,0x1c
c0013ad1:	b8 0b 00 00 00       	mov    eax,0xb
c0013ad6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013ada:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ae1:	80 fa 19             	cmp    dl,0x19
c0013ae4:	77 30                	ja     c0013b16 <Directory::read(dirent*)+0x48>
c0013ae6:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c0013aed:	85 d2                	test   edx,edx
c0013aef:	74 25                	je     c0013b16 <Directory::read(dirent*)+0x48>
c0013af1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013af8:	74 1c                	je     c0013b16 <Directory::read(dirent*)+0x48>
c0013afa:	83 ec 0c             	sub    esp,0xc
c0013afd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aff:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b03:	52                   	push   edx
c0013b04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b08:	6a 00                	push   0x0
c0013b0a:	68 10 01 00 00       	push   0x110
c0013b0f:	51                   	push   ecx
c0013b10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b13:	83 c4 20             	add    esp,0x20
c0013b16:	83 c4 1c             	add    esp,0x1c
c0013b19:	c3                   	ret    

c0013b1a <Directory::create()>:
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b26:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b2d:	80 f9 19             	cmp    cl,0x19
c0013b30:	77 2f                	ja     c0013b61 <Directory::create()+0x47>
c0013b32:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013b39:	85 c9                	test   ecx,ecx
c0013b3b:	74 24                	je     c0013b61 <Directory::create()+0x47>
c0013b3d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b43:	85 c9                	test   ecx,ecx
c0013b45:	74 1a                	je     c0013b61 <Directory::create()+0x47>
c0013b47:	b8 06 00 00 00       	mov    eax,0x6
c0013b4c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b50:	75 0f                	jne    c0013b61 <Directory::create()+0x47>
c0013b52:	83 c2 0d             	add    edx,0xd
c0013b55:	50                   	push   eax
c0013b56:	50                   	push   eax
c0013b57:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b59:	52                   	push   edx
c0013b5a:	51                   	push   ecx
c0013b5b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b5e:	83 c4 10             	add    esp,0x10
c0013b61:	83 c4 0c             	add    esp,0xc
c0013b64:	c3                   	ret    
c0013b65:	90                   	nop

c0013b66 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b66:	b8 0a 00 00 00       	mov    eax,0xa
c0013b6b:	c3                   	ret    

c0013b6c <Bus::Bus(char const*)>:
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b73:	83 ec 08             	sub    esp,0x8
c0013b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b7a:	50                   	push   eax
c0013b7b:	e8 70 09 00 00       	call   c00144f0 <Device::Device(char const*)>
c0013b80:	83 c4 10             	add    esp,0x10
c0013b83:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c0013b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8c:	89 10                	mov    DWORD PTR [eax],edx
c0013b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b92:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b9c:	90                   	nop
c0013b9d:	83 c4 0c             	add    esp,0xc
c0013ba0:	c3                   	ret    
c0013ba1:	90                   	nop

c0013ba2 <Bus::~Bus()>:
c0013ba2:	83 ec 0c             	sub    esp,0xc
c0013ba5:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c0013baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bae:	89 10                	mov    DWORD PTR [eax],edx
c0013bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb4:	83 ec 0c             	sub    esp,0xc
c0013bb7:	50                   	push   eax
c0013bb8:	e8 15 06 00 00       	call   c00141d2 <Device::~Device()>
c0013bbd:	83 c4 10             	add    esp,0x10
c0013bc0:	90                   	nop
c0013bc1:	83 c4 0c             	add    esp,0xc
c0013bc4:	c3                   	ret    
c0013bc5:	90                   	nop

c0013bc6 <Bus::~Bus()>:
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	83 ec 0c             	sub    esp,0xc
c0013bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd0:	e8 cd ff ff ff       	call   c0013ba2 <Bus::~Bus()>
c0013bd5:	83 c4 10             	add    esp,0x10
c0013bd8:	83 ec 08             	sub    esp,0x8
c0013bdb:	68 58 01 00 00       	push   0x158
c0013be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be4:	e8 02 f2 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0013be9:	83 c4 10             	add    esp,0x10
c0013bec:	83 c4 0c             	add    esp,0xc
c0013bef:	c3                   	ret    

c0013bf0 <Buzzer::Buzzer(char const*)>:
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf7:	83 ec 08             	sub    esp,0x8
c0013bfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bfe:	50                   	push   eax
c0013bff:	e8 ec 08 00 00       	call   c00144f0 <Device::Device(char const*)>
c0013c04:	83 c4 10             	add    esp,0x10
c0013c07:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c0013c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c10:	89 10                	mov    DWORD PTR [eax],edx
c0013c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c16:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c24:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c2e:	90                   	nop
c0013c2f:	83 c4 0c             	add    esp,0xc
c0013c32:	c3                   	ret    
c0013c33:	90                   	nop

c0013c34 <Buzzer::~Buzzer()>:
c0013c34:	83 ec 0c             	sub    esp,0xc
c0013c37:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c0013c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c40:	89 10                	mov    DWORD PTR [eax],edx
c0013c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c46:	83 ec 0c             	sub    esp,0xc
c0013c49:	50                   	push   eax
c0013c4a:	e8 83 05 00 00       	call   c00141d2 <Device::~Device()>
c0013c4f:	83 c4 10             	add    esp,0x10
c0013c52:	90                   	nop
c0013c53:	83 c4 0c             	add    esp,0xc
c0013c56:	c3                   	ret    
c0013c57:	90                   	nop

c0013c58 <Buzzer::~Buzzer()>:
c0013c58:	83 ec 0c             	sub    esp,0xc
c0013c5b:	83 ec 0c             	sub    esp,0xc
c0013c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c62:	e8 cd ff ff ff       	call   c0013c34 <Buzzer::~Buzzer()>
c0013c67:	83 c4 10             	add    esp,0x10
c0013c6a:	83 ec 08             	sub    esp,0x8
c0013c6d:	68 5c 01 00 00       	push   0x15c
c0013c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c76:	e8 70 f1 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0013c7b:	83 c4 10             	add    esp,0x10
c0013c7e:	83 c4 0c             	add    esp,0xc
c0013c81:	c3                   	ret    

c0013c82 <Buzzer::stop()>:
c0013c82:	83 ec 14             	sub    esp,0x14
c0013c85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c89:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c8b:	6a 00                	push   0x0
c0013c8d:	50                   	push   eax
c0013c8e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c91:	83 c4 1c             	add    esp,0x1c
c0013c94:	c3                   	ret    

c0013c95 <beepThread(void*)>:
c0013c95:	53                   	push   ebx
c0013c96:	83 ec 08             	sub    esp,0x8
c0013c99:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0013c9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ca2:	48                   	dec    eax
c0013ca3:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0013ca8:	75 01                	jne    c0013cab <beepThread(void*)+0x16>
c0013caa:	fb                   	sti    
c0013cab:	50                   	push   eax
c0013cac:	50                   	push   eax
c0013cad:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013cb2:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cb8:	52                   	push   edx
c0013cb9:	50                   	push   eax
c0013cba:	e8 c2 aa 00 00       	call   c001e781 <nanoSleep(unsigned long long)>
c0013cbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cc2:	e8 bb ff ff ff       	call   c0013c82 <Buzzer::stop()>
c0013cc7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013ccf:	83 c4 18             	add    esp,0x18
c0013cd2:	5b                   	pop    ebx
c0013cd3:	e9 a5 a9 00 00       	jmp    c001e67d <blockTask(TaskState)>

c0013cd8 <Buzzer::beep(int, int, bool)>:
c0013cd8:	57                   	push   edi
c0013cd9:	56                   	push   esi
c0013cda:	53                   	push   ebx
c0013cdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cdf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ce3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ce7:	52                   	push   edx
c0013ce8:	52                   	push   edx
c0013ce9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cef:	56                   	push   esi
c0013cf0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	89 f8                	mov    eax,edi
c0013cf8:	84 c0                	test   al,al
c0013cfa:	74 1f                	je     c0013d1b <Buzzer::beep(int, int, bool)+0x43>
c0013cfc:	50                   	push   eax
c0013cfd:	50                   	push   eax
c0013cfe:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d04:	99                   	cdq    
c0013d05:	52                   	push   edx
c0013d06:	50                   	push   eax
c0013d07:	e8 75 aa 00 00       	call   c001e781 <nanoSleep(unsigned long long)>
c0013d0c:	83 c4 10             	add    esp,0x10
c0013d0f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d13:	5b                   	pop    ebx
c0013d14:	5e                   	pop    esi
c0013d15:	5f                   	pop    edi
c0013d16:	e9 67 ff ff ff       	jmp    c0013c82 <Buzzer::stop()>
c0013d1b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d21:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0013d26:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d2e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d32:	c7 44 24 14 95 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c95
c0013d3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d3e:	5b                   	pop    ebx
c0013d3f:	5e                   	pop    esi
c0013d40:	5f                   	pop    edi
c0013d41:	e9 f4 a4 00 00       	jmp    c001e23a <Process::createThread(void (*)(void*), void*, int)>

c0013d46 <User::loadClockSettings(int)>:
c0013d46:	53                   	push   ebx
c0013d47:	83 ec 14             	sub    esp,0x14
c0013d4a:	68 14 01 00 00       	push   0x114
c0013d4f:	e8 c0 bb ff ff       	call   c000f914 <malloc>
c0013d54:	83 c4 0c             	add    esp,0xc
c0013d57:	89 c3                	mov    ebx,eax
c0013d59:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c0013d5f:	68 70 b4 02 c0       	push   0xc002b470
c0013d64:	50                   	push   eax
c0013d65:	e8 c0 f6 ff ff       	call   c001342a <File::File(char const*, Process*)>
c0013d6a:	58                   	pop    eax
c0013d6b:	5a                   	pop    edx
c0013d6c:	6a 01                	push   0x1
c0013d6e:	53                   	push   ebx
c0013d6f:	e8 1a f7 ff ff       	call   c001348e <File::open(FileOpenMode)>
c0013d74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d77:	e8 70 f7 ff ff       	call   c00134ec <File::close()>
c0013d7c:	83 c4 10             	add    esp,0x10
c0013d7f:	85 db                	test   ebx,ebx
c0013d81:	74 0f                	je     c0013d92 <User::loadClockSettings(int)+0x4c>
c0013d83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d85:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d8c:	83 c4 08             	add    esp,0x8
c0013d8f:	5b                   	pop    ebx
c0013d90:	ff e0                	jmp    eax
c0013d92:	83 c4 08             	add    esp,0x8
c0013d95:	5b                   	pop    ebx
c0013d96:	c3                   	ret    
c0013d97:	90                   	nop

c0013d98 <Clock::Clock(char const*)>:
c0013d98:	83 ec 0c             	sub    esp,0xc
c0013d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9f:	83 ec 08             	sub    esp,0x8
c0013da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da6:	50                   	push   eax
c0013da7:	e8 44 07 00 00       	call   c00144f0 <Device::Device(char const*)>
c0013dac:	83 c4 10             	add    esp,0x10
c0013daf:	ba 98 b4 02 c0       	mov    edx,0xc002b498
c0013db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db8:	89 10                	mov    DWORD PTR [eax],edx
c0013dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dbe:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dc8:	90                   	nop
c0013dc9:	83 c4 0c             	add    esp,0xc
c0013dcc:	c3                   	ret    
c0013dcd:	90                   	nop

c0013dce <Clock::~Clock()>:
c0013dce:	83 ec 0c             	sub    esp,0xc
c0013dd1:	ba 98 b4 02 c0       	mov    edx,0xc002b498
c0013dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dda:	89 10                	mov    DWORD PTR [eax],edx
c0013ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de0:	83 ec 0c             	sub    esp,0xc
c0013de3:	50                   	push   eax
c0013de4:	e8 e9 03 00 00       	call   c00141d2 <Device::~Device()>
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	90                   	nop
c0013ded:	83 c4 0c             	add    esp,0xc
c0013df0:	c3                   	ret    
c0013df1:	90                   	nop

c0013df2 <Clock::~Clock()>:
c0013df2:	83 ec 0c             	sub    esp,0xc
c0013df5:	83 ec 0c             	sub    esp,0xc
c0013df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dfc:	e8 cd ff ff ff       	call   c0013dce <Clock::~Clock()>
c0013e01:	83 c4 10             	add    esp,0x10
c0013e04:	83 ec 08             	sub    esp,0x8
c0013e07:	68 58 01 00 00       	push   0x158
c0013e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e10:	e8 d6 ef ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0013e15:	83 c4 10             	add    esp,0x10
c0013e18:	83 c4 0c             	add    esp,0xc
c0013e1b:	c3                   	ret    

c0013e1c <Clock::timeInSecondsLocal()>:
c0013e1c:	53                   	push   ebx
c0013e1d:	83 ec 14             	sub    esp,0x14
c0013e20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e24:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e26:	50                   	push   eax
c0013e27:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e2a:	0f b6 0d bc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efbc
c0013e31:	03 0d c0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efc0
c0013e37:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e3d:	89 cb                	mov    ebx,ecx
c0013e3f:	c1 fb 1f             	sar    ebx,0x1f
c0013e42:	01 c8                	add    eax,ecx
c0013e44:	11 da                	adc    edx,ebx
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	31 c9                	xor    ecx,ecx
c0013e4b:	80 3d bd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efbd,0x0
c0013e52:	74 05                	je     c0013e59 <Clock::timeInSecondsLocal()+0x3d>
c0013e54:	b9 08 07 00 00       	mov    ecx,0x708
c0013e59:	31 db                	xor    ebx,ebx
c0013e5b:	01 c8                	add    eax,ecx
c0013e5d:	11 da                	adc    edx,ebx
c0013e5f:	83 c4 08             	add    esp,0x8
c0013e62:	5b                   	pop    ebx
c0013e63:	c3                   	ret    

c0013e64 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e64:	57                   	push   edi
c0013e65:	56                   	push   esi
c0013e66:	53                   	push   ebx
c0013e67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e71:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e75:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e78:	0f b6 05 bc ef 02 c0 	movzx  eax,BYTE PTR ds:0xc002efbc
c0013e7f:	03 05 c0 ef 02 c0    	add    eax,DWORD PTR ds:0xc002efc0
c0013e85:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e8b:	99                   	cdq    
c0013e8c:	29 c6                	sub    esi,eax
c0013e8e:	19 d7                	sbb    edi,edx
c0013e90:	89 f0                	mov    eax,esi
c0013e92:	89 fa                	mov    edx,edi
c0013e94:	31 f6                	xor    esi,esi
c0013e96:	80 3d bd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efbd,0x0
c0013e9d:	74 05                	je     c0013ea4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e9f:	be 08 07 00 00       	mov    esi,0x708
c0013ea4:	31 ff                	xor    edi,edi
c0013ea6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013eaa:	29 f0                	sub    eax,esi
c0013eac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eb0:	19 fa                	sbb    edx,edi
c0013eb2:	89 d8                	mov    eax,ebx
c0013eb4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013eb8:	5b                   	pop    ebx
c0013eb9:	5e                   	pop    esi
c0013eba:	5f                   	pop    edi
c0013ebb:	ff e0                	jmp    eax

c0013ebd <datetimeToSeconds(datetime_t)>:
c0013ebd:	55                   	push   ebp
c0013ebe:	57                   	push   edi
c0013ebf:	56                   	push   esi
c0013ec0:	53                   	push   ebx
c0013ec1:	83 ec 14             	sub    esp,0x14
c0013ec4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ec8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ecc:	89 d3                	mov    ebx,edx
c0013ece:	0f b6 c6             	movzx  eax,dh
c0013ed1:	c1 eb 10             	shr    ebx,0x10
c0013ed4:	48                   	dec    eax
c0013ed5:	66 81 eb 6c 07       	sub    bx,0x76c
c0013eda:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ede:	0f b6 f5             	movzx  esi,ch
c0013ee1:	89 cf                	mov    edi,ecx
c0013ee3:	6b f6 3c             	imul   esi,esi,0x3c
c0013ee6:	c1 ef 10             	shr    edi,0x10
c0013ee9:	0f b6 c9             	movzx  ecx,cl
c0013eec:	89 f8                	mov    eax,edi
c0013eee:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ef4:	0f b6 f8             	movzx  edi,al
c0013ef7:	0f b6 d2             	movzx  edx,dl
c0013efa:	01 fe                	add    esi,edi
c0013efc:	01 f1                	add    ecx,esi
c0013efe:	0f b7 f3             	movzx  esi,bx
c0013f01:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f05:	c1 f9 1f             	sar    ecx,0x1f
c0013f08:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f0d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f11:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f16:	8b 0c 8d e0 b4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b20]
c0013f1d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f21:	76 29                	jbe    c0013f4c <datetimeToSeconds(datetime_t)+0x8f>
c0013f23:	f6 c3 03             	test   bl,0x3
c0013f26:	75 24                	jne    c0013f4c <datetimeToSeconds(datetime_t)+0x8f>
c0013f28:	31 d2                	xor    edx,edx
c0013f2a:	bf 64 00 00 00       	mov    edi,0x64
c0013f2f:	89 d8                	mov    eax,ebx
c0013f31:	66 f7 f7             	div    di
c0013f34:	66 85 d2             	test   dx,dx
c0013f37:	75 12                	jne    c0013f4b <datetimeToSeconds(datetime_t)+0x8e>
c0013f39:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f3f:	bf 90 01 00 00       	mov    edi,0x190
c0013f44:	99                   	cdq    
c0013f45:	f7 ff                	idiv   edi
c0013f47:	85 d2                	test   edx,edx
c0013f49:	75 01                	jne    c0013f4c <datetimeToSeconds(datetime_t)+0x8f>
c0013f4b:	41                   	inc    ecx
c0013f4c:	66 83 fb 46          	cmp    bx,0x46
c0013f50:	76 45                	jbe    c0013f97 <datetimeToSeconds(datetime_t)+0xda>
c0013f52:	bb 46 00 00 00       	mov    ebx,0x46
c0013f57:	bf 64 00 00 00       	mov    edi,0x64
c0013f5c:	bd 90 01 00 00       	mov    ebp,0x190
c0013f61:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f66:	f6 c3 03             	test   bl,0x3
c0013f69:	75 23                	jne    c0013f8e <datetimeToSeconds(datetime_t)+0xd1>
c0013f6b:	89 d8                	mov    eax,ebx
c0013f6d:	99                   	cdq    
c0013f6e:	f7 ff                	idiv   edi
c0013f70:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f75:	85 d2                	test   edx,edx
c0013f77:	75 15                	jne    c0013f8e <datetimeToSeconds(datetime_t)+0xd1>
c0013f79:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f7f:	99                   	cdq    
c0013f80:	f7 fd                	idiv   ebp
c0013f82:	83 fa 01             	cmp    edx,0x1
c0013f85:	19 c0                	sbb    eax,eax
c0013f87:	f7 d0                	not    eax
c0013f89:	05 6e 01 00 00       	add    eax,0x16e
c0013f8e:	01 c1                	add    ecx,eax
c0013f90:	43                   	inc    ebx
c0013f91:	39 f3                	cmp    ebx,esi
c0013f93:	7c cc                	jl     c0013f61 <datetimeToSeconds(datetime_t)+0xa4>
c0013f95:	eb 35                	jmp    c0013fcc <datetimeToSeconds(datetime_t)+0x10f>
c0013f97:	74 33                	je     c0013fcc <datetimeToSeconds(datetime_t)+0x10f>
c0013f99:	b8 45 00 00 00       	mov    eax,0x45
c0013f9e:	89 c2                	mov    edx,eax
c0013fa0:	83 e2 03             	and    edx,0x3
c0013fa3:	39 f0                	cmp    eax,esi
c0013fa5:	7e 0f                	jle    c0013fb6 <datetimeToSeconds(datetime_t)+0xf9>
c0013fa7:	83 fa 01             	cmp    edx,0x1
c0013faa:	19 d2                	sbb    edx,edx
c0013fac:	48                   	dec    eax
c0013fad:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fb4:	eb e8                	jmp    c0013f9e <datetimeToSeconds(datetime_t)+0xe1>
c0013fb6:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fbb:	85 d2                	test   edx,edx
c0013fbd:	75 0b                	jne    c0013fca <datetimeToSeconds(datetime_t)+0x10d>
c0013fbf:	66 83 fb 01          	cmp    bx,0x1
c0013fc3:	19 c0                	sbb    eax,eax
c0013fc5:	05 6e 01 00 00       	add    eax,0x16e
c0013fca:	29 c1                	sub    ecx,eax
c0013fcc:	b8 80 51 01 00       	mov    eax,0x15180
c0013fd1:	f7 e9                	imul   ecx
c0013fd3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fd7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013fdb:	83 c4 14             	add    esp,0x14
c0013fde:	5b                   	pop    ebx
c0013fdf:	5e                   	pop    esi
c0013fe0:	5f                   	pop    edi
c0013fe1:	5d                   	pop    ebp
c0013fe2:	c3                   	ret    
c0013fe3:	90                   	nop

c0013fe4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fe4:	57                   	push   edi
c0013fe5:	56                   	push   esi
c0013fe6:	53                   	push   ebx
c0013fe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013feb:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fed:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ff4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ff8:	e8 c0 fe ff ff       	call   c0013ebd <datetimeToSeconds(datetime_t)>
c0013ffd:	59                   	pop    ecx
c0013ffe:	0f b6 0d bc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efbc
c0014005:	5b                   	pop    ebx
c0014006:	03 0d c0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efc0
c001400c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014012:	89 cb                	mov    ebx,ecx
c0014014:	c1 fb 1f             	sar    ebx,0x1f
c0014017:	29 c8                	sub    eax,ecx
c0014019:	19 da                	sbb    edx,ebx
c001401b:	31 c9                	xor    ecx,ecx
c001401d:	80 3d bd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efbd,0x0
c0014024:	74 05                	je     c001402b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014026:	b9 08 07 00 00       	mov    ecx,0x708
c001402b:	31 db                	xor    ebx,ebx
c001402d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014031:	29 c8                	sub    eax,ecx
c0014033:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014037:	19 da                	sbb    edx,ebx
c0014039:	89 f8                	mov    eax,edi
c001403b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001403f:	5b                   	pop    ebx
c0014040:	5e                   	pop    esi
c0014041:	5f                   	pop    edi
c0014042:	ff e0                	jmp    eax

c0014044 <secondsToDatetime(unsigned long long)>:
c0014044:	55                   	push   ebp
c0014045:	57                   	push   edi
c0014046:	56                   	push   esi
c0014047:	53                   	push   ebx
c0014048:	83 ec 1c             	sub    esp,0x1c
c001404b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001404f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014053:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014057:	6a 00                	push   0x0
c0014059:	68 80 51 01 00       	push   0x15180
c001405e:	55                   	push   ebp
c001405f:	57                   	push   edi
c0014060:	e8 3f 31 01 00       	call   c00271a4 <__udivdi3>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001406e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014072:	6a 00                	push   0x0
c0014074:	68 80 51 01 00       	push   0x15180
c0014079:	55                   	push   ebp
c001407a:	57                   	push   edi
c001407b:	bf 10 0e 00 00       	mov    edi,0xe10
c0014080:	e8 1f 32 01 00       	call   c00272a4 <__umoddi3>
c0014085:	83 c4 10             	add    esp,0x10
c0014088:	99                   	cdq    
c0014089:	f7 ff                	idiv   edi
c001408b:	bf 3c 00 00 00       	mov    edi,0x3c
c0014090:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014093:	89 d0                	mov    eax,edx
c0014095:	99                   	cdq    
c0014096:	f7 ff                	idiv   edi
c0014098:	85 db                	test   ebx,ebx
c001409a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001409d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140a0:	79 11                	jns    c00140b3 <secondsToDatetime(unsigned long long)+0x6f>
c00140a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140a6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140ac:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140b1:	eb 07                	jmp    c00140ba <secondsToDatetime(unsigned long long)+0x76>
c00140b3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140b8:	89 d8                	mov    eax,ebx
c00140ba:	bf b4 05 00 00       	mov    edi,0x5b4
c00140bf:	99                   	cdq    
c00140c0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140c5:	f7 f9                	idiv   ecx
c00140c7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140d0:	31 d2                	xor    edx,edx
c00140d2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140da:	01 c3                	add    ebx,eax
c00140dc:	89 d8                	mov    eax,ebx
c00140de:	f7 f1                	div    ecx
c00140e0:	31 d2                	xor    edx,edx
c00140e2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140e5:	89 d8                	mov    eax,ebx
c00140e7:	f7 f7                	div    edi
c00140e9:	31 d2                	xor    edx,edx
c00140eb:	29 c1                	sub    ecx,eax
c00140ed:	89 d8                	mov    eax,ebx
c00140ef:	f7 f5                	div    ebp
c00140f1:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140f6:	29 c1                	sub    ecx,eax
c00140f8:	31 d2                	xor    edx,edx
c00140fa:	89 c8                	mov    eax,ecx
c00140fc:	f7 f5                	div    ebp
c00140fe:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014107:	31 d2                	xor    edx,edx
c0014109:	89 c8                	mov    eax,ecx
c001410b:	f7 f5                	div    ebp
c001410d:	31 d2                	xor    edx,edx
c001410f:	01 c3                	add    ebx,eax
c0014111:	89 c8                	mov    eax,ecx
c0014113:	f7 f7                	div    edi
c0014115:	bf 99 00 00 00       	mov    edi,0x99
c001411a:	29 c3                	sub    ebx,eax
c001411c:	31 d2                	xor    edx,edx
c001411e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014126:	29 c3                	sub    ebx,eax
c0014128:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001412b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001412e:	bb 05 00 00 00       	mov    ebx,0x5
c0014133:	83 c1 02             	add    ecx,0x2
c0014136:	89 c8                	mov    eax,ecx
c0014138:	f7 f7                	div    edi
c001413a:	31 d2                	xor    edx,edx
c001413c:	89 c7                	mov    edi,eax
c001413e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014144:	83 c0 02             	add    eax,0x2
c0014147:	f7 f3                	div    ebx
c0014149:	89 eb                	mov    ebx,ebp
c001414b:	29 c3                	sub    ebx,eax
c001414d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014153:	88 1e                	mov    BYTE PTR [esi],bl
c0014155:	19 c0                	sbb    eax,eax
c0014157:	31 d2                	xor    edx,edx
c0014159:	83 e0 0c             	and    eax,0xc
c001415c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014160:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014168:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001416c:	83 f9 01             	cmp    ecx,0x1
c001416f:	0f 96 c2             	setbe  dl
c0014172:	41                   	inc    ecx
c0014173:	01 d0                	add    eax,edx
c0014175:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014178:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001417c:	83 c4 1c             	add    esp,0x1c
c001417f:	89 f0                	mov    eax,esi
c0014181:	5b                   	pop    ebx
c0014182:	5e                   	pop    esi
c0014183:	5f                   	pop    edi
c0014184:	5d                   	pop    ebp
c0014185:	c2 04 00             	ret    0x4

c0014188 <Clock::timeInDatetimeLocal()>:
c0014188:	53                   	push   ebx
c0014189:	83 ec 14             	sub    esp,0x14
c001418c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014190:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014194:	e8 83 fc ff ff       	call   c0013e1c <Clock::timeInSecondsLocal()>
c0014199:	83 c4 0c             	add    esp,0xc
c001419c:	52                   	push   edx
c001419d:	50                   	push   eax
c001419e:	53                   	push   ebx
c001419f:	e8 a0 fe ff ff       	call   c0014044 <secondsToDatetime(unsigned long long)>
c00141a4:	89 d8                	mov    eax,ebx
c00141a6:	83 c4 14             	add    esp,0x14
c00141a9:	5b                   	pop    ebx
c00141aa:	c2 04 00             	ret    0x4
c00141ad:	90                   	nop

c00141ae <Device::hibernate()>:
c00141ae:	c3                   	ret    
c00141af:	90                   	nop

c00141b0 <Device::wake()>:
c00141b0:	c3                   	ret    
c00141b1:	90                   	nop

c00141b2 <Device::detect()>:
c00141b2:	c3                   	ret    
c00141b3:	90                   	nop

c00141b4 <Device::disableLegacy()>:
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <Device::powerSaving(PowerSavingLevel)>:
c00141b6:	c3                   	ret    
c00141b7:	90                   	nop

c00141b8 <DriverlessDevice::close(int, int, void*)>:
c00141b8:	31 c0                	xor    eax,eax
c00141ba:	c3                   	ret    
c00141bb:	90                   	nop

c00141bc <DriverlessDevice::detect()>:
c00141bc:	c3                   	ret    
c00141bd:	90                   	nop

c00141be <DriverlessDevice::open(int, int, void*)>:
c00141be:	83 ec 18             	sub    esp,0x18
c00141c1:	68 10 b5 02 c0       	push   0xc002b510
c00141c6:	e8 bc 66 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00141cb:	83 c8 ff             	or     eax,0xffffffff
c00141ce:	83 c4 1c             	add    esp,0x1c
c00141d1:	c3                   	ret    

c00141d2 <Device::~Device()>:
c00141d2:	ba 38 b5 02 c0       	mov    edx,0xc002b538
c00141d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141db:	89 10                	mov    DWORD PTR [eax],edx
c00141dd:	90                   	nop
c00141de:	c3                   	ret    
c00141df:	90                   	nop

c00141e0 <Device::~Device()>:
c00141e0:	83 ec 0c             	sub    esp,0xc
c00141e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141e7:	e8 e6 ff ff ff       	call   c00141d2 <Device::~Device()>
c00141ec:	83 c4 04             	add    esp,0x4
c00141ef:	83 ec 08             	sub    esp,0x8
c00141f2:	68 58 01 00 00       	push   0x158
c00141f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141fb:	e8 eb eb ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0014200:	83 c4 10             	add    esp,0x10
c0014203:	83 c4 0c             	add    esp,0xc
c0014206:	c3                   	ret    
c0014207:	90                   	nop

c0014208 <Device::findAndLoadDriver()>:
c0014208:	c3                   	ret    
c0014209:	90                   	nop

c001420a <Device::preOpenPCI(PCIDeviceInfo)>:
c001420a:	57                   	push   edi
c001420b:	b9 09 00 00 00       	mov    ecx,0x9
c0014210:	56                   	push   esi
c0014211:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014215:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014219:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014223:	81 c7 18 01 00 00    	add    edi,0x118
c0014229:	fc                   	cld    
c001422a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001422c:	5e                   	pop    esi
c001422d:	5f                   	pop    edi
c001422e:	c3                   	ret    
c001422f:	90                   	nop

c0014230 <Device::preOpenACPI(void*, char*, char*)>:
c0014230:	56                   	push   esi
c0014231:	53                   	push   ebx
c0014232:	83 ec 08             	sub    esp,0x8
c0014235:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014239:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001423d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014247:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001424b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014251:	6a 1e                	push   0x1e
c0014253:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014259:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001425d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014263:	50                   	push   eax
c0014264:	e8 ff c4 fe ff       	call   c0000768 <memcpy>
c0014269:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001426d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014271:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014279:	83 c4 14             	add    esp,0x14
c001427c:	5b                   	pop    ebx
c001427d:	5e                   	pop    esi
c001427e:	e9 e5 c4 fe ff       	jmp    c0000768 <memcpy>
c0014283:	90                   	nop

c0014284 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014288:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001428d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014294:	75 0b                	jne    c00142a1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014296:	8b 00                	mov    eax,DWORD PTR [eax]
c0014298:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001429c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001429f:	eb 1e                	jmp    c00142bf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142a1:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00142a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142ac:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142b2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142b4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142bc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142bf:	ff e0                	jmp    eax
c00142c1:	90                   	nop

c00142c2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142c6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142cb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142d2:	75 0b                	jne    c00142df <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00142d6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142da:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142dd:	eb 1e                	jmp    c00142fd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142df:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00142e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142ea:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142f2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142fa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142fd:	ff e0                	jmp    eax
c00142ff:	90                   	nop

c0014300 <Device::addChild(Device*)>:
c0014300:	53                   	push   ebx
c0014301:	83 ec 08             	sub    esp,0x8
c0014304:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001430c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014312:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014318:	8b 13                	mov    edx,DWORD PTR [ebx]
c001431a:	85 d2                	test   edx,edx
c001431c:	74 04                	je     c0014322 <Device::addChild(Device*)+0x22>
c001431e:	89 d3                	mov    ebx,edx
c0014320:	eb f6                	jmp    c0014318 <Device::addChild(Device*)+0x18>
c0014322:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014325:	83 ec 0c             	sub    esp,0xc
c0014328:	6a 08                	push   0x8
c001432a:	e8 e5 b5 ff ff       	call   c000f914 <malloc>
c001432f:	89 03                	mov    DWORD PTR [ebx],eax
c0014331:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014337:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001433e:	83 c4 18             	add    esp,0x18
c0014341:	5b                   	pop    ebx
c0014342:	c3                   	ret    
c0014343:	90                   	nop

c0014344 <Device::removeAllChildren()>:
c0014344:	56                   	push   esi
c0014345:	53                   	push   ebx
c0014346:	52                   	push   edx
c0014347:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001434b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014351:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014354:	74 17                	je     c001436d <Device::removeAllChildren()+0x29>
c0014356:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014359:	85 c0                	test   eax,eax
c001435b:	74 0c                	je     c0014369 <Device::removeAllChildren()+0x25>
c001435d:	83 ec 0c             	sub    esp,0xc
c0014360:	8b 10                	mov    edx,DWORD PTR [eax]
c0014362:	50                   	push   eax
c0014363:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014366:	83 c4 10             	add    esp,0x10
c0014369:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001436b:	eb e4                	jmp    c0014351 <Device::removeAllChildren()+0xd>
c001436d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014373:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014379:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001437f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014386:	58                   	pop    eax
c0014387:	5b                   	pop    ebx
c0014388:	5e                   	pop    esi
c0014389:	c3                   	ret    

c001438a <Device::hibernateAll()>:
c001438a:	53                   	push   ebx
c001438b:	83 ec 14             	sub    esp,0x14
c001438e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014392:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014394:	53                   	push   ebx
c0014395:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014398:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143a4:	74 0f                	je     c00143b5 <Device::hibernateAll()+0x2b>
c00143a6:	83 ec 0c             	sub    esp,0xc
c00143a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143ac:	e8 d9 ff ff ff       	call   c001438a <Device::hibernateAll()>
c00143b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143b3:	eb e9                	jmp    c001439e <Device::hibernateAll()+0x14>
c00143b5:	83 c4 08             	add    esp,0x8
c00143b8:	5b                   	pop    ebx
c00143b9:	c3                   	ret    

c00143ba <Device::wakeAll()>:
c00143ba:	53                   	push   ebx
c00143bb:	83 ec 14             	sub    esp,0x14
c00143be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143c4:	53                   	push   ebx
c00143c5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143c8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143ce:	83 c4 10             	add    esp,0x10
c00143d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143d4:	74 0f                	je     c00143e5 <Device::wakeAll()+0x2b>
c00143d6:	83 ec 0c             	sub    esp,0xc
c00143d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143dc:	e8 d9 ff ff ff       	call   c00143ba <Device::wakeAll()>
c00143e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143e3:	eb e9                	jmp    c00143ce <Device::wakeAll()+0x14>
c00143e5:	83 c4 08             	add    esp,0x8
c00143e8:	5b                   	pop    ebx
c00143e9:	c3                   	ret    

c00143ea <Device::detectAll()>:
c00143ea:	53                   	push   ebx
c00143eb:	83 ec 14             	sub    esp,0x14
c00143ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143f4:	53                   	push   ebx
c00143f5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143fe:	83 c4 10             	add    esp,0x10
c0014401:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014404:	74 0f                	je     c0014415 <Device::detectAll()+0x2b>
c0014406:	83 ec 0c             	sub    esp,0xc
c0014409:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001440c:	e8 d9 ff ff ff       	call   c00143ea <Device::detectAll()>
c0014411:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014413:	eb e9                	jmp    c00143fe <Device::detectAll()+0x14>
c0014415:	83 c4 08             	add    esp,0x8
c0014418:	5b                   	pop    ebx
c0014419:	c3                   	ret    

c001441a <Device::disableLegacyAll()>:
c001441a:	53                   	push   ebx
c001441b:	83 ec 14             	sub    esp,0x14
c001441e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014422:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014424:	53                   	push   ebx
c0014425:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014428:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001442e:	83 c4 10             	add    esp,0x10
c0014431:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014434:	74 0f                	je     c0014445 <Device::disableLegacyAll()+0x2b>
c0014436:	83 ec 0c             	sub    esp,0xc
c0014439:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001443c:	e8 d9 ff ff ff       	call   c001441a <Device::disableLegacyAll()>
c0014441:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014443:	eb e9                	jmp    c001442e <Device::disableLegacyAll()+0x14>
c0014445:	83 c4 08             	add    esp,0x8
c0014448:	5b                   	pop    ebx
c0014449:	c3                   	ret    

c001444a <Device::loadDriversForAll()>:
c001444a:	53                   	push   ebx
c001444b:	83 ec 08             	sub    esp,0x8
c001444e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014452:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014458:	8b 18                	mov    ebx,DWORD PTR [eax]
c001445a:	85 db                	test   ebx,ebx
c001445c:	74 12                	je     c0014470 <Device::loadDriversForAll()+0x26>
c001445e:	83 ec 0c             	sub    esp,0xc
c0014461:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014464:	e8 e1 ff ff ff       	call   c001444a <Device::loadDriversForAll()>
c0014469:	83 c4 10             	add    esp,0x10
c001446c:	89 d8                	mov    eax,ebx
c001446e:	eb e8                	jmp    c0014458 <Device::loadDriversForAll()+0xe>
c0014470:	83 c4 08             	add    esp,0x8
c0014473:	5b                   	pop    ebx
c0014474:	c3                   	ret    
c0014475:	90                   	nop

c0014476 <Device::closeAll()>:
c0014476:	53                   	push   ebx
c0014477:	83 ec 08             	sub    esp,0x8
c001447a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001447e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014480:	6a 00                	push   0x0
c0014482:	6a 00                	push   0x0
c0014484:	6a 00                	push   0x0
c0014486:	53                   	push   ebx
c0014487:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001448a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014496:	74 0f                	je     c00144a7 <Device::closeAll()+0x31>
c0014498:	83 ec 0c             	sub    esp,0xc
c001449b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001449e:	e8 d3 ff ff ff       	call   c0014476 <Device::closeAll()>
c00144a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144a5:	eb e9                	jmp    c0014490 <Device::closeAll()+0x1a>
c00144a7:	83 c4 08             	add    esp,0x8
c00144aa:	5b                   	pop    ebx
c00144ab:	c3                   	ret    

c00144ac <Device::powerSavingAll(PowerSavingLevel)>:
c00144ac:	56                   	push   esi
c00144ad:	53                   	push   ebx
c00144ae:	83 ec 0c             	sub    esp,0xc
c00144b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144b5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144bb:	56                   	push   esi
c00144bc:	53                   	push   ebx
c00144bd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c6:	83 c4 10             	add    esp,0x10
c00144c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144cc:	74 0f                	je     c00144dd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144ce:	52                   	push   edx
c00144cf:	52                   	push   edx
c00144d0:	56                   	push   esi
c00144d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144d4:	e8 d3 ff ff ff       	call   c00144ac <Device::powerSavingAll(PowerSavingLevel)>
c00144d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144db:	eb e9                	jmp    c00144c6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144dd:	58                   	pop    eax
c00144de:	5b                   	pop    ebx
c00144df:	5e                   	pop    esi
c00144e0:	c3                   	ret    
c00144e1:	90                   	nop

c00144e2 <Device::setName(char const*)>:
c00144e2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144ea:	e9 4d c3 fe ff       	jmp    c000083c <strcpy>
c00144ef:	90                   	nop

c00144f0 <Device::Device(char const*)>:
c00144f0:	83 ec 1c             	sub    esp,0x1c
c00144f3:	ba 38 b5 02 c0       	mov    edx,0xc002b538
c00144f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fc:	89 10                	mov    DWORD PTR [eax],edx
c00144fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014502:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001450c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014510:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001451a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001452c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014536:	83 ec 08             	sub    esp,0x8
c0014539:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001453d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014541:	e8 9c ff ff ff       	call   c00144e2 <Device::setName(char const*)>
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014551:	83 ec 0c             	sub    esp,0xc
c0014554:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014558:	e8 b7 b3 ff ff       	call   c000f914 <malloc>
c001455d:	83 c4 10             	add    esp,0x10
c0014560:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014566:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001456d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014571:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014581:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014591:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ce:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145dc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00145e6:	90                   	nop
c00145e7:	83 c4 1c             	add    esp,0x1c
c00145ea:	c3                   	ret    
c00145eb:	90                   	nop

c00145ec <Device::getName()>:
c00145ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145f0:	05 d0 00 00 00       	add    eax,0xd0
c00145f5:	c3                   	ret    

c00145f6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145f6:	83 ec 0c             	sub    esp,0xc
c00145f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145fd:	83 ec 08             	sub    esp,0x8
c0014600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014604:	50                   	push   eax
c0014605:	e8 e6 fe ff ff       	call   c00144f0 <Device::Device(char const*)>
c001460a:	83 c4 10             	add    esp,0x10
c001460d:	ba 64 b5 02 c0       	mov    edx,0xc002b564
c0014612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014616:	89 10                	mov    DWORD PTR [eax],edx
c0014618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014626:	90                   	nop
c0014627:	83 c4 0c             	add    esp,0xc
c001462a:	c3                   	ret    
c001462b:	90                   	nop

c001462c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001462c:	57                   	push   edi
c001462d:	56                   	push   esi
c001462e:	53                   	push   ebx
c001462f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014637:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001463b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014641:	75 0c                	jne    c001464f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014643:	52                   	push   edx
c0014644:	52                   	push   edx
c0014645:	53                   	push   ebx
c0014646:	56                   	push   esi
c0014647:	e8 aa 4a 01 00       	call   c00290f6 <LinkedList<Device>::addElement(Device*)>
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014655:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014658:	74 12                	je     c001466c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001465a:	50                   	push   eax
c001465b:	57                   	push   edi
c001465c:	56                   	push   esi
c001465d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014660:	e8 c7 ff ff ff       	call   c001462c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014665:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014667:	83 c4 10             	add    esp,0x10
c001466a:	eb e9                	jmp    c0014655 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001466c:	5b                   	pop    ebx
c001466d:	5e                   	pop    esi
c001466e:	5f                   	pop    edi
c001466f:	c3                   	ret    

c0014670 <getDevicesOfType(DeviceType)>:
c0014670:	53                   	push   ebx
c0014671:	83 ec 14             	sub    esp,0x14
c0014674:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014678:	53                   	push   ebx
c0014679:	e8 54 4b 01 00       	call   c00291d2 <LinkedList<Device>::LinkedList()>
c001467e:	83 c4 0c             	add    esp,0xc
c0014681:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014685:	53                   	push   ebx
c0014686:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c001468c:	e8 9b ff ff ff       	call   c001462c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014691:	89 d8                	mov    eax,ebx
c0014693:	83 c4 18             	add    esp,0x18
c0014696:	5b                   	pop    ebx
c0014697:	c2 04 00             	ret    0x4

c001469a <HardDiskController::HardDiskController(char const*)>:
c001469a:	83 ec 0c             	sub    esp,0xc
c001469d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a1:	83 ec 08             	sub    esp,0x8
c00146a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a8:	50                   	push   eax
c00146a9:	e8 42 fe ff ff       	call   c00144f0 <Device::Device(char const*)>
c00146ae:	83 c4 10             	add    esp,0x10
c00146b1:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c00146b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ba:	89 10                	mov    DWORD PTR [eax],edx
c00146bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146ca:	90                   	nop
c00146cb:	83 c4 0c             	add    esp,0xc
c00146ce:	c3                   	ret    
c00146cf:	90                   	nop

c00146d0 <HardDiskController::~HardDiskController()>:
c00146d0:	83 ec 0c             	sub    esp,0xc
c00146d3:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c00146d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146dc:	89 10                	mov    DWORD PTR [eax],edx
c00146de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e2:	83 ec 0c             	sub    esp,0xc
c00146e5:	50                   	push   eax
c00146e6:	e8 e7 fa ff ff       	call   c00141d2 <Device::~Device()>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	90                   	nop
c00146ef:	83 c4 0c             	add    esp,0xc
c00146f2:	c3                   	ret    
c00146f3:	90                   	nop

c00146f4 <HardDiskController::~HardDiskController()>:
c00146f4:	83 ec 0c             	sub    esp,0xc
c00146f7:	83 ec 0c             	sub    esp,0xc
c00146fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146fe:	e8 cd ff ff ff       	call   c00146d0 <HardDiskController::~HardDiskController()>
c0014703:	83 c4 10             	add    esp,0x10
c0014706:	83 ec 08             	sub    esp,0x8
c0014709:	68 58 01 00 00       	push   0x158
c001470e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014712:	e8 d4 e6 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0014717:	83 c4 10             	add    esp,0x10
c001471a:	83 c4 0c             	add    esp,0xc
c001471d:	c3                   	ret    

c001471e <PhysicalDisk::eject()>:
c001471e:	83 ec 18             	sub    esp,0x18
c0014721:	68 b4 b5 02 c0       	push   0xc002b5b4
c0014726:	e8 a0 e7 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001472b:	83 c8 ff             	or     eax,0xffffffff
c001472e:	83 c4 1c             	add    esp,0x1c
c0014731:	c3                   	ret    

c0014732 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014732:	83 ec 0c             	sub    esp,0xc
c0014735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014739:	83 ec 08             	sub    esp,0x8
c001473c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014740:	50                   	push   eax
c0014741:	e8 aa fd ff ff       	call   c00144f0 <Device::Device(char const*)>
c0014746:	83 c4 10             	add    esp,0x10
c0014749:	ba e4 b5 02 c0       	mov    edx,0xc002b5e4
c001474e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014752:	89 10                	mov    DWORD PTR [eax],edx
c0014754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014758:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001475f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014763:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001476a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014780:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014794:	90                   	nop
c0014795:	83 c4 0c             	add    esp,0xc
c0014798:	c3                   	ret    
c0014799:	90                   	nop

c001479a <PhysicalDisk::startCache()>:
c001479a:	56                   	push   esi
c001479b:	53                   	push   ebx
c001479c:	83 ec 10             	sub    esp,0x10
c001479f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147a3:	6a 44                	push   0x44
c00147a5:	e8 6a b1 ff ff       	call   c000f914 <malloc>
c00147aa:	89 c6                	mov    esi,eax
c00147ac:	58                   	pop    eax
c00147ad:	5a                   	pop    edx
c00147ae:	53                   	push   ebx
c00147af:	56                   	push   esi
c00147b0:	e8 cf 28 00 00       	call   c0017084 <VCache::VCache(PhysicalDisk*)>
c00147b5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147bb:	83 c4 14             	add    esp,0x14
c00147be:	5b                   	pop    ebx
c00147bf:	5e                   	pop    esi
c00147c0:	c3                   	ret    
c00147c1:	90                   	nop

c00147c2 <PhysicalDisk::~PhysicalDisk()>:
c00147c2:	83 ec 0c             	sub    esp,0xc
c00147c5:	ba e4 b5 02 c0       	mov    edx,0xc002b5e4
c00147ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ce:	89 10                	mov    DWORD PTR [eax],edx
c00147d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d4:	83 ec 0c             	sub    esp,0xc
c00147d7:	50                   	push   eax
c00147d8:	e8 f5 f9 ff ff       	call   c00141d2 <Device::~Device()>
c00147dd:	83 c4 10             	add    esp,0x10
c00147e0:	90                   	nop
c00147e1:	83 c4 0c             	add    esp,0xc
c00147e4:	c3                   	ret    
c00147e5:	90                   	nop

c00147e6 <PhysicalDisk::~PhysicalDisk()>:
c00147e6:	83 ec 0c             	sub    esp,0xc
c00147e9:	83 ec 0c             	sub    esp,0xc
c00147ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f0:	e8 cd ff ff ff       	call   c00147c2 <PhysicalDisk::~PhysicalDisk()>
c00147f5:	83 c4 10             	add    esp,0x10
c00147f8:	83 ec 08             	sub    esp,0x8
c00147fb:	68 6c 01 00 00       	push   0x16c
c0014800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014804:	e8 e2 e5 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0014809:	83 c4 10             	add    esp,0x10
c001480c:	83 c4 0c             	add    esp,0xc
c001480f:	c3                   	ret    

c0014810 <FPU::FPU(char const*)>:
c0014810:	83 ec 0c             	sub    esp,0xc
c0014813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014817:	83 ec 08             	sub    esp,0x8
c001481a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001481e:	50                   	push   eax
c001481f:	e8 cc fc ff ff       	call   c00144f0 <Device::Device(char const*)>
c0014824:	83 c4 10             	add    esp,0x10
c0014827:	ba 28 b6 02 c0       	mov    edx,0xc002b628
c001482c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014830:	89 10                	mov    DWORD PTR [eax],edx
c0014832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014836:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014840:	90                   	nop
c0014841:	83 c4 0c             	add    esp,0xc
c0014844:	c3                   	ret    
c0014845:	90                   	nop

c0014846 <FPU::~FPU()>:
c0014846:	83 ec 0c             	sub    esp,0xc
c0014849:	ba 28 b6 02 c0       	mov    edx,0xc002b628
c001484e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014852:	89 10                	mov    DWORD PTR [eax],edx
c0014854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014858:	83 ec 0c             	sub    esp,0xc
c001485b:	50                   	push   eax
c001485c:	e8 71 f9 ff ff       	call   c00141d2 <Device::~Device()>
c0014861:	83 c4 10             	add    esp,0x10
c0014864:	90                   	nop
c0014865:	83 c4 0c             	add    esp,0xc
c0014868:	c3                   	ret    
c0014869:	90                   	nop

c001486a <FPU::~FPU()>:
c001486a:	83 ec 0c             	sub    esp,0xc
c001486d:	83 ec 0c             	sub    esp,0xc
c0014870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014874:	e8 cd ff ff ff       	call   c0014846 <FPU::~FPU()>
c0014879:	83 c4 10             	add    esp,0x10
c001487c:	83 ec 08             	sub    esp,0x8
c001487f:	68 58 01 00 00       	push   0x158
c0014884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014888:	e8 5e e5 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c001488d:	83 c4 10             	add    esp,0x10
c0014890:	83 c4 0c             	add    esp,0xc
c0014893:	c3                   	ret    

c0014894 <setupFPU()>:
c0014894:	53                   	push   ebx
c0014895:	83 ec 08             	sub    esp,0x8
c0014898:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c001489e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148a5:	74 19                	je     c00148c0 <setupFPU()+0x2c>
c00148a7:	83 ec 0c             	sub    esp,0xc
c00148aa:	68 58 01 00 00       	push   0x158
c00148af:	e8 60 b0 ff ff       	call   c000f914 <malloc>
c00148b4:	89 c3                	mov    ebx,eax
c00148b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b9:	e8 60 14 01 00       	call   c0025d1e <AVX::AVX()>
c00148be:	eb 5b                	jmp    c001491b <setupFPU()+0x87>
c00148c0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148c6:	84 c0                	test   al,al
c00148c8:	79 19                	jns    c00148e3 <setupFPU()+0x4f>
c00148ca:	83 ec 0c             	sub    esp,0xc
c00148cd:	68 58 01 00 00       	push   0x158
c00148d2:	e8 3d b0 ff ff       	call   c000f914 <malloc>
c00148d7:	89 c3                	mov    ebx,eax
c00148d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00148dc:	e8 63 15 01 00       	call   c0025e44 <SSE::SSE()>
c00148e1:	eb 38                	jmp    c001491b <setupFPU()+0x87>
c00148e3:	a8 20                	test   al,0x20
c00148e5:	74 19                	je     c0014900 <setupFPU()+0x6c>
c00148e7:	83 ec 0c             	sub    esp,0xc
c00148ea:	68 58 01 00 00       	push   0x158
c00148ef:	e8 20 b0 ff ff       	call   c000f914 <malloc>
c00148f4:	89 c3                	mov    ebx,eax
c00148f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00148f9:	e8 b0 14 01 00       	call   c0025dae <MMX::MMX()>
c00148fe:	eb 1b                	jmp    c001491b <setupFPU()+0x87>
c0014900:	a8 10                	test   al,0x10
c0014902:	74 1c                	je     c0014920 <setupFPU()+0x8c>
c0014904:	83 ec 0c             	sub    esp,0xc
c0014907:	68 58 01 00 00       	push   0x158
c001490c:	e8 03 b0 ff ff       	call   c000f914 <malloc>
c0014911:	89 c3                	mov    ebx,eax
c0014913:	89 04 24             	mov    DWORD PTR [esp],eax
c0014916:	e8 b7 15 01 00       	call   c0025ed2 <x87::x87()>
c001491b:	83 c4 10             	add    esp,0x10
c001491e:	eb 24                	jmp    c0014944 <setupFPU()+0xb0>
c0014920:	83 e0 ef             	and    eax,0xffffffef
c0014923:	83 ec 0c             	sub    esp,0xc
c0014926:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001492c:	68 14 b6 02 c0       	push   0xc002b614
c0014931:	e8 95 e5 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014936:	0f 20 c0             	mov    eax,cr0
c0014939:	83 c8 04             	or     eax,0x4
c001493c:	0f 22 c0             	mov    cr0,eax
c001493f:	31 db                	xor    ebx,ebx
c0014941:	83 c4 10             	add    esp,0x10
c0014944:	89 d8                	mov    eax,ebx
c0014946:	83 c4 08             	add    esp,0x8
c0014949:	5b                   	pop    ebx
c001494a:	c3                   	ret    
c001494b:	90                   	nop

c001494c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001494c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014950:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014954:	c1 e0 04             	shl    eax,0x4
c0014957:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001495b:	8d 50 10             	lea    edx,[eax+0x10]
c001495e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014964:	74 08                	je     c001496e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014966:	83 c0 04             	add    eax,0x4
c0014969:	39 d0                	cmp    eax,edx
c001496b:	75 f1                	jne    c001495e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001496d:	c3                   	ret    
c001496e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014978:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014982:	eb e2                	jmp    c0014966 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014984 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014984:	57                   	push   edi
c0014985:	31 c0                	xor    eax,eax
c0014987:	56                   	push   esi
c0014988:	53                   	push   ebx
c0014989:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001498d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014991:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014995:	89 da                	mov    edx,ebx
c0014997:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001499b:	c1 e2 04             	shl    edx,0x4
c001499e:	01 ca                	add    edx,ecx
c00149a0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149a8:	74 16                	je     c00149c0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149aa:	40                   	inc    eax
c00149ab:	83 f8 04             	cmp    eax,0x4
c00149ae:	75 f0                	jne    c00149a0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149b0:	c7 44 24 10 58 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b658
c00149b8:	5b                   	pop    ebx
c00149b9:	5e                   	pop    esi
c00149ba:	5f                   	pop    edi
c00149bb:	e9 c7 5e 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c00149c0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149c3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149c6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149cc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149d2:	5b                   	pop    ebx
c00149d3:	5e                   	pop    esi
c00149d4:	5f                   	pop    edi
c00149d5:	c3                   	ret    

c00149d6 <doubleFault(regs*, void*)>:
c00149d6:	55                   	push   ebp
c00149d7:	89 e5                	mov    ebp,esp
c00149d9:	83 ec 08             	sub    esp,0x8
c00149dc:	83 ec 0c             	sub    esp,0xc
c00149df:	68 93 b6 02 c0       	push   0xc002b693
c00149e4:	e8 9e 5e 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00149e9:	83 c4 10             	add    esp,0x10
c00149ec:	90                   	nop
c00149ed:	c9                   	leave  
c00149ee:	c3                   	ret    
c00149ef:	90                   	nop

c00149f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149f0:	56                   	push   esi
c00149f1:	53                   	push   ebx
c00149f2:	50                   	push   eax
c00149f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149fb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a00:	75 35                	jne    c0014a37 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a02:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a05:	31 d2                	xor    edx,edx
c0014a07:	89 c1                	mov    ecx,eax
c0014a09:	c1 e1 04             	shl    ecx,0x4
c0014a0c:	01 f1                	add    ecx,esi
c0014a0e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a16:	74 3e                	je     c0014a56 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a18:	42                   	inc    edx
c0014a19:	83 fa 04             	cmp    edx,0x4
c0014a1c:	75 f0                	jne    c0014a0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a1e:	83 ec 0c             	sub    esp,0xc
c0014a21:	68 d8 b6 02 c0       	push   0xc002b6d8
c0014a26:	e8 5c 5e 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0014a2b:	83 c4 10             	add    esp,0x10
c0014a2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a33:	5a                   	pop    edx
c0014a34:	5b                   	pop    ebx
c0014a35:	5e                   	pop    esi
c0014a36:	c3                   	ret    
c0014a37:	83 ec 0c             	sub    esp,0xc
c0014a3a:	56                   	push   esi
c0014a3b:	e8 ac fb ff ff       	call   c00145ec <Device::getName()>
c0014a40:	83 c4 10             	add    esp,0x10
c0014a43:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a46:	75 ba                	jne    c0014a02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a48:	83 fb 0f             	cmp    ebx,0xf
c0014a4b:	7f 29                	jg     c0014a76 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a4d:	0f b6 9b 80 e0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1f80]
c0014a54:	eb ac                	jmp    c0014a02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a56:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a5d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a60:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a6a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a70:	89 d8                	mov    eax,ebx
c0014a72:	5a                   	pop    edx
c0014a73:	5b                   	pop    ebx
c0014a74:	5e                   	pop    esi
c0014a75:	c3                   	ret    
c0014a76:	83 ec 0c             	sub    esp,0xc
c0014a79:	68 a0 b6 02 c0       	push   0xc002b6a0
c0014a7e:	e8 04 5e 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0014a83:	83 c4 10             	add    esp,0x10
c0014a86:	e9 77 ff ff ff       	jmp    c0014a02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a8b:	90                   	nop

c0014a8c <InterruptController::clearAllHandlers(int, bool)>:
c0014a8c:	56                   	push   esi
c0014a8d:	53                   	push   ebx
c0014a8e:	52                   	push   edx
c0014a8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a97:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a9c:	75 61                	jne    c0014aff <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a9e:	8d 46 20             	lea    eax,[esi+0x20]
c0014aa1:	c1 e6 04             	shl    esi,0x4
c0014aa4:	c1 e0 04             	shl    eax,0x4
c0014aa7:	01 de                	add    esi,ebx
c0014aa9:	01 d8                	add    eax,ebx
c0014aab:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014ab5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014abf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014ac9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014ad3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014add:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014ae7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014af1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014afb:	58                   	pop    eax
c0014afc:	5b                   	pop    ebx
c0014afd:	5e                   	pop    esi
c0014afe:	c3                   	ret    
c0014aff:	83 ec 0c             	sub    esp,0xc
c0014b02:	53                   	push   ebx
c0014b03:	e8 e4 fa ff ff       	call   c00145ec <Device::getName()>
c0014b08:	83 c4 10             	add    esp,0x10
c0014b0b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b0e:	75 8e                	jne    c0014a9e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b10:	83 fe 0f             	cmp    esi,0xf
c0014b13:	7f 09                	jg     c0014b1e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b15:	0f b6 b6 80 e0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1f80]
c0014b1c:	eb 80                	jmp    c0014a9e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b1e:	83 ec 0c             	sub    esp,0xc
c0014b21:	68 14 b7 02 c0       	push   0xc002b714
c0014b26:	e8 5c 5d 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0014b2b:	83 c4 10             	add    esp,0x10
c0014b2e:	e9 6b ff ff ff       	jmp    c0014a9e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b33:	90                   	nop

c0014b34 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b34:	56                   	push   esi
c0014b35:	53                   	push   ebx
c0014b36:	52                   	push   edx
c0014b37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b3f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b44:	75 3a                	jne    c0014b80 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b4a:	8d 50 20             	lea    edx,[eax+0x20]
c0014b4d:	c1 e2 04             	shl    edx,0x4
c0014b50:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b53:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b57:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b5d:	74 0b                	je     c0014b6a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b5f:	83 c0 04             	add    eax,0x4
c0014b62:	39 d0                	cmp    eax,edx
c0014b64:	75 f1                	jne    c0014b57 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b66:	58                   	pop    eax
c0014b67:	5b                   	pop    ebx
c0014b68:	5e                   	pop    esi
c0014b69:	c3                   	ret    
c0014b6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b74:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b7e:	eb df                	jmp    c0014b5f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b80:	83 ec 0c             	sub    esp,0xc
c0014b83:	56                   	push   esi
c0014b84:	e8 63 fa ff ff       	call   c00145ec <Device::getName()>
c0014b89:	83 c4 10             	add    esp,0x10
c0014b8c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b8f:	75 b5                	jne    c0014b46 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b91:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b96:	7f 11                	jg     c0014ba9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b9c:	0f b6 80 80 e0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1f80]
c0014ba3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ba7:	eb 9d                	jmp    c0014b46 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ba9:	83 ec 0c             	sub    esp,0xc
c0014bac:	68 14 b7 02 c0       	push   0xc002b714
c0014bb1:	e8 d1 5c 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	eb 8b                	jmp    c0014b46 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014bbb <nmiHandler(regs*, void*)>:
c0014bbb:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0014bc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bc4:	e9 95 a4 ff ff       	jmp    c000f05e <Computer::handleNMI()>

c0014bc9 <int_handler>:
c0014bc9:	55                   	push   ebp
c0014bca:	57                   	push   edi
c0014bcb:	56                   	push   esi
c0014bcc:	53                   	push   ebx
c0014bcd:	83 ec 0c             	sub    esp,0xc
c0014bd0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bd4:	80 3d 84 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031984,0x0
c0014bdb:	74 0b                	je     c0014be8 <int_handler+0x1f>
c0014bdd:	fa                   	cli    
c0014bde:	f4                   	hlt    
c0014bdf:	80 3d 84 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031984,0x0
c0014be6:	75 f5                	jne    c0014bdd <int_handler+0x14>
c0014be8:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0014bed:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014bf0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bf6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014bfc:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bff:	83 f8 17             	cmp    eax,0x17
c0014c02:	77 13                	ja     c0014c17 <int_handler+0x4e>
c0014c04:	83 ec 08             	sub    esp,0x8
c0014c07:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c09:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c0c:	0f b6 c0             	movzx  eax,al
c0014c0f:	50                   	push   eax
c0014c10:	57                   	push   edi
c0014c11:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	83 c3 15             	add    ebx,0x15
c0014c1a:	c1 e3 04             	shl    ebx,0x4
c0014c1d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c21:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c28:	31 db                	xor    ebx,ebx
c0014c2a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c2e:	85 c0                	test   eax,eax
c0014c30:	74 13                	je     c0014c45 <int_handler+0x7c>
c0014c32:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c35:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c39:	74 1c                	je     c0014c57 <int_handler+0x8e>
c0014c3b:	83 ec 08             	sub    esp,0x8
c0014c3e:	52                   	push   edx
c0014c3f:	56                   	push   esi
c0014c40:	ff d0                	call   eax
c0014c42:	83 c4 10             	add    esp,0x10
c0014c45:	43                   	inc    ebx
c0014c46:	83 fb 04             	cmp    ebx,0x4
c0014c49:	75 df                	jne    c0014c2a <int_handler+0x61>
c0014c4b:	83 c4 0c             	add    esp,0xc
c0014c4e:	31 c0                	xor    eax,eax
c0014c50:	5b                   	pop    ebx
c0014c51:	31 d2                	xor    edx,edx
c0014c53:	5e                   	pop    esi
c0014c54:	5f                   	pop    edi
c0014c55:	5d                   	pop    ebp
c0014c56:	c3                   	ret    
c0014c57:	83 ec 08             	sub    esp,0x8
c0014c5a:	52                   	push   edx
c0014c5b:	56                   	push   esi
c0014c5c:	ff d0                	call   eax
c0014c5e:	83 c4 10             	add    esp,0x10
c0014c61:	83 c4 0c             	add    esp,0xc
c0014c64:	5b                   	pop    ebx
c0014c65:	5e                   	pop    esi
c0014c66:	5f                   	pop    edi
c0014c67:	5d                   	pop    ebp
c0014c68:	c3                   	ret    
c0014c69:	90                   	nop

c0014c6a <InterruptController::InterruptController(char const*)>:
c0014c6a:	83 ec 1c             	sub    esp,0x1c
c0014c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c71:	83 ec 08             	sub    esp,0x8
c0014c74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c78:	50                   	push   eax
c0014c79:	e8 72 f8 ff ff       	call   c00144f0 <Device::Device(char const*)>
c0014c7e:	83 c4 10             	add    esp,0x10
c0014c81:	ba d4 b9 02 c0       	mov    edx,0xc002b9d4
c0014c86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c8a:	89 10                	mov    DWORD PTR [eax],edx
c0014c8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c90:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c9a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ca2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014caa:	7f 5e                	jg     c0014d0a <InterruptController::InterruptController(char const*)+0xa0>
c0014cac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cb4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014cb9:	7f 49                	jg     c0014d04 <InterruptController::InterruptController(char const*)+0x9a>
c0014cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cc3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cce:	01 ca                	add    edx,ecx
c0014cd0:	83 c2 54             	add    edx,0x54
c0014cd3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ce3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cee:	01 ca                	add    edx,ecx
c0014cf0:	81 c2 54 04 00 00    	add    edx,0x454
c0014cf6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cfe:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d02:	eb b0                	jmp    c0014cb4 <InterruptController::InterruptController(char const*)+0x4a>
c0014d04:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d08:	eb 98                	jmp    c0014ca2 <InterruptController::InterruptController(char const*)+0x38>
c0014d0a:	90                   	nop
c0014d0b:	83 c4 1c             	add    esp,0x1c
c0014d0e:	c3                   	ret    
c0014d0f:	90                   	nop

c0014d10 <InterruptController::~InterruptController()>:
c0014d10:	83 ec 0c             	sub    esp,0xc
c0014d13:	ba d4 b9 02 c0       	mov    edx,0xc002b9d4
c0014d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d1c:	89 10                	mov    DWORD PTR [eax],edx
c0014d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d22:	83 ec 0c             	sub    esp,0xc
c0014d25:	50                   	push   eax
c0014d26:	e8 a7 f4 ff ff       	call   c00141d2 <Device::~Device()>
c0014d2b:	83 c4 10             	add    esp,0x10
c0014d2e:	90                   	nop
c0014d2f:	83 c4 0c             	add    esp,0xc
c0014d32:	c3                   	ret    
c0014d33:	90                   	nop

c0014d34 <InterruptController::~InterruptController()>:
c0014d34:	83 ec 0c             	sub    esp,0xc
c0014d37:	83 ec 0c             	sub    esp,0xc
c0014d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d3e:	e8 cd ff ff ff       	call   c0014d10 <InterruptController::~InterruptController()>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	83 ec 08             	sub    esp,0x8
c0014d49:	68 58 21 00 00       	push   0x2158
c0014d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d52:	e8 94 e0 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0014d57:	83 c4 10             	add    esp,0x10
c0014d5a:	83 c4 0c             	add    esp,0xc
c0014d5d:	c3                   	ret    

c0014d5e <displayDebugInfo(regs*)>:
c0014d5e:	55                   	push   ebp
c0014d5f:	57                   	push   edi
c0014d60:	56                   	push   esi
c0014d61:	53                   	push   ebx
c0014d62:	83 ec 24             	sub    esp,0x24
c0014d65:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d69:	0f 20 c2             	mov    edx,cr0
c0014d6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d70:	0f 20 d7             	mov    edi,cr2
c0014d73:	0f 20 de             	mov    esi,cr3
c0014d76:	0f 20 e5             	mov    ebp,cr4
c0014d79:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d7c:	68 4e b7 02 c0       	push   0xc002b74e
c0014d81:	e8 45 e1 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014d86:	59                   	pop    ecx
c0014d87:	58                   	pop    eax
c0014d88:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d8b:	68 59 b7 02 c0       	push   0xc002b759
c0014d90:	e8 36 e1 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014d95:	58                   	pop    eax
c0014d96:	5a                   	pop    edx
c0014d97:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d9a:	68 64 b7 02 c0       	push   0xc002b764
c0014d9f:	e8 27 e1 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014da4:	59                   	pop    ecx
c0014da5:	58                   	pop    eax
c0014da6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014da9:	68 6f b7 02 c0       	push   0xc002b76f
c0014dae:	e8 18 e1 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014db3:	58                   	pop    eax
c0014db4:	5a                   	pop    edx
c0014db5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014db8:	68 7a b7 02 c0       	push   0xc002b77a
c0014dbd:	e8 09 e1 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014dc2:	59                   	pop    ecx
c0014dc3:	58                   	pop    eax
c0014dc4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014dc7:	68 85 b7 02 c0       	push   0xc002b785
c0014dcc:	e8 fa e0 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014dd1:	58                   	pop    eax
c0014dd2:	5a                   	pop    edx
c0014dd3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dd6:	68 90 b7 02 c0       	push   0xc002b790
c0014ddb:	e8 eb e0 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014de0:	59                   	pop    ecx
c0014de1:	58                   	pop    eax
c0014de2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014de5:	68 9b b7 02 c0       	push   0xc002b79b
c0014dea:	e8 dc e0 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014def:	58                   	pop    eax
c0014df0:	5a                   	pop    edx
c0014df1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014df4:	68 a6 b7 02 c0       	push   0xc002b7a6
c0014df9:	e8 cd e0 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014dfe:	59                   	pop    ecx
c0014dff:	58                   	pop    eax
c0014e00:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e03:	68 b5 b7 02 c0       	push   0xc002b7b5
c0014e08:	e8 be e0 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014e0d:	58                   	pop    eax
c0014e0e:	5a                   	pop    edx
c0014e0f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e12:	68 c0 b7 02 c0       	push   0xc002b7c0
c0014e17:	e8 af e0 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014e1c:	59                   	pop    ecx
c0014e1d:	58                   	pop    eax
c0014e1e:	57                   	push   edi
c0014e1f:	68 cb b7 02 c0       	push   0xc002b7cb
c0014e24:	e8 a2 e0 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014e29:	58                   	pop    eax
c0014e2a:	5a                   	pop    edx
c0014e2b:	56                   	push   esi
c0014e2c:	68 d6 b7 02 c0       	push   0xc002b7d6
c0014e31:	e8 95 e0 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0014e36:	59                   	pop    ecx
c0014e37:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014e3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e42:	e8 a7 be ff ff       	call   c0010cee <setActiveTerminal(VgaText*)>
c0014e47:	58                   	pop    eax
c0014e48:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e4b:	5a                   	pop    edx
c0014e4c:	c1 e0 05             	shl    eax,0x5
c0014e4f:	05 e0 dd 02 c0       	add    eax,0xc002dde0
c0014e54:	50                   	push   eax
c0014e55:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014e5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e60:	e8 15 c2 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014e65:	59                   	pop    ecx
c0014e66:	58                   	pop    eax
c0014e67:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014e6c:	68 e1 b7 02 c0       	push   0xc002b7e1
c0014e71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e77:	e8 fe c1 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014e7c:	58                   	pop    eax
c0014e7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e82:	5a                   	pop    edx
c0014e83:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e86:	83 c0 0c             	add    eax,0xc
c0014e89:	50                   	push   eax
c0014e8a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014e8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e95:	e8 e0 c1 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014e9a:	59                   	pop    ecx
c0014e9b:	58                   	pop    eax
c0014e9c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014ea1:	68 ea b7 02 c0       	push   0xc002b7ea
c0014ea6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eac:	e8 c9 c1 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014eb1:	58                   	pop    eax
c0014eb2:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014eb7:	5a                   	pop    edx
c0014eb8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ebb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec1:	e8 da c1 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0014ec6:	59                   	pop    ecx
c0014ec7:	58                   	pop    eax
c0014ec8:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014ecd:	68 f2 b7 02 c0       	push   0xc002b7f2
c0014ed2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed8:	e8 9d c1 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014edd:	58                   	pop    eax
c0014ede:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014ee3:	5a                   	pop    edx
c0014ee4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ee7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eed:	e8 ae c1 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0014ef2:	59                   	pop    ecx
c0014ef3:	58                   	pop    eax
c0014ef4:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014ef9:	68 fa b7 02 c0       	push   0xc002b7fa
c0014efe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f04:	e8 71 c1 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014f09:	58                   	pop    eax
c0014f0a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f0f:	5a                   	pop    edx
c0014f10:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f19:	e8 82 c1 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0014f1e:	59                   	pop    ecx
c0014f1f:	58                   	pop    eax
c0014f20:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f25:	68 02 b8 02 c0       	push   0xc002b802
c0014f2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f30:	e8 45 c1 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014f35:	58                   	pop    eax
c0014f36:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f3b:	5a                   	pop    edx
c0014f3c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f45:	e8 56 c1 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0014f4a:	59                   	pop    ecx
c0014f4b:	58                   	pop    eax
c0014f4c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f51:	68 0a b8 02 c0       	push   0xc002b80a
c0014f56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5c:	e8 19 c1 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014f61:	58                   	pop    eax
c0014f62:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f67:	5a                   	pop    edx
c0014f68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f71:	e8 2a c1 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0014f76:	59                   	pop    ecx
c0014f77:	58                   	pop    eax
c0014f78:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f7d:	68 12 b8 02 c0       	push   0xc002b812
c0014f82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f88:	e8 ed c0 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014f8d:	58                   	pop    eax
c0014f8e:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014f93:	5a                   	pop    edx
c0014f94:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9d:	e8 fe c0 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0014fa2:	59                   	pop    ecx
c0014fa3:	58                   	pop    eax
c0014fa4:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014fa9:	68 1a b8 02 c0       	push   0xc002b81a
c0014fae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb4:	e8 c1 c0 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014fb9:	58                   	pop    eax
c0014fba:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014fbf:	5a                   	pop    edx
c0014fc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fc4:	52                   	push   edx
c0014fc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcb:	e8 d0 c0 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0014fd0:	59                   	pop    ecx
c0014fd1:	58                   	pop    eax
c0014fd2:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014fd7:	68 23 b8 02 c0       	push   0xc002b823
c0014fdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe2:	e8 93 c0 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0014fe7:	58                   	pop    eax
c0014fe8:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014fed:	5a                   	pop    edx
c0014fee:	57                   	push   edi
c0014fef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff5:	e8 a6 c0 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0014ffa:	59                   	pop    ecx
c0014ffb:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015000:	5f                   	pop    edi
c0015001:	68 2b b8 02 c0       	push   0xc002b82b
c0015006:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500c:	e8 69 c0 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0015011:	58                   	pop    eax
c0015012:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015017:	5a                   	pop    edx
c0015018:	56                   	push   esi
c0015019:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501f:	e8 7c c0 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0015024:	59                   	pop    ecx
c0015025:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001502a:	5e                   	pop    esi
c001502b:	68 33 b8 02 c0       	push   0xc002b833
c0015030:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015036:	e8 3f c0 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001503b:	5f                   	pop    edi
c001503c:	58                   	pop    eax
c001503d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015042:	55                   	push   ebp
c0015043:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015049:	e8 52 c0 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001504e:	58                   	pop    eax
c001504f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015054:	5a                   	pop    edx
c0015055:	68 3b b8 02 c0       	push   0xc002b83b
c001505a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015060:	e8 15 c0 ff ff       	call   c001107a <VgaText::puts(char const*)>
c0015065:	0f 21 c0             	mov    eax,db0
c0015068:	59                   	pop    ecx
c0015069:	5e                   	pop    esi
c001506a:	50                   	push   eax
c001506b:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015070:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015076:	e8 25 c0 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001507b:	5f                   	pop    edi
c001507c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015081:	5d                   	pop    ebp
c0015082:	68 44 b8 02 c0       	push   0xc002b844
c0015087:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508d:	e8 e8 bf ff ff       	call   c001107a <VgaText::puts(char const*)>
c0015092:	0f 21 c8             	mov    eax,db1
c0015095:	5a                   	pop    edx
c0015096:	59                   	pop    ecx
c0015097:	50                   	push   eax
c0015098:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001509d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a3:	e8 f8 bf ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c00150a8:	5e                   	pop    esi
c00150a9:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00150ae:	5f                   	pop    edi
c00150af:	68 4c b8 02 c0       	push   0xc002b84c
c00150b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ba:	e8 bb bf ff ff       	call   c001107a <VgaText::puts(char const*)>
c00150bf:	0f 21 d0             	mov    eax,db2
c00150c2:	5d                   	pop    ebp
c00150c3:	5a                   	pop    edx
c00150c4:	50                   	push   eax
c00150c5:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00150ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d0:	e8 cb bf ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c00150d5:	59                   	pop    ecx
c00150d6:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00150db:	5e                   	pop    esi
c00150dc:	68 54 b8 02 c0       	push   0xc002b854
c00150e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e7:	e8 8e bf ff ff       	call   c001107a <VgaText::puts(char const*)>
c00150ec:	0f 21 d8             	mov    eax,db3
c00150ef:	5f                   	pop    edi
c00150f0:	5d                   	pop    ebp
c00150f1:	50                   	push   eax
c00150f2:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00150f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150fd:	e8 9e bf ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c0015102:	58                   	pop    eax
c0015103:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015108:	5a                   	pop    edx
c0015109:	68 5c b8 02 c0       	push   0xc002b85c
c001510e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015114:	e8 61 bf ff ff       	call   c001107a <VgaText::puts(char const*)>
c0015119:	0f 21 f0             	mov    eax,db6
c001511c:	59                   	pop    ecx
c001511d:	5e                   	pop    esi
c001511e:	50                   	push   eax
c001511f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015124:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512a:	e8 71 bf ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001512f:	5f                   	pop    edi
c0015130:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015135:	5d                   	pop    ebp
c0015136:	68 64 b8 02 c0       	push   0xc002b864
c001513b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015141:	e8 34 bf ff ff       	call   c001107a <VgaText::puts(char const*)>
c0015146:	0f 21 f8             	mov    eax,db7
c0015149:	5a                   	pop    edx
c001514a:	59                   	pop    ecx
c001514b:	50                   	push   eax
c001514c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015151:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015157:	e8 44 bf ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001515c:	5e                   	pop    esi
c001515d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015160:	e8 ea 88 00 00       	call   c001da4f <Thr::getDriverNameFromAddress(unsigned long)>
c0015165:	83 c4 10             	add    esp,0x10
c0015168:	85 c0                	test   eax,eax
c001516a:	74 7d                	je     c00151e9 <displayDebugInfo(regs*)+0x48b>
c001516c:	89 c6                	mov    esi,eax
c001516e:	50                   	push   eax
c001516f:	50                   	push   eax
c0015170:	56                   	push   esi
c0015171:	68 6c b8 02 c0       	push   0xc002b86c
c0015176:	e8 50 dd ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001517b:	5a                   	pop    edx
c001517c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015181:	59                   	pop    ecx
c0015182:	68 7a b8 02 c0       	push   0xc002b87a
c0015187:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518d:	e8 e8 be ff ff       	call   c001107a <VgaText::puts(char const*)>
c0015192:	5f                   	pop    edi
c0015193:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015198:	5d                   	pop    ebp
c0015199:	56                   	push   esi
c001519a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a0:	e8 d5 be ff ff       	call   c001107a <VgaText::puts(char const*)>
c00151a5:	58                   	pop    eax
c00151a6:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00151ab:	5a                   	pop    edx
c00151ac:	68 86 b8 02 c0       	push   0xc002b886
c00151b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b7:	e8 be be ff ff       	call   c001107a <VgaText::puts(char const*)>
c00151bc:	59                   	pop    ecx
c00151bd:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00151c2:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151c8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151cb:	e8 b6 88 00 00       	call   c001da86 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151d0:	5b                   	pop    ebx
c00151d1:	5d                   	pop    ebp
c00151d2:	50                   	push   eax
c00151d3:	57                   	push   edi
c00151d4:	e8 c7 be ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c00151d9:	58                   	pop    eax
c00151da:	5a                   	pop    edx
c00151db:	56                   	push   esi
c00151dc:	68 92 b8 02 c0       	push   0xc002b892
c00151e1:	e8 e5 dc ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00151e6:	83 c4 10             	add    esp,0x10
c00151e9:	fa                   	cli    
c00151ea:	f4                   	hlt    
c00151eb:	eb fe                	jmp    c00151eb <displayDebugInfo(regs*)+0x48d>

c00151ed <x87EmulHandler(regs*, void*)>:
c00151ed:	83 ec 0c             	sub    esp,0xc
c00151f0:	0f 20 c2             	mov    edx,cr0
c00151f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f8:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00151fc:	75 4b                	jne    c0015249 <x87EmulHandler(regs*, void*)+0x5c>
c00151fe:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0015203:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0015209:	85 c0                	test   eax,eax
c001520b:	74 05                	je     c0015212 <x87EmulHandler(regs*, void*)+0x25>
c001520d:	83 e2 08             	and    edx,0x8
c0015210:	75 17                	jne    c0015229 <x87EmulHandler(regs*, void*)+0x3c>
c0015212:	83 ec 0c             	sub    esp,0xc
c0015215:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015219:	e8 a5 ae 00 00       	call   c00200c3 <Vm::x87Handler(regs*)>
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	84 c0                	test   al,al
c0015223:	74 24                	je     c0015249 <x87EmulHandler(regs*, void*)+0x5c>
c0015225:	83 c4 0c             	add    esp,0xc
c0015228:	c3                   	ret    
c0015229:	83 ec 0c             	sub    esp,0xc
c001522c:	68 b8 b8 02 c0       	push   0xc002b8b8
c0015231:	e8 95 dc ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0015236:	0f 06                	clts   
c0015238:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001523d:	83 c4 10             	add    esp,0x10
c0015240:	a3 c8 ef 02 c0       	mov    ds:0xc002efc8,eax
c0015245:	83 c4 0c             	add    esp,0xc
c0015248:	c3                   	ret    
c0015249:	83 ec 0c             	sub    esp,0xc
c001524c:	68 a2 b8 02 c0       	push   0xc002b8a2
c0015251:	e8 75 dc ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0015256:	5a                   	pop    edx
c0015257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001525b:	e8 fe fa ff ff       	call   c0014d5e <displayDebugInfo(regs*)>

c0015260 <gpFault(regs*, void*)>:
c0015260:	53                   	push   ebx
c0015261:	83 ec 14             	sub    esp,0x14
c0015264:	c7 05 c4 ef 02 c0 40 f4 01 c0 	mov    DWORD PTR ds:0xc002efc4,0xc001f440
c001526e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015272:	53                   	push   ebx
c0015273:	e8 c8 a1 00 00       	call   c001f440 <Vm::faultHandler(regs*)>
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	84 c0                	test   al,al
c001527d:	74 05                	je     c0015284 <gpFault(regs*, void*)+0x24>
c001527f:	83 c4 08             	add    esp,0x8
c0015282:	5b                   	pop    ebx
c0015283:	c3                   	ret    
c0015284:	83 ec 0c             	sub    esp,0xc
c0015287:	68 c5 b8 02 c0       	push   0xc002b8c5
c001528c:	e8 3a dc ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0015291:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015294:	e8 c5 fa ff ff       	call   c0014d5e <displayDebugInfo(regs*)>

c0015299 <pgFault(regs*, void*)>:
c0015299:	83 ec 14             	sub    esp,0x14
c001529c:	0f 20 d0             	mov    eax,cr2
c001529f:	50                   	push   eax
c00152a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152a8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152ae:	e8 35 d8 ff ff       	call   c0012ae8 <VAS::tryLoadBackOffDisk(unsigned long)>
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	84 c0                	test   al,al
c00152b8:	74 04                	je     c00152be <pgFault(regs*, void*)+0x25>
c00152ba:	83 c4 0c             	add    esp,0xc
c00152bd:	c3                   	ret    
c00152be:	83 ec 0c             	sub    esp,0xc
c00152c1:	68 e0 b8 02 c0       	push   0xc002b8e0
c00152c6:	e8 00 dc ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00152cb:	58                   	pop    eax
c00152cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152d0:	e8 89 fa ff ff       	call   c0014d5e <displayDebugInfo(regs*)>

c00152d5 <otherISRHandler(regs*, void*)>:
c00152d5:	53                   	push   ebx
c00152d6:	83 ec 0c             	sub    esp,0xc
c00152d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152dd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152e0:	50                   	push   eax
c00152e1:	50                   	push   eax
c00152e2:	68 ed b8 02 c0       	push   0xc002b8ed
c00152e7:	e8 df db ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00152ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152ef:	e8 6a fa ff ff       	call   c0014d5e <displayDebugInfo(regs*)>

c00152f4 <opcodeFault(regs*, void*)>:
c00152f4:	55                   	push   ebp
c00152f5:	89 e5                	mov    ebp,esp
c00152f7:	56                   	push   esi
c00152f8:	53                   	push   ebx
c00152f9:	83 ec 40             	sub    esp,0x40
c00152fc:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0015301:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015307:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001530d:	84 c0                	test   al,al
c001530f:	74 24                	je     c0015335 <opcodeFault(regs*, void*)+0x41>
c0015311:	83 ec 0c             	sub    esp,0xc
c0015314:	68 0c b9 02 c0       	push   0xc002b90c
c0015319:	e8 ad db ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015324:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015327:	8d 50 19             	lea    edx,[eax+0x19]
c001532a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015330:	e9 d5 05 00 00       	jmp    c001590a <opcodeFault(regs*, void*)+0x616>
c0015335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015338:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001533e:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015342:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015349:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001534f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015352:	8a 00                	mov    al,BYTE PTR [eax]
c0015354:	3c f0                	cmp    al,0xf0
c0015356:	75 17                	jne    c001536f <opcodeFault(regs*, void*)+0x7b>
c0015358:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001535b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015361:	8d 50 01             	lea    edx,[eax+0x1]
c0015364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015367:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536a:	e9 da 00 00 00       	jmp    c0015449 <opcodeFault(regs*, void*)+0x155>
c001536f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015372:	8a 00                	mov    al,BYTE PTR [eax]
c0015374:	3c f2                	cmp    al,0xf2
c0015376:	74 09                	je     c0015381 <opcodeFault(regs*, void*)+0x8d>
c0015378:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537b:	8a 00                	mov    al,BYTE PTR [eax]
c001537d:	3c f3                	cmp    al,0xf3
c001537f:	75 1b                	jne    c001539c <opcodeFault(regs*, void*)+0xa8>
c0015381:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015385:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001538e:	8d 50 01             	lea    edx,[eax+0x1]
c0015391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015394:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015397:	e9 ad 00 00 00       	jmp    c0015449 <opcodeFault(regs*, void*)+0x155>
c001539c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539f:	8a 00                	mov    al,BYTE PTR [eax]
c00153a1:	3c 66                	cmp    al,0x66
c00153a3:	75 1f                	jne    c00153c4 <opcodeFault(regs*, void*)+0xd0>
c00153a5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153a9:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b6:	8d 50 01             	lea    edx,[eax+0x1]
c00153b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153bf:	e9 85 00 00 00       	jmp    c0015449 <opcodeFault(regs*, void*)+0x155>
c00153c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c7:	8a 00                	mov    al,BYTE PTR [eax]
c00153c9:	3c 67                	cmp    al,0x67
c00153cb:	75 18                	jne    c00153e5 <opcodeFault(regs*, void*)+0xf1>
c00153cd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153da:	8d 50 01             	lea    edx,[eax+0x1]
c00153dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e3:	eb 64                	jmp    c0015449 <opcodeFault(regs*, void*)+0x155>
c00153e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ea:	3c 2e                	cmp    al,0x2e
c00153ec:	74 09                	je     c00153f7 <opcodeFault(regs*, void*)+0x103>
c00153ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f1:	8a 00                	mov    al,BYTE PTR [eax]
c00153f3:	3c 3e                	cmp    al,0x3e
c00153f5:	75 18                	jne    c001540f <opcodeFault(regs*, void*)+0x11b>
c00153f7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153fb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015401:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015404:	8d 50 01             	lea    edx,[eax+0x1]
c0015407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001540d:	eb 3a                	jmp    c0015449 <opcodeFault(regs*, void*)+0x155>
c001540f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015412:	8a 00                	mov    al,BYTE PTR [eax]
c0015414:	3c 36                	cmp    al,0x36
c0015416:	74 1b                	je     c0015433 <opcodeFault(regs*, void*)+0x13f>
c0015418:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541b:	8a 00                	mov    al,BYTE PTR [eax]
c001541d:	3c 26                	cmp    al,0x26
c001541f:	74 12                	je     c0015433 <opcodeFault(regs*, void*)+0x13f>
c0015421:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015424:	8a 00                	mov    al,BYTE PTR [eax]
c0015426:	3c 64                	cmp    al,0x64
c0015428:	74 09                	je     c0015433 <opcodeFault(regs*, void*)+0x13f>
c001542a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542d:	8a 00                	mov    al,BYTE PTR [eax]
c001542f:	3c 65                	cmp    al,0x65
c0015431:	75 16                	jne    c0015449 <opcodeFault(regs*, void*)+0x155>
c0015433:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015437:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001543a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015440:	8d 50 01             	lea    edx,[eax+0x1]
c0015443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015446:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015449:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544c:	8a 00                	mov    al,BYTE PTR [eax]
c001544e:	3c 0f                	cmp    al,0xf
c0015450:	0f 85 ad 00 00 00    	jne    c0015503 <opcodeFault(regs*, void*)+0x20f>
c0015456:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015459:	40                   	inc    eax
c001545a:	8a 00                	mov    al,BYTE PTR [eax]
c001545c:	3c c2                	cmp    al,0xc2
c001545e:	74 0e                	je     c001546e <opcodeFault(regs*, void*)+0x17a>
c0015460:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015463:	40                   	inc    eax
c0015464:	8a 00                	mov    al,BYTE PTR [eax]
c0015466:	3c c3                	cmp    al,0xc3
c0015468:	0f 85 95 00 00 00    	jne    c0015503 <opcodeFault(regs*, void*)+0x20f>
c001546e:	83 ec 0c             	sub    esp,0xc
c0015471:	68 2f b9 02 c0       	push   0xc002b92f
c0015476:	e8 50 da ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001547b:	83 c4 10             	add    esp,0x10
c001547e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015481:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015484:	8d 50 01             	lea    edx,[eax+0x1]
c0015487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001548d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015490:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015493:	8a 00                	mov    al,BYTE PTR [eax]
c0015495:	8d 50 fe             	lea    edx,[eax-0x2]
c0015498:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549b:	88 10                	mov    BYTE PTR [eax],dl
c001549d:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154a0:	50                   	push   eax
c00154a1:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154a4:	50                   	push   eax
c00154a5:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154a8:	50                   	push   eax
c00154a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154ac:	e8 9d 4a 00 00       	call   c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154b1:	83 c4 10             	add    esp,0x10
c00154b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ba:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154bd:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154c0:	01 d0                	add    eax,edx
c00154c2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154cb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154ce:	48                   	dec    eax
c00154cf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154de:	83 ec 04             	sub    esp,0x4
c00154e1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154e4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154e7:	50                   	push   eax
c00154e8:	e8 c7 ac fe ff       	call   c00001b4 <voodooXADD>
c00154ed:	83 c4 10             	add    esp,0x10
c00154f0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154f3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154f6:	01 c2                	add    edx,eax
c00154f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154fe:	e9 07 04 00 00       	jmp    c001590a <opcodeFault(regs*, void*)+0x616>
c0015503:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015506:	8a 00                	mov    al,BYTE PTR [eax]
c0015508:	3c 0f                	cmp    al,0xf
c001550a:	0f 85 8b 01 00 00    	jne    c001569b <opcodeFault(regs*, void*)+0x3a7>
c0015510:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015513:	40                   	inc    eax
c0015514:	8a 00                	mov    al,BYTE PTR [eax]
c0015516:	3c c7                	cmp    al,0xc7
c0015518:	0f 86 7d 01 00 00    	jbe    c001569b <opcodeFault(regs*, void*)+0x3a7>
c001551e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015521:	40                   	inc    eax
c0015522:	8a 00                	mov    al,BYTE PTR [eax]
c0015524:	3c cf                	cmp    al,0xcf
c0015526:	0f 87 6f 01 00 00    	ja     c001569b <opcodeFault(regs*, void*)+0x3a7>
c001552c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552f:	40                   	inc    eax
c0015530:	8a 00                	mov    al,BYTE PTR [eax]
c0015532:	83 c0 38             	add    eax,0x38
c0015535:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015538:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001553c:	75 0b                	jne    c0015549 <opcodeFault(regs*, void*)+0x255>
c001553e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015541:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015544:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015547:	eb 75                	jmp    c00155be <opcodeFault(regs*, void*)+0x2ca>
c0015549:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001554d:	75 0b                	jne    c001555a <opcodeFault(regs*, void*)+0x266>
c001554f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015552:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015555:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015558:	eb 64                	jmp    c00155be <opcodeFault(regs*, void*)+0x2ca>
c001555a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001555e:	75 0b                	jne    c001556b <opcodeFault(regs*, void*)+0x277>
c0015560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015563:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015566:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015569:	eb 53                	jmp    c00155be <opcodeFault(regs*, void*)+0x2ca>
c001556b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001556f:	75 0b                	jne    c001557c <opcodeFault(regs*, void*)+0x288>
c0015571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015574:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015577:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557a:	eb 42                	jmp    c00155be <opcodeFault(regs*, void*)+0x2ca>
c001557c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015580:	75 0b                	jne    c001558d <opcodeFault(regs*, void*)+0x299>
c0015582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015585:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015588:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558b:	eb 31                	jmp    c00155be <opcodeFault(regs*, void*)+0x2ca>
c001558d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015591:	75 0b                	jne    c001559e <opcodeFault(regs*, void*)+0x2aa>
c0015593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015596:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015599:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559c:	eb 20                	jmp    c00155be <opcodeFault(regs*, void*)+0x2ca>
c001559e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155a2:	75 0b                	jne    c00155af <opcodeFault(regs*, void*)+0x2bb>
c00155a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ad:	eb 0f                	jmp    c00155be <opcodeFault(regs*, void*)+0x2ca>
c00155af:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155b3:	75 09                	jne    c00155be <opcodeFault(regs*, void*)+0x2ca>
c00155b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155be:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155c2:	74 10                	je     c00155d4 <opcodeFault(regs*, void*)+0x2e0>
c00155c4:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155cb:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155d2:	eb 2d                	jmp    c0015601 <opcodeFault(regs*, void*)+0x30d>
c00155d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155d7:	c1 e0 18             	shl    eax,0x18
c00155da:	89 c2                	mov    edx,eax
c00155dc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155df:	c1 e0 08             	shl    eax,0x8
c00155e2:	25 00 00 ff 00       	and    eax,0xff0000
c00155e7:	09 c2                	or     edx,eax
c00155e9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155ec:	c1 e8 08             	shr    eax,0x8
c00155ef:	25 00 ff 00 00       	and    eax,0xff00
c00155f4:	09 c2                	or     edx,eax
c00155f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155f9:	c1 e8 18             	shr    eax,0x18
c00155fc:	09 d0                	or     eax,edx
c00155fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015601:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015605:	75 0b                	jne    c0015612 <opcodeFault(regs*, void*)+0x31e>
c0015607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015610:	eb 75                	jmp    c0015687 <opcodeFault(regs*, void*)+0x393>
c0015612:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015616:	75 0b                	jne    c0015623 <opcodeFault(regs*, void*)+0x32f>
c0015618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001561e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015621:	eb 64                	jmp    c0015687 <opcodeFault(regs*, void*)+0x393>
c0015623:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015627:	75 0b                	jne    c0015634 <opcodeFault(regs*, void*)+0x340>
c0015629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001562f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015632:	eb 53                	jmp    c0015687 <opcodeFault(regs*, void*)+0x393>
c0015634:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015638:	75 0b                	jne    c0015645 <opcodeFault(regs*, void*)+0x351>
c001563a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015640:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015643:	eb 42                	jmp    c0015687 <opcodeFault(regs*, void*)+0x393>
c0015645:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015649:	75 0b                	jne    c0015656 <opcodeFault(regs*, void*)+0x362>
c001564b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015651:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015654:	eb 31                	jmp    c0015687 <opcodeFault(regs*, void*)+0x393>
c0015656:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001565a:	75 0b                	jne    c0015667 <opcodeFault(regs*, void*)+0x373>
c001565c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015662:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015665:	eb 20                	jmp    c0015687 <opcodeFault(regs*, void*)+0x393>
c0015667:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001566b:	75 0b                	jne    c0015678 <opcodeFault(regs*, void*)+0x384>
c001566d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015670:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015673:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015676:	eb 0f                	jmp    c0015687 <opcodeFault(regs*, void*)+0x393>
c0015678:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001567c:	75 09                	jne    c0015687 <opcodeFault(regs*, void*)+0x393>
c001567e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015681:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015684:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001568d:	8d 50 02             	lea    edx,[eax+0x2]
c0015690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015693:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015696:	e9 6f 02 00 00       	jmp    c001590a <opcodeFault(regs*, void*)+0x616>
c001569b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569e:	8a 00                	mov    al,BYTE PTR [eax]
c00156a0:	3c 0f                	cmp    al,0xf
c00156a2:	0f 85 8d 01 00 00    	jne    c0015835 <opcodeFault(regs*, void*)+0x541>
c00156a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ab:	40                   	inc    eax
c00156ac:	8a 00                	mov    al,BYTE PTR [eax]
c00156ae:	3c c7                	cmp    al,0xc7
c00156b0:	0f 85 7f 01 00 00    	jne    c0015835 <opcodeFault(regs*, void*)+0x541>
c00156b6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156bf:	8d 50 01             	lea    edx,[eax+0x1]
c00156c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156c8:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156cb:	50                   	push   eax
c00156cc:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156cf:	50                   	push   eax
c00156d0:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156d3:	50                   	push   eax
c00156d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156d7:	e8 72 48 00 00       	call   c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156dc:	83 c4 10             	add    esp,0x10
c00156df:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156e2:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156e5:	83 f0 01             	xor    eax,0x1
c00156e8:	84 c0                	test   al,al
c00156ea:	0f 84 45 01 00 00    	je     c0015835 <opcodeFault(regs*, void*)+0x541>
c00156f0:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156f3:	3c 01                	cmp    al,0x1
c00156f5:	0f 85 3a 01 00 00    	jne    c0015835 <opcodeFault(regs*, void*)+0x541>
c00156fb:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156fe:	83 f0 01             	xor    eax,0x1
c0015701:	84 c0                	test   al,al
c0015703:	0f 84 2c 01 00 00    	je     c0015835 <opcodeFault(regs*, void*)+0x541>
c0015709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001570f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015712:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015719:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001571c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001571f:	89 c2                	mov    edx,eax
c0015721:	b8 00 00 00 00       	mov    eax,0x0
c0015726:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015729:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001572c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015732:	ba 00 00 00 00       	mov    edx,0x0
c0015737:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001573a:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001573d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015740:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015743:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015746:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001574d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015750:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015753:	89 c2                	mov    edx,eax
c0015755:	b8 00 00 00 00       	mov    eax,0x0
c001575a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001575d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015763:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015766:	ba 00 00 00 00       	mov    edx,0x0
c001576b:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001576e:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015771:	fa                   	cli    
c0015772:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015777:	40                   	inc    eax
c0015778:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001577d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015780:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015783:	8b 00                	mov    eax,DWORD PTR [eax]
c0015785:	89 c1                	mov    ecx,eax
c0015787:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001578a:	89 cb                	mov    ebx,ecx
c001578c:	89 d0                	mov    eax,edx
c001578e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015791:	89 c6                	mov    esi,eax
c0015793:	89 f0                	mov    eax,esi
c0015795:	09 d8                	or     eax,ebx
c0015797:	85 c0                	test   eax,eax
c0015799:	75 21                	jne    c00157bc <opcodeFault(regs*, void*)+0x4c8>
c001579b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001579e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157a1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157a4:	89 01                	mov    DWORD PTR [ecx],eax
c00157a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157af:	83 c8 40             	or     eax,0x40
c00157b2:	89 c2                	mov    edx,eax
c00157b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157ba:	eb 3e                	jmp    c00157fa <opcodeFault(regs*, void*)+0x506>
c00157bc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157bf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157c7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157ca:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157d3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157d6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157d9:	89 d0                	mov    eax,edx
c00157db:	31 d2                	xor    edx,edx
c00157dd:	89 c3                	mov    ebx,eax
c00157df:	89 d6                	mov    esi,edx
c00157e1:	89 da                	mov    edx,ebx
c00157e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157ef:	83 e0 bf             	and    eax,0xffffffbf
c00157f2:	89 c2                	mov    edx,eax
c00157f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157fa:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00157ff:	48                   	dec    eax
c0015800:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015805:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001580a:	85 c0                	test   eax,eax
c001580c:	75 01                	jne    c001580f <opcodeFault(regs*, void*)+0x51b>
c001580e:	fb                   	sti    
c001580f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015812:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015815:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015818:	01 c2                	add    edx,eax
c001581a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015820:	83 ec 0c             	sub    esp,0xc
c0015823:	68 3e b9 02 c0       	push   0xc002b93e
c0015828:	e8 9e d6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001582d:	83 c4 10             	add    esp,0x10
c0015830:	e9 d5 00 00 00       	jmp    c001590a <opcodeFault(regs*, void*)+0x616>
c0015835:	83 ec 0c             	sub    esp,0xc
c0015838:	68 51 b9 02 c0       	push   0xc002b951
c001583d:	e8 89 d6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0015842:	83 c4 10             	add    esp,0x10
c0015845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015848:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001584b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015851:	c1 e0 04             	shl    eax,0x4
c0015854:	01 d0                	add    eax,edx
c0015856:	83 c0 03             	add    eax,0x3
c0015859:	8a 00                	mov    al,BYTE PTR [eax]
c001585b:	0f b6 d8             	movzx  ebx,al
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015867:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001586a:	c1 e0 04             	shl    eax,0x4
c001586d:	01 d0                	add    eax,edx
c001586f:	83 c0 02             	add    eax,0x2
c0015872:	8a 00                	mov    al,BYTE PTR [eax]
c0015874:	0f b6 c8             	movzx  ecx,al
c0015877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001587d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015880:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015883:	c1 e0 04             	shl    eax,0x4
c0015886:	01 d0                	add    eax,edx
c0015888:	40                   	inc    eax
c0015889:	8a 00                	mov    al,BYTE PTR [eax]
c001588b:	0f b6 d0             	movzx  edx,al
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015897:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001589a:	c1 e0 04             	shl    eax,0x4
c001589d:	01 f0                	add    eax,esi
c001589f:	8a 00                	mov    al,BYTE PTR [eax]
c00158a1:	0f b6 c0             	movzx  eax,al
c00158a4:	83 ec 0c             	sub    esp,0xc
c00158a7:	53                   	push   ebx
c00158a8:	51                   	push   ecx
c00158a9:	52                   	push   edx
c00158aa:	50                   	push   eax
c00158ab:	68 64 b9 02 c0       	push   0xc002b964
c00158b0:	e8 16 d6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00158b5:	83 c4 20             	add    esp,0x20
c00158b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158be:	83 c0 03             	add    eax,0x3
c00158c1:	8a 00                	mov    al,BYTE PTR [eax]
c00158c3:	0f b6 d8             	movzx  ebx,al
c00158c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158cc:	83 c0 02             	add    eax,0x2
c00158cf:	8a 00                	mov    al,BYTE PTR [eax]
c00158d1:	0f b6 c8             	movzx  ecx,al
c00158d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158da:	40                   	inc    eax
c00158db:	8a 00                	mov    al,BYTE PTR [eax]
c00158dd:	0f b6 d0             	movzx  edx,al
c00158e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e6:	8a 00                	mov    al,BYTE PTR [eax]
c00158e8:	0f b6 c0             	movzx  eax,al
c00158eb:	83 ec 0c             	sub    esp,0xc
c00158ee:	53                   	push   ebx
c00158ef:	51                   	push   ecx
c00158f0:	52                   	push   edx
c00158f1:	50                   	push   eax
c00158f2:	68 8c b9 02 c0       	push   0xc002b98c
c00158f7:	e8 cf d5 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00158fc:	83 c4 20             	add    esp,0x20
c00158ff:	83 ec 0c             	sub    esp,0xc
c0015902:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015905:	e8 54 f4 ff ff       	call   c0014d5e <displayDebugInfo(regs*)>
c001590a:	8d 65 f8             	lea    esp,[ebp-0x8]
c001590d:	5b                   	pop    ebx
c001590e:	5e                   	pop    esi
c001590f:	5d                   	pop    ebp
c0015910:	c3                   	ret    

c0015911 <displayProgramFault(char const*)>:
c0015911:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015916:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015919:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001591f:	85 c0                	test   eax,eax
c0015921:	74 15                	je     c0015938 <displayProgramFault(char const*)+0x27>
c0015923:	83 ec 0c             	sub    esp,0xc
c0015926:	6a 04                	push   0x4
c0015928:	6a 0f                	push   0xf
c001592a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001592e:	50                   	push   eax
c001592f:	e8 88 b4 ff ff       	call   c0010dbc <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015934:	83 c4 1c             	add    esp,0x1c
c0015937:	c3                   	ret    
c0015938:	c3                   	ret    

c0015939 <setupInterruptController()>:
c0015939:	55                   	push   ebp
c001593a:	89 e5                	mov    ebp,esp
c001593c:	53                   	push   ebx
c001593d:	83 ec 24             	sub    esp,0x24
c0015940:	b8 00 00 00 00       	mov    eax,0x0
c0015945:	85 c0                	test   eax,eax
c0015947:	0f 95 c0             	setne  al
c001594a:	84 c0                	test   al,al
c001594c:	74 5b                	je     c00159a9 <setupInterruptController()+0x70>
c001594e:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015955:	83 ec 0c             	sub    esp,0xc
c0015958:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001595b:	e8 b4 9f ff ff       	call   c000f914 <malloc>
c0015960:	83 c4 10             	add    esp,0x10
c0015963:	89 c3                	mov    ebx,eax
c0015965:	83 ec 0c             	sub    esp,0xc
c0015968:	53                   	push   ebx
c0015969:	e8 a2 07 01 00       	call   c0026110 <APIC::APIC()>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015974:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015977:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001597a:	8b 00                	mov    eax,DWORD PTR [eax]
c001597c:	83 c0 08             	add    eax,0x8
c001597f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015981:	6a 00                	push   0x0
c0015983:	6a 00                	push   0x0
c0015985:	6a 00                	push   0x0
c0015987:	52                   	push   edx
c0015988:	ff d0                	call   eax
c001598a:	83 c4 10             	add    esp,0x10
c001598d:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0015992:	83 ec 08             	sub    esp,0x8
c0015995:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015998:	50                   	push   eax
c0015999:	e8 62 e9 ff ff       	call   c0014300 <Device::addChild(Device*)>
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159a4:	e9 89 03 00 00       	jmp    c0015d32 <setupInterruptController()+0x3f9>
c00159a9:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c00159ae:	84 c0                	test   al,al
c00159b0:	75 24                	jne    c00159d6 <setupInterruptController()+0x9d>
c00159b2:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00159b7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00159bd:	83 e2 fe             	and    edx,0xfffffffe
c00159c0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00159c6:	83 ec 0c             	sub    esp,0xc
c00159c9:	68 b1 b9 02 c0       	push   0xc002b9b1
c00159ce:	e8 f8 d4 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00159db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159e1:	83 e0 01             	and    eax,0x1
c00159e4:	84 c0                	test   al,al
c00159e6:	0f 95 c0             	setne  al
c00159e9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159ec:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159f3:	83 ec 0c             	sub    esp,0xc
c00159f6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159f9:	e8 16 9f ff ff       	call   c000f914 <malloc>
c00159fe:	83 c4 10             	add    esp,0x10
c0015a01:	89 c3                	mov    ebx,eax
c0015a03:	83 ec 0c             	sub    esp,0xc
c0015a06:	53                   	push   ebx
c0015a07:	e8 5c 0c 01 00       	call   c0026668 <PIC::PIC()>
c0015a0c:	83 c4 10             	add    esp,0x10
c0015a0f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a12:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1a:	83 c0 08             	add    eax,0x8
c0015a1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1f:	6a 00                	push   0x0
c0015a21:	6a 00                	push   0x0
c0015a23:	6a 00                	push   0x0
c0015a25:	52                   	push   edx
c0015a26:	ff d0                	call   eax
c0015a28:	83 c4 10             	add    esp,0x10
c0015a2b:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a2f:	74 73                	je     c0015aa4 <setupInterruptController()+0x16b>
c0015a31:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a39:	83 c0 0c             	add    eax,0xc
c0015a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3e:	6a 00                	push   0x0
c0015a40:	6a 00                	push   0x0
c0015a42:	6a 00                	push   0x0
c0015a44:	52                   	push   edx
c0015a45:	ff d0                	call   eax
c0015a47:	83 c4 10             	add    esp,0x10
c0015a4a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a4e:	74 15                	je     c0015a65 <setupInterruptController()+0x12c>
c0015a50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a55:	83 c0 04             	add    eax,0x4
c0015a58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5a:	83 ec 0c             	sub    esp,0xc
c0015a5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a60:	ff d0                	call   eax
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a6c:	83 ec 0c             	sub    esp,0xc
c0015a6f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a72:	e8 9d 9e ff ff       	call   c000f914 <malloc>
c0015a77:	83 c4 10             	add    esp,0x10
c0015a7a:	89 c3                	mov    ebx,eax
c0015a7c:	83 ec 0c             	sub    esp,0xc
c0015a7f:	53                   	push   ebx
c0015a80:	e8 8b 06 01 00       	call   c0026110 <APIC::APIC()>
c0015a85:	83 c4 10             	add    esp,0x10
c0015a88:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a93:	83 c0 08             	add    eax,0x8
c0015a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a98:	6a 00                	push   0x0
c0015a9a:	6a 00                	push   0x0
c0015a9c:	6a 00                	push   0x0
c0015a9e:	52                   	push   edx
c0015a9f:	ff d0                	call   eax
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0015aa9:	83 ec 08             	sub    esp,0x8
c0015aac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aaf:	50                   	push   eax
c0015ab0:	e8 4b e8 ff ff       	call   c0014300 <Device::addChild(Device*)>
c0015ab5:	83 c4 10             	add    esp,0x10
c0015ab8:	c7 05 c8 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efc8,0x0
c0015ac2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac7:	83 c0 24             	add    eax,0x24
c0015aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acc:	6a 00                	push   0x0
c0015ace:	68 d5 52 01 c0       	push   0xc00152d5
c0015ad3:	6a 00                	push   0x0
c0015ad5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad8:	ff d0                	call   eax
c0015ada:	83 c4 10             	add    esp,0x10
c0015add:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae2:	83 c0 24             	add    eax,0x24
c0015ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae7:	6a 00                	push   0x0
c0015ae9:	68 d5 52 01 c0       	push   0xc00152d5
c0015aee:	6a 01                	push   0x1
c0015af0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af3:	ff d0                	call   eax
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afd:	83 c0 24             	add    eax,0x24
c0015b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b02:	6a 00                	push   0x0
c0015b04:	68 bb 4b 01 c0       	push   0xc0014bbb
c0015b09:	6a 02                	push   0x2
c0015b0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0e:	ff d0                	call   eax
c0015b10:	83 c4 10             	add    esp,0x10
c0015b13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b18:	83 c0 24             	add    eax,0x24
c0015b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1d:	6a 00                	push   0x0
c0015b1f:	68 d5 52 01 c0       	push   0xc00152d5
c0015b24:	6a 03                	push   0x3
c0015b26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b29:	ff d0                	call   eax
c0015b2b:	83 c4 10             	add    esp,0x10
c0015b2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b33:	83 c0 24             	add    eax,0x24
c0015b36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b38:	6a 00                	push   0x0
c0015b3a:	68 d5 52 01 c0       	push   0xc00152d5
c0015b3f:	6a 04                	push   0x4
c0015b41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b44:	ff d0                	call   eax
c0015b46:	83 c4 10             	add    esp,0x10
c0015b49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4e:	83 c0 24             	add    eax,0x24
c0015b51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b53:	6a 00                	push   0x0
c0015b55:	68 d5 52 01 c0       	push   0xc00152d5
c0015b5a:	6a 05                	push   0x5
c0015b5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5f:	ff d0                	call   eax
c0015b61:	83 c4 10             	add    esp,0x10
c0015b64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b69:	83 c0 24             	add    eax,0x24
c0015b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6e:	6a 00                	push   0x0
c0015b70:	68 f4 52 01 c0       	push   0xc00152f4
c0015b75:	6a 06                	push   0x6
c0015b77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7a:	ff d0                	call   eax
c0015b7c:	83 c4 10             	add    esp,0x10
c0015b7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b84:	83 c0 24             	add    eax,0x24
c0015b87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b89:	6a 00                	push   0x0
c0015b8b:	68 ed 51 01 c0       	push   0xc00151ed
c0015b90:	6a 07                	push   0x7
c0015b92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b95:	ff d0                	call   eax
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9f:	83 c0 24             	add    eax,0x24
c0015ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba4:	6a 00                	push   0x0
c0015ba6:	68 d6 49 01 c0       	push   0xc00149d6
c0015bab:	6a 08                	push   0x8
c0015bad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb0:	ff d0                	call   eax
c0015bb2:	83 c4 10             	add    esp,0x10
c0015bb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bba:	83 c0 24             	add    eax,0x24
c0015bbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbf:	6a 00                	push   0x0
c0015bc1:	68 d5 52 01 c0       	push   0xc00152d5
c0015bc6:	6a 09                	push   0x9
c0015bc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcb:	ff d0                	call   eax
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd5:	83 c0 24             	add    eax,0x24
c0015bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bda:	6a 00                	push   0x0
c0015bdc:	68 d5 52 01 c0       	push   0xc00152d5
c0015be1:	6a 0a                	push   0xa
c0015be3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be6:	ff d0                	call   eax
c0015be8:	83 c4 10             	add    esp,0x10
c0015beb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf0:	83 c0 24             	add    eax,0x24
c0015bf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf5:	6a 00                	push   0x0
c0015bf7:	68 d5 52 01 c0       	push   0xc00152d5
c0015bfc:	6a 0b                	push   0xb
c0015bfe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c01:	ff d0                	call   eax
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0b:	83 c0 24             	add    eax,0x24
c0015c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c10:	6a 00                	push   0x0
c0015c12:	68 d5 52 01 c0       	push   0xc00152d5
c0015c17:	6a 0c                	push   0xc
c0015c19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1c:	ff d0                	call   eax
c0015c1e:	83 c4 10             	add    esp,0x10
c0015c21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c26:	83 c0 24             	add    eax,0x24
c0015c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2b:	6a 00                	push   0x0
c0015c2d:	68 60 52 01 c0       	push   0xc0015260
c0015c32:	6a 0d                	push   0xd
c0015c34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c37:	ff d0                	call   eax
c0015c39:	83 c4 10             	add    esp,0x10
c0015c3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c41:	83 c0 24             	add    eax,0x24
c0015c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c46:	6a 00                	push   0x0
c0015c48:	68 99 52 01 c0       	push   0xc0015299
c0015c4d:	6a 0e                	push   0xe
c0015c4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c52:	ff d0                	call   eax
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5c:	83 c0 24             	add    eax,0x24
c0015c5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c61:	6a 00                	push   0x0
c0015c63:	68 d5 52 01 c0       	push   0xc00152d5
c0015c68:	6a 0f                	push   0xf
c0015c6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6d:	ff d0                	call   eax
c0015c6f:	83 c4 10             	add    esp,0x10
c0015c72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c77:	83 c0 24             	add    eax,0x24
c0015c7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7c:	6a 00                	push   0x0
c0015c7e:	68 d5 52 01 c0       	push   0xc00152d5
c0015c83:	6a 10                	push   0x10
c0015c85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c88:	ff d0                	call   eax
c0015c8a:	83 c4 10             	add    esp,0x10
c0015c8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c92:	83 c0 24             	add    eax,0x24
c0015c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c97:	6a 00                	push   0x0
c0015c99:	68 d5 52 01 c0       	push   0xc00152d5
c0015c9e:	6a 11                	push   0x11
c0015ca0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca3:	ff d0                	call   eax
c0015ca5:	83 c4 10             	add    esp,0x10
c0015ca8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cad:	83 c0 24             	add    eax,0x24
c0015cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb2:	6a 00                	push   0x0
c0015cb4:	68 d5 52 01 c0       	push   0xc00152d5
c0015cb9:	6a 12                	push   0x12
c0015cbb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cbe:	ff d0                	call   eax
c0015cc0:	83 c4 10             	add    esp,0x10
c0015cc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc8:	83 c0 24             	add    eax,0x24
c0015ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccd:	6a 00                	push   0x0
c0015ccf:	68 d5 52 01 c0       	push   0xc00152d5
c0015cd4:	6a 13                	push   0x13
c0015cd6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd9:	ff d0                	call   eax
c0015cdb:	83 c4 10             	add    esp,0x10
c0015cde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce3:	83 c0 24             	add    eax,0x24
c0015ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce8:	6a 00                	push   0x0
c0015cea:	68 d5 52 01 c0       	push   0xc00152d5
c0015cef:	6a 14                	push   0x14
c0015cf1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf4:	ff d0                	call   eax
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfe:	83 c0 24             	add    eax,0x24
c0015d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d03:	6a 00                	push   0x0
c0015d05:	68 d5 52 01 c0       	push   0xc00152d5
c0015d0a:	6a 1e                	push   0x1e
c0015d0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d0f:	ff d0                	call   eax
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d19:	83 c0 24             	add    eax,0x24
c0015d1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d1e:	6a 00                	push   0x0
c0015d20:	68 c5 ca 01 c0       	push   0xc001cac5
c0015d25:	6a 60                	push   0x60
c0015d27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d2a:	ff d0                	call   eax
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d32:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d35:	c9                   	leave  
c0015d36:	c3                   	ret    
c0015d37:	90                   	nop

c0015d38 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d38:	55                   	push   ebp
c0015d39:	89 e5                	mov    ebp,esp
c0015d3b:	83 ec 08             	sub    esp,0x8
c0015d3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d41:	83 ec 0c             	sub    esp,0xc
c0015d44:	50                   	push   eax
c0015d45:	e8 a2 e8 ff ff       	call   c00145ec <Device::getName()>
c0015d4a:	83 c4 10             	add    esp,0x10
c0015d4d:	8a 00                	mov    al,BYTE PTR [eax]
c0015d4f:	3c 41                	cmp    al,0x41
c0015d51:	0f 94 c0             	sete   al
c0015d54:	84 c0                	test   al,al
c0015d56:	74 28                	je     c0015d80 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d58:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d5c:	7f 12                	jg     c0015d70 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d61:	05 80 e0 02 c0       	add    eax,0xc002e080
c0015d66:	8a 00                	mov    al,BYTE PTR [eax]
c0015d68:	0f b6 c0             	movzx  eax,al
c0015d6b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d6e:	eb 10                	jmp    c0015d80 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d70:	83 ec 0c             	sub    esp,0xc
c0015d73:	68 a0 b6 02 c0       	push   0xc002b6a0
c0015d78:	e8 0a 4b 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0015d7d:	83 c4 10             	add    esp,0x10
c0015d80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d83:	c9                   	leave  
c0015d84:	c3                   	ret    
c0015d85:	90                   	nop

c0015d86 <startGUI(void*)>:
c0015d86:	55                   	push   ebp
c0015d87:	89 e5                	mov    ebp,esp
c0015d89:	53                   	push   ebx
c0015d8a:	83 ec 04             	sub    esp,0x4
c0015d8d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015d92:	48                   	dec    eax
c0015d93:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015d98:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015d9d:	85 c0                	test   eax,eax
c0015d9f:	75 01                	jne    c0015da2 <startGUI(void*)+0x1c>
c0015da1:	fb                   	sti    
c0015da2:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0015da8:	83 ec 08             	sub    esp,0x8
c0015dab:	6a 01                	push   0x1
c0015dad:	68 14 ba 02 c0       	push   0xc002ba14
c0015db2:	e8 e9 7c 00 00       	call   c001daa0 <Thr::loadDLL(char const*, bool)>
c0015db7:	83 c4 10             	add    esp,0x10
c0015dba:	83 ec 08             	sub    esp,0x8
c0015dbd:	53                   	push   ebx
c0015dbe:	50                   	push   eax
c0015dbf:	e8 07 7f 00 00       	call   c001dccb <Thr::executeDLL(unsigned long, void*)>
c0015dc4:	83 c4 10             	add    esp,0x10
c0015dc7:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0015dcd:	83 ec 08             	sub    esp,0x8
c0015dd0:	6a 01                	push   0x1
c0015dd2:	68 2e ba 02 c0       	push   0xc002ba2e
c0015dd7:	e8 c4 7c 00 00       	call   c001daa0 <Thr::loadDLL(char const*, bool)>
c0015ddc:	83 c4 10             	add    esp,0x10
c0015ddf:	83 ec 08             	sub    esp,0x8
c0015de2:	53                   	push   ebx
c0015de3:	50                   	push   eax
c0015de4:	e8 e2 7e 00 00       	call   c001dccb <Thr::executeDLL(unsigned long, void*)>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	90                   	nop
c0015ded:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015df0:	c9                   	leave  
c0015df1:	c3                   	ret    

c0015df2 <startGUIVESA(void*)>:
c0015df2:	55                   	push   ebp
c0015df3:	89 e5                	mov    ebp,esp
c0015df5:	53                   	push   ebx
c0015df6:	83 ec 04             	sub    esp,0x4
c0015df9:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015dfe:	48                   	dec    eax
c0015dff:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015e04:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015e09:	85 c0                	test   eax,eax
c0015e0b:	75 01                	jne    c0015e0e <startGUIVESA(void*)+0x1c>
c0015e0d:	fb                   	sti    
c0015e0e:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0015e14:	83 ec 08             	sub    esp,0x8
c0015e17:	6a 01                	push   0x1
c0015e19:	68 48 ba 02 c0       	push   0xc002ba48
c0015e1e:	e8 7d 7c 00 00       	call   c001daa0 <Thr::loadDLL(char const*, bool)>
c0015e23:	83 c4 10             	add    esp,0x10
c0015e26:	83 ec 08             	sub    esp,0x8
c0015e29:	53                   	push   ebx
c0015e2a:	50                   	push   eax
c0015e2b:	e8 9b 7e 00 00       	call   c001dccb <Thr::executeDLL(unsigned long, void*)>
c0015e30:	83 c4 10             	add    esp,0x10
c0015e33:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0015e39:	83 ec 08             	sub    esp,0x8
c0015e3c:	6a 01                	push   0x1
c0015e3e:	68 2e ba 02 c0       	push   0xc002ba2e
c0015e43:	e8 58 7c 00 00       	call   c001daa0 <Thr::loadDLL(char const*, bool)>
c0015e48:	83 c4 10             	add    esp,0x10
c0015e4b:	83 ec 08             	sub    esp,0x8
c0015e4e:	53                   	push   ebx
c0015e4f:	50                   	push   eax
c0015e50:	e8 76 7e 00 00       	call   c001dccb <Thr::executeDLL(unsigned long, void*)>
c0015e55:	83 c4 10             	add    esp,0x10
c0015e58:	90                   	nop
c0015e59:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e5c:	c9                   	leave  
c0015e5d:	c3                   	ret    

c0015e5e <sendKeyToTerminal(unsigned char)>:
c0015e5e:	55                   	push   ebp
c0015e5f:	89 e5                	mov    ebp,esp
c0015e61:	83 ec 28             	sub    esp,0x28
c0015e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e67:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e6a:	a1 04 ef 02 c0       	mov    eax,ds:0xc002ef04
c0015e6f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e73:	83 ec 08             	sub    esp,0x8
c0015e76:	52                   	push   edx
c0015e77:	50                   	push   eax
c0015e78:	e8 17 b4 ff ff       	call   c0011294 <VgaText::receiveKey(unsigned char)>
c0015e7d:	83 c4 10             	add    esp,0x10
c0015e80:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e84:	0f 85 8f 00 00 00    	jne    c0015f19 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e8a:	fa                   	cli    
c0015e8b:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015e90:	40                   	inc    eax
c0015e91:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015e96:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c0015e9b:	40                   	inc    eax
c0015e9c:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c0015ea1:	a1 e0 ef 02 c0       	mov    eax,ds:0xc002efe0
c0015ea6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ea9:	c7 05 e0 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efe0,0x0
c0015eb3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015eb7:	74 1f                	je     c0015ed8 <sendKeyToTerminal(unsigned char)+0x7a>
c0015eb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ebc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ebf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ec2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ec5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ec8:	83 ec 0c             	sub    esp,0xc
c0015ecb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ece:	e8 6f 8a 00 00       	call   c001e942 <unblockTask(ThreadControlBlock*)>
c0015ed3:	83 c4 10             	add    esp,0x10
c0015ed6:	eb db                	jmp    c0015eb3 <sendKeyToTerminal(unsigned char)+0x55>
c0015ed8:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c0015edd:	48                   	dec    eax
c0015ede:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c0015ee3:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c0015ee8:	85 c0                	test   eax,eax
c0015eea:	75 18                	jne    c0015f04 <sendKeyToTerminal(unsigned char)+0xa6>
c0015eec:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c0015ef1:	85 c0                	test   eax,eax
c0015ef3:	74 0f                	je     c0015f04 <sendKeyToTerminal(unsigned char)+0xa6>
c0015ef5:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c0015eff:	e8 7a 85 00 00       	call   c001e47e <schedule()>
c0015f04:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015f09:	48                   	dec    eax
c0015f0a:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015f0f:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015f14:	85 c0                	test   eax,eax
c0015f16:	75 01                	jne    c0015f19 <sendKeyToTerminal(unsigned char)+0xbb>
c0015f18:	fb                   	sti    
c0015f19:	90                   	nop
c0015f1a:	c9                   	leave  
c0015f1b:	c3                   	ret    

c0015f1c <sendKeyboardToken(KeyboardToken)>:
c0015f1c:	55                   	push   ebp
c0015f1d:	89 e5                	mov    ebp,esp
c0015f1f:	83 ec 18             	sub    esp,0x18
c0015f22:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f28:	0f b7 c0             	movzx  eax,ax
c0015f2b:	83 f2 01             	xor    edx,0x1
c0015f2e:	88 90 00 f0 02 c0    	mov    BYTE PTR [eax-0x3ffd1000],dl
c0015f34:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c0015f39:	85 c0                	test   eax,eax
c0015f3b:	74 24                	je     c0015f61 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f3d:	8b 0d e8 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efe8
c0015f43:	83 ec 04             	sub    esp,0x4
c0015f46:	68 00 f0 02 c0       	push   0xc002f000
c0015f4b:	83 ec 08             	sub    esp,0x8
c0015f4e:	89 e2                	mov    edx,esp
c0015f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f53:	89 02                	mov    DWORD PTR [edx],eax
c0015f55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f58:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f5c:	ff d1                	call   ecx
c0015f5e:	83 c4 10             	add    esp,0x10
c0015f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f64:	66 3d 03 02          	cmp    ax,0x203
c0015f68:	75 07                	jne    c0015f71 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f6a:	a0 00 f1 02 c0       	mov    al,ds:0xc002f100
c0015f6f:	84 c0                	test   al,al
c0015f71:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f75:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f78:	a0 08 f4 02 c0       	mov    al,ds:0xc002f408
c0015f7d:	38 c2                	cmp    dl,al
c0015f7f:	74 1c                	je     c0015f9d <sendKeyboardToken(KeyboardToken)+0x81>
c0015f81:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f84:	a2 08 f4 02 c0       	mov    ds:0xc002f408,al
c0015f89:	a0 08 f4 02 c0       	mov    al,ds:0xc002f408
c0015f8e:	0f b6 c0             	movzx  eax,al
c0015f91:	83 ec 0c             	sub    esp,0xc
c0015f94:	50                   	push   eax
c0015f95:	e8 82 a6 ff ff       	call   c001061c <setTerminalScrollLock(bool)>
c0015f9a:	83 c4 10             	add    esp,0x10
c0015f9d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015fa0:	84 c0                	test   al,al
c0015fa2:	0f 84 ae 00 00 00    	je     c0016056 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fab:	66 3d 10 03          	cmp    ax,0x310
c0015faf:	75 06                	jne    c0015fb7 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015fb1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fba:	66 3d 11 03          	cmp    ax,0x311
c0015fbe:	75 06                	jne    c0015fc6 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fc0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc9:	66 3d 12 03          	cmp    ax,0x312
c0015fcd:	75 06                	jne    c0015fd5 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fcf:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd8:	66 3d 13 03          	cmp    ax,0x313
c0015fdc:	75 06                	jne    c0015fe4 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fde:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe7:	66 3d 14 03          	cmp    ax,0x314
c0015feb:	75 06                	jne    c0015ff3 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015fed:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff6:	66 3d 15 03          	cmp    ax,0x315
c0015ffa:	75 06                	jne    c0016002 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015ffc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016005:	66 3d 16 03          	cmp    ax,0x316
c0016009:	75 06                	jne    c0016011 <sendKeyboardToken(KeyboardToken)+0xf5>
c001600b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0016011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016014:	66 3d 17 03          	cmp    ax,0x317
c0016018:	75 06                	jne    c0016020 <sendKeyboardToken(KeyboardToken)+0x104>
c001601a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016023:	66 3d 18 03          	cmp    ax,0x318
c0016027:	75 06                	jne    c001602f <sendKeyboardToken(KeyboardToken)+0x113>
c0016029:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001602f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016032:	66 3d 19 03          	cmp    ax,0x319
c0016036:	75 06                	jne    c001603e <sendKeyboardToken(KeyboardToken)+0x122>
c0016038:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001603e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016041:	66 3d 1a 03          	cmp    ax,0x31a
c0016045:	0f 85 c9 00 00 00    	jne    c0016114 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001604b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016051:	e9 be 00 00 00       	jmp    c0016114 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016059:	66 3d 10 03          	cmp    ax,0x310
c001605d:	75 0a                	jne    c0016069 <sendKeyboardToken(KeyboardToken)+0x14d>
c001605f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016065:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606c:	66 3d 11 03          	cmp    ax,0x311
c0016070:	75 0a                	jne    c001607c <sendKeyboardToken(KeyboardToken)+0x160>
c0016072:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016078:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001607c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607f:	66 3d 12 03          	cmp    ax,0x312
c0016083:	75 0a                	jne    c001608f <sendKeyboardToken(KeyboardToken)+0x173>
c0016085:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001608b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016092:	66 3d 13 03          	cmp    ax,0x313
c0016096:	75 0a                	jne    c00160a2 <sendKeyboardToken(KeyboardToken)+0x186>
c0016098:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001609e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a5:	66 3d 14 03          	cmp    ax,0x314
c00160a9:	75 0a                	jne    c00160b5 <sendKeyboardToken(KeyboardToken)+0x199>
c00160ab:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b8:	66 3d 15 03          	cmp    ax,0x315
c00160bc:	75 0a                	jne    c00160c8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160be:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160cb:	66 3d 16 03          	cmp    ax,0x316
c00160cf:	75 0a                	jne    c00160db <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160d1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160de:	66 3d 17 03          	cmp    ax,0x317
c00160e2:	75 0a                	jne    c00160ee <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160e4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f1:	66 3d 18 03          	cmp    ax,0x318
c00160f5:	75 0a                	jne    c0016101 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160f7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016104:	66 3d 19 03          	cmp    ax,0x319
c0016108:	75 0a                	jne    c0016114 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001610a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016110:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016117:	66 3d 00 02          	cmp    ax,0x200
c001611b:	75 2c                	jne    c0016149 <sendKeyboardToken(KeyboardToken)+0x22d>
c001611d:	a0 00 f4 02 c0       	mov    al,ds:0xc002f400
c0016122:	83 f0 01             	xor    eax,0x1
c0016125:	84 c0                	test   al,al
c0016127:	74 20                	je     c0016149 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016129:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001612e:	6a 01                	push   0x1
c0016130:	6a 00                	push   0x0
c0016132:	68 86 5d 01 c0       	push   0xc0015d86
c0016137:	50                   	push   eax
c0016138:	e8 fd 80 00 00       	call   c001e23a <Process::createThread(void (*)(void*), void*, int)>
c001613d:	83 c4 10             	add    esp,0x10
c0016140:	c6 05 00 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f400,0x1
c0016147:	eb 33                	jmp    c001617c <sendKeyboardToken(KeyboardToken)+0x260>
c0016149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614c:	66 3d 01 02          	cmp    ax,0x201
c0016150:	75 2a                	jne    c001617c <sendKeyboardToken(KeyboardToken)+0x260>
c0016152:	a0 00 f4 02 c0       	mov    al,ds:0xc002f400
c0016157:	83 f0 01             	xor    eax,0x1
c001615a:	84 c0                	test   al,al
c001615c:	74 1e                	je     c001617c <sendKeyboardToken(KeyboardToken)+0x260>
c001615e:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0016163:	6a 01                	push   0x1
c0016165:	6a 00                	push   0x0
c0016167:	68 f2 5d 01 c0       	push   0xc0015df2
c001616c:	50                   	push   eax
c001616d:	e8 c8 80 00 00       	call   c001e23a <Process::createThread(void (*)(void*), void*, int)>
c0016172:	83 c4 10             	add    esp,0x10
c0016175:	c6 05 00 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f400,0x1
c001617c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617f:	66 3d 1d 03          	cmp    ax,0x31d
c0016183:	75 06                	jne    c001618b <sendKeyboardToken(KeyboardToken)+0x26f>
c0016185:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001618b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618e:	66 3d 1c 03          	cmp    ax,0x31c
c0016192:	75 06                	jne    c001619a <sendKeyboardToken(KeyboardToken)+0x27e>
c0016194:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001619a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619d:	66 3d 1b 03          	cmp    ax,0x31b
c00161a1:	75 06                	jne    c00161a9 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161a3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ac:	66 3d 1e 03          	cmp    ax,0x31e
c00161b0:	75 06                	jne    c00161b8 <sendKeyboardToken(KeyboardToken)+0x29c>
c00161b2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161bb:	66 3d 1f 03          	cmp    ax,0x31f
c00161bf:	75 06                	jne    c00161c7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161c1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ca:	66 3d 1a 03          	cmp    ax,0x31a
c00161ce:	75 06                	jne    c00161d6 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161d0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161d6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161da:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161dd:	83 f0 01             	xor    eax,0x1
c00161e0:	84 c0                	test   al,al
c00161e2:	74 77                	je     c001625b <sendKeyboardToken(KeyboardToken)+0x33f>
c00161e4:	a0 01 f1 02 c0       	mov    al,ds:0xc002f101
c00161e9:	84 c0                	test   al,al
c00161eb:	74 41                	je     c001622e <sendKeyboardToken(KeyboardToken)+0x312>
c00161ed:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161f5:	74 2b                	je     c0016222 <sendKeyboardToken(KeyboardToken)+0x306>
c00161f7:	8b 15 04 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f404
c00161fd:	89 d0                	mov    eax,edx
c00161ff:	c1 e0 02             	shl    eax,0x2
c0016202:	01 d0                	add    eax,edx
c0016204:	01 c0                	add    eax,eax
c0016206:	a3 04 f4 02 c0       	mov    ds:0xc002f404,eax
c001620b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001620e:	0f b7 c0             	movzx  eax,ax
c0016211:	8d 50 d0             	lea    edx,[eax-0x30]
c0016214:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0016219:	01 d0                	add    eax,edx
c001621b:	a3 04 f4 02 c0       	mov    ds:0xc002f404,eax
c0016220:	eb 6d                	jmp    c001628f <sendKeyboardToken(KeyboardToken)+0x373>
c0016222:	c7 05 04 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f404,0x0
c001622c:	eb 61                	jmp    c001628f <sendKeyboardToken(KeyboardToken)+0x373>
c001622e:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0016233:	85 c0                	test   eax,eax
c0016235:	74 18                	je     c001624f <sendKeyboardToken(KeyboardToken)+0x333>
c0016237:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c001623c:	0f b6 c0             	movzx  eax,al
c001623f:	83 ec 0c             	sub    esp,0xc
c0016242:	50                   	push   eax
c0016243:	e8 16 fc ff ff       	call   c0015e5e <sendKeyToTerminal(unsigned char)>
c0016248:	83 c4 10             	add    esp,0x10
c001624b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001624f:	c7 05 04 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f404,0x0
c0016259:	eb 34                	jmp    c001628f <sendKeyboardToken(KeyboardToken)+0x373>
c001625b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625e:	66 3d 01 01          	cmp    ax,0x101
c0016262:	75 2b                	jne    c001628f <sendKeyboardToken(KeyboardToken)+0x373>
c0016264:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0016269:	85 c0                	test   eax,eax
c001626b:	74 18                	je     c0016285 <sendKeyboardToken(KeyboardToken)+0x369>
c001626d:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0016272:	0f b6 c0             	movzx  eax,al
c0016275:	83 ec 0c             	sub    esp,0xc
c0016278:	50                   	push   eax
c0016279:	e8 e0 fb ff ff       	call   c0015e5e <sendKeyToTerminal(unsigned char)>
c001627e:	83 c4 10             	add    esp,0x10
c0016281:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016285:	c7 05 04 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f404,0x0
c001628f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016292:	83 f0 01             	xor    eax,0x1
c0016295:	84 c0                	test   al,al
c0016297:	74 4c                	je     c00162e5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016299:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001629c:	83 f0 01             	xor    eax,0x1
c001629f:	84 c0                	test   al,al
c00162a1:	74 42                	je     c00162e5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162a3:	a0 00 f1 02 c0       	mov    al,ds:0xc002f100
c00162a8:	83 f0 01             	xor    eax,0x1
c00162ab:	84 c0                	test   al,al
c00162ad:	74 36                	je     c00162e5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b2:	66 83 f8 1f          	cmp    ax,0x1f
c00162b6:	76 09                	jbe    c00162c1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162bb:	66 83 f8 7e          	cmp    ax,0x7e
c00162bf:	76 12                	jbe    c00162d3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c4:	66 83 f8 0a          	cmp    ax,0xa
c00162c8:	74 09                	je     c00162d3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162cd:	66 83 f8 08          	cmp    ax,0x8
c00162d1:	75 12                	jne    c00162e5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d6:	0f b6 c0             	movzx  eax,al
c00162d9:	83 ec 0c             	sub    esp,0xc
c00162dc:	50                   	push   eax
c00162dd:	e8 7c fb ff ff       	call   c0015e5e <sendKeyToTerminal(unsigned char)>
c00162e2:	83 c4 10             	add    esp,0x10
c00162e5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162e8:	83 f0 01             	xor    eax,0x1
c00162eb:	84 c0                	test   al,al
c00162ed:	74 4f                	je     c001633e <sendKeyboardToken(KeyboardToken)+0x422>
c00162ef:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162f2:	83 f0 01             	xor    eax,0x1
c00162f5:	84 c0                	test   al,al
c00162f7:	74 45                	je     c001633e <sendKeyboardToken(KeyboardToken)+0x422>
c00162f9:	a0 00 f1 02 c0       	mov    al,ds:0xc002f100
c00162fe:	84 c0                	test   al,al
c0016300:	74 3c                	je     c001633e <sendKeyboardToken(KeyboardToken)+0x422>
c0016302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016305:	66 83 f8 3f          	cmp    ax,0x3f
c0016309:	76 33                	jbe    c001633e <sendKeyboardToken(KeyboardToken)+0x422>
c001630b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630e:	66 83 f8 7f          	cmp    ax,0x7f
c0016312:	77 2a                	ja     c001633e <sendKeyboardToken(KeyboardToken)+0x422>
c0016314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016317:	88 c2                	mov    dl,al
c0016319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631c:	66 83 f8 5f          	cmp    ax,0x5f
c0016320:	76 04                	jbe    c0016326 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016322:	b0 20                	mov    al,0x20
c0016324:	eb 02                	jmp    c0016328 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016326:	b0 00                	mov    al,0x0
c0016328:	29 c2                	sub    edx,eax
c001632a:	88 d0                	mov    al,dl
c001632c:	83 e8 40             	sub    eax,0x40
c001632f:	0f b6 c0             	movzx  eax,al
c0016332:	83 ec 0c             	sub    esp,0xc
c0016335:	50                   	push   eax
c0016336:	e8 23 fb ff ff       	call   c0015e5e <sendKeyToTerminal(unsigned char)>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016341:	66 3d 00 03          	cmp    ax,0x300
c0016345:	75 0f                	jne    c0016356 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016347:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001634a:	83 f0 01             	xor    eax,0x1
c001634d:	84 c0                	test   al,al
c001634f:	74 05                	je     c0016356 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016351:	e8 3e aa ff ff       	call   c0010d94 <doTerminalCycle()>
c0016356:	90                   	nop
c0016357:	c9                   	leave  
c0016358:	c3                   	ret    

c0016359 <clearInternalKeybuffer(VgaText*)>:
c0016359:	55                   	push   ebp
c001635a:	89 e5                	mov    ebp,esp
c001635c:	83 ec 08             	sub    esp,0x8
c001635f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016362:	05 98 01 00 00       	add    eax,0x198
c0016367:	83 ec 0c             	sub    esp,0xc
c001636a:	50                   	push   eax
c001636b:	e8 2c a4 fe ff       	call   c000079c <strlen>
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016376:	81 c2 98 01 00 00    	add    edx,0x198
c001637c:	83 ec 04             	sub    esp,0x4
c001637f:	50                   	push   eax
c0016380:	6a 00                	push   0x0
c0016382:	52                   	push   edx
c0016383:	e8 f8 a3 fe ff       	call   c0000780 <memset>
c0016388:	83 c4 10             	add    esp,0x10
c001638b:	90                   	nop
c001638c:	c9                   	leave  
c001638d:	c3                   	ret    

c001638e <readKeyboard(VgaText*, char*, unsigned long)>:
c001638e:	55                   	push   ebp
c001638f:	89 e5                	mov    ebp,esp
c0016391:	83 ec 18             	sub    esp,0x18
c0016394:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c0016399:	85 c0                	test   eax,eax
c001639b:	74 2a                	je     c00163c7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001639d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00163a3:	8b 0d e8 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efe8
c00163a9:	83 ec 04             	sub    esp,0x4
c00163ac:	68 00 f0 02 c0       	push   0xc002f000
c00163b1:	83 ec 08             	sub    esp,0x8
c00163b4:	89 e2                	mov    edx,esp
c00163b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00163b9:	89 02                	mov    DWORD PTR [edx],eax
c00163bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00163be:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00163c2:	ff d1                	call   ecx
c00163c4:	83 c4 10             	add    esp,0x10
c00163c7:	83 ec 0c             	sub    esp,0xc
c00163ca:	68 63 ba 02 c0       	push   0xc002ba63
c00163cf:	e8 f7 ca ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00163d4:	83 c4 10             	add    esp,0x10
c00163d7:	fb                   	sti    
c00163d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163df:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163e3:	0f 84 a1 00 00 00    	je     c001648a <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c00163e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163ec:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163f2:	84 c0                	test   al,al
c00163f4:	75 28                	jne    c001641e <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c00163f6:	fa                   	cli    
c00163f7:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00163fc:	40                   	inc    eax
c00163fd:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0016402:	e8 77 80 00 00       	call   c001e47e <schedule()>
c0016407:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001640c:	48                   	dec    eax
c001640d:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0016412:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0016417:	85 c0                	test   eax,eax
c0016419:	75 ce                	jne    c00163e9 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001641b:	fb                   	sti    
c001641c:	eb cb                	jmp    c00163e9 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001641e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016421:	8d 50 01             	lea    edx,[eax+0x1]
c0016424:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016427:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001642a:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016430:	88 10                	mov    BYTE PTR [eax],dl
c0016432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016435:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001643b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001643e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016441:	05 98 01 00 00       	add    eax,0x198
c0016446:	83 ec 0c             	sub    esp,0xc
c0016449:	50                   	push   eax
c001644a:	e8 4d a3 fe ff       	call   c000079c <strlen>
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016455:	81 c2 98 01 00 00    	add    edx,0x198
c001645b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001645e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016461:	81 c2 98 01 00 00    	add    edx,0x198
c0016467:	83 ec 04             	sub    esp,0x4
c001646a:	50                   	push   eax
c001646b:	51                   	push   ecx
c001646c:	52                   	push   edx
c001646d:	e8 2e a2 fe ff       	call   c00006a0 <memmove>
c0016472:	83 c4 10             	add    esp,0x10
c0016475:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016478:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001647b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001647f:	0f 85 5a ff ff ff    	jne    c00163df <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0016485:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016488:	eb 03                	jmp    c001648d <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c001648a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001648d:	c9                   	leave  
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <Keyboard::Keyboard(char const*)>:
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016497:	83 ec 08             	sub    esp,0x8
c001649a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649e:	50                   	push   eax
c001649f:	e8 4c e0 ff ff       	call   c00144f0 <Device::Device(char const*)>
c00164a4:	83 c4 10             	add    esp,0x10
c00164a7:	ba 84 ba 02 c0       	mov    edx,0xc002ba84
c00164ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b0:	89 10                	mov    DWORD PTR [eax],edx
c00164b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00164c0:	c6 05 e4 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efe4,0x1
c00164c7:	90                   	nop
c00164c8:	83 c4 0c             	add    esp,0xc
c00164cb:	c3                   	ret    

c00164cc <Keyboard::~Keyboard()>:
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	ba 84 ba 02 c0       	mov    edx,0xc002ba84
c00164d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d8:	89 10                	mov    DWORD PTR [eax],edx
c00164da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164de:	83 ec 0c             	sub    esp,0xc
c00164e1:	50                   	push   eax
c00164e2:	e8 eb dc ff ff       	call   c00141d2 <Device::~Device()>
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	90                   	nop
c00164eb:	83 c4 0c             	add    esp,0xc
c00164ee:	c3                   	ret    
c00164ef:	90                   	nop

c00164f0 <Keyboard::~Keyboard()>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	83 ec 0c             	sub    esp,0xc
c00164f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164fa:	e8 cd ff ff ff       	call   c00164cc <Keyboard::~Keyboard()>
c00164ff:	83 c4 10             	add    esp,0x10
c0016502:	83 ec 08             	sub    esp,0x8
c0016505:	68 5c 01 00 00       	push   0x15c
c001650a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001650e:	e8 d8 c8 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0016513:	83 c4 10             	add    esp,0x10
c0016516:	83 c4 0c             	add    esp,0xc
c0016519:	c3                   	ret    

c001651a <LogicalDisk::close(int, int, void*)>:
c001651a:	83 c8 ff             	or     eax,0xffffffff
c001651d:	c3                   	ret    

c001651e <LogicalDisk::~LogicalDisk()>:
c001651e:	83 ec 0c             	sub    esp,0xc
c0016521:	ba 34 bb 02 c0       	mov    edx,0xc002bb34
c0016526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001652a:	89 10                	mov    DWORD PTR [eax],edx
c001652c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016530:	83 ec 0c             	sub    esp,0xc
c0016533:	50                   	push   eax
c0016534:	e8 99 dc ff ff       	call   c00141d2 <Device::~Device()>
c0016539:	83 c4 10             	add    esp,0x10
c001653c:	90                   	nop
c001653d:	83 c4 0c             	add    esp,0xc
c0016540:	c3                   	ret    
c0016541:	90                   	nop

c0016542 <LogicalDisk::~LogicalDisk()>:
c0016542:	83 ec 0c             	sub    esp,0xc
c0016545:	83 ec 0c             	sub    esp,0xc
c0016548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001654c:	e8 cd ff ff ff       	call   c001651e <LogicalDisk::~LogicalDisk()>
c0016551:	83 c4 10             	add    esp,0x10
c0016554:	83 ec 08             	sub    esp,0x8
c0016557:	68 74 01 00 00       	push   0x174
c001655c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016560:	e8 86 c8 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0016565:	83 c4 10             	add    esp,0x10
c0016568:	83 c4 0c             	add    esp,0xc
c001656b:	c3                   	ret    

c001656c <LogicalDisk::open(int, int, void*)>:
c001656c:	83 ec 18             	sub    esp,0x18
c001656f:	68 b0 ba 02 c0       	push   0xc002bab0
c0016574:	e8 0e 43 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0016579:	83 c8 ff             	or     eax,0xffffffff
c001657c:	83 c4 1c             	add    esp,0x1c
c001657f:	c3                   	ret    

c0016580 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016580:	53                   	push   ebx
c0016581:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016589:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001658d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016593:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016599:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001659f:	77 10                	ja     c00165b1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00165a1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00165a7:	89 d3                	mov    ebx,edx
c00165a9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00165af:	72 05                	jb     c00165b6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00165b1:	83 c8 ff             	or     eax,0xffffffff
c00165b4:	89 c2                	mov    edx,eax
c00165b6:	5b                   	pop    ebx
c00165b7:	c3                   	ret    

c00165b8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00165b8:	56                   	push   esi
c00165b9:	83 c8 ff             	or     eax,0xffffffff
c00165bc:	53                   	push   ebx
c00165bd:	89 c2                	mov    edx,eax
c00165bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00165c3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00165c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165cb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165d1:	77 27                	ja     c00165fa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165d3:	89 d8                	mov    eax,ebx
c00165d5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00165db:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00165e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165e6:	89 c2                	mov    edx,eax
c00165e8:	73 10                	jae    c00165fa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165ea:	89 c8                	mov    eax,ecx
c00165ec:	89 da                	mov    edx,ebx
c00165ee:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165f4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165fa:	5b                   	pop    ebx
c00165fb:	5e                   	pop    esi
c00165fc:	c3                   	ret    
c00165fd:	90                   	nop

c00165fe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165fe:	83 ec 1c             	sub    esp,0x1c
c0016601:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016605:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016609:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001660d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016611:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016615:	89 04 24             	mov    DWORD PTR [esp],eax
c0016618:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001661c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016624:	83 ec 08             	sub    esp,0x8
c0016627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001662b:	50                   	push   eax
c001662c:	e8 bf de ff ff       	call   c00144f0 <Device::Device(char const*)>
c0016631:	83 c4 10             	add    esp,0x10
c0016634:	ba 34 bb 02 c0       	mov    edx,0xc002bb34
c0016639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663d:	89 10                	mov    DWORD PTR [eax],edx
c001663f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016643:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001664a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016659:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016663:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016667:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001666b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001666f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016675:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001667b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001667f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016682:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016686:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001668c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001669a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00166a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166ae:	90                   	nop
c00166af:	83 c4 1c             	add    esp,0x1c
c00166b2:	c3                   	ret    
c00166b3:	90                   	nop

c00166b4 <LogicalDisk::assignDriveLetter()>:
c00166b4:	55                   	push   ebp
c00166b5:	57                   	push   edi
c00166b6:	56                   	push   esi
c00166b7:	53                   	push   ebx
c00166b8:	83 ec 14             	sub    esp,0x14
c00166bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166bf:	8b 3d 20 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f420
c00166c5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00166cb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00166cf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00166d5:	8b 3d 24 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f424
c00166db:	3c 01                	cmp    al,0x1
c00166dd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00166e1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00166e5:	19 c0                	sbb    eax,eax
c00166e7:	83 e0 02             	and    eax,0x2
c00166ea:	83 c0 41             	add    eax,0x41
c00166ed:	0f be e8             	movsx  ebp,al
c00166f0:	3c 43                	cmp    al,0x43
c00166f2:	75 10                	jne    c0016704 <LogicalDisk::assignDriveLetter()+0x50>
c00166f4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166fb:	75 5d                	jne    c001675a <LogicalDisk::assignDriveLetter()+0xa6>
c00166fd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016702:	75 56                	jne    c001675a <LogicalDisk::assignDriveLetter()+0xa6>
c0016704:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016707:	ba 01 00 00 00       	mov    edx,0x1
c001670c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016710:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016714:	d3 e2                	shl    edx,cl
c0016716:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001671a:	89 d7                	mov    edi,edx
c001671c:	89 d6                	mov    esi,edx
c001671e:	c1 ff 1f             	sar    edi,0x1f
c0016721:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016725:	21 f9                	and    ecx,edi
c0016727:	09 d1                	or     ecx,edx
c0016729:	75 2f                	jne    c001675a <LogicalDisk::assignDriveLetter()+0xa6>
c001672b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001672f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016733:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016739:	09 f2                	or     edx,esi
c001673b:	89 15 20 f4 02 c0    	mov    DWORD PTR ds:0xc002f420,edx
c0016741:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016745:	09 fa                	or     edx,edi
c0016747:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001674b:	89 15 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,edx
c0016751:	89 1c bd 40 f4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0bc0],ebx
c0016758:	eb 08                	jmp    c0016762 <LogicalDisk::assignDriveLetter()+0xae>
c001675a:	45                   	inc    ebp
c001675b:	40                   	inc    eax
c001675c:	3c 5b                	cmp    al,0x5b
c001675e:	75 90                	jne    c00166f0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016760:	31 c0                	xor    eax,eax
c0016762:	83 c4 14             	add    esp,0x14
c0016765:	5b                   	pop    ebx
c0016766:	5e                   	pop    esi
c0016767:	5f                   	pop    edi
c0016768:	5d                   	pop    ebp
c0016769:	c3                   	ret    

c001676a <LogicalDisk::mount()>:
c001676a:	56                   	push   esi
c001676b:	53                   	push   ebx
c001676c:	50                   	push   eax
c001676d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016771:	8b 1d b4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb4
c0016777:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016781:	85 db                	test   ebx,ebx
c0016783:	74 50                	je     c00167d5 <LogicalDisk::mount()+0x6b>
c0016785:	50                   	push   eax
c0016786:	50                   	push   eax
c0016787:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c001678d:	68 d4 ba 02 c0       	push   0xc002bad4
c0016792:	e8 34 c7 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0016797:	83 c4 0c             	add    esp,0xc
c001679a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00167a1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00167a3:	83 e8 41             	sub    eax,0x41
c00167a6:	50                   	push   eax
c00167a7:	56                   	push   esi
c00167a8:	53                   	push   ebx
c00167a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00167ac:	83 c4 10             	add    esp,0x10
c00167af:	84 c0                	test   al,al
c00167b1:	74 08                	je     c00167bb <LogicalDisk::mount()+0x51>
c00167b3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00167b9:	eb 1c                	jmp    c00167d7 <LogicalDisk::mount()+0x6d>
c00167bb:	51                   	push   ecx
c00167bc:	51                   	push   ecx
c00167bd:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c00167c3:	68 ef ba 02 c0       	push   0xc002baef
c00167c8:	e8 fe c6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00167cd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00167d0:	83 c4 10             	add    esp,0x10
c00167d3:	eb ac                	jmp    c0016781 <LogicalDisk::mount()+0x17>
c00167d5:	31 c0                	xor    eax,eax
c00167d7:	5a                   	pop    edx
c00167d8:	5b                   	pop    ebx
c00167d9:	5e                   	pop    esi
c00167da:	c3                   	ret    
c00167db:	90                   	nop

c00167dc <LogicalDisk::unmount()>:
c00167dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167e0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167ea:	c3                   	ret    
c00167eb:	90                   	nop

c00167ec <LogicalDisk::eject()>:
c00167ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00167f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167fc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167ff:	90                   	nop

c0016800 <LogicalDisk::unassignDriveLetter()>:
c0016800:	57                   	push   edi
c0016801:	56                   	push   esi
c0016802:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016806:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001680d:	84 c9                	test   cl,cl
c001680f:	75 0f                	jne    c0016820 <LogicalDisk::unassignDriveLetter()+0x20>
c0016811:	c7 44 24 0c 0a bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb0a
c0016819:	5e                   	pop    esi
c001681a:	5f                   	pop    edi
c001681b:	e9 67 40 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c0016820:	83 e9 41             	sub    ecx,0x41
c0016823:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001682a:	b8 01 00 00 00       	mov    eax,0x1
c001682f:	c7 04 8d 40 f4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0bc0],0x0
c001683a:	d3 e0                	shl    eax,cl
c001683c:	89 c7                	mov    edi,eax
c001683e:	f7 d0                	not    eax
c0016840:	c1 ff 1f             	sar    edi,0x1f
c0016843:	21 05 20 f4 02 c0    	and    DWORD PTR ds:0xc002f420,eax
c0016849:	89 fe                	mov    esi,edi
c001684b:	f7 d6                	not    esi
c001684d:	21 35 24 f4 02 c0    	and    DWORD PTR ds:0xc002f424,esi
c0016853:	5e                   	pop    esi
c0016854:	5f                   	pop    edi
c0016855:	c3                   	ret    

c0016856 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016856:	57                   	push   edi
c0016857:	56                   	push   esi
c0016858:	53                   	push   ebx
c0016859:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001685d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016861:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016865:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016869:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001686f:	77 41                	ja     c00168b2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016871:	99                   	cdq    
c0016872:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016878:	01 c8                	add    eax,ecx
c001687a:	11 da                	adc    edx,ebx
c001687c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016882:	19 d7                	sbb    edi,edx
c0016884:	72 33                	jb     c00168b9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016886:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001688c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016892:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016896:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001689a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168a0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168aa:	5b                   	pop    ebx
c00168ab:	5e                   	pop    esi
c00168ac:	5f                   	pop    edi
c00168ad:	e9 f8 0a 00 00       	jmp    c00173aa <VCache::read(unsigned long long, int, void*)>
c00168b2:	b8 05 00 00 00       	mov    eax,0x5
c00168b7:	eb 05                	jmp    c00168be <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00168b9:	b8 07 00 00 00       	mov    eax,0x7
c00168be:	5b                   	pop    ebx
c00168bf:	5e                   	pop    esi
c00168c0:	5f                   	pop    edi
c00168c1:	c3                   	ret    

c00168c2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00168c2:	57                   	push   edi
c00168c3:	56                   	push   esi
c00168c4:	53                   	push   ebx
c00168c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00168c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00168d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168d5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00168db:	77 41                	ja     c001691e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00168dd:	99                   	cdq    
c00168de:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00168e4:	01 c8                	add    eax,ecx
c00168e6:	11 da                	adc    edx,ebx
c00168e8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168ee:	19 d7                	sbb    edi,edx
c00168f0:	72 33                	jb     c0016925 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168f2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168f8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016902:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016906:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001690c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016912:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016916:	5b                   	pop    ebx
c0016917:	5e                   	pop    esi
c0016918:	5f                   	pop    edi
c0016919:	e9 96 09 00 00       	jmp    c00172b4 <VCache::write(unsigned long long, int, void*)>
c001691e:	b8 05 00 00 00       	mov    eax,0x5
c0016923:	eb 05                	jmp    c001692a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016925:	b8 07 00 00 00       	mov    eax,0x7
c001692a:	5b                   	pop    ebx
c001692b:	5e                   	pop    esi
c001692c:	5f                   	pop    edi
c001692d:	c3                   	ret    

c001692e <Mouse::Mouse(char const*)>:
c001692e:	83 ec 0c             	sub    esp,0xc
c0016931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016935:	83 ec 08             	sub    esp,0x8
c0016938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001693c:	50                   	push   eax
c001693d:	e8 ae db ff ff       	call   c00144f0 <Device::Device(char const*)>
c0016942:	83 c4 10             	add    esp,0x10
c0016945:	ba 60 bb 02 c0       	mov    edx,0xc002bb60
c001694a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001694e:	89 10                	mov    DWORD PTR [eax],edx
c0016950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016954:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001695e:	90                   	nop
c001695f:	83 c4 0c             	add    esp,0xc
c0016962:	c3                   	ret    
c0016963:	90                   	nop

c0016964 <Mouse::~Mouse()>:
c0016964:	83 ec 0c             	sub    esp,0xc
c0016967:	ba 60 bb 02 c0       	mov    edx,0xc002bb60
c001696c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016970:	89 10                	mov    DWORD PTR [eax],edx
c0016972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016976:	83 ec 0c             	sub    esp,0xc
c0016979:	50                   	push   eax
c001697a:	e8 53 d8 ff ff       	call   c00141d2 <Device::~Device()>
c001697f:	83 c4 10             	add    esp,0x10
c0016982:	90                   	nop
c0016983:	83 c4 0c             	add    esp,0xc
c0016986:	c3                   	ret    
c0016987:	90                   	nop

c0016988 <Mouse::~Mouse()>:
c0016988:	83 ec 0c             	sub    esp,0xc
c001698b:	83 ec 0c             	sub    esp,0xc
c001698e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016992:	e8 cd ff ff ff       	call   c0016964 <Mouse::~Mouse()>
c0016997:	83 c4 10             	add    esp,0x10
c001699a:	83 ec 08             	sub    esp,0x8
c001699d:	68 58 01 00 00       	push   0x158
c00169a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169a6:	e8 40 c4 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	83 c4 0c             	add    esp,0xc
c00169b1:	c3                   	ret    

c00169b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00169b2:	55                   	push   ebp
c00169b3:	57                   	push   edi
c00169b4:	56                   	push   esi
c00169b5:	53                   	push   ebx
c00169b6:	81 ec 20 01 00 00    	sub    esp,0x120
c00169bc:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00169c3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00169ca:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00169d1:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00169d8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00169dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00169e4:	56                   	push   esi
c00169e5:	68 84 bb 02 c0       	push   0xc002bb84
c00169ea:	e8 dc c4 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00169ef:	58                   	pop    eax
c00169f0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169f7:	e8 f0 db ff ff       	call   c00145ec <Device::getName()>
c00169fc:	5a                   	pop    edx
c00169fd:	59                   	pop    ecx
c00169fe:	50                   	push   eax
c00169ff:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016a03:	53                   	push   ebx
c0016a04:	e8 33 9e fe ff       	call   c000083c <strcpy>
c0016a09:	5d                   	pop    ebp
c0016a0a:	58                   	pop    eax
c0016a0b:	68 b5 bb 02 c0       	push   0xc002bbb5
c0016a10:	53                   	push   ebx
c0016a11:	e8 66 9f fe ff       	call   c000097c <strcat>
c0016a16:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016a1d:	e8 f2 8e ff ff       	call   c000f914 <malloc>
c0016a22:	83 c4 0c             	add    esp,0xc
c0016a25:	89 c5                	mov    ebp,eax
c0016a27:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a2f:	57                   	push   edi
c0016a30:	56                   	push   esi
c0016a31:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016a38:	53                   	push   ebx
c0016a39:	50                   	push   eax
c0016a3a:	e8 bf fb ff ff       	call   c00165fe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a3f:	83 c4 14             	add    esp,0x14
c0016a42:	55                   	push   ebp
c0016a43:	e8 6c fc ff ff       	call   c00166b4 <LogicalDisk::assignDriveLetter()>
c0016a48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016a4b:	0f be d8             	movsx  ebx,al
c0016a4e:	e8 17 fd ff ff       	call   c001676a <LogicalDisk::mount()>
c0016a53:	58                   	pop    eax
c0016a54:	5a                   	pop    edx
c0016a55:	55                   	push   ebp
c0016a56:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a5d:	e8 9e d8 ff ff       	call   c0014300 <Device::addChild(Device*)>
c0016a62:	59                   	pop    ecx
c0016a63:	5e                   	pop    esi
c0016a64:	53                   	push   ebx
c0016a65:	68 c0 bb 02 c0       	push   0xc002bbc0
c0016a6a:	e8 5c c4 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0016a6f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a75:	5b                   	pop    ebx
c0016a76:	5e                   	pop    esi
c0016a77:	5f                   	pop    edi
c0016a78:	5d                   	pop    ebp
c0016a79:	c3                   	ret    

c0016a7a <createPartitionsForDisk(PhysicalDisk*)>:
c0016a7a:	55                   	push   ebp
c0016a7b:	57                   	push   edi
c0016a7c:	56                   	push   esi
c0016a7d:	53                   	push   ebx
c0016a7e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a84:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a8b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a91:	3d 00 02 00 00       	cmp    eax,0x200
c0016a96:	74 27                	je     c0016abf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a98:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a9e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016aa4:	83 ec 10             	sub    esp,0x10
c0016aa7:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016aab:	99                   	cdq    
c0016aac:	c1 e6 0a             	shl    esi,0xa
c0016aaf:	52                   	push   edx
c0016ab0:	89 fd                	mov    ebp,edi
c0016ab2:	50                   	push   eax
c0016ab3:	55                   	push   ebp
c0016ab4:	56                   	push   esi
c0016ab5:	e8 ea 06 01 00       	call   c00271a4 <__udivdi3>
c0016aba:	e9 b1 00 00 00       	jmp    c0016b70 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016abf:	83 ec 0c             	sub    esp,0xc
c0016ac2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ac4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016ac8:	56                   	push   esi
c0016ac9:	6a 01                	push   0x1
c0016acb:	6a 00                	push   0x0
c0016acd:	6a 00                	push   0x0
c0016acf:	53                   	push   ebx
c0016ad0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016ad3:	83 c4 20             	add    esp,0x20
c0016ad6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016ade:	75 0a                	jne    c0016aea <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016ae0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016ae8:	74 2c                	je     c0016b16 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016aea:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016af0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016af6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016afc:	83 ec 10             	sub    esp,0x10
c0016aff:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b03:	89 f7                	mov    edi,esi
c0016b05:	c1 e0 0a             	shl    eax,0xa
c0016b08:	c1 ff 1f             	sar    edi,0x1f
c0016b0b:	57                   	push   edi
c0016b0c:	56                   	push   esi
c0016b0d:	52                   	push   edx
c0016b0e:	50                   	push   eax
c0016b0f:	e8 90 06 01 00       	call   c00271a4 <__udivdi3>
c0016b14:	eb 5a                	jmp    c0016b70 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016b16:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016b1d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016b24:	83 e1 7f             	and    ecx,0x7f
c0016b27:	83 e0 7f             	and    eax,0x7f
c0016b2a:	01 c1                	add    ecx,eax
c0016b2c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016b33:	83 e0 7f             	and    eax,0x7f
c0016b36:	01 c1                	add    ecx,eax
c0016b38:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016b3f:	83 e0 7f             	and    eax,0x7f
c0016b42:	00 c1                	add    cl,al
c0016b44:	74 41                	je     c0016b87 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b46:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b4c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b52:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b58:	83 ec 10             	sub    esp,0x10
c0016b5b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b5f:	89 f7                	mov    edi,esi
c0016b61:	c1 e0 0a             	shl    eax,0xa
c0016b64:	c1 ff 1f             	sar    edi,0x1f
c0016b67:	57                   	push   edi
c0016b68:	56                   	push   esi
c0016b69:	52                   	push   edx
c0016b6a:	50                   	push   eax
c0016b6b:	e8 34 06 01 00       	call   c00271a4 <__udivdi3>
c0016b70:	83 c4 14             	add    esp,0x14
c0016b73:	52                   	push   edx
c0016b74:	50                   	push   eax
c0016b75:	6a 00                	push   0x0
c0016b77:	6a 00                	push   0x0
c0016b79:	53                   	push   ebx
c0016b7a:	e8 33 fe ff ff       	call   c00169b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b7f:	83 c4 20             	add    esp,0x20
c0016b82:	e9 79 01 00 00       	jmp    c0016d00 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b87:	89 f0                	mov    eax,esi
c0016b89:	31 f6                	xor    esi,esi
c0016b8b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b92:	75 02                	jne    c0016b96 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b94:	89 f1                	mov    ecx,esi
c0016b96:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b9d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016ba4:	c1 e2 08             	shl    edx,0x8
c0016ba7:	c1 e7 10             	shl    edi,0x10
c0016baa:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016bb2:	09 fa                	or     edx,edi
c0016bb4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016bbc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016bc3:	83 c0 10             	add    eax,0x10
c0016bc6:	09 fa                	or     edx,edi
c0016bc8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016bcf:	c1 e7 18             	shl    edi,0x18
c0016bd2:	09 fa                	or     edx,edi
c0016bd4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016bdb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016bdf:	c1 e7 10             	shl    edi,0x10
c0016be2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016be9:	c1 e2 08             	shl    edx,0x8
c0016bec:	09 fa                	or     edx,edi
c0016bee:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016bf5:	09 fa                	or     edx,edi
c0016bf7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016bfe:	c1 e7 18             	shl    edi,0x18
c0016c01:	09 fa                	or     edx,edi
c0016c03:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016c07:	46                   	inc    esi
c0016c08:	83 fe 04             	cmp    esi,0x4
c0016c0b:	0f 85 7a ff ff ff    	jne    c0016b8b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c15:	83 f0 01             	xor    eax,0x1
c0016c18:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016c1c:	75 57                	jne    c0016c75 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c22:	83 f0 01             	xor    eax,0x1
c0016c25:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016c29:	75 4a                	jne    c0016c75 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c2b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016c2f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c37:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c3f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c45:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c4b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c51:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c55:	89 f7                	mov    edi,esi
c0016c57:	c1 e0 0a             	shl    eax,0xa
c0016c5a:	c1 ff 1f             	sar    edi,0x1f
c0016c5d:	57                   	push   edi
c0016c5e:	56                   	push   esi
c0016c5f:	52                   	push   edx
c0016c60:	50                   	push   eax
c0016c61:	e8 3e 05 01 00       	call   c00271a4 <__udivdi3>
c0016c66:	83 c4 10             	add    esp,0x10
c0016c69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c6d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c71:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c75:	84 c9                	test   cl,cl
c0016c77:	74 53                	je     c0016ccc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c79:	0f b6 c9             	movzx  ecx,cl
c0016c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c84:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c88:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c94:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c98:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ca0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016ca4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ca8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cac:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016cb0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016cb4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016cb8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016cbc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016cc0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cc4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016cc8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016ccc:	31 ed                	xor    ebp,ebp
c0016cce:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016cd2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016cd6:	89 f8                	mov    eax,edi
c0016cd8:	09 f0                	or     eax,esi
c0016cda:	74 1e                	je     c0016cfa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cdc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016ce0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016ce4:	89 d1                	mov    ecx,edx
c0016ce6:	09 c1                	or     ecx,eax
c0016ce8:	74 10                	je     c0016cfa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cea:	83 ec 0c             	sub    esp,0xc
c0016ced:	57                   	push   edi
c0016cee:	56                   	push   esi
c0016cef:	52                   	push   edx
c0016cf0:	50                   	push   eax
c0016cf1:	53                   	push   ebx
c0016cf2:	e8 bb fc ff ff       	call   c00169b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016cf7:	83 c4 20             	add    esp,0x20
c0016cfa:	45                   	inc    ebp
c0016cfb:	83 fd 04             	cmp    ebp,0x4
c0016cfe:	75 ce                	jne    c0016cce <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016d00:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016d06:	5b                   	pop    ebx
c0016d07:	5e                   	pop    esi
c0016d08:	5f                   	pop    edi
c0016d09:	5d                   	pop    ebp
c0016d0a:	c3                   	ret    
c0016d0b:	90                   	nop

c0016d0c <Serial::Serial(char const*)>:
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d13:	83 ec 08             	sub    esp,0x8
c0016d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1a:	50                   	push   eax
c0016d1b:	e8 d0 d7 ff ff       	call   c00144f0 <Device::Device(char const*)>
c0016d20:	83 c4 10             	add    esp,0x10
c0016d23:	ba ec bb 02 c0       	mov    edx,0xc002bbec
c0016d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2c:	89 10                	mov    DWORD PTR [eax],edx
c0016d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d32:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016d3c:	90                   	nop
c0016d3d:	83 c4 0c             	add    esp,0xc
c0016d40:	c3                   	ret    
c0016d41:	90                   	nop

c0016d42 <Serial::~Serial()>:
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	ba ec bb 02 c0       	mov    edx,0xc002bbec
c0016d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4e:	89 10                	mov    DWORD PTR [eax],edx
c0016d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	50                   	push   eax
c0016d58:	e8 75 d4 ff ff       	call   c00141d2 <Device::~Device()>
c0016d5d:	83 c4 10             	add    esp,0x10
c0016d60:	90                   	nop
c0016d61:	83 c4 0c             	add    esp,0xc
c0016d64:	c3                   	ret    
c0016d65:	90                   	nop

c0016d66 <Serial::~Serial()>:
c0016d66:	83 ec 0c             	sub    esp,0xc
c0016d69:	83 ec 0c             	sub    esp,0xc
c0016d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d70:	e8 cd ff ff ff       	call   c0016d42 <Serial::~Serial()>
c0016d75:	83 c4 10             	add    esp,0x10
c0016d78:	83 ec 08             	sub    esp,0x8
c0016d7b:	68 58 01 00 00       	push   0x158
c0016d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d84:	e8 62 c0 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	83 c4 0c             	add    esp,0xc
c0016d8f:	c3                   	ret    

c0016d90 <Timer::Timer(char const*)>:
c0016d90:	83 ec 0c             	sub    esp,0xc
c0016d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d97:	83 ec 08             	sub    esp,0x8
c0016d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d9e:	50                   	push   eax
c0016d9f:	e8 4c d7 ff ff       	call   c00144f0 <Device::Device(char const*)>
c0016da4:	83 c4 10             	add    esp,0x10
c0016da7:	ba 30 bc 02 c0       	mov    edx,0xc002bc30
c0016dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db0:	89 10                	mov    DWORD PTR [eax],edx
c0016db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016dc0:	90                   	nop
c0016dc1:	83 c4 0c             	add    esp,0xc
c0016dc4:	c3                   	ret    
c0016dc5:	90                   	nop

c0016dc6 <Timer::~Timer()>:
c0016dc6:	83 ec 0c             	sub    esp,0xc
c0016dc9:	ba 30 bc 02 c0       	mov    edx,0xc002bc30
c0016dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd2:	89 10                	mov    DWORD PTR [eax],edx
c0016dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd8:	83 ec 0c             	sub    esp,0xc
c0016ddb:	50                   	push   eax
c0016ddc:	e8 f1 d3 ff ff       	call   c00141d2 <Device::~Device()>
c0016de1:	83 c4 10             	add    esp,0x10
c0016de4:	90                   	nop
c0016de5:	83 c4 0c             	add    esp,0xc
c0016de8:	c3                   	ret    
c0016de9:	90                   	nop

c0016dea <Timer::~Timer()>:
c0016dea:	83 ec 0c             	sub    esp,0xc
c0016ded:	83 ec 0c             	sub    esp,0xc
c0016df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016df4:	e8 cd ff ff ff       	call   c0016dc6 <Timer::~Timer()>
c0016df9:	83 c4 10             	add    esp,0x10
c0016dfc:	83 ec 08             	sub    esp,0x8
c0016dff:	68 5c 01 00 00       	push   0x15c
c0016e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e08:	e8 de bf ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0016e0d:	83 c4 10             	add    esp,0x10
c0016e10:	83 c4 0c             	add    esp,0xc
c0016e13:	c3                   	ret    

c0016e14 <Timer::read()>:
c0016e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e18:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e1e:	c3                   	ret    

c0016e1f <timerHandler(unsigned long long)>:
c0016e1f:	55                   	push   ebp
c0016e20:	57                   	push   edi
c0016e21:	56                   	push   esi
c0016e22:	53                   	push   ebx
c0016e23:	83 ec 0c             	sub    esp,0xc
c0016e26:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e2a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016e2e:	01 35 b0 f4 02 c0    	add    DWORD PTR ds:0xc002f4b0,esi
c0016e34:	11 3d b4 f4 02 c0    	adc    DWORD PTR ds:0xc002f4b4,edi
c0016e3a:	80 3d 2d ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee2d,0x0
c0016e41:	0f 84 42 01 00 00    	je     c0016f89 <timerHandler(unsigned long long)+0x16a>
c0016e47:	fa                   	cli    
c0016e48:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c0016e57:	68 78 23 03 c0       	push   0xc0032378
c0016e5c:	e8 c9 23 01 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e61:	83 c4 10             	add    esp,0x10
c0016e64:	84 c0                	test   al,al
c0016e66:	0f 85 a2 00 00 00    	jne    c0016f0e <timerHandler(unsigned long long)+0xef>
c0016e6c:	83 ec 0c             	sub    esp,0xc
c0016e6f:	68 78 23 03 c0       	push   0xc0032378
c0016e74:	e8 cd 23 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e79:	83 c4 10             	add    esp,0x10
c0016e7c:	89 c3                	mov    ebx,eax
c0016e7e:	83 ec 0c             	sub    esp,0xc
c0016e81:	68 78 23 03 c0       	push   0xc0032378
c0016e86:	e8 bb 23 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e8b:	c7 04 24 78 23 03 c0 	mov    DWORD PTR [esp],0xc0032378
c0016e92:	89 c5                	mov    ebp,eax
c0016e94:	e8 b5 23 01 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e99:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e9c:	83 c4 10             	add    esp,0x10
c0016e9f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016ea2:	39 15 b0 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4b0,edx
c0016ea8:	a1 b4 f4 02 c0       	mov    eax,ds:0xc002f4b4
c0016ead:	19 c8                	sbb    eax,ecx
c0016eaf:	72 21                	jb     c0016ed2 <timerHandler(unsigned long long)+0xb3>
c0016eb1:	83 ec 0c             	sub    esp,0xc
c0016eb4:	55                   	push   ebp
c0016eb5:	e8 88 7a 00 00       	call   c001e942 <unblockTask(ThreadControlBlock*)>
c0016eba:	83 c4 10             	add    esp,0x10
c0016ebd:	39 eb                	cmp    ebx,ebp
c0016ebf:	75 21                	jne    c0016ee2 <timerHandler(unsigned long long)+0xc3>
c0016ec1:	83 ec 0c             	sub    esp,0xc
c0016ec4:	68 78 23 03 c0       	push   0xc0032378
c0016ec9:	e8 78 23 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ece:	89 c3                	mov    ebx,eax
c0016ed0:	eb 0d                	jmp    c0016edf <timerHandler(unsigned long long)+0xc0>
c0016ed2:	50                   	push   eax
c0016ed3:	50                   	push   eax
c0016ed4:	55                   	push   ebp
c0016ed5:	68 78 23 03 c0       	push   0xc0032378
c0016eda:	e8 1d 24 01 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016edf:	83 c4 10             	add    esp,0x10
c0016ee2:	83 ec 0c             	sub    esp,0xc
c0016ee5:	68 78 23 03 c0       	push   0xc0032378
c0016eea:	e8 3b 23 01 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	84 c0                	test   al,al
c0016ef4:	75 18                	jne    c0016f0e <timerHandler(unsigned long long)+0xef>
c0016ef6:	83 ec 0c             	sub    esp,0xc
c0016ef9:	68 78 23 03 c0       	push   0xc0032378
c0016efe:	e8 43 23 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f03:	83 c4 10             	add    esp,0x10
c0016f06:	39 d8                	cmp    eax,ebx
c0016f08:	0f 85 70 ff ff ff    	jne    c0016e7e <timerHandler(unsigned long long)+0x5f>
c0016f0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f13:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016f17:	74 3d                	je     c0016f56 <timerHandler(unsigned long long)+0x137>
c0016f19:	80 3d 2c ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee2c,0x0
c0016f20:	74 34                	je     c0016f56 <timerHandler(unsigned long long)+0x137>
c0016f22:	fa                   	cli    
c0016f23:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c0016f29:	31 d2                	xor    edx,edx
c0016f2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f30:	89 f9                	mov    ecx,edi
c0016f32:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016f35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f3a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016f3d:	39 c6                	cmp    esi,eax
c0016f3f:	19 d1                	sbb    ecx,edx
c0016f41:	72 05                	jb     c0016f48 <timerHandler(unsigned long long)+0x129>
c0016f43:	e8 36 75 00 00       	call   c001e47e <schedule()>
c0016f48:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0016f4d:	48                   	dec    eax
c0016f4e:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0016f53:	75 01                	jne    c0016f56 <timerHandler(unsigned long long)+0x137>
c0016f55:	fb                   	sti    
c0016f56:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c0016f5b:	48                   	dec    eax
c0016f5c:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c0016f61:	75 18                	jne    c0016f7b <timerHandler(unsigned long long)+0x15c>
c0016f63:	83 3d 60 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032360,0x0
c0016f6a:	74 0f                	je     c0016f7b <timerHandler(unsigned long long)+0x15c>
c0016f6c:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c0016f76:	e8 03 75 00 00       	call   c001e47e <schedule()>
c0016f7b:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0016f80:	48                   	dec    eax
c0016f81:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0016f86:	75 01                	jne    c0016f89 <timerHandler(unsigned long long)+0x16a>
c0016f88:	fb                   	sti    
c0016f89:	83 c4 0c             	add    esp,0xc
c0016f8c:	5b                   	pop    ebx
c0016f8d:	5e                   	pop    esi
c0016f8e:	5f                   	pop    edi
c0016f8f:	5d                   	pop    ebp
c0016f90:	c3                   	ret    

c0016f91 <setupTimer(int)>:
c0016f91:	57                   	push   edi
c0016f92:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0016f97:	56                   	push   esi
c0016f98:	53                   	push   ebx
c0016f99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f9d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fa3:	83 ec 0c             	sub    esp,0xc
c0016fa6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fac:	e8 3b d6 ff ff       	call   c00145ec <Device::getName()>
c0016fb1:	83 c4 10             	add    esp,0x10
c0016fb4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016fb7:	0f 85 8d 00 00 00    	jne    c001704a <setupTimer(int)+0xb9>
c0016fbd:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0016fc2:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016fc9:	74 7f                	je     c001704a <setupTimer(int)+0xb9>
c0016fcb:	83 ec 0c             	sub    esp,0xc
c0016fce:	68 5c 01 00 00       	push   0x15c
c0016fd3:	e8 3c 89 ff ff       	call   c000f914 <malloc>
c0016fd8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fdb:	89 c3                	mov    ebx,eax
c0016fdd:	e8 90 fd 00 00       	call   c0026d72 <PIT::PIT()>
c0016fe2:	59                   	pop    ecx
c0016fe3:	5f                   	pop    edi
c0016fe4:	53                   	push   ebx
c0016fe5:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c0016feb:	e8 10 d3 ff ff       	call   c0014300 <Device::addChild(Device*)>
c0016ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ff2:	6a 00                	push   0x0
c0016ff4:	6a 00                	push   0x0
c0016ff6:	56                   	push   esi
c0016ff7:	53                   	push   ebx
c0016ff8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ffb:	83 c4 14             	add    esp,0x14
c0016ffe:	68 60 01 00 00       	push   0x160
c0017003:	e8 0c 89 ff ff       	call   c000f914 <malloc>
c0017008:	89 04 24             	mov    DWORD PTR [esp],eax
c001700b:	89 c7                	mov    edi,eax
c001700d:	e8 10 fc 00 00       	call   c0026c22 <APICTimer::APICTimer()>
c0017012:	6a 00                	push   0x0
c0017014:	6a 00                	push   0x0
c0017016:	56                   	push   esi
c0017017:	57                   	push   edi
c0017018:	e8 07 fb 00 00       	call   c0026b24 <APICTimer::open(int, int, void*)>
c001701d:	83 c4 20             	add    esp,0x20
c0017020:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017022:	6a 00                	push   0x0
c0017024:	6a 00                	push   0x0
c0017026:	6a 00                	push   0x0
c0017028:	53                   	push   ebx
c0017029:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001702c:	58                   	pop    eax
c001702d:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017032:	5a                   	pop    edx
c0017033:	57                   	push   edi
c0017034:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001703a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0017040:	e8 bb d2 ff ff       	call   c0014300 <Device::addChild(Device*)>
c0017045:	83 c4 10             	add    esp,0x10
c0017048:	eb 33                	jmp    c001707d <setupTimer(int)+0xec>
c001704a:	83 ec 0c             	sub    esp,0xc
c001704d:	68 5c 01 00 00       	push   0x15c
c0017052:	e8 bd 88 ff ff       	call   c000f914 <malloc>
c0017057:	89 04 24             	mov    DWORD PTR [esp],eax
c001705a:	89 c3                	mov    ebx,eax
c001705c:	e8 11 fd 00 00       	call   c0026d72 <PIT::PIT()>
c0017061:	58                   	pop    eax
c0017062:	5a                   	pop    edx
c0017063:	53                   	push   ebx
c0017064:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c001706a:	e8 91 d2 ff ff       	call   c0014300 <Device::addChild(Device*)>
c001706f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017071:	6a 00                	push   0x0
c0017073:	6a 00                	push   0x0
c0017075:	56                   	push   esi
c0017076:	53                   	push   ebx
c0017077:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001707a:	83 c4 20             	add    esp,0x20
c001707d:	89 d8                	mov    eax,ebx
c001707f:	5b                   	pop    ebx
c0017080:	5e                   	pop    esi
c0017081:	5f                   	pop    edi
c0017082:	c3                   	ret    
c0017083:	90                   	nop

c0017084 <VCache::VCache(PhysicalDisk*)>:
c0017084:	53                   	push   ebx
c0017085:	83 ec 18             	sub    esp,0x18
c0017088:	ba 60 bc 02 c0       	mov    edx,0xc002bc60
c001708d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017091:	89 10                	mov    DWORD PTR [eax],edx
c0017093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017097:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001709e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00170a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ad:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00170b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00170bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00170c6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00170cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00170d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170dc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00170eb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00170f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fe:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017106:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001710a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017115:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001711d:	83 ec 0c             	sub    esp,0xc
c0017120:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017124:	e8 eb 87 ff ff       	call   c000f914 <malloc>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	89 c3                	mov    ebx,eax
c001712e:	83 ec 0c             	sub    esp,0xc
c0017131:	53                   	push   ebx
c0017132:	e8 f1 70 00 00       	call   c001e228 <Mutex::Mutex()>
c0017137:	83 c4 10             	add    esp,0x10
c001713a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001713e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017145:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017149:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001714c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017150:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017157:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001715b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017165:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017168:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001716c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017172:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017178:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001717c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001717f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017186:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001718a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001718e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017194:	05 00 01 00 00       	add    eax,0x100
c0017199:	c1 e0 04             	shl    eax,0x4
c001719c:	83 ec 0c             	sub    esp,0xc
c001719f:	50                   	push   eax
c00171a0:	e8 6f 87 ff ff       	call   c000f914 <malloc>
c00171a5:	83 c4 10             	add    esp,0x10
c00171a8:	89 c2                	mov    edx,eax
c00171aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00171b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171b5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00171bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171c0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00171c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171c8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171ce:	c1 e0 07             	shl    eax,0x7
c00171d1:	83 ec 0c             	sub    esp,0xc
c00171d4:	50                   	push   eax
c00171d5:	e8 3a 87 ff ff       	call   c000f914 <malloc>
c00171da:	83 c4 10             	add    esp,0x10
c00171dd:	89 c2                	mov    edx,eax
c00171df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171e3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00171e6:	90                   	nop
c00171e7:	83 c4 18             	add    esp,0x18
c00171ea:	5b                   	pop    ebx
c00171eb:	c3                   	ret    

c00171ec <VCache::invalidateReadBuffer()>:
c00171ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171f0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00171f6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00171fa:	c3                   	ret    
c00171fb:	90                   	nop

c00171fc <VCache::writeWriteBuffer()>:
c00171fc:	53                   	push   ebx
c00171fd:	83 ec 14             	sub    esp,0x14
c0017200:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017204:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017207:	8b 10                	mov    edx,DWORD PTR [eax]
c0017209:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001720c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001720f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017212:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017215:	50                   	push   eax
c0017216:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017219:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017220:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017227:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001722b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017232:	83 c4 28             	add    esp,0x28
c0017235:	5b                   	pop    ebx
c0017236:	c3                   	ret    
c0017237:	90                   	nop

c0017238 <VCache::~VCache()>:
c0017238:	83 ec 0c             	sub    esp,0xc
c001723b:	ba 60 bc 02 c0       	mov    edx,0xc002bc60
c0017240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017244:	89 10                	mov    DWORD PTR [eax],edx
c0017246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001724a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001724d:	84 c0                	test   al,al
c001724f:	74 0f                	je     c0017260 <VCache::~VCache()+0x28>
c0017251:	83 ec 0c             	sub    esp,0xc
c0017254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017258:	e8 9f ff ff ff       	call   c00171fc <VCache::writeWriteBuffer()>
c001725d:	83 c4 10             	add    esp,0x10
c0017260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017264:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017267:	83 ec 0c             	sub    esp,0xc
c001726a:	50                   	push   eax
c001726b:	e8 b4 86 ff ff       	call   c000f924 <free>
c0017270:	83 c4 10             	add    esp,0x10
c0017273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017277:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001727a:	83 ec 0c             	sub    esp,0xc
c001727d:	50                   	push   eax
c001727e:	e8 a1 86 ff ff       	call   c000f924 <free>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	90                   	nop
c0017287:	83 c4 0c             	add    esp,0xc
c001728a:	c3                   	ret    
c001728b:	90                   	nop

c001728c <VCache::~VCache()>:
c001728c:	83 ec 0c             	sub    esp,0xc
c001728f:	83 ec 0c             	sub    esp,0xc
c0017292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017296:	e8 9d ff ff ff       	call   c0017238 <VCache::~VCache()>
c001729b:	83 c4 10             	add    esp,0x10
c001729e:	83 ec 08             	sub    esp,0x8
c00172a1:	6a 44                	push   0x44
c00172a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172a7:	e8 3f bb ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00172ac:	83 c4 10             	add    esp,0x10
c00172af:	83 c4 0c             	add    esp,0xc
c00172b2:	c3                   	ret    
c00172b3:	90                   	nop

c00172b4 <VCache::write(unsigned long long, int, void*)>:
c00172b4:	55                   	push   ebp
c00172b5:	57                   	push   edi
c00172b6:	56                   	push   esi
c00172b7:	53                   	push   ebx
c00172b8:	83 ec 28             	sub    esp,0x28
c00172bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00172c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00172c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00172cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172ce:	e8 e3 74 00 00       	call   c001e7b6 <Semaphore::acquire()>
c00172d3:	83 c4 10             	add    esp,0x10
c00172d6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172da:	74 0c                	je     c00172e8 <VCache::write(unsigned long long, int, void*)+0x34>
c00172dc:	83 ec 0c             	sub    esp,0xc
c00172df:	53                   	push   ebx
c00172e0:	e8 07 ff ff ff       	call   c00171ec <VCache::invalidateReadBuffer()>
c00172e5:	83 c4 10             	add    esp,0x10
c00172e8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172ec:	74 66                	je     c0017354 <VCache::write(unsigned long long, int, void*)+0xa0>
c00172ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172f1:	99                   	cdq    
c00172f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172f6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00172f9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00172fc:	89 c1                	mov    ecx,eax
c00172fe:	89 d0                	mov    eax,edx
c0017300:	31 f1                	xor    ecx,esi
c0017302:	31 f8                	xor    eax,edi
c0017304:	89 ca                	mov    edx,ecx
c0017306:	09 c2                	or     edx,eax
c0017308:	75 3e                	jne    c0017348 <VCache::write(unsigned long long, int, void*)+0x94>
c001730a:	83 fd 01             	cmp    ebp,0x1
c001730d:	75 39                	jne    c0017348 <VCache::write(unsigned long long, int, void*)+0x94>
c001730f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017312:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017318:	51                   	push   ecx
c0017319:	50                   	push   eax
c001731a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001731e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017322:	0f af c8             	imul   ecx,eax
c0017325:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017328:	51                   	push   ecx
c0017329:	e8 3a 94 fe ff       	call   c0000768 <memcpy>
c001732e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017331:	83 c4 10             	add    esp,0x10
c0017334:	40                   	inc    eax
c0017335:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017338:	83 c0 80             	add    eax,0xffffff80
c001733b:	75 57                	jne    c0017394 <VCache::write(unsigned long long, int, void*)+0xe0>
c001733d:	83 ec 0c             	sub    esp,0xc
c0017340:	53                   	push   ebx
c0017341:	e8 b6 fe ff ff       	call   c00171fc <VCache::writeWriteBuffer()>
c0017346:	eb 34                	jmp    c001737c <VCache::write(unsigned long long, int, void*)+0xc8>
c0017348:	83 ec 0c             	sub    esp,0xc
c001734b:	53                   	push   ebx
c001734c:	e8 ab fe ff ff       	call   c00171fc <VCache::writeWriteBuffer()>
c0017351:	83 c4 10             	add    esp,0x10
c0017354:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017357:	83 fd 7f             	cmp    ebp,0x7f
c001735a:	7f 25                	jg     c0017381 <VCache::write(unsigned long long, int, void*)+0xcd>
c001735c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001735f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017362:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017365:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017369:	52                   	push   edx
c001736a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017370:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017374:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017377:	e8 ec 93 fe ff       	call   c0000768 <memcpy>
c001737c:	83 c4 10             	add    esp,0x10
c001737f:	eb 13                	jmp    c0017394 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017381:	83 ec 0c             	sub    esp,0xc
c0017384:	8b 10                	mov    edx,DWORD PTR [eax]
c0017386:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001738a:	55                   	push   ebp
c001738b:	57                   	push   edi
c001738c:	56                   	push   esi
c001738d:	50                   	push   eax
c001738e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017391:	83 c4 20             	add    esp,0x20
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001739a:	e8 51 7b 00 00       	call   c001eef0 <Semaphore::release()>
c001739f:	83 c4 2c             	add    esp,0x2c
c00173a2:	31 c0                	xor    eax,eax
c00173a4:	5b                   	pop    ebx
c00173a5:	5e                   	pop    esi
c00173a6:	5f                   	pop    edi
c00173a7:	5d                   	pop    ebp
c00173a8:	c3                   	ret    
c00173a9:	90                   	nop

c00173aa <VCache::read(unsigned long long, int, void*)>:
c00173aa:	55                   	push   ebp
c00173ab:	57                   	push   edi
c00173ac:	56                   	push   esi
c00173ad:	53                   	push   ebx
c00173ae:	83 ec 28             	sub    esp,0x28
c00173b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173b9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00173bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00173c5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00173c9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00173cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173d0:	e8 e1 73 00 00       	call   c001e7b6 <Semaphore::acquire()>
c00173d5:	83 c4 10             	add    esp,0x10
c00173d8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00173dc:	74 0c                	je     c00173ea <VCache::read(unsigned long long, int, void*)+0x40>
c00173de:	83 ec 0c             	sub    esp,0xc
c00173e1:	53                   	push   ebx
c00173e2:	e8 15 fe ff ff       	call   c00171fc <VCache::writeWriteBuffer()>
c00173e7:	83 c4 10             	add    esp,0x10
c00173ea:	83 fe 01             	cmp    esi,0x1
c00173ed:	0f 85 80 00 00 00    	jne    c0017473 <VCache::read(unsigned long long, int, void*)+0xc9>
c00173f3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173f6:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00173fd:	75 74                	jne    c0017473 <VCache::read(unsigned long long, int, void*)+0xc9>
c00173ff:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017402:	89 d1                	mov    ecx,edx
c0017404:	f7 d9                	neg    ecx
c0017406:	89 cf                	mov    edi,ecx
c0017408:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001740c:	c1 ff 1f             	sar    edi,0x1f
c001740f:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017412:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017416:	89 ce                	mov    esi,ecx
c0017418:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001741c:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017420:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017424:	89 cf                	mov    edi,ecx
c0017426:	74 0a                	je     c0017432 <VCache::read(unsigned long long, int, void*)+0x88>
c0017428:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001742b:	75 05                	jne    c0017432 <VCache::read(unsigned long long, int, void*)+0x88>
c001742d:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017430:	74 1c                	je     c001744e <VCache::read(unsigned long long, int, void*)+0xa4>
c0017432:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017436:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017439:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001743c:	83 ec 0c             	sub    esp,0xc
c001743f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017441:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017444:	52                   	push   edx
c0017445:	57                   	push   edi
c0017446:	56                   	push   esi
c0017447:	50                   	push   eax
c0017448:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001744b:	83 c4 20             	add    esp,0x20
c001744e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017451:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017457:	50                   	push   eax
c0017458:	52                   	push   edx
c0017459:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001745c:	48                   	dec    eax
c001745d:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017461:	0f af c2             	imul   eax,edx
c0017464:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017467:	50                   	push   eax
c0017468:	55                   	push   ebp
c0017469:	e8 fa 92 fe ff       	call   c0000768 <memcpy>
c001746e:	83 c4 10             	add    esp,0x10
c0017471:	eb 21                	jmp    c0017494 <VCache::read(unsigned long long, int, void*)+0xea>
c0017473:	83 ec 0c             	sub    esp,0xc
c0017476:	53                   	push   ebx
c0017477:	e8 70 fd ff ff       	call   c00171ec <VCache::invalidateReadBuffer()>
c001747c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001747f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017481:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017484:	56                   	push   esi
c0017485:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017489:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001748d:	50                   	push   eax
c001748e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017491:	83 c4 20             	add    esp,0x20
c0017494:	83 ec 0c             	sub    esp,0xc
c0017497:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001749a:	e8 51 7a 00 00       	call   c001eef0 <Semaphore::release()>
c001749f:	83 c4 2c             	add    esp,0x2c
c00174a2:	31 c0                	xor    eax,eax
c00174a4:	5b                   	pop    ebx
c00174a5:	5e                   	pop    esi
c00174a6:	5f                   	pop    edi
c00174a7:	5d                   	pop    ebp
c00174a8:	c3                   	ret    
c00174a9:	90                   	nop

c00174aa <Video::putrect(int, int, int, int, unsigned int)>:
c00174aa:	55                   	push   ebp
c00174ab:	57                   	push   edi
c00174ac:	56                   	push   esi
c00174ad:	53                   	push   ebx
c00174ae:	83 ec 1c             	sub    esp,0x1c
c00174b1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00174b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174b9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00174bd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00174c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174c9:	01 df                	add    edi,ebx
c00174cb:	39 fb                	cmp    ebx,edi
c00174cd:	7d 1f                	jge    c00174ee <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00174cf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174d3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00174d7:	7d 12                	jge    c00174eb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00174d9:	8b 16                	mov    edx,DWORD PTR [esi]
c00174db:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00174df:	53                   	push   ebx
c00174e0:	55                   	push   ebp
c00174e1:	45                   	inc    ebp
c00174e2:	56                   	push   esi
c00174e3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00174e6:	83 c4 10             	add    esp,0x10
c00174e9:	eb e8                	jmp    c00174d3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00174eb:	43                   	inc    ebx
c00174ec:	eb dd                	jmp    c00174cb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00174ee:	83 c4 1c             	add    esp,0x1c
c00174f1:	5b                   	pop    ebx
c00174f2:	5e                   	pop    esi
c00174f3:	5f                   	pop    edi
c00174f4:	5d                   	pop    ebp
c00174f5:	c3                   	ret    

c00174f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00174f6:	55                   	push   ebp
c00174f7:	57                   	push   edi
c00174f8:	31 ff                	xor    edi,edi
c00174fa:	56                   	push   esi
c00174fb:	53                   	push   ebx
c00174fc:	83 ec 1c             	sub    esp,0x1c
c00174ff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017503:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017507:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001750e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017517:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001751b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001751f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017522:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017526:	01 f9                	add    ecx,edi
c0017528:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001752c:	7d 2f                	jge    c001755d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001752e:	31 f6                	xor    esi,esi
c0017530:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017534:	01 f2                	add    edx,esi
c0017536:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001753a:	7d 1a                	jge    c0017556 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001753c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001753f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017542:	46                   	inc    esi
c0017543:	51                   	push   ecx
c0017544:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017548:	52                   	push   edx
c0017549:	55                   	push   ebp
c001754a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001754d:	83 c4 10             	add    esp,0x10
c0017550:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017554:	eb da                	jmp    c0017530 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017556:	47                   	inc    edi
c0017557:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001755b:	eb c5                	jmp    c0017522 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001755d:	83 c4 1c             	add    esp,0x1c
c0017560:	5b                   	pop    ebx
c0017561:	5e                   	pop    esi
c0017562:	5f                   	pop    edi
c0017563:	5d                   	pop    ebp
c0017564:	c3                   	ret    
c0017565:	90                   	nop

c0017566 <Video::blit(unsigned int*, int, int, int, int)>:
c0017566:	55                   	push   ebp
c0017567:	57                   	push   edi
c0017568:	56                   	push   esi
c0017569:	53                   	push   ebx
c001756a:	83 ec 1c             	sub    esp,0x1c
c001756d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017571:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017575:	85 c0                	test   eax,eax
c0017577:	79 02                	jns    c001757b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017579:	31 c0                	xor    eax,eax
c001757b:	c1 e0 02             	shl    eax,0x2
c001757e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017582:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017586:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001758a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001758e:	39 d8                	cmp    eax,ebx
c0017590:	7e 49                	jle    c00175db <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017592:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017598:	7c 41                	jl     c00175db <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001759a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001759e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00175a2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00175a6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00175aa:	39 f9                	cmp    ecx,edi
c00175ac:	7e 22                	jle    c00175d0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00175ae:	83 c5 04             	add    ebp,0x4
c00175b1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175b7:	7c 14                	jl     c00175cd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00175b9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175bb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00175be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175c2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175c6:	56                   	push   esi
c00175c7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00175ca:	83 c4 10             	add    esp,0x10
c00175cd:	47                   	inc    edi
c00175ce:	eb d2                	jmp    c00175a2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00175d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175d4:	43                   	inc    ebx
c00175d5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175d9:	eb ab                	jmp    c0017586 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00175db:	83 c4 1c             	add    esp,0x1c
c00175de:	5b                   	pop    ebx
c00175df:	5e                   	pop    esi
c00175e0:	5f                   	pop    edi
c00175e1:	5d                   	pop    ebp
c00175e2:	c3                   	ret    
c00175e3:	90                   	nop

c00175e4 <Video::clearScreen(unsigned int)>:
c00175e4:	57                   	push   edi
c00175e5:	56                   	push   esi
c00175e6:	53                   	push   ebx
c00175e7:	31 db                	xor    ebx,ebx
c00175e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00175ed:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00175f3:	7e 1f                	jle    c0017614 <Video::clearScreen(unsigned int)+0x30>
c00175f5:	31 ff                	xor    edi,edi
c00175f7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175fd:	7e 12                	jle    c0017611 <Video::clearScreen(unsigned int)+0x2d>
c00175ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0017601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017605:	53                   	push   ebx
c0017606:	57                   	push   edi
c0017607:	47                   	inc    edi
c0017608:	56                   	push   esi
c0017609:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001760c:	83 c4 10             	add    esp,0x10
c001760f:	eb e6                	jmp    c00175f7 <Video::clearScreen(unsigned int)+0x13>
c0017611:	43                   	inc    ebx
c0017612:	eb d9                	jmp    c00175ed <Video::clearScreen(unsigned int)+0x9>
c0017614:	5b                   	pop    ebx
c0017615:	5e                   	pop    esi
c0017616:	5f                   	pop    edi
c0017617:	c3                   	ret    

c0017618 <Video::putpixel(int, int, unsigned int)>:
c0017618:	c7 44 24 04 68 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bc68
c0017620:	e9 62 32 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c0017625:	90                   	nop

c0017626 <Video::Video(char const*)>:
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001762d:	83 ec 08             	sub    esp,0x8
c0017630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017634:	50                   	push   eax
c0017635:	e8 b6 ce ff ff       	call   c00144f0 <Device::Device(char const*)>
c001763a:	83 c4 10             	add    esp,0x10
c001763d:	ba ec bc 02 c0       	mov    edx,0xc002bcec
c0017642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017646:	89 10                	mov    DWORD PTR [eax],edx
c0017648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001764c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017656:	90                   	nop
c0017657:	83 c4 0c             	add    esp,0xc
c001765a:	c3                   	ret    
c001765b:	90                   	nop

c001765c <Video::~Video()>:
c001765c:	83 ec 0c             	sub    esp,0xc
c001765f:	ba ec bc 02 c0       	mov    edx,0xc002bcec
c0017664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017668:	89 10                	mov    DWORD PTR [eax],edx
c001766a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001766e:	83 ec 0c             	sub    esp,0xc
c0017671:	50                   	push   eax
c0017672:	e8 5b cb ff ff       	call   c00141d2 <Device::~Device()>
c0017677:	83 c4 10             	add    esp,0x10
c001767a:	90                   	nop
c001767b:	83 c4 0c             	add    esp,0xc
c001767e:	c3                   	ret    
c001767f:	90                   	nop

c0017680 <Video::~Video()>:
c0017680:	83 ec 0c             	sub    esp,0xc
c0017683:	83 ec 0c             	sub    esp,0xc
c0017686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001768a:	e8 cd ff ff ff       	call   c001765c <Video::~Video()>
c001768f:	83 c4 10             	add    esp,0x10
c0017692:	83 ec 08             	sub    esp,0x8
c0017695:	68 64 01 00 00       	push   0x164
c001769a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001769e:	e8 48 b7 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00176a3:	83 c4 10             	add    esp,0x10
c00176a6:	83 c4 0c             	add    esp,0xc
c00176a9:	c3                   	ret    

c00176aa <Video::isMonochrome()>:
c00176aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176ae:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00176b4:	c3                   	ret    
c00176b5:	90                   	nop

c00176b6 <Video::getWidth()>:
c00176b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00176c0:	c3                   	ret    
c00176c1:	90                   	nop

c00176c2 <Video::getHeight()>:
c00176c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00176cc:	c3                   	ret    
c00176cd:	90                   	nop

c00176ce <Video::drawCursor(int, int, unsigned char*, int)>:
c00176ce:	55                   	push   ebp
c00176cf:	57                   	push   edi
c00176d0:	56                   	push   esi
c00176d1:	53                   	push   ebx
c00176d2:	83 ec 2c             	sub    esp,0x2c
c00176d5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00176d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00176dd:	83 f8 01             	cmp    eax,0x1
c00176e0:	19 c9                	sbb    ecx,ecx
c00176e2:	31 db                	xor    ebx,ebx
c00176e4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00176e8:	89 cd                	mov    ebp,ecx
c00176ea:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00176f2:	f7 d5                	not    ebp
c00176f4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00176fa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00176fe:	01 d8                	add    eax,ebx
c0017700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017704:	56                   	push   esi
c0017705:	e8 b8 ff ff ff       	call   c00176c2 <Video::getHeight()>
c001770a:	59                   	pop    ecx
c001770b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001770f:	7e 70                	jle    c0017781 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017711:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017715:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017719:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001771c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017720:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017724:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001772b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001772f:	89 f8                	mov    eax,edi
c0017731:	83 c0 20             	add    eax,0x20
c0017734:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017738:	56                   	push   esi
c0017739:	e8 78 ff ff ff       	call   c00176b6 <Video::getWidth()>
c001773e:	5a                   	pop    edx
c001773f:	39 c7                	cmp    edi,eax
c0017741:	7d 34                	jge    c0017777 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017743:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017748:	74 05                	je     c001774f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001774a:	8b 06                	mov    eax,DWORD PTR [esi]
c001774c:	55                   	push   ebp
c001774d:	eb 0d                	jmp    c001775c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001774f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017754:	74 12                	je     c0017768 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017756:	8b 06                	mov    eax,DWORD PTR [esi]
c0017758:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001775c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017760:	57                   	push   edi
c0017761:	56                   	push   esi
c0017762:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017765:	83 c4 10             	add    esp,0x10
c0017768:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001776c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017770:	47                   	inc    edi
c0017771:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017775:	75 c1                	jne    c0017738 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017777:	43                   	inc    ebx
c0017778:	83 fb 20             	cmp    ebx,0x20
c001777b:	0f 85 79 ff ff ff    	jne    c00176fa <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017781:	83 c4 2c             	add    esp,0x2c
c0017784:	5b                   	pop    ebx
c0017785:	5e                   	pop    esi
c0017786:	5f                   	pop    edi
c0017787:	5d                   	pop    ebp
c0017788:	c3                   	ret    
c0017789:	90                   	nop

c001778a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001778a:	55                   	push   ebp
c001778b:	57                   	push   edi
c001778c:	56                   	push   esi
c001778d:	53                   	push   ebx
c001778e:	83 ec 28             	sub    esp,0x28
c0017791:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017795:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017799:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001779d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00177a1:	c1 e7 08             	shl    edi,0x8
c00177a4:	01 c7                	add    edi,eax
c00177a6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00177aa:	c1 e0 08             	shl    eax,0x8
c00177ad:	01 d0                	add    eax,edx
c00177af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177b7:	0f af c7             	imul   eax,edi
c00177ba:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00177c1:	50                   	push   eax
c00177c2:	e8 4d 81 ff ff       	call   c000f914 <malloc>
c00177c7:	83 c4 10             	add    esp,0x10
c00177ca:	89 c5                	mov    ebp,eax
c00177cc:	85 c0                	test   eax,eax
c00177ce:	75 15                	jne    c00177e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00177d0:	83 ec 0c             	sub    esp,0xc
c00177d3:	68 89 bc 02 c0       	push   0xc002bc89
c00177d8:	e8 ee b6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00177dd:	83 c4 10             	add    esp,0x10
c00177e0:	e9 1c 01 00 00       	jmp    c0017901 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177e5:	be 12 00 00 00       	mov    esi,0x12
c00177ea:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177ee:	74 11                	je     c0017801 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00177f0:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00177f4:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00177f8:	c1 fe 03             	sar    esi,0x3
c00177fb:	0f af f0             	imul   esi,eax
c00177fe:	83 c6 12             	add    esi,0x12
c0017801:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017805:	74 04                	je     c001780b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017807:	85 ff                	test   edi,edi
c0017809:	75 12                	jne    c001781d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001780b:	83 ec 0c             	sub    esp,0xc
c001780e:	68 a0 bc 02 c0       	push   0xc002bca0
c0017813:	e8 b3 b6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0017818:	e9 ce 00 00 00       	jmp    c00178eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001781d:	52                   	push   edx
c001781e:	52                   	push   edx
c001781f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017823:	50                   	push   eax
c0017824:	68 b5 bc 02 c0       	push   0xc002bcb5
c0017829:	e8 9d b6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001782e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017832:	83 c4 10             	add    esp,0x10
c0017835:	80 fa 02             	cmp    dl,0x2
c0017838:	0f 85 98 00 00 00    	jne    c00178d6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001783e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017843:	75 10                	jne    c0017855 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017845:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017849:	75 0a                	jne    c0017855 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001784b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001784e:	83 e8 18             	sub    eax,0x18
c0017851:	a8 f7                	test   al,0xf7
c0017853:	74 0a                	je     c001785f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017855:	83 ec 0c             	sub    esp,0xc
c0017858:	68 c2 bc 02 c0       	push   0xc002bcc2
c001785d:	eb 7f                	jmp    c00178de <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001785f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017867:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001786f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017873:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001787b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001787f:	75 0c                	jne    c001788d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017881:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017886:	c1 e0 18             	shl    eax,0x18
c0017889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001788d:	41                   	inc    ecx
c001788e:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017893:	c1 e2 10             	shl    edx,0x10
c0017896:	89 d0                	mov    eax,edx
c0017898:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001789d:	c1 e2 08             	shl    edx,0x8
c00178a0:	09 c2                	or     edx,eax
c00178a2:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00178a6:	09 c2                	or     edx,eax
c00178a8:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00178ac:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00178b0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00178b4:	c1 f8 03             	sar    eax,0x3
c00178b7:	01 c6                	add    esi,eax
c00178b9:	89 c8                	mov    eax,ecx
c00178bb:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00178bf:	39 c7                	cmp    edi,eax
c00178c1:	7f b0                	jg     c0017873 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00178c3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178cb:	39 14 24             	cmp    DWORD PTR [esp],edx
c00178ce:	7e 22                	jle    c00178f2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00178d0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00178d4:	eb 99                	jmp    c001786f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00178d6:	50                   	push   eax
c00178d7:	50                   	push   eax
c00178d8:	52                   	push   edx
c00178d9:	68 d0 bc 02 c0       	push   0xc002bcd0
c00178de:	e8 e8 b5 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00178e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00178e6:	e8 39 80 ff ff       	call   c000f924 <free>
c00178eb:	83 c4 10             	add    esp,0x10
c00178ee:	31 ed                	xor    ebp,ebp
c00178f0:	eb 0f                	jmp    c0017901 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00178f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178f6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00178f9:	89 38                	mov    DWORD PTR [eax],edi
c00178fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178ff:	89 08                	mov    DWORD PTR [eax],ecx
c0017901:	83 c4 1c             	add    esp,0x1c
c0017904:	89 e8                	mov    eax,ebp
c0017906:	5b                   	pop    ebx
c0017907:	5e                   	pop    esi
c0017908:	5f                   	pop    edi
c0017909:	5d                   	pop    ebp
c001790a:	c3                   	ret    
c001790b:	90                   	nop

c001790c <Video::putTGA(int, int, unsigned char*, int)>:
c001790c:	55                   	push   ebp
c001790d:	57                   	push   edi
c001790e:	56                   	push   esi
c001790f:	53                   	push   ebx
c0017910:	83 ec 28             	sub    esp,0x28
c0017913:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017917:	8d 44 24 18          	lea    eax,[esp+0x18]
c001791b:	50                   	push   eax
c001791c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017920:	50                   	push   eax
c0017921:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017925:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017929:	56                   	push   esi
c001792a:	e8 5b fe ff ff       	call   c001778a <Video::tgaParse(unsigned char*, int, int*, int*)>
c001792f:	83 c4 20             	add    esp,0x20
c0017932:	85 c0                	test   eax,eax
c0017934:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017938:	74 35                	je     c001796f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001793a:	89 c7                	mov    edi,eax
c001793c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017940:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017944:	39 d8                	cmp    eax,ebx
c0017946:	7e 27                	jle    c001796f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017948:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001794c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017950:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017954:	39 e8                	cmp    eax,ebp
c0017956:	7e 14                	jle    c001796c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017958:	8b 06                	mov    eax,DWORD PTR [esi]
c001795a:	83 c7 04             	add    edi,0x4
c001795d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017960:	53                   	push   ebx
c0017961:	55                   	push   ebp
c0017962:	45                   	inc    ebp
c0017963:	56                   	push   esi
c0017964:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017967:	83 c4 10             	add    esp,0x10
c001796a:	eb e0                	jmp    c001794c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001796c:	43                   	inc    ebx
c001796d:	eb cd                	jmp    c001793c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001796f:	83 c4 1c             	add    esp,0x1c
c0017972:	5b                   	pop    ebx
c0017973:	5e                   	pop    esi
c0017974:	5f                   	pop    edi
c0017975:	5d                   	pop    ebp
c0017976:	c3                   	ret    
c0017977:	90                   	nop

c0017978 <ACPI::close(int, int, void*)>:
c0017978:	83 ec 1c             	sub    esp,0x1c
c001797b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017983:	74 0a                	je     c001798f <ACPI::close(int, int, void*)+0x17>
c0017985:	b8 00 00 00 00       	mov    eax,0x0
c001798a:	e9 9a 00 00 00       	jmp    c0017a29 <ACPI::close(int, int, void*)+0xb1>
c001798f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017994:	75 37                	jne    c00179cd <ACPI::close(int, int, void*)+0x55>
c0017996:	83 ec 0c             	sub    esp,0xc
c0017999:	68 2c bd 02 c0       	push   0xc002bd2c
c001799e:	e8 28 b5 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00179a3:	83 c4 10             	add    esp,0x10
c00179a6:	a1 e8 14 03 c0       	mov    eax,ds:0xc00314e8
c00179ab:	85 c0                	test   eax,eax
c00179ad:	74 07                	je     c00179b6 <ACPI::close(int, int, void*)+0x3e>
c00179af:	a1 e8 14 03 c0       	mov    eax,ds:0xc00314e8
c00179b4:	ff d0                	call   eax
c00179b6:	83 ec 0c             	sub    esp,0xc
c00179b9:	68 a0 be 02 c0       	push   0xc002bea0
c00179be:	e8 c4 2e 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00179c3:	83 c4 10             	add    esp,0x10
c00179c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179cb:	eb 5c                	jmp    c0017a29 <ACPI::close(int, int, void*)+0xb1>
c00179cd:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00179d2:	75 50                	jne    c0017a24 <ACPI::close(int, int, void*)+0xac>
c00179d4:	a1 e4 14 03 c0       	mov    eax,ds:0xc00314e4
c00179d9:	85 c0                	test   eax,eax
c00179db:	74 07                	je     c00179e4 <ACPI::close(int, int, void*)+0x6c>
c00179dd:	a1 e4 14 03 c0       	mov    eax,ds:0xc00314e4
c00179e2:	ff d0                	call   eax
c00179e4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00179e9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179ee:	83 e0 02             	and    eax,0x2
c00179f1:	74 1c                	je     c0017a0f <ACPI::close(int, int, void*)+0x97>
c00179f3:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00179fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179fe:	89 c2                	mov    edx,eax
c0017a00:	ec                   	in     al,dx
c0017a01:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017a05:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017a09:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a0d:	eb da                	jmp    c00179e9 <ACPI::close(int, int, void*)+0x71>
c0017a0f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017a16:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017a1b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017a1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a23:	ee                   	out    dx,al
c0017a24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017a29:	83 c4 1c             	add    esp,0x1c
c0017a2c:	c3                   	ret    

c0017a2d <findRSDP()>:
c0017a2d:	83 ec 1c             	sub    esp,0x1c
c0017a30:	83 ec 0c             	sub    esp,0xc
c0017a33:	68 39 bd 02 c0       	push   0xc002bd39
c0017a38:	e8 8e b4 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0017a3d:	83 c4 10             	add    esp,0x10
c0017a40:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017a45:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a4b:	83 e0 04             	and    eax,0x4
c0017a4e:	84 c0                	test   al,al
c0017a50:	75 07                	jne    c0017a59 <findRSDP()+0x2c>
c0017a52:	b8 00 00 00 00       	mov    eax,0x0
c0017a57:	eb 6a                	jmp    c0017ac3 <findRSDP()+0x96>
c0017a59:	a1 74 ee 02 c0       	mov    eax,ds:0xc002ee74
c0017a5e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a63:	7f 1b                	jg     c0017a80 <findRSDP()+0x53>
c0017a65:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017a6a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a70:	83 e2 fb             	and    edx,0xfffffffb
c0017a73:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a79:	b8 00 00 00 00       	mov    eax,0x0
c0017a7e:	eb 43                	jmp    c0017ac3 <findRSDP()+0x96>
c0017a80:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a88:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a90:	77 2c                	ja     c0017abe <findRSDP()+0x91>
c0017a92:	83 ec 04             	sub    esp,0x4
c0017a95:	6a 08                	push   0x8
c0017a97:	68 47 bd 02 c0       	push   0xc002bd47
c0017a9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017aa0:	e8 bf 8b fe ff       	call   c0000664 <memcmp>
c0017aa5:	83 c4 10             	add    esp,0x10
c0017aa8:	85 c0                	test   eax,eax
c0017aaa:	0f 94 c0             	sete   al
c0017aad:	84 c0                	test   al,al
c0017aaf:	74 06                	je     c0017ab7 <findRSDP()+0x8a>
c0017ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ab5:	eb 0c                	jmp    c0017ac3 <findRSDP()+0x96>
c0017ab7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017abc:	eb ca                	jmp    c0017a88 <findRSDP()+0x5b>
c0017abe:	b8 00 00 00 00       	mov    eax,0x0
c0017ac3:	83 c4 1c             	add    esp,0x1c
c0017ac6:	c3                   	ret    

c0017ac7 <loadACPITables(unsigned char*)>:
c0017ac7:	56                   	push   esi
c0017ac8:	53                   	push   ebx
c0017ac9:	83 ec 44             	sub    esp,0x44
c0017acc:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017ad1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ad7:	83 e0 04             	and    eax,0x4
c0017ada:	84 c0                	test   al,al
c0017adc:	0f 84 03 02 00 00    	je     c0017ce5 <loadACPITables(unsigned char*)+0x21e>
c0017ae2:	a0 00 17 03 c0       	mov    al,ds:0xc0031700
c0017ae7:	84 c0                	test   al,al
c0017ae9:	74 75                	je     c0017b60 <loadACPITables(unsigned char*)+0x99>
c0017aeb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017aef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017af3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017af7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017afa:	83 e8 24             	sub    eax,0x24
c0017afd:	c1 e8 03             	shr    eax,0x3
c0017b00:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b04:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b0c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b10:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017b14:	0f 8d b2 00 00 00    	jge    c0017bcc <loadACPITables(unsigned char*)+0x105>
c0017b1a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b1e:	83 c0 24             	add    eax,0x24
c0017b21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b29:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017b2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b31:	c1 e0 03             	shl    eax,0x3
c0017b34:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017b38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b3c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b41:	89 c1                	mov    ecx,eax
c0017b43:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017b48:	8d 50 01             	lea    edx,[eax+0x1]
c0017b4b:	89 15 ec 14 03 c0    	mov    DWORD PTR ds:0xc00314ec,edx
c0017b51:	89 ca                	mov    edx,ecx
c0017b53:	89 14 c5 04 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceafc],edx
c0017b5a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017b5e:	eb ac                	jmp    c0017b0c <loadACPITables(unsigned char*)+0x45>
c0017b60:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b64:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b6f:	83 e8 24             	sub    eax,0x24
c0017b72:	c1 e8 02             	shr    eax,0x2
c0017b75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b79:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017b81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b85:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017b89:	7d 41                	jge    c0017bcc <loadACPITables(unsigned char*)+0x105>
c0017b8b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b8f:	83 c0 24             	add    eax,0x24
c0017b92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ba2:	c1 e0 02             	shl    eax,0x2
c0017ba5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017ba9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bad:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017baf:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017bb4:	8d 50 01             	lea    edx,[eax+0x1]
c0017bb7:	89 15 ec 14 03 c0    	mov    DWORD PTR ds:0xc00314ec,edx
c0017bbd:	89 ca                	mov    edx,ecx
c0017bbf:	89 14 c5 04 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceafc],edx
c0017bc6:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017bca:	eb b5                	jmp    c0017b81 <loadACPITables(unsigned char*)+0xba>
c0017bcc:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017bd4:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017bd9:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017bdd:	0f 8d 03 01 00 00    	jge    c0017ce6 <loadACPITables(unsigned char*)+0x21f>
c0017be3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017be7:	8b 04 c5 04 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceafc]
c0017bee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bfe:	25 ff 0f 00 00       	and    eax,0xfff
c0017c03:	89 c6                	mov    esi,eax
c0017c05:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017c0b:	83 ec 0c             	sub    esp,0xc
c0017c0e:	6a 01                	push   0x1
c0017c10:	e8 b0 9e ff ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c0017c15:	83 c4 10             	add    esp,0x10
c0017c18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c1c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c22:	83 ec 0c             	sub    esp,0xc
c0017c25:	6a 01                	push   0x1
c0017c27:	6a 01                	push   0x1
c0017c29:	50                   	push   eax
c0017c2a:	52                   	push   edx
c0017c2b:	53                   	push   ebx
c0017c2c:	e8 c1 a9 ff ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c31:	83 c4 20             	add    esp,0x20
c0017c34:	09 f0                	or     eax,esi
c0017c36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c3e:	c1 e0 03             	shl    eax,0x3
c0017c41:	05 00 15 03 c0       	add    eax,0xc0031500
c0017c46:	83 ec 04             	sub    esp,0x4
c0017c49:	6a 04                	push   0x4
c0017c4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c4f:	50                   	push   eax
c0017c50:	e8 13 8b fe ff       	call   c0000768 <memcpy>
c0017c55:	83 c4 10             	add    esp,0x10
c0017c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c67:	05 00 10 00 00       	add    eax,0x1000
c0017c6c:	c1 e8 0c             	shr    eax,0xc
c0017c6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c77:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c7e:	25 ff 0f 00 00       	and    eax,0xfff
c0017c83:	89 c6                	mov    esi,eax
c0017c85:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017c8b:	83 ec 0c             	sub    esp,0xc
c0017c8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c92:	e8 2e 9e ff ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c9e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ca4:	83 ec 0c             	sub    esp,0xc
c0017ca7:	6a 01                	push   0x1
c0017ca9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cad:	50                   	push   eax
c0017cae:	52                   	push   edx
c0017caf:	53                   	push   ebx
c0017cb0:	e8 3d a9 ff ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cb5:	83 c4 20             	add    esp,0x20
c0017cb8:	09 f0                	or     eax,esi
c0017cba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cbe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017cc1:	83 ec 0c             	sub    esp,0xc
c0017cc4:	50                   	push   eax
c0017cc5:	e8 bb a2 ff ff       	call   c0011f85 <Virt::freeKernelVirtualPages(unsigned long)>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017cd5:	89 14 c5 04 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceafc],edx
c0017cdc:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017ce0:	e9 ef fe ff ff       	jmp    c0017bd4 <loadACPITables(unsigned char*)+0x10d>
c0017ce5:	90                   	nop
c0017ce6:	83 c4 44             	add    esp,0x44
c0017ce9:	5b                   	pop    ebx
c0017cea:	5e                   	pop    esi
c0017ceb:	c3                   	ret    

c0017cec <findRSDT(unsigned char*)>:
c0017cec:	56                   	push   esi
c0017ced:	53                   	push   ebx
c0017cee:	83 ec 44             	sub    esp,0x44
c0017cf1:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017cf6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cfc:	83 e0 04             	and    eax,0x4
c0017cff:	84 c0                	test   al,al
c0017d01:	75 0a                	jne    c0017d0d <findRSDT(unsigned char*)+0x21>
c0017d03:	b8 00 00 00 00       	mov    eax,0x0
c0017d08:	e9 f5 00 00 00       	jmp    c0017e02 <findRSDT(unsigned char*)+0x116>
c0017d0d:	83 ec 04             	sub    esp,0x4
c0017d10:	6a 24                	push   0x24
c0017d12:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017d16:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017d1a:	50                   	push   eax
c0017d1b:	e8 48 8a fe ff       	call   c0000768 <memcpy>
c0017d20:	83 c4 10             	add    esp,0x10
c0017d23:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017d27:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017d2b:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017d33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d3b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d4b:	25 ff 0f 00 00       	and    eax,0xfff
c0017d50:	89 c6                	mov    esi,eax
c0017d52:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017d58:	83 ec 0c             	sub    esp,0xc
c0017d5b:	6a 02                	push   0x2
c0017d5d:	e8 63 9d ff ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017d69:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d6f:	83 ec 0c             	sub    esp,0xc
c0017d72:	6a 01                	push   0x1
c0017d74:	6a 02                	push   0x2
c0017d76:	50                   	push   eax
c0017d77:	52                   	push   edx
c0017d78:	53                   	push   ebx
c0017d79:	e8 74 a8 ff ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d7e:	83 c4 20             	add    esp,0x20
c0017d81:	09 f0                	or     eax,esi
c0017d83:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d8b:	25 ff 0f 00 00       	and    eax,0xfff
c0017d90:	89 c6                	mov    esi,eax
c0017d92:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017d98:	83 ec 0c             	sub    esp,0xc
c0017d9b:	6a 02                	push   0x2
c0017d9d:	e8 23 9d ff ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c0017da2:	83 c4 10             	add    esp,0x10
c0017da5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017da9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017daf:	83 ec 0c             	sub    esp,0xc
c0017db2:	6a 01                	push   0x1
c0017db4:	6a 02                	push   0x2
c0017db6:	50                   	push   eax
c0017db7:	52                   	push   edx
c0017db8:	53                   	push   ebx
c0017db9:	e8 34 a8 ff ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017dbe:	83 c4 20             	add    esp,0x20
c0017dc1:	09 f0                	or     eax,esi
c0017dc3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017dc7:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017dcc:	75 11                	jne    c0017ddf <findRSDT(unsigned char*)+0xf3>
c0017dce:	c6 05 00 17 03 c0 00 	mov    BYTE PTR ds:0xc0031700,0x0
c0017dd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017dd9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ddd:	eb 1f                	jmp    c0017dfe <findRSDT(unsigned char*)+0x112>
c0017ddf:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017de4:	75 11                	jne    c0017df7 <findRSDT(unsigned char*)+0x10b>
c0017de6:	c6 05 00 17 03 c0 01 	mov    BYTE PTR ds:0xc0031700,0x1
c0017ded:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017df1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017df5:	eb 07                	jmp    c0017dfe <findRSDT(unsigned char*)+0x112>
c0017df7:	b8 00 00 00 00       	mov    eax,0x0
c0017dfc:	eb 04                	jmp    c0017e02 <findRSDT(unsigned char*)+0x116>
c0017dfe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e02:	83 c4 44             	add    esp,0x44
c0017e05:	5b                   	pop    ebx
c0017e06:	5e                   	pop    esi
c0017e07:	c3                   	ret    

c0017e08 <findDataTable(unsigned char*, char*)>:
c0017e08:	83 ec 1c             	sub    esp,0x1c
c0017e0b:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017e10:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e16:	83 e0 04             	and    eax,0x4
c0017e19:	84 c0                	test   al,al
c0017e1b:	75 07                	jne    c0017e24 <findDataTable(unsigned char*, char*)+0x1c>
c0017e1d:	b8 00 00 00 00       	mov    eax,0x0
c0017e22:	eb 7c                	jmp    c0017ea0 <findDataTable(unsigned char*, char*)+0x98>
c0017e24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e2c:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017e31:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017e35:	7d 3a                	jge    c0017e71 <findDataTable(unsigned char*, char*)+0x69>
c0017e37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e3b:	c1 e0 03             	shl    eax,0x3
c0017e3e:	05 00 15 03 c0       	add    eax,0xc0031500
c0017e43:	83 ec 04             	sub    esp,0x4
c0017e46:	6a 04                	push   0x4
c0017e48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e4c:	50                   	push   eax
c0017e4d:	e8 12 88 fe ff       	call   c0000664 <memcmp>
c0017e52:	83 c4 10             	add    esp,0x10
c0017e55:	85 c0                	test   eax,eax
c0017e57:	0f 94 c0             	sete   al
c0017e5a:	84 c0                	test   al,al
c0017e5c:	74 0d                	je     c0017e6b <findDataTable(unsigned char*, char*)+0x63>
c0017e5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e62:	8b 04 c5 04 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceafc]
c0017e69:	eb 35                	jmp    c0017ea0 <findDataTable(unsigned char*, char*)+0x98>
c0017e6b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e6f:	eb bb                	jmp    c0017e2c <findDataTable(unsigned char*, char*)+0x24>
c0017e71:	a0 00 17 03 c0       	mov    al,ds:0xc0031700
c0017e76:	84 c0                	test   al,al
c0017e78:	74 07                	je     c0017e81 <findDataTable(unsigned char*, char*)+0x79>
c0017e7a:	b8 58 00 00 00       	mov    eax,0x58
c0017e7f:	eb 05                	jmp    c0017e86 <findDataTable(unsigned char*, char*)+0x7e>
c0017e81:	b8 52 00 00 00       	mov    eax,0x52
c0017e86:	83 ec 04             	sub    esp,0x4
c0017e89:	50                   	push   eax
c0017e8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e8e:	68 c4 be 02 c0       	push   0xc002bec4
c0017e93:	e8 33 b0 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0017e98:	83 c4 10             	add    esp,0x10
c0017e9b:	b8 00 00 00 00       	mov    eax,0x0
c0017ea0:	83 c4 1c             	add    esp,0x1c
c0017ea3:	c3                   	ret    

c0017ea4 <scanMADT()>:
c0017ea4:	53                   	push   ebx
c0017ea5:	83 ec 38             	sub    esp,0x38
c0017ea8:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017ead:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017eb3:	83 e0 04             	and    eax,0x4
c0017eb6:	84 c0                	test   al,al
c0017eb8:	0f 84 63 04 00 00    	je     c0018321 <scanMADT()+0x47d>
c0017ebe:	e8 6a fb ff ff       	call   c0017a2d <findRSDP()>
c0017ec3:	a3 0c 17 03 c0       	mov    ds:0xc003170c,eax
c0017ec8:	a1 0c 17 03 c0       	mov    eax,ds:0xc003170c
c0017ecd:	85 c0                	test   eax,eax
c0017ecf:	75 19                	jne    c0017eea <scanMADT()+0x46>
c0017ed1:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017ed6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017edc:	83 e2 fb             	and    edx,0xfffffffb
c0017edf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ee5:	e9 3b 04 00 00       	jmp    c0018325 <scanMADT()+0x481>
c0017eea:	a1 0c 17 03 c0       	mov    eax,ds:0xc003170c
c0017eef:	83 ec 0c             	sub    esp,0xc
c0017ef2:	50                   	push   eax
c0017ef3:	e8 f4 fd ff ff       	call   c0017cec <findRSDT(unsigned char*)>
c0017ef8:	83 c4 10             	add    esp,0x10
c0017efb:	a3 08 17 03 c0       	mov    ds:0xc0031708,eax
c0017f00:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c0017f05:	85 c0                	test   eax,eax
c0017f07:	75 19                	jne    c0017f22 <scanMADT()+0x7e>
c0017f09:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017f0e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f14:	83 e2 fb             	and    edx,0xfffffffb
c0017f17:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f1d:	e9 03 04 00 00       	jmp    c0018325 <scanMADT()+0x481>
c0017f22:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c0017f27:	83 ec 0c             	sub    esp,0xc
c0017f2a:	50                   	push   eax
c0017f2b:	e8 97 fb ff ff       	call   c0017ac7 <loadACPITables(unsigned char*)>
c0017f30:	83 c4 10             	add    esp,0x10
c0017f33:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c0017f38:	83 ec 08             	sub    esp,0x8
c0017f3b:	68 50 bd 02 c0       	push   0xc002bd50
c0017f40:	50                   	push   eax
c0017f41:	e8 c2 fe ff ff       	call   c0017e08 <findDataTable(unsigned char*, char*)>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f4d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f52:	75 19                	jne    c0017f6d <scanMADT()+0xc9>
c0017f54:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0017f59:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f5f:	83 e2 fe             	and    edx,0xfffffffe
c0017f62:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f68:	e9 b8 03 00 00       	jmp    c0018325 <scanMADT()+0x481>
c0017f6d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f7c:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f80:	0f 87 9f 03 00 00    	ja     c0018325 <scanMADT()+0x481>
c0017f86:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f8e:	0f 87 91 03 00 00    	ja     c0018325 <scanMADT()+0x481>
c0017f94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f98:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017faf:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017fb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb7:	8d 50 01             	lea    edx,[eax+0x1]
c0017fba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fc6:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017fca:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017fcf:	0f 86 4f 03 00 00    	jbe    c0018324 <scanMADT()+0x480>
c0017fd5:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017fda:	75 57                	jne    c0018033 <scanMADT()+0x18f>
c0017fdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fe7:	8a 15 00 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031900
c0017fed:	0f b6 d2             	movzx  edx,dl
c0017ff0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ff4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ff8:	88 82 40 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6c0],al
c0017ffe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018002:	8d 50 01             	lea    edx,[eax+0x1]
c0018005:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018009:	8a 15 00 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031900
c001800f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018012:	88 0d 00 19 03 c0    	mov    BYTE PTR ds:0xc0031900,cl
c0018018:	0f b6 d2             	movzx  edx,dl
c001801b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001801f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018023:	88 82 20 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6e0],al
c0018029:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001802e:	e9 da 02 00 00       	jmp    c001830d <scanMADT()+0x469>
c0018033:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0018038:	0f 85 14 01 00 00    	jne    c0018152 <scanMADT()+0x2ae>
c001803e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018042:	8d 50 01             	lea    edx,[eax+0x1]
c0018045:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018049:	8a 15 c0 17 03 c0    	mov    dl,BYTE PTR ds:0xc00317c0
c001804f:	0f b6 d2             	movzx  edx,dl
c0018052:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018056:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001805a:	88 82 e0 17 03 c0    	mov    BYTE PTR [edx-0x3ffce820],al
c0018060:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0018064:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018068:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806c:	01 d0                	add    eax,edx
c001806e:	83 c0 2c             	add    eax,0x2c
c0018071:	8a 00                	mov    al,BYTE PTR [eax]
c0018073:	0f b6 d0             	movzx  edx,al
c0018076:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807a:	8d 48 01             	lea    ecx,[eax+0x1]
c001807d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018081:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018085:	0f b6 c0             	movzx  eax,al
c0018088:	c1 e0 08             	shl    eax,0x8
c001808b:	89 d1                	mov    ecx,edx
c001808d:	09 c1                	or     ecx,eax
c001808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018093:	8d 50 02             	lea    edx,[eax+0x2]
c0018096:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001809e:	0f b6 c0             	movzx  eax,al
c00180a1:	c1 e0 10             	shl    eax,0x10
c00180a4:	09 c1                	or     ecx,eax
c00180a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180aa:	8d 50 03             	lea    edx,[eax+0x3]
c00180ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b5:	0f b6 c0             	movzx  eax,al
c00180b8:	c1 e0 18             	shl    eax,0x18
c00180bb:	09 c1                	or     ecx,eax
c00180bd:	89 ca                	mov    edx,ecx
c00180bf:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c00180c4:	0f b6 c0             	movzx  eax,al
c00180c7:	89 14 85 00 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce800],edx
c00180ce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180db:	01 d0                	add    eax,edx
c00180dd:	83 c0 2c             	add    eax,0x2c
c00180e0:	8a 00                	mov    al,BYTE PTR [eax]
c00180e2:	0f b6 d0             	movzx  edx,al
c00180e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e9:	8d 48 01             	lea    ecx,[eax+0x1]
c00180ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180f4:	0f b6 c0             	movzx  eax,al
c00180f7:	c1 e0 08             	shl    eax,0x8
c00180fa:	89 d1                	mov    ecx,edx
c00180fc:	09 c1                	or     ecx,eax
c00180fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018102:	8d 50 02             	lea    edx,[eax+0x2]
c0018105:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018109:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001810d:	0f b6 c0             	movzx  eax,al
c0018110:	c1 e0 10             	shl    eax,0x10
c0018113:	09 c1                	or     ecx,eax
c0018115:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018119:	8d 50 03             	lea    edx,[eax+0x3]
c001811c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018120:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018124:	0f b6 c0             	movzx  eax,al
c0018127:	c1 e0 18             	shl    eax,0x18
c001812a:	09 c1                	or     ecx,eax
c001812c:	89 ca                	mov    edx,ecx
c001812e:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0018133:	0f b6 c0             	movzx  eax,al
c0018136:	89 14 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],edx
c001813d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018142:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0018147:	40                   	inc    eax
c0018148:	a2 c0 17 03 c0       	mov    ds:0xc00317c0,al
c001814d:	e9 bb 01 00 00       	jmp    c001830d <scanMADT()+0x469>
c0018152:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018157:	0f 85 e9 00 00 00    	jne    c0018246 <scanMADT()+0x3a2>
c001815d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018161:	8d 50 01             	lea    edx,[eax+0x1]
c0018164:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018168:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018170:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018174:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018178:	8d 50 01             	lea    edx,[eax+0x1]
c001817b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001817f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018183:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018187:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001818b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001818f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018193:	01 d0                	add    eax,edx
c0018195:	83 c0 2c             	add    eax,0x2c
c0018198:	8a 00                	mov    al,BYTE PTR [eax]
c001819a:	0f b6 d0             	movzx  edx,al
c001819d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00181a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181a8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181ac:	0f b6 c0             	movzx  eax,al
c00181af:	c1 e0 08             	shl    eax,0x8
c00181b2:	89 d1                	mov    ecx,edx
c00181b4:	09 c1                	or     ecx,eax
c00181b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181ba:	8d 50 02             	lea    edx,[eax+0x2]
c00181bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181c1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181c5:	0f b6 c0             	movzx  eax,al
c00181c8:	c1 e0 10             	shl    eax,0x10
c00181cb:	09 c1                	or     ecx,eax
c00181cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d1:	8d 50 03             	lea    edx,[eax+0x3]
c00181d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181dc:	0f b6 c0             	movzx  eax,al
c00181df:	c1 e0 18             	shl    eax,0x18
c00181e2:	09 c8                	or     eax,ecx
c00181e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181e8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00181ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f5:	01 d0                	add    eax,edx
c00181f7:	83 c0 2c             	add    eax,0x2c
c00181fa:	8a 00                	mov    al,BYTE PTR [eax]
c00181fc:	0f b6 c0             	movzx  eax,al
c00181ff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018203:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018206:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001820a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001820e:	0f b6 d2             	movzx  edx,dl
c0018211:	c1 e2 08             	shl    edx,0x8
c0018214:	09 d0                	or     eax,edx
c0018216:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001821b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018220:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018225:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018229:	88 90 80 e0 02 c0    	mov    BYTE PTR [eax-0x3ffd1f80],dl
c001822f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018234:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018239:	66 89 84 12 a0 17 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce860],ax
c0018241:	e9 c7 00 00 00       	jmp    c001830d <scanMADT()+0x469>
c0018246:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001824b:	0f 85 b0 00 00 00    	jne    c0018301 <scanMADT()+0x45d>
c0018251:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018255:	8d 50 01             	lea    edx,[eax+0x1]
c0018258:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001825c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018260:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018264:	0f b6 c0             	movzx  eax,al
c0018267:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001826b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001826f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018273:	01 d0                	add    eax,edx
c0018275:	83 c0 2c             	add    eax,0x2c
c0018278:	8a 00                	mov    al,BYTE PTR [eax]
c001827a:	0f b6 d0             	movzx  edx,al
c001827d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018281:	8d 48 01             	lea    ecx,[eax+0x1]
c0018284:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018288:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001828c:	0f b6 c0             	movzx  eax,al
c001828f:	c1 e0 08             	shl    eax,0x8
c0018292:	09 d0                	or     eax,edx
c0018294:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018298:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001829d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182a1:	8d 50 01             	lea    edx,[eax+0x1]
c00182a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182ac:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00182b0:	0f b6 c0             	movzx  eax,al
c00182b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bb:	c1 e0 08             	shl    eax,0x8
c00182be:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00182c2:	89 c1                	mov    ecx,eax
c00182c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182c8:	c1 e0 18             	shl    eax,0x18
c00182cb:	89 c3                	mov    ebx,eax
c00182cd:	a1 10 17 03 c0       	mov    eax,ds:0xc0031710
c00182d2:	8d 50 01             	lea    edx,[eax+0x1]
c00182d5:	89 15 10 17 03 c0    	mov    DWORD PTR ds:0xc0031710,edx
c00182db:	09 d9                	or     ecx,ebx
c00182dd:	89 ca                	mov    edx,ecx
c00182df:	89 14 85 20 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8e0],edx
c00182e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182f2:	68 f4 be 02 c0       	push   0xc002bef4
c00182f7:	e8 cf ab ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	eb 0c                	jmp    c001830d <scanMADT()+0x469>
c0018301:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018306:	75 05                	jne    c001830d <scanMADT()+0x469>
c0018308:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001830d:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018312:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018316:	01 d0                	add    eax,edx
c0018318:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001831c:	e9 54 fc ff ff       	jmp    c0017f75 <scanMADT()+0xd1>
c0018321:	90                   	nop
c0018322:	eb 01                	jmp    c0018325 <scanMADT()+0x481>
c0018324:	90                   	nop
c0018325:	83 c4 38             	add    esp,0x38
c0018328:	5b                   	pop    ebx
c0018329:	c3                   	ret    

c001832a <ACPI::ACPI()>:
c001832a:	83 ec 0c             	sub    esp,0xc
c001832d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018331:	83 ec 08             	sub    esp,0x8
c0018334:	68 55 bd 02 c0       	push   0xc002bd55
c0018339:	50                   	push   eax
c001833a:	e8 b1 c1 ff ff       	call   c00144f0 <Device::Device(char const*)>
c001833f:	83 c4 10             	add    esp,0x10
c0018342:	ba 90 bf 02 c0       	mov    edx,0xc002bf90
c0018347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001834b:	89 10                	mov    DWORD PTR [eax],edx
c001834d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018351:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001835c:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001836a:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018378:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001837f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018383:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001838a:	e8 15 fb ff ff       	call   c0017ea4 <scanMADT()>
c001838f:	90                   	nop
c0018390:	83 c4 0c             	add    esp,0xc
c0018393:	c3                   	ret    

c0018394 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018394:	83 ec 2c             	sub    esp,0x2c
c0018397:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001839b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001839f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00183a3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183a7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00183ac:	88 d0                	mov    al,dl
c00183ae:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00183b7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00183bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183c3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183c9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00183cd:	0f 8d 97 00 00 00    	jge    c001846a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00183d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183db:	83 c2 2a             	add    edx,0x2a
c00183de:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00183e2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183e7:	75 78                	jne    c0018461 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f1:	83 c2 2a             	add    edx,0x2a
c00183f4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183f8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00183fc:	75 63                	jne    c0018461 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183fe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018403:	74 3a                	je     c001843f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018405:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018409:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001840d:	83 c2 2a             	add    edx,0x2a
c0018410:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018414:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001841b:	39 c2                	cmp    edx,eax
c001841d:	74 10                	je     c001842f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001841f:	83 ec 0c             	sub    esp,0xc
c0018422:	68 30 bf 02 c0       	push   0xc002bf30
c0018427:	e8 5b 24 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	83 ec 0c             	sub    esp,0xc
c0018432:	68 5a bd 02 c0       	push   0xc002bd5a
c0018437:	e8 4b 24 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001843c:	83 c4 10             	add    esp,0x10
c001843f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018447:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001844b:	83 c2 2a             	add    edx,0x2a
c001844e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018452:	8b 02                	mov    eax,DWORD PTR [edx]
c0018454:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018457:	89 01                	mov    DWORD PTR [ecx],eax
c0018459:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001845c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018461:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018465:	e9 55 ff ff ff       	jmp    c00183bf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001846a:	90                   	nop
c001846b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001846f:	83 c4 2c             	add    esp,0x2c
c0018472:	c2 04 00             	ret    0x4
c0018475:	90                   	nop

c0018476 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018476:	83 ec 1c             	sub    esp,0x1c
c0018479:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001847d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018481:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018485:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001848a:	88 c8                	mov    al,cl
c001848c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018490:	88 d0                	mov    al,dl
c0018492:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001849a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184a7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00184ab:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00184af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184bd:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00184c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184c4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00184c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184cd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184d3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00184d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00184da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184de:	83 c2 2a             	add    edx,0x2a
c00184e1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184e9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184fa:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00184fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018502:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018508:	8d 50 01             	lea    edx,[eax+0x1]
c001850b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001850f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018519:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001851f:	3d 00 02 00 00       	cmp    eax,0x200
c0018524:	75 10                	jne    c0018536 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018526:	83 ec 0c             	sub    esp,0xc
c0018529:	68 69 bd 02 c0       	push   0xc002bd69
c001852e:	e8 54 23 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0018533:	83 c4 10             	add    esp,0x10
c0018536:	90                   	nop
c0018537:	83 c4 1c             	add    esp,0x1c
c001853a:	c3                   	ret    
c001853b:	90                   	nop

c001853c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001853c:	b8 00 00 00 00       	mov    eax,0x0
c0018541:	c3                   	ret    

c0018542 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018542:	83 ec 1c             	sub    esp,0x1c
c0018545:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018549:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001854c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018550:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0018555:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001855a:	83 ec 08             	sub    esp,0x8
c001855d:	52                   	push   edx
c001855e:	50                   	push   eax
c001855f:	e8 c6 69 ff ff       	call   c000ef2a <Computer::readCMOS(unsigned char)>
c0018564:	83 c4 10             	add    esp,0x10
c0018567:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001856b:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0018570:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018575:	83 ec 04             	sub    esp,0x4
c0018578:	6a 01                	push   0x1
c001857a:	52                   	push   edx
c001857b:	50                   	push   eax
c001857c:	e8 bf 6a ff ff       	call   c000f040 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018581:	83 c4 10             	add    esp,0x10
c0018584:	90                   	nop
c0018585:	83 c4 1c             	add    esp,0x1c
c0018588:	c3                   	ret    
c0018589:	90                   	nop

c001858a <ACPI::sleep()>:
c001858a:	83 ec 0c             	sub    esp,0xc
c001858d:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c0018592:	85 c0                	test   eax,eax
c0018594:	74 07                	je     c001859d <ACPI::sleep()+0x13>
c0018596:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c001859b:	ff d0                	call   eax
c001859d:	90                   	nop
c001859e:	83 c4 0c             	add    esp,0xc
c00185a1:	c3                   	ret    

c00185a2 <ACPI::open(int, int, void*)>:
c00185a2:	57                   	push   edi
c00185a3:	56                   	push   esi
c00185a4:	53                   	push   ebx
c00185a5:	83 ec 60             	sub    esp,0x60
c00185a8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185ac:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00185b3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185b7:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00185be:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00185c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185c9:	83 e0 04             	and    eax,0x4
c00185cc:	84 c0                	test   al,al
c00185ce:	74 47                	je     c0018617 <ACPI::open(int, int, void*)+0x75>
c00185d0:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c00185d5:	83 ec 08             	sub    esp,0x8
c00185d8:	68 86 bd 02 c0       	push   0xc002bd86
c00185dd:	50                   	push   eax
c00185de:	e8 25 f8 ff ff       	call   c0017e08 <findDataTable(unsigned char*, char*)>
c00185e3:	83 c4 10             	add    esp,0x10
c00185e6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00185ea:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c00185ef:	74 26                	je     c0018617 <ACPI::open(int, int, void*)+0x75>
c00185f1:	83 ec 0c             	sub    esp,0xc
c00185f4:	68 8b bd 02 c0       	push   0xc002bd8b
c00185f9:	e8 cd a8 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00185fe:	83 c4 10             	add    esp,0x10
c0018601:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018605:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001860c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018610:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018617:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c001861f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018623:	8a 00                	mov    al,BYTE PTR [eax]
c0018625:	3c 01                	cmp    al,0x1
c0018627:	75 28                	jne    c0018651 <ACPI::open(int, int, void*)+0xaf>
c0018629:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001862d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018634:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018638:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001863f:	83 ec 0c             	sub    esp,0xc
c0018642:	68 9c bd 02 c0       	push   0xc002bd9c
c0018647:	e8 7f a8 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001864c:	83 c4 10             	add    esp,0x10
c001864f:	eb 25                	jmp    c0018676 <ACPI::open(int, int, void*)+0xd4>
c0018651:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018655:	8a 00                	mov    al,BYTE PTR [eax]
c0018657:	3c 02                	cmp    al,0x2
c0018659:	75 1b                	jne    c0018676 <ACPI::open(int, int, void*)+0xd4>
c001865b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001865f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018666:	83 ec 0c             	sub    esp,0xc
c0018669:	68 a4 bd 02 c0       	push   0xc002bda4
c001866e:	e8 58 a8 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0018673:	83 c4 10             	add    esp,0x10
c0018676:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001867a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018680:	83 f0 01             	xor    eax,0x1
c0018683:	84 c0                	test   al,al
c0018685:	74 6a                	je     c00186f1 <ACPI::open(int, int, void*)+0x14f>
c0018687:	83 ec 0c             	sub    esp,0xc
c001868a:	68 ac bd 02 c0       	push   0xc002bdac
c001868f:	e8 37 a8 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0018694:	83 c4 10             	add    esp,0x10
c0018697:	e8 b4 7a fe ff       	call   c0000150 <manualPCIProbe>
c001869c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00186a0:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c00186a5:	75 28                	jne    c00186cf <ACPI::open(int, int, void*)+0x12d>
c00186a7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186ab:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186b2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186b6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186bd:	83 ec 0c             	sub    esp,0xc
c00186c0:	68 ba bd 02 c0       	push   0xc002bdba
c00186c5:	e8 01 a8 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00186ca:	83 c4 10             	add    esp,0x10
c00186cd:	eb 22                	jmp    c00186f1 <ACPI::open(int, int, void*)+0x14f>
c00186cf:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c00186d4:	75 1b                	jne    c00186f1 <ACPI::open(int, int, void*)+0x14f>
c00186d6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186da:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186e1:	83 ec 0c             	sub    esp,0xc
c00186e4:	68 c4 bd 02 c0       	push   0xc002bdc4
c00186e9:	e8 dd a7 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186f5:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186fb:	84 c0                	test   al,al
c00186fd:	74 13                	je     c0018712 <ACPI::open(int, int, void*)+0x170>
c00186ff:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018703:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018709:	83 f0 01             	xor    eax,0x1
c001870c:	0f b6 c0             	movzx  eax,al
c001870f:	40                   	inc    eax
c0018710:	eb 05                	jmp    c0018717 <ACPI::open(int, int, void*)+0x175>
c0018712:	b8 00 00 00 00       	mov    eax,0x0
c0018717:	83 ec 08             	sub    esp,0x8
c001871a:	50                   	push   eax
c001871b:	68 ce bd 02 c0       	push   0xc002bdce
c0018720:	e8 a6 a7 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0018725:	83 c4 10             	add    esp,0x10
c0018728:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001872c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018732:	84 c0                	test   al,al
c0018734:	74 67                	je     c001879d <ACPI::open(int, int, void*)+0x1fb>
c0018736:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c001873e:	83 ec 0c             	sub    esp,0xc
c0018741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018745:	e8 ca 71 ff ff       	call   c000f914 <malloc>
c001874a:	83 c4 10             	add    esp,0x10
c001874d:	89 c3                	mov    ebx,eax
c001874f:	83 ec 0c             	sub    esp,0xc
c0018752:	53                   	push   ebx
c0018753:	e8 9c a8 00 00       	call   c0022ff4 <PCI::PCI()>
c0018758:	83 c4 10             	add    esp,0x10
c001875b:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c001875f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018763:	83 ec 08             	sub    esp,0x8
c0018766:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001876a:	50                   	push   eax
c001876b:	e8 90 bb ff ff       	call   c0014300 <Device::addChild(Device*)>
c0018770:	83 c4 10             	add    esp,0x10
c0018773:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018777:	8b 00                	mov    eax,DWORD PTR [eax]
c0018779:	83 c0 08             	add    eax,0x8
c001877c:	8b 00                	mov    eax,DWORD PTR [eax]
c001877e:	6a 00                	push   0x0
c0018780:	6a 00                	push   0x0
c0018782:	6a 00                	push   0x0
c0018784:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018788:	ff d0                	call   eax
c001878a:	83 c4 10             	add    esp,0x10
c001878d:	83 ec 0c             	sub    esp,0xc
c0018790:	68 d7 bd 02 c0       	push   0xc002bdd7
c0018795:	e8 31 a7 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001879a:	83 c4 10             	add    esp,0x10
c001879d:	83 ec 0c             	sub    esp,0xc
c00187a0:	68 e2 bd 02 c0       	push   0xc002bde2
c00187a5:	e8 7f 48 00 00       	call   c001d029 <Thr::loadKernelSymbolTable(char const*)>
c00187aa:	83 c4 10             	add    esp,0x10
c00187ad:	83 ec 0c             	sub    esp,0xc
c00187b0:	6a 0c                	push   0xc
c00187b2:	e8 4d 95 ff ff       	call   c0011d04 <Virt::setupPageSwapping(int)>
c00187b7:	83 c4 10             	add    esp,0x10
c00187ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c00187be:	83 ec 08             	sub    esp,0x8
c00187c1:	6a 12                	push   0x12
c00187c3:	50                   	push   eax
c00187c4:	e8 a7 be ff ff       	call   c0014670 <getDevicesOfType(DeviceType)>
c00187c9:	83 c4 0c             	add    esp,0xc
c00187cc:	83 ec 0c             	sub    esp,0xc
c00187cf:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187d3:	50                   	push   eax
c00187d4:	e8 47 0c 01 00       	call   c0029420 <LinkedList<Device>::isEmpty()>
c00187d9:	83 c4 10             	add    esp,0x10
c00187dc:	83 f0 01             	xor    eax,0x1
c00187df:	84 c0                	test   al,al
c00187e1:	0f 84 fd 00 00 00    	je     c00188e4 <ACPI::open(int, int, void*)+0x342>
c00187e7:	83 ec 0c             	sub    esp,0xc
c00187ea:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187ee:	50                   	push   eax
c00187ef:	e8 48 0c 01 00       	call   c002943c <LinkedList<Device>::getFirstElement()>
c00187f4:	83 c4 10             	add    esp,0x10
c00187f7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00187fb:	83 ec 0c             	sub    esp,0xc
c00187fe:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018802:	50                   	push   eax
c0018803:	e8 3c 0c 01 00       	call   c0029444 <LinkedList<Device>::removeFirst()>
c0018808:	83 c4 10             	add    esp,0x10
c001880b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001880f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0018813:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018817:	83 ec 0c             	sub    esp,0xc
c001881a:	50                   	push   eax
c001881b:	e8 cc bd ff ff       	call   c00145ec <Device::getName()>
c0018820:	83 c4 10             	add    esp,0x10
c0018823:	83 ec 08             	sub    esp,0x8
c0018826:	50                   	push   eax
c0018827:	68 60 bf 02 c0       	push   0xc002bf60
c001882c:	e8 9a a6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0018831:	83 c4 10             	add    esp,0x10
c0018834:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018838:	8d 44 24 04          	lea    eax,[esp+0x4]
c001883c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018842:	ba 09 00 00 00       	mov    edx,0x9
c0018847:	fc                   	cld    
c0018848:	89 c7                	mov    edi,eax
c001884a:	89 de                	mov    esi,ebx
c001884c:	89 d1                	mov    ecx,edx
c001884e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018850:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018854:	0f b6 c0             	movzx  eax,al
c0018857:	83 ec 08             	sub    esp,0x8
c001885a:	50                   	push   eax
c001885b:	68 00 be 02 c0       	push   0xc002be00
c0018860:	e8 66 a6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0018865:	83 c4 10             	add    esp,0x10
c0018868:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001886c:	0f b6 c0             	movzx  eax,al
c001886f:	83 ec 08             	sub    esp,0x8
c0018872:	50                   	push   eax
c0018873:	68 12 be 02 c0       	push   0xc002be12
c0018878:	e8 4e a6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001887d:	83 c4 10             	add    esp,0x10
c0018880:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0018885:	0f b7 c0             	movzx  eax,ax
c0018888:	83 ec 08             	sub    esp,0x8
c001888b:	50                   	push   eax
c001888c:	68 24 be 02 c0       	push   0xc002be24
c0018891:	e8 35 a6 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0018896:	83 c4 10             	add    esp,0x10
c0018899:	83 ec 0c             	sub    esp,0xc
c001889c:	83 ec 24             	sub    esp,0x24
c001889f:	89 e0                	mov    eax,esp
c00188a1:	89 c3                	mov    ebx,eax
c00188a3:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188a7:	ba 09 00 00 00       	mov    edx,0x9
c00188ac:	89 df                	mov    edi,ebx
c00188ae:	89 c6                	mov    esi,eax
c00188b0:	89 d1                	mov    ecx,edx
c00188b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188b4:	e8 9d aa 00 00       	call   c0023356 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c00188b9:	83 c4 30             	add    esp,0x30
c00188bc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00188c0:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00188c5:	0f 84 01 ff ff ff    	je     c00187cc <ACPI::open(int, int, void*)+0x22a>
c00188cb:	83 ec 08             	sub    esp,0x8
c00188ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188d2:	68 36 be 02 c0       	push   0xc002be36
c00188d7:	e8 ef a5 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00188dc:	83 c4 10             	add    esp,0x10
c00188df:	e9 e8 fe ff ff       	jmp    c00187cc <ACPI::open(int, int, void*)+0x22a>
c00188e4:	83 ec 0c             	sub    esp,0xc
c00188e7:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188eb:	50                   	push   eax
c00188ec:	e8 2d 0b 01 00       	call   c002941e <LinkedList<Device>::~LinkedList()>
c00188f1:	83 c4 10             	add    esp,0x10
c00188f4:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c00188fa:	83 ec 08             	sub    esp,0x8
c00188fd:	6a 01                	push   0x1
c00188ff:	68 42 be 02 c0       	push   0xc002be42
c0018904:	e8 97 51 00 00       	call   c001daa0 <Thr::loadDLL(char const*, bool)>
c0018909:	83 c4 10             	add    esp,0x10
c001890c:	83 ec 08             	sub    esp,0x8
c001890f:	53                   	push   ebx
c0018910:	50                   	push   eax
c0018911:	e8 b5 53 00 00       	call   c001dccb <Thr::executeDLL(unsigned long, void*)>
c0018916:	83 c4 10             	add    esp,0x10
c0018919:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c001891f:	83 ec 08             	sub    esp,0x8
c0018922:	6a 01                	push   0x1
c0018924:	68 5f be 02 c0       	push   0xc002be5f
c0018929:	e8 72 51 00 00       	call   c001daa0 <Thr::loadDLL(char const*, bool)>
c001892e:	83 c4 10             	add    esp,0x10
c0018931:	83 ec 08             	sub    esp,0x8
c0018934:	53                   	push   ebx
c0018935:	50                   	push   eax
c0018936:	e8 90 53 00 00       	call   c001dccb <Thr::executeDLL(unsigned long, void*)>
c001893b:	83 c4 10             	add    esp,0x10
c001893e:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0018943:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018949:	83 e0 04             	and    eax,0x4
c001894c:	84 c0                	test   al,al
c001894e:	0f 84 d3 00 00 00    	je     c0018a27 <ACPI::open(int, int, void*)+0x485>
c0018954:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c001895c:	83 ec 0c             	sub    esp,0xc
c001895f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018963:	e8 ac 6f ff ff       	call   c000f914 <malloc>
c0018968:	83 c4 10             	add    esp,0x10
c001896b:	89 c3                	mov    ebx,eax
c001896d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0018972:	83 ec 04             	sub    esp,0x4
c0018975:	50                   	push   eax
c0018976:	68 7c be 02 c0       	push   0xc002be7c
c001897b:	53                   	push   ebx
c001897c:	e8 a9 aa ff ff       	call   c001342a <File::File(char const*, Process*)>
c0018981:	83 c4 10             	add    esp,0x10
c0018984:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0018988:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001898d:	74 17                	je     c00189a6 <ACPI::open(int, int, void*)+0x404>
c001898f:	83 ec 0c             	sub    esp,0xc
c0018992:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018996:	e8 61 ad ff ff       	call   c00136fc <File::exists()>
c001899b:	83 c4 10             	add    esp,0x10
c001899e:	84 c0                	test   al,al
c00189a0:	74 04                	je     c00189a6 <ACPI::open(int, int, void*)+0x404>
c00189a2:	b0 01                	mov    al,0x1
c00189a4:	eb 02                	jmp    c00189a8 <ACPI::open(int, int, void*)+0x406>
c00189a6:	b0 00                	mov    al,0x0
c00189a8:	84 c0                	test   al,al
c00189aa:	74 22                	je     c00189ce <ACPI::open(int, int, void*)+0x42c>
c00189ac:	83 ec 08             	sub    esp,0x8
c00189af:	6a 01                	push   0x1
c00189b1:	68 7c be 02 c0       	push   0xc002be7c
c00189b6:	e8 e5 50 00 00       	call   c001daa0 <Thr::loadDLL(char const*, bool)>
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	83 ec 08             	sub    esp,0x8
c00189c1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00189c5:	50                   	push   eax
c00189c6:	e8 00 53 00 00       	call   c001dccb <Thr::executeDLL(unsigned long, void*)>
c00189cb:	83 c4 10             	add    esp,0x10
c00189ce:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189d3:	74 1e                	je     c00189f3 <ACPI::open(int, int, void*)+0x451>
c00189d5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189da:	74 17                	je     c00189f3 <ACPI::open(int, int, void*)+0x451>
c00189dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00189e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00189e2:	83 c0 08             	add    eax,0x8
c00189e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00189e7:	83 ec 0c             	sub    esp,0xc
c00189ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189ee:	ff d0                	call   eax
c00189f0:	83 c4 10             	add    esp,0x10
c00189f3:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c00189f8:	83 ec 08             	sub    esp,0x8
c00189fb:	68 99 be 02 c0       	push   0xc002be99
c0018a00:	50                   	push   eax
c0018a01:	e8 02 f4 ff ff       	call   c0017e08 <findDataTable(unsigned char*, char*)>
c0018a06:	83 c4 10             	add    esp,0x10
c0018a09:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018a0d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0018a12:	74 13                	je     c0018a27 <ACPI::open(int, int, void*)+0x485>
c0018a14:	83 ec 08             	sub    esp,0x8
c0018a17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018a1b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0018a1f:	e8 1e fb ff ff       	call   c0018542 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a24:	83 c4 10             	add    esp,0x10
c0018a27:	b8 00 00 00 00       	mov    eax,0x0
c0018a2c:	83 c4 60             	add    esp,0x60
c0018a2f:	5b                   	pop    ebx
c0018a30:	5e                   	pop    esi
c0018a31:	5f                   	pop    edi
c0018a32:	c3                   	ret    
c0018a33:	90                   	nop

c0018a34 <CPU::close(int, int, void*)>:
c0018a34:	31 c0                	xor    eax,eax
c0018a36:	c3                   	ret    
c0018a37:	90                   	nop

c0018a38 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a38:	55                   	push   ebp
c0018a39:	57                   	push   edi
c0018a3a:	56                   	push   esi
c0018a3b:	53                   	push   ebx
c0018a3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a44:	89 ce                	mov    esi,ecx
c0018a46:	89 d5                	mov    ebp,edx
c0018a48:	80 f9 04             	cmp    cl,0x4
c0018a4b:	75 28                	jne    c0018a75 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a4d:	8d 42 f9             	lea    eax,[edx-0x7]
c0018a50:	3c 03                	cmp    al,0x3
c0018a52:	0f 86 63 01 00 00    	jbe    c0018bbb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a58:	80 fa 03             	cmp    dl,0x3
c0018a5b:	0f 84 5a 01 00 00    	je     c0018bbb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a61:	8d 7a f2             	lea    edi,[edx-0xe]
c0018a64:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018a69:	89 fb                	mov    ebx,edi
c0018a6b:	80 fb 01             	cmp    bl,0x1
c0018a6e:	77 4e                	ja     c0018abe <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a70:	e9 52 01 00 00       	jmp    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a75:	80 f9 05             	cmp    cl,0x5
c0018a78:	75 4d                	jne    c0018ac7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a7a:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018a7f:	80 fa 03             	cmp    dl,0x3
c0018a82:	0f 86 3f 01 00 00    	jbe    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a88:	8d 7a fa             	lea    edi,[edx-0x6]
c0018a8b:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018a90:	89 fb                	mov    ebx,edi
c0018a92:	80 fb 01             	cmp    bl,0x1
c0018a95:	0f 86 2c 01 00 00    	jbe    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a9b:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018aa0:	80 fa 08             	cmp    dl,0x8
c0018aa3:	0f 84 1e 01 00 00    	je     c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aa9:	89 d7                	mov    edi,edx
c0018aab:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018ab0:	83 e7 fb             	and    edi,0xfffffffb
c0018ab3:	89 fb                	mov    ebx,edi
c0018ab5:	80 fb 09             	cmp    bl,0x9
c0018ab8:	0f 84 09 01 00 00    	je     c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018abe:	31 c0                	xor    eax,eax
c0018ac0:	89 eb                	mov    ebx,ebp
c0018ac2:	0f b6 fb             	movzx  edi,bl
c0018ac5:	eb 30                	jmp    c0018af7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018ac7:	31 c0                	xor    eax,eax
c0018ac9:	80 f9 06             	cmp    cl,0x6
c0018acc:	75 f2                	jne    c0018ac0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ace:	80 fa 0a             	cmp    dl,0xa
c0018ad1:	77 ed                	ja     c0018ac0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ad3:	bf de 05 00 00       	mov    edi,0x5de
c0018ad8:	0f a3 d7             	bt     edi,edx
c0018adb:	73 e3                	jae    c0018ac0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018add:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018ae2:	e9 e0 00 00 00       	jmp    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ae7:	39 c7                	cmp    edi,eax
c0018ae9:	0f 84 d3 00 00 00    	je     c0018bc2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018aef:	40                   	inc    eax
c0018af0:	3d d0 00 00 00       	cmp    eax,0xd0
c0018af5:	74 09                	je     c0018b00 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018af7:	89 f3                	mov    ebx,esi
c0018af9:	80 fb 0f             	cmp    bl,0xf
c0018afc:	75 f1                	jne    c0018aef <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018afe:	eb e7                	jmp    c0018ae7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b00:	80 f9 10             	cmp    cl,0x10
c0018b03:	75 14                	jne    c0018b19 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b05:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b08:	83 e0 fb             	and    eax,0xfffffffb
c0018b0b:	3c 02                	cmp    al,0x2
c0018b0d:	76 34                	jbe    c0018b43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b0f:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b14:	80 fa 02             	cmp    dl,0x2
c0018b17:	eb 24                	jmp    c0018b3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b19:	80 f9 11             	cmp    cl,0x11
c0018b1c:	75 13                	jne    c0018b31 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b1e:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b23:	80 fa 03             	cmp    dl,0x3
c0018b26:	0f 85 9b 00 00 00    	jne    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b2c:	e9 91 00 00 00       	jmp    c0018bc2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b31:	80 f9 12             	cmp    cl,0x12
c0018b34:	75 14                	jne    c0018b4a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b36:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b3b:	fe ca                	dec    dl
c0018b3d:	0f 85 84 00 00 00    	jne    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b43:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018b48:	eb 7d                	jmp    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b4a:	80 f9 14             	cmp    cl,0x14
c0018b4d:	75 12                	jne    c0018b61 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018b4f:	4a                   	dec    edx
c0018b50:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b55:	80 fa 01             	cmp    dl,0x1
c0018b58:	77 6d                	ja     c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b5a:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018b5f:	eb 66                	jmp    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b61:	80 f9 15             	cmp    cl,0x15
c0018b64:	75 31                	jne    c0018b97 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018b66:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018b6b:	80 fa 01             	cmp    dl,0x1
c0018b6e:	74 57                	je     c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b70:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b75:	80 fa 13             	cmp    dl,0x13
c0018b78:	76 0c                	jbe    c0018b86 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b7a:	80 fa 30             	cmp    dl,0x30
c0018b7d:	75 48                	jne    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b7f:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018b84:	eb 41                	jmp    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b86:	b9 04 00 09 00       	mov    ecx,0x90004
c0018b8b:	0f a3 d1             	bt     ecx,edx
c0018b8e:	73 37                	jae    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b90:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018b95:	eb 30                	jmp    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b97:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018b9c:	80 f9 16             	cmp    cl,0x16
c0018b9f:	75 26                	jne    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba1:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018ba6:	84 d2                	test   dl,dl
c0018ba8:	74 1d                	je     c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018baa:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018baf:	80 fa 30             	cmp    dl,0x30
c0018bb2:	75 13                	jne    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb4:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018bb9:	eb 0c                	jmp    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bbb:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018bc0:	eb 05                	jmp    c0018bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bc2:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018bc7:	5b                   	pop    ebx
c0018bc8:	5e                   	pop    esi
c0018bc9:	5f                   	pop    edi
c0018bca:	5d                   	pop    ebp
c0018bcb:	c3                   	ret    

c0018bcc <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018bcc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bd4:	80 f9 04             	cmp    cl,0x4
c0018bd7:	75 6b                	jne    c0018c44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018bd9:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0018bde:	80 fa 01             	cmp    dl,0x1
c0018be1:	0f 86 92 02 00 00    	jbe    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be7:	b8 b0 e0 02 c0       	mov    eax,0xc002e0b0
c0018bec:	80 fa 02             	cmp    dl,0x2
c0018bef:	0f 84 84 02 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf5:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0018bfa:	80 fa 03             	cmp    dl,0x3
c0018bfd:	0f 84 76 02 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c03:	b8 d0 e0 02 c0       	mov    eax,0xc002e0d0
c0018c08:	80 fa 04             	cmp    dl,0x4
c0018c0b:	0f 84 68 02 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c11:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018c16:	80 fa 05             	cmp    dl,0x5
c0018c19:	0f 84 5a 02 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c1f:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0018c24:	80 fa 07             	cmp    dl,0x7
c0018c27:	0f 84 4c 02 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2d:	83 ea 08             	sub    edx,0x8
c0018c30:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018c35:	80 fa 01             	cmp    dl,0x1
c0018c38:	0f 87 3b 02 00 00    	ja     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c3e:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c0018c43:	c3                   	ret    
c0018c44:	80 f9 05             	cmp    cl,0x5
c0018c47:	75 45                	jne    c0018c8e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c49:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c4c:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018c51:	80 f9 02             	cmp    cl,0x2
c0018c54:	0f 86 1f 02 00 00    	jbe    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5a:	80 fa 04             	cmp    dl,0x4
c0018c5d:	0f 84 f3 01 00 00    	je     c0018e56 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018c63:	80 fa 07             	cmp    dl,0x7
c0018c66:	0f 84 0d 02 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c6c:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018c71:	80 fa 08             	cmp    dl,0x8
c0018c74:	0f 84 ff 01 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c7a:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018c7f:	80 fa 09             	cmp    dl,0x9
c0018c82:	0f 85 f1 01 00 00    	jne    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c88:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0018c8d:	c3                   	ret    
c0018c8e:	80 f9 06             	cmp    cl,0x6
c0018c91:	0f 85 85 01 00 00    	jne    c0018e1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018c97:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018c9c:	80 fa 01             	cmp    dl,0x1
c0018c9f:	0f 84 d4 01 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca5:	8d 42 fb             	lea    eax,[edx-0x5]
c0018ca8:	3c 01                	cmp    al,0x1
c0018caa:	0f 86 ac 01 00 00    	jbe    c0018e5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cb0:	80 fa 03             	cmp    dl,0x3
c0018cb3:	0f 84 a3 01 00 00    	je     c0018e5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cb9:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018cbc:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018cc1:	80 f9 01             	cmp    cl,0x1
c0018cc4:	0f 86 af 01 00 00    	jbe    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cca:	80 fa 09             	cmp    dl,0x9
c0018ccd:	0f 84 8f 01 00 00    	je     c0018e62 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018cd3:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018cd6:	80 f9 01             	cmp    cl,0x1
c0018cd9:	0f 86 9a 01 00 00    	jbe    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cdf:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018ce4:	80 fa 0d             	cmp    dl,0xd
c0018ce7:	0f 84 8c 01 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ced:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018cf2:	80 fa 0e             	cmp    dl,0xe
c0018cf5:	0f 84 7e 01 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cfb:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018d00:	80 fa 0f             	cmp    dl,0xf
c0018d03:	0f 84 70 01 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d09:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018d0e:	80 fa 15             	cmp    dl,0x15
c0018d11:	0f 84 62 01 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d17:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d1a:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018d1f:	80 f9 01             	cmp    cl,0x1
c0018d22:	0f 86 51 01 00 00    	jbe    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d28:	80 fa 1a             	cmp    dl,0x1a
c0018d2b:	0f 84 37 01 00 00    	je     c0018e68 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d31:	80 fa 1c             	cmp    dl,0x1c
c0018d34:	0f 84 34 01 00 00    	je     c0018e6e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d3a:	80 fa 1d             	cmp    dl,0x1d
c0018d3d:	0f 84 36 01 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d43:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018d48:	80 fa 25             	cmp    dl,0x25
c0018d4b:	0f 84 28 01 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d51:	8d 4a da             	lea    ecx,[edx-0x26]
c0018d54:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018d59:	80 f9 01             	cmp    cl,0x1
c0018d5c:	0f 86 17 01 00 00    	jbe    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d62:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018d67:	80 fa 2a             	cmp    dl,0x2a
c0018d6a:	0f 84 09 01 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d70:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018d75:	80 fa 2c             	cmp    dl,0x2c
c0018d78:	0f 84 fb 00 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d7e:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018d83:	80 fa 2d             	cmp    dl,0x2d
c0018d86:	0f 84 ed 00 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d8c:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018d91:	80 fa 2e             	cmp    dl,0x2e
c0018d94:	0f 84 df 00 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d9a:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018d9f:	80 fa 2f             	cmp    dl,0x2f
c0018da2:	0f 84 d1 00 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da8:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018dab:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018db0:	80 f9 01             	cmp    cl,0x1
c0018db3:	0f 86 c0 00 00 00    	jbe    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db9:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018dbe:	80 fa 37             	cmp    dl,0x37
c0018dc1:	0f 84 b2 00 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc7:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018dcc:	80 fa 3a             	cmp    dl,0x3a
c0018dcf:	0f 84 a4 00 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dd5:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018dda:	80 fa 3c             	cmp    dl,0x3c
c0018ddd:	0f 84 96 00 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018de3:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018de8:	80 fa 3d             	cmp    dl,0x3d
c0018deb:	0f 84 88 00 00 00    	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df1:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018df6:	80 fa 3e             	cmp    dl,0x3e
c0018df9:	74 7e                	je     c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dfb:	8d 42 bb             	lea    eax,[edx-0x45]
c0018dfe:	3c 01                	cmp    al,0x1
c0018e00:	76 72                	jbe    c0018e74 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e02:	80 fa 3f             	cmp    dl,0x3f
c0018e05:	74 6d                	je     c0018e74 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e07:	80 fa 4a             	cmp    dl,0x4a
c0018e0a:	74 0a                	je     c0018e16 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e0c:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018e11:	80 fa 4d             	cmp    dl,0x4d
c0018e14:	75 63                	jne    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e16:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018e1b:	c3                   	ret    
c0018e1c:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018e21:	80 f9 0b             	cmp    cl,0xb
c0018e24:	75 0a                	jne    c0018e30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e26:	fe ca                	dec    dl
c0018e28:	75 4f                	jne    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e2a:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018e2f:	c3                   	ret    
c0018e30:	80 f9 0f             	cmp    cl,0xf
c0018e33:	75 44                	jne    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e35:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018e3a:	80 fa 02             	cmp    dl,0x2
c0018e3d:	76 3a                	jbe    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e3f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e42:	3c 01                	cmp    al,0x1
c0018e44:	76 0a                	jbe    c0018e50 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e46:	b8 a6 c2 02 c0       	mov    eax,0xc002c2a6
c0018e4b:	80 fa 06             	cmp    dl,0x6
c0018e4e:	75 29                	jne    c0018e79 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e50:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018e55:	c3                   	ret    
c0018e56:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018e5b:	c3                   	ret    
c0018e5c:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018e61:	c3                   	ret    
c0018e62:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018e67:	c3                   	ret    
c0018e68:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018e6d:	c3                   	ret    
c0018e6e:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018e73:	c3                   	ret    
c0018e74:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018e79:	c3                   	ret    

c0018e7a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e7a:	60                   	pusha  
c0018e7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e87:	9c                   	pushf  
c0018e88:	fa                   	cli    
c0018e89:	0f 09                	wbinvd 
c0018e8b:	0f 30                	wrmsr  
c0018e8d:	9d                   	popf   
c0018e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e92:	89 02                	mov    DWORD PTR [edx],eax
c0018e94:	61                   	popa   
c0018e95:	c3                   	ret    

c0018e96 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018e96:	60                   	pusha  
c0018e97:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e9b:	9c                   	pushf  
c0018e9c:	fa                   	cli    
c0018e9d:	0f 09                	wbinvd 
c0018e9f:	31 c0                	xor    eax,eax
c0018ea1:	31 d2                	xor    edx,edx
c0018ea3:	0f 32                	rdmsr  
c0018ea5:	9d                   	popf   
c0018ea6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018eaa:	89 02                	mov    DWORD PTR [edx],eax
c0018eac:	61                   	popa   
c0018ead:	c3                   	ret    

c0018eae <CPU::AMD_K6_writeback(int, int, int)>:
c0018eae:	56                   	push   esi
c0018eaf:	53                   	push   ebx
c0018eb0:	83 ec 10             	sub    esp,0x10
c0018eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018eb7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ebc:	75 5d                	jne    c0018f1b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ebe:	83 f8 08             	cmp    eax,0x8
c0018ec1:	75 09                	jne    c0018ecc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ec3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ec8:	7e 13                	jle    c0018edd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018eca:	eb 30                	jmp    c0018efc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ecc:	83 f8 06             	cmp    eax,0x6
c0018ecf:	7c 4a                	jl     c0018f1b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ed1:	83 f8 07             	cmp    eax,0x7
c0018ed4:	7e 07                	jle    c0018edd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ed6:	83 f8 09             	cmp    eax,0x9
c0018ed9:	74 21                	je     c0018efc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018edb:	eb 3e                	jmp    c0018f1b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018edd:	89 e6                	mov    esi,esp
c0018edf:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0018ee5:	56                   	push   esi
c0018ee6:	c1 eb 15             	shr    ebx,0x15
c0018ee9:	68 82 00 00 c0       	push   0xc0000082
c0018eee:	83 e3 7e             	and    ebx,0x7e
c0018ef1:	e8 a0 ff ff ff       	call   c0018e96 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ef6:	56                   	push   esi
c0018ef7:	6a 00                	push   0x0
c0018ef9:	53                   	push   ebx
c0018efa:	eb 12                	jmp    c0018f0e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018efc:	89 e3                	mov    ebx,esp
c0018efe:	53                   	push   ebx
c0018eff:	68 82 00 00 c0       	push   0xc0000082
c0018f04:	e8 8d ff ff ff       	call   c0018e96 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f09:	53                   	push   ebx
c0018f0a:	6a 00                	push   0x0
c0018f0c:	6a 00                	push   0x0
c0018f0e:	68 82 00 00 c0       	push   0xc0000082
c0018f13:	e8 62 ff ff ff       	call   c0018e7a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f18:	83 c4 18             	add    esp,0x18
c0018f1b:	83 c4 10             	add    esp,0x10
c0018f1e:	5b                   	pop    ebx
c0018f1f:	5e                   	pop    esi
c0018f20:	c3                   	ret    
c0018f21:	90                   	nop

c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f22:	55                   	push   ebp
c0018f23:	57                   	push   edi
c0018f24:	56                   	push   esi
c0018f25:	53                   	push   ebx
c0018f26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f2a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f2e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f32:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f36:	39 05 40 e3 02 c0    	cmp    DWORD PTR ds:0xc002e340,eax
c0018f3c:	75 23                	jne    c0018f61 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f3e:	a1 6c 19 03 c0       	mov    eax,ds:0xc003196c
c0018f43:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f47:	89 06                	mov    DWORD PTR [esi],eax
c0018f49:	a1 68 19 03 c0       	mov    eax,ds:0xc0031968
c0018f4e:	89 07                	mov    DWORD PTR [edi],eax
c0018f50:	a1 64 19 03 c0       	mov    eax,ds:0xc0031964
c0018f55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018f58:	a1 60 19 03 c0       	mov    eax,ds:0xc0031960
c0018f5d:	89 02                	mov    DWORD PTR [edx],eax
c0018f5f:	eb 3f                	jmp    c0018fa0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018f61:	31 c9                	xor    ecx,ecx
c0018f63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f67:	0f a2                	cpuid  
c0018f69:	89 06                	mov    DWORD PTR [esi],eax
c0018f6b:	89 1f                	mov    DWORD PTR [edi],ebx
c0018f6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f71:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f74:	89 10                	mov    DWORD PTR [eax],edx
c0018f76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f7a:	a3 40 e3 02 c0       	mov    ds:0xc002e340,eax
c0018f7f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f81:	a3 6c 19 03 c0       	mov    ds:0xc003196c,eax
c0018f86:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f88:	a3 68 19 03 c0       	mov    ds:0xc0031968,eax
c0018f8d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f90:	a3 64 19 03 c0       	mov    ds:0xc0031964,eax
c0018f95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f99:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f9b:	a3 60 19 03 c0       	mov    ds:0xc0031960,eax
c0018fa0:	5b                   	pop    ebx
c0018fa1:	5e                   	pop    esi
c0018fa2:	5f                   	pop    edi
c0018fa3:	5d                   	pop    ebp
c0018fa4:	c3                   	ret    
c0018fa5:	90                   	nop

c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>:
c0018fa6:	83 ec 10             	sub    esp,0x10
c0018fa9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fad:	50                   	push   eax
c0018fae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fb2:	50                   	push   eax
c0018fb3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fb7:	50                   	push   eax
c0018fb8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fbc:	50                   	push   eax
c0018fbd:	6a 01                	push   0x1
c0018fbf:	e8 5e ff ff ff       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fc8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018fcc:	0f 95 c0             	setne  al
c0018fcf:	83 c4 24             	add    esp,0x24
c0018fd2:	c3                   	ret    
c0018fd3:	90                   	nop

c0018fd4 <CPU::cpuidCheckECX(unsigned int)>:
c0018fd4:	83 ec 10             	sub    esp,0x10
c0018fd7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fdb:	50                   	push   eax
c0018fdc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe0:	50                   	push   eax
c0018fe1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe5:	50                   	push   eax
c0018fe6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fea:	50                   	push   eax
c0018feb:	6a 01                	push   0x1
c0018fed:	e8 30 ff ff ff       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ff2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ff6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ffa:	0f 95 c0             	setne  al
c0018ffd:	83 c4 24             	add    esp,0x24
c0019000:	c3                   	ret    
c0019001:	90                   	nop

c0019002 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0019002:	83 ec 10             	sub    esp,0x10
c0019005:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019009:	50                   	push   eax
c001900a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001900e:	50                   	push   eax
c001900f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019013:	50                   	push   eax
c0019014:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019018:	50                   	push   eax
c0019019:	6a 07                	push   0x7
c001901b:	e8 02 ff ff ff       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019020:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019024:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0019028:	0f 95 c0             	setne  al
c001902b:	83 c4 24             	add    esp,0x24
c001902e:	c3                   	ret    
c001902f:	90                   	nop

c0019030 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0019030:	83 ec 10             	sub    esp,0x10
c0019033:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019037:	50                   	push   eax
c0019038:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001903c:	50                   	push   eax
c001903d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019041:	50                   	push   eax
c0019042:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019046:	50                   	push   eax
c0019047:	6a 07                	push   0x7
c0019049:	e8 d4 fe ff ff       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001904e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019052:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019056:	0f 95 c0             	setne  al
c0019059:	83 c4 24             	add    esp,0x24
c001905c:	c3                   	ret    
c001905d:	90                   	nop

c001905e <CPU::CPU()>:
c001905e:	83 ec 0c             	sub    esp,0xc
c0019061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019065:	83 ec 08             	sub    esp,0x8
c0019068:	68 a6 c2 02 c0       	push   0xc002c2a6
c001906d:	50                   	push   eax
c001906e:	e8 7d b4 ff ff       	call   c00144f0 <Device::Device(char const*)>
c0019073:	83 c4 10             	add    esp,0x10
c0019076:	ba 80 c3 02 c0       	mov    edx,0xc002c380
c001907b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001907f:	89 10                	mov    DWORD PTR [eax],edx
c0019081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019085:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001908f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019093:	05 78 01 00 00       	add    eax,0x178
c0019098:	83 ec 0c             	sub    esp,0xc
c001909b:	50                   	push   eax
c001909c:	e8 89 60 ff ff       	call   c000f12a <GDT::GDT()>
c00190a1:	83 c4 10             	add    esp,0x10
c00190a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a8:	05 7c 09 00 00       	add    eax,0x97c
c00190ad:	83 ec 0c             	sub    esp,0xc
c00190b0:	50                   	push   eax
c00190b1:	e8 de 62 ff ff       	call   c000f394 <IDT::IDT()>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190bd:	05 7c 11 00 00       	add    eax,0x117c
c00190c2:	83 ec 0c             	sub    esp,0xc
c00190c5:	50                   	push   eax
c00190c6:	e8 2b 83 ff ff       	call   c00113f6 <TSS::TSS()>
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00190d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190dd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00190e7:	90                   	nop
c00190e8:	83 c4 0c             	add    esp,0xc
c00190eb:	c3                   	ret    

c00190ec <CPU::displayFeatures()>:
c00190ec:	53                   	push   ebx
c00190ed:	83 ec 10             	sub    esp,0x10
c00190f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00190f4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00190fa:	68 b4 bf 02 c0       	push   0xc002bfb4
c00190ff:	e8 c7 9d ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019104:	59                   	pop    ecx
c0019105:	58                   	pop    eax
c0019106:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001910c:	50                   	push   eax
c001910d:	68 c5 bf 02 c0       	push   0xc002bfc5
c0019112:	e8 b4 9d ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019117:	58                   	pop    eax
c0019118:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001911e:	5a                   	pop    edx
c001911f:	c1 e8 0e             	shr    eax,0xe
c0019122:	0f b6 c0             	movzx  eax,al
c0019125:	50                   	push   eax
c0019126:	68 d6 bf 02 c0       	push   0xc002bfd6
c001912b:	e8 9b 9d ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019130:	59                   	pop    ecx
c0019131:	58                   	pop    eax
c0019132:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019138:	66 c1 e8 06          	shr    ax,0x6
c001913c:	0f b6 c0             	movzx  eax,al
c001913f:	50                   	push   eax
c0019140:	68 e7 bf 02 c0       	push   0xc002bfe7
c0019145:	e8 81 9d ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001914a:	c7 04 24 94 c4 02 c0 	mov    DWORD PTR [esp],0xc002c494
c0019151:	e8 75 9d ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c001915e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0019165:	74 05                	je     c001916c <CPU::displayFeatures()+0x80>
c0019167:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c001916c:	52                   	push   edx
c001916d:	52                   	push   edx
c001916e:	50                   	push   eax
c001916f:	68 f8 bf 02 c0       	push   0xc002bff8
c0019174:	e8 52 9d ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019179:	83 c4 10             	add    esp,0x10
c001917c:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019181:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019188:	78 05                	js     c001918f <CPU::displayFeatures()+0xa3>
c001918a:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c001918f:	51                   	push   ecx
c0019190:	51                   	push   ecx
c0019191:	50                   	push   eax
c0019192:	68 0f c0 02 c0       	push   0xc002c00f
c0019197:	e8 2f 9d ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001919c:	83 c4 10             	add    esp,0x10
c001919f:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00191a4:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00191ab:	75 05                	jne    c00191b2 <CPU::displayFeatures()+0xc6>
c00191ad:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00191b2:	52                   	push   edx
c00191b3:	52                   	push   edx
c00191b4:	50                   	push   eax
c00191b5:	68 26 c0 02 c0       	push   0xc002c026
c00191ba:	e8 0c 9d ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00191bf:	83 c4 10             	add    esp,0x10
c00191c2:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00191c7:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00191ce:	75 05                	jne    c00191d5 <CPU::displayFeatures()+0xe9>
c00191d0:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00191d5:	51                   	push   ecx
c00191d6:	51                   	push   ecx
c00191d7:	50                   	push   eax
c00191d8:	68 3d c0 02 c0       	push   0xc002c03d
c00191dd:	e8 e9 9c ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00191e2:	83 c4 10             	add    esp,0x10
c00191e5:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00191ea:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00191f1:	75 05                	jne    c00191f8 <CPU::displayFeatures()+0x10c>
c00191f3:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00191f8:	52                   	push   edx
c00191f9:	52                   	push   edx
c00191fa:	50                   	push   eax
c00191fb:	68 54 c0 02 c0       	push   0xc002c054
c0019200:	e8 c6 9c ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019205:	83 c4 10             	add    esp,0x10
c0019208:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c001920d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019214:	75 05                	jne    c001921b <CPU::displayFeatures()+0x12f>
c0019216:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c001921b:	51                   	push   ecx
c001921c:	51                   	push   ecx
c001921d:	50                   	push   eax
c001921e:	68 6b c0 02 c0       	push   0xc002c06b
c0019223:	e8 a3 9c ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019228:	83 c4 10             	add    esp,0x10
c001922b:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019230:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019237:	75 05                	jne    c001923e <CPU::displayFeatures()+0x152>
c0019239:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c001923e:	52                   	push   edx
c001923f:	52                   	push   edx
c0019240:	50                   	push   eax
c0019241:	68 82 c0 02 c0       	push   0xc002c082
c0019246:	e8 80 9c ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001924b:	83 c4 10             	add    esp,0x10
c001924e:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019253:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001925a:	75 05                	jne    c0019261 <CPU::displayFeatures()+0x175>
c001925c:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019261:	51                   	push   ecx
c0019262:	51                   	push   ecx
c0019263:	50                   	push   eax
c0019264:	68 99 c0 02 c0       	push   0xc002c099
c0019269:	e8 5d 9c ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001926e:	83 c4 10             	add    esp,0x10
c0019271:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019276:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001927d:	75 05                	jne    c0019284 <CPU::displayFeatures()+0x198>
c001927f:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019284:	52                   	push   edx
c0019285:	52                   	push   edx
c0019286:	50                   	push   eax
c0019287:	68 b0 c0 02 c0       	push   0xc002c0b0
c001928c:	e8 3a 9c ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019291:	83 c4 10             	add    esp,0x10
c0019294:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019299:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00192a0:	75 05                	jne    c00192a7 <CPU::displayFeatures()+0x1bb>
c00192a2:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00192a7:	51                   	push   ecx
c00192a8:	51                   	push   ecx
c00192a9:	50                   	push   eax
c00192aa:	68 c7 c0 02 c0       	push   0xc002c0c7
c00192af:	e8 17 9c ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00192b4:	83 c4 10             	add    esp,0x10
c00192b7:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00192bc:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00192c3:	75 05                	jne    c00192ca <CPU::displayFeatures()+0x1de>
c00192c5:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00192ca:	52                   	push   edx
c00192cb:	52                   	push   edx
c00192cc:	50                   	push   eax
c00192cd:	68 de c0 02 c0       	push   0xc002c0de
c00192d2:	e8 f4 9b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c00192df:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00192e6:	75 05                	jne    c00192ed <CPU::displayFeatures()+0x201>
c00192e8:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c00192ed:	51                   	push   ecx
c00192ee:	51                   	push   ecx
c00192ef:	50                   	push   eax
c00192f0:	68 f5 c0 02 c0       	push   0xc002c0f5
c00192f5:	e8 d1 9b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019302:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019309:	75 05                	jne    c0019310 <CPU::displayFeatures()+0x224>
c001930b:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019310:	52                   	push   edx
c0019311:	52                   	push   edx
c0019312:	50                   	push   eax
c0019313:	68 0c c1 02 c0       	push   0xc002c10c
c0019318:	e8 ae 9b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001931d:	83 c4 10             	add    esp,0x10
c0019320:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019325:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001932c:	78 05                	js     c0019333 <CPU::displayFeatures()+0x247>
c001932e:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019333:	51                   	push   ecx
c0019334:	51                   	push   ecx
c0019335:	50                   	push   eax
c0019336:	68 23 c1 02 c0       	push   0xc002c123
c001933b:	e8 8b 9b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019340:	83 c4 10             	add    esp,0x10
c0019343:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0019348:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001934f:	75 05                	jne    c0019356 <CPU::displayFeatures()+0x26a>
c0019351:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0019356:	52                   	push   edx
c0019357:	52                   	push   edx
c0019358:	50                   	push   eax
c0019359:	68 3a c1 02 c0       	push   0xc002c13a
c001935e:	e8 68 9b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0019363:	83 c4 18             	add    esp,0x18
c0019366:	5b                   	pop    ebx
c0019367:	c3                   	ret    

c0019368 <CPU::detectFeatures()>:
c0019368:	55                   	push   ebp
c0019369:	57                   	push   edi
c001936a:	56                   	push   esi
c001936b:	53                   	push   ebx
c001936c:	83 ec 50             	sub    esp,0x50
c001936f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019373:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001937d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019384:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001938a:	6a 0d                	push   0xd
c001938c:	6a 00                	push   0x0
c001938e:	57                   	push   edi
c001938f:	e8 ec 73 fe ff       	call   c0000780 <memset>
c0019394:	83 c4 10             	add    esp,0x10
c0019397:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001939c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00193a3:	0f 84 20 09 00 00    	je     c0019cc9 <CPU::detectFeatures()+0x961>
c00193a9:	83 ec 0c             	sub    esp,0xc
c00193ac:	6a 10                	push   0x10
c00193ae:	e8 f3 fb ff ff       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c00193b3:	83 e0 01             	and    eax,0x1
c00193b6:	8d 14 00             	lea    edx,[eax+eax*1]
c00193b9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193bf:	83 e0 fd             	and    eax,0xfffffffd
c00193c2:	09 d0                	or     eax,edx
c00193c4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193ca:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00193d1:	e8 d0 fb ff ff       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c00193d6:	83 e0 01             	and    eax,0x1
c00193d9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193e0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193e6:	83 e0 fb             	and    eax,0xfffffffb
c00193e9:	09 d0                	or     eax,edx
c00193eb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193f1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00193f8:	e8 a9 fb ff ff       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c00193fd:	83 e0 01             	and    eax,0x1
c0019400:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019407:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001940d:	83 e0 f7             	and    eax,0xfffffff7
c0019410:	09 d0                	or     eax,edx
c0019412:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019418:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001941f:	e8 82 fb ff ff       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c0019424:	83 e0 01             	and    eax,0x1
c0019427:	c1 e0 04             	shl    eax,0x4
c001942a:	88 c2                	mov    dl,al
c001942c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019432:	83 e0 ef             	and    eax,0xffffffef
c0019435:	09 d0                	or     eax,edx
c0019437:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001943d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019444:	e8 5d fb ff ff       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c0019449:	83 e0 01             	and    eax,0x1
c001944c:	c1 e0 05             	shl    eax,0x5
c001944f:	88 c2                	mov    dl,al
c0019451:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019457:	83 e0 df             	and    eax,0xffffffdf
c001945a:	09 d0                	or     eax,edx
c001945c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019469:	e8 38 fb ff ff       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c001946e:	83 e0 01             	and    eax,0x1
c0019471:	8d 14 00             	lea    edx,[eax+eax*1]
c0019474:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001947a:	83 e0 fd             	and    eax,0xfffffffd
c001947d:	09 d0                	or     eax,edx
c001947f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019485:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001948c:	e8 15 fb ff ff       	call   c0018fa6 <CPU::cpuidCheckEDX(unsigned int)>
c0019491:	83 e0 01             	and    eax,0x1
c0019494:	c1 e0 06             	shl    eax,0x6
c0019497:	88 c2                	mov    dl,al
c0019499:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001949f:	83 e0 bf             	and    eax,0xffffffbf
c00194a2:	09 d0                	or     eax,edx
c00194a4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194aa:	58                   	pop    eax
c00194ab:	8d 74 24 28          	lea    esi,[esp+0x28]
c00194af:	56                   	push   esi
c00194b0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194b4:	55                   	push   ebp
c00194b5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194b9:	50                   	push   eax
c00194ba:	8d 54 24 28          	lea    edx,[esp+0x28]
c00194be:	52                   	push   edx
c00194bf:	6a 00                	push   0x0
c00194c1:	e8 5c fa ff ff       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194c6:	83 c4 1c             	add    esp,0x1c
c00194c9:	6a 04                	push   0x4
c00194cb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00194cf:	50                   	push   eax
c00194d0:	57                   	push   edi
c00194d1:	e8 92 72 fe ff       	call   c0000768 <memcpy>
c00194d6:	83 c4 0c             	add    esp,0xc
c00194d9:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00194df:	6a 04                	push   0x4
c00194e1:	56                   	push   esi
c00194e2:	50                   	push   eax
c00194e3:	e8 80 72 fe ff       	call   c0000768 <memcpy>
c00194e8:	83 c4 0c             	add    esp,0xc
c00194eb:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00194f1:	6a 04                	push   0x4
c00194f3:	55                   	push   ebp
c00194f4:	50                   	push   eax
c00194f5:	e8 6e 72 fe ff       	call   c0000768 <memcpy>
c00194fa:	58                   	pop    eax
c00194fb:	5a                   	pop    edx
c00194fc:	68 51 c1 02 c0       	push   0xc002c151
c0019501:	57                   	push   edi
c0019502:	e8 c1 73 fe ff       	call   c00008c8 <strcmp>
c0019507:	83 c4 10             	add    esp,0x10
c001950a:	85 c0                	test   eax,eax
c001950c:	75 0f                	jne    c001951d <CPU::detectFeatures()+0x1b5>
c001950e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019518:	e9 22 02 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c001951d:	50                   	push   eax
c001951e:	50                   	push   eax
c001951f:	68 5e c1 02 c0       	push   0xc002c15e
c0019524:	57                   	push   edi
c0019525:	e8 9e 73 fe ff       	call   c00008c8 <strcmp>
c001952a:	83 c4 10             	add    esp,0x10
c001952d:	85 c0                	test   eax,eax
c001952f:	74 dd                	je     c001950e <CPU::detectFeatures()+0x1a6>
c0019531:	51                   	push   ecx
c0019532:	51                   	push   ecx
c0019533:	68 6b c1 02 c0       	push   0xc002c16b
c0019538:	57                   	push   edi
c0019539:	e8 8a 73 fe ff       	call   c00008c8 <strcmp>
c001953e:	83 c4 10             	add    esp,0x10
c0019541:	85 c0                	test   eax,eax
c0019543:	74 2a                	je     c001956f <CPU::detectFeatures()+0x207>
c0019545:	52                   	push   edx
c0019546:	52                   	push   edx
c0019547:	68 78 c1 02 c0       	push   0xc002c178
c001954c:	57                   	push   edi
c001954d:	e8 76 73 fe ff       	call   c00008c8 <strcmp>
c0019552:	83 c4 10             	add    esp,0x10
c0019555:	85 c0                	test   eax,eax
c0019557:	74 16                	je     c001956f <CPU::detectFeatures()+0x207>
c0019559:	50                   	push   eax
c001955a:	50                   	push   eax
c001955b:	68 85 c1 02 c0       	push   0xc002c185
c0019560:	57                   	push   edi
c0019561:	e8 62 73 fe ff       	call   c00008c8 <strcmp>
c0019566:	83 c4 10             	add    esp,0x10
c0019569:	85 c0                	test   eax,eax
c001956b:	74 48                	je     c00195b5 <CPU::detectFeatures()+0x24d>
c001956d:	eb 0f                	jmp    c001957e <CPU::detectFeatures()+0x216>
c001956f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019579:	e9 c1 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c001957e:	50                   	push   eax
c001957f:	50                   	push   eax
c0019580:	68 92 c1 02 c0       	push   0xc002c192
c0019585:	57                   	push   edi
c0019586:	e8 3d 73 fe ff       	call   c00008c8 <strcmp>
c001958b:	83 c4 10             	add    esp,0x10
c001958e:	85 c0                	test   eax,eax
c0019590:	74 23                	je     c00195b5 <CPU::detectFeatures()+0x24d>
c0019592:	50                   	push   eax
c0019593:	50                   	push   eax
c0019594:	68 9f c1 02 c0       	push   0xc002c19f
c0019599:	57                   	push   edi
c001959a:	e8 29 73 fe ff       	call   c00008c8 <strcmp>
c001959f:	83 c4 10             	add    esp,0x10
c00195a2:	85 c0                	test   eax,eax
c00195a4:	75 1e                	jne    c00195c4 <CPU::detectFeatures()+0x25c>
c00195a6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195b0:	e9 8a 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c00195b5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00195bf:	e9 7b 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c00195c4:	50                   	push   eax
c00195c5:	50                   	push   eax
c00195c6:	68 ac c1 02 c0       	push   0xc002c1ac
c00195cb:	57                   	push   edi
c00195cc:	e8 f7 72 fe ff       	call   c00008c8 <strcmp>
c00195d1:	83 c4 10             	add    esp,0x10
c00195d4:	85 c0                	test   eax,eax
c00195d6:	75 0f                	jne    c00195e7 <CPU::detectFeatures()+0x27f>
c00195d8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00195e2:	e9 58 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c00195e7:	50                   	push   eax
c00195e8:	50                   	push   eax
c00195e9:	68 6b c1 02 c0       	push   0xc002c16b
c00195ee:	57                   	push   edi
c00195ef:	e8 d4 72 fe ff       	call   c00008c8 <strcmp>
c00195f4:	83 c4 10             	add    esp,0x10
c00195f7:	85 c0                	test   eax,eax
c00195f9:	75 0f                	jne    c001960a <CPU::detectFeatures()+0x2a2>
c00195fb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019605:	e9 35 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c001960a:	50                   	push   eax
c001960b:	50                   	push   eax
c001960c:	68 b9 c1 02 c0       	push   0xc002c1b9
c0019611:	57                   	push   edi
c0019612:	e8 b1 72 fe ff       	call   c00008c8 <strcmp>
c0019617:	83 c4 10             	add    esp,0x10
c001961a:	85 c0                	test   eax,eax
c001961c:	75 0f                	jne    c001962d <CPU::detectFeatures()+0x2c5>
c001961e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019628:	e9 12 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c001962d:	51                   	push   ecx
c001962e:	51                   	push   ecx
c001962f:	68 c6 c1 02 c0       	push   0xc002c1c6
c0019634:	57                   	push   edi
c0019635:	e8 8e 72 fe ff       	call   c00008c8 <strcmp>
c001963a:	83 c4 10             	add    esp,0x10
c001963d:	85 c0                	test   eax,eax
c001963f:	75 0f                	jne    c0019650 <CPU::detectFeatures()+0x2e8>
c0019641:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001964b:	e9 ef 00 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c0019650:	52                   	push   edx
c0019651:	52                   	push   edx
c0019652:	68 d3 c1 02 c0       	push   0xc002c1d3
c0019657:	57                   	push   edi
c0019658:	e8 6b 72 fe ff       	call   c00008c8 <strcmp>
c001965d:	83 c4 10             	add    esp,0x10
c0019660:	85 c0                	test   eax,eax
c0019662:	75 0f                	jne    c0019673 <CPU::detectFeatures()+0x30b>
c0019664:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001966e:	e9 cc 00 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c0019673:	50                   	push   eax
c0019674:	50                   	push   eax
c0019675:	68 e0 c1 02 c0       	push   0xc002c1e0
c001967a:	57                   	push   edi
c001967b:	e8 48 72 fe ff       	call   c00008c8 <strcmp>
c0019680:	83 c4 10             	add    esp,0x10
c0019683:	85 c0                	test   eax,eax
c0019685:	75 0f                	jne    c0019696 <CPU::detectFeatures()+0x32e>
c0019687:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019691:	e9 a9 00 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c0019696:	50                   	push   eax
c0019697:	50                   	push   eax
c0019698:	68 ed c1 02 c0       	push   0xc002c1ed
c001969d:	57                   	push   edi
c001969e:	e8 25 72 fe ff       	call   c00008c8 <strcmp>
c00196a3:	83 c4 10             	add    esp,0x10
c00196a6:	85 c0                	test   eax,eax
c00196a8:	75 0f                	jne    c00196b9 <CPU::detectFeatures()+0x351>
c00196aa:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00196b4:	e9 86 00 00 00       	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c00196b9:	50                   	push   eax
c00196ba:	50                   	push   eax
c00196bb:	68 fa c1 02 c0       	push   0xc002c1fa
c00196c0:	57                   	push   edi
c00196c1:	e8 02 72 fe ff       	call   c00008c8 <strcmp>
c00196c6:	83 c4 10             	add    esp,0x10
c00196c9:	85 c0                	test   eax,eax
c00196cb:	75 0c                	jne    c00196d9 <CPU::detectFeatures()+0x371>
c00196cd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00196d7:	eb 66                	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c00196d9:	50                   	push   eax
c00196da:	50                   	push   eax
c00196db:	68 07 c2 02 c0       	push   0xc002c207
c00196e0:	57                   	push   edi
c00196e1:	e8 e2 71 fe ff       	call   c00008c8 <strcmp>
c00196e6:	83 c4 10             	add    esp,0x10
c00196e9:	85 c0                	test   eax,eax
c00196eb:	75 0c                	jne    c00196f9 <CPU::detectFeatures()+0x391>
c00196ed:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00196f7:	eb 46                	jmp    c001973f <CPU::detectFeatures()+0x3d7>
c00196f9:	50                   	push   eax
c00196fa:	50                   	push   eax
c00196fb:	68 14 c2 02 c0       	push   0xc002c214
c0019700:	57                   	push   edi
c0019701:	e8 c2 71 fe ff       	call   c00008c8 <strcmp>
c0019706:	83 c4 10             	add    esp,0x10
c0019709:	85 c0                	test   eax,eax
c001970b:	74 e0                	je     c00196ed <CPU::detectFeatures()+0x385>
c001970d:	50                   	push   eax
c001970e:	50                   	push   eax
c001970f:	68 21 c2 02 c0       	push   0xc002c221
c0019714:	57                   	push   edi
c0019715:	e8 ae 71 fe ff       	call   c00008c8 <strcmp>
c001971a:	83 c4 10             	add    esp,0x10
c001971d:	85 c0                	test   eax,eax
c001971f:	74 cc                	je     c00196ed <CPU::detectFeatures()+0x385>
c0019721:	51                   	push   ecx
c0019722:	51                   	push   ecx
c0019723:	68 2e c2 02 c0       	push   0xc002c22e
c0019728:	57                   	push   edi
c0019729:	e8 9a 71 fe ff       	call   c00008c8 <strcmp>
c001972e:	83 c4 10             	add    esp,0x10
c0019731:	85 c0                	test   eax,eax
c0019733:	74 b8                	je     c00196ed <CPU::detectFeatures()+0x385>
c0019735:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001973f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019744:	0f 86 be 00 00 00    	jbe    c0019808 <CPU::detectFeatures()+0x4a0>
c001974a:	83 ec 0c             	sub    esp,0xc
c001974d:	68 80 00 00 00       	push   0x80
c0019752:	e8 ab f8 ff ff       	call   c0019002 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019757:	83 e0 01             	and    eax,0x1
c001975a:	c1 e0 06             	shl    eax,0x6
c001975d:	88 c2                	mov    dl,al
c001975f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019765:	83 e0 bf             	and    eax,0xffffffbf
c0019768:	09 d0                	or     eax,edx
c001976a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019770:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019777:	e8 86 f8 ff ff       	call   c0019002 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001977c:	83 e0 01             	and    eax,0x1
c001977f:	c1 e0 04             	shl    eax,0x4
c0019782:	88 c2                	mov    dl,al
c0019784:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001978a:	83 e0 ef             	and    eax,0xffffffef
c001978d:	09 d0                	or     eax,edx
c001978f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019795:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001979c:	e8 61 f8 ff ff       	call   c0019002 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197a1:	c1 e0 07             	shl    eax,0x7
c00197a4:	88 c2                	mov    dl,al
c00197a6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197ac:	83 e0 7f             	and    eax,0x7f
c00197af:	09 d0                	or     eax,edx
c00197b1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197b7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00197be:	e8 6d f8 ff ff       	call   c0019030 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197c3:	83 e0 01             	and    eax,0x1
c00197c6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00197cd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197d3:	83 e0 f7             	and    eax,0xfffffff7
c00197d6:	09 d0                	or     eax,edx
c00197d8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197de:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00197e5:	e8 46 f8 ff ff       	call   c0019030 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197ea:	83 c4 10             	add    esp,0x10
c00197ed:	83 e0 01             	and    eax,0x1
c00197f0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00197f7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197fd:	83 e0 fb             	and    eax,0xfffffffb
c0019800:	09 d0                	or     eax,edx
c0019802:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019808:	83 ec 0c             	sub    esp,0xc
c001980b:	56                   	push   esi
c001980c:	55                   	push   ebp
c001980d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019811:	57                   	push   edi
c0019812:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019816:	50                   	push   eax
c0019817:	6a 01                	push   0x1
c0019819:	e8 04 f7 ff ff       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001981e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019822:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019828:	88 ca                	mov    dl,cl
c001982a:	83 e0 f0             	and    eax,0xfffffff0
c001982d:	83 e2 0f             	and    edx,0xf
c0019830:	09 d0                	or     eax,edx
c0019832:	88 ca                	mov    dl,cl
c0019834:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001983a:	c0 ea 04             	shr    dl,0x4
c001983d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019841:	0f b6 c2             	movzx  eax,dl
c0019844:	83 c4 20             	add    esp,0x20
c0019847:	c1 e0 06             	shl    eax,0x6
c001984a:	89 c5                	mov    ebp,eax
c001984c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019852:	66 25 3f c0          	and    ax,0xc03f
c0019856:	09 e8                	or     eax,ebp
c0019858:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001985f:	89 c8                	mov    eax,ecx
c0019861:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019867:	c1 e8 08             	shr    eax,0x8
c001986a:	83 e2 3f             	and    edx,0x3f
c001986d:	83 e0 0f             	and    eax,0xf
c0019870:	89 c5                	mov    ebp,eax
c0019872:	c1 e5 06             	shl    ebp,0x6
c0019875:	09 d5                	or     ebp,edx
c0019877:	89 ea                	mov    edx,ebp
c0019879:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001987f:	88 c2                	mov    dl,al
c0019881:	c0 ea 02             	shr    dl,0x2
c0019884:	89 d5                	mov    ebp,edx
c0019886:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001988c:	83 e2 c0             	and    edx,0xffffffc0
c001988f:	09 d5                	or     ebp,edx
c0019891:	89 ea                	mov    edx,ebp
c0019893:	89 cd                	mov    ebp,ecx
c0019895:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001989b:	c1 ed 0c             	shr    ebp,0xc
c001989e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00198a4:	83 e5 03             	and    ebp,0x3
c00198a7:	83 e2 cf             	and    edx,0xffffffcf
c00198aa:	c1 e5 04             	shl    ebp,0x4
c00198ad:	09 d5                	or     ebp,edx
c00198af:	3c 06                	cmp    al,0x6
c00198b1:	89 ea                	mov    edx,ebp
c00198b3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00198b9:	74 04                	je     c00198bf <CPU::detectFeatures()+0x557>
c00198bb:	3c 0f                	cmp    al,0xf
c00198bd:	75 5c                	jne    c001991b <CPU::detectFeatures()+0x5b3>
c00198bf:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00198c3:	89 cd                	mov    ebp,ecx
c00198c5:	c1 ed 10             	shr    ebp,0x10
c00198c8:	c1 e5 04             	shl    ebp,0x4
c00198cb:	09 ea                	or     edx,ebp
c00198cd:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00198d3:	0f b6 d2             	movzx  edx,dl
c00198d6:	66 81 e5 3f c0       	and    bp,0xc03f
c00198db:	c1 e2 06             	shl    edx,0x6
c00198de:	09 ea                	or     edx,ebp
c00198e0:	3c 0f                	cmp    al,0xf
c00198e2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00198e9:	75 30                	jne    c001991b <CPU::detectFeatures()+0x5b3>
c00198eb:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00198f1:	c1 e9 14             	shr    ecx,0x14
c00198f4:	83 e0 3f             	and    eax,0x3f
c00198f7:	83 c1 0f             	add    ecx,0xf
c00198fa:	88 ca                	mov    dl,cl
c00198fc:	c0 e9 02             	shr    cl,0x2
c00198ff:	c1 e2 06             	shl    edx,0x6
c0019902:	09 d0                	or     eax,edx
c0019904:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001990a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019910:	83 e0 c0             	and    eax,0xffffffc0
c0019913:	09 c1                	or     ecx,eax
c0019915:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001991b:	83 ec 0c             	sub    esp,0xc
c001991e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019925:	56                   	push   esi
c0019926:	8d 44 24 28          	lea    eax,[esp+0x28]
c001992a:	50                   	push   eax
c001992b:	57                   	push   edi
c001992c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019930:	55                   	push   ebp
c0019931:	68 00 00 00 80       	push   0x80000000
c0019936:	e8 e7 f5 ff ff       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001993b:	83 c4 20             	add    esp,0x20
c001993e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019946:	8d 44 24 18          	lea    eax,[esp+0x18]
c001994a:	76 1e                	jbe    c001996a <CPU::detectFeatures()+0x602>
c001994c:	83 ec 0c             	sub    esp,0xc
c001994f:	56                   	push   esi
c0019950:	50                   	push   eax
c0019951:	57                   	push   edi
c0019952:	55                   	push   ebp
c0019953:	68 01 00 00 80       	push   0x80000001
c0019958:	e8 c5 f5 ff ff       	call   c0018f22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001995d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019967:	83 c4 20             	add    esp,0x20
c001996a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019970:	83 f8 01             	cmp    eax,0x1
c0019973:	75 6f                	jne    c00199e4 <CPU::detectFeatures()+0x67c>
c0019975:	51                   	push   ecx
c0019976:	51                   	push   ecx
c0019977:	68 3a c2 02 c0       	push   0xc002c23a
c001997c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019980:	56                   	push   esi
c0019981:	e8 b6 6e fe ff       	call   c000083c <strcpy>
c0019986:	5f                   	pop    edi
c0019987:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001998d:	5d                   	pop    ebp
c001998e:	66 c1 e8 06          	shr    ax,0x6
c0019992:	0f b6 c0             	movzx  eax,al
c0019995:	50                   	push   eax
c0019996:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001999c:	c1 e8 0e             	shr    eax,0xe
c001999f:	0f b6 c0             	movzx  eax,al
c00199a2:	50                   	push   eax
c00199a3:	e8 24 f2 ff ff       	call   c0018bcc <CPU::lookupIntelName(unsigned char, unsigned char)>
c00199a8:	5a                   	pop    edx
c00199a9:	59                   	pop    ecx
c00199aa:	50                   	push   eax
c00199ab:	56                   	push   esi
c00199ac:	e8 cb 6f fe ff       	call   c000097c <strcat>
c00199b1:	5f                   	pop    edi
c00199b2:	5d                   	pop    ebp
c00199b3:	56                   	push   esi
c00199b4:	53                   	push   ebx
c00199b5:	e8 28 ab ff ff       	call   c00144e2 <Device::setName(char const*)>
c00199ba:	58                   	pop    eax
c00199bb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00199c1:	5a                   	pop    edx
c00199c2:	68 41 c2 02 c0       	push   0xc002c241
c00199c7:	50                   	push   eax
c00199c8:	e8 fb 6e fe ff       	call   c00008c8 <strcmp>
c00199cd:	83 c4 10             	add    esp,0x10
c00199d0:	85 c0                	test   eax,eax
c00199d2:	0f 85 71 03 00 00    	jne    c0019d49 <CPU::detectFeatures()+0x9e1>
c00199d8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00199df:	e9 65 03 00 00       	jmp    c0019d49 <CPU::detectFeatures()+0x9e1>
c00199e4:	83 f8 02             	cmp    eax,0x2
c00199e7:	0f 85 b5 00 00 00    	jne    c0019aa2 <CPU::detectFeatures()+0x73a>
c00199ed:	57                   	push   edi
c00199ee:	57                   	push   edi
c00199ef:	68 53 c2 02 c0       	push   0xc002c253
c00199f4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00199f8:	56                   	push   esi
c00199f9:	e8 3e 6e fe ff       	call   c000083c <strcpy>
c00199fe:	5d                   	pop    ebp
c00199ff:	58                   	pop    eax
c0019a00:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a06:	66 c1 e8 06          	shr    ax,0x6
c0019a0a:	0f b6 c0             	movzx  eax,al
c0019a0d:	50                   	push   eax
c0019a0e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a14:	c1 e8 0e             	shr    eax,0xe
c0019a17:	0f b6 c0             	movzx  eax,al
c0019a1a:	50                   	push   eax
c0019a1b:	e8 18 f0 ff ff       	call   c0018a38 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a20:	5a                   	pop    edx
c0019a21:	59                   	pop    ecx
c0019a22:	50                   	push   eax
c0019a23:	56                   	push   esi
c0019a24:	e8 53 6f fe ff       	call   c000097c <strcat>
c0019a29:	5f                   	pop    edi
c0019a2a:	5d                   	pop    ebp
c0019a2b:	56                   	push   esi
c0019a2c:	53                   	push   ebx
c0019a2d:	e8 b0 aa ff ff       	call   c00144e2 <Device::setName(char const*)>
c0019a32:	58                   	pop    eax
c0019a33:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a39:	5a                   	pop    edx
c0019a3a:	68 58 c2 02 c0       	push   0xc002c258
c0019a3f:	50                   	push   eax
c0019a40:	e8 83 6e fe ff       	call   c00008c8 <strcmp>
c0019a45:	83 c4 10             	add    esp,0x10
c0019a48:	85 c0                	test   eax,eax
c0019a4a:	75 20                	jne    c0019a6c <CPU::detectFeatures()+0x704>
c0019a4c:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c0019a52:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019a58:	a8 01                	test   al,0x1
c0019a5a:	74 10                	je     c0019a6c <CPU::detectFeatures()+0x704>
c0019a5c:	83 e0 fe             	and    eax,0xfffffffe
c0019a5f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019a65:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019a6c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a72:	c1 e8 0e             	shr    eax,0xe
c0019a75:	3c 05                	cmp    al,0x5
c0019a77:	0f 85 cc 02 00 00    	jne    c0019d49 <CPU::detectFeatures()+0x9e1>
c0019a7d:	56                   	push   esi
c0019a7e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019a84:	83 e0 0f             	and    eax,0xf
c0019a87:	50                   	push   eax
c0019a88:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a8e:	66 c1 e8 06          	shr    ax,0x6
c0019a92:	0f b6 c0             	movzx  eax,al
c0019a95:	50                   	push   eax
c0019a96:	6a 05                	push   0x5
c0019a98:	e8 11 f4 ff ff       	call   c0018eae <CPU::AMD_K6_writeback(int, int, int)>
c0019a9d:	e9 1f 02 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x959>
c0019aa2:	8d 50 fd             	lea    edx,[eax-0x3]
c0019aa5:	83 fa 01             	cmp    edx,0x1
c0019aa8:	76 09                	jbe    c0019ab3 <CPU::detectFeatures()+0x74b>
c0019aaa:	83 f8 06             	cmp    eax,0x6
c0019aad:	0f 85 91 01 00 00    	jne    c0019c44 <CPU::detectFeatures()+0x8dc>
c0019ab3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019ab9:	c1 ea 0e             	shr    edx,0xe
c0019abc:	80 fa 05             	cmp    dl,0x5
c0019abf:	75 7b                	jne    c0019b3c <CPU::detectFeatures()+0x7d4>
c0019ac1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019ac7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019acc:	66 81 fa 00 01       	cmp    dx,0x100
c0019ad1:	75 0c                	jne    c0019adf <CPU::detectFeatures()+0x777>
c0019ad3:	51                   	push   ecx
c0019ad4:	51                   	push   ecx
c0019ad5:	68 5f c2 02 c0       	push   0xc002c25f
c0019ada:	e9 dc 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019adf:	66 81 fa 00 02       	cmp    dx,0x200
c0019ae4:	75 0c                	jne    c0019af2 <CPU::detectFeatures()+0x78a>
c0019ae6:	52                   	push   edx
c0019ae7:	52                   	push   edx
c0019ae8:	68 72 c2 02 c0       	push   0xc002c272
c0019aed:	e9 c9 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019af2:	66 81 fa 40 02       	cmp    dx,0x240
c0019af7:	75 0c                	jne    c0019b05 <CPU::detectFeatures()+0x79d>
c0019af9:	50                   	push   eax
c0019afa:	50                   	push   eax
c0019afb:	68 84 c2 02 c0       	push   0xc002c284
c0019b00:	e9 b6 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019b05:	83 f8 06             	cmp    eax,0x6
c0019b08:	75 0c                	jne    c0019b16 <CPU::detectFeatures()+0x7ae>
c0019b0a:	50                   	push   eax
c0019b0b:	50                   	push   eax
c0019b0c:	68 96 c2 02 c0       	push   0xc002c296
c0019b11:	e9 a5 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019b16:	83 f8 04             	cmp    eax,0x4
c0019b19:	75 0c                	jne    c0019b27 <CPU::detectFeatures()+0x7bf>
c0019b1b:	50                   	push   eax
c0019b1c:	50                   	push   eax
c0019b1d:	68 a2 c2 02 c0       	push   0xc002c2a2
c0019b22:	e9 94 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019b27:	83 f8 03             	cmp    eax,0x3
c0019b2a:	0f 85 19 02 00 00    	jne    c0019d49 <CPU::detectFeatures()+0x9e1>
c0019b30:	50                   	push   eax
c0019b31:	50                   	push   eax
c0019b32:	68 aa c2 02 c0       	push   0xc002c2aa
c0019b37:	e9 7f 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019b3c:	80 fa 06             	cmp    dl,0x6
c0019b3f:	0f 85 db 00 00 00    	jne    c0019c20 <CPU::detectFeatures()+0x8b8>
c0019b45:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b4b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b50:	66 81 fa 80 01       	cmp    dx,0x180
c0019b55:	75 0c                	jne    c0019b63 <CPU::detectFeatures()+0x7fb>
c0019b57:	50                   	push   eax
c0019b58:	50                   	push   eax
c0019b59:	68 b5 c2 02 c0       	push   0xc002c2b5
c0019b5e:	e9 58 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019b63:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019b69:	66 f7 c1 80 ff       	test   cx,0xff80
c0019b6e:	75 0c                	jne    c0019b7c <CPU::detectFeatures()+0x814>
c0019b70:	50                   	push   eax
c0019b71:	50                   	push   eax
c0019b72:	68 c5 c2 02 c0       	push   0xc002c2c5
c0019b77:	e9 3f 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019b7c:	66 81 fa 40 02       	cmp    dx,0x240
c0019b81:	75 0c                	jne    c0019b8f <CPU::detectFeatures()+0x827>
c0019b83:	55                   	push   ebp
c0019b84:	55                   	push   ebp
c0019b85:	68 cc c2 02 c0       	push   0xc002c2cc
c0019b8a:	e9 2c 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019b8f:	66 81 fa 80 02       	cmp    dx,0x280
c0019b94:	75 0c                	jne    c0019ba2 <CPU::detectFeatures()+0x83a>
c0019b96:	57                   	push   edi
c0019b97:	57                   	push   edi
c0019b98:	68 d5 c2 02 c0       	push   0xc002c2d5
c0019b9d:	e9 19 01 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019ba2:	66 81 fa 40 03       	cmp    dx,0x340
c0019ba7:	74 ed                	je     c0019b96 <CPU::detectFeatures()+0x82e>
c0019ba9:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019bae:	75 0c                	jne    c0019bbc <CPU::detectFeatures()+0x854>
c0019bb0:	56                   	push   esi
c0019bb1:	56                   	push   esi
c0019bb2:	68 dc c2 02 c0       	push   0xc002c2dc
c0019bb7:	e9 ff 00 00 00       	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019bbc:	83 f8 06             	cmp    eax,0x6
c0019bbf:	0f 84 45 ff ff ff    	je     c0019b0a <CPU::detectFeatures()+0x7a2>
c0019bc5:	83 f8 04             	cmp    eax,0x4
c0019bc8:	0f 84 4d ff ff ff    	je     c0019b1b <CPU::detectFeatures()+0x7b3>
c0019bce:	83 f8 03             	cmp    eax,0x3
c0019bd1:	0f 85 72 01 00 00    	jne    c0019d49 <CPU::detectFeatures()+0x9e1>
c0019bd7:	51                   	push   ecx
c0019bd8:	51                   	push   ecx
c0019bd9:	68 e5 c2 02 c0       	push   0xc002c2e5
c0019bde:	53                   	push   ebx
c0019bdf:	e8 fe a8 ff ff       	call   c00144e2 <Device::setName(char const*)>
c0019be4:	b1 c1                	mov    cl,0xc1
c0019be6:	88 c8                	mov    al,cl
c0019be8:	e6 22                	out    0x22,al
c0019bea:	e4 23                	in     al,0x23
c0019bec:	88 c2                	mov    dl,al
c0019bee:	88 c8                	mov    al,cl
c0019bf0:	e6 22                	out    0x22,al
c0019bf2:	88 d0                	mov    al,dl
c0019bf4:	83 c8 10             	or     eax,0x10
c0019bf7:	e6 23                	out    0x23,al
c0019bf9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c00:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c03:	89 d0                	mov    eax,edx
c0019c05:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019c0b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019c0f:	40                   	inc    eax
c0019c10:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c16:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c1b:	e9 a1 00 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x959>
c0019c20:	83 f8 06             	cmp    eax,0x6
c0019c23:	0f 84 e1 fe ff ff    	je     c0019b0a <CPU::detectFeatures()+0x7a2>
c0019c29:	83 f8 04             	cmp    eax,0x4
c0019c2c:	0f 84 e9 fe ff ff    	je     c0019b1b <CPU::detectFeatures()+0x7b3>
c0019c32:	83 f8 03             	cmp    eax,0x3
c0019c35:	0f 85 0e 01 00 00    	jne    c0019d49 <CPU::detectFeatures()+0x9e1>
c0019c3b:	52                   	push   edx
c0019c3c:	52                   	push   edx
c0019c3d:	68 f0 c2 02 c0       	push   0xc002c2f0
c0019c42:	eb 77                	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019c44:	83 f8 07             	cmp    eax,0x7
c0019c47:	75 09                	jne    c0019c52 <CPU::detectFeatures()+0x8ea>
c0019c49:	50                   	push   eax
c0019c4a:	50                   	push   eax
c0019c4b:	68 fa c2 02 c0       	push   0xc002c2fa
c0019c50:	eb 69                	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019c52:	83 f8 0a             	cmp    eax,0xa
c0019c55:	75 09                	jne    c0019c60 <CPU::detectFeatures()+0x8f8>
c0019c57:	50                   	push   eax
c0019c58:	50                   	push   eax
c0019c59:	68 05 c3 02 c0       	push   0xc002c305
c0019c5e:	eb 5b                	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019c60:	83 f8 0b             	cmp    eax,0xb
c0019c63:	75 09                	jne    c0019c6e <CPU::detectFeatures()+0x906>
c0019c65:	50                   	push   eax
c0019c66:	50                   	push   eax
c0019c67:	68 0d c3 02 c0       	push   0xc002c30d
c0019c6c:	eb 4d                	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019c6e:	83 f8 08             	cmp    eax,0x8
c0019c71:	75 09                	jne    c0019c7c <CPU::detectFeatures()+0x914>
c0019c73:	50                   	push   eax
c0019c74:	50                   	push   eax
c0019c75:	68 16 c3 02 c0       	push   0xc002c316
c0019c7a:	eb 3f                	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019c7c:	83 f8 09             	cmp    eax,0x9
c0019c7f:	75 09                	jne    c0019c8a <CPU::detectFeatures()+0x922>
c0019c81:	50                   	push   eax
c0019c82:	50                   	push   eax
c0019c83:	68 1e c3 02 c0       	push   0xc002c31e
c0019c88:	eb 31                	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019c8a:	83 f8 05             	cmp    eax,0x5
c0019c8d:	75 09                	jne    c0019c98 <CPU::detectFeatures()+0x930>
c0019c8f:	50                   	push   eax
c0019c90:	50                   	push   eax
c0019c91:	68 26 c3 02 c0       	push   0xc002c326
c0019c96:	eb 23                	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019c98:	83 f8 0c             	cmp    eax,0xc
c0019c9b:	75 09                	jne    c0019ca6 <CPU::detectFeatures()+0x93e>
c0019c9d:	55                   	push   ebp
c0019c9e:	55                   	push   ebp
c0019c9f:	68 34 c3 02 c0       	push   0xc002c334
c0019ca4:	eb 15                	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019ca6:	83 f8 0d             	cmp    eax,0xd
c0019ca9:	75 09                	jne    c0019cb4 <CPU::detectFeatures()+0x94c>
c0019cab:	57                   	push   edi
c0019cac:	57                   	push   edi
c0019cad:	68 3f c3 02 c0       	push   0xc002c33f
c0019cb2:	eb 07                	jmp    c0019cbb <CPU::detectFeatures()+0x953>
c0019cb4:	56                   	push   esi
c0019cb5:	56                   	push   esi
c0019cb6:	68 53 c3 02 c0       	push   0xc002c353
c0019cbb:	53                   	push   ebx
c0019cbc:	e8 21 a8 ff ff       	call   c00144e2 <Device::setName(char const*)>
c0019cc1:	83 c4 10             	add    esp,0x10
c0019cc4:	e9 80 00 00 00       	jmp    c0019d49 <CPU::detectFeatures()+0x9e1>
c0019cc9:	51                   	push   ecx
c0019cca:	51                   	push   ecx
c0019ccb:	68 9f c1 02 c0       	push   0xc002c19f
c0019cd0:	57                   	push   edi
c0019cd1:	e8 66 6b fe ff       	call   c000083c <strcpy>
c0019cd6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019ce0:	e8 c9 65 fe ff       	call   c00002ae <is486>
c0019ce5:	83 c4 10             	add    esp,0x10
c0019ce8:	85 c0                	test   eax,eax
c0019cea:	74 2b                	je     c0019d17 <CPU::detectFeatures()+0x9af>
c0019cec:	52                   	push   edx
c0019ced:	52                   	push   edx
c0019cee:	68 5f c3 02 c0       	push   0xc002c35f
c0019cf3:	53                   	push   ebx
c0019cf4:	e8 e9 a7 ff ff       	call   c00144e2 <Device::setName(char const*)>
c0019cf9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019d00:	0f 20 c0             	mov    eax,cr0
c0019d03:	83 e0 14             	and    eax,0x14
c0019d06:	83 c4 10             	add    esp,0x10
c0019d09:	83 f8 04             	cmp    eax,0x4
c0019d0c:	75 1f                	jne    c0019d2d <CPU::detectFeatures()+0x9c5>
c0019d0e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d15:	eb 32                	jmp    c0019d49 <CPU::detectFeatures()+0x9e1>
c0019d17:	50                   	push   eax
c0019d18:	50                   	push   eax
c0019d19:	68 6a c3 02 c0       	push   0xc002c36a
c0019d1e:	53                   	push   ebx
c0019d1f:	e8 be a7 ff ff       	call   c00144e2 <Device::setName(char const*)>
c0019d24:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d2b:	eb d3                	jmp    c0019d00 <CPU::detectFeatures()+0x998>
c0019d2d:	e8 57 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d32:	83 e0 01             	and    eax,0x1
c0019d35:	8d 14 00             	lea    edx,[eax+eax*1]
c0019d38:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019d3e:	83 e0 fd             	and    eax,0xfffffffd
c0019d41:	09 d0                	or     eax,edx
c0019d43:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019d49:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019d50:	83 c4 4c             	add    esp,0x4c
c0019d53:	5b                   	pop    ebx
c0019d54:	5e                   	pop    esi
c0019d55:	5f                   	pop    edi
c0019d56:	5d                   	pop    ebp
c0019d57:	c3                   	ret    

c0019d58 <CPU::setupSMEP()>:
c0019d58:	0f 20 e0             	mov    eax,cr4
c0019d5b:	0d 00 00 10 00       	or     eax,0x100000
c0019d60:	0f 22 e0             	mov    cr4,eax
c0019d63:	c3                   	ret    

c0019d64 <CPU::setupUMIP()>:
c0019d64:	0f 20 e0             	mov    eax,cr4
c0019d67:	80 cc 08             	or     ah,0x8
c0019d6a:	0f 22 e0             	mov    cr4,eax
c0019d6d:	c3                   	ret    

c0019d6e <CPU::setupTSC()>:
c0019d6e:	0f 20 e0             	mov    eax,cr4
c0019d71:	83 c8 04             	or     eax,0x4
c0019d74:	0f 22 e0             	mov    cr4,eax
c0019d77:	c3                   	ret    

c0019d78 <CPU::setupLargePages()>:
c0019d78:	0f 20 e0             	mov    eax,cr4
c0019d7b:	83 c8 10             	or     eax,0x10
c0019d7e:	0f 22 e0             	mov    cr4,eax
c0019d81:	c3                   	ret    

c0019d82 <CPU::setupPAT()>:
c0019d82:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0019d87:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d8e:	74 2c                	je     c0019dbc <CPU::setupPAT()+0x3a>
c0019d90:	53                   	push   ebx
c0019d91:	83 ec 10             	sub    esp,0x10
c0019d94:	68 77 02 00 00       	push   0x277
c0019d99:	50                   	push   eax
c0019d9a:	e8 1b 51 ff ff       	call   c000eeba <Computer::rdmsr(unsigned int)>
c0019d9f:	83 e2 f8             	and    edx,0xfffffff8
c0019da2:	83 ca 01             	or     edx,0x1
c0019da5:	52                   	push   edx
c0019da6:	50                   	push   eax
c0019da7:	68 77 02 00 00       	push   0x277
c0019dac:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c0019db2:	e8 2f 51 ff ff       	call   c000eee6 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019db7:	83 c4 28             	add    esp,0x28
c0019dba:	5b                   	pop    ebx
c0019dbb:	c3                   	ret    
c0019dbc:	c3                   	ret    
c0019dbd:	90                   	nop

c0019dbe <CPU::setupMTRR()>:
c0019dbe:	c3                   	ret    
c0019dbf:	90                   	nop

c0019dc0 <CPU::setupGlobalPages()>:
c0019dc0:	0f 20 e0             	mov    eax,cr4
c0019dc3:	0c 80                	or     al,0x80
c0019dc5:	0f 22 e0             	mov    cr4,eax
c0019dc8:	c3                   	ret    
c0019dc9:	90                   	nop

c0019dca <CPU::allowUsermodeDataAccess()>:
c0019dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dce:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019dd5:	74 03                	je     c0019dda <CPU::allowUsermodeDataAccess()+0x10>
c0019dd7:	0f 01 cb             	stac   
c0019dda:	c3                   	ret    
c0019ddb:	90                   	nop

c0019ddc <CPU::prohibitUsermodeDataAccess()>:
c0019ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019de7:	74 03                	je     c0019dec <CPU::prohibitUsermodeDataAccess()+0x10>
c0019de9:	0f 01 ca             	clac   
c0019dec:	c3                   	ret    
c0019ded:	90                   	nop

c0019dee <CPU::setupSMAP()>:
c0019dee:	0f 20 e0             	mov    eax,cr4
c0019df1:	0d 00 00 20 00       	or     eax,0x200000
c0019df6:	0f 22 e0             	mov    cr4,eax
c0019df9:	eb e1                	jmp    c0019ddc <CPU::prohibitUsermodeDataAccess()>
c0019dfb:	90                   	nop

c0019dfc <CPU::setupFeatures()>:
c0019dfc:	83 ec 0c             	sub    esp,0xc
c0019dff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e03:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e0a:	74 07                	je     c0019e13 <CPU::setupFeatures()+0x17>
c0019e0c:	52                   	push   edx
c0019e0d:	e8 46 ff ff ff       	call   c0019d58 <CPU::setupSMEP()>
c0019e12:	58                   	pop    eax
c0019e13:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e1a:	74 07                	je     c0019e23 <CPU::setupFeatures()+0x27>
c0019e1c:	52                   	push   edx
c0019e1d:	e8 cc ff ff ff       	call   c0019dee <CPU::setupSMAP()>
c0019e22:	58                   	pop    eax
c0019e23:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e2a:	74 07                	je     c0019e33 <CPU::setupFeatures()+0x37>
c0019e2c:	52                   	push   edx
c0019e2d:	e8 32 ff ff ff       	call   c0019d64 <CPU::setupUMIP()>
c0019e32:	58                   	pop    eax
c0019e33:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e3a:	74 07                	je     c0019e43 <CPU::setupFeatures()+0x47>
c0019e3c:	52                   	push   edx
c0019e3d:	e8 2c ff ff ff       	call   c0019d6e <CPU::setupTSC()>
c0019e42:	58                   	pop    eax
c0019e43:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e4a:	74 07                	je     c0019e53 <CPU::setupFeatures()+0x57>
c0019e4c:	52                   	push   edx
c0019e4d:	e8 26 ff ff ff       	call   c0019d78 <CPU::setupLargePages()>
c0019e52:	59                   	pop    ecx
c0019e53:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019e5a:	74 07                	je     c0019e63 <CPU::setupFeatures()+0x67>
c0019e5c:	52                   	push   edx
c0019e5d:	e8 5e ff ff ff       	call   c0019dc0 <CPU::setupGlobalPages()>
c0019e62:	58                   	pop    eax
c0019e63:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019e6a:	74 0c                	je     c0019e78 <CPU::setupFeatures()+0x7c>
c0019e6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e70:	83 c4 0c             	add    esp,0xc
c0019e73:	e9 0a ff ff ff       	jmp    c0019d82 <CPU::setupPAT()>
c0019e78:	83 c4 0c             	add    esp,0xc
c0019e7b:	c3                   	ret    

c0019e7c <CPU::open(int, int, void*)>:
c0019e7c:	57                   	push   edi
c0019e7d:	56                   	push   esi
c0019e7e:	53                   	push   ebx
c0019e7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e87:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e8d:	83 ec 0c             	sub    esp,0xc
c0019e90:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019e96:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019e9c:	50                   	push   eax
c0019e9d:	e8 04 53 ff ff       	call   c000f1a6 <GDT::setup()>
c0019ea2:	83 c4 0c             	add    esp,0xc
c0019ea5:	6a 00                	push   0x0
c0019ea7:	68 ef be ad de       	push   0xdeadbeef
c0019eac:	57                   	push   edi
c0019ead:	e8 84 75 ff ff       	call   c0011436 <TSS::setup(unsigned long, unsigned long)>
c0019eb2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019eb5:	e8 5c 75 ff ff       	call   c0011416 <TSS::flush()>
c0019eba:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ec0:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ec3:	e8 42 55 ff ff       	call   c000f40a <IDT::setup()>
c0019ec8:	b8 00 04 00 00       	mov    eax,0x400
c0019ecd:	0f 23 f8             	mov    db7,eax
c0019ed0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019eda:	e8 a1 60 ff ff       	call   c000ff80 <Phys::allocatePage()>
c0019edf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ee5:	89 30                	mov    DWORD PTR [eax],esi
c0019ee7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019eed:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019ef0:	58                   	pop    eax
c0019ef1:	5a                   	pop    edx
c0019ef2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ef8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019efc:	e8 d5 86 ff ff       	call   c00125d6 <VAS::setCPUSpecific(unsigned long)>
c0019f01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f04:	e8 5f f4 ff ff       	call   c0019368 <CPU::detectFeatures()>
c0019f09:	e8 2b ba ff ff       	call   c0015939 <setupInterruptController()>
c0019f0e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f14:	a1 40 ee 02 c0       	mov    eax,ds:0xc002ee40
c0019f19:	83 e0 10             	and    eax,0x10
c0019f1c:	83 f8 01             	cmp    eax,0x1
c0019f1f:	19 c0                	sbb    eax,eax
c0019f21:	83 e0 46             	and    eax,0x46
c0019f24:	83 c0 1e             	add    eax,0x1e
c0019f27:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f2a:	e8 62 d0 ff ff       	call   c0016f91 <setupTimer(int)>
c0019f2f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f38:	e8 bf fe ff ff       	call   c0019dfc <CPU::setupFeatures()>
c0019f3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f40:	e8 a7 f1 ff ff       	call   c00190ec <CPU::displayFeatures()>
c0019f45:	83 c4 10             	add    esp,0x10
c0019f48:	31 c0                	xor    eax,eax
c0019f4a:	5b                   	pop    ebx
c0019f4b:	5e                   	pop    esi
c0019f4c:	5f                   	pop    edi
c0019f4d:	c3                   	ret    

c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f4e:	57                   	push   edi
c0019f4f:	56                   	push   esi
c0019f50:	53                   	push   ebx
c0019f51:	51                   	push   ecx
c0019f52:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f56:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019f59:	0f 02 c0             	lar    eax,ax
c0019f5c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019f5f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019f63:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019f66:	88 ca                	mov    dl,cl
c0019f68:	c0 ea 06             	shr    dl,0x6
c0019f6b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019f6f:	89 ca                	mov    edx,ecx
c0019f71:	66 c1 ea 03          	shr    dx,0x3
c0019f75:	83 e2 07             	and    edx,0x7
c0019f78:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019f7d:	88 17                	mov    BYTE PTR [edi],dl
c0019f7f:	0f 84 a6 01 00 00    	je     c001a12b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f85:	83 e1 07             	and    ecx,0x7
c0019f88:	80 f9 04             	cmp    cl,0x4
c0019f8b:	0f 84 98 00 00 00    	je     c001a029 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f91:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f96:	0f 95 c0             	setne  al
c0019f99:	80 f9 05             	cmp    cl,0x5
c0019f9c:	0f 95 c2             	setne  dl
c0019f9f:	08 c2                	or     dl,al
c0019fa1:	74 79                	je     c001a01c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019fa3:	84 c9                	test   cl,cl
c0019fa5:	75 05                	jne    c0019fac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019fa7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019faa:	eb 3c                	jmp    c0019fe8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fac:	80 f9 01             	cmp    cl,0x1
c0019faf:	75 05                	jne    c0019fb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019fb1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019fb4:	eb 32                	jmp    c0019fe8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fb6:	80 f9 02             	cmp    cl,0x2
c0019fb9:	75 05                	jne    c0019fc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019fbb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019fbe:	eb 28                	jmp    c0019fe8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fc0:	31 c0                	xor    eax,eax
c0019fc2:	80 f9 03             	cmp    cl,0x3
c0019fc5:	75 05                	jne    c0019fcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019fc7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019fca:	eb 1c                	jmp    c0019fe8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fcc:	80 f9 05             	cmp    cl,0x5
c0019fcf:	75 05                	jne    c0019fd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019fd1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019fd4:	eb 12                	jmp    c0019fe8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fd6:	80 f9 06             	cmp    cl,0x6
c0019fd9:	75 05                	jne    c0019fe0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019fdb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019fde:	eb 08                	jmp    c0019fe8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fe0:	80 f9 07             	cmp    cl,0x7
c0019fe3:	75 03                	jne    c0019fe8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fe5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019fe8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019fed:	75 10                	jne    c0019fff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019fef:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019ff3:	b9 03 00 00 00       	mov    ecx,0x3
c0019ff8:	01 d0                	add    eax,edx
c0019ffa:	e9 37 01 00 00       	jmp    c001a136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019fff:	b9 02 00 00 00       	mov    ecx,0x2
c001a004:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a009:	0f 85 27 01 00 00    	jne    c001a136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a00f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a012:	b9 06 00 00 00       	mov    ecx,0x6
c001a017:	e9 1a 01 00 00       	jmp    c001a136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a01c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a01f:	b9 06 00 00 00       	mov    ecx,0x6
c001a024:	e9 0f 01 00 00       	jmp    c001a138 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a029:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a02c:	88 ca                	mov    dl,cl
c001a02e:	c0 ea 06             	shr    dl,0x6
c001a031:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a035:	89 ca                	mov    edx,ecx
c001a037:	66 c1 ea 03          	shr    dx,0x3
c001a03b:	83 e2 07             	and    edx,0x7
c001a03e:	80 e1 07             	and    cl,0x7
c001a041:	75 05                	jne    c001a048 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a043:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a046:	eb 4c                	jmp    c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a048:	80 f9 01             	cmp    cl,0x1
c001a04b:	75 05                	jne    c001a052 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a04d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a050:	eb 42                	jmp    c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a052:	80 f9 02             	cmp    cl,0x2
c001a055:	75 05                	jne    c001a05c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a057:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a05a:	eb 38                	jmp    c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a05c:	80 f9 03             	cmp    cl,0x3
c001a05f:	75 05                	jne    c001a066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a061:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a064:	eb 2e                	jmp    c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a066:	80 f9 04             	cmp    cl,0x4
c001a069:	75 12                	jne    c001a07d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a06b:	f6 c4 60             	test   ah,0x60
c001a06e:	75 08                	jne    c001a078 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a070:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a073:	8d 78 14             	lea    edi,[eax+0x14]
c001a076:	eb 1c                	jmp    c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a078:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a07b:	eb 17                	jmp    c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a07d:	80 f9 05             	cmp    cl,0x5
c001a080:	75 05                	jne    c001a087 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a082:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a085:	eb 0d                	jmp    c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a087:	80 f9 06             	cmp    cl,0x6
c001a08a:	75 05                	jne    c001a091 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a08c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a08f:	eb 03                	jmp    c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a091:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a094:	84 d2                	test   dl,dl
c001a096:	75 05                	jne    c001a09d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a098:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a09b:	eb 3c                	jmp    c001a0d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a09d:	80 fa 01             	cmp    dl,0x1
c001a0a0:	75 05                	jne    c001a0a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a0a2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0a5:	eb 32                	jmp    c001a0d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0a7:	80 fa 02             	cmp    dl,0x2
c001a0aa:	75 05                	jne    c001a0b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a0ac:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0af:	eb 28                	jmp    c001a0d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0b1:	80 fa 03             	cmp    dl,0x3
c001a0b4:	75 05                	jne    c001a0bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a0b6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0b9:	eb 1e                	jmp    c001a0d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0bb:	31 c0                	xor    eax,eax
c001a0bd:	80 fa 04             	cmp    dl,0x4
c001a0c0:	74 17                	je     c001a0d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0c2:	80 fa 05             	cmp    dl,0x5
c001a0c5:	75 05                	jne    c001a0cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a0c7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0ca:	eb 0d                	jmp    c001a0d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0cc:	80 fa 06             	cmp    dl,0x6
c001a0cf:	75 05                	jne    c001a0d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a0d1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0d4:	eb 03                	jmp    c001a0d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0d6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0d9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0de:	0f 94 c2             	sete   dl
c001a0e1:	80 f9 05             	cmp    cl,0x5
c001a0e4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a0e8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a0ed:	d3 e0                	shl    eax,cl
c001a0ef:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a0f3:	74 0a                	je     c001a0ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a0f5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a0f8:	b9 07 00 00 00       	mov    ecx,0x7
c001a0fd:	eb 37                	jmp    c001a136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a0ff:	01 f8                	add    eax,edi
c001a101:	b9 03 00 00 00       	mov    ecx,0x3
c001a106:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a10b:	74 2b                	je     c001a138 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a10d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a112:	75 0d                	jne    c001a121 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a114:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a118:	01 c8                	add    eax,ecx
c001a11a:	b9 04 00 00 00       	mov    ecx,0x4
c001a11f:	eb 17                	jmp    c001a138 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a121:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a124:	b9 07 00 00 00       	mov    ecx,0x7
c001a129:	eb 0d                	jmp    c001a138 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a12b:	b9 02 00 00 00       	mov    ecx,0x2
c001a130:	b2 01                	mov    dl,0x1
c001a132:	31 c0                	xor    eax,eax
c001a134:	eb 02                	jmp    c001a138 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a136:	31 d2                	xor    edx,edx
c001a138:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a13c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a13e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a142:	88 11                	mov    BYTE PTR [ecx],dl
c001a144:	5a                   	pop    edx
c001a145:	5b                   	pop    ebx
c001a146:	5e                   	pop    esi
c001a147:	5f                   	pop    edi
c001a148:	c3                   	ret    

c001a149 <Krnl::smpEntry()>:
c001a149:	eb fe                	jmp    c001a149 <Krnl::smpEntry()>

c001a14b <Krnl::startCPU(int)>:
c001a14b:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001a150:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a157:	0f 84 36 01 00 00    	je     c001a293 <Krnl::startCPU(int)+0x148>
c001a15d:	53                   	push   ebx
c001a15e:	83 ec 10             	sub    esp,0x10
c001a161:	fa                   	cli    
c001a162:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001a168:	6a 1b                	push   0x1b
c001a16a:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c001a170:	e8 45 4d ff ff       	call   c000eeba <Computer::rdmsr(unsigned int)>
c001a175:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a17a:	89 c3                	mov    ebx,eax
c001a17c:	58                   	pop    eax
c001a17d:	5a                   	pop    edx
c001a17e:	53                   	push   ebx
c001a17f:	68 a4 c3 02 c0       	push   0xc002c3a4
c001a184:	e8 42 8d ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001a189:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a193:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a197:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1a1:	c1 e0 18             	shl    eax,0x18
c001a1a4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a1aa:	83 c4 10             	add    esp,0x10
c001a1ad:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a1b3:	09 c2                	or     edx,eax
c001a1b5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a1bb:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a1c1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1c7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1cd:	80 cd c5             	or     ch,0xc5
c001a1d0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1d6:	f3 90                	pause  
c001a1d8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1da:	0f ba e1 0c          	bt     ecx,0xc
c001a1de:	72 f6                	jb     c001a1d6 <Krnl::startCPU(int)+0x8b>
c001a1e0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1e6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1ec:	09 c1                	or     ecx,eax
c001a1ee:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1f4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1fa:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a200:	80 cd 85             	or     ch,0x85
c001a203:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a209:	f3 90                	pause  
c001a20b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a20d:	0f ba e1 0c          	bt     ecx,0xc
c001a211:	72 f6                	jb     c001a209 <Krnl::startCPU(int)+0xbe>
c001a213:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a21d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a223:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a229:	09 c1                	or     ecx,eax
c001a22b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a231:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a237:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a23d:	81 c9 02 06 00 00    	or     ecx,0x602
c001a243:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a249:	f3 90                	pause  
c001a24b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a24d:	0f ba e1 0c          	bt     ecx,0xc
c001a251:	72 f6                	jb     c001a249 <Krnl::startCPU(int)+0xfe>
c001a253:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a25d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a263:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a269:	09 c8                	or     eax,ecx
c001a26b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a271:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a277:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a27c:	0d 02 06 00 00       	or     eax,0x602
c001a281:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a287:	f3 90                	pause  
c001a289:	8b 02                	mov    eax,DWORD PTR [edx]
c001a28b:	0f ba e0 0c          	bt     eax,0xc
c001a28f:	72 f6                	jb     c001a287 <Krnl::startCPU(int)+0x13c>
c001a291:	eb fe                	jmp    c001a291 <Krnl::startCPU(int)+0x146>
c001a293:	c3                   	ret    

c001a294 <Krnl::startCPUs()>:
c001a294:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001a299:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a29f:	88 c2                	mov    dl,al
c001a2a1:	83 e2 0a             	and    edx,0xa
c001a2a4:	80 fa 0a             	cmp    dl,0xa
c001a2a7:	75 09                	jne    c001a2b2 <Krnl::startCPUs()+0x1e>
c001a2a9:	a8 01                	test   al,0x1
c001a2ab:	74 05                	je     c001a2b2 <Krnl::startCPUs()+0x1e>
c001a2ad:	e9 e9 5e fe ff       	jmp    c000019b <prepareTramp>
c001a2b2:	c3                   	ret    
c001a2b3:	90                   	nop

c001a2b4 <EnvVarContainer::getEnv(char const*)>:
c001a2b4:	57                   	push   edi
c001a2b5:	56                   	push   esi
c001a2b6:	53                   	push   ebx
c001a2b7:	31 db                	xor    ebx,ebx
c001a2b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2bd:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a2bf:	7e 2b                	jle    c001a2ec <EnvVarContainer::getEnv(char const*)+0x38>
c001a2c1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a2c8:	50                   	push   eax
c001a2c9:	50                   	push   eax
c001a2ca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2cd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a2d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a2d4:	e8 ef 65 fe ff       	call   c00008c8 <strcmp>
c001a2d9:	83 c4 10             	add    esp,0x10
c001a2dc:	85 c0                	test   eax,eax
c001a2de:	75 09                	jne    c001a2e9 <EnvVarContainer::getEnv(char const*)+0x35>
c001a2e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2e3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a2e7:	eb 05                	jmp    c001a2ee <EnvVarContainer::getEnv(char const*)+0x3a>
c001a2e9:	43                   	inc    ebx
c001a2ea:	eb d1                	jmp    c001a2bd <EnvVarContainer::getEnv(char const*)+0x9>
c001a2ec:	31 c0                	xor    eax,eax
c001a2ee:	5b                   	pop    ebx
c001a2ef:	5e                   	pop    esi
c001a2f0:	5f                   	pop    edi
c001a2f1:	c3                   	ret    

c001a2f2 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a2f2:	57                   	push   edi
c001a2f3:	56                   	push   esi
c001a2f4:	53                   	push   ebx
c001a2f5:	83 ec 1c             	sub    esp,0x1c
c001a2f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a2fc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a300:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a304:	57                   	push   edi
c001a305:	e8 92 64 fe ff       	call   c000079c <strlen>
c001a30a:	40                   	inc    eax
c001a30b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a30e:	e8 01 56 ff ff       	call   c000f914 <malloc>
c001a313:	89 34 24             	mov    DWORD PTR [esp],esi
c001a316:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a31a:	e8 7d 64 fe ff       	call   c000079c <strlen>
c001a31f:	40                   	inc    eax
c001a320:	89 04 24             	mov    DWORD PTR [esp],eax
c001a323:	e8 ec 55 ff ff       	call   c000f914 <malloc>
c001a328:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a32b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a32f:	e8 68 64 fe ff       	call   c000079c <strlen>
c001a334:	83 c4 0c             	add    esp,0xc
c001a337:	40                   	inc    eax
c001a338:	50                   	push   eax
c001a339:	6a 00                	push   0x0
c001a33b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a33f:	e8 3c 64 fe ff       	call   c0000780 <memset>
c001a344:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a347:	e8 50 64 fe ff       	call   c000079c <strlen>
c001a34c:	83 c4 0c             	add    esp,0xc
c001a34f:	40                   	inc    eax
c001a350:	50                   	push   eax
c001a351:	57                   	push   edi
c001a352:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a356:	e8 0d 64 fe ff       	call   c0000768 <memcpy>
c001a35b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a35e:	e8 39 64 fe ff       	call   c000079c <strlen>
c001a363:	83 c4 0c             	add    esp,0xc
c001a366:	40                   	inc    eax
c001a367:	50                   	push   eax
c001a368:	6a 00                	push   0x0
c001a36a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a36e:	e8 0d 64 fe ff       	call   c0000780 <memset>
c001a373:	89 34 24             	mov    DWORD PTR [esp],esi
c001a376:	e8 21 64 fe ff       	call   c000079c <strlen>
c001a37b:	83 c4 0c             	add    esp,0xc
c001a37e:	40                   	inc    eax
c001a37f:	50                   	push   eax
c001a380:	56                   	push   esi
c001a381:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a385:	e8 de 63 fe ff       	call   c0000768 <memcpy>
c001a38a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a38c:	40                   	inc    eax
c001a38d:	89 03                	mov    DWORD PTR [ebx],eax
c001a38f:	c1 e0 03             	shl    eax,0x3
c001a392:	5a                   	pop    edx
c001a393:	59                   	pop    ecx
c001a394:	50                   	push   eax
c001a395:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a398:	e8 63 55 ff ff       	call   c000f900 <realloc>
c001a39d:	83 c4 0c             	add    esp,0xc
c001a3a0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a3a3:	6a 08                	push   0x8
c001a3a5:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a3a9:	52                   	push   edx
c001a3aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a3ac:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a3b0:	50                   	push   eax
c001a3b1:	e8 b2 63 fe ff       	call   c0000768 <memcpy>
c001a3b6:	83 c4 20             	add    esp,0x20
c001a3b9:	5b                   	pop    ebx
c001a3ba:	5e                   	pop    esi
c001a3bb:	5f                   	pop    edi
c001a3bc:	c3                   	ret    
c001a3bd:	90                   	nop

c001a3be <EnvVarContainer::deleteEnv(char const*)>:
c001a3be:	c3                   	ret    
c001a3bf:	90                   	nop

c001a3c0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a3c0:	55                   	push   ebp
c001a3c1:	57                   	push   edi
c001a3c2:	56                   	push   esi
c001a3c3:	53                   	push   ebx
c001a3c4:	81 ec 38 01 00 00    	sub    esp,0x138
c001a3ca:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a3d1:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a3d8:	68 14 01 00 00       	push   0x114
c001a3dd:	e8 32 55 ff ff       	call   c000f914 <malloc>
c001a3e2:	83 c4 0c             	add    esp,0xc
c001a3e5:	89 c7                	mov    edi,eax
c001a3e7:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a3ea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a3f1:	50                   	push   eax
c001a3f2:	e8 33 90 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001a3f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a3fa:	e8 fd 92 ff ff       	call   c00136fc <File::exists()>
c001a3ff:	83 c4 10             	add    esp,0x10
c001a402:	84 c0                	test   al,al
c001a404:	75 31                	jne    c001a437 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a406:	51                   	push   ecx
c001a407:	51                   	push   ecx
c001a408:	6a 12                	push   0x12
c001a40a:	57                   	push   edi
c001a40b:	e8 7e 90 ff ff       	call   c001348e <File::open(FileOpenMode)>
c001a410:	8b 07                	mov    eax,DWORD PTR [edi]
c001a412:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a415:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a418:	e8 7f 63 fe ff       	call   c000079c <strlen>
c001a41d:	5a                   	pop    edx
c001a41e:	31 d2                	xor    edx,edx
c001a420:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a424:	51                   	push   ecx
c001a425:	55                   	push   ebp
c001a426:	52                   	push   edx
c001a427:	50                   	push   eax
c001a428:	57                   	push   edi
c001a429:	ff d3                	call   ebx
c001a42b:	83 c4 14             	add    esp,0x14
c001a42e:	57                   	push   edi
c001a42f:	e8 b8 90 ff ff       	call   c00134ec <File::close()>
c001a434:	83 c4 10             	add    esp,0x10
c001a437:	31 db                	xor    ebx,ebx
c001a439:	50                   	push   eax
c001a43a:	31 ed                	xor    ebp,ebp
c001a43c:	68 00 01 00 00       	push   0x100
c001a441:	6a 00                	push   0x0
c001a443:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a447:	50                   	push   eax
c001a448:	e8 33 63 fe ff       	call   c0000780 <memset>
c001a44d:	58                   	pop    eax
c001a44e:	5a                   	pop    edx
c001a44f:	6a 01                	push   0x1
c001a451:	57                   	push   edi
c001a452:	e8 37 90 ff ff       	call   c001348e <File::open(FileOpenMode)>
c001a457:	83 c4 10             	add    esp,0x10
c001a45a:	83 ec 0c             	sub    esp,0xc
c001a45d:	8b 07                	mov    eax,DWORD PTR [edi]
c001a45f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a463:	51                   	push   ecx
c001a464:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a468:	52                   	push   edx
c001a469:	6a 00                	push   0x0
c001a46b:	6a 01                	push   0x1
c001a46d:	57                   	push   edi
c001a46e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a471:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a475:	83 c4 20             	add    esp,0x20
c001a478:	3c 0d                	cmp    al,0xd
c001a47a:	0f 84 12 01 00 00    	je     c001a592 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a480:	85 db                	test   ebx,ebx
c001a482:	0f 84 fd 00 00 00    	je     c001a585 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a488:	3c 0a                	cmp    al,0xa
c001a48a:	74 13                	je     c001a49f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a48c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a491:	74 0c                	je     c001a49f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a493:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a499:	0f 8e e6 00 00 00    	jle    c001a585 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a49f:	83 ec 0c             	sub    esp,0xc
c001a4a2:	8d 53 01             	lea    edx,[ebx+0x1]
c001a4a5:	29 dd                	sub    ebp,ebx
c001a4a7:	52                   	push   edx
c001a4a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a4ac:	e8 63 54 ff ff       	call   c000f914 <malloc>
c001a4b1:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a4b4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4b8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a4bb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a4bf:	e8 50 54 ff ff       	call   c000f914 <malloc>
c001a4c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a4c8:	83 c4 0c             	add    esp,0xc
c001a4cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4cf:	52                   	push   edx
c001a4d0:	6a 00                	push   0x0
c001a4d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4d6:	e8 a5 62 fe ff       	call   c0000780 <memset>
c001a4db:	83 c4 0c             	add    esp,0xc
c001a4de:	53                   	push   ebx
c001a4df:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a4e3:	55                   	push   ebp
c001a4e4:	01 eb                	add    ebx,ebp
c001a4e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4ea:	e8 79 62 fe ff       	call   c0000768 <memcpy>
c001a4ef:	83 c4 0c             	add    esp,0xc
c001a4f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a4f6:	51                   	push   ecx
c001a4f7:	6a 00                	push   0x0
c001a4f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4fd:	e8 7e 62 fe ff       	call   c0000780 <memset>
c001a502:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a505:	e8 92 62 fe ff       	call   c000079c <strlen>
c001a50a:	83 c4 0c             	add    esp,0xc
c001a50d:	50                   	push   eax
c001a50e:	53                   	push   ebx
c001a50f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a513:	e8 50 62 fe ff       	call   c0000768 <memcpy>
c001a518:	5b                   	pop    ebx
c001a519:	58                   	pop    eax
c001a51a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a51e:	68 b5 c3 02 c0       	push   0xc002c3b5
c001a523:	e8 a3 89 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001a528:	8b 06                	mov    eax,DWORD PTR [esi]
c001a52a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a52d:	40                   	inc    eax
c001a52e:	83 c4 10             	add    esp,0x10
c001a531:	89 06                	mov    DWORD PTR [esi],eax
c001a533:	85 d2                	test   edx,edx
c001a535:	75 0c                	jne    c001a543 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a537:	83 ec 0c             	sub    esp,0xc
c001a53a:	6a 08                	push   0x8
c001a53c:	e8 d3 53 ff ff       	call   c000f914 <malloc>
c001a541:	eb 0c                	jmp    c001a54f <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a543:	c1 e0 03             	shl    eax,0x3
c001a546:	51                   	push   ecx
c001a547:	51                   	push   ecx
c001a548:	50                   	push   eax
c001a549:	52                   	push   edx
c001a54a:	e8 b1 53 ff ff       	call   c000f900 <realloc>
c001a54f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a552:	83 c4 10             	add    esp,0x10
c001a555:	31 db                	xor    ebx,ebx
c001a557:	52                   	push   edx
c001a558:	6a 08                	push   0x8
c001a55a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a55e:	50                   	push   eax
c001a55f:	8b 16                	mov    edx,DWORD PTR [esi]
c001a561:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a564:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a568:	50                   	push   eax
c001a569:	e8 fa 61 fe ff       	call   c0000768 <memcpy>
c001a56e:	83 c4 0c             	add    esp,0xc
c001a571:	68 00 01 00 00       	push   0x100
c001a576:	6a 00                	push   0x0
c001a578:	55                   	push   ebp
c001a579:	31 ed                	xor    ebp,ebp
c001a57b:	e8 00 62 fe ff       	call   c0000780 <memset>
c001a580:	83 c4 10             	add    esp,0x10
c001a583:	eb 0d                	jmp    c001a592 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a585:	3c 3d                	cmp    al,0x3d
c001a587:	74 07                	je     c001a590 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a589:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a58d:	45                   	inc    ebp
c001a58e:	eb 02                	jmp    c001a592 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a590:	89 eb                	mov    ebx,ebp
c001a592:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a597:	0f 85 bd fe ff ff    	jne    c001a45a <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a59d:	50                   	push   eax
c001a59e:	50                   	push   eax
c001a59f:	ff 36                	push   DWORD PTR [esi]
c001a5a1:	68 c3 c3 02 c0       	push   0xc002c3c3
c001a5a6:	e8 20 89 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001a5ab:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a5b1:	5b                   	pop    ebx
c001a5b2:	5e                   	pop    esi
c001a5b3:	5f                   	pop    edi
c001a5b4:	5d                   	pop    ebp
c001a5b5:	c3                   	ret    

c001a5b6 <EnvVarContainer::__loadSystem()>:
c001a5b6:	83 ec 10             	sub    esp,0x10
c001a5b9:	68 60 e3 02 c0       	push   0xc002e360
c001a5be:	68 ee c3 02 c0       	push   0xc002c3ee
c001a5c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5c7:	e8 f4 fd ff ff       	call   c001a3c0 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a5cc:	83 c4 1c             	add    esp,0x1c
c001a5cf:	c3                   	ret    

c001a5d0 <EnvVarContainer::__loadUser()>:
c001a5d0:	c3                   	ret    
c001a5d1:	90                   	nop

c001a5d2 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5e4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a5e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a5f2:	90                   	nop
c001a5f3:	c3                   	ret    

c001a5f4 <EnvVarContainer::~EnvVarContainer()>:
c001a5f4:	83 ec 0c             	sub    esp,0xc
c001a5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5fe:	85 c0                	test   eax,eax
c001a600:	74 1d                	je     c001a61f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a606:	8b 00                	mov    eax,DWORD PTR [eax]
c001a608:	85 c0                	test   eax,eax
c001a60a:	74 13                	je     c001a61f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a610:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a613:	83 ec 0c             	sub    esp,0xc
c001a616:	50                   	push   eax
c001a617:	e8 08 53 ff ff       	call   c000f924 <free>
c001a61c:	83 c4 10             	add    esp,0x10
c001a61f:	90                   	nop
c001a620:	83 c4 0c             	add    esp,0xc
c001a623:	c3                   	ret    

c001a624 <Krnl::getEnv(Process*, char const*)>:
c001a624:	53                   	push   ebx
c001a625:	83 ec 08             	sub    esp,0x8
c001a628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a62c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a630:	39 05 90 23 03 c0    	cmp    DWORD PTR ds:0xc0032390,eax
c001a636:	74 04                	je     c001a63c <Krnl::getEnv(Process*, char const*)+0x18>
c001a638:	85 c0                	test   eax,eax
c001a63a:	75 0b                	jne    c001a647 <Krnl::getEnv(Process*, char const*)+0x23>
c001a63c:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a641:	85 c0                	test   eax,eax
c001a643:	75 19                	jne    c001a65e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a645:	eb 27                	jmp    c001a66e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a647:	52                   	push   edx
c001a648:	52                   	push   edx
c001a649:	53                   	push   ebx
c001a64a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a650:	e8 5f fc ff ff       	call   c001a2b4 <EnvVarContainer::getEnv(char const*)>
c001a655:	83 c4 10             	add    esp,0x10
c001a658:	85 c0                	test   eax,eax
c001a65a:	75 28                	jne    c001a684 <Krnl::getEnv(Process*, char const*)+0x60>
c001a65c:	eb de                	jmp    c001a63c <Krnl::getEnv(Process*, char const*)+0x18>
c001a65e:	52                   	push   edx
c001a65f:	52                   	push   edx
c001a660:	53                   	push   ebx
c001a661:	50                   	push   eax
c001a662:	e8 4d fc ff ff       	call   c001a2b4 <EnvVarContainer::getEnv(char const*)>
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	85 c0                	test   eax,eax
c001a66c:	75 16                	jne    c001a684 <Krnl::getEnv(Process*, char const*)+0x60>
c001a66e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a672:	a1 78 19 03 c0       	mov    eax,ds:0xc0031978
c001a677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a67b:	83 c4 08             	add    esp,0x8
c001a67e:	5b                   	pop    ebx
c001a67f:	e9 30 fc ff ff       	jmp    c001a2b4 <EnvVarContainer::getEnv(char const*)>
c001a684:	83 c4 08             	add    esp,0x8
c001a687:	5b                   	pop    ebx
c001a688:	c3                   	ret    

c001a689 <Krnl::setEnvSystem(char const*, char const*)>:
c001a689:	83 ec 10             	sub    esp,0x10
c001a68c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a694:	ff 35 78 19 03 c0    	push   DWORD PTR ds:0xc0031978
c001a69a:	e8 53 fc ff ff       	call   c001a2f2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a69f:	83 c4 1c             	add    esp,0x1c
c001a6a2:	c3                   	ret    

c001a6a3 <Krnl::setEnvUser(char const*, char const*)>:
c001a6a3:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a6a8:	85 c0                	test   eax,eax
c001a6aa:	74 15                	je     c001a6c1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a6ac:	83 ec 10             	sub    esp,0x10
c001a6af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6b7:	50                   	push   eax
c001a6b8:	e8 35 fc ff ff       	call   c001a2f2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a6bd:	83 c4 1c             	add    esp,0x1c
c001a6c0:	c3                   	ret    
c001a6c1:	c3                   	ret    

c001a6c2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a6c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6c6:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a6cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6d0:	e9 1d fc ff ff       	jmp    c001a2f2 <EnvVarContainer::setEnv(char const*, char const*)>

c001a6d5 <Krnl::deleteEnvSystem(char const*)>:
c001a6d5:	c3                   	ret    

c001a6d6 <Krnl::deleteEnvUser(char const*)>:
c001a6d6:	c3                   	ret    

c001a6d7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a6d7:	c3                   	ret    

c001a6d8 <Krnl::newProcessEnv(Process*)>:
c001a6d8:	83 ec 28             	sub    esp,0x28
c001a6db:	6a 0c                	push   0xc
c001a6dd:	e8 32 52 ff ff       	call   c000f914 <malloc>
c001a6e2:	5a                   	pop    edx
c001a6e3:	59                   	pop    ecx
c001a6e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a6e8:	50                   	push   eax
c001a6e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6ed:	e8 e0 fe ff ff       	call   c001a5d2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6f6:	83 c4 2c             	add    esp,0x2c
c001a6f9:	c3                   	ret    

c001a6fa <Krnl::copyProcessEnv(Process*, Process*)>:
c001a6fa:	56                   	push   esi
c001a6fb:	53                   	push   ebx
c001a6fc:	83 ec 10             	sub    esp,0x10
c001a6ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a703:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a709:	6a 0c                	push   0xc
c001a70b:	e8 04 52 ff ff       	call   c000f914 <malloc>
c001a710:	89 c3                	mov    ebx,eax
c001a712:	58                   	pop    eax
c001a713:	5a                   	pop    edx
c001a714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a718:	53                   	push   ebx
c001a719:	e8 b4 fe ff ff       	call   c001a5d2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a71e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a720:	89 03                	mov    DWORD PTR [ebx],eax
c001a722:	c1 e0 03             	shl    eax,0x3
c001a725:	89 04 24             	mov    DWORD PTR [esp],eax
c001a728:	e8 e7 51 ff ff       	call   c000f914 <malloc>
c001a72d:	83 c4 0c             	add    esp,0xc
c001a730:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a733:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a735:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a73c:	52                   	push   edx
c001a73d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a740:	50                   	push   eax
c001a741:	e8 22 60 fe ff       	call   c0000768 <memcpy>
c001a746:	89 d8                	mov    eax,ebx
c001a748:	83 c4 14             	add    esp,0x14
c001a74b:	5b                   	pop    ebx
c001a74c:	5e                   	pop    esi
c001a74d:	c3                   	ret    

c001a74e <Krnl::loadSystemEnv()>:
c001a74e:	53                   	push   ebx
c001a74f:	83 ec 14             	sub    esp,0x14
c001a752:	6a 0c                	push   0xc
c001a754:	e8 bb 51 ff ff       	call   c000f914 <malloc>
c001a759:	89 c3                	mov    ebx,eax
c001a75b:	58                   	pop    eax
c001a75c:	5a                   	pop    edx
c001a75d:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001a763:	53                   	push   ebx
c001a764:	e8 69 fe ff ff       	call   c001a5d2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a769:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a76c:	89 1d 78 19 03 c0    	mov    DWORD PTR ds:0xc0031978,ebx
c001a772:	e8 3f fe ff ff       	call   c001a5b6 <EnvVarContainer::__loadSystem()>
c001a777:	83 c4 18             	add    esp,0x18
c001a77a:	5b                   	pop    ebx
c001a77b:	c3                   	ret    

c001a77c <Krnl::loadUserEnv()>:
c001a77c:	53                   	push   ebx
c001a77d:	83 ec 14             	sub    esp,0x14
c001a780:	6a 0c                	push   0xc
c001a782:	e8 8d 51 ff ff       	call   c000f914 <malloc>
c001a787:	89 c3                	mov    ebx,eax
c001a789:	58                   	pop    eax
c001a78a:	5a                   	pop    edx
c001a78b:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001a791:	53                   	push   ebx
c001a792:	e8 3b fe ff ff       	call   c001a5d2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a797:	89 1d 74 19 03 c0    	mov    DWORD PTR ds:0xc0031974,ebx
c001a79d:	83 c4 18             	add    esp,0x18
c001a7a0:	5b                   	pop    ebx
c001a7a1:	c3                   	ret    

c001a7a2 <Krnl::flushEnv()>:
c001a7a2:	c3                   	ret    

c001a7a3 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a7a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7a7:	8b 15 74 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031974
c001a7ad:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a7b3:	a1 78 19 03 c0       	mov    eax,ds:0xc0031978
c001a7b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7ba:	03 01                	add    eax,DWORD PTR [ecx]
c001a7bc:	85 d2                	test   edx,edx
c001a7be:	74 02                	je     c001a7c2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a7c0:	03 02                	add    eax,DWORD PTR [edx]
c001a7c2:	c3                   	ret    

c001a7c3 <Krnl::getProcessEnvPair(Process*, int)>:
c001a7c3:	57                   	push   edi
c001a7c4:	8b 0d 74 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031974
c001a7ca:	56                   	push   esi
c001a7cb:	85 c9                	test   ecx,ecx
c001a7cd:	53                   	push   ebx
c001a7ce:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a7d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7d6:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a7dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7e0:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7e2:	75 47                	jne    c001a82b <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a7e4:	39 c3                	cmp    ebx,eax
c001a7e6:	7c 47                	jl     c001a82f <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a7e8:	8b 15 78 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031978
c001a7ee:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a7f0:	01 c1                	add    ecx,eax
c001a7f2:	39 d9                	cmp    ecx,ebx
c001a7f4:	7e 6c                	jle    c001a862 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7f6:	51                   	push   ecx
c001a7f7:	89 d9                	mov    ecx,ebx
c001a7f9:	29 c1                	sub    ecx,eax
c001a7fb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a7fe:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a802:	53                   	push   ebx
c001a803:	68 10 c4 02 c0       	push   0xc002c410
c001a808:	e8 be 86 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001a80d:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a813:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a815:	a1 78 19 03 c0       	mov    eax,ds:0xc0031978
c001a81a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a81d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a821:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a824:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a827:	89 06                	mov    DWORD PTR [esi],eax
c001a829:	eb 51                	jmp    c001a87c <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a82b:	39 c3                	cmp    ebx,eax
c001a82d:	7d 05                	jge    c001a834 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a82f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a832:	eb 20                	jmp    c001a854 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a834:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a836:	8d 14 07             	lea    edx,[edi+eax*1]
c001a839:	39 da                	cmp    edx,ebx
c001a83b:	7e 04                	jle    c001a841 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a83d:	29 c3                	sub    ebx,eax
c001a83f:	eb 10                	jmp    c001a851 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a841:	8b 0d 78 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031978
c001a847:	03 11                	add    edx,DWORD PTR [ecx]
c001a849:	39 da                	cmp    edx,ebx
c001a84b:	7e 15                	jle    c001a862 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a84d:	29 c3                	sub    ebx,eax
c001a84f:	29 fb                	sub    ebx,edi
c001a851:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a854:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a858:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a85b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a85e:	89 06                	mov    DWORD PTR [esi],eax
c001a860:	eb 1d                	jmp    c001a87f <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a862:	83 ec 0c             	sub    esp,0xc
c001a865:	68 24 c4 02 c0       	push   0xc002c424
c001a86a:	e8 18 00 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001a86f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a875:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a87c:	83 c4 10             	add    esp,0x10
c001a87f:	89 f0                	mov    eax,esi
c001a881:	5b                   	pop    ebx
c001a882:	5e                   	pop    esi
c001a883:	5f                   	pop    edi
c001a884:	c2 04 00             	ret    0x4

c001a887 <Krnl::panic(char const*)>:
c001a887:	55                   	push   ebp
c001a888:	89 e5                	mov    ebp,esp
c001a88a:	53                   	push   ebx
c001a88b:	83 ec 0c             	sub    esp,0xc
c001a88e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a891:	fa                   	cli    
c001a892:	c6 05 84 19 03 c0 01 	mov    BYTE PTR ds:0xc0031984,0x1
c001a899:	53                   	push   ebx
c001a89a:	c6 05 64 dd 02 c0 00 	mov    BYTE PTR ds:0xc002dd64,0x0
c001a8a1:	68 3e c4 02 c0       	push   0xc002c43e
c001a8a6:	e8 20 86 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001a8ab:	58                   	pop    eax
c001a8ac:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a8b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b7:	e8 32 64 ff ff       	call   c0010cee <setActiveTerminal(VgaText*)>
c001a8bc:	83 c4 0c             	add    esp,0xc
c001a8bf:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a8c4:	6a 01                	push   0x1
c001a8c6:	6a 0f                	push   0xf
c001a8c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ce:	e8 b9 5e ff ff       	call   c001078c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8d3:	58                   	pop    eax
c001a8d4:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a8d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8df:	e8 50 66 ff ff       	call   c0010f34 <VgaText::clearScreen()>
c001a8e4:	58                   	pop    eax
c001a8e5:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a8ea:	5a                   	pop    edx
c001a8eb:	68 57 c4 02 c0       	push   0xc002c457
c001a8f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f6:	e8 7f 67 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a8fb:	59                   	pop    ecx
c001a8fc:	58                   	pop    eax
c001a8fd:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a902:	68 fc c4 02 c0       	push   0xc002c4fc
c001a907:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a90d:	e8 68 67 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a912:	58                   	pop    eax
c001a913:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a918:	5a                   	pop    edx
c001a919:	68 73 c4 02 c0       	push   0xc002c473
c001a91e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a924:	e8 51 67 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a929:	59                   	pop    ecx
c001a92a:	58                   	pop    eax
c001a92b:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a930:	53                   	push   ebx
c001a931:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a937:	e8 3e 67 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a93c:	58                   	pop    eax
c001a93d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a942:	5a                   	pop    edx
c001a943:	68 93 c4 02 c0       	push   0xc002c493
c001a948:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94e:	e8 27 67 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a953:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001a958:	83 c4 10             	add    esp,0x10
c001a95b:	85 c0                	test   eax,eax
c001a95d:	74 02                	je     c001a961 <Krnl::panic(char const*)+0xda>
c001a95f:	ff d0                	call   eax
c001a961:	83 ec 0c             	sub    esp,0xc
c001a964:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a967:	e8 e3 30 00 00       	call   c001da4f <Thr::getDriverNameFromAddress(unsigned long)>
c001a96c:	83 c4 10             	add    esp,0x10
c001a96f:	89 c3                	mov    ebx,eax
c001a971:	85 c0                	test   eax,eax
c001a973:	0f 84 50 02 00 00    	je     c001abc9 <Krnl::panic(char const*)+0x342>
c001a979:	83 ec 08             	sub    esp,0x8
c001a97c:	8b 15 90 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032390
c001a982:	68 38 c5 02 c0       	push   0xc002c538
c001a987:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a98d:	e8 e8 66 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a992:	58                   	pop    eax
c001a993:	5a                   	pop    edx
c001a994:	8b 15 90 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032390
c001a99a:	68 73 c4 02 c0       	push   0xc002c473
c001a99f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9a5:	e8 d0 66 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a9aa:	59                   	pop    ecx
c001a9ab:	58                   	pop    eax
c001a9ac:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a9b1:	53                   	push   ebx
c001a9b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b8:	e8 bd 66 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a9bd:	83 c4 10             	add    esp,0x10
c001a9c0:	83 ec 08             	sub    esp,0x8
c001a9c3:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a9c8:	68 92 c4 02 c0       	push   0xc002c492
c001a9cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d3:	e8 a2 66 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a9d8:	58                   	pop    eax
c001a9d9:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a9de:	5a                   	pop    edx
c001a9df:	68 90 c5 02 c0       	push   0xc002c590
c001a9e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ea:	e8 8b 66 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001a9ef:	59                   	pop    ecx
c001a9f0:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a9f5:	5b                   	pop    ebx
c001a9f6:	68 d0 c5 02 c0       	push   0xc002c5d0
c001a9fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa01:	e8 74 66 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001aa06:	58                   	pop    eax
c001aa07:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aa0c:	5a                   	pop    edx
c001aa0d:	68 7e c4 02 c0       	push   0xc002c47e
c001aa12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa18:	e8 5d 66 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001aa1d:	59                   	pop    ecx
c001aa1e:	5b                   	pop    ebx
c001aa1f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa22:	68 96 c4 02 c0       	push   0xc002c496
c001aa27:	e8 9f 84 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001aa2c:	58                   	pop    eax
c001aa2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa30:	5a                   	pop    edx
c001aa31:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa34:	68 9f c4 02 c0       	push   0xc002c49f
c001aa39:	e8 8d 84 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001aa3e:	59                   	pop    ecx
c001aa3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa42:	5b                   	pop    ebx
c001aa43:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa45:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa48:	68 a8 c4 02 c0       	push   0xc002c4a8
c001aa4d:	e8 79 84 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001aa52:	58                   	pop    eax
c001aa53:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aa58:	5a                   	pop    edx
c001aa59:	68 14 c6 02 c0       	push   0xc002c614
c001aa5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa64:	e8 11 66 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001aa69:	59                   	pop    ecx
c001aa6a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aa6f:	5b                   	pop    ebx
c001aa70:	68 b1 c4 02 c0       	push   0xc002c4b1
c001aa75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa7b:	e8 fa 65 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001aa80:	0f 20 c0             	mov    eax,cr0
c001aa83:	5a                   	pop    edx
c001aa84:	59                   	pop    ecx
c001aa85:	50                   	push   eax
c001aa86:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aa8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa91:	e8 0a 66 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001aa96:	5b                   	pop    ebx
c001aa97:	58                   	pop    eax
c001aa98:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aa9d:	68 bb c4 02 c0       	push   0xc002c4bb
c001aaa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaa8:	e8 cd 65 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001aaad:	0f 20 d0             	mov    eax,cr2
c001aab0:	5a                   	pop    edx
c001aab1:	59                   	pop    ecx
c001aab2:	50                   	push   eax
c001aab3:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aab8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aabe:	e8 dd 65 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001aac3:	5b                   	pop    ebx
c001aac4:	58                   	pop    eax
c001aac5:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aaca:	68 c5 c4 02 c0       	push   0xc002c4c5
c001aacf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad5:	e8 a0 65 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001aada:	0f 20 d8             	mov    eax,cr3
c001aadd:	5a                   	pop    edx
c001aade:	59                   	pop    ecx
c001aadf:	50                   	push   eax
c001aae0:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aae5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaeb:	e8 b0 65 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001aaf0:	5b                   	pop    ebx
c001aaf1:	58                   	pop    eax
c001aaf2:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001aaf7:	68 d8 c4 02 c0       	push   0xc002c4d8
c001aafc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab02:	e8 73 65 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001ab07:	0f 20 e0             	mov    eax,cr4
c001ab0a:	5a                   	pop    edx
c001ab0b:	59                   	pop    ecx
c001ab0c:	50                   	push   eax
c001ab0d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab18:	e8 83 65 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001ab1d:	5b                   	pop    ebx
c001ab1e:	58                   	pop    eax
c001ab1f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab24:	68 e2 c4 02 c0       	push   0xc002c4e2
c001ab29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab2f:	e8 46 65 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001ab34:	5a                   	pop    edx
c001ab35:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab3a:	59                   	pop    ecx
c001ab3b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab41:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab44:	50                   	push   eax
c001ab45:	e8 56 65 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001ab4a:	5b                   	pop    ebx
c001ab4b:	58                   	pop    eax
c001ab4c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab51:	68 f9 c4 02 c0       	push   0xc002c4f9
c001ab56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab5c:	e8 19 65 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001ab61:	5a                   	pop    edx
c001ab62:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab67:	59                   	pop    ecx
c001ab68:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab6e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab71:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab74:	50                   	push   eax
c001ab75:	e8 26 65 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001ab7a:	5b                   	pop    ebx
c001ab7b:	58                   	pop    eax
c001ab7c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab81:	68 f9 c4 02 c0       	push   0xc002c4f9
c001ab86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab8c:	e8 e9 64 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001ab91:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ab96:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab99:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab9f:	8b 12                	mov    edx,DWORD PTR [edx]
c001aba1:	59                   	pop    ecx
c001aba2:	5b                   	pop    ebx
c001aba3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001aba6:	50                   	push   eax
c001aba7:	e8 f4 64 ff ff       	call   c00110a0 <VgaText::putx(unsigned int)>
c001abac:	83 c4 10             	add    esp,0x10
c001abaf:	b2 fe                	mov    dl,0xfe
c001abb1:	e4 60                	in     al,0x60
c001abb3:	3c 1c                	cmp    al,0x1c
c001abb5:	74 04                	je     c001abbb <Krnl::panic(char const*)+0x334>
c001abb7:	3c 5a                	cmp    al,0x5a
c001abb9:	75 f6                	jne    c001abb1 <Krnl::panic(char const*)+0x32a>
c001abbb:	e4 64                	in     al,0x64
c001abbd:	a8 02                	test   al,0x2
c001abbf:	75 fa                	jne    c001abbb <Krnl::panic(char const*)+0x334>
c001abc1:	88 d0                	mov    al,dl
c001abc3:	e6 64                	out    0x64,al
c001abc5:	fa                   	cli    
c001abc6:	f4                   	hlt    
c001abc7:	eb e8                	jmp    c001abb1 <Krnl::panic(char const*)+0x32a>
c001abc9:	50                   	push   eax
c001abca:	50                   	push   eax
c001abcb:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001abd0:	68 64 c5 02 c0       	push   0xc002c564
c001abd5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abdb:	e8 9a 64 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001abe0:	58                   	pop    eax
c001abe1:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001abe6:	5a                   	pop    edx
c001abe7:	68 73 c4 02 c0       	push   0xc002c473
c001abec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abf2:	e8 83 64 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001abf7:	59                   	pop    ecx
c001abf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abfd:	5b                   	pop    ebx
c001abfe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac01:	83 c0 0c             	add    eax,0xc
c001ac04:	50                   	push   eax
c001ac05:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ac0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac10:	e8 65 64 ff ff       	call   c001107a <VgaText::puts(char const*)>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	e9 a3 fd ff ff       	jmp    c001a9c0 <Krnl::panic(char const*)+0x139>

c001ac1d <Net::switchEndian16(unsigned short)>:
c001ac1d:	83 ec 04             	sub    esp,0x4
c001ac20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac24:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac2c:	c1 f8 08             	sar    eax,0x8
c001ac2f:	89 c2                	mov    edx,eax
c001ac31:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac35:	c1 e0 08             	shl    eax,0x8
c001ac38:	09 d0                	or     eax,edx
c001ac3a:	83 c4 04             	add    esp,0x4
c001ac3d:	c3                   	ret    

c001ac3e <Net::switchEndian32(unsigned int)>:
c001ac3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac42:	c1 e8 18             	shr    eax,0x18
c001ac45:	89 c2                	mov    edx,eax
c001ac47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac4b:	c1 e0 08             	shl    eax,0x8
c001ac4e:	25 00 00 ff 00       	and    eax,0xff0000
c001ac53:	09 c2                	or     edx,eax
c001ac55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac59:	c1 e8 08             	shr    eax,0x8
c001ac5c:	25 00 ff 00 00       	and    eax,0xff00
c001ac61:	09 c2                	or     edx,eax
c001ac63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac67:	c1 e0 18             	shl    eax,0x18
c001ac6a:	09 d0                	or     eax,edx
c001ac6c:	c3                   	ret    

c001ac6d <Net::crc32Calc(unsigned char*, int)>:
c001ac6d:	83 ec 10             	sub    esp,0x10
c001ac70:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ac75:	75 07                	jne    c001ac7e <Net::crc32Calc(unsigned char*, int)+0x11>
c001ac77:	b8 00 00 00 00       	mov    eax,0x0
c001ac7c:	eb 7c                	jmp    c001acfa <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac7e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ac83:	7f 07                	jg     c001ac8c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ac85:	b8 00 00 00 00       	mov    eax,0x0
c001ac8a:	eb 6e                	jmp    c001acfa <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac8c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac94:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aca0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aca4:	7d 4e                	jge    c001acf4 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aca6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acae:	01 d0                	add    eax,edx
c001acb0:	8a 00                	mov    al,BYTE PTR [eax]
c001acb2:	0f b6 c0             	movzx  eax,al
c001acb5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001acb9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acc1:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001acc6:	7f 26                	jg     c001acee <Net::crc32Calc(unsigned char*, int)+0x81>
c001acc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001accc:	83 e0 01             	and    eax,0x1
c001accf:	74 0d                	je     c001acde <Net::crc32Calc(unsigned char*, int)+0x71>
c001acd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acd5:	d1 e8                	shr    eax,1
c001acd7:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001acdc:	eb 06                	jmp    c001ace4 <Net::crc32Calc(unsigned char*, int)+0x77>
c001acde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ace2:	d1 e8                	shr    eax,1
c001ace4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ace8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acec:	eb d3                	jmp    c001acc1 <Net::crc32Calc(unsigned char*, int)+0x54>
c001acee:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001acf2:	eb a8                	jmp    c001ac9c <Net::crc32Calc(unsigned char*, int)+0x2f>
c001acf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf8:	f7 d0                	not    eax
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	c3                   	ret    

c001acfe <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001acfe:	83 ec 1c             	sub    esp,0x1c
c001ad01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad11:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ad16:	7f 14                	jg     c001ad2c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ad18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad1f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad23:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad26:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad2a:	eb e5                	jmp    c001ad11 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ad2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad30:	8d 50 01             	lea    edx,[eax+0x1]
c001ad33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad37:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ad3a:	83 ec 04             	sub    esp,0x4
c001ad3d:	6a 06                	push   0x6
c001ad3f:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ad43:	50                   	push   eax
c001ad44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad48:	e8 1b 5a fe ff       	call   c0000768 <memcpy>
c001ad4d:	83 c4 10             	add    esp,0x10
c001ad50:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ad55:	83 ec 04             	sub    esp,0x4
c001ad58:	6a 06                	push   0x6
c001ad5a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ad5e:	50                   	push   eax
c001ad5f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad63:	e8 00 5a fe ff       	call   c0000768 <memcpy>
c001ad68:	83 c4 10             	add    esp,0x10
c001ad6b:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ad70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad74:	0f b7 c0             	movzx  eax,ax
c001ad77:	c1 f8 08             	sar    eax,0x8
c001ad7a:	89 c1                	mov    ecx,eax
c001ad7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad80:	8d 50 01             	lea    edx,[eax+0x1]
c001ad83:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad87:	88 ca                	mov    dl,cl
c001ad89:	88 10                	mov    BYTE PTR [eax],dl
c001ad8b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad93:	8d 48 01             	lea    ecx,[eax+0x1]
c001ad96:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ad9a:	88 10                	mov    BYTE PTR [eax],dl
c001ad9c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ada0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ada4:	83 ec 04             	sub    esp,0x4
c001ada7:	52                   	push   edx
c001ada8:	50                   	push   eax
c001ada9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001adad:	e8 b6 59 fe ff       	call   c0000768 <memcpy>
c001adb2:	83 c4 10             	add    esp,0x10
c001adb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adb9:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001adbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adc1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001adc5:	83 ec 08             	sub    esp,0x8
c001adc8:	50                   	push   eax
c001adc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001adcd:	e8 9b fe ff ff       	call   c001ac6d <Net::crc32Calc(unsigned char*, int)>
c001add2:	83 c4 10             	add    esp,0x10
c001add5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001add9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001addd:	c1 e8 18             	shr    eax,0x18
c001ade0:	89 c1                	mov    ecx,eax
c001ade2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ade6:	8d 50 01             	lea    edx,[eax+0x1]
c001ade9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aded:	88 ca                	mov    dl,cl
c001adef:	88 10                	mov    BYTE PTR [eax],dl
c001adf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adf5:	c1 e8 10             	shr    eax,0x10
c001adf8:	89 c1                	mov    ecx,eax
c001adfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adfe:	8d 50 01             	lea    edx,[eax+0x1]
c001ae01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae05:	88 ca                	mov    dl,cl
c001ae07:	88 10                	mov    BYTE PTR [eax],dl
c001ae09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae0d:	c1 e8 08             	shr    eax,0x8
c001ae10:	89 c1                	mov    ecx,eax
c001ae12:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae16:	8d 50 01             	lea    edx,[eax+0x1]
c001ae19:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae1d:	88 ca                	mov    dl,cl
c001ae1f:	88 10                	mov    BYTE PTR [eax],dl
c001ae21:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae25:	8d 50 01             	lea    edx,[eax+0x1]
c001ae28:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ae30:	88 10                	mov    BYTE PTR [eax],dl
c001ae32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae36:	83 c4 1c             	add    esp,0x1c
c001ae39:	c3                   	ret    

c001ae3a <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ae3a:	83 ec 2c             	sub    esp,0x2c
c001ae3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae45:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ae4a:	83 ec 04             	sub    esp,0x4
c001ae4d:	6a 06                	push   0x6
c001ae4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae57:	83 c0 0e             	add    eax,0xe
c001ae5a:	50                   	push   eax
c001ae5b:	e8 08 59 fe ff       	call   c0000768 <memcpy>
c001ae60:	83 c4 10             	add    esp,0x10
c001ae63:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ae68:	83 ec 04             	sub    esp,0x4
c001ae6b:	6a 06                	push   0x6
c001ae6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae75:	83 c0 08             	add    eax,0x8
c001ae78:	50                   	push   eax
c001ae79:	e8 ea 58 fe ff       	call   c0000768 <memcpy>
c001ae7e:	83 c4 10             	add    esp,0x10
c001ae81:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ae86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ae8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ae91:	8a 00                	mov    al,BYTE PTR [eax]
c001ae93:	0f b6 c0             	movzx  eax,al
c001ae96:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ae9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae9f:	8d 50 01             	lea    edx,[eax+0x1]
c001aea2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aea6:	8a 00                	mov    al,BYTE PTR [eax]
c001aea8:	0f b6 c0             	movzx  eax,al
c001aeab:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aeb0:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aeb5:	c1 e0 08             	shl    eax,0x8
c001aeb8:	89 c2                	mov    edx,eax
c001aeba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aebe:	09 d0                	or     eax,edx
c001aec0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aec4:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aec8:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aecd:	75 3a                	jne    c001af09 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aecf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aed3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aed6:	66 3d dc 05          	cmp    ax,0x5dc
c001aeda:	77 10                	ja     c001aeec <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001aedc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aee0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aee3:	0f b7 c0             	movzx  eax,ax
c001aee6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aeea:	eb 1d                	jmp    c001af09 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aeec:	83 ec 0c             	sub    esp,0xc
c001aeef:	68 3c c6 02 c0       	push   0xc002c63c
c001aef4:	e8 d2 7f ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001aef9:	83 c4 10             	add    esp,0x10
c001aefc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af00:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001af04:	e9 c0 00 00 00       	jmp    c001afc9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001af09:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af11:	8b 00                	mov    eax,DWORD PTR [eax]
c001af13:	83 ec 04             	sub    esp,0x4
c001af16:	52                   	push   edx
c001af17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af1b:	50                   	push   eax
c001af1c:	e8 47 58 fe ff       	call   c0000768 <memcpy>
c001af21:	83 c4 10             	add    esp,0x10
c001af24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af28:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001af2c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af30:	8d 50 01             	lea    edx,[eax+0x1]
c001af33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af37:	8a 00                	mov    al,BYTE PTR [eax]
c001af39:	0f b6 c0             	movzx  eax,al
c001af3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af44:	8d 50 01             	lea    edx,[eax+0x1]
c001af47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af4b:	8a 00                	mov    al,BYTE PTR [eax]
c001af4d:	0f b6 c0             	movzx  eax,al
c001af50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001af54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af58:	8d 50 01             	lea    edx,[eax+0x1]
c001af5b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af5f:	8a 00                	mov    al,BYTE PTR [eax]
c001af61:	0f b6 c0             	movzx  eax,al
c001af64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af6c:	8d 50 01             	lea    edx,[eax+0x1]
c001af6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af73:	8a 00                	mov    al,BYTE PTR [eax]
c001af75:	0f b6 c0             	movzx  eax,al
c001af78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af80:	c1 e0 18             	shl    eax,0x18
c001af83:	89 c2                	mov    edx,eax
c001af85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af89:	c1 e0 10             	shl    eax,0x10
c001af8c:	09 c2                	or     edx,eax
c001af8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af92:	c1 e0 08             	shl    eax,0x8
c001af95:	09 d0                	or     eax,edx
c001af97:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001af9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afa3:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001afa7:	83 e8 04             	sub    eax,0x4
c001afaa:	83 ec 08             	sub    esp,0x8
c001afad:	50                   	push   eax
c001afae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001afb2:	e8 b6 fc ff ff       	call   c001ac6d <Net::crc32Calc(unsigned char*, int)>
c001afb7:	83 c4 10             	add    esp,0x10
c001afba:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001afbe:	0f 94 c2             	sete   dl
c001afc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afc5:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001afc8:	90                   	nop
c001afc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afcd:	83 c4 2c             	add    esp,0x2c
c001afd0:	c2 04 00             	ret    0x4

c001afd3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001afd3:	55                   	push   ebp
c001afd4:	57                   	push   edi
c001afd5:	56                   	push   esi
c001afd6:	53                   	push   ebx
c001afd7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001afdd:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001afe4:	8a 1e                	mov    bl,BYTE PTR [esi]
c001afe6:	8d 6e 01             	lea    ebp,[esi+0x1]
c001afe9:	80 fb 40             	cmp    bl,0x40
c001afec:	75 1b                	jne    c001b009 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001afee:	8a 16                	mov    dl,BYTE PTR [esi]
c001aff0:	84 d2                	test   dl,dl
c001aff2:	0f 84 f1 00 00 00    	je     c001b0e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aff8:	8d 46 01             	lea    eax,[esi+0x1]
c001affb:	80 fa 3a             	cmp    dl,0x3a
c001affe:	74 04                	je     c001b004 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b000:	89 c6                	mov    esi,eax
c001b002:	eb ea                	jmp    c001afee <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b004:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b007:	89 c6                	mov    esi,eax
c001b009:	50                   	push   eax
c001b00a:	6a 40                	push   0x40
c001b00c:	6a 00                	push   0x0
c001b00e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b012:	50                   	push   eax
c001b013:	e8 68 57 fe ff       	call   c0000780 <memset>
c001b018:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b01f:	31 c0                	xor    eax,eax
c001b021:	83 c4 10             	add    esp,0x10
c001b024:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b026:	84 c9                	test   cl,cl
c001b028:	0f 84 bb 00 00 00    	je     c001b0e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b02e:	3d c7 00 00 00       	cmp    eax,0xc7
c001b033:	0f 8f b0 00 00 00    	jg     c001b0e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b039:	80 f9 0a             	cmp    cl,0xa
c001b03c:	0f 85 98 00 00 00    	jne    c001b0da <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b042:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b047:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b04b:	a8 df                	test   al,0xdf
c001b04d:	0f 94 c1             	sete   cl
c001b050:	3c 23                	cmp    al,0x23
c001b052:	0f 94 c2             	sete   dl
c001b055:	08 d1                	or     cl,dl
c001b057:	75 4a                	jne    c001b0a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b059:	8d 50 f7             	lea    edx,[eax-0x9]
c001b05c:	80 fa 01             	cmp    dl,0x1
c001b05f:	76 42                	jbe    c001b0a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b061:	3c 5b                	cmp    al,0x5b
c001b063:	75 42                	jne    c001b0a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b065:	80 fb 40             	cmp    bl,0x40
c001b068:	75 39                	jne    c001b0a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b06a:	83 ec 0c             	sub    esp,0xc
c001b06d:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b071:	52                   	push   edx
c001b072:	e8 25 57 fe ff       	call   c000079c <strlen>
c001b077:	83 c4 10             	add    esp,0x10
c001b07a:	83 f8 3f             	cmp    eax,0x3f
c001b07d:	77 6a                	ja     c001b0e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b07f:	50                   	push   eax
c001b080:	50                   	push   eax
c001b081:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b085:	52                   	push   edx
c001b086:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b08a:	52                   	push   edx
c001b08b:	e8 ac 57 fe ff       	call   c000083c <strcpy>
c001b090:	58                   	pop    eax
c001b091:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b095:	52                   	push   edx
c001b096:	e8 01 57 fe ff       	call   c000079c <strlen>
c001b09b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b0a0:	83 c4 10             	add    esp,0x10
c001b0a3:	31 d2                	xor    edx,edx
c001b0a5:	eb 3a                	jmp    c001b0e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b0a7:	80 fb 40             	cmp    bl,0x40
c001b0aa:	74 06                	je     c001b0b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b0ac:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b0b0:	eb 20                	jmp    c001b0d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b0b2:	50                   	push   eax
c001b0b3:	50                   	push   eax
c001b0b4:	55                   	push   ebp
c001b0b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b0b9:	50                   	push   eax
c001b0ba:	e8 09 58 fe ff       	call   c00008c8 <strcmp>
c001b0bf:	83 c4 10             	add    esp,0x10
c001b0c2:	85 c0                	test   eax,eax
c001b0c4:	75 dd                	jne    c001b0a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0c6:	eb e4                	jmp    c001b0ac <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b0c8:	8d 50 01             	lea    edx,[eax+0x1]
c001b0cb:	80 f9 3d             	cmp    cl,0x3d
c001b0ce:	74 1d                	je     c001b0ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b0d0:	89 d0                	mov    eax,edx
c001b0d2:	8a 08                	mov    cl,BYTE PTR [eax]
c001b0d4:	84 c9                	test   cl,cl
c001b0d6:	75 f0                	jne    c001b0c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b0d8:	eb 0f                	jmp    c001b0e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0da:	8d 50 01             	lea    edx,[eax+0x1]
c001b0dd:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b0e1:	47                   	inc    edi
c001b0e2:	89 d0                	mov    eax,edx
c001b0e4:	e9 3b ff ff ff       	jmp    c001b024 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b0e9:	31 c0                	xor    eax,eax
c001b0eb:	eb 33                	jmp    c001b120 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b0ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b0f1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b0f4:	50                   	push   eax
c001b0f5:	50                   	push   eax
c001b0f6:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b0fa:	50                   	push   eax
c001b0fb:	56                   	push   esi
c001b0fc:	e8 c7 57 fe ff       	call   c00008c8 <strcmp>
c001b101:	83 c4 10             	add    esp,0x10
c001b104:	85 c0                	test   eax,eax
c001b106:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b10a:	75 97                	jne    c001b0a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b10c:	51                   	push   ecx
c001b10d:	51                   	push   ecx
c001b10e:	52                   	push   edx
c001b10f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b116:	e8 21 57 fe ff       	call   c000083c <strcpy>
c001b11b:	83 c4 10             	add    esp,0x10
c001b11e:	b0 01                	mov    al,0x1
c001b120:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b126:	5b                   	pop    ebx
c001b127:	5e                   	pop    esi
c001b128:	5f                   	pop    edi
c001b129:	5d                   	pop    ebp
c001b12a:	c3                   	ret    

c001b12b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b12b:	57                   	push   edi
c001b12c:	56                   	push   esi
c001b12d:	53                   	push   ebx
c001b12e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b134:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b13b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b142:	53                   	push   ebx
c001b143:	e8 54 56 fe ff       	call   c000079c <strlen>
c001b148:	89 34 24             	mov    DWORD PTR [esp],esi
c001b14b:	89 c7                	mov    edi,eax
c001b14d:	e8 4a 56 fe ff       	call   c000079c <strlen>
c001b152:	83 c4 10             	add    esp,0x10
c001b155:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b159:	3d ff 00 00 00       	cmp    eax,0xff
c001b15e:	0f 87 d3 00 00 00    	ja     c001b237 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b164:	57                   	push   edi
c001b165:	57                   	push   edi
c001b166:	56                   	push   esi
c001b167:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b16b:	56                   	push   esi
c001b16c:	e8 cb 56 fe ff       	call   c000083c <strcpy>
c001b171:	58                   	pop    eax
c001b172:	5a                   	pop    edx
c001b173:	68 91 cb 02 c0       	push   0xc002cb91
c001b178:	56                   	push   esi
c001b179:	e8 fe 57 fe ff       	call   c000097c <strcat>
c001b17e:	59                   	pop    ecx
c001b17f:	5f                   	pop    edi
c001b180:	53                   	push   ebx
c001b181:	56                   	push   esi
c001b182:	e8 f5 57 fe ff       	call   c000097c <strcat>
c001b187:	58                   	pop    eax
c001b188:	5a                   	pop    edx
c001b189:	68 88 c6 02 c0       	push   0xc002c688
c001b18e:	56                   	push   esi
c001b18f:	e8 e8 57 fe ff       	call   c000097c <strcat>
c001b194:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b19b:	e8 74 47 ff ff       	call   c000f914 <malloc>
c001b1a0:	83 c4 0c             	add    esp,0xc
c001b1a3:	89 c3                	mov    ebx,eax
c001b1a5:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001b1ab:	56                   	push   esi
c001b1ac:	50                   	push   eax
c001b1ad:	e8 78 82 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001b1b2:	83 c4 10             	add    esp,0x10
c001b1b5:	85 db                	test   ebx,ebx
c001b1b7:	74 7e                	je     c001b237 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b1b9:	51                   	push   ecx
c001b1ba:	51                   	push   ecx
c001b1bb:	6a 01                	push   0x1
c001b1bd:	53                   	push   ebx
c001b1be:	e8 cb 82 ff ff       	call   c001348e <File::open(FileOpenMode)>
c001b1c3:	83 c4 10             	add    esp,0x10
c001b1c6:	85 c0                	test   eax,eax
c001b1c8:	74 08                	je     c001b1d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b1ca:	83 ec 0c             	sub    esp,0xc
c001b1cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1cf:	53                   	push   ebx
c001b1d0:	eb 5f                	jmp    c001b231 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b1d2:	52                   	push   edx
c001b1d3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b1d7:	50                   	push   eax
c001b1d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b1dc:	50                   	push   eax
c001b1dd:	53                   	push   ebx
c001b1de:	e8 57 85 ff ff       	call   c001373a <File::stat(unsigned long long*, bool*)>
c001b1e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1e7:	83 c4 10             	add    esp,0x10
c001b1ea:	89 c1                	mov    ecx,eax
c001b1ec:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b1f0:	74 31                	je     c001b223 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b1f2:	83 ec 0c             	sub    esp,0xc
c001b1f5:	50                   	push   eax
c001b1f6:	e8 19 47 ff ff       	call   c000f914 <malloc>
c001b1fb:	89 c6                	mov    esi,eax
c001b1fd:	58                   	pop    eax
c001b1fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b200:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b204:	52                   	push   edx
c001b205:	56                   	push   esi
c001b206:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b20a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b20e:	53                   	push   ebx
c001b20f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b212:	83 c4 20             	add    esp,0x20
c001b215:	85 c0                	test   eax,eax
c001b217:	75 0a                	jne    c001b223 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b219:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b21d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b221:	74 18                	je     c001b23b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b223:	83 ec 0c             	sub    esp,0xc
c001b226:	53                   	push   ebx
c001b227:	e8 c0 82 ff ff       	call   c00134ec <File::close()>
c001b22c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b22e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b231:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b234:	83 c4 10             	add    esp,0x10
c001b237:	31 c0                	xor    eax,eax
c001b239:	eb 3b                	jmp    c001b276 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b23b:	83 ec 0c             	sub    esp,0xc
c001b23e:	53                   	push   ebx
c001b23f:	e8 a8 82 ff ff       	call   c00134ec <File::close()>
c001b244:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b246:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b249:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b24c:	83 c4 0c             	add    esp,0xc
c001b24f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b256:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b25d:	56                   	push   esi
c001b25e:	e8 70 fd ff ff       	call   c001afd3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b263:	89 34 24             	mov    DWORD PTR [esp],esi
c001b266:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b26a:	e8 b5 46 ff ff       	call   c000f924 <free>
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b276:	81 c4 20 01 00 00    	add    esp,0x120
c001b27c:	5b                   	pop    ebx
c001b27d:	5e                   	pop    esi
c001b27e:	5f                   	pop    edi
c001b27f:	c3                   	ret    

c001b280 <Reg::getLine(char*, char*, char*)>:
c001b280:	57                   	push   edi
c001b281:	56                   	push   esi
c001b282:	53                   	push   ebx
c001b283:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b287:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b28b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b28f:	57                   	push   edi
c001b290:	56                   	push   esi
c001b291:	53                   	push   ebx
c001b292:	68 8d c6 02 c0       	push   0xc002c68d
c001b297:	e8 8f fe ff ff       	call   c001b12b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b29c:	83 c4 10             	add    esp,0x10
c001b29f:	84 c0                	test   al,al
c001b2a1:	75 10                	jne    c001b2b3 <Reg::getLine(char*, char*, char*)+0x33>
c001b2a3:	57                   	push   edi
c001b2a4:	56                   	push   esi
c001b2a5:	53                   	push   ebx
c001b2a6:	68 b2 c6 02 c0       	push   0xc002c6b2
c001b2ab:	e8 7b fe ff ff       	call   c001b12b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2b0:	83 c4 10             	add    esp,0x10
c001b2b3:	5b                   	pop    ebx
c001b2b4:	5e                   	pop    esi
c001b2b5:	5f                   	pop    edi
c001b2b6:	c3                   	ret    

c001b2b7 <Reg::readInt(char*, char*, int*)>:
c001b2b7:	55                   	push   ebp
c001b2b8:	57                   	push   edi
c001b2b9:	56                   	push   esi
c001b2ba:	53                   	push   ebx
c001b2bb:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b2c1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b2c5:	57                   	push   edi
c001b2c6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2cd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2d4:	e8 a7 ff ff ff       	call   c001b280 <Reg::getLine(char*, char*, char*)>
c001b2d9:	83 c4 10             	add    esp,0x10
c001b2dc:	84 c0                	test   al,al
c001b2de:	0f 84 b3 00 00 00    	je     c001b397 <Reg::readInt(char*, char*, int*)+0xe0>
c001b2e4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b2e8:	80 fa 2b             	cmp    dl,0x2b
c001b2eb:	74 0c                	je     c001b2f9 <Reg::readInt(char*, char*, int*)+0x42>
c001b2ed:	80 fa 2d             	cmp    dl,0x2d
c001b2f0:	75 0e                	jne    c001b300 <Reg::readInt(char*, char*, int*)+0x49>
c001b2f2:	ba 01 00 00 00       	mov    edx,0x1
c001b2f7:	eb 0b                	jmp    c001b304 <Reg::readInt(char*, char*, int*)+0x4d>
c001b2f9:	ba 01 00 00 00       	mov    edx,0x1
c001b2fe:	eb 02                	jmp    c001b302 <Reg::readInt(char*, char*, int*)+0x4b>
c001b300:	31 d2                	xor    edx,edx
c001b302:	31 c0                	xor    eax,eax
c001b304:	be 0a 00 00 00       	mov    esi,0xa
c001b309:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b30e:	75 20                	jne    c001b330 <Reg::readInt(char*, char*, int*)+0x79>
c001b310:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b314:	80 f9 78             	cmp    cl,0x78
c001b317:	75 0a                	jne    c001b323 <Reg::readInt(char*, char*, int*)+0x6c>
c001b319:	83 c2 02             	add    edx,0x2
c001b31c:	be 10 00 00 00       	mov    esi,0x10
c001b321:	eb 0d                	jmp    c001b330 <Reg::readInt(char*, char*, int*)+0x79>
c001b323:	80 f9 62             	cmp    cl,0x62
c001b326:	75 08                	jne    c001b330 <Reg::readInt(char*, char*, int*)+0x79>
c001b328:	83 c2 02             	add    edx,0x2
c001b32b:	be 02 00 00 00       	mov    esi,0x2
c001b330:	01 d7                	add    edi,edx
c001b332:	31 d2                	xor    edx,edx
c001b334:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b336:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b33a:	80 fb 0d             	cmp    bl,0xd
c001b33d:	0f 94 c3             	sete   bl
c001b340:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b345:	0f 94 c1             	sete   cl
c001b348:	08 cb                	or     bl,cl
c001b34a:	75 3a                	jne    c001b386 <Reg::readInt(char*, char*, int*)+0xcf>
c001b34c:	0f af d6             	imul   edx,esi
c001b34f:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b354:	83 fe 10             	cmp    esi,0x10
c001b357:	75 26                	jne    c001b37f <Reg::readInt(char*, char*, int*)+0xc8>
c001b359:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b35d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b360:	89 e9                	mov    ecx,ebp
c001b362:	80 f9 05             	cmp    cl,0x5
c001b365:	77 06                	ja     c001b36d <Reg::readInt(char*, char*, int*)+0xb6>
c001b367:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b36b:	eb 16                	jmp    c001b383 <Reg::readInt(char*, char*, int*)+0xcc>
c001b36d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b371:	83 e9 61             	sub    ecx,0x61
c001b374:	80 f9 05             	cmp    cl,0x5
c001b377:	77 06                	ja     c001b37f <Reg::readInt(char*, char*, int*)+0xc8>
c001b379:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b37d:	eb 04                	jmp    c001b383 <Reg::readInt(char*, char*, int*)+0xcc>
c001b37f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b383:	47                   	inc    edi
c001b384:	eb ae                	jmp    c001b334 <Reg::readInt(char*, char*, int*)+0x7d>
c001b386:	84 c0                	test   al,al
c001b388:	74 02                	je     c001b38c <Reg::readInt(char*, char*, int*)+0xd5>
c001b38a:	f7 da                	neg    edx
c001b38c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b393:	89 10                	mov    DWORD PTR [eax],edx
c001b395:	88 d8                	mov    al,bl
c001b397:	81 c4 ec 00 00 00    	add    esp,0xec
c001b39d:	5b                   	pop    ebx
c001b39e:	5e                   	pop    esi
c001b39f:	5f                   	pop    edi
c001b3a0:	5d                   	pop    ebp
c001b3a1:	c3                   	ret    

c001b3a2 <Reg::readString(char*, char*, char*, int)>:
c001b3a2:	57                   	push   edi
c001b3a3:	56                   	push   esi
c001b3a4:	53                   	push   ebx
c001b3a5:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b3ab:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b3b2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b3b6:	57                   	push   edi
c001b3b7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3be:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3c5:	e8 b6 fe ff ff       	call   c001b280 <Reg::getLine(char*, char*, char*)>
c001b3ca:	83 c4 10             	add    esp,0x10
c001b3cd:	89 c6                	mov    esi,eax
c001b3cf:	84 c0                	test   al,al
c001b3d1:	74 44                	je     c001b417 <Reg::readString(char*, char*, char*, int)+0x75>
c001b3d3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b3da:	31 c0                	xor    eax,eax
c001b3dc:	4a                   	dec    edx
c001b3dd:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b3e0:	84 c9                	test   cl,cl
c001b3e2:	74 0f                	je     c001b3f3 <Reg::readString(char*, char*, char*, int)+0x51>
c001b3e4:	39 c2                	cmp    edx,eax
c001b3e6:	7e 0b                	jle    c001b3f3 <Reg::readString(char*, char*, char*, int)+0x51>
c001b3e8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b3eb:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b3f0:	40                   	inc    eax
c001b3f1:	eb ea                	jmp    c001b3dd <Reg::readString(char*, char*, char*, int)+0x3b>
c001b3f3:	83 ec 0c             	sub    esp,0xc
c001b3f6:	53                   	push   ebx
c001b3f7:	e8 a0 53 fe ff       	call   c000079c <strlen>
c001b3fc:	83 c4 10             	add    esp,0x10
c001b3ff:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b404:	75 11                	jne    c001b417 <Reg::readString(char*, char*, char*, int)+0x75>
c001b406:	83 ec 0c             	sub    esp,0xc
c001b409:	53                   	push   ebx
c001b40a:	e8 8d 53 fe ff       	call   c000079c <strlen>
c001b40f:	83 c4 10             	add    esp,0x10
c001b412:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b417:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b41d:	89 f0                	mov    eax,esi
c001b41f:	5b                   	pop    ebx
c001b420:	5e                   	pop    esi
c001b421:	5f                   	pop    edi
c001b422:	c3                   	ret    

c001b423 <Reg::readBool(char*, char*, bool*)>:
c001b423:	83 ec 20             	sub    esp,0x20
c001b426:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b42a:	50                   	push   eax
c001b42b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b42f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b433:	e8 7f fe ff ff       	call   c001b2b7 <Reg::readInt(char*, char*, int*)>
c001b438:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b43d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b441:	0f 95 02             	setne  BYTE PTR [edx]
c001b444:	83 c4 2c             	add    esp,0x2c
c001b447:	c3                   	ret    

c001b448 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b448:	53                   	push   ebx
c001b449:	83 ec 1c             	sub    esp,0x1c
c001b44c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b450:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b454:	50                   	push   eax
c001b455:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b459:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b45d:	e8 c1 ff ff ff       	call   c001b423 <Reg::readBool(char*, char*, bool*)>
c001b462:	83 c4 10             	add    esp,0x10
c001b465:	84 c0                	test   al,al
c001b467:	74 04                	je     c001b46d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b469:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b46d:	88 d8                	mov    al,bl
c001b46f:	83 c4 18             	add    esp,0x18
c001b472:	5b                   	pop    ebx
c001b473:	c3                   	ret    

c001b474 <Reg::readIntWithDefault(char*, char*, int)>:
c001b474:	53                   	push   ebx
c001b475:	83 ec 1c             	sub    esp,0x1c
c001b478:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b47c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b480:	50                   	push   eax
c001b481:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b485:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b489:	e8 29 fe ff ff       	call   c001b2b7 <Reg::readInt(char*, char*, int*)>
c001b48e:	83 c4 10             	add    esp,0x10
c001b491:	84 c0                	test   al,al
c001b493:	74 04                	je     c001b499 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b495:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b499:	89 d8                	mov    eax,ebx
c001b49b:	83 c4 18             	add    esp,0x18
c001b49e:	5b                   	pop    ebx
c001b49f:	c3                   	ret    

c001b4a0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b4a0:	57                   	push   edi
c001b4a1:	56                   	push   esi
c001b4a2:	53                   	push   ebx
c001b4a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b4a7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b4ab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b4af:	56                   	push   esi
c001b4b0:	53                   	push   ebx
c001b4b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4b9:	e8 e4 fe ff ff       	call   c001b3a2 <Reg::readString(char*, char*, char*, int)>
c001b4be:	83 c4 10             	add    esp,0x10
c001b4c1:	84 c0                	test   al,al
c001b4c3:	75 1b                	jne    c001b4e0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b4c5:	50                   	push   eax
c001b4c6:	56                   	push   esi
c001b4c7:	4e                   	dec    esi
c001b4c8:	6a 00                	push   0x0
c001b4ca:	53                   	push   ebx
c001b4cb:	e8 b0 52 fe ff       	call   c0000780 <memset>
c001b4d0:	83 c4 0c             	add    esp,0xc
c001b4d3:	56                   	push   esi
c001b4d4:	57                   	push   edi
c001b4d5:	53                   	push   ebx
c001b4d6:	89 fb                	mov    ebx,edi
c001b4d8:	e8 8b 52 fe ff       	call   c0000768 <memcpy>
c001b4dd:	83 c4 10             	add    esp,0x10
c001b4e0:	89 d8                	mov    eax,ebx
c001b4e2:	5b                   	pop    ebx
c001b4e3:	5e                   	pop    esi
c001b4e4:	5f                   	pop    edi
c001b4e5:	c3                   	ret    

c001b4e6 <Sys::eject(regs*)>:
c001b4e6:	83 ec 0c             	sub    esp,0xc
c001b4e9:	83 ca ff             	or     edx,0xffffffff
c001b4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b4f3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b4f8:	83 e9 41             	sub    ecx,0x41
c001b4fb:	83 f9 19             	cmp    ecx,0x19
c001b4fe:	77 18                	ja     c001b518 <Sys::eject(regs*)+0x32>
c001b500:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c001b507:	85 c9                	test   ecx,ecx
c001b509:	74 0d                	je     c001b518 <Sys::eject(regs*)+0x32>
c001b50b:	83 ec 0c             	sub    esp,0xc
c001b50e:	51                   	push   ecx
c001b50f:	e8 d8 b2 ff ff       	call   c00167ec <LogicalDisk::eject()>
c001b514:	83 c4 10             	add    esp,0x10
c001b517:	99                   	cdq    
c001b518:	83 c4 0c             	add    esp,0xc
c001b51b:	c3                   	ret    

c001b51c <Sys::exit(regs*)>:
c001b51c:	83 ec 18             	sub    esp,0x18
c001b51f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b523:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b526:	e8 86 38 00 00       	call   c001edb1 <terminateTask(int)>
c001b52b:	83 c8 ff             	or     eax,0xffffffff
c001b52e:	83 c4 1c             	add    esp,0x1c
c001b531:	89 c2                	mov    edx,eax
c001b533:	c3                   	ret    

c001b534 <Sys::getCwd(regs*)>:
c001b534:	83 ec 10             	sub    esp,0x10
c001b537:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b53b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b53e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b546:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b549:	e8 de 7c ff ff       	call   c001322c <Fs::getcwd(Process*, char*, int)>
c001b54e:	83 c4 1c             	add    esp,0x1c
c001b551:	99                   	cdq    
c001b552:	c3                   	ret    

c001b553 <Sys::getPID(regs*)>:
c001b553:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b558:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b55b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b55d:	99                   	cdq    
c001b55e:	c3                   	ret    

c001b55f <Sys::getRAMData(regs*)>:
c001b55f:	8b 0d 74 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee74
c001b565:	6b 05 70 ee 02 c0 64 	imul   eax,DWORD PTR ds:0xc002ee70,0x64
c001b56c:	99                   	cdq    
c001b56d:	f7 f9                	idiv   ecx
c001b56f:	c1 e0 18             	shl    eax,0x18
c001b572:	09 c8                	or     eax,ecx
c001b574:	99                   	cdq    
c001b575:	c3                   	ret    

c001b576 <Sys::getVGAPtr(regs*)>:
c001b576:	56                   	push   esi
c001b577:	53                   	push   ebx
c001b578:	83 ec 10             	sub    esp,0x10
c001b57b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b57f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b582:	e8 0c 33 00 00       	call   c001e893 <Thr::processFromPID(int)>
c001b587:	83 c4 10             	add    esp,0x10
c001b58a:	89 c1                	mov    ecx,eax
c001b58c:	b8 01 00 00 00       	mov    eax,0x1
c001b591:	85 c9                	test   ecx,ecx
c001b593:	74 5d                	je     c001b5f2 <Sys::getVGAPtr(regs*)+0x7c>
c001b595:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b59b:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c001b59f:	74 0c                	je     c001b5ad <Sys::getVGAPtr(regs*)+0x37>
c001b5a1:	83 ec 0c             	sub    esp,0xc
c001b5a4:	53                   	push   ebx
c001b5a5:	e8 44 57 ff ff       	call   c0010cee <setActiveTerminal(VgaText*)>
c001b5aa:	83 c4 10             	add    esp,0x10
c001b5ad:	81 c3 82 00 00 00    	add    ebx,0x82
c001b5b3:	50                   	push   eax
c001b5b4:	68 a0 0f 00 00       	push   0xfa0
c001b5b9:	ff 73 8a             	push   DWORD PTR [ebx-0x76]
c001b5bc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b5bf:	e8 a4 51 fe ff       	call   c0000768 <memcpy>
c001b5c4:	8b 53 92             	mov    edx,DWORD PTR [ebx-0x6e]
c001b5c7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5ca:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b5d0:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b5d3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5d6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b5dc:	58                   	pop    eax
c001b5dd:	5a                   	pop    edx
c001b5de:	53                   	push   ebx
c001b5df:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5e2:	05 a8 0f 00 00       	add    eax,0xfa8
c001b5e7:	50                   	push   eax
c001b5e8:	e8 4f 52 fe ff       	call   c000083c <strcpy>
c001b5ed:	83 c4 10             	add    esp,0x10
c001b5f0:	31 c0                	xor    eax,eax
c001b5f2:	59                   	pop    ecx
c001b5f3:	31 d2                	xor    edx,edx
c001b5f5:	5b                   	pop    ebx
c001b5f6:	5e                   	pop    esi
c001b5f7:	c3                   	ret    

c001b5f8 <Sys::loadDLL(regs*)>:
c001b5f8:	56                   	push   esi
c001b5f9:	53                   	push   ebx
c001b5fa:	31 d2                	xor    edx,edx
c001b5fc:	51                   	push   ecx
c001b5fd:	b8 01 00 00 00       	mov    eax,0x1
c001b602:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b606:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b60a:	0f 84 8c 00 00 00    	je     c001b69c <Sys::loadDLL(regs*)+0xa4>
c001b610:	83 ec 0c             	sub    esp,0xc
c001b613:	68 14 01 00 00       	push   0x114
c001b618:	e8 f7 42 ff ff       	call   c000f914 <malloc>
c001b61d:	83 c4 0c             	add    esp,0xc
c001b620:	89 c3                	mov    ebx,eax
c001b622:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b627:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b62a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b62d:	53                   	push   ebx
c001b62e:	e8 f7 7d ff ff       	call   c001342a <File::File(char const*, Process*)>
c001b633:	83 c4 10             	add    esp,0x10
c001b636:	31 d2                	xor    edx,edx
c001b638:	b8 02 00 00 00       	mov    eax,0x2
c001b63d:	85 db                	test   ebx,ebx
c001b63f:	74 5b                	je     c001b69c <Sys::loadDLL(regs*)+0xa4>
c001b641:	83 ec 0c             	sub    esp,0xc
c001b644:	53                   	push   ebx
c001b645:	e8 b2 80 ff ff       	call   c00136fc <File::exists()>
c001b64a:	83 c4 10             	add    esp,0x10
c001b64d:	84 c0                	test   al,al
c001b64f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b651:	75 11                	jne    c001b664 <Sys::loadDLL(regs*)+0x6c>
c001b653:	83 ec 0c             	sub    esp,0xc
c001b656:	53                   	push   ebx
c001b657:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b65a:	83 c4 10             	add    esp,0x10
c001b65d:	b8 03 00 00 00       	mov    eax,0x3
c001b662:	eb 36                	jmp    c001b69a <Sys::loadDLL(regs*)+0xa2>
c001b664:	83 ec 0c             	sub    esp,0xc
c001b667:	53                   	push   ebx
c001b668:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b66b:	58                   	pop    eax
c001b66c:	5a                   	pop    edx
c001b66d:	6a 00                	push   0x0
c001b66f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b672:	e8 29 24 00 00       	call   c001daa0 <Thr::loadDLL(char const*, bool)>
c001b677:	83 c4 10             	add    esp,0x10
c001b67a:	89 c1                	mov    ecx,eax
c001b67c:	31 d2                	xor    edx,edx
c001b67e:	b8 04 00 00 00       	mov    eax,0x4
c001b683:	85 c9                	test   ecx,ecx
c001b685:	74 15                	je     c001b69c <Sys::loadDLL(regs*)+0xa4>
c001b687:	53                   	push   ebx
c001b688:	53                   	push   ebx
c001b689:	ff 35 28 ee 02 c0    	push   DWORD PTR ds:0xc002ee28
c001b68f:	51                   	push   ecx
c001b690:	e8 36 26 00 00       	call   c001dccb <Thr::executeDLL(unsigned long, void*)>
c001b695:	83 c4 10             	add    esp,0x10
c001b698:	31 c0                	xor    eax,eax
c001b69a:	31 d2                	xor    edx,edx
c001b69c:	59                   	pop    ecx
c001b69d:	5b                   	pop    ebx
c001b69e:	5e                   	pop    esi
c001b69f:	c3                   	ret    

c001b6a0 <Sys::read(regs*)>:
c001b6a0:	57                   	push   edi
c001b6a1:	56                   	push   esi
c001b6a2:	53                   	push   ebx
c001b6a3:	83 ec 10             	sub    esp,0x10
c001b6a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6aa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6ad:	83 f8 02             	cmp    eax,0x2
c001b6b0:	77 10                	ja     c001b6c2 <Sys::read(regs*)+0x22>
c001b6b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6ba:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6c0:	eb 0e                	jmp    c001b6d0 <Sys::read(regs*)+0x30>
c001b6c2:	83 ec 0c             	sub    esp,0xc
c001b6c5:	50                   	push   eax
c001b6c6:	e8 a4 62 ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001b6cb:	83 c4 10             	add    esp,0x10
c001b6ce:	89 c1                	mov    ecx,eax
c001b6d0:	83 c8 ff             	or     eax,0xffffffff
c001b6d3:	85 c9                	test   ecx,ecx
c001b6d5:	89 c2                	mov    edx,eax
c001b6d7:	74 28                	je     c001b701 <Sys::read(regs*)+0x61>
c001b6d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6e1:	31 ff                	xor    edi,edi
c001b6e3:	83 ec 0c             	sub    esp,0xc
c001b6e6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6ec:	52                   	push   edx
c001b6ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6f0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6f3:	57                   	push   edi
c001b6f4:	56                   	push   esi
c001b6f5:	51                   	push   ecx
c001b6f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b6f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6fd:	83 c4 20             	add    esp,0x20
c001b700:	99                   	cdq    
c001b701:	83 c4 10             	add    esp,0x10
c001b704:	5b                   	pop    ebx
c001b705:	5e                   	pop    esi
c001b706:	5f                   	pop    edi
c001b707:	c3                   	ret    

c001b708 <Sys::sbrk(regs*)>:
c001b708:	56                   	push   esi
c001b709:	53                   	push   ebx
c001b70a:	50                   	push   eax
c001b70b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b710:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b714:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b717:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b71a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b720:	85 db                	test   ebx,ebx
c001b722:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b725:	74 02                	je     c001b729 <Sys::sbrk(regs*)+0x21>
c001b727:	79 06                	jns    c001b72f <Sys::sbrk(regs*)+0x27>
c001b729:	89 f0                	mov    eax,esi
c001b72b:	31 d2                	xor    edx,edx
c001b72d:	eb 2a                	jmp    c001b759 <Sys::sbrk(regs*)+0x51>
c001b72f:	83 c8 ff             	or     eax,0xffffffff
c001b732:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b738:	89 c2                	mov    edx,eax
c001b73a:	77 1d                	ja     c001b759 <Sys::sbrk(regs*)+0x51>
c001b73c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b742:	50                   	push   eax
c001b743:	c1 ea 0c             	shr    edx,0xc
c001b746:	68 07 0c 00 00       	push   0xc07
c001b74b:	52                   	push   edx
c001b74c:	51                   	push   ecx
c001b74d:	e8 ac 6c ff ff       	call   c00123fe <VAS::allocatePages(int, int)>
c001b752:	89 f0                	mov    eax,esi
c001b754:	31 d2                	xor    edx,edx
c001b756:	83 c4 10             	add    esp,0x10
c001b759:	59                   	pop    ecx
c001b75a:	5b                   	pop    ebx
c001b75b:	5e                   	pop    esi
c001b75c:	c3                   	ret    

c001b75d <Sys::setCwd(regs*)>:
c001b75d:	83 ec 14             	sub    esp,0x14
c001b760:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b764:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b76c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b76f:	e8 27 80 ff ff       	call   c001379b <Fs::setcwd(Process*, char*)>
c001b774:	83 c4 1c             	add    esp,0x1c
c001b777:	99                   	cdq    
c001b778:	c3                   	ret    

c001b779 <Sys::setTime(regs*)>:
c001b779:	55                   	push   ebp
c001b77a:	31 d2                	xor    edx,edx
c001b77c:	57                   	push   edi
c001b77d:	bf 18 00 00 00       	mov    edi,0x18
c001b782:	56                   	push   esi
c001b783:	53                   	push   ebx
c001b784:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b789:	83 ec 30             	sub    esp,0x30
c001b78c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b790:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b793:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b796:	f7 f3                	div    ebx
c001b798:	89 d6                	mov    esi,edx
c001b79a:	31 d2                	xor    edx,edx
c001b79c:	f7 f3                	div    ebx
c001b79e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b7a5:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b7aa:	31 d2                	xor    edx,edx
c001b7ac:	f7 f3                	div    ebx
c001b7ae:	31 d2                	xor    edx,edx
c001b7b0:	bb 0c 00 00 00       	mov    ebx,0xc
c001b7b5:	f7 f7                	div    edi
c001b7b7:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7ba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b7be:	0f b7 cd             	movzx  ecx,bp
c001b7c1:	56                   	push   esi
c001b7c2:	89 c7                	mov    edi,eax
c001b7c4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b7c8:	c1 e6 10             	shl    esi,0x10
c001b7cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7cf:	83 e7 1f             	and    edi,0x1f
c001b7d2:	51                   	push   ecx
c001b7d3:	47                   	inc    edi
c001b7d4:	c1 e8 05             	shr    eax,0x5
c001b7d7:	31 d2                	xor    edx,edx
c001b7d9:	f7 f3                	div    ebx
c001b7db:	31 db                	xor    ebx,ebx
c001b7dd:	52                   	push   edx
c001b7de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b7e2:	57                   	push   edi
c001b7e3:	68 cd c6 02 c0       	push   0xc002c6cd
c001b7e8:	e8 de 76 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001b7ed:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7f1:	89 f8                	mov    eax,edi
c001b7f3:	31 c9                	xor    ecx,ecx
c001b7f5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b7f9:	88 c1                	mov    cl,al
c001b7fb:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b801:	88 d5                	mov    ch,dl
c001b803:	c1 e0 10             	shl    eax,0x10
c001b806:	0f b7 d1             	movzx  edx,cx
c001b809:	09 c2                	or     edx,eax
c001b80b:	89 d8                	mov    eax,ebx
c001b80d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b812:	09 f0                	or     eax,esi
c001b814:	89 c3                	mov    ebx,eax
c001b816:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b81a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b81e:	83 c4 18             	add    esp,0x18
c001b821:	53                   	push   ebx
c001b822:	52                   	push   edx
c001b823:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b827:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b82b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b82f:	e8 89 86 ff ff       	call   c0013ebd <datetimeToSeconds(datetime_t)>
c001b834:	83 c4 0c             	add    esp,0xc
c001b837:	52                   	push   edx
c001b838:	50                   	push   eax
c001b839:	56                   	push   esi
c001b83a:	e8 05 88 ff ff       	call   c0014044 <secondsToDatetime(unsigned long long)>
c001b83f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b843:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b847:	51                   	push   ecx
c001b848:	89 d6                	mov    esi,edx
c001b84a:	51                   	push   ecx
c001b84b:	c1 ee 10             	shr    esi,0x10
c001b84e:	89 f3                	mov    ebx,esi
c001b850:	0f b6 f3             	movzx  esi,bl
c001b853:	56                   	push   esi
c001b854:	0f b6 f6             	movzx  esi,dh
c001b857:	0f b6 d2             	movzx  edx,dl
c001b85a:	56                   	push   esi
c001b85b:	52                   	push   edx
c001b85c:	89 c2                	mov    edx,eax
c001b85e:	c1 ea 10             	shr    edx,0x10
c001b861:	52                   	push   edx
c001b862:	0f b6 d4             	movzx  edx,ah
c001b865:	0f b6 c0             	movzx  eax,al
c001b868:	52                   	push   edx
c001b869:	50                   	push   eax
c001b86a:	68 e9 c6 02 c0       	push   0xc002c6e9
c001b86f:	e8 57 76 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001b874:	83 c4 2c             	add    esp,0x2c
c001b877:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001b87c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b880:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b884:	53                   	push   ebx
c001b885:	51                   	push   ecx
c001b886:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b88c:	e8 53 87 ff ff       	call   c0013fe4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b891:	83 f0 01             	xor    eax,0x1
c001b894:	31 d2                	xor    edx,edx
c001b896:	0f b6 c0             	movzx  eax,al
c001b899:	83 c4 3c             	add    esp,0x3c
c001b89c:	5b                   	pop    ebx
c001b89d:	5e                   	pop    esi
c001b89e:	5f                   	pop    edi
c001b89f:	5d                   	pop    ebp
c001b8a0:	c3                   	ret    

c001b8a1 <Sys::timezone(regs*)>:
c001b8a1:	53                   	push   ebx
c001b8a2:	83 ec 08             	sub    esp,0x8
c001b8a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8a9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b8ad:	75 17                	jne    c001b8c6 <Sys::timezone(regs*)+0x25>
c001b8af:	83 ec 0c             	sub    esp,0xc
c001b8b2:	68 05 c7 02 c0       	push   0xc002c705
c001b8b7:	e8 0f 76 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001b8bc:	83 c8 ff             	or     eax,0xffffffff
c001b8bf:	83 c4 10             	add    esp,0x10
c001b8c2:	89 c2                	mov    edx,eax
c001b8c4:	eb 20                	jmp    c001b8e6 <Sys::timezone(regs*)+0x45>
c001b8c6:	83 ec 0c             	sub    esp,0xc
c001b8c9:	68 3d c7 02 c0       	push   0xc002c73d
c001b8ce:	e8 f8 75 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001b8d3:	58                   	pop    eax
c001b8d4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b8d7:	e8 6a 84 ff ff       	call   c0013d46 <User::loadClockSettings(int)>
c001b8dc:	83 c4 10             	add    esp,0x10
c001b8df:	b8 01 00 00 00       	mov    eax,0x1
c001b8e4:	31 d2                	xor    edx,edx
c001b8e6:	83 c4 08             	add    esp,0x8
c001b8e9:	5b                   	pop    ebx
c001b8ea:	c3                   	ret    

c001b8eb <Sys::write(regs*)>:
c001b8eb:	57                   	push   edi
c001b8ec:	56                   	push   esi
c001b8ed:	53                   	push   ebx
c001b8ee:	83 ec 10             	sub    esp,0x10
c001b8f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8f8:	83 f8 02             	cmp    eax,0x2
c001b8fb:	77 10                	ja     c001b90d <Sys::write(regs*)+0x22>
c001b8fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b902:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b905:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b90b:	eb 0e                	jmp    c001b91b <Sys::write(regs*)+0x30>
c001b90d:	83 ec 0c             	sub    esp,0xc
c001b910:	50                   	push   eax
c001b911:	e8 59 60 ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001b916:	83 c4 10             	add    esp,0x10
c001b919:	89 c1                	mov    ecx,eax
c001b91b:	83 c8 ff             	or     eax,0xffffffff
c001b91e:	85 c9                	test   ecx,ecx
c001b920:	89 c2                	mov    edx,eax
c001b922:	74 28                	je     c001b94c <Sys::write(regs*)+0x61>
c001b924:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b92c:	31 ff                	xor    edi,edi
c001b92e:	83 ec 0c             	sub    esp,0xc
c001b931:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b933:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b937:	52                   	push   edx
c001b938:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b93b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b93e:	57                   	push   edi
c001b93f:	56                   	push   esi
c001b940:	51                   	push   ecx
c001b941:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b948:	83 c4 20             	add    esp,0x20
c001b94b:	99                   	cdq    
c001b94c:	83 c4 10             	add    esp,0x10
c001b94f:	5b                   	pop    ebx
c001b950:	5e                   	pop    esi
c001b951:	5f                   	pop    edi
c001b952:	c3                   	ret    

c001b953 <Sys::wsbe(regs*)>:
c001b953:	57                   	push   edi
c001b954:	b9 0b 00 00 00       	mov    ecx,0xb
c001b959:	56                   	push   esi
c001b95a:	be 7c c7 02 c0       	mov    esi,0xc002c77c
c001b95f:	53                   	push   ebx
c001b960:	83 ec 30             	sub    esp,0x30
c001b963:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b967:	fc                   	cld    
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b96d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b971:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b976:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b979:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b97f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b981:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b984:	57                   	push   edi
c001b985:	e8 12 4e fe ff       	call   c000079c <strlen>
c001b98a:	5a                   	pop    edx
c001b98b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b98f:	52                   	push   edx
c001b990:	31 d2                	xor    edx,edx
c001b992:	57                   	push   edi
c001b993:	52                   	push   edx
c001b994:	50                   	push   eax
c001b995:	56                   	push   esi
c001b996:	ff d3                	call   ebx
c001b998:	83 c4 14             	add    esp,0x14
c001b99b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b99f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9a2:	e8 0a 34 00 00       	call   c001edb1 <terminateTask(int)>
c001b9a7:	83 c4 40             	add    esp,0x40
c001b9aa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b9af:	5b                   	pop    ebx
c001b9b0:	31 d2                	xor    edx,edx
c001b9b2:	5e                   	pop    esi
c001b9b3:	5f                   	pop    edi
c001b9b4:	c3                   	ret    

c001b9b5 <Sys::yield(regs*)>:
c001b9b5:	57                   	push   edi
c001b9b6:	56                   	push   esi
c001b9b7:	53                   	push   ebx
c001b9b8:	fa                   	cli    
c001b9b9:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001b9bf:	e8 ba 2a 00 00       	call   c001e47e <schedule()>
c001b9c4:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001b9c9:	48                   	dec    eax
c001b9ca:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001b9cf:	75 01                	jne    c001b9d2 <Sys::yield(regs*)+0x1d>
c001b9d1:	fb                   	sti    
c001b9d2:	8b 35 b0 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4b0
c001b9d8:	8b 3d b4 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4b4
c001b9de:	89 f0                	mov    eax,esi
c001b9e0:	89 fb                	mov    ebx,edi
c001b9e2:	89 f1                	mov    ecx,esi
c001b9e4:	c1 e0 07             	shl    eax,0x7
c001b9e7:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b9eb:	25 80 30 0f 00       	and    eax,0xf3080
c001b9f0:	c1 eb 17             	shr    ebx,0x17
c001b9f3:	31 c8                	xor    eax,ecx
c001b9f5:	89 da                	mov    edx,ebx
c001b9f7:	5b                   	pop    ebx
c001b9f8:	5e                   	pop    esi
c001b9f9:	5f                   	pop    edi
c001b9fa:	c3                   	ret    

c001b9fb <sysCallSeekDir(regs*)>:
c001b9fb:	31 c0                	xor    eax,eax
c001b9fd:	31 d2                	xor    edx,edx
c001b9ff:	c3                   	ret    

c001ba00 <sysCallTellDir(regs*)>:
c001ba00:	31 c0                	xor    eax,eax
c001ba02:	31 d2                	xor    edx,edx
c001ba04:	c3                   	ret    

c001ba05 <sysCallVerify(regs*)>:
c001ba05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba09:	31 d2                	xor    edx,edx
c001ba0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba0e:	c3                   	ret    

c001ba0f <sysFormatDisk(regs*)>:
c001ba0f:	56                   	push   esi
c001ba10:	53                   	push   ebx
c001ba11:	53                   	push   ebx
c001ba12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba16:	8b 1d b4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb4
c001ba1c:	eb 25                	jmp    c001ba43 <sysFormatDisk(regs*)+0x34>
c001ba1e:	83 ec 0c             	sub    esp,0xc
c001ba21:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba24:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba26:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba29:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba2c:	50                   	push   eax
c001ba2d:	ff 34 85 40 f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0bc0]
c001ba34:	53                   	push   ebx
c001ba35:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001ba38:	83 c4 20             	add    esp,0x20
c001ba3b:	83 f8 08             	cmp    eax,0x8
c001ba3e:	75 12                	jne    c001ba52 <sysFormatDisk(regs*)+0x43>
c001ba40:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001ba43:	85 db                	test   ebx,ebx
c001ba45:	75 d7                	jne    c001ba1e <sysFormatDisk(regs*)+0xf>
c001ba47:	59                   	pop    ecx
c001ba48:	b8 03 00 00 00       	mov    eax,0x3
c001ba4d:	31 d2                	xor    edx,edx
c001ba4f:	5b                   	pop    ebx
c001ba50:	5e                   	pop    esi
c001ba51:	c3                   	ret    
c001ba52:	85 c0                	test   eax,eax
c001ba54:	74 1b                	je     c001ba71 <sysFormatDisk(regs*)+0x62>
c001ba56:	83 f8 09             	cmp    eax,0x9
c001ba59:	74 0b                	je     c001ba66 <sysFormatDisk(regs*)+0x57>
c001ba5b:	59                   	pop    ecx
c001ba5c:	b8 02 00 00 00       	mov    eax,0x2
c001ba61:	31 d2                	xor    edx,edx
c001ba63:	5b                   	pop    ebx
c001ba64:	5e                   	pop    esi
c001ba65:	c3                   	ret    
c001ba66:	59                   	pop    ecx
c001ba67:	b8 01 00 00 00       	mov    eax,0x1
c001ba6c:	31 d2                	xor    edx,edx
c001ba6e:	5b                   	pop    ebx
c001ba6f:	5e                   	pop    esi
c001ba70:	c3                   	ret    
c001ba71:	59                   	pop    ecx
c001ba72:	31 c0                	xor    eax,eax
c001ba74:	31 d2                	xor    edx,edx
c001ba76:	5b                   	pop    ebx
c001ba77:	5e                   	pop    esi
c001ba78:	c3                   	ret    

c001ba79 <sysSetDiskVolumeLabel(regs*)>:
c001ba79:	56                   	push   esi
c001ba7a:	53                   	push   ebx
c001ba7b:	53                   	push   ebx
c001ba7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba80:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ba83:	83 f8 19             	cmp    eax,0x19
c001ba86:	77 29                	ja     c001bab1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba88:	8b 0c 85 40 f4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0bc0]
c001ba8f:	85 c9                	test   ecx,ecx
c001ba91:	74 1e                	je     c001bab1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba93:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ba96:	85 d2                	test   edx,edx
c001ba98:	74 17                	je     c001bab1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba9a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001baa0:	8b 33                	mov    esi,DWORD PTR [ebx]
c001baa2:	52                   	push   edx
c001baa3:	50                   	push   eax
c001baa4:	51                   	push   ecx
c001baa5:	53                   	push   ebx
c001baa6:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001baa9:	83 c4 10             	add    esp,0x10
c001baac:	99                   	cdq    
c001baad:	59                   	pop    ecx
c001baae:	5b                   	pop    ebx
c001baaf:	5e                   	pop    esi
c001bab0:	c3                   	ret    
c001bab1:	59                   	pop    ecx
c001bab2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bab7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001babc:	5b                   	pop    ebx
c001babd:	5e                   	pop    esi
c001babe:	c3                   	ret    

c001babf <sysGetDiskVolumeLabel(regs*)>:
c001babf:	57                   	push   edi
c001bac0:	56                   	push   esi
c001bac1:	53                   	push   ebx
c001bac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bac9:	83 fa 19             	cmp    edx,0x19
c001bacc:	77 34                	ja     c001bb02 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bace:	8b 0c 95 40 f4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0bc0]
c001bad5:	85 c9                	test   ecx,ecx
c001bad7:	74 29                	je     c001bb02 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bad9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001badc:	85 db                	test   ebx,ebx
c001bade:	74 22                	je     c001bb02 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bae0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bae3:	85 c0                	test   eax,eax
c001bae5:	74 1b                	je     c001bb02 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bae7:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001baed:	83 ec 0c             	sub    esp,0xc
c001baf0:	8b 3e                	mov    edi,DWORD PTR [esi]
c001baf2:	50                   	push   eax
c001baf3:	53                   	push   ebx
c001baf4:	52                   	push   edx
c001baf5:	51                   	push   ecx
c001baf6:	56                   	push   esi
c001baf7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bafa:	83 c4 20             	add    esp,0x20
c001bafd:	99                   	cdq    
c001bafe:	5b                   	pop    ebx
c001baff:	5e                   	pop    esi
c001bb00:	5f                   	pop    edi
c001bb01:	c3                   	ret    
c001bb02:	5b                   	pop    ebx
c001bb03:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bb08:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb0d:	5e                   	pop    esi
c001bb0e:	5f                   	pop    edi
c001bb0f:	c3                   	ret    

c001bb10 <sysShutdown(regs*)>:
c001bb10:	83 ec 0c             	sub    esp,0xc
c001bb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb17:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb1a:	85 c0                	test   eax,eax
c001bb1c:	74 18                	je     c001bb36 <sysShutdown(regs*)+0x26>
c001bb1e:	83 f8 01             	cmp    eax,0x1
c001bb21:	74 38                	je     c001bb5b <sysShutdown(regs*)+0x4b>
c001bb23:	83 f8 02             	cmp    eax,0x2
c001bb26:	74 24                	je     c001bb4c <sysShutdown(regs*)+0x3c>
c001bb28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb32:	83 c4 0c             	add    esp,0xc
c001bb35:	c3                   	ret    
c001bb36:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001bb3b:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb3d:	6a 00                	push   0x0
c001bb3f:	6a 00                	push   0x0
c001bb41:	6a 00                	push   0x0
c001bb43:	50                   	push   eax
c001bb44:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bb47:	83 c4 10             	add    esp,0x10
c001bb4a:	eb dc                	jmp    c001bb28 <sysShutdown(regs*)+0x18>
c001bb4c:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001bb51:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb53:	6a 00                	push   0x0
c001bb55:	6a 00                	push   0x0
c001bb57:	6a 01                	push   0x1
c001bb59:	eb e8                	jmp    c001bb43 <sysShutdown(regs*)+0x33>
c001bb5b:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c001bb60:	85 c0                	test   eax,eax
c001bb62:	74 02                	je     c001bb66 <sysShutdown(regs*)+0x56>
c001bb64:	ff d0                	call   eax
c001bb66:	31 c0                	xor    eax,eax
c001bb68:	31 d2                	xor    edx,edx
c001bb6a:	83 c4 0c             	add    esp,0xc
c001bb6d:	c3                   	ret    

c001bb6e <sysCallRealpath(regs*)>:
c001bb6e:	83 ec 0c             	sub    esp,0xc
c001bb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb75:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bb78:	85 d2                	test   edx,edx
c001bb7a:	74 07                	je     c001bb83 <sysCallRealpath(regs*)+0x15>
c001bb7c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb7f:	85 c0                	test   eax,eax
c001bb81:	75 0b                	jne    c001bb8e <sysCallRealpath(regs*)+0x20>
c001bb83:	b8 01 00 00 00       	mov    eax,0x1
c001bb88:	31 d2                	xor    edx,edx
c001bb8a:	83 c4 0c             	add    esp,0xc
c001bb8d:	c3                   	ret    
c001bb8e:	51                   	push   ecx
c001bb8f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bb95:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bb98:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bb9e:	51                   	push   ecx
c001bb9f:	52                   	push   edx
c001bba0:	50                   	push   eax
c001bba1:	e8 da 76 ff ff       	call   c0013280 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bba6:	83 c4 10             	add    esp,0x10
c001bba9:	31 c0                	xor    eax,eax
c001bbab:	31 d2                	xor    edx,edx
c001bbad:	83 c4 0c             	add    esp,0xc
c001bbb0:	c3                   	ret    

c001bbb1 <sysCallGetArgc(regs*)>:
c001bbb1:	83 ec 14             	sub    esp,0x14
c001bbb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbbc:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bbc2:	68 a8 c7 02 c0       	push   0xc002c7a8
c001bbc7:	e8 ff 72 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001bbcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbd4:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bbda:	83 c4 1c             	add    esp,0x1c
c001bbdd:	99                   	cdq    
c001bbde:	c3                   	ret    

c001bbdf <sysCallReadDir(regs*)>:
c001bbdf:	53                   	push   ebx
c001bbe0:	83 ec 18             	sub    esp,0x18
c001bbe3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbe7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbea:	83 f8 02             	cmp    eax,0x2
c001bbed:	76 53                	jbe    c001bc42 <sysCallReadDir(regs*)+0x63>
c001bbef:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bbf2:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bbf8:	77 4f                	ja     c001bc49 <sysCallReadDir(regs*)+0x6a>
c001bbfa:	83 ec 0c             	sub    esp,0xc
c001bbfd:	50                   	push   eax
c001bbfe:	e8 6c 5d ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001bc03:	83 c4 10             	add    esp,0x10
c001bc06:	85 c0                	test   eax,eax
c001bc08:	74 50                	je     c001bc5a <sysCallReadDir(regs*)+0x7b>
c001bc0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc12:	83 ec 0c             	sub    esp,0xc
c001bc15:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc17:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bc1b:	51                   	push   ecx
c001bc1c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc1f:	6a 00                	push   0x0
c001bc21:	68 10 01 00 00       	push   0x110
c001bc26:	50                   	push   eax
c001bc27:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc2a:	83 c4 20             	add    esp,0x20
c001bc2d:	85 c0                	test   eax,eax
c001bc2f:	74 38                	je     c001bc69 <sysCallReadDir(regs*)+0x8a>
c001bc31:	83 f8 07             	cmp    eax,0x7
c001bc34:	74 0c                	je     c001bc42 <sysCallReadDir(regs*)+0x63>
c001bc36:	b8 02 00 00 00       	mov    eax,0x2
c001bc3b:	31 d2                	xor    edx,edx
c001bc3d:	83 c4 18             	add    esp,0x18
c001bc40:	5b                   	pop    ebx
c001bc41:	c3                   	ret    
c001bc42:	b8 01 00 00 00       	mov    eax,0x1
c001bc47:	eb f2                	jmp    c001bc3b <sysCallReadDir(regs*)+0x5c>
c001bc49:	83 ec 08             	sub    esp,0x8
c001bc4c:	52                   	push   edx
c001bc4d:	68 cc c8 02 c0       	push   0xc002c8cc
c001bc52:	e8 74 72 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001bc57:	83 c4 10             	add    esp,0x10
c001bc5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc5f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc64:	83 c4 18             	add    esp,0x18
c001bc67:	5b                   	pop    ebx
c001bc68:	c3                   	ret    
c001bc69:	31 c0                	xor    eax,eax
c001bc6b:	eb ce                	jmp    c001bc3b <sysCallReadDir(regs*)+0x5c>

c001bc6d <sysCallIsATTY(regs*)>:
c001bc6d:	83 ec 0c             	sub    esp,0xc
c001bc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc74:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc77:	83 f8 02             	cmp    eax,0x2
c001bc7a:	76 07                	jbe    c001bc83 <sysCallIsATTY(regs*)+0x16>
c001bc7c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc81:	75 26                	jne    c001bca9 <sysCallIsATTY(regs*)+0x3c>
c001bc83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc88:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc8b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bc91:	85 c0                	test   eax,eax
c001bc93:	74 24                	je     c001bcb9 <sysCallIsATTY(regs*)+0x4c>
c001bc95:	83 ec 0c             	sub    esp,0xc
c001bc98:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc9a:	50                   	push   eax
c001bc9b:	ff 12                	call   DWORD PTR [edx]
c001bc9d:	31 d2                	xor    edx,edx
c001bc9f:	0f b6 c0             	movzx  eax,al
c001bca2:	83 c4 10             	add    esp,0x10
c001bca5:	83 c4 0c             	add    esp,0xc
c001bca8:	c3                   	ret    
c001bca9:	83 ec 0c             	sub    esp,0xc
c001bcac:	50                   	push   eax
c001bcad:	e8 bd 5c ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001bcb2:	83 c4 10             	add    esp,0x10
c001bcb5:	85 c0                	test   eax,eax
c001bcb7:	75 dc                	jne    c001bc95 <sysCallIsATTY(regs*)+0x28>
c001bcb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcbe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcc3:	83 c4 0c             	add    esp,0xc
c001bcc6:	c3                   	ret    

c001bcc7 <sysCallSeek(regs*)>:
c001bcc7:	53                   	push   ebx
c001bcc8:	83 ec 08             	sub    esp,0x8
c001bccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bccf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcd2:	83 f8 02             	cmp    eax,0x2
c001bcd5:	76 4a                	jbe    c001bd21 <sysCallSeek(regs*)+0x5a>
c001bcd7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcdc:	77 32                	ja     c001bd10 <sysCallSeek(regs*)+0x49>
c001bcde:	83 ec 0c             	sub    esp,0xc
c001bce1:	50                   	push   eax
c001bce2:	e8 88 5c ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001bce7:	83 c4 0c             	add    esp,0xc
c001bcea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bced:	31 db                	xor    ebx,ebx
c001bcef:	53                   	push   ebx
c001bcf0:	51                   	push   ecx
c001bcf1:	50                   	push   eax
c001bcf2:	e8 55 78 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001bcf7:	83 c4 10             	add    esp,0x10
c001bcfa:	85 c0                	test   eax,eax
c001bcfc:	0f 95 c0             	setne  al
c001bcff:	31 d2                	xor    edx,edx
c001bd01:	0f b6 c0             	movzx  eax,al
c001bd04:	f7 d8                	neg    eax
c001bd06:	83 d2 00             	adc    edx,0x0
c001bd09:	83 c4 08             	add    esp,0x8
c001bd0c:	f7 da                	neg    edx
c001bd0e:	5b                   	pop    ebx
c001bd0f:	c3                   	ret    
c001bd10:	83 ec 08             	sub    esp,0x8
c001bd13:	50                   	push   eax
c001bd14:	68 b3 c7 02 c0       	push   0xc002c7b3
c001bd19:	e8 ad 71 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd26:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2b:	83 c4 08             	add    esp,0x8
c001bd2e:	5b                   	pop    ebx
c001bd2f:	c3                   	ret    

c001bd30 <sysCallTell(regs*)>:
c001bd30:	53                   	push   ebx
c001bd31:	83 ec 08             	sub    esp,0x8
c001bd34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd38:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd3b:	83 f8 02             	cmp    eax,0x2
c001bd3e:	76 5e                	jbe    c001bd9e <sysCallTell(regs*)+0x6e>
c001bd40:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd45:	77 2d                	ja     c001bd74 <sysCallTell(regs*)+0x44>
c001bd47:	83 ec 0c             	sub    esp,0xc
c001bd4a:	50                   	push   eax
c001bd4b:	e8 1f 5c ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001bd50:	5a                   	pop    edx
c001bd51:	59                   	pop    ecx
c001bd52:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bd55:	50                   	push   eax
c001bd56:	e8 47 78 ff ff       	call   c00135a2 <File::tell(unsigned long long*)>
c001bd5b:	83 c4 10             	add    esp,0x10
c001bd5e:	85 c0                	test   eax,eax
c001bd60:	0f 95 c0             	setne  al
c001bd63:	31 d2                	xor    edx,edx
c001bd65:	0f b6 c0             	movzx  eax,al
c001bd68:	f7 d8                	neg    eax
c001bd6a:	83 d2 00             	adc    edx,0x0
c001bd6d:	83 c4 08             	add    esp,0x8
c001bd70:	f7 da                	neg    edx
c001bd72:	5b                   	pop    ebx
c001bd73:	c3                   	ret    
c001bd74:	83 ec 08             	sub    esp,0x8
c001bd77:	50                   	push   eax
c001bd78:	68 cd c7 02 c0       	push   0xc002c7cd
c001bd7d:	e8 49 71 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001bd82:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd95:	31 d2                	xor    edx,edx
c001bd97:	31 c0                	xor    eax,eax
c001bd99:	83 c4 08             	add    esp,0x8
c001bd9c:	5b                   	pop    ebx
c001bd9d:	c3                   	ret    
c001bd9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bda3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bda8:	83 c4 08             	add    esp,0x8
c001bdab:	5b                   	pop    ebx
c001bdac:	c3                   	ret    

c001bdad <sysCallSize(regs*)>:
c001bdad:	53                   	push   ebx
c001bdae:	83 ec 18             	sub    esp,0x18
c001bdb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdb5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bdb8:	83 f8 02             	cmp    eax,0x2
c001bdbb:	76 64                	jbe    c001be21 <sysCallSize(regs*)+0x74>
c001bdbd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdc2:	77 33                	ja     c001bdf7 <sysCallSize(regs*)+0x4a>
c001bdc4:	83 ec 0c             	sub    esp,0xc
c001bdc7:	50                   	push   eax
c001bdc8:	e8 a2 5b ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001bdcd:	83 c4 0c             	add    esp,0xc
c001bdd0:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bdd4:	52                   	push   edx
c001bdd5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bdd8:	50                   	push   eax
c001bdd9:	e8 5c 79 ff ff       	call   c001373a <File::stat(unsigned long long*, bool*)>
c001bdde:	83 c4 10             	add    esp,0x10
c001bde1:	85 c0                	test   eax,eax
c001bde3:	0f 95 c0             	setne  al
c001bde6:	31 d2                	xor    edx,edx
c001bde8:	0f b6 c0             	movzx  eax,al
c001bdeb:	f7 d8                	neg    eax
c001bded:	83 d2 00             	adc    edx,0x0
c001bdf0:	83 c4 18             	add    esp,0x18
c001bdf3:	f7 da                	neg    edx
c001bdf5:	5b                   	pop    ebx
c001bdf6:	c3                   	ret    
c001bdf7:	83 ec 08             	sub    esp,0x8
c001bdfa:	50                   	push   eax
c001bdfb:	68 e7 c7 02 c0       	push   0xc002c7e7
c001be00:	e8 c6 70 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001be05:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be08:	83 c4 10             	add    esp,0x10
c001be0b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be18:	31 d2                	xor    edx,edx
c001be1a:	31 c0                	xor    eax,eax
c001be1c:	83 c4 18             	add    esp,0x18
c001be1f:	5b                   	pop    ebx
c001be20:	c3                   	ret    
c001be21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be26:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be2b:	83 c4 18             	add    esp,0x18
c001be2e:	5b                   	pop    ebx
c001be2f:	c3                   	ret    

c001be30 <sysCallSizeFromFilename(regs*)>:
c001be30:	57                   	push   edi
c001be31:	56                   	push   esi
c001be32:	53                   	push   ebx
c001be33:	83 ec 20             	sub    esp,0x20
c001be36:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be3a:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001be3d:	83 fb 02             	cmp    ebx,0x2
c001be40:	0f 86 99 00 00 00    	jbe    c001bedf <sysCallSizeFromFilename(regs*)+0xaf>
c001be46:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001be4c:	77 65                	ja     c001beb3 <sysCallSizeFromFilename(regs*)+0x83>
c001be4e:	83 ec 0c             	sub    esp,0xc
c001be51:	68 14 01 00 00       	push   0x114
c001be56:	e8 b9 3a ff ff       	call   c000f914 <malloc>
c001be5b:	83 c4 0c             	add    esp,0xc
c001be5e:	89 c6                	mov    esi,eax
c001be60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be65:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be68:	53                   	push   ebx
c001be69:	56                   	push   esi
c001be6a:	e8 bb 75 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001be6f:	83 c4 0c             	add    esp,0xc
c001be72:	8d 44 24 23          	lea    eax,[esp+0x23]
c001be76:	50                   	push   eax
c001be77:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001be7a:	56                   	push   esi
c001be7b:	e8 ba 78 ff ff       	call   c001373a <File::stat(unsigned long long*, bool*)>
c001be80:	83 c4 10             	add    esp,0x10
c001be83:	85 f6                	test   esi,esi
c001be85:	74 14                	je     c001be9b <sysCallSizeFromFilename(regs*)+0x6b>
c001be87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be8b:	8b 16                	mov    edx,DWORD PTR [esi]
c001be8d:	83 ec 0c             	sub    esp,0xc
c001be90:	56                   	push   esi
c001be91:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be94:	83 c4 10             	add    esp,0x10
c001be97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be9b:	85 c0                	test   eax,eax
c001be9d:	0f 95 c0             	setne  al
c001bea0:	31 d2                	xor    edx,edx
c001bea2:	0f b6 c0             	movzx  eax,al
c001bea5:	f7 d8                	neg    eax
c001bea7:	83 d2 00             	adc    edx,0x0
c001beaa:	83 c4 20             	add    esp,0x20
c001bead:	f7 da                	neg    edx
c001beaf:	5b                   	pop    ebx
c001beb0:	5e                   	pop    esi
c001beb1:	5f                   	pop    edi
c001beb2:	c3                   	ret    
c001beb3:	83 ec 08             	sub    esp,0x8
c001beb6:	53                   	push   ebx
c001beb7:	68 e7 c7 02 c0       	push   0xc002c7e7
c001bebc:	e8 0a 70 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001bec1:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bec4:	83 c4 10             	add    esp,0x10
c001bec7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001becd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bed4:	31 d2                	xor    edx,edx
c001bed6:	83 c4 20             	add    esp,0x20
c001bed9:	31 c0                	xor    eax,eax
c001bedb:	5b                   	pop    ebx
c001bedc:	5e                   	pop    esi
c001bedd:	5f                   	pop    edi
c001bede:	c3                   	ret    
c001bedf:	83 c4 20             	add    esp,0x20
c001bee2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bee7:	5b                   	pop    ebx
c001bee8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001beed:	5e                   	pop    esi
c001beee:	5f                   	pop    edi
c001beef:	c3                   	ret    

c001bef0 <sysCallClose(regs*)>:
c001bef0:	53                   	push   ebx
c001bef1:	83 ec 08             	sub    esp,0x8
c001bef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001befb:	83 f8 02             	cmp    eax,0x2
c001befe:	76 50                	jbe    c001bf50 <sysCallClose(regs*)+0x60>
c001bf00:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf05:	74 58                	je     c001bf5f <sysCallClose(regs*)+0x6f>
c001bf07:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf0c:	74 60                	je     c001bf6e <sysCallClose(regs*)+0x7e>
c001bf0e:	77 2f                	ja     c001bf3f <sysCallClose(regs*)+0x4f>
c001bf10:	83 ec 0c             	sub    esp,0xc
c001bf13:	50                   	push   eax
c001bf14:	e8 56 5a ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001bf19:	89 c3                	mov    ebx,eax
c001bf1b:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf1e:	e8 c9 75 ff ff       	call   c00134ec <File::close()>
c001bf23:	83 c4 10             	add    esp,0x10
c001bf26:	85 db                	test   ebx,ebx
c001bf28:	74 0c                	je     c001bf36 <sysCallClose(regs*)+0x46>
c001bf2a:	83 ec 0c             	sub    esp,0xc
c001bf2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf2f:	53                   	push   ebx
c001bf30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf33:	83 c4 10             	add    esp,0x10
c001bf36:	31 c0                	xor    eax,eax
c001bf38:	31 d2                	xor    edx,edx
c001bf3a:	83 c4 08             	add    esp,0x8
c001bf3d:	5b                   	pop    ebx
c001bf3e:	c3                   	ret    
c001bf3f:	83 ec 08             	sub    esp,0x8
c001bf42:	50                   	push   eax
c001bf43:	68 f0 c8 02 c0       	push   0xc002c8f0
c001bf48:	e8 7e 6f ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf55:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf5a:	83 c4 08             	add    esp,0x8
c001bf5d:	5b                   	pop    ebx
c001bf5e:	c3                   	ret    
c001bf5f:	83 ec 0c             	sub    esp,0xc
c001bf62:	68 02 c8 02 c0       	push   0xc002c802
c001bf67:	e8 5f 6f ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001bf6c:	eb c5                	jmp    c001bf33 <sysCallClose(regs*)+0x43>
c001bf6e:	83 ec 0c             	sub    esp,0xc
c001bf71:	68 10 c8 02 c0       	push   0xc002c810
c001bf76:	eb ef                	jmp    c001bf67 <sysCallClose(regs*)+0x77>

c001bf78 <sysCallOpenDir(regs*)>:
c001bf78:	56                   	push   esi
c001bf79:	53                   	push   ebx
c001bf7a:	53                   	push   ebx
c001bf7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf7f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bf82:	85 f6                	test   esi,esi
c001bf84:	74 59                	je     c001bfdf <sysCallOpenDir(regs*)+0x67>
c001bf86:	83 ec 0c             	sub    esp,0xc
c001bf89:	68 14 01 00 00       	push   0x114
c001bf8e:	e8 81 39 ff ff       	call   c000f914 <malloc>
c001bf93:	83 c4 0c             	add    esp,0xc
c001bf96:	89 c6                	mov    esi,eax
c001bf98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf9d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfa0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfa3:	56                   	push   esi
c001bfa4:	e8 2d 79 ff ff       	call   c00138d6 <Directory::Directory(char const*, Process*)>
c001bfa9:	83 c4 10             	add    esp,0x10
c001bfac:	85 f6                	test   esi,esi
c001bfae:	74 2f                	je     c001bfdf <sysCallOpenDir(regs*)+0x67>
c001bfb0:	83 ec 0c             	sub    esp,0xc
c001bfb3:	56                   	push   esi
c001bfb4:	e8 81 79 ff ff       	call   c001393a <Directory::open()>
c001bfb9:	83 c4 10             	add    esp,0x10
c001bfbc:	85 c0                	test   eax,eax
c001bfbe:	75 1f                	jne    c001bfdf <sysCallOpenDir(regs*)+0x67>
c001bfc0:	83 ec 0c             	sub    esp,0xc
c001bfc3:	56                   	push   esi
c001bfc4:	e8 b1 56 ff ff       	call   c001167a <UnixFile::getFileDescriptor()>
c001bfc9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bfcc:	83 c4 10             	add    esp,0x10
c001bfcf:	89 02                	mov    DWORD PTR [edx],eax
c001bfd1:	c1 f8 1f             	sar    eax,0x1f
c001bfd4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bfd7:	31 c0                	xor    eax,eax
c001bfd9:	59                   	pop    ecx
c001bfda:	31 d2                	xor    edx,edx
c001bfdc:	5b                   	pop    ebx
c001bfdd:	5e                   	pop    esi
c001bfde:	c3                   	ret    
c001bfdf:	59                   	pop    ecx
c001bfe0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfe5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfea:	5b                   	pop    ebx
c001bfeb:	5e                   	pop    esi
c001bfec:	c3                   	ret    

c001bfed <sysCallCloseDir(regs*)>:
c001bfed:	53                   	push   ebx
c001bfee:	83 ec 08             	sub    esp,0x8
c001bff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bff8:	83 f8 02             	cmp    eax,0x2
c001bffb:	76 47                	jbe    c001c044 <sysCallCloseDir(regs*)+0x57>
c001bffd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c002:	77 2f                	ja     c001c033 <sysCallCloseDir(regs*)+0x46>
c001c004:	83 ec 0c             	sub    esp,0xc
c001c007:	50                   	push   eax
c001c008:	e8 62 59 ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001c00d:	89 c3                	mov    ebx,eax
c001c00f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c012:	e8 7f 79 ff ff       	call   c0013996 <Directory::close()>
c001c017:	83 c4 10             	add    esp,0x10
c001c01a:	85 db                	test   ebx,ebx
c001c01c:	74 0c                	je     c001c02a <sysCallCloseDir(regs*)+0x3d>
c001c01e:	83 ec 0c             	sub    esp,0xc
c001c021:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c023:	53                   	push   ebx
c001c024:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c027:	83 c4 10             	add    esp,0x10
c001c02a:	31 c0                	xor    eax,eax
c001c02c:	31 d2                	xor    edx,edx
c001c02e:	83 c4 08             	add    esp,0x8
c001c031:	5b                   	pop    ebx
c001c032:	c3                   	ret    
c001c033:	83 ec 08             	sub    esp,0x8
c001c036:	50                   	push   eax
c001c037:	68 18 c9 02 c0       	push   0xc002c918
c001c03c:	e8 8a 6e ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c041:	83 c4 10             	add    esp,0x10
c001c044:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c049:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c04e:	83 c4 08             	add    esp,0x8
c001c051:	5b                   	pop    ebx
c001c052:	c3                   	ret    

c001c053 <sysCallMakeDir(regs*)>:
c001c053:	56                   	push   esi
c001c054:	53                   	push   ebx
c001c055:	83 ec 10             	sub    esp,0x10
c001c058:	68 14 01 00 00       	push   0x114
c001c05d:	e8 b2 38 ff ff       	call   c000f914 <malloc>
c001c062:	83 c4 0c             	add    esp,0xc
c001c065:	89 c3                	mov    ebx,eax
c001c067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c06c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c06f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c073:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c076:	53                   	push   ebx
c001c077:	e8 5a 78 ff ff       	call   c00138d6 <Directory::Directory(char const*, Process*)>
c001c07c:	83 c4 10             	add    esp,0x10
c001c07f:	85 db                	test   ebx,ebx
c001c081:	74 32                	je     c001c0b5 <sysCallMakeDir(regs*)+0x62>
c001c083:	83 ec 0c             	sub    esp,0xc
c001c086:	53                   	push   ebx
c001c087:	e8 8e 7a ff ff       	call   c0013b1a <Directory::create()>
c001c08c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c08f:	89 c6                	mov    esi,eax
c001c091:	e8 00 79 ff ff       	call   c0013996 <Directory::close()>
c001c096:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c098:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c09b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c09e:	83 c4 10             	add    esp,0x10
c001c0a1:	31 c0                	xor    eax,eax
c001c0a3:	59                   	pop    ecx
c001c0a4:	85 f6                	test   esi,esi
c001c0a6:	5b                   	pop    ebx
c001c0a7:	0f 95 c0             	setne  al
c001c0aa:	5e                   	pop    esi
c001c0ab:	31 d2                	xor    edx,edx
c001c0ad:	f7 d8                	neg    eax
c001c0af:	83 d2 00             	adc    edx,0x0
c001c0b2:	f7 da                	neg    edx
c001c0b4:	c3                   	ret    
c001c0b5:	59                   	pop    ecx
c001c0b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0c0:	5b                   	pop    ebx
c001c0c1:	5e                   	pop    esi
c001c0c2:	c3                   	ret    

c001c0c3 <sysCallWait(regs*)>:
c001c0c3:	83 ec 10             	sub    esp,0x10
c001c0c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0ca:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c0cd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0d0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c0d3:	e8 d2 25 00 00       	call   c001e6aa <waitTask(int, int*, int)>
c001c0d8:	83 c4 1c             	add    esp,0x1c
c001c0db:	99                   	cdq    
c001c0dc:	c3                   	ret    

c001c0dd <sysCallNotImpl(regs*)>:
c001c0dd:	83 ec 18             	sub    esp,0x18
c001c0e0:	68 1e c8 02 c0       	push   0xc002c81e
c001c0e5:	e8 9d e7 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001c0ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0f4:	83 c4 1c             	add    esp,0x1c
c001c0f7:	c3                   	ret    

c001c0f8 <sysPanic(regs*)>:
c001c0f8:	83 ec 18             	sub    esp,0x18
c001c0fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0ff:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c102:	e8 80 e7 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001c107:	c7 04 24 38 c8 02 c0 	mov    DWORD PTR [esp],0xc002c838
c001c10e:	e8 74 e7 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001c113:	b8 01 00 00 00       	mov    eax,0x1
c001c118:	31 d2                	xor    edx,edx
c001c11a:	83 c4 1c             	add    esp,0x1c
c001c11d:	c3                   	ret    

c001c11e <sysCallRmdir(regs*)>:
c001c11e:	56                   	push   esi
c001c11f:	53                   	push   ebx
c001c120:	83 ec 20             	sub    esp,0x20
c001c123:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c127:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c12a:	68 14 01 00 00       	push   0x114
c001c12f:	e8 e0 37 ff ff       	call   c000f914 <malloc>
c001c134:	83 c4 0c             	add    esp,0xc
c001c137:	89 c3                	mov    ebx,eax
c001c139:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c13e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c141:	56                   	push   esi
c001c142:	53                   	push   ebx
c001c143:	e8 e2 72 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001c148:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c14b:	e8 b6 74 ff ff       	call   c0013606 <File::unlink()>
c001c150:	83 c4 10             	add    esp,0x10
c001c153:	85 db                	test   ebx,ebx
c001c155:	74 14                	je     c001c16b <sysCallRmdir(regs*)+0x4d>
c001c157:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c15b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c15d:	83 ec 0c             	sub    esp,0xc
c001c160:	53                   	push   ebx
c001c161:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c164:	83 c4 10             	add    esp,0x10
c001c167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c16b:	85 c0                	test   eax,eax
c001c16d:	0f 95 c0             	setne  al
c001c170:	31 d2                	xor    edx,edx
c001c172:	0f b6 c0             	movzx  eax,al
c001c175:	f7 d8                	neg    eax
c001c177:	83 d2 00             	adc    edx,0x0
c001c17a:	83 c4 14             	add    esp,0x14
c001c17d:	f7 da                	neg    edx
c001c17f:	5b                   	pop    ebx
c001c180:	5e                   	pop    esi
c001c181:	c3                   	ret    

c001c182 <sysCallUnlink(regs*)>:
c001c182:	56                   	push   esi
c001c183:	53                   	push   ebx
c001c184:	83 ec 20             	sub    esp,0x20
c001c187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c18b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c18e:	68 14 01 00 00       	push   0x114
c001c193:	e8 7c 37 ff ff       	call   c000f914 <malloc>
c001c198:	83 c4 0c             	add    esp,0xc
c001c19b:	89 c3                	mov    ebx,eax
c001c19d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1a5:	56                   	push   esi
c001c1a6:	53                   	push   ebx
c001c1a7:	e8 7e 72 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001c1ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1af:	e8 52 74 ff ff       	call   c0013606 <File::unlink()>
c001c1b4:	83 c4 10             	add    esp,0x10
c001c1b7:	85 db                	test   ebx,ebx
c001c1b9:	74 14                	je     c001c1cf <sysCallUnlink(regs*)+0x4d>
c001c1bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1c1:	83 ec 0c             	sub    esp,0xc
c001c1c4:	53                   	push   ebx
c001c1c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1c8:	83 c4 10             	add    esp,0x10
c001c1cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1cf:	85 c0                	test   eax,eax
c001c1d1:	0f 95 c0             	setne  al
c001c1d4:	31 d2                	xor    edx,edx
c001c1d6:	0f b6 c0             	movzx  eax,al
c001c1d9:	f7 d8                	neg    eax
c001c1db:	83 d2 00             	adc    edx,0x0
c001c1de:	83 c4 14             	add    esp,0x14
c001c1e1:	f7 da                	neg    edx
c001c1e3:	5b                   	pop    ebx
c001c1e4:	5e                   	pop    esi
c001c1e5:	c3                   	ret    

c001c1e6 <sysCallGetArgv(regs*)>:
c001c1e6:	83 ec 0c             	sub    esp,0xc
c001c1e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c1ed:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c1f0:	85 c0                	test   eax,eax
c001c1f2:	78 2b                	js     c001c21f <sysCallGetArgv(regs*)+0x39>
c001c1f4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c1fa:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c1fd:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c203:	7d 1a                	jge    c001c21f <sysCallGetArgv(regs*)+0x39>
c001c205:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c20c:	85 c0                	test   eax,eax
c001c20e:	74 17                	je     c001c227 <sysCallGetArgv(regs*)+0x41>
c001c210:	83 ec 08             	sub    esp,0x8
c001c213:	50                   	push   eax
c001c214:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c217:	e8 20 46 fe ff       	call   c000083c <strcpy>
c001c21c:	83 c4 10             	add    esp,0x10
c001c21f:	31 c0                	xor    eax,eax
c001c221:	31 d2                	xor    edx,edx
c001c223:	83 c4 0c             	add    esp,0xc
c001c226:	c3                   	ret    
c001c227:	b8 01 00 00 00       	mov    eax,0x1
c001c22c:	31 d2                	xor    edx,edx
c001c22e:	83 c4 0c             	add    esp,0xc
c001c231:	c3                   	ret    

c001c232 <sysCallTTYName(regs*)>:
c001c232:	56                   	push   esi
c001c233:	53                   	push   ebx
c001c234:	53                   	push   ebx
c001c235:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c239:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c23c:	85 c0                	test   eax,eax
c001c23e:	74 5f                	je     c001c29f <sysCallTTYName(regs*)+0x6d>
c001c240:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c243:	83 f8 02             	cmp    eax,0x2
c001c246:	77 3e                	ja     c001c286 <sysCallTTYName(regs*)+0x54>
c001c248:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c24d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c250:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c256:	85 db                	test   ebx,ebx
c001c258:	74 45                	je     c001c29f <sysCallTTYName(regs*)+0x6d>
c001c25a:	83 ec 0c             	sub    esp,0xc
c001c25d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c25f:	53                   	push   ebx
c001c260:	ff 10                	call   DWORD PTR [eax]
c001c262:	83 c4 10             	add    esp,0x10
c001c265:	84 c0                	test   al,al
c001c267:	74 41                	je     c001c2aa <sysCallTTYName(regs*)+0x78>
c001c269:	83 ec 08             	sub    esp,0x8
c001c26c:	81 c3 82 00 00 00    	add    ebx,0x82
c001c272:	53                   	push   ebx
c001c273:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c276:	e8 c1 45 fe ff       	call   c000083c <strcpy>
c001c27b:	83 c4 10             	add    esp,0x10
c001c27e:	31 c0                	xor    eax,eax
c001c280:	59                   	pop    ecx
c001c281:	31 d2                	xor    edx,edx
c001c283:	5b                   	pop    ebx
c001c284:	5e                   	pop    esi
c001c285:	c3                   	ret    
c001c286:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c28b:	74 bb                	je     c001c248 <sysCallTTYName(regs*)+0x16>
c001c28d:	83 ec 0c             	sub    esp,0xc
c001c290:	50                   	push   eax
c001c291:	e8 d9 56 ff ff       	call   c001196f <getFromFileDescriptor(int)>
c001c296:	83 c4 10             	add    esp,0x10
c001c299:	89 c3                	mov    ebx,eax
c001c29b:	85 db                	test   ebx,ebx
c001c29d:	75 bb                	jne    c001c25a <sysCallTTYName(regs*)+0x28>
c001c29f:	59                   	pop    ecx
c001c2a0:	b8 01 00 00 00       	mov    eax,0x1
c001c2a5:	31 d2                	xor    edx,edx
c001c2a7:	5b                   	pop    ebx
c001c2a8:	5e                   	pop    esi
c001c2a9:	c3                   	ret    
c001c2aa:	59                   	pop    ecx
c001c2ab:	b8 02 00 00 00       	mov    eax,0x2
c001c2b0:	31 d2                	xor    edx,edx
c001c2b2:	5b                   	pop    ebx
c001c2b3:	5e                   	pop    esi
c001c2b4:	c3                   	ret    

c001c2b5 <sysCallUSleep(regs*)>:
c001c2b5:	83 ec 14             	sub    esp,0x14
c001c2b8:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c2bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c2c1:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c2c8:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c2cb:	01 ca                	add    edx,ecx
c001c2cd:	52                   	push   edx
c001c2ce:	50                   	push   eax
c001c2cf:	e8 ad 24 00 00       	call   c001e781 <nanoSleep(unsigned long long)>
c001c2d4:	31 c0                	xor    eax,eax
c001c2d6:	31 d2                	xor    edx,edx
c001c2d8:	83 c4 1c             	add    esp,0x1c
c001c2db:	c3                   	ret    

c001c2dc <sysCallSpawn(regs*)>:
c001c2dc:	56                   	push   esi
c001c2dd:	53                   	push   ebx
c001c2de:	50                   	push   eax
c001c2df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2e3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c2e6:	85 c0                	test   eax,eax
c001c2e8:	75 08                	jne    c001c2f2 <sysCallSpawn(regs*)+0x16>
c001c2ea:	59                   	pop    ecx
c001c2eb:	31 c0                	xor    eax,eax
c001c2ed:	31 d2                	xor    edx,edx
c001c2ef:	5b                   	pop    ebx
c001c2f0:	5e                   	pop    esi
c001c2f1:	c3                   	ret    
c001c2f2:	83 ec 08             	sub    esp,0x8
c001c2f5:	50                   	push   eax
c001c2f6:	68 47 c8 02 c0       	push   0xc002c847
c001c2fb:	e8 cb 6b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c300:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c307:	e8 08 36 ff ff       	call   c000f914 <malloc>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	89 c6                	mov    esi,eax
c001c311:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c314:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c317:	85 c0                	test   eax,eax
c001c319:	75 32                	jne    c001c34d <sysCallSpawn(regs*)+0x71>
c001c31b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c320:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c323:	52                   	push   edx
c001c324:	50                   	push   eax
c001c325:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c328:	56                   	push   esi
c001c329:	e8 30 1b 00 00       	call   c001de5e <Process::Process(char const*, Process*, char**)>
c001c32e:	83 c4 10             	add    esp,0x10
c001c331:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c338:	75 b0                	jne    c001c2ea <sysCallSpawn(regs*)+0xe>
c001c33a:	83 ec 0c             	sub    esp,0xc
c001c33d:	56                   	push   esi
c001c33e:	e8 fd 1f 00 00       	call   c001e340 <Process::createUserThread()>
c001c343:	8b 06                	mov    eax,DWORD PTR [esi]
c001c345:	83 c4 10             	add    esp,0x10
c001c348:	99                   	cdq    
c001c349:	59                   	pop    ecx
c001c34a:	5b                   	pop    ebx
c001c34b:	5e                   	pop    esi
c001c34c:	c3                   	ret    
c001c34d:	31 c0                	xor    eax,eax
c001c34f:	eb d2                	jmp    c001c323 <sysCallSpawn(regs*)+0x47>

c001c351 <sysCallGetEnv(regs*)>:
c001c351:	55                   	push   ebp
c001c352:	57                   	push   edi
c001c353:	56                   	push   esi
c001c354:	53                   	push   ebx
c001c355:	83 ec 28             	sub    esp,0x28
c001c358:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c35c:	68 55 c8 02 c0       	push   0xc002c855
c001c361:	e8 65 6b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c366:	5f                   	pop    edi
c001c367:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c36a:	5d                   	pop    ebp
c001c36b:	53                   	push   ebx
c001c36c:	68 82 cb 02 c0       	push   0xc002cb82
c001c371:	e8 55 6b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c376:	58                   	pop    eax
c001c377:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c37a:	5a                   	pop    edx
c001c37b:	57                   	push   edi
c001c37c:	68 5e c8 02 c0       	push   0xc002c85e
c001c381:	e8 45 6b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c386:	59                   	pop    ecx
c001c387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c38f:	e8 0f e4 ff ff       	call   c001a7a3 <Krnl::getProcessTotalEnvCount(Process*)>
c001c394:	5a                   	pop    edx
c001c395:	89 c5                	mov    ebp,eax
c001c397:	59                   	pop    ecx
c001c398:	50                   	push   eax
c001c399:	68 68 c8 02 c0       	push   0xc002c868
c001c39e:	e8 28 6b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c3a3:	83 c4 10             	add    esp,0x10
c001c3a6:	39 ef                	cmp    edi,ebp
c001c3a8:	7c 15                	jl     c001c3bf <sysCallGetEnv(regs*)+0x6e>
c001c3aa:	85 db                	test   ebx,ebx
c001c3ac:	75 0c                	jne    c001c3ba <sysCallGetEnv(regs*)+0x69>
c001c3ae:	83 c4 1c             	add    esp,0x1c
c001c3b1:	31 c0                	xor    eax,eax
c001c3b3:	5b                   	pop    ebx
c001c3b4:	31 d2                	xor    edx,edx
c001c3b6:	5e                   	pop    esi
c001c3b7:	5f                   	pop    edi
c001c3b8:	5d                   	pop    ebp
c001c3b9:	c3                   	ret    
c001c3ba:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c3bd:	eb ef                	jmp    c001c3ae <sysCallGetEnv(regs*)+0x5d>
c001c3bf:	83 ec 0c             	sub    esp,0xc
c001c3c2:	68 74 c8 02 c0       	push   0xc002c874
c001c3c7:	e8 ff 6a ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c3cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3d0:	83 c4 0c             	add    esp,0xc
c001c3d3:	57                   	push   edi
c001c3d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3da:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c3dd:	50                   	push   eax
c001c3de:	e8 e0 e3 ff ff       	call   c001a7c3 <Krnl::getProcessEnvPair(Process*, int)>
c001c3e3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c3e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c3eb:	68 33 cc 02 c0       	push   0xc002cc33
c001c3f0:	e8 d6 6a ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c3f5:	83 c4 10             	add    esp,0x10
c001c3f8:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c3fb:	85 f6                	test   esi,esi
c001c3fd:	75 47                	jne    c001c446 <sysCallGetEnv(regs*)+0xf5>
c001c3ff:	83 ec 0c             	sub    esp,0xc
c001c402:	55                   	push   ebp
c001c403:	e8 94 43 fe ff       	call   c000079c <strlen>
c001c408:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c40b:	89 c3                	mov    ebx,eax
c001c40d:	e8 8a 43 fe ff       	call   c000079c <strlen>
c001c412:	5a                   	pop    edx
c001c413:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c417:	59                   	pop    ecx
c001c418:	50                   	push   eax
c001c419:	68 77 c8 02 c0       	push   0xc002c877
c001c41e:	e8 a8 6a ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c423:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c426:	e8 71 43 fe ff       	call   c000079c <strlen>
c001c42b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c42e:	89 c3                	mov    ebx,eax
c001c430:	e8 67 43 fe ff       	call   c000079c <strlen>
c001c435:	83 c4 10             	add    esp,0x10
c001c438:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c43c:	83 c4 1c             	add    esp,0x1c
c001c43f:	31 d2                	xor    edx,edx
c001c441:	5b                   	pop    ebx
c001c442:	5e                   	pop    esi
c001c443:	5f                   	pop    edi
c001c444:	5d                   	pop    ebp
c001c445:	c3                   	ret    
c001c446:	83 ec 0c             	sub    esp,0xc
c001c449:	68 4d cc 02 c0       	push   0xc002cc4d
c001c44e:	e8 78 6a ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c453:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c456:	58                   	pop    eax
c001c457:	5a                   	pop    edx
c001c458:	55                   	push   ebp
c001c459:	53                   	push   ebx
c001c45a:	e8 dd 43 fe ff       	call   c000083c <strcpy>
c001c45f:	59                   	pop    ecx
c001c460:	5e                   	pop    esi
c001c461:	68 81 c8 02 c0       	push   0xc002c881
c001c466:	53                   	push   ebx
c001c467:	e8 10 45 fe ff       	call   c000097c <strcat>
c001c46c:	5d                   	pop    ebp
c001c46d:	58                   	pop    eax
c001c46e:	57                   	push   edi
c001c46f:	53                   	push   ebx
c001c470:	e8 07 45 fe ff       	call   c000097c <strcat>
c001c475:	c7 04 24 67 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc67
c001c47c:	e8 4a 6a ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	e9 25 ff ff ff       	jmp    c001c3ae <sysCallGetEnv(regs*)+0x5d>

c001c489 <sysAppSettings(regs*)>:
c001c489:	53                   	push   ebx
c001c48a:	83 ec 08             	sub    esp,0x8
c001c48d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c491:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c494:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c49a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c49f:	66 3d c0 09          	cmp    ax,0x9c0
c001c4a3:	75 2f                	jne    c001c4d4 <sysAppSettings(regs*)+0x4b>
c001c4a5:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c4ab:	83 e0 1f             	and    eax,0x1f
c001c4ae:	3c 01                	cmp    al,0x1
c001c4b0:	74 2e                	je     c001c4e0 <sysAppSettings(regs*)+0x57>
c001c4b2:	3c 07                	cmp    al,0x7
c001c4b4:	0f 84 bd 00 00 00    	je     c001c577 <sysAppSettings(regs*)+0xee>
c001c4ba:	84 c0                	test   al,al
c001c4bc:	0f 84 dc 00 00 00    	je     c001c59e <sysAppSettings(regs*)+0x115>
c001c4c2:	3c 08                	cmp    al,0x8
c001c4c4:	74 6d                	je     c001c533 <sysAppSettings(regs*)+0xaa>
c001c4c6:	0f b6 c0             	movzx  eax,al
c001c4c9:	83 c4 08             	add    esp,0x8
c001c4cc:	05 e8 03 00 00       	add    eax,0x3e8
c001c4d1:	5b                   	pop    ebx
c001c4d2:	99                   	cdq    
c001c4d3:	c3                   	ret    
c001c4d4:	b8 01 00 00 00       	mov    eax,0x1
c001c4d9:	31 d2                	xor    edx,edx
c001c4db:	83 c4 08             	add    esp,0x8
c001c4de:	5b                   	pop    ebx
c001c4df:	c3                   	ret    
c001c4e0:	51                   	push   ecx
c001c4e1:	68 00 01 00 00       	push   0x100
c001c4e6:	6a 00                	push   0x0
c001c4e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4f0:	83 c0 0c             	add    eax,0xc
c001c4f3:	50                   	push   eax
c001c4f4:	e8 87 42 fe ff       	call   c0000780 <memset>
c001c4f9:	83 c4 0c             	add    esp,0xc
c001c4fc:	68 ff 00 00 00       	push   0xff
c001c501:	53                   	push   ebx
c001c502:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c507:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c50a:	83 c0 0c             	add    eax,0xc
c001c50d:	50                   	push   eax
c001c50e:	e8 55 42 fe ff       	call   c0000768 <memcpy>
c001c513:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c518:	5b                   	pop    ebx
c001c519:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c51c:	5a                   	pop    edx
c001c51d:	8d 50 0c             	lea    edx,[eax+0xc]
c001c520:	52                   	push   edx
c001c521:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c527:	e8 6e 46 ff ff       	call   c0010b9a <VgaText::setTitle(char*)>
c001c52c:	83 c4 10             	add    esp,0x10
c001c52f:	31 c0                	xor    eax,eax
c001c531:	eb a6                	jmp    c001c4d9 <sysAppSettings(regs*)+0x50>
c001c533:	83 ec 08             	sub    esp,0x8
c001c536:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c53c:	83 e0 0f             	and    eax,0xf
c001c53f:	50                   	push   eax
c001c540:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c545:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c548:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c54e:	e8 39 46 ff ff       	call   c0010b8c <VgaText::setTitleColour(VgaColour)>
c001c553:	58                   	pop    eax
c001c554:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c55a:	5a                   	pop    edx
c001c55b:	c1 e8 04             	shr    eax,0x4
c001c55e:	83 e0 0f             	and    eax,0xf
c001c561:	50                   	push   eax
c001c562:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c567:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c56a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c570:	e8 09 46 ff ff       	call   c0010b7e <VgaText::setTitleTextColour(VgaColour)>
c001c575:	eb b5                	jmp    c001c52c <sysAppSettings(regs*)+0xa3>
c001c577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c57c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c57f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c585:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c58b:	c0 e8 06             	shr    al,0x6
c001c58e:	83 e0 01             	and    eax,0x1
c001c591:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c597:	31 c0                	xor    eax,eax
c001c599:	e9 3b ff ff ff       	jmp    c001c4d9 <sysAppSettings(regs*)+0x50>
c001c59e:	b8 02 00 00 00       	mov    eax,0x2
c001c5a3:	e9 31 ff ff ff       	jmp    c001c4d9 <sysAppSettings(regs*)+0x50>

c001c5a8 <sysSetFatAttrib(regs*)>:
c001c5a8:	57                   	push   edi
c001c5a9:	56                   	push   esi
c001c5aa:	53                   	push   ebx
c001c5ab:	83 ec 1c             	sub    esp,0x1c
c001c5ae:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c5b2:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c5b5:	68 14 01 00 00       	push   0x114
c001c5ba:	e8 55 33 ff ff       	call   c000f914 <malloc>
c001c5bf:	83 c4 0c             	add    esp,0xc
c001c5c2:	89 c3                	mov    ebx,eax
c001c5c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5c9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5cc:	57                   	push   edi
c001c5cd:	53                   	push   ebx
c001c5ce:	e8 57 6e ff ff       	call   c001342a <File::File(char const*, Process*)>
c001c5d3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c5d6:	83 c4 0c             	add    esp,0xc
c001c5d9:	0f b6 d4             	movzx  edx,ah
c001c5dc:	0f b6 c0             	movzx  eax,al
c001c5df:	52                   	push   edx
c001c5e0:	50                   	push   eax
c001c5e1:	53                   	push   ebx
c001c5e2:	e8 b9 70 ff ff       	call   c00136a0 <File::chfatattr(unsigned char, unsigned char)>
c001c5e7:	83 c4 10             	add    esp,0x10
c001c5ea:	85 db                	test   ebx,ebx
c001c5ec:	74 14                	je     c001c602 <sysSetFatAttrib(regs*)+0x5a>
c001c5ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c5f4:	83 ec 0c             	sub    esp,0xc
c001c5f7:	53                   	push   ebx
c001c5f8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c5fb:	83 c4 10             	add    esp,0x10
c001c5fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c602:	85 c0                	test   eax,eax
c001c604:	0f 95 c0             	setne  al
c001c607:	31 d2                	xor    edx,edx
c001c609:	0f b6 c0             	movzx  eax,al
c001c60c:	f7 d8                	neg    eax
c001c60e:	83 d2 00             	adc    edx,0x0
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	f7 da                	neg    edx
c001c616:	5b                   	pop    ebx
c001c617:	5e                   	pop    esi
c001c618:	5f                   	pop    edi
c001c619:	c3                   	ret    

c001c61a <sysPipe(regs*)>:
c001c61a:	57                   	push   edi
c001c61b:	56                   	push   esi
c001c61c:	53                   	push   ebx
c001c61d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c621:	83 ec 0c             	sub    esp,0xc
c001c624:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c627:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c62a:	6a 20                	push   0x20
c001c62c:	e8 e3 32 ff ff       	call   c000f914 <malloc>
c001c631:	89 c3                	mov    ebx,eax
c001c633:	58                   	pop    eax
c001c634:	5a                   	pop    edx
c001c635:	68 00 50 00 00       	push   0x5000
c001c63a:	53                   	push   ebx
c001c63b:	e8 02 3f ff ff       	call   c0010542 <Pipe::Pipe(int)>
c001c640:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c643:	e8 32 50 ff ff       	call   c001167a <UnixFile::getFileDescriptor()>
c001c648:	89 07                	mov    DWORD PTR [edi],eax
c001c64a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c64d:	e8 28 50 ff ff       	call   c001167a <UnixFile::getFileDescriptor()>
c001c652:	83 c4 10             	add    esp,0x10
c001c655:	89 06                	mov    DWORD PTR [esi],eax
c001c657:	31 d2                	xor    edx,edx
c001c659:	5b                   	pop    ebx
c001c65a:	31 c0                	xor    eax,eax
c001c65c:	5e                   	pop    esi
c001c65d:	5f                   	pop    edi
c001c65e:	c3                   	ret    

c001c65f <sysGetUnixTime(regs*)>:
c001c65f:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001c664:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c66a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c66e:	e9 a9 77 ff ff       	jmp    c0013e1c <Clock::timeInSecondsLocal()>

c001c673 <string_ends_with(char const*, char const*)>:
c001c673:	57                   	push   edi
c001c674:	56                   	push   esi
c001c675:	53                   	push   ebx
c001c676:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c67a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c67e:	83 ec 0c             	sub    esp,0xc
c001c681:	53                   	push   ebx
c001c682:	e8 15 41 fe ff       	call   c000079c <strlen>
c001c687:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c68a:	89 c6                	mov    esi,eax
c001c68c:	e8 0b 41 fe ff       	call   c000079c <strlen>
c001c691:	83 c4 10             	add    esp,0x10
c001c694:	39 c6                	cmp    esi,eax
c001c696:	7d 06                	jge    c001c69e <string_ends_with(char const*, char const*)+0x2b>
c001c698:	5b                   	pop    ebx
c001c699:	31 c0                	xor    eax,eax
c001c69b:	5e                   	pop    esi
c001c69c:	5f                   	pop    edi
c001c69d:	c3                   	ret    
c001c69e:	83 ec 08             	sub    esp,0x8
c001c6a1:	29 c6                	sub    esi,eax
c001c6a3:	57                   	push   edi
c001c6a4:	01 f3                	add    ebx,esi
c001c6a6:	53                   	push   ebx
c001c6a7:	e8 1c 42 fe ff       	call   c00008c8 <strcmp>
c001c6ac:	83 c4 10             	add    esp,0x10
c001c6af:	85 c0                	test   eax,eax
c001c6b1:	5b                   	pop    ebx
c001c6b2:	0f 94 c0             	sete   al
c001c6b5:	5e                   	pop    esi
c001c6b6:	0f b6 c0             	movzx  eax,al
c001c6b9:	5f                   	pop    edi
c001c6ba:	c3                   	ret    

c001c6bb <sysCallOpen(regs*)>:
c001c6bb:	56                   	push   esi
c001c6bc:	53                   	push   ebx
c001c6bd:	81 ec 04 01 00 00    	sub    esp,0x104
c001c6c3:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c6ca:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c6cd:	85 c9                	test   ecx,ecx
c001c6cf:	0f 84 b3 00 00 00    	je     c001c788 <sysCallOpen(regs*)+0xcd>
c001c6d5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c6d8:	85 c0                	test   eax,eax
c001c6da:	0f 84 a8 00 00 00    	je     c001c788 <sysCallOpen(regs*)+0xcd>
c001c6e0:	52                   	push   edx
c001c6e1:	68 83 c8 02 c0       	push   0xc002c883
c001c6e6:	50                   	push   eax
c001c6e7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c6eb:	56                   	push   esi
c001c6ec:	e8 8f 6b ff ff       	call   c0013280 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c6f1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6f4:	e8 a3 40 fe ff       	call   c000079c <strlen>
c001c6f9:	83 c4 10             	add    esp,0x10
c001c6fc:	48                   	dec    eax
c001c6fd:	74 1d                	je     c001c71c <sysCallOpen(regs*)+0x61>
c001c6ff:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c702:	eb 0f                	jmp    c001c713 <sysCallOpen(regs*)+0x58>
c001c704:	80 fa 3a             	cmp    dl,0x3a
c001c707:	74 0f                	je     c001c718 <sysCallOpen(regs*)+0x5d>
c001c709:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c70d:	48                   	dec    eax
c001c70e:	74 0c                	je     c001c71c <sysCallOpen(regs*)+0x61>
c001c710:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c713:	80 fa 2e             	cmp    dl,0x2e
c001c716:	75 ec                	jne    c001c704 <sysCallOpen(regs*)+0x49>
c001c718:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c71c:	83 ec 08             	sub    esp,0x8
c001c71f:	68 87 c8 02 c0       	push   0xc002c887
c001c724:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c727:	e8 47 ff ff ff       	call   c001c673 <string_ends_with(char const*, char const*)>
c001c72c:	83 c4 10             	add    esp,0x10
c001c72f:	85 c0                	test   eax,eax
c001c731:	75 17                	jne    c001c74a <sysCallOpen(regs*)+0x8f>
c001c733:	83 ec 08             	sub    esp,0x8
c001c736:	68 a8 c8 02 c0       	push   0xc002c8a8
c001c73b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c73e:	e8 30 ff ff ff       	call   c001c673 <string_ends_with(char const*, char const*)>
c001c743:	83 c4 10             	add    esp,0x10
c001c746:	85 c0                	test   eax,eax
c001c748:	74 51                	je     c001c79b <sysCallOpen(regs*)+0xe0>
c001c74a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c74d:	83 ec 08             	sub    esp,0x8
c001c750:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c756:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c75d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c760:	ff 30                	push   DWORD PTR [eax]
c001c762:	68 8c c8 02 c0       	push   0xc002c88c
c001c767:	e8 5f 67 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c76c:	c7 04 24 9b c8 02 c0 	mov    DWORD PTR [esp],0xc002c89b
c001c773:	e8 53 67 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	81 c4 04 01 00 00    	add    esp,0x104
c001c781:	31 c0                	xor    eax,eax
c001c783:	31 d2                	xor    edx,edx
c001c785:	5b                   	pop    ebx
c001c786:	5e                   	pop    esi
c001c787:	c3                   	ret    
c001c788:	81 c4 04 01 00 00    	add    esp,0x104
c001c78e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c793:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c798:	5b                   	pop    ebx
c001c799:	5e                   	pop    esi
c001c79a:	c3                   	ret    
c001c79b:	83 ec 08             	sub    esp,0x8
c001c79e:	68 88 c8 02 c0       	push   0xc002c888
c001c7a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7a6:	e8 1d 41 fe ff       	call   c00008c8 <strcmp>
c001c7ab:	83 c4 10             	add    esp,0x10
c001c7ae:	85 c0                	test   eax,eax
c001c7b0:	74 98                	je     c001c74a <sysCallOpen(regs*)+0x8f>
c001c7b2:	83 ec 08             	sub    esp,0x8
c001c7b5:	68 87 c8 02 c0       	push   0xc002c887
c001c7ba:	56                   	push   esi
c001c7bb:	e8 b3 fe ff ff       	call   c001c673 <string_ends_with(char const*, char const*)>
c001c7c0:	83 c4 10             	add    esp,0x10
c001c7c3:	85 c0                	test   eax,eax
c001c7c5:	75 83                	jne    c001c74a <sysCallOpen(regs*)+0x8f>
c001c7c7:	83 ec 08             	sub    esp,0x8
c001c7ca:	68 ad c8 02 c0       	push   0xc002c8ad
c001c7cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7d2:	e8 9c fe ff ff       	call   c001c673 <string_ends_with(char const*, char const*)>
c001c7d7:	83 c4 10             	add    esp,0x10
c001c7da:	85 c0                	test   eax,eax
c001c7dc:	0f 85 d9 00 00 00    	jne    c001c8bb <sysCallOpen(regs*)+0x200>
c001c7e2:	83 ec 08             	sub    esp,0x8
c001c7e5:	68 b2 c8 02 c0       	push   0xc002c8b2
c001c7ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7ed:	e8 81 fe ff ff       	call   c001c673 <string_ends_with(char const*, char const*)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	85 c0                	test   eax,eax
c001c7f7:	0f 85 be 00 00 00    	jne    c001c8bb <sysCallOpen(regs*)+0x200>
c001c7fd:	83 ec 08             	sub    esp,0x8
c001c800:	68 ae c8 02 c0       	push   0xc002c8ae
c001c805:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c808:	e8 bb 40 fe ff       	call   c00008c8 <strcmp>
c001c80d:	83 c4 10             	add    esp,0x10
c001c810:	85 c0                	test   eax,eax
c001c812:	0f 84 a3 00 00 00    	je     c001c8bb <sysCallOpen(regs*)+0x200>
c001c818:	83 ec 08             	sub    esp,0x8
c001c81b:	68 ad c8 02 c0       	push   0xc002c8ad
c001c820:	56                   	push   esi
c001c821:	e8 4d fe ff ff       	call   c001c673 <string_ends_with(char const*, char const*)>
c001c826:	83 c4 10             	add    esp,0x10
c001c829:	85 c0                	test   eax,eax
c001c82b:	0f 85 8a 00 00 00    	jne    c001c8bb <sysCallOpen(regs*)+0x200>
c001c831:	83 ec 0c             	sub    esp,0xc
c001c834:	68 14 01 00 00       	push   0x114
c001c839:	e8 d6 30 ff ff       	call   c000f914 <malloc>
c001c83e:	83 c4 0c             	add    esp,0xc
c001c841:	89 c6                	mov    esi,eax
c001c843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c848:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c84b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c84e:	56                   	push   esi
c001c84f:	e8 d6 6b ff ff       	call   c001342a <File::File(char const*, Process*)>
c001c854:	83 c4 10             	add    esp,0x10
c001c857:	85 f6                	test   esi,esi
c001c859:	0f 84 29 ff ff ff    	je     c001c788 <sysCallOpen(regs*)+0xcd>
c001c85f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c862:	0f b6 c2             	movzx  eax,dl
c001c865:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c868:	89 d0                	mov    eax,edx
c001c86a:	83 e0 01             	and    eax,0x1
c001c86d:	f6 c2 02             	test   dl,0x2
c001c870:	74 03                	je     c001c875 <sysCallOpen(regs*)+0x1ba>
c001c872:	83 c8 02             	or     eax,0x2
c001c875:	f6 c2 04             	test   dl,0x4
c001c878:	74 03                	je     c001c87d <sysCallOpen(regs*)+0x1c2>
c001c87a:	83 c8 04             	or     eax,0x4
c001c87d:	f6 c2 08             	test   dl,0x8
c001c880:	74 03                	je     c001c885 <sysCallOpen(regs*)+0x1ca>
c001c882:	83 c8 0a             	or     eax,0xa
c001c885:	83 e2 10             	and    edx,0x10
c001c888:	74 03                	je     c001c88d <sysCallOpen(regs*)+0x1d2>
c001c88a:	83 c8 12             	or     eax,0x12
c001c88d:	83 ec 08             	sub    esp,0x8
c001c890:	50                   	push   eax
c001c891:	56                   	push   esi
c001c892:	e8 f7 6b ff ff       	call   c001348e <File::open(FileOpenMode)>
c001c897:	83 c4 10             	add    esp,0x10
c001c89a:	85 c0                	test   eax,eax
c001c89c:	0f 85 e6 fe ff ff    	jne    c001c788 <sysCallOpen(regs*)+0xcd>
c001c8a2:	83 ec 0c             	sub    esp,0xc
c001c8a5:	56                   	push   esi
c001c8a6:	e8 cf 4d ff ff       	call   c001167a <UnixFile::getFileDescriptor()>
c001c8ab:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c8ae:	89 02                	mov    DWORD PTR [edx],eax
c001c8b0:	c1 f8 1f             	sar    eax,0x1f
c001c8b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8b6:	e9 bd fe ff ff       	jmp    c001c778 <sysCallOpen(regs*)+0xbd>
c001c8bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8be:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c8c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8cb:	e9 ab fe ff ff       	jmp    c001c77b <sysCallOpen(regs*)+0xc0>

c001c8d0 <Sys::loadSyscalls()>:
c001c8d0:	c7 05 a0 19 03 c0 b5 b9 01 c0 	mov    DWORD PTR ds:0xc00319a0,0xc001b9b5
c001c8da:	c7 05 a4 19 03 c0 1c b5 01 c0 	mov    DWORD PTR ds:0xc00319a4,0xc001b51c
c001c8e4:	c7 05 a8 19 03 c0 08 b7 01 c0 	mov    DWORD PTR ds:0xc00319a8,0xc001b708
c001c8ee:	c7 05 ac 19 03 c0 eb b8 01 c0 	mov    DWORD PTR ds:0xc00319ac,0xc001b8eb
c001c8f8:	c7 05 b0 19 03 c0 a0 b6 01 c0 	mov    DWORD PTR ds:0xc00319b0,0xc001b6a0
c001c902:	c7 05 b4 19 03 c0 53 b5 01 c0 	mov    DWORD PTR ds:0xc00319b4,0xc001b553
c001c90c:	c7 05 b8 19 03 c0 34 b5 01 c0 	mov    DWORD PTR ds:0xc00319b8,0xc001b534
c001c916:	c7 05 bc 19 03 c0 5d b7 01 c0 	mov    DWORD PTR ds:0xc00319bc,0xc001b75d
c001c920:	c7 05 c4 19 03 c0 f0 be 01 c0 	mov    DWORD PTR ds:0xc00319c4,0xc001bef0
c001c92a:	c7 05 c0 19 03 c0 bb c6 01 c0 	mov    DWORD PTR ds:0xc00319c0,0xc001c6bb
c001c934:	c7 05 c8 19 03 c0 78 bf 01 c0 	mov    DWORD PTR ds:0xc00319c8,0xc001bf78
c001c93e:	c7 05 cc 19 03 c0 df bb 01 c0 	mov    DWORD PTR ds:0xc00319cc,0xc001bbdf
c001c948:	c7 05 d0 19 03 c0 fb b9 01 c0 	mov    DWORD PTR ds:0xc00319d0,0xc001b9fb
c001c952:	c7 05 d4 19 03 c0 00 ba 01 c0 	mov    DWORD PTR ds:0xc00319d4,0xc001ba00
c001c95c:	c7 05 d8 19 03 c0 53 c0 01 c0 	mov    DWORD PTR ds:0xc00319d8,0xc001c053
c001c966:	c7 05 dc 19 03 c0 ed bf 01 c0 	mov    DWORD PTR ds:0xc00319dc,0xc001bfed
c001c970:	c7 05 e0 19 03 c0 c7 bc 01 c0 	mov    DWORD PTR ds:0xc00319e0,0xc001bcc7
c001c97a:	c7 05 e4 19 03 c0 30 bd 01 c0 	mov    DWORD PTR ds:0xc00319e4,0xc001bd30
c001c984:	c7 05 e8 19 03 c0 ad bd 01 c0 	mov    DWORD PTR ds:0xc00319e8,0xc001bdad
c001c98e:	c7 05 ec 19 03 c0 05 ba 01 c0 	mov    DWORD PTR ds:0xc00319ec,0xc001ba05
c001c998:	c7 05 f0 19 03 c0 c3 c0 01 c0 	mov    DWORD PTR ds:0xc00319f0,0xc001c0c3
c001c9a2:	c7 05 f4 19 03 c0 dd c0 01 c0 	mov    DWORD PTR ds:0xc00319f4,0xc001c0dd
c001c9ac:	c7 05 f8 19 03 c0 dd c0 01 c0 	mov    DWORD PTR ds:0xc00319f8,0xc001c0dd
c001c9b6:	c7 05 fc 19 03 c0 1e c1 01 c0 	mov    DWORD PTR ds:0xc00319fc,0xc001c11e
c001c9c0:	c7 05 00 1a 03 c0 82 c1 01 c0 	mov    DWORD PTR ds:0xc0031a00,0xc001c182
c001c9ca:	c7 05 04 1a 03 c0 b1 bb 01 c0 	mov    DWORD PTR ds:0xc0031a04,0xc001bbb1
c001c9d4:	c7 05 08 1a 03 c0 e6 c1 01 c0 	mov    DWORD PTR ds:0xc0031a08,0xc001c1e6
c001c9de:	c7 05 0c 1a 03 c0 6e bb 01 c0 	mov    DWORD PTR ds:0xc0031a0c,0xc001bb6e
c001c9e8:	c7 05 10 1a 03 c0 32 c2 01 c0 	mov    DWORD PTR ds:0xc0031a10,0xc001c232
c001c9f2:	c7 05 14 1a 03 c0 6d bc 01 c0 	mov    DWORD PTR ds:0xc0031a14,0xc001bc6d
c001c9fc:	c7 05 18 1a 03 c0 b5 c2 01 c0 	mov    DWORD PTR ds:0xc0031a18,0xc001c2b5
c001ca06:	c7 05 1c 1a 03 c0 30 be 01 c0 	mov    DWORD PTR ds:0xc0031a1c,0xc001be30
c001ca10:	c7 05 20 1a 03 c0 dc c2 01 c0 	mov    DWORD PTR ds:0xc0031a20,0xc001c2dc
c001ca1a:	c7 05 24 1a 03 c0 51 c3 01 c0 	mov    DWORD PTR ds:0xc0031a24,0xc001c351
c001ca24:	c7 05 28 1a 03 c0 89 c4 01 c0 	mov    DWORD PTR ds:0xc0031a28,0xc001c489
c001ca2e:	c7 05 2c 1a 03 c0 0f ba 01 c0 	mov    DWORD PTR ds:0xc0031a2c,0xc001ba0f
c001ca38:	c7 05 30 1a 03 c0 79 ba 01 c0 	mov    DWORD PTR ds:0xc0031a30,0xc001ba79
c001ca42:	c7 05 34 1a 03 c0 bf ba 01 c0 	mov    DWORD PTR ds:0xc0031a34,0xc001babf
c001ca4c:	c7 05 38 1a 03 c0 a8 c5 01 c0 	mov    DWORD PTR ds:0xc0031a38,0xc001c5a8
c001ca56:	c7 05 3c 1a 03 c0 f8 c0 01 c0 	mov    DWORD PTR ds:0xc0031a3c,0xc001c0f8
c001ca60:	c7 05 40 1a 03 c0 10 bb 01 c0 	mov    DWORD PTR ds:0xc0031a40,0xc001bb10
c001ca6a:	c7 05 44 1a 03 c0 1a c6 01 c0 	mov    DWORD PTR ds:0xc0031a44,0xc001c61a
c001ca74:	c7 05 48 1a 03 c0 5f c6 01 c0 	mov    DWORD PTR ds:0xc0031a48,0xc001c65f
c001ca7e:	c7 05 4c 1a 03 c0 f8 b5 01 c0 	mov    DWORD PTR ds:0xc0031a4c,0xc001b5f8
c001ca88:	c7 05 50 1a 03 c0 79 b7 01 c0 	mov    DWORD PTR ds:0xc0031a50,0xc001b779
c001ca92:	c7 05 54 1a 03 c0 a1 b8 01 c0 	mov    DWORD PTR ds:0xc0031a54,0xc001b8a1
c001ca9c:	c7 05 58 1a 03 c0 e6 b4 01 c0 	mov    DWORD PTR ds:0xc0031a58,0xc001b4e6
c001caa6:	c7 05 5c 1a 03 c0 53 b9 01 c0 	mov    DWORD PTR ds:0xc0031a5c,0xc001b953
c001cab0:	c7 05 60 1a 03 c0 5f b5 01 c0 	mov    DWORD PTR ds:0xc0031a60,0xc001b55f
c001caba:	c7 05 64 1a 03 c0 76 b5 01 c0 	mov    DWORD PTR ds:0xc0031a64,0xc001b576
c001cac4:	c3                   	ret    

c001cac5 <Sys::systemCall(regs*, void*)>:
c001cac5:	53                   	push   ebx
c001cac6:	83 ec 08             	sub    esp,0x8
c001cac9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cacd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cad0:	83 f8 7f             	cmp    eax,0x7f
c001cad3:	77 16                	ja     c001caeb <Sys::systemCall(regs*, void*)+0x26>
c001cad5:	8b 14 85 a0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce660]
c001cadc:	85 d2                	test   edx,edx
c001cade:	74 0b                	je     c001caeb <Sys::systemCall(regs*, void*)+0x26>
c001cae0:	83 ec 0c             	sub    esp,0xc
c001cae3:	53                   	push   ebx
c001cae4:	ff d2                	call   edx
c001cae6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cae9:	eb 0d                	jmp    c001caf8 <Sys::systemCall(regs*, void*)+0x33>
c001caeb:	52                   	push   edx
c001caec:	52                   	push   edx
c001caed:	50                   	push   eax
c001caee:	68 b7 c8 02 c0       	push   0xc002c8b7
c001caf3:	e8 d3 63 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001caf8:	83 c4 10             	add    esp,0x10
c001cafb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cb00:	31 d2                	xor    edx,edx
c001cb02:	83 c4 08             	add    esp,0x8
c001cb05:	5b                   	pop    ebx
c001cb06:	c3                   	ret    

c001cb07 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cb07:	55                   	push   ebp
c001cb08:	57                   	push   edi
c001cb09:	56                   	push   esi
c001cb0a:	53                   	push   ebx
c001cb0b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cb11:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cb18:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cb1f:	85 c0                	test   eax,eax
c001cb21:	0f 95 c1             	setne  cl
c001cb24:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cb2c:	0f 94 c2             	sete   dl
c001cb2f:	84 d1                	test   cl,dl
c001cb31:	74 23                	je     c001cb56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb33:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cb39:	74 1b                	je     c001cb56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb41:	89 da                	mov    edx,ebx
c001cb43:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cb49:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cb4f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cb56:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001cb5d:	05 ff 0f 00 00       	add    eax,0xfff
c001cb62:	83 ec 0c             	sub    esp,0xc
c001cb65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb69:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001cb6f:	c1 e8 0c             	shr    eax,0xc
c001cb72:	89 ef                	mov    edi,ebp
c001cb74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb78:	c1 ef 0c             	shr    edi,0xc
c001cb7b:	6a 01                	push   0x1
c001cb7d:	e8 43 4f ff ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c001cb82:	89 c6                	mov    esi,eax
c001cb84:	58                   	pop    eax
c001cb85:	5a                   	pop    edx
c001cb86:	57                   	push   edi
c001cb87:	68 3b c9 02 c0       	push   0xc002c93b
c001cb8c:	e8 3a 63 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001cb91:	59                   	pop    ecx
c001cb92:	58                   	pop    eax
c001cb93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb97:	68 4d c9 02 c0       	push   0xc002c94d
c001cb9c:	e8 2a 63 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001cba1:	83 c4 10             	add    esp,0x10
c001cba4:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001cbaa:	0f 86 31 01 00 00    	jbe    c001cce1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cbb0:	c1 e7 0c             	shl    edi,0xc
c001cbb3:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001cbb6:	89 df                	mov    edi,ebx
c001cbb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbbc:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001cbc3:	01 dd                	add    ebp,ebx
c001cbc5:	29 fd                	sub    ebp,edi
c001cbc7:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001cbcb:	0f 84 0e 01 00 00    	je     c001ccdf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d8>
c001cbd1:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001cbd7:	76 05                	jbe    c001cbde <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001cbd9:	bd 00 10 00 00       	mov    ebp,0x1000
c001cbde:	83 ec 0c             	sub    esp,0xc
c001cbe1:	31 d2                	xor    edx,edx
c001cbe3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cbea:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cbec:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cbf0:	50                   	push   eax
c001cbf1:	8d 44 24 30          	lea    eax,[esp+0x30]
c001cbf5:	50                   	push   eax
c001cbf6:	52                   	push   edx
c001cbf7:	55                   	push   ebp
c001cbf8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cbff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc02:	83 c4 20             	add    esp,0x20
c001cc05:	85 c0                	test   eax,eax
c001cc07:	74 0a                	je     c001cc13 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001cc09:	53                   	push   ebx
c001cc0a:	53                   	push   ebx
c001cc0b:	50                   	push   eax
c001cc0c:	68 5f c9 02 c0       	push   0xc002c95f
c001cc11:	eb 0f                	jmp    c001cc22 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001cc13:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001cc17:	74 20                	je     c001cc39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001cc19:	51                   	push   ecx
c001cc1a:	51                   	push   ecx
c001cc1b:	6a 00                	push   0x0
c001cc1d:	68 8a c9 02 c0       	push   0xc002c98a
c001cc22:	e8 a4 62 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001cc27:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc2a:	e8 56 53 ff ff       	call   c0011f85 <Virt::freeKernelVirtualPages(unsigned long)>
c001cc2f:	83 c4 10             	add    esp,0x10
c001cc32:	31 c0                	xor    eax,eax
c001cc34:	e9 6d 01 00 00       	jmp    c001cda6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cc39:	fa                   	cli    
c001cc3a:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001cc40:	e8 3b 33 ff ff       	call   c000ff80 <Phys::allocatePage()>
c001cc45:	6a 07                	push   0x7
c001cc47:	89 c5                	mov    ebp,eax
c001cc49:	56                   	push   esi
c001cc4a:	50                   	push   eax
c001cc4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc53:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc59:	e8 9e 56 ff ff       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c001cc5e:	83 c4 0c             	add    esp,0xc
c001cc61:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cc68:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc6e:	6a 00                	push   0x0
c001cc70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc75:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc78:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc7e:	e8 d3 54 ff ff       	call   c0012156 <VAS::mapOtherVASIn(bool, VAS*)>
c001cc83:	58                   	pop    eax
c001cc84:	5a                   	pop    edx
c001cc85:	68 07 0c 00 00       	push   0xc07
c001cc8a:	57                   	push   edi
c001cc8b:	55                   	push   ebp
c001cc8c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cc93:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc99:	6a 00                	push   0x0
c001cc9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cca0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cca3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cca9:	e8 0a 5a ff ff       	call   c00126b8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ccae:	83 c4 1c             	add    esp,0x1c
c001ccb1:	68 00 10 00 00       	push   0x1000
c001ccb6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ccba:	50                   	push   eax
c001ccbb:	56                   	push   esi
c001ccbc:	e8 a7 3a fe ff       	call   c0000768 <memcpy>
c001ccc1:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ccc6:	83 c4 10             	add    esp,0x10
c001ccc9:	48                   	dec    eax
c001ccca:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001cccf:	85 c0                	test   eax,eax
c001ccd1:	75 01                	jne    c001ccd4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001ccd3:	fb                   	sti    
c001ccd4:	81 c7 00 10 00 00    	add    edi,0x1000
c001ccda:	e9 dd fe ff ff       	jmp    c001cbbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ccdf:	89 fb                	mov    ebx,edi
c001cce1:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cce9:	0f 86 a9 00 00 00    	jbe    c001cd98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ccef:	fa                   	cli    
c001ccf0:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ccf6:	51                   	push   ecx
c001ccf7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ccfe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd04:	6a 00                	push   0x0
c001cd06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd0e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd14:	e8 3d 54 ff ff       	call   c0012156 <VAS::mapOtherVASIn(bool, VAS*)>
c001cd19:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cd1d:	c1 e7 0c             	shl    edi,0xc
c001cd20:	01 df                	add    edi,ebx
c001cd22:	83 c4 10             	add    esp,0x10
c001cd25:	39 df                	cmp    edi,ebx
c001cd27:	74 61                	je     c001cd8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cd29:	e8 52 32 ff ff       	call   c000ff80 <Phys::allocatePage()>
c001cd2e:	6a 07                	push   0x7
c001cd30:	89 c5                	mov    ebp,eax
c001cd32:	56                   	push   esi
c001cd33:	50                   	push   eax
c001cd34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd3c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd42:	e8 b5 55 ff ff       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd47:	58                   	pop    eax
c001cd48:	5a                   	pop    edx
c001cd49:	68 07 0c 00 00       	push   0xc07
c001cd4e:	53                   	push   ebx
c001cd4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd55:	55                   	push   ebp
c001cd56:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cd5d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd63:	6a 00                	push   0x0
c001cd65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd6a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd6d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd73:	e8 40 59 ff ff       	call   c00126b8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cd78:	83 c4 1c             	add    esp,0x1c
c001cd7b:	68 00 10 00 00       	push   0x1000
c001cd80:	6a 00                	push   0x0
c001cd82:	56                   	push   esi
c001cd83:	e8 f8 39 fe ff       	call   c0000780 <memset>
c001cd88:	eb 98                	jmp    c001cd22 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cd8a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001cd8f:	48                   	dec    eax
c001cd90:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001cd95:	75 01                	jne    c001cd98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cd97:	fb                   	sti    
c001cd98:	83 ec 0c             	sub    esp,0xc
c001cd9b:	56                   	push   esi
c001cd9c:	e8 e4 51 ff ff       	call   c0011f85 <Virt::freeKernelVirtualPages(unsigned long)>
c001cda1:	83 c4 10             	add    esp,0x10
c001cda4:	b0 01                	mov    al,0x1
c001cda6:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cdac:	5b                   	pop    ebx
c001cdad:	5e                   	pop    esi
c001cdae:	5f                   	pop    edi
c001cdaf:	5d                   	pop    ebp
c001cdb0:	c3                   	ret    

c001cdb1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cdb1:	55                   	push   ebp
c001cdb2:	57                   	push   edi
c001cdb3:	56                   	push   esi
c001cdb4:	53                   	push   ebx
c001cdb5:	83 ec 48             	sub    esp,0x48
c001cdb8:	68 14 01 00 00       	push   0x114
c001cdbd:	e8 52 2b ff ff       	call   c000f914 <malloc>
c001cdc2:	83 c4 0c             	add    esp,0xc
c001cdc5:	89 c6                	mov    esi,eax
c001cdc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cdcb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cdcf:	50                   	push   eax
c001cdd0:	e8 55 66 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001cdd5:	58                   	pop    eax
c001cdd6:	5a                   	pop    edx
c001cdd7:	6a 01                	push   0x1
c001cdd9:	56                   	push   esi
c001cdda:	e8 af 66 ff ff       	call   c001348e <File::open(FileOpenMode)>
c001cddf:	83 c4 10             	add    esp,0x10
c001cde2:	85 c0                	test   eax,eax
c001cde4:	0f 85 47 01 00 00    	jne    c001cf31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdea:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cdf2:	83 ec 0c             	sub    esp,0xc
c001cdf5:	6a 34                	push   0x34
c001cdf7:	e8 18 2b ff ff       	call   c000f914 <malloc>
c001cdfc:	89 c3                	mov    ebx,eax
c001cdfe:	58                   	pop    eax
c001cdff:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce01:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ce05:	57                   	push   edi
c001ce06:	53                   	push   ebx
c001ce07:	6a 00                	push   0x0
c001ce09:	6a 34                	push   0x34
c001ce0b:	56                   	push   esi
c001ce0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce0f:	83 c4 20             	add    esp,0x20
c001ce12:	85 c0                	test   eax,eax
c001ce14:	0f 85 17 01 00 00    	jne    c001cf31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce1a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ce20:	0f 85 0b 01 00 00    	jne    c001cf31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce26:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ce29:	85 c0                	test   eax,eax
c001ce2b:	0f 84 00 01 00 00    	je     c001cf31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce31:	31 d2                	xor    edx,edx
c001ce33:	55                   	push   ebp
c001ce34:	52                   	push   edx
c001ce35:	50                   	push   eax
c001ce36:	56                   	push   esi
c001ce37:	e8 10 67 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001ce3c:	83 c4 10             	add    esp,0x10
c001ce3f:	85 c0                	test   eax,eax
c001ce41:	0f 85 ea 00 00 00    	jne    c001cf31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce47:	83 ec 0c             	sub    esp,0xc
c001ce4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce4d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce51:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce55:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce59:	0f af c2             	imul   eax,edx
c001ce5c:	50                   	push   eax
c001ce5d:	e8 b2 2a ff ff       	call   c000f914 <malloc>
c001ce62:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce64:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce68:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce6b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce6f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce73:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce77:	0f af c2             	imul   eax,edx
c001ce7a:	99                   	cdq    
c001ce7b:	52                   	push   edx
c001ce7c:	50                   	push   eax
c001ce7d:	56                   	push   esi
c001ce7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ce84:	83 c4 20             	add    esp,0x20
c001ce87:	85 c0                	test   eax,eax
c001ce89:	0f 84 a2 00 00 00    	je     c001cf31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce8f:	31 d2                	xor    edx,edx
c001ce91:	51                   	push   ecx
c001ce92:	52                   	push   edx
c001ce93:	50                   	push   eax
c001ce94:	56                   	push   esi
c001ce95:	e8 b2 66 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001ce9a:	83 c4 10             	add    esp,0x10
c001ce9d:	85 c0                	test   eax,eax
c001ce9f:	0f 85 8c 00 00 00    	jne    c001cf31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cea5:	83 ec 0c             	sub    esp,0xc
c001cea8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ceac:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ceb0:	31 ed                	xor    ebp,ebp
c001ceb2:	0f af c2             	imul   eax,edx
c001ceb5:	50                   	push   eax
c001ceb6:	e8 59 2a ff ff       	call   c000f914 <malloc>
c001cebb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cebd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cec1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cec8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cecc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ced0:	0f af c2             	imul   eax,edx
c001ced3:	99                   	cdq    
c001ced4:	52                   	push   edx
c001ced5:	50                   	push   eax
c001ced6:	56                   	push   esi
c001ced7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceda:	83 c4 20             	add    esp,0x20
c001cedd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cee5:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cee9:	0f 86 80 00 00 00    	jbe    c001cf6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ceef:	0f b7 fd             	movzx  edi,bp
c001cef2:	c1 e7 05             	shl    edi,0x5
c001cef5:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cef9:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cefc:	75 6b                	jne    c001cf69 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cefe:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cf01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf05:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cf08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf0c:	52                   	push   edx
c001cf0d:	31 d2                	xor    edx,edx
c001cf0f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cf12:	52                   	push   edx
c001cf13:	50                   	push   eax
c001cf14:	56                   	push   esi
c001cf15:	e8 32 66 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001cf1a:	83 c4 10             	add    esp,0x10
c001cf1d:	85 c0                	test   eax,eax
c001cf1f:	74 17                	je     c001cf38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cf21:	83 ec 0c             	sub    esp,0xc
c001cf24:	68 b6 c9 02 c0       	push   0xc002c9b6
c001cf29:	e8 9d 5f ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001cf2e:	83 c4 10             	add    esp,0x10
c001cf31:	31 c0                	xor    eax,eax
c001cf33:	e9 87 00 00 00       	jmp    c001cfbf <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cf38:	83 ec 0c             	sub    esp,0xc
c001cf3b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cf3e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cf41:	50                   	push   eax
c001cf42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cf46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf4a:	56                   	push   esi
c001cf4b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cf4f:	e8 b3 fb ff ff       	call   c001cb07 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cf54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf58:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cf5c:	83 c4 20             	add    esp,0x20
c001cf5f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cf63:	73 04                	jae    c001cf69 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf69:	45                   	inc    ebp
c001cf6a:	e9 76 ff ff ff       	jmp    c001cee5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cf6f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cf73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf7b:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cf81:	83 ec 0c             	sub    esp,0xc
c001cf84:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cf8a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cf8f:	05 00 10 00 00       	add    eax,0x1000
c001cf94:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cf97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf9b:	e8 84 29 ff ff       	call   c000f924 <free>
c001cfa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfa3:	e8 7c 29 ff ff       	call   c000f924 <free>
c001cfa8:	58                   	pop    eax
c001cfa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfad:	e8 72 29 ff ff       	call   c000f924 <free>
c001cfb2:	89 34 24             	mov    DWORD PTR [esp],esi
c001cfb5:	e8 32 65 ff ff       	call   c00134ec <File::close()>
c001cfba:	83 c4 10             	add    esp,0x10
c001cfbd:	b0 01                	mov    al,0x1
c001cfbf:	83 c4 3c             	add    esp,0x3c
c001cfc2:	5b                   	pop    ebx
c001cfc3:	5e                   	pop    esi
c001cfc4:	5f                   	pop    edi
c001cfc5:	5d                   	pop    ebp
c001cfc6:	c3                   	ret    

c001cfc7 <Thr::runtimeReferenceHelper()>:
c001cfc7:	83 ec 18             	sub    esp,0x18
c001cfca:	68 be c9 02 c0       	push   0xc002c9be
c001cfcf:	e8 f7 5e ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001cfd4:	fa                   	cli    
c001cfd5:	83 c4 10             	add    esp,0x10
c001cfd8:	eb fe                	jmp    c001cfd8 <Thr::runtimeReferenceHelper()+0x11>

c001cfda <Thr::getAddressOfKernelSymbol(char const*)>:
c001cfda:	57                   	push   edi
c001cfdb:	56                   	push   esi
c001cfdc:	53                   	push   ebx
c001cfdd:	31 db                	xor    ebx,ebx
c001cfdf:	39 1d 40 23 03 c0    	cmp    DWORD PTR ds:0xc0032340,ebx
c001cfe5:	7e 3c                	jle    c001d023 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cfe7:	8b 34 9d c0 22 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdd40]
c001cfee:	31 ff                	xor    edi,edi
c001cff0:	39 3c 9d c0 21 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcde40],edi
c001cff7:	7e 27                	jle    c001d020 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cff9:	50                   	push   eax
c001cffa:	50                   	push   eax
c001cffb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfff:	8b 06                	mov    eax,DWORD PTR [esi]
c001d001:	03 04 9d 40 22 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcddc0]
c001d008:	50                   	push   eax
c001d009:	e8 ba 38 fe ff       	call   c00008c8 <strcmp>
c001d00e:	83 c4 10             	add    esp,0x10
c001d011:	85 c0                	test   eax,eax
c001d013:	75 05                	jne    c001d01a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d015:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d018:	eb 0b                	jmp    c001d025 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d01a:	83 c6 10             	add    esi,0x10
c001d01d:	47                   	inc    edi
c001d01e:	eb d0                	jmp    c001cff0 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d020:	43                   	inc    ebx
c001d021:	eb bc                	jmp    c001cfdf <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d023:	31 c0                	xor    eax,eax
c001d025:	5b                   	pop    ebx
c001d026:	5e                   	pop    esi
c001d027:	5f                   	pop    edi
c001d028:	c3                   	ret    

c001d029 <Thr::loadKernelSymbolTable(char const*)>:
c001d029:	55                   	push   ebp
c001d02a:	57                   	push   edi
c001d02b:	56                   	push   esi
c001d02c:	53                   	push   ebx
c001d02d:	83 ec 68             	sub    esp,0x68
c001d030:	8b 35 90 23 03 c0    	mov    esi,DWORD PTR ds:0xc0032390
c001d036:	68 14 01 00 00       	push   0x114
c001d03b:	e8 d4 28 ff ff       	call   c000f914 <malloc>
c001d040:	83 c4 0c             	add    esp,0xc
c001d043:	89 c3                	mov    ebx,eax
c001d045:	56                   	push   esi
c001d046:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d04a:	50                   	push   eax
c001d04b:	e8 da 63 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001d050:	5e                   	pop    esi
c001d051:	5f                   	pop    edi
c001d052:	6a 01                	push   0x1
c001d054:	53                   	push   ebx
c001d055:	e8 34 64 ff ff       	call   c001348e <File::open(FileOpenMode)>
c001d05a:	83 c4 10             	add    esp,0x10
c001d05d:	85 c0                	test   eax,eax
c001d05f:	74 0a                	je     c001d06b <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d061:	83 ec 0c             	sub    esp,0xc
c001d064:	68 e0 c9 02 c0       	push   0xc002c9e0
c001d069:	eb 34                	jmp    c001d09f <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d06b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d073:	83 ec 0c             	sub    esp,0xc
c001d076:	6a 34                	push   0x34
c001d078:	e8 97 28 ff ff       	call   c000f914 <malloc>
c001d07d:	59                   	pop    ecx
c001d07e:	89 c7                	mov    edi,eax
c001d080:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d084:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d086:	56                   	push   esi
c001d087:	57                   	push   edi
c001d088:	6a 00                	push   0x0
c001d08a:	6a 34                	push   0x34
c001d08c:	53                   	push   ebx
c001d08d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d090:	83 c4 20             	add    esp,0x20
c001d093:	85 c0                	test   eax,eax
c001d095:	74 17                	je     c001d0ae <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d097:	83 ec 0c             	sub    esp,0xc
c001d09a:	68 f7 c9 02 c0       	push   0xc002c9f7
c001d09f:	e8 e3 d7 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d0a4:	83 c4 10             	add    esp,0x10
c001d0a7:	31 c0                	xor    eax,eax
c001d0a9:	e9 31 02 00 00       	jmp    c001d2df <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d0ae:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0b4:	75 e1                	jne    c001d097 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0b6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0b9:	85 c0                	test   eax,eax
c001d0bb:	74 da                	je     c001d097 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0bd:	52                   	push   edx
c001d0be:	31 d2                	xor    edx,edx
c001d0c0:	52                   	push   edx
c001d0c1:	50                   	push   eax
c001d0c2:	53                   	push   ebx
c001d0c3:	e8 84 64 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d0c8:	83 c4 10             	add    esp,0x10
c001d0cb:	85 c0                	test   eax,eax
c001d0cd:	75 c8                	jne    c001d097 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0cf:	83 ec 0c             	sub    esp,0xc
c001d0d2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0d6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0da:	31 ed                	xor    ebp,ebp
c001d0dc:	0f af c2             	imul   eax,edx
c001d0df:	50                   	push   eax
c001d0e0:	e8 2f 28 ff ff       	call   c000f914 <malloc>
c001d0e5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d0e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0eb:	89 34 24             	mov    DWORD PTR [esp],esi
c001d0ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0f2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0fa:	0f af c2             	imul   eax,edx
c001d0fd:	99                   	cdq    
c001d0fe:	52                   	push   edx
c001d0ff:	50                   	push   eax
c001d100:	53                   	push   ebx
c001d101:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d104:	83 c4 20             	add    esp,0x20
c001d107:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d10f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d117:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d11f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d127:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d12b:	0f 86 aa 00 00 00    	jbe    c001d1db <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d131:	0f b7 f5             	movzx  esi,bp
c001d134:	6b f6 28             	imul   esi,esi,0x28
c001d137:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d13b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d13e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d142:	50                   	push   eax
c001d143:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d147:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d14b:	8b 16                	mov    edx,DWORD PTR [esi]
c001d14d:	6b c0 28             	imul   eax,eax,0x28
c001d150:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d154:	89 d0                	mov    eax,edx
c001d156:	31 d2                	xor    edx,edx
c001d158:	52                   	push   edx
c001d159:	50                   	push   eax
c001d15a:	53                   	push   ebx
c001d15b:	e8 ec 63 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d160:	83 c4 0c             	add    esp,0xc
c001d163:	6a 20                	push   0x20
c001d165:	6a 00                	push   0x0
c001d167:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d16b:	52                   	push   edx
c001d16c:	e8 0f 36 fe ff       	call   c0000780 <memset>
c001d171:	58                   	pop    eax
c001d172:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d174:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d178:	51                   	push   ecx
c001d179:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d17d:	52                   	push   edx
c001d17e:	6a 00                	push   0x0
c001d180:	6a 1f                	push   0x1f
c001d182:	53                   	push   ebx
c001d183:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d186:	83 c4 18             	add    esp,0x18
c001d189:	68 0e ca 02 c0       	push   0xc002ca0e
c001d18e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d192:	52                   	push   edx
c001d193:	e8 30 37 fe ff       	call   c00008c8 <strcmp>
c001d198:	83 c4 10             	add    esp,0x10
c001d19b:	85 c0                	test   eax,eax
c001d19d:	75 0f                	jne    c001d1ae <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d19f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1ae:	50                   	push   eax
c001d1af:	50                   	push   eax
c001d1b0:	68 16 ca 02 c0       	push   0xc002ca16
c001d1b5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d1b9:	50                   	push   eax
c001d1ba:	e8 09 37 fe ff       	call   c00008c8 <strcmp>
c001d1bf:	83 c4 10             	add    esp,0x10
c001d1c2:	85 c0                	test   eax,eax
c001d1c4:	75 0f                	jne    c001d1d5 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d1c6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1d5:	45                   	inc    ebp
c001d1d6:	e9 4c ff ff ff       	jmp    c001d127 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d1db:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d1e0:	75 10                	jne    c001d1f2 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d1e2:	83 ec 0c             	sub    esp,0xc
c001d1e5:	68 1e ca 02 c0       	push   0xc002ca1e
c001d1ea:	e8 98 d6 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d1ef:	83 c4 10             	add    esp,0x10
c001d1f2:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d1f7:	75 10                	jne    c001d209 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d1f9:	83 ec 0c             	sub    esp,0xc
c001d1fc:	68 1e ca 02 c0       	push   0xc002ca1e
c001d201:	e8 81 d6 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d206:	83 c4 10             	add    esp,0x10
c001d209:	31 d2                	xor    edx,edx
c001d20b:	50                   	push   eax
c001d20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d210:	52                   	push   edx
c001d211:	50                   	push   eax
c001d212:	53                   	push   ebx
c001d213:	e8 34 63 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d218:	5a                   	pop    edx
c001d219:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d21d:	e8 f2 26 ff ff       	call   c000f914 <malloc>
c001d222:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d226:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d22a:	31 c9                	xor    ecx,ecx
c001d22c:	5e                   	pop    esi
c001d22d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d22f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d233:	55                   	push   ebp
c001d234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d238:	51                   	push   ecx
c001d239:	52                   	push   edx
c001d23a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d23e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d242:	53                   	push   ebx
c001d243:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d246:	83 c4 14             	add    esp,0x14
c001d249:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d24d:	e8 c2 26 ff ff       	call   c000f914 <malloc>
c001d252:	89 c6                	mov    esi,eax
c001d254:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d256:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d259:	56                   	push   esi
c001d25a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d25e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d262:	51                   	push   ecx
c001d263:	52                   	push   edx
c001d264:	53                   	push   ebx
c001d265:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d268:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d26c:	8b 15 40 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032340
c001d272:	83 c4 1c             	add    esp,0x1c
c001d275:	c1 e8 04             	shr    eax,0x4
c001d278:	89 04 95 c0 21 03 c0 	mov    DWORD PTR [edx*4-0x3ffcde40],eax
c001d27f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d283:	31 d2                	xor    edx,edx
c001d285:	52                   	push   edx
c001d286:	50                   	push   eax
c001d287:	53                   	push   ebx
c001d288:	e8 bf 62 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d28d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d28f:	31 d2                	xor    edx,edx
c001d291:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d294:	56                   	push   esi
c001d295:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d299:	52                   	push   edx
c001d29a:	50                   	push   eax
c001d29b:	53                   	push   ebx
c001d29c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d29f:	83 c4 14             	add    esp,0x14
c001d2a2:	53                   	push   ebx
c001d2a3:	e8 44 62 ff ff       	call   c00134ec <File::close()>
c001d2a8:	5d                   	pop    ebp
c001d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2ad:	e8 72 26 ff ff       	call   c000f924 <free>
c001d2b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2b5:	e8 6a 26 ff ff       	call   c000f924 <free>
c001d2ba:	a1 40 23 03 c0       	mov    eax,ds:0xc0032340
c001d2bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2c3:	8d 50 01             	lea    edx,[eax+0x1]
c001d2c6:	89 0c 85 c0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd40],ecx
c001d2cd:	89 34 85 40 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcddc0],esi
c001d2d4:	89 15 40 23 03 c0    	mov    DWORD PTR ds:0xc0032340,edx
c001d2da:	83 c4 10             	add    esp,0x10
c001d2dd:	b0 01                	mov    al,0x1
c001d2df:	83 c4 5c             	add    esp,0x5c
c001d2e2:	5b                   	pop    ebx
c001d2e3:	5e                   	pop    esi
c001d2e4:	5f                   	pop    edi
c001d2e5:	5d                   	pop    ebp
c001d2e6:	c3                   	ret    

c001d2e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d2e7:	55                   	push   ebp
c001d2e8:	57                   	push   edi
c001d2e9:	56                   	push   esi
c001d2ea:	53                   	push   ebx
c001d2eb:	81 ec 68 03 00 00    	sub    esp,0x368
c001d2f1:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d2f8:	8b 1d 90 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032390
c001d2fe:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d302:	68 14 01 00 00       	push   0x114
c001d307:	e8 08 26 ff ff       	call   c000f914 <malloc>
c001d30c:	83 c4 0c             	add    esp,0xc
c001d30f:	89 c5                	mov    ebp,eax
c001d311:	53                   	push   ebx
c001d312:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d319:	50                   	push   eax
c001d31a:	e8 0b 61 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001d31f:	5e                   	pop    esi
c001d320:	5f                   	pop    edi
c001d321:	6a 01                	push   0x1
c001d323:	55                   	push   ebp
c001d324:	e8 65 61 ff ff       	call   c001348e <File::open(FileOpenMode)>
c001d329:	83 c4 10             	add    esp,0x10
c001d32c:	85 c0                	test   eax,eax
c001d32e:	0f 85 a7 06 00 00    	jne    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d334:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d33c:	83 ec 0c             	sub    esp,0xc
c001d33f:	6a 34                	push   0x34
c001d341:	e8 ce 25 ff ff       	call   c000f914 <malloc>
c001d346:	5b                   	pop    ebx
c001d347:	89 c7                	mov    edi,eax
c001d349:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d34d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d350:	53                   	push   ebx
c001d351:	57                   	push   edi
c001d352:	6a 00                	push   0x0
c001d354:	6a 34                	push   0x34
c001d356:	55                   	push   ebp
c001d357:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d35a:	83 c4 20             	add    esp,0x20
c001d35d:	85 c0                	test   eax,eax
c001d35f:	0f 85 76 06 00 00    	jne    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d365:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d36b:	0f 85 6a 06 00 00    	jne    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d371:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d374:	85 c0                	test   eax,eax
c001d376:	0f 84 5f 06 00 00    	je     c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d37c:	31 d2                	xor    edx,edx
c001d37e:	51                   	push   ecx
c001d37f:	52                   	push   edx
c001d380:	50                   	push   eax
c001d381:	55                   	push   ebp
c001d382:	e8 c5 61 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d387:	83 c4 10             	add    esp,0x10
c001d38a:	85 c0                	test   eax,eax
c001d38c:	0f 85 49 06 00 00    	jne    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d392:	83 ec 0c             	sub    esp,0xc
c001d395:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d398:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d39c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d3a0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3a4:	0f af c2             	imul   eax,edx
c001d3a7:	50                   	push   eax
c001d3a8:	e8 67 25 ff ff       	call   c000f914 <malloc>
c001d3ad:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d3bb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3c3:	0f af c2             	imul   eax,edx
c001d3c6:	99                   	cdq    
c001d3c7:	52                   	push   edx
c001d3c8:	50                   	push   eax
c001d3c9:	55                   	push   ebp
c001d3ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3cd:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d3d0:	83 c4 20             	add    esp,0x20
c001d3d3:	85 c0                	test   eax,eax
c001d3d5:	0f 84 00 06 00 00    	je     c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3db:	52                   	push   edx
c001d3dc:	31 d2                	xor    edx,edx
c001d3de:	52                   	push   edx
c001d3df:	50                   	push   eax
c001d3e0:	55                   	push   ebp
c001d3e1:	e8 66 61 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d3e6:	83 c4 10             	add    esp,0x10
c001d3e9:	85 c0                	test   eax,eax
c001d3eb:	0f 85 ea 05 00 00    	jne    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3f1:	83 ec 0c             	sub    esp,0xc
c001d3f4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d3f8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d3fc:	31 f6                	xor    esi,esi
c001d3fe:	0f af c2             	imul   eax,edx
c001d401:	50                   	push   eax
c001d402:	e8 0d 25 ff ff       	call   c000f914 <malloc>
c001d407:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d40a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d40e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d411:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d415:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d419:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d41d:	0f af c2             	imul   eax,edx
c001d420:	99                   	cdq    
c001d421:	52                   	push   edx
c001d422:	50                   	push   eax
c001d423:	55                   	push   ebp
c001d424:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d427:	83 c4 20             	add    esp,0x20
c001d42a:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d42e:	0f 86 8a 00 00 00    	jbe    c001d4be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d434:	0f b7 de             	movzx  ebx,si
c001d437:	c1 e3 05             	shl    ebx,0x5
c001d43a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d43e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d441:	75 75                	jne    c001d4b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d443:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d446:	31 d2                	xor    edx,edx
c001d448:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d44c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d44f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d453:	50                   	push   eax
c001d454:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d457:	52                   	push   edx
c001d458:	50                   	push   eax
c001d459:	55                   	push   ebp
c001d45a:	e8 ed 60 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d45f:	83 c4 10             	add    esp,0x10
c001d462:	85 c0                	test   eax,eax
c001d464:	0f 85 71 05 00 00    	jne    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d46a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d471:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d474:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d478:	31 d2                	xor    edx,edx
c001d47a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d47e:	83 ec 0c             	sub    esp,0xc
c001d481:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d485:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d48c:	50                   	push   eax
c001d48d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d495:	52                   	push   edx
c001d496:	50                   	push   eax
c001d497:	55                   	push   ebp
c001d498:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d49b:	83 c4 1c             	add    esp,0x1c
c001d49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d4a1:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d4a4:	50                   	push   eax
c001d4a5:	6a 00                	push   0x0
c001d4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ab:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d4af:	50                   	push   eax
c001d4b0:	e8 cb 32 fe ff       	call   c0000780 <memset>
c001d4b5:	83 c4 10             	add    esp,0x10
c001d4b8:	46                   	inc    esi
c001d4b9:	e9 6c ff ff ff       	jmp    c001d42a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d4be:	53                   	push   ebx
c001d4bf:	31 db                	xor    ebx,ebx
c001d4c1:	68 00 01 00 00       	push   0x100
c001d4c6:	6a 00                	push   0x0
c001d4c8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d4cc:	50                   	push   eax
c001d4cd:	e8 ae 32 fe ff       	call   c0000780 <memset>
c001d4d2:	83 c4 0c             	add    esp,0xc
c001d4d5:	68 00 01 00 00       	push   0x100
c001d4da:	6a 00                	push   0x0
c001d4dc:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d4e3:	50                   	push   eax
c001d4e4:	e8 97 32 fe ff       	call   c0000780 <memset>
c001d4e9:	83 c4 10             	add    esp,0x10
c001d4ec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d4f4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4fc:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d504:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d50c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d514:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d518:	0f 86 30 01 00 00    	jbe    c001d64e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d51e:	0f b7 f3             	movzx  esi,bx
c001d521:	6b f6 28             	imul   esi,esi,0x28
c001d524:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d528:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d52b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d52f:	52                   	push   edx
c001d530:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d534:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d538:	8b 06                	mov    eax,DWORD PTR [esi]
c001d53a:	6b d2 28             	imul   edx,edx,0x28
c001d53d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d541:	31 d2                	xor    edx,edx
c001d543:	52                   	push   edx
c001d544:	50                   	push   eax
c001d545:	55                   	push   ebp
c001d546:	e8 01 60 ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d54b:	83 c4 0c             	add    esp,0xc
c001d54e:	6a 20                	push   0x20
c001d550:	6a 00                	push   0x0
c001d552:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d559:	51                   	push   ecx
c001d55a:	e8 21 32 fe ff       	call   c0000780 <memset>
c001d55f:	59                   	pop    ecx
c001d560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d563:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d567:	52                   	push   edx
c001d568:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d56f:	51                   	push   ecx
c001d570:	6a 00                	push   0x0
c001d572:	6a 1f                	push   0x1f
c001d574:	55                   	push   ebp
c001d575:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d578:	83 c4 1c             	add    esp,0x1c
c001d57b:	6a 09                	push   0x9
c001d57d:	68 38 ca 02 c0       	push   0xc002ca38
c001d582:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d589:	51                   	push   ecx
c001d58a:	e8 d5 30 fe ff       	call   c0000664 <memcmp>
c001d58f:	83 c4 10             	add    esp,0x10
c001d592:	85 c0                	test   eax,eax
c001d594:	75 21                	jne    c001d5b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d59a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d59e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5a9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5b0:	89 d0                	mov    eax,edx
c001d5b2:	40                   	inc    eax
c001d5b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5b7:	50                   	push   eax
c001d5b8:	6a 09                	push   0x9
c001d5ba:	68 42 ca 02 c0       	push   0xc002ca42
c001d5bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5c6:	50                   	push   eax
c001d5c7:	e8 98 30 fe ff       	call   c0000664 <memcmp>
c001d5cc:	83 c4 10             	add    esp,0x10
c001d5cf:	85 c0                	test   eax,eax
c001d5d1:	75 21                	jne    c001d5f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d5d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5db:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5df:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5e6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5ed:	89 d0                	mov    eax,edx
c001d5ef:	40                   	inc    eax
c001d5f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5f4:	50                   	push   eax
c001d5f5:	50                   	push   eax
c001d5f6:	68 0e ca 02 c0       	push   0xc002ca0e
c001d5fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d602:	50                   	push   eax
c001d603:	e8 c0 32 fe ff       	call   c00008c8 <strcmp>
c001d608:	83 c4 10             	add    esp,0x10
c001d60b:	85 c0                	test   eax,eax
c001d60d:	75 0f                	jne    c001d61e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d60f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d612:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d61a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d61e:	50                   	push   eax
c001d61f:	50                   	push   eax
c001d620:	68 16 ca 02 c0       	push   0xc002ca16
c001d625:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d62c:	50                   	push   eax
c001d62d:	e8 96 32 fe ff       	call   c00008c8 <strcmp>
c001d632:	83 c4 10             	add    esp,0x10
c001d635:	85 c0                	test   eax,eax
c001d637:	75 0f                	jne    c001d648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d639:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d63c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d644:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d648:	43                   	inc    ebx
c001d649:	e9 c6 fe ff ff       	jmp    c001d514 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d64e:	31 d2                	xor    edx,edx
c001d650:	50                   	push   eax
c001d651:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d655:	52                   	push   edx
c001d656:	50                   	push   eax
c001d657:	55                   	push   ebp
c001d658:	e8 ef 5e ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d65d:	58                   	pop    eax
c001d65e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d662:	e8 ad 22 ff ff       	call   c000f914 <malloc>
c001d667:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d66a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d66e:	31 d2                	xor    edx,edx
c001d670:	58                   	pop    eax
c001d671:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d675:	53                   	push   ebx
c001d676:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d67a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d67e:	52                   	push   edx
c001d67f:	50                   	push   eax
c001d680:	55                   	push   ebp
c001d681:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d684:	83 c4 14             	add    esp,0x14
c001d687:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d68b:	e8 84 22 ff ff       	call   c000f914 <malloc>
c001d690:	31 d2                	xor    edx,edx
c001d692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d696:	83 c4 0c             	add    esp,0xc
c001d699:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d69d:	52                   	push   edx
c001d69e:	50                   	push   eax
c001d69f:	55                   	push   ebp
c001d6a0:	e8 a7 5e ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d6a5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6a8:	31 d2                	xor    edx,edx
c001d6aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6b5:	52                   	push   edx
c001d6b6:	50                   	push   eax
c001d6b7:	55                   	push   ebp
c001d6b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6bb:	83 c4 20             	add    esp,0x20
c001d6be:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d6ca:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d6ce:	0f 84 0b 03 00 00    	je     c001d9df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d6d4:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d6db:	31 d2                	xor    edx,edx
c001d6dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6e1:	c1 e8 03             	shr    eax,0x3
c001d6e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d6e8:	51                   	push   ecx
c001d6e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d6ed:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d6f1:	52                   	push   edx
c001d6f2:	50                   	push   eax
c001d6f3:	55                   	push   ebp
c001d6f4:	e8 53 5e ff ff       	call   c001354c <File::seek(unsigned long long)>
c001d6f9:	5b                   	pop    ebx
c001d6fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6fe:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d705:	e8 0a 22 ff ff       	call   c000f914 <malloc>
c001d70a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d70d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d711:	31 d2                	xor    edx,edx
c001d713:	5e                   	pop    esi
c001d714:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d718:	50                   	push   eax
c001d719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d71d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d721:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d728:	52                   	push   edx
c001d729:	50                   	push   eax
c001d72a:	55                   	push   ebp
c001d72b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d72e:	83 c4 20             	add    esp,0x20
c001d731:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d739:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d73d:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d741:	0f 8d 7c 02 00 00    	jge    c001d9c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d747:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d74b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d74f:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d754:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d757:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d75b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d75f:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d763:	89 d8                	mov    eax,ebx
c001d765:	c1 e8 08             	shr    eax,0x8
c001d768:	89 c6                	mov    esi,eax
c001d76a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d76e:	c1 e6 04             	shl    esi,0x4
c001d771:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d775:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d778:	85 d2                	test   edx,edx
c001d77a:	0f 85 bf 00 00 00    	jne    c001d83f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d780:	83 ec 0c             	sub    esp,0xc
c001d783:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d787:	03 06                	add    eax,DWORD PTR [esi]
c001d789:	50                   	push   eax
c001d78a:	e8 4b f8 ff ff       	call   c001cfda <Thr::getAddressOfKernelSymbol(char const*)>
c001d78f:	83 c4 10             	add    esp,0x10
c001d792:	89 c2                	mov    edx,eax
c001d794:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d799:	85 c0                	test   eax,eax
c001d79b:	0f 85 9e 00 00 00    	jne    c001d83f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7a1:	83 ec 0c             	sub    esp,0xc
c001d7a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7a8:	03 06                	add    eax,DWORD PTR [esi]
c001d7aa:	50                   	push   eax
c001d7ab:	e8 17 0e ff ff       	call   c000e5c7 <Krnl::resolveCompatibilitySymbol(char*)>
c001d7b0:	83 c4 10             	add    esp,0x10
c001d7b3:	89 c2                	mov    edx,eax
c001d7b5:	85 c0                	test   eax,eax
c001d7b7:	0f 85 82 00 00 00    	jne    c001d83f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d7c1:	50                   	push   eax
c001d7c2:	50                   	push   eax
c001d7c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7c7:	03 06                	add    eax,DWORD PTR [esi]
c001d7c9:	50                   	push   eax
c001d7ca:	68 4c ca 02 c0       	push   0xc002ca4c
c001d7cf:	e8 f7 56 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001d7d4:	58                   	pop    eax
c001d7d5:	5a                   	pop    edx
c001d7d6:	68 66 ca 02 c0       	push   0xc002ca66
c001d7db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7e2:	50                   	push   eax
c001d7e3:	e8 54 30 fe ff       	call   c000083c <strcpy>
c001d7e8:	59                   	pop    ecx
c001d7e9:	58                   	pop    eax
c001d7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7ee:	03 06                	add    eax,DWORD PTR [esi]
c001d7f0:	50                   	push   eax
c001d7f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7f8:	50                   	push   eax
c001d7f9:	e8 7e 31 fe ff       	call   c000097c <strcat>
c001d7fe:	58                   	pop    eax
c001d7ff:	5a                   	pop    edx
c001d800:	68 fc ca 02 c0       	push   0xc002cafc
c001d805:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d80c:	50                   	push   eax
c001d80d:	e8 6a 31 fe ff       	call   c000097c <strcat>
c001d812:	83 c4 10             	add    esp,0x10
c001d815:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d81a:	0f 84 5d 01 00 00    	je     c001d97d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d820:	83 ec 0c             	sub    esp,0xc
c001d823:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d82a:	50                   	push   eax
c001d82b:	e8 57 d0 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d830:	83 c4 10             	add    esp,0x10
c001d833:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d837:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d83b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d83f:	80 fb 01             	cmp    bl,0x1
c001d842:	0f 85 88 00 00 00    	jne    c001d8d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d848:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d84f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d853:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d857:	01 ce                	add    esi,ecx
c001d859:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d85f:	0f 94 c0             	sete   al
c001d862:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d868:	0f 94 c3             	sete   bl
c001d86b:	09 c3                	or     ebx,eax
c001d86d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d86f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d874:	74 41                	je     c001d8b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d876:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d879:	84 db                	test   bl,bl
c001d87b:	75 15                	jne    c001d892 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d87d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d881:	66 83 f8 0c          	cmp    ax,0xc
c001d885:	76 05                	jbe    c001d88c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d887:	b8 0c 00 00 00       	mov    eax,0xc
c001d88c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d890:	76 37                	jbe    c001d8c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d892:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d896:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d89b:	0f 84 dc 00 00 00    	je     c001d97d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8a1:	83 ec 0c             	sub    esp,0xc
c001d8a4:	68 7d ca 02 c0       	push   0xc002ca7d
c001d8a9:	e8 d9 cf ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d8ae:	83 c4 10             	add    esp,0x10
c001d8b1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d8b5:	eb 12                	jmp    c001d8c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8b7:	01 c1                	add    ecx,eax
c001d8b9:	84 db                	test   bl,bl
c001d8bb:	75 0c                	jne    c001d8c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8bd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8c1:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8c5:	77 02                	ja     c001d8c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8c7:	01 d1                	add    ecx,edx
c001d8c9:	89 0e                	mov    DWORD PTR [esi],ecx
c001d8cb:	e9 ea 00 00 00       	jmp    c001d9ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d8d0:	80 fb 02             	cmp    bl,0x2
c001d8d3:	75 7c                	jne    c001d951 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d8d5:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d8dc:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d8e0:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d8e4:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d8ea:	74 20                	je     c001d90c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d8ec:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d8f2:	74 18                	je     c001d90c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d8f4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8f8:	b9 0a 00 00 00       	mov    ecx,0xa
c001d8fd:	66 83 f8 0e          	cmp    ax,0xe
c001d901:	77 03                	ja     c001d906 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d903:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d906:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d90a:	76 1f                	jbe    c001d92b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d90c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d910:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d915:	74 66                	je     c001d97d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d917:	83 ec 0c             	sub    esp,0xc
c001d91a:	68 99 ca 02 c0       	push   0xc002ca99
c001d91f:	e8 63 cf ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d92b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d92d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d932:	74 13                	je     c001d947 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d934:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d938:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d93f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d943:	01 c8                	add    eax,ecx
c001d945:	eb 04                	jmp    c001d94b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d947:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d94b:	01 c2                	add    edx,eax
c001d94d:	89 16                	mov    DWORD PTR [esi],edx
c001d94f:	eb 69                	jmp    c001d9ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d951:	0f b6 db             	movzx  ebx,bl
c001d954:	50                   	push   eax
c001d955:	50                   	push   eax
c001d956:	53                   	push   ebx
c001d957:	68 b5 ca 02 c0       	push   0xc002cab5
c001d95c:	e8 6a 55 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001d961:	83 c4 10             	add    esp,0x10
c001d964:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d969:	74 12                	je     c001d97d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d96b:	83 ec 0c             	sub    esp,0xc
c001d96e:	68 c0 ca 02 c0       	push   0xc002cac0
c001d973:	e8 0f cf ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d978:	83 c4 10             	add    esp,0x10
c001d97b:	eb 3d                	jmp    c001d9ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d97d:	83 ec 0c             	sub    esp,0xc
c001d980:	55                   	push   ebp
c001d981:	e8 66 5b ff ff       	call   c00134ec <File::close()>
c001d986:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d989:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d98c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d98f:	59                   	pop    ecx
c001d990:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d994:	e8 8b 1f ff ff       	call   c000f924 <free>
c001d999:	5b                   	pop    ebx
c001d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d99e:	e8 81 1f ff ff       	call   c000f924 <free>
c001d9a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9a6:	e8 79 1f ff ff       	call   c000f924 <free>
c001d9ab:	5e                   	pop    esi
c001d9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9b0:	e8 6f 1f ff ff       	call   c000f924 <free>
c001d9b5:	83 c4 10             	add    esp,0x10
c001d9b8:	eb 21                	jmp    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d9ba:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d9be:	e9 76 fd ff ff       	jmp    c001d739 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d9c3:	83 ec 0c             	sub    esp,0xc
c001d9c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9ca:	e8 55 1f ff ff       	call   c000f924 <free>
c001d9cf:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d9d3:	83 c4 10             	add    esp,0x10
c001d9d6:	e9 eb fc ff ff       	jmp    c001d6c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d9db:	31 c0                	xor    eax,eax
c001d9dd:	eb 33                	jmp    c001da12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d9df:	83 ec 0c             	sub    esp,0xc
c001d9e2:	55                   	push   ebp
c001d9e3:	e8 04 5b ff ff       	call   c00134ec <File::close()>
c001d9e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d9eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d9ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9f1:	58                   	pop    eax
c001d9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9f6:	e8 29 1f ff ff       	call   c000f924 <free>
c001d9fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9fe:	e8 21 1f ff ff       	call   c000f924 <free>
c001da03:	5a                   	pop    edx
c001da04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da08:	e8 17 1f ff ff       	call   c000f924 <free>
c001da0d:	83 c4 10             	add    esp,0x10
c001da10:	b0 01                	mov    al,0x1
c001da12:	81 c4 5c 03 00 00    	add    esp,0x35c
c001da18:	5b                   	pop    ebx
c001da19:	5e                   	pop    esi
c001da1a:	5f                   	pop    edi
c001da1b:	5d                   	pop    ebp
c001da1c:	c3                   	ret    

c001da1d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001da1d:	56                   	push   esi
c001da1e:	31 d2                	xor    edx,edx
c001da20:	53                   	push   ebx
c001da21:	8b 1d a0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ba0
c001da27:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da2b:	39 d3                	cmp    ebx,edx
c001da2d:	7e 1b                	jle    c001da4a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001da2f:	8b 04 95 c0 1d 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce240]
c001da36:	39 c8                	cmp    eax,ecx
c001da38:	77 0d                	ja     c001da47 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001da3a:	8b 34 95 c0 1b 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce440]
c001da41:	01 c6                	add    esi,eax
c001da43:	39 ce                	cmp    esi,ecx
c001da45:	77 05                	ja     c001da4c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001da47:	42                   	inc    edx
c001da48:	eb e1                	jmp    c001da2b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001da4a:	31 c0                	xor    eax,eax
c001da4c:	5b                   	pop    ebx
c001da4d:	5e                   	pop    esi
c001da4e:	c3                   	ret    

c001da4f <Thr::getDriverNameFromAddress(unsigned long)>:
c001da4f:	53                   	push   ebx
c001da50:	31 c0                	xor    eax,eax
c001da52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da56:	8b 1d a0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ba0
c001da5c:	39 c3                	cmp    ebx,eax
c001da5e:	7e 22                	jle    c001da82 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001da60:	8b 14 85 c0 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce240]
c001da67:	39 ca                	cmp    edx,ecx
c001da69:	77 14                	ja     c001da7f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da6b:	03 14 85 c0 1b 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce440]
c001da72:	39 ca                	cmp    edx,ecx
c001da74:	76 09                	jbe    c001da7f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da76:	8b 04 85 c0 1f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce040]
c001da7d:	eb 05                	jmp    c001da84 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001da7f:	40                   	inc    eax
c001da80:	eb da                	jmp    c001da5c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001da82:	31 c0                	xor    eax,eax
c001da84:	5b                   	pop    ebx
c001da85:	c3                   	ret    

c001da86 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001da86:	53                   	push   ebx
c001da87:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001da8b:	53                   	push   ebx
c001da8c:	e8 8c ff ff ff       	call   c001da1d <Thr::getDriverBaseFromAddress(unsigned long)>
c001da91:	5a                   	pop    edx
c001da92:	31 d2                	xor    edx,edx
c001da94:	85 c0                	test   eax,eax
c001da96:	74 04                	je     c001da9c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001da98:	89 da                	mov    edx,ebx
c001da9a:	29 c2                	sub    edx,eax
c001da9c:	89 d0                	mov    eax,edx
c001da9e:	5b                   	pop    ebx
c001da9f:	c3                   	ret    

c001daa0 <Thr::loadDLL(char const*, bool)>:
c001daa0:	55                   	push   ebp
c001daa1:	57                   	push   edi
c001daa2:	56                   	push   esi
c001daa3:	53                   	push   ebx
c001daa4:	81 ec 34 01 00 00    	sub    esp,0x134
c001daaa:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dab1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dab8:	56                   	push   esi
c001dab9:	68 d8 ca 02 c0       	push   0xc002cad8
c001dabe:	e8 08 54 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001dac3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001daca:	e8 45 1e ff ff       	call   c000f914 <malloc>
c001dacf:	83 c4 0c             	add    esp,0xc
c001dad2:	89 c3                	mov    ebx,eax
c001dad4:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001dada:	56                   	push   esi
c001dadb:	50                   	push   eax
c001dadc:	e8 49 59 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001dae1:	83 c4 10             	add    esp,0x10
c001dae4:	85 db                	test   ebx,ebx
c001dae6:	75 3c                	jne    c001db24 <Thr::loadDLL(char const*, bool)+0x84>
c001dae8:	89 f8                	mov    eax,edi
c001daea:	84 c0                	test   al,al
c001daec:	0f 84 cc 01 00 00    	je     c001dcbe <Thr::loadDLL(char const*, bool)+0x21e>
c001daf2:	55                   	push   ebp
c001daf3:	55                   	push   ebp
c001daf4:	68 e9 ca 02 c0       	push   0xc002cae9
c001daf9:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dafd:	55                   	push   ebp
c001dafe:	e8 39 2d fe ff       	call   c000083c <strcpy>
c001db03:	58                   	pop    eax
c001db04:	5a                   	pop    edx
c001db05:	56                   	push   esi
c001db06:	55                   	push   ebp
c001db07:	e8 70 2e fe ff       	call   c000097c <strcat>
c001db0c:	59                   	pop    ecx
c001db0d:	58                   	pop    eax
c001db0e:	68 fc ca 02 c0       	push   0xc002cafc
c001db13:	55                   	push   ebp
c001db14:	e8 63 2e fe ff       	call   c000097c <strcat>
c001db19:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db1c:	e8 66 cd ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001db21:	83 c4 10             	add    esp,0x10
c001db24:	51                   	push   ecx
c001db25:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001db29:	50                   	push   eax
c001db2a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db2e:	50                   	push   eax
c001db2f:	53                   	push   ebx
c001db30:	e8 05 5c ff ff       	call   c001373a <File::stat(unsigned long long*, bool*)>
c001db35:	83 c4 10             	add    esp,0x10
c001db38:	85 db                	test   ebx,ebx
c001db3a:	74 0c                	je     c001db48 <Thr::loadDLL(char const*, bool)+0xa8>
c001db3c:	83 ec 0c             	sub    esp,0xc
c001db3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001db41:	53                   	push   ebx
c001db42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db45:	83 c4 10             	add    esp,0x10
c001db48:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001db4d:	75 0a                	jne    c001db59 <Thr::loadDLL(char const*, bool)+0xb9>
c001db4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db53:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001db57:	75 3c                	jne    c001db95 <Thr::loadDLL(char const*, bool)+0xf5>
c001db59:	89 f8                	mov    eax,edi
c001db5b:	84 c0                	test   al,al
c001db5d:	0f 84 43 01 00 00    	je     c001dca6 <Thr::loadDLL(char const*, bool)+0x206>
c001db63:	51                   	push   ecx
c001db64:	51                   	push   ecx
c001db65:	68 e9 ca 02 c0       	push   0xc002cae9
c001db6a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001db6e:	53                   	push   ebx
c001db6f:	e8 c8 2c fe ff       	call   c000083c <strcpy>
c001db74:	5d                   	pop    ebp
c001db75:	58                   	pop    eax
c001db76:	56                   	push   esi
c001db77:	53                   	push   ebx
c001db78:	e8 ff 2d fe ff       	call   c000097c <strcat>
c001db7d:	58                   	pop    eax
c001db7e:	5a                   	pop    edx
c001db7f:	68 fc ca 02 c0       	push   0xc002cafc
c001db84:	53                   	push   ebx
c001db85:	e8 f2 2d fe ff       	call   c000097c <strcat>
c001db8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db8d:	e8 f5 cc ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001db92:	83 c4 10             	add    esp,0x10
c001db95:	52                   	push   edx
c001db96:	6a 03                	push   0x3
c001db98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dba0:	05 ff 0f 00 00       	add    eax,0xfff
c001dba5:	83 d2 00             	adc    edx,0x0
c001dba8:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dbac:	50                   	push   eax
c001dbad:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c001dbb3:	e8 46 48 ff ff       	call   c00123fe <VAS::allocatePages(int, int)>
c001dbb8:	59                   	pop    ecx
c001dbb9:	89 c3                	mov    ebx,eax
c001dbbb:	5d                   	pop    ebp
c001dbbc:	50                   	push   eax
c001dbbd:	68 fe ca 02 c0       	push   0xc002cafe
c001dbc2:	e8 04 53 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001dbc7:	89 34 24             	mov    DWORD PTR [esp],esi
c001dbca:	e8 cd 2b fe ff       	call   c000079c <strlen>
c001dbcf:	8b 2d a0 1b 03 c0    	mov    ebp,DWORD PTR ds:0xc0031ba0
c001dbd5:	40                   	inc    eax
c001dbd6:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbd9:	e8 36 1d ff ff       	call   c000f914 <malloc>
c001dbde:	89 04 ad c0 1f 03 c0 	mov    DWORD PTR [ebp*4-0x3ffce040],eax
c001dbe5:	58                   	pop    eax
c001dbe6:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c001dbeb:	5a                   	pop    edx
c001dbec:	56                   	push   esi
c001dbed:	ff 34 85 c0 1f 03 c0 	push   DWORD PTR [eax*4-0x3ffce040]
c001dbf4:	e8 43 2c fe ff       	call   c000083c <strcpy>
c001dbf9:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c001dbfe:	8d 50 01             	lea    edx,[eax+0x1]
c001dc01:	89 1c 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],ebx
c001dc08:	89 15 a0 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba0,edx
c001dc0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dc12:	83 c4 0c             	add    esp,0xc
c001dc15:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c001dc1c:	6a 01                	push   0x1
c001dc1e:	53                   	push   ebx
c001dc1f:	56                   	push   esi
c001dc20:	e8 c2 f6 ff ff       	call   c001d2e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dc25:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dc29:	83 c4 10             	add    esp,0x10
c001dc2c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dc31:	0f 85 83 00 00 00    	jne    c001dcba <Thr::loadDLL(char const*, bool)+0x21a>
c001dc37:	89 f8                	mov    eax,edi
c001dc39:	84 c0                	test   al,al
c001dc3b:	74 6d                	je     c001dcaa <Thr::loadDLL(char const*, bool)+0x20a>
c001dc3d:	83 ec 0c             	sub    esp,0xc
c001dc40:	68 0b cb 02 c0       	push   0xc002cb0b
c001dc45:	e8 3d cc ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001dc4a:	83 c4 10             	add    esp,0x10
c001dc4d:	eb 5b                	jmp    c001dcaa <Thr::loadDLL(char const*, bool)+0x20a>
c001dc4f:	89 ee                	mov    esi,ebp
c001dc51:	50                   	push   eax
c001dc52:	c1 e6 0c             	shl    esi,0xc
c001dc55:	50                   	push   eax
c001dc56:	01 de                	add    esi,ebx
c001dc58:	56                   	push   esi
c001dc59:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c001dc5f:	e8 02 43 ff ff       	call   c0011f66 <VAS::getPageTableEntry(unsigned long)>
c001dc64:	83 c4 10             	add    esp,0x10
c001dc67:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dc6a:	75 0c                	jne    c001dc78 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dc6c:	83 ec 0c             	sub    esp,0xc
c001dc6f:	56                   	push   esi
c001dc70:	e8 81 22 ff ff       	call   c000fef6 <Phys::freePage(unsigned long)>
c001dc75:	83 c4 10             	add    esp,0x10
c001dc78:	45                   	inc    ebp
c001dc79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc81:	05 ff 0f 00 00       	add    eax,0xfff
c001dc86:	bf 00 00 00 00       	mov    edi,0x0
c001dc8b:	83 d2 00             	adc    edx,0x0
c001dc8e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dc92:	c1 ea 0c             	shr    edx,0xc
c001dc95:	39 c5                	cmp    ebp,eax
c001dc97:	89 d1                	mov    ecx,edx
c001dc99:	89 f8                	mov    eax,edi
c001dc9b:	19 c8                	sbb    eax,ecx
c001dc9d:	72 b0                	jb     c001dc4f <Thr::loadDLL(char const*, bool)+0x1af>
c001dc9f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dca4:	75 18                	jne    c001dcbe <Thr::loadDLL(char const*, bool)+0x21e>
c001dca6:	31 db                	xor    ebx,ebx
c001dca8:	eb 14                	jmp    c001dcbe <Thr::loadDLL(char const*, bool)+0x21e>
c001dcaa:	83 ec 0c             	sub    esp,0xc
c001dcad:	68 2a cb 02 c0       	push   0xc002cb2a
c001dcb2:	e8 d0 cb ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001dcb7:	83 c4 10             	add    esp,0x10
c001dcba:	31 ed                	xor    ebp,ebp
c001dcbc:	eb bb                	jmp    c001dc79 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dcbe:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dcc4:	89 d8                	mov    eax,ebx
c001dcc6:	5b                   	pop    ebx
c001dcc7:	5e                   	pop    esi
c001dcc8:	5f                   	pop    edi
c001dcc9:	5d                   	pop    ebp
c001dcca:	c3                   	ret    

c001dccb <Thr::executeDLL(unsigned long, void*)>:
c001dccb:	56                   	push   esi
c001dccc:	53                   	push   ebx
c001dccd:	52                   	push   edx
c001dcce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcd2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dcd6:	85 db                	test   ebx,ebx
c001dcd8:	75 10                	jne    c001dcea <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dcda:	83 ec 0c             	sub    esp,0xc
c001dcdd:	68 46 cb 02 c0       	push   0xc002cb46
c001dce2:	e8 a0 cb ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001dce7:	83 c4 10             	add    esp,0x10
c001dcea:	50                   	push   eax
c001dceb:	50                   	push   eax
c001dcec:	53                   	push   ebx
c001dced:	68 70 cb 02 c0       	push   0xc002cb70
c001dcf2:	e8 d4 51 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001dcf7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dcfb:	89 d8                	mov    eax,ebx
c001dcfd:	83 c4 14             	add    esp,0x14
c001dd00:	5b                   	pop    ebx
c001dd01:	5e                   	pop    esi
c001dd02:	ff e0                	jmp    eax

c001dd04 <userModeEntryPoint(void*)>:
c001dd04:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001dd09:	48                   	dec    eax
c001dd0a:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001dd0f:	75 01                	jne    c001dd12 <userModeEntryPoint(void*)+0xe>
c001dd11:	fb                   	sti    
c001dd12:	fb                   	sti    
c001dd13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd18:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd1b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dd21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd25:	e9 00 26 fe ff       	jmp    c000032a <goToUsermode>

c001dd2a <changeTSS>:
c001dd2a:	83 ec 14             	sub    esp,0x14
c001dd2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd32:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dd35:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dd3a:	c1 e2 15             	shl    edx,0x15
c001dd3d:	29 d0                	sub    eax,edx
c001dd3f:	50                   	push   eax
c001dd40:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001dd45:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd4b:	05 7c 11 00 00       	add    eax,0x117c
c001dd50:	50                   	push   eax
c001dd51:	e8 ae 36 ff ff       	call   c0011404 <TSS::setESP(unsigned long)>
c001dd56:	83 c4 1c             	add    esp,0x1c
c001dd59:	c3                   	ret    

c001dd5a <switchToThread(ThreadControlBlock*)>:
c001dd5a:	57                   	push   edi
c001dd5b:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001dd60:	56                   	push   esi
c001dd61:	85 c0                	test   eax,eax
c001dd63:	53                   	push   ebx
c001dd64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd68:	0f 85 88 00 00 00    	jne    c001ddf6 <switchToThread(ThreadControlBlock*)+0x9c>
c001dd6e:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dd71:	3c ff                	cmp    al,0xff
c001dd73:	74 7d                	je     c001ddf2 <switchToThread(ThreadControlBlock*)+0x98>
c001dd75:	0f b6 d0             	movzx  edx,al
c001dd78:	b8 84 03 00 00       	mov    eax,0x384
c001dd7d:	29 d0                	sub    eax,edx
c001dd7f:	c1 e0 10             	shl    eax,0x10
c001dd82:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dd85:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd88:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c001dd8d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd93:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dd9a:	74 4a                	je     c001dde6 <switchToThread(ThreadControlBlock*)+0x8c>
c001dd9c:	0f 31                	rdtsc  
c001dd9e:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001dda3:	89 c6                	mov    esi,eax
c001dda5:	89 d7                	mov    edi,edx
c001dda7:	2b 35 98 23 03 c0    	sub    esi,DWORD PTR ds:0xc0032398
c001ddad:	89 15 ac 23 03 c0    	mov    DWORD PTR ds:0xc00323ac,edx
c001ddb3:	1b 3d 9c 23 03 c0    	sbb    edi,DWORD PTR ds:0xc003239c
c001ddb9:	89 35 a0 23 03 c0    	mov    DWORD PTR ds:0xc00323a0,esi
c001ddbf:	a3 98 23 03 c0       	mov    ds:0xc0032398,eax
c001ddc4:	89 3d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,edi
c001ddca:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001ddd0:	89 15 9c 23 03 c0    	mov    DWORD PTR ds:0xc003239c,edx
c001ddd6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ddd9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001dddc:	01 c6                	add    esi,eax
c001ddde:	11 d7                	adc    edi,edx
c001dde0:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001dde3:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001dde6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ddea:	5b                   	pop    ebx
c001ddeb:	5e                   	pop    esi
c001ddec:	5f                   	pop    edi
c001dded:	e9 70 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001ddf2:	31 c0                	xor    eax,eax
c001ddf4:	eb 8f                	jmp    c001dd85 <switchToThread(ThreadControlBlock*)+0x2b>
c001ddf6:	5b                   	pop    ebx
c001ddf7:	c7 05 60 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x1
c001de01:	5e                   	pop    esi
c001de02:	5f                   	pop    edi
c001de03:	c3                   	ret    

c001de04 <Process::addArgs(char**)>:
c001de04:	57                   	push   edi
c001de05:	56                   	push   esi
c001de06:	53                   	push   ebx
c001de07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de0b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001de0f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001de19:	85 ff                	test   edi,edi
c001de1b:	74 3d                	je     c001de5a <Process::addArgs(char**)+0x56>
c001de1d:	8b 07                	mov    eax,DWORD PTR [edi]
c001de1f:	85 c0                	test   eax,eax
c001de21:	74 37                	je     c001de5a <Process::addArgs(char**)+0x56>
c001de23:	31 db                	xor    ebx,ebx
c001de25:	83 ec 0c             	sub    esp,0xc
c001de28:	50                   	push   eax
c001de29:	e8 6e 29 fe ff       	call   c000079c <strlen>
c001de2e:	40                   	inc    eax
c001de2f:	89 04 24             	mov    DWORD PTR [esp],eax
c001de32:	e8 dd 1a ff ff       	call   c000f914 <malloc>
c001de37:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001de3e:	5a                   	pop    edx
c001de3f:	59                   	pop    ecx
c001de40:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001de43:	43                   	inc    ebx
c001de44:	50                   	push   eax
c001de45:	e8 f2 29 fe ff       	call   c000083c <strcpy>
c001de4a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001de50:	83 c4 10             	add    esp,0x10
c001de53:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001de56:	85 c0                	test   eax,eax
c001de58:	75 cb                	jne    c001de25 <Process::addArgs(char**)+0x21>
c001de5a:	5b                   	pop    ebx
c001de5b:	5e                   	pop    esi
c001de5c:	5f                   	pop    edi
c001de5d:	c3                   	ret    

c001de5e <Process::Process(char const*, Process*, char**)>:
c001de5e:	56                   	push   esi
c001de5f:	53                   	push   ebx
c001de60:	83 ec 14             	sub    esp,0x14
c001de63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de67:	05 0c 02 00 00       	add    eax,0x20c
c001de6c:	bb 07 00 00 00       	mov    ebx,0x7
c001de71:	89 c6                	mov    esi,eax
c001de73:	85 db                	test   ebx,ebx
c001de75:	78 12                	js     c001de89 <Process::Process(char const*, Process*, char**)+0x2b>
c001de77:	83 ec 0c             	sub    esp,0xc
c001de7a:	56                   	push   esi
c001de7b:	e8 c2 b6 00 00       	call   c0029542 <ThreadControlBlock::ThreadControlBlock()>
c001de80:	83 c4 10             	add    esp,0x10
c001de83:	83 c6 63             	add    esi,0x63
c001de86:	4b                   	dec    ebx
c001de87:	eb ea                	jmp    c001de73 <Process::Process(char const*, Process*, char**)+0x15>
c001de89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de8d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001de94:	83 ec 0c             	sub    esp,0xc
c001de97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de9b:	e8 38 c8 ff ff       	call   c001a6d8 <Krnl::newProcessEnv(Process*)>
c001dea0:	83 c4 10             	add    esp,0x10
c001dea3:	89 c2                	mov    edx,eax
c001dea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dea9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001deaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deb3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001debc:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c001dec1:	8d 50 01             	lea    edx,[eax+0x1]
c001dec4:	89 15 b0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b0,edx
c001deca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dece:	89 02                	mov    DWORD PTR [edx],eax
c001ded0:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001ded8:	83 ec 0c             	sub    esp,0xc
c001dedb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dedf:	e8 30 1a ff ff       	call   c000f914 <malloc>
c001dee4:	83 c4 10             	add    esp,0x10
c001dee7:	89 c3                	mov    ebx,eax
c001dee9:	83 ec 08             	sub    esp,0x8
c001deec:	6a 00                	push   0x0
c001deee:	53                   	push   ebx
c001deef:	e8 b2 48 ff ff       	call   c00127a6 <VAS::VAS(bool)>
c001def4:	83 c4 10             	add    esp,0x10
c001def7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001defb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001df01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df05:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df17:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001df1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df21:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df27:	85 c0                	test   eax,eax
c001df29:	74 42                	je     c001df6d <Process::Process(char const*, Process*, char**)+0x10f>
c001df2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df2f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df35:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df3f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001df45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df49:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df4f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001df55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df59:	05 0c 01 00 00       	add    eax,0x10c
c001df5e:	83 ec 08             	sub    esp,0x8
c001df61:	52                   	push   edx
c001df62:	50                   	push   eax
c001df63:	e8 d4 28 fe ff       	call   c000083c <strcpy>
c001df68:	83 c4 10             	add    esp,0x10
c001df6b:	eb 63                	jmp    c001dfd0 <Process::Process(char const*, Process*, char**)+0x172>
c001df6d:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001df75:	83 ec 0c             	sub    esp,0xc
c001df78:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001df7c:	e8 93 19 ff ff       	call   c000f914 <malloc>
c001df81:	83 c4 10             	add    esp,0x10
c001df84:	89 c3                	mov    ebx,eax
c001df86:	83 ec 08             	sub    esp,0x8
c001df89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df8d:	53                   	push   ebx
c001df8e:	e8 53 31 ff ff       	call   c00110e6 <VgaText::VgaText(char const*)>
c001df93:	83 c4 10             	add    esp,0x10
c001df96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df9a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dfa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfa4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfaa:	83 ec 0c             	sub    esp,0xc
c001dfad:	50                   	push   eax
c001dfae:	e8 6a 26 ff ff       	call   c001061d <addToTerminalCycle(VgaText*)>
c001dfb3:	83 c4 10             	add    esp,0x10
c001dfb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfba:	05 0c 01 00 00       	add    eax,0x10c
c001dfbf:	83 ec 08             	sub    esp,0x8
c001dfc2:	68 8f cb 02 c0       	push   0xc002cb8f
c001dfc7:	50                   	push   eax
c001dfc8:	e8 6f 28 fe ff       	call   c000083c <strcpy>
c001dfcd:	83 c4 10             	add    esp,0x10
c001dfd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfd4:	83 c0 0c             	add    eax,0xc
c001dfd7:	83 ec 08             	sub    esp,0x8
c001dfda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfde:	50                   	push   eax
c001dfdf:	e8 58 28 fe ff       	call   c000083c <strcpy>
c001dfe4:	83 c4 10             	add    esp,0x10
c001dfe7:	83 ec 08             	sub    esp,0x8
c001dfea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dfee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dff2:	e8 0d fe ff ff       	call   c001de04 <Process::addArgs(char**)>
c001dff7:	83 c4 10             	add    esp,0x10
c001dffa:	83 ec 08             	sub    esp,0x8
c001dffd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e001:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e005:	e8 a7 ed ff ff       	call   c001cdb1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e00a:	83 c4 10             	add    esp,0x10
c001e00d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e011:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e015:	83 f0 01             	xor    eax,0x1
c001e018:	88 c2                	mov    dl,al
c001e01a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e01e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e024:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e029:	83 ec 08             	sub    esp,0x8
c001e02c:	50                   	push   eax
c001e02d:	68 bc cc 02 c0       	push   0xc002ccbc
c001e032:	e8 94 4e ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e037:	83 c4 10             	add    esp,0x10
c001e03a:	90                   	nop
c001e03b:	83 c4 14             	add    esp,0x14
c001e03e:	5b                   	pop    ebx
c001e03f:	5e                   	pop    esi
c001e040:	c3                   	ret    
c001e041:	90                   	nop

c001e042 <Process::Process(bool, char const*, Process*, char**)>:
c001e042:	56                   	push   esi
c001e043:	53                   	push   ebx
c001e044:	83 ec 24             	sub    esp,0x24
c001e047:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e04b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e04f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e053:	05 0c 02 00 00       	add    eax,0x20c
c001e058:	bb 07 00 00 00       	mov    ebx,0x7
c001e05d:	89 c6                	mov    esi,eax
c001e05f:	85 db                	test   ebx,ebx
c001e061:	78 12                	js     c001e075 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e063:	83 ec 0c             	sub    esp,0xc
c001e066:	56                   	push   esi
c001e067:	e8 d6 b4 00 00       	call   c0029542 <ThreadControlBlock::ThreadControlBlock()>
c001e06c:	83 c4 10             	add    esp,0x10
c001e06f:	83 c6 63             	add    esi,0x63
c001e072:	4b                   	dec    ebx
c001e073:	eb ea                	jmp    c001e05f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e075:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e079:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e080:	83 ec 0c             	sub    esp,0xc
c001e083:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e087:	e8 4c c6 ff ff       	call   c001a6d8 <Krnl::newProcessEnv(Process*)>
c001e08c:	83 c4 10             	add    esp,0x10
c001e08f:	89 c2                	mov    edx,eax
c001e091:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e095:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e09b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e09f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e0a8:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c001e0ad:	8d 50 01             	lea    edx,[eax+0x1]
c001e0b0:	89 15 b0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b0,edx
c001e0b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e0ba:	89 02                	mov    DWORD PTR [edx],eax
c001e0bc:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e0c4:	83 ec 0c             	sub    esp,0xc
c001e0c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e0cb:	e8 44 18 ff ff       	call   c000f914 <malloc>
c001e0d0:	83 c4 10             	add    esp,0x10
c001e0d3:	89 c3                	mov    ebx,eax
c001e0d5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e0da:	83 ec 08             	sub    esp,0x8
c001e0dd:	50                   	push   eax
c001e0de:	53                   	push   ebx
c001e0df:	e8 c2 46 ff ff       	call   c00127a6 <VAS::VAS(bool)>
c001e0e4:	83 c4 10             	add    esp,0x10
c001e0e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0eb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e0f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0f5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e0ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e103:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e107:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e10d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e111:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e117:	85 c0                	test   eax,eax
c001e119:	74 42                	je     c001e15d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e11b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e11f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e125:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e12b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e12f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e139:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e13f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e145:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e149:	05 0c 01 00 00       	add    eax,0x10c
c001e14e:	83 ec 08             	sub    esp,0x8
c001e151:	52                   	push   edx
c001e152:	50                   	push   eax
c001e153:	e8 e4 26 fe ff       	call   c000083c <strcpy>
c001e158:	83 c4 10             	add    esp,0x10
c001e15b:	eb 63                	jmp    c001e1c0 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e15d:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e165:	83 ec 0c             	sub    esp,0xc
c001e168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e16c:	e8 a3 17 ff ff       	call   c000f914 <malloc>
c001e171:	83 c4 10             	add    esp,0x10
c001e174:	89 c3                	mov    ebx,eax
c001e176:	83 ec 08             	sub    esp,0x8
c001e179:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e17d:	53                   	push   ebx
c001e17e:	e8 63 2f ff ff       	call   c00110e6 <VgaText::VgaText(char const*)>
c001e183:	83 c4 10             	add    esp,0x10
c001e186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e18a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e190:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e194:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e19a:	83 ec 0c             	sub    esp,0xc
c001e19d:	50                   	push   eax
c001e19e:	e8 7a 24 ff ff       	call   c001061d <addToTerminalCycle(VgaText*)>
c001e1a3:	83 c4 10             	add    esp,0x10
c001e1a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1aa:	05 0c 01 00 00       	add    eax,0x10c
c001e1af:	83 ec 08             	sub    esp,0x8
c001e1b2:	68 8f cb 02 c0       	push   0xc002cb8f
c001e1b7:	50                   	push   eax
c001e1b8:	e8 7f 26 fe ff       	call   c000083c <strcpy>
c001e1bd:	83 c4 10             	add    esp,0x10
c001e1c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1c4:	83 c0 0c             	add    eax,0xc
c001e1c7:	83 ec 08             	sub    esp,0x8
c001e1ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e1ce:	50                   	push   eax
c001e1cf:	e8 68 26 fe ff       	call   c000083c <strcpy>
c001e1d4:	83 c4 10             	add    esp,0x10
c001e1d7:	83 ec 08             	sub    esp,0x8
c001e1da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e1de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1e2:	e8 1d fc ff ff       	call   c001de04 <Process::addArgs(char**)>
c001e1e7:	83 c4 10             	add    esp,0x10
c001e1ea:	90                   	nop
c001e1eb:	83 c4 24             	add    esp,0x24
c001e1ee:	5b                   	pop    ebx
c001e1ef:	5e                   	pop    esi
c001e1f0:	c3                   	ret    

c001e1f1 <taskStartupFunction>:
c001e1f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1f6:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e1f9:	c3                   	ret    

c001e1fa <Semaphore::Semaphore(int)>:
c001e1fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e202:	89 10                	mov    DWORD PTR [eax],edx
c001e204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e208:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e20f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e213:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e21a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e21e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e225:	90                   	nop
c001e226:	c3                   	ret    
c001e227:	90                   	nop

c001e228 <Mutex::Mutex()>:
c001e228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e22c:	6a 01                	push   0x1
c001e22e:	50                   	push   eax
c001e22f:	e8 c6 ff ff ff       	call   c001e1fa <Semaphore::Semaphore(int)>
c001e234:	83 c4 08             	add    esp,0x8
c001e237:	90                   	nop
c001e238:	c3                   	ret    
c001e239:	90                   	nop

c001e23a <Process::createThread(void (*)(void*), void*, int)>:
c001e23a:	55                   	push   ebp
c001e23b:	31 c9                	xor    ecx,ecx
c001e23d:	57                   	push   edi
c001e23e:	56                   	push   esi
c001e23f:	53                   	push   ebx
c001e240:	83 ec 1c             	sub    esp,0x1c
c001e243:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e247:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e24e:	89 f2                	mov    edx,esi
c001e250:	0f b7 c2             	movzx  eax,dx
c001e253:	83 e2 01             	and    edx,0x1
c001e256:	74 16                	je     c001e26e <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e258:	d1 f8                	sar    eax,1
c001e25a:	41                   	inc    ecx
c001e25b:	89 c2                	mov    edx,eax
c001e25d:	83 f9 10             	cmp    ecx,0x10
c001e260:	75 ee                	jne    c001e250 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e262:	83 c4 1c             	add    esp,0x1c
c001e265:	31 db                	xor    ebx,ebx
c001e267:	89 d8                	mov    eax,ebx
c001e269:	5b                   	pop    ebx
c001e26a:	5e                   	pop    esi
c001e26b:	5f                   	pop    edi
c001e26c:	5d                   	pop    ebp
c001e26d:	c3                   	ret    
c001e26e:	b8 01 00 00 00       	mov    eax,0x1
c001e273:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e276:	d3 e0                	shl    eax,cl
c001e278:	09 c6                	or     esi,eax
c001e27a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e27d:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e284:	89 c6                	mov    esi,eax
c001e286:	c1 e6 05             	shl    esi,0x5
c001e289:	01 f0                	add    eax,esi
c001e28b:	01 d8                	add    eax,ebx
c001e28d:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e294:	75 0a                	jne    c001e2a0 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e296:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e2a0:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e2a6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e2aa:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e2ad:	01 ca                	add    edx,ecx
c001e2af:	83 ec 08             	sub    esp,0x8
c001e2b2:	89 d0                	mov    eax,edx
c001e2b4:	c1 e0 05             	shl    eax,0x5
c001e2b7:	01 d0                	add    eax,edx
c001e2b9:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e2bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e2c1:	01 d8                	add    eax,ebx
c001e2c3:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e2c9:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e2cf:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e2d5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e2db:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e2e1:	89 cd                	mov    ebp,ecx
c001e2e3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e2e7:	f7 dd                	neg    ebp
c001e2e9:	c1 e5 15             	shl    ebp,0x15
c001e2ec:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e2f2:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e2f8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e302:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e308:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e312:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e31c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e320:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e327:	53                   	push   ebx
c001e328:	68 84 23 03 c0       	push   0xc0032384
c001e32d:	e8 ca af 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e332:	89 d8                	mov    eax,ebx
c001e334:	83 c4 10             	add    esp,0x10
c001e337:	83 c4 1c             	add    esp,0x1c
c001e33a:	5b                   	pop    ebx
c001e33b:	5e                   	pop    esi
c001e33c:	5f                   	pop    edi
c001e33d:	5d                   	pop    ebp
c001e33e:	c3                   	ret    
c001e33f:	90                   	nop

c001e340 <Process::createUserThread()>:
c001e340:	83 ec 0c             	sub    esp,0xc
c001e343:	68 80 00 00 00       	push   0x80
c001e348:	6a 00                	push   0x0
c001e34a:	68 04 dd 01 c0       	push   0xc001dd04
c001e34f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e353:	e8 e2 fe ff ff       	call   c001e23a <Process::createThread(void (*)(void*), void*, int)>
c001e358:	83 c4 1c             	add    esp,0x1c
c001e35b:	c3                   	ret    

c001e35c <setupMultitasking(void (*)())>:
c001e35c:	56                   	push   esi
c001e35d:	53                   	push   ebx
c001e35e:	51                   	push   ecx
c001e35f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e363:	eb 10                	jmp    c001e375 <setupMultitasking(void (*)())+0x19>
c001e365:	83 ec 0c             	sub    esp,0xc
c001e368:	68 84 23 03 c0       	push   0xc0032384
c001e36d:	e8 dc ae 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e372:	83 c4 10             	add    esp,0x10
c001e375:	83 ec 0c             	sub    esp,0xc
c001e378:	68 84 23 03 c0       	push   0xc0032384
c001e37d:	e8 a8 ae 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e382:	83 c4 10             	add    esp,0x10
c001e385:	84 c0                	test   al,al
c001e387:	74 dc                	je     c001e365 <setupMultitasking(void (*)())+0x9>
c001e389:	83 ec 0c             	sub    esp,0xc
c001e38c:	68 3f 07 00 00       	push   0x73f
c001e391:	e8 7e 15 ff ff       	call   c000f914 <malloc>
c001e396:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e39d:	89 c3                	mov    ebx,eax
c001e39f:	6a 00                	push   0x0
c001e3a1:	68 93 cb 02 c0       	push   0xc002cb93
c001e3a6:	6a 01                	push   0x1
c001e3a8:	50                   	push   eax
c001e3a9:	e8 94 fc ff ff       	call   c001e042 <Process::Process(bool, char const*, Process*, char**)>
c001e3ae:	83 c4 18             	add    esp,0x18
c001e3b1:	89 1d 90 23 03 c0    	mov    DWORD PTR ds:0xc0032390,ebx
c001e3b7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3bd:	68 e4 cc 02 c0       	push   0xc002cce4
c001e3c2:	e8 04 4b ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e3c7:	58                   	pop    eax
c001e3c8:	5a                   	pop    edx
c001e3c9:	6a 63                	push   0x63
c001e3cb:	68 18 cd 02 c0       	push   0xc002cd18
c001e3d0:	e8 f6 4a ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e3d5:	59                   	pop    ecx
c001e3d6:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3dc:	e8 0d 29 ff ff       	call   c0010cee <setActiveTerminal(VgaText*)>
c001e3e1:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e3e9:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e3f3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e3f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e3fc:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e406:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e40c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e412:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e41c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e426:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e430:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e436:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e440:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e446:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e450:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e456:	58                   	pop    eax
c001e457:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e45d:	5a                   	pop    edx
c001e45e:	68 8f cb 02 c0       	push   0xc002cb8f
c001e463:	50                   	push   eax
c001e464:	e8 d3 23 fe ff       	call   c000083c <strcpy>
c001e469:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e470:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e474:	83 c4 14             	add    esp,0x14
c001e477:	5b                   	pop    ebx
c001e478:	5e                   	pop    esi
c001e479:	e9 d6 1e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e47e <schedule()>:
c001e47e:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e483:	85 c0                	test   eax,eax
c001e485:	74 0b                	je     c001e492 <schedule()+0x14>
c001e487:	c7 05 60 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x1
c001e491:	c3                   	ret    
c001e492:	53                   	push   ebx
c001e493:	83 ec 14             	sub    esp,0x14
c001e496:	68 84 23 03 c0       	push   0xc0032384
c001e49b:	e8 8a ad 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4a0:	83 c4 10             	add    esp,0x10
c001e4a3:	84 c0                	test   al,al
c001e4a5:	75 38                	jne    c001e4df <schedule()+0x61>
c001e4a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e4af:	4a                   	dec    edx
c001e4b0:	74 32                	je     c001e4e4 <schedule()+0x66>
c001e4b2:	83 ec 0c             	sub    esp,0xc
c001e4b5:	68 84 23 03 c0       	push   0xc0032384
c001e4ba:	e8 87 ad 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4bf:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e4c6:	89 c3                	mov    ebx,eax
c001e4c8:	e8 81 ad 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e4cd:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e4d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4d7:	e8 7e f8 ff ff       	call   c001dd5a <switchToThread(ThreadControlBlock*)>
c001e4dc:	83 c4 10             	add    esp,0x10
c001e4df:	83 c4 08             	add    esp,0x8
c001e4e2:	5b                   	pop    ebx
c001e4e3:	c3                   	ret    
c001e4e4:	83 ec 08             	sub    esp,0x8
c001e4e7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e4ee:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e4f4:	68 84 23 03 c0       	push   0xc0032384
c001e4f9:	e8 fe ad 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4fe:	83 c4 10             	add    esp,0x10
c001e501:	eb af                	jmp    c001e4b2 <schedule()+0x34>
c001e503:	90                   	nop

c001e504 <Semaphore::tryAcquire()>:
c001e504:	53                   	push   ebx
c001e505:	83 ec 08             	sub    esp,0x8
c001e508:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e50c:	fa                   	cli    
c001e50d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e512:	8d 50 01             	lea    edx,[eax+0x1]
c001e515:	89 15 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,edx
c001e51b:	8b 15 64 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032364
c001e521:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e524:	89 1d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ebx
c001e52a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e52d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e52f:	7c 2a                	jl     c001e55b <Semaphore::tryAcquire()+0x57>
c001e531:	89 15 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,edx
c001e537:	85 d2                	test   edx,edx
c001e539:	75 0a                	jne    c001e545 <Semaphore::tryAcquire()+0x41>
c001e53b:	8b 15 60 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032360
c001e541:	85 d2                	test   edx,edx
c001e543:	75 5b                	jne    c001e5a0 <Semaphore::tryAcquire()+0x9c>
c001e545:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e54a:	85 c0                	test   eax,eax
c001e54c:	74 07                	je     c001e555 <Semaphore::tryAcquire()+0x51>
c001e54e:	31 c0                	xor    eax,eax
c001e550:	83 c4 08             	add    esp,0x8
c001e553:	5b                   	pop    ebx
c001e554:	c3                   	ret    
c001e555:	fb                   	sti    
c001e556:	83 c4 08             	add    esp,0x8
c001e559:	5b                   	pop    ebx
c001e55a:	c3                   	ret    
c001e55b:	43                   	inc    ebx
c001e55c:	89 15 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,edx
c001e562:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e565:	85 d2                	test   edx,edx
c001e567:	75 1f                	jne    c001e588 <Semaphore::tryAcquire()+0x84>
c001e569:	8b 0d 60 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032360
c001e56f:	85 c9                	test   ecx,ecx
c001e571:	74 15                	je     c001e588 <Semaphore::tryAcquire()+0x84>
c001e573:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e57d:	e8 fc fe ff ff       	call   c001e47e <schedule()>
c001e582:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e587:	48                   	dec    eax
c001e588:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e58d:	85 c0                	test   eax,eax
c001e58f:	75 08                	jne    c001e599 <Semaphore::tryAcquire()+0x95>
c001e591:	fb                   	sti    
c001e592:	b0 01                	mov    al,0x1
c001e594:	83 c4 08             	add    esp,0x8
c001e597:	5b                   	pop    ebx
c001e598:	c3                   	ret    
c001e599:	b0 01                	mov    al,0x1
c001e59b:	83 c4 08             	add    esp,0x8
c001e59e:	5b                   	pop    ebx
c001e59f:	c3                   	ret    
c001e5a0:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e5aa:	e8 cf fe ff ff       	call   c001e47e <schedule()>
c001e5af:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e5b4:	48                   	dec    eax
c001e5b5:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e5ba:	85 c0                	test   eax,eax
c001e5bc:	75 90                	jne    c001e54e <Semaphore::tryAcquire()+0x4a>
c001e5be:	eb 95                	jmp    c001e555 <Semaphore::tryAcquire()+0x51>

c001e5c0 <Semaphore::assertLocked(char const*)>:
c001e5c0:	83 ec 0c             	sub    esp,0xc
c001e5c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e5c7:	fa                   	cli    
c001e5c8:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e5ce:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e5d3:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5d6:	89 0d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ecx
c001e5dc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e5de:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e5e1:	7c 24                	jl     c001e607 <Semaphore::assertLocked(char const*)+0x47>
c001e5e3:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e5e8:	85 c0                	test   eax,eax
c001e5ea:	75 09                	jne    c001e5f5 <Semaphore::assertLocked(char const*)+0x35>
c001e5ec:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e5f1:	85 c0                	test   eax,eax
c001e5f3:	75 29                	jne    c001e61e <Semaphore::assertLocked(char const*)+0x5e>
c001e5f5:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e5fa:	48                   	dec    eax
c001e5fb:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e600:	75 01                	jne    c001e603 <Semaphore::assertLocked(char const*)+0x43>
c001e602:	fb                   	sti    
c001e603:	83 c4 0c             	add    esp,0xc
c001e606:	c3                   	ret    
c001e607:	83 ec 0c             	sub    esp,0xc
c001e60a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e60e:	e8 74 c2 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001e613:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e618:	83 c4 10             	add    esp,0x10
c001e61b:	48                   	dec    eax
c001e61c:	eb c5                	jmp    c001e5e3 <Semaphore::assertLocked(char const*)+0x23>
c001e61e:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e628:	e8 51 fe ff ff       	call   c001e47e <schedule()>
c001e62d:	eb c6                	jmp    c001e5f5 <Semaphore::assertLocked(char const*)+0x35>

c001e62f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e62f:	83 ec 14             	sub    esp,0x14
c001e632:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c001e638:	68 3c cd 02 c0       	push   0xc002cd3c
c001e63d:	e8 89 48 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e642:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e647:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e64b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e64e:	e8 2b fe ff ff       	call   c001e47e <schedule()>
c001e653:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e658:	83 c4 10             	add    esp,0x10
c001e65b:	48                   	dec    eax
c001e65c:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e661:	85 c0                	test   eax,eax
c001e663:	75 06                	jne    c001e66b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e665:	fb                   	sti    
c001e666:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e66b:	83 ec 08             	sub    esp,0x8
c001e66e:	50                   	push   eax
c001e66f:	68 70 cd 02 c0       	push   0xc002cd70
c001e674:	e8 52 48 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e679:	83 c4 1c             	add    esp,0x1c
c001e67c:	c3                   	ret    

c001e67d <blockTask(TaskState)>:
c001e67d:	83 ec 0c             	sub    esp,0xc
c001e680:	fa                   	cli    
c001e681:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e68b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e690:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e693:	e8 e6 fd ff ff       	call   c001e47e <schedule()>
c001e698:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e69d:	48                   	dec    eax
c001e69e:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e6a3:	75 01                	jne    c001e6a6 <blockTask(TaskState)+0x29>
c001e6a5:	fb                   	sti    
c001e6a6:	83 c4 0c             	add    esp,0xc
c001e6a9:	c3                   	ret    

c001e6aa <waitTask(int, int*, int)>:
c001e6aa:	83 ec 18             	sub    esp,0x18
c001e6ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6b6:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e6b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6c2:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e6c5:	6a 07                	push   0x7
c001e6c7:	e8 b1 ff ff ff       	call   c001e67d <blockTask(TaskState)>
c001e6cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6d1:	83 c4 10             	add    esp,0x10
c001e6d4:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e6d7:	85 d2                	test   edx,edx
c001e6d9:	74 0a                	je     c001e6e5 <waitTask(int, int*, int)+0x3b>
c001e6db:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e6de:	89 02                	mov    DWORD PTR [edx],eax
c001e6e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6e5:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e6e8:	83 c4 0c             	add    esp,0xc
c001e6eb:	c3                   	ret    

c001e6ec <nanoSleepUntil(unsigned long long)>:
c001e6ec:	83 ec 0c             	sub    esp,0xc
c001e6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6f7:	3b 05 b0 f4 02 c0    	cmp    eax,DWORD PTR ds:0xc002f4b0
c001e6fd:	89 d1                	mov    ecx,edx
c001e6ff:	1b 0d b4 f4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f4b4
c001e705:	73 04                	jae    c001e70b <nanoSleepUntil(unsigned long long)+0x1f>
c001e707:	83 c4 0c             	add    esp,0xc
c001e70a:	c3                   	ret    
c001e70b:	fa                   	cli    
c001e70c:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e712:	83 ec 08             	sub    esp,0x8
c001e715:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c001e71b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e721:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e724:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e727:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e72d:	68 78 23 03 c0       	push   0xc0032378
c001e732:	e8 c5 ab 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e737:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e73e:	e8 3a ff ff ff       	call   c001e67d <blockTask(TaskState)>
c001e743:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e748:	83 c4 10             	add    esp,0x10
c001e74b:	48                   	dec    eax
c001e74c:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e751:	85 c0                	test   eax,eax
c001e753:	75 09                	jne    c001e75e <nanoSleepUntil(unsigned long long)+0x72>
c001e755:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e75a:	85 c0                	test   eax,eax
c001e75c:	75 12                	jne    c001e770 <nanoSleepUntil(unsigned long long)+0x84>
c001e75e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e763:	48                   	dec    eax
c001e764:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e769:	75 9c                	jne    c001e707 <nanoSleepUntil(unsigned long long)+0x1b>
c001e76b:	fb                   	sti    
c001e76c:	83 c4 0c             	add    esp,0xc
c001e76f:	c3                   	ret    
c001e770:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e77a:	e8 ff fc ff ff       	call   c001e47e <schedule()>
c001e77f:	eb dd                	jmp    c001e75e <nanoSleepUntil(unsigned long long)+0x72>

c001e781 <nanoSleep(unsigned long long)>:
c001e781:	a1 b0 f4 02 c0       	mov    eax,ds:0xc002f4b0
c001e786:	8b 15 b4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4b4
c001e78c:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e790:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e794:	e9 53 ff ff ff       	jmp    c001e6ec <nanoSleepUntil(unsigned long long)>

c001e799 <sleep(unsigned long long)>:
c001e799:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e7a1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e7a6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e7aa:	01 ca                	add    edx,ecx
c001e7ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7b0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7b4:	eb cb                	jmp    c001e781 <nanoSleep(unsigned long long)>

c001e7b6 <Semaphore::acquire()>:
c001e7b6:	83 ec 0c             	sub    esp,0xc
c001e7b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7bd:	fa                   	cli    
c001e7be:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e7c3:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e7c9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e7cc:	89 0d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ecx
c001e7d2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e7d5:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e7d7:	7d 28                	jge    c001e801 <Semaphore::acquire()+0x4b>
c001e7d9:	41                   	inc    ecx
c001e7da:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e7dd:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e7e2:	85 c0                	test   eax,eax
c001e7e4:	75 09                	jne    c001e7ef <Semaphore::acquire()+0x39>
c001e7e6:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e7eb:	85 c0                	test   eax,eax
c001e7ed:	75 4e                	jne    c001e83d <Semaphore::acquire()+0x87>
c001e7ef:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e7f4:	48                   	dec    eax
c001e7f5:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e7fa:	75 01                	jne    c001e7fd <Semaphore::acquire()+0x47>
c001e7fc:	fb                   	sti    
c001e7fd:	83 c4 0c             	add    esp,0xc
c001e800:	c3                   	ret    
c001e801:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e806:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e80d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e810:	85 c9                	test   ecx,ecx
c001e812:	74 3a                	je     c001e84e <Semaphore::acquire()+0x98>
c001e814:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e817:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e81d:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e825:	83 ec 0c             	sub    esp,0xc
c001e828:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e82b:	6a 05                	push   0x5
c001e82d:	e8 4b fe ff ff       	call   c001e67d <blockTask(TaskState)>
c001e832:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e837:	83 c4 10             	add    esp,0x10
c001e83a:	48                   	dec    eax
c001e83b:	eb a0                	jmp    c001e7dd <Semaphore::acquire()+0x27>
c001e83d:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e847:	e8 32 fc ff ff       	call   c001e47e <schedule()>
c001e84c:	eb a1                	jmp    c001e7ef <Semaphore::acquire()+0x39>
c001e84e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e853:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e856:	eb c8                	jmp    c001e820 <Semaphore::acquire()+0x6a>

c001e858 <taskReturned>:
c001e858:	83 ec 18             	sub    esp,0x18
c001e85b:	68 a4 cd 02 c0       	push   0xc002cda4
c001e860:	e8 22 c0 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001e865:	83 c4 10             	add    esp,0x10
c001e868:	83 ec 0c             	sub    esp,0xc
c001e86b:	6a 02                	push   0x2
c001e86d:	e8 0b fe ff ff       	call   c001e67d <blockTask(TaskState)>
c001e872:	fa                   	cli    
c001e873:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e879:	e8 00 fc ff ff       	call   c001e47e <schedule()>
c001e87e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e883:	83 c4 10             	add    esp,0x10
c001e886:	48                   	dec    eax
c001e887:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e88c:	85 c0                	test   eax,eax
c001e88e:	75 d8                	jne    c001e868 <taskReturned+0x10>
c001e890:	fb                   	sti    
c001e891:	eb d5                	jmp    c001e868 <taskReturned+0x10>

c001e893 <Thr::processFromPID(int)>:
c001e893:	57                   	push   edi
c001e894:	56                   	push   esi
c001e895:	53                   	push   ebx
c001e896:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e89a:	83 ec 0c             	sub    esp,0xc
c001e89d:	68 9a cb 02 c0       	push   0xc002cb9a
c001e8a2:	e8 24 46 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e8a7:	fa                   	cli    
c001e8a8:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e8ae:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e8b5:	e8 8c a9 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8ba:	83 c4 10             	add    esp,0x10
c001e8bd:	89 c7                	mov    edi,eax
c001e8bf:	eb 14                	jmp    c001e8d5 <Thr::processFromPID(int)+0x42>
c001e8c1:	83 ec 0c             	sub    esp,0xc
c001e8c4:	68 84 23 03 c0       	push   0xc0032384
c001e8c9:	e8 78 a9 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8ce:	83 c4 10             	add    esp,0x10
c001e8d1:	39 f8                	cmp    eax,edi
c001e8d3:	74 49                	je     c001e91e <Thr::processFromPID(int)+0x8b>
c001e8d5:	83 ec 0c             	sub    esp,0xc
c001e8d8:	68 84 23 03 c0       	push   0xc0032384
c001e8dd:	e8 64 a9 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8e2:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e8e9:	89 c3                	mov    ebx,eax
c001e8eb:	e8 5e a9 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8f0:	58                   	pop    eax
c001e8f1:	5a                   	pop    edx
c001e8f2:	53                   	push   ebx
c001e8f3:	68 84 23 03 c0       	push   0xc0032384
c001e8f8:	e8 ff a9 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8fd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e900:	83 c4 10             	add    esp,0x10
c001e903:	39 30                	cmp    DWORD PTR [eax],esi
c001e905:	75 ba                	jne    c001e8c1 <Thr::processFromPID(int)+0x2e>
c001e907:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e90c:	48                   	dec    eax
c001e90d:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e912:	74 07                	je     c001e91b <Thr::processFromPID(int)+0x88>
c001e914:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e917:	5b                   	pop    ebx
c001e918:	5e                   	pop    esi
c001e919:	5f                   	pop    edi
c001e91a:	c3                   	ret    
c001e91b:	fb                   	sti    
c001e91c:	eb f6                	jmp    c001e914 <Thr::processFromPID(int)+0x81>
c001e91e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e923:	48                   	dec    eax
c001e924:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e929:	75 01                	jne    c001e92c <Thr::processFromPID(int)+0x99>
c001e92b:	fb                   	sti    
c001e92c:	83 ec 0c             	sub    esp,0xc
c001e92f:	68 b5 cb 02 c0       	push   0xc002cbb5
c001e934:	e8 92 45 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e939:	83 c4 10             	add    esp,0x10
c001e93c:	31 c0                	xor    eax,eax
c001e93e:	5b                   	pop    ebx
c001e93f:	5e                   	pop    esi
c001e940:	5f                   	pop    edi
c001e941:	c3                   	ret    

c001e942 <unblockTask(ThreadControlBlock*)>:
c001e942:	53                   	push   ebx
c001e943:	83 ec 08             	sub    esp,0x8
c001e946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e94a:	fa                   	cli    
c001e94b:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e951:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e954:	85 c0                	test   eax,eax
c001e956:	74 66                	je     c001e9be <unblockTask(ThreadControlBlock*)+0x7c>
c001e958:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e95b:	48                   	dec    eax
c001e95c:	74 31                	je     c001e98f <unblockTask(ThreadControlBlock*)+0x4d>
c001e95e:	83 ec 0c             	sub    esp,0xc
c001e961:	68 84 23 03 c0       	push   0xc0032384
c001e966:	e8 db a8 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e96b:	83 c4 10             	add    esp,0x10
c001e96e:	85 c0                	test   eax,eax
c001e970:	75 17                	jne    c001e989 <unblockTask(ThreadControlBlock*)+0x47>
c001e972:	eb 68                	jmp    c001e9dc <unblockTask(ThreadControlBlock*)+0x9a>
c001e974:	83 ec 08             	sub    esp,0x8
c001e977:	50                   	push   eax
c001e978:	68 84 23 03 c0       	push   0xc0032384
c001e97d:	e8 62 ac 00 00       	call   c00295e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e982:	83 c4 10             	add    esp,0x10
c001e985:	85 c0                	test   eax,eax
c001e987:	74 53                	je     c001e9dc <unblockTask(ThreadControlBlock*)+0x9a>
c001e989:	39 c3                	cmp    ebx,eax
c001e98b:	75 e7                	jne    c001e974 <unblockTask(ThreadControlBlock*)+0x32>
c001e98d:	eb 1c                	jmp    c001e9ab <unblockTask(ThreadControlBlock*)+0x69>
c001e98f:	83 ec 0c             	sub    esp,0xc
c001e992:	68 94 ce 02 c0       	push   0xc002ce94
c001e997:	e8 2f 45 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e99c:	c7 04 24 20 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce20
c001e9a3:	e8 23 45 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e9a8:	83 c4 10             	add    esp,0x10
c001e9ab:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e9b0:	48                   	dec    eax
c001e9b1:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e9b6:	75 01                	jne    c001e9b9 <unblockTask(ThreadControlBlock*)+0x77>
c001e9b8:	fb                   	sti    
c001e9b9:	83 c4 08             	add    esp,0x8
c001e9bc:	5b                   	pop    ebx
c001e9bd:	c3                   	ret    
c001e9be:	83 ec 0c             	sub    esp,0xc
c001e9c1:	68 d8 cd 02 c0       	push   0xc002cdd8
c001e9c6:	e8 00 45 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e9cb:	c7 04 24 20 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce20
c001e9d2:	e8 f4 44 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001e9d7:	83 c4 10             	add    esp,0x10
c001e9da:	eb cf                	jmp    c001e9ab <unblockTask(ThreadControlBlock*)+0x69>
c001e9dc:	83 ec 08             	sub    esp,0x8
c001e9df:	53                   	push   ebx
c001e9e0:	68 84 23 03 c0       	push   0xc0032384
c001e9e5:	e8 12 a9 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e9ea:	83 c4 10             	add    esp,0x10
c001e9ed:	eb bc                	jmp    c001e9ab <unblockTask(ThreadControlBlock*)+0x69>

c001e9ef <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e9ef:	55                   	push   ebp
c001e9f0:	57                   	push   edi
c001e9f1:	56                   	push   esi
c001e9f2:	53                   	push   ebx
c001e9f3:	83 ec 1c             	sub    esp,0x1c
c001e9f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e9fa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9fd:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ea03:	85 ff                	test   edi,edi
c001ea05:	7e 20                	jle    c001ea27 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ea07:	31 f6                	xor    esi,esi
c001ea09:	83 ec 0c             	sub    esp,0xc
c001ea0c:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ea13:	46                   	inc    esi
c001ea14:	e8 0b 0f ff ff       	call   c000f924 <free>
c001ea19:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea1c:	83 c4 10             	add    esp,0x10
c001ea1f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ea25:	7f e2                	jg     c001ea09 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ea27:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ea31:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ea36:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ea39:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea3c:	d3 c0                	rol    eax,cl
c001ea3e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ea45:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea48:	89 f7                	mov    edi,esi
c001ea4a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ea52:	0f 85 74 01 00 00    	jne    c001ebcc <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ea58:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ea5e:	85 ed                	test   ebp,ebp
c001ea60:	74 1b                	je     c001ea7d <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ea62:	83 ec 0c             	sub    esp,0xc
c001ea65:	55                   	push   ebp
c001ea66:	e8 89 bb ff ff       	call   c001a5f4 <EnvVarContainer::~EnvVarContainer()>
c001ea6b:	59                   	pop    ecx
c001ea6c:	5e                   	pop    esi
c001ea6d:	6a 0c                	push   0xc
c001ea6f:	55                   	push   ebp
c001ea70:	e8 76 43 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c001ea75:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	89 f7                	mov    edi,esi
c001ea7d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea83:	85 c0                	test   eax,eax
c001ea85:	0f 84 aa 00 00 00    	je     c001eb35 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ea8b:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ea8e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea92:	31 c9                	xor    ecx,ecx
c001ea94:	eb 10                	jmp    c001eaa6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ea96:	41                   	inc    ecx
c001ea97:	83 f9 10             	cmp    ecx,0x10
c001ea9a:	0f 84 95 00 00 00    	je     c001eb35 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eaa0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eaa6:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001eaad:	d3 fa                	sar    edx,cl
c001eaaf:	83 e2 01             	and    edx,0x1
c001eab2:	74 e2                	je     c001ea96 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eab4:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001eab7:	01 ca                	add    edx,ecx
c001eab9:	89 d5                	mov    ebp,edx
c001eabb:	c1 e5 05             	shl    ebp,0x5
c001eabe:	01 ea                	add    edx,ebp
c001eac0:	01 d0                	add    eax,edx
c001eac2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001eac8:	83 fd 07             	cmp    ebp,0x7
c001eacb:	75 c9                	jne    c001ea96 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eacd:	05 40 02 00 00       	add    eax,0x240
c001ead2:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ead5:	83 fd ff             	cmp    ebp,0xffffffff
c001ead8:	0f 8c 08 01 00 00    	jl     c001ebe6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eade:	0f 84 b9 01 00 00    	je     c001ec9d <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eae4:	85 ed                	test   ebp,ebp
c001eae6:	0f 84 a0 01 00 00    	je     c001ec8c <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eaec:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eaee:	75 a6                	jne    c001ea96 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eaf0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eaf6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eafa:	01 d0                	add    eax,edx
c001eafc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eb00:	83 ec 0c             	sub    esp,0xc
c001eb03:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001eb09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb0c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001eb12:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eb19:	50                   	push   eax
c001eb1a:	e8 23 fe ff ff       	call   c001e942 <unblockTask(ThreadControlBlock*)>
c001eb1f:	83 c4 10             	add    esp,0x10
c001eb22:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb29:	89 f7                	mov    edi,esi
c001eb2b:	41                   	inc    ecx
c001eb2c:	83 f9 10             	cmp    ecx,0x10
c001eb2f:	0f 85 6b ff ff ff    	jne    c001eaa0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eb35:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eb3b:	85 c0                	test   eax,eax
c001eb3d:	74 5d                	je     c001eb9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb3f:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eb45:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001eb4b:	74 4f                	je     c001eb9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb4d:	83 ec 0c             	sub    esp,0xc
c001eb50:	68 84 23 03 c0       	push   0xc0032384
c001eb55:	e8 ec a6 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb5a:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001eb61:	89 c7                	mov    edi,eax
c001eb63:	e8 c2 a6 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eb68:	83 c4 10             	add    esp,0x10
c001eb6b:	84 c0                	test   al,al
c001eb6d:	0f 84 e4 00 00 00    	je     c001ec57 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eb73:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb76:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001eb7c:	85 d2                	test   edx,edx
c001eb7e:	74 0f                	je     c001eb8f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001eb80:	83 ec 0c             	sub    esp,0xc
c001eb83:	8b 02                	mov    eax,DWORD PTR [edx]
c001eb85:	52                   	push   edx
c001eb86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb89:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb8c:	83 c4 10             	add    esp,0x10
c001eb8f:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001eb99:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001eb9c:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001eba2:	85 db                	test   ebx,ebx
c001eba4:	74 16                	je     c001ebbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001eba6:	83 ec 0c             	sub    esp,0xc
c001eba9:	53                   	push   ebx
c001ebaa:	e8 d1 35 ff ff       	call   c0012180 <VAS::~VAS()>
c001ebaf:	58                   	pop    eax
c001ebb0:	5a                   	pop    edx
c001ebb1:	6a 14                	push   0x14
c001ebb3:	53                   	push   ebx
c001ebb4:	e8 32 42 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c001ebb9:	83 c4 10             	add    esp,0x10
c001ebbc:	83 ec 0c             	sub    esp,0xc
c001ebbf:	68 cc cb 02 c0       	push   0xc002cbcc
c001ebc4:	e8 02 43 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001ebc9:	83 c4 10             	add    esp,0x10
c001ebcc:	83 ec 08             	sub    esp,0x8
c001ebcf:	68 3f 07 00 00       	push   0x73f
c001ebd4:	68 da cb 02 c0       	push   0xc002cbda
c001ebd9:	e8 ed 42 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001ebde:	83 c4 2c             	add    esp,0x2c
c001ebe1:	5b                   	pop    ebx
c001ebe2:	5e                   	pop    esi
c001ebe3:	5f                   	pop    edi
c001ebe4:	5d                   	pop    ebp
c001ebe5:	c3                   	ret    
c001ebe6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ebea:	83 ec 0c             	sub    esp,0xc
c001ebed:	68 d8 ce 02 c0       	push   0xc002ced8
c001ebf2:	e8 90 bc ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001ebf7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ebfa:	83 c4 10             	add    esp,0x10
c001ebfd:	89 f7                	mov    edi,esi
c001ebff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec03:	e9 8e fe ff ff       	jmp    c001ea96 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec08:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ec0e:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ec14:	75 1c                	jne    c001ec32 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec16:	83 ec 0c             	sub    esp,0xc
c001ec19:	68 40 cf 02 c0       	push   0xc002cf40
c001ec1e:	e8 a8 42 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001ec23:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ec2a:	e8 4e fa ff ff       	call   c001e67d <blockTask(TaskState)>
c001ec2f:	83 c4 10             	add    esp,0x10
c001ec32:	83 ec 08             	sub    esp,0x8
c001ec35:	56                   	push   esi
c001ec36:	68 84 23 03 c0       	push   0xc0032384
c001ec3b:	e8 bc a6 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec40:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001ec47:	e8 fa a5 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec4c:	83 c4 10             	add    esp,0x10
c001ec4f:	39 f8                	cmp    eax,edi
c001ec51:	0f 84 1c ff ff ff    	je     c001eb73 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ec57:	83 ec 0c             	sub    esp,0xc
c001ec5a:	68 84 23 03 c0       	push   0xc0032384
c001ec5f:	e8 e2 a5 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec64:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001ec6b:	89 c6                	mov    esi,eax
c001ec6d:	e8 dc a5 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ec72:	83 c4 10             	add    esp,0x10
c001ec75:	39 f3                	cmp    ebx,esi
c001ec77:	74 b9                	je     c001ec32 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec79:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ec7c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec7f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ec85:	75 ab                	jne    c001ec32 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec87:	e9 7c ff ff ff       	jmp    c001ec08 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ec8c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec90:	83 ec 0c             	sub    esp,0xc
c001ec93:	68 0c cf 02 c0       	push   0xc002cf0c
c001ec98:	e9 55 ff ff ff       	jmp    c001ebf2 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ec9d:	8b 36                	mov    esi,DWORD PTR [esi]
c001ec9f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eca3:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001eca6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eca9:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ecaf:	01 d7                	add    edi,edx
c001ecb1:	89 f8                	mov    eax,edi
c001ecb3:	e9 44 fe ff ff       	jmp    c001eafc <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ecb8 <cleanerTaskFunction(void*)>:
c001ecb8:	53                   	push   ebx
c001ecb9:	83 ec 08             	sub    esp,0x8
c001ecbc:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ecc1:	48                   	dec    eax
c001ecc2:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ecc7:	75 01                	jne    c001ecca <cleanerTaskFunction(void*)+0x12>
c001ecc9:	fb                   	sti    
c001ecca:	fa                   	cli    
c001eccb:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ecd0:	80 3d 4c 23 03 c0 00 	cmp    BYTE PTR ds:0xc003234c,0x0
c001ecd7:	8d 50 01             	lea    edx,[eax+0x1]
c001ecda:	89 15 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,edx
c001ece0:	0f 84 b9 00 00 00    	je     c001ed9f <cleanerTaskFunction(void*)+0xe7>
c001ece6:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001eceb:	85 c0                	test   eax,eax
c001eced:	75 01                	jne    c001ecf0 <cleanerTaskFunction(void*)+0x38>
c001ecef:	fb                   	sti    
c001ecf0:	c6 05 4c 23 03 c0 00 	mov    BYTE PTR ds:0xc003234c,0x0
c001ecf7:	fa                   	cli    
c001ecf8:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ecfe:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c001ed04:	fa                   	cli    
c001ed05:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ed0b:	eb 3e                	jmp    c001ed4b <cleanerTaskFunction(void*)+0x93>
c001ed0d:	83 ec 0c             	sub    esp,0xc
c001ed10:	68 6c 23 03 c0       	push   0xc003236c
c001ed15:	e8 2c a5 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed1a:	c7 04 24 6c 23 03 c0 	mov    DWORD PTR [esp],0xc003236c
c001ed21:	89 c3                	mov    ebx,eax
c001ed23:	e8 26 a5 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ed28:	c7 04 24 f0 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbf0
c001ed2f:	e8 97 41 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001ed34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed37:	e8 b3 fc ff ff       	call   c001e9ef <cleanupTerminatedTask(ThreadControlBlock*)>
c001ed3c:	c7 04 24 09 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc09
c001ed43:	e8 83 41 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001ed48:	83 c4 10             	add    esp,0x10
c001ed4b:	83 ec 0c             	sub    esp,0xc
c001ed4e:	68 6c 23 03 c0       	push   0xc003236c
c001ed53:	e8 d2 a4 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed58:	83 c4 10             	add    esp,0x10
c001ed5b:	84 c0                	test   al,al
c001ed5d:	74 ae                	je     c001ed0d <cleanerTaskFunction(void*)+0x55>
c001ed5f:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ed64:	48                   	dec    eax
c001ed65:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ed6a:	75 01                	jne    c001ed6d <cleanerTaskFunction(void*)+0xb5>
c001ed6c:	fb                   	sti    
c001ed6d:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001ed72:	48                   	dec    eax
c001ed73:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001ed78:	0f 85 3e ff ff ff    	jne    c001ecbc <cleanerTaskFunction(void*)+0x4>
c001ed7e:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001ed83:	85 c0                	test   eax,eax
c001ed85:	0f 84 31 ff ff ff    	je     c001ecbc <cleanerTaskFunction(void*)+0x4>
c001ed8b:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001ed95:	e8 e4 f6 ff ff       	call   c001e47e <schedule()>
c001ed9a:	e9 1d ff ff ff       	jmp    c001ecbc <cleanerTaskFunction(void*)+0x4>
c001ed9f:	83 ec 0c             	sub    esp,0xc
c001eda2:	6a 02                	push   0x2
c001eda4:	e8 86 f8 ff ff       	call   c001e62f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eda9:	83 c4 10             	add    esp,0x10
c001edac:	e9 3f ff ff ff       	jmp    c001ecf0 <cleanerTaskFunction(void*)+0x38>

c001edb1 <terminateTask(int)>:
c001edb1:	83 ec 14             	sub    esp,0x14
c001edb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001edbc:	83 c0 0c             	add    eax,0xc
c001edbf:	50                   	push   eax
c001edc0:	68 68 cf 02 c0       	push   0xc002cf68
c001edc5:	e8 01 41 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001edca:	fa                   	cli    
c001edcb:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001edd1:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c001edd7:	fa                   	cli    
c001edd8:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001edde:	c7 04 24 1c cc 02 c0 	mov    DWORD PTR [esp],0xc002cc1c
c001ede5:	e8 e1 40 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001edea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001edee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edf3:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001edf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edfb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001edfe:	5a                   	pop    edx
c001edff:	59                   	pop    ecx
c001ee00:	50                   	push   eax
c001ee01:	68 6c 23 03 c0       	push   0xc003236c
c001ee06:	e8 f1 a4 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee10:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ee17:	c7 04 24 36 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc36
c001ee1e:	e8 a8 40 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001ee23:	83 c4 10             	add    esp,0x10
c001ee26:	a1 48 23 03 c0       	mov    eax,ds:0xc0032348
c001ee2b:	85 c0                	test   eax,eax
c001ee2d:	0f 84 8d 00 00 00    	je     c001eec0 <terminateTask(int)+0x10f>
c001ee33:	83 ec 0c             	sub    esp,0xc
c001ee36:	68 50 cc 02 c0       	push   0xc002cc50
c001ee3b:	e8 8b 40 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001ee40:	58                   	pop    eax
c001ee41:	c6 05 4c 23 03 c0 01 	mov    BYTE PTR ds:0xc003234c,0x1
c001ee48:	ff 35 48 23 03 c0    	push   DWORD PTR ds:0xc0032348
c001ee4e:	e8 ef fa ff ff       	call   c001e942 <unblockTask(ThreadControlBlock*)>
c001ee53:	c7 04 24 6a cc 02 c0 	mov    DWORD PTR [esp],0xc002cc6a
c001ee5a:	e8 6c 40 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001ee5f:	83 c4 10             	add    esp,0x10
c001ee62:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ee67:	48                   	dec    eax
c001ee68:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ee6d:	75 01                	jne    c001ee70 <terminateTask(int)+0xbf>
c001ee6f:	fb                   	sti    
c001ee70:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001ee75:	48                   	dec    eax
c001ee76:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001ee7b:	75 09                	jne    c001ee86 <terminateTask(int)+0xd5>
c001ee7d:	83 3d 60 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032360,0x0
c001ee84:	75 4c                	jne    c001eed2 <terminateTask(int)+0x121>
c001ee86:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ee8b:	48                   	dec    eax
c001ee8c:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ee91:	75 01                	jne    c001ee94 <terminateTask(int)+0xe3>
c001ee93:	fb                   	sti    
c001ee94:	83 ec 0c             	sub    esp,0xc
c001ee97:	68 a2 cc 02 c0       	push   0xc002cca2
c001ee9c:	e8 2a 40 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001eea1:	83 c4 10             	add    esp,0x10
c001eea4:	fa                   	cli    
c001eea5:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001eeab:	e8 ce f5 ff ff       	call   c001e47e <schedule()>
c001eeb0:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001eeb5:	48                   	dec    eax
c001eeb6:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001eebb:	75 e7                	jne    c001eea4 <terminateTask(int)+0xf3>
c001eebd:	fb                   	sti    
c001eebe:	eb e4                	jmp    c001eea4 <terminateTask(int)+0xf3>
c001eec0:	83 ec 0c             	sub    esp,0xc
c001eec3:	68 84 cc 02 c0       	push   0xc002cc84
c001eec8:	e8 fe 3f ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001eecd:	83 c4 10             	add    esp,0x10
c001eed0:	eb 90                	jmp    c001ee62 <terminateTask(int)+0xb1>
c001eed2:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001eedc:	e8 9d f5 ff ff       	call   c001e47e <schedule()>
c001eee1:	eb a3                	jmp    c001ee86 <terminateTask(int)+0xd5>

c001eee3 <Thr::terminateFromIRQ(int)>:
c001eee3:	83 ec 18             	sub    esp,0x18
c001eee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeea:	e8 c2 fe ff ff       	call   c001edb1 <terminateTask(int)>
c001eeef:	90                   	nop

c001eef0 <Semaphore::release()>:
c001eef0:	83 ec 0c             	sub    esp,0xc
c001eef3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eef7:	fa                   	cli    
c001eef8:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001eefd:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ef03:	8d 48 01             	lea    ecx,[eax+0x1]
c001ef06:	89 0d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ecx
c001ef0c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ef0f:	85 c9                	test   ecx,ecx
c001ef11:	74 3c                	je     c001ef4f <Semaphore::release()+0x5f>
c001ef13:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ef16:	83 ec 0c             	sub    esp,0xc
c001ef19:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ef1c:	51                   	push   ecx
c001ef1d:	e8 20 fa ff ff       	call   c001e942 <unblockTask(ThreadControlBlock*)>
c001ef22:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001ef27:	83 c4 10             	add    esp,0x10
c001ef2a:	48                   	dec    eax
c001ef2b:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001ef30:	85 c0                	test   eax,eax
c001ef32:	75 09                	jne    c001ef3d <Semaphore::release()+0x4d>
c001ef34:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001ef39:	85 c0                	test   eax,eax
c001ef3b:	75 17                	jne    c001ef54 <Semaphore::release()+0x64>
c001ef3d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ef42:	48                   	dec    eax
c001ef43:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ef48:	75 01                	jne    c001ef4b <Semaphore::release()+0x5b>
c001ef4a:	fb                   	sti    
c001ef4b:	83 c4 0c             	add    esp,0xc
c001ef4e:	c3                   	ret    
c001ef4f:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ef52:	eb d7                	jmp    c001ef2b <Semaphore::release()+0x3b>
c001ef54:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001ef5e:	e8 1b f5 ff ff       	call   c001e47e <schedule()>
c001ef63:	eb d8                	jmp    c001ef3d <Semaphore::release()+0x4d>

c001ef65 <__static_initialization_and_destruction_0(int, int)>:
c001ef65:	83 ec 0c             	sub    esp,0xc
c001ef68:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ef6d:	0f 85 88 00 00 00    	jne    c001effb <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef73:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ef7b:	75 7e                	jne    c001effb <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef7d:	83 ec 0c             	sub    esp,0xc
c001ef80:	68 84 23 03 c0       	push   0xc0032384
c001ef85:	e8 02 a6 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef8a:	83 c4 10             	add    esp,0x10
c001ef8d:	83 ec 04             	sub    esp,0x4
c001ef90:	68 50 dd 02 c0       	push   0xc002dd50
c001ef95:	68 84 23 03 c0       	push   0xc0032384
c001ef9a:	68 40 95 02 c0       	push   0xc0029540
c001ef9f:	e8 c1 3d ff ff       	call   c0012d65 <__cxa_atexit>
c001efa4:	83 c4 10             	add    esp,0x10
c001efa7:	83 ec 0c             	sub    esp,0xc
c001efaa:	68 78 23 03 c0       	push   0xc0032378
c001efaf:	e8 d8 a5 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efb4:	83 c4 10             	add    esp,0x10
c001efb7:	83 ec 04             	sub    esp,0x4
c001efba:	68 50 dd 02 c0       	push   0xc002dd50
c001efbf:	68 78 23 03 c0       	push   0xc0032378
c001efc4:	68 40 95 02 c0       	push   0xc0029540
c001efc9:	e8 97 3d ff ff       	call   c0012d65 <__cxa_atexit>
c001efce:	83 c4 10             	add    esp,0x10
c001efd1:	83 ec 0c             	sub    esp,0xc
c001efd4:	68 6c 23 03 c0       	push   0xc003236c
c001efd9:	e8 ae a5 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efde:	83 c4 10             	add    esp,0x10
c001efe1:	83 ec 04             	sub    esp,0x4
c001efe4:	68 50 dd 02 c0       	push   0xc002dd50
c001efe9:	68 6c 23 03 c0       	push   0xc003236c
c001efee:	68 40 95 02 c0       	push   0xc0029540
c001eff3:	e8 6d 3d ff ff       	call   c0012d65 <__cxa_atexit>
c001eff8:	83 c4 10             	add    esp,0x10
c001effb:	90                   	nop
c001effc:	83 c4 0c             	add    esp,0xc
c001efff:	c3                   	ret    

c001f000 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f000:	83 ec 0c             	sub    esp,0xc
c001f003:	83 ec 08             	sub    esp,0x8
c001f006:	68 ff ff 00 00       	push   0xffff
c001f00b:	6a 01                	push   0x1
c001f00d:	e8 53 ff ff ff       	call   c001ef65 <__static_initialization_and_destruction_0(int, int)>
c001f012:	83 c4 10             	add    esp,0x10
c001f015:	83 c4 0c             	add    esp,0xc
c001f018:	c3                   	ret    

c001f019 <Vm::inbv(unsigned short)>:
c001f019:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f01d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f022:	75 06                	jne    c001f02a <Vm::inbv(unsigned short)+0x11>
c001f024:	a0 cc 23 03 c0       	mov    al,ds:0xc00323cc
c001f029:	c3                   	ret    
c001f02a:	ec                   	in     al,dx
c001f02b:	c3                   	ret    

c001f02c <Vm::outbv(unsigned short, unsigned char)>:
c001f02c:	53                   	push   ebx
c001f02d:	83 ec 08             	sub    esp,0x8
c001f030:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f034:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f038:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f03d:	75 38                	jne    c001f077 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f03f:	0f b6 c3             	movzx  eax,bl
c001f042:	51                   	push   ecx
c001f043:	51                   	push   ecx
c001f044:	50                   	push   eax
c001f045:	68 87 cf 02 c0       	push   0xc002cf87
c001f04a:	e8 7c 3e ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f04f:	8b 15 cc 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323cc
c001f055:	83 c4 10             	add    esp,0x10
c001f058:	8d 42 01             	lea    eax,[edx+0x1]
c001f05b:	88 9a e0 23 03 c0    	mov    BYTE PTR [edx-0x3ffcdc20],bl
c001f061:	a3 cc 23 03 c0       	mov    ds:0xc00323cc,eax
c001f066:	83 f8 20             	cmp    eax,0x20
c001f069:	75 0f                	jne    c001f07a <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f06b:	c7 05 cc 23 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00323cc,0x1f
c001f075:	eb 03                	jmp    c001f07a <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f077:	88 d8                	mov    al,bl
c001f079:	ee                   	out    dx,al
c001f07a:	83 c4 08             	add    esp,0x8
c001f07d:	5b                   	pop    ebx
c001f07e:	c3                   	ret    

c001f07f <Vm::realToLinear(unsigned short, unsigned short)>:
c001f07f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f084:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f089:	c1 e0 04             	shl    eax,0x4
c001f08c:	01 d0                	add    eax,edx
c001f08e:	c3                   	ret    

c001f08f <Vm::getSegment(unsigned int)>:
c001f08f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f093:	c1 e8 10             	shr    eax,0x10
c001f096:	c3                   	ret    

c001f097 <Vm::getOffset(unsigned int)>:
c001f097:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f09b:	c3                   	ret    

c001f09c <Vm::mainloop2()>:
c001f09c:	83 ec 18             	sub    esp,0x18
c001f09f:	fa                   	cli    
c001f0a0:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001f0a6:	6a 02                	push   0x2
c001f0a8:	c6 05 c5 23 03 c0 01 	mov    BYTE PTR ds:0xc00323c5,0x1
c001f0af:	e8 7b f5 ff ff       	call   c001e62f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f0b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0b9:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f0bd:	52                   	push   edx
c001f0be:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f0c2:	52                   	push   edx
c001f0c3:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f0c7:	52                   	push   edx
c001f0c8:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f0cc:	50                   	push   eax
c001f0cd:	e8 28 12 fe ff       	call   c00002fa <goToVM86>
c001f0d2:	83 c4 2c             	add    esp,0x2c
c001f0d5:	c3                   	ret    

c001f0d6 <Vm::mainVm8086Loop(void*)>:
c001f0d6:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f0db:	48                   	dec    eax
c001f0dc:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f0e1:	75 01                	jne    c001f0e4 <Vm::mainVm8086Loop(void*)+0xe>
c001f0e3:	fb                   	sti    
c001f0e4:	eb b6                	jmp    c001f09c <Vm::mainloop2()>

c001f0e6 <Vm::mainloop3(unsigned long)>:
c001f0e6:	83 ec 18             	sub    esp,0x18
c001f0e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f0ed:	fa                   	cli    
c001f0ee:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001f0f4:	6a 02                	push   0x2
c001f0f6:	c6 05 c4 23 03 c0 01 	mov    BYTE PTR ds:0xc00323c4,0x1
c001f0fd:	a3 c0 23 03 c0       	mov    ds:0xc00323c0,eax
c001f102:	e8 28 f5 ff ff       	call   c001e62f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f107:	83 c4 1c             	add    esp,0x1c
c001f10a:	eb 90                	jmp    c001f09c <Vm::mainloop2()>

c001f10c <Vm::initialise8086()>:
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	68 80 00 00 00       	push   0x80
c001f114:	6a 00                	push   0x0
c001f116:	68 d6 f0 01 c0       	push   0xc001f0d6
c001f11b:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001f121:	e8 14 f1 ff ff       	call   c001e23a <Process::createThread(void (*)(void*), void*, int)>
c001f126:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f12d:	a3 c8 23 03 c0       	mov    ds:0xc00323c8,eax
c001f132:	68 00 01 00 00       	push   0x100
c001f137:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001f13c:	6a 00                	push   0x0
c001f13e:	6a 00                	push   0x0
c001f140:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f146:	e8 a7 34 ff ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f14b:	83 c4 2c             	add    esp,0x2c
c001f14e:	c3                   	ret    

c001f14f <Vm::finish8086()>:
c001f14f:	53                   	push   ebx
c001f150:	83 ec 08             	sub    esp,0x8
c001f153:	fa                   	cli    
c001f154:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001f15a:	80 3d c4 23 03 c0 00 	cmp    BYTE PTR ds:0xc00323c4,0x0
c001f161:	75 15                	jne    c001f178 <Vm::finish8086()+0x29>
c001f163:	e8 16 f3 ff ff       	call   c001e47e <schedule()>
c001f168:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f16d:	48                   	dec    eax
c001f16e:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f173:	75 de                	jne    c001f153 <Vm::finish8086()+0x4>
c001f175:	fb                   	sti    
c001f176:	eb db                	jmp    c001f153 <Vm::finish8086()+0x4>
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	8b 1d c0 23 03 c0    	mov    ebx,DWORD PTR ds:0xc00323c0
c001f181:	ff 35 c8 23 03 c0    	push   DWORD PTR ds:0xc00323c8
c001f187:	c6 05 c4 23 03 c0 00 	mov    BYTE PTR ds:0xc00323c4,0x0
c001f18e:	e8 af f7 ff ff       	call   c001e942 <unblockTask(ThreadControlBlock*)>
c001f193:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f198:	83 c4 10             	add    esp,0x10
c001f19b:	8d 50 ff             	lea    edx,[eax-0x1]
c001f19e:	89 15 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,edx
c001f1a4:	85 d2                	test   edx,edx
c001f1a6:	75 01                	jne    c001f1a9 <Vm::finish8086()+0x5a>
c001f1a8:	fb                   	sti    
c001f1a9:	89 d8                	mov    eax,ebx
c001f1ab:	83 c4 08             	add    esp,0x8
c001f1ae:	5b                   	pop    ebx
c001f1af:	c3                   	ret    

c001f1b0 <Vm::getOutput8086(unsigned char*)>:
c001f1b0:	83 ec 10             	sub    esp,0x10
c001f1b3:	ff 35 cc 23 03 c0    	push   DWORD PTR ds:0xc00323cc
c001f1b9:	68 e0 23 03 c0       	push   0xc00323e0
c001f1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c2:	e8 a1 15 fe ff       	call   c0000768 <memcpy>
c001f1c7:	a1 cc 23 03 c0       	mov    eax,ds:0xc00323cc
c001f1cc:	c7 05 cc 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323cc,0x0
c001f1d6:	83 c4 1c             	add    esp,0x1c
c001f1d9:	c3                   	ret    

c001f1da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f1da:	55                   	push   ebp
c001f1db:	57                   	push   edi
c001f1dc:	56                   	push   esi
c001f1dd:	53                   	push   ebx
c001f1de:	83 ec 2c             	sub    esp,0x2c
c001f1e1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f1e5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f1e9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f1ed:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f1f1:	fa                   	cli    
c001f1f2:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001f1f8:	0f b6 35 c5 23 03 c0 	movzx  esi,BYTE PTR ds:0xc00323c5
c001f1ff:	89 f0                	mov    eax,esi
c001f201:	84 c0                	test   al,al
c001f203:	75 1d                	jne    c001f222 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f205:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f209:	e8 70 f2 ff ff       	call   c001e47e <schedule()>
c001f20e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f213:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f217:	48                   	dec    eax
c001f218:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f21d:	75 d2                	jne    c001f1f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f21f:	fb                   	sti    
c001f220:	eb cf                	jmp    c001f1f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f222:	a1 c8 23 03 c0       	mov    eax,ds:0xc00323c8
c001f227:	c7 05 cc 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323cc,0x0
c001f231:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f235:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f239:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f23d:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f241:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f245:	50                   	push   eax
c001f246:	6a 20                	push   0x20
c001f248:	6a 00                	push   0x0
c001f24a:	68 e0 23 03 c0       	push   0xc00323e0
c001f24f:	e8 2c 15 fe ff       	call   c0000780 <memset>
c001f254:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f25b:	e8 b4 06 ff ff       	call   c000f914 <malloc>
c001f260:	83 c4 0c             	add    esp,0xc
c001f263:	89 c3                	mov    ebx,eax
c001f265:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001f26b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f26f:	50                   	push   eax
c001f270:	e8 b5 41 ff ff       	call   c001342a <File::File(char const*, Process*)>
c001f275:	83 c4 10             	add    esp,0x10
c001f278:	85 db                	test   ebx,ebx
c001f27a:	75 0a                	jne    c001f286 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	68 a3 cf 02 c0       	push   0xc002cfa3
c001f284:	eb 3e                	jmp    c001f2c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f286:	50                   	push   eax
c001f287:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f28b:	50                   	push   eax
c001f28c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f290:	50                   	push   eax
c001f291:	53                   	push   ebx
c001f292:	e8 a3 44 ff ff       	call   c001373a <File::stat(unsigned long long*, bool*)>
c001f297:	83 c4 10             	add    esp,0x10
c001f29a:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f29f:	74 0a                	je     c001f2ab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f2a1:	83 ec 0c             	sub    esp,0xc
c001f2a4:	68 b7 cf 02 c0       	push   0xc002cfb7
c001f2a9:	eb 19                	jmp    c001f2c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f2ab:	51                   	push   ecx
c001f2ac:	51                   	push   ecx
c001f2ad:	6a 01                	push   0x1
c001f2af:	53                   	push   ebx
c001f2b0:	e8 d9 41 ff ff       	call   c001348e <File::open(FileOpenMode)>
c001f2b5:	83 c4 10             	add    esp,0x10
c001f2b8:	85 c0                	test   eax,eax
c001f2ba:	74 24                	je     c001f2e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f2bc:	83 ec 0c             	sub    esp,0xc
c001f2bf:	68 d0 cf 02 c0       	push   0xc002cfd0
c001f2c4:	e8 be b5 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001f2c9:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f2ce:	83 c4 10             	add    esp,0x10
c001f2d1:	48                   	dec    eax
c001f2d2:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f2d7:	85 c0                	test   eax,eax
c001f2d9:	75 01                	jne    c001f2dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f2db:	fb                   	sti    
c001f2dc:	31 f6                	xor    esi,esi
c001f2de:	eb 58                	jmp    c001f338 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f2e0:	0f b7 ed             	movzx  ebp,bp
c001f2e3:	50                   	push   eax
c001f2e4:	0f b7 ff             	movzx  edi,di
c001f2e7:	50                   	push   eax
c001f2e8:	55                   	push   ebp
c001f2e9:	57                   	push   edi
c001f2ea:	e8 90 fd ff ff       	call   c001f07f <Vm::realToLinear(unsigned short, unsigned short)>
c001f2ef:	5a                   	pop    edx
c001f2f0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f2f2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f2f6:	51                   	push   ecx
c001f2f7:	50                   	push   eax
c001f2f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f2fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f300:	53                   	push   ebx
c001f301:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f304:	83 c4 14             	add    esp,0x14
c001f307:	53                   	push   ebx
c001f308:	e8 df 41 ff ff       	call   c00134ec <File::close()>
c001f30d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f312:	83 c4 10             	add    esp,0x10
c001f315:	48                   	dec    eax
c001f316:	c6 05 c5 23 03 c0 00 	mov    BYTE PTR ds:0xc00323c5,0x0
c001f31d:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f322:	85 c0                	test   eax,eax
c001f324:	75 01                	jne    c001f327 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f326:	fb                   	sti    
c001f327:	83 ec 0c             	sub    esp,0xc
c001f32a:	ff 35 c8 23 03 c0    	push   DWORD PTR ds:0xc00323c8
c001f330:	e8 0d f6 ff ff       	call   c001e942 <unblockTask(ThreadControlBlock*)>
c001f335:	83 c4 10             	add    esp,0x10
c001f338:	83 c4 2c             	add    esp,0x2c
c001f33b:	89 f0                	mov    eax,esi
c001f33d:	5b                   	pop    ebx
c001f33e:	5e                   	pop    esi
c001f33f:	5f                   	pop    edi
c001f340:	5d                   	pop    ebp
c001f341:	c3                   	ret    

c001f342 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f342:	57                   	push   edi
c001f343:	56                   	push   esi
c001f344:	53                   	push   ebx
c001f345:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f34d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f351:	83 e8 06             	sub    eax,0x6
c001f354:	0f b7 c0             	movzx  eax,ax
c001f357:	50                   	push   eax
c001f358:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f35d:	50                   	push   eax
c001f35e:	e8 1c fd ff ff       	call   c001f07f <Vm::realToLinear(unsigned short, unsigned short)>
c001f363:	5a                   	pop    edx
c001f364:	5e                   	pop    esi
c001f365:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f368:	8d 56 fa             	lea    edx,[esi-0x6]
c001f36b:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f371:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f374:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f377:	83 c2 02             	add    edx,0x2
c001f37a:	66 89 10             	mov    WORD PTR [eax],dx
c001f37d:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f380:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f384:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f387:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f38b:	89 d6                	mov    esi,edx
c001f38d:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f393:	66 81 e6 ff fd       	and    si,0xfdff
c001f398:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f39c:	74 07                	je     c001f3a5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f39e:	89 d6                	mov    esi,edx
c001f3a0:	66 81 ce 00 02       	or     si,0x200
c001f3a5:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f3a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3ae:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f3b2:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f3ba:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f3bd:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f3c5:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f3c8:	5b                   	pop    ebx
c001f3c9:	5e                   	pop    esi
c001f3ca:	5f                   	pop    edi
c001f3cb:	c3                   	ret    

c001f3cc <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f3cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3d1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3d6:	c1 e0 04             	shl    eax,0x4
c001f3d9:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f3dc:	c3                   	ret    

c001f3dd <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f3dd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3e2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3e7:	c1 e0 04             	shl    eax,0x4
c001f3ea:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f3ee:	c3                   	ret    

c001f3ef <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f3ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3f4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3f9:	c1 e0 04             	shl    eax,0x4
c001f3fc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f3ff:	c3                   	ret    

c001f400 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f400:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f405:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f40a:	c1 e0 04             	shl    eax,0x4
c001f40d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f411:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f414:	c3                   	ret    

c001f415 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f415:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f41a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f41f:	c1 e0 04             	shl    eax,0x4
c001f422:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f426:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f42a:	c3                   	ret    

c001f42b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f42b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f430:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f435:	c1 e0 04             	shl    eax,0x4
c001f438:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f43c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f43f:	c3                   	ret    

c001f440 <Vm::faultHandler(regs*)>:
c001f440:	55                   	push   ebp
c001f441:	57                   	push   edi
c001f442:	56                   	push   esi
c001f443:	53                   	push   ebx
c001f444:	83 ec 1c             	sub    esp,0x1c
c001f447:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f44b:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f44e:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f451:	0f b7 c1             	movzx  eax,cx
c001f454:	50                   	push   eax
c001f455:	0f b7 c3             	movzx  eax,bx
c001f458:	c1 e3 04             	shl    ebx,0x4
c001f45b:	50                   	push   eax
c001f45c:	e8 1e fc ff ff       	call   c001f07f <Vm::realToLinear(unsigned short, unsigned short)>
c001f461:	5a                   	pop    edx
c001f462:	89 c5                	mov    ebp,eax
c001f464:	5e                   	pop    esi
c001f465:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f469:	50                   	push   eax
c001f46a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f46e:	50                   	push   eax
c001f46f:	e8 0b fc ff ff       	call   c001f07f <Vm::realToLinear(unsigned short, unsigned short)>
c001f474:	01 cb                	add    ebx,ecx
c001f476:	89 c6                	mov    esi,eax
c001f478:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f47c:	50                   	push   eax
c001f47d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f481:	50                   	push   eax
c001f482:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f486:	50                   	push   eax
c001f487:	55                   	push   ebp
c001f488:	53                   	push   ebx
c001f489:	b3 06                	mov    bl,0x6
c001f48b:	68 e9 cf 02 c0       	push   0xc002cfe9
c001f490:	e8 36 3a ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f495:	83 c4 20             	add    esp,0x20
c001f498:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f49d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f4a2:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4a6:	3c 9d                	cmp    al,0x9d
c001f4a8:	0f 84 d7 02 00 00    	je     c001f785 <Vm::faultHandler(regs*)+0x345>
c001f4ae:	0f 87 a3 00 00 00    	ja     c001f557 <Vm::faultHandler(regs*)+0x117>
c001f4b4:	3c 66                	cmp    al,0x66
c001f4b6:	0f 84 15 02 00 00    	je     c001f6d1 <Vm::faultHandler(regs*)+0x291>
c001f4bc:	77 5f                	ja     c001f51d <Vm::faultHandler(regs*)+0xdd>
c001f4be:	3c 36                	cmp    al,0x36
c001f4c0:	0f 84 f1 01 00 00    	je     c001f6b7 <Vm::faultHandler(regs*)+0x277>
c001f4c6:	77 28                	ja     c001f4f0 <Vm::faultHandler(regs*)+0xb0>
c001f4c8:	3c 26                	cmp    al,0x26
c001f4ca:	0f 84 99 01 00 00    	je     c001f669 <Vm::faultHandler(regs*)+0x229>
c001f4d0:	3c 2e                	cmp    al,0x2e
c001f4d2:	0f 85 3b 07 00 00    	jne    c001fc13 <Vm::faultHandler(regs*)+0x7d3>
c001f4d8:	83 ec 0c             	sub    esp,0xc
c001f4db:	31 db                	xor    ebx,ebx
c001f4dd:	68 fe cf 02 c0       	push   0xc002cffe
c001f4e2:	e8 e4 39 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f4e7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f4ea:	83 c4 10             	add    esp,0x10
c001f4ed:	45                   	inc    ebp
c001f4ee:	eb b2                	jmp    c001f4a2 <Vm::faultHandler(regs*)+0x62>
c001f4f0:	3c 64                	cmp    al,0x64
c001f4f2:	0f 84 8b 01 00 00    	je     c001f683 <Vm::faultHandler(regs*)+0x243>
c001f4f8:	0f 87 9f 01 00 00    	ja     c001f69d <Vm::faultHandler(regs*)+0x25d>
c001f4fe:	3c 3e                	cmp    al,0x3e
c001f500:	0f 85 0d 07 00 00    	jne    c001fc13 <Vm::faultHandler(regs*)+0x7d3>
c001f506:	83 ec 0c             	sub    esp,0xc
c001f509:	b3 01                	mov    bl,0x1
c001f50b:	68 02 d0 02 c0       	push   0xc002d002
c001f510:	e8 b6 39 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f515:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f518:	83 c4 10             	add    esp,0x10
c001f51b:	eb d0                	jmp    c001f4ed <Vm::faultHandler(regs*)+0xad>
c001f51d:	3c 6d                	cmp    al,0x6d
c001f51f:	0f 84 af 03 00 00    	je     c001f8d4 <Vm::faultHandler(regs*)+0x494>
c001f525:	77 15                	ja     c001f53c <Vm::faultHandler(regs*)+0xfc>
c001f527:	3c 67                	cmp    al,0x67
c001f529:	0f 84 bf 01 00 00    	je     c001f6ee <Vm::faultHandler(regs*)+0x2ae>
c001f52f:	3c 6c                	cmp    al,0x6c
c001f531:	0f 84 3f 03 00 00    	je     c001f876 <Vm::faultHandler(regs*)+0x436>
c001f537:	e9 d7 06 00 00       	jmp    c001fc13 <Vm::faultHandler(regs*)+0x7d3>
c001f53c:	3c 6f                	cmp    al,0x6f
c001f53e:	0f 84 a4 04 00 00    	je     c001f9e8 <Vm::faultHandler(regs*)+0x5a8>
c001f544:	0f 82 11 04 00 00    	jb     c001f95b <Vm::faultHandler(regs*)+0x51b>
c001f54a:	3c 9c                	cmp    al,0x9c
c001f54c:	0f 84 ba 01 00 00    	je     c001f70c <Vm::faultHandler(regs*)+0x2cc>
c001f552:	e9 bc 06 00 00       	jmp    c001fc13 <Vm::faultHandler(regs*)+0x7d3>
c001f557:	3c ec                	cmp    al,0xec
c001f559:	0f 84 24 06 00 00    	je     c001fb83 <Vm::faultHandler(regs*)+0x743>
c001f55f:	0f 87 93 00 00 00    	ja     c001f5f8 <Vm::faultHandler(regs*)+0x1b8>
c001f565:	3c e4                	cmp    al,0xe4
c001f567:	0f 84 5c 05 00 00    	je     c001fac9 <Vm::faultHandler(regs*)+0x689>
c001f56d:	77 6a                	ja     c001f5d9 <Vm::faultHandler(regs*)+0x199>
c001f56f:	3c cd                	cmp    al,0xcd
c001f571:	0f 84 7e 02 00 00    	je     c001f7f5 <Vm::faultHandler(regs*)+0x3b5>
c001f577:	3c cf                	cmp    al,0xcf
c001f579:	0f 85 94 06 00 00    	jne    c001fc13 <Vm::faultHandler(regs*)+0x7d3>
c001f57f:	83 ec 0c             	sub    esp,0xc
c001f582:	68 46 d0 02 c0       	push   0xc002d046
c001f587:	e8 3f 39 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f58c:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f58f:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f592:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f596:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f599:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f59d:	0d 00 02 02 00       	or     eax,0x20200
c001f5a2:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f5a5:	56                   	push   esi
c001f5a6:	53                   	push   ebx
c001f5a7:	52                   	push   edx
c001f5a8:	68 4c d0 02 c0       	push   0xc002d04c
c001f5ad:	e8 19 39 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f5b2:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f5b6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f5bc:	66 c1 e8 09          	shr    ax,0x9
c001f5c0:	83 e0 01             	and    eax,0x1
c001f5c3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f5c6:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f5c9:	83 c0 06             	add    eax,0x6
c001f5cc:	25 ff ff 00 00       	and    eax,0xffff
c001f5d1:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f5d4:	e9 95 02 00 00       	jmp    c001f86e <Vm::faultHandler(regs*)+0x42e>
c001f5d9:	3c e6                	cmp    al,0xe6
c001f5db:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f5df:	0f 84 4e 05 00 00    	je     c001fb33 <Vm::faultHandler(regs*)+0x6f3>
c001f5e5:	0f 82 0a 05 00 00    	jb     c001faf5 <Vm::faultHandler(regs*)+0x6b5>
c001f5eb:	3c e7                	cmp    al,0xe7
c001f5ed:	0f 84 69 05 00 00    	je     c001fb5c <Vm::faultHandler(regs*)+0x71c>
c001f5f3:	e9 1b 06 00 00       	jmp    c001fc13 <Vm::faultHandler(regs*)+0x7d3>
c001f5f8:	3c ef                	cmp    al,0xef
c001f5fa:	0f 84 e6 05 00 00    	je     c001fbe6 <Vm::faultHandler(regs*)+0x7a6>
c001f600:	77 37                	ja     c001f639 <Vm::faultHandler(regs*)+0x1f9>
c001f602:	3c ed                	cmp    al,0xed
c001f604:	0f 84 a3 05 00 00    	je     c001fbad <Vm::faultHandler(regs*)+0x76d>
c001f60a:	3c ee                	cmp    al,0xee
c001f60c:	0f 85 01 06 00 00    	jne    c001fc13 <Vm::faultHandler(regs*)+0x7d3>
c001f612:	52                   	push   edx
c001f613:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f616:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f619:	68 e7 d0 02 c0       	push   0xc002d0e7
c001f61e:	e8 a8 38 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f623:	59                   	pop    ecx
c001f624:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f628:	5b                   	pop    ebx
c001f629:	50                   	push   eax
c001f62a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f62e:	50                   	push   eax
c001f62f:	e8 f8 f9 ff ff       	call   c001f02c <Vm::outbv(unsigned short, unsigned char)>
c001f634:	e9 a5 05 00 00       	jmp    c001fbde <Vm::faultHandler(regs*)+0x79e>
c001f639:	3c fa                	cmp    al,0xfa
c001f63b:	0f 84 f7 01 00 00    	je     c001f838 <Vm::faultHandler(regs*)+0x3f8>
c001f641:	3c fb                	cmp    al,0xfb
c001f643:	0f 84 0a 02 00 00    	je     c001f853 <Vm::faultHandler(regs*)+0x413>
c001f649:	3c f3                	cmp    al,0xf3
c001f64b:	0f 85 c2 05 00 00    	jne    c001fc13 <Vm::faultHandler(regs*)+0x7d3>
c001f651:	83 ec 0c             	sub    esp,0xc
c001f654:	68 1f d0 02 c0       	push   0xc002d01f
c001f659:	e8 6d 38 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f65e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f661:	83 c4 10             	add    esp,0x10
c001f664:	e9 84 fe ff ff       	jmp    c001f4ed <Vm::faultHandler(regs*)+0xad>
c001f669:	83 ec 0c             	sub    esp,0xc
c001f66c:	b3 02                	mov    bl,0x2
c001f66e:	68 fa cf 02 c0       	push   0xc002cffa
c001f673:	e8 53 38 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f678:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f67b:	83 c4 10             	add    esp,0x10
c001f67e:	e9 6a fe ff ff       	jmp    c001f4ed <Vm::faultHandler(regs*)+0xad>
c001f683:	83 ec 0c             	sub    esp,0xc
c001f686:	b3 03                	mov    bl,0x3
c001f688:	68 06 d0 02 c0       	push   0xc002d006
c001f68d:	e8 39 38 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f692:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f695:	83 c4 10             	add    esp,0x10
c001f698:	e9 50 fe ff ff       	jmp    c001f4ed <Vm::faultHandler(regs*)+0xad>
c001f69d:	83 ec 0c             	sub    esp,0xc
c001f6a0:	b3 04                	mov    bl,0x4
c001f6a2:	68 0a d0 02 c0       	push   0xc002d00a
c001f6a7:	e8 1f 38 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f6ac:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6af:	83 c4 10             	add    esp,0x10
c001f6b2:	e9 36 fe ff ff       	jmp    c001f4ed <Vm::faultHandler(regs*)+0xad>
c001f6b7:	83 ec 0c             	sub    esp,0xc
c001f6ba:	b3 05                	mov    bl,0x5
c001f6bc:	68 0e d0 02 c0       	push   0xc002d00e
c001f6c1:	e8 05 38 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f6c6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6c9:	83 c4 10             	add    esp,0x10
c001f6cc:	e9 1c fe ff ff       	jmp    c001f4ed <Vm::faultHandler(regs*)+0xad>
c001f6d1:	83 ec 0c             	sub    esp,0xc
c001f6d4:	68 12 d0 02 c0       	push   0xc002d012
c001f6d9:	e8 ed 37 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f6de:	83 c4 10             	add    esp,0x10
c001f6e1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6e4:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6e9:	e9 ff fd ff ff       	jmp    c001f4ed <Vm::faultHandler(regs*)+0xad>
c001f6ee:	50                   	push   eax
c001f6ef:	50                   	push   eax
c001f6f0:	6a 01                	push   0x1
c001f6f2:	68 17 d0 02 c0       	push   0xc002d017
c001f6f7:	e8 cf 37 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f6fc:	83 c4 10             	add    esp,0x10
c001f6ff:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f702:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f707:	e9 e1 fd ff ff       	jmp    c001f4ed <Vm::faultHandler(regs*)+0xad>
c001f70c:	83 ec 0c             	sub    esp,0xc
c001f70f:	68 25 d0 02 c0       	push   0xc002d025
c001f714:	e8 b2 37 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f719:	83 c4 10             	add    esp,0x10
c001f71c:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f71f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f724:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f727:	74 2f                	je     c001f758 <Vm::faultHandler(regs*)+0x318>
c001f729:	83 ea 04             	sub    edx,0x4
c001f72c:	25 ff 0d 00 00       	and    eax,0xdff
c001f731:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f737:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f73a:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f73d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f743:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f747:	0f 84 bf 04 00 00    	je     c001fc0c <Vm::faultHandler(regs*)+0x7cc>
c001f74d:	80 cc 02             	or     ah,0x2
c001f750:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f753:	e9 b4 04 00 00       	jmp    c001fc0c <Vm::faultHandler(regs*)+0x7cc>
c001f758:	83 ea 02             	sub    edx,0x2
c001f75b:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f761:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f764:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f768:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f76e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f772:	74 05                	je     c001f779 <Vm::faultHandler(regs*)+0x339>
c001f774:	80 cc 02             	or     ah,0x2
c001f777:	eb 03                	jmp    c001f77c <Vm::faultHandler(regs*)+0x33c>
c001f779:	80 e4 fd             	and    ah,0xfd
c001f77c:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f780:	e9 87 04 00 00       	jmp    c001fc0c <Vm::faultHandler(regs*)+0x7cc>
c001f785:	83 ec 0c             	sub    esp,0xc
c001f788:	68 2c d0 02 c0       	push   0xc002d02c
c001f78d:	e8 39 37 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f792:	83 c4 10             	add    esp,0x10
c001f795:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f79a:	74 28                	je     c001f7c4 <Vm::faultHandler(regs*)+0x384>
c001f79c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f79e:	25 ff 0d 00 00       	and    eax,0xdff
c001f7a3:	0d 00 02 02 00       	or     eax,0x20200
c001f7a8:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7ab:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7ad:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7b3:	c1 e8 09             	shr    eax,0x9
c001f7b6:	83 e0 01             	and    eax,0x1
c001f7b9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7bc:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7bf:	83 c0 04             	add    eax,0x4
c001f7c2:	eb 24                	jmp    c001f7e8 <Vm::faultHandler(regs*)+0x3a8>
c001f7c4:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f7c7:	0d 00 02 02 00       	or     eax,0x20200
c001f7cc:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7cf:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f7d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7d8:	66 c1 e8 09          	shr    ax,0x9
c001f7dc:	83 e0 01             	and    eax,0x1
c001f7df:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7e2:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7e5:	83 c0 02             	add    eax,0x2
c001f7e8:	25 ff ff 00 00       	and    eax,0xffff
c001f7ed:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f7f0:	e9 17 04 00 00       	jmp    c001fc0c <Vm::faultHandler(regs*)+0x7cc>
c001f7f5:	53                   	push   ebx
c001f7f6:	53                   	push   ebx
c001f7f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7fb:	50                   	push   eax
c001f7fc:	68 32 d0 02 c0       	push   0xc002d032
c001f801:	e8 c5 36 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f806:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f80a:	83 c4 10             	add    esp,0x10
c001f80d:	3c ee                	cmp    al,0xee
c001f80f:	75 10                	jne    c001f821 <Vm::faultHandler(regs*)+0x3e1>
c001f811:	83 ec 0c             	sub    esp,0xc
c001f814:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f817:	e8 ca f8 ff ff       	call   c001f0e6 <Vm::mainloop3(unsigned long)>
c001f81c:	e9 c0 03 00 00       	jmp    c001fbe1 <Vm::faultHandler(regs*)+0x7a1>
c001f821:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f825:	83 ec 0c             	sub    esp,0xc
c001f828:	53                   	push   ebx
c001f829:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f82d:	53                   	push   ebx
c001f82e:	55                   	push   ebp
c001f82f:	50                   	push   eax
c001f830:	57                   	push   edi
c001f831:	e8 0c fb ff ff       	call   c001f342 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f836:	eb 36                	jmp    c001f86e <Vm::faultHandler(regs*)+0x42e>
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	68 3c d0 02 c0       	push   0xc002d03c
c001f840:	e8 86 36 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f845:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f84a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f84e:	e9 8b 03 00 00       	jmp    c001fbde <Vm::faultHandler(regs*)+0x79e>
c001f853:	83 ec 0c             	sub    esp,0xc
c001f856:	68 41 d0 02 c0       	push   0xc002d041
c001f85b:	e8 6b 36 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f860:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f865:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f869:	e9 70 03 00 00       	jmp    c001fbde <Vm::faultHandler(regs*)+0x79e>
c001f86e:	83 c4 20             	add    esp,0x20
c001f871:	e9 99 03 00 00       	jmp    c001fc0f <Vm::faultHandler(regs*)+0x7cf>
c001f876:	83 ec 0c             	sub    esp,0xc
c001f879:	68 7f d0 02 c0       	push   0xc002d07f
c001f87e:	e8 48 36 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f883:	83 c4 10             	add    esp,0x10
c001f886:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f889:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f88e:	74 0d                	je     c001f89d <Vm::faultHandler(regs*)+0x45d>
c001f890:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f897:	0f 87 9e 01 00 00    	ja     c001fa3b <Vm::faultHandler(regs*)+0x5fb>
c001f89d:	83 ec 0c             	sub    esp,0xc
c001f8a0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f8a4:	0f b7 db             	movzx  ebx,bx
c001f8a7:	50                   	push   eax
c001f8a8:	e8 6c f7 ff ff       	call   c001f019 <Vm::inbv(unsigned short)>
c001f8ad:	83 c4 0c             	add    esp,0xc
c001f8b0:	0f b6 c0             	movzx  eax,al
c001f8b3:	50                   	push   eax
c001f8b4:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f8b8:	50                   	push   eax
c001f8b9:	53                   	push   ebx
c001f8ba:	e8 41 fb ff ff       	call   c001f400 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f8bf:	83 c4 10             	add    esp,0x10
c001f8c2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f8c5:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f8c9:	74 03                	je     c001f8ce <Vm::faultHandler(regs*)+0x48e>
c001f8cb:	48                   	dec    eax
c001f8cc:	eb 01                	jmp    c001f8cf <Vm::faultHandler(regs*)+0x48f>
c001f8ce:	40                   	inc    eax
c001f8cf:	0f b7 c0             	movzx  eax,ax
c001f8d2:	eb 7f                	jmp    c001f953 <Vm::faultHandler(regs*)+0x513>
c001f8d4:	83 ec 0c             	sub    esp,0xc
c001f8d7:	68 b1 d0 02 c0       	push   0xc002d0b1
c001f8dc:	e8 ea 35 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f8e1:	83 c4 10             	add    esp,0x10
c001f8e4:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f8e7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f8ec:	74 0d                	je     c001f8fb <Vm::faultHandler(regs*)+0x4bb>
c001f8ee:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f8f5:	0f 87 40 01 00 00    	ja     c001fa3b <Vm::faultHandler(regs*)+0x5fb>
c001f8fb:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f8fe:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f902:	0f b7 db             	movzx  ebx,bx
c001f905:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f90a:	74 20                	je     c001f92c <Vm::faultHandler(regs*)+0x4ec>
c001f90c:	ed                   	in     eax,dx
c001f90d:	51                   	push   ecx
c001f90e:	50                   	push   eax
c001f90f:	56                   	push   esi
c001f910:	53                   	push   ebx
c001f911:	e8 15 fb ff ff       	call   c001f42b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f916:	83 c4 10             	add    esp,0x10
c001f919:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f91c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f920:	74 05                	je     c001f927 <Vm::faultHandler(regs*)+0x4e7>
c001f922:	83 e8 04             	sub    eax,0x4
c001f925:	eb 27                	jmp    c001f94e <Vm::faultHandler(regs*)+0x50e>
c001f927:	83 c0 04             	add    eax,0x4
c001f92a:	eb 22                	jmp    c001f94e <Vm::faultHandler(regs*)+0x50e>
c001f92c:	66 ed                	in     ax,dx
c001f92e:	0f b7 c0             	movzx  eax,ax
c001f931:	52                   	push   edx
c001f932:	50                   	push   eax
c001f933:	56                   	push   esi
c001f934:	53                   	push   ebx
c001f935:	e8 db fa ff ff       	call   c001f415 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f93a:	83 c4 10             	add    esp,0x10
c001f93d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f940:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f944:	74 05                	je     c001f94b <Vm::faultHandler(regs*)+0x50b>
c001f946:	83 e8 02             	sub    eax,0x2
c001f949:	eb 03                	jmp    c001f94e <Vm::faultHandler(regs*)+0x50e>
c001f94b:	83 c0 02             	add    eax,0x2
c001f94e:	25 ff ff 00 00       	and    eax,0xffff
c001f953:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f956:	e9 b1 02 00 00       	jmp    c001fc0c <Vm::faultHandler(regs*)+0x7cc>
c001f95b:	83 ec 0c             	sub    esp,0xc
c001f95e:	4b                   	dec    ebx
c001f95f:	68 b7 d0 02 c0       	push   0xc002d0b7
c001f964:	e8 62 35 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f969:	83 c4 10             	add    esp,0x10
c001f96c:	80 fb 05             	cmp    bl,0x5
c001f96f:	77 0a                	ja     c001f97b <Vm::faultHandler(regs*)+0x53b>
c001f971:	0f b6 db             	movzx  ebx,bl
c001f974:	ff 24 9d 28 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2ed8]
c001f97b:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f97f:	eb 1b                	jmp    c001f99c <Vm::faultHandler(regs*)+0x55c>
c001f981:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f985:	eb 15                	jmp    c001f99c <Vm::faultHandler(regs*)+0x55c>
c001f987:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f98b:	eb 0f                	jmp    c001f99c <Vm::faultHandler(regs*)+0x55c>
c001f98d:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f991:	eb 09                	jmp    c001f99c <Vm::faultHandler(regs*)+0x55c>
c001f993:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f996:	eb 04                	jmp    c001f99c <Vm::faultHandler(regs*)+0x55c>
c001f998:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f99c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f9a1:	74 0d                	je     c001f9b0 <Vm::faultHandler(regs*)+0x570>
c001f9a3:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f9aa:	0f 87 8b 00 00 00    	ja     c001fa3b <Vm::faultHandler(regs*)+0x5fb>
c001f9b0:	53                   	push   ebx
c001f9b1:	53                   	push   ebx
c001f9b2:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f9b6:	52                   	push   edx
c001f9b7:	50                   	push   eax
c001f9b8:	e8 0f fa ff ff       	call   c001f3cc <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f9bd:	5e                   	pop    esi
c001f9be:	0f b6 c0             	movzx  eax,al
c001f9c1:	5d                   	pop    ebp
c001f9c2:	50                   	push   eax
c001f9c3:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f9c7:	50                   	push   eax
c001f9c8:	e8 5f f6 ff ff       	call   c001f02c <Vm::outbv(unsigned short, unsigned char)>
c001f9cd:	83 c4 10             	add    esp,0x10
c001f9d0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f9d3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f9d7:	74 03                	je     c001f9dc <Vm::faultHandler(regs*)+0x59c>
c001f9d9:	48                   	dec    eax
c001f9da:	eb 01                	jmp    c001f9dd <Vm::faultHandler(regs*)+0x59d>
c001f9dc:	40                   	inc    eax
c001f9dd:	0f b7 c0             	movzx  eax,ax
c001f9e0:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f9e3:	e9 24 02 00 00       	jmp    c001fc0c <Vm::faultHandler(regs*)+0x7cc>
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	4b                   	dec    ebx
c001f9ec:	68 b7 d0 02 c0       	push   0xc002d0b7
c001f9f1:	e8 d5 34 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001f9f6:	83 c4 10             	add    esp,0x10
c001f9f9:	80 fb 05             	cmp    bl,0x5
c001f9fc:	77 0a                	ja     c001fa08 <Vm::faultHandler(regs*)+0x5c8>
c001f9fe:	0f b6 db             	movzx  ebx,bl
c001fa01:	ff 24 9d 40 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2ec0]
c001fa08:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fa0c:	eb 1b                	jmp    c001fa29 <Vm::faultHandler(regs*)+0x5e9>
c001fa0e:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fa12:	eb 15                	jmp    c001fa29 <Vm::faultHandler(regs*)+0x5e9>
c001fa14:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fa18:	eb 0f                	jmp    c001fa29 <Vm::faultHandler(regs*)+0x5e9>
c001fa1a:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fa1e:	eb 09                	jmp    c001fa29 <Vm::faultHandler(regs*)+0x5e9>
c001fa20:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fa23:	eb 04                	jmp    c001fa29 <Vm::faultHandler(regs*)+0x5e9>
c001fa25:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fa29:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fa2c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa31:	74 39                	je     c001fa6c <Vm::faultHandler(regs*)+0x62c>
c001fa33:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fa39:	76 31                	jbe    c001fa6c <Vm::faultHandler(regs*)+0x62c>
c001fa3b:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fa3f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fa43:	51                   	push   ecx
c001fa44:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fa48:	51                   	push   ecx
c001fa49:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fa4d:	51                   	push   ecx
c001fa4e:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fa52:	51                   	push   ecx
c001fa53:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fa57:	52                   	push   edx
c001fa58:	50                   	push   eax
c001fa59:	50                   	push   eax
c001fa5a:	68 84 d0 02 c0       	push   0xc002d084
c001fa5f:	e8 67 34 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001fa64:	83 c4 20             	add    esp,0x20
c001fa67:	e9 fb 01 00 00       	jmp    c001fc67 <Vm::faultHandler(regs*)+0x827>
c001fa6c:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fa6f:	0f b7 d3             	movzx  edx,bx
c001fa72:	81 e6 00 04 00 00    	and    esi,0x400
c001fa78:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fa7b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa80:	74 1d                	je     c001fa9f <Vm::faultHandler(regs*)+0x65f>
c001fa82:	51                   	push   ecx
c001fa83:	51                   	push   ecx
c001fa84:	52                   	push   edx
c001fa85:	50                   	push   eax
c001fa86:	e8 64 f9 ff ff       	call   c001f3ef <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fa8b:	83 c4 10             	add    esp,0x10
c001fa8e:	89 ea                	mov    edx,ebp
c001fa90:	ef                   	out    dx,eax
c001fa91:	85 f6                	test   esi,esi
c001fa93:	74 05                	je     c001fa9a <Vm::faultHandler(regs*)+0x65a>
c001fa95:	83 eb 04             	sub    ebx,0x4
c001fa98:	eb 21                	jmp    c001fabb <Vm::faultHandler(regs*)+0x67b>
c001fa9a:	83 c3 04             	add    ebx,0x4
c001fa9d:	eb 1c                	jmp    c001fabb <Vm::faultHandler(regs*)+0x67b>
c001fa9f:	51                   	push   ecx
c001faa0:	51                   	push   ecx
c001faa1:	52                   	push   edx
c001faa2:	50                   	push   eax
c001faa3:	e8 35 f9 ff ff       	call   c001f3dd <Vm::readWordFromReal(unsigned short, unsigned short)>
c001faa8:	83 c4 10             	add    esp,0x10
c001faab:	89 ea                	mov    edx,ebp
c001faad:	66 ef                	out    dx,ax
c001faaf:	85 f6                	test   esi,esi
c001fab1:	74 05                	je     c001fab8 <Vm::faultHandler(regs*)+0x678>
c001fab3:	83 eb 02             	sub    ebx,0x2
c001fab6:	eb 03                	jmp    c001fabb <Vm::faultHandler(regs*)+0x67b>
c001fab8:	83 c3 02             	add    ebx,0x2
c001fabb:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fac1:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fac4:	e9 43 01 00 00       	jmp    c001fc0c <Vm::faultHandler(regs*)+0x7cc>
c001fac9:	53                   	push   ebx
c001faca:	53                   	push   ebx
c001facb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001facf:	50                   	push   eax
c001fad0:	68 bd d0 02 c0       	push   0xc002d0bd
c001fad5:	e8 f1 33 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001fada:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fae1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fae5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fae8:	e8 2c f5 ff ff       	call   c001f019 <Vm::inbv(unsigned short)>
c001faed:	0f b6 c0             	movzx  eax,al
c001faf0:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001faf3:	eb 5e                	jmp    c001fb53 <Vm::faultHandler(regs*)+0x713>
c001faf5:	51                   	push   ecx
c001faf6:	51                   	push   ecx
c001faf7:	53                   	push   ebx
c001faf8:	68 c3 d0 02 c0       	push   0xc002d0c3
c001fafd:	e8 c9 33 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001fb02:	83 c4 10             	add    esp,0x10
c001fb05:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb0a:	74 07                	je     c001fb13 <Vm::faultHandler(regs*)+0x6d3>
c001fb0c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb10:	ed                   	in     eax,dx
c001fb11:	eb 14                	jmp    c001fb27 <Vm::faultHandler(regs*)+0x6e7>
c001fb13:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fb16:	66 31 db             	xor    bx,bx
c001fb19:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fb1c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb20:	66 ed                	in     ax,dx
c001fb22:	0f b7 c0             	movzx  eax,ax
c001fb25:	09 d8                	or     eax,ebx
c001fb27:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fb2a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb2e:	e9 dc 00 00 00       	jmp    c001fc0f <Vm::faultHandler(regs*)+0x7cf>
c001fb33:	50                   	push   eax
c001fb34:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb37:	53                   	push   ebx
c001fb38:	68 c9 d0 02 c0       	push   0xc002d0c9
c001fb3d:	e8 89 33 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001fb42:	58                   	pop    eax
c001fb43:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fb47:	5a                   	pop    edx
c001fb48:	50                   	push   eax
c001fb49:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb4d:	50                   	push   eax
c001fb4e:	e8 d9 f4 ff ff       	call   c001f02c <Vm::outbv(unsigned short, unsigned char)>
c001fb53:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb57:	e9 85 00 00 00       	jmp    c001fbe1 <Vm::faultHandler(regs*)+0x7a1>
c001fb5c:	50                   	push   eax
c001fb5d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb60:	53                   	push   ebx
c001fb61:	68 d2 d0 02 c0       	push   0xc002d0d2
c001fb66:	e8 60 33 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001fb6b:	83 c4 10             	add    esp,0x10
c001fb6e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb72:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb77:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fb7a:	74 03                	je     c001fb7f <Vm::faultHandler(regs*)+0x73f>
c001fb7c:	ef                   	out    dx,eax
c001fb7d:	eb ab                	jmp    c001fb2a <Vm::faultHandler(regs*)+0x6ea>
c001fb7f:	66 ef                	out    dx,ax
c001fb81:	eb a7                	jmp    c001fb2a <Vm::faultHandler(regs*)+0x6ea>
c001fb83:	55                   	push   ebp
c001fb84:	55                   	push   ebp
c001fb85:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fb88:	68 db d0 02 c0       	push   0xc002d0db
c001fb8d:	e8 39 33 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001fb92:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fb99:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fb9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fba0:	e8 74 f4 ff ff       	call   c001f019 <Vm::inbv(unsigned short)>
c001fba5:	0f b6 c0             	movzx  eax,al
c001fba8:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fbab:	eb 31                	jmp    c001fbde <Vm::faultHandler(regs*)+0x79e>
c001fbad:	56                   	push   esi
c001fbae:	56                   	push   esi
c001fbaf:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbb2:	68 e1 d0 02 c0       	push   0xc002d0e1
c001fbb7:	e8 0f 33 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001fbbc:	83 c4 10             	add    esp,0x10
c001fbbf:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fbc2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbc7:	74 03                	je     c001fbcc <Vm::faultHandler(regs*)+0x78c>
c001fbc9:	ed                   	in     eax,dx
c001fbca:	eb 0d                	jmp    c001fbd9 <Vm::faultHandler(regs*)+0x799>
c001fbcc:	66 ed                	in     ax,dx
c001fbce:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fbd1:	0f b7 c0             	movzx  eax,ax
c001fbd4:	66 31 d2             	xor    dx,dx
c001fbd7:	09 d0                	or     eax,edx
c001fbd9:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fbdc:	eb 2e                	jmp    c001fc0c <Vm::faultHandler(regs*)+0x7cc>
c001fbde:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fbe1:	83 c4 10             	add    esp,0x10
c001fbe4:	eb 29                	jmp    c001fc0f <Vm::faultHandler(regs*)+0x7cf>
c001fbe6:	50                   	push   eax
c001fbe7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fbea:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbed:	68 f0 d0 02 c0       	push   0xc002d0f0
c001fbf2:	e8 d4 32 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fbfd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc02:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fc05:	74 03                	je     c001fc0a <Vm::faultHandler(regs*)+0x7ca>
c001fc07:	ef                   	out    dx,eax
c001fc08:	eb 02                	jmp    c001fc0c <Vm::faultHandler(regs*)+0x7cc>
c001fc0a:	66 ef                	out    dx,ax
c001fc0c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc0f:	b0 01                	mov    al,0x1
c001fc11:	eb 56                	jmp    c001fc69 <Vm::faultHandler(regs*)+0x829>
c001fc13:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc17:	51                   	push   ecx
c001fc18:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc1c:	51                   	push   ecx
c001fc1d:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc21:	51                   	push   ecx
c001fc22:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc26:	51                   	push   ecx
c001fc27:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc2b:	52                   	push   edx
c001fc2c:	50                   	push   eax
c001fc2d:	50                   	push   eax
c001fc2e:	68 f9 d0 02 c0       	push   0xc002d0f9
c001fc33:	e8 93 32 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c001fc38:	83 c4 20             	add    esp,0x20
c001fc3b:	83 ec 0c             	sub    esp,0xc
c001fc3e:	6a 60                	push   0x60
c001fc40:	e8 d4 f3 ff ff       	call   c001f019 <Vm::inbv(unsigned short)>
c001fc45:	83 c4 10             	add    esp,0x10
c001fc48:	3c 1c                	cmp    al,0x1c
c001fc4a:	74 04                	je     c001fc50 <Vm::faultHandler(regs*)+0x810>
c001fc4c:	3c 5a                	cmp    al,0x5a
c001fc4e:	75 eb                	jne    c001fc3b <Vm::faultHandler(regs*)+0x7fb>
c001fc50:	3c 1c                	cmp    al,0x1c
c001fc52:	74 04                	je     c001fc58 <Vm::faultHandler(regs*)+0x818>
c001fc54:	3c 5a                	cmp    al,0x5a
c001fc56:	75 0f                	jne    c001fc67 <Vm::faultHandler(regs*)+0x827>
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	6a 60                	push   0x60
c001fc5d:	e8 b7 f3 ff ff       	call   c001f019 <Vm::inbv(unsigned short)>
c001fc62:	83 c4 10             	add    esp,0x10
c001fc65:	eb e9                	jmp    c001fc50 <Vm::faultHandler(regs*)+0x810>
c001fc67:	31 c0                	xor    eax,eax
c001fc69:	83 c4 1c             	add    esp,0x1c
c001fc6c:	5b                   	pop    ebx
c001fc6d:	5e                   	pop    esi
c001fc6e:	5f                   	pop    edi
c001fc6f:	5d                   	pop    ebp
c001fc70:	c3                   	ret    

c001fc71 <Vm::fpuInternalTo32(unsigned long long)>:
c001fc71:	57                   	push   edi
c001fc72:	56                   	push   esi
c001fc73:	53                   	push   ebx
c001fc74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7c:	89 d6                	mov    esi,edx
c001fc7e:	89 d7                	mov    edi,edx
c001fc80:	89 c1                	mov    ecx,eax
c001fc82:	c1 ef 14             	shr    edi,0x14
c001fc85:	89 d3                	mov    ebx,edx
c001fc87:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fc8d:	31 d2                	xor    edx,edx
c001fc8f:	89 f8                	mov    eax,edi
c001fc91:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fc97:	bf ff 00 00 00       	mov    edi,0xff
c001fc9c:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fca1:	83 d2 ff             	adc    edx,0xffffffff
c001fca4:	39 c7                	cmp    edi,eax
c001fca6:	bf 00 00 00 00       	mov    edi,0x0
c001fcab:	19 d7                	sbb    edi,edx
c001fcad:	72 15                	jb     c001fcc4 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fcaf:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fcb3:	c1 e0 17             	shl    eax,0x17
c001fcb6:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fcbc:	09 f1                	or     ecx,esi
c001fcbe:	09 c1                	or     ecx,eax
c001fcc0:	89 cf                	mov    edi,ecx
c001fcc2:	eb 02                	jmp    c001fcc6 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fcc4:	31 ff                	xor    edi,edi
c001fcc6:	89 f8                	mov    eax,edi
c001fcc8:	5b                   	pop    ebx
c001fcc9:	5e                   	pop    esi
c001fcca:	5f                   	pop    edi
c001fccb:	c3                   	ret    

c001fccc <Vm::fpuInternalTo64(unsigned long long)>:
c001fccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fcd4:	c3                   	ret    

c001fcd5 <Vm::fpu32ToInternal(unsigned int)>:
c001fcd5:	57                   	push   edi
c001fcd6:	31 ff                	xor    edi,edi
c001fcd8:	56                   	push   esi
c001fcd9:	53                   	push   ebx
c001fcda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fcde:	89 cb                	mov    ebx,ecx
c001fce0:	89 ce                	mov    esi,ecx
c001fce2:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fce8:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fcee:	c1 e9 17             	shr    ecx,0x17
c001fcf1:	89 f0                	mov    eax,esi
c001fcf3:	0f b6 d1             	movzx  edx,cl
c001fcf6:	81 c2 80 03 00 00    	add    edx,0x380
c001fcfc:	89 d1                	mov    ecx,edx
c001fcfe:	89 fa                	mov    edx,edi
c001fd00:	c1 e1 14             	shl    ecx,0x14
c001fd03:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fd07:	c1 e0 1d             	shl    eax,0x1d
c001fd0a:	89 d7                	mov    edi,edx
c001fd0c:	89 c6                	mov    esi,eax
c001fd0e:	89 ca                	mov    edx,ecx
c001fd10:	89 f0                	mov    eax,esi
c001fd12:	09 fa                	or     edx,edi
c001fd14:	09 da                	or     edx,ebx
c001fd16:	5b                   	pop    ebx
c001fd17:	5e                   	pop    esi
c001fd18:	5f                   	pop    edi
c001fd19:	c3                   	ret    

c001fd1a <Vm::fpu64ToInternal(unsigned long long)>:
c001fd1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd22:	c3                   	ret    

c001fd23 <Vm::fpuFloatToLong(unsigned long long)>:
c001fd23:	57                   	push   edi
c001fd24:	31 c0                	xor    eax,eax
c001fd26:	56                   	push   esi
c001fd27:	31 d2                	xor    edx,edx
c001fd29:	53                   	push   ebx
c001fd2a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd32:	89 d9                	mov    ecx,ebx
c001fd34:	c1 e9 14             	shr    ecx,0x14
c001fd37:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fd3d:	89 cf                	mov    edi,ecx
c001fd3f:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fd45:	78 33                	js     c001fd7a <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd47:	89 d9                	mov    ecx,ebx
c001fd49:	89 f0                	mov    eax,esi
c001fd4b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fd51:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fd57:	89 ca                	mov    edx,ecx
c001fd59:	b9 34 00 00 00       	mov    ecx,0x34
c001fd5e:	29 f9                	sub    ecx,edi
c001fd60:	0f ad d0             	shrd   eax,edx,cl
c001fd63:	d3 fa                	sar    edx,cl
c001fd65:	f6 c1 20             	test   cl,0x20
c001fd68:	74 05                	je     c001fd6f <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fd6a:	89 d0                	mov    eax,edx
c001fd6c:	c1 fa 1f             	sar    edx,0x1f
c001fd6f:	85 db                	test   ebx,ebx
c001fd71:	79 07                	jns    c001fd7a <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd73:	f7 d8                	neg    eax
c001fd75:	83 d2 00             	adc    edx,0x0
c001fd78:	f7 da                	neg    edx
c001fd7a:	5b                   	pop    ebx
c001fd7b:	5e                   	pop    esi
c001fd7c:	5f                   	pop    edi
c001fd7d:	c3                   	ret    

c001fd7e <Vm::fpuULongToFloat(unsigned long long)>:
c001fd7e:	57                   	push   edi
c001fd7f:	31 c9                	xor    ecx,ecx
c001fd81:	56                   	push   esi
c001fd82:	53                   	push   ebx
c001fd83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fd8b:	0f ba e7 14          	bt     edi,0x14
c001fd8f:	72 07                	jb     c001fd98 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fd91:	01 f6                	add    esi,esi
c001fd93:	11 ff                	adc    edi,edi
c001fd95:	41                   	inc    ecx
c001fd96:	eb f3                	jmp    c001fd8b <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fd98:	89 fa                	mov    edx,edi
c001fd9a:	89 f0                	mov    eax,esi
c001fd9c:	bb 33 04 00 00       	mov    ebx,0x433
c001fda1:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fda7:	29 cb                	sub    ebx,ecx
c001fda9:	89 d9                	mov    ecx,ebx
c001fdab:	5b                   	pop    ebx
c001fdac:	c1 e1 14             	shl    ecx,0x14
c001fdaf:	5e                   	pop    esi
c001fdb0:	09 ca                	or     edx,ecx
c001fdb2:	5f                   	pop    edi
c001fdb3:	c3                   	ret    

c001fdb4 <Vm::fpuLongToFloat(long long)>:
c001fdb4:	56                   	push   esi
c001fdb5:	31 c0                	xor    eax,eax
c001fdb7:	53                   	push   ebx
c001fdb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdc0:	39 c8                	cmp    eax,ecx
c001fdc2:	19 d8                	sbb    eax,ebx
c001fdc4:	7d 04                	jge    c001fdca <Vm::fpuLongToFloat(long long)+0x16>
c001fdc6:	31 f6                	xor    esi,esi
c001fdc8:	eb 0c                	jmp    c001fdd6 <Vm::fpuLongToFloat(long long)+0x22>
c001fdca:	f7 d9                	neg    ecx
c001fdcc:	be 01 00 00 00       	mov    esi,0x1
c001fdd1:	83 d3 00             	adc    ebx,0x0
c001fdd4:	f7 db                	neg    ebx
c001fdd6:	31 c0                	xor    eax,eax
c001fdd8:	0f ba e3 14          	bt     ebx,0x14
c001fddc:	72 07                	jb     c001fde5 <Vm::fpuLongToFloat(long long)+0x31>
c001fdde:	01 c9                	add    ecx,ecx
c001fde0:	11 db                	adc    ebx,ebx
c001fde2:	40                   	inc    eax
c001fde3:	eb f3                	jmp    c001fdd8 <Vm::fpuLongToFloat(long long)+0x24>
c001fde5:	ba 33 04 00 00       	mov    edx,0x433
c001fdea:	29 c2                	sub    edx,eax
c001fdec:	89 c8                	mov    eax,ecx
c001fdee:	c1 e2 14             	shl    edx,0x14
c001fdf1:	89 d9                	mov    ecx,ebx
c001fdf3:	89 f3                	mov    ebx,esi
c001fdf5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fdfb:	09 ca                	or     edx,ecx
c001fdfd:	84 db                	test   bl,bl
c001fdff:	74 06                	je     c001fe07 <Vm::fpuLongToFloat(long long)+0x53>
c001fe01:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fe07:	5b                   	pop    ebx
c001fe08:	5e                   	pop    esi
c001fe09:	c3                   	ret    

c001fe0a <Vm::fpuGet0()>:
c001fe0a:	31 c0                	xor    eax,eax
c001fe0c:	31 d2                	xor    edx,edx
c001fe0e:	c3                   	ret    

c001fe0f <Vm::fpuGet1()>:
c001fe0f:	b8 01 00 00 00       	mov    eax,0x1
c001fe14:	31 d2                	xor    edx,edx
c001fe16:	c3                   	ret    

c001fe17 <Vm::fpuGetPi()>:
c001fe17:	b8 03 00 00 00       	mov    eax,0x3
c001fe1c:	31 d2                	xor    edx,edx
c001fe1e:	c3                   	ret    

c001fe1f <Vm::fpuGetLog2E()>:
c001fe1f:	83 ec 18             	sub    esp,0x18
c001fe22:	68 58 d1 02 c0       	push   0xc002d158
c001fe27:	e8 5b aa ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001fe2c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe31:	31 d2                	xor    edx,edx
c001fe33:	83 c4 1c             	add    esp,0x1c
c001fe36:	c3                   	ret    

c001fe37 <Vm::fpuGetLogE2()>:
c001fe37:	83 ec 18             	sub    esp,0x18
c001fe3a:	68 64 d1 02 c0       	push   0xc002d164
c001fe3f:	e8 43 aa ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001fe44:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe49:	31 d2                	xor    edx,edx
c001fe4b:	83 c4 1c             	add    esp,0x1c
c001fe4e:	c3                   	ret    

c001fe4f <Vm::fpuGetLog210()>:
c001fe4f:	83 ec 18             	sub    esp,0x18
c001fe52:	68 70 d1 02 c0       	push   0xc002d170
c001fe57:	e8 2b aa ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001fe5c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe61:	31 d2                	xor    edx,edx
c001fe63:	83 c4 1c             	add    esp,0x1c
c001fe66:	c3                   	ret    

c001fe67 <Vm::fpuGetLog102()>:
c001fe67:	83 ec 18             	sub    esp,0x18
c001fe6a:	68 7d d1 02 c0       	push   0xc002d17d
c001fe6f:	e8 13 aa ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001fe74:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe79:	31 d2                	xor    edx,edx
c001fe7b:	83 c4 1c             	add    esp,0x1c
c001fe7e:	c3                   	ret    

c001fe7f <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fe7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe83:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fe87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe8b:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fe8f:	0f 92 c0             	setb   al
c001fe92:	c3                   	ret    

c001fe93 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fe93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9b:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fe9f:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fea3:	09 c2                	or     edx,eax
c001fea5:	0f 94 c0             	sete   al
c001fea8:	c3                   	ret    

c001fea9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fea9:	57                   	push   edi
c001feaa:	56                   	push   esi
c001feab:	53                   	push   ebx
c001feac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001feb0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001feb4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001feb8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001febc:	57                   	push   edi
c001febd:	56                   	push   esi
c001febe:	53                   	push   ebx
c001febf:	51                   	push   ecx
c001fec0:	e8 ce ff ff ff       	call   c001fe93 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fec5:	83 c4 10             	add    esp,0x10
c001fec8:	88 c2                	mov    dl,al
c001feca:	31 c0                	xor    eax,eax
c001fecc:	84 d2                	test   dl,dl
c001fece:	75 0c                	jne    c001fedc <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fed0:	57                   	push   edi
c001fed1:	56                   	push   esi
c001fed2:	53                   	push   ebx
c001fed3:	51                   	push   ecx
c001fed4:	e8 a6 ff ff ff       	call   c001fe7f <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fed9:	83 c4 10             	add    esp,0x10
c001fedc:	83 e0 01             	and    eax,0x1
c001fedf:	5b                   	pop    ebx
c001fee0:	88 c1                	mov    cl,al
c001fee2:	83 e2 01             	and    edx,0x1
c001fee5:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001feea:	c1 e2 06             	shl    edx,0x6
c001feed:	83 e0 ba             	and    eax,0xffffffba
c001fef0:	5e                   	pop    esi
c001fef1:	09 c8                	or     eax,ecx
c001fef3:	5f                   	pop    edi
c001fef4:	09 d0                	or     eax,edx
c001fef6:	a2 01 24 03 c0       	mov    ds:0xc0032401,al
c001fefb:	c3                   	ret    

c001fefc <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001fefc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff04:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ff08:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ff0c:	c3                   	ret    

c001ff0d <Vm::fpuAbs(unsigned long long)>:
c001ff0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff15:	c3                   	ret    

c001ff16 <Vm::fpuChs(unsigned long long)>:
c001ff16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff1e:	f7 d8                	neg    eax
c001ff20:	83 d2 00             	adc    edx,0x0
c001ff23:	f7 da                	neg    edx
c001ff25:	c3                   	ret    

c001ff26 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ff26:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ff2a:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ff2f:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ff33:	eb c7                	jmp    c001fefc <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ff35 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ff35:	53                   	push   ebx
c001ff36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff42:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff46:	0f af ca             	imul   ecx,edx
c001ff49:	0f af d8             	imul   ebx,eax
c001ff4c:	f7 e2                	mul    edx
c001ff4e:	01 d9                	add    ecx,ebx
c001ff50:	5b                   	pop    ebx
c001ff51:	01 ca                	add    edx,ecx
c001ff53:	c3                   	ret    

c001ff54 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ff54:	83 ec 0c             	sub    esp,0xc
c001ff57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff67:	e8 38 72 00 00       	call   c00271a4 <__udivdi3>
c001ff6c:	83 c4 1c             	add    esp,0x1c
c001ff6f:	c3                   	ret    

c001ff70 <Vm::fpuSquare(unsigned long long)>:
c001ff70:	50                   	push   eax
c001ff71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff79:	52                   	push   edx
c001ff7a:	50                   	push   eax
c001ff7b:	52                   	push   edx
c001ff7c:	50                   	push   eax
c001ff7d:	e8 b3 ff ff ff       	call   c001ff35 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff82:	83 c4 14             	add    esp,0x14
c001ff85:	c3                   	ret    

c001ff86 <Vm::fpuGetReg(int)>:
c001ff86:	83 ec 0c             	sub    esp,0xc
c001ff89:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ff8e:	76 10                	jbe    c001ffa0 <Vm::fpuGetReg(int)+0x1a>
c001ff90:	83 ec 0c             	sub    esp,0xc
c001ff93:	68 8a d1 02 c0       	push   0xc002d18a
c001ff98:	e8 ea a8 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001ff9d:	83 c4 10             	add    esp,0x10
c001ffa0:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001ffa5:	b9 08 00 00 00       	mov    ecx,0x8
c001ffaa:	c0 e8 03             	shr    al,0x3
c001ffad:	83 e0 07             	and    eax,0x7
c001ffb0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ffb4:	99                   	cdq    
c001ffb5:	f7 f9                	idiv   ecx
c001ffb7:	8b 04 d5 04 24 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdbfc]
c001ffbe:	8b 14 d5 08 24 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdbf8]
c001ffc5:	83 c4 0c             	add    esp,0xc
c001ffc8:	c3                   	ret    

c001ffc9 <Vm::fpuSetReg(int, unsigned long long)>:
c001ffc9:	57                   	push   edi
c001ffca:	56                   	push   esi
c001ffcb:	52                   	push   edx
c001ffcc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ffd0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ffd4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ffd9:	76 10                	jbe    c001ffeb <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ffdb:	83 ec 0c             	sub    esp,0xc
c001ffde:	68 9d d1 02 c0       	push   0xc002d19d
c001ffe3:	e8 9f a8 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001ffe8:	83 c4 10             	add    esp,0x10
c001ffeb:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001fff0:	b9 08 00 00 00       	mov    ecx,0x8
c001fff5:	c0 e8 03             	shr    al,0x3
c001fff8:	83 e0 07             	and    eax,0x7
c001fffb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ffff:	99                   	cdq    
c0020000:	f7 f9                	idiv   ecx
c0020002:	89 34 d5 04 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbfc],esi
c0020009:	89 3c d5 08 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbf8],edi
c0020010:	58                   	pop    eax
c0020011:	5e                   	pop    esi
c0020012:	5f                   	pop    edi
c0020013:	c3                   	ret    

c0020014 <Vm::fpuPush(unsigned long long)>:
c0020014:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c0020019:	c0 e8 03             	shr    al,0x3
c002001c:	83 e0 07             	and    eax,0x7
c002001f:	83 c0 07             	add    eax,0x7
c0020022:	88 c2                	mov    dl,al
c0020024:	83 e0 07             	and    eax,0x7
c0020027:	83 e2 07             	and    edx,0x7
c002002a:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0020031:	8a 15 01 24 03 c0    	mov    dl,BYTE PTR ds:0xc0032401
c0020037:	83 e2 c7             	and    edx,0xffffffc7
c002003a:	09 ca                	or     edx,ecx
c002003c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020040:	88 15 01 24 03 c0    	mov    BYTE PTR ds:0xc0032401,dl
c0020046:	89 0c c5 08 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbf8],ecx
c002004d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020051:	89 14 c5 04 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbfc],edx
c0020058:	a1 44 24 03 c0       	mov    eax,ds:0xc0032444
c002005d:	83 f8 08             	cmp    eax,0x8
c0020060:	75 08                	jne    c002006a <Vm::fpuPush(unsigned long long)+0x56>
c0020062:	80 0d 00 24 03 c0 40 	or     BYTE PTR ds:0xc0032400,0x40
c0020069:	c3                   	ret    
c002006a:	40                   	inc    eax
c002006b:	a3 44 24 03 c0       	mov    ds:0xc0032444,eax
c0020070:	c3                   	ret    

c0020071 <Vm::fpuPop()>:
c0020071:	8a 0d 01 24 03 c0    	mov    cl,BYTE PTR ds:0xc0032401
c0020077:	53                   	push   ebx
c0020078:	c0 e9 03             	shr    cl,0x3
c002007b:	8a 1d 01 24 03 c0    	mov    bl,BYTE PTR ds:0xc0032401
c0020081:	83 e1 07             	and    ecx,0x7
c0020084:	83 e3 c7             	and    ebx,0xffffffc7
c0020087:	8b 04 cd 04 24 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdbfc]
c002008e:	8b 14 cd 08 24 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdbf8]
c0020095:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c002009c:	83 e1 38             	and    ecx,0x38
c002009f:	09 d9                	or     ecx,ebx
c00200a1:	88 0d 01 24 03 c0    	mov    BYTE PTR ds:0xc0032401,cl
c00200a7:	8b 0d 44 24 03 c0    	mov    ecx,DWORD PTR ds:0xc0032444
c00200ad:	85 c9                	test   ecx,ecx
c00200af:	74 09                	je     c00200ba <Vm::fpuPop()+0x49>
c00200b1:	49                   	dec    ecx
c00200b2:	89 0d 44 24 03 c0    	mov    DWORD PTR ds:0xc0032444,ecx
c00200b8:	eb 07                	jmp    c00200c1 <Vm::fpuPop()+0x50>
c00200ba:	80 0d 00 24 03 c0 40 	or     BYTE PTR ds:0xc0032400,0x40
c00200c1:	5b                   	pop    ebx
c00200c2:	c3                   	ret    

c00200c3 <Vm::x87Handler(regs*)>:
c00200c3:	55                   	push   ebp
c00200c4:	57                   	push   edi
c00200c5:	56                   	push   esi
c00200c6:	53                   	push   ebx
c00200c7:	83 ec 1c             	sub    esp,0x1c
c00200ca:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00200ce:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00200d3:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00200d6:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00200de:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00200e2:	50                   	push   eax
c00200e3:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00200e7:	50                   	push   eax
c00200e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00200ec:	50                   	push   eax
c00200ed:	53                   	push   ebx
c00200ee:	e8 5b 9e ff ff       	call   c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00200f3:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00200f6:	83 c4 10             	add    esp,0x10
c00200f9:	89 c6                	mov    esi,eax
c00200fb:	80 fa d9             	cmp    dl,0xd9
c00200fe:	0f 85 52 01 00 00    	jne    c0020256 <Vm::x87Handler(regs*)+0x193>
c0020104:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020108:	8d 50 20             	lea    edx,[eax+0x20]
c002010b:	80 fa 0e             	cmp    dl,0xe
c002010e:	0f 87 86 00 00 00    	ja     c002019a <Vm::x87Handler(regs*)+0xd7>
c0020114:	0f b6 d2             	movzx  edx,dl
c0020117:	ff 24 95 b0 d1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2e50]
c002011e:	e8 e7 fc ff ff       	call   c001fe0a <Vm::fpuGet0()>
c0020123:	eb 05                	jmp    c002012a <Vm::x87Handler(regs*)+0x67>
c0020125:	e8 e5 fc ff ff       	call   c001fe0f <Vm::fpuGet1()>
c002012a:	57                   	push   edi
c002012b:	57                   	push   edi
c002012c:	52                   	push   edx
c002012d:	50                   	push   eax
c002012e:	e8 e1 fe ff ff       	call   c0020014 <Vm::fpuPush(unsigned long long)>
c0020133:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020137:	83 c4 10             	add    esp,0x10
c002013a:	b0 01                	mov    al,0x1
c002013c:	e9 e3 09 00 00       	jmp    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c0020141:	83 ec 0c             	sub    esp,0xc
c0020144:	6a 00                	push   0x0
c0020146:	e8 3b fe ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002014b:	59                   	pop    ecx
c002014c:	5e                   	pop    esi
c002014d:	52                   	push   edx
c002014e:	50                   	push   eax
c002014f:	e8 c2 fd ff ff       	call   c001ff16 <Vm::fpuChs(unsigned long long)>
c0020154:	eb 13                	jmp    c0020169 <Vm::x87Handler(regs*)+0xa6>
c0020156:	83 ec 0c             	sub    esp,0xc
c0020159:	6a 00                	push   0x0
c002015b:	e8 26 fe ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020160:	5f                   	pop    edi
c0020161:	5d                   	pop    ebp
c0020162:	52                   	push   edx
c0020163:	50                   	push   eax
c0020164:	e8 a4 fd ff ff       	call   c001ff0d <Vm::fpuAbs(unsigned long long)>
c0020169:	83 c4 0c             	add    esp,0xc
c002016c:	52                   	push   edx
c002016d:	50                   	push   eax
c002016e:	6a 00                	push   0x0
c0020170:	e8 54 fe ff ff       	call   c001ffc9 <Vm::fpuSetReg(int, unsigned long long)>
c0020175:	eb bc                	jmp    c0020133 <Vm::x87Handler(regs*)+0x70>
c0020177:	e8 d3 fc ff ff       	call   c001fe4f <Vm::fpuGetLog210()>
c002017c:	eb ac                	jmp    c002012a <Vm::x87Handler(regs*)+0x67>
c002017e:	e8 9c fc ff ff       	call   c001fe1f <Vm::fpuGetLog2E()>
c0020183:	eb a5                	jmp    c002012a <Vm::x87Handler(regs*)+0x67>
c0020185:	e8 8d fc ff ff       	call   c001fe17 <Vm::fpuGetPi()>
c002018a:	eb 9e                	jmp    c002012a <Vm::x87Handler(regs*)+0x67>
c002018c:	e8 d6 fc ff ff       	call   c001fe67 <Vm::fpuGetLog102()>
c0020191:	eb 97                	jmp    c002012a <Vm::x87Handler(regs*)+0x67>
c0020193:	e8 9f fc ff ff       	call   c001fe37 <Vm::fpuGetLogE2()>
c0020198:	eb 90                	jmp    c002012a <Vm::x87Handler(regs*)+0x67>
c002019a:	8d 50 40             	lea    edx,[eax+0x40]
c002019d:	80 fa 07             	cmp    dl,0x7
c00201a0:	77 15                	ja     c00201b7 <Vm::x87Handler(regs*)+0xf4>
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	2d c0 00 00 00       	sub    eax,0xc0
c00201aa:	50                   	push   eax
c00201ab:	e8 d6 fd ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00201b0:	59                   	pop    ecx
c00201b1:	5e                   	pop    esi
c00201b2:	e9 75 ff ff ff       	jmp    c002012c <Vm::x87Handler(regs*)+0x69>
c00201b7:	8d 50 38             	lea    edx,[eax+0x38]
c00201ba:	80 fa 07             	cmp    dl,0x7
c00201bd:	77 3c                	ja     c00201fb <Vm::x87Handler(regs*)+0x138>
c00201bf:	83 ec 0c             	sub    esp,0xc
c00201c2:	2d c8 00 00 00       	sub    eax,0xc8
c00201c7:	50                   	push   eax
c00201c8:	e8 b9 fd ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00201cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201d4:	89 c6                	mov    esi,eax
c00201d6:	89 d7                	mov    edi,edx
c00201d8:	e8 a9 fd ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00201dd:	83 c4 0c             	add    esp,0xc
c00201e0:	52                   	push   edx
c00201e1:	50                   	push   eax
c00201e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201e6:	2d c8 00 00 00       	sub    eax,0xc8
c00201eb:	50                   	push   eax
c00201ec:	e8 d8 fd ff ff       	call   c001ffc9 <Vm::fpuSetReg(int, unsigned long long)>
c00201f1:	83 c4 0c             	add    esp,0xc
c00201f4:	57                   	push   edi
c00201f5:	56                   	push   esi
c00201f6:	e9 73 ff ff ff       	jmp    c002016e <Vm::x87Handler(regs*)+0xab>
c00201fb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201ff:	84 d2                	test   dl,dl
c0020201:	75 0f                	jne    c0020212 <Vm::x87Handler(regs*)+0x14f>
c0020203:	83 ec 0c             	sub    esp,0xc
c0020206:	ff 36                	push   DWORD PTR [esi]
c0020208:	e8 c8 fa ff ff       	call   c001fcd5 <Vm::fpu32ToInternal(unsigned int)>
c002020d:	e9 bf 00 00 00       	jmp    c00202d1 <Vm::x87Handler(regs*)+0x20e>
c0020212:	80 fa 03             	cmp    dl,0x3
c0020215:	75 13                	jne    c002022a <Vm::x87Handler(regs*)+0x167>
c0020217:	e8 55 fe ff ff       	call   c0020071 <Vm::fpuPop()>
c002021c:	55                   	push   ebp
c002021d:	55                   	push   ebp
c002021e:	52                   	push   edx
c002021f:	50                   	push   eax
c0020220:	e8 4c fa ff ff       	call   c001fc71 <Vm::fpuInternalTo32(unsigned long long)>
c0020225:	e9 88 00 00 00       	jmp    c00202b2 <Vm::x87Handler(regs*)+0x1ef>
c002022a:	80 fa 05             	cmp    dl,0x5
c002022d:	75 0e                	jne    c002023d <Vm::x87Handler(regs*)+0x17a>
c002022f:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020232:	66 a3 02 24 03 c0    	mov    ds:0xc0032402,ax
c0020238:	e9 df 00 00 00       	jmp    c002031c <Vm::x87Handler(regs*)+0x259>
c002023d:	31 c0                	xor    eax,eax
c002023f:	80 fa 07             	cmp    dl,0x7
c0020242:	0f 85 dc 08 00 00    	jne    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c0020248:	66 a1 02 24 03 c0    	mov    ax,ds:0xc0032402
c002024e:	66 89 06             	mov    WORD PTR [esi],ax
c0020251:	e9 c6 00 00 00       	jmp    c002031c <Vm::x87Handler(regs*)+0x259>
c0020256:	80 fa d8             	cmp    dl,0xd8
c0020259:	0f 84 c9 00 00 00    	je     c0020328 <Vm::x87Handler(regs*)+0x265>
c002025f:	80 fa dc             	cmp    dl,0xdc
c0020262:	0f 84 0d 02 00 00    	je     c0020475 <Vm::x87Handler(regs*)+0x3b2>
c0020268:	80 fa de             	cmp    dl,0xde
c002026b:	0f 84 cd 02 00 00    	je     c002053e <Vm::x87Handler(regs*)+0x47b>
c0020271:	80 fa dd             	cmp    dl,0xdd
c0020274:	0f 84 5f 04 00 00    	je     c00206d9 <Vm::x87Handler(regs*)+0x616>
c002027a:	80 fa da             	cmp    dl,0xda
c002027d:	0f 84 24 05 00 00    	je     c00207a7 <Vm::x87Handler(regs*)+0x6e4>
c0020283:	80 fa df             	cmp    dl,0xdf
c0020286:	0f 84 68 05 00 00    	je     c00207f4 <Vm::x87Handler(regs*)+0x731>
c002028c:	31 c0                	xor    eax,eax
c002028e:	80 fa db             	cmp    dl,0xdb
c0020291:	0f 85 8d 08 00 00    	jne    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c0020297:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002029b:	80 fa 03             	cmp    dl,0x3
c002029e:	0f 85 70 06 00 00    	jne    c0020914 <Vm::x87Handler(regs*)+0x851>
c00202a4:	e8 c8 fd ff ff       	call   c0020071 <Vm::fpuPop()>
c00202a9:	55                   	push   ebp
c00202aa:	55                   	push   ebp
c00202ab:	52                   	push   edx
c00202ac:	50                   	push   eax
c00202ad:	e8 71 fa ff ff       	call   c001fd23 <Vm::fpuFloatToLong(unsigned long long)>
c00202b2:	83 c4 10             	add    esp,0x10
c00202b5:	89 06                	mov    DWORD PTR [esi],eax
c00202b7:	eb 63                	jmp    c002031c <Vm::x87Handler(regs*)+0x259>
c00202b9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202bd:	84 d2                	test   dl,dl
c00202bf:	0f 85 e6 05 00 00    	jne    c00208ab <Vm::x87Handler(regs*)+0x7e8>
c00202c5:	57                   	push   edi
c00202c6:	57                   	push   edi
c00202c7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202ca:	ff 36                	push   DWORD PTR [esi]
c00202cc:	e8 49 fa ff ff       	call   c001fd1a <Vm::fpu64ToInternal(unsigned long long)>
c00202d1:	5e                   	pop    esi
c00202d2:	5f                   	pop    edi
c00202d3:	52                   	push   edx
c00202d4:	50                   	push   eax
c00202d5:	e8 3a fd ff ff       	call   c0020014 <Vm::fpuPush(unsigned long long)>
c00202da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202de:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00202e1:	e9 51 fe ff ff       	jmp    c0020137 <Vm::x87Handler(regs*)+0x74>
c00202e6:	80 fa 03             	cmp    dl,0x3
c00202e9:	0f 85 d7 06 00 00    	jne    c00209c6 <Vm::x87Handler(regs*)+0x903>
c00202ef:	57                   	push   edi
c00202f0:	57                   	push   edi
c00202f1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202f4:	ff 36                	push   DWORD PTR [esi]
c00202f6:	e8 1f fa ff ff       	call   c001fd1a <Vm::fpu64ToInternal(unsigned long long)>
c00202fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020302:	89 c6                	mov    esi,eax
c0020304:	89 d7                	mov    edi,edx
c0020306:	e8 7b fc ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002030b:	57                   	push   edi
c002030c:	56                   	push   esi
c002030d:	52                   	push   edx
c002030e:	50                   	push   eax
c002030f:	e8 95 fb ff ff       	call   c001fea9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020314:	83 c4 20             	add    esp,0x20
c0020317:	e8 55 fd ff ff       	call   c0020071 <Vm::fpuPop()>
c002031c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020320:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020323:	e9 12 fe ff ff       	jmp    c002013a <Vm::x87Handler(regs*)+0x77>
c0020328:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002032c:	8d 50 40             	lea    edx,[eax+0x40]
c002032f:	80 fa 07             	cmp    dl,0x7
c0020332:	77 29                	ja     c002035d <Vm::x87Handler(regs*)+0x29a>
c0020334:	83 ec 0c             	sub    esp,0xc
c0020337:	2d c0 00 00 00       	sub    eax,0xc0
c002033c:	50                   	push   eax
c002033d:	e8 44 fc ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020342:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020349:	89 c6                	mov    esi,eax
c002034b:	89 d7                	mov    edi,edx
c002034d:	e8 34 fc ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020352:	57                   	push   edi
c0020353:	56                   	push   esi
c0020354:	52                   	push   edx
c0020355:	50                   	push   eax
c0020356:	e8 a1 fb ff ff       	call   c001fefc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002035b:	eb 2f                	jmp    c002038c <Vm::x87Handler(regs*)+0x2c9>
c002035d:	8d 50 38             	lea    edx,[eax+0x38]
c0020360:	80 fa 07             	cmp    dl,0x7
c0020363:	77 2f                	ja     c0020394 <Vm::x87Handler(regs*)+0x2d1>
c0020365:	83 ec 0c             	sub    esp,0xc
c0020368:	2d c8 00 00 00       	sub    eax,0xc8
c002036d:	50                   	push   eax
c002036e:	e8 13 fc ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020373:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002037a:	89 c6                	mov    esi,eax
c002037c:	89 d7                	mov    edi,edx
c002037e:	e8 03 fc ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020383:	57                   	push   edi
c0020384:	56                   	push   esi
c0020385:	52                   	push   edx
c0020386:	50                   	push   eax
c0020387:	e8 a9 fb ff ff       	call   c001ff35 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002038c:	83 c4 1c             	add    esp,0x1c
c002038f:	e9 d8 fd ff ff       	jmp    c002016c <Vm::x87Handler(regs*)+0xa9>
c0020394:	8d 50 30             	lea    edx,[eax+0x30]
c0020397:	80 fa 07             	cmp    dl,0x7
c002039a:	77 0d                	ja     c00203a9 <Vm::x87Handler(regs*)+0x2e6>
c002039c:	83 ec 0c             	sub    esp,0xc
c002039f:	2d d0 00 00 00       	sub    eax,0xd0
c00203a4:	e9 99 03 00 00       	jmp    c0020742 <Vm::x87Handler(regs*)+0x67f>
c00203a9:	8d 50 28             	lea    edx,[eax+0x28]
c00203ac:	80 fa 07             	cmp    dl,0x7
c00203af:	77 0d                	ja     c00203be <Vm::x87Handler(regs*)+0x2fb>
c00203b1:	83 ec 0c             	sub    esp,0xc
c00203b4:	2d d8 00 00 00       	sub    eax,0xd8
c00203b9:	e9 c0 03 00 00       	jmp    c002077e <Vm::x87Handler(regs*)+0x6bb>
c00203be:	8d 50 20             	lea    edx,[eax+0x20]
c00203c1:	80 fa 07             	cmp    dl,0x7
c00203c4:	77 1b                	ja     c00203e1 <Vm::x87Handler(regs*)+0x31e>
c00203c6:	83 ec 0c             	sub    esp,0xc
c00203c9:	2d e0 00 00 00       	sub    eax,0xe0
c00203ce:	50                   	push   eax
c00203cf:	e8 b2 fb ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00203d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203db:	89 c6                	mov    esi,eax
c00203dd:	89 d7                	mov    edi,edx
c00203df:	eb 22                	jmp    c0020403 <Vm::x87Handler(regs*)+0x340>
c00203e1:	8d 50 18             	lea    edx,[eax+0x18]
c00203e4:	80 fa 07             	cmp    dl,0x7
c00203e7:	77 2d                	ja     c0020416 <Vm::x87Handler(regs*)+0x353>
c00203e9:	83 ec 0c             	sub    esp,0xc
c00203ec:	6a 00                	push   0x0
c00203ee:	e8 93 fb ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00203f3:	89 c6                	mov    esi,eax
c00203f5:	89 d7                	mov    edi,edx
c00203f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00203fb:	2d e8 00 00 00       	sub    eax,0xe8
c0020400:	89 04 24             	mov    DWORD PTR [esp],eax
c0020403:	e8 7e fb ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020408:	57                   	push   edi
c0020409:	56                   	push   esi
c002040a:	52                   	push   edx
c002040b:	50                   	push   eax
c002040c:	e8 15 fb ff ff       	call   c001ff26 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020411:	e9 76 ff ff ff       	jmp    c002038c <Vm::x87Handler(regs*)+0x2c9>
c0020416:	8d 50 10             	lea    edx,[eax+0x10]
c0020419:	80 fa 07             	cmp    dl,0x7
c002041c:	77 1b                	ja     c0020439 <Vm::x87Handler(regs*)+0x376>
c002041e:	83 ec 0c             	sub    esp,0xc
c0020421:	2d f0 00 00 00       	sub    eax,0xf0
c0020426:	50                   	push   eax
c0020427:	e8 5a fb ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002042c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020433:	89 c6                	mov    esi,eax
c0020435:	89 d7                	mov    edi,edx
c0020437:	eb 22                	jmp    c002045b <Vm::x87Handler(regs*)+0x398>
c0020439:	3c f7                	cmp    al,0xf7
c002043b:	0f 86 d1 03 00 00    	jbe    c0020812 <Vm::x87Handler(regs*)+0x74f>
c0020441:	83 ec 0c             	sub    esp,0xc
c0020444:	6a 00                	push   0x0
c0020446:	e8 3b fb ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002044b:	89 c6                	mov    esi,eax
c002044d:	89 d7                	mov    edi,edx
c002044f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020453:	2d f8 00 00 00       	sub    eax,0xf8
c0020458:	89 04 24             	mov    DWORD PTR [esp],eax
c002045b:	e8 26 fb ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020460:	57                   	push   edi
c0020461:	56                   	push   esi
c0020462:	52                   	push   edx
c0020463:	50                   	push   eax
c0020464:	e8 eb fa ff ff       	call   c001ff54 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020469:	83 c4 1c             	add    esp,0x1c
c002046c:	52                   	push   edx
c002046d:	50                   	push   eax
c002046e:	6a 00                	push   0x0
c0020470:	e9 51 02 00 00       	jmp    c00206c6 <Vm::x87Handler(regs*)+0x603>
c0020475:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020479:	8d 50 40             	lea    edx,[eax+0x40]
c002047c:	80 fa 07             	cmp    dl,0x7
c002047f:	77 37                	ja     c00204b8 <Vm::x87Handler(regs*)+0x3f5>
c0020481:	83 ec 0c             	sub    esp,0xc
c0020484:	2d c0 00 00 00       	sub    eax,0xc0
c0020489:	50                   	push   eax
c002048a:	e8 f7 fa ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002048f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020496:	89 c6                	mov    esi,eax
c0020498:	89 d7                	mov    edi,edx
c002049a:	e8 e7 fa ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002049f:	57                   	push   edi
c00204a0:	56                   	push   esi
c00204a1:	52                   	push   edx
c00204a2:	50                   	push   eax
c00204a3:	e8 54 fa ff ff       	call   c001fefc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204a8:	83 c4 1c             	add    esp,0x1c
c00204ab:	52                   	push   edx
c00204ac:	50                   	push   eax
c00204ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204b1:	2d c0 00 00 00       	sub    eax,0xc0
c00204b6:	eb 3d                	jmp    c00204f5 <Vm::x87Handler(regs*)+0x432>
c00204b8:	8d 50 38             	lea    edx,[eax+0x38]
c00204bb:	80 fa 07             	cmp    dl,0x7
c00204be:	77 3b                	ja     c00204fb <Vm::x87Handler(regs*)+0x438>
c00204c0:	83 ec 0c             	sub    esp,0xc
c00204c3:	2d c8 00 00 00       	sub    eax,0xc8
c00204c8:	50                   	push   eax
c00204c9:	e8 b8 fa ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00204ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204d5:	89 c6                	mov    esi,eax
c00204d7:	89 d7                	mov    edi,edx
c00204d9:	e8 a8 fa ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00204de:	57                   	push   edi
c00204df:	56                   	push   esi
c00204e0:	52                   	push   edx
c00204e1:	50                   	push   eax
c00204e2:	e8 4e fa ff ff       	call   c001ff35 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204e7:	83 c4 1c             	add    esp,0x1c
c00204ea:	52                   	push   edx
c00204eb:	50                   	push   eax
c00204ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204f0:	2d c8 00 00 00       	sub    eax,0xc8
c00204f5:	50                   	push   eax
c00204f6:	e9 75 fc ff ff       	jmp    c0020170 <Vm::x87Handler(regs*)+0xad>
c00204fb:	83 c0 18             	add    eax,0x18
c00204fe:	3c 07                	cmp    al,0x7
c0020500:	0f 87 3b 04 00 00    	ja     c0020941 <Vm::x87Handler(regs*)+0x87e>
c0020506:	83 ec 0c             	sub    esp,0xc
c0020509:	6a 00                	push   0x0
c002050b:	e8 76 fa ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020510:	89 c6                	mov    esi,eax
c0020512:	89 d7                	mov    edi,edx
c0020514:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020518:	2d e8 00 00 00       	sub    eax,0xe8
c002051d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020520:	e8 61 fa ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020525:	57                   	push   edi
c0020526:	56                   	push   esi
c0020527:	52                   	push   edx
c0020528:	50                   	push   eax
c0020529:	e8 f8 f9 ff ff       	call   c001ff26 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002052e:	83 c4 1c             	add    esp,0x1c
c0020531:	52                   	push   edx
c0020532:	50                   	push   eax
c0020533:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020537:	2d e8 00 00 00       	sub    eax,0xe8
c002053c:	eb b7                	jmp    c00204f5 <Vm::x87Handler(regs*)+0x432>
c002053e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020542:	8d 50 40             	lea    edx,[eax+0x40]
c0020545:	80 fa 07             	cmp    dl,0x7
c0020548:	77 3a                	ja     c0020584 <Vm::x87Handler(regs*)+0x4c1>
c002054a:	83 ec 0c             	sub    esp,0xc
c002054d:	2d c0 00 00 00       	sub    eax,0xc0
c0020552:	50                   	push   eax
c0020553:	e8 2e fa ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020558:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002055f:	89 c6                	mov    esi,eax
c0020561:	89 d7                	mov    edi,edx
c0020563:	e8 1e fa ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020568:	57                   	push   edi
c0020569:	56                   	push   esi
c002056a:	52                   	push   edx
c002056b:	50                   	push   eax
c002056c:	e8 8b f9 ff ff       	call   c001fefc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020571:	83 c4 1c             	add    esp,0x1c
c0020574:	52                   	push   edx
c0020575:	50                   	push   eax
c0020576:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002057a:	2d c0 00 00 00       	sub    eax,0xc0
c002057f:	e9 9e 01 00 00       	jmp    c0020722 <Vm::x87Handler(regs*)+0x65f>
c0020584:	8d 50 20             	lea    edx,[eax+0x20]
c0020587:	80 fa 07             	cmp    dl,0x7
c002058a:	77 3a                	ja     c00205c6 <Vm::x87Handler(regs*)+0x503>
c002058c:	83 ec 0c             	sub    esp,0xc
c002058f:	2d e0 00 00 00       	sub    eax,0xe0
c0020594:	50                   	push   eax
c0020595:	e8 ec f9 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002059a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205a1:	89 c6                	mov    esi,eax
c00205a3:	89 d7                	mov    edi,edx
c00205a5:	e8 dc f9 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00205aa:	57                   	push   edi
c00205ab:	56                   	push   esi
c00205ac:	52                   	push   edx
c00205ad:	50                   	push   eax
c00205ae:	e8 73 f9 ff ff       	call   c001ff26 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205b3:	83 c4 1c             	add    esp,0x1c
c00205b6:	52                   	push   edx
c00205b7:	50                   	push   eax
c00205b8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205bc:	2d e0 00 00 00       	sub    eax,0xe0
c00205c1:	e9 5c 01 00 00       	jmp    c0020722 <Vm::x87Handler(regs*)+0x65f>
c00205c6:	8d 50 18             	lea    edx,[eax+0x18]
c00205c9:	80 fa 07             	cmp    dl,0x7
c00205cc:	77 3b                	ja     c0020609 <Vm::x87Handler(regs*)+0x546>
c00205ce:	83 ec 0c             	sub    esp,0xc
c00205d1:	6a 00                	push   0x0
c00205d3:	e8 ae f9 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00205d8:	89 c6                	mov    esi,eax
c00205da:	89 d7                	mov    edi,edx
c00205dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205e0:	2d e8 00 00 00       	sub    eax,0xe8
c00205e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00205e8:	e8 99 f9 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00205ed:	57                   	push   edi
c00205ee:	56                   	push   esi
c00205ef:	52                   	push   edx
c00205f0:	50                   	push   eax
c00205f1:	e8 30 f9 ff ff       	call   c001ff26 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205f6:	83 c4 1c             	add    esp,0x1c
c00205f9:	52                   	push   edx
c00205fa:	50                   	push   eax
c00205fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205ff:	2d e8 00 00 00       	sub    eax,0xe8
c0020604:	e9 19 01 00 00       	jmp    c0020722 <Vm::x87Handler(regs*)+0x65f>
c0020609:	8d 50 38             	lea    edx,[eax+0x38]
c002060c:	80 fa 07             	cmp    dl,0x7
c002060f:	77 37                	ja     c0020648 <Vm::x87Handler(regs*)+0x585>
c0020611:	83 ec 0c             	sub    esp,0xc
c0020614:	2d c8 00 00 00       	sub    eax,0xc8
c0020619:	50                   	push   eax
c002061a:	e8 67 f9 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002061f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020626:	89 c6                	mov    esi,eax
c0020628:	89 d7                	mov    edi,edx
c002062a:	e8 57 f9 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002062f:	57                   	push   edi
c0020630:	56                   	push   esi
c0020631:	52                   	push   edx
c0020632:	50                   	push   eax
c0020633:	e8 fd f8 ff ff       	call   c001ff35 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020638:	83 c4 1c             	add    esp,0x1c
c002063b:	52                   	push   edx
c002063c:	50                   	push   eax
c002063d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020641:	2d c8 00 00 00       	sub    eax,0xc8
c0020646:	eb 7d                	jmp    c00206c5 <Vm::x87Handler(regs*)+0x602>
c0020648:	3c f7                	cmp    al,0xf7
c002064a:	76 38                	jbe    c0020684 <Vm::x87Handler(regs*)+0x5c1>
c002064c:	83 ec 0c             	sub    esp,0xc
c002064f:	6a 00                	push   0x0
c0020651:	e8 30 f9 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020656:	89 c6                	mov    esi,eax
c0020658:	89 d7                	mov    edi,edx
c002065a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002065e:	2d f8 00 00 00       	sub    eax,0xf8
c0020663:	89 04 24             	mov    DWORD PTR [esp],eax
c0020666:	e8 1b f9 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002066b:	57                   	push   edi
c002066c:	56                   	push   esi
c002066d:	52                   	push   edx
c002066e:	50                   	push   eax
c002066f:	e8 e0 f8 ff ff       	call   c001ff54 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020674:	83 c4 1c             	add    esp,0x1c
c0020677:	52                   	push   edx
c0020678:	50                   	push   eax
c0020679:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002067d:	2d f8 00 00 00       	sub    eax,0xf8
c0020682:	eb 41                	jmp    c00206c5 <Vm::x87Handler(regs*)+0x602>
c0020684:	8d 50 10             	lea    edx,[eax+0x10]
c0020687:	80 fa 07             	cmp    dl,0x7
c002068a:	0f 87 5a 01 00 00    	ja     c00207ea <Vm::x87Handler(regs*)+0x727>
c0020690:	83 ec 0c             	sub    esp,0xc
c0020693:	2d f0 00 00 00       	sub    eax,0xf0
c0020698:	50                   	push   eax
c0020699:	e8 e8 f8 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002069e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206a5:	89 c6                	mov    esi,eax
c00206a7:	89 d7                	mov    edi,edx
c00206a9:	e8 d8 f8 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00206ae:	57                   	push   edi
c00206af:	56                   	push   esi
c00206b0:	52                   	push   edx
c00206b1:	50                   	push   eax
c00206b2:	e8 9d f8 ff ff       	call   c001ff54 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206b7:	83 c4 1c             	add    esp,0x1c
c00206ba:	52                   	push   edx
c00206bb:	50                   	push   eax
c00206bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206c0:	2d f0 00 00 00       	sub    eax,0xf0
c00206c5:	50                   	push   eax
c00206c6:	e8 fe f8 ff ff       	call   c001ffc9 <Vm::fpuSetReg(int, unsigned long long)>
c00206cb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00206cf:	e8 9d f9 ff ff       	call   c0020071 <Vm::fpuPop()>
c00206d4:	e9 5e fa ff ff       	jmp    c0020137 <Vm::x87Handler(regs*)+0x74>
c00206d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206dd:	8d 50 30             	lea    edx,[eax+0x30]
c00206e0:	80 fa 07             	cmp    dl,0x7
c00206e3:	77 1d                	ja     c0020702 <Vm::x87Handler(regs*)+0x63f>
c00206e5:	83 ec 0c             	sub    esp,0xc
c00206e8:	6a 00                	push   0x0
c00206ea:	e8 97 f8 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00206ef:	83 c4 0c             	add    esp,0xc
c00206f2:	52                   	push   edx
c00206f3:	50                   	push   eax
c00206f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206f8:	2d d0 00 00 00       	sub    eax,0xd0
c00206fd:	e9 f3 fd ff ff       	jmp    c00204f5 <Vm::x87Handler(regs*)+0x432>
c0020702:	8d 50 28             	lea    edx,[eax+0x28]
c0020705:	80 fa 07             	cmp    dl,0x7
c0020708:	77 28                	ja     c0020732 <Vm::x87Handler(regs*)+0x66f>
c002070a:	83 ec 0c             	sub    esp,0xc
c002070d:	6a 00                	push   0x0
c002070f:	e8 72 f8 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020714:	83 c4 0c             	add    esp,0xc
c0020717:	52                   	push   edx
c0020718:	50                   	push   eax
c0020719:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002071d:	2d d8 00 00 00       	sub    eax,0xd8
c0020722:	50                   	push   eax
c0020723:	e8 a1 f8 ff ff       	call   c001ffc9 <Vm::fpuSetReg(int, unsigned long long)>
c0020728:	e8 44 f9 ff ff       	call   c0020071 <Vm::fpuPop()>
c002072d:	e9 01 fa ff ff       	jmp    c0020133 <Vm::x87Handler(regs*)+0x70>
c0020732:	8d 50 20             	lea    edx,[eax+0x20]
c0020735:	80 fa 07             	cmp    dl,0x7
c0020738:	77 30                	ja     c002076a <Vm::x87Handler(regs*)+0x6a7>
c002073a:	83 ec 0c             	sub    esp,0xc
c002073d:	2d e0 00 00 00       	sub    eax,0xe0
c0020742:	50                   	push   eax
c0020743:	e8 3e f8 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020748:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002074f:	89 c6                	mov    esi,eax
c0020751:	89 d7                	mov    edi,edx
c0020753:	e8 2e f8 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020758:	57                   	push   edi
c0020759:	56                   	push   esi
c002075a:	52                   	push   edx
c002075b:	50                   	push   eax
c002075c:	e8 48 f7 ff ff       	call   c001fea9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020761:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020765:	e9 54 02 00 00       	jmp    c00209be <Vm::x87Handler(regs*)+0x8fb>
c002076a:	8d 50 18             	lea    edx,[eax+0x18]
c002076d:	80 fa 07             	cmp    dl,0x7
c0020770:	0f 87 43 fb ff ff    	ja     c00202b9 <Vm::x87Handler(regs*)+0x1f6>
c0020776:	83 ec 0c             	sub    esp,0xc
c0020779:	2d e8 00 00 00       	sub    eax,0xe8
c002077e:	50                   	push   eax
c002077f:	e8 02 f8 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020784:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002078b:	89 c6                	mov    esi,eax
c002078d:	89 d7                	mov    edi,edx
c002078f:	e8 f2 f7 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020794:	57                   	push   edi
c0020795:	56                   	push   esi
c0020796:	52                   	push   edx
c0020797:	50                   	push   eax
c0020798:	e8 0c f7 ff ff       	call   c001fea9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002079d:	83 c4 20             	add    esp,0x20
c00207a0:	e8 cc f8 ff ff       	call   c0020071 <Vm::fpuPop()>
c00207a5:	eb 62                	jmp    c0020809 <Vm::x87Handler(regs*)+0x746>
c00207a7:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00207ab:	0f 85 0f 01 00 00    	jne    c00208c0 <Vm::x87Handler(regs*)+0x7fd>
c00207b1:	83 ec 0c             	sub    esp,0xc
c00207b4:	6a 01                	push   0x1
c00207b6:	e8 cb f7 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00207bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207c2:	89 c6                	mov    esi,eax
c00207c4:	89 d7                	mov    edi,edx
c00207c6:	e8 bb f7 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00207cb:	57                   	push   edi
c00207cc:	56                   	push   esi
c00207cd:	52                   	push   edx
c00207ce:	50                   	push   eax
c00207cf:	e8 d5 f6 ff ff       	call   c001fea9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207d4:	83 c4 20             	add    esp,0x20
c00207d7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00207db:	e8 91 f8 ff ff       	call   c0020071 <Vm::fpuPop()>
c00207e0:	e8 8c f8 ff ff       	call   c0020071 <Vm::fpuPop()>
c00207e5:	e9 50 f9 ff ff       	jmp    c002013a <Vm::x87Handler(regs*)+0x77>
c00207ea:	3c d9                	cmp    al,0xd9
c00207ec:	0f 85 b5 02 00 00    	jne    c0020aa7 <Vm::x87Handler(regs*)+0x9e4>
c00207f2:	eb bd                	jmp    c00207b1 <Vm::x87Handler(regs*)+0x6ee>
c00207f4:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00207f8:	0f 85 ea 02 00 00    	jne    c0020ae8 <Vm::x87Handler(regs*)+0xa25>
c00207fe:	0f b7 05 00 24 03 c0 	movzx  eax,WORD PTR ds:0xc0032400
c0020805:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020809:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002080d:	e9 28 f9 ff ff       	jmp    c002013a <Vm::x87Handler(regs*)+0x77>
c0020812:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020816:	84 d2                	test   dl,dl
c0020818:	75 0f                	jne    c0020829 <Vm::x87Handler(regs*)+0x766>
c002081a:	83 ec 0c             	sub    esp,0xc
c002081d:	ff 36                	push   DWORD PTR [esi]
c002081f:	e8 b1 f4 ff ff       	call   c001fcd5 <Vm::fpu32ToInternal(unsigned int)>
c0020824:	e9 2c 01 00 00       	jmp    c0020955 <Vm::x87Handler(regs*)+0x892>
c0020829:	80 fa 01             	cmp    dl,0x1
c002082c:	75 0f                	jne    c002083d <Vm::x87Handler(regs*)+0x77a>
c002082e:	83 ec 0c             	sub    esp,0xc
c0020831:	ff 36                	push   DWORD PTR [esi]
c0020833:	e8 9d f4 ff ff       	call   c001fcd5 <Vm::fpu32ToInternal(unsigned int)>
c0020838:	e9 81 02 00 00       	jmp    c0020abe <Vm::x87Handler(regs*)+0x9fb>
c002083d:	80 fa 04             	cmp    dl,0x4
c0020840:	75 0f                	jne    c0020851 <Vm::x87Handler(regs*)+0x78e>
c0020842:	83 ec 0c             	sub    esp,0xc
c0020845:	ff 36                	push   DWORD PTR [esi]
c0020847:	e8 89 f4 ff ff       	call   c001fcd5 <Vm::fpu32ToInternal(unsigned int)>
c002084c:	e9 86 01 00 00       	jmp    c00209d7 <Vm::x87Handler(regs*)+0x914>
c0020851:	80 fa 05             	cmp    dl,0x5
c0020854:	75 1b                	jne    c0020871 <Vm::x87Handler(regs*)+0x7ae>
c0020856:	83 ec 0c             	sub    esp,0xc
c0020859:	6a 00                	push   0x0
c002085b:	e8 26 f7 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020860:	89 c7                	mov    edi,eax
c0020862:	89 d5                	mov    ebp,edx
c0020864:	58                   	pop    eax
c0020865:	ff 36                	push   DWORD PTR [esi]
c0020867:	e8 69 f4 ff ff       	call   c001fcd5 <Vm::fpu32ToInternal(unsigned int)>
c002086c:	e9 a3 01 00 00       	jmp    c0020a14 <Vm::x87Handler(regs*)+0x951>
c0020871:	80 fa 06             	cmp    dl,0x6
c0020874:	75 0f                	jne    c0020885 <Vm::x87Handler(regs*)+0x7c2>
c0020876:	83 ec 0c             	sub    esp,0xc
c0020879:	ff 36                	push   DWORD PTR [esi]
c002087b:	e8 55 f4 ff ff       	call   c001fcd5 <Vm::fpu32ToInternal(unsigned int)>
c0020880:	e9 ae 01 00 00       	jmp    c0020a33 <Vm::x87Handler(regs*)+0x970>
c0020885:	31 c0                	xor    eax,eax
c0020887:	80 fa 07             	cmp    dl,0x7
c002088a:	0f 85 94 02 00 00    	jne    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c0020890:	83 ec 0c             	sub    esp,0xc
c0020893:	6a 00                	push   0x0
c0020895:	e8 ec f6 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002089a:	89 c7                	mov    edi,eax
c002089c:	89 d5                	mov    ebp,edx
c002089e:	58                   	pop    eax
c002089f:	ff 36                	push   DWORD PTR [esi]
c00208a1:	e8 2f f4 ff ff       	call   c001fcd5 <Vm::fpu32ToInternal(unsigned int)>
c00208a6:	e9 cb 01 00 00       	jmp    c0020a76 <Vm::x87Handler(regs*)+0x9b3>
c00208ab:	80 fa 03             	cmp    dl,0x3
c00208ae:	0f 85 d3 01 00 00    	jne    c0020a87 <Vm::x87Handler(regs*)+0x9c4>
c00208b4:	e8 b8 f7 ff ff       	call   c0020071 <Vm::fpuPop()>
c00208b9:	51                   	push   ecx
c00208ba:	51                   	push   ecx
c00208bb:	e9 de 01 00 00       	jmp    c0020a9e <Vm::x87Handler(regs*)+0x9db>
c00208c0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00208c4:	80 fa 01             	cmp    dl,0x1
c00208c7:	75 09                	jne    c00208d2 <Vm::x87Handler(regs*)+0x80f>
c00208c9:	57                   	push   edi
c00208ca:	57                   	push   edi
c00208cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00208cd:	e9 e3 01 00 00       	jmp    c0020ab5 <Vm::x87Handler(regs*)+0x9f2>
c00208d2:	80 fa 04             	cmp    dl,0x4
c00208d5:	75 12                	jne    c00208e9 <Vm::x87Handler(regs*)+0x826>
c00208d7:	31 d2                	xor    edx,edx
c00208d9:	51                   	push   ecx
c00208da:	51                   	push   ecx
c00208db:	8b 06                	mov    eax,DWORD PTR [esi]
c00208dd:	52                   	push   edx
c00208de:	50                   	push   eax
c00208df:	e8 d0 f4 ff ff       	call   c001fdb4 <Vm::fpuLongToFloat(long long)>
c00208e4:	e9 ee 00 00 00       	jmp    c00209d7 <Vm::x87Handler(regs*)+0x914>
c00208e9:	31 c0                	xor    eax,eax
c00208eb:	80 fa 07             	cmp    dl,0x7
c00208ee:	0f 85 30 02 00 00    	jne    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c00208f4:	83 ec 0c             	sub    esp,0xc
c00208f7:	6a 00                	push   0x0
c00208f9:	e8 88 f6 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00208fe:	89 c7                	mov    edi,eax
c0020900:	89 d5                	mov    ebp,edx
c0020902:	58                   	pop    eax
c0020903:	8b 06                	mov    eax,DWORD PTR [esi]
c0020905:	5a                   	pop    edx
c0020906:	31 d2                	xor    edx,edx
c0020908:	52                   	push   edx
c0020909:	50                   	push   eax
c002090a:	e8 a5 f4 ff ff       	call   c001fdb4 <Vm::fpuLongToFloat(long long)>
c002090f:	e9 62 01 00 00       	jmp    c0020a76 <Vm::x87Handler(regs*)+0x9b3>
c0020914:	84 d2                	test   dl,dl
c0020916:	75 0d                	jne    c0020925 <Vm::x87Handler(regs*)+0x862>
c0020918:	31 d2                	xor    edx,edx
c002091a:	55                   	push   ebp
c002091b:	55                   	push   ebp
c002091c:	8b 06                	mov    eax,DWORD PTR [esi]
c002091e:	52                   	push   edx
c002091f:	50                   	push   eax
c0020920:	e9 d3 01 00 00       	jmp    c0020af8 <Vm::x87Handler(regs*)+0xa35>
c0020925:	31 c0                	xor    eax,eax
c0020927:	80 fa 02             	cmp    dl,0x2
c002092a:	0f 85 f4 01 00 00    	jne    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c0020930:	83 ec 0c             	sub    esp,0xc
c0020933:	6a 00                	push   0x0
c0020935:	e8 4c f6 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c002093a:	59                   	pop    ecx
c002093b:	5f                   	pop    edi
c002093c:	e9 6a f9 ff ff       	jmp    c00202ab <Vm::x87Handler(regs*)+0x1e8>
c0020941:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020945:	84 d2                	test   dl,dl
c0020947:	75 2a                	jne    c0020973 <Vm::x87Handler(regs*)+0x8b0>
c0020949:	50                   	push   eax
c002094a:	50                   	push   eax
c002094b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002094e:	ff 36                	push   DWORD PTR [esi]
c0020950:	e8 c5 f3 ff ff       	call   c001fd1a <Vm::fpu64ToInternal(unsigned long long)>
c0020955:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002095c:	89 c6                	mov    esi,eax
c002095e:	89 d7                	mov    edi,edx
c0020960:	e8 21 f6 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020965:	57                   	push   edi
c0020966:	56                   	push   esi
c0020967:	52                   	push   edx
c0020968:	50                   	push   eax
c0020969:	e8 8e f5 ff ff       	call   c001fefc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002096e:	e9 64 01 00 00       	jmp    c0020ad7 <Vm::x87Handler(regs*)+0xa14>
c0020973:	80 fa 01             	cmp    dl,0x1
c0020976:	75 11                	jne    c0020989 <Vm::x87Handler(regs*)+0x8c6>
c0020978:	50                   	push   eax
c0020979:	50                   	push   eax
c002097a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002097d:	ff 36                	push   DWORD PTR [esi]
c002097f:	e8 96 f3 ff ff       	call   c001fd1a <Vm::fpu64ToInternal(unsigned long long)>
c0020984:	e9 35 01 00 00       	jmp    c0020abe <Vm::x87Handler(regs*)+0x9fb>
c0020989:	80 fa 02             	cmp    dl,0x2
c002098c:	0f 85 54 f9 ff ff    	jne    c00202e6 <Vm::x87Handler(regs*)+0x223>
c0020992:	55                   	push   ebp
c0020993:	55                   	push   ebp
c0020994:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020997:	ff 36                	push   DWORD PTR [esi]
c0020999:	e8 7c f3 ff ff       	call   c001fd1a <Vm::fpu64ToInternal(unsigned long long)>
c002099e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209a5:	89 c6                	mov    esi,eax
c00209a7:	89 d7                	mov    edi,edx
c00209a9:	e8 d8 f5 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00209ae:	57                   	push   edi
c00209af:	56                   	push   esi
c00209b0:	52                   	push   edx
c00209b1:	50                   	push   eax
c00209b2:	e8 f2 f4 ff ff       	call   c001fea9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00209bb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00209be:	83 c4 20             	add    esp,0x20
c00209c1:	e9 74 f7 ff ff       	jmp    c002013a <Vm::x87Handler(regs*)+0x77>
c00209c6:	80 fa 04             	cmp    dl,0x4
c00209c9:	75 2a                	jne    c00209f5 <Vm::x87Handler(regs*)+0x932>
c00209cb:	51                   	push   ecx
c00209cc:	51                   	push   ecx
c00209cd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209d0:	ff 36                	push   DWORD PTR [esi]
c00209d2:	e8 43 f3 ff ff       	call   c001fd1a <Vm::fpu64ToInternal(unsigned long long)>
c00209d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209de:	89 c6                	mov    esi,eax
c00209e0:	89 d7                	mov    edi,edx
c00209e2:	e8 9f f5 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c00209e7:	57                   	push   edi
c00209e8:	56                   	push   esi
c00209e9:	52                   	push   edx
c00209ea:	50                   	push   eax
c00209eb:	e8 36 f5 ff ff       	call   c001ff26 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00209f0:	e9 e2 00 00 00       	jmp    c0020ad7 <Vm::x87Handler(regs*)+0xa14>
c00209f5:	80 fa 05             	cmp    dl,0x5
c00209f8:	75 28                	jne    c0020a22 <Vm::x87Handler(regs*)+0x95f>
c00209fa:	83 ec 0c             	sub    esp,0xc
c00209fd:	6a 00                	push   0x0
c00209ff:	e8 82 f5 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020a04:	89 c7                	mov    edi,eax
c0020a06:	89 d5                	mov    ebp,edx
c0020a08:	58                   	pop    eax
c0020a09:	5a                   	pop    edx
c0020a0a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a0d:	ff 36                	push   DWORD PTR [esi]
c0020a0f:	e8 06 f3 ff ff       	call   c001fd1a <Vm::fpu64ToInternal(unsigned long long)>
c0020a14:	83 c4 10             	add    esp,0x10
c0020a17:	55                   	push   ebp
c0020a18:	57                   	push   edi
c0020a19:	52                   	push   edx
c0020a1a:	50                   	push   eax
c0020a1b:	e8 06 f5 ff ff       	call   c001ff26 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a20:	eb 60                	jmp    c0020a82 <Vm::x87Handler(regs*)+0x9bf>
c0020a22:	80 fa 06             	cmp    dl,0x6
c0020a25:	75 2a                	jne    c0020a51 <Vm::x87Handler(regs*)+0x98e>
c0020a27:	51                   	push   ecx
c0020a28:	51                   	push   ecx
c0020a29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a2c:	ff 36                	push   DWORD PTR [esi]
c0020a2e:	e8 e7 f2 ff ff       	call   c001fd1a <Vm::fpu64ToInternal(unsigned long long)>
c0020a33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a3a:	89 c6                	mov    esi,eax
c0020a3c:	89 d7                	mov    edi,edx
c0020a3e:	e8 43 f5 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020a43:	57                   	push   edi
c0020a44:	56                   	push   esi
c0020a45:	52                   	push   edx
c0020a46:	50                   	push   eax
c0020a47:	e8 08 f5 ff ff       	call   c001ff54 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a4c:	e9 86 00 00 00       	jmp    c0020ad7 <Vm::x87Handler(regs*)+0xa14>
c0020a51:	31 c0                	xor    eax,eax
c0020a53:	80 fa 07             	cmp    dl,0x7
c0020a56:	0f 85 c8 00 00 00    	jne    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c0020a5c:	83 ec 0c             	sub    esp,0xc
c0020a5f:	6a 00                	push   0x0
c0020a61:	e8 20 f5 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020a66:	89 c7                	mov    edi,eax
c0020a68:	89 d5                	mov    ebp,edx
c0020a6a:	58                   	pop    eax
c0020a6b:	5a                   	pop    edx
c0020a6c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a6f:	ff 36                	push   DWORD PTR [esi]
c0020a71:	e8 a4 f2 ff ff       	call   c001fd1a <Vm::fpu64ToInternal(unsigned long long)>
c0020a76:	83 c4 10             	add    esp,0x10
c0020a79:	55                   	push   ebp
c0020a7a:	57                   	push   edi
c0020a7b:	52                   	push   edx
c0020a7c:	50                   	push   eax
c0020a7d:	e8 d2 f4 ff ff       	call   c001ff54 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a82:	83 c4 0c             	add    esp,0xc
c0020a85:	eb 53                	jmp    c0020ada <Vm::x87Handler(regs*)+0xa17>
c0020a87:	31 c0                	xor    eax,eax
c0020a89:	80 fa 02             	cmp    dl,0x2
c0020a8c:	0f 85 92 00 00 00    	jne    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c0020a92:	83 ec 0c             	sub    esp,0xc
c0020a95:	6a 00                	push   0x0
c0020a97:	e8 ea f4 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020a9c:	59                   	pop    ecx
c0020a9d:	5f                   	pop    edi
c0020a9e:	52                   	push   edx
c0020a9f:	50                   	push   eax
c0020aa0:	e8 27 f2 ff ff       	call   c001fccc <Vm::fpuInternalTo64(unsigned long long)>
c0020aa5:	eb 70                	jmp    c0020b17 <Vm::x87Handler(regs*)+0xa54>
c0020aa7:	31 c0                	xor    eax,eax
c0020aa9:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020aae:	75 74                	jne    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c0020ab0:	50                   	push   eax
c0020ab1:	50                   	push   eax
c0020ab2:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020ab5:	31 d2                	xor    edx,edx
c0020ab7:	52                   	push   edx
c0020ab8:	50                   	push   eax
c0020ab9:	e8 f6 f2 ff ff       	call   c001fdb4 <Vm::fpuLongToFloat(long long)>
c0020abe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020ac5:	89 c6                	mov    esi,eax
c0020ac7:	89 d7                	mov    edi,edx
c0020ac9:	e8 b8 f4 ff ff       	call   c001ff86 <Vm::fpuGetReg(int)>
c0020ace:	57                   	push   edi
c0020acf:	56                   	push   esi
c0020ad0:	52                   	push   edx
c0020ad1:	50                   	push   eax
c0020ad2:	e8 5e f4 ff ff       	call   c001ff35 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020ad7:	83 c4 1c             	add    esp,0x1c
c0020ada:	52                   	push   edx
c0020adb:	50                   	push   eax
c0020adc:	6a 00                	push   0x0
c0020ade:	e8 e6 f4 ff ff       	call   c001ffc9 <Vm::fpuSetReg(int, unsigned long long)>
c0020ae3:	e9 f2 f7 ff ff       	jmp    c00202da <Vm::x87Handler(regs*)+0x217>
c0020ae8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020aec:	80 fa 05             	cmp    dl,0x5
c0020aef:	75 11                	jne    c0020b02 <Vm::x87Handler(regs*)+0xa3f>
c0020af1:	55                   	push   ebp
c0020af2:	55                   	push   ebp
c0020af3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020af6:	ff 36                	push   DWORD PTR [esi]
c0020af8:	e8 81 f2 ff ff       	call   c001fd7e <Vm::fpuULongToFloat(unsigned long long)>
c0020afd:	e9 cf f7 ff ff       	jmp    c00202d1 <Vm::x87Handler(regs*)+0x20e>
c0020b02:	31 c0                	xor    eax,eax
c0020b04:	80 fa 07             	cmp    dl,0x7
c0020b07:	75 1b                	jne    c0020b24 <Vm::x87Handler(regs*)+0xa61>
c0020b09:	e8 63 f5 ff ff       	call   c0020071 <Vm::fpuPop()>
c0020b0e:	51                   	push   ecx
c0020b0f:	51                   	push   ecx
c0020b10:	52                   	push   edx
c0020b11:	50                   	push   eax
c0020b12:	e8 0c f2 ff ff       	call   c001fd23 <Vm::fpuFloatToLong(unsigned long long)>
c0020b17:	83 c4 10             	add    esp,0x10
c0020b1a:	89 06                	mov    DWORD PTR [esi],eax
c0020b1c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020b1f:	e9 f8 f7 ff ff       	jmp    c002031c <Vm::x87Handler(regs*)+0x259>
c0020b24:	83 c4 1c             	add    esp,0x1c
c0020b27:	5b                   	pop    ebx
c0020b28:	5e                   	pop    esi
c0020b29:	5f                   	pop    edi
c0020b2a:	5d                   	pop    ebp
c0020b2b:	c3                   	ret    

c0020b2c <__static_initialization_and_destruction_0(int, int)>:
c0020b2c:	83 ec 0c             	sub    esp,0xc
c0020b2f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020b34:	75 1a                	jne    c0020b50 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b36:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020b3e:	75 10                	jne    c0020b50 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b40:	83 ec 0c             	sub    esp,0xc
c0020b43:	68 00 24 03 c0       	push   0xc0032400
c0020b48:	e8 9f 8a 00 00       	call   c00295ec <Vm::_FPUState::_FPUState()>
c0020b4d:	83 c4 10             	add    esp,0x10
c0020b50:	90                   	nop
c0020b51:	83 c4 0c             	add    esp,0xc
c0020b54:	c3                   	ret    

c0020b55 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020b55:	83 ec 0c             	sub    esp,0xc
c0020b58:	83 ec 08             	sub    esp,0x8
c0020b5b:	68 ff ff 00 00       	push   0xffff
c0020b60:	6a 01                	push   0x1
c0020b62:	e8 c5 ff ff ff       	call   c0020b2c <__static_initialization_and_destruction_0(int, int)>
c0020b67:	83 c4 10             	add    esp,0x10
c0020b6a:	83 c4 0c             	add    esp,0xc
c0020b6d:	c3                   	ret    

c0020b6e <FAT::getName()>:
c0020b6e:	b8 ec d1 02 c0       	mov    eax,0xc002d1ec
c0020b73:	c3                   	ret    

c0020b74 <FAT::tell(void*, unsigned long long*)>:
c0020b74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020b79:	75 06                	jne    c0020b81 <FAT::tell(void*, unsigned long long*)+0xd>
c0020b7b:	b8 04 00 00 00       	mov    eax,0x4
c0020b80:	c3                   	ret    
c0020b81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020b86:	75 06                	jne    c0020b8e <FAT::tell(void*, unsigned long long*)+0x1a>
c0020b88:	b8 04 00 00 00       	mov    eax,0x4
c0020b8d:	c3                   	ret    
c0020b8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b92:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020b95:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020b98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020b9c:	89 01                	mov    DWORD PTR [ecx],eax
c0020b9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020ba1:	b8 00 00 00 00       	mov    eax,0x0
c0020ba6:	c3                   	ret    
c0020ba7:	90                   	nop

c0020ba8 <FAT::stat(void*, unsigned long long*)>:
c0020ba8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020bad:	75 06                	jne    c0020bb5 <FAT::stat(void*, unsigned long long*)+0xd>
c0020baf:	b8 04 00 00 00       	mov    eax,0x4
c0020bb4:	c3                   	ret    
c0020bb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020bba:	75 06                	jne    c0020bc2 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020bbc:	b8 04 00 00 00       	mov    eax,0x4
c0020bc1:	c3                   	ret    
c0020bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bc6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020bc9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020bcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020bd0:	89 01                	mov    DWORD PTR [ecx],eax
c0020bd2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020bd5:	b8 00 00 00 00       	mov    eax,0x0
c0020bda:	c3                   	ret    
c0020bdb:	90                   	nop

c0020bdc <FAT::~FAT()>:
c0020bdc:	83 ec 0c             	sub    esp,0xc
c0020bdf:	ba 7c d2 02 c0       	mov    edx,0xc002d27c
c0020be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be8:	89 10                	mov    DWORD PTR [eax],edx
c0020bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bee:	83 ec 0c             	sub    esp,0xc
c0020bf1:	50                   	push   eax
c0020bf2:	e8 03 26 ff ff       	call   c00131fa <Filesystem::~Filesystem()>
c0020bf7:	83 c4 10             	add    esp,0x10
c0020bfa:	90                   	nop
c0020bfb:	83 c4 0c             	add    esp,0xc
c0020bfe:	c3                   	ret    
c0020bff:	90                   	nop

c0020c00 <FAT::~FAT()>:
c0020c00:	83 ec 0c             	sub    esp,0xc
c0020c03:	83 ec 0c             	sub    esp,0xc
c0020c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c0a:	e8 cd ff ff ff       	call   c0020bdc <FAT::~FAT()>
c0020c0f:	83 c4 10             	add    esp,0x10
c0020c12:	83 ec 08             	sub    esp,0x8
c0020c15:	6a 08                	push   0x8
c0020c17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c1b:	e8 cb 21 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0020c20:	83 c4 10             	add    esp,0x10
c0020c23:	83 c4 0c             	add    esp,0xc
c0020c26:	c3                   	ret    
c0020c27:	90                   	nop

c0020c28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020c28:	83 ec 1c             	sub    esp,0x1c
c0020c2b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020c32:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020c37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c3b:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020c42:	83 f8 ff             	cmp    eax,0xffffffff
c0020c45:	75 34                	jne    c0020c7b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020c47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c4b:	88 c2                	mov    dl,al
c0020c4d:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020c52:	01 d0                	add    eax,edx
c0020c54:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020c58:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0020c5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c62:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0020c69:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020c6e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020c72:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0020c79:	eb 17                	jmp    c0020c92 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020c7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c7f:	88 c2                	mov    dl,al
c0020c81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c85:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020c8c:	01 d0                	add    eax,edx
c0020c8e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020c92:	83 ec 04             	sub    esp,0x4
c0020c95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c9d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020ca1:	50                   	push   eax
c0020ca2:	e8 99 60 fe ff       	call   c0006d40 <f_getlabel>
c0020ca7:	83 c4 10             	add    esp,0x10
c0020caa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020cb3:	75 07                	jne    c0020cbc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020cb5:	b8 00 00 00 00       	mov    eax,0x0
c0020cba:	eb 05                	jmp    c0020cc1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020cbc:	b8 01 00 00 00       	mov    eax,0x1
c0020cc1:	83 c4 1c             	add    esp,0x1c
c0020cc4:	c3                   	ret    
c0020cc5:	90                   	nop

c0020cc6 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020cc6:	57                   	push   edi
c0020cc7:	83 ec 58             	sub    esp,0x58
c0020cca:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020cd2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020cd6:	b9 0f 00 00 00       	mov    ecx,0xf
c0020cdb:	b8 00 00 00 00       	mov    eax,0x0
c0020ce0:	fc                   	cld    
c0020ce1:	89 d7                	mov    edi,edx
c0020ce3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020ce5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020ce9:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020cf0:	83 f8 ff             	cmp    eax,0xffffffff
c0020cf3:	75 34                	jne    c0020d29 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020cf5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020cf9:	88 c2                	mov    dl,al
c0020cfb:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020d00:	01 d0                	add    eax,edx
c0020d02:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d06:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0020d0c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d10:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0020d17:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020d1c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020d20:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0020d27:	eb 17                	jmp    c0020d40 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020d29:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d2d:	88 c2                	mov    dl,al
c0020d2f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d33:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020d3a:	01 d0                	add    eax,edx
c0020d3c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d40:	83 ec 08             	sub    esp,0x8
c0020d43:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020d47:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d4b:	50                   	push   eax
c0020d4c:	e8 2b fc fd ff       	call   c000097c <strcat>
c0020d51:	83 c4 10             	add    esp,0x10
c0020d54:	83 ec 0c             	sub    esp,0xc
c0020d57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d5b:	50                   	push   eax
c0020d5c:	e8 cd 61 fe ff       	call   c0006f2e <f_setlabel>
c0020d61:	83 c4 10             	add    esp,0x10
c0020d64:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020d68:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020d6d:	75 07                	jne    c0020d76 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020d6f:	b8 00 00 00 00       	mov    eax,0x0
c0020d74:	eb 05                	jmp    c0020d7b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020d76:	b8 01 00 00 00       	mov    eax,0x1
c0020d7b:	83 c4 58             	add    esp,0x58
c0020d7e:	5f                   	pop    edi
c0020d7f:	c3                   	ret    

c0020d80 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020d80:	83 ec 2c             	sub    esp,0x2c
c0020d83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020d8b:	83 ec 08             	sub    esp,0x8
c0020d8e:	68 10 d2 02 c0       	push   0xc002d210
c0020d93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020d97:	e8 2c fb fd ff       	call   c00008c8 <strcmp>
c0020d9c:	83 c4 10             	add    esp,0x10
c0020d9f:	85 c0                	test   eax,eax
c0020da1:	0f 94 c0             	sete   al
c0020da4:	84 c0                	test   al,al
c0020da6:	74 0d                	je     c0020db5 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020da8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020db0:	e9 a6 00 00 00       	jmp    c0020e5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020db5:	83 ec 08             	sub    esp,0x8
c0020db8:	68 02 d2 02 c0       	push   0xc002d202
c0020dbd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020dc1:	e8 02 fb fd ff       	call   c00008c8 <strcmp>
c0020dc6:	83 c4 10             	add    esp,0x10
c0020dc9:	85 c0                	test   eax,eax
c0020dcb:	0f 94 c0             	sete   al
c0020dce:	84 c0                	test   al,al
c0020dd0:	74 0a                	je     c0020ddc <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020dd2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020dda:	eb 7f                	jmp    c0020e5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ddc:	83 ec 08             	sub    esp,0x8
c0020ddf:	68 08 d2 02 c0       	push   0xc002d208
c0020de4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020de8:	e8 db fa fd ff       	call   c00008c8 <strcmp>
c0020ded:	83 c4 10             	add    esp,0x10
c0020df0:	85 c0                	test   eax,eax
c0020df2:	0f 94 c0             	sete   al
c0020df5:	84 c0                	test   al,al
c0020df7:	74 0a                	je     c0020e03 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020df9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e01:	eb 58                	jmp    c0020e5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e03:	83 ec 08             	sub    esp,0x8
c0020e06:	68 4c 9d 02 c0       	push   0xc0029d4c
c0020e0b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e0f:	e8 b4 fa fd ff       	call   c00008c8 <strcmp>
c0020e14:	83 c4 10             	add    esp,0x10
c0020e17:	85 c0                	test   eax,eax
c0020e19:	0f 94 c0             	sete   al
c0020e1c:	84 c0                	test   al,al
c0020e1e:	74 0a                	je     c0020e2a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020e20:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020e28:	eb 31                	jmp    c0020e5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e2a:	83 ec 08             	sub    esp,0x8
c0020e2d:	68 0e d2 02 c0       	push   0xc002d20e
c0020e32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e36:	e8 8d fa fd ff       	call   c00008c8 <strcmp>
c0020e3b:	83 c4 10             	add    esp,0x10
c0020e3e:	85 c0                	test   eax,eax
c0020e40:	0f 94 c0             	sete   al
c0020e43:	84 c0                	test   al,al
c0020e45:	74 0a                	je     c0020e51 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020e47:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020e4f:	eb 0a                	jmp    c0020e5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e51:	b8 08 00 00 00       	mov    eax,0x8
c0020e56:	e9 04 01 00 00       	jmp    c0020f5f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020e5b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020e62:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020e67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e6b:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020e72:	83 f8 ff             	cmp    eax,0xffffffff
c0020e75:	75 34                	jne    c0020eab <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020e77:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020e7b:	88 c2                	mov    dl,al
c0020e7d:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020e82:	01 d0                	add    eax,edx
c0020e84:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020e88:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0020e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e92:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0020e99:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020e9e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020ea2:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0020ea9:	eb 17                	jmp    c0020ec2 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020eab:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020eaf:	88 c2                	mov    dl,al
c0020eb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eb5:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020ebc:	01 d0                	add    eax,edx
c0020ebe:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ec6:	88 04 24             	mov    BYTE PTR [esp],al
c0020ec9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ed1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020ed9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020ede:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020ee6:	83 ec 0c             	sub    esp,0xc
c0020ee9:	68 00 20 00 00       	push   0x2000
c0020eee:	e8 21 ea fe ff       	call   c000f914 <malloc>
c0020ef3:	83 c4 10             	add    esp,0x10
c0020ef6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020efa:	68 00 20 00 00       	push   0x2000
c0020eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f03:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f07:	50                   	push   eax
c0020f08:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020f0c:	50                   	push   eax
c0020f0d:	e8 67 64 fe ff       	call   c0007379 <f_mkfs>
c0020f12:	83 c4 10             	add    esp,0x10
c0020f15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f19:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020f1e:	75 07                	jne    c0020f27 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020f20:	b8 00 00 00 00       	mov    eax,0x0
c0020f25:	eb 38                	jmp    c0020f5f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f27:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020f2c:	75 17                	jne    c0020f45 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020f2e:	83 ec 0c             	sub    esp,0xc
c0020f31:	68 4c d2 02 c0       	push   0xc002d24c
c0020f36:	e8 90 1f ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0020f3b:	83 c4 10             	add    esp,0x10
c0020f3e:	b8 09 00 00 00       	mov    eax,0x9
c0020f43:	eb 1a                	jmp    c0020f5f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f49:	83 ec 08             	sub    esp,0x8
c0020f4c:	50                   	push   eax
c0020f4d:	68 14 d2 02 c0       	push   0xc002d214
c0020f52:	e8 74 1f ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0020f57:	83 c4 10             	add    esp,0x10
c0020f5a:	b8 01 00 00 00       	mov    eax,0x1
c0020f5f:	83 c4 2c             	add    esp,0x2c
c0020f62:	c3                   	ret    
c0020f63:	90                   	nop

c0020f64 <FAT::tryMount(LogicalDisk*, int)>:
c0020f64:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020f6a:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020f6f:	83 f8 14             	cmp    eax,0x14
c0020f72:	75 17                	jne    c0020f8b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020f74:	83 ec 0c             	sub    esp,0xc
c0020f77:	68 26 d2 02 c0       	push   0xc002d226
c0020f7c:	e8 06 99 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0020f81:	83 c4 10             	add    esp,0x10
c0020f84:	b0 00                	mov    al,0x0
c0020f86:	e9 d7 01 00 00       	jmp    c0021162 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020f8b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020f92:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f98:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f9e:	3d 00 02 00 00       	cmp    eax,0x200
c0020fa3:	74 07                	je     c0020fac <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020fa5:	b0 00                	mov    al,0x0
c0020fa7:	e9 b6 01 00 00       	jmp    c0021162 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fac:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020fb4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020fbb:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020fc2:	83 f8 ff             	cmp    eax,0xffffffff
c0020fc5:	74 07                	je     c0020fce <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020fc7:	b0 01                	mov    al,0x1
c0020fc9:	e9 94 01 00 00       	jmp    c0021162 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fce:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020fd8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020fe0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020fe7:	88 c2                	mov    dl,al
c0020fe9:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020fee:	01 d0                	add    eax,edx
c0020ff0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020ff7:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0020ffd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021004:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c002100b:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0021010:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0021017:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c002101e:	83 ec 0c             	sub    esp,0xc
c0021021:	68 54 02 00 00       	push   0x254
c0021026:	e8 e9 e8 fe ff       	call   c000f914 <malloc>
c002102b:	83 c4 10             	add    esp,0x10
c002102e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0021035:	83 ec 04             	sub    esp,0x4
c0021038:	6a 00                	push   0x0
c002103a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021041:	50                   	push   eax
c0021042:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021049:	e8 e9 3e fe ff       	call   c0004f37 <f_mount>
c002104e:	83 c4 10             	add    esp,0x10
c0021051:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021058:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0021060:	74 19                	je     c002107b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021062:	83 ec 0c             	sub    esp,0xc
c0021065:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002106c:	e8 c3 e8 fe ff       	call   c000f934 <rfree>
c0021071:	83 c4 10             	add    esp,0x10
c0021074:	b0 00                	mov    al,0x0
c0021076:	e9 e7 00 00 00       	jmp    c0021162 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002107b:	83 ec 04             	sub    esp,0x4
c002107e:	68 00 01 00 00       	push   0x100
c0021083:	6a 00                	push   0x0
c0021085:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002108c:	50                   	push   eax
c002108d:	e8 ee f6 fd ff       	call   c0000780 <memset>
c0021092:	83 c4 10             	add    esp,0x10
c0021095:	83 ec 08             	sub    esp,0x8
c0021098:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002109f:	50                   	push   eax
c00210a0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210a7:	50                   	push   eax
c00210a8:	e8 cf f8 fd ff       	call   c000097c <strcat>
c00210ad:	83 c4 10             	add    esp,0x10
c00210b0:	83 ec 08             	sub    esp,0x8
c00210b3:	68 34 d2 02 c0       	push   0xc002d234
c00210b8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210bf:	50                   	push   eax
c00210c0:	e8 b7 f8 fd ff       	call   c000097c <strcat>
c00210c5:	83 c4 10             	add    esp,0x10
c00210c8:	83 ec 04             	sub    esp,0x4
c00210cb:	6a 01                	push   0x1
c00210cd:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00210d4:	50                   	push   eax
c00210d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00210d9:	50                   	push   eax
c00210da:	e8 ba 3e fe ff       	call   c0004f99 <f_open>
c00210df:	83 c4 10             	add    esp,0x10
c00210e2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00210e9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00210f0:	85 c0                	test   eax,eax
c00210f2:	74 0a                	je     c00210fe <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00210f4:	78 2d                	js     c0021123 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00210f6:	83 e8 04             	sub    eax,0x4
c00210f9:	83 f8 01             	cmp    eax,0x1
c00210fc:	77 25                	ja     c0021123 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00210fe:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0021106:	83 ec 0c             	sub    esp,0xc
c0021109:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002110d:	50                   	push   eax
c002110e:	e8 d8 49 fe ff       	call   c0005aeb <f_close>
c0021113:	83 c4 10             	add    esp,0x10
c0021116:	90                   	nop
c0021117:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002111f:	74 3a                	je     c002115b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0021121:	eb 2d                	jmp    c0021150 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0021123:	83 ec 0c             	sub    esp,0xc
c0021126:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002112d:	e8 02 e8 fe ff       	call   c000f934 <rfree>
c0021132:	83 c4 10             	add    esp,0x10
c0021135:	83 ec 04             	sub    esp,0x4
c0021138:	6a 00                	push   0x0
c002113a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021141:	50                   	push   eax
c0021142:	6a 00                	push   0x0
c0021144:	e8 ee 3d fe ff       	call   c0004f37 <f_mount>
c0021149:	83 c4 10             	add    esp,0x10
c002114c:	b0 00                	mov    al,0x0
c002114e:	eb 12                	jmp    c0021162 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021150:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0021155:	40                   	inc    eax
c0021156:	a3 60 24 03 c0       	mov    ds:0xc0032460,eax
c002115b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021162:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021168:	c3                   	ret    
c0021169:	90                   	nop

c002116a <FAT::getFileFirstSector(char const*)>:
c002116a:	53                   	push   ebx
c002116b:	83 ec 28             	sub    esp,0x28
c002116e:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0021176:	83 ec 0c             	sub    esp,0xc
c0021179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002117d:	e8 92 e7 fe ff       	call   c000f914 <malloc>
c0021182:	83 c4 10             	add    esp,0x10
c0021185:	89 c3                	mov    ebx,eax
c0021187:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c002118c:	83 ec 04             	sub    esp,0x4
c002118f:	50                   	push   eax
c0021190:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021194:	53                   	push   ebx
c0021195:	e8 90 22 ff ff       	call   c001342a <File::File(char const*, Process*)>
c002119a:	83 c4 10             	add    esp,0x10
c002119d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00211a1:	83 ec 08             	sub    esp,0x8
c00211a4:	6a 01                	push   0x1
c00211a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00211aa:	e8 df 22 ff ff       	call   c001348e <File::open(FileOpenMode)>
c00211af:	83 c4 10             	add    esp,0x10
c00211b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00211b8:	83 c0 0c             	add    eax,0xc
c00211bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00211bd:	83 ec 0c             	sub    esp,0xc
c00211c0:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211c4:	52                   	push   edx
c00211c5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00211c9:	52                   	push   edx
c00211ca:	6a 00                	push   0x0
c00211cc:	6a 04                	push   0x4
c00211ce:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00211d2:	ff d0                	call   eax
c00211d4:	83 c4 20             	add    esp,0x20
c00211d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211db:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00211e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00211e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00211e9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00211ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00211ef:	83 ec 04             	sub    esp,0x4
c00211f2:	52                   	push   edx
c00211f3:	50                   	push   eax
c00211f4:	68 3f d2 02 c0       	push   0xc002d23f
c00211f9:	e8 cd 1c ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00211fe:	83 c4 10             	add    esp,0x10
c0021201:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021205:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021208:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002120b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002120f:	83 ec 0c             	sub    esp,0xc
c0021212:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021216:	e8 d1 22 ff ff       	call   c00134ec <File::close()>
c002121b:	83 c4 10             	add    esp,0x10
c002121e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021222:	ba 00 00 00 00       	mov    edx,0x0
c0021227:	83 c4 28             	add    esp,0x28
c002122a:	5b                   	pop    ebx
c002122b:	c3                   	ret    

c002122c <FAT::readDir(void*, unsigned long, void*, int*)>:
c002122c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0021232:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c002123a:	74 0a                	je     c0021246 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c002123c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0021244:	75 0a                	jne    c0021250 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0021246:	b8 04 00 00 00       	mov    eax,0x4
c002124b:	e9 db 00 00 00       	jmp    c002132b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0021250:	83 ec 08             	sub    esp,0x8
c0021253:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002125a:	50                   	push   eax
c002125b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0021262:	e8 8e 4e fe ff       	call   c00060f5 <f_readdir>
c0021267:	83 c4 10             	add    esp,0x10
c002126a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0021271:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0021277:	83 ec 0c             	sub    esp,0xc
c002127a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021281:	83 c0 1a             	add    eax,0x1a
c0021284:	50                   	push   eax
c0021285:	e8 12 f5 fd ff       	call   c000079c <strlen>
c002128a:	83 c4 10             	add    esp,0x10
c002128d:	ba 00 00 00 00       	mov    edx,0x0
c0021292:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021296:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002129a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00212a1:	0f b6 c0             	movzx  eax,al
c00212a4:	83 e0 10             	and    eax,0x10
c00212a7:	74 07                	je     c00212b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00212a9:	b8 02 00 00 00       	mov    eax,0x2
c00212ae:	eb 05                	jmp    c00212b5 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00212b0:	b8 01 00 00 00       	mov    eax,0x1
c00212b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212b9:	83 ec 08             	sub    esp,0x8
c00212bc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00212c3:	83 c0 1a             	add    eax,0x1a
c00212c6:	50                   	push   eax
c00212c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212cb:	83 c0 10             	add    eax,0x10
c00212ce:	50                   	push   eax
c00212cf:	e8 68 f5 fd ff       	call   c000083c <strcpy>
c00212d4:	83 c4 10             	add    esp,0x10
c00212d7:	83 ec 04             	sub    esp,0x4
c00212da:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00212e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212e5:	50                   	push   eax
c00212e6:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00212ed:	e8 76 f4 fd ff       	call   c0000768 <memcpy>
c00212f2:	83 c4 10             	add    esp,0x10
c00212f5:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00212fc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021302:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0021309:	84 c0                	test   al,al
c002130b:	75 07                	jne    c0021314 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c002130d:	b8 07 00 00 00       	mov    eax,0x7
c0021312:	eb 17                	jmp    c002132b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0021314:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c002131b:	85 c0                	test   eax,eax
c002131d:	75 07                	jne    c0021326 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c002131f:	b8 00 00 00 00       	mov    eax,0x0
c0021324:	eb 05                	jmp    c002132b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0021326:	b8 01 00 00 00       	mov    eax,0x1
c002132b:	81 c4 3c 02 00 00    	add    esp,0x23c
c0021331:	c3                   	ret    

c0021332 <FAT::read(void*, unsigned long, void*, int*)>:
c0021332:	83 ec 1c             	sub    esp,0x1c
c0021335:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002133a:	74 07                	je     c0021343 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002133c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021341:	75 07                	jne    c002134a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0021343:	b8 04 00 00 00       	mov    eax,0x4
c0021348:	eb 3d                	jmp    c0021387 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002134a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002134e:	50                   	push   eax
c002134f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021353:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021357:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002135b:	e8 75 40 fe ff       	call   c00053d5 <f_read>
c0021360:	83 c4 10             	add    esp,0x10
c0021363:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021367:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002136b:	89 c2                	mov    edx,eax
c002136d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021371:	89 10                	mov    DWORD PTR [eax],edx
c0021373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021377:	85 c0                	test   eax,eax
c0021379:	75 07                	jne    c0021382 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002137b:	b8 00 00 00 00       	mov    eax,0x0
c0021380:	eb 05                	jmp    c0021387 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021382:	b8 01 00 00 00       	mov    eax,0x1
c0021387:	83 c4 1c             	add    esp,0x1c
c002138a:	c3                   	ret    
c002138b:	90                   	nop

c002138c <FAT::write(void*, unsigned long, void*, int*)>:
c002138c:	83 ec 1c             	sub    esp,0x1c
c002138f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021394:	74 07                	je     c002139d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0021396:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002139b:	75 07                	jne    c00213a4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002139d:	b8 04 00 00 00       	mov    eax,0x4
c00213a2:	eb 3d                	jmp    c00213e1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00213a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00213a8:	50                   	push   eax
c00213a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00213ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00213b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213b5:	e8 9b 42 fe ff       	call   c0005655 <f_write>
c00213ba:	83 c4 10             	add    esp,0x10
c00213bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213c5:	89 c2                	mov    edx,eax
c00213c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213cb:	89 10                	mov    DWORD PTR [eax],edx
c00213cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213d1:	85 c0                	test   eax,eax
c00213d3:	75 07                	jne    c00213dc <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00213d5:	b8 00 00 00 00       	mov    eax,0x0
c00213da:	eb 05                	jmp    c00213e1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00213dc:	b8 01 00 00 00       	mov    eax,0x1
c00213e1:	83 c4 1c             	add    esp,0x1c
c00213e4:	c3                   	ret    
c00213e5:	90                   	nop

c00213e6 <FAT::close(void*)>:
c00213e6:	83 ec 1c             	sub    esp,0x1c
c00213e9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00213ee:	75 07                	jne    c00213f7 <FAT::close(void*)+0x11>
c00213f0:	b8 04 00 00 00       	mov    eax,0x4
c00213f5:	eb 36                	jmp    c002142d <FAT::close(void*)+0x47>
c00213f7:	83 ec 0c             	sub    esp,0xc
c00213fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213fe:	e8 e8 46 fe ff       	call   c0005aeb <f_close>
c0021403:	83 c4 10             	add    esp,0x10
c0021406:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002140a:	83 ec 0c             	sub    esp,0xc
c002140d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021411:	e8 0e e5 fe ff       	call   c000f924 <free>
c0021416:	83 c4 10             	add    esp,0x10
c0021419:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002141d:	85 c0                	test   eax,eax
c002141f:	75 07                	jne    c0021428 <FAT::close(void*)+0x42>
c0021421:	b8 00 00 00 00       	mov    eax,0x0
c0021426:	eb 05                	jmp    c002142d <FAT::close(void*)+0x47>
c0021428:	b8 01 00 00 00       	mov    eax,0x1
c002142d:	83 c4 1c             	add    esp,0x1c
c0021430:	c3                   	ret    
c0021431:	90                   	nop

c0021432 <FAT::closeDir(void*)>:
c0021432:	83 ec 1c             	sub    esp,0x1c
c0021435:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002143a:	75 07                	jne    c0021443 <FAT::closeDir(void*)+0x11>
c002143c:	b8 04 00 00 00       	mov    eax,0x4
c0021441:	eb 36                	jmp    c0021479 <FAT::closeDir(void*)+0x47>
c0021443:	83 ec 0c             	sub    esp,0xc
c0021446:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002144a:	e8 84 4c fe ff       	call   c00060d3 <f_closedir>
c002144f:	83 c4 10             	add    esp,0x10
c0021452:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021456:	83 ec 0c             	sub    esp,0xc
c0021459:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002145d:	e8 c2 e4 fe ff       	call   c000f924 <free>
c0021462:	83 c4 10             	add    esp,0x10
c0021465:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021469:	85 c0                	test   eax,eax
c002146b:	75 07                	jne    c0021474 <FAT::closeDir(void*)+0x42>
c002146d:	b8 00 00 00 00       	mov    eax,0x0
c0021472:	eb 05                	jmp    c0021479 <FAT::closeDir(void*)+0x47>
c0021474:	b8 01 00 00 00       	mov    eax,0x1
c0021479:	83 c4 1c             	add    esp,0x1c
c002147c:	c3                   	ret    
c002147d:	90                   	nop

c002147e <FAT::seek(void*, unsigned long long)>:
c002147e:	83 ec 2c             	sub    esp,0x2c
c0021481:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021485:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021489:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002148d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021491:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0021496:	75 07                	jne    c002149f <FAT::seek(void*, unsigned long long)+0x21>
c0021498:	b8 04 00 00 00       	mov    eax,0x4
c002149d:	eb 2f                	jmp    c00214ce <FAT::seek(void*, unsigned long long)+0x50>
c002149f:	83 ec 04             	sub    esp,0x4
c00214a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00214ae:	e8 67 46 fe ff       	call   c0005b1a <f_lseek>
c00214b3:	83 c4 10             	add    esp,0x10
c00214b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00214ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214be:	85 c0                	test   eax,eax
c00214c0:	75 07                	jne    c00214c9 <FAT::seek(void*, unsigned long long)+0x4b>
c00214c2:	b8 00 00 00 00       	mov    eax,0x0
c00214c7:	eb 05                	jmp    c00214ce <FAT::seek(void*, unsigned long long)+0x50>
c00214c9:	b8 01 00 00 00       	mov    eax,0x1
c00214ce:	83 c4 2c             	add    esp,0x2c
c00214d1:	c3                   	ret    

c00214d2 <fatWrapperReadDisk>:
c00214d2:	83 ec 1c             	sub    esp,0x1c
c00214d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214d9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00214dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00214e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00214e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00214e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00214ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214f1:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c00214f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00214fc:	83 ec 0c             	sub    esp,0xc
c00214ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021503:	52                   	push   edx
c0021504:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021508:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002150c:	50                   	push   eax
c002150d:	e8 44 53 ff ff       	call   c0016856 <LogicalDisk::read(unsigned long long, int, void*)>
c0021512:	83 c4 20             	add    esp,0x20
c0021515:	83 c4 1c             	add    esp,0x1c
c0021518:	c3                   	ret    

c0021519 <fatWrapperWriteDisk>:
c0021519:	83 ec 1c             	sub    esp,0x1c
c002151c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021520:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021524:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021528:	89 04 24             	mov    DWORD PTR [esp],eax
c002152b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002152f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021533:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021538:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c002153f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021543:	83 ec 0c             	sub    esp,0xc
c0021546:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002154a:	52                   	push   edx
c002154b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002154f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021553:	50                   	push   eax
c0021554:	e8 69 53 ff ff       	call   c00168c2 <LogicalDisk::write(unsigned long long, int, void*)>
c0021559:	83 c4 20             	add    esp,0x20
c002155c:	83 c4 1c             	add    esp,0x1c
c002155f:	c3                   	ret    

c0021560 <fatWrapperIoctl>:
c0021560:	53                   	push   ebx
c0021561:	83 ec 28             	sub    esp,0x28
c0021564:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021568:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002156c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021570:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021574:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021579:	75 31                	jne    c00215ac <fatWrapperIoctl+0x4c>
c002157b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002157f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021583:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021588:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c002158f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021595:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002159b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002159f:	66 89 02             	mov    WORD PTR [edx],ax
c00215a2:	b8 00 00 00 00       	mov    eax,0x0
c00215a7:	e9 b2 00 00 00       	jmp    c002165e <fatWrapperIoctl+0xfe>
c00215ac:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00215b1:	75 6a                	jne    c002161d <fatWrapperIoctl+0xbd>
c00215b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00215bb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215c0:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c00215c7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00215cd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00215d3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00215d9:	89 c8                	mov    eax,ecx
c00215db:	89 da                	mov    edx,ebx
c00215dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00215e1:	c1 e0 0a             	shl    eax,0xa
c00215e4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00215e9:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c00215f0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00215f6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00215fc:	89 cb                	mov    ebx,ecx
c00215fe:	c1 fb 1f             	sar    ebx,0x1f
c0021601:	53                   	push   ebx
c0021602:	51                   	push   ecx
c0021603:	52                   	push   edx
c0021604:	50                   	push   eax
c0021605:	e8 9a 5b 00 00       	call   c00271a4 <__udivdi3>
c002160a:	83 c4 10             	add    esp,0x10
c002160d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021611:	89 01                	mov    DWORD PTR [ecx],eax
c0021613:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021616:	b8 00 00 00 00       	mov    eax,0x0
c002161b:	eb 41                	jmp    c002165e <fatWrapperIoctl+0xfe>
c002161d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021622:	75 07                	jne    c002162b <fatWrapperIoctl+0xcb>
c0021624:	b8 00 00 00 00       	mov    eax,0x0
c0021629:	eb 33                	jmp    c002165e <fatWrapperIoctl+0xfe>
c002162b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021630:	75 19                	jne    c002164b <fatWrapperIoctl+0xeb>
c0021632:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021636:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002163a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002163e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021644:	b8 00 00 00 00       	mov    eax,0x0
c0021649:	eb 13                	jmp    c002165e <fatWrapperIoctl+0xfe>
c002164b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021650:	75 07                	jne    c0021659 <fatWrapperIoctl+0xf9>
c0021652:	b8 00 00 00 00       	mov    eax,0x0
c0021657:	eb 05                	jmp    c002165e <fatWrapperIoctl+0xfe>
c0021659:	b8 04 00 00 00       	mov    eax,0x4
c002165e:	83 c4 28             	add    esp,0x28
c0021661:	5b                   	pop    ebx
c0021662:	c3                   	ret    
c0021663:	90                   	nop

c0021664 <FAT::FAT()>:
c0021664:	83 ec 1c             	sub    esp,0x1c
c0021667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002166b:	83 ec 0c             	sub    esp,0xc
c002166e:	50                   	push   eax
c002166f:	e8 62 1b ff ff       	call   c00131d6 <Filesystem::Filesystem()>
c0021674:	83 c4 10             	add    esp,0x10
c0021677:	ba 7c d2 02 c0       	mov    edx,0xc002d27c
c002167c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021680:	89 10                	mov    DWORD PTR [eax],edx
c0021682:	c7 05 60 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032460,0x0
c002168c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021694:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021699:	7f 15                	jg     c00216b0 <FAT::FAT()+0x4c>
c002169b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002169f:	c7 04 85 80 24 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdb80],0xffffffff
c00216aa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00216ae:	eb e4                	jmp    c0021694 <FAT::FAT()+0x30>
c00216b0:	90                   	nop
c00216b1:	83 c4 1c             	add    esp,0x1c
c00216b4:	c3                   	ret    
c00216b5:	90                   	nop

c00216b6 <FAT::fixFilepath(char*)>:
c00216b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216ba:	8a 00                	mov    al,BYTE PTR [eax]
c00216bc:	3c 40                	cmp    al,0x40
c00216be:	7e 2c                	jle    c00216ec <FAT::fixFilepath(char*)+0x36>
c00216c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216c4:	8a 00                	mov    al,BYTE PTR [eax]
c00216c6:	83 e8 41             	sub    eax,0x41
c00216c9:	88 c2                	mov    dl,al
c00216cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216cf:	88 10                	mov    BYTE PTR [eax],dl
c00216d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216d5:	8a 00                	mov    al,BYTE PTR [eax]
c00216d7:	0f be c0             	movsx  eax,al
c00216da:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c00216e1:	83 c0 30             	add    eax,0x30
c00216e4:	88 c2                	mov    dl,al
c00216e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216ea:	88 10                	mov    BYTE PTR [eax],dl
c00216ec:	90                   	nop
c00216ed:	c3                   	ret    

c00216ee <FAT::open(char const*, void**, FileOpenMode)>:
c00216ee:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216f4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00216fc:	74 0a                	je     c0021708 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00216fe:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021706:	75 0a                	jne    c0021712 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021708:	b8 04 00 00 00       	mov    eax,0x4
c002170d:	e9 fd 00 00 00       	jmp    c002180f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021712:	83 ec 08             	sub    esp,0x8
c0021715:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002171c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021720:	50                   	push   eax
c0021721:	e8 16 f1 fd ff       	call   c000083c <strcpy>
c0021726:	83 c4 10             	add    esp,0x10
c0021729:	83 ec 08             	sub    esp,0x8
c002172c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021730:	50                   	push   eax
c0021731:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021738:	e8 79 ff ff ff       	call   c00216b6 <FAT::fixFilepath(char*)>
c002173d:	83 c4 10             	add    esp,0x10
c0021740:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021748:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002174f:	83 e0 01             	and    eax,0x1
c0021752:	74 08                	je     c002175c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021754:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002175c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021763:	83 e0 04             	and    eax,0x4
c0021766:	74 10                	je     c0021778 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021768:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021770:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021778:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002177f:	83 e0 02             	and    eax,0x2
c0021782:	74 08                	je     c002178c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021784:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002178c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021793:	83 e0 08             	and    eax,0x8
c0021796:	74 08                	je     c00217a0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021798:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00217a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217a7:	83 e0 10             	and    eax,0x10
c00217aa:	74 08                	je     c00217b4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00217ac:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00217b4:	83 ec 0c             	sub    esp,0xc
c00217b7:	68 50 02 00 00       	push   0x250
c00217bc:	e8 53 e1 fe ff       	call   c000f914 <malloc>
c00217c1:	83 c4 10             	add    esp,0x10
c00217c4:	89 c2                	mov    edx,eax
c00217c6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00217cd:	89 10                	mov    DWORD PTR [eax],edx
c00217cf:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00217d7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00217de:	8b 00                	mov    eax,DWORD PTR [eax]
c00217e0:	83 ec 04             	sub    esp,0x4
c00217e3:	52                   	push   edx
c00217e4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00217e8:	52                   	push   edx
c00217e9:	50                   	push   eax
c00217ea:	e8 aa 37 fe ff       	call   c0004f99 <f_open>
c00217ef:	83 c4 10             	add    esp,0x10
c00217f2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00217f9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021801:	74 07                	je     c002180a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021803:	b8 01 00 00 00       	mov    eax,0x1
c0021808:	eb 05                	jmp    c002180f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002180a:	b8 00 00 00 00       	mov    eax,0x0
c002180f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021815:	c3                   	ret    

c0021816 <FAT::openDir(char const*, void**)>:
c0021816:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002181c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021824:	74 0a                	je     c0021830 <FAT::openDir(char const*, void**)+0x1a>
c0021826:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002182e:	75 07                	jne    c0021837 <FAT::openDir(char const*, void**)+0x21>
c0021830:	b8 04 00 00 00       	mov    eax,0x4
c0021835:	eb 7d                	jmp    c00218b4 <FAT::openDir(char const*, void**)+0x9e>
c0021837:	83 ec 08             	sub    esp,0x8
c002183a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021841:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021845:	50                   	push   eax
c0021846:	e8 f1 ef fd ff       	call   c000083c <strcpy>
c002184b:	83 c4 10             	add    esp,0x10
c002184e:	83 ec 08             	sub    esp,0x8
c0021851:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021855:	50                   	push   eax
c0021856:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002185d:	e8 54 fe ff ff       	call   c00216b6 <FAT::fixFilepath(char*)>
c0021862:	83 c4 10             	add    esp,0x10
c0021865:	83 ec 0c             	sub    esp,0xc
c0021868:	6a 4c                	push   0x4c
c002186a:	e8 a5 e0 fe ff       	call   c000f914 <malloc>
c002186f:	83 c4 10             	add    esp,0x10
c0021872:	89 c2                	mov    edx,eax
c0021874:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002187b:	89 10                	mov    DWORD PTR [eax],edx
c002187d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021884:	8b 00                	mov    eax,DWORD PTR [eax]
c0021886:	83 ec 08             	sub    esp,0x8
c0021889:	8d 54 24 14          	lea    edx,[esp+0x14]
c002188d:	52                   	push   edx
c002188e:	50                   	push   eax
c002188f:	e8 3d 47 fe ff       	call   c0005fd1 <f_opendir>
c0021894:	83 c4 10             	add    esp,0x10
c0021897:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002189e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00218a6:	74 07                	je     c00218af <FAT::openDir(char const*, void**)+0x99>
c00218a8:	b8 01 00 00 00       	mov    eax,0x1
c00218ad:	eb 05                	jmp    c00218b4 <FAT::openDir(char const*, void**)+0x9e>
c00218af:	b8 00 00 00 00       	mov    eax,0x0
c00218b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218ba:	c3                   	ret    
c00218bb:	90                   	nop

c00218bc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00218bc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00218c2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00218ca:	75 0a                	jne    c00218d6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00218cc:	b8 04 00 00 00       	mov    eax,0x4
c00218d1:	e9 c9 00 00 00       	jmp    c002199f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00218d6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00218de:	75 0a                	jne    c00218ea <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00218e0:	b8 04 00 00 00       	mov    eax,0x4
c00218e5:	e9 b5 00 00 00       	jmp    c002199f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00218ea:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00218f2:	75 0a                	jne    c00218fe <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00218f4:	b8 04 00 00 00       	mov    eax,0x4
c00218f9:	e9 a1 00 00 00       	jmp    c002199f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00218fe:	83 ec 08             	sub    esp,0x8
c0021901:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021908:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002190f:	50                   	push   eax
c0021910:	e8 27 ef fd ff       	call   c000083c <strcpy>
c0021915:	83 c4 10             	add    esp,0x10
c0021918:	83 ec 08             	sub    esp,0x8
c002191b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021922:	50                   	push   eax
c0021923:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002192a:	e8 87 fd ff ff       	call   c00216b6 <FAT::fixFilepath(char*)>
c002192f:	83 c4 10             	add    esp,0x10
c0021932:	83 ec 08             	sub    esp,0x8
c0021935:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021939:	50                   	push   eax
c002193a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021941:	50                   	push   eax
c0021942:	e8 49 48 fe ff       	call   c0006190 <f_stat>
c0021947:	83 c4 10             	add    esp,0x10
c002194a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021951:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021958:	85 c0                	test   eax,eax
c002195a:	74 07                	je     c0021963 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002195c:	83 f8 04             	cmp    eax,0x4
c002195f:	74 32                	je     c0021993 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021961:	eb 37                	jmp    c002199a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021963:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021967:	0f b6 c0             	movzx  eax,al
c002196a:	83 e0 10             	and    eax,0x10
c002196d:	0f 95 c2             	setne  dl
c0021970:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021977:	88 10                	mov    BYTE PTR [eax],dl
c0021979:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002197c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021980:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021987:	89 01                	mov    DWORD PTR [ecx],eax
c0021989:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002198c:	b8 00 00 00 00       	mov    eax,0x0
c0021991:	eb 0c                	jmp    c002199f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021993:	b8 02 00 00 00       	mov    eax,0x2
c0021998:	eb 05                	jmp    c002199f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002199a:	b8 01 00 00 00       	mov    eax,0x1
c002199f:	81 c4 2c 02 00 00    	add    esp,0x22c
c00219a5:	c3                   	ret    

c00219a6 <FAT::unlink(char const*)>:
c00219a6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00219ac:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00219b4:	75 07                	jne    c00219bd <FAT::unlink(char const*)+0x17>
c00219b6:	b8 04 00 00 00       	mov    eax,0x4
c00219bb:	eb 5c                	jmp    c0021a19 <FAT::unlink(char const*)+0x73>
c00219bd:	83 ec 08             	sub    esp,0x8
c00219c0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219cb:	50                   	push   eax
c00219cc:	e8 6b ee fd ff       	call   c000083c <strcpy>
c00219d1:	83 c4 10             	add    esp,0x10
c00219d4:	83 ec 08             	sub    esp,0x8
c00219d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00219db:	50                   	push   eax
c00219dc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219e3:	e8 ce fc ff ff       	call   c00216b6 <FAT::fixFilepath(char*)>
c00219e8:	83 c4 10             	add    esp,0x10
c00219eb:	83 ec 0c             	sub    esp,0xc
c00219ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219f2:	50                   	push   eax
c00219f3:	e8 ea 4a fe ff       	call   c00064e2 <f_unlink>
c00219f8:	83 c4 10             	add    esp,0x10
c00219fb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021a02:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021a09:	85 c0                	test   eax,eax
c0021a0b:	75 07                	jne    c0021a14 <FAT::unlink(char const*)+0x6e>
c0021a0d:	b8 00 00 00 00       	mov    eax,0x0
c0021a12:	eb 05                	jmp    c0021a19 <FAT::unlink(char const*)+0x73>
c0021a14:	b8 01 00 00 00       	mov    eax,0x1
c0021a19:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a1f:	c3                   	ret    

c0021a20 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021a20:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021a26:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021a2d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021a34:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021a38:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021a3c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021a44:	75 0a                	jne    c0021a50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021a46:	b8 04 00 00 00       	mov    eax,0x4
c0021a4b:	e9 1c 01 00 00       	jmp    c0021b6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021a50:	83 ec 08             	sub    esp,0x8
c0021a53:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021a5a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a5e:	50                   	push   eax
c0021a5f:	e8 d8 ed fd ff       	call   c000083c <strcpy>
c0021a64:	83 c4 10             	add    esp,0x10
c0021a67:	83 ec 08             	sub    esp,0x8
c0021a6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021a6e:	50                   	push   eax
c0021a6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021a76:	e8 3b fc ff ff       	call   c00216b6 <FAT::fixFilepath(char*)>
c0021a7b:	83 c4 10             	add    esp,0x10
c0021a7e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021a86:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021a8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021a93:	83 e0 01             	and    eax,0x1
c0021a96:	74 08                	je     c0021aa0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021a98:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021aa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021aa5:	83 e0 02             	and    eax,0x2
c0021aa8:	74 08                	je     c0021ab2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021aaa:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021ab2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ab7:	83 e0 04             	and    eax,0x4
c0021aba:	74 08                	je     c0021ac4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021abc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021ac4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ac9:	83 e0 08             	and    eax,0x8
c0021acc:	74 08                	je     c0021ad6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021ace:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021ad6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021adb:	83 e0 01             	and    eax,0x1
c0021ade:	74 08                	je     c0021ae8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021ae0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021ae8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021aed:	83 e0 02             	and    eax,0x2
c0021af0:	74 08                	je     c0021afa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021af2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021afa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021aff:	83 e0 04             	and    eax,0x4
c0021b02:	74 08                	je     c0021b0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021b04:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021b0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b11:	83 e0 08             	and    eax,0x8
c0021b14:	74 08                	je     c0021b1e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021b16:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021b1e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021b25:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021b2c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021b34:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021b3c:	83 ec 04             	sub    esp,0x4
c0021b3f:	52                   	push   edx
c0021b40:	50                   	push   eax
c0021b41:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b45:	50                   	push   eax
c0021b46:	e8 39 50 fe ff       	call   c0006b84 <f_chmod>
c0021b4b:	83 c4 10             	add    esp,0x10
c0021b4e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021b55:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021b5c:	85 c0                	test   eax,eax
c0021b5e:	75 07                	jne    c0021b67 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021b60:	b8 00 00 00 00       	mov    eax,0x0
c0021b65:	eb 05                	jmp    c0021b6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021b67:	b8 01 00 00 00       	mov    eax,0x1
c0021b6c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021b72:	c3                   	ret    
c0021b73:	90                   	nop

c0021b74 <FAT::rename(char const*, char const*)>:
c0021b74:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021b7a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021b82:	74 0a                	je     c0021b8e <FAT::rename(char const*, char const*)+0x1a>
c0021b84:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021b8c:	75 0a                	jne    c0021b98 <FAT::rename(char const*, char const*)+0x24>
c0021b8e:	b8 04 00 00 00       	mov    eax,0x4
c0021b93:	e9 98 00 00 00       	jmp    c0021c30 <FAT::rename(char const*, char const*)+0xbc>
c0021b98:	83 ec 08             	sub    esp,0x8
c0021b9b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021ba2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021ba9:	50                   	push   eax
c0021baa:	e8 8d ec fd ff       	call   c000083c <strcpy>
c0021baf:	83 c4 10             	add    esp,0x10
c0021bb2:	83 ec 08             	sub    esp,0x8
c0021bb5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021bbc:	50                   	push   eax
c0021bbd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021bc4:	e8 ed fa ff ff       	call   c00216b6 <FAT::fixFilepath(char*)>
c0021bc9:	83 c4 10             	add    esp,0x10
c0021bcc:	83 ec 08             	sub    esp,0x8
c0021bcf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021bd6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021bda:	50                   	push   eax
c0021bdb:	e8 5c ec fd ff       	call   c000083c <strcpy>
c0021be0:	83 c4 10             	add    esp,0x10
c0021be3:	83 ec 08             	sub    esp,0x8
c0021be6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021bea:	50                   	push   eax
c0021beb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021bf2:	e8 bf fa ff ff       	call   c00216b6 <FAT::fixFilepath(char*)>
c0021bf7:	83 c4 10             	add    esp,0x10
c0021bfa:	83 ec 08             	sub    esp,0x8
c0021bfd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c01:	50                   	push   eax
c0021c02:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c09:	50                   	push   eax
c0021c0a:	e8 82 4c fe ff       	call   c0006891 <f_rename>
c0021c0f:	83 c4 10             	add    esp,0x10
c0021c12:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021c19:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021c20:	85 c0                	test   eax,eax
c0021c22:	75 07                	jne    c0021c2b <FAT::rename(char const*, char const*)+0xb7>
c0021c24:	b8 00 00 00 00       	mov    eax,0x0
c0021c29:	eb 05                	jmp    c0021c30 <FAT::rename(char const*, char const*)+0xbc>
c0021c2b:	b8 01 00 00 00       	mov    eax,0x1
c0021c30:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021c36:	c3                   	ret    
c0021c37:	90                   	nop

c0021c38 <FAT::mkdir(char const*)>:
c0021c38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c3e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021c46:	75 07                	jne    c0021c4f <FAT::mkdir(char const*)+0x17>
c0021c48:	b8 04 00 00 00       	mov    eax,0x4
c0021c4d:	eb 5c                	jmp    c0021cab <FAT::mkdir(char const*)+0x73>
c0021c4f:	83 ec 08             	sub    esp,0x8
c0021c52:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c5d:	50                   	push   eax
c0021c5e:	e8 d9 eb fd ff       	call   c000083c <strcpy>
c0021c63:	83 c4 10             	add    esp,0x10
c0021c66:	83 ec 08             	sub    esp,0x8
c0021c69:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c6d:	50                   	push   eax
c0021c6e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c75:	e8 3c fa ff ff       	call   c00216b6 <FAT::fixFilepath(char*)>
c0021c7a:	83 c4 10             	add    esp,0x10
c0021c7d:	83 ec 0c             	sub    esp,0xc
c0021c80:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c84:	50                   	push   eax
c0021c85:	e8 db 49 fe ff       	call   c0006665 <f_mkdir>
c0021c8a:	83 c4 10             	add    esp,0x10
c0021c8d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021c94:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021c9b:	85 c0                	test   eax,eax
c0021c9d:	75 07                	jne    c0021ca6 <FAT::mkdir(char const*)+0x6e>
c0021c9f:	b8 00 00 00 00       	mov    eax,0x0
c0021ca4:	eb 05                	jmp    c0021cab <FAT::mkdir(char const*)+0x73>
c0021ca6:	b8 01 00 00 00       	mov    eax,0x1
c0021cab:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021cb1:	c3                   	ret    

c0021cb2 <FAT::exists(char const*)>:
c0021cb2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021cb8:	83 ec 08             	sub    esp,0x8
c0021cbb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021cc2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021cc6:	50                   	push   eax
c0021cc7:	e8 70 eb fd ff       	call   c000083c <strcpy>
c0021ccc:	83 c4 10             	add    esp,0x10
c0021ccf:	83 ec 08             	sub    esp,0x8
c0021cd2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021cd6:	50                   	push   eax
c0021cd7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021cde:	e8 d3 f9 ff ff       	call   c00216b6 <FAT::fixFilepath(char*)>
c0021ce3:	83 c4 10             	add    esp,0x10
c0021ce6:	83 ec 08             	sub    esp,0x8
c0021ce9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021cf0:	50                   	push   eax
c0021cf1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021cf5:	50                   	push   eax
c0021cf6:	e8 95 44 fe ff       	call   c0006190 <f_stat>
c0021cfb:	83 c4 10             	add    esp,0x10
c0021cfe:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021d05:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021d0c:	85 c0                	test   eax,eax
c0021d0e:	75 04                	jne    c0021d14 <FAT::exists(char const*)+0x62>
c0021d10:	b0 01                	mov    al,0x1
c0021d12:	eb 02                	jmp    c0021d16 <FAT::exists(char const*)+0x64>
c0021d14:	b0 00                	mov    al,0x0
c0021d16:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021d1c:	c3                   	ret    
c0021d1d:	90                   	nop

c0021d1e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021d1e:	b8 08 00 00 00       	mov    eax,0x8
c0021d23:	c3                   	ret    

c0021d24 <ISO9660::seek(void*, unsigned long long)>:
c0021d24:	53                   	push   ebx
c0021d25:	b8 04 00 00 00       	mov    eax,0x4
c0021d2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021d36:	85 d2                	test   edx,edx
c0021d38:	74 17                	je     c0021d51 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d3a:	89 c8                	mov    eax,ecx
c0021d3c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021d3f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021d42:	b8 01 00 00 00       	mov    eax,0x1
c0021d47:	73 08                	jae    c0021d51 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d49:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021d4c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021d4f:	31 c0                	xor    eax,eax
c0021d51:	5b                   	pop    ebx
c0021d52:	c3                   	ret    
c0021d53:	90                   	nop

c0021d54 <ISO9660::tell(void*, unsigned long long*)>:
c0021d54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d5c:	85 d2                	test   edx,edx
c0021d5e:	74 12                	je     c0021d72 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021d60:	85 c0                	test   eax,eax
c0021d62:	74 0e                	je     c0021d72 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021d64:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021d67:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021d6a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021d6d:	89 10                	mov    DWORD PTR [eax],edx
c0021d6f:	31 c0                	xor    eax,eax
c0021d71:	c3                   	ret    
c0021d72:	b8 04 00 00 00       	mov    eax,0x4
c0021d77:	c3                   	ret    

c0021d78 <ISO9660::getName()>:
c0021d78:	b8 dc d2 02 c0       	mov    eax,0xc002d2dc
c0021d7d:	c3                   	ret    

c0021d7e <ISO9660::stat(void*, unsigned long long*)>:
c0021d7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d86:	85 d2                	test   edx,edx
c0021d88:	74 12                	je     c0021d9c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021d8a:	85 c0                	test   eax,eax
c0021d8c:	74 0e                	je     c0021d9c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021d8e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021d91:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021d94:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021d97:	89 10                	mov    DWORD PTR [eax],edx
c0021d99:	31 c0                	xor    eax,eax
c0021d9b:	c3                   	ret    
c0021d9c:	b8 04 00 00 00       	mov    eax,0x4
c0021da1:	c3                   	ret    

c0021da2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021da2:	b8 01 00 00 00       	mov    eax,0x1
c0021da7:	c3                   	ret    

c0021da8 <ISO9660::unlink(char const*)>:
c0021da8:	b8 01 00 00 00       	mov    eax,0x1
c0021dad:	c3                   	ret    

c0021dae <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021dae:	b8 01 00 00 00       	mov    eax,0x1
c0021db3:	c3                   	ret    

c0021db4 <ISO9660::rename(char const*, char const*)>:
c0021db4:	b8 01 00 00 00       	mov    eax,0x1
c0021db9:	c3                   	ret    

c0021dba <ISO9660::mkdir(char const*)>:
c0021dba:	b8 01 00 00 00       	mov    eax,0x1
c0021dbf:	c3                   	ret    

c0021dc0 <ISO9660::close(void*)>:
c0021dc0:	83 ec 0c             	sub    esp,0xc
c0021dc3:	b8 04 00 00 00       	mov    eax,0x4
c0021dc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021dcc:	85 d2                	test   edx,edx
c0021dce:	74 0e                	je     c0021dde <ISO9660::close(void*)+0x1e>
c0021dd0:	83 ec 0c             	sub    esp,0xc
c0021dd3:	52                   	push   edx
c0021dd4:	e8 4b db fe ff       	call   c000f924 <free>
c0021dd9:	83 c4 10             	add    esp,0x10
c0021ddc:	31 c0                	xor    eax,eax
c0021dde:	83 c4 0c             	add    esp,0xc
c0021de1:	c3                   	ret    

c0021de2 <ISO9660::closeDir(void*)>:
c0021de2:	83 ec 0c             	sub    esp,0xc
c0021de5:	b8 04 00 00 00       	mov    eax,0x4
c0021dea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021dee:	85 d2                	test   edx,edx
c0021df0:	74 0e                	je     c0021e00 <ISO9660::closeDir(void*)+0x1e>
c0021df2:	83 ec 0c             	sub    esp,0xc
c0021df5:	52                   	push   edx
c0021df6:	e8 29 db fe ff       	call   c000f924 <free>
c0021dfb:	83 c4 10             	add    esp,0x10
c0021dfe:	31 c0                	xor    eax,eax
c0021e00:	83 c4 0c             	add    esp,0xc
c0021e03:	c3                   	ret    

c0021e04 <ISO9660::~ISO9660()>:
c0021e04:	83 ec 0c             	sub    esp,0xc
c0021e07:	ba 40 d3 02 c0       	mov    edx,0xc002d340
c0021e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e10:	89 10                	mov    DWORD PTR [eax],edx
c0021e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e16:	83 ec 0c             	sub    esp,0xc
c0021e19:	50                   	push   eax
c0021e1a:	e8 db 13 ff ff       	call   c00131fa <Filesystem::~Filesystem()>
c0021e1f:	83 c4 10             	add    esp,0x10
c0021e22:	90                   	nop
c0021e23:	83 c4 0c             	add    esp,0xc
c0021e26:	c3                   	ret    
c0021e27:	90                   	nop

c0021e28 <ISO9660::~ISO9660()>:
c0021e28:	83 ec 0c             	sub    esp,0xc
c0021e2b:	83 ec 0c             	sub    esp,0xc
c0021e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e32:	e8 cd ff ff ff       	call   c0021e04 <ISO9660::~ISO9660()>
c0021e37:	83 c4 10             	add    esp,0x10
c0021e3a:	83 ec 08             	sub    esp,0x8
c0021e3d:	6a 08                	push   0x8
c0021e3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e43:	e8 a3 0f ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0021e48:	83 c4 10             	add    esp,0x10
c0021e4b:	83 c4 0c             	add    esp,0xc
c0021e4e:	c3                   	ret    

c0021e4f <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021e4f:	55                   	push   ebp
c0021e50:	31 c9                	xor    ecx,ecx
c0021e52:	57                   	push   edi
c0021e53:	56                   	push   esi
c0021e54:	53                   	push   ebx
c0021e55:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021e59:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021e5d:	89 eb                	mov    ebx,ebp
c0021e5f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021e63:	39 ce                	cmp    esi,ecx
c0021e65:	7e 17                	jle    c0021e7e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021e67:	31 d2                	xor    edx,edx
c0021e69:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021e6d:	7d 13                	jge    c0021e82 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021e6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e73:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e76:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021e79:	75 0d                	jne    c0021e88 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021e7b:	42                   	inc    edx
c0021e7c:	eb eb                	jmp    c0021e69 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021e7e:	31 c0                	xor    eax,eax
c0021e80:	eb 0a                	jmp    c0021e8c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021e82:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021e86:	eb 04                	jmp    c0021e8c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021e88:	41                   	inc    ecx
c0021e89:	43                   	inc    ebx
c0021e8a:	eb d7                	jmp    c0021e63 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021e8c:	5b                   	pop    ebx
c0021e8d:	5e                   	pop    esi
c0021e8e:	5f                   	pop    edi
c0021e8f:	5d                   	pop    ebp
c0021e90:	c3                   	ret    

c0021e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021e91:	56                   	push   esi
c0021e92:	53                   	push   ebx
c0021e93:	52                   	push   edx
c0021e94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021e98:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021e9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ea0:	39 0d 60 25 03 c0    	cmp    DWORD PTR ds:0xc0032560,ecx
c0021ea6:	75 08                	jne    c0021eb0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021ea8:	38 05 b4 e3 02 c0    	cmp    BYTE PTR ds:0xc002e3b4,al
c0021eae:	74 2b                	je     c0021edb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021eb0:	83 ec 0c             	sub    esp,0xc
c0021eb3:	a2 b4 e3 02 c0       	mov    ds:0xc002e3b4,al
c0021eb8:	68 80 25 03 c0       	push   0xc0032580
c0021ebd:	0f be c0             	movsx  eax,al
c0021ec0:	6a 01                	push   0x1
c0021ec2:	89 0d 60 25 03 c0    	mov    DWORD PTR ds:0xc0032560,ecx
c0021ec8:	31 db                	xor    ebx,ebx
c0021eca:	53                   	push   ebx
c0021ecb:	51                   	push   ecx
c0021ecc:	ff 34 85 3c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc4]
c0021ed3:	e8 7e 49 ff ff       	call   c0016856 <LogicalDisk::read(unsigned long long, int, void*)>
c0021ed8:	83 c4 20             	add    esp,0x20
c0021edb:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021ee3:	c7 44 24 14 80 25 03 c0 	mov    DWORD PTR [esp+0x14],0xc0032580
c0021eeb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021eef:	58                   	pop    eax
c0021ef0:	5b                   	pop    ebx
c0021ef1:	5e                   	pop    esi
c0021ef2:	e9 71 e8 fd ff       	jmp    c0000768 <memcpy>
c0021ef7:	90                   	nop

c0021ef8 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021ef8:	81 ec 10 08 00 00    	sub    esp,0x810
c0021efe:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021f05:	83 c0 41             	add    eax,0x41
c0021f08:	0f be c0             	movsx  eax,al
c0021f0b:	50                   	push   eax
c0021f0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f10:	50                   	push   eax
c0021f11:	6a 10                	push   0x10
c0021f13:	e8 79 ff ff ff       	call   c0021e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f18:	83 c4 10             	add    esp,0x10
c0021f1b:	31 c0                	xor    eax,eax
c0021f1d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021f22:	75 1d                	jne    c0021f41 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f24:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021f29:	75 16                	jne    c0021f41 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f2b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021f30:	75 0f                	jne    c0021f41 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f32:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021f37:	75 08                	jne    c0021f41 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f39:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021f3e:	0f 94 c0             	sete   al
c0021f41:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021f47:	c3                   	ret    

c0021f48 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021f48:	55                   	push   ebp
c0021f49:	57                   	push   edi
c0021f4a:	56                   	push   esi
c0021f4b:	53                   	push   ebx
c0021f4c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021f52:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021f59:	85 ed                	test   ebp,ebp
c0021f5b:	0f 84 d6 01 00 00    	je     c0022137 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021f61:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021f69:	0f 84 c8 01 00 00    	je     c0022137 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021f6f:	b8 01 00 00 00       	mov    eax,0x1
c0021f74:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021f78:	0f 85 be 01 00 00    	jne    c002213c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021f7e:	31 d2                	xor    edx,edx
c0021f80:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021f87:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021f8a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021f8d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021f91:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021f94:	89 04 24             	mov    DWORD PTR [esp],eax
c0021f97:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021f9b:	01 f0                	add    eax,esi
c0021f9d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021fa0:	11 fa                	adc    edx,edi
c0021fa2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021fa6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021faa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021fae:	19 d1                	sbb    ecx,edx
c0021fb0:	72 0a                	jb     c0021fbc <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021fb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fba:	eb 13                	jmp    c0021fcf <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021fbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fc4:	29 f0                	sub    eax,esi
c0021fc6:	19 fa                	sbb    edx,edi
c0021fc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021fd2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021fd5:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021fd9:	51                   	push   ecx
c0021fda:	c1 e0 0b             	shl    eax,0xb
c0021fdd:	01 c6                	add    esi,eax
c0021fdf:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021fe3:	11 d7                	adc    edi,edx
c0021fe5:	50                   	push   eax
c0021fe6:	89 fa                	mov    edx,edi
c0021fe8:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021fec:	89 f0                	mov    eax,esi
c0021fee:	53                   	push   ebx
c0021fef:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021ff3:	50                   	push   eax
c0021ff4:	e8 98 fe ff ff       	call   c0021e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ff9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ffd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022000:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0022004:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002200a:	83 c4 10             	add    esp,0x10
c002200d:	b8 00 08 00 00       	mov    eax,0x800
c0022012:	29 d0                	sub    eax,edx
c0022014:	39 c1                	cmp    ecx,eax
c0022016:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002201a:	83 d9 00             	sbb    ecx,0x0
c002201d:	7d 1c                	jge    c002203b <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c002201f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022024:	75 12                	jne    c0022038 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0022026:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002202d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022033:	e9 fb 00 00 00       	jmp    c0022133 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0022038:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002203b:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002203e:	31 d2                	xor    edx,edx
c0022040:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0022044:	39 c2                	cmp    edx,eax
c0022046:	7d 14                	jge    c002205c <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0022048:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002204f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022053:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0022056:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0022059:	42                   	inc    edx
c002205a:	eb e8                	jmp    c0022044 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002205c:	89 c3                	mov    ebx,eax
c002205e:	85 c0                	test   eax,eax
c0022060:	79 02                	jns    c0022064 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0022062:	31 db                	xor    ebx,ebx
c0022064:	99                   	cdq    
c0022065:	01 c3                	add    ebx,eax
c0022067:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002206e:	01 c6                	add    esi,eax
c0022070:	11 d7                	adc    edi,edx
c0022072:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0022076:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002207a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002207d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0022081:	29 c6                	sub    esi,eax
c0022083:	19 d7                	sbb    edi,edx
c0022085:	89 34 24             	mov    DWORD PTR [esp],esi
c0022088:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002208c:	b8 ff 07 00 00       	mov    eax,0x7ff
c0022091:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0022094:	b8 00 00 00 00       	mov    eax,0x0
c0022099:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002209d:	7d 3e                	jge    c00220dd <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c002209f:	52                   	push   edx
c00220a0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220a4:	50                   	push   eax
c00220a5:	53                   	push   ebx
c00220a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00220aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00220ae:	0f ac d0 0b          	shrd   eax,edx,0xb
c00220b2:	50                   	push   eax
c00220b3:	e8 d9 fd ff ff       	call   c0021e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220b8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00220c0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00220c5:	81 c3 00 08 00 00    	add    ebx,0x800
c00220cb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00220d3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00220d8:	83 c4 10             	add    esp,0x10
c00220db:	eb af                	jmp    c002208c <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00220dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220e1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00220e4:	74 32                	je     c0022118 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00220e6:	50                   	push   eax
c00220e7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220eb:	50                   	push   eax
c00220ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c00220f0:	50                   	push   eax
c00220f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00220f5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00220f9:	0f ac fe 0b          	shrd   esi,edi,0xb
c00220fd:	56                   	push   esi
c00220fe:	e8 8e fd ff ff       	call   c0021e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022103:	83 c4 0c             	add    esp,0xc
c0022106:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c002210a:	8d 44 24 28          	lea    eax,[esp+0x28]
c002210e:	50                   	push   eax
c002210f:	53                   	push   ebx
c0022110:	e8 53 e6 fd ff       	call   c0000768 <memcpy>
c0022115:	83 c4 10             	add    esp,0x10
c0022118:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002211f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022123:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022127:	89 38                	mov    DWORD PTR [eax],edi
c0022129:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002212d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022130:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022133:	31 c0                	xor    eax,eax
c0022135:	eb 05                	jmp    c002213c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0022137:	b8 04 00 00 00       	mov    eax,0x4
c002213c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022142:	5b                   	pop    ebx
c0022143:	5e                   	pop    esi
c0022144:	5f                   	pop    edi
c0022145:	5d                   	pop    ebp
c0022146:	c3                   	ret    
c0022147:	90                   	nop

c0022148 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0022148:	55                   	push   ebp
c0022149:	57                   	push   edi
c002214a:	56                   	push   esi
c002214b:	53                   	push   ebx
c002214c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0022152:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0022159:	85 f6                	test   esi,esi
c002215b:	0f 84 64 02 00 00    	je     c00223c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0022161:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0022169:	0f 84 56 02 00 00    	je     c00223c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002216f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0022172:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0022175:	75 0a                	jne    c0022181 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0022177:	b8 07 00 00 00       	mov    eax,0x7
c002217c:	e9 49 02 00 00       	jmp    c00223ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0022181:	50                   	push   eax
c0022182:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0022186:	50                   	push   eax
c0022187:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002218e:	53                   	push   ebx
c002218f:	8b 06                	mov    eax,DWORD PTR [esi]
c0022191:	c1 e0 0b             	shl    eax,0xb
c0022194:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0022197:	c1 e8 0b             	shr    eax,0xb
c002219a:	50                   	push   eax
c002219b:	e8 f1 fc ff ff       	call   c0021e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221a0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00221a3:	83 c4 10             	add    esp,0x10
c00221a6:	89 c1                	mov    ecx,eax
c00221a8:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00221ab:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00221b1:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00221b4:	84 db                	test   bl,bl
c00221b6:	0f 85 90 00 00 00    	jne    c002224c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00221bc:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00221c2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00221c8:	29 c7                	sub    edi,eax
c00221ca:	89 fb                	mov    ebx,edi
c00221cc:	c1 fb 1f             	sar    ebx,0x1f
c00221cf:	01 f8                	add    eax,edi
c00221d1:	11 da                	adc    edx,ebx
c00221d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221db:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00221de:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00221e1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00221e4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00221e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00221ea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00221ee:	89 d8                	mov    eax,ebx
c00221f0:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00221f3:	ba 00 00 00 00       	mov    edx,0x0
c00221f8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00221fc:	b8 00 00 00 00       	mov    eax,0x0
c0022201:	73 0b                	jae    c002220e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0022203:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022206:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002220a:	29 f8                	sub    eax,edi
c002220c:	19 da                	sbb    edx,ebx
c002220e:	89 d3                	mov    ebx,edx
c0022210:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0022213:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0022216:	09 c3                	or     ebx,eax
c0022218:	0f 84 59 ff ff ff    	je     c0022177 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002221e:	55                   	push   ebp
c002221f:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0022223:	50                   	push   eax
c0022224:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002222b:	53                   	push   ebx
c002222c:	8b 06                	mov    eax,DWORD PTR [esi]
c002222e:	c1 e0 0b             	shl    eax,0xb
c0022231:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0022235:	c1 e8 0b             	shr    eax,0xb
c0022238:	50                   	push   eax
c0022239:	e8 53 fc ff ff       	call   c0021e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002223e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0022241:	83 c4 10             	add    esp,0x10
c0022244:	25 ff 07 00 00       	and    eax,0x7ff
c0022249:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002224c:	57                   	push   edi
c002224d:	6a 28                	push   0x28
c002224f:	6a 00                	push   0x0
c0022251:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022255:	50                   	push   eax
c0022256:	e8 25 e5 fd ff       	call   c0000780 <memset>
c002225b:	31 d2                	xor    edx,edx
c002225d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0022260:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0022266:	89 f8                	mov    eax,edi
c0022268:	83 c0 21             	add    eax,0x21
c002226b:	83 d2 00             	adc    edx,0x0
c002226e:	89 c7                	mov    edi,eax
c0022270:	89 d5                	mov    ebp,edx
c0022272:	83 c4 10             	add    esp,0x10
c0022275:	31 c9                	xor    ecx,ecx
c0022277:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c002227e:	83 f9 28             	cmp    ecx,0x28
c0022281:	88 04 24             	mov    BYTE PTR [esp],al
c0022284:	0f 94 c2             	sete   dl
c0022287:	88 d0                	mov    al,dl
c0022289:	ba ff 07 00 00       	mov    edx,0x7ff
c002228e:	39 fa                	cmp    edx,edi
c0022290:	ba 00 00 00 00       	mov    edx,0x0
c0022295:	19 ea                	sbb    edx,ebp
c0022297:	0f 92 c2             	setb   dl
c002229a:	09 c2                	or     edx,eax
c002229c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00222a0:	0f 94 c0             	sete   al
c00222a3:	08 d0                	or     al,dl
c00222a5:	75 16                	jne    c00222bd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00222a7:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00222ab:	74 10                	je     c00222bd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00222ad:	8a 04 24             	mov    al,BYTE PTR [esp]
c00222b0:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00222b4:	41                   	inc    ecx
c00222b5:	83 c7 01             	add    edi,0x1
c00222b8:	83 d5 00             	adc    ebp,0x0
c00222bb:	eb ba                	jmp    c0022277 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c00222bd:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00222c4:	83 ec 0c             	sub    esp,0xc
c00222c7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00222cb:	57                   	push   edi
c00222cc:	e8 cb e4 fd ff       	call   c000079c <strlen>
c00222d1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00222d9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00222dd:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00222e4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00222e7:	5a                   	pop    edx
c00222e8:	25 ff 07 00 00       	and    eax,0x7ff
c00222ed:	01 c8                	add    eax,ecx
c00222ef:	59                   	pop    ecx
c00222f0:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00222f6:	83 e0 02             	and    eax,0x2
c00222f9:	3c 01                	cmp    al,0x1
c00222fb:	19 c0                	sbb    eax,eax
c00222fd:	83 c0 02             	add    eax,0x2
c0022300:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022304:	57                   	push   edi
c0022305:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022309:	50                   	push   eax
c002230a:	e8 2d e5 fd ff       	call   c000083c <strcpy>
c002230f:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022313:	83 c4 10             	add    esp,0x10
c0022316:	84 c0                	test   al,al
c0022318:	75 21                	jne    c002233b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c002231a:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0022322:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002232a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022332:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022339:	eb 28                	jmp    c0022363 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002233b:	fe c8                	dec    al
c002233d:	75 24                	jne    c0022363 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002233f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022347:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002234f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022357:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002235e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022363:	0f b6 fb             	movzx  edi,bl
c0022366:	31 db                	xor    ebx,ebx
c0022368:	50                   	push   eax
c0022369:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0022370:	8d 44 24 48          	lea    eax,[esp+0x48]
c0022374:	50                   	push   eax
c0022375:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c002237c:	e8 e7 e3 fd ff       	call   c0000768 <memcpy>
c0022381:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0022388:	89 f9                	mov    ecx,edi
c002238a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0022390:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0022393:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0022396:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0022399:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002239c:	83 c4 10             	add    esp,0x10
c002239f:	39 c7                	cmp    edi,eax
c00223a1:	89 df                	mov    edi,ebx
c00223a3:	19 d7                	sbb    edi,edx
c00223a5:	72 10                	jb     c00223b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00223a7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00223ae:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00223b5:	eb 0a                	jmp    c00223c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00223b7:	29 c8                	sub    eax,ecx
c00223b9:	19 da                	sbb    edx,ebx
c00223bb:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00223be:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00223c1:	31 c0                	xor    eax,eax
c00223c3:	eb 05                	jmp    c00223ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00223c5:	b8 04 00 00 00       	mov    eax,0x4
c00223ca:	81 c4 5c 09 00 00    	add    esp,0x95c
c00223d0:	5b                   	pop    ebx
c00223d1:	5e                   	pop    esi
c00223d2:	5f                   	pop    edi
c00223d3:	5d                   	pop    ebp
c00223d4:	c3                   	ret    

c00223d5 <readRoot(unsigned int*, unsigned int*, char)>:
c00223d5:	81 ec 40 08 00 00    	sub    esp,0x840
c00223db:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00223e3:	50                   	push   eax
c00223e4:	8d 44 24 38          	lea    eax,[esp+0x38]
c00223e8:	50                   	push   eax
c00223e9:	6a 10                	push   0x10
c00223eb:	e8 a1 fa ff ff       	call   c0021e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00223f0:	83 c4 0c             	add    esp,0xc
c00223f3:	6a 22                	push   0x22
c00223f5:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c00223fc:	50                   	push   eax
c00223fd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022401:	50                   	push   eax
c0022402:	e8 61 e3 fd ff       	call   c0000768 <memcpy>
c0022407:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002240e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022412:	89 10                	mov    DWORD PTR [eax],edx
c0022414:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002241b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002241f:	89 10                	mov    DWORD PTR [eax],edx
c0022421:	b0 01                	mov    al,0x1
c0022423:	81 c4 4c 08 00 00    	add    esp,0x84c
c0022429:	c3                   	ret    

c002242a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002242a:	55                   	push   ebp
c002242b:	57                   	push   edi
c002242c:	56                   	push   esi
c002242d:	53                   	push   ebx
c002242e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022434:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002243b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022442:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022446:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002244a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002244e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022452:	75 03                	jne    c0022457 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022454:	83 c3 02             	add    ebx,0x2
c0022457:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002245a:	75 03                	jne    c002245f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002245c:	43                   	inc    ebx
c002245d:	eb f8                	jmp    c0022457 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002245f:	51                   	push   ecx
c0022460:	68 00 01 00 00       	push   0x100
c0022465:	6a 00                	push   0x0
c0022467:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002246b:	50                   	push   eax
c002246c:	e8 0f e3 fd ff       	call   c0000780 <memset>
c0022471:	83 c4 10             	add    esp,0x10
c0022474:	31 d2                	xor    edx,edx
c0022476:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022479:	84 c0                	test   al,al
c002247b:	74 21                	je     c002249e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002247d:	3c 2f                	cmp    al,0x2f
c002247f:	75 0b                	jne    c002248c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022481:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022485:	bd 01 00 00 00       	mov    ebp,0x1
c002248a:	eb 14                	jmp    c00224a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002248c:	8d 48 9f             	lea    ecx,[eax-0x61]
c002248f:	80 f9 19             	cmp    cl,0x19
c0022492:	77 03                	ja     c0022497 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022494:	83 e8 20             	sub    eax,0x20
c0022497:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002249b:	42                   	inc    edx
c002249c:	eb d8                	jmp    c0022476 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002249e:	31 ed                	xor    ebp,ebp
c00224a0:	83 ec 0c             	sub    esp,0xc
c00224a3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00224aa:	e8 65 d4 fe ff       	call   c000f914 <malloc>
c00224af:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00224b6:	89 c6                	mov    esi,eax
c00224b8:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00224be:	c1 ef 0b             	shr    edi,0xb
c00224c1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00224c8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00224cc:	83 c4 10             	add    esp,0x10
c00224cf:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00224d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00224d8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00224df:	74 28                	je     c0022509 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00224e1:	52                   	push   edx
c00224e2:	57                   	push   edi
c00224e3:	50                   	push   eax
c00224e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224e8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00224ef:	e8 9d f9 ff ff       	call   c0021e91 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00224f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00224f8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00224ff:	05 00 08 00 00       	add    eax,0x800
c0022504:	83 c4 10             	add    esp,0x10
c0022507:	eb cb                	jmp    c00224d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022509:	83 ec 0c             	sub    esp,0xc
c002250c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022510:	57                   	push   edi
c0022511:	e8 86 e2 fd ff       	call   c000079c <strlen>
c0022516:	50                   	push   eax
c0022517:	57                   	push   edi
c0022518:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002251f:	56                   	push   esi
c0022520:	e8 2a f9 ff ff       	call   c0021e4f <__memmem(unsigned char*, int, unsigned char*, int)>
c0022525:	83 c4 20             	add    esp,0x20
c0022528:	85 c0                	test   eax,eax
c002252a:	75 13                	jne    c002253f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002252c:	83 ec 0c             	sub    esp,0xc
c002252f:	56                   	push   esi
c0022530:	e8 ef d3 fe ff       	call   c000f924 <free>
c0022535:	83 c4 10             	add    esp,0x10
c0022538:	31 c0                	xor    eax,eax
c002253a:	e9 b3 00 00 00       	jmp    c00225f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002253f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022543:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022547:	c1 e7 08             	shl    edi,0x8
c002254a:	c1 e2 10             	shl    edx,0x10
c002254d:	09 d7                	or     edi,edx
c002254f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022553:	09 d7                	or     edi,edx
c0022555:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022559:	c1 e2 18             	shl    edx,0x18
c002255c:	09 d7                	or     edi,edx
c002255e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022562:	89 d1                	mov    ecx,edx
c0022564:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022568:	c1 e1 08             	shl    ecx,0x8
c002256b:	c1 e2 10             	shl    edx,0x10
c002256e:	09 ca                	or     edx,ecx
c0022570:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022574:	09 ca                	or     edx,ecx
c0022576:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002257a:	c1 e1 18             	shl    ecx,0x18
c002257d:	09 ca                	or     edx,ecx
c002257f:	89 e9                	mov    ecx,ebp
c0022581:	84 c9                	test   cl,cl
c0022583:	74 3c                	je     c00225c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022585:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022589:	83 ec 0c             	sub    esp,0xc
c002258c:	56                   	push   esi
c002258d:	e8 92 d3 fe ff       	call   c000f924 <free>
c0022592:	83 c4 0c             	add    esp,0xc
c0022595:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002259c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00225a1:	50                   	push   eax
c00225a2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225a9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00225b4:	52                   	push   edx
c00225b5:	57                   	push   edi
c00225b6:	53                   	push   ebx
c00225b7:	e8 6e fe ff ff       	call   c002242a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00225bc:	83 c4 20             	add    esp,0x20
c00225bf:	eb 31                	jmp    c00225f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00225c1:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00225c4:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00225cb:	d0 e8                	shr    al,1
c00225cd:	89 3b                	mov    DWORD PTR [ebx],edi
c00225cf:	83 e0 01             	and    eax,0x1
c00225d2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00225d9:	83 ec 0c             	sub    esp,0xc
c00225dc:	89 13                	mov    DWORD PTR [ebx],edx
c00225de:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00225e5:	89 03                	mov    DWORD PTR [ebx],eax
c00225e7:	56                   	push   esi
c00225e8:	e8 37 d3 fe ff       	call   c000f924 <free>
c00225ed:	83 c4 10             	add    esp,0x10
c00225f0:	b0 01                	mov    al,0x1
c00225f2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00225f8:	5b                   	pop    ebx
c00225f9:	5e                   	pop    esi
c00225fa:	5f                   	pop    edi
c00225fb:	5d                   	pop    ebp
c00225fc:	c3                   	ret    

c00225fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00225fd:	55                   	push   ebp
c00225fe:	57                   	push   edi
c00225ff:	56                   	push   esi
c0022600:	53                   	push   ebx
c0022601:	83 ec 20             	sub    esp,0x20
c0022604:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022608:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002260c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022610:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022618:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022620:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022625:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002262b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022631:	57                   	push   edi
c0022632:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022636:	50                   	push   eax
c0022637:	8d 44 24 14          	lea    eax,[esp+0x14]
c002263b:	50                   	push   eax
c002263c:	e8 94 fd ff ff       	call   c00223d5 <readRoot(unsigned int*, unsigned int*, char)>
c0022641:	5a                   	pop    edx
c0022642:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022646:	e8 51 e1 fd ff       	call   c000079c <strlen>
c002264b:	83 c4 10             	add    esp,0x10
c002264e:	83 f8 03             	cmp    eax,0x3
c0022651:	77 17                	ja     c002266a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022657:	89 03                	mov    DWORD PTR [ebx],eax
c0022659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002265d:	89 06                	mov    DWORD PTR [esi],eax
c002265f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022666:	b0 01                	mov    al,0x1
c0022668:	eb 19                	jmp    c0022683 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002266a:	50                   	push   eax
c002266b:	55                   	push   ebp
c002266c:	57                   	push   edi
c002266d:	56                   	push   esi
c002266e:	53                   	push   ebx
c002266f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022673:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022677:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002267b:	e8 aa fd ff ff       	call   c002242a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022680:	83 c4 20             	add    esp,0x20
c0022683:	83 c4 1c             	add    esp,0x1c
c0022686:	5b                   	pop    ebx
c0022687:	5e                   	pop    esi
c0022688:	5f                   	pop    edi
c0022689:	5d                   	pop    ebp
c002268a:	c3                   	ret    
c002268b:	90                   	nop

c002268c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002268c:	57                   	push   edi
c002268d:	56                   	push   esi
c002268e:	53                   	push   ebx
c002268f:	83 ec 10             	sub    esp,0x10
c0022692:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022696:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002269a:	85 ff                	test   edi,edi
c002269c:	0f 84 9d 00 00 00    	je     c002273f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226a2:	85 f6                	test   esi,esi
c00226a4:	0f 84 95 00 00 00    	je     c002273f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226aa:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00226af:	74 17                	je     c00226c8 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00226b1:	83 ec 0c             	sub    esp,0xc
c00226b4:	68 f7 d2 02 c0       	push   0xc002d2f7
c00226b9:	e8 0d 08 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00226be:	83 c4 10             	add    esp,0x10
c00226c1:	b8 03 00 00 00       	mov    eax,0x3
c00226c6:	eb 7c                	jmp    c0022744 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00226c8:	83 ec 0c             	sub    esp,0xc
c00226cb:	6a 1c                	push   0x1c
c00226cd:	e8 42 d2 fe ff       	call   c000f914 <malloc>
c00226d2:	89 07                	mov    DWORD PTR [edi],eax
c00226d4:	89 c3                	mov    ebx,eax
c00226d6:	58                   	pop    eax
c00226d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00226db:	50                   	push   eax
c00226dc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00226df:	50                   	push   eax
c00226e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226e4:	50                   	push   eax
c00226e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226e9:	50                   	push   eax
c00226ea:	56                   	push   esi
c00226eb:	e8 0d ff ff ff       	call   c00225fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00226f0:	83 c4 20             	add    esp,0x20
c00226f3:	84 c0                	test   al,al
c00226f5:	74 07                	je     c00226fe <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00226f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00226fc:	74 0b                	je     c0022709 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00226fe:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022702:	b8 01 00 00 00       	mov    eax,0x1
c0022707:	eb 3b                	jmp    c0022744 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022709:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002270d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022711:	89 03                	mov    DWORD PTR [ebx],eax
c0022713:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002271a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002271e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022725:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002272c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002272f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022736:	8a 06                	mov    al,BYTE PTR [esi]
c0022738:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002273b:	31 c0                	xor    eax,eax
c002273d:	eb 05                	jmp    c0022744 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002273f:	b8 04 00 00 00       	mov    eax,0x4
c0022744:	83 c4 10             	add    esp,0x10
c0022747:	5b                   	pop    ebx
c0022748:	5e                   	pop    esi
c0022749:	5f                   	pop    edi
c002274a:	c3                   	ret    
c002274b:	90                   	nop

c002274c <ISO9660::exists(char const*)>:
c002274c:	83 ec 28             	sub    esp,0x28
c002274f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022753:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022757:	52                   	push   edx
c0022758:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002275b:	52                   	push   edx
c002275c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022760:	52                   	push   edx
c0022761:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022765:	52                   	push   edx
c0022766:	50                   	push   eax
c0022767:	e8 91 fe ff ff       	call   c00225fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002276c:	83 c4 3c             	add    esp,0x3c
c002276f:	c3                   	ret    

c0022770 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022770:	56                   	push   esi
c0022771:	53                   	push   ebx
c0022772:	83 ec 14             	sub    esp,0x14
c0022775:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022779:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002277d:	85 db                	test   ebx,ebx
c002277f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022783:	0f 94 c2             	sete   dl
c0022786:	85 f6                	test   esi,esi
c0022788:	0f 94 c0             	sete   al
c002278b:	08 c2                	or     dl,al
c002278d:	75 68                	jne    c00227f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002278f:	85 c9                	test   ecx,ecx
c0022791:	74 64                	je     c00227f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022793:	83 ec 0c             	sub    esp,0xc
c0022796:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022799:	8d 44 24 18          	lea    eax,[esp+0x18]
c002279d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00227a3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227aa:	50                   	push   eax
c00227ab:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00227ae:	50                   	push   eax
c00227af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227b3:	50                   	push   eax
c00227b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227b8:	50                   	push   eax
c00227b9:	51                   	push   ecx
c00227ba:	e8 3e fe ff ff       	call   c00225fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227bf:	83 c4 20             	add    esp,0x20
c00227c2:	ba 01 00 00 00       	mov    edx,0x1
c00227c7:	84 c0                	test   al,al
c00227c9:	74 31                	je     c00227fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00227cf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227d6:	89 03                	mov    DWORD PTR [ebx],eax
c00227d8:	ba 00 00 00 00       	mov    edx,0x0
c00227dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227e1:	85 c0                	test   eax,eax
c00227e3:	0f 95 06             	setne  BYTE PTR [esi]
c00227e6:	74 14                	je     c00227fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227e8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00227ee:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227f5:	eb 05                	jmp    c00227fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227f7:	ba 04 00 00 00       	mov    edx,0x4
c00227fc:	83 c4 14             	add    esp,0x14
c00227ff:	89 d0                	mov    eax,edx
c0022801:	5b                   	pop    ebx
c0022802:	5e                   	pop    esi
c0022803:	c3                   	ret    

c0022804 <ISO9660::openDir(char const*, void**)>:
c0022804:	57                   	push   edi
c0022805:	56                   	push   esi
c0022806:	53                   	push   ebx
c0022807:	83 ec 10             	sub    esp,0x10
c002280a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002280e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022812:	85 ff                	test   edi,edi
c0022814:	0f 84 95 00 00 00    	je     c00228af <ISO9660::openDir(char const*, void**)+0xab>
c002281a:	85 f6                	test   esi,esi
c002281c:	0f 84 8d 00 00 00    	je     c00228af <ISO9660::openDir(char const*, void**)+0xab>
c0022822:	83 ec 0c             	sub    esp,0xc
c0022825:	6a 1c                	push   0x1c
c0022827:	e8 e8 d0 fe ff       	call   c000f914 <malloc>
c002282c:	89 07                	mov    DWORD PTR [edi],eax
c002282e:	89 c3                	mov    ebx,eax
c0022830:	59                   	pop    ecx
c0022831:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022835:	50                   	push   eax
c0022836:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022839:	50                   	push   eax
c002283a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002283e:	50                   	push   eax
c002283f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022843:	50                   	push   eax
c0022844:	56                   	push   esi
c0022845:	e8 b3 fd ff ff       	call   c00225fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002284a:	83 c4 20             	add    esp,0x20
c002284d:	84 c0                	test   al,al
c002284f:	74 07                	je     c0022858 <ISO9660::openDir(char const*, void**)+0x54>
c0022851:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022856:	75 21                	jne    c0022879 <ISO9660::openDir(char const*, void**)+0x75>
c0022858:	0f b6 c0             	movzx  eax,al
c002285b:	52                   	push   edx
c002285c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022860:	50                   	push   eax
c0022861:	68 1d d3 02 c0       	push   0xc002d31d
c0022866:	e8 60 06 ff ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c002286b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002286f:	83 c4 10             	add    esp,0x10
c0022872:	b8 01 00 00 00       	mov    eax,0x1
c0022877:	eb 3b                	jmp    c00228b4 <ISO9660::openDir(char const*, void**)+0xb0>
c0022879:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002287d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022881:	89 03                	mov    DWORD PTR [ebx],eax
c0022883:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002288a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002288e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022895:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002289c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002289f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00228a6:	8a 06                	mov    al,BYTE PTR [esi]
c00228a8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00228ab:	31 c0                	xor    eax,eax
c00228ad:	eb 05                	jmp    c00228b4 <ISO9660::openDir(char const*, void**)+0xb0>
c00228af:	b8 04 00 00 00       	mov    eax,0x4
c00228b4:	83 c4 10             	add    esp,0x10
c00228b7:	5b                   	pop    ebx
c00228b8:	5e                   	pop    esi
c00228b9:	5f                   	pop    edi
c00228ba:	c3                   	ret    
c00228bb:	90                   	nop

c00228bc <ISO9660::ISO9660()>:
c00228bc:	83 ec 0c             	sub    esp,0xc
c00228bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c3:	83 ec 0c             	sub    esp,0xc
c00228c6:	50                   	push   eax
c00228c7:	e8 0a 09 ff ff       	call   c00131d6 <Filesystem::Filesystem()>
c00228cc:	83 c4 10             	add    esp,0x10
c00228cf:	ba 40 d3 02 c0       	mov    edx,0xc002d340
c00228d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d8:	89 10                	mov    DWORD PTR [eax],edx
c00228da:	90                   	nop
c00228db:	83 c4 0c             	add    esp,0xc
c00228de:	c3                   	ret    
c00228df:	90                   	nop

c00228e0 <SoundChannel::~SoundChannel()>:
c00228e0:	83 ec 0c             	sub    esp,0xc
c00228e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00228ea:	83 ec 0c             	sub    esp,0xc
c00228ed:	50                   	push   eax
c00228ee:	e8 31 d0 fe ff       	call   c000f924 <free>
c00228f3:	83 c4 10             	add    esp,0x10
c00228f6:	90                   	nop
c00228f7:	83 c4 0c             	add    esp,0xc
c00228fa:	c3                   	ret    
c00228fb:	90                   	nop

c00228fc <SoundChannel::setSpeed(float)>:
c00228fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022900:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022904:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022907:	c3                   	ret    

c0022908 <SoundChannel::getSpeed()>:
c0022908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002290c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002290f:	c3                   	ret    

c0022910 <SoundChannel::setVolume(int)>:
c0022910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022914:	83 f8 64             	cmp    eax,0x64
c0022917:	7e 05                	jle    c002291e <SoundChannel::setVolume(int)+0xe>
c0022919:	b8 64 00 00 00       	mov    eax,0x64
c002291e:	85 c0                	test   eax,eax
c0022920:	79 02                	jns    c0022924 <SoundChannel::setVolume(int)+0x14>
c0022922:	31 c0                	xor    eax,eax
c0022924:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022928:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002292b:	c3                   	ret    

c002292c <SoundChannel::getVolume()>:
c002292c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022930:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022933:	c3                   	ret    

c0022934 <SoundChannel::pause()>:
c0022934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022938:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002293c:	c3                   	ret    
c002293d:	90                   	nop

c002293e <SoundChannel::SoundChannel(int, int, int, int)>:
c002293e:	83 ec 1c             	sub    esp,0x1c
c0022941:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022945:	e8 ea ff ff ff       	call   c0022934 <SoundChannel::pause()>
c002294a:	83 c4 04             	add    esp,0x4
c002294d:	6a 50                	push   0x50
c002294f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022953:	e8 b8 ff ff ff       	call   c0022910 <SoundChannel::setVolume(int)>
c0022958:	83 c4 08             	add    esp,0x8
c002295b:	a1 bc d3 02 c0       	mov    eax,ds:0xc002d3bc
c0022960:	50                   	push   eax
c0022961:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022965:	e8 92 ff ff ff       	call   c00228fc <SoundChannel::setSpeed(float)>
c002296a:	83 c4 08             	add    esp,0x8
c002296d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022971:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022975:	89 10                	mov    DWORD PTR [eax],edx
c0022977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002297b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002297f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022986:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002298a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002298d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022992:	75 23                	jne    c00229b7 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022998:	8b 10                	mov    edx,DWORD PTR [eax]
c002299a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002299e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229a1:	0f af c2             	imul   eax,edx
c00229a4:	85 c0                	test   eax,eax
c00229a6:	79 03                	jns    c00229ab <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00229a8:	83 c0 03             	add    eax,0x3
c00229ab:	c1 f8 02             	sar    eax,0x2
c00229ae:	05 a0 0f 00 00       	add    eax,0xfa0
c00229b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00229b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00229bf:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00229c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229c6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00229cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229d1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00229d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229dc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00229df:	c1 e0 02             	shl    eax,0x2
c00229e2:	83 ec 0c             	sub    esp,0xc
c00229e5:	50                   	push   eax
c00229e6:	e8 29 cf fe ff       	call   c000f914 <malloc>
c00229eb:	83 c4 10             	add    esp,0x10
c00229ee:	89 c2                	mov    edx,eax
c00229f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229f4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00229f7:	83 ec 04             	sub    esp,0x4
c00229fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00229fe:	50                   	push   eax
c00229ff:	6a 01                	push   0x1
c0022a01:	6a 04                	push   0x4
c0022a03:	e8 9f 61 fe ff       	call   c0008ba7 <src_new>
c0022a08:	83 c4 10             	add    esp,0x10
c0022a0b:	89 c2                	mov    edx,eax
c0022a0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a11:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a18:	85 c0                	test   eax,eax
c0022a1a:	74 10                	je     c0022a2c <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022a1c:	83 ec 0c             	sub    esp,0xc
c0022a1f:	68 a0 d3 02 c0       	push   0xc002d3a0
c0022a24:	e8 5e 7e ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0022a29:	83 c4 10             	add    esp,0x10
c0022a2c:	a0 80 31 03 c0       	mov    al,ds:0xc0033180
c0022a31:	83 f0 01             	xor    eax,0x1
c0022a34:	84 c0                	test   al,al
c0022a36:	74 57                	je     c0022a8f <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022a38:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c0022a3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022a49:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022a51:	7f 35                	jg     c0022a88 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022a53:	83 ec 0c             	sub    esp,0xc
c0022a56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a5a:	e8 70 50 00 00       	call   c0027acf <__floatsisf>
c0022a5f:	83 c4 10             	add    esp,0x10
c0022a62:	8b 15 c0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3c0
c0022a68:	83 ec 08             	sub    esp,0x8
c0022a6b:	52                   	push   edx
c0022a6c:	50                   	push   eax
c0022a6d:	e8 6f 4c 00 00       	call   c00276e1 <__mulsf3>
c0022a72:	83 c4 10             	add    esp,0x10
c0022a75:	89 c2                	mov    edx,eax
c0022a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a7b:	89 14 85 80 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd280],edx
c0022a82:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022a86:	eb c1                	jmp    c0022a49 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022a88:	c6 05 80 31 03 c0 01 	mov    BYTE PTR ds:0xc0033180,0x1
c0022a8f:	90                   	nop
c0022a90:	83 c4 1c             	add    esp,0x1c
c0022a93:	c3                   	ret    

c0022a94 <SoundChannel::play()>:
c0022a94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a98:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022a9c:	c3                   	ret    
c0022a9d:	90                   	nop

c0022a9e <SoundChannel::paused()>:
c0022a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aa2:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022aa5:	c3                   	ret    

c0022aa6 <SoundChannel::getSampleRate()>:
c0022aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aac:	c3                   	ret    
c0022aad:	90                   	nop

c0022aae <SoundChannel::getBits()>:
c0022aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ab2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ab5:	c3                   	ret    

c0022ab6 <SoundChannel::getBufferUsed()>:
c0022ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022abd:	c3                   	ret    

c0022abe <SoundChannel::getBufferSize()>:
c0022abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ac2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022ac5:	c3                   	ret    

c0022ac6 <SoundChannel::unbuffer(float*, int, int)>:
c0022ac6:	56                   	push   esi
c0022ac7:	53                   	push   ebx
c0022ac8:	83 ec 40             	sub    esp,0x40
c0022acb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022acf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022ad2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022ad6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022ad9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022add:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022ae1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022ae5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022ae9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022aed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022af1:	e8 d9 4f 00 00       	call   c0027acf <__floatsisf>
c0022af6:	5a                   	pop    edx
c0022af7:	89 c6                	mov    esi,eax
c0022af9:	ff 33                	push   DWORD PTR [ebx]
c0022afb:	e8 cf 4f 00 00       	call   c0027acf <__floatsisf>
c0022b00:	59                   	pop    ecx
c0022b01:	5a                   	pop    edx
c0022b02:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022b05:	50                   	push   eax
c0022b06:	e8 d6 4b 00 00       	call   c00276e1 <__mulsf3>
c0022b0b:	59                   	pop    ecx
c0022b0c:	5a                   	pop    edx
c0022b0d:	50                   	push   eax
c0022b0e:	56                   	push   esi
c0022b0f:	e8 90 4d 00 00       	call   c00278a4 <__divsf3>
c0022b14:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b17:	e8 83 62 00 00       	call   c0028d9f <__extendsfdf2>
c0022b1c:	59                   	pop    ecx
c0022b1d:	5e                   	pop    esi
c0022b1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022b22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022b26:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022b2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022b32:	50                   	push   eax
c0022b33:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022b36:	e8 61 5c fe ff       	call   c000879c <src_process>
c0022b3b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022b3f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022b42:	83 c4 0c             	add    esp,0xc
c0022b45:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022b48:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022b4b:	29 d0                	sub    eax,edx
c0022b4d:	c1 e0 02             	shl    eax,0x2
c0022b50:	50                   	push   eax
c0022b51:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022b54:	50                   	push   eax
c0022b55:	51                   	push   ecx
c0022b56:	e8 45 db fd ff       	call   c00006a0 <memmove>
c0022b5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022b5f:	83 c4 44             	add    esp,0x44
c0022b62:	5b                   	pop    ebx
c0022b63:	5e                   	pop    esi
c0022b64:	c3                   	ret    
c0022b65:	90                   	nop

c0022b66 <SoundChannel::buffer8(unsigned char*, int)>:
c0022b66:	55                   	push   ebp
c0022b67:	57                   	push   edi
c0022b68:	56                   	push   esi
c0022b69:	53                   	push   ebx
c0022b6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b6e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022b72:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022b75:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022b79:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022b7c:	74 7a                	je     c0022bf8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022b7e:	85 ff                	test   edi,edi
c0022b80:	7e 76                	jle    c0022bf8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022b82:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022b86:	8d 70 01             	lea    esi,[eax+0x1]
c0022b89:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022b8c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022b8f:	8b 1c 9d 80 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd280]
c0022b96:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022b99:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022b9c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022b9f:	74 5e                	je     c0022bff <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022ba1:	83 ff 01             	cmp    edi,0x1
c0022ba4:	74 4b                	je     c0022bf1 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022ba6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022baa:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022bad:	8d 70 01             	lea    esi,[eax+0x1]
c0022bb0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bb3:	8b 1c 9d 80 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd280]
c0022bba:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022bbd:	b8 02 00 00 00       	mov    eax,0x2
c0022bc2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022bc5:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022bc8:	75 23                	jne    c0022bed <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022bca:	eb 27                	jmp    c0022bf3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022bcc:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022bd1:	8d 71 01             	lea    esi,[ecx+0x1]
c0022bd4:	40                   	inc    eax
c0022bd5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bd8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022bdb:	8b 1c 9d 80 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd280]
c0022be2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022be5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022be8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022beb:	74 06                	je     c0022bf3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022bed:	39 c7                	cmp    edi,eax
c0022bef:	75 db                	jne    c0022bcc <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022bf1:	89 f8                	mov    eax,edi
c0022bf3:	5b                   	pop    ebx
c0022bf4:	5e                   	pop    esi
c0022bf5:	5f                   	pop    edi
c0022bf6:	5d                   	pop    ebp
c0022bf7:	c3                   	ret    
c0022bf8:	5b                   	pop    ebx
c0022bf9:	31 c0                	xor    eax,eax
c0022bfb:	5e                   	pop    esi
c0022bfc:	5f                   	pop    edi
c0022bfd:	5d                   	pop    ebp
c0022bfe:	c3                   	ret    
c0022bff:	b8 01 00 00 00       	mov    eax,0x1
c0022c04:	eb ed                	jmp    c0022bf3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022c06 <SoundDevice::SoundDevice(char const*)>:
c0022c06:	83 ec 1c             	sub    esp,0x1c
c0022c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c0d:	83 ec 08             	sub    esp,0x8
c0022c10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c14:	50                   	push   eax
c0022c15:	e8 d6 18 ff ff       	call   c00144f0 <Device::Device(char const*)>
c0022c1a:	83 c4 10             	add    esp,0x10
c0022c1d:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c0022c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c26:	89 10                	mov    DWORD PTR [eax],edx
c0022c28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c2c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022c36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c3a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022c44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c4c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022c51:	7f 19                	jg     c0022c6c <SoundDevice::SoundDevice(char const*)+0x66>
c0022c53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c5b:	83 c2 54             	add    edx,0x54
c0022c5e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022c66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022c6a:	eb e0                	jmp    c0022c4c <SoundDevice::SoundDevice(char const*)+0x46>
c0022c6c:	90                   	nop
c0022c6d:	83 c4 1c             	add    esp,0x1c
c0022c70:	c3                   	ret    
c0022c71:	90                   	nop

c0022c72 <SoundDevice::~SoundDevice()>:
c0022c72:	53                   	push   ebx
c0022c73:	83 ec 18             	sub    esp,0x18
c0022c76:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c0022c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c7f:	89 10                	mov    DWORD PTR [eax],edx
c0022c81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c89:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022c8e:	7f 46                	jg     c0022cd6 <SoundDevice::~SoundDevice()+0x64>
c0022c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c98:	83 c2 54             	add    edx,0x54
c0022c9b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022c9f:	85 c0                	test   eax,eax
c0022ca1:	74 2d                	je     c0022cd0 <SoundDevice::~SoundDevice()+0x5e>
c0022ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ca7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022cab:	83 c2 54             	add    edx,0x54
c0022cae:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022cb2:	85 db                	test   ebx,ebx
c0022cb4:	74 1a                	je     c0022cd0 <SoundDevice::~SoundDevice()+0x5e>
c0022cb6:	83 ec 0c             	sub    esp,0xc
c0022cb9:	53                   	push   ebx
c0022cba:	e8 21 fc ff ff       	call   c00228e0 <SoundChannel::~SoundChannel()>
c0022cbf:	83 c4 10             	add    esp,0x10
c0022cc2:	83 ec 08             	sub    esp,0x8
c0022cc5:	6a 2c                	push   0x2c
c0022cc7:	53                   	push   ebx
c0022cc8:	e8 1e 01 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0022ccd:	83 c4 10             	add    esp,0x10
c0022cd0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022cd4:	eb b3                	jmp    c0022c89 <SoundDevice::~SoundDevice()+0x17>
c0022cd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cda:	83 ec 0c             	sub    esp,0xc
c0022cdd:	50                   	push   eax
c0022cde:	e8 ef 14 ff ff       	call   c00141d2 <Device::~Device()>
c0022ce3:	83 c4 10             	add    esp,0x10
c0022ce6:	90                   	nop
c0022ce7:	83 c4 18             	add    esp,0x18
c0022cea:	5b                   	pop    ebx
c0022ceb:	c3                   	ret    

c0022cec <SoundDevice::~SoundDevice()>:
c0022cec:	83 ec 0c             	sub    esp,0xc
c0022cef:	83 ec 0c             	sub    esp,0xc
c0022cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022cf6:	e8 77 ff ff ff       	call   c0022c72 <SoundDevice::~SoundDevice()>
c0022cfb:	83 c4 10             	add    esp,0x10
c0022cfe:	83 ec 08             	sub    esp,0x8
c0022d01:	68 e4 01 00 00       	push   0x1e4
c0022d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d0a:	e8 dc 00 ff ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0022d0f:	83 c4 10             	add    esp,0x10
c0022d12:	83 c4 0c             	add    esp,0xc
c0022d15:	c3                   	ret    

c0022d16 <SoundDevice::getFreeChannelNum()>:
c0022d16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d1a:	31 c0                	xor    eax,eax
c0022d1c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022d24:	74 09                	je     c0022d2f <SoundDevice::getFreeChannelNum()+0x19>
c0022d26:	40                   	inc    eax
c0022d27:	83 f8 20             	cmp    eax,0x20
c0022d2a:	75 f0                	jne    c0022d1c <SoundDevice::getFreeChannelNum()+0x6>
c0022d2c:	83 c8 ff             	or     eax,0xffffffff
c0022d2f:	c3                   	ret    

c0022d30 <SoundDevice::addChannel(SoundChannel*)>:
c0022d30:	56                   	push   esi
c0022d31:	53                   	push   ebx
c0022d32:	51                   	push   ecx
c0022d33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022d37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022d3b:	53                   	push   ebx
c0022d3c:	e8 d5 ff ff ff       	call   c0022d16 <SoundDevice::getFreeChannelNum()>
c0022d41:	5a                   	pop    edx
c0022d42:	83 f8 ff             	cmp    eax,0xffffffff
c0022d45:	74 51                	je     c0022d98 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d47:	85 f6                	test   esi,esi
c0022d49:	74 4d                	je     c0022d98 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d4b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022d52:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022d59:	75 30                	jne    c0022d8b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022d5b:	83 ec 0c             	sub    esp,0xc
c0022d5e:	56                   	push   esi
c0022d5f:	e8 42 fd ff ff       	call   c0022aa6 <SoundChannel::getSampleRate()>
c0022d64:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022d6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0022d6d:	e8 3c fd ff ff       	call   c0022aae <SoundChannel::getBits()>
c0022d72:	83 c4 0c             	add    esp,0xc
c0022d75:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022d7b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022d7d:	50                   	push   eax
c0022d7e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022d84:	53                   	push   ebx
c0022d85:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022d88:	83 c4 10             	add    esp,0x10
c0022d8b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022d91:	b8 01 00 00 00       	mov    eax,0x1
c0022d96:	eb 03                	jmp    c0022d9b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022d98:	83 c8 ff             	or     eax,0xffffffff
c0022d9b:	5a                   	pop    edx
c0022d9c:	5b                   	pop    ebx
c0022d9d:	5e                   	pop    esi
c0022d9e:	c3                   	ret    
c0022d9f:	90                   	nop

c0022da0 <SoundDevice::removeChannel(int)>:
c0022da0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022da8:	83 fa 1f             	cmp    edx,0x1f
c0022dab:	77 23                	ja     c0022dd0 <SoundDevice::removeChannel(int)+0x30>
c0022dad:	8d 14 90             	lea    edx,[eax+edx*4]
c0022db0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022db7:	74 17                	je     c0022dd0 <SoundDevice::removeChannel(int)+0x30>
c0022db9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022dc3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022dc9:	75 05                	jne    c0022dd0 <SoundDevice::removeChannel(int)+0x30>
c0022dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dcd:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022dd0:	c3                   	ret    
c0022dd1:	90                   	nop

c0022dd2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022dd2:	57                   	push   edi
c0022dd3:	56                   	push   esi
c0022dd4:	53                   	push   ebx
c0022dd5:	31 db                	xor    ebx,ebx
c0022dd7:	83 ec 10             	sub    esp,0x10
c0022dda:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022dde:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022de2:	0f 8d cb 00 00 00    	jge    c0022eb3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022de8:	83 ec 0c             	sub    esp,0xc
c0022deb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022def:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022df2:	e8 a8 5f 00 00       	call   c0028d9f <__extendsfdf2>
c0022df7:	83 c4 10             	add    esp,0x10
c0022dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022dfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e02:	68 00 00 f0 3f       	push   0x3ff00000
c0022e07:	6a 00                	push   0x0
c0022e09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e11:	e8 15 4f 00 00       	call   c0027d2b <__adddf3>
c0022e16:	83 c4 10             	add    esp,0x10
c0022e19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e21:	68 00 00 e0 3f       	push   0x3fe00000
c0022e26:	6a 00                	push   0x0
c0022e28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e30:	e8 73 55 00 00       	call   c00283a8 <__muldf3>
c0022e35:	83 c4 10             	add    esp,0x10
c0022e38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e40:	68 00 00 60 40       	push   0x40600000
c0022e45:	6a 00                	push   0x0
c0022e47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e4f:	e8 54 55 00 00       	call   c00283a8 <__muldf3>
c0022e54:	59                   	pop    ecx
c0022e55:	5f                   	pop    edi
c0022e56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e5a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022e5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e66:	e8 10 5e 00 00       	call   c0028c7b <__truncdfsf2>
c0022e6b:	5a                   	pop    edx
c0022e6c:	89 c7                	mov    edi,eax
c0022e6e:	59                   	pop    ecx
c0022e6f:	68 00 00 fe 42       	push   0x42fe0000
c0022e74:	50                   	push   eax
c0022e75:	e8 ab 4e 00 00       	call   c0027d25 <__gesf2>
c0022e7a:	83 c4 10             	add    esp,0x10
c0022e7d:	85 c0                	test   eax,eax
c0022e7f:	78 06                	js     c0022e87 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022e81:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022e85:	eb 26                	jmp    c0022ead <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e87:	50                   	push   eax
c0022e88:	50                   	push   eax
c0022e89:	6a 00                	push   0x0
c0022e8b:	57                   	push   edi
c0022e8c:	e8 98 4e 00 00       	call   c0027d29 <__lesf2>
c0022e91:	83 c4 10             	add    esp,0x10
c0022e94:	85 c0                	test   eax,eax
c0022e96:	7f 06                	jg     c0022e9e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022e98:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022e9c:	eb 0f                	jmp    c0022ead <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e9e:	83 ec 0c             	sub    esp,0xc
c0022ea1:	57                   	push   edi
c0022ea2:	e8 95 5f 00 00       	call   c0028e3c <lrintf>
c0022ea7:	83 c4 10             	add    esp,0x10
c0022eaa:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022ead:	43                   	inc    ebx
c0022eae:	e9 2b ff ff ff       	jmp    c0022dde <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022eb3:	83 c4 10             	add    esp,0x10
c0022eb6:	5b                   	pop    ebx
c0022eb7:	5e                   	pop    esi
c0022eb8:	5f                   	pop    edi
c0022eb9:	c3                   	ret    

c0022eba <SoundDevice::getAudio(int, float*, float*)>:
c0022eba:	55                   	push   ebp
c0022ebb:	57                   	push   edi
c0022ebc:	56                   	push   esi
c0022ebd:	53                   	push   ebx
c0022ebe:	31 db                	xor    ebx,ebx
c0022ec0:	83 ec 20             	sub    esp,0x20
c0022ec3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022ec7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022ecb:	c1 e0 02             	shl    eax,0x2
c0022ece:	50                   	push   eax
c0022ecf:	6a 00                	push   0x0
c0022ed1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022ed5:	e8 a6 d8 fd ff       	call   c0000780 <memset>
c0022eda:	83 c4 10             	add    esp,0x10
c0022edd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022ee1:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022ee8:	85 c0                	test   eax,eax
c0022eea:	0f 84 d7 00 00 00    	je     c0022fc7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022ef0:	83 ec 0c             	sub    esp,0xc
c0022ef3:	50                   	push   eax
c0022ef4:	e8 a5 fb ff ff       	call   c0022a9e <SoundChannel::paused()>
c0022ef9:	83 c4 10             	add    esp,0x10
c0022efc:	84 c0                	test   al,al
c0022efe:	0f 85 c3 00 00 00    	jne    c0022fc7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f04:	83 ec 0c             	sub    esp,0xc
c0022f07:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f0e:	e8 19 fa ff ff       	call   c002292c <SoundChannel::getVolume()>
c0022f13:	83 c4 10             	add    esp,0x10
c0022f16:	85 c0                	test   eax,eax
c0022f18:	0f 84 a9 00 00 00    	je     c0022fc7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f1e:	83 ec 0c             	sub    esp,0xc
c0022f21:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f28:	e8 ff f9 ff ff       	call   c002292c <SoundChannel::getVolume()>
c0022f2d:	83 ec 0c             	sub    esp,0xc
c0022f30:	50                   	push   eax
c0022f31:	e8 99 4b 00 00       	call   c0027acf <__floatsisf>
c0022f36:	59                   	pop    ecx
c0022f37:	5d                   	pop    ebp
c0022f38:	31 ed                	xor    ebp,ebp
c0022f3a:	68 00 00 c8 42       	push   0x42c80000
c0022f3f:	50                   	push   eax
c0022f40:	e8 5f 49 00 00       	call   c00278a4 <__divsf3>
c0022f45:	83 c4 10             	add    esp,0x10
c0022f48:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f4c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022f50:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022f56:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022f5a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f61:	e8 60 fb ff ff       	call   c0022ac6 <SoundChannel::unbuffer(float*, int, int)>
c0022f66:	83 c4 20             	add    esp,0x20
c0022f69:	89 c1                	mov    ecx,eax
c0022f6b:	39 cd                	cmp    ebp,ecx
c0022f6d:	7d 52                	jge    c0022fc1 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022f73:	50                   	push   eax
c0022f74:	50                   	push   eax
c0022f75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022f79:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022f7c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022f80:	e8 5c 47 00 00       	call   c00276e1 <__mulsf3>
c0022f85:	5a                   	pop    edx
c0022f86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f8a:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022f90:	e8 3a 4b 00 00       	call   c0027acf <__floatsisf>
c0022f95:	59                   	pop    ecx
c0022f96:	5a                   	pop    edx
c0022f97:	50                   	push   eax
c0022f98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f9c:	e8 03 49 00 00       	call   c00278a4 <__divsf3>
c0022fa1:	59                   	pop    ecx
c0022fa2:	5a                   	pop    edx
c0022fa3:	50                   	push   eax
c0022fa4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022fa8:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022fab:	e8 0e 44 00 00       	call   c00273be <__addsf3>
c0022fb0:	83 c4 10             	add    esp,0x10
c0022fb3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022fb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022fbb:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022fbe:	45                   	inc    ebp
c0022fbf:	eb aa                	jmp    c0022f6b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022fc1:	39 cf                	cmp    edi,ecx
c0022fc3:	7e 02                	jle    c0022fc7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022fc5:	89 cf                	mov    edi,ecx
c0022fc7:	43                   	inc    ebx
c0022fc8:	83 fb 20             	cmp    ebx,0x20
c0022fcb:	0f 85 10 ff ff ff    	jne    c0022ee1 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022fd1:	83 c4 1c             	add    esp,0x1c
c0022fd4:	89 f8                	mov    eax,edi
c0022fd6:	5b                   	pop    ebx
c0022fd7:	5e                   	pop    esi
c0022fd8:	5f                   	pop    edi
c0022fd9:	5d                   	pop    ebp
c0022fda:	c3                   	ret    
c0022fdb:	90                   	nop

c0022fdc <PCI::open(int, int, void*)>:
c0022fdc:	83 ec 18             	sub    esp,0x18
c0022fdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022fe3:	8b 10                	mov    edx,DWORD PTR [eax]
c0022fe5:	50                   	push   eax
c0022fe6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022fe9:	31 c0                	xor    eax,eax
c0022feb:	83 c4 1c             	add    esp,0x1c
c0022fee:	c3                   	ret    
c0022fef:	90                   	nop

c0022ff0 <PCI::close(int, int, void*)>:
c0022ff0:	31 c0                	xor    eax,eax
c0022ff2:	c3                   	ret    
c0022ff3:	90                   	nop

c0022ff4 <PCI::PCI()>:
c0022ff4:	83 ec 0c             	sub    esp,0xc
c0022ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ffb:	83 ec 08             	sub    esp,0x8
c0022ffe:	68 fc d3 02 c0       	push   0xc002d3fc
c0023003:	50                   	push   eax
c0023004:	e8 63 0b ff ff       	call   c0013b6c <Bus::Bus(char const*)>
c0023009:	83 c4 10             	add    esp,0x10
c002300c:	ba 84 d4 02 c0       	mov    edx,0xc002d484
c0023011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023015:	89 10                	mov    DWORD PTR [eax],edx
c0023017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002301b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023021:	0f b6 d0             	movzx  edx,al
c0023024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023028:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002302f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023033:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023039:	0f b6 d0             	movzx  edx,al
c002303c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023040:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0023045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023049:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002304f:	8d 50 01             	lea    edx,[eax+0x1]
c0023052:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023056:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002305c:	0f b6 d0             	movzx  edx,al
c002305f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023063:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023067:	83 c9 c0             	or     ecx,0xffffffc0
c002306a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002306e:	90                   	nop
c002306f:	83 c4 0c             	add    esp,0xc
c0023072:	c3                   	ret    
c0023073:	90                   	nop

c0023074 <PCI::readBAR8(unsigned int, int)>:
c0023074:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023078:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002307c:	f6 c2 01             	test   dl,0x1
c002307f:	74 07                	je     c0023088 <PCI::readBAR8(unsigned int, int)+0x14>
c0023081:	83 e2 fc             	and    edx,0xfffffffc
c0023084:	01 c2                	add    edx,eax
c0023086:	ec                   	in     al,dx
c0023087:	c3                   	ret    
c0023088:	83 e2 f0             	and    edx,0xfffffff0
c002308b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002308e:	c3                   	ret    
c002308f:	90                   	nop

c0023090 <PCI::readBAR16(unsigned int, int)>:
c0023090:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023098:	f6 c2 01             	test   dl,0x1
c002309b:	74 08                	je     c00230a5 <PCI::readBAR16(unsigned int, int)+0x15>
c002309d:	83 e2 fc             	and    edx,0xfffffffc
c00230a0:	01 c2                	add    edx,eax
c00230a2:	66 ed                	in     ax,dx
c00230a4:	c3                   	ret    
c00230a5:	83 e2 f0             	and    edx,0xfffffff0
c00230a8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00230ac:	c3                   	ret    
c00230ad:	90                   	nop

c00230ae <PCI::readBAR32(unsigned int, int)>:
c00230ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230b6:	f6 c2 01             	test   dl,0x1
c00230b9:	74 07                	je     c00230c2 <PCI::readBAR32(unsigned int, int)+0x14>
c00230bb:	83 e2 fc             	and    edx,0xfffffffc
c00230be:	01 c2                	add    edx,eax
c00230c0:	ed                   	in     eax,dx
c00230c1:	c3                   	ret    
c00230c2:	83 e2 f0             	and    edx,0xfffffff0
c00230c5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00230c8:	c3                   	ret    
c00230c9:	90                   	nop

c00230ca <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00230ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230d6:	f6 c2 01             	test   dl,0x1
c00230d9:	74 07                	je     c00230e2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00230db:	83 e2 fc             	and    edx,0xfffffffc
c00230de:	01 ca                	add    edx,ecx
c00230e0:	ee                   	out    dx,al
c00230e1:	c3                   	ret    
c00230e2:	83 e2 f0             	and    edx,0xfffffff0
c00230e5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00230e8:	c3                   	ret    
c00230e9:	90                   	nop

c00230ea <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00230ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230f6:	f6 c2 01             	test   dl,0x1
c00230f9:	74 08                	je     c0023103 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00230fb:	83 e2 fc             	and    edx,0xfffffffc
c00230fe:	01 ca                	add    edx,ecx
c0023100:	66 ef                	out    dx,ax
c0023102:	c3                   	ret    
c0023103:	83 e2 f0             	and    edx,0xfffffff0
c0023106:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002310a:	c3                   	ret    
c002310b:	90                   	nop

c002310c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002310c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023114:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023118:	f6 c2 01             	test   dl,0x1
c002311b:	74 07                	je     c0023124 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002311d:	83 e2 fc             	and    edx,0xfffffffc
c0023120:	01 ca                	add    edx,ecx
c0023122:	ef                   	out    dx,eax
c0023123:	c3                   	ret    
c0023124:	83 e2 f0             	and    edx,0xfffffff0
c0023127:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002312a:	c3                   	ret    
c002312b:	90                   	nop

c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002312c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023130:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023135:	89 ca                	mov    edx,ecx
c0023137:	c1 e0 10             	shl    eax,0x10
c002313a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023140:	09 d0                	or     eax,edx
c0023142:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0023147:	c1 e2 08             	shl    edx,0x8
c002314a:	09 d0                	or     eax,edx
c002314c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023151:	c1 e2 0b             	shl    edx,0xb
c0023154:	09 d0                	or     eax,edx
c0023156:	ba f8 0c 00 00       	mov    edx,0xcf8
c002315b:	0d 00 00 00 80       	or     eax,0x80000000
c0023160:	ef                   	out    dx,eax
c0023161:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023166:	ed                   	in     eax,dx
c0023167:	83 e1 02             	and    ecx,0x2
c002316a:	0f b6 c9             	movzx  ecx,cl
c002316d:	c1 e1 03             	shl    ecx,0x3
c0023170:	d3 e8                	shr    eax,cl
c0023172:	c3                   	ret    
c0023173:	90                   	nop

c0023174 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0023174:	6a 00                	push   0x0
c0023176:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002317b:	50                   	push   eax
c002317c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023181:	50                   	push   eax
c0023182:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023187:	50                   	push   eax
c0023188:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002318c:	e8 9b ff ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023191:	83 c4 14             	add    esp,0x14
c0023194:	c3                   	ret    
c0023195:	90                   	nop

c0023196 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0023196:	6a 0e                	push   0xe
c0023198:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002319d:	50                   	push   eax
c002319e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231a3:	50                   	push   eax
c00231a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231a9:	50                   	push   eax
c00231aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231ae:	e8 79 ff ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231b3:	83 c4 14             	add    esp,0x14
c00231b6:	0f b6 c0             	movzx  eax,al
c00231b9:	c3                   	ret    

c00231ba <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00231ba:	55                   	push   ebp
c00231bb:	57                   	push   edi
c00231bc:	56                   	push   esi
c00231bd:	53                   	push   ebx
c00231be:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00231c3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00231c8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00231cd:	6a 0a                	push   0xa
c00231cf:	56                   	push   esi
c00231d0:	55                   	push   ebp
c00231d1:	57                   	push   edi
c00231d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00231d6:	e8 51 ff ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231db:	6a 0a                	push   0xa
c00231dd:	89 c3                	mov    ebx,eax
c00231df:	56                   	push   esi
c00231e0:	0f b6 db             	movzx  ebx,bl
c00231e3:	55                   	push   ebp
c00231e4:	57                   	push   edi
c00231e5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00231e9:	e8 3e ff ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231ee:	83 c4 28             	add    esp,0x28
c00231f1:	25 00 ff 00 00       	and    eax,0xff00
c00231f6:	09 d8                	or     eax,ebx
c00231f8:	5b                   	pop    ebx
c00231f9:	5e                   	pop    esi
c00231fa:	5f                   	pop    edi
c00231fb:	5d                   	pop    ebp
c00231fc:	c3                   	ret    
c00231fd:	90                   	nop

c00231fe <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00231fe:	6a 08                	push   0x8
c0023200:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023205:	50                   	push   eax
c0023206:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002320b:	50                   	push   eax
c002320c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023211:	50                   	push   eax
c0023212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023216:	e8 11 ff ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002321b:	83 c4 14             	add    esp,0x14
c002321e:	0f b6 c4             	movzx  eax,ah
c0023221:	c3                   	ret    

c0023222 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023222:	6a 08                	push   0x8
c0023224:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023229:	50                   	push   eax
c002322a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002322f:	50                   	push   eax
c0023230:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023235:	50                   	push   eax
c0023236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002323a:	e8 ed fe ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002323f:	83 c4 14             	add    esp,0x14
c0023242:	c3                   	ret    
c0023243:	90                   	nop

c0023244 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023244:	6a 3c                	push   0x3c
c0023246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002324b:	50                   	push   eax
c002324c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023251:	50                   	push   eax
c0023252:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023257:	50                   	push   eax
c0023258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002325c:	e8 cb fe ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023261:	83 c4 14             	add    esp,0x14
c0023264:	c3                   	ret    
c0023265:	90                   	nop

c0023266 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0023266:	6a 18                	push   0x18
c0023268:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002326d:	50                   	push   eax
c002326e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023273:	50                   	push   eax
c0023274:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023279:	50                   	push   eax
c002327a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002327e:	e8 a9 fe ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023283:	83 c4 14             	add    esp,0x14
c0023286:	0f b6 c4             	movzx  eax,ah
c0023289:	c3                   	ret    

c002328a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002328a:	55                   	push   ebp
c002328b:	57                   	push   edi
c002328c:	56                   	push   esi
c002328d:	53                   	push   ebx
c002328e:	50                   	push   eax
c002328f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0023293:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0023298:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002329d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00232a2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00232a9:	8d 43 12             	lea    eax,[ebx+0x12]
c00232ac:	83 c3 10             	add    ebx,0x10
c00232af:	0f b6 c0             	movzx  eax,al
c00232b2:	0f b6 db             	movzx  ebx,bl
c00232b5:	50                   	push   eax
c00232b6:	51                   	push   ecx
c00232b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232bb:	57                   	push   edi
c00232bc:	55                   	push   ebp
c00232bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00232c1:	e8 66 fe ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232c6:	53                   	push   ebx
c00232c7:	89 c6                	mov    esi,eax
c00232c9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00232cd:	c1 e6 10             	shl    esi,0x10
c00232d0:	51                   	push   ecx
c00232d1:	57                   	push   edi
c00232d2:	55                   	push   ebp
c00232d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00232d7:	e8 50 fe ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232dc:	83 c4 2c             	add    esp,0x2c
c00232df:	0f b7 c0             	movzx  eax,ax
c00232e2:	5b                   	pop    ebx
c00232e3:	09 f0                	or     eax,esi
c00232e5:	5e                   	pop    esi
c00232e6:	5f                   	pop    edi
c00232e7:	5d                   	pop    ebp
c00232e8:	c3                   	ret    
c00232e9:	90                   	nop

c00232ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00232ea:	53                   	push   ebx
c00232eb:	ba f8 0c 00 00       	mov    edx,0xcf8
c00232f0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00232f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232f9:	c1 e1 10             	shl    ecx,0x10
c00232fc:	25 fc 00 00 00       	and    eax,0xfc
c0023301:	09 c1                	or     ecx,eax
c0023303:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023308:	c1 e0 08             	shl    eax,0x8
c002330b:	09 c1                	or     ecx,eax
c002330d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023312:	c1 e0 0b             	shl    eax,0xb
c0023315:	09 c1                	or     ecx,eax
c0023317:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002331d:	89 c8                	mov    eax,ecx
c002331f:	ef                   	out    dx,eax
c0023320:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023325:	ed                   	in     eax,dx
c0023326:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002332b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023330:	74 0a                	je     c002333c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023332:	0f b7 d8             	movzx  ebx,ax
c0023335:	89 d0                	mov    eax,edx
c0023337:	c1 e0 10             	shl    eax,0x10
c002333a:	eb 05                	jmp    c0023341 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002333c:	66 31 c0             	xor    ax,ax
c002333f:	89 d3                	mov    ebx,edx
c0023341:	09 c3                	or     ebx,eax
c0023343:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023348:	89 c8                	mov    eax,ecx
c002334a:	ef                   	out    dx,eax
c002334b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023350:	89 d8                	mov    eax,ebx
c0023352:	ef                   	out    dx,eax
c0023353:	5b                   	pop    ebx
c0023354:	c3                   	ret    
c0023355:	90                   	nop

c0023356 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c0023356:	31 c0                	xor    eax,eax
c0023358:	c3                   	ret    
c0023359:	90                   	nop

c002335a <PCI::checkBus(unsigned char)>:
c002335a:	56                   	push   esi
c002335b:	53                   	push   ebx
c002335c:	31 db                	xor    ebx,ebx
c002335e:	51                   	push   ecx
c002335f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023364:	52                   	push   edx
c0023365:	53                   	push   ebx
c0023366:	43                   	inc    ebx
c0023367:	56                   	push   esi
c0023368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002336c:	e8 41 03 00 00       	call   c00236b2 <PCI::checkDevice(unsigned char, unsigned char)>
c0023371:	83 c4 10             	add    esp,0x10
c0023374:	83 fb 20             	cmp    ebx,0x20
c0023377:	75 eb                	jne    c0023364 <PCI::checkBus(unsigned char)+0xa>
c0023379:	58                   	pop    eax
c002337a:	5b                   	pop    ebx
c002337b:	5e                   	pop    esi
c002337c:	c3                   	ret    
c002337d:	90                   	nop

c002337e <PCI::foundDevice(PCIDeviceInfo)>:
c002337e:	55                   	push   ebp
c002337f:	57                   	push   edi
c0023380:	56                   	push   esi
c0023381:	53                   	push   ebx
c0023382:	83 ec 1c             	sub    esp,0x1c
c0023385:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023389:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002338f:	0f 84 68 01 00 00    	je     c00234fd <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0023395:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023399:	66 81 f9 06 04       	cmp    cx,0x406
c002339e:	75 2c                	jne    c00233cc <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00233a0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00233a5:	50                   	push   eax
c00233a6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00233ab:	50                   	push   eax
c00233ac:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00233b1:	50                   	push   eax
c00233b2:	56                   	push   esi
c00233b3:	e8 ae fe ff ff       	call   c0023266 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00233b8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00233bc:	0f b6 c0             	movzx  eax,al
c00233bf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00233c3:	83 c4 2c             	add    esp,0x2c
c00233c6:	5b                   	pop    ebx
c00233c7:	5e                   	pop    esi
c00233c8:	5f                   	pop    edi
c00233c9:	5d                   	pop    ebp
c00233ca:	eb 8e                	jmp    c002335a <PCI::checkBus(unsigned char)>
c00233cc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00233d0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00233d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00233da:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00233de:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00233e2:	88 d3                	mov    bl,dl
c00233e4:	85 c0                	test   eax,eax
c00233e6:	74 33                	je     c002341b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00233e8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00233eb:	85 d2                	test   edx,edx
c00233ed:	74 28                	je     c0023417 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00233ef:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00233f5:	31 ef                	xor    edi,ebp
c00233f7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00233fd:	75 18                	jne    c0023417 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00233ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023403:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023409:	75 0c                	jne    c0023417 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002340b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023411:	0f 84 e6 00 00 00    	je     c00234fd <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0023417:	8b 00                	mov    eax,DWORD PTR [eax]
c0023419:	eb c9                	jmp    c00233e4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002341b:	66 81 f9 01 06       	cmp    cx,0x601
c0023420:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023424:	75 19                	jne    c002343f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023426:	83 ec 0c             	sub    esp,0xc
c0023429:	68 64 01 00 00       	push   0x164
c002342e:	e8 e1 c4 fe ff       	call   c000f914 <malloc>
c0023433:	89 c5                	mov    ebp,eax
c0023435:	89 04 24             	mov    DWORD PTR [esp],eax
c0023438:	e8 ab 0f 00 00       	call   c00243e8 <SATABus::SATABus()>
c002343d:	eb 1e                	jmp    c002345d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002343f:	66 81 f9 01 01       	cmp    cx,0x101
c0023444:	75 60                	jne    c00234a6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023446:	83 ec 0c             	sub    esp,0xc
c0023449:	68 70 02 00 00       	push   0x270
c002344e:	e8 c1 c4 fe ff       	call   c000f914 <malloc>
c0023453:	89 c5                	mov    ebp,eax
c0023455:	89 04 24             	mov    DWORD PTR [esp],eax
c0023458:	e8 19 03 00 00       	call   c0023776 <IDE::IDE()>
c002345d:	58                   	pop    eax
c002345e:	5a                   	pop    edx
c002345f:	55                   	push   ebp
c0023460:	56                   	push   esi
c0023461:	e8 9a 0e ff ff       	call   c0014300 <Device::addChild(Device*)>
c0023466:	83 ec 1c             	sub    esp,0x1c
c0023469:	b9 09 00 00 00       	mov    ecx,0x9
c002346e:	fc                   	cld    
c002346f:	89 e7                	mov    edi,esp
c0023471:	89 de                	mov    esi,ebx
c0023473:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023475:	55                   	push   ebp
c0023476:	e8 8f 0d ff ff       	call   c001420a <Device::preOpenPCI(PCIDeviceInfo)>
c002347b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002347e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023482:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002348a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023492:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002349a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002349d:	83 c4 4c             	add    esp,0x4c
c00234a0:	5b                   	pop    ebx
c00234a1:	5e                   	pop    esi
c00234a2:	5f                   	pop    edi
c00234a3:	5d                   	pop    ebp
c00234a4:	ff e0                	jmp    eax
c00234a6:	50                   	push   eax
c00234a7:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00234ac:	50                   	push   eax
c00234ad:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00234b2:	50                   	push   eax
c00234b3:	68 04 d4 02 c0       	push   0xc002d404
c00234b8:	e8 0e fa fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00234bd:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c00234c4:	e8 4b c4 fe ff       	call   c000f914 <malloc>
c00234c9:	5a                   	pop    edx
c00234ca:	89 c5                	mov    ebp,eax
c00234cc:	59                   	pop    ecx
c00234cd:	68 20 d4 02 c0       	push   0xc002d420
c00234d2:	50                   	push   eax
c00234d3:	e8 1e 11 ff ff       	call   c00145f6 <DriverlessDevice::DriverlessDevice(char const*)>
c00234d8:	5f                   	pop    edi
c00234d9:	58                   	pop    eax
c00234da:	55                   	push   ebp
c00234db:	56                   	push   esi
c00234dc:	e8 1f 0e ff ff       	call   c0014300 <Device::addChild(Device*)>
c00234e1:	b9 09 00 00 00       	mov    ecx,0x9
c00234e6:	fc                   	cld    
c00234e7:	89 df                	mov    edi,ebx
c00234e9:	89 de                	mov    esi,ebx
c00234eb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00234ed:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00234f1:	83 c4 2c             	add    esp,0x2c
c00234f4:	5b                   	pop    ebx
c00234f5:	5e                   	pop    esi
c00234f6:	5f                   	pop    edi
c00234f7:	5d                   	pop    ebp
c00234f8:	e9 0d 0d ff ff       	jmp    c001420a <Device::preOpenPCI(PCIDeviceInfo)>
c00234fd:	83 c4 1c             	add    esp,0x1c
c0023500:	5b                   	pop    ebx
c0023501:	5e                   	pop    esi
c0023502:	5f                   	pop    edi
c0023503:	5d                   	pop    ebp
c0023504:	c3                   	ret    
c0023505:	90                   	nop

c0023506 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023506:	55                   	push   ebp
c0023507:	57                   	push   edi
c0023508:	56                   	push   esi
c0023509:	53                   	push   ebx
c002350a:	83 ec 5c             	sub    esp,0x5c
c002350d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023511:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023515:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023519:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002351e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023522:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0023526:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002352b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002352f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0023534:	6a 0c                	push   0xc
c0023536:	55                   	push   ebp
c0023537:	53                   	push   ebx
c0023538:	57                   	push   edi
c0023539:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023540:	e8 e7 fb ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023545:	55                   	push   ebp
c0023546:	53                   	push   ebx
c0023547:	57                   	push   edi
c0023548:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002354f:	e8 66 fc ff ff       	call   c00231ba <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023554:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0023559:	83 c4 24             	add    esp,0x24
c002355c:	55                   	push   ebp
c002355d:	53                   	push   ebx
c002355e:	57                   	push   edi
c002355f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023563:	e8 dc fc ff ff       	call   c0023244 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023568:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002356c:	6a 3c                	push   0x3c
c002356e:	55                   	push   ebp
c002356f:	53                   	push   ebx
c0023570:	57                   	push   edi
c0023571:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023578:	e8 af fb ff ff       	call   c002312c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002357d:	0f b6 c4             	movzx  eax,ah
c0023580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023584:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023588:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002358c:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0023591:	83 c4 24             	add    esp,0x24
c0023594:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002359a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00235a1:	74 6c                	je     c002360f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235a3:	31 f6                	xor    esi,esi
c00235a5:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c00235ab:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00235b1:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00235b7:	7e 56                	jle    c002360f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235b9:	8d 14 f2             	lea    edx,[edx+esi*8]
c00235bc:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00235c3:	39 cb                	cmp    ebx,ecx
c00235c5:	75 45                	jne    c002360c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00235c7:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00235ce:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00235d2:	75 38                	jne    c002360c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00235d4:	83 ec 0c             	sub    esp,0xc
c00235d7:	68 3a d4 02 c0       	push   0xc002d43a
c00235dc:	e8 ea f8 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00235e1:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c00235e7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00235ed:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00235f5:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00235f9:	52                   	push   edx
c00235fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00235fe:	53                   	push   ebx
c00235ff:	68 5f d4 02 c0       	push   0xc002d45f
c0023604:	e8 c2 f8 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0023609:	83 c4 20             	add    esp,0x20
c002360c:	46                   	inc    esi
c002360d:	eb 96                	jmp    c00235a5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002360f:	31 d2                	xor    edx,edx
c0023611:	83 ec 0c             	sub    esp,0xc
c0023614:	55                   	push   ebp
c0023615:	53                   	push   ebx
c0023616:	57                   	push   edi
c0023617:	52                   	push   edx
c0023618:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002361c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023623:	e8 62 fc ff ff       	call   c002328a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023628:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002362c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023630:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023634:	42                   	inc    edx
c0023635:	83 c4 20             	add    esp,0x20
c0023638:	83 fa 06             	cmp    edx,0x6
c002363b:	75 d4                	jne    c0023611 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002363d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023641:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023645:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023649:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002364d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023651:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023655:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002365a:	86 e0                	xchg   al,ah
c002365c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023661:	55                   	push   ebp
c0023662:	53                   	push   ebx
c0023663:	57                   	push   edi
c0023664:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023668:	e8 91 fb ff ff       	call   c00231fe <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002366d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023671:	55                   	push   ebp
c0023672:	53                   	push   ebx
c0023673:	57                   	push   edi
c0023674:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002367b:	e8 f4 fa ff ff       	call   c0023174 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023680:	83 ec 0c             	sub    esp,0xc
c0023683:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023688:	b9 09 00 00 00       	mov    ecx,0x9
c002368d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023691:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023695:	fc                   	cld    
c0023696:	89 e7                	mov    edi,esp
c0023698:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002369a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00236a1:	e8 d8 fc ff ff       	call   c002337e <PCI::foundDevice(PCIDeviceInfo)>
c00236a6:	81 c4 8c 00 00 00    	add    esp,0x8c
c00236ac:	5b                   	pop    ebx
c00236ad:	5e                   	pop    esi
c00236ae:	5f                   	pop    edi
c00236af:	5d                   	pop    ebp
c00236b0:	c3                   	ret    
c00236b1:	90                   	nop

c00236b2 <PCI::checkDevice(unsigned char, unsigned char)>:
c00236b2:	55                   	push   ebp
c00236b3:	57                   	push   edi
c00236b4:	56                   	push   esi
c00236b5:	53                   	push   ebx
c00236b6:	83 ec 0c             	sub    esp,0xc
c00236b9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00236bd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00236c2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00236c7:	6a 00                	push   0x0
c00236c9:	56                   	push   esi
c00236ca:	57                   	push   edi
c00236cb:	55                   	push   ebp
c00236cc:	e8 a3 fa ff ff       	call   c0023174 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236d1:	6a 00                	push   0x0
c00236d3:	56                   	push   esi
c00236d4:	57                   	push   edi
c00236d5:	55                   	push   ebp
c00236d6:	e8 2b fe ff ff       	call   c0023506 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00236db:	83 c4 20             	add    esp,0x20
c00236de:	6a 00                	push   0x0
c00236e0:	56                   	push   esi
c00236e1:	57                   	push   edi
c00236e2:	55                   	push   ebp
c00236e3:	e8 ae fa ff ff       	call   c0023196 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00236e8:	83 c4 10             	add    esp,0x10
c00236eb:	84 c0                	test   al,al
c00236ed:	79 27                	jns    c0023716 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00236ef:	bb 01 00 00 00       	mov    ebx,0x1
c00236f4:	53                   	push   ebx
c00236f5:	56                   	push   esi
c00236f6:	57                   	push   edi
c00236f7:	55                   	push   ebp
c00236f8:	e8 77 fa ff ff       	call   c0023174 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236fd:	83 c4 10             	add    esp,0x10
c0023700:	66 40                	inc    ax
c0023702:	74 0c                	je     c0023710 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023704:	53                   	push   ebx
c0023705:	56                   	push   esi
c0023706:	57                   	push   edi
c0023707:	55                   	push   ebp
c0023708:	e8 f9 fd ff ff       	call   c0023506 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002370d:	83 c4 10             	add    esp,0x10
c0023710:	43                   	inc    ebx
c0023711:	83 fb 08             	cmp    ebx,0x8
c0023714:	75 de                	jne    c00236f4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023716:	83 c4 0c             	add    esp,0xc
c0023719:	5b                   	pop    ebx
c002371a:	5e                   	pop    esi
c002371b:	5f                   	pop    edi
c002371c:	5d                   	pop    ebp
c002371d:	c3                   	ret    

c002371e <PCI::detect()>:
c002371e:	56                   	push   esi
c002371f:	53                   	push   ebx
c0023720:	53                   	push   ebx
c0023721:	31 db                	xor    ebx,ebx
c0023723:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023727:	6a 00                	push   0x0
c0023729:	6a 00                	push   0x0
c002372b:	6a 00                	push   0x0
c002372d:	56                   	push   esi
c002372e:	e8 63 fa ff ff       	call   c0023196 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023733:	83 c4 10             	add    esp,0x10
c0023736:	a8 80                	test   al,0x80
c0023738:	75 21                	jne    c002375b <PCI::detect()+0x3d>
c002373a:	51                   	push   ecx
c002373b:	51                   	push   ecx
c002373c:	6a 00                	push   0x0
c002373e:	56                   	push   esi
c002373f:	e8 16 fc ff ff       	call   c002335a <PCI::checkBus(unsigned char)>
c0023744:	83 c4 10             	add    esp,0x10
c0023747:	eb 24                	jmp    c002376d <PCI::detect()+0x4f>
c0023749:	52                   	push   edx
c002374a:	52                   	push   edx
c002374b:	53                   	push   ebx
c002374c:	43                   	inc    ebx
c002374d:	56                   	push   esi
c002374e:	e8 07 fc ff ff       	call   c002335a <PCI::checkBus(unsigned char)>
c0023753:	83 c4 10             	add    esp,0x10
c0023756:	83 fb 08             	cmp    ebx,0x8
c0023759:	74 12                	je     c002376d <PCI::detect()+0x4f>
c002375b:	53                   	push   ebx
c002375c:	6a 00                	push   0x0
c002375e:	6a 00                	push   0x0
c0023760:	56                   	push   esi
c0023761:	e8 0e fa ff ff       	call   c0023174 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023766:	83 c4 10             	add    esp,0x10
c0023769:	66 40                	inc    ax
c002376b:	74 dc                	je     c0023749 <PCI::detect()+0x2b>
c002376d:	58                   	pop    eax
c002376e:	5b                   	pop    ebx
c002376f:	5e                   	pop    esi
c0023770:	c3                   	ret    
c0023771:	90                   	nop

c0023772 <IDE::close(int, int, void*)>:
c0023772:	83 c8 ff             	or     eax,0xffffffff
c0023775:	c3                   	ret    

c0023776 <IDE::IDE()>:
c0023776:	83 ec 0c             	sub    esp,0xc
c0023779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002377d:	83 ec 08             	sub    esp,0x8
c0023780:	68 a8 d4 02 c0       	push   0xc002d4a8
c0023785:	50                   	push   eax
c0023786:	e8 0f 0f ff ff       	call   c001469a <HardDiskController::HardDiskController(char const*)>
c002378b:	83 c4 10             	add    esp,0x10
c002378e:	ba e8 d6 02 c0       	mov    edx,0xc002d6e8
c0023793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023797:	89 10                	mov    DWORD PTR [eax],edx
c0023799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002379d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00237a4:	90                   	nop
c00237a5:	83 c4 0c             	add    esp,0xc
c00237a8:	c3                   	ret    
c00237a9:	90                   	nop

c00237aa <IDE::prepareInterrupt(unsigned char)>:
c00237aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00237af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00237b3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00237bb:	c3                   	ret    

c00237bc <selectDrive(unsigned char, unsigned char)>:
c00237bc:	c3                   	ret    
c00237bd:	90                   	nop

c00237be <IDE::getBase(unsigned char)>:
c00237be:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00237c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237c7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00237cf:	c3                   	ret    

c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00237d0:	55                   	push   ebp
c00237d1:	57                   	push   edi
c00237d2:	56                   	push   esi
c00237d3:	53                   	push   ebx
c00237d4:	83 ec 1c             	sub    esp,0x1c
c00237d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00237db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00237df:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00237e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00237e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00237ea:	80 f9 03             	cmp    cl,0x3
c00237ed:	77 51                	ja     c0023840 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00237ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00237f3:	0f b6 f2             	movzx  esi,dl
c00237f6:	0f b6 db             	movzx  ebx,bl
c00237f9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00237fc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023800:	83 ca 80             	or     edx,0xffffff80
c0023803:	0f b6 d2             	movzx  edx,dl
c0023806:	52                   	push   edx
c0023807:	6a 0c                	push   0xc
c0023809:	56                   	push   esi
c002380a:	57                   	push   edi
c002380b:	e8 c0 ff ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023810:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023815:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023819:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002381d:	ee                   	out    dx,al
c002381e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023823:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023827:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002382b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002382f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023837:	83 c4 2c             	add    esp,0x2c
c002383a:	5b                   	pop    ebx
c002383b:	5e                   	pop    esi
c002383c:	5f                   	pop    edi
c002383d:	5d                   	pop    ebp
c002383e:	eb 90                	jmp    c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023840:	80 fb 07             	cmp    bl,0x7
c0023843:	77 12                	ja     c0023857 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023845:	0f b6 d2             	movzx  edx,dl
c0023848:	0f b6 db             	movzx  ebx,bl
c002384b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023853:	89 da                	mov    edx,ebx
c0023855:	eb 2f                	jmp    c0023886 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023857:	80 fb 0d             	cmp    bl,0xd
c002385a:	77 13                	ja     c002386f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002385c:	0f b6 d2             	movzx  edx,dl
c002385f:	0f b6 db             	movzx  ebx,bl
c0023862:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023869:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002386d:	eb 17                	jmp    c0023886 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002386f:	80 fb 15             	cmp    bl,0x15
c0023872:	77 13                	ja     c0023887 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023874:	0f b6 d2             	movzx  edx,dl
c0023877:	0f b6 db             	movzx  ebx,bl
c002387a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023882:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023886:	ee                   	out    dx,al
c0023887:	83 c4 1c             	add    esp,0x1c
c002388a:	5b                   	pop    ebx
c002388b:	5e                   	pop    esi
c002388c:	5f                   	pop    edi
c002388d:	5d                   	pop    ebp
c002388e:	c3                   	ret    
c002388f:	90                   	nop

c0023890 <IDE::read(unsigned char, unsigned char)>:
c0023890:	55                   	push   ebp
c0023891:	57                   	push   edi
c0023892:	56                   	push   esi
c0023893:	53                   	push   ebx
c0023894:	83 ec 1c             	sub    esp,0x1c
c0023897:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002389b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002389f:	8d 43 f8             	lea    eax,[ebx-0x8]
c00238a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238a6:	3c 03                	cmp    al,0x3
c00238a8:	77 43                	ja     c00238ed <IDE::read(unsigned char, unsigned char)+0x5d>
c00238aa:	0f b6 f2             	movzx  esi,dl
c00238ad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238b0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00238b4:	83 c8 80             	or     eax,0xffffff80
c00238b7:	0f b6 c0             	movzx  eax,al
c00238ba:	50                   	push   eax
c00238bb:	6a 0c                	push   0xc
c00238bd:	56                   	push   esi
c00238be:	57                   	push   edi
c00238bf:	e8 0c ff ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238c4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00238c9:	0f b6 c3             	movzx  eax,bl
c00238cc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00238d0:	ec                   	in     al,dx
c00238d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238d5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00238da:	52                   	push   edx
c00238db:	6a 0c                	push   0xc
c00238dd:	56                   	push   esi
c00238de:	57                   	push   edi
c00238df:	e8 ec fe ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238e4:	83 c4 20             	add    esp,0x20
c00238e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00238eb:	eb 49                	jmp    c0023936 <IDE::read(unsigned char, unsigned char)+0xa6>
c00238ed:	80 fb 07             	cmp    bl,0x7
c00238f0:	77 12                	ja     c0023904 <IDE::read(unsigned char, unsigned char)+0x74>
c00238f2:	0f b6 d2             	movzx  edx,dl
c00238f5:	0f b6 c3             	movzx  eax,bl
c00238f8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023900:	89 c2                	mov    edx,eax
c0023902:	eb 31                	jmp    c0023935 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023904:	80 fb 0d             	cmp    bl,0xd
c0023907:	77 13                	ja     c002391c <IDE::read(unsigned char, unsigned char)+0x8c>
c0023909:	0f b6 d2             	movzx  edx,dl
c002390c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023913:	0f b6 d3             	movzx  edx,bl
c0023916:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002391a:	eb 19                	jmp    c0023935 <IDE::read(unsigned char, unsigned char)+0xa5>
c002391c:	31 c0                	xor    eax,eax
c002391e:	80 fb 15             	cmp    bl,0x15
c0023921:	77 13                	ja     c0023936 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023923:	0f b6 d2             	movzx  edx,dl
c0023926:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002392e:	0f b6 d3             	movzx  edx,bl
c0023931:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023935:	ec                   	in     al,dx
c0023936:	83 c4 1c             	add    esp,0x1c
c0023939:	5b                   	pop    ebx
c002393a:	5e                   	pop    esi
c002393b:	5f                   	pop    edi
c002393c:	5d                   	pop    ebp
c002393d:	c3                   	ret    

c002393e <IDE::waitInterrupt(unsigned char)>:
c002393e:	55                   	push   ebp
c002393f:	57                   	push   edi
c0023940:	56                   	push   esi
c0023941:	53                   	push   ebx
c0023942:	31 db                	xor    ebx,ebx
c0023944:	83 ec 0c             	sub    esp,0xc
c0023947:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002394b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023950:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023958:	89 e8                	mov    eax,ebp
c002395a:	84 c0                	test   al,al
c002395c:	75 34                	jne    c0023992 <IDE::waitInterrupt(unsigned char)+0x54>
c002395e:	52                   	push   edx
c002395f:	6a 0c                	push   0xc
c0023961:	56                   	push   esi
c0023962:	57                   	push   edi
c0023963:	e8 28 ff ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023968:	83 c4 10             	add    esp,0x10
c002396b:	a8 01                	test   al,0x1
c002396d:	75 2b                	jne    c002399a <IDE::waitInterrupt(unsigned char)+0x5c>
c002396f:	f6 c3 04             	test   bl,0x4
c0023972:	75 16                	jne    c002398a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023974:	83 fb 32             	cmp    ebx,0x32
c0023977:	7e 11                	jle    c002398a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023979:	50                   	push   eax
c002397a:	50                   	push   eax
c002397b:	6a 00                	push   0x0
c002397d:	68 80 96 98 00       	push   0x989680
c0023982:	e8 fa ad ff ff       	call   c001e781 <nanoSleep(unsigned long long)>
c0023987:	83 c4 10             	add    esp,0x10
c002398a:	83 fb 3c             	cmp    ebx,0x3c
c002398d:	74 0b                	je     c002399a <IDE::waitInterrupt(unsigned char)+0x5c>
c002398f:	43                   	inc    ebx
c0023990:	eb be                	jmp    c0023950 <IDE::waitInterrupt(unsigned char)+0x12>
c0023992:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002399a:	83 c4 0c             	add    esp,0xc
c002399d:	89 e8                	mov    eax,ebp
c002399f:	5b                   	pop    ebx
c00239a0:	5e                   	pop    esi
c00239a1:	5f                   	pop    edi
c00239a2:	5d                   	pop    ebp
c00239a3:	c3                   	ret    

c00239a4 <ideChannel0IRQHandler(regs*, void*)>:
c00239a4:	83 ec 10             	sub    esp,0x10
c00239a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239ab:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00239b2:	6a 07                	push   0x7
c00239b4:	6a 00                	push   0x0
c00239b6:	50                   	push   eax
c00239b7:	e8 d4 fe ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c00239bc:	83 c4 1c             	add    esp,0x1c
c00239bf:	c3                   	ret    

c00239c0 <ideChannel1IRQHandler(regs*, void*)>:
c00239c0:	83 ec 10             	sub    esp,0x10
c00239c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239c7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00239ce:	6a 07                	push   0x7
c00239d0:	6a 01                	push   0x1
c00239d2:	50                   	push   eax
c00239d3:	e8 b8 fe ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c00239d8:	83 c4 1c             	add    esp,0x1c
c00239db:	c3                   	ret    

c00239dc <IDE::enableIRQs(unsigned char, bool)>:
c00239dc:	57                   	push   edi
c00239dd:	56                   	push   esi
c00239de:	be 04 00 00 00       	mov    esi,0x4
c00239e3:	53                   	push   ebx
c00239e4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00239e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00239ed:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00239f2:	0f 94 c0             	sete   al
c00239f5:	d1 e0                	shl    eax,1
c00239f7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00239fe:	0f b6 c0             	movzx  eax,al
c0023a01:	50                   	push   eax
c0023a02:	6a 0c                	push   0xc
c0023a04:	57                   	push   edi
c0023a05:	53                   	push   ebx
c0023a06:	e8 c5 fd ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a0b:	83 c4 10             	add    esp,0x10
c0023a0e:	50                   	push   eax
c0023a0f:	6a 0c                	push   0xc
c0023a11:	57                   	push   edi
c0023a12:	53                   	push   ebx
c0023a13:	e8 78 fe ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023a18:	83 c4 10             	add    esp,0x10
c0023a1b:	4e                   	dec    esi
c0023a1c:	75 f0                	jne    c0023a0e <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023a1e:	5b                   	pop    ebx
c0023a1f:	5e                   	pop    esi
c0023a20:	5f                   	pop    edi
c0023a21:	c3                   	ret    

c0023a22 <IDE::open(int, int, void*)>:
c0023a22:	55                   	push   ebp
c0023a23:	57                   	push   edi
c0023a24:	56                   	push   esi
c0023a25:	53                   	push   ebx
c0023a26:	83 ec 1c             	sub    esp,0x1c
c0023a29:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023a2d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023a36:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023a3f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023a46:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023a4d:	0f 85 b0 02 00 00    	jne    c0023d03 <IDE::open(int, int, void*)+0x2e1>
c0023a53:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023a59:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023a5d:	83 e0 7f             	and    eax,0x7f
c0023a60:	3c 05                	cmp    al,0x5
c0023a62:	74 04                	je     c0023a68 <IDE::open(int, int, void*)+0x46>
c0023a64:	3c 0f                	cmp    al,0xf
c0023a66:	75 32                	jne    c0023a9a <IDE::open(int, int, void*)+0x78>
c0023a68:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023a6e:	83 e0 fc             	and    eax,0xfffffffc
c0023a71:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023a78:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023a7e:	83 e0 fc             	and    eax,0xfffffffc
c0023a81:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023a88:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023a8e:	83 e0 fc             	and    eax,0xfffffffc
c0023a91:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023a98:	eb 14                	jmp    c0023aae <IDE::open(int, int, void*)+0x8c>
c0023a9a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023aa4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023aae:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023ab5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023abc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ac0:	89 c6                	mov    esi,eax
c0023ac2:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023ac7:	c1 e6 10             	shl    esi,0x10
c0023aca:	89 e8                	mov    eax,ebp
c0023acc:	89 fa                	mov    edx,edi
c0023ace:	c1 e0 0b             	shl    eax,0xb
c0023ad1:	09 f0                	or     eax,esi
c0023ad3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023ada:	c1 e6 08             	shl    esi,0x8
c0023add:	09 c6                	or     esi,eax
c0023adf:	89 f0                	mov    eax,esi
c0023ae1:	0d 08 00 00 80       	or     eax,0x80000008
c0023ae6:	ef                   	out    dx,eax
c0023ae7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023aec:	89 ca                	mov    edx,ecx
c0023aee:	ed                   	in     eax,dx
c0023aef:	c1 e8 10             	shr    eax,0x10
c0023af2:	3d ff ff 00 00       	cmp    eax,0xffff
c0023af7:	0f 84 f5 00 00 00    	je     c0023bf2 <IDE::open(int, int, void*)+0x1d0>
c0023afd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023b03:	89 fa                	mov    edx,edi
c0023b05:	89 f0                	mov    eax,esi
c0023b07:	ef                   	out    dx,eax
c0023b08:	b0 fe                	mov    al,0xfe
c0023b0a:	89 ca                	mov    edx,ecx
c0023b0c:	ee                   	out    dx,al
c0023b0d:	89 f0                	mov    eax,esi
c0023b0f:	89 fa                	mov    edx,edi
c0023b11:	ef                   	out    dx,eax
c0023b12:	89 ca                	mov    edx,ecx
c0023b14:	ed                   	in     eax,dx
c0023b15:	3c fe                	cmp    al,0xfe
c0023b17:	0f 85 a9 00 00 00    	jne    c0023bc6 <IDE::open(int, int, void*)+0x1a4>
c0023b1d:	8b 15 28 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee28
c0023b23:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023b2a:	74 33                	je     c0023b5f <IDE::open(int, int, void*)+0x13d>
c0023b2c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023b32:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023b36:	40                   	inc    eax
c0023b37:	83 ec 0c             	sub    esp,0xc
c0023b3a:	0f b6 c0             	movzx  eax,al
c0023b3d:	50                   	push   eax
c0023b3e:	55                   	push   ebp
c0023b3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023b43:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023b49:	51                   	push   ecx
c0023b4a:	e8 45 48 ff ff       	call   c0018394 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023b4f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023b54:	83 c4 1c             	add    esp,0x1c
c0023b57:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023b5d:	eb 0a                	jmp    c0023b69 <IDE::open(int, int, void*)+0x147>
c0023b5f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023b69:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023b70:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023b77:	c1 e1 10             	shl    ecx,0x10
c0023b7a:	c1 e0 08             	shl    eax,0x8
c0023b7d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b82:	09 c1                	or     ecx,eax
c0023b84:	89 fa                	mov    edx,edi
c0023b86:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023b8d:	c1 e0 0b             	shl    eax,0xb
c0023b90:	09 c1                	or     ecx,eax
c0023b92:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023b98:	89 c8                	mov    eax,ecx
c0023b9a:	ef                   	out    dx,eax
c0023b9b:	be fc 0c 00 00       	mov    esi,0xcfc
c0023ba0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023ba6:	89 f2                	mov    edx,esi
c0023ba8:	ee                   	out    dx,al
c0023ba9:	89 c8                	mov    eax,ecx
c0023bab:	89 fa                	mov    edx,edi
c0023bad:	ef                   	out    dx,eax
c0023bae:	89 f2                	mov    edx,esi
c0023bb0:	ed                   	in     eax,dx
c0023bb1:	0f b6 c0             	movzx  eax,al
c0023bb4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023bba:	74 46                	je     c0023c02 <IDE::open(int, int, void*)+0x1e0>
c0023bbc:	83 ec 0c             	sub    esp,0xc
c0023bbf:	68 c0 d4 02 c0       	push   0xc002d4c0
c0023bc4:	eb 34                	jmp    c0023bfa <IDE::open(int, int, void*)+0x1d8>
c0023bc6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023bcf:	75 17                	jne    c0023be8 <IDE::open(int, int, void*)+0x1c6>
c0023bd1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023bd6:	74 07                	je     c0023bdf <IDE::open(int, int, void*)+0x1bd>
c0023bd8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023bdd:	75 09                	jne    c0023be8 <IDE::open(int, int, void*)+0x1c6>
c0023bdf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023be6:	eb 1a                	jmp    c0023c02 <IDE::open(int, int, void*)+0x1e0>
c0023be8:	83 ec 0c             	sub    esp,0xc
c0023beb:	68 c8 d4 02 c0       	push   0xc002d4c8
c0023bf0:	eb 08                	jmp    c0023bfa <IDE::open(int, int, void*)+0x1d8>
c0023bf2:	83 ec 0c             	sub    esp,0xc
c0023bf5:	68 f9 d4 02 c0       	push   0xc002d4f9
c0023bfa:	e8 88 6c ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0023bff:	83 c4 10             	add    esp,0x10
c0023c02:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023c09:	79 1a                	jns    c0023c25 <IDE::open(int, int, void*)+0x203>
c0023c0b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023c11:	83 e0 fc             	and    eax,0xfffffffc
c0023c14:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023c1b:	83 c0 08             	add    eax,0x8
c0023c1e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023c25:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023c2b:	89 c2                	mov    edx,eax
c0023c2d:	83 e2 0f             	and    edx,0xf
c0023c30:	66 83 fa 08          	cmp    dx,0x8
c0023c34:	75 0a                	jne    c0023c40 <IDE::open(int, int, void*)+0x21e>
c0023c36:	83 e8 02             	sub    eax,0x2
c0023c39:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c40:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023c46:	89 c2                	mov    edx,eax
c0023c48:	83 e2 0f             	and    edx,0xf
c0023c4b:	66 83 fa 08          	cmp    dx,0x8
c0023c4f:	75 0a                	jne    c0023c5b <IDE::open(int, int, void*)+0x239>
c0023c51:	83 e8 02             	sub    eax,0x2
c0023c54:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023c5b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023c62:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023c69:	89 d0                	mov    eax,edx
c0023c6b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023c6e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023c72:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023c76:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023c79:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023c7e:	0f b6 c9             	movzx  ecx,cl
c0023c81:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023c88:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023c8b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023c8f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023c93:	8d 50 02             	lea    edx,[eax+0x2]
c0023c96:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023c9b:	0f b6 d2             	movzx  edx,dl
c0023c9e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023ca4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023ca7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023cab:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023caf:	8d 48 03             	lea    ecx,[eax+0x3]
c0023cb2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023cb7:	0f b6 c9             	movzx  ecx,cl
c0023cba:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023cc0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023cc3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023cc7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023ccb:	8d 50 04             	lea    edx,[eax+0x4]
c0023cce:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023cd4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023cd9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023ce0:	66 85 f6             	test   si,si
c0023ce3:	74 3e                	je     c0023d23 <IDE::open(int, int, void*)+0x301>
c0023ce5:	0f b6 d2             	movzx  edx,dl
c0023ce8:	83 c0 05             	add    eax,0x5
c0023ceb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023cee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023cf2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023cf6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023cfc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d01:	eb 20                	jmp    c0023d23 <IDE::open(int, int, void*)+0x301>
c0023d03:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d0d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d17:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d1e:	e9 02 ff ff ff       	jmp    c0023c25 <IDE::open(int, int, void*)+0x203>
c0023d23:	52                   	push   edx
c0023d24:	52                   	push   edx
c0023d25:	6a 00                	push   0x0
c0023d27:	53                   	push   ebx
c0023d28:	e8 7d fa ff ff       	call   c00237aa <IDE::prepareInterrupt(unsigned char)>
c0023d2d:	59                   	pop    ecx
c0023d2e:	5e                   	pop    esi
c0023d2f:	6a 01                	push   0x1
c0023d31:	53                   	push   ebx
c0023d32:	e8 73 fa ff ff       	call   c00237aa <IDE::prepareInterrupt(unsigned char)>
c0023d37:	83 c4 0c             	add    esp,0xc
c0023d3a:	6a 00                	push   0x0
c0023d3c:	6a 00                	push   0x0
c0023d3e:	53                   	push   ebx
c0023d3f:	e8 98 fc ff ff       	call   c00239dc <IDE::enableIRQs(unsigned char, bool)>
c0023d44:	83 c4 0c             	add    esp,0xc
c0023d47:	6a 00                	push   0x0
c0023d49:	6a 01                	push   0x1
c0023d4b:	53                   	push   ebx
c0023d4c:	e8 8b fc ff ff       	call   c00239dc <IDE::enableIRQs(unsigned char, bool)>
c0023d51:	83 c4 10             	add    esp,0x10
c0023d54:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023d5b:	74 40                	je     c0023d9d <IDE::open(int, int, void*)+0x37b>
c0023d5d:	83 ec 0c             	sub    esp,0xc
c0023d60:	68 23 d5 02 c0       	push   0xc002d523
c0023d65:	e8 61 f1 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0023d6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d6d:	6a 01                	push   0x1
c0023d6f:	68 a4 39 02 c0       	push   0xc00239a4
c0023d74:	6a 0e                	push   0xe
c0023d76:	53                   	push   ebx
c0023d77:	e8 08 05 ff ff       	call   c0014284 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023d7c:	83 c4 14             	add    esp,0x14
c0023d7f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023d85:	53                   	push   ebx
c0023d86:	6a 01                	push   0x1
c0023d88:	68 c0 39 02 c0       	push   0xc00239c0
c0023d8d:	6a 0f                	push   0xf
c0023d8f:	53                   	push   ebx
c0023d90:	e8 ef 04 ff ff       	call   c0014284 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023d95:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023d9b:	eb 4a                	jmp    c0023de7 <IDE::open(int, int, void*)+0x3c5>
c0023d9d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023da7:	50                   	push   eax
c0023da8:	6a 0f                	push   0xf
c0023daa:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023db0:	68 3f d5 02 c0       	push   0xc002d53f
c0023db5:	e8 11 f1 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0023dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023dbd:	6a 00                	push   0x0
c0023dbf:	68 a4 39 02 c0       	push   0xc00239a4
c0023dc4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023dca:	53                   	push   ebx
c0023dcb:	e8 b4 04 ff ff       	call   c0014284 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023dd0:	83 c4 14             	add    esp,0x14
c0023dd3:	53                   	push   ebx
c0023dd4:	6a 00                	push   0x0
c0023dd6:	68 c0 39 02 c0       	push   0xc00239c0
c0023ddb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023de1:	53                   	push   ebx
c0023de2:	e8 9d 04 ff ff       	call   c0014284 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023de7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023de9:	83 c4 20             	add    esp,0x20
c0023dec:	83 ec 0c             	sub    esp,0xc
c0023def:	53                   	push   ebx
c0023df0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023df3:	83 c4 0c             	add    esp,0xc
c0023df6:	6a 07                	push   0x7
c0023df8:	6a 00                	push   0x0
c0023dfa:	53                   	push   ebx
c0023dfb:	e8 90 fa ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023e00:	83 c4 0c             	add    esp,0xc
c0023e03:	6a 07                	push   0x7
c0023e05:	6a 01                	push   0x1
c0023e07:	53                   	push   ebx
c0023e08:	e8 83 fa ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023e0d:	83 c4 0c             	add    esp,0xc
c0023e10:	6a 01                	push   0x1
c0023e12:	6a 00                	push   0x0
c0023e14:	53                   	push   ebx
c0023e15:	e8 c2 fb ff ff       	call   c00239dc <IDE::enableIRQs(unsigned char, bool)>
c0023e1a:	83 c4 0c             	add    esp,0xc
c0023e1d:	6a 01                	push   0x1
c0023e1f:	6a 01                	push   0x1
c0023e21:	53                   	push   ebx
c0023e22:	e8 b5 fb ff ff       	call   c00239dc <IDE::enableIRQs(unsigned char, bool)>
c0023e27:	83 c4 2c             	add    esp,0x2c
c0023e2a:	31 c0                	xor    eax,eax
c0023e2c:	5b                   	pop    ebx
c0023e2d:	5e                   	pop    esi
c0023e2e:	5f                   	pop    edi
c0023e2f:	5d                   	pop    ebp
c0023e30:	c3                   	ret    
c0023e31:	90                   	nop

c0023e32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023e32:	55                   	push   ebp
c0023e33:	57                   	push   edi
c0023e34:	56                   	push   esi
c0023e35:	53                   	push   ebx
c0023e36:	83 ec 1c             	sub    esp,0x1c
c0023e39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023e3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e41:	8d 50 f8             	lea    edx,[eax-0x8]
c0023e44:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e48:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023e4c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023e50:	80 fa 03             	cmp    dl,0x3
c0023e53:	77 5d                	ja     c0023eb2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023e55:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023e59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e5d:	0f b6 db             	movzx  ebx,bl
c0023e60:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023e63:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023e67:	83 ca 80             	or     edx,0xffffff80
c0023e6a:	0f b6 d2             	movzx  edx,dl
c0023e6d:	52                   	push   edx
c0023e6e:	6a 0c                	push   0xc
c0023e70:	53                   	push   ebx
c0023e71:	56                   	push   esi
c0023e72:	e8 59 f9 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e77:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023e84:	0f b6 c0             	movzx  eax,al
c0023e87:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023e8b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023e8d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023e92:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023e96:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023e9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023e9e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023ea6:	83 c4 2c             	add    esp,0x2c
c0023ea9:	5b                   	pop    ebx
c0023eaa:	5e                   	pop    esi
c0023eab:	5f                   	pop    edi
c0023eac:	5d                   	pop    ebp
c0023ead:	e9 1e f9 ff ff       	jmp    c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eb2:	3c 07                	cmp    al,0x7
c0023eb4:	77 10                	ja     c0023ec6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023eb6:	0f b6 db             	movzx  ebx,bl
c0023eb9:	0f b6 d0             	movzx  edx,al
c0023ebc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023ec4:	eb 2d                	jmp    c0023ef3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023ec6:	3c 0d                	cmp    al,0xd
c0023ec8:	77 13                	ja     c0023edd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023eca:	0f b6 db             	movzx  ebx,bl
c0023ecd:	0f b6 c0             	movzx  eax,al
c0023ed0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023ed7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023edb:	eb 16                	jmp    c0023ef3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023edd:	3c 15                	cmp    al,0x15
c0023edf:	77 14                	ja     c0023ef5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023ee1:	0f b6 db             	movzx  ebx,bl
c0023ee4:	0f b6 c0             	movzx  eax,al
c0023ee7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023eef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023ef3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023ef5:	83 c4 1c             	add    esp,0x1c
c0023ef8:	5b                   	pop    ebx
c0023ef9:	5e                   	pop    esi
c0023efa:	5f                   	pop    edi
c0023efb:	5d                   	pop    ebp
c0023efc:	c3                   	ret    
c0023efd:	90                   	nop

c0023efe <IDE::detect()>:
c0023efe:	55                   	push   ebp
c0023eff:	57                   	push   edi
c0023f00:	56                   	push   esi
c0023f01:	53                   	push   ebx
c0023f02:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023f08:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023f0f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023f16:	0f 85 be 02 00 00    	jne    c00241da <IDE::detect()+0x2dc>
c0023f1c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023f23:	31 f6                	xor    esi,esi
c0023f25:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023f2d:	31 ed                	xor    ebp,ebp
c0023f2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023f33:	c1 e0 06             	shl    eax,0x6
c0023f36:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023f3e:	89 e8                	mov    eax,ebp
c0023f40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023f44:	c1 e0 04             	shl    eax,0x4
c0023f47:	83 c8 a0             	or     eax,0xffffffa0
c0023f4a:	0f b6 c0             	movzx  eax,al
c0023f4d:	50                   	push   eax
c0023f4e:	6a 06                	push   0x6
c0023f50:	56                   	push   esi
c0023f51:	53                   	push   ebx
c0023f52:	e8 79 f8 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f57:	83 c4 0c             	add    esp,0xc
c0023f5a:	6a 0c                	push   0xc
c0023f5c:	56                   	push   esi
c0023f5d:	53                   	push   ebx
c0023f5e:	e8 2d f9 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023f63:	83 c4 0c             	add    esp,0xc
c0023f66:	6a 0c                	push   0xc
c0023f68:	56                   	push   esi
c0023f69:	53                   	push   ebx
c0023f6a:	e8 21 f9 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023f6f:	83 c4 0c             	add    esp,0xc
c0023f72:	6a 0c                	push   0xc
c0023f74:	56                   	push   esi
c0023f75:	53                   	push   ebx
c0023f76:	e8 15 f9 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023f7b:	83 c4 0c             	add    esp,0xc
c0023f7e:	6a 0c                	push   0xc
c0023f80:	56                   	push   esi
c0023f81:	53                   	push   ebx
c0023f82:	e8 09 f9 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023f87:	68 ec 00 00 00       	push   0xec
c0023f8c:	6a 07                	push   0x7
c0023f8e:	56                   	push   esi
c0023f8f:	53                   	push   ebx
c0023f90:	e8 3b f8 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f95:	83 c4 1c             	add    esp,0x1c
c0023f98:	6a 0c                	push   0xc
c0023f9a:	56                   	push   esi
c0023f9b:	53                   	push   ebx
c0023f9c:	e8 ef f8 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023fa1:	83 c4 0c             	add    esp,0xc
c0023fa4:	6a 0c                	push   0xc
c0023fa6:	56                   	push   esi
c0023fa7:	53                   	push   ebx
c0023fa8:	e8 e3 f8 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023fad:	83 c4 0c             	add    esp,0xc
c0023fb0:	6a 0c                	push   0xc
c0023fb2:	56                   	push   esi
c0023fb3:	53                   	push   ebx
c0023fb4:	e8 d7 f8 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023fb9:	83 c4 0c             	add    esp,0xc
c0023fbc:	6a 0c                	push   0xc
c0023fbe:	56                   	push   esi
c0023fbf:	53                   	push   ebx
c0023fc0:	e8 cb f8 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023fc5:	83 c4 0c             	add    esp,0xc
c0023fc8:	6a 0c                	push   0xc
c0023fca:	56                   	push   esi
c0023fcb:	53                   	push   ebx
c0023fcc:	e8 bf f8 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023fd1:	83 c4 10             	add    esp,0x10
c0023fd4:	84 c0                	test   al,al
c0023fd6:	0f 84 8b 01 00 00    	je     c0024167 <IDE::detect()+0x269>
c0023fdc:	31 ff                	xor    edi,edi
c0023fde:	50                   	push   eax
c0023fdf:	6a 0c                	push   0xc
c0023fe1:	56                   	push   esi
c0023fe2:	53                   	push   ebx
c0023fe3:	e8 a8 f8 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0023fe8:	83 c4 10             	add    esp,0x10
c0023feb:	a8 01                	test   al,0x1
c0023fed:	0f 85 8e 01 00 00    	jne    c0024181 <IDE::detect()+0x283>
c0023ff3:	84 c0                	test   al,al
c0023ff5:	78 04                	js     c0023ffb <IDE::detect()+0xfd>
c0023ff7:	a8 08                	test   al,0x8
c0023ff9:	75 27                	jne    c0024022 <IDE::detect()+0x124>
c0023ffb:	47                   	inc    edi
c0023ffc:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024002:	7e da                	jle    c0023fde <IDE::detect()+0xe0>
c0024004:	50                   	push   eax
c0024005:	50                   	push   eax
c0024006:	6a 00                	push   0x0
c0024008:	68 40 4b 4c 00       	push   0x4c4b40
c002400d:	e8 6f a7 ff ff       	call   c001e781 <nanoSleep(unsigned long long)>
c0024012:	83 c4 10             	add    esp,0x10
c0024015:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002401b:	75 c1                	jne    c0023fde <IDE::detect()+0xe0>
c002401d:	e9 5f 01 00 00       	jmp    c0024181 <IDE::detect()+0x283>
c0024022:	31 c9                	xor    ecx,ecx
c0024024:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024028:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002402c:	83 ec 0c             	sub    esp,0xc
c002402f:	68 80 00 00 00       	push   0x80
c0024034:	57                   	push   edi
c0024035:	6a 00                	push   0x0
c0024037:	56                   	push   esi
c0024038:	53                   	push   ebx
c0024039:	e8 f4 fd ff ff       	call   c0023e32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002403e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024043:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024047:	89 d1                	mov    ecx,edx
c0024049:	c1 e0 06             	shl    eax,0x6
c002404c:	01 d8                	add    eax,ebx
c002404e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024055:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002405c:	89 f2                	mov    edx,esi
c002405e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024064:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024068:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002406e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024072:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024079:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024081:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024088:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024090:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024096:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002409d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00240a3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00240a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00240ab:	83 c4 20             	add    esp,0x20
c00240ae:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00240b1:	83 c0 02             	add    eax,0x2
c00240b4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00240ba:	83 c7 02             	add    edi,0x2
c00240bd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00240c0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00240c6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00240ca:	75 e2                	jne    c00240ae <IDE::detect()+0x1b0>
c00240cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00240d0:	c1 e0 06             	shl    eax,0x6
c00240d3:	01 d8                	add    eax,ebx
c00240d5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00240db:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00240e2:	66 c1 ea 09          	shr    dx,0x9
c00240e6:	83 e2 01             	and    edx,0x1
c00240e9:	84 c9                	test   cl,cl
c00240eb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00240f1:	75 2f                	jne    c0024122 <IDE::detect()+0x224>
c00240f3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00240f9:	85 c0                	test   eax,eax
c00240fb:	74 66                	je     c0024163 <IDE::detect()+0x265>
c00240fd:	50                   	push   eax
c00240fe:	55                   	push   ebp
c00240ff:	56                   	push   esi
c0024100:	68 5b d5 02 c0       	push   0xc002d55b
c0024105:	e8 c1 ed fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c002410a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024111:	e8 fe b7 fe ff       	call   c000f914 <malloc>
c0024116:	89 c7                	mov    edi,eax
c0024118:	89 04 24             	mov    DWORD PTR [esp],eax
c002411b:	e8 78 06 00 00       	call   c0024798 <ATA::ATA()>
c0024120:	eb 28                	jmp    c002414a <IDE::detect()+0x24c>
c0024122:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024128:	55                   	push   ebp
c0024129:	56                   	push   esi
c002412a:	68 8a d5 02 c0       	push   0xc002d58a
c002412f:	e8 97 ed fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0024134:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002413b:	e8 d4 b7 fe ff       	call   c000f914 <malloc>
c0024140:	89 c7                	mov    edi,eax
c0024142:	89 04 24             	mov    DWORD PTR [esp],eax
c0024145:	e8 8e 0c 00 00       	call   c0024dd8 <ATAPI::ATAPI()>
c002414a:	5a                   	pop    edx
c002414b:	59                   	pop    ecx
c002414c:	57                   	push   edi
c002414d:	53                   	push   ebx
c002414e:	e8 ad 01 ff ff       	call   c0014300 <Device::addChild(Device*)>
c0024153:	8b 07                	mov    eax,DWORD PTR [edi]
c0024155:	53                   	push   ebx
c0024156:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002415a:	6a 00                	push   0x0
c002415c:	57                   	push   edi
c002415d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024160:	83 c4 20             	add    esp,0x20
c0024163:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024167:	4d                   	dec    ebp
c0024168:	74 0a                	je     c0024174 <IDE::detect()+0x276>
c002416a:	bd 01 00 00 00       	mov    ebp,0x1
c002416f:	e9 bb fd ff ff       	jmp    c0023f2f <IDE::detect()+0x31>
c0024174:	4e                   	dec    esi
c0024175:	74 63                	je     c00241da <IDE::detect()+0x2dc>
c0024177:	be 01 00 00 00       	mov    esi,0x1
c002417c:	e9 ac fd ff ff       	jmp    c0023f2d <IDE::detect()+0x2f>
c0024181:	50                   	push   eax
c0024182:	6a 04                	push   0x4
c0024184:	56                   	push   esi
c0024185:	53                   	push   ebx
c0024186:	e8 05 f7 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c002418b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002418f:	83 c4 0c             	add    esp,0xc
c0024192:	6a 05                	push   0x5
c0024194:	56                   	push   esi
c0024195:	53                   	push   ebx
c0024196:	e8 f5 f6 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c002419b:	83 c4 10             	add    esp,0x10
c002419e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00241a2:	80 fa 14             	cmp    dl,0x14
c00241a5:	75 04                	jne    c00241ab <IDE::detect()+0x2ad>
c00241a7:	3c eb                	cmp    al,0xeb
c00241a9:	eb 07                	jmp    c00241b2 <IDE::detect()+0x2b4>
c00241ab:	3c 96                	cmp    al,0x96
c00241ad:	75 b8                	jne    c0024167 <IDE::detect()+0x269>
c00241af:	80 fa 69             	cmp    dl,0x69
c00241b2:	75 b3                	jne    c0024167 <IDE::detect()+0x269>
c00241b4:	68 a1 00 00 00       	push   0xa1
c00241b9:	6a 07                	push   0x7
c00241bb:	56                   	push   esi
c00241bc:	53                   	push   ebx
c00241bd:	e8 0e f6 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241c2:	5f                   	pop    edi
c00241c3:	58                   	pop    eax
c00241c4:	6a 00                	push   0x0
c00241c6:	68 40 42 0f 00       	push   0xf4240
c00241cb:	e8 b1 a5 ff ff       	call   c001e781 <nanoSleep(unsigned long long)>
c00241d0:	83 c4 10             	add    esp,0x10
c00241d3:	b1 01                	mov    cl,0x1
c00241d5:	e9 4a fe ff ff       	jmp    c0024024 <IDE::detect()+0x126>
c00241da:	81 c4 1c 02 00 00    	add    esp,0x21c
c00241e0:	5b                   	pop    ebx
c00241e1:	5e                   	pop    esi
c00241e2:	5f                   	pop    edi
c00241e3:	5d                   	pop    ebp
c00241e4:	c3                   	ret    
c00241e5:	90                   	nop

c00241e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00241e6:	55                   	push   ebp
c00241e7:	57                   	push   edi
c00241e8:	56                   	push   esi
c00241e9:	53                   	push   ebx
c00241ea:	83 ec 1c             	sub    esp,0x1c
c00241ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00241f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00241f5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00241f9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00241fd:	88 c3                	mov    bl,al
c00241ff:	84 c0                	test   al,al
c0024201:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024205:	0f 84 67 01 00 00    	je     c0024372 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002420b:	83 ec 0c             	sub    esp,0xc
c002420e:	68 bb d5 02 c0       	push   0xc002d5bb
c0024213:	e8 b3 ec fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0024218:	83 c4 10             	add    esp,0x10
c002421b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002421f:	3c 01                	cmp    al,0x1
c0024221:	75 17                	jne    c002423a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024223:	83 ec 0c             	sub    esp,0xc
c0024226:	b3 13                	mov    bl,0x13
c0024228:	68 c7 d5 02 c0       	push   0xc002d5c7
c002422d:	e8 99 ec fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0024232:	83 c4 10             	add    esp,0x10
c0024235:	e9 25 01 00 00       	jmp    c002435f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002423a:	3c 02                	cmp    al,0x2
c002423c:	0f 85 ef 00 00 00    	jne    c0024331 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024242:	d1 e6                	shl    esi,1
c0024244:	09 ee                	or     esi,ebp
c0024246:	52                   	push   edx
c0024247:	89 f0                	mov    eax,esi
c0024249:	6a 01                	push   0x1
c002424b:	0f b6 f0             	movzx  esi,al
c002424e:	c1 e6 06             	shl    esi,0x6
c0024251:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024259:	50                   	push   eax
c002425a:	57                   	push   edi
c002425b:	e8 30 f6 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0024260:	83 c4 10             	add    esp,0x10
c0024263:	89 c6                	mov    esi,eax
c0024265:	a8 01                	test   al,0x1
c0024267:	74 12                	je     c002427b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024269:	83 ec 0c             	sub    esp,0xc
c002426c:	b3 07                	mov    bl,0x7
c002426e:	68 dc d5 02 c0       	push   0xc002d5dc
c0024273:	e8 53 ec fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0024278:	83 c4 10             	add    esp,0x10
c002427b:	f7 c6 02 00 00 00    	test   esi,0x2
c0024281:	74 12                	je     c0024295 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024283:	83 ec 0c             	sub    esp,0xc
c0024286:	b3 03                	mov    bl,0x3
c0024288:	68 fa d5 02 c0       	push   0xc002d5fa
c002428d:	e8 39 ec fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0024292:	83 c4 10             	add    esp,0x10
c0024295:	f7 c6 04 00 00 00    	test   esi,0x4
c002429b:	74 12                	je     c00242af <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002429d:	83 ec 0c             	sub    esp,0xc
c00242a0:	b3 14                	mov    bl,0x14
c00242a2:	68 1a d6 02 c0       	push   0xc002d61a
c00242a7:	e8 1f ec fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00242ac:	83 c4 10             	add    esp,0x10
c00242af:	f7 c6 08 00 00 00    	test   esi,0x8
c00242b5:	74 12                	je     c00242c9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00242b7:	83 ec 0c             	sub    esp,0xc
c00242ba:	b3 03                	mov    bl,0x3
c00242bc:	68 fa d5 02 c0       	push   0xc002d5fa
c00242c1:	e8 05 ec fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00242c6:	83 c4 10             	add    esp,0x10
c00242c9:	f7 c6 10 00 00 00    	test   esi,0x10
c00242cf:	74 12                	je     c00242e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00242d1:	83 ec 0c             	sub    esp,0xc
c00242d4:	b3 15                	mov    bl,0x15
c00242d6:	68 32 d6 02 c0       	push   0xc002d632
c00242db:	e8 eb eb fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00242e0:	83 c4 10             	add    esp,0x10
c00242e3:	f7 c6 20 00 00 00    	test   esi,0x20
c00242e9:	74 12                	je     c00242fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00242eb:	83 ec 0c             	sub    esp,0xc
c00242ee:	b3 03                	mov    bl,0x3
c00242f0:	68 fa d5 02 c0       	push   0xc002d5fa
c00242f5:	e8 d1 eb fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00242fa:	83 c4 10             	add    esp,0x10
c00242fd:	f7 c6 40 00 00 00    	test   esi,0x40
c0024303:	74 12                	je     c0024317 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0024305:	83 ec 0c             	sub    esp,0xc
c0024308:	b3 16                	mov    bl,0x16
c002430a:	68 4c d6 02 c0       	push   0xc002d64c
c002430f:	e8 b7 eb fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0024314:	83 c4 10             	add    esp,0x10
c0024317:	89 f0                	mov    eax,esi
c0024319:	84 c0                	test   al,al
c002431b:	79 42                	jns    c002435f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002431d:	83 ec 0c             	sub    esp,0xc
c0024320:	b3 0d                	mov    bl,0xd
c0024322:	68 6d d6 02 c0       	push   0xc002d66d
c0024327:	e8 9f eb fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c002432c:	83 c4 10             	add    esp,0x10
c002432f:	eb 2e                	jmp    c002435f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024331:	3c 03                	cmp    al,0x3
c0024333:	75 14                	jne    c0024349 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024335:	83 ec 0c             	sub    esp,0xc
c0024338:	b3 17                	mov    bl,0x17
c002433a:	68 81 d6 02 c0       	push   0xc002d681
c002433f:	e8 87 eb fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0024344:	83 c4 10             	add    esp,0x10
c0024347:	eb 16                	jmp    c002435f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024349:	3c 04                	cmp    al,0x4
c002434b:	75 12                	jne    c002435f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002434d:	83 ec 0c             	sub    esp,0xc
c0024350:	b3 08                	mov    bl,0x8
c0024352:	68 97 d6 02 c0       	push   0xc002d697
c0024357:	e8 6f eb fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c002435c:	83 c4 10             	add    esp,0x10
c002435f:	50                   	push   eax
c0024360:	50                   	push   eax
c0024361:	0f b6 c3             	movzx  eax,bl
c0024364:	50                   	push   eax
c0024365:	68 af d6 02 c0       	push   0xc002d6af
c002436a:	e8 5c eb fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c002436f:	83 c4 10             	add    esp,0x10
c0024372:	83 c4 1c             	add    esp,0x1c
c0024375:	88 d8                	mov    al,bl
c0024377:	5b                   	pop    ebx
c0024378:	5e                   	pop    esi
c0024379:	5f                   	pop    edi
c002437a:	5d                   	pop    ebp
c002437b:	c3                   	ret    

c002437c <IDE::polling(unsigned char, unsigned int)>:
c002437c:	57                   	push   edi
c002437d:	56                   	push   esi
c002437e:	53                   	push   ebx
c002437f:	bb 04 00 00 00       	mov    ebx,0x4
c0024384:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024388:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002438d:	52                   	push   edx
c002438e:	6a 0c                	push   0xc
c0024390:	56                   	push   esi
c0024391:	57                   	push   edi
c0024392:	e8 f9 f4 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0024397:	83 c4 10             	add    esp,0x10
c002439a:	4b                   	dec    ebx
c002439b:	75 f0                	jne    c002438d <IDE::polling(unsigned char, unsigned int)+0x11>
c002439d:	bb a0 86 01 00       	mov    ebx,0x186a0
c00243a2:	50                   	push   eax
c00243a3:	6a 0c                	push   0xc
c00243a5:	56                   	push   esi
c00243a6:	57                   	push   edi
c00243a7:	e8 e4 f4 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c00243ac:	83 c4 10             	add    esp,0x10
c00243af:	a8 01                	test   al,0x1
c00243b1:	74 12                	je     c00243c5 <IDE::polling(unsigned char, unsigned int)+0x49>
c00243b3:	83 ec 0c             	sub    esp,0xc
c00243b6:	68 c9 d6 02 c0       	push   0xc002d6c9
c00243bb:	e8 0b eb fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00243c0:	83 c4 10             	add    esp,0x10
c00243c3:	eb 17                	jmp    c00243dc <IDE::polling(unsigned char, unsigned int)+0x60>
c00243c5:	a8 20                	test   al,0x20
c00243c7:	75 0f                	jne    c00243d8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00243c9:	4b                   	dec    ebx
c00243ca:	74 10                	je     c00243dc <IDE::polling(unsigned char, unsigned int)+0x60>
c00243cc:	84 c0                	test   al,al
c00243ce:	78 d2                	js     c00243a2 <IDE::polling(unsigned char, unsigned int)+0x26>
c00243d0:	a8 08                	test   al,0x8
c00243d2:	74 ce                	je     c00243a2 <IDE::polling(unsigned char, unsigned int)+0x26>
c00243d4:	31 c0                	xor    eax,eax
c00243d6:	eb 06                	jmp    c00243de <IDE::polling(unsigned char, unsigned int)+0x62>
c00243d8:	b0 01                	mov    al,0x1
c00243da:	eb 02                	jmp    c00243de <IDE::polling(unsigned char, unsigned int)+0x62>
c00243dc:	b0 02                	mov    al,0x2
c00243de:	5b                   	pop    ebx
c00243df:	5e                   	pop    esi
c00243e0:	5f                   	pop    edi
c00243e1:	c3                   	ret    

c00243e2 <SATABus::close(int, int, void*)>:
c00243e2:	31 c0                	xor    eax,eax
c00243e4:	c3                   	ret    
c00243e5:	90                   	nop

c00243e6 <SATABus::detect()>:
c00243e6:	c3                   	ret    
c00243e7:	90                   	nop

c00243e8 <SATABus::SATABus()>:
c00243e8:	83 ec 0c             	sub    esp,0xc
c00243eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243ef:	83 ec 08             	sub    esp,0x8
c00243f2:	68 0c d7 02 c0       	push   0xc002d70c
c00243f7:	50                   	push   eax
c00243f8:	e8 9d 02 ff ff       	call   c001469a <HardDiskController::HardDiskController(char const*)>
c00243fd:	83 c4 10             	add    esp,0x10
c0024400:	ba c8 d7 02 c0       	mov    edx,0xc002d7c8
c0024405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024409:	89 10                	mov    DWORD PTR [eax],edx
c002440b:	83 ec 0c             	sub    esp,0xc
c002440e:	6a 50                	push   0x50
c0024410:	e8 50 bc fe ff       	call   c0010065 <Phys::allocateContiguousPages(int)>
c0024415:	83 c4 10             	add    esp,0x10
c0024418:	89 c2                	mov    edx,eax
c002441a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002441e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024424:	83 ec 0c             	sub    esp,0xc
c0024427:	6a 50                	push   0x50
c0024429:	e8 97 d6 fe ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c002442e:	83 c4 10             	add    esp,0x10
c0024431:	89 c2                	mov    edx,eax
c0024433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024437:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002443d:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c0024442:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024446:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002444c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024450:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024456:	83 ec 0c             	sub    esp,0xc
c0024459:	6a 03                	push   0x3
c002445b:	6a 50                	push   0x50
c002445d:	51                   	push   ecx
c002445e:	52                   	push   edx
c002445f:	50                   	push   eax
c0024460:	e8 8d e1 fe ff       	call   c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024465:	83 c4 20             	add    esp,0x20
c0024468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002446c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024476:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002447c:	83 ec 04             	sub    esp,0x4
c002447f:	52                   	push   edx
c0024480:	50                   	push   eax
c0024481:	68 30 d7 02 c0       	push   0xc002d730
c0024486:	e8 40 ea fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c002448b:	83 c4 10             	add    esp,0x10
c002448e:	90                   	nop
c002448f:	83 c4 0c             	add    esp,0xc
c0024492:	c3                   	ret    
c0024493:	90                   	nop

c0024494 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024494:	83 ec 0c             	sub    esp,0xc
c0024497:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002449b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002449e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00244a1:	09 c2                	or     edx,eax
c00244a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00244ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c00244af:	31 c0                	xor    eax,eax
c00244b1:	c1 e9 08             	shr    ecx,0x8
c00244b4:	83 e1 0f             	and    ecx,0xf
c00244b7:	39 c8                	cmp    eax,ecx
c00244b9:	74 0a                	je     c00244c5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00244bb:	f6 c2 01             	test   dl,0x1
c00244be:	74 18                	je     c00244d8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00244c0:	d1 ea                	shr    edx,1
c00244c2:	40                   	inc    eax
c00244c3:	eb f2                	jmp    c00244b7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00244c5:	83 ec 0c             	sub    esp,0xc
c00244c8:	68 54 d7 02 c0       	push   0xc002d754
c00244cd:	e8 b5 63 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00244d2:	83 c4 10             	add    esp,0x10
c00244d5:	83 c8 ff             	or     eax,0xffffffff
c00244d8:	83 c4 0c             	add    esp,0xc
c00244db:	c3                   	ret    

c00244dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00244dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00244e0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00244e3:	89 c2                	mov    edx,eax
c00244e5:	c1 ea 08             	shr    edx,0x8
c00244e8:	83 e2 0f             	and    edx,0xf
c00244eb:	fe ca                	dec    dl
c00244ed:	75 31                	jne    c0024520 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00244ef:	83 e0 0f             	and    eax,0xf
c00244f2:	3c 03                	cmp    al,0x3
c00244f4:	75 2a                	jne    c0024520 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00244f6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00244f9:	b8 02 00 00 00       	mov    eax,0x2
c00244fe:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024504:	74 1c                	je     c0024522 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024506:	b8 04 00 00 00       	mov    eax,0x4
c002450b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024511:	74 0f                	je     c0024522 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024513:	31 c0                	xor    eax,eax
c0024515:	83 fa 03             	cmp    edx,0x3
c0024518:	0f 94 c0             	sete   al
c002451b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002451f:	c3                   	ret    
c0024520:	31 c0                	xor    eax,eax
c0024522:	c3                   	ret    
c0024523:	90                   	nop

c0024524 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024528:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002452b:	0f ba e2 0f          	bt     edx,0xf
c002452f:	72 f7                	jb     c0024528 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024531:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024534:	83 ca 10             	or     edx,0x10
c0024537:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002453a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002453d:	83 ca 01             	or     edx,0x1
c0024540:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024543:	c3                   	ret    

c0024544 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024548:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002454b:	83 e2 fe             	and    edx,0xfffffffe
c002454e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024551:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024554:	83 e2 ef             	and    edx,0xffffffef
c0024557:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002455a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002455d:	0f ba e2 0e          	bt     edx,0xe
c0024561:	72 f7                	jb     c002455a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024563:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024566:	0f ba e2 0f          	bt     edx,0xf
c002456a:	72 ee                	jb     c002455a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002456c:	c3                   	ret    
c002456d:	90                   	nop

c002456e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002456e:	55                   	push   ebp
c002456f:	57                   	push   edi
c0024570:	56                   	push   esi
c0024571:	53                   	push   ebx
c0024572:	83 ec 1c             	sub    esp,0x1c
c0024575:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024579:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002457d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024581:	53                   	push   ebx
c0024582:	89 fd                	mov    ebp,edi
c0024584:	56                   	push   esi
c0024585:	c1 e5 0a             	shl    ebp,0xa
c0024588:	e8 b7 ff ff ff       	call   c0024544 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002458d:	83 ec 0c             	sub    esp,0xc
c0024590:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024596:	01 e8                	add    eax,ebp
c0024598:	89 03                	mov    DWORD PTR [ebx],eax
c002459a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002459c:	68 00 04 00 00       	push   0x400
c00245a1:	6a 00                	push   0x0
c00245a3:	50                   	push   eax
c00245a4:	e8 d7 c1 fd ff       	call   c0000780 <memset>
c00245a9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00245af:	89 fa                	mov    edx,edi
c00245b1:	01 e8                	add    eax,ebp
c00245b3:	c1 e7 0d             	shl    edi,0xd
c00245b6:	89 03                	mov    DWORD PTR [ebx],eax
c00245b8:	c1 e2 08             	shl    edx,0x8
c00245bb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00245c2:	81 c2 00 80 00 00    	add    edx,0x8000
c00245c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00245cc:	89 d0                	mov    eax,edx
c00245ce:	83 c4 1c             	add    esp,0x1c
c00245d1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00245d7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00245da:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00245dd:	68 00 01 00 00       	push   0x100
c00245e2:	6a 00                	push   0x0
c00245e4:	50                   	push   eax
c00245e5:	e8 96 c1 fd ff       	call   c0000780 <memset>
c00245ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245ee:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00245f4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00245fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00245fe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024601:	83 c4 10             	add    esp,0x10
c0024604:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002460b:	31 ff                	xor    edi,edi
c002460d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024613:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002461d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024623:	83 c5 20             	add    ebp,0x20
c0024626:	01 f8                	add    eax,edi
c0024628:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002462b:	52                   	push   edx
c002462c:	68 00 01 00 00       	push   0x100
c0024631:	6a 00                	push   0x0
c0024633:	50                   	push   eax
c0024634:	e8 47 c1 fd ff       	call   c0000780 <memset>
c0024639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002463d:	83 c4 10             	add    esp,0x10
c0024640:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024646:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002464d:	01 f8                	add    eax,edi
c002464f:	81 c7 00 01 00 00    	add    edi,0x100
c0024655:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024658:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002465e:	75 b3                	jne    c0024613 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024660:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024664:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024668:	83 c4 1c             	add    esp,0x1c
c002466b:	5b                   	pop    ebx
c002466c:	5e                   	pop    esi
c002466d:	5f                   	pop    edi
c002466e:	5d                   	pop    ebp
c002466f:	e9 b0 fe ff ff       	jmp    c0024524 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024674 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024674:	55                   	push   ebp
c0024675:	57                   	push   edi
c0024676:	56                   	push   esi
c0024677:	53                   	push   ebx
c0024678:	31 db                	xor    ebx,ebx
c002467a:	83 ec 0c             	sub    esp,0xc
c002467d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024681:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024685:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024688:	f7 c7 01 00 00 00    	test   edi,0x1
c002468e:	0f 84 aa 00 00 00    	je     c002473e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024694:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024698:	89 d8                	mov    eax,ebx
c002469a:	c1 e0 07             	shl    eax,0x7
c002469d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00246a4:	55                   	push   ebp
c00246a5:	56                   	push   esi
c00246a6:	e8 31 fe ff ff       	call   c00244dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00246ab:	5a                   	pop    edx
c00246ac:	83 f8 01             	cmp    eax,0x1
c00246af:	59                   	pop    ecx
c00246b0:	75 30                	jne    c00246e2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00246b2:	50                   	push   eax
c00246b3:	50                   	push   eax
c00246b4:	53                   	push   ebx
c00246b5:	68 79 d7 02 c0       	push   0xc002d779
c00246ba:	e8 0c e8 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00246bf:	83 c4 0c             	add    esp,0xc
c00246c2:	53                   	push   ebx
c00246c3:	55                   	push   ebp
c00246c4:	56                   	push   esi
c00246c5:	e8 a4 fe ff ff       	call   c002456e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00246ca:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00246d1:	e8 3e b2 fe ff       	call   c000f914 <malloc>
c00246d6:	89 c5                	mov    ebp,eax
c00246d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00246db:	e8 5c 0d 00 00       	call   c002543c <SATA::SATA()>
c00246e0:	eb 33                	jmp    c0024715 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00246e2:	83 f8 04             	cmp    eax,0x4
c00246e5:	75 47                	jne    c002472e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00246e7:	50                   	push   eax
c00246e8:	50                   	push   eax
c00246e9:	53                   	push   ebx
c00246ea:	68 90 d7 02 c0       	push   0xc002d790
c00246ef:	e8 d7 e7 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00246f4:	83 c4 0c             	add    esp,0xc
c00246f7:	53                   	push   ebx
c00246f8:	55                   	push   ebp
c00246f9:	56                   	push   esi
c00246fa:	e8 6f fe ff ff       	call   c002456e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00246ff:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024706:	e8 09 b2 fe ff       	call   c000f914 <malloc>
c002470b:	89 c5                	mov    ebp,eax
c002470d:	89 04 24             	mov    DWORD PTR [esp],eax
c0024710:	e8 d3 10 00 00       	call   c00257e8 <SATAPI::SATAPI()>
c0024715:	5a                   	pop    edx
c0024716:	59                   	pop    ecx
c0024717:	55                   	push   ebp
c0024718:	56                   	push   esi
c0024719:	e8 e2 fb fe ff       	call   c0014300 <Device::addChild(Device*)>
c002471e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024721:	56                   	push   esi
c0024722:	6a 00                	push   0x0
c0024724:	53                   	push   ebx
c0024725:	55                   	push   ebp
c0024726:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024729:	83 c4 20             	add    esp,0x20
c002472c:	eb 10                	jmp    c002473e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002472e:	50                   	push   eax
c002472f:	50                   	push   eax
c0024730:	53                   	push   ebx
c0024731:	68 a9 d7 02 c0       	push   0xc002d7a9
c0024736:	e8 90 e7 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c002473b:	83 c4 10             	add    esp,0x10
c002473e:	d1 ef                	shr    edi,1
c0024740:	43                   	inc    ebx
c0024741:	83 fb 20             	cmp    ebx,0x20
c0024744:	0f 85 3e ff ff ff    	jne    c0024688 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002474a:	83 c4 0c             	add    esp,0xc
c002474d:	5b                   	pop    ebx
c002474e:	5e                   	pop    esi
c002474f:	5f                   	pop    edi
c0024750:	5d                   	pop    ebp
c0024751:	c3                   	ret    

c0024752 <SATABus::open(int, int, void*)>:
c0024752:	83 ec 14             	sub    esp,0x14
c0024755:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024759:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002475f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024765:	52                   	push   edx
c0024766:	50                   	push   eax
c0024767:	e8 08 ff ff ff       	call   c0024674 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002476c:	31 c0                	xor    eax,eax
c002476e:	83 c4 1c             	add    esp,0x1c
c0024771:	c3                   	ret    

c0024772 <ATA::close(int, int, void*)>:
c0024772:	83 ec 0c             	sub    esp,0xc
c0024775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024779:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002477f:	85 c0                	test   eax,eax
c0024781:	74 0c                	je     c002478f <ATA::close(int, int, void*)+0x1d>
c0024783:	83 ec 0c             	sub    esp,0xc
c0024786:	8b 10                	mov    edx,DWORD PTR [eax]
c0024788:	50                   	push   eax
c0024789:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002478c:	83 c4 10             	add    esp,0x10
c002478f:	31 c0                	xor    eax,eax
c0024791:	83 c4 0c             	add    esp,0xc
c0024794:	c3                   	ret    
c0024795:	90                   	nop

c0024796 <ATA::powerSaving(PowerSavingLevel)>:
c0024796:	c3                   	ret    
c0024797:	90                   	nop

c0024798 <ATA::ATA()>:
c0024798:	83 ec 0c             	sub    esp,0xc
c002479b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002479f:	83 ec 04             	sub    esp,0x4
c00247a2:	68 00 02 00 00       	push   0x200
c00247a7:	68 91 d8 02 c0       	push   0xc002d891
c00247ac:	50                   	push   eax
c00247ad:	e8 80 ff fe ff       	call   c0014732 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247b2:	83 c4 10             	add    esp,0x10
c00247b5:	ba 14 d8 02 c0       	mov    edx,0xc002d814
c00247ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247be:	89 10                	mov    DWORD PTR [eax],edx
c00247c0:	90                   	nop
c00247c1:	83 c4 0c             	add    esp,0xc
c00247c4:	c3                   	ret    
c00247c5:	90                   	nop

c00247c6 <ATA::flush(bool)>:
c00247c6:	53                   	push   ebx
c00247c7:	83 ec 08             	sub    esp,0x8
c00247ca:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00247cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247d3:	19 c0                	sbb    eax,eax
c00247d5:	83 e0 fd             	and    eax,0xfffffffd
c00247d8:	05 ea 00 00 00       	add    eax,0xea
c00247dd:	50                   	push   eax
c00247de:	6a 07                	push   0x7
c00247e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247e7:	50                   	push   eax
c00247e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00247ee:	e8 dd ef ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247f3:	83 c4 0c             	add    esp,0xc
c00247f6:	6a 00                	push   0x0
c00247f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247ff:	50                   	push   eax
c0024800:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024806:	e8 71 fb ff ff       	call   c002437c <IDE::polling(unsigned char, unsigned int)>
c002480b:	83 c4 18             	add    esp,0x18
c002480e:	5b                   	pop    ebx
c002480f:	c3                   	ret    

c0024810 <ATA::readyForCommand()>:
c0024810:	56                   	push   esi
c0024811:	53                   	push   ebx
c0024812:	31 db                	xor    ebx,ebx
c0024814:	50                   	push   eax
c0024815:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024819:	50                   	push   eax
c002481a:	6a 0c                	push   0xc
c002481c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024823:	50                   	push   eax
c0024824:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002482a:	e8 61 f0 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c002482f:	83 c4 10             	add    esp,0x10
c0024832:	a8 88                	test   al,0x88
c0024834:	74 23                	je     c0024859 <ATA::readyForCommand()+0x49>
c0024836:	43                   	inc    ebx
c0024837:	83 fb 63             	cmp    ebx,0x63
c002483a:	7e dd                	jle    c0024819 <ATA::readyForCommand()+0x9>
c002483c:	51                   	push   ecx
c002483d:	51                   	push   ecx
c002483e:	6a 00                	push   0x0
c0024840:	68 40 42 0f 00       	push   0xf4240
c0024845:	e8 37 9f ff ff       	call   c001e781 <nanoSleep(unsigned long long)>
c002484a:	83 c4 10             	add    esp,0x10
c002484d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024853:	75 c4                	jne    c0024819 <ATA::readyForCommand()+0x9>
c0024855:	31 c0                	xor    eax,eax
c0024857:	eb 02                	jmp    c002485b <ATA::readyForCommand()+0x4b>
c0024859:	b0 01                	mov    al,0x1
c002485b:	5a                   	pop    edx
c002485c:	5b                   	pop    ebx
c002485d:	5e                   	pop    esi
c002485e:	c3                   	ret    
c002485f:	90                   	nop

c0024860 <ATA::access(unsigned long long, int, void*, bool)>:
c0024860:	55                   	push   ebp
c0024861:	57                   	push   edi
c0024862:	56                   	push   esi
c0024863:	53                   	push   ebx
c0024864:	83 ec 2c             	sub    esp,0x2c
c0024867:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002486b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002486f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024873:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024877:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002487b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002487f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024883:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002488d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024893:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024897:	c1 e0 06             	shl    eax,0x6
c002489a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00248a2:	74 5d                	je     c0024901 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00248a4:	89 fa                	mov    edx,edi
c00248a6:	89 f0                	mov    eax,esi
c00248a8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00248ac:	c1 ea 1c             	shr    edx,0x1c
c00248af:	89 d1                	mov    ecx,edx
c00248b1:	09 c1                	or     ecx,eax
c00248b3:	74 25                	je     c00248da <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00248b5:	31 ed                	xor    ebp,ebp
c00248b7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00248be:	89 fa                	mov    edx,edi
c00248c0:	89 f0                	mov    eax,esi
c00248c2:	0f ad d0             	shrd   eax,edx,cl
c00248c5:	d3 ea                	shr    edx,cl
c00248c7:	f6 c1 20             	test   cl,0x20
c00248ca:	74 02                	je     c00248ce <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00248cc:	89 d0                	mov    eax,edx
c00248ce:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00248d2:	45                   	inc    ebp
c00248d3:	83 fd 06             	cmp    ebp,0x6
c00248d6:	75 df                	jne    c00248b7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00248d8:	eb 76                	jmp    c0024950 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00248da:	89 f0                	mov    eax,esi
c00248dc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00248e1:	89 fa                	mov    edx,edi
c00248e3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00248ea:	0f ac d0 10          	shrd   eax,edx,0x10
c00248ee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00248f3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00248f7:	c1 ee 18             	shr    esi,0x18
c00248fa:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00248ff:	eb 56                	jmp    c0024957 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024901:	6a 00                	push   0x0
c0024903:	6a 3f                	push   0x3f
c0024905:	57                   	push   edi
c0024906:	56                   	push   esi
c0024907:	e8 98 29 00 00       	call   c00272a4 <__umoddi3>
c002490c:	83 c4 10             	add    esp,0x10
c002490f:	40                   	inc    eax
c0024910:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024914:	6a 00                	push   0x0
c0024916:	68 f0 03 00 00       	push   0x3f0
c002491b:	57                   	push   edi
c002491c:	56                   	push   esi
c002491d:	e8 82 28 00 00       	call   c00271a4 <__udivdi3>
c0024922:	83 c4 10             	add    esp,0x10
c0024925:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002492a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024931:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024936:	6a 00                	push   0x0
c0024938:	6a 3f                	push   0x3f
c002493a:	57                   	push   edi
c002493b:	56                   	push   esi
c002493c:	e8 63 28 00 00       	call   c00271a4 <__udivdi3>
c0024941:	83 c4 10             	add    esp,0x10
c0024944:	89 c6                	mov    esi,eax
c0024946:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002494b:	83 e6 0f             	and    esi,0xf
c002494e:	eb 07                	jmp    c0024957 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024950:	31 f6                	xor    esi,esi
c0024952:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024957:	bf 01 00 00 00       	mov    edi,0x1
c002495c:	50                   	push   eax
c002495d:	6a 00                	push   0x0
c002495f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024966:	50                   	push   eax
c0024967:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002496b:	e8 6c f0 ff ff       	call   c00239dc <IDE::enableIRQs(unsigned char, bool)>
c0024970:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024973:	e8 98 fe ff ff       	call   c0024810 <ATA::readyForCommand()>
c0024978:	83 c4 10             	add    esp,0x10
c002497b:	84 c0                	test   al,al
c002497d:	0f 84 5a 02 00 00    	je     c0024bdd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024983:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024989:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002498f:	c1 e0 04             	shl    eax,0x4
c0024992:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024999:	09 c6                	or     esi,eax
c002499b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00249a0:	75 05                	jne    c00249a7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00249a2:	83 ce a0             	or     esi,0xffffffa0
c00249a5:	eb 03                	jmp    c00249aa <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00249a7:	83 ce e0             	or     esi,0xffffffe0
c00249aa:	89 f0                	mov    eax,esi
c00249ac:	0f b6 f0             	movzx  esi,al
c00249af:	56                   	push   esi
c00249b0:	6a 06                	push   0x6
c00249b2:	51                   	push   ecx
c00249b3:	52                   	push   edx
c00249b4:	e8 17 ee ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249b9:	83 c4 10             	add    esp,0x10
c00249bc:	6a 00                	push   0x0
c00249be:	6a 01                	push   0x1
c00249c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249c7:	50                   	push   eax
c00249c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249ce:	e8 fd ed ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249d3:	83 c4 10             	add    esp,0x10
c00249d6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00249db:	75 6e                	jne    c0024a4b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00249dd:	6a 00                	push   0x0
c00249df:	6a 08                	push   0x8
c00249e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249e8:	50                   	push   eax
c00249e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249ef:	e8 dc ed ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249f4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00249f9:	50                   	push   eax
c00249fa:	6a 09                	push   0x9
c00249fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a03:	50                   	push   eax
c0024a04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a0a:	e8 c1 ed ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a0f:	83 c4 20             	add    esp,0x20
c0024a12:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024a17:	50                   	push   eax
c0024a18:	6a 0a                	push   0xa
c0024a1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a21:	50                   	push   eax
c0024a22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a28:	e8 a3 ed ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a2d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024a32:	50                   	push   eax
c0024a33:	6a 0b                	push   0xb
c0024a35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a3c:	50                   	push   eax
c0024a3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a43:	e8 88 ed ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a48:	83 c4 20             	add    esp,0x20
c0024a4b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024a50:	50                   	push   eax
c0024a51:	6a 02                	push   0x2
c0024a53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a5a:	50                   	push   eax
c0024a5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a61:	e8 6a ed ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a66:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024a6b:	50                   	push   eax
c0024a6c:	6a 03                	push   0x3
c0024a6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a75:	50                   	push   eax
c0024a76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a7c:	e8 4f ed ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a81:	83 c4 20             	add    esp,0x20
c0024a84:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024a89:	50                   	push   eax
c0024a8a:	6a 04                	push   0x4
c0024a8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a93:	50                   	push   eax
c0024a94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a9a:	e8 31 ed ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024aa4:	50                   	push   eax
c0024aa5:	6a 05                	push   0x5
c0024aa7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aae:	50                   	push   eax
c0024aaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ab5:	e8 16 ed ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aba:	83 c4 20             	add    esp,0x20
c0024abd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024ac2:	0f 94 c0             	sete   al
c0024ac5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024aca:	74 09                	je     c0024ad5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024acc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024ad3:	eb 07                	jmp    c0024adc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024ad5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024adc:	0f b6 c0             	movzx  eax,al
c0024adf:	50                   	push   eax
c0024ae0:	6a 07                	push   0x7
c0024ae2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ae9:	50                   	push   eax
c0024aea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024af0:	e8 db ec ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024af5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024af9:	83 c4 10             	add    esp,0x10
c0024afc:	85 f6                	test   esi,esi
c0024afe:	0f 84 ba 00 00 00    	je     c0024bbe <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024b04:	50                   	push   eax
c0024b05:	6a 01                	push   0x1
c0024b07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b0e:	50                   	push   eax
c0024b0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b15:	e8 62 f8 ff ff       	call   c002437c <IDE::polling(unsigned char, unsigned int)>
c0024b1a:	83 c4 10             	add    esp,0x10
c0024b1d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024b23:	84 c0                	test   al,al
c0024b25:	74 2c                	je     c0024b53 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024b27:	0f b6 f8             	movzx  edi,al
c0024b2a:	0f b6 d2             	movzx  edx,dl
c0024b2d:	57                   	push   edi
c0024b2e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024b35:	50                   	push   eax
c0024b36:	52                   	push   edx
c0024b37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b3d:	e8 a4 f6 ff ff       	call   c00241e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024b42:	c7 04 24 ec d7 02 c0 	mov    DWORD PTR [esp],0xc002d7ec
c0024b49:	e8 7d e3 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0024b4e:	e9 87 00 00 00       	jmp    c0024bda <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024b53:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024b58:	74 33                	je     c0024b8d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024b5a:	31 ed                	xor    ebp,ebp
c0024b5c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024b60:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024b64:	50                   	push   eax
c0024b65:	50                   	push   eax
c0024b66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b6d:	50                   	push   eax
c0024b6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b74:	e8 45 ec ff ff       	call   c00237be <IDE::getBase(unsigned char)>
c0024b79:	89 c2                	mov    edx,eax
c0024b7b:	89 f8                	mov    eax,edi
c0024b7d:	66 ef                	out    dx,ax
c0024b7f:	45                   	inc    ebp
c0024b80:	83 c4 10             	add    esp,0x10
c0024b83:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024b89:	75 d1                	jne    c0024b5c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024b8b:	eb 23                	jmp    c0024bb0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024b8d:	0f b6 d2             	movzx  edx,dl
c0024b90:	51                   	push   ecx
c0024b91:	51                   	push   ecx
c0024b92:	52                   	push   edx
c0024b93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b99:	e8 20 ec ff ff       	call   c00237be <IDE::getBase(unsigned char)>
c0024b9e:	b9 00 01 00 00       	mov    ecx,0x100
c0024ba3:	89 c2                	mov    edx,eax
c0024ba5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024ba9:	fc                   	cld    
c0024baa:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024bad:	83 c4 10             	add    esp,0x10
c0024bb0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024bb8:	4e                   	dec    esi
c0024bb9:	e9 3e ff ff ff       	jmp    c0024afc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024bbe:	31 ff                	xor    edi,edi
c0024bc0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024bc5:	74 16                	je     c0024bdd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024bc7:	50                   	push   eax
c0024bc8:	50                   	push   eax
c0024bc9:	31 c0                	xor    eax,eax
c0024bcb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024bd0:	0f 94 c0             	sete   al
c0024bd3:	50                   	push   eax
c0024bd4:	53                   	push   ebx
c0024bd5:	e8 ec fb ff ff       	call   c00247c6 <ATA::flush(bool)>
c0024bda:	83 c4 10             	add    esp,0x10
c0024bdd:	83 c4 2c             	add    esp,0x2c
c0024be0:	89 f8                	mov    eax,edi
c0024be2:	5b                   	pop    ebx
c0024be3:	5e                   	pop    esi
c0024be4:	5f                   	pop    edi
c0024be5:	5d                   	pop    ebp
c0024be6:	c3                   	ret    
c0024be7:	90                   	nop

c0024be8 <ATA::read(unsigned long long, int, void*)>:
c0024be8:	57                   	push   edi
c0024be9:	b8 04 00 00 00       	mov    eax,0x4
c0024bee:	56                   	push   esi
c0024bef:	53                   	push   ebx
c0024bf0:	83 ec 10             	sub    esp,0x10
c0024bf3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024bf7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024bfb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024bfe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c02:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c06:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c0c:	77 3b                	ja     c0024c49 <ATA::read(unsigned long long, int, void*)+0x61>
c0024c0e:	b8 06 00 00 00       	mov    eax,0x6
c0024c13:	85 d2                	test   edx,edx
c0024c15:	74 32                	je     c0024c49 <ATA::read(unsigned long long, int, void*)+0x61>
c0024c17:	50                   	push   eax
c0024c18:	50                   	push   eax
c0024c19:	6a 00                	push   0x0
c0024c1b:	52                   	push   edx
c0024c1c:	53                   	push   ebx
c0024c1d:	57                   	push   edi
c0024c1e:	56                   	push   esi
c0024c1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c23:	e8 38 fc ff ff       	call   c0024860 <ATA::access(unsigned long long, int, void*, bool)>
c0024c28:	83 c4 20             	add    esp,0x20
c0024c2b:	85 c0                	test   eax,eax
c0024c2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c31:	75 11                	jne    c0024c44 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024c33:	01 1d 88 31 03 c0    	add    DWORD PTR ds:0xc0033188,ebx
c0024c39:	e8 92 bd fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024c3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024c42:	eb 05                	jmp    c0024c49 <ATA::read(unsigned long long, int, void*)+0x61>
c0024c44:	b8 01 00 00 00       	mov    eax,0x1
c0024c49:	83 c4 10             	add    esp,0x10
c0024c4c:	5b                   	pop    ebx
c0024c4d:	5e                   	pop    esi
c0024c4e:	5f                   	pop    edi
c0024c4f:	c3                   	ret    

c0024c50 <ATA::write(unsigned long long, int, void*)>:
c0024c50:	57                   	push   edi
c0024c51:	b8 04 00 00 00       	mov    eax,0x4
c0024c56:	56                   	push   esi
c0024c57:	53                   	push   ebx
c0024c58:	83 ec 10             	sub    esp,0x10
c0024c5b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c63:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c66:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c6a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c6e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c74:	77 3b                	ja     c0024cb1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024c76:	b8 06 00 00 00       	mov    eax,0x6
c0024c7b:	85 d2                	test   edx,edx
c0024c7d:	74 32                	je     c0024cb1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024c7f:	50                   	push   eax
c0024c80:	50                   	push   eax
c0024c81:	6a 01                	push   0x1
c0024c83:	52                   	push   edx
c0024c84:	53                   	push   ebx
c0024c85:	57                   	push   edi
c0024c86:	56                   	push   esi
c0024c87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c8b:	e8 d0 fb ff ff       	call   c0024860 <ATA::access(unsigned long long, int, void*, bool)>
c0024c90:	83 c4 20             	add    esp,0x20
c0024c93:	85 c0                	test   eax,eax
c0024c95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c99:	75 11                	jne    c0024cac <ATA::write(unsigned long long, int, void*)+0x5c>
c0024c9b:	01 1d 84 31 03 c0    	add    DWORD PTR ds:0xc0033184,ebx
c0024ca1:	e8 2a bd fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024ca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024caa:	eb 05                	jmp    c0024cb1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024cac:	b8 01 00 00 00       	mov    eax,0x1
c0024cb1:	83 c4 10             	add    esp,0x10
c0024cb4:	5b                   	pop    ebx
c0024cb5:	5e                   	pop    esi
c0024cb6:	5f                   	pop    edi
c0024cb7:	c3                   	ret    

c0024cb8 <ATA::detectCHS()>:
c0024cb8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024cbc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024cc2:	c1 e0 06             	shl    eax,0x6
c0024cc5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024ccb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024cd5:	c7 44 24 04 f7 d7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d7f7
c0024cdd:	e9 a5 5b ff ff       	jmp    c001a887 <Krnl::panic(char const*)>

c0024ce2 <ATA::open(int, int, void*)>:
c0024ce2:	53                   	push   ebx
c0024ce3:	83 ec 08             	sub    esp,0x8
c0024ce6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024cea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024cf2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024cf8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024cfe:	c1 e0 06             	shl    eax,0x6
c0024d01:	01 d0                	add    eax,edx
c0024d03:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d0a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024d10:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024d17:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024d21:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024d27:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d2e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024d35:	75 0c                	jne    c0024d43 <ATA::open(int, int, void*)+0x61>
c0024d37:	83 ec 0c             	sub    esp,0xc
c0024d3a:	53                   	push   ebx
c0024d3b:	e8 78 ff ff ff       	call   c0024cb8 <ATA::detectCHS()>
c0024d40:	83 c4 10             	add    esp,0x10
c0024d43:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024d49:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024d4f:	c1 e0 06             	shl    eax,0x6
c0024d52:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024d59:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024d63:	d1 e8                	shr    eax,1
c0024d65:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024d6b:	6a 04                	push   0x4
c0024d6d:	6a 0c                	push   0xc
c0024d6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d76:	50                   	push   eax
c0024d77:	52                   	push   edx
c0024d78:	e8 53 ea ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d7d:	90                   	nop
c0024d7e:	90                   	nop
c0024d7f:	6a 00                	push   0x0
c0024d81:	6a 0c                	push   0xc
c0024d83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d8a:	50                   	push   eax
c0024d8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d91:	e8 3a ea ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d96:	83 c4 14             	add    esp,0x14
c0024d99:	53                   	push   ebx
c0024d9a:	e8 fb f9 fe ff       	call   c001479a <PhysicalDisk::startCache()>
c0024d9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024da2:	e8 d3 1c ff ff       	call   c0016a7a <createPartitionsForDisk(PhysicalDisk*)>
c0024da7:	31 c0                	xor    eax,eax
c0024da9:	83 c4 18             	add    esp,0x18
c0024dac:	5b                   	pop    ebx
c0024dad:	c3                   	ret    

c0024dae <ATAPI::write(unsigned long long, int, void*)>:
c0024dae:	b8 03 00 00 00       	mov    eax,0x3
c0024db3:	c3                   	ret    

c0024db4 <ATAPI::close(int, int, void*)>:
c0024db4:	83 ec 0c             	sub    esp,0xc
c0024db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dbb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024dc1:	85 c0                	test   eax,eax
c0024dc3:	74 0c                	je     c0024dd1 <ATAPI::close(int, int, void*)+0x1d>
c0024dc5:	83 ec 0c             	sub    esp,0xc
c0024dc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0024dca:	50                   	push   eax
c0024dcb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024dce:	83 c4 10             	add    esp,0x10
c0024dd1:	31 c0                	xor    eax,eax
c0024dd3:	83 c4 0c             	add    esp,0xc
c0024dd6:	c3                   	ret    
c0024dd7:	90                   	nop

c0024dd8 <ATAPI::ATAPI()>:
c0024dd8:	83 ec 0c             	sub    esp,0xc
c0024ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ddf:	83 ec 04             	sub    esp,0x4
c0024de2:	68 00 08 00 00       	push   0x800
c0024de7:	68 31 d9 02 c0       	push   0xc002d931
c0024dec:	50                   	push   eax
c0024ded:	e8 40 f9 fe ff       	call   c0014732 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024df2:	83 c4 10             	add    esp,0x10
c0024df5:	ba 4c d8 02 c0       	mov    edx,0xc002d84c
c0024dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dfe:	89 10                	mov    DWORD PTR [eax],edx
c0024e00:	90                   	nop
c0024e01:	83 c4 0c             	add    esp,0xc
c0024e04:	c3                   	ret    
c0024e05:	90                   	nop

c0024e06 <ATAPI::readyForCommand()>:
c0024e06:	56                   	push   esi
c0024e07:	53                   	push   ebx
c0024e08:	31 db                	xor    ebx,ebx
c0024e0a:	50                   	push   eax
c0024e0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e0f:	50                   	push   eax
c0024e10:	6a 0c                	push   0xc
c0024e12:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024e19:	50                   	push   eax
c0024e1a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024e20:	e8 6b ea ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0024e25:	83 c4 10             	add    esp,0x10
c0024e28:	a8 88                	test   al,0x88
c0024e2a:	74 23                	je     c0024e4f <ATAPI::readyForCommand()+0x49>
c0024e2c:	43                   	inc    ebx
c0024e2d:	83 fb 63             	cmp    ebx,0x63
c0024e30:	7e dd                	jle    c0024e0f <ATAPI::readyForCommand()+0x9>
c0024e32:	51                   	push   ecx
c0024e33:	51                   	push   ecx
c0024e34:	6a 00                	push   0x0
c0024e36:	68 40 42 0f 00       	push   0xf4240
c0024e3b:	e8 41 99 ff ff       	call   c001e781 <nanoSleep(unsigned long long)>
c0024e40:	83 c4 10             	add    esp,0x10
c0024e43:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024e49:	75 c4                	jne    c0024e0f <ATAPI::readyForCommand()+0x9>
c0024e4b:	31 c0                	xor    eax,eax
c0024e4d:	eb 02                	jmp    c0024e51 <ATAPI::readyForCommand()+0x4b>
c0024e4f:	b0 01                	mov    al,0x1
c0024e51:	5a                   	pop    edx
c0024e52:	5b                   	pop    ebx
c0024e53:	5e                   	pop    esi
c0024e54:	c3                   	ret    
c0024e55:	90                   	nop

c0024e56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024e56:	55                   	push   ebp
c0024e57:	57                   	push   edi
c0024e58:	56                   	push   esi
c0024e59:	53                   	push   ebx
c0024e5a:	83 ec 20             	sub    esp,0x20
c0024e5d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024e61:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024e65:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024e69:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024e6d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024e71:	6a 01                	push   0x1
c0024e73:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e7a:	50                   	push   eax
c0024e7b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e81:	e8 56 eb ff ff       	call   c00239dc <IDE::enableIRQs(unsigned char, bool)>
c0024e86:	5e                   	pop    esi
c0024e87:	58                   	pop    eax
c0024e88:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e8f:	50                   	push   eax
c0024e90:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e96:	e8 0f e9 ff ff       	call   c00237aa <IDE::prepareInterrupt(unsigned char)>
c0024e9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024e9e:	e8 63 ff ff ff       	call   c0024e06 <ATAPI::readyForCommand()>
c0024ea3:	83 c4 10             	add    esp,0x10
c0024ea6:	84 c0                	test   al,al
c0024ea8:	75 0a                	jne    c0024eb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024eaa:	bb 01 00 00 00       	mov    ebx,0x1
c0024eaf:	e9 57 02 00 00       	jmp    c002510b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024eb4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024eba:	c1 e0 04             	shl    eax,0x4
c0024ebd:	0f b6 c0             	movzx  eax,al
c0024ec0:	50                   	push   eax
c0024ec1:	6a 06                	push   0x6
c0024ec3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024eca:	50                   	push   eax
c0024ecb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ed1:	e8 fa e8 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ed6:	6a 00                	push   0x0
c0024ed8:	6a 01                	push   0x1
c0024eda:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ee1:	50                   	push   eax
c0024ee2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ee8:	e8 e3 e8 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024eed:	83 c4 20             	add    esp,0x20
c0024ef0:	0f b6 c3             	movzx  eax,bl
c0024ef3:	0f b6 df             	movzx  ebx,bh
c0024ef6:	50                   	push   eax
c0024ef7:	6a 04                	push   0x4
c0024ef9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f00:	50                   	push   eax
c0024f01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f07:	e8 c4 e8 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f0c:	53                   	push   ebx
c0024f0d:	6a 05                	push   0x5
c0024f0f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f16:	50                   	push   eax
c0024f17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f1d:	e8 ae e8 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f22:	83 c4 20             	add    esp,0x20
c0024f25:	68 a0 00 00 00       	push   0xa0
c0024f2a:	6a 07                	push   0x7
c0024f2c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f33:	50                   	push   eax
c0024f34:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f3a:	e8 91 e8 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f3f:	83 c4 0c             	add    esp,0xc
c0024f42:	6a 01                	push   0x1
c0024f44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f4b:	50                   	push   eax
c0024f4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f52:	e8 25 f4 ff ff       	call   c002437c <IDE::polling(unsigned char, unsigned int)>
c0024f57:	83 c4 10             	add    esp,0x10
c0024f5a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024f60:	84 c0                	test   al,al
c0024f62:	74 23                	je     c0024f87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024f64:	0f b6 d8             	movzx  ebx,al
c0024f67:	0f b6 d2             	movzx  edx,dl
c0024f6a:	53                   	push   ebx
c0024f6b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024f72:	50                   	push   eax
c0024f73:	52                   	push   edx
c0024f74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f7a:	e8 67 f2 ff ff       	call   c00241e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024f7f:	83 c4 10             	add    esp,0x10
c0024f82:	e9 84 01 00 00       	jmp    c002510b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f87:	0f b6 d2             	movzx  edx,dl
c0024f8a:	53                   	push   ebx
c0024f8b:	53                   	push   ebx
c0024f8c:	52                   	push   edx
c0024f8d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f93:	e8 26 e8 ff ff       	call   c00237be <IDE::getBase(unsigned char)>
c0024f98:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024f9c:	b9 06 00 00 00       	mov    ecx,0x6
c0024fa1:	89 c2                	mov    edx,eax
c0024fa3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024fa6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024faa:	83 c4 10             	add    esp,0x10
c0024fad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024fb3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024fba:	85 db                	test   ebx,ebx
c0024fbc:	0f 84 ec 00 00 00    	je     c00250ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024fc2:	51                   	push   ecx
c0024fc3:	51                   	push   ecx
c0024fc4:	52                   	push   edx
c0024fc5:	50                   	push   eax
c0024fc6:	e8 73 e9 ff ff       	call   c002393e <IDE::waitInterrupt(unsigned char)>
c0024fcb:	83 c4 10             	add    esp,0x10
c0024fce:	84 c0                	test   al,al
c0024fd0:	0f 84 d4 fe ff ff    	je     c0024eaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024fd6:	56                   	push   esi
c0024fd7:	56                   	push   esi
c0024fd8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fdf:	50                   	push   eax
c0024fe0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fe6:	e8 bf e7 ff ff       	call   c00237aa <IDE::prepareInterrupt(unsigned char)>
c0024feb:	83 c4 0c             	add    esp,0xc
c0024fee:	6a 04                	push   0x4
c0024ff0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ff7:	50                   	push   eax
c0024ff8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ffe:	e8 8d e8 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c0025003:	83 c4 0c             	add    esp,0xc
c0025006:	89 c6                	mov    esi,eax
c0025008:	6a 05                	push   0x5
c002500a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025011:	50                   	push   eax
c0025012:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025018:	e8 73 e8 ff ff       	call   c0023890 <IDE::read(unsigned char, unsigned char)>
c002501d:	89 f1                	mov    ecx,esi
c002501f:	0f b6 c0             	movzx  eax,al
c0025022:	0f b6 f1             	movzx  esi,cl
c0025025:	c1 e0 08             	shl    eax,0x8
c0025028:	09 c6                	or     esi,eax
c002502a:	d1 fe                	sar    esi,1
c002502c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025030:	83 c4 10             	add    esp,0x10
c0025033:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025038:	74 41                	je     c002507b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002503a:	31 c9                	xor    ecx,ecx
c002503c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025042:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025049:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002504d:	75 0a                	jne    c0025059 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002504f:	01 c9                	add    ecx,ecx
c0025051:	01 cd                	add    ebp,ecx
c0025053:	4b                   	dec    ebx
c0025054:	e9 54 ff ff ff       	jmp    c0024fad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025059:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002505e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025062:	51                   	push   ecx
c0025063:	51                   	push   ecx
c0025064:	52                   	push   edx
c0025065:	50                   	push   eax
c0025066:	e8 53 e7 ff ff       	call   c00237be <IDE::getBase(unsigned char)>
c002506b:	89 c2                	mov    edx,eax
c002506d:	89 f0                	mov    eax,esi
c002506f:	66 ef                	out    dx,ax
c0025071:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025075:	83 c4 10             	add    esp,0x10
c0025078:	41                   	inc    ecx
c0025079:	eb c1                	jmp    c002503c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002507b:	31 f6                	xor    esi,esi
c002507d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025083:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002508a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002508e:	75 06                	jne    c0025096 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025090:	01 f6                	add    esi,esi
c0025092:	01 f5                	add    ebp,esi
c0025094:	eb bd                	jmp    c0025053 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025096:	51                   	push   ecx
c0025097:	51                   	push   ecx
c0025098:	52                   	push   edx
c0025099:	50                   	push   eax
c002509a:	e8 1f e7 ff ff       	call   c00237be <IDE::getBase(unsigned char)>
c002509f:	89 c2                	mov    edx,eax
c00250a1:	66 ed                	in     ax,dx
c00250a3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00250a8:	83 c4 10             	add    esp,0x10
c00250ab:	46                   	inc    esi
c00250ac:	eb cf                	jmp    c002507d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00250ae:	51                   	push   ecx
c00250af:	51                   	push   ecx
c00250b0:	52                   	push   edx
c00250b1:	50                   	push   eax
c00250b2:	e8 87 e8 ff ff       	call   c002393e <IDE::waitInterrupt(unsigned char)>
c00250b7:	83 c4 10             	add    esp,0x10
c00250ba:	84 c0                	test   al,al
c00250bc:	0f 84 e8 fd ff ff    	je     c0024eaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00250c2:	bb a0 86 01 00       	mov    ebx,0x186a0
c00250c7:	52                   	push   edx
c00250c8:	52                   	push   edx
c00250c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250d0:	50                   	push   eax
c00250d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250d7:	e8 ce e6 ff ff       	call   c00237aa <IDE::prepareInterrupt(unsigned char)>
c00250dc:	83 c4 10             	add    esp,0x10
c00250df:	50                   	push   eax
c00250e0:	50                   	push   eax
c00250e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250e8:	50                   	push   eax
c00250e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250ef:	e8 ca e6 ff ff       	call   c00237be <IDE::getBase(unsigned char)>
c00250f4:	8d 50 07             	lea    edx,[eax+0x7]
c00250f7:	ec                   	in     al,dx
c00250f8:	83 c4 10             	add    esp,0x10
c00250fb:	a8 88                	test   al,0x88
c00250fd:	74 0a                	je     c0025109 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00250ff:	4b                   	dec    ebx
c0025100:	75 dd                	jne    c00250df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025102:	bb 02 00 00 00       	mov    ebx,0x2
c0025107:	eb 02                	jmp    c002510b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025109:	31 db                	xor    ebx,ebx
c002510b:	83 c4 1c             	add    esp,0x1c
c002510e:	89 d8                	mov    eax,ebx
c0025110:	5b                   	pop    ebx
c0025111:	5e                   	pop    esi
c0025112:	5f                   	pop    edi
c0025113:	5d                   	pop    ebp
c0025114:	c3                   	ret    
c0025115:	90                   	nop

c0025116 <ATAPI::diskRemoved()>:
c0025116:	83 ec 18             	sub    esp,0x18
c0025119:	68 3d d9 02 c0       	push   0xc002d93d
c002511e:	e8 a8 dd fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0025123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025127:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002512e:	83 c4 1c             	add    esp,0x1c
c0025131:	c3                   	ret    

c0025132 <ATAPI::eject()>:
c0025132:	57                   	push   edi
c0025133:	b9 03 00 00 00       	mov    ecx,0x3
c0025138:	53                   	push   ebx
c0025139:	83 ec 14             	sub    esp,0x14
c002513c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025140:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025144:	fc                   	cld    
c0025145:	31 c0                	xor    eax,eax
c0025147:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025149:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002514e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025153:	50                   	push   eax
c0025154:	50                   	push   eax
c0025155:	6a 00                	push   0x0
c0025157:	6a 00                	push   0x0
c0025159:	6a 00                	push   0x0
c002515b:	6a 02                	push   0x2
c002515d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025161:	50                   	push   eax
c0025162:	53                   	push   ebx
c0025163:	e8 ee fc ff ff       	call   c0024e56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025168:	83 c4 14             	add    esp,0x14
c002516b:	53                   	push   ebx
c002516c:	e8 a5 ff ff ff       	call   c0025116 <ATAPI::diskRemoved()>
c0025171:	83 c4 24             	add    esp,0x24
c0025174:	31 c0                	xor    eax,eax
c0025176:	5b                   	pop    ebx
c0025177:	5f                   	pop    edi
c0025178:	c3                   	ret    
c0025179:	90                   	nop

c002517a <ATAPI::diskInserted()>:
c002517a:	53                   	push   ebx
c002517b:	83 ec 14             	sub    esp,0x14
c002517e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025182:	68 54 d9 02 c0       	push   0xc002d954
c0025187:	e8 3f dd fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c002518c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025193:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025196:	e8 ff f5 fe ff       	call   c001479a <PhysicalDisk::startCache()>
c002519b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002519f:	83 c4 18             	add    esp,0x18
c00251a2:	5b                   	pop    ebx
c00251a3:	e9 d2 18 ff ff       	jmp    c0016a7a <createPartitionsForDisk(PhysicalDisk*)>

c00251a8 <ATAPI::detectMedia()>:
c00251a8:	56                   	push   esi
c00251a9:	53                   	push   ebx
c00251aa:	83 ec 28             	sub    esp,0x28
c00251ad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251b1:	6a 0c                	push   0xc
c00251b3:	6a 00                	push   0x0
c00251b5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251b9:	56                   	push   esi
c00251ba:	e8 c1 b5 fd ff       	call   c0000780 <memset>
c00251bf:	58                   	pop    eax
c00251c0:	5a                   	pop    edx
c00251c1:	6a 00                	push   0x0
c00251c3:	6a 00                	push   0x0
c00251c5:	6a 00                	push   0x0
c00251c7:	6a 00                	push   0x0
c00251c9:	56                   	push   esi
c00251ca:	53                   	push   ebx
c00251cb:	e8 86 fc ff ff       	call   c0024e56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251d0:	83 c4 1c             	add    esp,0x1c
c00251d3:	6a 0c                	push   0xc
c00251d5:	6a 00                	push   0x0
c00251d7:	56                   	push   esi
c00251d8:	e8 a3 b5 fd ff       	call   c0000780 <memset>
c00251dd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00251e2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00251e7:	59                   	pop    ecx
c00251e8:	58                   	pop    eax
c00251e9:	6a 01                	push   0x1
c00251eb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00251ef:	50                   	push   eax
c00251f0:	6a 00                	push   0x0
c00251f2:	6a 12                	push   0x12
c00251f4:	56                   	push   esi
c00251f5:	53                   	push   ebx
c00251f6:	e8 5b fc ff ff       	call   c0024e56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251fb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00251ff:	83 c4 20             	add    esp,0x20
c0025202:	83 e0 7f             	and    eax,0x7f
c0025205:	3c 70                	cmp    al,0x70
c0025207:	74 15                	je     c002521e <ATAPI::detectMedia()+0x76>
c0025209:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025210:	75 0c                	jne    c002521e <ATAPI::detectMedia()+0x76>
c0025212:	83 ec 0c             	sub    esp,0xc
c0025215:	53                   	push   ebx
c0025216:	e8 5f ff ff ff       	call   c002517a <ATAPI::diskInserted()>
c002521b:	83 c4 10             	add    esp,0x10
c002521e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025222:	83 e0 0f             	and    eax,0xf
c0025225:	3c 02                	cmp    al,0x2
c0025227:	75 1b                	jne    c0025244 <ATAPI::detectMedia()+0x9c>
c0025229:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002522e:	75 2d                	jne    c002525d <ATAPI::detectMedia()+0xb5>
c0025230:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025237:	74 24                	je     c002525d <ATAPI::detectMedia()+0xb5>
c0025239:	83 ec 0c             	sub    esp,0xc
c002523c:	53                   	push   ebx
c002523d:	e8 d4 fe ff ff       	call   c0025116 <ATAPI::diskRemoved()>
c0025242:	eb 16                	jmp    c002525a <ATAPI::detectMedia()+0xb2>
c0025244:	84 c0                	test   al,al
c0025246:	75 15                	jne    c002525d <ATAPI::detectMedia()+0xb5>
c0025248:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002524f:	75 0c                	jne    c002525d <ATAPI::detectMedia()+0xb5>
c0025251:	83 ec 0c             	sub    esp,0xc
c0025254:	53                   	push   ebx
c0025255:	e8 20 ff ff ff       	call   c002517a <ATAPI::diskInserted()>
c002525a:	83 c4 10             	add    esp,0x10
c002525d:	83 c4 24             	add    esp,0x24
c0025260:	5b                   	pop    ebx
c0025261:	5e                   	pop    esi
c0025262:	c3                   	ret    
c0025263:	90                   	nop

c0025264 <ATAPI::open(int, int, void*)>:
c0025264:	53                   	push   ebx
c0025265:	83 ec 08             	sub    esp,0x8
c0025268:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002526c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025274:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002527a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025280:	c1 e0 06             	shl    eax,0x6
c0025283:	01 d0                	add    eax,edx
c0025285:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002528c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025292:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025299:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252a3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00252a9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252b0:	6a 04                	push   0x4
c00252b2:	6a 0c                	push   0xc
c00252b4:	51                   	push   ecx
c00252b5:	52                   	push   edx
c00252b6:	e8 15 e5 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252bb:	90                   	nop
c00252bc:	90                   	nop
c00252bd:	6a 00                	push   0x0
c00252bf:	6a 0c                	push   0xc
c00252c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00252c8:	50                   	push   eax
c00252c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00252cf:	e8 fc e4 ff ff       	call   c00237d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252d4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00252db:	83 c4 14             	add    esp,0x14
c00252de:	53                   	push   ebx
c00252df:	e8 c4 fe ff ff       	call   c00251a8 <ATAPI::detectMedia()>
c00252e4:	31 c0                	xor    eax,eax
c00252e6:	83 c4 18             	add    esp,0x18
c00252e9:	5b                   	pop    ebx
c00252ea:	c3                   	ret    
c00252eb:	90                   	nop

c00252ec <ATAPI::read(unsigned long long, int, void*)>:
c00252ec:	55                   	push   ebp
c00252ed:	57                   	push   edi
c00252ee:	56                   	push   esi
c00252ef:	53                   	push   ebx
c00252f0:	83 ec 1c             	sub    esp,0x1c
c00252f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00252f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252fb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00252ff:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025306:	74 41                	je     c0025349 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025308:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002530c:	b9 03 00 00 00       	mov    ecx,0x3
c0025311:	fc                   	cld    
c0025312:	31 c0                	xor    eax,eax
c0025314:	86 fb                	xchg   bl,bh
c0025316:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025318:	c1 c3 10             	rol    ebx,0x10
c002531b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025320:	89 e8                	mov    eax,ebp
c0025322:	86 fb                	xchg   bl,bh
c0025324:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025328:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002532c:	50                   	push   eax
c002532d:	50                   	push   eax
c002532e:	55                   	push   ebp
c002532f:	c1 e5 0b             	shl    ebp,0xb
c0025332:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025336:	6a 00                	push   0x0
c0025338:	55                   	push   ebp
c0025339:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002533d:	50                   	push   eax
c002533e:	56                   	push   esi
c002533f:	e8 12 fb ff ff       	call   c0024e56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025344:	83 c4 20             	add    esp,0x20
c0025347:	eb 1a                	jmp    c0025363 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025349:	83 ec 0c             	sub    esp,0xc
c002534c:	56                   	push   esi
c002534d:	e8 56 fe ff ff       	call   c00251a8 <ATAPI::detectMedia()>
c0025352:	83 c4 10             	add    esp,0x10
c0025355:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002535c:	75 aa                	jne    c0025308 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002535e:	b8 02 00 00 00       	mov    eax,0x2
c0025363:	83 c4 1c             	add    esp,0x1c
c0025366:	5b                   	pop    ebx
c0025367:	5e                   	pop    esi
c0025368:	5f                   	pop    edi
c0025369:	5d                   	pop    ebp
c002536a:	c3                   	ret    
c002536b:	90                   	nop

c002536c <SATA::close(int, int, void*)>:
c002536c:	83 ec 0c             	sub    esp,0xc
c002536f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025373:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025379:	85 c0                	test   eax,eax
c002537b:	74 0c                	je     c0025389 <SATA::close(int, int, void*)+0x1d>
c002537d:	83 ec 0c             	sub    esp,0xc
c0025380:	8b 10                	mov    edx,DWORD PTR [eax]
c0025382:	50                   	push   eax
c0025383:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025386:	83 c4 10             	add    esp,0x10
c0025389:	31 c0                	xor    eax,eax
c002538b:	83 c4 0c             	add    esp,0xc
c002538e:	c3                   	ret    
c002538f:	90                   	nop

c0025390 <SATA::powerSaving(PowerSavingLevel)>:
c0025390:	c3                   	ret    
c0025391:	90                   	nop

c0025392 <SATA::open(int, int, void*)>:
c0025392:	56                   	push   esi
c0025393:	53                   	push   ebx
c0025394:	50                   	push   eax
c0025395:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002539d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00253a7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253ad:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253bb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253c5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253cb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00253d2:	e8 a9 ab fe ff       	call   c000ff80 <Phys::allocatePage()>
c00253d7:	89 c6                	mov    esi,eax
c00253d9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00253df:	81 c6 00 10 00 00    	add    esi,0x1000
c00253e5:	e8 96 ab fe ff       	call   c000ff80 <Phys::allocatePage()>
c00253ea:	39 c6                	cmp    esi,eax
c00253ec:	74 10                	je     c00253fe <SATA::open(int, int, void*)+0x6c>
c00253ee:	83 ec 0c             	sub    esp,0xc
c00253f1:	68 7c d8 02 c0       	push   0xc002d87c
c00253f6:	e8 8c 54 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00253fb:	83 c4 10             	add    esp,0x10
c00253fe:	83 ec 0c             	sub    esp,0xc
c0025401:	6a 02                	push   0x2
c0025403:	e8 bd c6 fe ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c0025408:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002540e:	6a 03                	push   0x3
c0025410:	50                   	push   eax
c0025411:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025417:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c002541d:	e8 da ce fe ff       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c0025422:	83 c4 14             	add    esp,0x14
c0025425:	53                   	push   ebx
c0025426:	e8 6f f3 fe ff       	call   c001479a <PhysicalDisk::startCache()>
c002542b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002542e:	e8 47 16 ff ff       	call   c0016a7a <createPartitionsForDisk(PhysicalDisk*)>
c0025433:	83 c4 14             	add    esp,0x14
c0025436:	31 c0                	xor    eax,eax
c0025438:	5b                   	pop    ebx
c0025439:	5e                   	pop    esi
c002543a:	c3                   	ret    
c002543b:	90                   	nop

c002543c <SATA::SATA()>:
c002543c:	83 ec 0c             	sub    esp,0xc
c002543f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025443:	83 ec 04             	sub    esp,0x4
c0025446:	68 00 02 00 00       	push   0x200
c002544b:	68 90 d8 02 c0       	push   0xc002d890
c0025450:	50                   	push   eax
c0025451:	e8 dc f2 fe ff       	call   c0014732 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025456:	83 c4 10             	add    esp,0x10
c0025459:	ba 00 d9 02 c0       	mov    edx,0xc002d900
c002545e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025462:	89 10                	mov    DWORD PTR [eax],edx
c0025464:	90                   	nop
c0025465:	83 c4 0c             	add    esp,0xc
c0025468:	c3                   	ret    
c0025469:	90                   	nop

c002546a <SATA::access(unsigned long long, int, void*, bool)>:
c002546a:	55                   	push   ebp
c002546b:	57                   	push   edi
c002546c:	56                   	push   esi
c002546d:	53                   	push   ebx
c002546e:	83 ec 2c             	sub    esp,0x2c
c0025471:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025475:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0025479:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002547d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0025481:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025485:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002548a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002548e:	7e 10                	jle    c00254a0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025490:	83 ec 0c             	sub    esp,0xc
c0025493:	68 a0 d8 02 c0       	push   0xc002d8a0
c0025498:	e8 ea 53 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c002549d:	83 c4 10             	add    esp,0x10
c00254a0:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c00254a6:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00254ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00254b6:	89 f0                	mov    eax,esi
c00254b8:	c1 e0 07             	shl    eax,0x7
c00254bb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00254bf:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00254c9:	53                   	push   ebx
c00254ca:	8d 46 02             	lea    eax,[esi+0x2]
c00254cd:	53                   	push   ebx
c00254ce:	c1 e0 07             	shl    eax,0x7
c00254d1:	bb 01 00 00 00       	mov    ebx,0x1
c00254d6:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00254da:	50                   	push   eax
c00254db:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00254e1:	e8 ae ef ff ff       	call   c0024494 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00254e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00254ea:	83 c4 10             	add    esp,0x10
c00254ed:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c00254f2:	0f 84 ce 01 00 00    	je     c00256c6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00254f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00254fc:	c1 e0 09             	shl    eax,0x9
c00254ff:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0025504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025508:	74 17                	je     c0025521 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c002550a:	51                   	push   ecx
c002550b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002550f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0025513:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0025519:	e8 4a b2 fd ff       	call   c0000768 <memcpy>
c002551e:	83 c4 10             	add    esp,0x10
c0025521:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025527:	8d 46 02             	lea    eax,[esi+0x2]
c002552a:	c1 e0 07             	shl    eax,0x7
c002552d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0025531:	8b 00                	mov    eax,DWORD PTR [eax]
c0025533:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025539:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002553f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025543:	c1 e1 05             	shl    ecx,0x5
c0025546:	01 c8                	add    eax,ecx
c0025548:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002554c:	8a 18                	mov    bl,BYTE PTR [eax]
c002554e:	83 e1 01             	and    ecx,0x1
c0025551:	83 e3 bf             	and    ebx,0xffffffbf
c0025554:	c1 e1 06             	shl    ecx,0x6
c0025557:	09 d9                	or     ecx,ebx
c0025559:	88 08                	mov    BYTE PTR [eax],cl
c002555b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002555d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025563:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025569:	89 08                	mov    DWORD PTR [eax],ecx
c002556b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025571:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025577:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002557d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025580:	52                   	push   edx
c0025581:	68 90 00 00 00       	push   0x90
c0025586:	6a 00                	push   0x0
c0025588:	53                   	push   ebx
c0025589:	e8 f2 b1 fd ff       	call   c0000780 <memset>
c002558e:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0025594:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0025598:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002559e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00255a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00255a6:	83 c4 10             	add    esp,0x10
c00255a9:	8d 48 ff             	lea    ecx,[eax-0x1]
c00255ac:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00255b2:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00255b8:	25 00 00 c0 ff       	and    eax,0xffc00000
c00255bd:	09 c8                	or     eax,ecx
c00255bf:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00255c5:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00255c8:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00255cf:	66 25 00 7f          	and    ax,0x7f00
c00255d3:	66 0d 27 80          	or     ax,0x8027
c00255d7:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c00255dc:	66 89 03             	mov    WORD PTR [ebx],ax
c00255df:	19 c0                	sbb    eax,eax
c00255e1:	83 e0 f0             	and    eax,0xfffffff0
c00255e4:	83 c0 35             	add    eax,0x35
c00255e7:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c00255ea:	89 f8                	mov    eax,edi
c00255ec:	c1 e8 10             	shr    eax,0x10
c00255ef:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00255f2:	89 f8                	mov    eax,edi
c00255f4:	c1 e8 18             	shr    eax,0x18
c00255f7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00255fa:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00255fe:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025601:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025605:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025608:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002560c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025610:	89 f3                	mov    ebx,esi
c0025612:	31 c0                	xor    eax,eax
c0025614:	c1 e3 07             	shl    ebx,0x7
c0025617:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c002561b:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0025621:	80 e1 88             	and    cl,0x88
c0025624:	74 0a                	je     c0025630 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0025626:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002562b:	74 0a                	je     c0025637 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c002562d:	40                   	inc    eax
c002562e:	eb eb                	jmp    c002561b <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0025630:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025635:	75 0a                	jne    c0025641 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0025637:	83 ec 0c             	sub    esp,0xc
c002563a:	68 d9 d8 02 c0       	push   0xc002d8d9
c002563f:	eb 56                	jmp    c0025697 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0025641:	b8 01 00 00 00       	mov    eax,0x1
c0025646:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c002564a:	c1 e6 07             	shl    esi,0x7
c002564d:	d3 e0                	shl    eax,cl
c002564f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0025653:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0025659:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c002565f:	85 c8                	test   eax,ecx
c0025661:	74 20                	je     c0025683 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0025663:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0025669:	0f ba e1 1e          	bt     ecx,0x1e
c002566d:	73 ea                	jae    c0025659 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c002566f:	83 ec 0c             	sub    esp,0xc
c0025672:	31 db                	xor    ebx,ebx
c0025674:	68 e7 d8 02 c0       	push   0xc002d8e7
c0025679:	e8 09 52 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c002567e:	83 c4 10             	add    esp,0x10
c0025681:	eb 43                	jmp    c00256c6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025683:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0025689:	0f ba e0 1e          	bt     eax,0x1e
c002568d:	73 17                	jae    c00256a6 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c002568f:	83 ec 0c             	sub    esp,0xc
c0025692:	68 e7 d8 02 c0       	push   0xc002d8e7
c0025697:	e8 eb 51 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c002569c:	bb 01 00 00 00       	mov    ebx,0x1
c00256a1:	83 c4 10             	add    esp,0x10
c00256a4:	eb 20                	jmp    c00256c6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00256a6:	31 db                	xor    ebx,ebx
c00256a8:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c00256ad:	75 17                	jne    c00256c6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00256af:	50                   	push   eax
c00256b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256b4:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00256ba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00256be:	e8 a5 b0 fd ff       	call   c0000768 <memcpy>
c00256c3:	83 c4 10             	add    esp,0x10
c00256c6:	83 c4 2c             	add    esp,0x2c
c00256c9:	89 d8                	mov    eax,ebx
c00256cb:	5b                   	pop    ebx
c00256cc:	5e                   	pop    esi
c00256cd:	5f                   	pop    edi
c00256ce:	5d                   	pop    ebp
c00256cf:	c3                   	ret    

c00256d0 <SATA::read(unsigned long long, int, void*)>:
c00256d0:	57                   	push   edi
c00256d1:	b8 04 00 00 00       	mov    eax,0x4
c00256d6:	56                   	push   esi
c00256d7:	53                   	push   ebx
c00256d8:	83 ec 10             	sub    esp,0x10
c00256db:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00256df:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00256e3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00256e6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00256ea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00256ee:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00256f4:	77 3b                	ja     c0025731 <SATA::read(unsigned long long, int, void*)+0x61>
c00256f6:	b8 06 00 00 00       	mov    eax,0x6
c00256fb:	85 d2                	test   edx,edx
c00256fd:	74 32                	je     c0025731 <SATA::read(unsigned long long, int, void*)+0x61>
c00256ff:	50                   	push   eax
c0025700:	50                   	push   eax
c0025701:	6a 00                	push   0x0
c0025703:	52                   	push   edx
c0025704:	53                   	push   ebx
c0025705:	57                   	push   edi
c0025706:	56                   	push   esi
c0025707:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002570b:	e8 5a fd ff ff       	call   c002546a <SATA::access(unsigned long long, int, void*, bool)>
c0025710:	83 c4 20             	add    esp,0x20
c0025713:	85 c0                	test   eax,eax
c0025715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025719:	75 11                	jne    c002572c <SATA::read(unsigned long long, int, void*)+0x5c>
c002571b:	01 1d 88 31 03 c0    	add    DWORD PTR ds:0xc0033188,ebx
c0025721:	e8 aa b2 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0025726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002572a:	eb 05                	jmp    c0025731 <SATA::read(unsigned long long, int, void*)+0x61>
c002572c:	b8 01 00 00 00       	mov    eax,0x1
c0025731:	83 c4 10             	add    esp,0x10
c0025734:	5b                   	pop    ebx
c0025735:	5e                   	pop    esi
c0025736:	5f                   	pop    edi
c0025737:	c3                   	ret    

c0025738 <SATA::write(unsigned long long, int, void*)>:
c0025738:	55                   	push   ebp
c0025739:	b8 04 00 00 00       	mov    eax,0x4
c002573e:	57                   	push   edi
c002573f:	56                   	push   esi
c0025740:	53                   	push   ebx
c0025741:	83 ec 1c             	sub    esp,0x1c
c0025744:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025748:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002574c:	8d 75 ff             	lea    esi,[ebp-0x1]
c002574f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025753:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025757:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002575d:	77 56                	ja     c00257b5 <SATA::write(unsigned long long, int, void*)+0x7d>
c002575f:	b8 06 00 00 00       	mov    eax,0x6
c0025764:	85 ff                	test   edi,edi
c0025766:	74 4d                	je     c00257b5 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025768:	89 ee                	mov    esi,ebp
c002576a:	c1 e6 09             	shl    esi,0x9
c002576d:	01 fe                	add    esi,edi
c002576f:	89 c8                	mov    eax,ecx
c0025771:	89 da                	mov    edx,ebx
c0025773:	83 c0 01             	add    eax,0x1
c0025776:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002577a:	83 d2 00             	adc    edx,0x0
c002577d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025781:	50                   	push   eax
c0025782:	50                   	push   eax
c0025783:	6a 01                	push   0x1
c0025785:	57                   	push   edi
c0025786:	81 c7 00 02 00 00    	add    edi,0x200
c002578c:	6a 01                	push   0x1
c002578e:	53                   	push   ebx
c002578f:	51                   	push   ecx
c0025790:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025794:	e8 d1 fc ff ff       	call   c002546a <SATA::access(unsigned long long, int, void*, bool)>
c0025799:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002579d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257a1:	83 c4 20             	add    esp,0x20
c00257a4:	39 f7                	cmp    edi,esi
c00257a6:	75 c7                	jne    c002576f <SATA::write(unsigned long long, int, void*)+0x37>
c00257a8:	01 2d 84 31 03 c0    	add    DWORD PTR ds:0xc0033184,ebp
c00257ae:	e8 1d b2 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c00257b3:	31 c0                	xor    eax,eax
c00257b5:	83 c4 1c             	add    esp,0x1c
c00257b8:	5b                   	pop    ebx
c00257b9:	5e                   	pop    esi
c00257ba:	5f                   	pop    edi
c00257bb:	5d                   	pop    ebp
c00257bc:	c3                   	ret    
c00257bd:	90                   	nop

c00257be <SATAPI::write(unsigned long long, int, void*)>:
c00257be:	b8 03 00 00 00       	mov    eax,0x3
c00257c3:	c3                   	ret    

c00257c4 <SATAPI::close(int, int, void*)>:
c00257c4:	83 ec 0c             	sub    esp,0xc
c00257c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257d1:	85 c0                	test   eax,eax
c00257d3:	74 0c                	je     c00257e1 <SATAPI::close(int, int, void*)+0x1d>
c00257d5:	83 ec 0c             	sub    esp,0xc
c00257d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00257da:	50                   	push   eax
c00257db:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00257de:	83 c4 10             	add    esp,0x10
c00257e1:	31 c0                	xor    eax,eax
c00257e3:	83 c4 0c             	add    esp,0xc
c00257e6:	c3                   	ret    
c00257e7:	90                   	nop

c00257e8 <SATAPI::SATAPI()>:
c00257e8:	83 ec 0c             	sub    esp,0xc
c00257eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ef:	83 ec 04             	sub    esp,0x4
c00257f2:	68 00 08 00 00       	push   0x800
c00257f7:	68 30 d9 02 c0       	push   0xc002d930
c00257fc:	50                   	push   eax
c00257fd:	e8 30 ef fe ff       	call   c0014732 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025802:	83 c4 10             	add    esp,0x10
c0025805:	ba dc d9 02 c0       	mov    edx,0xc002d9dc
c002580a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002580e:	89 10                	mov    DWORD PTR [eax],edx
c0025810:	90                   	nop
c0025811:	83 c4 0c             	add    esp,0xc
c0025814:	c3                   	ret    
c0025815:	90                   	nop

c0025816 <SATAPI::diskRemoved()>:
c0025816:	83 ec 18             	sub    esp,0x18
c0025819:	68 3c d9 02 c0       	push   0xc002d93c
c002581e:	e8 a8 d6 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0025823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025827:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002582e:	83 c4 1c             	add    esp,0x1c
c0025831:	c3                   	ret    

c0025832 <SATAPI::diskInserted()>:
c0025832:	53                   	push   ebx
c0025833:	83 ec 14             	sub    esp,0x14
c0025836:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002583a:	68 53 d9 02 c0       	push   0xc002d953
c002583f:	e8 87 d6 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0025844:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002584b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002584e:	e8 47 ef fe ff       	call   c001479a <PhysicalDisk::startCache()>
c0025853:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025857:	83 c4 18             	add    esp,0x18
c002585a:	5b                   	pop    ebx
c002585b:	e9 1a 12 ff ff       	jmp    c0016a7a <createPartitionsForDisk(PhysicalDisk*)>

c0025860 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025860:	55                   	push   ebp
c0025861:	57                   	push   edi
c0025862:	56                   	push   esi
c0025863:	53                   	push   ebx
c0025864:	83 ec 24             	sub    esp,0x24
c0025867:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002586b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002586f:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025875:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025879:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002587d:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025883:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025886:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002588c:	c1 e3 07             	shl    ebx,0x7
c002588f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025893:	89 f8                	mov    eax,edi
c0025895:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025899:	c1 e0 07             	shl    eax,0x7
c002589c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00258a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00258a4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00258ae:	53                   	push   ebx
c00258af:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00258b5:	e8 da eb ff ff       	call   c0024494 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00258ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258be:	83 c4 10             	add    esp,0x10
c00258c1:	b8 01 00 00 00       	mov    eax,0x1
c00258c6:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00258cb:	0f 84 8a 01 00 00    	je     c0025a5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00258d1:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00258d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00258d9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00258df:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00258e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00258e9:	c1 e1 05             	shl    ecx,0x5
c00258ec:	01 c8                	add    eax,ecx
c00258ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c00258f0:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00258f6:	81 c9 25 00 01 00    	or     ecx,0x10025
c00258fc:	89 08                	mov    DWORD PTR [eax],ecx
c00258fe:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025904:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002590a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025910:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025913:	52                   	push   edx
c0025914:	68 90 00 00 00       	push   0x90
c0025919:	6a 00                	push   0x0
c002591b:	53                   	push   ebx
c002591c:	e8 5f ae fd ff       	call   c0000780 <memset>
c0025921:	83 c4 0c             	add    esp,0xc
c0025924:	8d 43 40             	lea    eax,[ebx+0x40]
c0025927:	6a 0c                	push   0xc
c0025929:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002592d:	50                   	push   eax
c002592e:	e8 35 ae fd ff       	call   c0000768 <memcpy>
c0025933:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025939:	89 ea                	mov    edx,ebp
c002593b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025941:	c1 ea 18             	shr    edx,0x18
c0025944:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025948:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002594b:	8d 48 ff             	lea    ecx,[eax-0x1]
c002594e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025952:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025958:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002595e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025963:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025967:	09 c8                	or     eax,ecx
c0025969:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002596d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025973:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025976:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002597d:	66 25 00 7f          	and    ax,0x7f00
c0025981:	66 0d 27 80          	or     ax,0x8027
c0025985:	66 89 03             	mov    WORD PTR [ebx],ax
c0025988:	89 e8                	mov    eax,ebp
c002598a:	c1 e8 10             	shr    eax,0x10
c002598d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025990:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025994:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025997:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002599b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002599e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259a2:	83 c4 10             	add    esp,0x10
c00259a5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00259a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259ad:	31 c0                	xor    eax,eax
c00259af:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00259b5:	80 e1 88             	and    cl,0x88
c00259b8:	74 0a                	je     c00259c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00259ba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259bf:	74 0a                	je     c00259cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00259c1:	40                   	inc    eax
c00259c2:	eb eb                	jmp    c00259af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00259c4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259c9:	75 0f                	jne    c00259da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00259cb:	83 ec 0c             	sub    esp,0xc
c00259ce:	68 d9 d8 02 c0       	push   0xc002d8d9
c00259d3:	e8 af 4e ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00259d8:	eb 3a                	jmp    c0025a14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00259da:	b8 01 00 00 00       	mov    eax,0x1
c00259df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00259e3:	c1 e7 07             	shl    edi,0x7
c00259e6:	d3 e0                	shl    eax,cl
c00259e8:	03 3c 24             	add    edi,DWORD PTR [esp]
c00259eb:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00259f1:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00259f7:	85 d0                	test   eax,edx
c00259f9:	74 23                	je     c0025a1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00259fb:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025a01:	0f ba e2 1e          	bt     edx,0x1e
c0025a05:	73 ea                	jae    c00259f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025a07:	83 ec 0c             	sub    esp,0xc
c0025a0a:	68 6b d9 02 c0       	push   0xc002d96b
c0025a0f:	e8 b7 d4 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0025a14:	83 c4 10             	add    esp,0x10
c0025a17:	b8 01 00 00 00       	mov    eax,0x1
c0025a1c:	eb 3d                	jmp    c0025a5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025a1e:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025a24:	0f ba e0 1e          	bt     eax,0x1e
c0025a28:	73 0a                	jae    c0025a34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025a2a:	83 ec 0c             	sub    esp,0xc
c0025a2d:	68 7e d9 02 c0       	push   0xc002d97e
c0025a32:	eb db                	jmp    c0025a0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025a34:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025a39:	74 1e                	je     c0025a59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025a3b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025a40:	74 17                	je     c0025a59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025a42:	50                   	push   eax
c0025a43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025a47:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025a4d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025a51:	e8 12 ad fd ff       	call   c0000768 <memcpy>
c0025a56:	83 c4 10             	add    esp,0x10
c0025a59:	31 c0                	xor    eax,eax
c0025a5b:	83 c4 1c             	add    esp,0x1c
c0025a5e:	5b                   	pop    ebx
c0025a5f:	5e                   	pop    esi
c0025a60:	5f                   	pop    edi
c0025a61:	5d                   	pop    ebp
c0025a62:	c3                   	ret    
c0025a63:	90                   	nop

c0025a64 <SATAPI::eject()>:
c0025a64:	57                   	push   edi
c0025a65:	b9 03 00 00 00       	mov    ecx,0x3
c0025a6a:	53                   	push   ebx
c0025a6b:	83 ec 14             	sub    esp,0x14
c0025a6e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025a72:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025a76:	fc                   	cld    
c0025a77:	31 c0                	xor    eax,eax
c0025a79:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025a7b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025a80:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025a85:	50                   	push   eax
c0025a86:	6a 00                	push   0x0
c0025a88:	6a 00                	push   0x0
c0025a8a:	6a 00                	push   0x0
c0025a8c:	6a 00                	push   0x0
c0025a8e:	6a 02                	push   0x2
c0025a90:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025a94:	50                   	push   eax
c0025a95:	53                   	push   ebx
c0025a96:	e8 c5 fd ff ff       	call   c0025860 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025a9b:	83 c4 14             	add    esp,0x14
c0025a9e:	53                   	push   ebx
c0025a9f:	e8 72 fd ff ff       	call   c0025816 <SATAPI::diskRemoved()>
c0025aa4:	83 c4 24             	add    esp,0x24
c0025aa7:	31 c0                	xor    eax,eax
c0025aa9:	5b                   	pop    ebx
c0025aaa:	5f                   	pop    edi
c0025aab:	c3                   	ret    

c0025aac <SATAPI::detectMedia()>:
c0025aac:	56                   	push   esi
c0025aad:	53                   	push   ebx
c0025aae:	83 ec 28             	sub    esp,0x28
c0025ab1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025ab5:	6a 0c                	push   0xc
c0025ab7:	6a 00                	push   0x0
c0025ab9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025abd:	56                   	push   esi
c0025abe:	e8 bd ac fd ff       	call   c0000780 <memset>
c0025ac3:	83 c4 0c             	add    esp,0xc
c0025ac6:	6a 00                	push   0x0
c0025ac8:	6a 00                	push   0x0
c0025aca:	6a 00                	push   0x0
c0025acc:	6a 00                	push   0x0
c0025ace:	6a 00                	push   0x0
c0025ad0:	56                   	push   esi
c0025ad1:	53                   	push   ebx
c0025ad2:	e8 89 fd ff ff       	call   c0025860 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ad7:	83 c4 1c             	add    esp,0x1c
c0025ada:	6a 0c                	push   0xc
c0025adc:	6a 00                	push   0x0
c0025ade:	56                   	push   esi
c0025adf:	e8 9c ac fd ff       	call   c0000780 <memset>
c0025ae4:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025ae9:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025aee:	83 c4 0c             	add    esp,0xc
c0025af1:	6a 01                	push   0x1
c0025af3:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025af7:	50                   	push   eax
c0025af8:	6a 00                	push   0x0
c0025afa:	6a 00                	push   0x0
c0025afc:	6a 12                	push   0x12
c0025afe:	56                   	push   esi
c0025aff:	53                   	push   ebx
c0025b00:	e8 5b fd ff ff       	call   c0025860 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b05:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b09:	83 c4 20             	add    esp,0x20
c0025b0c:	83 e0 7f             	and    eax,0x7f
c0025b0f:	3c 70                	cmp    al,0x70
c0025b11:	74 15                	je     c0025b28 <SATAPI::detectMedia()+0x7c>
c0025b13:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b1a:	75 0c                	jne    c0025b28 <SATAPI::detectMedia()+0x7c>
c0025b1c:	83 ec 0c             	sub    esp,0xc
c0025b1f:	53                   	push   ebx
c0025b20:	e8 0d fd ff ff       	call   c0025832 <SATAPI::diskInserted()>
c0025b25:	83 c4 10             	add    esp,0x10
c0025b28:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b2c:	83 e0 0f             	and    eax,0xf
c0025b2f:	3c 02                	cmp    al,0x2
c0025b31:	75 1b                	jne    c0025b4e <SATAPI::detectMedia()+0xa2>
c0025b33:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b38:	75 2d                	jne    c0025b67 <SATAPI::detectMedia()+0xbb>
c0025b3a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b41:	74 24                	je     c0025b67 <SATAPI::detectMedia()+0xbb>
c0025b43:	83 ec 0c             	sub    esp,0xc
c0025b46:	53                   	push   ebx
c0025b47:	e8 ca fc ff ff       	call   c0025816 <SATAPI::diskRemoved()>
c0025b4c:	eb 16                	jmp    c0025b64 <SATAPI::detectMedia()+0xb8>
c0025b4e:	84 c0                	test   al,al
c0025b50:	75 15                	jne    c0025b67 <SATAPI::detectMedia()+0xbb>
c0025b52:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b59:	75 0c                	jne    c0025b67 <SATAPI::detectMedia()+0xbb>
c0025b5b:	83 ec 0c             	sub    esp,0xc
c0025b5e:	53                   	push   ebx
c0025b5f:	e8 ce fc ff ff       	call   c0025832 <SATAPI::diskInserted()>
c0025b64:	83 c4 10             	add    esp,0x10
c0025b67:	83 c4 24             	add    esp,0x24
c0025b6a:	5b                   	pop    ebx
c0025b6b:	5e                   	pop    esi
c0025b6c:	c3                   	ret    
c0025b6d:	90                   	nop

c0025b6e <SATAPI::open(int, int, void*)>:
c0025b6e:	56                   	push   esi
c0025b6f:	53                   	push   ebx
c0025b70:	50                   	push   eax
c0025b71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025b75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b79:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025b83:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025b89:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025b93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b97:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025ba1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025ba7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025bae:	e8 cd a3 fe ff       	call   c000ff80 <Phys::allocatePage()>
c0025bb3:	89 c6                	mov    esi,eax
c0025bb5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025bbb:	81 c6 00 10 00 00    	add    esi,0x1000
c0025bc1:	e8 ba a3 fe ff       	call   c000ff80 <Phys::allocatePage()>
c0025bc6:	39 c6                	cmp    esi,eax
c0025bc8:	74 10                	je     c0025bda <SATAPI::open(int, int, void*)+0x6c>
c0025bca:	83 ec 0c             	sub    esp,0xc
c0025bcd:	68 93 d9 02 c0       	push   0xc002d993
c0025bd2:	e8 b0 4c ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0025bd7:	83 c4 10             	add    esp,0x10
c0025bda:	83 ec 0c             	sub    esp,0xc
c0025bdd:	6a 02                	push   0x2
c0025bdf:	e8 e1 be fe ff       	call   c0011ac5 <Virt::allocateKernelVirtualPages(int)>
c0025be4:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025bea:	6a 03                	push   0x3
c0025bec:	50                   	push   eax
c0025bed:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025bf3:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c0025bf9:	e8 fe c6 fe ff       	call   c00122fc <VAS::mapPage(unsigned long, unsigned long, int)>
c0025bfe:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c05:	83 c4 14             	add    esp,0x14
c0025c08:	53                   	push   ebx
c0025c09:	e8 9e fe ff ff       	call   c0025aac <SATAPI::detectMedia()>
c0025c0e:	83 c4 14             	add    esp,0x14
c0025c11:	31 c0                	xor    eax,eax
c0025c13:	5b                   	pop    ebx
c0025c14:	5e                   	pop    esi
c0025c15:	c3                   	ret    

c0025c16 <SATAPI::read(unsigned long long, int, void*)>:
c0025c16:	55                   	push   ebp
c0025c17:	57                   	push   edi
c0025c18:	56                   	push   esi
c0025c19:	53                   	push   ebx
c0025c1a:	83 ec 1c             	sub    esp,0x1c
c0025c1d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c25:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c29:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c30:	74 19                	je     c0025c4b <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c32:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c37:	7e 2e                	jle    c0025c67 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c39:	83 ec 0c             	sub    esp,0xc
c0025c3c:	68 a9 d9 02 c0       	push   0xc002d9a9
c0025c41:	e8 41 4c ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0025c46:	83 c4 10             	add    esp,0x10
c0025c49:	eb 1c                	jmp    c0025c67 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c4b:	83 ec 0c             	sub    esp,0xc
c0025c4e:	55                   	push   ebp
c0025c4f:	e8 58 fe ff ff       	call   c0025aac <SATAPI::detectMedia()>
c0025c54:	83 c4 10             	add    esp,0x10
c0025c57:	b8 02 00 00 00       	mov    eax,0x2
c0025c5c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c63:	75 cd                	jne    c0025c32 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025c65:	eb 49                	jmp    c0025cb0 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025c67:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025c6b:	b9 03 00 00 00       	mov    ecx,0x3
c0025c70:	fc                   	cld    
c0025c71:	31 c0                	xor    eax,eax
c0025c73:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025c75:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025c7a:	89 d8                	mov    eax,ebx
c0025c7c:	86 e0                	xchg   al,ah
c0025c7e:	c1 c0 10             	rol    eax,0x10
c0025c81:	86 e0                	xchg   al,ah
c0025c83:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025c87:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025c8b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025c8f:	50                   	push   eax
c0025c90:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025c94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025c98:	56                   	push   esi
c0025c99:	53                   	push   ebx
c0025c9a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025c9e:	c1 e0 0b             	shl    eax,0xb
c0025ca1:	50                   	push   eax
c0025ca2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025ca6:	50                   	push   eax
c0025ca7:	55                   	push   ebp
c0025ca8:	e8 b3 fb ff ff       	call   c0025860 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025cad:	83 c4 20             	add    esp,0x20
c0025cb0:	83 c4 1c             	add    esp,0x1c
c0025cb3:	5b                   	pop    ebx
c0025cb4:	5e                   	pop    esi
c0025cb5:	5f                   	pop    edi
c0025cb6:	5d                   	pop    ebp
c0025cb7:	c3                   	ret    

c0025cb8 <AVX::open(int, int, void*)>:
c0025cb8:	83 ec 0c             	sub    esp,0xc
c0025cbb:	e8 48 11 00 00       	call   c0026e08 <avxInit>
c0025cc0:	b8 00 00 00 00       	mov    eax,0x0
c0025cc5:	83 c4 0c             	add    esp,0xc
c0025cc8:	c3                   	ret    
c0025cc9:	90                   	nop

c0025cca <AVX::close(int, int, void*)>:
c0025cca:	83 ec 0c             	sub    esp,0xc
c0025ccd:	e8 37 11 00 00       	call   c0026e09 <avxClose>
c0025cd2:	b8 00 00 00 00       	mov    eax,0x0
c0025cd7:	83 c4 0c             	add    esp,0xc
c0025cda:	c3                   	ret    
c0025cdb:	90                   	nop

c0025cdc <AVX::available()>:
c0025cdc:	83 ec 0c             	sub    esp,0xc
c0025cdf:	e8 1c 11 00 00       	call   c0026e00 <avxDetect>
c0025ce4:	85 c0                	test   eax,eax
c0025ce6:	0f 95 c0             	setne  al
c0025ce9:	83 c4 0c             	add    esp,0xc
c0025cec:	c3                   	ret    
c0025ced:	90                   	nop

c0025cee <AVX::save(void*)>:
c0025cee:	83 ec 0c             	sub    esp,0xc
c0025cf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025cf5:	83 ec 0c             	sub    esp,0xc
c0025cf8:	50                   	push   eax
c0025cf9:	e8 08 11 00 00       	call   c0026e06 <avxSave>
c0025cfe:	83 c4 10             	add    esp,0x10
c0025d01:	90                   	nop
c0025d02:	83 c4 0c             	add    esp,0xc
c0025d05:	c3                   	ret    

c0025d06 <AVX::load(void*)>:
c0025d06:	83 ec 0c             	sub    esp,0xc
c0025d09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d0d:	83 ec 0c             	sub    esp,0xc
c0025d10:	50                   	push   eax
c0025d11:	e8 f1 10 00 00       	call   c0026e07 <avxLoad>
c0025d16:	83 c4 10             	add    esp,0x10
c0025d19:	90                   	nop
c0025d1a:	83 c4 0c             	add    esp,0xc
c0025d1d:	c3                   	ret    

c0025d1e <AVX::AVX()>:
c0025d1e:	83 ec 0c             	sub    esp,0xc
c0025d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d25:	83 ec 08             	sub    esp,0x8
c0025d28:	68 0c da 02 c0       	push   0xc002da0c
c0025d2d:	50                   	push   eax
c0025d2e:	e8 dd ea fe ff       	call   c0014810 <FPU::FPU(char const*)>
c0025d33:	83 c4 10             	add    esp,0x10
c0025d36:	ba 1c da 02 c0       	mov    edx,0xc002da1c
c0025d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3f:	89 10                	mov    DWORD PTR [eax],edx
c0025d41:	90                   	nop
c0025d42:	83 c4 0c             	add    esp,0xc
c0025d45:	c3                   	ret    

c0025d46 <MMX::available()>:
c0025d46:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0025d4b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025d51:	83 e0 20             	and    eax,0x20
c0025d54:	84 c0                	test   al,al
c0025d56:	0f 95 c0             	setne  al
c0025d59:	c3                   	ret    

c0025d5a <MMX::open(int, int, void*)>:
c0025d5a:	83 ec 0c             	sub    esp,0xc
c0025d5d:	e8 30 11 00 00       	call   c0026e92 <x87Init>
c0025d62:	b8 00 00 00 00       	mov    eax,0x0
c0025d67:	83 c4 0c             	add    esp,0xc
c0025d6a:	c3                   	ret    
c0025d6b:	90                   	nop

c0025d6c <MMX::close(int, int, void*)>:
c0025d6c:	83 ec 0c             	sub    esp,0xc
c0025d6f:	e8 38 11 00 00       	call   c0026eac <x87Close>
c0025d74:	b8 00 00 00 00       	mov    eax,0x0
c0025d79:	83 c4 0c             	add    esp,0xc
c0025d7c:	c3                   	ret    
c0025d7d:	90                   	nop

c0025d7e <MMX::save(void*)>:
c0025d7e:	83 ec 0c             	sub    esp,0xc
c0025d81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d85:	83 ec 0c             	sub    esp,0xc
c0025d88:	50                   	push   eax
c0025d89:	e8 f3 10 00 00       	call   c0026e81 <x87Save>
c0025d8e:	83 c4 10             	add    esp,0x10
c0025d91:	90                   	nop
c0025d92:	83 c4 0c             	add    esp,0xc
c0025d95:	c3                   	ret    

c0025d96 <MMX::load(void*)>:
c0025d96:	83 ec 0c             	sub    esp,0xc
c0025d99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d9d:	83 ec 0c             	sub    esp,0xc
c0025da0:	50                   	push   eax
c0025da1:	e8 e4 10 00 00       	call   c0026e8a <x87Load>
c0025da6:	83 c4 10             	add    esp,0x10
c0025da9:	90                   	nop
c0025daa:	83 c4 0c             	add    esp,0xc
c0025dad:	c3                   	ret    

c0025dae <MMX::MMX()>:
c0025dae:	83 ec 0c             	sub    esp,0xc
c0025db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025db5:	83 ec 08             	sub    esp,0x8
c0025db8:	68 4c da 02 c0       	push   0xc002da4c
c0025dbd:	50                   	push   eax
c0025dbe:	e8 4d ea fe ff       	call   c0014810 <FPU::FPU(char const*)>
c0025dc3:	83 c4 10             	add    esp,0x10
c0025dc6:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0025dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dcf:	89 10                	mov    DWORD PTR [eax],edx
c0025dd1:	90                   	nop
c0025dd2:	83 c4 0c             	add    esp,0xc
c0025dd5:	c3                   	ret    

c0025dd6 <SSE::open(int, int, void*)>:
c0025dd6:	83 ec 0c             	sub    esp,0xc
c0025dd9:	e8 66 10 00 00       	call   c0026e44 <sseInit>
c0025dde:	b8 00 00 00 00       	mov    eax,0x0
c0025de3:	83 c4 0c             	add    esp,0xc
c0025de6:	c3                   	ret    
c0025de7:	90                   	nop

c0025de8 <SSE::close(int, int, void*)>:
c0025de8:	83 ec 0c             	sub    esp,0xc
c0025deb:	e8 64 10 00 00       	call   c0026e54 <sseClose>
c0025df0:	b8 00 00 00 00       	mov    eax,0x0
c0025df5:	83 c4 0c             	add    esp,0xc
c0025df8:	c3                   	ret    
c0025df9:	90                   	nop

c0025dfa <SSE::available()>:
c0025dfa:	83 ec 1c             	sub    esp,0x1c
c0025dfd:	e8 1e 10 00 00       	call   c0026e20 <absolutelyNoChanceInHell>
c0025e02:	85 c0                	test   eax,eax
c0025e04:	0f 95 c0             	setne  al
c0025e07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e0b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e0f:	83 c4 1c             	add    esp,0x1c
c0025e12:	c3                   	ret    
c0025e13:	90                   	nop

c0025e14 <SSE::save(void*)>:
c0025e14:	83 ec 0c             	sub    esp,0xc
c0025e17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e1b:	83 ec 0c             	sub    esp,0xc
c0025e1e:	50                   	push   eax
c0025e1f:	e8 14 10 00 00       	call   c0026e38 <sseSave>
c0025e24:	83 c4 10             	add    esp,0x10
c0025e27:	90                   	nop
c0025e28:	83 c4 0c             	add    esp,0xc
c0025e2b:	c3                   	ret    

c0025e2c <SSE::load(void*)>:
c0025e2c:	83 ec 0c             	sub    esp,0xc
c0025e2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e33:	83 ec 0c             	sub    esp,0xc
c0025e36:	50                   	push   eax
c0025e37:	e8 02 10 00 00       	call   c0026e3e <sseLoad>
c0025e3c:	83 c4 10             	add    esp,0x10
c0025e3f:	90                   	nop
c0025e40:	83 c4 0c             	add    esp,0xc
c0025e43:	c3                   	ret    

c0025e44 <SSE::SSE()>:
c0025e44:	83 ec 0c             	sub    esp,0xc
c0025e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4b:	83 ec 08             	sub    esp,0x8
c0025e4e:	68 8c da 02 c0       	push   0xc002da8c
c0025e53:	50                   	push   eax
c0025e54:	e8 b7 e9 fe ff       	call   c0014810 <FPU::FPU(char const*)>
c0025e59:	83 c4 10             	add    esp,0x10
c0025e5c:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c0025e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e65:	89 10                	mov    DWORD PTR [eax],edx
c0025e67:	90                   	nop
c0025e68:	83 c4 0c             	add    esp,0xc
c0025e6b:	c3                   	ret    

c0025e6c <x87::open(int, int, void*)>:
c0025e6c:	83 ec 0c             	sub    esp,0xc
c0025e6f:	e8 1e 10 00 00       	call   c0026e92 <x87Init>
c0025e74:	b8 00 00 00 00       	mov    eax,0x0
c0025e79:	83 c4 0c             	add    esp,0xc
c0025e7c:	c3                   	ret    
c0025e7d:	90                   	nop

c0025e7e <x87::close(int, int, void*)>:
c0025e7e:	83 ec 0c             	sub    esp,0xc
c0025e81:	e8 26 10 00 00       	call   c0026eac <x87Close>
c0025e86:	b8 00 00 00 00       	mov    eax,0x0
c0025e8b:	83 c4 0c             	add    esp,0xc
c0025e8e:	c3                   	ret    
c0025e8f:	90                   	nop

c0025e90 <x87::available()>:
c0025e90:	83 ec 0c             	sub    esp,0xc
c0025e93:	e8 ce 0f 00 00       	call   c0026e66 <x87Detect>
c0025e98:	85 c0                	test   eax,eax
c0025e9a:	0f 95 c0             	setne  al
c0025e9d:	83 c4 0c             	add    esp,0xc
c0025ea0:	c3                   	ret    
c0025ea1:	90                   	nop

c0025ea2 <x87::save(void*)>:
c0025ea2:	83 ec 0c             	sub    esp,0xc
c0025ea5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ea9:	83 ec 0c             	sub    esp,0xc
c0025eac:	50                   	push   eax
c0025ead:	e8 cf 0f 00 00       	call   c0026e81 <x87Save>
c0025eb2:	83 c4 10             	add    esp,0x10
c0025eb5:	90                   	nop
c0025eb6:	83 c4 0c             	add    esp,0xc
c0025eb9:	c3                   	ret    

c0025eba <x87::load(void*)>:
c0025eba:	83 ec 0c             	sub    esp,0xc
c0025ebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ec1:	83 ec 0c             	sub    esp,0xc
c0025ec4:	50                   	push   eax
c0025ec5:	e8 c0 0f 00 00       	call   c0026e8a <x87Load>
c0025eca:	83 c4 10             	add    esp,0x10
c0025ecd:	90                   	nop
c0025ece:	83 c4 0c             	add    esp,0xc
c0025ed1:	c3                   	ret    

c0025ed2 <x87::x87()>:
c0025ed2:	83 ec 0c             	sub    esp,0xc
c0025ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed9:	83 ec 08             	sub    esp,0x8
c0025edc:	68 cc da 02 c0       	push   0xc002dacc
c0025ee1:	50                   	push   eax
c0025ee2:	e8 29 e9 fe ff       	call   c0014810 <FPU::FPU(char const*)>
c0025ee7:	83 c4 10             	add    esp,0x10
c0025eea:	ba dc da 02 c0       	mov    edx,0xc002dadc
c0025eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef3:	89 10                	mov    DWORD PTR [eax],edx
c0025ef5:	90                   	nop
c0025ef6:	83 c4 0c             	add    esp,0xc
c0025ef9:	c3                   	ret    

c0025efa <APIC::disable()>:
c0025efa:	90                   	nop
c0025efb:	c3                   	ret    

c0025efc <APIC::close(int, int, void*)>:
c0025efc:	55                   	push   ebp
c0025efd:	89 e5                	mov    ebp,esp
c0025eff:	83 ec 08             	sub    esp,0x8
c0025f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f05:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f07:	83 c0 3c             	add    eax,0x3c
c0025f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f0c:	83 ec 0c             	sub    esp,0xc
c0025f0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f12:	ff d0                	call   eax
c0025f14:	83 c4 10             	add    esp,0x10
c0025f17:	b8 00 00 00 00       	mov    eax,0x0
c0025f1c:	c9                   	leave  
c0025f1d:	c3                   	ret    

c0025f1e <IOAPIC::close(int, int, void*)>:
c0025f1e:	b8 00 00 00 00       	mov    eax,0x0
c0025f23:	c3                   	ret    

c0025f24 <APIC::io_wait()>:
c0025f24:	eb 00                	jmp    c0025f26 <APIC::io_wait()+0x2>
c0025f26:	eb 00                	jmp    c0025f28 <APIC::io_wait()+0x4>
c0025f28:	90                   	nop
c0025f29:	c3                   	ret    

c0025f2a <APIC::getBase()>:
c0025f2a:	55                   	push   ebp
c0025f2b:	89 e5                	mov    ebp,esp
c0025f2d:	83 ec 18             	sub    esp,0x18
c0025f30:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0025f35:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f3b:	83 e0 08             	and    eax,0x8
c0025f3e:	84 c0                	test   al,al
c0025f40:	75 07                	jne    c0025f49 <APIC::getBase()+0x1f>
c0025f42:	b8 00 00 00 00       	mov    eax,0x0
c0025f47:	eb 21                	jmp    c0025f6a <APIC::getBase()+0x40>
c0025f49:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0025f4e:	83 ec 08             	sub    esp,0x8
c0025f51:	6a 1b                	push   0x1b
c0025f53:	50                   	push   eax
c0025f54:	e8 61 8f fe ff       	call   c000eeba <Computer::rdmsr(unsigned int)>
c0025f59:	83 c4 10             	add    esp,0x10
c0025f5c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f5f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025f6a:	c9                   	leave  
c0025f6b:	c3                   	ret    

c0025f6c <APIC::eoi(unsigned char)>:
c0025f6c:	55                   	push   ebp
c0025f6d:	89 e5                	mov    ebp,esp
c0025f6f:	83 ec 28             	sub    esp,0x28
c0025f72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f75:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025f78:	83 ec 0c             	sub    esp,0xc
c0025f7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f7e:	e8 a7 ff ff ff       	call   c0025f2a <APIC::getBase()>
c0025f83:	83 c4 10             	add    esp,0x10
c0025f86:	05 b0 00 00 00       	add    eax,0xb0
c0025f8b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025f8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025f91:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025f97:	90                   	nop
c0025f98:	c9                   	leave  
c0025f99:	c3                   	ret    

c0025f9a <APIC::open(int, int, void*)>:
c0025f9a:	55                   	push   ebp
c0025f9b:	89 e5                	mov    ebp,esp
c0025f9d:	57                   	push   edi
c0025f9e:	56                   	push   esi
c0025f9f:	53                   	push   ebx
c0025fa0:	83 ec 2c             	sub    esp,0x2c
c0025fa3:	83 ec 0c             	sub    esp,0xc
c0025fa6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fa9:	e8 7c ff ff ff       	call   c0025f2a <APIC::getBase()>
c0025fae:	83 c4 10             	add    esp,0x10
c0025fb1:	89 c2                	mov    edx,eax
c0025fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fb6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025fbc:	0f b6 f8             	movzx  edi,al
c0025fbf:	89 d0                	mov    eax,edx
c0025fc1:	ba 00 00 00 00       	mov    edx,0x0
c0025fc6:	89 c1                	mov    ecx,eax
c0025fc8:	80 e5 ff             	and    ch,0xff
c0025fcb:	89 cb                	mov    ebx,ecx
c0025fcd:	0f b6 f2             	movzx  esi,dl
c0025fd0:	89 d8                	mov    eax,ebx
c0025fd2:	89 f2                	mov    edx,esi
c0025fd4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025fd7:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025fda:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025fde:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025fe2:	83 e0 00             	and    eax,0x0
c0025fe5:	09 d0                	or     eax,edx
c0025fe7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fee:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ff4:	8d 50 01             	lea    edx,[eax+0x1]
c0025ff7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ffa:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026000:	0f b6 d0             	movzx  edx,al
c0026003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026006:	83 c2 08             	add    edx,0x8
c0026009:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002600d:	0f b6 c9             	movzx  ecx,cl
c0026010:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026016:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002601a:	83 ec 0c             	sub    esp,0xc
c002601d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026020:	e8 05 ff ff ff       	call   c0025f2a <APIC::getBase()>
c0026025:	83 c4 10             	add    esp,0x10
c0026028:	05 f0 00 00 00       	add    eax,0xf0
c002602d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026030:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026033:	8b 00                	mov    eax,DWORD PTR [eax]
c0026035:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026038:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002603f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026046:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026049:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002604c:	89 10                	mov    DWORD PTR [eax],edx
c002604e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0026055:	a1 10 17 03 c0       	mov    eax,ds:0xc0031710
c002605a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002605d:	7d 7c                	jge    c00260db <APIC::open(int, int, void*)+0x141>
c002605f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026062:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0026069:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002606c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002606f:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0026076:	c1 e8 08             	shr    eax,0x8
c0026079:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002607d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026080:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0026087:	c1 e8 18             	shr    eax,0x18
c002608a:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002608d:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026091:	75 40                	jne    c00260d3 <APIC::open(int, int, void*)+0x139>
c0026093:	83 ec 0c             	sub    esp,0xc
c0026096:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026099:	e8 8c fe ff ff       	call   c0025f2a <APIC::getBase()>
c002609e:	83 c4 10             	add    esp,0x10
c00260a1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00260a5:	75 07                	jne    c00260ae <APIC::open(int, int, void*)+0x114>
c00260a7:	ba 60 03 00 00       	mov    edx,0x360
c00260ac:	eb 05                	jmp    c00260b3 <APIC::open(int, int, void*)+0x119>
c00260ae:	ba 50 03 00 00       	mov    edx,0x350
c00260b3:	01 d0                	add    eax,edx
c00260b5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00260b8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00260bd:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00260c0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00260c7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00260cb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260ce:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260d1:	89 10                	mov    DWORD PTR [eax],edx
c00260d3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00260d6:	e9 7a ff ff ff       	jmp    c0026055 <APIC::open(int, int, void*)+0xbb>
c00260db:	b8 00 00 00 00       	mov    eax,0x0
c00260e0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00260e3:	5b                   	pop    ebx
c00260e4:	5e                   	pop    esi
c00260e5:	5f                   	pop    edi
c00260e6:	5d                   	pop    ebp
c00260e7:	c3                   	ret    

c00260e8 <IOAPIC::IOAPIC()>:
c00260e8:	83 ec 0c             	sub    esp,0xc
c00260eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ef:	83 ec 08             	sub    esp,0x8
c00260f2:	68 0c db 02 c0       	push   0xc002db0c
c00260f7:	50                   	push   eax
c00260f8:	e8 f3 e3 fe ff       	call   c00144f0 <Device::Device(char const*)>
c00260fd:	83 c4 10             	add    esp,0x10
c0026100:	ba 34 dc 02 c0       	mov    edx,0xc002dc34
c0026105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026109:	89 10                	mov    DWORD PTR [eax],edx
c002610b:	90                   	nop
c002610c:	83 c4 0c             	add    esp,0xc
c002610f:	c3                   	ret    

c0026110 <APIC::APIC()>:
c0026110:	53                   	push   ebx
c0026111:	83 ec 18             	sub    esp,0x18
c0026114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026118:	83 ec 08             	sub    esp,0x8
c002611b:	68 14 db 02 c0       	push   0xc002db14
c0026120:	50                   	push   eax
c0026121:	e8 44 eb fe ff       	call   c0014c6a <InterruptController::InterruptController(char const*)>
c0026126:	83 c4 10             	add    esp,0x10
c0026129:	ba ec db 02 c0       	mov    edx,0xc002dbec
c002612e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026132:	89 10                	mov    DWORD PTR [eax],edx
c0026134:	a0 e0 31 03 c0       	mov    al,ds:0xc00331e0
c0026139:	83 f0 01             	xor    eax,0x1
c002613c:	84 c0                	test   al,al
c002613e:	0f 84 a1 00 00 00    	je     c00261e5 <APIC::APIC()+0xd5>
c0026144:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026149:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c002614e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0026152:	0f 83 86 00 00 00    	jae    c00261de <APIC::APIC()+0xce>
c0026158:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0026160:	83 ec 0c             	sub    esp,0xc
c0026163:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026167:	e8 a8 97 fe ff       	call   c000f914 <malloc>
c002616c:	83 c4 10             	add    esp,0x10
c002616f:	89 c3                	mov    ebx,eax
c0026171:	83 ec 0c             	sub    esp,0xc
c0026174:	53                   	push   ebx
c0026175:	e8 6e ff ff ff       	call   c00260e8 <IOAPIC::IOAPIC()>
c002617a:	83 c4 10             	add    esp,0x10
c002617d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026181:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026186:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002618a:	89 14 85 c0 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce40],edx
c0026191:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c0026196:	40                   	inc    eax
c0026197:	a3 a0 31 03 c0       	mov    ds:0xc00331a0,eax
c002619c:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c00261a1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00261a7:	83 ec 08             	sub    esp,0x8
c00261aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261ae:	50                   	push   eax
c00261af:	e8 4c e1 fe ff       	call   c0014300 <Device::addChild(Device*)>
c00261b4:	83 c4 10             	add    esp,0x10
c00261b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00261bd:	83 c0 08             	add    eax,0x8
c00261c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00261c2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00261c7:	6a 00                	push   0x0
c00261c9:	6a 00                	push   0x0
c00261cb:	52                   	push   edx
c00261cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00261d0:	ff d0                	call   eax
c00261d2:	83 c4 10             	add    esp,0x10
c00261d5:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00261d9:	e9 6b ff ff ff       	jmp    c0026149 <APIC::APIC()+0x39>
c00261de:	c6 05 e0 31 03 c0 01 	mov    BYTE PTR ds:0xc00331e0,0x1
c00261e5:	90                   	nop
c00261e6:	83 c4 18             	add    esp,0x18
c00261e9:	5b                   	pop    ebx
c00261ea:	c3                   	ret    
c00261eb:	90                   	nop

c00261ec <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00261ec:	55                   	push   ebp
c00261ed:	89 e5                	mov    ebp,esp
c00261ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00261f8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00261fb:	72 1d                	jb     c002621a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00261fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026200:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026209:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002620f:	01 d0                	add    eax,edx
c0026211:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026214:	73 04                	jae    c002621a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026216:	b0 01                	mov    al,0x1
c0026218:	eb 02                	jmp    c002621c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002621a:	b0 00                	mov    al,0x0
c002621c:	5d                   	pop    ebp
c002621d:	c3                   	ret    

c002621e <IOAPIC::read(int)>:
c002621e:	55                   	push   ebp
c002621f:	89 e5                	mov    ebp,esp
c0026221:	83 ec 10             	sub    esp,0x10
c0026224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026227:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002622d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026230:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026233:	0f b6 d0             	movzx  edx,al
c0026236:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026239:	89 10                	mov    DWORD PTR [eax],edx
c002623b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002623e:	83 c0 10             	add    eax,0x10
c0026241:	8b 00                	mov    eax,DWORD PTR [eax]
c0026243:	c9                   	leave  
c0026244:	c3                   	ret    
c0026245:	90                   	nop

c0026246 <IOAPIC::open(int, int, void*)>:
c0026246:	55                   	push   ebp
c0026247:	89 e5                	mov    ebp,esp
c0026249:	57                   	push   edi
c002624a:	56                   	push   esi
c002624b:	53                   	push   ebx
c002624c:	83 ec 0c             	sub    esp,0xc
c002624f:	83 ec 0c             	sub    esp,0xc
c0026252:	68 3f db 02 c0       	push   0xc002db3f
c0026257:	e8 6f cc fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c002625c:	83 c4 10             	add    esp,0x10
c002625f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026262:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026265:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002626b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002626e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026274:	8b 14 85 00 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce800]
c002627b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002627e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026287:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002628d:	8b 14 85 80 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce780]
c0026294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026297:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002629d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00262a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262a9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262af:	0f b6 f8             	movzx  edi,al
c00262b2:	89 d0                	mov    eax,edx
c00262b4:	ba 00 00 00 00       	mov    edx,0x0
c00262b9:	89 c1                	mov    ecx,eax
c00262bb:	80 e5 ff             	and    ch,0xff
c00262be:	89 cb                	mov    ebx,ecx
c00262c0:	0f b6 f2             	movzx  esi,dl
c00262c3:	89 d8                	mov    eax,ebx
c00262c5:	89 f2                	mov    edx,esi
c00262c7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262ca:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262cd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262d1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262d5:	83 e0 00             	and    eax,0x0
c00262d8:	09 d0                	or     eax,edx
c00262da:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262e1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262e7:	8d 50 01             	lea    edx,[eax+0x1]
c00262ea:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262ed:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00262f3:	0f b6 d0             	movzx  edx,al
c00262f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262f9:	83 c2 08             	add    edx,0x8
c00262fc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026300:	0f b6 c9             	movzx  ecx,cl
c0026303:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026309:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002630d:	83 ec 08             	sub    esp,0x8
c0026310:	6a 01                	push   0x1
c0026312:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026315:	e8 04 ff ff ff       	call   c002621e <IOAPIC::read(int)>
c002631a:	83 c4 10             	add    esp,0x10
c002631d:	c1 f8 10             	sar    eax,0x10
c0026320:	0f b6 c0             	movzx  eax,al
c0026323:	8d 50 01             	lea    edx,[eax+0x1]
c0026326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026329:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002632f:	b8 00 00 00 00       	mov    eax,0x0
c0026334:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026337:	5b                   	pop    ebx
c0026338:	5e                   	pop    esi
c0026339:	5f                   	pop    edi
c002633a:	5d                   	pop    ebp
c002633b:	c3                   	ret    

c002633c <IOAPIC::write(int, int)>:
c002633c:	55                   	push   ebp
c002633d:	89 e5                	mov    ebp,esp
c002633f:	83 ec 10             	sub    esp,0x10
c0026342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026345:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002634b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002634e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026351:	0f b6 d0             	movzx  edx,al
c0026354:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026357:	89 10                	mov    DWORD PTR [eax],edx
c0026359:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002635c:	8d 50 10             	lea    edx,[eax+0x10]
c002635f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026362:	89 02                	mov    DWORD PTR [edx],eax
c0026364:	90                   	nop
c0026365:	c9                   	leave  
c0026366:	c3                   	ret    
c0026367:	90                   	nop

c0026368 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0026368:	55                   	push   ebp
c0026369:	89 e5                	mov    ebp,esp
c002636b:	53                   	push   ebx
c002636c:	83 ec 2c             	sub    esp,0x2c
c002636f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026372:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0026375:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0026378:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002637b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002637e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026381:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026384:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026387:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002638a:	88 d8                	mov    al,bl
c002638c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002638f:	88 c8                	mov    al,cl
c0026391:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026394:	88 d0                	mov    al,dl
c0026396:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0026399:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002639d:	83 c0 08             	add    eax,0x8
c00263a0:	01 c0                	add    eax,eax
c00263a2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263a5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263a9:	83 c0 08             	add    eax,0x8
c00263ac:	01 c0                	add    eax,eax
c00263ae:	40                   	inc    eax
c00263af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00263b2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263b5:	50                   	push   eax
c00263b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263b9:	e8 60 fe ff ff       	call   c002621e <IOAPIC::read(int)>
c00263be:	83 c4 08             	add    esp,0x8
c00263c1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00263c4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00263cb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00263ce:	c1 e0 18             	shl    eax,0x18
c00263d1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00263d4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00263d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263da:	52                   	push   edx
c00263db:	50                   	push   eax
c00263dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263df:	e8 58 ff ff ff       	call   c002633c <IOAPIC::write(int, int)>
c00263e4:	83 c4 0c             	add    esp,0xc
c00263e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263ea:	50                   	push   eax
c00263eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263ee:	e8 2b fe ff ff       	call   c002621e <IOAPIC::read(int)>
c00263f3:	83 c4 08             	add    esp,0x8
c00263f6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00263f9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026400:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026407:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002640e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026412:	74 09                	je     c002641d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026414:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002641b:	eb 07                	jmp    c0026424 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002641d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026424:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026428:	74 09                	je     c0026433 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002642a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026431:	eb 07                	jmp    c002643a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026433:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002643a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026441:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026445:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026448:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002644b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002644e:	52                   	push   edx
c002644f:	50                   	push   eax
c0026450:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026453:	e8 e4 fe ff ff       	call   c002633c <IOAPIC::write(int, int)>
c0026458:	83 c4 0c             	add    esp,0xc
c002645b:	90                   	nop
c002645c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002645f:	c9                   	leave  
c0026460:	c3                   	ret    
c0026461:	90                   	nop

c0026462 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026462:	55                   	push   ebp
c0026463:	89 e5                	mov    ebp,esp
c0026465:	57                   	push   edi
c0026466:	56                   	push   esi
c0026467:	53                   	push   ebx
c0026468:	83 ec 2c             	sub    esp,0x2c
c002646b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002646e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026471:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026475:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026479:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002647d:	74 5a                	je     c00264d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002647f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026483:	7f 44                	jg     c00264c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0026485:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026488:	05 80 e0 02 c0       	add    eax,0xc002e080
c002648d:	8a 00                	mov    al,BYTE PTR [eax]
c002648f:	0f b6 c0             	movzx  eax,al
c0026492:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026495:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026498:	66 8b 84 00 a0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce860]
c00264a0:	0f b7 c0             	movzx  eax,ax
c00264a3:	83 e0 02             	and    eax,0x2
c00264a6:	85 c0                	test   eax,eax
c00264a8:	74 04                	je     c00264ae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00264aa:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00264ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264b1:	66 8b 84 00 a0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce860]
c00264b9:	0f b7 c0             	movzx  eax,ax
c00264bc:	83 e0 08             	and    eax,0x8
c00264bf:	85 c0                	test   eax,eax
c00264c1:	74 16                	je     c00264d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264c3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264c7:	eb 10                	jmp    c00264d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264c9:	83 ec 0c             	sub    esp,0xc
c00264cc:	68 50 db 02 c0       	push   0xc002db50
c00264d1:	e8 b1 43 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00264d6:	83 c4 10             	add    esp,0x10
c00264d9:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00264dd:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c00264e2:	83 ec 08             	sub    esp,0x8
c00264e5:	50                   	push   eax
c00264e6:	68 88 db 02 c0       	push   0xc002db88
c00264eb:	e8 db c9 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00264f0:	83 c4 10             	add    esp,0x10
c00264f3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00264fa:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c00264ff:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026502:	7d 67                	jge    c002656b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026504:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026507:	8b 04 85 c0 31 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcce40]
c002650e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026511:	83 ec 08             	sub    esp,0x8
c0026514:	52                   	push   edx
c0026515:	50                   	push   eax
c0026516:	e8 d1 fc ff ff       	call   c00261ec <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002651b:	83 c4 10             	add    esp,0x10
c002651e:	84 c0                	test   al,al
c0026520:	74 44                	je     c0026566 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026522:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026525:	8b 1c 85 c0 31 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcce40]
c002652c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026530:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026533:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026537:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002653a:	83 c0 20             	add    eax,0x20
c002653d:	0f b6 f0             	movzx  esi,al
c0026540:	b8 00 00 00 00       	mov    eax,0x0
c0026545:	99                   	cdq    
c0026546:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026549:	0f b6 c9             	movzx  ecx,cl
c002654c:	83 ec 04             	sub    esp,0x4
c002654f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026552:	57                   	push   edi
c0026553:	56                   	push   esi
c0026554:	52                   	push   edx
c0026555:	50                   	push   eax
c0026556:	51                   	push   ecx
c0026557:	53                   	push   ebx
c0026558:	e8 0b fe ff ff       	call   c0026368 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002655d:	83 c4 20             	add    esp,0x20
c0026560:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026564:	eb 05                	jmp    c002656b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026566:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026569:	eb 8f                	jmp    c00264fa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002656b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002656e:	83 f0 01             	xor    eax,0x1
c0026571:	84 c0                	test   al,al
c0026573:	74 10                	je     c0026585 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026575:	83 ec 0c             	sub    esp,0xc
c0026578:	68 9f db 02 c0       	push   0xc002db9f
c002657d:	e8 05 43 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0026582:	83 c4 10             	add    esp,0x10
c0026585:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026589:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026590:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026594:	7f 65                	jg     c00265fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026599:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002659c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265a3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265a6:	01 ca                	add    edx,ecx
c00265a8:	83 c2 54             	add    edx,0x54
c00265ab:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00265af:	85 c0                	test   eax,eax
c00265b1:	75 43                	jne    c00265f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00265b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265b9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265c0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265c3:	01 ca                	add    edx,ecx
c00265c5:	8d 4a 54             	lea    ecx,[edx+0x54]
c00265c8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00265cb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00265cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265d5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265dc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265df:	01 ca                	add    edx,ecx
c00265e1:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00265e7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00265ea:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00265ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265f1:	83 e8 20             	sub    eax,0x20
c00265f4:	eb 1a                	jmp    c0026610 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00265f6:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00265f9:	eb 95                	jmp    c0026590 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00265fb:	83 ec 0c             	sub    esp,0xc
c00265fe:	68 ac db 02 c0       	push   0xc002dbac
c0026603:	e8 7f 42 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0026608:	83 c4 10             	add    esp,0x10
c002660b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026610:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026613:	5b                   	pop    ebx
c0026614:	5e                   	pop    esi
c0026615:	5f                   	pop    edi
c0026616:	5d                   	pop    ebp
c0026617:	c3                   	ret    

c0026618 <PIC::disable()>:
c0026618:	55                   	push   ebp
c0026619:	89 e5                	mov    ebp,esp
c002661b:	83 ec 10             	sub    esp,0x10
c002661e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026624:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026628:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002662b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002662f:	ee                   	out    dx,al
c0026630:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026636:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002663a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002663d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026641:	ee                   	out    dx,al
c0026642:	90                   	nop
c0026643:	c9                   	leave  
c0026644:	c3                   	ret    
c0026645:	90                   	nop

c0026646 <PIC::close(int, int, void*)>:
c0026646:	55                   	push   ebp
c0026647:	89 e5                	mov    ebp,esp
c0026649:	83 ec 08             	sub    esp,0x8
c002664c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002664f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026651:	83 c0 3c             	add    eax,0x3c
c0026654:	8b 00                	mov    eax,DWORD PTR [eax]
c0026656:	83 ec 0c             	sub    esp,0xc
c0026659:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002665c:	ff d0                	call   eax
c002665e:	83 c4 10             	add    esp,0x10
c0026661:	b8 00 00 00 00       	mov    eax,0x0
c0026666:	c9                   	leave  
c0026667:	c3                   	ret    

c0026668 <PIC::PIC()>:
c0026668:	83 ec 0c             	sub    esp,0xc
c002666b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666f:	83 ec 08             	sub    esp,0x8
c0026672:	68 58 dc 02 c0       	push   0xc002dc58
c0026677:	50                   	push   eax
c0026678:	e8 ed e5 fe ff       	call   c0014c6a <InterruptController::InterruptController(char const*)>
c002667d:	83 c4 10             	add    esp,0x10
c0026680:	ba 84 dc 02 c0       	mov    edx,0xc002dc84
c0026685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026689:	89 10                	mov    DWORD PTR [eax],edx
c002668b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002668f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026695:	0f b6 d0             	movzx  edx,al
c0026698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00266a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266ad:	0f b6 d0             	movzx  edx,al
c00266b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00266b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266c3:	8d 50 01             	lea    edx,[eax+0x1]
c00266c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266ca:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266d0:	0f b6 d0             	movzx  edx,al
c00266d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266db:	83 e1 3f             	and    ecx,0x3f
c00266de:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266ec:	0f b6 d0             	movzx  edx,al
c00266ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f3:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00266fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266fe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026704:	0f b6 d0             	movzx  edx,al
c0026707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002670b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026714:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002671a:	8d 50 01             	lea    edx,[eax+0x1]
c002671d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026721:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026727:	0f b6 d0             	movzx  edx,al
c002672a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026732:	83 e1 3f             	and    ecx,0x3f
c0026735:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026739:	90                   	nop
c002673a:	83 c4 0c             	add    esp,0xc
c002673d:	c3                   	ret    

c002673e <PIC::ioWait()>:
c002673e:	eb 00                	jmp    c0026740 <PIC::ioWait()+0x2>
c0026740:	eb 00                	jmp    c0026742 <PIC::ioWait()+0x4>
c0026742:	90                   	nop
c0026743:	c3                   	ret    

c0026744 <PIC::getIRQReg(int)>:
c0026744:	55                   	push   ebp
c0026745:	89 e5                	mov    ebp,esp
c0026747:	83 ec 10             	sub    esp,0x10
c002674a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002674d:	0f b6 c0             	movzx  eax,al
c0026750:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026756:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026759:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002675c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026760:	ee                   	out    dx,al
c0026761:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026764:	0f b6 c0             	movzx  eax,al
c0026767:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002676d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026770:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026773:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026777:	ee                   	out    dx,al
c0026778:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002677e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026782:	89 c2                	mov    edx,eax
c0026784:	ec                   	in     al,dx
c0026785:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026788:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002678b:	0f b6 c0             	movzx  eax,al
c002678e:	c1 e0 08             	shl    eax,0x8
c0026791:	89 c1                	mov    ecx,eax
c0026793:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026799:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002679d:	89 c2                	mov    edx,eax
c002679f:	ec                   	in     al,dx
c00267a0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00267a3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00267a6:	0f b6 c0             	movzx  eax,al
c00267a9:	09 c8                	or     eax,ecx
c00267ab:	c9                   	leave  
c00267ac:	c3                   	ret    
c00267ad:	90                   	nop

c00267ae <PIC::eoi(unsigned char)>:
c00267ae:	55                   	push   ebp
c00267af:	89 e5                	mov    ebp,esp
c00267b1:	83 ec 14             	sub    esp,0x14
c00267b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267b7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00267ba:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00267be:	75 1e                	jne    c00267de <PIC::eoi(unsigned char)+0x30>
c00267c0:	6a 0b                	push   0xb
c00267c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267c5:	e8 7a ff ff ff       	call   c0026744 <PIC::getIRQReg(int)>
c00267ca:	83 c4 08             	add    esp,0x8
c00267cd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00267d1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00267d5:	25 80 00 00 00       	and    eax,0x80
c00267da:	85 c0                	test   eax,eax
c00267dc:	74 5f                	je     c002683d <PIC::eoi(unsigned char)+0x8f>
c00267de:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00267e2:	75 2d                	jne    c0026811 <PIC::eoi(unsigned char)+0x63>
c00267e4:	6a 0b                	push   0xb
c00267e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267e9:	e8 56 ff ff ff       	call   c0026744 <PIC::getIRQReg(int)>
c00267ee:	83 c4 08             	add    esp,0x8
c00267f1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00267f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00267f8:	66 85 c0             	test   ax,ax
c00267fb:	78 14                	js     c0026811 <PIC::eoi(unsigned char)+0x63>
c00267fd:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026803:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026807:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002680a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002680e:	ee                   	out    dx,al
c002680f:	eb 2d                	jmp    c002683e <PIC::eoi(unsigned char)+0x90>
c0026811:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026815:	76 12                	jbe    c0026829 <PIC::eoi(unsigned char)+0x7b>
c0026817:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002681d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026821:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026824:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026828:	ee                   	out    dx,al
c0026829:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002682f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026833:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026836:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002683a:	ee                   	out    dx,al
c002683b:	eb 01                	jmp    c002683e <PIC::eoi(unsigned char)+0x90>
c002683d:	90                   	nop
c002683e:	c9                   	leave  
c002683f:	c3                   	ret    

c0026840 <PIC::remap()>:
c0026840:	55                   	push   ebp
c0026841:	89 e5                	mov    ebp,esp
c0026843:	83 ec 48             	sub    esp,0x48
c0026846:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002684d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026854:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002685a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002685d:	89 c2                	mov    edx,eax
c002685f:	ec                   	in     al,dx
c0026860:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026863:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026866:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026869:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002686f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026872:	89 c2                	mov    edx,eax
c0026874:	ec                   	in     al,dx
c0026875:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026878:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002687b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002687e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026884:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026888:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002688b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002688e:	ee                   	out    dx,al
c002688f:	83 ec 0c             	sub    esp,0xc
c0026892:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026895:	e8 a4 fe ff ff       	call   c002673e <PIC::ioWait()>
c002689a:	83 c4 10             	add    esp,0x10
c002689d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00268a3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00268a7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00268aa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00268ad:	ee                   	out    dx,al
c00268ae:	83 ec 0c             	sub    esp,0xc
c00268b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268b4:	e8 85 fe ff ff       	call   c002673e <PIC::ioWait()>
c00268b9:	83 c4 10             	add    esp,0x10
c00268bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00268bf:	0f b6 c0             	movzx  eax,al
c00268c2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00268c8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00268cb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00268ce:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00268d1:	ee                   	out    dx,al
c00268d2:	83 ec 0c             	sub    esp,0xc
c00268d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268d8:	e8 61 fe ff ff       	call   c002673e <PIC::ioWait()>
c00268dd:	83 c4 10             	add    esp,0x10
c00268e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268e3:	0f b6 c0             	movzx  eax,al
c00268e6:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00268ec:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00268ef:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00268f2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00268f5:	ee                   	out    dx,al
c00268f6:	83 ec 0c             	sub    esp,0xc
c00268f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268fc:	e8 3d fe ff ff       	call   c002673e <PIC::ioWait()>
c0026901:	83 c4 10             	add    esp,0x10
c0026904:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002690a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002690e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026911:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026914:	ee                   	out    dx,al
c0026915:	83 ec 0c             	sub    esp,0xc
c0026918:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002691b:	e8 1e fe ff ff       	call   c002673e <PIC::ioWait()>
c0026920:	83 c4 10             	add    esp,0x10
c0026923:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026929:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002692d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026930:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026933:	ee                   	out    dx,al
c0026934:	83 ec 0c             	sub    esp,0xc
c0026937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002693a:	e8 ff fd ff ff       	call   c002673e <PIC::ioWait()>
c002693f:	83 c4 10             	add    esp,0x10
c0026942:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026948:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002694c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002694f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026952:	ee                   	out    dx,al
c0026953:	83 ec 0c             	sub    esp,0xc
c0026956:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026959:	e8 e0 fd ff ff       	call   c002673e <PIC::ioWait()>
c002695e:	83 c4 10             	add    esp,0x10
c0026961:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026967:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002696b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002696e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026971:	ee                   	out    dx,al
c0026972:	83 ec 0c             	sub    esp,0xc
c0026975:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026978:	e8 c1 fd ff ff       	call   c002673e <PIC::ioWait()>
c002697d:	83 c4 10             	add    esp,0x10
c0026980:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026984:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002698a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002698d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026990:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026993:	ee                   	out    dx,al
c0026994:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026998:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002699e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00269a1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00269a4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00269a7:	ee                   	out    dx,al
c00269a8:	90                   	nop
c00269a9:	c9                   	leave  
c00269aa:	c3                   	ret    
c00269ab:	90                   	nop

c00269ac <PIC::open(int, int, void*)>:
c00269ac:	55                   	push   ebp
c00269ad:	89 e5                	mov    ebp,esp
c00269af:	83 ec 18             	sub    esp,0x18
c00269b2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00269b8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00269bc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00269bf:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00269c3:	ee                   	out    dx,al
c00269c4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00269ca:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00269ce:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00269d1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00269d5:	ee                   	out    dx,al
c00269d6:	83 ec 0c             	sub    esp,0xc
c00269d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269dc:	e8 5f fe ff ff       	call   c0026840 <PIC::remap()>
c00269e1:	83 c4 10             	add    esp,0x10
c00269e4:	b8 00 00 00 00       	mov    eax,0x0
c00269e9:	c9                   	leave  
c00269ea:	c3                   	ret    
c00269eb:	90                   	nop

c00269ec <APICTimer::close(int, int, void*)>:
c00269ec:	b8 00 00 00 00       	mov    eax,0x0
c00269f1:	c3                   	ret    

c00269f2 <apicTimerHandler(regs*, void*)>:
c00269f2:	83 ec 0c             	sub    esp,0xc
c00269f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00269fb:	99                   	cdq    
c00269fc:	52                   	push   edx
c00269fd:	50                   	push   eax
c00269fe:	6a 00                	push   0x0
c0026a00:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a05:	e8 9a 07 00 00       	call   c00271a4 <__udivdi3>
c0026a0a:	83 c4 10             	add    esp,0x10
c0026a0d:	83 ec 08             	sub    esp,0x8
c0026a10:	52                   	push   edx
c0026a11:	50                   	push   eax
c0026a12:	e8 08 04 ff ff       	call   c0016e1f <timerHandler(unsigned long long)>
c0026a17:	83 c4 10             	add    esp,0x10
c0026a1a:	90                   	nop
c0026a1b:	83 c4 0c             	add    esp,0xc
c0026a1e:	c3                   	ret    
c0026a1f:	90                   	nop

c0026a20 <APICTimer::write(int)>:
c0026a20:	53                   	push   ebx
c0026a21:	83 ec 28             	sub    esp,0x28
c0026a24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a2c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a32:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0026a37:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a3d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026a43:	83 ec 0c             	sub    esp,0xc
c0026a46:	50                   	push   eax
c0026a47:	e8 de f4 ff ff       	call   c0025f2a <APIC::getBase()>
c0026a4c:	83 c4 10             	add    esp,0x10
c0026a4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026a53:	a1 b0 f4 02 c0       	mov    eax,ds:0xc002f4b0
c0026a58:	8b 15 b4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4b4
c0026a5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026a62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026a66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a6a:	05 e0 03 00 00       	add    eax,0x3e0
c0026a6f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a79:	05 80 03 00 00       	add    eax,0x380
c0026a7e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026a84:	fb                   	sti    
c0026a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a8d:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026a92:	83 d2 00             	adc    edx,0x0
c0026a95:	89 c1                	mov    ecx,eax
c0026a97:	89 d3                	mov    ebx,edx
c0026a99:	a1 b0 f4 02 c0       	mov    eax,ds:0xc002f4b0
c0026a9e:	8b 15 b4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4b4
c0026aa4:	39 c8                	cmp    eax,ecx
c0026aa6:	89 d0                	mov    eax,edx
c0026aa8:	19 d8                	sbb    eax,ebx
c0026aaa:	73 02                	jae    c0026aae <APICTimer::write(int)+0x8e>
c0026aac:	eb d7                	jmp    c0026a85 <APICTimer::write(int)+0x65>
c0026aae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ab2:	05 20 03 00 00       	add    eax,0x320
c0026ab7:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026abd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ac1:	05 90 03 00 00       	add    eax,0x390
c0026ac6:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ac8:	f7 d0                	not    eax
c0026aca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ace:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ad2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ad6:	ba 00 00 00 00       	mov    edx,0x0
c0026adb:	f7 f3                	div    ebx
c0026add:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ae1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026ae5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026aeb:	0d 00 00 02 00       	or     eax,0x20000
c0026af0:	89 c2                	mov    edx,eax
c0026af2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026af6:	05 20 03 00 00       	add    eax,0x320
c0026afb:	89 10                	mov    DWORD PTR [eax],edx
c0026afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b01:	05 e0 03 00 00       	add    eax,0x3e0
c0026b06:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b10:	05 80 03 00 00       	add    eax,0x380
c0026b15:	89 c2                	mov    edx,eax
c0026b17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b1b:	89 02                	mov    DWORD PTR [edx],eax
c0026b1d:	90                   	nop
c0026b1e:	83 c4 28             	add    esp,0x28
c0026b21:	5b                   	pop    ebx
c0026b22:	c3                   	ret    
c0026b23:	90                   	nop

c0026b24 <APICTimer::open(int, int, void*)>:
c0026b24:	57                   	push   edi
c0026b25:	56                   	push   esi
c0026b26:	53                   	push   ebx
c0026b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b2d:	83 c0 24             	add    eax,0x24
c0026b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b32:	83 ec 08             	sub    esp,0x8
c0026b35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b3d:	ff d0                	call   eax
c0026b3f:	83 c4 10             	add    esp,0x10
c0026b42:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0026b47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b4d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b53:	83 ec 0c             	sub    esp,0xc
c0026b56:	50                   	push   eax
c0026b57:	e8 ce f3 ff ff       	call   c0025f2a <APIC::getBase()>
c0026b5c:	83 c4 10             	add    esp,0x10
c0026b5f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b69:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026b6f:	0f b6 f8             	movzx  edi,al
c0026b72:	89 d0                	mov    eax,edx
c0026b74:	ba 00 00 00 00       	mov    edx,0x0
c0026b79:	89 c1                	mov    ecx,eax
c0026b7b:	80 e5 ff             	and    ch,0xff
c0026b7e:	89 cb                	mov    ebx,ecx
c0026b80:	0f b6 f2             	movzx  esi,dl
c0026b83:	89 d8                	mov    eax,ebx
c0026b85:	89 f2                	mov    edx,esi
c0026b87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b8b:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026b8e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026b92:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026b96:	83 e0 00             	and    eax,0x0
c0026b99:	09 d0                	or     eax,edx
c0026b9b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ba3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026ba9:	8d 50 01             	lea    edx,[eax+0x1]
c0026bac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bb0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026bb6:	0f b6 d0             	movzx  edx,al
c0026bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bbd:	83 c2 08             	add    edx,0x8
c0026bc0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026bc4:	0f b6 c9             	movzx  ecx,cl
c0026bc7:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026bcd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bd5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026bd9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026be3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026be7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026bed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026bf1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026bf7:	83 ec 0c             	sub    esp,0xc
c0026bfa:	51                   	push   ecx
c0026bfb:	6a 01                	push   0x1
c0026bfd:	68 f2 69 02 c0       	push   0xc00269f2
c0026c02:	52                   	push   edx
c0026c03:	50                   	push   eax
c0026c04:	e8 7b d6 fe ff       	call   c0014284 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c09:	83 c4 20             	add    esp,0x20
c0026c0c:	89 c2                	mov    edx,eax
c0026c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c12:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c18:	b8 00 00 00 00       	mov    eax,0x0
c0026c1d:	5b                   	pop    ebx
c0026c1e:	5e                   	pop    esi
c0026c1f:	5f                   	pop    edi
c0026c20:	c3                   	ret    
c0026c21:	90                   	nop

c0026c22 <APICTimer::APICTimer()>:
c0026c22:	83 ec 0c             	sub    esp,0xc
c0026c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c29:	83 ec 08             	sub    esp,0x8
c0026c2c:	68 c4 dc 02 c0       	push   0xc002dcc4
c0026c31:	50                   	push   eax
c0026c32:	e8 59 01 ff ff       	call   c0016d90 <Timer::Timer(char const*)>
c0026c37:	83 c4 10             	add    esp,0x10
c0026c3a:	ba d8 dc 02 c0       	mov    edx,0xc002dcd8
c0026c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c43:	89 10                	mov    DWORD PTR [eax],edx
c0026c45:	90                   	nop
c0026c46:	83 c4 0c             	add    esp,0xc
c0026c49:	c3                   	ret    

c0026c4a <PIT::write(int)>:
c0026c4a:	83 ec 10             	sub    esp,0x10
c0026c4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c51:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c55:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026c5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026c5f:	a3 e4 31 03 c0       	mov    ds:0xc00331e4,eax
c0026c64:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026c69:	99                   	cdq    
c0026c6a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026c6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c72:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026c79:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026c7e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026c82:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026c87:	ee                   	out    dx,al
c0026c88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026c8c:	0f b6 c0             	movzx  eax,al
c0026c8f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026c96:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026c9a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026c9e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026ca3:	ee                   	out    dx,al
c0026ca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ca8:	c1 f8 08             	sar    eax,0x8
c0026cab:	0f b6 c0             	movzx  eax,al
c0026cae:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026cb5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026cb9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026cbd:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026cc2:	ee                   	out    dx,al
c0026cc3:	90                   	nop
c0026cc4:	83 c4 10             	add    esp,0x10
c0026cc7:	c3                   	ret    

c0026cc8 <pitHandler(regs*, void*)>:
c0026cc8:	83 ec 0c             	sub    esp,0xc
c0026ccb:	a1 e4 31 03 c0       	mov    eax,ds:0xc00331e4
c0026cd0:	99                   	cdq    
c0026cd1:	52                   	push   edx
c0026cd2:	50                   	push   eax
c0026cd3:	6a 00                	push   0x0
c0026cd5:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026cda:	e8 c5 04 00 00       	call   c00271a4 <__udivdi3>
c0026cdf:	83 c4 10             	add    esp,0x10
c0026ce2:	83 ec 08             	sub    esp,0x8
c0026ce5:	52                   	push   edx
c0026ce6:	50                   	push   eax
c0026ce7:	e8 33 01 ff ff       	call   c0016e1f <timerHandler(unsigned long long)>
c0026cec:	83 c4 10             	add    esp,0x10
c0026cef:	90                   	nop
c0026cf0:	83 c4 0c             	add    esp,0xc
c0026cf3:	c3                   	ret    

c0026cf4 <PIT::open(int, int, void*)>:
c0026cf4:	83 ec 0c             	sub    esp,0xc
c0026cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cfd:	83 c0 24             	add    eax,0x24
c0026d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d02:	83 ec 08             	sub    esp,0x8
c0026d05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d0d:	ff d0                	call   eax
c0026d0f:	83 c4 10             	add    esp,0x10
c0026d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d16:	83 ec 0c             	sub    esp,0xc
c0026d19:	6a 00                	push   0x0
c0026d1b:	6a 01                	push   0x1
c0026d1d:	68 c8 6c 02 c0       	push   0xc0026cc8
c0026d22:	6a 00                	push   0x0
c0026d24:	50                   	push   eax
c0026d25:	e8 5a d5 fe ff       	call   c0014284 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d2a:	83 c4 20             	add    esp,0x20
c0026d2d:	89 c2                	mov    edx,eax
c0026d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d33:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d39:	b8 00 00 00 00       	mov    eax,0x0
c0026d3e:	83 c4 0c             	add    esp,0xc
c0026d41:	c3                   	ret    

c0026d42 <PIT::close(int, int, void*)>:
c0026d42:	83 ec 0c             	sub    esp,0xc
c0026d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d49:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d57:	6a 01                	push   0x1
c0026d59:	68 c8 6c 02 c0       	push   0xc0026cc8
c0026d5e:	6a 00                	push   0x0
c0026d60:	50                   	push   eax
c0026d61:	e8 5c d5 fe ff       	call   c00142c2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026d66:	83 c4 10             	add    esp,0x10
c0026d69:	b8 00 00 00 00       	mov    eax,0x0
c0026d6e:	83 c4 0c             	add    esp,0xc
c0026d71:	c3                   	ret    

c0026d72 <PIT::PIT()>:
c0026d72:	83 ec 0c             	sub    esp,0xc
c0026d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d79:	83 ec 08             	sub    esp,0x8
c0026d7c:	68 00 dd 02 c0       	push   0xc002dd00
c0026d81:	50                   	push   eax
c0026d82:	e8 09 00 ff ff       	call   c0016d90 <Timer::Timer(char const*)>
c0026d87:	83 c4 10             	add    esp,0x10
c0026d8a:	ba 28 dd 02 c0       	mov    edx,0xc002dd28
c0026d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d93:	89 10                	mov    DWORD PTR [eax],edx
c0026d95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026d9f:	0f b6 d0             	movzx  edx,al
c0026da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026db7:	0f b6 d0             	movzx  edx,al
c0026dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dbe:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dcd:	8d 50 01             	lea    edx,[eax+0x1]
c0026dd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026dd4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026dda:	0f b6 d0             	movzx  edx,al
c0026ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026de1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026de5:	83 e1 3f             	and    ecx,0x3f
c0026de8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026dec:	90                   	nop
c0026ded:	83 c4 0c             	add    esp,0xc
c0026df0:	c3                   	ret    
c0026df1:	66 90                	xchg   ax,ax
c0026df3:	66 90                	xchg   ax,ax
c0026df5:	66 90                	xchg   ax,ax
c0026df7:	66 90                	xchg   ax,ax
c0026df9:	66 90                	xchg   ax,ax
c0026dfb:	66 90                	xchg   ax,ax
c0026dfd:	66 90                	xchg   ax,ax
c0026dff:	90                   	nop

c0026e00 <avxDetect>:
c0026e00:	b8 00 00 00 00       	mov    eax,0x0
c0026e05:	c3                   	ret    

c0026e06 <avxSave>:
c0026e06:	c3                   	ret    

c0026e07 <avxLoad>:
c0026e07:	c3                   	ret    

c0026e08 <avxInit>:
c0026e08:	c3                   	ret    

c0026e09 <avxClose>:
c0026e09:	c3                   	ret    

c0026e0a <wouldSheSayYes>:
c0026e0a:	c3                   	ret    
c0026e0b:	49                   	dec    ecx
c0026e0c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e10:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e14:	75 20                	jne    c0026e36 <sseDetect.noSSE+0x1>
c0026e16:	4e                   	dec    esi
c0026e17:	79 61                	jns    c0026e7a <x87Detect+0x14>
c0026e19:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e1e:	66 90                	xchg   ax,ax

c0026e20 <absolutelyNoChanceInHell>:
c0026e20:	b8 01 00 00 00       	mov    eax,0x1
c0026e25:	0f a2                	cpuid  
c0026e27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e2d:	74 06                	je     c0026e35 <sseDetect.noSSE>
c0026e2f:	b8 01 00 00 00       	mov    eax,0x1
c0026e34:	c3                   	ret    

c0026e35 <sseDetect.noSSE>:
c0026e35:	31 c0                	xor    eax,eax
c0026e37:	c3                   	ret    

c0026e38 <sseSave>:
c0026e38:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e3d:	c3                   	ret    

c0026e3e <sseLoad>:
c0026e3e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026e43:	c3                   	ret    

c0026e44 <sseInit>:
c0026e44:	e8 49 00 00 00       	call   c0026e92 <x87Init>
c0026e49:	0f 20 e0             	mov    eax,cr4
c0026e4c:	66 0d 00 06          	or     ax,0x600
c0026e50:	0f 22 e0             	mov    cr4,eax
c0026e53:	c3                   	ret    

c0026e54 <sseClose>:
c0026e54:	c3                   	ret    
c0026e55:	66 90                	xchg   ax,ax
c0026e57:	66 90                	xchg   ax,ax
c0026e59:	66 90                	xchg   ax,ax
c0026e5b:	66 90                	xchg   ax,ax
c0026e5d:	66 90                	xchg   ax,ax
c0026e5f:	90                   	nop

c0026e60 <value_37F>:
c0026e60:	7f 03                	jg     c0026e65 <value_37A+0x1>

c0026e62 <value_37E>:
c0026e62:	7e 03                	jle    c0026e67 <x87Detect+0x1>

c0026e64 <value_37A>:
c0026e64:	7a 03                	jp     c0026e69 <x87Detect+0x3>

c0026e66 <x87Detect>:
c0026e66:	b8 01 00 00 00       	mov    eax,0x1
c0026e6b:	0f a2                	cpuid  
c0026e6d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026e73:	74 06                	je     c0026e7b <x87Detect.nox87>
c0026e75:	b8 01 00 00 00       	mov    eax,0x1
c0026e7a:	c3                   	ret    

c0026e7b <x87Detect.nox87>:
c0026e7b:	b8 00 00 00 00       	mov    eax,0x0
c0026e80:	c3                   	ret    

c0026e81 <x87Save>:
c0026e81:	55                   	push   ebp
c0026e82:	89 e5                	mov    ebp,esp
c0026e84:	9b dd 75 08          	fsave  [ebp+0x8]
c0026e88:	c9                   	leave  
c0026e89:	c3                   	ret    

c0026e8a <x87Load>:
c0026e8a:	55                   	push   ebp
c0026e8b:	89 e5                	mov    ebp,esp
c0026e8d:	dd 65 08             	frstor [ebp+0x8]
c0026e90:	c9                   	leave  
c0026e91:	c3                   	ret    

c0026e92 <x87Init>:
c0026e92:	9b db e3             	finit  
c0026e95:	0f 20 c0             	mov    eax,cr0
c0026e98:	66 25 fb ff          	and    ax,0xfffb
c0026e9c:	66 0d 22 00          	or     ax,0x22
c0026ea0:	0f 22 c0             	mov    cr0,eax
c0026ea3:	0f 06                	clts   
c0026ea5:	d9 2d 64 6e 02 c0    	fldcw  WORD PTR ds:0xc0026e64
c0026eab:	c3                   	ret    

c0026eac <x87Close>:
c0026eac:	c3                   	ret    
c0026ead:	66 90                	xchg   ax,ax
c0026eaf:	90                   	nop

c0026eb0 <__do_global_ctors_aux>:
c0026eb0:	a1 e8 9a 02 c0       	mov    eax,ds:0xc0029ae8
c0026eb5:	83 f8 ff             	cmp    eax,0xffffffff
c0026eb8:	74 1a                	je     c0026ed4 <__do_global_ctors_aux+0x24>
c0026eba:	55                   	push   ebp
c0026ebb:	89 e5                	mov    ebp,esp
c0026ebd:	53                   	push   ebx
c0026ebe:	52                   	push   edx
c0026ebf:	bb e8 9a 02 c0       	mov    ebx,0xc0029ae8
c0026ec4:	ff d0                	call   eax
c0026ec6:	83 eb 04             	sub    ebx,0x4
c0026ec9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026ecb:	83 f8 ff             	cmp    eax,0xffffffff
c0026ece:	75 f4                	jne    c0026ec4 <__do_global_ctors_aux+0x14>
c0026ed0:	58                   	pop    eax
c0026ed1:	5b                   	pop    ebx
c0026ed2:	5d                   	pop    ebp
c0026ed3:	c3                   	ret    
c0026ed4:	c3                   	ret    
c0026ed5:	66 90                	xchg   ax,ax
c0026ed7:	90                   	nop

c0026ed8 <__divdi3>:
c0026ed8:	55                   	push   ebp
c0026ed9:	57                   	push   edi
c0026eda:	56                   	push   esi
c0026edb:	53                   	push   ebx
c0026edc:	83 ec 1c             	sub    esp,0x1c
c0026edf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026ee3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ee7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026eea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026eee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026ef2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ef6:	85 db                	test   ebx,ebx
c0026ef8:	0f 88 8e 00 00 00    	js     c0026f8c <__divdi3+0xb4>
c0026efe:	89 dd                	mov    ebp,ebx
c0026f00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f08:	89 d3                	mov    ebx,edx
c0026f0a:	85 d2                	test   edx,edx
c0026f0c:	79 0d                	jns    c0026f1b <__divdi3+0x43>
c0026f0e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f12:	f7 d8                	neg    eax
c0026f14:	83 d2 00             	adc    edx,0x0
c0026f17:	f7 da                	neg    edx
c0026f19:	89 d3                	mov    ebx,edx
c0026f1b:	89 c7                	mov    edi,eax
c0026f1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f20:	85 db                	test   ebx,ebx
c0026f22:	75 48                	jne    c0026f6c <__divdi3+0x94>
c0026f24:	39 ef                	cmp    edi,ebp
c0026f26:	76 24                	jbe    c0026f4c <__divdi3+0x74>
c0026f28:	89 ea                	mov    edx,ebp
c0026f2a:	f7 f7                	div    edi
c0026f2c:	89 c1                	mov    ecx,eax
c0026f2e:	31 f6                	xor    esi,esi
c0026f30:	89 c8                	mov    eax,ecx
c0026f32:	89 f2                	mov    edx,esi
c0026f34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f38:	85 c9                	test   ecx,ecx
c0026f3a:	74 07                	je     c0026f43 <__divdi3+0x6b>
c0026f3c:	f7 d8                	neg    eax
c0026f3e:	83 d2 00             	adc    edx,0x0
c0026f41:	f7 da                	neg    edx
c0026f43:	83 c4 1c             	add    esp,0x1c
c0026f46:	5b                   	pop    ebx
c0026f47:	5e                   	pop    esi
c0026f48:	5f                   	pop    edi
c0026f49:	5d                   	pop    ebp
c0026f4a:	c3                   	ret    
c0026f4b:	90                   	nop
c0026f4c:	85 ff                	test   edi,edi
c0026f4e:	75 0b                	jne    c0026f5b <__divdi3+0x83>
c0026f50:	b8 01 00 00 00       	mov    eax,0x1
c0026f55:	31 d2                	xor    edx,edx
c0026f57:	f7 f3                	div    ebx
c0026f59:	89 c7                	mov    edi,eax
c0026f5b:	31 d2                	xor    edx,edx
c0026f5d:	89 e8                	mov    eax,ebp
c0026f5f:	f7 f7                	div    edi
c0026f61:	89 c6                	mov    esi,eax
c0026f63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f66:	f7 f7                	div    edi
c0026f68:	89 c1                	mov    ecx,eax
c0026f6a:	eb c4                	jmp    c0026f30 <__divdi3+0x58>
c0026f6c:	39 eb                	cmp    ebx,ebp
c0026f6e:	77 3c                	ja     c0026fac <__divdi3+0xd4>
c0026f70:	0f bd f3             	bsr    esi,ebx
c0026f73:	83 f6 1f             	xor    esi,0x1f
c0026f76:	75 40                	jne    c0026fb8 <__divdi3+0xe0>
c0026f78:	39 eb                	cmp    ebx,ebp
c0026f7a:	72 09                	jb     c0026f85 <__divdi3+0xad>
c0026f7c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026f7f:	0f 87 97 00 00 00    	ja     c002701c <__divdi3+0x144>
c0026f85:	b9 01 00 00 00       	mov    ecx,0x1
c0026f8a:	eb a4                	jmp    c0026f30 <__divdi3+0x58>
c0026f8c:	f7 d9                	neg    ecx
c0026f8e:	83 d3 00             	adc    ebx,0x0
c0026f91:	f7 db                	neg    ebx
c0026f93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f9a:	89 dd                	mov    ebp,ebx
c0026f9c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026fa4:	e9 5f ff ff ff       	jmp    c0026f08 <__divdi3+0x30>
c0026fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0026fac:	31 f6                	xor    esi,esi
c0026fae:	31 c9                	xor    ecx,ecx
c0026fb0:	e9 7b ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c0026fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0026fb8:	b8 20 00 00 00       	mov    eax,0x20
c0026fbd:	29 f0                	sub    eax,esi
c0026fbf:	89 f1                	mov    ecx,esi
c0026fc1:	d3 e3                	shl    ebx,cl
c0026fc3:	89 fa                	mov    edx,edi
c0026fc5:	88 c1                	mov    cl,al
c0026fc7:	d3 ea                	shr    edx,cl
c0026fc9:	09 da                	or     edx,ebx
c0026fcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026fcf:	89 f1                	mov    ecx,esi
c0026fd1:	d3 e7                	shl    edi,cl
c0026fd3:	89 eb                	mov    ebx,ebp
c0026fd5:	88 c1                	mov    cl,al
c0026fd7:	d3 eb                	shr    ebx,cl
c0026fd9:	89 f1                	mov    ecx,esi
c0026fdb:	d3 e5                	shl    ebp,cl
c0026fdd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026fe0:	88 c1                	mov    cl,al
c0026fe2:	d3 ea                	shr    edx,cl
c0026fe4:	09 d5                	or     ebp,edx
c0026fe6:	89 e8                	mov    eax,ebp
c0026fe8:	89 da                	mov    edx,ebx
c0026fea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026fee:	89 d3                	mov    ebx,edx
c0026ff0:	89 c5                	mov    ebp,eax
c0026ff2:	f7 e7                	mul    edi
c0026ff4:	39 d3                	cmp    ebx,edx
c0026ff6:	72 18                	jb     c0027010 <__divdi3+0x138>
c0026ff8:	74 0a                	je     c0027004 <__divdi3+0x12c>
c0026ffa:	89 e9                	mov    ecx,ebp
c0026ffc:	31 f6                	xor    esi,esi
c0026ffe:	e9 2d ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c0027003:	90                   	nop
c0027004:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027007:	89 f1                	mov    ecx,esi
c0027009:	d3 e7                	shl    edi,cl
c002700b:	39 c7                	cmp    edi,eax
c002700d:	73 eb                	jae    c0026ffa <__divdi3+0x122>
c002700f:	90                   	nop
c0027010:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027013:	31 f6                	xor    esi,esi
c0027015:	e9 16 ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c002701a:	66 90                	xchg   ax,ax
c002701c:	31 c9                	xor    ecx,ecx
c002701e:	e9 0d ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c0027023:	90                   	nop

c0027024 <__moddi3>:
c0027024:	55                   	push   ebp
c0027025:	57                   	push   edi
c0027026:	56                   	push   esi
c0027027:	53                   	push   ebx
c0027028:	83 ec 2c             	sub    esp,0x2c
c002702b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002702f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027033:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027037:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002703b:	85 db                	test   ebx,ebx
c002703d:	0f 88 85 00 00 00    	js     c00270c8 <__moddi3+0xa4>
c0027043:	89 de                	mov    esi,ebx
c0027045:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002704d:	89 d7                	mov    edi,edx
c002704f:	85 d2                	test   edx,edx
c0027051:	79 09                	jns    c002705c <__moddi3+0x38>
c0027053:	f7 d8                	neg    eax
c0027055:	83 d2 00             	adc    edx,0x0
c0027058:	f7 da                	neg    edx
c002705a:	89 d7                	mov    edi,edx
c002705c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027060:	89 cd                	mov    ebp,ecx
c0027062:	85 ff                	test   edi,edi
c0027064:	75 52                	jne    c00270b8 <__moddi3+0x94>
c0027066:	89 c3                	mov    ebx,eax
c0027068:	39 f0                	cmp    eax,esi
c002706a:	76 24                	jbe    c0027090 <__moddi3+0x6c>
c002706c:	89 c8                	mov    eax,ecx
c002706e:	89 f2                	mov    edx,esi
c0027070:	f7 f3                	div    ebx
c0027072:	89 d6                	mov    esi,edx
c0027074:	89 f0                	mov    eax,esi
c0027076:	31 d2                	xor    edx,edx
c0027078:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002707c:	85 c9                	test   ecx,ecx
c002707e:	74 07                	je     c0027087 <__moddi3+0x63>
c0027080:	f7 d8                	neg    eax
c0027082:	83 d2 00             	adc    edx,0x0
c0027085:	f7 da                	neg    edx
c0027087:	83 c4 2c             	add    esp,0x2c
c002708a:	5b                   	pop    ebx
c002708b:	5e                   	pop    esi
c002708c:	5f                   	pop    edi
c002708d:	5d                   	pop    ebp
c002708e:	c3                   	ret    
c002708f:	90                   	nop
c0027090:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027094:	85 db                	test   ebx,ebx
c0027096:	75 0d                	jne    c00270a5 <__moddi3+0x81>
c0027098:	b8 01 00 00 00       	mov    eax,0x1
c002709d:	31 d2                	xor    edx,edx
c002709f:	f7 f7                	div    edi
c00270a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270a5:	89 f0                	mov    eax,esi
c00270a7:	31 d2                	xor    edx,edx
c00270a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270ad:	f7 f7                	div    edi
c00270af:	89 e8                	mov    eax,ebp
c00270b1:	f7 f7                	div    edi
c00270b3:	89 d6                	mov    esi,edx
c00270b5:	eb bd                	jmp    c0027074 <__moddi3+0x50>
c00270b7:	90                   	nop
c00270b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00270bc:	39 f7                	cmp    edi,esi
c00270be:	76 20                	jbe    c00270e0 <__moddi3+0xbc>
c00270c0:	89 c8                	mov    eax,ecx
c00270c2:	89 f2                	mov    edx,esi
c00270c4:	eb b2                	jmp    c0027078 <__moddi3+0x54>
c00270c6:	66 90                	xchg   ax,ax
c00270c8:	f7 d9                	neg    ecx
c00270ca:	83 d3 00             	adc    ebx,0x0
c00270cd:	f7 db                	neg    ebx
c00270cf:	89 de                	mov    esi,ebx
c00270d1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00270d9:	e9 6f ff ff ff       	jmp    c002704d <__moddi3+0x29>
c00270de:	66 90                	xchg   ax,ax
c00270e0:	0f bd c7             	bsr    eax,edi
c00270e3:	83 f0 1f             	xor    eax,0x1f
c00270e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00270ea:	75 24                	jne    c0027110 <__moddi3+0xec>
c00270ec:	39 f7                	cmp    edi,esi
c00270ee:	72 06                	jb     c00270f6 <__moddi3+0xd2>
c00270f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00270f4:	77 0c                	ja     c0027102 <__moddi3+0xde>
c00270f6:	89 e9                	mov    ecx,ebp
c00270f8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00270fc:	19 fe                	sbb    esi,edi
c00270fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027102:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027106:	89 f2                	mov    edx,esi
c0027108:	e9 6b ff ff ff       	jmp    c0027078 <__moddi3+0x54>
c002710d:	8d 76 00             	lea    esi,[esi+0x0]
c0027110:	b8 20 00 00 00       	mov    eax,0x20
c0027115:	89 c2                	mov    edx,eax
c0027117:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002711b:	29 da                	sub    edx,ebx
c002711d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027121:	88 d9                	mov    cl,bl
c0027123:	d3 e7                	shl    edi,cl
c0027125:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027129:	88 d1                	mov    cl,dl
c002712b:	d3 e8                	shr    eax,cl
c002712d:	09 c7                	or     edi,eax
c002712f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027133:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027137:	89 d8                	mov    eax,ebx
c0027139:	88 d9                	mov    cl,bl
c002713b:	d3 e7                	shl    edi,cl
c002713d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027141:	89 f3                	mov    ebx,esi
c0027143:	88 d1                	mov    cl,dl
c0027145:	d3 eb                	shr    ebx,cl
c0027147:	89 c7                	mov    edi,eax
c0027149:	88 c1                	mov    cl,al
c002714b:	d3 e6                	shl    esi,cl
c002714d:	89 e8                	mov    eax,ebp
c002714f:	88 d1                	mov    cl,dl
c0027151:	d3 e8                	shr    eax,cl
c0027153:	09 f0                	or     eax,esi
c0027155:	89 f9                	mov    ecx,edi
c0027157:	d3 e5                	shl    ebp,cl
c0027159:	89 da                	mov    edx,ebx
c002715b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002715f:	89 d3                	mov    ebx,edx
c0027161:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027165:	89 c6                	mov    esi,eax
c0027167:	89 d1                	mov    ecx,edx
c0027169:	39 d3                	cmp    ebx,edx
c002716b:	72 27                	jb     c0027194 <__moddi3+0x170>
c002716d:	74 21                	je     c0027190 <__moddi3+0x16c>
c002716f:	29 f5                	sub    ebp,esi
c0027171:	19 cb                	sbb    ebx,ecx
c0027173:	89 de                	mov    esi,ebx
c0027175:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027179:	d3 e6                	shl    esi,cl
c002717b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002717f:	89 f9                	mov    ecx,edi
c0027181:	d3 ed                	shr    ebp,cl
c0027183:	09 ee                	or     esi,ebp
c0027185:	89 f0                	mov    eax,esi
c0027187:	d3 eb                	shr    ebx,cl
c0027189:	89 da                	mov    edx,ebx
c002718b:	e9 e8 fe ff ff       	jmp    c0027078 <__moddi3+0x54>
c0027190:	39 c5                	cmp    ebp,eax
c0027192:	73 db                	jae    c002716f <__moddi3+0x14b>
c0027194:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027198:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002719c:	89 d1                	mov    ecx,edx
c002719e:	89 c6                	mov    esi,eax
c00271a0:	eb cd                	jmp    c002716f <__moddi3+0x14b>
c00271a2:	66 90                	xchg   ax,ax

c00271a4 <__udivdi3>:
c00271a4:	55                   	push   ebp
c00271a5:	57                   	push   edi
c00271a6:	56                   	push   esi
c00271a7:	53                   	push   ebx
c00271a8:	83 ec 1c             	sub    esp,0x1c
c00271ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00271af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00271b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00271b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271bb:	85 d2                	test   edx,edx
c00271bd:	75 41                	jne    c0027200 <__udivdi3+0x5c>
c00271bf:	39 f7                	cmp    edi,esi
c00271c1:	76 15                	jbe    c00271d8 <__udivdi3+0x34>
c00271c3:	89 e8                	mov    eax,ebp
c00271c5:	89 f2                	mov    edx,esi
c00271c7:	f7 f7                	div    edi
c00271c9:	31 db                	xor    ebx,ebx
c00271cb:	89 da                	mov    edx,ebx
c00271cd:	83 c4 1c             	add    esp,0x1c
c00271d0:	5b                   	pop    ebx
c00271d1:	5e                   	pop    esi
c00271d2:	5f                   	pop    edi
c00271d3:	5d                   	pop    ebp
c00271d4:	c3                   	ret    
c00271d5:	8d 76 00             	lea    esi,[esi+0x0]
c00271d8:	89 f9                	mov    ecx,edi
c00271da:	85 ff                	test   edi,edi
c00271dc:	75 0b                	jne    c00271e9 <__udivdi3+0x45>
c00271de:	b8 01 00 00 00       	mov    eax,0x1
c00271e3:	31 d2                	xor    edx,edx
c00271e5:	f7 f7                	div    edi
c00271e7:	89 c1                	mov    ecx,eax
c00271e9:	31 d2                	xor    edx,edx
c00271eb:	89 f0                	mov    eax,esi
c00271ed:	f7 f1                	div    ecx
c00271ef:	89 c3                	mov    ebx,eax
c00271f1:	89 e8                	mov    eax,ebp
c00271f3:	f7 f1                	div    ecx
c00271f5:	89 da                	mov    edx,ebx
c00271f7:	83 c4 1c             	add    esp,0x1c
c00271fa:	5b                   	pop    ebx
c00271fb:	5e                   	pop    esi
c00271fc:	5f                   	pop    edi
c00271fd:	5d                   	pop    ebp
c00271fe:	c3                   	ret    
c00271ff:	90                   	nop
c0027200:	39 f2                	cmp    edx,esi
c0027202:	77 1c                	ja     c0027220 <__udivdi3+0x7c>
c0027204:	0f bd da             	bsr    ebx,edx
c0027207:	83 f3 1f             	xor    ebx,0x1f
c002720a:	75 24                	jne    c0027230 <__udivdi3+0x8c>
c002720c:	39 f2                	cmp    edx,esi
c002720e:	72 08                	jb     c0027218 <__udivdi3+0x74>
c0027210:	39 ef                	cmp    edi,ebp
c0027212:	0f 87 84 00 00 00    	ja     c002729c <__udivdi3+0xf8>
c0027218:	b8 01 00 00 00       	mov    eax,0x1
c002721d:	eb ac                	jmp    c00271cb <__udivdi3+0x27>
c002721f:	90                   	nop
c0027220:	31 db                	xor    ebx,ebx
c0027222:	31 c0                	xor    eax,eax
c0027224:	89 da                	mov    edx,ebx
c0027226:	83 c4 1c             	add    esp,0x1c
c0027229:	5b                   	pop    ebx
c002722a:	5e                   	pop    esi
c002722b:	5f                   	pop    edi
c002722c:	5d                   	pop    ebp
c002722d:	c3                   	ret    
c002722e:	66 90                	xchg   ax,ax
c0027230:	b8 20 00 00 00       	mov    eax,0x20
c0027235:	29 d8                	sub    eax,ebx
c0027237:	88 d9                	mov    cl,bl
c0027239:	d3 e2                	shl    edx,cl
c002723b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002723f:	89 fa                	mov    edx,edi
c0027241:	88 c1                	mov    cl,al
c0027243:	d3 ea                	shr    edx,cl
c0027245:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027249:	09 d1                	or     ecx,edx
c002724b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002724f:	88 d9                	mov    cl,bl
c0027251:	d3 e7                	shl    edi,cl
c0027253:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027257:	89 f7                	mov    edi,esi
c0027259:	88 c1                	mov    cl,al
c002725b:	d3 ef                	shr    edi,cl
c002725d:	88 d9                	mov    cl,bl
c002725f:	d3 e6                	shl    esi,cl
c0027261:	89 ea                	mov    edx,ebp
c0027263:	88 c1                	mov    cl,al
c0027265:	d3 ea                	shr    edx,cl
c0027267:	09 d6                	or     esi,edx
c0027269:	89 f0                	mov    eax,esi
c002726b:	89 fa                	mov    edx,edi
c002726d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027271:	89 d7                	mov    edi,edx
c0027273:	89 c6                	mov    esi,eax
c0027275:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027279:	39 d7                	cmp    edi,edx
c002727b:	72 13                	jb     c0027290 <__udivdi3+0xec>
c002727d:	74 09                	je     c0027288 <__udivdi3+0xe4>
c002727f:	89 f0                	mov    eax,esi
c0027281:	31 db                	xor    ebx,ebx
c0027283:	e9 43 ff ff ff       	jmp    c00271cb <__udivdi3+0x27>
c0027288:	88 d9                	mov    cl,bl
c002728a:	d3 e5                	shl    ebp,cl
c002728c:	39 c5                	cmp    ebp,eax
c002728e:	73 ef                	jae    c002727f <__udivdi3+0xdb>
c0027290:	8d 46 ff             	lea    eax,[esi-0x1]
c0027293:	31 db                	xor    ebx,ebx
c0027295:	e9 31 ff ff ff       	jmp    c00271cb <__udivdi3+0x27>
c002729a:	66 90                	xchg   ax,ax
c002729c:	31 c0                	xor    eax,eax
c002729e:	e9 28 ff ff ff       	jmp    c00271cb <__udivdi3+0x27>
c00272a3:	90                   	nop

c00272a4 <__umoddi3>:
c00272a4:	55                   	push   ebp
c00272a5:	57                   	push   edi
c00272a6:	56                   	push   esi
c00272a7:	53                   	push   ebx
c00272a8:	83 ec 1c             	sub    esp,0x1c
c00272ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00272af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00272b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00272bb:	89 da                	mov    edx,ebx
c00272bd:	85 c0                	test   eax,eax
c00272bf:	75 37                	jne    c00272f8 <__umoddi3+0x54>
c00272c1:	39 df                	cmp    edi,ebx
c00272c3:	76 13                	jbe    c00272d8 <__umoddi3+0x34>
c00272c5:	89 f0                	mov    eax,esi
c00272c7:	f7 f7                	div    edi
c00272c9:	89 d0                	mov    eax,edx
c00272cb:	31 d2                	xor    edx,edx
c00272cd:	83 c4 1c             	add    esp,0x1c
c00272d0:	5b                   	pop    ebx
c00272d1:	5e                   	pop    esi
c00272d2:	5f                   	pop    edi
c00272d3:	5d                   	pop    ebp
c00272d4:	c3                   	ret    
c00272d5:	8d 76 00             	lea    esi,[esi+0x0]
c00272d8:	89 fd                	mov    ebp,edi
c00272da:	85 ff                	test   edi,edi
c00272dc:	75 0b                	jne    c00272e9 <__umoddi3+0x45>
c00272de:	b8 01 00 00 00       	mov    eax,0x1
c00272e3:	31 d2                	xor    edx,edx
c00272e5:	f7 f7                	div    edi
c00272e7:	89 c5                	mov    ebp,eax
c00272e9:	89 d8                	mov    eax,ebx
c00272eb:	31 d2                	xor    edx,edx
c00272ed:	f7 f5                	div    ebp
c00272ef:	89 f0                	mov    eax,esi
c00272f1:	f7 f5                	div    ebp
c00272f3:	89 d0                	mov    eax,edx
c00272f5:	eb d4                	jmp    c00272cb <__umoddi3+0x27>
c00272f7:	90                   	nop
c00272f8:	89 f1                	mov    ecx,esi
c00272fa:	39 d8                	cmp    eax,ebx
c00272fc:	76 0a                	jbe    c0027308 <__umoddi3+0x64>
c00272fe:	89 f0                	mov    eax,esi
c0027300:	83 c4 1c             	add    esp,0x1c
c0027303:	5b                   	pop    ebx
c0027304:	5e                   	pop    esi
c0027305:	5f                   	pop    edi
c0027306:	5d                   	pop    ebp
c0027307:	c3                   	ret    
c0027308:	0f bd e8             	bsr    ebp,eax
c002730b:	83 f5 1f             	xor    ebp,0x1f
c002730e:	75 1c                	jne    c002732c <__umoddi3+0x88>
c0027310:	39 d8                	cmp    eax,ebx
c0027312:	72 04                	jb     c0027318 <__umoddi3+0x74>
c0027314:	39 f7                	cmp    edi,esi
c0027316:	77 08                	ja     c0027320 <__umoddi3+0x7c>
c0027318:	89 da                	mov    edx,ebx
c002731a:	29 fe                	sub    esi,edi
c002731c:	19 c2                	sbb    edx,eax
c002731e:	89 f1                	mov    ecx,esi
c0027320:	89 c8                	mov    eax,ecx
c0027322:	83 c4 1c             	add    esp,0x1c
c0027325:	5b                   	pop    ebx
c0027326:	5e                   	pop    esi
c0027327:	5f                   	pop    edi
c0027328:	5d                   	pop    ebp
c0027329:	c3                   	ret    
c002732a:	66 90                	xchg   ax,ax
c002732c:	ba 20 00 00 00       	mov    edx,0x20
c0027331:	29 ea                	sub    edx,ebp
c0027333:	89 e9                	mov    ecx,ebp
c0027335:	d3 e0                	shl    eax,cl
c0027337:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002733b:	89 f8                	mov    eax,edi
c002733d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027341:	88 d1                	mov    cl,dl
c0027343:	d3 e8                	shr    eax,cl
c0027345:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027349:	09 c1                	or     ecx,eax
c002734b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002734f:	89 e9                	mov    ecx,ebp
c0027351:	d3 e7                	shl    edi,cl
c0027353:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027357:	89 d8                	mov    eax,ebx
c0027359:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002735d:	88 d1                	mov    cl,dl
c002735f:	d3 e8                	shr    eax,cl
c0027361:	89 c7                	mov    edi,eax
c0027363:	89 e9                	mov    ecx,ebp
c0027365:	d3 e3                	shl    ebx,cl
c0027367:	89 f0                	mov    eax,esi
c0027369:	88 d1                	mov    cl,dl
c002736b:	d3 e8                	shr    eax,cl
c002736d:	09 d8                	or     eax,ebx
c002736f:	89 e9                	mov    ecx,ebp
c0027371:	d3 e6                	shl    esi,cl
c0027373:	89 f3                	mov    ebx,esi
c0027375:	89 fa                	mov    edx,edi
c0027377:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002737b:	89 d1                	mov    ecx,edx
c002737d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027381:	89 c6                	mov    esi,eax
c0027383:	89 d7                	mov    edi,edx
c0027385:	39 d1                	cmp    ecx,edx
c0027387:	72 27                	jb     c00273b0 <__umoddi3+0x10c>
c0027389:	74 21                	je     c00273ac <__umoddi3+0x108>
c002738b:	89 ca                	mov    edx,ecx
c002738d:	29 f3                	sub    ebx,esi
c002738f:	19 fa                	sbb    edx,edi
c0027391:	89 d0                	mov    eax,edx
c0027393:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027397:	d3 e0                	shl    eax,cl
c0027399:	89 e9                	mov    ecx,ebp
c002739b:	d3 eb                	shr    ebx,cl
c002739d:	09 d8                	or     eax,ebx
c002739f:	d3 ea                	shr    edx,cl
c00273a1:	83 c4 1c             	add    esp,0x1c
c00273a4:	5b                   	pop    ebx
c00273a5:	5e                   	pop    esi
c00273a6:	5f                   	pop    edi
c00273a7:	5d                   	pop    ebp
c00273a8:	c3                   	ret    
c00273a9:	8d 76 00             	lea    esi,[esi+0x0]
c00273ac:	39 c3                	cmp    ebx,eax
c00273ae:	73 db                	jae    c002738b <__umoddi3+0xe7>
c00273b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00273b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00273b8:	89 d7                	mov    edi,edx
c00273ba:	89 c6                	mov    esi,eax
c00273bc:	eb cd                	jmp    c002738b <__umoddi3+0xe7>

c00273be <__addsf3>:
c00273be:	55                   	push   ebp
c00273bf:	89 e5                	mov    ebp,esp
c00273c1:	57                   	push   edi
c00273c2:	56                   	push   esi
c00273c3:	53                   	push   ebx
c00273c4:	83 ec 08             	sub    esp,0x8
c00273c7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00273ca:	89 fa                	mov    edx,edi
c00273cc:	89 f8                	mov    eax,edi
c00273ce:	c1 f8 17             	sar    eax,0x17
c00273d1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273d4:	c1 e2 08             	shl    edx,0x8
c00273d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273dd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273e0:	89 de                	mov    esi,ebx
c00273e2:	c1 fe 17             	sar    esi,0x17
c00273e5:	c1 e3 08             	shl    ebx,0x8
c00273e8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00273ee:	31 f0                	xor    eax,esi
c00273f0:	0f 88 3b 01 00 00    	js     c0027531 <__addsf3+0x173>
c00273f6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00273f9:	29 f1                	sub    ecx,esi
c00273fb:	85 c9                	test   ecx,ecx
c00273fd:	7e 54                	jle    c0027453 <__addsf3+0x95>
c00273ff:	89 f0                	mov    eax,esi
c0027401:	84 c0                	test   al,al
c0027403:	75 10                	jne    c0027415 <__addsf3+0x57>
c0027405:	85 db                	test   ebx,ebx
c0027407:	0f 84 aa 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c002740d:	49                   	dec    ecx
c002740e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027411:	74 38                	je     c002744b <__addsf3+0x8d>
c0027413:	eb 13                	jmp    c0027428 <__addsf3+0x6a>
c0027415:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027418:	f7 d0                	not    eax
c002741a:	84 c0                	test   al,al
c002741c:	0f 84 95 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027422:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027428:	83 f9 1f             	cmp    ecx,0x1f
c002742b:	0f 8f 86 02 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c0027431:	89 de                	mov    esi,ebx
c0027433:	d3 ee                	shr    esi,cl
c0027435:	b8 20 00 00 00       	mov    eax,0x20
c002743a:	29 c8                	sub    eax,ecx
c002743c:	89 c1                	mov    ecx,eax
c002743e:	d3 e3                	shl    ebx,cl
c0027440:	31 c0                	xor    eax,eax
c0027442:	85 db                	test   ebx,ebx
c0027444:	0f 95 c0             	setne  al
c0027447:	09 f0                	or     eax,esi
c0027449:	01 d0                	add    eax,edx
c002744b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002744e:	e9 b6 00 00 00       	jmp    c0027509 <__addsf3+0x14b>
c0027453:	74 5c                	je     c00274b1 <__addsf3+0xf3>
c0027455:	89 f1                	mov    ecx,esi
c0027457:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002745a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002745d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027461:	75 14                	jne    c0027477 <__addsf3+0xb9>
c0027463:	85 d2                	test   edx,edx
c0027465:	0f 84 4c 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c002746b:	49                   	dec    ecx
c002746c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002746f:	0f 84 94 00 00 00    	je     c0027509 <__addsf3+0x14b>
c0027475:	eb 12                	jmp    c0027489 <__addsf3+0xcb>
c0027477:	89 f0                	mov    eax,esi
c0027479:	f7 d0                	not    eax
c002747b:	84 c0                	test   al,al
c002747d:	0f 84 34 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027483:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027489:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002748c:	83 f9 1f             	cmp    ecx,0x1f
c002748f:	0f 8f 22 02 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c0027495:	89 d7                	mov    edi,edx
c0027497:	d3 ef                	shr    edi,cl
c0027499:	b8 20 00 00 00       	mov    eax,0x20
c002749e:	29 c8                	sub    eax,ecx
c00274a0:	89 c1                	mov    ecx,eax
c00274a2:	d3 e2                	shl    edx,cl
c00274a4:	31 c0                	xor    eax,eax
c00274a6:	85 d2                	test   edx,edx
c00274a8:	0f 95 c0             	setne  al
c00274ab:	09 f8                	or     eax,edi
c00274ad:	01 d8                	add    eax,ebx
c00274af:	eb 58                	jmp    c0027509 <__addsf3+0x14b>
c00274b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274b4:	8d 70 01             	lea    esi,[eax+0x1]
c00274b7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00274bd:	75 32                	jne    c00274f1 <__addsf3+0x133>
c00274bf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274c3:	75 1f                	jne    c00274e4 <__addsf3+0x126>
c00274c5:	85 d2                	test   edx,edx
c00274c7:	0f 84 e0 01 00 00    	je     c00276ad <__addsf3+0x2ef>
c00274cd:	85 db                	test   ebx,ebx
c00274cf:	0f 84 e2 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c00274d5:	89 d0                	mov    eax,edx
c00274d7:	01 d8                	add    eax,ebx
c00274d9:	0f 89 a9 01 00 00    	jns    c0027688 <__addsf3+0x2ca>
c00274df:	e9 9d 01 00 00       	jmp    c0027681 <__addsf3+0x2c3>
c00274e4:	85 d2                	test   edx,edx
c00274e6:	0f 85 cb 01 00 00    	jne    c00276b7 <__addsf3+0x2f9>
c00274ec:	e9 bc 01 00 00       	jmp    c00276ad <__addsf3+0x2ef>
c00274f1:	31 c0                	xor    eax,eax
c00274f3:	89 f1                	mov    ecx,esi
c00274f5:	f7 d1                	not    ecx
c00274f7:	84 c9                	test   cl,cl
c00274f9:	0f 84 90 01 00 00    	je     c002768f <__addsf3+0x2d1>
c00274ff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027502:	d1 e8                	shr    eax,1
c0027504:	e9 86 01 00 00       	jmp    c002768f <__addsf3+0x2d1>
c0027509:	85 c0                	test   eax,eax
c002750b:	0f 89 7e 01 00 00    	jns    c002768f <__addsf3+0x2d1>
c0027511:	46                   	inc    esi
c0027512:	89 f2                	mov    edx,esi
c0027514:	f7 d2                	not    edx
c0027516:	84 d2                	test   dl,dl
c0027518:	0f 84 6f 01 00 00    	je     c002768d <__addsf3+0x2cf>
c002751e:	89 c2                	mov    edx,eax
c0027520:	83 e2 01             	and    edx,0x1
c0027523:	d1 e8                	shr    eax,1
c0027525:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002752a:	09 d0                	or     eax,edx
c002752c:	e9 5e 01 00 00       	jmp    c002768f <__addsf3+0x2d1>
c0027531:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027535:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027538:	89 f0                	mov    eax,esi
c002753a:	0f b6 c0             	movzx  eax,al
c002753d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027540:	29 c1                	sub    ecx,eax
c0027542:	85 c9                	test   ecx,ecx
c0027544:	7e 55                	jle    c002759b <__addsf3+0x1dd>
c0027546:	85 c0                	test   eax,eax
c0027548:	75 11                	jne    c002755b <__addsf3+0x19d>
c002754a:	85 db                	test   ebx,ebx
c002754c:	0f 84 65 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027552:	49                   	dec    ecx
c0027553:	75 19                	jne    c002756e <__addsf3+0x1b0>
c0027555:	89 d0                	mov    eax,edx
c0027557:	29 d8                	sub    eax,ebx
c0027559:	eb 38                	jmp    c0027593 <__addsf3+0x1d5>
c002755b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002755e:	f7 d0                	not    eax
c0027560:	84 c0                	test   al,al
c0027562:	0f 84 4f 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027568:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002756e:	83 f9 1f             	cmp    ecx,0x1f
c0027571:	0f 8f 40 01 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c0027577:	89 de                	mov    esi,ebx
c0027579:	d3 ee                	shr    esi,cl
c002757b:	b8 20 00 00 00       	mov    eax,0x20
c0027580:	29 c8                	sub    eax,ecx
c0027582:	89 c1                	mov    ecx,eax
c0027584:	d3 e3                	shl    ebx,cl
c0027586:	31 c0                	xor    eax,eax
c0027588:	85 db                	test   ebx,ebx
c002758a:	0f 95 c0             	setne  al
c002758d:	09 f0                	or     eax,esi
c002758f:	29 c2                	sub    edx,eax
c0027591:	89 d0                	mov    eax,edx
c0027593:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027596:	e9 af 00 00 00       	jmp    c002764a <__addsf3+0x28c>
c002759b:	74 5c                	je     c00275f9 <__addsf3+0x23b>
c002759d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00275a0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275a3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00275a7:	75 14                	jne    c00275bd <__addsf3+0x1ff>
c00275a9:	85 d2                	test   edx,edx
c00275ab:	0f 84 06 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c00275b1:	48                   	dec    eax
c00275b2:	75 1b                	jne    c00275cf <__addsf3+0x211>
c00275b4:	89 d8                	mov    eax,ebx
c00275b6:	29 d0                	sub    eax,edx
c00275b8:	e9 8d 00 00 00       	jmp    c002764a <__addsf3+0x28c>
c00275bd:	89 f1                	mov    ecx,esi
c00275bf:	f7 d1                	not    ecx
c00275c1:	84 c9                	test   cl,cl
c00275c3:	0f 84 ee 00 00 00    	je     c00276b7 <__addsf3+0x2f9>
c00275c9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275cf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275d2:	83 f8 1f             	cmp    eax,0x1f
c00275d5:	0f 8f dc 00 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c00275db:	89 d7                	mov    edi,edx
c00275dd:	88 c1                	mov    cl,al
c00275df:	d3 ef                	shr    edi,cl
c00275e1:	b9 20 00 00 00       	mov    ecx,0x20
c00275e6:	29 c1                	sub    ecx,eax
c00275e8:	d3 e2                	shl    edx,cl
c00275ea:	31 c0                	xor    eax,eax
c00275ec:	85 d2                	test   edx,edx
c00275ee:	0f 95 c0             	setne  al
c00275f1:	09 f8                	or     eax,edi
c00275f3:	29 c3                	sub    ebx,eax
c00275f5:	89 d8                	mov    eax,ebx
c00275f7:	eb 51                	jmp    c002764a <__addsf3+0x28c>
c00275f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275fc:	40                   	inc    eax
c00275fd:	a8 fe                	test   al,0xfe
c00275ff:	75 3d                	jne    c002763e <__addsf3+0x280>
c0027601:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027605:	0f 85 a7 00 00 00    	jne    c00276b2 <__addsf3+0x2f4>
c002760b:	85 d2                	test   edx,edx
c002760d:	75 12                	jne    c0027621 <__addsf3+0x263>
c002760f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027612:	85 db                	test   ebx,ebx
c0027614:	0f 85 9d 00 00 00    	jne    c00276b7 <__addsf3+0x2f9>
c002761a:	31 ff                	xor    edi,edi
c002761c:	e9 96 00 00 00       	jmp    c00276b7 <__addsf3+0x2f9>
c0027621:	85 db                	test   ebx,ebx
c0027623:	0f 84 8e 00 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027629:	89 d0                	mov    eax,edx
c002762b:	29 d8                	sub    eax,ebx
c002762d:	79 06                	jns    c0027635 <__addsf3+0x277>
c002762f:	89 d8                	mov    eax,ebx
c0027631:	29 d0                	sub    eax,edx
c0027633:	eb 5a                	jmp    c002768f <__addsf3+0x2d1>
c0027635:	bf 00 00 00 00       	mov    edi,0x0
c002763a:	74 7b                	je     c00276b7 <__addsf3+0x2f9>
c002763c:	eb 4a                	jmp    c0027688 <__addsf3+0x2ca>
c002763e:	89 d0                	mov    eax,edx
c0027640:	29 d8                	sub    eax,ebx
c0027642:	79 12                	jns    c0027656 <__addsf3+0x298>
c0027644:	89 d8                	mov    eax,ebx
c0027646:	29 d0                	sub    eax,edx
c0027648:	eb 09                	jmp    c0027653 <__addsf3+0x295>
c002764a:	85 c0                	test   eax,eax
c002764c:	79 41                	jns    c002768f <__addsf3+0x2d1>
c002764e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027653:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027656:	31 f6                	xor    esi,esi
c0027658:	85 c0                	test   eax,eax
c002765a:	74 33                	je     c002768f <__addsf3+0x2d1>
c002765c:	0f bd c8             	bsr    ecx,eax
c002765f:	83 f1 1f             	xor    ecx,0x1f
c0027662:	d3 e0                	shl    eax,cl
c0027664:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027668:	39 ca                	cmp    edx,ecx
c002766a:	7f 10                	jg     c002767c <__addsf3+0x2be>
c002766c:	29 d1                	sub    ecx,edx
c002766e:	41                   	inc    ecx
c002766f:	d3 e8                	shr    eax,cl
c0027671:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027674:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002767a:	eb 13                	jmp    c002768f <__addsf3+0x2d1>
c002767c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002767f:	29 ce                	sub    esi,ecx
c0027681:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027686:	eb 07                	jmp    c002768f <__addsf3+0x2d1>
c0027688:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002768b:	eb 02                	jmp    c002768f <__addsf3+0x2d1>
c002768d:	31 c0                	xor    eax,eax
c002768f:	89 c2                	mov    edx,eax
c0027691:	c1 ea 08             	shr    edx,0x8
c0027694:	a8 7f                	test   al,0x7f
c0027696:	0f 95 c1             	setne  cl
c0027699:	09 d1                	or     ecx,edx
c002769b:	83 e1 01             	and    ecx,0x1
c002769e:	c1 e8 07             	shr    eax,0x7
c00276a1:	21 c8                	and    eax,ecx
c00276a3:	c1 e6 17             	shl    esi,0x17
c00276a6:	09 d6                	or     esi,edx
c00276a8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00276ab:	eb 0a                	jmp    c00276b7 <__addsf3+0x2f9>
c00276ad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276b0:	eb 05                	jmp    c00276b7 <__addsf3+0x2f9>
c00276b2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00276b7:	89 f8                	mov    eax,edi
c00276b9:	5a                   	pop    edx
c00276ba:	59                   	pop    ecx
c00276bb:	5b                   	pop    ebx
c00276bc:	5e                   	pop    esi
c00276bd:	5f                   	pop    edi
c00276be:	5d                   	pop    ebp
c00276bf:	c3                   	ret    

c00276c0 <__subsf3>:
c00276c0:	55                   	push   ebp
c00276c1:	89 e5                	mov    ebp,esp
c00276c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00276c6:	05 00 00 00 80       	add    eax,0x80000000
c00276cb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00276ce:	5d                   	pop    ebp
c00276cf:	e9 ea fc ff ff       	jmp    c00273be <__addsf3>

c00276d4 <__negsf2>:
c00276d4:	55                   	push   ebp
c00276d5:	89 e5                	mov    ebp,esp
c00276d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00276da:	05 00 00 00 80       	add    eax,0x80000000
c00276df:	5d                   	pop    ebp
c00276e0:	c3                   	ret    

c00276e1 <__mulsf3>:
c00276e1:	55                   	push   ebp
c00276e2:	89 e5                	mov    ebp,esp
c00276e4:	57                   	push   edi
c00276e5:	56                   	push   esi
c00276e6:	53                   	push   ebx
c00276e7:	83 ec 1c             	sub    esp,0x1c
c00276ea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00276ed:	89 f0                	mov    eax,esi
c00276ef:	89 f1                	mov    ecx,esi
c00276f1:	c1 f9 17             	sar    ecx,0x17
c00276f4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00276f7:	c1 e0 08             	shl    eax,0x8
c00276fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00276ff:	89 c1                	mov    ecx,eax
c0027701:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027704:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027707:	89 c7                	mov    edi,eax
c0027709:	c1 ff 17             	sar    edi,0x17
c002770c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027710:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027713:	89 f8                	mov    eax,edi
c0027715:	0f b6 c0             	movzx  eax,al
c0027718:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002771b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002771f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027722:	42                   	inc    edx
c0027723:	80 e2 fe             	and    dl,0xfe
c0027726:	75 7b                	jne    c00277a3 <__mulsf3+0xc2>
c0027728:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002772c:	74 54                	je     c0027782 <__mulsf3+0xa1>
c002772e:	85 c9                	test   ecx,ecx
c0027730:	0f 85 64 01 00 00    	jne    c002789a <__mulsf3+0x1b9>
c0027736:	8d 57 01             	lea    edx,[edi+0x1]
c0027739:	80 e2 fe             	and    dl,0xfe
c002773c:	75 1f                	jne    c002775d <__mulsf3+0x7c>
c002773e:	85 c0                	test   eax,eax
c0027740:	b8 00 00 00 00       	mov    eax,0x0
c0027745:	74 29                	je     c0027770 <__mulsf3+0x8f>
c0027747:	53                   	push   ebx
c0027748:	53                   	push   ebx
c0027749:	50                   	push   eax
c002774a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002774d:	e8 96 05 00 00       	call   c0027ce8 <__nesf2>
c0027752:	83 c4 10             	add    esp,0x10
c0027755:	85 c0                	test   eax,eax
c0027757:	0f 85 3a 01 00 00    	jne    c0027897 <__mulsf3+0x1b6>
c002775d:	85 ff                	test   edi,edi
c002775f:	0f 89 35 01 00 00    	jns    c002789a <__mulsf3+0x1b9>
c0027765:	81 c6 00 00 00 80    	add    esi,0x80000000
c002776b:	e9 2a 01 00 00       	jmp    c002789a <__mulsf3+0x1b9>
c0027770:	51                   	push   ecx
c0027771:	51                   	push   ecx
c0027772:	50                   	push   eax
c0027773:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027776:	e8 6d 05 00 00       	call   c0027ce8 <__nesf2>
c002777b:	83 c4 10             	add    esp,0x10
c002777e:	85 c0                	test   eax,eax
c0027780:	eb 15                	jmp    c0027797 <__mulsf3+0xb6>
c0027782:	85 c9                	test   ecx,ecx
c0027784:	74 0b                	je     c0027791 <__mulsf3+0xb0>
c0027786:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027789:	01 c9                	add    ecx,ecx
c002778b:	78 16                	js     c00277a3 <__mulsf3+0xc2>
c002778d:	89 d3                	mov    ebx,edx
c002778f:	eb f5                	jmp    c0027786 <__mulsf3+0xa5>
c0027791:	89 f8                	mov    eax,edi
c0027793:	f7 d0                	not    eax
c0027795:	84 c0                	test   al,al
c0027797:	75 c4                	jne    c002775d <__mulsf3+0x7c>
c0027799:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002779e:	e9 f7 00 00 00       	jmp    c002789a <__mulsf3+0x1b9>
c00277a3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277a6:	c1 e6 08             	shl    esi,0x8
c00277a9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00277af:	8d 57 01             	lea    edx,[edi+0x1]
c00277b2:	80 e2 fe             	and    dl,0xfe
c00277b5:	75 63                	jne    c002781a <__mulsf3+0x139>
c00277b7:	85 c0                	test   eax,eax
c00277b9:	74 2f                	je     c00277ea <__mulsf3+0x109>
c00277bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00277bf:	0f 89 d2 00 00 00    	jns    c0027897 <__mulsf3+0x1b6>
c00277c5:	52                   	push   edx
c00277c6:	52                   	push   edx
c00277c7:	6a 00                	push   0x0
c00277c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277cc:	e8 dc 04 00 00       	call   c0027cad <__eqsf2>
c00277d1:	83 c4 10             	add    esp,0x10
c00277d4:	85 c0                	test   eax,eax
c00277d6:	0f 85 bb 00 00 00    	jne    c0027897 <__mulsf3+0x1b6>
c00277dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277df:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00277e5:	e9 b0 00 00 00       	jmp    c002789a <__mulsf3+0x1b9>
c00277ea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00277ed:	50                   	push   eax
c00277ee:	50                   	push   eax
c00277ef:	6a 00                	push   0x0
c00277f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277f4:	e8 b4 04 00 00       	call   c0027cad <__eqsf2>
c00277f9:	83 c4 10             	add    esp,0x10
c00277fc:	85 c0                	test   eax,eax
c00277fe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027801:	75 0c                	jne    c002780f <__mulsf3+0x12e>
c0027803:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027807:	0f 89 8a 00 00 00    	jns    c0027897 <__mulsf3+0x1b6>
c002780d:	eb cd                	jmp    c00277dc <__mulsf3+0xfb>
c002780f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027812:	01 f6                	add    esi,esi
c0027814:	78 04                	js     c002781a <__mulsf3+0x139>
c0027816:	89 c3                	mov    ebx,eax
c0027818:	eb f5                	jmp    c002780f <__mulsf3+0x12e>
c002781a:	89 c8                	mov    eax,ecx
c002781c:	0d 00 00 00 80       	or     eax,0x80000000
c0027821:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027827:	f7 e6                	mul    esi
c0027829:	85 c0                	test   eax,eax
c002782b:	0f 95 c0             	setne  al
c002782e:	0f b6 c0             	movzx  eax,al
c0027831:	09 c2                	or     edx,eax
c0027833:	78 03                	js     c0027838 <__mulsf3+0x157>
c0027835:	01 d2                	add    edx,edx
c0027837:	4b                   	dec    ebx
c0027838:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002783e:	7f 22                	jg     c0027862 <__mulsf3+0x181>
c0027840:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027846:	85 db                	test   ebx,ebx
c0027848:	7f 23                	jg     c002786d <__mulsf3+0x18c>
c002784a:	83 fb e9             	cmp    ebx,0xffffffe9
c002784d:	7c 1a                	jl     c0027869 <__mulsf3+0x188>
c002784f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027855:	b9 01 00 00 00       	mov    ecx,0x1
c002785a:	29 d9                	sub    ecx,ebx
c002785c:	d3 ea                	shr    edx,cl
c002785e:	31 db                	xor    ebx,ebx
c0027860:	eb 0b                	jmp    c002786d <__mulsf3+0x18c>
c0027862:	bb ff 00 00 00       	mov    ebx,0xff
c0027867:	eb 02                	jmp    c002786b <__mulsf3+0x18a>
c0027869:	31 db                	xor    ebx,ebx
c002786b:	31 d2                	xor    edx,edx
c002786d:	89 d0                	mov    eax,edx
c002786f:	c1 e8 08             	shr    eax,0x8
c0027872:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027875:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002787b:	09 fb                	or     ebx,edi
c002787d:	c1 e3 17             	shl    ebx,0x17
c0027880:	09 c3                	or     ebx,eax
c0027882:	f6 c2 7f             	test   dl,0x7f
c0027885:	0f 95 c1             	setne  cl
c0027888:	09 c8                	or     eax,ecx
c002788a:	83 e0 01             	and    eax,0x1
c002788d:	c1 ea 07             	shr    edx,0x7
c0027890:	21 c2                	and    edx,eax
c0027892:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027895:	eb 03                	jmp    c002789a <__mulsf3+0x1b9>
c0027897:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002789a:	89 f0                	mov    eax,esi
c002789c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002789f:	5b                   	pop    ebx
c00278a0:	5e                   	pop    esi
c00278a1:	5f                   	pop    edi
c00278a2:	5d                   	pop    ebp
c00278a3:	c3                   	ret    

c00278a4 <__divsf3>:
c00278a4:	55                   	push   ebp
c00278a5:	89 e5                	mov    ebp,esp
c00278a7:	57                   	push   edi
c00278a8:	56                   	push   esi
c00278a9:	53                   	push   ebx
c00278aa:	83 ec 1c             	sub    esp,0x1c
c00278ad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00278b0:	89 d8                	mov    eax,ebx
c00278b2:	89 d9                	mov    ecx,ebx
c00278b4:	c1 f9 17             	sar    ecx,0x17
c00278b7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00278ba:	c1 e0 08             	shl    eax,0x8
c00278bd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278c2:	89 c1                	mov    ecx,eax
c00278c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278c7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278ca:	89 c7                	mov    edi,eax
c00278cc:	c1 ff 17             	sar    edi,0x17
c00278cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00278d3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00278d6:	89 f8                	mov    eax,edi
c00278d8:	0f b6 c0             	movzx  eax,al
c00278db:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00278de:	29 c6                	sub    esi,eax
c00278e0:	83 c6 7f             	add    esi,0x7f
c00278e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00278e6:	42                   	inc    edx
c00278e7:	80 e2 fe             	and    dl,0xfe
c00278ea:	0f 85 9c 00 00 00    	jne    c002798c <__divsf3+0xe8>
c00278f0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278f4:	74 33                	je     c0027929 <__divsf3+0x85>
c00278f6:	85 c9                	test   ecx,ecx
c00278f8:	0f 85 c7 01 00 00    	jne    c0027ac5 <__divsf3+0x221>
c00278fe:	8d 57 01             	lea    edx,[edi+0x1]
c0027901:	80 e2 fe             	and    dl,0xfe
c0027904:	75 2f                	jne    c0027935 <__divsf3+0x91>
c0027906:	85 c0                	test   eax,eax
c0027908:	74 2b                	je     c0027935 <__divsf3+0x91>
c002790a:	51                   	push   ecx
c002790b:	51                   	push   ecx
c002790c:	6a 00                	push   0x0
c002790e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027911:	e8 d2 03 00 00       	call   c0027ce8 <__nesf2>
c0027916:	83 c4 10             	add    esp,0x10
c0027919:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002791c:	85 c0                	test   eax,eax
c002791e:	0f 85 a1 01 00 00    	jne    c0027ac5 <__divsf3+0x221>
c0027924:	e9 92 01 00 00       	jmp    c0027abb <__divsf3+0x217>
c0027929:	85 c9                	test   ecx,ecx
c002792b:	75 1b                	jne    c0027948 <__divsf3+0xa4>
c002792d:	8d 57 01             	lea    edx,[edi+0x1]
c0027930:	80 e2 fe             	and    dl,0xfe
c0027933:	74 1e                	je     c0027953 <__divsf3+0xaf>
c0027935:	85 ff                	test   edi,edi
c0027937:	0f 89 88 01 00 00    	jns    c0027ac5 <__divsf3+0x221>
c002793d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027943:	e9 7d 01 00 00       	jmp    c0027ac5 <__divsf3+0x221>
c0027948:	8d 56 ff             	lea    edx,[esi-0x1]
c002794b:	01 c9                	add    ecx,ecx
c002794d:	78 3d                	js     c002798c <__divsf3+0xe8>
c002794f:	89 d6                	mov    esi,edx
c0027951:	eb f5                	jmp    c0027948 <__divsf3+0xa4>
c0027953:	85 c0                	test   eax,eax
c0027955:	b8 00 00 00 00       	mov    eax,0x0
c002795a:	74 18                	je     c0027974 <__divsf3+0xd0>
c002795c:	52                   	push   edx
c002795d:	52                   	push   edx
c002795e:	50                   	push   eax
c002795f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027962:	e8 81 03 00 00       	call   c0027ce8 <__nesf2>
c0027967:	83 c4 10             	add    esp,0x10
c002796a:	85 c0                	test   eax,eax
c002796c:	0f 85 50 01 00 00    	jne    c0027ac2 <__divsf3+0x21e>
c0027972:	eb c1                	jmp    c0027935 <__divsf3+0x91>
c0027974:	56                   	push   esi
c0027975:	56                   	push   esi
c0027976:	50                   	push   eax
c0027977:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002797a:	e8 69 03 00 00       	call   c0027ce8 <__nesf2>
c002797f:	83 c4 10             	add    esp,0x10
c0027982:	85 c0                	test   eax,eax
c0027984:	0f 84 31 01 00 00    	je     c0027abb <__divsf3+0x217>
c002798a:	eb a9                	jmp    c0027935 <__divsf3+0x91>
c002798c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002798f:	c1 e3 08             	shl    ebx,0x8
c0027992:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027998:	8d 57 01             	lea    edx,[edi+0x1]
c002799b:	80 e2 fe             	and    dl,0xfe
c002799e:	75 71                	jne    c0027a11 <__divsf3+0x16d>
c00279a0:	85 c0                	test   eax,eax
c00279a2:	ba 00 00 00 00       	mov    edx,0x0
c00279a7:	74 2f                	je     c00279d8 <__divsf3+0x134>
c00279a9:	51                   	push   ecx
c00279aa:	51                   	push   ecx
c00279ab:	52                   	push   edx
c00279ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279af:	e8 f9 02 00 00       	call   c0027cad <__eqsf2>
c00279b4:	83 c4 10             	add    esp,0x10
c00279b7:	85 c0                	test   eax,eax
c00279b9:	0f 85 03 01 00 00    	jne    c0027ac2 <__divsf3+0x21e>
c00279bf:	31 d2                	xor    edx,edx
c00279c1:	89 d3                	mov    ebx,edx
c00279c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279c6:	31 f8                	xor    eax,edi
c00279c8:	0f 89 f7 00 00 00    	jns    c0027ac5 <__divsf3+0x221>
c00279ce:	bb 00 00 00 80       	mov    ebx,0x80000000
c00279d3:	e9 ed 00 00 00       	jmp    c0027ac5 <__divsf3+0x221>
c00279d8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00279db:	50                   	push   eax
c00279dc:	50                   	push   eax
c00279dd:	52                   	push   edx
c00279de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279e1:	e8 c7 02 00 00       	call   c0027cad <__eqsf2>
c00279e6:	83 c4 10             	add    esp,0x10
c00279e9:	85 c0                	test   eax,eax
c00279eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279ee:	75 16                	jne    c0027a06 <__divsf3+0x162>
c00279f0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279f3:	31 fb                	xor    ebx,edi
c00279f5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00279fb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a01:	e9 bf 00 00 00       	jmp    c0027ac5 <__divsf3+0x221>
c0027a06:	8d 46 01             	lea    eax,[esi+0x1]
c0027a09:	01 db                	add    ebx,ebx
c0027a0b:	78 04                	js     c0027a11 <__divsf3+0x16d>
c0027a0d:	89 c6                	mov    esi,eax
c0027a0f:	eb f5                	jmp    c0027a06 <__divsf3+0x162>
c0027a11:	89 c8                	mov    eax,ecx
c0027a13:	0d 00 00 00 80       	or     eax,0x80000000
c0027a18:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a1e:	31 d2                	xor    edx,edx
c0027a20:	39 d8                	cmp    eax,ebx
c0027a22:	72 07                	jb     c0027a2b <__divsf3+0x187>
c0027a24:	29 d8                	sub    eax,ebx
c0027a26:	ba 01 00 00 00       	mov    edx,0x1
c0027a2b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a32:	01 d2                	add    edx,edx
c0027a34:	89 c1                	mov    ecx,eax
c0027a36:	01 c0                	add    eax,eax
c0027a38:	85 c9                	test   ecx,ecx
c0027a3a:	78 04                	js     c0027a40 <__divsf3+0x19c>
c0027a3c:	39 c3                	cmp    ebx,eax
c0027a3e:	77 05                	ja     c0027a45 <__divsf3+0x1a1>
c0027a40:	29 d8                	sub    eax,ebx
c0027a42:	83 ca 01             	or     edx,0x1
c0027a45:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027a48:	75 e8                	jne    c0027a32 <__divsf3+0x18e>
c0027a4a:	85 c0                	test   eax,eax
c0027a4c:	0f 95 c0             	setne  al
c0027a4f:	0f b6 c0             	movzx  eax,al
c0027a52:	c1 e2 06             	shl    edx,0x6
c0027a55:	09 c2                	or     edx,eax
c0027a57:	78 03                	js     c0027a5c <__divsf3+0x1b8>
c0027a59:	01 d2                	add    edx,edx
c0027a5b:	4e                   	dec    esi
c0027a5c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027a62:	7f 22                	jg     c0027a86 <__divsf3+0x1e2>
c0027a64:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a6a:	85 f6                	test   esi,esi
c0027a6c:	7f 23                	jg     c0027a91 <__divsf3+0x1ed>
c0027a6e:	83 fe e9             	cmp    esi,0xffffffe9
c0027a71:	7c 1a                	jl     c0027a8d <__divsf3+0x1e9>
c0027a73:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a79:	b9 01 00 00 00       	mov    ecx,0x1
c0027a7e:	29 f1                	sub    ecx,esi
c0027a80:	d3 ea                	shr    edx,cl
c0027a82:	31 f6                	xor    esi,esi
c0027a84:	eb 0b                	jmp    c0027a91 <__divsf3+0x1ed>
c0027a86:	be ff 00 00 00       	mov    esi,0xff
c0027a8b:	eb 02                	jmp    c0027a8f <__divsf3+0x1eb>
c0027a8d:	31 f6                	xor    esi,esi
c0027a8f:	31 d2                	xor    edx,edx
c0027a91:	89 d0                	mov    eax,edx
c0027a93:	c1 e8 08             	shr    eax,0x8
c0027a96:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027a99:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027a9f:	09 fe                	or     esi,edi
c0027aa1:	c1 e6 17             	shl    esi,0x17
c0027aa4:	09 c6                	or     esi,eax
c0027aa6:	f6 c2 7f             	test   dl,0x7f
c0027aa9:	0f 95 c1             	setne  cl
c0027aac:	09 c8                	or     eax,ecx
c0027aae:	83 e0 01             	and    eax,0x1
c0027ab1:	c1 ea 07             	shr    edx,0x7
c0027ab4:	21 c2                	and    edx,eax
c0027ab6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027ab9:	eb 0a                	jmp    c0027ac5 <__divsf3+0x221>
c0027abb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027ac0:	eb 03                	jmp    c0027ac5 <__divsf3+0x221>
c0027ac2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027ac5:	89 d8                	mov    eax,ebx
c0027ac7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027aca:	5b                   	pop    ebx
c0027acb:	5e                   	pop    esi
c0027acc:	5f                   	pop    edi
c0027acd:	5d                   	pop    ebp
c0027ace:	c3                   	ret    

c0027acf <__floatsisf>:
c0027acf:	55                   	push   ebp
c0027ad0:	89 e5                	mov    ebp,esp
c0027ad2:	53                   	push   ebx
c0027ad3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ad6:	85 d2                	test   edx,edx
c0027ad8:	7e 2b                	jle    c0027b05 <__floatsisf+0x36>
c0027ada:	0f bd ca             	bsr    ecx,edx
c0027add:	83 f1 1f             	xor    ecx,0x1f
c0027ae0:	d3 e2                	shl    edx,cl
c0027ae2:	89 d0                	mov    eax,edx
c0027ae4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ae9:	89 c3                	mov    ebx,eax
c0027aeb:	c1 eb 08             	shr    ebx,0x8
c0027aee:	80 e2 7f             	and    dl,0x7f
c0027af1:	0f 95 c2             	setne  dl
c0027af4:	09 da                	or     edx,ebx
c0027af6:	83 e2 01             	and    edx,0x1
c0027af9:	c1 e8 07             	shr    eax,0x7
c0027afc:	21 c2                	and    edx,eax
c0027afe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b03:	eb 32                	jmp    c0027b37 <__floatsisf+0x68>
c0027b05:	b8 00 00 00 00       	mov    eax,0x0
c0027b0a:	74 34                	je     c0027b40 <__floatsisf+0x71>
c0027b0c:	f7 da                	neg    edx
c0027b0e:	0f bd ca             	bsr    ecx,edx
c0027b11:	83 f1 1f             	xor    ecx,0x1f
c0027b14:	d3 e2                	shl    edx,cl
c0027b16:	89 d0                	mov    eax,edx
c0027b18:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b1d:	89 c3                	mov    ebx,eax
c0027b1f:	c1 eb 08             	shr    ebx,0x8
c0027b22:	80 e2 7f             	and    dl,0x7f
c0027b25:	0f 95 c2             	setne  dl
c0027b28:	09 da                	or     edx,ebx
c0027b2a:	83 e2 01             	and    edx,0x1
c0027b2d:	c1 e8 07             	shr    eax,0x7
c0027b30:	21 c2                	and    edx,eax
c0027b32:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b37:	29 c8                	sub    eax,ecx
c0027b39:	c1 e0 17             	shl    eax,0x17
c0027b3c:	09 d8                	or     eax,ebx
c0027b3e:	01 d0                	add    eax,edx
c0027b40:	5b                   	pop    ebx
c0027b41:	5d                   	pop    ebp
c0027b42:	c3                   	ret    

c0027b43 <__floatunsisf>:
c0027b43:	55                   	push   ebp
c0027b44:	89 e5                	mov    ebp,esp
c0027b46:	53                   	push   ebx
c0027b47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b4a:	31 c0                	xor    eax,eax
c0027b4c:	85 d2                	test   edx,edx
c0027b4e:	74 32                	je     c0027b82 <__floatunsisf+0x3f>
c0027b50:	0f bd ca             	bsr    ecx,edx
c0027b53:	83 f1 1f             	xor    ecx,0x1f
c0027b56:	d3 e2                	shl    edx,cl
c0027b58:	89 d0                	mov    eax,edx
c0027b5a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b5f:	89 c3                	mov    ebx,eax
c0027b61:	c1 eb 08             	shr    ebx,0x8
c0027b64:	80 e2 7f             	and    dl,0x7f
c0027b67:	0f 95 c2             	setne  dl
c0027b6a:	09 da                	or     edx,ebx
c0027b6c:	83 e2 01             	and    edx,0x1
c0027b6f:	c1 e8 07             	shr    eax,0x7
c0027b72:	21 c2                	and    edx,eax
c0027b74:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b79:	29 c8                	sub    eax,ecx
c0027b7b:	c1 e0 17             	shl    eax,0x17
c0027b7e:	09 d8                	or     eax,ebx
c0027b80:	01 d0                	add    eax,edx
c0027b82:	5b                   	pop    ebx
c0027b83:	5d                   	pop    ebp
c0027b84:	c3                   	ret    

c0027b85 <__fixsfsi>:
c0027b85:	55                   	push   ebp
c0027b86:	89 e5                	mov    ebp,esp
c0027b88:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b8b:	89 d1                	mov    ecx,edx
c0027b8d:	c1 e1 08             	shl    ecx,0x8
c0027b90:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027b96:	c1 fa 17             	sar    edx,0x17
c0027b99:	78 1c                	js     c0027bb7 <__fixsfsi+0x32>
c0027b9b:	83 ea 7f             	sub    edx,0x7f
c0027b9e:	31 c0                	xor    eax,eax
c0027ba0:	83 fa 1e             	cmp    edx,0x1e
c0027ba3:	77 40                	ja     c0027be5 <__fixsfsi+0x60>
c0027ba5:	89 c8                	mov    eax,ecx
c0027ba7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bac:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bb1:	29 d1                	sub    ecx,edx
c0027bb3:	d3 e8                	shr    eax,cl
c0027bb5:	eb 2e                	jmp    c0027be5 <__fixsfsi+0x60>
c0027bb7:	31 c0                	xor    eax,eax
c0027bb9:	81 c2 81 00 00 00    	add    edx,0x81
c0027bbf:	78 24                	js     c0027be5 <__fixsfsi+0x60>
c0027bc1:	83 fa 1e             	cmp    edx,0x1e
c0027bc4:	7e 09                	jle    c0027bcf <__fixsfsi+0x4a>
c0027bc6:	83 fa 1f             	cmp    edx,0x1f
c0027bc9:	75 18                	jne    c0027be3 <__fixsfsi+0x5e>
c0027bcb:	85 c9                	test   ecx,ecx
c0027bcd:	75 14                	jne    c0027be3 <__fixsfsi+0x5e>
c0027bcf:	89 c8                	mov    eax,ecx
c0027bd1:	0d 00 00 00 80       	or     eax,0x80000000
c0027bd6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bdb:	29 d1                	sub    ecx,edx
c0027bdd:	d3 e8                	shr    eax,cl
c0027bdf:	f7 d8                	neg    eax
c0027be1:	eb 02                	jmp    c0027be5 <__fixsfsi+0x60>
c0027be3:	31 c0                	xor    eax,eax
c0027be5:	5d                   	pop    ebp
c0027be6:	c3                   	ret    

c0027be7 <__fixunssfsi>:
c0027be7:	55                   	push   ebp
c0027be8:	89 e5                	mov    ebp,esp
c0027bea:	53                   	push   ebx
c0027beb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bee:	89 d3                	mov    ebx,edx
c0027bf0:	c1 fb 17             	sar    ebx,0x17
c0027bf3:	83 eb 7f             	sub    ebx,0x7f
c0027bf6:	31 c0                	xor    eax,eax
c0027bf8:	83 fb 1f             	cmp    ebx,0x1f
c0027bfb:	77 18                	ja     c0027c15 <__fixunssfsi+0x2e>
c0027bfd:	89 d0                	mov    eax,edx
c0027bff:	c1 e0 08             	shl    eax,0x8
c0027c02:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c07:	0d 00 00 00 80       	or     eax,0x80000000
c0027c0c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c11:	29 d9                	sub    ecx,ebx
c0027c13:	d3 e8                	shr    eax,cl
c0027c15:	5b                   	pop    ebx
c0027c16:	5d                   	pop    ebp
c0027c17:	c3                   	ret    

c0027c18 <__cmpsf2>:
c0027c18:	55                   	push   ebp
c0027c19:	89 e5                	mov    ebp,esp
c0027c1b:	57                   	push   edi
c0027c1c:	56                   	push   esi
c0027c1d:	53                   	push   ebx
c0027c1e:	83 ec 24             	sub    esp,0x24
c0027c21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c27:	e8 4f 10 00 00       	call   c0028c7b <__truncdfsf2>
c0027c2c:	5a                   	pop    edx
c0027c2d:	59                   	pop    ecx
c0027c2e:	89 c3                	mov    ebx,eax
c0027c30:	c1 e8 17             	shr    eax,0x17
c0027c33:	0f b6 f0             	movzx  esi,al
c0027c36:	89 d8                	mov    eax,ebx
c0027c38:	c1 e8 1f             	shr    eax,0x1f
c0027c3b:	31 c6                	xor    esi,eax
c0027c3d:	c1 e3 08             	shl    ebx,0x8
c0027c40:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c43:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c46:	e8 30 10 00 00       	call   c0028c7b <__truncdfsf2>
c0027c4b:	83 c4 10             	add    esp,0x10
c0027c4e:	89 c1                	mov    ecx,eax
c0027c50:	c1 e9 17             	shr    ecx,0x17
c0027c53:	0f b6 c9             	movzx  ecx,cl
c0027c56:	89 c7                	mov    edi,eax
c0027c58:	c1 ef 1f             	shr    edi,0x1f
c0027c5b:	89 ca                	mov    edx,ecx
c0027c5d:	31 fa                	xor    edx,edi
c0027c5f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c62:	c1 e0 08             	shl    eax,0x8
c0027c65:	89 c2                	mov    edx,eax
c0027c67:	89 d8                	mov    eax,ebx
c0027c69:	09 d0                	or     eax,edx
c0027c6b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c70:	09 f0                	or     eax,esi
c0027c72:	75 08                	jne    c0027c7c <__cmpsf2+0x64>
c0027c74:	31 c0                	xor    eax,eax
c0027c76:	39 f9                	cmp    ecx,edi
c0027c78:	75 0c                	jne    c0027c86 <__cmpsf2+0x6e>
c0027c7a:	eb 29                	jmp    c0027ca5 <__cmpsf2+0x8d>
c0027c7c:	b8 01 00 00 00       	mov    eax,0x1
c0027c81:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c84:	7f 1f                	jg     c0027ca5 <__cmpsf2+0x8d>
c0027c86:	83 c8 ff             	or     eax,0xffffffff
c0027c89:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c8c:	7c 17                	jl     c0027ca5 <__cmpsf2+0x8d>
c0027c8e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027c94:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027c9a:	b8 01 00 00 00       	mov    eax,0x1
c0027c9f:	39 d3                	cmp    ebx,edx
c0027ca1:	77 02                	ja     c0027ca5 <__cmpsf2+0x8d>
c0027ca3:	19 c0                	sbb    eax,eax
c0027ca5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027ca8:	5b                   	pop    ebx
c0027ca9:	5e                   	pop    esi
c0027caa:	5f                   	pop    edi
c0027cab:	5d                   	pop    ebp
c0027cac:	c3                   	ret    

c0027cad <__eqsf2>:
c0027cad:	55                   	push   ebp
c0027cae:	89 e5                	mov    ebp,esp
c0027cb0:	83 ec 24             	sub    esp,0x24
c0027cb3:	6a 01                	push   0x1
c0027cb5:	83 ec 0c             	sub    esp,0xc
c0027cb8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cbb:	e8 df 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027cc0:	83 c4 10             	add    esp,0x10
c0027cc3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027cc6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cc9:	52                   	push   edx
c0027cca:	50                   	push   eax
c0027ccb:	50                   	push   eax
c0027ccc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ccf:	e8 cb 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027cd4:	59                   	pop    ecx
c0027cd5:	59                   	pop    ecx
c0027cd6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027cd9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cdc:	52                   	push   edx
c0027cdd:	50                   	push   eax
c0027cde:	e8 35 ff ff ff       	call   c0027c18 <__cmpsf2>
c0027ce3:	83 c4 20             	add    esp,0x20
c0027ce6:	c9                   	leave  
c0027ce7:	c3                   	ret    

c0027ce8 <__nesf2>:
c0027ce8:	eb c3                	jmp    c0027cad <__eqsf2>

c0027cea <__gtsf2>:
c0027cea:	55                   	push   ebp
c0027ceb:	89 e5                	mov    ebp,esp
c0027ced:	83 ec 24             	sub    esp,0x24
c0027cf0:	6a ff                	push   0xffffffff
c0027cf2:	83 ec 0c             	sub    esp,0xc
c0027cf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cf8:	e8 a2 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027cfd:	83 c4 10             	add    esp,0x10
c0027d00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d03:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d06:	52                   	push   edx
c0027d07:	50                   	push   eax
c0027d08:	50                   	push   eax
c0027d09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d0c:	e8 8e 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027d11:	59                   	pop    ecx
c0027d12:	59                   	pop    ecx
c0027d13:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d16:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d19:	52                   	push   edx
c0027d1a:	50                   	push   eax
c0027d1b:	e8 f8 fe ff ff       	call   c0027c18 <__cmpsf2>
c0027d20:	83 c4 20             	add    esp,0x20
c0027d23:	c9                   	leave  
c0027d24:	c3                   	ret    

c0027d25 <__gesf2>:
c0027d25:	eb c3                	jmp    c0027cea <__gtsf2>

c0027d27 <__ltsf2>:
c0027d27:	eb 84                	jmp    c0027cad <__eqsf2>

c0027d29 <__lesf2>:
c0027d29:	eb 82                	jmp    c0027cad <__eqsf2>

c0027d2b <__adddf3>:
c0027d2b:	55                   	push   ebp
c0027d2c:	89 e5                	mov    ebp,esp
c0027d2e:	57                   	push   edi
c0027d2f:	56                   	push   esi
c0027d30:	53                   	push   ebx
c0027d31:	83 ec 24             	sub    esp,0x24
c0027d34:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d37:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d3a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d40:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d43:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d46:	89 c8                	mov    eax,ecx
c0027d48:	89 ce                	mov    esi,ecx
c0027d4a:	c1 fe 14             	sar    esi,0x14
c0027d4d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027d50:	89 fb                	mov    ebx,edi
c0027d52:	89 fa                	mov    edx,edi
c0027d54:	c1 e2 0b             	shl    edx,0xb
c0027d57:	c1 e0 0b             	shl    eax,0xb
c0027d5a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d5f:	c1 eb 15             	shr    ebx,0x15
c0027d62:	09 d8                	or     eax,ebx
c0027d64:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d67:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d6a:	c1 fe 14             	sar    esi,0x14
c0027d6d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027d70:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d73:	89 f3                	mov    ebx,esi
c0027d75:	c1 e3 0b             	shl    ebx,0xb
c0027d78:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d7b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d7e:	c1 e3 0b             	shl    ebx,0xb
c0027d81:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027d87:	c1 ee 15             	shr    esi,0x15
c0027d8a:	09 f3                	or     ebx,esi
c0027d8c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027d8f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027d92:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027d95:	0f 88 5f 02 00 00    	js     c0027ffa <__adddf3+0x2cf>
c0027d9b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027d9e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027da1:	85 db                	test   ebx,ebx
c0027da3:	0f 8e c7 00 00 00    	jle    c0027e70 <__adddf3+0x145>
c0027da9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027db0:	75 1a                	jne    c0027dcc <__adddf3+0xa1>
c0027db2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027db5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027db8:	0f 84 b2 05 00 00    	je     c0028370 <__adddf3+0x645>
c0027dbe:	4b                   	dec    ebx
c0027dbf:	75 23                	jne    c0027de4 <__adddf3+0xb9>
c0027dc1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027dc4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027dc7:	e9 99 00 00 00       	jmp    c0027e65 <__adddf3+0x13a>
c0027dcc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027dcf:	f7 d6                	not    esi
c0027dd1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027dd7:	0f 84 93 05 00 00    	je     c0028370 <__adddf3+0x645>
c0027ddd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027de4:	83 fb 1f             	cmp    ebx,0x1f
c0027de7:	7e 42                	jle    c0027e2b <__adddf3+0x100>
c0027de9:	83 fb 3f             	cmp    ebx,0x3f
c0027dec:	0f 8f 7e 05 00 00    	jg     c0028370 <__adddf3+0x645>
c0027df2:	83 e3 1f             	and    ebx,0x1f
c0027df5:	89 d9                	mov    ecx,ebx
c0027df7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027dfa:	d3 ef                	shr    edi,cl
c0027dfc:	31 db                	xor    ebx,ebx
c0027dfe:	85 c9                	test   ecx,ecx
c0027e00:	74 15                	je     c0027e17 <__adddf3+0xec>
c0027e02:	be 20 00 00 00       	mov    esi,0x20
c0027e07:	29 ce                	sub    esi,ecx
c0027e09:	89 f1                	mov    ecx,esi
c0027e0b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e0e:	d3 e6                	shl    esi,cl
c0027e10:	31 db                	xor    ebx,ebx
c0027e12:	85 f6                	test   esi,esi
c0027e14:	0f 95 c3             	setne  bl
c0027e17:	31 c9                	xor    ecx,ecx
c0027e19:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e1d:	0f 95 c1             	setne  cl
c0027e20:	09 cf                	or     edi,ecx
c0027e22:	09 fb                	or     ebx,edi
c0027e24:	01 da                	add    edx,ebx
c0027e26:	83 d0 00             	adc    eax,0x0
c0027e29:	eb 3a                	jmp    c0027e65 <__adddf3+0x13a>
c0027e2b:	bf 20 00 00 00       	mov    edi,0x20
c0027e30:	29 df                	sub    edi,ebx
c0027e32:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e35:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e38:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e3b:	d3 e6                	shl    esi,cl
c0027e3d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e40:	88 d9                	mov    cl,bl
c0027e42:	d3 ef                	shr    edi,cl
c0027e44:	09 fe                	or     esi,edi
c0027e46:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e49:	88 d9                	mov    cl,bl
c0027e4b:	d3 ef                	shr    edi,cl
c0027e4d:	89 fb                	mov    ebx,edi
c0027e4f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e52:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e55:	d3 e7                	shl    edi,cl
c0027e57:	85 ff                	test   edi,edi
c0027e59:	0f 95 c1             	setne  cl
c0027e5c:	0f b6 c9             	movzx  ecx,cl
c0027e5f:	09 ce                	or     esi,ecx
c0027e61:	01 f2                	add    edx,esi
c0027e63:	11 d8                	adc    eax,ebx
c0027e65:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e68:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e6b:	e9 52 01 00 00       	jmp    c0027fc2 <__adddf3+0x297>
c0027e70:	0f 84 d5 00 00 00    	je     c0027f4b <__adddf3+0x220>
c0027e76:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e79:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027e7c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e7f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e82:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027e89:	75 20                	jne    c0027eab <__adddf3+0x180>
c0027e8b:	89 d6                	mov    esi,edx
c0027e8d:	09 c6                	or     esi,eax
c0027e8f:	0f 84 db 04 00 00    	je     c0028370 <__adddf3+0x645>
c0027e95:	4b                   	dec    ebx
c0027e96:	75 29                	jne    c0027ec1 <__adddf3+0x196>
c0027e98:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e9b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027e9e:	01 d1                	add    ecx,edx
c0027ea0:	11 c6                	adc    esi,eax
c0027ea2:	89 f0                	mov    eax,esi
c0027ea4:	89 ca                	mov    edx,ecx
c0027ea6:	e9 17 01 00 00       	jmp    c0027fc2 <__adddf3+0x297>
c0027eab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027eae:	f7 d6                	not    esi
c0027eb0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027eb6:	0f 84 b4 04 00 00    	je     c0028370 <__adddf3+0x645>
c0027ebc:	0d 00 00 00 80       	or     eax,0x80000000
c0027ec1:	83 fb 1f             	cmp    ebx,0x1f
c0027ec4:	7e 48                	jle    c0027f0e <__adddf3+0x1e3>
c0027ec6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ec9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ecc:	83 fb 3f             	cmp    ebx,0x3f
c0027ecf:	0f 8f 9b 04 00 00    	jg     c0028370 <__adddf3+0x645>
c0027ed5:	83 e3 1f             	and    ebx,0x1f
c0027ed8:	89 d9                	mov    ecx,ebx
c0027eda:	89 c7                	mov    edi,eax
c0027edc:	d3 ef                	shr    edi,cl
c0027ede:	31 db                	xor    ebx,ebx
c0027ee0:	85 c9                	test   ecx,ecx
c0027ee2:	74 12                	je     c0027ef6 <__adddf3+0x1cb>
c0027ee4:	be 20 00 00 00       	mov    esi,0x20
c0027ee9:	29 ce                	sub    esi,ecx
c0027eeb:	89 f1                	mov    ecx,esi
c0027eed:	d3 e0                	shl    eax,cl
c0027eef:	31 db                	xor    ebx,ebx
c0027ef1:	85 c0                	test   eax,eax
c0027ef3:	0f 95 c3             	setne  bl
c0027ef6:	31 c0                	xor    eax,eax
c0027ef8:	85 d2                	test   edx,edx
c0027efa:	0f 95 c0             	setne  al
c0027efd:	09 c7                	or     edi,eax
c0027eff:	09 fb                	or     ebx,edi
c0027f01:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f04:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f07:	01 da                	add    edx,ebx
c0027f09:	83 d6 00             	adc    esi,0x0
c0027f0c:	eb 39                	jmp    c0027f47 <__adddf3+0x21c>
c0027f0e:	be 20 00 00 00       	mov    esi,0x20
c0027f13:	29 de                	sub    esi,ebx
c0027f15:	89 c7                	mov    edi,eax
c0027f17:	89 f1                	mov    ecx,esi
c0027f19:	d3 e7                	shl    edi,cl
c0027f1b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f1e:	89 d7                	mov    edi,edx
c0027f20:	88 d9                	mov    cl,bl
c0027f22:	d3 ef                	shr    edi,cl
c0027f24:	89 f9                	mov    ecx,edi
c0027f26:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f29:	09 cf                	or     edi,ecx
c0027f2b:	88 d9                	mov    cl,bl
c0027f2d:	d3 e8                	shr    eax,cl
c0027f2f:	89 f1                	mov    ecx,esi
c0027f31:	d3 e2                	shl    edx,cl
c0027f33:	85 d2                	test   edx,edx
c0027f35:	0f 95 c2             	setne  dl
c0027f38:	0f b6 d2             	movzx  edx,dl
c0027f3b:	09 d7                	or     edi,edx
c0027f3d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f40:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f43:	01 fa                	add    edx,edi
c0027f45:	11 c6                	adc    esi,eax
c0027f47:	89 f0                	mov    eax,esi
c0027f49:	eb 77                	jmp    c0027fc2 <__adddf3+0x297>
c0027f4b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f4e:	46                   	inc    esi
c0027f4f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027f52:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f58:	75 41                	jne    c0027f9b <__adddf3+0x270>
c0027f5a:	89 d3                	mov    ebx,edx
c0027f5c:	09 c3                	or     ebx,eax
c0027f5e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f65:	75 27                	jne    c0027f8e <__adddf3+0x263>
c0027f67:	85 db                	test   ebx,ebx
c0027f69:	0f 84 fb 03 00 00    	je     c002836a <__adddf3+0x63f>
c0027f6f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f72:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027f75:	0f 84 f5 03 00 00    	je     c0028370 <__adddf3+0x645>
c0027f7b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f7e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027f81:	85 c0                	test   eax,eax
c0027f83:	0f 89 91 03 00 00    	jns    c002831a <__adddf3+0x5ef>
c0027f89:	e9 85 03 00 00       	jmp    c0028313 <__adddf3+0x5e8>
c0027f8e:	85 db                	test   ebx,ebx
c0027f90:	0f 85 da 03 00 00    	jne    c0028370 <__adddf3+0x645>
c0027f96:	e9 cf 03 00 00       	jmp    c002836a <__adddf3+0x63f>
c0027f9b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f9e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fa1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fa4:	f7 d1                	not    ecx
c0027fa6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fac:	0f 84 70 03 00 00    	je     c0028322 <__adddf3+0x5f7>
c0027fb2:	d1 ea                	shr    edx,1
c0027fb4:	89 c1                	mov    ecx,eax
c0027fb6:	c1 e1 1f             	shl    ecx,0x1f
c0027fb9:	09 ca                	or     edx,ecx
c0027fbb:	d1 e8                	shr    eax,1
c0027fbd:	e9 6f 03 00 00       	jmp    c0028331 <__adddf3+0x606>
c0027fc2:	85 c0                	test   eax,eax
c0027fc4:	0f 89 67 03 00 00    	jns    c0028331 <__adddf3+0x606>
c0027fca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027fcd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fd0:	f7 d1                	not    ecx
c0027fd2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fd8:	0f 84 44 03 00 00    	je     c0028322 <__adddf3+0x5f7>
c0027fde:	89 d1                	mov    ecx,edx
c0027fe0:	d1 e9                	shr    ecx,1
c0027fe2:	83 e2 01             	and    edx,0x1
c0027fe5:	09 ca                	or     edx,ecx
c0027fe7:	89 c1                	mov    ecx,eax
c0027fe9:	c1 e1 1f             	shl    ecx,0x1f
c0027fec:	09 ca                	or     edx,ecx
c0027fee:	d1 e8                	shr    eax,1
c0027ff0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027ff5:	e9 37 03 00 00       	jmp    c0028331 <__adddf3+0x606>
c0027ffa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ffd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028003:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028006:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028009:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002800f:	29 de                	sub    esi,ebx
c0028011:	85 f6                	test   esi,esi
c0028013:	0f 8e bd 00 00 00    	jle    c00280d6 <__adddf3+0x3ab>
c0028019:	85 db                	test   ebx,ebx
c002801b:	75 17                	jne    c0028034 <__adddf3+0x309>
c002801d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028020:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028023:	0f 84 47 03 00 00    	je     c0028370 <__adddf3+0x645>
c0028029:	4e                   	dec    esi
c002802a:	75 20                	jne    c002804c <__adddf3+0x321>
c002802c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002802f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028032:	eb 5b                	jmp    c002808f <__adddf3+0x364>
c0028034:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028037:	f7 d3                	not    ebx
c0028039:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002803f:	0f 84 2b 03 00 00    	je     c0028370 <__adddf3+0x645>
c0028045:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002804c:	83 fe 1f             	cmp    esi,0x1f
c002804f:	7e 49                	jle    c002809a <__adddf3+0x36f>
c0028051:	83 fe 3f             	cmp    esi,0x3f
c0028054:	0f 8f 16 03 00 00    	jg     c0028370 <__adddf3+0x645>
c002805a:	83 e6 1f             	and    esi,0x1f
c002805d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028060:	89 f1                	mov    ecx,esi
c0028062:	d3 ef                	shr    edi,cl
c0028064:	31 db                	xor    ebx,ebx
c0028066:	85 f6                	test   esi,esi
c0028068:	74 13                	je     c002807d <__adddf3+0x352>
c002806a:	b9 20 00 00 00       	mov    ecx,0x20
c002806f:	29 f1                	sub    ecx,esi
c0028071:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028074:	d3 e6                	shl    esi,cl
c0028076:	31 db                	xor    ebx,ebx
c0028078:	85 f6                	test   esi,esi
c002807a:	0f 95 c3             	setne  bl
c002807d:	31 c9                	xor    ecx,ecx
c002807f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028083:	0f 95 c1             	setne  cl
c0028086:	09 cf                	or     edi,ecx
c0028088:	09 fb                	or     ebx,edi
c002808a:	29 da                	sub    edx,ebx
c002808c:	83 d8 00             	sbb    eax,0x0
c002808f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028092:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028095:	e9 aa 01 00 00       	jmp    c0028244 <__adddf3+0x519>
c002809a:	bf 20 00 00 00       	mov    edi,0x20
c002809f:	29 f7                	sub    edi,esi
c00280a1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280a4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280a7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280aa:	d3 e3                	shl    ebx,cl
c00280ac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280af:	89 f1                	mov    ecx,esi
c00280b1:	d3 ef                	shr    edi,cl
c00280b3:	09 fb                	or     ebx,edi
c00280b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280b8:	89 f1                	mov    ecx,esi
c00280ba:	d3 ef                	shr    edi,cl
c00280bc:	89 fe                	mov    esi,edi
c00280be:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280c1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280c4:	d3 e7                	shl    edi,cl
c00280c6:	85 ff                	test   edi,edi
c00280c8:	0f 95 c1             	setne  cl
c00280cb:	0f b6 c9             	movzx  ecx,cl
c00280ce:	09 cb                	or     ebx,ecx
c00280d0:	29 da                	sub    edx,ebx
c00280d2:	19 f0                	sbb    eax,esi
c00280d4:	eb b9                	jmp    c002808f <__adddf3+0x364>
c00280d6:	0f 84 cd 00 00 00    	je     c00281a9 <__adddf3+0x47e>
c00280dc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00280df:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00280e2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00280e5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00280e9:	75 1b                	jne    c0028106 <__adddf3+0x3db>
c00280eb:	89 d6                	mov    esi,edx
c00280ed:	09 c6                	or     esi,eax
c00280ef:	0f 84 7b 02 00 00    	je     c0028370 <__adddf3+0x645>
c00280f5:	4b                   	dec    ebx
c00280f6:	75 24                	jne    c002811c <__adddf3+0x3f1>
c00280f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00280fe:	29 d1                	sub    ecx,edx
c0028100:	19 c6                	sbb    esi,eax
c0028102:	89 ca                	mov    edx,ecx
c0028104:	eb 61                	jmp    c0028167 <__adddf3+0x43c>
c0028106:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028109:	f7 d6                	not    esi
c002810b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028111:	0f 84 59 02 00 00    	je     c0028370 <__adddf3+0x645>
c0028117:	0d 00 00 00 80       	or     eax,0x80000000
c002811c:	83 fb 1f             	cmp    ebx,0x1f
c002811f:	7e 4d                	jle    c002816e <__adddf3+0x443>
c0028121:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028124:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028127:	83 fb 3f             	cmp    ebx,0x3f
c002812a:	0f 8f 40 02 00 00    	jg     c0028370 <__adddf3+0x645>
c0028130:	83 e3 1f             	and    ebx,0x1f
c0028133:	89 d9                	mov    ecx,ebx
c0028135:	89 c7                	mov    edi,eax
c0028137:	d3 ef                	shr    edi,cl
c0028139:	31 db                	xor    ebx,ebx
c002813b:	85 c9                	test   ecx,ecx
c002813d:	74 12                	je     c0028151 <__adddf3+0x426>
c002813f:	be 20 00 00 00       	mov    esi,0x20
c0028144:	29 ce                	sub    esi,ecx
c0028146:	89 f1                	mov    ecx,esi
c0028148:	d3 e0                	shl    eax,cl
c002814a:	31 db                	xor    ebx,ebx
c002814c:	85 c0                	test   eax,eax
c002814e:	0f 95 c3             	setne  bl
c0028151:	31 c0                	xor    eax,eax
c0028153:	85 d2                	test   edx,edx
c0028155:	0f 95 c0             	setne  al
c0028158:	09 c7                	or     edi,eax
c002815a:	09 fb                	or     ebx,edi
c002815c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002815f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028162:	29 da                	sub    edx,ebx
c0028164:	83 de 00             	sbb    esi,0x0
c0028167:	89 f0                	mov    eax,esi
c0028169:	e9 d6 00 00 00       	jmp    c0028244 <__adddf3+0x519>
c002816e:	be 20 00 00 00       	mov    esi,0x20
c0028173:	29 de                	sub    esi,ebx
c0028175:	89 c7                	mov    edi,eax
c0028177:	89 f1                	mov    ecx,esi
c0028179:	d3 e7                	shl    edi,cl
c002817b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002817e:	89 d7                	mov    edi,edx
c0028180:	88 d9                	mov    cl,bl
c0028182:	d3 ef                	shr    edi,cl
c0028184:	89 f9                	mov    ecx,edi
c0028186:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028189:	09 cf                	or     edi,ecx
c002818b:	88 d9                	mov    cl,bl
c002818d:	d3 e8                	shr    eax,cl
c002818f:	89 f1                	mov    ecx,esi
c0028191:	d3 e2                	shl    edx,cl
c0028193:	85 d2                	test   edx,edx
c0028195:	0f 95 c2             	setne  dl
c0028198:	0f b6 d2             	movzx  edx,dl
c002819b:	09 d7                	or     edi,edx
c002819d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281a3:	29 fa                	sub    edx,edi
c00281a5:	19 c6                	sbb    esi,eax
c00281a7:	eb be                	jmp    c0028167 <__adddf3+0x43c>
c00281a9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281ac:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281af:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00281b5:	75 6a                	jne    c0028221 <__adddf3+0x4f6>
c00281b7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00281bb:	75 58                	jne    c0028215 <__adddf3+0x4ea>
c00281bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00281c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281c3:	89 d6                	mov    esi,edx
c00281c5:	09 c6                	or     esi,eax
c00281c7:	75 17                	jne    c00281e0 <__adddf3+0x4b5>
c00281c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281cf:	85 db                	test   ebx,ebx
c00281d1:	0f 85 99 01 00 00    	jne    c0028370 <__adddf3+0x645>
c00281d7:	31 ff                	xor    edi,edi
c00281d9:	31 c9                	xor    ecx,ecx
c00281db:	e9 90 01 00 00       	jmp    c0028370 <__adddf3+0x645>
c00281e0:	85 db                	test   ebx,ebx
c00281e2:	0f 84 88 01 00 00    	je     c0028370 <__adddf3+0x645>
c00281e8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00281eb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00281ee:	85 c0                	test   eax,eax
c00281f0:	79 10                	jns    c0028202 <__adddf3+0x4d7>
c00281f2:	31 c9                	xor    ecx,ecx
c00281f4:	f7 da                	neg    edx
c00281f6:	0f 95 c1             	setne  cl
c00281f9:	01 c8                	add    eax,ecx
c00281fb:	f7 d8                	neg    eax
c00281fd:	e9 2f 01 00 00       	jmp    c0028331 <__adddf3+0x606>
c0028202:	31 ff                	xor    edi,edi
c0028204:	31 c9                	xor    ecx,ecx
c0028206:	89 c3                	mov    ebx,eax
c0028208:	09 d3                	or     ebx,edx
c002820a:	0f 84 60 01 00 00    	je     c0028370 <__adddf3+0x645>
c0028210:	e9 05 01 00 00       	jmp    c002831a <__adddf3+0x5ef>
c0028215:	31 ff                	xor    edi,edi
c0028217:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002821c:	e9 4f 01 00 00       	jmp    c0028370 <__adddf3+0x645>
c0028221:	89 c1                	mov    ecx,eax
c0028223:	89 d0                	mov    eax,edx
c0028225:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028228:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002822b:	89 ca                	mov    edx,ecx
c002822d:	85 c9                	test   ecx,ecx
c002822f:	79 2c                	jns    c002825d <__adddf3+0x532>
c0028231:	31 c9                	xor    ecx,ecx
c0028233:	f7 d8                	neg    eax
c0028235:	0f 95 c1             	setne  cl
c0028238:	01 ca                	add    edx,ecx
c002823a:	f7 da                	neg    edx
c002823c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002823f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028242:	eb 19                	jmp    c002825d <__adddf3+0x532>
c0028244:	85 c0                	test   eax,eax
c0028246:	0f 89 e5 00 00 00    	jns    c0028331 <__adddf3+0x606>
c002824c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028251:	89 c1                	mov    ecx,eax
c0028253:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028256:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028259:	89 d0                	mov    eax,edx
c002825b:	89 ca                	mov    edx,ecx
c002825d:	85 d2                	test   edx,edx
c002825f:	74 59                	je     c00282ba <__adddf3+0x58f>
c0028261:	0f bd da             	bsr    ebx,edx
c0028264:	83 f3 1f             	xor    ebx,0x1f
c0028267:	88 d9                	mov    cl,bl
c0028269:	d3 e2                	shl    edx,cl
c002826b:	bf 20 00 00 00       	mov    edi,0x20
c0028270:	89 f9                	mov    ecx,edi
c0028272:	29 d9                	sub    ecx,ebx
c0028274:	89 c6                	mov    esi,eax
c0028276:	d3 ee                	shr    esi,cl
c0028278:	09 d6                	or     esi,edx
c002827a:	88 d9                	mov    cl,bl
c002827c:	d3 e0                	shl    eax,cl
c002827e:	89 c2                	mov    edx,eax
c0028280:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028283:	25 ff 07 00 00       	and    eax,0x7ff
c0028288:	39 d8                	cmp    eax,ebx
c002828a:	7f 22                	jg     c00282ae <__adddf3+0x583>
c002828c:	29 c3                	sub    ebx,eax
c002828e:	43                   	inc    ebx
c002828f:	88 d9                	mov    cl,bl
c0028291:	d3 ea                	shr    edx,cl
c0028293:	29 df                	sub    edi,ebx
c0028295:	89 f9                	mov    ecx,edi
c0028297:	89 f0                	mov    eax,esi
c0028299:	d3 e0                	shl    eax,cl
c002829b:	09 c2                	or     edx,eax
c002829d:	89 f0                	mov    eax,esi
c002829f:	88 d9                	mov    cl,bl
c00282a1:	d3 e8                	shr    eax,cl
c00282a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282a6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00282ac:	eb 6f                	jmp    c002831d <__adddf3+0x5f2>
c00282ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282b1:	29 d8                	sub    eax,ebx
c00282b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00282b6:	89 f0                	mov    eax,esi
c00282b8:	eb 59                	jmp    c0028313 <__adddf3+0x5e8>
c00282ba:	85 c0                	test   eax,eax
c00282bc:	74 6a                	je     c0028328 <__adddf3+0x5fd>
c00282be:	0f bd c8             	bsr    ecx,eax
c00282c1:	83 f1 1f             	xor    ecx,0x1f
c00282c4:	d3 e0                	shl    eax,cl
c00282c6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282cf:	83 c1 20             	add    ecx,0x20
c00282d2:	39 cb                	cmp    ebx,ecx
c00282d4:	7f 35                	jg     c002830b <__adddf3+0x5e0>
c00282d6:	29 d9                	sub    ecx,ebx
c00282d8:	8d 71 01             	lea    esi,[ecx+0x1]
c00282db:	83 fe 1f             	cmp    esi,0x1f
c00282de:	7e 09                	jle    c00282e9 <__adddf3+0x5be>
c00282e0:	83 e9 1f             	sub    ecx,0x1f
c00282e3:	d3 e8                	shr    eax,cl
c00282e5:	89 c3                	mov    ebx,eax
c00282e7:	eb 11                	jmp    c00282fa <__adddf3+0x5cf>
c00282e9:	b9 20 00 00 00       	mov    ecx,0x20
c00282ee:	29 f1                	sub    ecx,esi
c00282f0:	89 c3                	mov    ebx,eax
c00282f2:	d3 e3                	shl    ebx,cl
c00282f4:	89 f1                	mov    ecx,esi
c00282f6:	d3 e8                	shr    eax,cl
c00282f8:	89 c2                	mov    edx,eax
c00282fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282fd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028302:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028305:	89 d0                	mov    eax,edx
c0028307:	89 da                	mov    edx,ebx
c0028309:	eb 26                	jmp    c0028331 <__adddf3+0x606>
c002830b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002830e:	29 cf                	sub    edi,ecx
c0028310:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028313:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028318:	eb 17                	jmp    c0028331 <__adddf3+0x606>
c002831a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002831d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028320:	eb 0f                	jmp    c0028331 <__adddf3+0x606>
c0028322:	31 d2                	xor    edx,edx
c0028324:	31 c0                	xor    eax,eax
c0028326:	eb 09                	jmp    c0028331 <__adddf3+0x606>
c0028328:	89 c2                	mov    edx,eax
c002832a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028331:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028334:	c1 e1 14             	shl    ecx,0x14
c0028337:	89 c3                	mov    ebx,eax
c0028339:	c1 eb 0b             	shr    ebx,0xb
c002833c:	09 d9                	or     ecx,ebx
c002833e:	89 d3                	mov    ebx,edx
c0028340:	c1 eb 0b             	shr    ebx,0xb
c0028343:	c1 e0 15             	shl    eax,0x15
c0028346:	09 d8                	or     eax,ebx
c0028348:	89 c7                	mov    edi,eax
c002834a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028350:	0f 95 c0             	setne  al
c0028353:	89 c6                	mov    esi,eax
c0028355:	09 f3                	or     ebx,esi
c0028357:	83 e3 01             	and    ebx,0x1
c002835a:	c1 ea 0a             	shr    edx,0xa
c002835d:	21 da                	and    edx,ebx
c002835f:	89 f8                	mov    eax,edi
c0028361:	01 d0                	add    eax,edx
c0028363:	83 d1 00             	adc    ecx,0x0
c0028366:	89 c7                	mov    edi,eax
c0028368:	eb 06                	jmp    c0028370 <__adddf3+0x645>
c002836a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002836d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028370:	89 f8                	mov    eax,edi
c0028372:	89 ca                	mov    edx,ecx
c0028374:	83 c4 24             	add    esp,0x24
c0028377:	5b                   	pop    ebx
c0028378:	5e                   	pop    esi
c0028379:	5f                   	pop    edi
c002837a:	5d                   	pop    ebp
c002837b:	c3                   	ret    

c002837c <__subdf3>:
c002837c:	55                   	push   ebp
c002837d:	89 e5                	mov    ebp,esp
c002837f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028382:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028385:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002838b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002838e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028391:	5d                   	pop    ebp
c0028392:	e9 94 f9 ff ff       	jmp    c0027d2b <__adddf3>

c0028397 <__negdf2>:
c0028397:	55                   	push   ebp
c0028398:	89 e5                	mov    ebp,esp
c002839a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002839d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283a6:	5d                   	pop    ebp
c00283a7:	c3                   	ret    

c00283a8 <__muldf3>:
c00283a8:	55                   	push   ebp
c00283a9:	89 e5                	mov    ebp,esp
c00283ab:	57                   	push   edi
c00283ac:	56                   	push   esi
c00283ad:	53                   	push   ebx
c00283ae:	83 ec 24             	sub    esp,0x24
c00283b1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00283b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00283b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00283c0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00283c3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283c6:	89 c8                	mov    eax,ecx
c00283c8:	c1 f8 14             	sar    eax,0x14
c00283cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00283ce:	89 f8                	mov    eax,edi
c00283d0:	89 fb                	mov    ebx,edi
c00283d2:	c1 e3 0b             	shl    ebx,0xb
c00283d5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00283d8:	c1 e1 0b             	shl    ecx,0xb
c00283db:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283e1:	c1 e8 15             	shr    eax,0x15
c00283e4:	09 c1                	or     ecx,eax
c00283e6:	89 d6                	mov    esi,edx
c00283e8:	89 d0                	mov    eax,edx
c00283ea:	c1 f8 14             	sar    eax,0x14
c00283ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00283f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00283f3:	89 c3                	mov    ebx,eax
c00283f5:	c1 e3 0b             	shl    ebx,0xb
c00283f8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00283fb:	c1 e6 0b             	shl    esi,0xb
c00283fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028404:	c1 e8 15             	shr    eax,0x15
c0028407:	09 c6                	or     esi,eax
c0028409:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002840c:	25 ff 07 00 00       	and    eax,0x7ff
c0028411:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028414:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028417:	25 ff 07 00 00       	and    eax,0x7ff
c002841c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002841f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028422:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028425:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002842c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002842f:	40                   	inc    eax
c0028430:	a9 fe 07 00 00       	test   eax,0x7fe
c0028435:	0f 85 8d 00 00 00    	jne    c00284c8 <__muldf3+0x120>
c002843b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002843e:	09 c8                	or     eax,ecx
c0028440:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028444:	74 44                	je     c002848a <__muldf3+0xe2>
c0028446:	85 c0                	test   eax,eax
c0028448:	0f 85 31 02 00 00    	jne    c002867f <__muldf3+0x2d7>
c002844e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028451:	40                   	inc    eax
c0028452:	a9 fe 07 00 00       	test   eax,0x7fe
c0028457:	75 13                	jne    c002846c <__muldf3+0xc4>
c0028459:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002845c:	09 f1                	or     ecx,esi
c002845e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028462:	74 22                	je     c0028486 <__muldf3+0xde>
c0028464:	85 c9                	test   ecx,ecx
c0028466:	0f 85 0d 02 00 00    	jne    c0028679 <__muldf3+0x2d1>
c002846c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028470:	0f 89 09 02 00 00    	jns    c002867f <__muldf3+0x2d7>
c0028476:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028479:	05 00 00 00 80       	add    eax,0x80000000
c002847e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028481:	e9 f9 01 00 00       	jmp    c002867f <__muldf3+0x2d7>
c0028486:	85 c9                	test   ecx,ecx
c0028488:	eb 2e                	jmp    c00284b8 <__muldf3+0x110>
c002848a:	85 c0                	test   eax,eax
c002848c:	74 20                	je     c00284ae <__muldf3+0x106>
c002848e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028491:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028494:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028497:	c1 ef 1f             	shr    edi,0x1f
c002849a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002849d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00284a0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284a3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284a6:	09 f9                	or     ecx,edi
c00284a8:	78 1e                	js     c00284c8 <__muldf3+0x120>
c00284aa:	89 c3                	mov    ebx,eax
c00284ac:	eb e0                	jmp    c002848e <__muldf3+0xe6>
c00284ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284b1:	f7 d0                	not    eax
c00284b3:	a9 ff 07 00 00       	test   eax,0x7ff
c00284b8:	75 b2                	jne    c002846c <__muldf3+0xc4>
c00284ba:	31 ff                	xor    edi,edi
c00284bc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00284c3:	e9 b7 01 00 00       	jmp    c002867f <__muldf3+0x2d7>
c00284c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284cb:	40                   	inc    eax
c00284cc:	a9 fe 07 00 00       	test   eax,0x7fe
c00284d1:	75 57                	jne    c002852a <__muldf3+0x182>
c00284d3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00284d6:	09 f0                	or     eax,esi
c00284d8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284dc:	74 23                	je     c0028501 <__muldf3+0x159>
c00284de:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00284e2:	0f 89 91 01 00 00    	jns    c0028679 <__muldf3+0x2d1>
c00284e8:	85 c0                	test   eax,eax
c00284ea:	0f 85 89 01 00 00    	jne    c0028679 <__muldf3+0x2d1>
c00284f0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00284f3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00284f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284fc:	e9 7e 01 00 00       	jmp    c002867f <__muldf3+0x2d7>
c0028501:	85 c0                	test   eax,eax
c0028503:	75 0c                	jne    c0028511 <__muldf3+0x169>
c0028505:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028509:	0f 89 6a 01 00 00    	jns    c0028679 <__muldf3+0x2d1>
c002850f:	eb df                	jmp    c00284f0 <__muldf3+0x148>
c0028511:	01 f6                	add    esi,esi
c0028513:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028516:	c1 ea 1f             	shr    edx,0x1f
c0028519:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002851c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002851f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028522:	09 d6                	or     esi,edx
c0028524:	78 04                	js     c002852a <__muldf3+0x182>
c0028526:	89 c3                	mov    ebx,eax
c0028528:	eb e7                	jmp    c0028511 <__muldf3+0x169>
c002852a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028530:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028536:	89 c8                	mov    eax,ecx
c0028538:	f7 e6                	mul    esi
c002853a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002853d:	89 c7                	mov    edi,eax
c002853f:	89 c8                	mov    eax,ecx
c0028541:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028544:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028547:	89 c1                	mov    ecx,eax
c0028549:	89 f0                	mov    eax,esi
c002854b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002854e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028551:	89 c6                	mov    esi,eax
c0028553:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028556:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028559:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002855c:	31 c0                	xor    eax,eax
c002855e:	01 f1                	add    ecx,esi
c0028560:	0f 92 c0             	setb   al
c0028563:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028566:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028569:	83 d6 00             	adc    esi,0x0
c002856c:	01 c7                	add    edi,eax
c002856e:	83 d6 00             	adc    esi,0x0
c0028571:	01 ca                	add    edx,ecx
c0028573:	0f 92 c1             	setb   cl
c0028576:	0f b6 c9             	movzx  ecx,cl
c0028579:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002857c:	83 d6 00             	adc    esi,0x0
c002857f:	01 cf                	add    edi,ecx
c0028581:	83 d6 00             	adc    esi,0x0
c0028584:	31 c9                	xor    ecx,ecx
c0028586:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028589:	0f 95 c1             	setne  cl
c002858c:	09 cf                	or     edi,ecx
c002858e:	85 f6                	test   esi,esi
c0028590:	78 0c                	js     c002859e <__muldf3+0x1f6>
c0028592:	01 f6                	add    esi,esi
c0028594:	89 f8                	mov    eax,edi
c0028596:	c1 e8 1f             	shr    eax,0x1f
c0028599:	09 c6                	or     esi,eax
c002859b:	01 ff                	add    edi,edi
c002859d:	4b                   	dec    ebx
c002859e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00285a4:	0f 8f 85 00 00 00    	jg     c002862f <__muldf3+0x287>
c00285aa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00285b0:	85 db                	test   ebx,ebx
c00285b2:	0f 8f 84 00 00 00    	jg     c002863c <__muldf3+0x294>
c00285b8:	83 fb cc             	cmp    ebx,0xffffffcc
c00285bb:	7c 79                	jl     c0028636 <__muldf3+0x28e>
c00285bd:	ba 01 00 00 00       	mov    edx,0x1
c00285c2:	29 da                	sub    edx,ebx
c00285c4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285ca:	83 fa 1f             	cmp    edx,0x1f
c00285cd:	7e 30                	jle    c00285ff <__muldf3+0x257>
c00285cf:	83 fa 20             	cmp    edx,0x20
c00285d2:	75 0b                	jne    c00285df <__muldf3+0x237>
c00285d4:	31 c0                	xor    eax,eax
c00285d6:	85 ff                	test   edi,edi
c00285d8:	0f 95 c0             	setne  al
c00285db:	89 c7                	mov    edi,eax
c00285dd:	eb 1a                	jmp    c00285f9 <__muldf3+0x251>
c00285df:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00285e2:	89 f0                	mov    eax,esi
c00285e4:	d3 e0                	shl    eax,cl
c00285e6:	09 f8                	or     eax,edi
c00285e8:	0f 95 c0             	setne  al
c00285eb:	0f b6 c0             	movzx  eax,al
c00285ee:	89 c7                	mov    edi,eax
c00285f0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00285f5:	29 d9                	sub    ecx,ebx
c00285f7:	d3 ee                	shr    esi,cl
c00285f9:	09 f7                	or     edi,esi
c00285fb:	31 db                	xor    ebx,ebx
c00285fd:	eb 3b                	jmp    c002863a <__muldf3+0x292>
c00285ff:	83 c3 1f             	add    ebx,0x1f
c0028602:	89 f0                	mov    eax,esi
c0028604:	88 d9                	mov    cl,bl
c0028606:	d3 e0                	shl    eax,cl
c0028608:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002860b:	89 f8                	mov    eax,edi
c002860d:	88 d1                	mov    cl,dl
c002860f:	d3 e8                	shr    eax,cl
c0028611:	89 c1                	mov    ecx,eax
c0028613:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028616:	09 c8                	or     eax,ecx
c0028618:	88 d9                	mov    cl,bl
c002861a:	d3 e7                	shl    edi,cl
c002861c:	31 db                	xor    ebx,ebx
c002861e:	85 ff                	test   edi,edi
c0028620:	0f 95 c3             	setne  bl
c0028623:	89 df                	mov    edi,ebx
c0028625:	09 c7                	or     edi,eax
c0028627:	88 d1                	mov    cl,dl
c0028629:	d3 ee                	shr    esi,cl
c002862b:	31 db                	xor    ebx,ebx
c002862d:	eb 0d                	jmp    c002863c <__muldf3+0x294>
c002862f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028634:	eb 02                	jmp    c0028638 <__muldf3+0x290>
c0028636:	31 db                	xor    ebx,ebx
c0028638:	31 ff                	xor    edi,edi
c002863a:	31 f6                	xor    esi,esi
c002863c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002863f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028642:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028647:	09 c3                	or     ebx,eax
c0028649:	c1 e3 14             	shl    ebx,0x14
c002864c:	89 f0                	mov    eax,esi
c002864e:	c1 e8 0b             	shr    eax,0xb
c0028651:	09 c3                	or     ebx,eax
c0028653:	89 f8                	mov    eax,edi
c0028655:	c1 e8 0b             	shr    eax,0xb
c0028658:	c1 e6 15             	shl    esi,0x15
c002865b:	09 c6                	or     esi,eax
c002865d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028663:	0f 95 c1             	setne  cl
c0028666:	09 c8                	or     eax,ecx
c0028668:	83 e0 01             	and    eax,0x1
c002866b:	c1 ef 0a             	shr    edi,0xa
c002866e:	21 c7                	and    edi,eax
c0028670:	01 f7                	add    edi,esi
c0028672:	83 d3 00             	adc    ebx,0x0
c0028675:	89 da                	mov    edx,ebx
c0028677:	eb 03                	jmp    c002867c <__muldf3+0x2d4>
c0028679:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002867c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002867f:	89 f8                	mov    eax,edi
c0028681:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028684:	83 c4 24             	add    esp,0x24
c0028687:	5b                   	pop    ebx
c0028688:	5e                   	pop    esi
c0028689:	5f                   	pop    edi
c002868a:	5d                   	pop    ebp
c002868b:	c3                   	ret    

c002868c <__divdf3>:
c002868c:	55                   	push   ebp
c002868d:	89 e5                	mov    ebp,esp
c002868f:	57                   	push   edi
c0028690:	56                   	push   esi
c0028691:	53                   	push   ebx
c0028692:	83 ec 2c             	sub    esp,0x2c
c0028695:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028698:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002869b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002869e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286a1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00286a4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286a7:	89 ce                	mov    esi,ecx
c00286a9:	89 c8                	mov    eax,ecx
c00286ab:	c1 f8 14             	sar    eax,0x14
c00286ae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00286b1:	89 f8                	mov    eax,edi
c00286b3:	89 fb                	mov    ebx,edi
c00286b5:	c1 e3 0b             	shl    ebx,0xb
c00286b8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00286bb:	c1 e6 0b             	shl    esi,0xb
c00286be:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00286c4:	c1 e8 15             	shr    eax,0x15
c00286c7:	09 c6                	or     esi,eax
c00286c9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00286cc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00286cf:	89 c2                	mov    edx,eax
c00286d1:	c1 fa 14             	sar    edx,0x14
c00286d4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00286d7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00286da:	89 de                	mov    esi,ebx
c00286dc:	c1 e6 0b             	shl    esi,0xb
c00286df:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00286e2:	c1 e0 0b             	shl    eax,0xb
c00286e5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00286ea:	c1 eb 15             	shr    ebx,0x15
c00286ed:	09 d8                	or     eax,ebx
c00286ef:	89 c2                	mov    edx,eax
c00286f1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286f4:	25 ff 07 00 00       	and    eax,0x7ff
c00286f9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00286fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00286ff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028705:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028708:	29 d8                	sub    eax,ebx
c002870a:	05 ff 03 00 00       	add    eax,0x3ff
c002870f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028712:	46                   	inc    esi
c0028713:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028719:	0f 85 a5 00 00 00    	jne    c00287c4 <__divdf3+0x138>
c002871f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028722:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028725:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028729:	74 2a                	je     c0028755 <__divdf3+0xc9>
c002872b:	85 f6                	test   esi,esi
c002872d:	0f 85 cc 02 00 00    	jne    c00289ff <__divdf3+0x373>
c0028733:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028736:	40                   	inc    eax
c0028737:	a9 fe 07 00 00       	test   eax,0x7fe
c002873c:	75 26                	jne    c0028764 <__divdf3+0xd8>
c002873e:	85 db                	test   ebx,ebx
c0028740:	74 22                	je     c0028764 <__divdf3+0xd8>
c0028742:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028745:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028748:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002874b:	09 d0                	or     eax,edx
c002874d:	0f 85 ac 02 00 00    	jne    c00289ff <__divdf3+0x373>
c0028753:	eb 63                	jmp    c00287b8 <__divdf3+0x12c>
c0028755:	85 f6                	test   esi,esi
c0028757:	75 22                	jne    c002877b <__divdf3+0xef>
c0028759:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002875c:	40                   	inc    eax
c002875d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028762:	74 36                	je     c002879a <__divdf3+0x10e>
c0028764:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028768:	0f 89 91 02 00 00    	jns    c00289ff <__divdf3+0x373>
c002876e:	89 f8                	mov    eax,edi
c0028770:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028776:	e9 80 02 00 00       	jmp    c00289fb <__divdf3+0x36f>
c002877b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002877e:	01 f6                	add    esi,esi
c0028780:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028783:	c1 ef 1f             	shr    edi,0x1f
c0028786:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028789:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002878c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002878f:	09 f7                	or     edi,esi
c0028791:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028794:	78 2e                	js     c00287c4 <__divdf3+0x138>
c0028796:	89 c8                	mov    eax,ecx
c0028798:	eb e1                	jmp    c002877b <__divdf3+0xef>
c002879a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002879d:	09 d0                	or     eax,edx
c002879f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287a3:	74 0f                	je     c00287b4 <__divdf3+0x128>
c00287a5:	85 c0                	test   eax,eax
c00287a7:	74 bb                	je     c0028764 <__divdf3+0xd8>
c00287a9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287ac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287af:	e9 4b 02 00 00       	jmp    c00289ff <__divdf3+0x373>
c00287b4:	85 c0                	test   eax,eax
c00287b6:	75 ac                	jne    c0028764 <__divdf3+0xd8>
c00287b8:	31 ff                	xor    edi,edi
c00287ba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00287bf:	e9 3b 02 00 00       	jmp    c00289ff <__divdf3+0x373>
c00287c4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00287c7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00287ca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00287d0:	75 6b                	jne    c002883d <__divdf3+0x1b1>
c00287d2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00287d5:	09 d6                	or     esi,edx
c00287d7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287db:	74 28                	je     c0028805 <__divdf3+0x179>
c00287dd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287e0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287e3:	85 f6                	test   esi,esi
c00287e5:	0f 85 14 02 00 00    	jne    c00289ff <__divdf3+0x373>
c00287eb:	31 ff                	xor    edi,edi
c00287ed:	31 c9                	xor    ecx,ecx
c00287ef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00287f2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00287f5:	0f 89 04 02 00 00    	jns    c00289ff <__divdf3+0x373>
c00287fb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028800:	e9 fa 01 00 00       	jmp    c00289ff <__divdf3+0x373>
c0028805:	85 f6                	test   esi,esi
c0028807:	75 1b                	jne    c0028824 <__divdf3+0x198>
c0028809:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002880c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002880f:	25 00 00 00 80       	and    eax,0x80000000
c0028814:	31 c9                	xor    ecx,ecx
c0028816:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002881b:	89 cf                	mov    edi,ecx
c002881d:	89 c1                	mov    ecx,eax
c002881f:	e9 db 01 00 00       	jmp    c00289ff <__divdf3+0x373>
c0028824:	01 d2                	add    edx,edx
c0028826:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028829:	c1 eb 1f             	shr    ebx,0x1f
c002882c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002882f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028832:	8d 48 01             	lea    ecx,[eax+0x1]
c0028835:	09 da                	or     edx,ebx
c0028837:	78 04                	js     c002883d <__divdf3+0x1b1>
c0028839:	89 c8                	mov    eax,ecx
c002883b:	eb e7                	jmp    c0028824 <__divdf3+0x198>
c002883d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028840:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028846:	81 ca 00 00 00 80    	or     edx,0x80000000
c002884c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002884f:	39 d6                	cmp    esi,edx
c0028851:	77 0d                	ja     c0028860 <__divdf3+0x1d4>
c0028853:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028856:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028859:	72 1b                	jb     c0028876 <__divdf3+0x1ea>
c002885b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002885e:	75 16                	jne    c0028876 <__divdf3+0x1ea>
c0028860:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028863:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028866:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028869:	83 de 00             	sbb    esi,0x0
c002886c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002886f:	ba 01 00 00 00       	mov    edx,0x1
c0028874:	eb 02                	jmp    c0028878 <__divdf3+0x1ec>
c0028876:	31 d2                	xor    edx,edx
c0028878:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002887f:	31 ff                	xor    edi,edi
c0028881:	01 ff                	add    edi,edi
c0028883:	89 d1                	mov    ecx,edx
c0028885:	c1 e9 1f             	shr    ecx,0x1f
c0028888:	09 cf                	or     edi,ecx
c002888a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002888d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028890:	89 da                	mov    edx,ebx
c0028892:	89 f3                	mov    ebx,esi
c0028894:	8d 34 36             	lea    esi,[esi+esi*1]
c0028897:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002889a:	c1 e9 1f             	shr    ecx,0x1f
c002889d:	09 ce                	or     esi,ecx
c002889f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288a2:	01 c9                	add    ecx,ecx
c00288a4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00288a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288aa:	85 db                	test   ebx,ebx
c00288ac:	78 29                	js     c00288d7 <__divdf3+0x24b>
c00288ae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00288b1:	72 07                	jb     c00288ba <__divdf3+0x22e>
c00288b3:	75 3c                	jne    c00288f1 <__divdf3+0x265>
c00288b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288b8:	77 37                	ja     c00288f1 <__divdf3+0x265>
c00288ba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288bd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00288c0:	31 d2                	xor    edx,edx
c00288c2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00288c5:	0f 97 c2             	seta   dl
c00288c8:	29 d6                	sub    esi,edx
c00288ca:	89 d9                	mov    ecx,ebx
c00288cc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00288cf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288d2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00288d5:	eb 17                	jmp    c00288ee <__divdf3+0x262>
c00288d7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288da:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288dd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288e0:	0f 97 c1             	seta   cl
c00288e3:	0f b6 c9             	movzx  ecx,cl
c00288e6:	29 ce                	sub    esi,ecx
c00288e8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00288eb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00288ee:	83 ca 01             	or     edx,0x1
c00288f1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00288f4:	75 8b                	jne    c0028881 <__divdf3+0x1f5>
c00288f6:	c1 e7 09             	shl    edi,0x9
c00288f9:	89 d1                	mov    ecx,edx
c00288fb:	c1 e9 17             	shr    ecx,0x17
c00288fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028901:	09 f3                	or     ebx,esi
c0028903:	0f 95 c3             	setne  bl
c0028906:	0f b6 db             	movzx  ebx,bl
c0028909:	c1 e2 09             	shl    edx,0x9
c002890c:	09 d3                	or     ebx,edx
c002890e:	89 ca                	mov    edx,ecx
c0028910:	09 fa                	or     edx,edi
c0028912:	78 0c                	js     c0028920 <__divdf3+0x294>
c0028914:	01 d2                	add    edx,edx
c0028916:	89 d9                	mov    ecx,ebx
c0028918:	c1 e9 1f             	shr    ecx,0x1f
c002891b:	09 ca                	or     edx,ecx
c002891d:	01 db                	add    ebx,ebx
c002891f:	48                   	dec    eax
c0028920:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028925:	0f 8f 83 00 00 00    	jg     c00289ae <__divdf3+0x322>
c002892b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028931:	85 c0                	test   eax,eax
c0028933:	0f 8f 82 00 00 00    	jg     c00289bb <__divdf3+0x32f>
c0028939:	83 f8 cc             	cmp    eax,0xffffffcc
c002893c:	7c 77                	jl     c00289b5 <__divdf3+0x329>
c002893e:	be 01 00 00 00       	mov    esi,0x1
c0028943:	29 c6                	sub    esi,eax
c0028945:	81 ca 00 00 00 80    	or     edx,0x80000000
c002894b:	83 fe 1f             	cmp    esi,0x1f
c002894e:	7e 2f                	jle    c002897f <__divdf3+0x2f3>
c0028950:	83 fe 20             	cmp    esi,0x20
c0028953:	75 0a                	jne    c002895f <__divdf3+0x2d3>
c0028955:	85 db                	test   ebx,ebx
c0028957:	0f 95 c3             	setne  bl
c002895a:	0f b6 db             	movzx  ebx,bl
c002895d:	eb 1a                	jmp    c0028979 <__divdf3+0x2ed>
c002895f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028962:	89 d7                	mov    edi,edx
c0028964:	d3 e7                	shl    edi,cl
c0028966:	89 f9                	mov    ecx,edi
c0028968:	09 d9                	or     ecx,ebx
c002896a:	0f 95 c3             	setne  bl
c002896d:	0f b6 db             	movzx  ebx,bl
c0028970:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028975:	29 c1                	sub    ecx,eax
c0028977:	d3 ea                	shr    edx,cl
c0028979:	09 d3                	or     ebx,edx
c002897b:	31 c0                	xor    eax,eax
c002897d:	eb 3a                	jmp    c00289b9 <__divdf3+0x32d>
c002897f:	83 c0 1f             	add    eax,0x1f
c0028982:	89 d7                	mov    edi,edx
c0028984:	88 c1                	mov    cl,al
c0028986:	d3 e7                	shl    edi,cl
c0028988:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002898b:	89 df                	mov    edi,ebx
c002898d:	89 f1                	mov    ecx,esi
c002898f:	d3 ef                	shr    edi,cl
c0028991:	89 f9                	mov    ecx,edi
c0028993:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028996:	09 cf                	or     edi,ecx
c0028998:	88 c1                	mov    cl,al
c002899a:	d3 e3                	shl    ebx,cl
c002899c:	85 db                	test   ebx,ebx
c002899e:	0f 95 c3             	setne  bl
c00289a1:	0f b6 db             	movzx  ebx,bl
c00289a4:	09 fb                	or     ebx,edi
c00289a6:	89 f1                	mov    ecx,esi
c00289a8:	d3 ea                	shr    edx,cl
c00289aa:	31 c0                	xor    eax,eax
c00289ac:	eb 0d                	jmp    c00289bb <__divdf3+0x32f>
c00289ae:	b8 ff 07 00 00       	mov    eax,0x7ff
c00289b3:	eb 02                	jmp    c00289b7 <__divdf3+0x32b>
c00289b5:	31 c0                	xor    eax,eax
c00289b7:	31 db                	xor    ebx,ebx
c00289b9:	31 d2                	xor    edx,edx
c00289bb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00289be:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00289c1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00289c7:	09 c8                	or     eax,ecx
c00289c9:	c1 e0 14             	shl    eax,0x14
c00289cc:	89 d1                	mov    ecx,edx
c00289ce:	c1 e9 0b             	shr    ecx,0xb
c00289d1:	09 c8                	or     eax,ecx
c00289d3:	89 c6                	mov    esi,eax
c00289d5:	89 d9                	mov    ecx,ebx
c00289d7:	c1 e9 0b             	shr    ecx,0xb
c00289da:	c1 e2 15             	shl    edx,0x15
c00289dd:	09 ca                	or     edx,ecx
c00289df:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00289e5:	0f 95 c0             	setne  al
c00289e8:	09 c1                	or     ecx,eax
c00289ea:	83 e1 01             	and    ecx,0x1
c00289ed:	c1 eb 0a             	shr    ebx,0xa
c00289f0:	21 cb                	and    ebx,ecx
c00289f2:	01 d3                	add    ebx,edx
c00289f4:	89 d8                	mov    eax,ebx
c00289f6:	83 d6 00             	adc    esi,0x0
c00289f9:	89 f2                	mov    edx,esi
c00289fb:	89 c7                	mov    edi,eax
c00289fd:	89 d1                	mov    ecx,edx
c00289ff:	89 f8                	mov    eax,edi
c0028a01:	89 ca                	mov    edx,ecx
c0028a03:	83 c4 2c             	add    esp,0x2c
c0028a06:	5b                   	pop    ebx
c0028a07:	5e                   	pop    esi
c0028a08:	5f                   	pop    edi
c0028a09:	5d                   	pop    ebp
c0028a0a:	c3                   	ret    

c0028a0b <__floatsidf>:
c0028a0b:	55                   	push   ebp
c0028a0c:	89 e5                	mov    ebp,esp
c0028a0e:	56                   	push   esi
c0028a0f:	53                   	push   ebx
c0028a10:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a13:	85 db                	test   ebx,ebx
c0028a15:	7e 15                	jle    c0028a2c <__floatsidf+0x21>
c0028a17:	0f bd cb             	bsr    ecx,ebx
c0028a1a:	83 f1 1f             	xor    ecx,0x1f
c0028a1d:	d3 e3                	shl    ebx,cl
c0028a1f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a25:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a2a:	eb 21                	jmp    c0028a4d <__floatsidf+0x42>
c0028a2c:	b8 00 00 00 00       	mov    eax,0x0
c0028a31:	ba 00 00 00 00       	mov    edx,0x0
c0028a36:	74 2a                	je     c0028a62 <__floatsidf+0x57>
c0028a38:	f7 db                	neg    ebx
c0028a3a:	0f bd cb             	bsr    ecx,ebx
c0028a3d:	83 f1 1f             	xor    ecx,0x1f
c0028a40:	d3 e3                	shl    ebx,cl
c0028a42:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a48:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028a4d:	29 c8                	sub    eax,ecx
c0028a4f:	c1 e0 14             	shl    eax,0x14
c0028a52:	89 c1                	mov    ecx,eax
c0028a54:	89 de                	mov    esi,ebx
c0028a56:	c1 ee 0b             	shr    esi,0xb
c0028a59:	09 f1                	or     ecx,esi
c0028a5b:	89 ca                	mov    edx,ecx
c0028a5d:	c1 e3 15             	shl    ebx,0x15
c0028a60:	89 d8                	mov    eax,ebx
c0028a62:	5b                   	pop    ebx
c0028a63:	5e                   	pop    esi
c0028a64:	5d                   	pop    ebp
c0028a65:	c3                   	ret    

c0028a66 <__floatunsidf>:
c0028a66:	55                   	push   ebp
c0028a67:	89 e5                	mov    ebp,esp
c0028a69:	56                   	push   esi
c0028a6a:	53                   	push   ebx
c0028a6b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a6e:	85 db                	test   ebx,ebx
c0028a70:	74 2a                	je     c0028a9c <__floatunsidf+0x36>
c0028a72:	0f bd cb             	bsr    ecx,ebx
c0028a75:	83 f1 1f             	xor    ecx,0x1f
c0028a78:	d3 e3                	shl    ebx,cl
c0028a7a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a80:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a85:	29 c8                	sub    eax,ecx
c0028a87:	c1 e0 14             	shl    eax,0x14
c0028a8a:	89 c1                	mov    ecx,eax
c0028a8c:	89 de                	mov    esi,ebx
c0028a8e:	c1 ee 0b             	shr    esi,0xb
c0028a91:	09 f1                	or     ecx,esi
c0028a93:	89 ca                	mov    edx,ecx
c0028a95:	c1 e3 15             	shl    ebx,0x15
c0028a98:	89 d8                	mov    eax,ebx
c0028a9a:	eb 04                	jmp    c0028aa0 <__floatunsidf+0x3a>
c0028a9c:	31 c0                	xor    eax,eax
c0028a9e:	31 d2                	xor    edx,edx
c0028aa0:	5b                   	pop    ebx
c0028aa1:	5e                   	pop    esi
c0028aa2:	5d                   	pop    ebp
c0028aa3:	c3                   	ret    

c0028aa4 <__fixdfsi>:
c0028aa4:	55                   	push   ebp
c0028aa5:	89 e5                	mov    ebp,esp
c0028aa7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028aaa:	89 d1                	mov    ecx,edx
c0028aac:	c1 e1 0b             	shl    ecx,0xb
c0028aaf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028ab8:	c1 e8 15             	shr    eax,0x15
c0028abb:	09 c1                	or     ecx,eax
c0028abd:	c1 fa 14             	sar    edx,0x14
c0028ac0:	78 1f                	js     c0028ae1 <__fixdfsi+0x3d>
c0028ac2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028ac8:	31 c0                	xor    eax,eax
c0028aca:	83 fa 1e             	cmp    edx,0x1e
c0028acd:	77 40                	ja     c0028b0f <__fixdfsi+0x6b>
c0028acf:	89 c8                	mov    eax,ecx
c0028ad1:	0d 00 00 00 80       	or     eax,0x80000000
c0028ad6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028adb:	29 d1                	sub    ecx,edx
c0028add:	d3 e8                	shr    eax,cl
c0028adf:	eb 2e                	jmp    c0028b0f <__fixdfsi+0x6b>
c0028ae1:	31 c0                	xor    eax,eax
c0028ae3:	81 c2 01 04 00 00    	add    edx,0x401
c0028ae9:	78 24                	js     c0028b0f <__fixdfsi+0x6b>
c0028aeb:	83 fa 1e             	cmp    edx,0x1e
c0028aee:	7e 09                	jle    c0028af9 <__fixdfsi+0x55>
c0028af0:	83 fa 1f             	cmp    edx,0x1f
c0028af3:	75 18                	jne    c0028b0d <__fixdfsi+0x69>
c0028af5:	85 c9                	test   ecx,ecx
c0028af7:	75 14                	jne    c0028b0d <__fixdfsi+0x69>
c0028af9:	89 c8                	mov    eax,ecx
c0028afb:	0d 00 00 00 80       	or     eax,0x80000000
c0028b00:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b05:	29 d1                	sub    ecx,edx
c0028b07:	d3 e8                	shr    eax,cl
c0028b09:	f7 d8                	neg    eax
c0028b0b:	eb 02                	jmp    c0028b0f <__fixdfsi+0x6b>
c0028b0d:	31 c0                	xor    eax,eax
c0028b0f:	5d                   	pop    ebp
c0028b10:	c3                   	ret    

c0028b11 <__fixunsdfsi>:
c0028b11:	55                   	push   ebp
c0028b12:	89 e5                	mov    ebp,esp
c0028b14:	53                   	push   ebx
c0028b15:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b1b:	89 d3                	mov    ebx,edx
c0028b1d:	c1 fb 14             	sar    ebx,0x14
c0028b20:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b26:	31 c0                	xor    eax,eax
c0028b28:	83 fb 1f             	cmp    ebx,0x1f
c0028b2b:	77 1d                	ja     c0028b4a <__fixunsdfsi+0x39>
c0028b2d:	89 d0                	mov    eax,edx
c0028b2f:	c1 e0 0b             	shl    eax,0xb
c0028b32:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b37:	c1 e9 15             	shr    ecx,0x15
c0028b3a:	09 c8                	or     eax,ecx
c0028b3c:	0d 00 00 00 80       	or     eax,0x80000000
c0028b41:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b46:	29 d9                	sub    ecx,ebx
c0028b48:	d3 e8                	shr    eax,cl
c0028b4a:	5b                   	pop    ebx
c0028b4b:	5d                   	pop    ebp
c0028b4c:	c3                   	ret    

c0028b4d <__cmpdf2>:
c0028b4d:	55                   	push   ebp
c0028b4e:	89 e5                	mov    ebp,esp
c0028b50:	57                   	push   edi
c0028b51:	56                   	push   esi
c0028b52:	53                   	push   ebx
c0028b53:	83 ec 0c             	sub    esp,0xc
c0028b56:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028b59:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028b5c:	89 ca                	mov    edx,ecx
c0028b5e:	c1 ea 14             	shr    edx,0x14
c0028b61:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028b67:	89 cb                	mov    ebx,ecx
c0028b69:	c1 fb 1f             	sar    ebx,0x1f
c0028b6c:	31 da                	xor    edx,ebx
c0028b6e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b71:	89 df                	mov    edi,ebx
c0028b73:	c1 e7 0b             	shl    edi,0xb
c0028b76:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028b79:	c1 e1 0b             	shl    ecx,0xb
c0028b7c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b82:	c1 eb 15             	shr    ebx,0x15
c0028b85:	09 d9                	or     ecx,ebx
c0028b87:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028b8a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028b8d:	89 ce                	mov    esi,ecx
c0028b8f:	c1 ee 14             	shr    esi,0x14
c0028b92:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028b98:	89 cb                	mov    ebx,ecx
c0028b9a:	c1 fb 1f             	sar    ebx,0x1f
c0028b9d:	31 de                	xor    esi,ebx
c0028b9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028ba2:	89 df                	mov    edi,ebx
c0028ba4:	c1 e7 0b             	shl    edi,0xb
c0028ba7:	c1 e1 0b             	shl    ecx,0xb
c0028baa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bb0:	c1 eb 15             	shr    ebx,0x15
c0028bb3:	09 d9                	or     ecx,ebx
c0028bb5:	89 d3                	mov    ebx,edx
c0028bb7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bbd:	43                   	inc    ebx
c0028bbe:	83 fb 01             	cmp    ebx,0x1
c0028bc1:	77 08                	ja     c0028bcb <__cmpdf2+0x7e>
c0028bc3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bc6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028bc9:	75 68                	jne    c0028c33 <__cmpdf2+0xe6>
c0028bcb:	89 f3                	mov    ebx,esi
c0028bcd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bd3:	43                   	inc    ebx
c0028bd4:	83 fb 01             	cmp    ebx,0x1
c0028bd7:	77 06                	ja     c0028bdf <__cmpdf2+0x92>
c0028bd9:	89 fb                	mov    ebx,edi
c0028bdb:	09 cb                	or     ebx,ecx
c0028bdd:	75 54                	jne    c0028c33 <__cmpdf2+0xe6>
c0028bdf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028be2:	09 f8                	or     eax,edi
c0028be4:	09 c8                	or     eax,ecx
c0028be6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028be9:	75 12                	jne    c0028bfd <__cmpdf2+0xb0>
c0028beb:	8d 42 01             	lea    eax,[edx+0x1]
c0028bee:	83 f8 01             	cmp    eax,0x1
c0028bf1:	77 0a                	ja     c0028bfd <__cmpdf2+0xb0>
c0028bf3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028bf6:	31 c0                	xor    eax,eax
c0028bf8:	83 fb 01             	cmp    ebx,0x1
c0028bfb:	76 36                	jbe    c0028c33 <__cmpdf2+0xe6>
c0028bfd:	b8 01 00 00 00       	mov    eax,0x1
c0028c02:	39 f2                	cmp    edx,esi
c0028c04:	7f 2d                	jg     c0028c33 <__cmpdf2+0xe6>
c0028c06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c0b:	7c 26                	jl     c0028c33 <__cmpdf2+0xe6>
c0028c0d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c10:	77 07                	ja     c0028c19 <__cmpdf2+0xcc>
c0028c12:	72 16                	jb     c0028c2a <__cmpdf2+0xdd>
c0028c14:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c17:	76 0a                	jbe    c0028c23 <__cmpdf2+0xd6>
c0028c19:	89 d0                	mov    eax,edx
c0028c1b:	c1 f8 1f             	sar    eax,0x1f
c0028c1e:	83 c8 01             	or     eax,0x1
c0028c21:	eb 10                	jmp    c0028c33 <__cmpdf2+0xe6>
c0028c23:	b8 00 00 00 00       	mov    eax,0x0
c0028c28:	73 09                	jae    c0028c33 <__cmpdf2+0xe6>
c0028c2a:	89 d0                	mov    eax,edx
c0028c2c:	c1 f8 1f             	sar    eax,0x1f
c0028c2f:	83 e0 02             	and    eax,0x2
c0028c32:	48                   	dec    eax
c0028c33:	83 c4 0c             	add    esp,0xc
c0028c36:	5b                   	pop    ebx
c0028c37:	5e                   	pop    esi
c0028c38:	5f                   	pop    edi
c0028c39:	5d                   	pop    ebp
c0028c3a:	c3                   	ret    

c0028c3b <__eqdf2>:
c0028c3b:	55                   	push   ebp
c0028c3c:	89 e5                	mov    ebp,esp
c0028c3e:	50                   	push   eax
c0028c3f:	6a 01                	push   0x1
c0028c41:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c44:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c47:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c4d:	e8 fb fe ff ff       	call   c0028b4d <__cmpdf2>
c0028c52:	83 c4 18             	add    esp,0x18
c0028c55:	c9                   	leave  
c0028c56:	c3                   	ret    

c0028c57 <__nedf2>:
c0028c57:	eb e2                	jmp    c0028c3b <__eqdf2>

c0028c59 <__gtdf2>:
c0028c59:	55                   	push   ebp
c0028c5a:	89 e5                	mov    ebp,esp
c0028c5c:	50                   	push   eax
c0028c5d:	6a ff                	push   0xffffffff
c0028c5f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c62:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c65:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c6b:	e8 dd fe ff ff       	call   c0028b4d <__cmpdf2>
c0028c70:	83 c4 18             	add    esp,0x18
c0028c73:	c9                   	leave  
c0028c74:	c3                   	ret    

c0028c75 <__gedf2>:
c0028c75:	eb e2                	jmp    c0028c59 <__gtdf2>

c0028c77 <__ltdf2>:
c0028c77:	eb c2                	jmp    c0028c3b <__eqdf2>

c0028c79 <__ledf2>:
c0028c79:	eb c0                	jmp    c0028c3b <__eqdf2>

c0028c7b <__truncdfsf2>:
c0028c7b:	55                   	push   ebp
c0028c7c:	89 e5                	mov    ebp,esp
c0028c7e:	57                   	push   edi
c0028c7f:	56                   	push   esi
c0028c80:	53                   	push   ebx
c0028c81:	83 ec 0c             	sub    esp,0xc
c0028c84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c87:	89 d1                	mov    ecx,edx
c0028c89:	c1 f9 14             	sar    ecx,0x14
c0028c8c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c8f:	89 df                	mov    edi,ebx
c0028c91:	c1 e7 0b             	shl    edi,0xb
c0028c94:	89 d0                	mov    eax,edx
c0028c96:	c1 e0 0b             	shl    eax,0xb
c0028c99:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c9e:	c1 eb 15             	shr    ebx,0x15
c0028ca1:	09 d8                	or     eax,ebx
c0028ca3:	89 cb                	mov    ebx,ecx
c0028ca5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028cab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028cb1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028cb7:	0f 86 9e 00 00 00    	jbe    c0028d5b <__truncdfsf2+0xe0>
c0028cbd:	85 db                	test   ebx,ebx
c0028cbf:	75 0a                	jne    c0028ccb <__truncdfsf2+0x50>
c0028cc1:	c1 fa 17             	sar    edx,0x17
c0028cc4:	30 d2                	xor    dl,dl
c0028cc6:	e9 84 00 00 00       	jmp    c0028d4f <__truncdfsf2+0xd4>
c0028ccb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028cd1:	83 fe 83             	cmp    esi,0xffffff83
c0028cd4:	7d 4b                	jge    c0028d21 <__truncdfsf2+0xa6>
c0028cd6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028cdb:	29 f1                	sub    ecx,esi
c0028cdd:	83 f9 1f             	cmp    ecx,0x1f
c0028ce0:	7f 6b                	jg     c0028d4d <__truncdfsf2+0xd2>
c0028ce2:	0d 00 00 00 80       	or     eax,0x80000000
c0028ce7:	89 c3                	mov    ebx,eax
c0028ce9:	d3 eb                	shr    ebx,cl
c0028ceb:	be 01 00 00 00       	mov    esi,0x1
c0028cf0:	d3 e6                	shl    esi,cl
c0028cf2:	4e                   	dec    esi
c0028cf3:	21 f0                	and    eax,esi
c0028cf5:	09 f8                	or     eax,edi
c0028cf7:	0f 95 c0             	setne  al
c0028cfa:	0f b6 c0             	movzx  eax,al
c0028cfd:	09 c3                	or     ebx,eax
c0028cff:	89 d9                	mov    ecx,ebx
c0028d01:	c1 e9 08             	shr    ecx,0x8
c0028d04:	f6 c3 7f             	test   bl,0x7f
c0028d07:	0f 95 c0             	setne  al
c0028d0a:	09 c8                	or     eax,ecx
c0028d0c:	83 e0 01             	and    eax,0x1
c0028d0f:	c1 eb 07             	shr    ebx,0x7
c0028d12:	21 c3                	and    ebx,eax
c0028d14:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d1a:	09 d1                	or     ecx,edx
c0028d1c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d1f:	eb 76                	jmp    c0028d97 <__truncdfsf2+0x11c>
c0028d21:	83 c6 80             	add    esi,0xffffff80
c0028d24:	7e 1d                	jle    c0028d43 <__truncdfsf2+0xc8>
c0028d26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d2c:	75 0b                	jne    c0028d39 <__truncdfsf2+0xbe>
c0028d2e:	09 f8                	or     eax,edi
c0028d30:	74 09                	je     c0028d3b <__truncdfsf2+0xc0>
c0028d32:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d37:	eb 02                	jmp    c0028d3b <__truncdfsf2+0xc0>
c0028d39:	31 c0                	xor    eax,eax
c0028d3b:	c1 fa 17             	sar    edx,0x17
c0028d3e:	80 ca ff             	or     dl,0xff
c0028d41:	eb 0e                	jmp    c0028d51 <__truncdfsf2+0xd6>
c0028d43:	c1 fa 1f             	sar    edx,0x1f
c0028d46:	c1 e2 08             	shl    edx,0x8
c0028d49:	09 ca                	or     edx,ecx
c0028d4b:	eb 04                	jmp    c0028d51 <__truncdfsf2+0xd6>
c0028d4d:	31 d2                	xor    edx,edx
c0028d4f:	31 c0                	xor    eax,eax
c0028d51:	c1 e2 17             	shl    edx,0x17
c0028d54:	c1 e8 08             	shr    eax,0x8
c0028d57:	09 d0                	or     eax,edx
c0028d59:	eb 3c                	jmp    c0028d97 <__truncdfsf2+0x11c>
c0028d5b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028d61:	89 ca                	mov    edx,ecx
c0028d63:	c1 fa 0b             	sar    edx,0xb
c0028d66:	c1 e2 08             	shl    edx,0x8
c0028d69:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028d6c:	31 db                	xor    ebx,ebx
c0028d6e:	85 ff                	test   edi,edi
c0028d70:	0f 95 c3             	setne  bl
c0028d73:	09 d8                	or     eax,ebx
c0028d75:	89 c3                	mov    ebx,eax
c0028d77:	c1 eb 08             	shr    ebx,0x8
c0028d7a:	a8 7f                	test   al,0x7f
c0028d7c:	0f 95 c2             	setne  dl
c0028d7f:	89 d6                	mov    esi,edx
c0028d81:	09 de                	or     esi,ebx
c0028d83:	83 e6 01             	and    esi,0x1
c0028d86:	c1 e8 07             	shr    eax,0x7
c0028d89:	21 f0                	and    eax,esi
c0028d8b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028d8e:	09 ca                	or     edx,ecx
c0028d90:	c1 e2 17             	shl    edx,0x17
c0028d93:	09 da                	or     edx,ebx
c0028d95:	01 d0                	add    eax,edx
c0028d97:	83 c4 0c             	add    esp,0xc
c0028d9a:	5b                   	pop    ebx
c0028d9b:	5e                   	pop    esi
c0028d9c:	5f                   	pop    edi
c0028d9d:	5d                   	pop    ebp
c0028d9e:	c3                   	ret    

c0028d9f <__extendsfdf2>:
c0028d9f:	55                   	push   ebp
c0028da0:	89 e5                	mov    ebp,esp
c0028da2:	57                   	push   edi
c0028da3:	56                   	push   esi
c0028da4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028da7:	89 d1                	mov    ecx,edx
c0028da9:	c1 f9 17             	sar    ecx,0x17
c0028dac:	c1 e2 08             	shl    edx,0x8
c0028daf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028db5:	89 c8                	mov    eax,ecx
c0028db7:	80 e4 f8             	and    ah,0xf8
c0028dba:	8d 71 01             	lea    esi,[ecx+0x1]
c0028dbd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028dc3:	75 27                	jne    c0028dec <__extendsfdf2+0x4d>
c0028dc5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028dcb:	75 18                	jne    c0028de5 <__extendsfdf2+0x46>
c0028dcd:	85 d2                	test   edx,edx
c0028dcf:	74 20                	je     c0028df1 <__extendsfdf2+0x52>
c0028dd1:	41                   	inc    ecx
c0028dd2:	01 d2                	add    edx,edx
c0028dd4:	79 fb                	jns    c0028dd1 <__extendsfdf2+0x32>
c0028dd6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028ddc:	29 c8                	sub    eax,ecx
c0028dde:	05 81 03 00 00       	add    eax,0x381
c0028de3:	eb 0c                	jmp    c0028df1 <__extendsfdf2+0x52>
c0028de5:	05 00 07 00 00       	add    eax,0x700
c0028dea:	eb 05                	jmp    c0028df1 <__extendsfdf2+0x52>
c0028dec:	05 80 03 00 00       	add    eax,0x380
c0028df1:	c1 e0 14             	shl    eax,0x14
c0028df4:	89 c1                	mov    ecx,eax
c0028df6:	89 d0                	mov    eax,edx
c0028df8:	c1 e8 0b             	shr    eax,0xb
c0028dfb:	09 c1                	or     ecx,eax
c0028dfd:	c1 e2 15             	shl    edx,0x15
c0028e00:	89 d0                	mov    eax,edx
c0028e02:	89 ca                	mov    edx,ecx
c0028e04:	5e                   	pop    esi
c0028e05:	5f                   	pop    edi
c0028e06:	5d                   	pop    ebp
c0028e07:	c3                   	ret    
c0028e08:	66 90                	xchg   ax,ax
c0028e0a:	66 90                	xchg   ax,ax
c0028e0c:	66 90                	xchg   ax,ax
c0028e0e:	66 90                	xchg   ax,ax

c0028e10 <fabs>:
c0028e10:	83 ec 0c             	sub    esp,0xc
c0028e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e17:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e1e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e27:	dd 04 24             	fld    QWORD PTR [esp]
c0028e2a:	83 c4 0c             	add    esp,0xc
c0028e2d:	c3                   	ret    
c0028e2e:	66 90                	xchg   ax,ax

c0028e30 <lrint>:
c0028e30:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e34:	83 ec 04             	sub    esp,0x4
c0028e37:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e3a:	58                   	pop    eax
c0028e3b:	c3                   	ret    

c0028e3c <lrintf>:
c0028e3c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028e40:	83 ec 04             	sub    esp,0x4
c0028e43:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e46:	58                   	pop    eax
c0028e47:	c3                   	ret    

Disassembly of section .init:

c0028e48 <_init>:
c0028e48:	55                   	push   ebp
c0028e49:	89 e5                	mov    ebp,esp
c0028e4b:	e8 c8 72 fd ff       	call   c0000118 <frame_dummy>
c0028e50:	e8 5b e0 ff ff       	call   c0026eb0 <__do_global_ctors_aux>
c0028e55:	5d                   	pop    ebp
c0028e56:	c3                   	ret    

Disassembly of section .fini:

c0028e57 <_fini>:
c0028e57:	55                   	push   ebp
c0028e58:	89 e5                	mov    ebp,esp
c0028e5a:	e8 49 72 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028e5f:	5d                   	pop    ebp
c0028e60:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028e62 <Computer::~Computer()>:
c0028e62:	83 ec 0c             	sub    esp,0xc
c0028e65:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c0028e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6e:	89 10                	mov    DWORD PTR [eax],edx
c0028e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e74:	83 ec 0c             	sub    esp,0xc
c0028e77:	50                   	push   eax
c0028e78:	e8 55 b3 fe ff       	call   c00141d2 <Device::~Device()>
c0028e7d:	83 c4 10             	add    esp,0x10
c0028e80:	90                   	nop
c0028e81:	83 c4 0c             	add    esp,0xc
c0028e84:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028e86 <Computer::~Computer()>:
c0028e86:	83 ec 0c             	sub    esp,0xc
c0028e89:	83 ec 0c             	sub    esp,0xc
c0028e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e90:	e8 cd ff ff ff       	call   c0028e62 <Computer::~Computer()>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	83 ec 08             	sub    esp,0x8
c0028e9b:	68 ec 01 00 00       	push   0x1ec
c0028ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea4:	e8 42 9f fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0028ea9:	83 c4 10             	add    esp,0x10
c0028eac:	83 c4 0c             	add    esp,0xc
c0028eaf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028eb0 <idleCommon()>:
c0028eb0:	83 ec 0c             	sub    esp,0xc
c0028eb3:	fa                   	cli    
c0028eb4:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c0028eba:	e8 bf 55 ff ff       	call   c001e47e <schedule()>
c0028ebf:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0028ec4:	48                   	dec    eax
c0028ec5:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0028eca:	75 01                	jne    c0028ecd <idleCommon()+0x1d>
c0028ecc:	fb                   	sti    
c0028ecd:	83 c4 0c             	add    esp,0xc
c0028ed0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028ed2 <LinkedList<UnixFile>::~LinkedList()>:
c0028ed2:	90                   	nop
c0028ed3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028ed4 <LinkedList<UnixFile>::LinkedList()>:
c0028ed4:	83 ec 0c             	sub    esp,0xc
c0028ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f10:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f17:	83 ec 0c             	sub    esp,0xc
c0028f1a:	68 46 ad 02 c0       	push   0xc002ad46
c0028f1f:	e8 a7 9f fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0028f24:	83 c4 10             	add    esp,0x10
c0028f27:	90                   	nop
c0028f28:	83 c4 0c             	add    esp,0xc
c0028f2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f2c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f2c:	83 ec 0c             	sub    esp,0xc
c0028f2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f34:	75 10                	jne    c0028f46 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	68 60 ad 02 c0       	push   0xc002ad60
c0028f3e:	e8 44 19 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0028f43:	83 c4 10             	add    esp,0x10
c0028f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f4c:	85 c0                	test   eax,eax
c0028f4e:	74 34                	je     c0028f84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f57:	85 c0                	test   eax,eax
c0028f59:	74 29                	je     c0028f84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f7b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f82:	eb 65                	jmp    c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f88:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f8a:	85 c0                	test   eax,eax
c0028f8c:	75 4b                	jne    c0028fd9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f95:	85 c0                	test   eax,eax
c0028f97:	75 40                	jne    c0028fd9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fa1:	89 10                	mov    DWORD PTR [eax],edx
c0028fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fb5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fc3:	85 c0                	test   eax,eax
c0028fc5:	74 22                	je     c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fc7:	83 ec 0c             	sub    esp,0xc
c0028fca:	68 82 ad 02 c0       	push   0xc002ad82
c0028fcf:	e8 b3 18 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0028fd4:	83 c4 10             	add    esp,0x10
c0028fd7:	eb 10                	jmp    c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fd9:	83 ec 0c             	sub    esp,0xc
c0028fdc:	68 8c ad 02 c0       	push   0xc002ad8c
c0028fe1:	e8 a1 18 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0028fe6:	83 c4 10             	add    esp,0x10
c0028fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ff0:	8d 50 01             	lea    edx,[eax+0x1]
c0028ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ffa:	90                   	nop
c0028ffb:	83 c4 0c             	add    esp,0xc
c0028ffe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029000 <LinkedList<UnixFile>::getFirstElement()>:
c0029000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029004:	8b 00                	mov    eax,DWORD PTR [eax]
c0029006:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029008 <LinkedList<UnixFile>::removeFirst()>:
c0029008:	83 ec 0c             	sub    esp,0xc
c002900b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029011:	85 c0                	test   eax,eax
c0029013:	75 12                	jne    c0029027 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029015:	83 ec 0c             	sub    esp,0xc
c0029018:	68 98 ad 02 c0       	push   0xc002ad98
c002901d:	e8 65 18 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029022:	83 c4 10             	add    esp,0x10
c0029025:	eb 7e                	jmp    c00290a5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002902e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029031:	85 c0                	test   eax,eax
c0029033:	74 10                	je     c0029045 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029035:	83 ec 0c             	sub    esp,0xc
c0029038:	68 e3 ad 02 c0       	push   0xc002ade3
c002903d:	e8 45 18 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029042:	83 c4 10             	add    esp,0x10
c0029045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029049:	8b 00                	mov    eax,DWORD PTR [eax]
c002904b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002904e:	85 c0                	test   eax,eax
c0029050:	75 33                	jne    c0029085 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029056:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002905c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029060:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002906e:	83 f8 01             	cmp    eax,0x1
c0029071:	74 21                	je     c0029094 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029073:	83 ec 0c             	sub    esp,0xc
c0029076:	68 bc ad 02 c0       	push   0xc002adbc
c002907b:	e8 07 18 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029080:	83 c4 10             	add    esp,0x10
c0029083:	eb 0f                	jmp    c0029094 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029089:	8b 00                	mov    eax,DWORD PTR [eax]
c002908b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029092:	89 10                	mov    DWORD PTR [eax],edx
c0029094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029098:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002909b:	8d 50 ff             	lea    edx,[eax-0x1]
c002909e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290a5:	83 c4 0c             	add    esp,0xc
c00290a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00290aa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00290aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290b1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00290b2 <DriverlessDevice::~DriverlessDevice()>:
c00290b2:	ba 64 b5 02 c0       	mov    edx,0xc002b564
c00290b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290bb:	89 10                	mov    DWORD PTR [eax],edx
c00290bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290c1:	50                   	push   eax
c00290c2:	e8 0b b1 fe ff       	call   c00141d2 <Device::~Device()>
c00290c7:	83 c4 04             	add    esp,0x4
c00290ca:	90                   	nop
c00290cb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00290cc <DriverlessDevice::~DriverlessDevice()>:
c00290cc:	83 ec 0c             	sub    esp,0xc
c00290cf:	83 ec 0c             	sub    esp,0xc
c00290d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d6:	e8 d7 ff ff ff       	call   c00290b2 <DriverlessDevice::~DriverlessDevice()>
c00290db:	83 c4 10             	add    esp,0x10
c00290de:	83 ec 08             	sub    esp,0x8
c00290e1:	68 58 01 00 00       	push   0x158
c00290e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ea:	e8 fc 9c fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	83 c4 0c             	add    esp,0xc
c00290f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00290f6 <LinkedList<Device>::addElement(Device*)>:
c00290f6:	83 ec 0c             	sub    esp,0xc
c00290f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00290fe:	75 10                	jne    c0029110 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029100:	83 ec 0c             	sub    esp,0xc
c0029103:	68 60 ad 02 c0       	push   0xc002ad60
c0029108:	e8 7a 17 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c002910d:	83 c4 10             	add    esp,0x10
c0029110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029114:	8b 00                	mov    eax,DWORD PTR [eax]
c0029116:	85 c0                	test   eax,eax
c0029118:	74 3a                	je     c0029154 <LinkedList<Device>::addElement(Device*)+0x5e>
c002911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029121:	85 c0                	test   eax,eax
c0029123:	74 2f                	je     c0029154 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029129:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002912c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029130:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002913e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029145:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029148:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029152:	eb 68                	jmp    c00291bc <LinkedList<Device>::addElement(Device*)+0xc6>
c0029154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029158:	8b 00                	mov    eax,DWORD PTR [eax]
c002915a:	85 c0                	test   eax,eax
c002915c:	75 4e                	jne    c00291ac <LinkedList<Device>::addElement(Device*)+0xb6>
c002915e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029162:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029165:	85 c0                	test   eax,eax
c0029167:	75 43                	jne    c00291ac <LinkedList<Device>::addElement(Device*)+0xb6>
c0029169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029171:	89 10                	mov    DWORD PTR [eax],edx
c0029173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029177:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002917b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029185:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002918f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029193:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029196:	85 c0                	test   eax,eax
c0029198:	74 22                	je     c00291bc <LinkedList<Device>::addElement(Device*)+0xc6>
c002919a:	83 ec 0c             	sub    esp,0xc
c002919d:	68 82 ad 02 c0       	push   0xc002ad82
c00291a2:	e8 e0 16 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00291a7:	83 c4 10             	add    esp,0x10
c00291aa:	eb 10                	jmp    c00291bc <LinkedList<Device>::addElement(Device*)+0xc6>
c00291ac:	83 ec 0c             	sub    esp,0xc
c00291af:	68 8c ad 02 c0       	push   0xc002ad8c
c00291b4:	e8 ce 16 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00291b9:	83 c4 10             	add    esp,0x10
c00291bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291c3:	8d 50 01             	lea    edx,[eax+0x1]
c00291c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291cd:	90                   	nop
c00291ce:	83 c4 0c             	add    esp,0xc
c00291d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00291d2 <LinkedList<Device>::LinkedList()>:
c00291d2:	83 ec 0c             	sub    esp,0xc
c00291d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029203:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002920a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029215:	83 ec 0c             	sub    esp,0xc
c0029218:	68 46 ad 02 c0       	push   0xc002ad46
c002921d:	e8 a9 9c fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c0029222:	83 c4 10             	add    esp,0x10
c0029225:	90                   	nop
c0029226:	83 c4 0c             	add    esp,0xc
c0029229:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002922a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002922e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029230:	85 c0                	test   eax,eax
c0029232:	75 0e                	jne    c0029242 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029238:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002923b:	85 c0                	test   eax,eax
c002923d:	75 03                	jne    c0029242 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002923f:	b0 01                	mov    al,0x1
c0029241:	c3                   	ret    
c0029242:	b0 00                	mov    al,0x0
c0029244:	90                   	nop
c0029245:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002924a:	8b 00                	mov    eax,DWORD PTR [eax]
c002924c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002924e:	83 ec 0c             	sub    esp,0xc
c0029251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029255:	8b 00                	mov    eax,DWORD PTR [eax]
c0029257:	85 c0                	test   eax,eax
c0029259:	75 15                	jne    c0029270 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002925b:	83 ec 0c             	sub    esp,0xc
c002925e:	68 98 ad 02 c0       	push   0xc002ad98
c0029263:	e8 1f 16 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029268:	83 c4 10             	add    esp,0x10
c002926b:	e9 88 00 00 00       	jmp    c00292f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029277:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002927a:	85 c0                	test   eax,eax
c002927c:	0f 95 c0             	setne  al
c002927f:	84 c0                	test   al,al
c0029281:	74 10                	je     c0029293 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029283:	83 ec 0c             	sub    esp,0xc
c0029286:	68 e3 ad 02 c0       	push   0xc002ade3
c002928b:	e8 f7 15 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029290:	83 c4 10             	add    esp,0x10
c0029293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029297:	8b 00                	mov    eax,DWORD PTR [eax]
c0029299:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002929c:	85 c0                	test   eax,eax
c002929e:	0f 94 c0             	sete   al
c00292a1:	84 c0                	test   al,al
c00292a3:	74 33                	je     c00292d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00292a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292c1:	83 f8 01             	cmp    eax,0x1
c00292c4:	74 21                	je     c00292e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292c6:	83 ec 0c             	sub    esp,0xc
c00292c9:	68 bc ad 02 c0       	push   0xc002adbc
c00292ce:	e8 b4 15 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00292d3:	83 c4 10             	add    esp,0x10
c00292d6:	eb 0f                	jmp    c00292e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00292de:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00292e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e5:	89 10                	mov    DWORD PTR [eax],edx
c00292e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292ee:	8d 50 ff             	lea    edx,[eax-0x1]
c00292f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292f8:	83 c4 0c             	add    esp,0xc
c00292fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00292fc:	83 ec 0c             	sub    esp,0xc
c00292ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029304:	75 10                	jne    c0029316 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029306:	83 ec 0c             	sub    esp,0xc
c0029309:	68 60 ad 02 c0       	push   0xc002ad60
c002930e:	e8 74 15 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029313:	83 c4 10             	add    esp,0x10
c0029316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931a:	8b 00                	mov    eax,DWORD PTR [eax]
c002931c:	85 c0                	test   eax,eax
c002931e:	74 34                	je     c0029354 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029324:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029327:	85 c0                	test   eax,eax
c0029329:	74 29                	je     c0029354 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002932b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029332:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029336:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029341:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002934b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029352:	eb 65                	jmp    c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029358:	8b 00                	mov    eax,DWORD PTR [eax]
c002935a:	85 c0                	test   eax,eax
c002935c:	75 4b                	jne    c00293a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002935e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029362:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029365:	85 c0                	test   eax,eax
c0029367:	75 40                	jne    c00293a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029371:	89 10                	mov    DWORD PTR [eax],edx
c0029373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029377:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002937b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002937e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029382:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029385:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029390:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029393:	85 c0                	test   eax,eax
c0029395:	74 22                	je     c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029397:	83 ec 0c             	sub    esp,0xc
c002939a:	68 82 ad 02 c0       	push   0xc002ad82
c002939f:	e8 e3 14 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00293a4:	83 c4 10             	add    esp,0x10
c00293a7:	eb 10                	jmp    c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293a9:	83 ec 0c             	sub    esp,0xc
c00293ac:	68 8c ad 02 c0       	push   0xc002ad8c
c00293b1:	e8 d1 14 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00293b6:	83 c4 10             	add    esp,0x10
c00293b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293c0:	8d 50 01             	lea    edx,[eax+0x1]
c00293c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293ca:	90                   	nop
c00293cb:	83 c4 0c             	add    esp,0xc
c00293ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00293d0 <ACPI::~ACPI()>:
c00293d0:	83 ec 0c             	sub    esp,0xc
c00293d3:	ba 90 bf 02 c0       	mov    edx,0xc002bf90
c00293d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293dc:	89 10                	mov    DWORD PTR [eax],edx
c00293de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e2:	83 ec 0c             	sub    esp,0xc
c00293e5:	50                   	push   eax
c00293e6:	e8 e7 ad fe ff       	call   c00141d2 <Device::~Device()>
c00293eb:	83 c4 10             	add    esp,0x10
c00293ee:	90                   	nop
c00293ef:	83 c4 0c             	add    esp,0xc
c00293f2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00293f4 <ACPI::~ACPI()>:
c00293f4:	83 ec 0c             	sub    esp,0xc
c00293f7:	83 ec 0c             	sub    esp,0xc
c00293fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293fe:	e8 cd ff ff ff       	call   c00293d0 <ACPI::~ACPI()>
c0029403:	83 c4 10             	add    esp,0x10
c0029406:	83 ec 08             	sub    esp,0x8
c0029409:	68 68 12 00 00       	push   0x1268
c002940e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029412:	e8 d4 99 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0029417:	83 c4 10             	add    esp,0x10
c002941a:	83 c4 0c             	add    esp,0xc
c002941d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002941e <LinkedList<Device>::~LinkedList()>:
c002941e:	90                   	nop
c002941f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029420 <LinkedList<Device>::isEmpty()>:
c0029420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029424:	8b 00                	mov    eax,DWORD PTR [eax]
c0029426:	85 c0                	test   eax,eax
c0029428:	75 0e                	jne    c0029438 <LinkedList<Device>::isEmpty()+0x18>
c002942a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002942e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029431:	85 c0                	test   eax,eax
c0029433:	75 03                	jne    c0029438 <LinkedList<Device>::isEmpty()+0x18>
c0029435:	b0 01                	mov    al,0x1
c0029437:	c3                   	ret    
c0029438:	b0 00                	mov    al,0x0
c002943a:	90                   	nop
c002943b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002943c <LinkedList<Device>::getFirstElement()>:
c002943c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029440:	8b 00                	mov    eax,DWORD PTR [eax]
c0029442:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029444 <LinkedList<Device>::removeFirst()>:
c0029444:	83 ec 0c             	sub    esp,0xc
c0029447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944b:	8b 00                	mov    eax,DWORD PTR [eax]
c002944d:	85 c0                	test   eax,eax
c002944f:	75 15                	jne    c0029466 <LinkedList<Device>::removeFirst()+0x22>
c0029451:	83 ec 0c             	sub    esp,0xc
c0029454:	68 98 ad 02 c0       	push   0xc002ad98
c0029459:	e8 29 14 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c002945e:	83 c4 10             	add    esp,0x10
c0029461:	e9 87 00 00 00       	jmp    c00294ed <LinkedList<Device>::removeFirst()+0xa9>
c0029466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002946d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029473:	85 c0                	test   eax,eax
c0029475:	74 10                	je     c0029487 <LinkedList<Device>::removeFirst()+0x43>
c0029477:	83 ec 0c             	sub    esp,0xc
c002947a:	68 e3 ad 02 c0       	push   0xc002ade3
c002947f:	e8 03 14 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029484:	83 c4 10             	add    esp,0x10
c0029487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948b:	8b 00                	mov    eax,DWORD PTR [eax]
c002948d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029493:	85 c0                	test   eax,eax
c0029495:	75 33                	jne    c00294ca <LinkedList<Device>::removeFirst()+0x86>
c0029497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294b3:	83 f8 01             	cmp    eax,0x1
c00294b6:	74 24                	je     c00294dc <LinkedList<Device>::removeFirst()+0x98>
c00294b8:	83 ec 0c             	sub    esp,0xc
c00294bb:	68 bc ad 02 c0       	push   0xc002adbc
c00294c0:	e8 c2 13 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00294c5:	83 c4 10             	add    esp,0x10
c00294c8:	eb 12                	jmp    c00294dc <LinkedList<Device>::removeFirst()+0x98>
c00294ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00294d0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00294d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294da:	89 10                	mov    DWORD PTR [eax],edx
c00294dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294e3:	8d 50 ff             	lea    edx,[eax-0x1]
c00294e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294ed:	83 c4 0c             	add    esp,0xc
c00294f0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00294f2 <CPU::~CPU()>:
c00294f2:	83 ec 0c             	sub    esp,0xc
c00294f5:	ba 80 c3 02 c0       	mov    edx,0xc002c380
c00294fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fe:	89 10                	mov    DWORD PTR [eax],edx
c0029500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029504:	83 ec 0c             	sub    esp,0xc
c0029507:	50                   	push   eax
c0029508:	e8 c5 ac fe ff       	call   c00141d2 <Device::~Device()>
c002950d:	83 c4 10             	add    esp,0x10
c0029510:	90                   	nop
c0029511:	83 c4 0c             	add    esp,0xc
c0029514:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029516 <CPU::~CPU()>:
c0029516:	83 ec 0c             	sub    esp,0xc
c0029519:	83 ec 0c             	sub    esp,0xc
c002951c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029520:	e8 cd ff ff ff       	call   c00294f2 <CPU::~CPU()>
c0029525:	83 c4 10             	add    esp,0x10
c0029528:	83 ec 08             	sub    esp,0x8
c002952b:	68 98 11 00 00       	push   0x1198
c0029530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029534:	e8 b2 98 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0029539:	83 c4 10             	add    esp,0x10
c002953c:	83 c4 0c             	add    esp,0xc
c002953f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029540 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029540:	90                   	nop
c0029541:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029542 <ThreadControlBlock::ThreadControlBlock()>:
c0029542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029546:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002954d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029551:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002955c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029567:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002956e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029572:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002957d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029585:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029589:	90                   	nop
c002958a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002958c:	83 ec 0c             	sub    esp,0xc
c002958f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029593:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295cf:	83 ec 0c             	sub    esp,0xc
c00295d2:	68 46 ad 02 c0       	push   0xc002ad46
c00295d7:	e8 ef 98 fe ff       	call   c0012ecb <Dbg::kprintf(char const*, ...)>
c00295dc:	83 c4 10             	add    esp,0x10
c00295df:	90                   	nop
c00295e0:	83 c4 0c             	add    esp,0xc
c00295e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00295e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00295e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00295e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00295eb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00295ec <Vm::_FPUState::_FPUState()>:
c00295ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295f0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00295f7:	90                   	nop
c00295f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00295fa <PCI::~PCI()>:
c00295fa:	83 ec 0c             	sub    esp,0xc
c00295fd:	ba 84 d4 02 c0       	mov    edx,0xc002d484
c0029602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029606:	89 10                	mov    DWORD PTR [eax],edx
c0029608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960c:	83 ec 0c             	sub    esp,0xc
c002960f:	50                   	push   eax
c0029610:	e8 8d a5 fe ff       	call   c0013ba2 <Bus::~Bus()>
c0029615:	83 c4 10             	add    esp,0x10
c0029618:	90                   	nop
c0029619:	83 c4 0c             	add    esp,0xc
c002961c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002961e <PCI::~PCI()>:
c002961e:	83 ec 0c             	sub    esp,0xc
c0029621:	83 ec 0c             	sub    esp,0xc
c0029624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029628:	e8 cd ff ff ff       	call   c00295fa <PCI::~PCI()>
c002962d:	83 c4 10             	add    esp,0x10
c0029630:	83 ec 08             	sub    esp,0x8
c0029633:	68 58 01 00 00       	push   0x158
c0029638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002963c:	e8 aa 97 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0029641:	83 c4 10             	add    esp,0x10
c0029644:	83 c4 0c             	add    esp,0xc
c0029647:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029648 <IDE::~IDE()>:
c0029648:	83 ec 0c             	sub    esp,0xc
c002964b:	ba e8 d6 02 c0       	mov    edx,0xc002d6e8
c0029650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029654:	89 10                	mov    DWORD PTR [eax],edx
c0029656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965a:	83 ec 0c             	sub    esp,0xc
c002965d:	50                   	push   eax
c002965e:	e8 6d b0 fe ff       	call   c00146d0 <HardDiskController::~HardDiskController()>
c0029663:	83 c4 10             	add    esp,0x10
c0029666:	90                   	nop
c0029667:	83 c4 0c             	add    esp,0xc
c002966a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002966c <IDE::~IDE()>:
c002966c:	83 ec 0c             	sub    esp,0xc
c002966f:	83 ec 0c             	sub    esp,0xc
c0029672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029676:	e8 cd ff ff ff       	call   c0029648 <IDE::~IDE()>
c002967b:	83 c4 10             	add    esp,0x10
c002967e:	83 ec 08             	sub    esp,0x8
c0029681:	68 70 02 00 00       	push   0x270
c0029686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002968a:	e8 5c 97 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c002968f:	83 c4 10             	add    esp,0x10
c0029692:	83 c4 0c             	add    esp,0xc
c0029695:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029696 <SATABus::~SATABus()>:
c0029696:	83 ec 0c             	sub    esp,0xc
c0029699:	ba c8 d7 02 c0       	mov    edx,0xc002d7c8
c002969e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a2:	89 10                	mov    DWORD PTR [eax],edx
c00296a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a8:	83 ec 0c             	sub    esp,0xc
c00296ab:	50                   	push   eax
c00296ac:	e8 1f b0 fe ff       	call   c00146d0 <HardDiskController::~HardDiskController()>
c00296b1:	83 c4 10             	add    esp,0x10
c00296b4:	90                   	nop
c00296b5:	83 c4 0c             	add    esp,0xc
c00296b8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00296ba <SATABus::~SATABus()>:
c00296ba:	83 ec 0c             	sub    esp,0xc
c00296bd:	83 ec 0c             	sub    esp,0xc
c00296c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296c4:	e8 cd ff ff ff       	call   c0029696 <SATABus::~SATABus()>
c00296c9:	83 c4 10             	add    esp,0x10
c00296cc:	83 ec 08             	sub    esp,0x8
c00296cf:	68 64 01 00 00       	push   0x164
c00296d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296d8:	e8 0e 97 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00296dd:	83 c4 10             	add    esp,0x10
c00296e0:	83 c4 0c             	add    esp,0xc
c00296e3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00296e4 <ATA::~ATA()>:
c00296e4:	83 ec 0c             	sub    esp,0xc
c00296e7:	ba 14 d8 02 c0       	mov    edx,0xc002d814
c00296ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f0:	89 10                	mov    DWORD PTR [eax],edx
c00296f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f6:	83 ec 0c             	sub    esp,0xc
c00296f9:	50                   	push   eax
c00296fa:	e8 c3 b0 fe ff       	call   c00147c2 <PhysicalDisk::~PhysicalDisk()>
c00296ff:	83 c4 10             	add    esp,0x10
c0029702:	90                   	nop
c0029703:	83 c4 0c             	add    esp,0xc
c0029706:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029708 <ATA::~ATA()>:
c0029708:	83 ec 0c             	sub    esp,0xc
c002970b:	83 ec 0c             	sub    esp,0xc
c002970e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029712:	e8 cd ff ff ff       	call   c00296e4 <ATA::~ATA()>
c0029717:	83 c4 10             	add    esp,0x10
c002971a:	83 ec 08             	sub    esp,0x8
c002971d:	68 7c 01 00 00       	push   0x17c
c0029722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029726:	e8 c0 96 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c002972b:	83 c4 10             	add    esp,0x10
c002972e:	83 c4 0c             	add    esp,0xc
c0029731:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029732 <ATAPI::~ATAPI()>:
c0029732:	83 ec 0c             	sub    esp,0xc
c0029735:	ba 4c d8 02 c0       	mov    edx,0xc002d84c
c002973a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002973e:	89 10                	mov    DWORD PTR [eax],edx
c0029740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029744:	83 ec 0c             	sub    esp,0xc
c0029747:	50                   	push   eax
c0029748:	e8 75 b0 fe ff       	call   c00147c2 <PhysicalDisk::~PhysicalDisk()>
c002974d:	83 c4 10             	add    esp,0x10
c0029750:	90                   	nop
c0029751:	83 c4 0c             	add    esp,0xc
c0029754:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029756 <ATAPI::~ATAPI()>:
c0029756:	83 ec 0c             	sub    esp,0xc
c0029759:	83 ec 0c             	sub    esp,0xc
c002975c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029760:	e8 cd ff ff ff       	call   c0029732 <ATAPI::~ATAPI()>
c0029765:	83 c4 10             	add    esp,0x10
c0029768:	83 ec 08             	sub    esp,0x8
c002976b:	68 80 01 00 00       	push   0x180
c0029770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029774:	e8 72 96 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0029779:	83 c4 10             	add    esp,0x10
c002977c:	83 c4 0c             	add    esp,0xc
c002977f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029780 <SATA::~SATA()>:
c0029780:	83 ec 0c             	sub    esp,0xc
c0029783:	ba 00 d9 02 c0       	mov    edx,0xc002d900
c0029788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978c:	89 10                	mov    DWORD PTR [eax],edx
c002978e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029792:	83 ec 0c             	sub    esp,0xc
c0029795:	50                   	push   eax
c0029796:	e8 27 b0 fe ff       	call   c00147c2 <PhysicalDisk::~PhysicalDisk()>
c002979b:	83 c4 10             	add    esp,0x10
c002979e:	90                   	nop
c002979f:	83 c4 0c             	add    esp,0xc
c00297a2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00297a4 <SATA::~SATA()>:
c00297a4:	83 ec 0c             	sub    esp,0xc
c00297a7:	83 ec 0c             	sub    esp,0xc
c00297aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297ae:	e8 cd ff ff ff       	call   c0029780 <SATA::~SATA()>
c00297b3:	83 c4 10             	add    esp,0x10
c00297b6:	83 ec 08             	sub    esp,0x8
c00297b9:	68 7c 01 00 00       	push   0x17c
c00297be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297c2:	e8 24 96 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00297c7:	83 c4 10             	add    esp,0x10
c00297ca:	83 c4 0c             	add    esp,0xc
c00297cd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00297ce <SATAPI::~SATAPI()>:
c00297ce:	83 ec 0c             	sub    esp,0xc
c00297d1:	ba dc d9 02 c0       	mov    edx,0xc002d9dc
c00297d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297da:	89 10                	mov    DWORD PTR [eax],edx
c00297dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e0:	83 ec 0c             	sub    esp,0xc
c00297e3:	50                   	push   eax
c00297e4:	e8 d9 af fe ff       	call   c00147c2 <PhysicalDisk::~PhysicalDisk()>
c00297e9:	83 c4 10             	add    esp,0x10
c00297ec:	90                   	nop
c00297ed:	83 c4 0c             	add    esp,0xc
c00297f0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00297f2 <SATAPI::~SATAPI()>:
c00297f2:	83 ec 0c             	sub    esp,0xc
c00297f5:	83 ec 0c             	sub    esp,0xc
c00297f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297fc:	e8 cd ff ff ff       	call   c00297ce <SATAPI::~SATAPI()>
c0029801:	83 c4 10             	add    esp,0x10
c0029804:	83 ec 08             	sub    esp,0x8
c0029807:	68 80 01 00 00       	push   0x180
c002980c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029810:	e8 d6 95 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0029815:	83 c4 10             	add    esp,0x10
c0029818:	83 c4 0c             	add    esp,0xc
c002981b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002981c <AVX::~AVX()>:
c002981c:	83 ec 0c             	sub    esp,0xc
c002981f:	ba 1c da 02 c0       	mov    edx,0xc002da1c
c0029824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029828:	89 10                	mov    DWORD PTR [eax],edx
c002982a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982e:	83 ec 0c             	sub    esp,0xc
c0029831:	50                   	push   eax
c0029832:	e8 0f b0 fe ff       	call   c0014846 <FPU::~FPU()>
c0029837:	83 c4 10             	add    esp,0x10
c002983a:	90                   	nop
c002983b:	83 c4 0c             	add    esp,0xc
c002983e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029840 <AVX::~AVX()>:
c0029840:	83 ec 0c             	sub    esp,0xc
c0029843:	83 ec 0c             	sub    esp,0xc
c0029846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002984a:	e8 cd ff ff ff       	call   c002981c <AVX::~AVX()>
c002984f:	83 c4 10             	add    esp,0x10
c0029852:	83 ec 08             	sub    esp,0x8
c0029855:	68 58 01 00 00       	push   0x158
c002985a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002985e:	e8 88 95 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0029863:	83 c4 10             	add    esp,0x10
c0029866:	83 c4 0c             	add    esp,0xc
c0029869:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002986a <MMX::~MMX()>:
c002986a:	83 ec 0c             	sub    esp,0xc
c002986d:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0029872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029876:	89 10                	mov    DWORD PTR [eax],edx
c0029878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987c:	83 ec 0c             	sub    esp,0xc
c002987f:	50                   	push   eax
c0029880:	e8 c1 af fe ff       	call   c0014846 <FPU::~FPU()>
c0029885:	83 c4 10             	add    esp,0x10
c0029888:	90                   	nop
c0029889:	83 c4 0c             	add    esp,0xc
c002988c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002988e <MMX::~MMX()>:
c002988e:	83 ec 0c             	sub    esp,0xc
c0029891:	83 ec 0c             	sub    esp,0xc
c0029894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029898:	e8 cd ff ff ff       	call   c002986a <MMX::~MMX()>
c002989d:	83 c4 10             	add    esp,0x10
c00298a0:	83 ec 08             	sub    esp,0x8
c00298a3:	68 58 01 00 00       	push   0x158
c00298a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ac:	e8 3a 95 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00298b1:	83 c4 10             	add    esp,0x10
c00298b4:	83 c4 0c             	add    esp,0xc
c00298b7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00298b8 <SSE::~SSE()>:
c00298b8:	83 ec 0c             	sub    esp,0xc
c00298bb:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c00298c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c4:	89 10                	mov    DWORD PTR [eax],edx
c00298c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ca:	83 ec 0c             	sub    esp,0xc
c00298cd:	50                   	push   eax
c00298ce:	e8 73 af fe ff       	call   c0014846 <FPU::~FPU()>
c00298d3:	83 c4 10             	add    esp,0x10
c00298d6:	90                   	nop
c00298d7:	83 c4 0c             	add    esp,0xc
c00298da:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00298dc <SSE::~SSE()>:
c00298dc:	83 ec 0c             	sub    esp,0xc
c00298df:	83 ec 0c             	sub    esp,0xc
c00298e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298e6:	e8 cd ff ff ff       	call   c00298b8 <SSE::~SSE()>
c00298eb:	83 c4 10             	add    esp,0x10
c00298ee:	83 ec 08             	sub    esp,0x8
c00298f1:	68 58 01 00 00       	push   0x158
c00298f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298fa:	e8 ec 94 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00298ff:	83 c4 10             	add    esp,0x10
c0029902:	83 c4 0c             	add    esp,0xc
c0029905:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029906 <x87::~x87()>:
c0029906:	83 ec 0c             	sub    esp,0xc
c0029909:	ba dc da 02 c0       	mov    edx,0xc002dadc
c002990e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029912:	89 10                	mov    DWORD PTR [eax],edx
c0029914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029918:	83 ec 0c             	sub    esp,0xc
c002991b:	50                   	push   eax
c002991c:	e8 25 af fe ff       	call   c0014846 <FPU::~FPU()>
c0029921:	83 c4 10             	add    esp,0x10
c0029924:	90                   	nop
c0029925:	83 c4 0c             	add    esp,0xc
c0029928:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002992a <x87::~x87()>:
c002992a:	83 ec 0c             	sub    esp,0xc
c002992d:	83 ec 0c             	sub    esp,0xc
c0029930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029934:	e8 cd ff ff ff       	call   c0029906 <x87::~x87()>
c0029939:	83 c4 10             	add    esp,0x10
c002993c:	83 ec 08             	sub    esp,0x8
c002993f:	68 58 01 00 00       	push   0x158
c0029944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029948:	e8 9e 94 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c002994d:	83 c4 10             	add    esp,0x10
c0029950:	83 c4 0c             	add    esp,0xc
c0029953:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029954 <IOAPIC::~IOAPIC()>:
c0029954:	83 ec 0c             	sub    esp,0xc
c0029957:	ba 34 dc 02 c0       	mov    edx,0xc002dc34
c002995c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029960:	89 10                	mov    DWORD PTR [eax],edx
c0029962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029966:	83 ec 0c             	sub    esp,0xc
c0029969:	50                   	push   eax
c002996a:	e8 63 a8 fe ff       	call   c00141d2 <Device::~Device()>
c002996f:	83 c4 10             	add    esp,0x10
c0029972:	90                   	nop
c0029973:	83 c4 0c             	add    esp,0xc
c0029976:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029978 <IOAPIC::~IOAPIC()>:
c0029978:	83 ec 0c             	sub    esp,0xc
c002997b:	83 ec 0c             	sub    esp,0xc
c002997e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029982:	e8 cd ff ff ff       	call   c0029954 <IOAPIC::~IOAPIC()>
c0029987:	83 c4 10             	add    esp,0x10
c002998a:	83 ec 08             	sub    esp,0x8
c002998d:	68 68 01 00 00       	push   0x168
c0029992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029996:	e8 50 94 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c002999b:	83 c4 10             	add    esp,0x10
c002999e:	83 c4 0c             	add    esp,0xc
c00299a1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00299a2 <APIC::~APIC()>:
c00299a2:	83 ec 0c             	sub    esp,0xc
c00299a5:	ba ec db 02 c0       	mov    edx,0xc002dbec
c00299aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ae:	89 10                	mov    DWORD PTR [eax],edx
c00299b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b4:	83 ec 0c             	sub    esp,0xc
c00299b7:	50                   	push   eax
c00299b8:	e8 53 b3 fe ff       	call   c0014d10 <InterruptController::~InterruptController()>
c00299bd:	83 c4 10             	add    esp,0x10
c00299c0:	90                   	nop
c00299c1:	83 c4 0c             	add    esp,0xc
c00299c4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00299c6 <APIC::~APIC()>:
c00299c6:	83 ec 0c             	sub    esp,0xc
c00299c9:	83 ec 0c             	sub    esp,0xc
c00299cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d0:	e8 cd ff ff ff       	call   c00299a2 <APIC::~APIC()>
c00299d5:	83 c4 10             	add    esp,0x10
c00299d8:	83 ec 08             	sub    esp,0x8
c00299db:	68 58 21 00 00       	push   0x2158
c00299e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e4:	e8 02 94 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c00299e9:	83 c4 10             	add    esp,0x10
c00299ec:	83 c4 0c             	add    esp,0xc
c00299ef:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00299f0 <PIC::~PIC()>:
c00299f0:	83 ec 0c             	sub    esp,0xc
c00299f3:	ba 84 dc 02 c0       	mov    edx,0xc002dc84
c00299f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299fc:	89 10                	mov    DWORD PTR [eax],edx
c00299fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a02:	83 ec 0c             	sub    esp,0xc
c0029a05:	50                   	push   eax
c0029a06:	e8 05 b3 fe ff       	call   c0014d10 <InterruptController::~InterruptController()>
c0029a0b:	83 c4 10             	add    esp,0x10
c0029a0e:	90                   	nop
c0029a0f:	83 c4 0c             	add    esp,0xc
c0029a12:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a14 <PIC::~PIC()>:
c0029a14:	83 ec 0c             	sub    esp,0xc
c0029a17:	83 ec 0c             	sub    esp,0xc
c0029a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a1e:	e8 cd ff ff ff       	call   c00299f0 <PIC::~PIC()>
c0029a23:	83 c4 10             	add    esp,0x10
c0029a26:	83 ec 08             	sub    esp,0x8
c0029a29:	68 58 21 00 00       	push   0x2158
c0029a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a32:	e8 b4 93 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0029a37:	83 c4 10             	add    esp,0x10
c0029a3a:	83 c4 0c             	add    esp,0xc
c0029a3d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a3e <APICTimer::~APICTimer()>:
c0029a3e:	83 ec 0c             	sub    esp,0xc
c0029a41:	ba d8 dc 02 c0       	mov    edx,0xc002dcd8
c0029a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4a:	89 10                	mov    DWORD PTR [eax],edx
c0029a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a50:	83 ec 0c             	sub    esp,0xc
c0029a53:	50                   	push   eax
c0029a54:	e8 6d d3 fe ff       	call   c0016dc6 <Timer::~Timer()>
c0029a59:	83 c4 10             	add    esp,0x10
c0029a5c:	90                   	nop
c0029a5d:	83 c4 0c             	add    esp,0xc
c0029a60:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029a62 <APICTimer::~APICTimer()>:
c0029a62:	83 ec 0c             	sub    esp,0xc
c0029a65:	83 ec 0c             	sub    esp,0xc
c0029a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a6c:	e8 cd ff ff ff       	call   c0029a3e <APICTimer::~APICTimer()>
c0029a71:	83 c4 10             	add    esp,0x10
c0029a74:	83 ec 08             	sub    esp,0x8
c0029a77:	68 60 01 00 00       	push   0x160
c0029a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a80:	e8 66 93 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0029a85:	83 c4 10             	add    esp,0x10
c0029a88:	83 c4 0c             	add    esp,0xc
c0029a8b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029a8c <PIT::~PIT()>:
c0029a8c:	83 ec 0c             	sub    esp,0xc
c0029a8f:	ba 28 dd 02 c0       	mov    edx,0xc002dd28
c0029a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a98:	89 10                	mov    DWORD PTR [eax],edx
c0029a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9e:	83 ec 0c             	sub    esp,0xc
c0029aa1:	50                   	push   eax
c0029aa2:	e8 1f d3 fe ff       	call   c0016dc6 <Timer::~Timer()>
c0029aa7:	83 c4 10             	add    esp,0x10
c0029aaa:	90                   	nop
c0029aab:	83 c4 0c             	add    esp,0xc
c0029aae:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ab0 <PIT::~PIT()>:
c0029ab0:	83 ec 0c             	sub    esp,0xc
c0029ab3:	83 ec 0c             	sub    esp,0xc
c0029ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aba:	e8 cd ff ff ff       	call   c0029a8c <PIT::~PIT()>
c0029abf:	83 c4 10             	add    esp,0x10
c0029ac2:	83 ec 08             	sub    esp,0x8
c0029ac5:	68 5c 01 00 00       	push   0x15c
c0029aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ace:	e8 18 93 fe ff       	call   c0012deb <operator delete(void*, unsigned long)>
c0029ad3:	83 c4 10             	add    esp,0x10
c0029ad6:	83 c4 0c             	add    esp,0xc
c0029ad9:	c3                   	ret    
