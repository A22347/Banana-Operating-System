
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 35 f4 00 00       	call   c000f455 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 4f 02 00       	call   c0024ff8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 90 5b 02 c0       	mov    ebx,0xc0025b90
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 9c 5b 02 c0    	cmp    ebx,0xc0025b9c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000049:	3d ac 99 02 c0       	cmp    eax,0xc00299ac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 99 02 c0       	push   0xc00299ac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000075:	2d ac 99 02 c0       	sub    eax,0xc00299ac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 99 02 c0       	push   0xc00299ac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d dc 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029fdc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a4 5b 02 c0       	mov    ebx,0xc0025ba4
c00000bb:	81 eb a0 5b 02 c0    	sub    ebx,0xc0025ba0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a0 5b 02 c0       	mov    esi,0xc0025ba0
c00000ca:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e0 9f 02 c0       	mov    ds:0xc0029fe0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 99 02 c0       	push   0xc00299ac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 dc 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029fdc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e4 9f 02 c0       	push   0xc0029fe4
c000012c:	68 ac 99 02 c0       	push   0xc00299ac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <goToVM86>:
c0000299:	fa                   	cli    
c000029a:	55                   	push   ebp
c000029b:	89 e5                	mov    ebp,esp
c000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002a0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002a3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a9:	25 ff ff 00 00       	and    eax,0xffff
c00002ae:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002c0:	52                   	push   edx
c00002c1:	51                   	push   ecx
c00002c2:	68 02 02 02 00       	push   0x20202
c00002c7:	53                   	push   ebx
c00002c8:	50                   	push   eax
c00002c9:	cf                   	iret   

c00002ca <goToUsermode>:
c00002ca:	fa                   	cli    
c00002cb:	55                   	push   ebp
c00002cc:	89 e5                	mov    ebp,esp
c00002ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002d1:	66 b8 23 00          	mov    ax,0x23
c00002d5:	66 8e d8             	mov    ds,ax
c00002d8:	66 8e c0             	mov    es,ax
c00002db:	66 8e e0             	mov    fs,ax
c00002de:	66 8e e8             	mov    gs,ax
c00002e1:	89 e0                	mov    eax,esp
c00002e3:	68 23 00 00 00       	push   0x23
c00002e8:	50                   	push   eax
c00002e9:	68 02 02 00 00       	push   0x202
c00002ee:	68 1b 00 00 00       	push   0x1b
c00002f3:	53                   	push   ebx
c00002f4:	cf                   	iret   

c00002f5 <switchToThreadASMFirstTime>:
c00002f5:	9c                   	pushf  
c00002f6:	fa                   	cli    
c00002f7:	50                   	push   eax
c00002f8:	53                   	push   ebx
c00002f9:	51                   	push   ecx
c00002fa:	52                   	push   edx
c00002fb:	56                   	push   esi
c00002fc:	57                   	push   edi
c00002fd:	55                   	push   ebp
c00002fe:	e9 11 00 00 00       	jmp    c0000314 <commonThreadSwitch>

c0000303 <switchToThreadASM>:
c0000303:	9c                   	pushf  
c0000304:	50                   	push   eax
c0000305:	53                   	push   ebx
c0000306:	51                   	push   ecx
c0000307:	52                   	push   edx
c0000308:	56                   	push   esi
c0000309:	57                   	push   edi
c000030a:	55                   	push   ebp
c000030b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000311:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000314 <commonThreadSwitch>:
c0000314:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000318:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000031e:	8b 06                	mov    eax,DWORD PTR [esi]
c0000320:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000323:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000326:	0f 20 d9             	mov    ecx,cr3
c0000329:	39 c8                	cmp    eax,ecx
c000032b:	74 03                	je     c0000330 <commonThreadSwitch.doneVAS>
c000032d:	0f 22 d8             	mov    cr3,eax

c0000330 <commonThreadSwitch.doneVAS>:
c0000330:	85 d2                	test   edx,edx
c0000332:	74 4e                	je     c0000382 <commonThreadSwitch.notFirstTime>
c0000334:	fa                   	cli    
c0000335:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000338:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000033d:	60                   	pusha  
c000033e:	e8 e9 1c 01 00       	call   c001202c <mapVASFirstTime>
c0000343:	61                   	popa   
c0000344:	89 c4                	mov    esp,eax
c0000346:	56                   	push   esi
c0000347:	52                   	push   edx
c0000348:	e8 19 b2 01 00       	call   c001b566 <changeTSS>
c000034d:	5a                   	pop    edx
c000034e:	5e                   	pop    esi
c000034f:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000356:	81 fa 01 00 00 00    	cmp    edx,0x1
c000035c:	74 39                	je     c0000397 <commonThreadSwitch.cameOffAFork>
c000035e:	5d                   	pop    ebp
c000035f:	5f                   	pop    edi
c0000360:	5e                   	pop    esi
c0000361:	59                   	pop    ecx
c0000362:	59                   	pop    ecx
c0000363:	5b                   	pop    ebx
c0000364:	58                   	pop    eax
c0000365:	81 c4 04 00 00 00    	add    esp,0x4
c000036b:	6a 02                	push   0x2
c000036d:	9d                   	popf   
c000036e:	52                   	push   edx
c000036f:	e8 05 b6 01 00       	call   c001b979 <taskStartupFunction>
c0000374:	5a                   	pop    edx
c0000375:	50                   	push   eax
c0000376:	ff d2                	call   edx
c0000378:	e8 ab bb 01 00       	call   c001bf28 <taskReturned>
c000037d:	e9 fb ff ff ff       	jmp    c000037d <commonThreadSwitch.doneVAS+0x4d>

c0000382 <commonThreadSwitch.notFirstTime>:
c0000382:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000385:	56                   	push   esi
c0000386:	52                   	push   edx
c0000387:	e8 da b1 01 00       	call   c001b566 <changeTSS>
c000038c:	5a                   	pop    edx
c000038d:	5e                   	pop    esi
c000038e:	5d                   	pop    ebp
c000038f:	5f                   	pop    edi
c0000390:	5e                   	pop    esi
c0000391:	5a                   	pop    edx
c0000392:	59                   	pop    ecx
c0000393:	5b                   	pop    ebx
c0000394:	58                   	pop    eax
c0000395:	9d                   	popf   
c0000396:	c3                   	ret    

c0000397 <commonThreadSwitch.cameOffAFork>:
c0000397:	31 c0                	xor    eax,eax
c0000399:	31 d2                	xor    edx,edx
c000039b:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000039e:	e9 a2 02 00 00       	jmp    c0000645 <offAForkJumpThingy>

c00003a3 <detectCPUID>:
c00003a3:	9c                   	pushf  
c00003a4:	9c                   	pushf  
c00003a5:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003ac:	9d                   	popf   
c00003ad:	9c                   	pushf  
c00003ae:	58                   	pop    eax
c00003af:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003b2:	9d                   	popf   
c00003b3:	25 00 00 20 00       	and    eax,0x200000
c00003b8:	c3                   	ret    

c00003b9 <asmQuickAcquireLock>:
c00003b9:	55                   	push   ebp
c00003ba:	89 e5                	mov    ebp,esp
c00003bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003bf <asmQuickAcquireLock.retry>:
c00003bf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c4:	72 02                	jb     c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003c6:	fa                   	cli    
c00003c7:	c3                   	ret    

c00003c8 <asmQuickAcquireLock.spin_with_pause>:
c00003c8:	f3 90                	pause  
c00003ca:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d0:	75 f6                	jne    c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003d2:	e9 e8 ff ff ff       	jmp    c00003bf <asmQuickAcquireLock.retry>

c00003d7 <asmQuickReleaseLock>:
c00003d7:	55                   	push   ebp
c00003d8:	89 e5                	mov    ebp,esp
c00003da:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003e1:	5d                   	pop    ebp
c00003e2:	c3                   	ret    

c00003e3 <asmAcquireLock>:
c00003e3:	55                   	push   ebp
c00003e4:	89 e5                	mov    ebp,esp
c00003e6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e9 <asmAcquireLock.retry>:
c00003e9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ee:	72 05                	jb     c00003f5 <asmAcquireLock.spin_with_pause>
c00003f0:	9c                   	pushf  
c00003f1:	58                   	pop    eax
c00003f2:	fa                   	cli    
c00003f3:	5d                   	pop    ebp
c00003f4:	c3                   	ret    

c00003f5 <asmAcquireLock.spin_with_pause>:
c00003f5:	f3 90                	pause  
c00003f7:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003fd:	75 f6                	jne    c00003f5 <asmAcquireLock.spin_with_pause>
c00003ff:	e9 e5 ff ff ff       	jmp    c00003e9 <asmAcquireLock.retry>

c0000404 <asmReleaseLock>:
c0000404:	55                   	push   ebp
c0000405:	89 e5                	mov    ebp,esp
c0000407:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000040a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000040d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000413:	52                   	push   edx
c0000414:	9d                   	popf   
c0000415:	5d                   	pop    ebp
c0000416:	c3                   	ret    

c0000417 <loadGDT>:
c0000417:	0f 01 15 10 a4 02 c0 	lgdtd  ds:0xc002a410
c000041e:	66 b8 10 00          	mov    ax,0x10
c0000422:	66 8e d8             	mov    ds,ax
c0000425:	66 8e c0             	mov    es,ax
c0000428:	66 8e e0             	mov    fs,ax
c000042b:	66 8e e8             	mov    gs,ax
c000042e:	66 8e d0             	mov    ss,ax
c0000431:	e9 00 00 00 00       	jmp    c0000436 <flush2>

c0000436 <flush2>:
c0000436:	c3                   	ret    

c0000437 <isr0>:
c0000437:	fa                   	cli    
c0000438:	68 00 00 00 00       	push   0x0
c000043d:	68 00 00 00 00       	push   0x0
c0000442:	e9 a2 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000447 <isr1>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 01                	push   0x1
c000044c:	e9 98 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000451 <isr2>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 02                	push   0x2
c0000456:	e9 8e 01 00 00       	jmp    c00005e9 <int_common_stub>

c000045b <isr3>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 03                	push   0x3
c0000460:	e9 84 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000465 <isr4>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 04                	push   0x4
c000046a:	e9 7a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000046f <isr5>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 05                	push   0x5
c0000474:	e9 70 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000479 <isr6>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 06                	push   0x6
c000047e:	e9 66 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000483 <isr7>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 07                	push   0x7
c0000488:	e9 5c 01 00 00       	jmp    c00005e9 <int_common_stub>

c000048d <isr8>:
c000048d:	fa                   	cli    
c000048e:	6a 08                	push   0x8
c0000490:	e9 54 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000495 <isr9>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 09                	push   0x9
c000049a:	e9 4a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000049f <isr10>:
c000049f:	fa                   	cli    
c00004a0:	6a 0a                	push   0xa
c00004a2:	e9 42 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004a7 <isr11>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0b                	push   0xb
c00004aa:	e9 3a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004af <isr12>:
c00004af:	fa                   	cli    
c00004b0:	6a 0c                	push   0xc
c00004b2:	e9 32 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004b7 <isr13>:
c00004b7:	fa                   	cli    
c00004b8:	6a 0d                	push   0xd
c00004ba:	e9 2a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004bf <isr14>:
c00004bf:	fa                   	cli    
c00004c0:	6a 0e                	push   0xe
c00004c2:	e9 22 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004c7 <isr15>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 0f                	push   0xf
c00004cc:	e9 18 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004d1 <isr16>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 10                	push   0x10
c00004d6:	e9 0e 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004db <isr17>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 11                	push   0x11
c00004e0:	e9 04 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004e5 <isr18>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 12                	push   0x12
c00004ea:	e9 fa 00 00 00       	jmp    c00005e9 <int_common_stub>

c00004ef <isr96>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 60                	push   0x60
c00004f4:	e9 20 01 00 00       	jmp    c0000619 <syscall_common_stub>

c00004f9 <irq0>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 20                	push   0x20
c00004fe:	e9 e6 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000503 <irq1>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 21                	push   0x21
c0000508:	e9 dc 00 00 00       	jmp    c00005e9 <int_common_stub>

c000050d <irq2>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 22                	push   0x22
c0000512:	e9 d2 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000517 <irq3>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 23                	push   0x23
c000051c:	e9 c8 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000521 <irq4>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 24                	push   0x24
c0000526:	e9 be 00 00 00       	jmp    c00005e9 <int_common_stub>

c000052b <irq5>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 25                	push   0x25
c0000530:	e9 b4 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000535 <irq6>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 26                	push   0x26
c000053a:	e9 aa 00 00 00       	jmp    c00005e9 <int_common_stub>

c000053f <irq7>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 27                	push   0x27
c0000544:	e9 a0 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000549 <irq8>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 28                	push   0x28
c000054e:	e9 96 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000553 <irq9>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 29                	push   0x29
c0000558:	e9 8c 00 00 00       	jmp    c00005e9 <int_common_stub>

c000055d <irq10>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2a                	push   0x2a
c0000562:	e9 82 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000567 <irq11>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 2b                	push   0x2b
c000056c:	e9 78 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000571 <irq12>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 2c                	push   0x2c
c0000576:	e9 6e 00 00 00       	jmp    c00005e9 <int_common_stub>

c000057b <irq13>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 2d                	push   0x2d
c0000580:	e9 64 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000585 <irq14>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 2e                	push   0x2e
c000058a:	e9 5a 00 00 00       	jmp    c00005e9 <int_common_stub>

c000058f <irq15>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 2f                	push   0x2f
c0000594:	e9 50 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000599 <irq16>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 30                	push   0x30
c000059e:	e9 46 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005a3 <irq17>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 31                	push   0x31
c00005a8:	e9 3c 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005ad <irq18>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 32                	push   0x32
c00005b2:	e9 32 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005b7 <irq19>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 33                	push   0x33
c00005bc:	e9 28 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005c1 <irq20>:
c00005c1:	fa                   	cli    
c00005c2:	6a 00                	push   0x0
c00005c4:	6a 34                	push   0x34
c00005c6:	e9 1e 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005cb <irq21>:
c00005cb:	fa                   	cli    
c00005cc:	6a 00                	push   0x0
c00005ce:	6a 35                	push   0x35
c00005d0:	e9 14 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005d5 <irq22>:
c00005d5:	fa                   	cli    
c00005d6:	6a 00                	push   0x0
c00005d8:	6a 36                	push   0x36
c00005da:	e9 0a 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005df <irq23>:
c00005df:	fa                   	cli    
c00005e0:	6a 00                	push   0x0
c00005e2:	6a 37                	push   0x37
c00005e4:	e9 00 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005e9 <int_common_stub>:
c00005e9:	60                   	pusha  
c00005ea:	1e                   	push   ds
c00005eb:	06                   	push   es
c00005ec:	0f a0                	push   fs
c00005ee:	0f a8                	push   gs
c00005f0:	66 b8 10 00          	mov    ax,0x10
c00005f4:	66 8e d8             	mov    ds,ax
c00005f7:	66 8e c0             	mov    es,ax
c00005fa:	66 8e e0             	mov    fs,ax
c00005fd:	66 8e e8             	mov    gs,ax
c0000600:	89 e1                	mov    ecx,esp
c0000602:	51                   	push   ecx
c0000603:	b9 0f 3f 01 c0       	mov    ecx,0xc0013f0f
c0000608:	ff d1                	call   ecx
c000060a:	59                   	pop    ecx
c000060b:	0f a9                	pop    gs
c000060d:	0f a1                	pop    fs
c000060f:	07                   	pop    es
c0000610:	1f                   	pop    ds
c0000611:	61                   	popa   
c0000612:	81 c4 08 00 00 00    	add    esp,0x8
c0000618:	cf                   	iret   

c0000619 <syscall_common_stub>:
c0000619:	60                   	pusha  
c000061a:	1e                   	push   ds
c000061b:	06                   	push   es
c000061c:	0f a0                	push   fs
c000061e:	0f a8                	push   gs
c0000620:	66 b8 10 00          	mov    ax,0x10
c0000624:	66 8e d8             	mov    ds,ax
c0000627:	66 8e c0             	mov    es,ax
c000062a:	66 8e e0             	mov    fs,ax
c000062d:	66 8e e8             	mov    gs,ax
c0000630:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000636:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000639:	89 e1                	mov    ecx,esp
c000063b:	51                   	push   ecx
c000063c:	fb                   	sti    
c000063d:	b9 0f 3f 01 c0       	mov    ecx,0xc0013f0f
c0000642:	ff d1                	call   ecx
c0000644:	59                   	pop    ecx

c0000645 <offAForkJumpThingy>:
c0000645:	0f a9                	pop    gs
c0000647:	0f a1                	pop    fs
c0000649:	07                   	pop    es
c000064a:	1f                   	pop    ds
c000064b:	61                   	popa   
c000064c:	81 c4 08 00 00 00    	add    esp,0x8
c0000652:	cf                   	iret   

c0000653 <memcmp>:
c0000653:	56                   	push   esi
c0000654:	53                   	push   ebx
c0000655:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000659:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000661:	01 d6                	add    esi,edx
c0000663:	39 f2                	cmp    edx,esi
c0000665:	74 0e                	je     c0000675 <memcmp+0x22>
c0000667:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000066a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066d:	38 c8                	cmp    al,cl
c000066f:	75 08                	jne    c0000679 <memcmp+0x26>
c0000671:	42                   	inc    edx
c0000672:	43                   	inc    ebx
c0000673:	eb ee                	jmp    c0000663 <memcmp+0x10>
c0000675:	31 c0                	xor    eax,eax
c0000677:	eb 02                	jmp    c000067b <memcmp+0x28>
c0000679:	29 c8                	sub    eax,ecx
c000067b:	5b                   	pop    ebx
c000067c:	5e                   	pop    esi
c000067d:	c3                   	ret    

c000067e <memmove>:
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000684:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000068c:	39 c8                	cmp    eax,ecx
c000068e:	73 12                	jae    c00006a2 <memmove+0x24>
c0000690:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000693:	89 c3                	mov    ebx,eax
c0000695:	39 f1                	cmp    ecx,esi
c0000697:	74 1a                	je     c00006b3 <memmove+0x35>
c0000699:	8a 11                	mov    dl,BYTE PTR [ecx]
c000069b:	43                   	inc    ebx
c000069c:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000069f:	41                   	inc    ecx
c00006a0:	eb f3                	jmp    c0000695 <memmove+0x17>
c00006a2:	76 0f                	jbe    c00006b3 <memmove+0x35>
c00006a4:	85 d2                	test   edx,edx
c00006a6:	74 0b                	je     c00006b3 <memmove+0x35>
c00006a8:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00006ac:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00006b0:	4a                   	dec    edx
c00006b1:	eb f1                	jmp    c00006a4 <memmove+0x26>
c00006b3:	5b                   	pop    ebx
c00006b4:	5e                   	pop    esi
c00006b5:	c3                   	ret    

c00006b6 <memcpy>:
c00006b6:	57                   	push   edi
c00006b7:	56                   	push   esi
c00006b8:	53                   	push   ebx
c00006b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006c1:	89 da                	mov    edx,ebx
c00006c3:	89 d9                	mov    ecx,ebx
c00006c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006c9:	83 e2 fc             	and    edx,0xfffffffc
c00006cc:	c1 e9 02             	shr    ecx,0x2
c00006cf:	89 c7                	mov    edi,eax
c00006d1:	fc                   	cld    
c00006d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006d4:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006d7:	01 c2                	add    edx,eax
c00006d9:	01 de                	add    esi,ebx
c00006db:	39 f1                	cmp    ecx,esi
c00006dd:	74 09                	je     c00006e8 <memcpy+0x32>
c00006df:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006e1:	42                   	inc    edx
c00006e2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006e5:	41                   	inc    ecx
c00006e6:	eb f3                	jmp    c00006db <memcpy+0x25>
c00006e8:	5b                   	pop    ebx
c00006e9:	5e                   	pop    esi
c00006ea:	5f                   	pop    edi
c00006eb:	c3                   	ret    

c00006ec <memset>:
c00006ec:	53                   	push   ebx
c00006ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006f5:	89 c2                	mov    edx,eax
c00006f7:	01 c1                	add    ecx,eax
c00006f9:	39 ca                	cmp    edx,ecx
c00006fb:	74 0a                	je     c0000707 <memset+0x1b>
c00006fd:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000701:	42                   	inc    edx
c0000702:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000705:	eb f2                	jmp    c00006f9 <memset+0xd>
c0000707:	5b                   	pop    ebx
c0000708:	c3                   	ret    

c0000709 <strlen>:
c0000709:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000070d:	31 c0                	xor    eax,eax
c000070f:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000713:	74 03                	je     c0000718 <strlen+0xf>
c0000715:	40                   	inc    eax
c0000716:	eb f7                	jmp    c000070f <strlen+0x6>
c0000718:	c3                   	ret    

c0000719 <strpbrk>:
c0000719:	53                   	push   ebx
c000071a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000071e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000720:	84 c9                	test   cl,cl
c0000722:	74 14                	je     c0000738 <strpbrk+0x1f>
c0000724:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000728:	8a 1a                	mov    bl,BYTE PTR [edx]
c000072a:	84 db                	test   bl,bl
c000072c:	74 07                	je     c0000735 <strpbrk+0x1c>
c000072e:	38 cb                	cmp    bl,cl
c0000730:	74 08                	je     c000073a <strpbrk+0x21>
c0000732:	42                   	inc    edx
c0000733:	eb f3                	jmp    c0000728 <strpbrk+0xf>
c0000735:	40                   	inc    eax
c0000736:	eb e6                	jmp    c000071e <strpbrk+0x5>
c0000738:	31 c0                	xor    eax,eax
c000073a:	5b                   	pop    ebx
c000073b:	c3                   	ret    

c000073c <strtok>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000746:	85 db                	test   ebx,ebx
c0000748:	75 0e                	jne    c0000758 <strtok+0x1c>
c000074a:	8b 1d fc 9f 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ffc
c0000750:	85 db                	test   ebx,ebx
c0000752:	75 04                	jne    c0000758 <strtok+0x1c>
c0000754:	31 db                	xor    ebx,ebx
c0000756:	eb 2e                	jmp    c0000786 <strtok+0x4a>
c0000758:	56                   	push   esi
c0000759:	53                   	push   ebx
c000075a:	e8 ba ff ff ff       	call   c0000719 <strpbrk>
c000075f:	5a                   	pop    edx
c0000760:	a3 fc 9f 02 c0       	mov    ds:0xc0029ffc,eax
c0000765:	59                   	pop    ecx
c0000766:	a1 fc 9f 02 c0       	mov    eax,ds:0xc0029ffc
c000076b:	39 d8                	cmp    eax,ebx
c000076d:	75 07                	jne    c0000776 <strtok+0x3a>
c000076f:	43                   	inc    ebx
c0000770:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000774:	eb e2                	jmp    c0000758 <strtok+0x1c>
c0000776:	85 c0                	test   eax,eax
c0000778:	74 da                	je     c0000754 <strtok+0x18>
c000077a:	8d 50 01             	lea    edx,[eax+0x1]
c000077d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000780:	89 15 fc 9f 02 c0    	mov    DWORD PTR ds:0xc0029ffc,edx
c0000786:	89 d8                	mov    eax,ebx
c0000788:	5b                   	pop    ebx
c0000789:	5e                   	pop    esi
c000078a:	c3                   	ret    

c000078b <strcpy>:
c000078b:	53                   	push   ebx
c000078c:	31 d2                	xor    edx,edx
c000078e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000792:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000796:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000799:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000079c:	84 c9                	test   cl,cl
c000079e:	74 06                	je     c00007a6 <strcpy+0x1b>
c00007a0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00007a3:	42                   	inc    edx
c00007a4:	eb ec                	jmp    c0000792 <strcpy+0x7>
c00007a6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00007a9:	5b                   	pop    ebx
c00007aa:	c3                   	ret    

c00007ab <strncpy>:
c00007ab:	56                   	push   esi
c00007ac:	53                   	push   ebx
c00007ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00007b9:	89 c3                	mov    ebx,eax
c00007bb:	85 c9                	test   ecx,ecx
c00007bd:	74 1a                	je     c00007d9 <strncpy+0x2e>
c00007bf:	46                   	inc    esi
c00007c0:	43                   	inc    ebx
c00007c1:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007c4:	49                   	dec    ecx
c00007c5:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007c8:	84 d2                	test   dl,dl
c00007ca:	75 ef                	jne    c00007bb <strncpy+0x10>
c00007cc:	31 d2                	xor    edx,edx
c00007ce:	39 d1                	cmp    ecx,edx
c00007d0:	74 07                	je     c00007d9 <strncpy+0x2e>
c00007d2:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007d6:	42                   	inc    edx
c00007d7:	eb f5                	jmp    c00007ce <strncpy+0x23>
c00007d9:	5b                   	pop    ebx
c00007da:	5e                   	pop    esi
c00007db:	c3                   	ret    

c00007dc <strcmp>:
c00007dc:	31 c9                	xor    ecx,ecx
c00007de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007e6:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007ea:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007ee:	38 d0                	cmp    al,dl
c00007f0:	75 08                	jne    c00007fa <strcmp+0x1e>
c00007f2:	41                   	inc    ecx
c00007f3:	84 c0                	test   al,al
c00007f5:	75 e7                	jne    c00007de <strcmp+0x2>
c00007f7:	31 c0                	xor    eax,eax
c00007f9:	c3                   	ret    
c00007fa:	29 d0                	sub    eax,edx
c00007fc:	c3                   	ret    

c00007fd <strchr>:
c00007fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000801:	8a 10                	mov    dl,BYTE PTR [eax]
c0000803:	84 d2                	test   dl,dl
c0000805:	74 09                	je     c0000810 <strchr+0x13>
c0000807:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000080b:	74 05                	je     c0000812 <strchr+0x15>
c000080d:	40                   	inc    eax
c000080e:	eb f1                	jmp    c0000801 <strchr+0x4>
c0000810:	31 c0                	xor    eax,eax
c0000812:	c3                   	ret    

c0000813 <strncmp>:
c0000813:	56                   	push   esi
c0000814:	53                   	push   ebx
c0000815:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000819:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000081d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000821:	01 d6                	add    esi,edx
c0000823:	39 f2                	cmp    edx,esi
c0000825:	74 12                	je     c0000839 <strncmp+0x26>
c0000827:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000082a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000082d:	38 c8                	cmp    al,cl
c000082f:	75 0c                	jne    c000083d <strncmp+0x2a>
c0000831:	42                   	inc    edx
c0000832:	84 c0                	test   al,al
c0000834:	74 03                	je     c0000839 <strncmp+0x26>
c0000836:	43                   	inc    ebx
c0000837:	eb ea                	jmp    c0000823 <strncmp+0x10>
c0000839:	31 c0                	xor    eax,eax
c000083b:	eb 02                	jmp    c000083f <strncmp+0x2c>
c000083d:	29 c8                	sub    eax,ecx
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strcat>:
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000847:	89 c1                	mov    ecx,eax
c0000849:	8d 51 01             	lea    edx,[ecx+0x1]
c000084c:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000850:	74 04                	je     c0000856 <strcat+0x14>
c0000852:	89 d1                	mov    ecx,edx
c0000854:	eb f3                	jmp    c0000849 <strcat+0x7>
c0000856:	31 d2                	xor    edx,edx
c0000858:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000085c:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000085f:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000862:	42                   	inc    edx
c0000863:	84 db                	test   bl,bl
c0000865:	75 f1                	jne    c0000858 <strcat+0x16>
c0000867:	5b                   	pop    ebx
c0000868:	c3                   	ret    

c0000869 <strncat>:
c0000869:	56                   	push   esi
c000086a:	53                   	push   ebx
c000086b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000086f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000873:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000877:	89 c2                	mov    edx,eax
c0000879:	85 db                	test   ebx,ebx
c000087b:	74 23                	je     c00008a0 <strncat+0x37>
c000087d:	8d 72 01             	lea    esi,[edx+0x1]
c0000880:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000884:	74 04                	je     c000088a <strncat+0x21>
c0000886:	89 f2                	mov    edx,esi
c0000888:	eb f3                	jmp    c000087d <strncat+0x14>
c000088a:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000088d:	41                   	inc    ecx
c000088e:	42                   	inc    edx
c000088f:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000892:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000895:	84 db                	test   bl,bl
c0000897:	74 07                	je     c00008a0 <strncat+0x37>
c0000899:	39 f1                	cmp    ecx,esi
c000089b:	75 f0                	jne    c000088d <strncat+0x24>
c000089d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008a0:	5b                   	pop    ebx
c00008a1:	5e                   	pop    esi
c00008a2:	c3                   	ret    

c00008a3 <strstr>:
c00008a3:	57                   	push   edi
c00008a4:	56                   	push   esi
c00008a5:	53                   	push   ebx
c00008a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ae:	57                   	push   edi
c00008af:	e8 55 fe ff ff       	call   c0000709 <strlen>
c00008b4:	59                   	pop    ecx
c00008b5:	89 c6                	mov    esi,eax
c00008b7:	85 c0                	test   eax,eax
c00008b9:	74 1f                	je     c00008da <strstr+0x37>
c00008bb:	53                   	push   ebx
c00008bc:	e8 48 fe ff ff       	call   c0000709 <strlen>
c00008c1:	5a                   	pop    edx
c00008c2:	39 f0                	cmp    eax,esi
c00008c4:	72 12                	jb     c00008d8 <strstr+0x35>
c00008c6:	56                   	push   esi
c00008c7:	57                   	push   edi
c00008c8:	53                   	push   ebx
c00008c9:	e8 85 fd ff ff       	call   c0000653 <memcmp>
c00008ce:	83 c4 0c             	add    esp,0xc
c00008d1:	85 c0                	test   eax,eax
c00008d3:	74 05                	je     c00008da <strstr+0x37>
c00008d5:	43                   	inc    ebx
c00008d6:	eb e3                	jmp    c00008bb <strstr+0x18>
c00008d8:	31 db                	xor    ebx,ebx
c00008da:	89 d8                	mov    eax,ebx
c00008dc:	5b                   	pop    ebx
c00008dd:	5e                   	pop    esi
c00008de:	5f                   	pop    edi
c00008df:	c3                   	ret    

c00008e0 <toupper>:
c00008e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008e4:	0f b6 d0             	movzx  edx,al
c00008e7:	f6 82 c0 5b 02 c0 02 	test   BYTE PTR [edx-0x3ffda440],0x2
c00008ee:	74 03                	je     c00008f3 <toupper+0x13>
c00008f0:	83 e8 20             	sub    eax,0x20
c00008f3:	c3                   	ret    

c00008f4 <tolower>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	0f b6 d0             	movzx  edx,al
c00008fb:	f6 82 c0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda440],0x1
c0000902:	74 03                	je     c0000907 <tolower+0x13>
c0000904:	83 c0 20             	add    eax,0x20
c0000907:	c3                   	ret    

c0000908 <simple_strtoul>:
c0000908:	55                   	push   ebp
c0000909:	57                   	push   edi
c000090a:	56                   	push   esi
c000090b:	53                   	push   ebx
c000090c:	83 ec 08             	sub    esp,0x8
c000090f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000913:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000917:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000091a:	f6 82 c0 5b 02 c0 08 	test   BYTE PTR [edx-0x3ffda440],0x8
c0000921:	74 03                	je     c0000926 <simple_strtoul+0x1e>
c0000923:	41                   	inc    ecx
c0000924:	eb f1                	jmp    c0000917 <simple_strtoul+0xf>
c0000926:	80 fa 09             	cmp    dl,0x9
c0000929:	74 f8                	je     c0000923 <simple_strtoul+0x1b>
c000092b:	80 fa 2d             	cmp    dl,0x2d
c000092e:	75 0b                	jne    c000093b <simple_strtoul+0x33>
c0000930:	41                   	inc    ecx
c0000931:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000939:	eb 0e                	jmp    c0000949 <simple_strtoul+0x41>
c000093b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000943:	80 fa 2b             	cmp    dl,0x2b
c0000946:	75 01                	jne    c0000949 <simple_strtoul+0x41>
c0000948:	41                   	inc    ecx
c0000949:	85 f6                	test   esi,esi
c000094b:	75 22                	jne    c000096f <simple_strtoul+0x67>
c000094d:	be 0a 00 00 00       	mov    esi,0xa
c0000952:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000955:	75 5a                	jne    c00009b1 <simple_strtoul+0xa9>
c0000957:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000095b:	50                   	push   eax
c000095c:	e8 93 ff ff ff       	call   c00008f4 <tolower>
c0000961:	5a                   	pop    edx
c0000962:	83 f8 78             	cmp    eax,0x78
c0000965:	74 03                	je     c000096a <simple_strtoul+0x62>
c0000967:	41                   	inc    ecx
c0000968:	eb 16                	jmp    c0000980 <simple_strtoul+0x78>
c000096a:	83 c1 02             	add    ecx,0x2
c000096d:	eb 22                	jmp    c0000991 <simple_strtoul+0x89>
c000096f:	8d 46 fe             	lea    eax,[esi-0x2]
c0000972:	83 f8 22             	cmp    eax,0x22
c0000975:	0f 87 b7 00 00 00    	ja     c0000a32 <simple_strtoul+0x12a>
c000097b:	83 fe 08             	cmp    esi,0x8
c000097e:	75 0c                	jne    c000098c <simple_strtoul+0x84>
c0000980:	be 08 00 00 00       	mov    esi,0x8
c0000985:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000988:	75 27                	jne    c00009b1 <simple_strtoul+0xa9>
c000098a:	eb 1f                	jmp    c00009ab <simple_strtoul+0xa3>
c000098c:	83 fe 10             	cmp    esi,0x10
c000098f:	75 20                	jne    c00009b1 <simple_strtoul+0xa9>
c0000991:	be 10 00 00 00       	mov    esi,0x10
c0000996:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000999:	75 16                	jne    c00009b1 <simple_strtoul+0xa9>
c000099b:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000099f:	50                   	push   eax
c00009a0:	e8 4f ff ff ff       	call   c00008f4 <tolower>
c00009a5:	5d                   	pop    ebp
c00009a6:	83 f8 78             	cmp    eax,0x78
c00009a9:	74 03                	je     c00009ae <simple_strtoul+0xa6>
c00009ab:	41                   	inc    ecx
c00009ac:	eb 03                	jmp    c00009b1 <simple_strtoul+0xa9>
c00009ae:	83 c1 02             	add    ecx,0x2
c00009b1:	31 ed                	xor    ebp,ebp
c00009b3:	31 db                	xor    ebx,ebx
c00009b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009be:	84 d2                	test   dl,dl
c00009c0:	74 27                	je     c00009e9 <simple_strtoul+0xe1>
c00009c2:	0f b6 fa             	movzx  edi,dl
c00009c5:	f6 87 c0 5b 02 c0 04 	test   BYTE PTR [edi-0x3ffda440],0x4
c00009cc:	74 05                	je     c00009d3 <simple_strtoul+0xcb>
c00009ce:	83 ef 30             	sub    edi,0x30
c00009d1:	eb 22                	jmp    c00009f5 <simple_strtoul+0xed>
c00009d3:	0f be d2             	movsx  edx,dl
c00009d6:	52                   	push   edx
c00009d7:	e8 04 ff ff ff       	call   c00008e0 <toupper>
c00009dc:	5f                   	pop    edi
c00009dd:	0f b6 d0             	movzx  edx,al
c00009e0:	f6 82 c0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda440],0x1
c00009e7:	75 09                	jne    c00009f2 <simple_strtoul+0xea>
c00009e9:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ee:	75 2d                	jne    c0000a1d <simple_strtoul+0x115>
c00009f0:	eb 57                	jmp    c0000a49 <simple_strtoul+0x141>
c00009f2:	8d 78 c9             	lea    edi,[eax-0x37]
c00009f5:	39 f7                	cmp    edi,esi
c00009f7:	73 f0                	jae    c00009e9 <simple_strtoul+0xe1>
c00009f9:	31 d2                	xor    edx,edx
c00009fb:	89 f8                	mov    eax,edi
c00009fd:	f7 d0                	not    eax
c00009ff:	f7 f6                	div    esi
c0000a01:	39 d8                	cmp    eax,ebx
c0000a03:	72 0e                	jb     c0000a13 <simple_strtoul+0x10b>
c0000a05:	0f af de             	imul   ebx,esi
c0000a08:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a0f:	01 fb                	add    ebx,edi
c0000a11:	eb 07                	jmp    c0000a1a <simple_strtoul+0x112>
c0000a13:	bd 01 00 00 00       	mov    ebp,0x1
c0000a18:	31 db                	xor    ebx,ebx
c0000a1a:	41                   	inc    ecx
c0000a1b:	eb 9f                	jmp    c00009bc <simple_strtoul+0xb4>
c0000a1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a20:	09 d8                	or     eax,ebx
c0000a22:	75 1f                	jne    c0000a43 <simple_strtoul+0x13b>
c0000a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a28:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a2c:	31 db                	xor    ebx,ebx
c0000a2e:	89 38                	mov    DWORD PTR [eax],edi
c0000a30:	eb 17                	jmp    c0000a49 <simple_strtoul+0x141>
c0000a32:	31 db                	xor    ebx,ebx
c0000a34:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a39:	74 14                	je     c0000a4f <simple_strtoul+0x147>
c0000a3b:	31 ed                	xor    ebp,ebp
c0000a3d:	85 c9                	test   ecx,ecx
c0000a3f:	75 e3                	jne    c0000a24 <simple_strtoul+0x11c>
c0000a41:	31 db                	xor    ebx,ebx
c0000a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a47:	89 08                	mov    DWORD PTR [eax],ecx
c0000a49:	4d                   	dec    ebp
c0000a4a:	75 03                	jne    c0000a4f <simple_strtoul+0x147>
c0000a4c:	83 cb ff             	or     ebx,0xffffffff
c0000a4f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a54:	75 02                	jne    c0000a58 <simple_strtoul+0x150>
c0000a56:	f7 db                	neg    ebx
c0000a58:	83 c4 08             	add    esp,0x8
c0000a5b:	89 d8                	mov    eax,ebx
c0000a5d:	5b                   	pop    ebx
c0000a5e:	5e                   	pop    esi
c0000a5f:	5f                   	pop    edi
c0000a60:	5d                   	pop    ebp
c0000a61:	c3                   	ret    

c0000a62 <largebin_index>:
c0000a62:	89 c2                	mov    edx,eax
c0000a64:	c1 ea 08             	shr    edx,0x8
c0000a67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a6d:	77 10                	ja     c0000a7f <largebin_index+0x1d>
c0000a6f:	0f bd d2             	bsr    edx,edx
c0000a72:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a75:	d3 e8                	shr    eax,cl
c0000a77:	83 e0 03             	and    eax,0x3
c0000a7a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a7e:	c3                   	ret    
c0000a7f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a84:	c3                   	ret    

c0000a85 <malloc_init_state>:
c0000a85:	53                   	push   ebx
c0000a86:	8d 50 34             	lea    edx,[eax+0x34]
c0000a89:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a8f:	89 d1                	mov    ecx,edx
c0000a91:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a94:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a97:	83 c2 08             	add    edx,0x8
c0000a9a:	39 da                	cmp    edx,ebx
c0000a9c:	75 f3                	jne    c0000a91 <malloc_init_state+0xc>
c0000a9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000aa0:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000aaa:	83 e2 03             	and    edx,0x3
c0000aad:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ab7:	83 ca 48             	or     edx,0x48
c0000aba:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ac4:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ace:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ad5:	89 10                	mov    DWORD PTR [eax],edx
c0000ad7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ada:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ae4:	5b                   	pop    ebx
c0000ae5:	c3                   	ret    

c0000ae6 <malloc_consolidate>:
c0000ae6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ae8:	85 d2                	test   edx,edx
c0000aea:	0f 84 d8 00 00 00    	je     c0000bc8 <malloc_consolidate+0xe2>
c0000af0:	55                   	push   ebp
c0000af1:	83 e2 fd             	and    edx,0xfffffffd
c0000af4:	57                   	push   edi
c0000af5:	89 c5                	mov    ebp,eax
c0000af7:	56                   	push   esi
c0000af8:	8d 78 34             	lea    edi,[eax+0x34]
c0000afb:	53                   	push   ebx
c0000afc:	83 ec 10             	sub    esp,0x10
c0000aff:	89 10                	mov    DWORD PTR [eax],edx
c0000b01:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000b05:	c1 ea 03             	shr    edx,0x3
c0000b08:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000b0c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000b10:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000b13:	85 d2                	test   edx,edx
c0000b15:	0f 84 98 00 00 00    	je     c0000bb3 <malloc_consolidate+0xcd>
c0000b1b:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b22:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b25:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b2c:	89 f9                	mov    ecx,edi
c0000b2e:	83 e1 fe             	and    ecx,0xfffffffe
c0000b31:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b34:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b37:	83 e3 fc             	and    ebx,0xfffffffc
c0000b3a:	83 e7 01             	and    edi,0x1
c0000b3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b40:	75 14                	jne    c0000b56 <malloc_consolidate+0x70>
c0000b42:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b44:	29 fa                	sub    edx,edi
c0000b46:	01 f9                	add    ecx,edi
c0000b48:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b4b:	89 fb                	mov    ebx,edi
c0000b4d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b50:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b53:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b56:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b59:	74 40                	je     c0000b9b <malloc_consolidate+0xb5>
c0000b5b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b5e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b61:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b65:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b68:	83 e7 01             	and    edi,0x1
c0000b6b:	75 0e                	jne    c0000b7b <malloc_consolidate+0x95>
c0000b6d:	01 d9                	add    ecx,ebx
c0000b6f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b72:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b75:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b78:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b7b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b7e:	89 ce                	mov    esi,ecx
c0000b80:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b83:	83 ce 01             	or     esi,0x1
c0000b86:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b89:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b8c:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b8f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b93:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b96:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b99:	eb 0c                	jmp    c0000ba7 <malloc_consolidate+0xc1>
c0000b9b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b9e:	83 c9 01             	or     ecx,0x1
c0000ba1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000bab:	85 d2                	test   edx,edx
c0000bad:	0f 85 6f ff ff ff    	jne    c0000b22 <malloc_consolidate+0x3c>
c0000bb3:	83 c5 04             	add    ebp,0x4
c0000bb6:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000bba:	0f 85 50 ff ff ff    	jne    c0000b10 <malloc_consolidate+0x2a>
c0000bc0:	83 c4 10             	add    esp,0x10
c0000bc3:	5b                   	pop    ebx
c0000bc4:	5e                   	pop    esi
c0000bc5:	5f                   	pop    edi
c0000bc6:	5d                   	pop    ebp
c0000bc7:	c3                   	ret    
c0000bc8:	e9 b8 fe ff ff       	jmp    c0000a85 <malloc_init_state>

c0000bcd <dlfree>:
c0000bcd:	57                   	push   edi
c0000bce:	56                   	push   esi
c0000bcf:	53                   	push   ebx
c0000bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bd4:	85 db                	test   ebx,ebx
c0000bd6:	0f 84 e2 00 00 00    	je     c0000cbe <dlfree+0xf1>
c0000bdc:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bdf:	8b 0d 00 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a000
c0000be5:	89 f0                	mov    eax,esi
c0000be7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bea:	83 e0 fc             	and    eax,0xfffffffc
c0000bed:	39 c1                	cmp    ecx,eax
c0000bef:	72 24                	jb     c0000c15 <dlfree+0x48>
c0000bf1:	83 c9 03             	or     ecx,0x3
c0000bf4:	c1 e8 03             	shr    eax,0x3
c0000bf7:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000bfd:	83 e8 02             	sub    eax,0x2
c0000c00:	8b 0c 85 04 a0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5ffc]
c0000c07:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000c09:	89 14 85 04 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ffc],edx
c0000c10:	e9 a9 00 00 00       	jmp    c0000cbe <dlfree+0xf1>
c0000c15:	83 e6 02             	and    esi,0x2
c0000c18:	0f 85 a0 00 00 00    	jne    c0000cbe <dlfree+0xf1>
c0000c1e:	83 c9 01             	or     ecx,0x1
c0000c21:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c24:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000c2a:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c2d:	83 e1 fc             	and    ecx,0xfffffffc
c0000c30:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c34:	75 13                	jne    c0000c49 <dlfree+0x7c>
c0000c36:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c39:	29 da                	sub    edx,ebx
c0000c3b:	01 d8                	add    eax,ebx
c0000c3d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c40:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c43:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c46:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c49:	39 35 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,esi
c0000c4f:	74 40                	je     c0000c91 <dlfree+0xc4>
c0000c51:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c55:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c58:	80 e3 01             	and    bl,0x1
c0000c5b:	75 0e                	jne    c0000c6b <dlfree+0x9e>
c0000c5d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c60:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c63:	01 c8                	add    eax,ecx
c0000c65:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c68:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c6b:	8b 0d 3c a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a03c
c0000c71:	c7 42 0c 34 a0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a034
c0000c78:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c7b:	89 15 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edx
c0000c81:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c84:	89 c1                	mov    ecx,eax
c0000c86:	83 c9 01             	or     ecx,0x1
c0000c89:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c8c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c8f:	eb 10                	jmp    c0000ca1 <dlfree+0xd4>
c0000c91:	01 c8                	add    eax,ecx
c0000c93:	89 c1                	mov    ecx,eax
c0000c95:	83 c9 01             	or     ecx,0x1
c0000c98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9b:	89 15 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,edx
c0000ca1:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ca6:	76 16                	jbe    c0000cbe <dlfree+0xf1>
c0000ca8:	f6 05 00 a0 02 c0 02 	test   BYTE PTR ds:0xc002a000,0x2
c0000caf:	74 0d                	je     c0000cbe <dlfree+0xf1>
c0000cb1:	5b                   	pop    ebx
c0000cb2:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	e9 28 fe ff ff       	jmp    c0000ae6 <malloc_consolidate>
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	c3                   	ret    

c0000cc2 <sYSMALLOc>:
c0000cc2:	55                   	push   ebp
c0000cc3:	57                   	push   edi
c0000cc4:	56                   	push   esi
c0000cc5:	53                   	push   ebx
c0000cc6:	89 d3                	mov    ebx,edx
c0000cc8:	83 ec 2c             	sub    esp,0x2c
c0000ccb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ccf:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cd5:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cd8:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cdf:	74 1f                	je     c0000d00 <sYSMALLOc+0x3e>
c0000ce1:	89 d8                	mov    eax,ebx
c0000ce3:	e8 fe fd ff ff       	call   c0000ae6 <malloc_consolidate>
c0000ce8:	83 ec 0c             	sub    esp,0xc
c0000ceb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cef:	83 e8 07             	sub    eax,0x7
c0000cf2:	50                   	push   eax
c0000cf3:	e8 30 02 00 00       	call   c0000f28 <dlmalloc>
c0000cf8:	83 c4 10             	add    esp,0x10
c0000cfb:	e9 20 02 00 00       	jmp    c0000f20 <sYSMALLOc+0x25e>
c0000d00:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000d03:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000d09:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000d0c:	83 e0 fc             	and    eax,0xfffffffc
c0000d0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000d13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000d17:	83 c0 10             	add    eax,0x10
c0000d1a:	01 c1                	add    ecx,eax
c0000d1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000d20:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d27:	74 04                	je     c0000d2d <sYSMALLOc+0x6b>
c0000d29:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d2d:	f7 da                	neg    edx
c0000d2f:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d37:	21 d1                	and    ecx,edx
c0000d39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d3d:	7f 07                	jg     c0000d46 <sYSMALLOc+0x84>
c0000d3f:	31 c0                	xor    eax,eax
c0000d41:	e9 da 01 00 00       	jmp    c0000f20 <sYSMALLOc+0x25e>
c0000d46:	83 ec 0c             	sub    esp,0xc
c0000d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d4d:	e8 61 e2 00 00       	call   c000efb3 <sbrk>
c0000d52:	83 c4 10             	add    esp,0x10
c0000d55:	89 c6                	mov    esi,eax
c0000d57:	83 f8 ff             	cmp    eax,0xffffffff
c0000d5a:	74 e3                	je     c0000d3f <sYSMALLOc+0x7d>
c0000d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d60:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d64:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d67:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d6d:	39 f1                	cmp    ecx,esi
c0000d6f:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d75:	75 13                	jne    c0000d8a <sYSMALLOc+0xc8>
c0000d77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d7b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7f:	83 c8 01             	or     eax,0x1
c0000d82:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d85:	e9 3e 01 00 00       	jmp    c0000ec8 <sYSMALLOc+0x206>
c0000d8a:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d90:	88 d0                	mov    al,dl
c0000d92:	83 e0 01             	and    eax,0x1
c0000d95:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d9a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d9e:	0f 95 c0             	setne  al
c0000da1:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000da5:	39 f1                	cmp    ecx,esi
c0000da7:	76 12                	jbe    c0000dbb <sYSMALLOc+0xf9>
c0000da9:	84 c0                	test   al,al
c0000dab:	74 0e                	je     c0000dbb <sYSMALLOc+0xf9>
c0000dad:	83 e2 fe             	and    edx,0xfffffffe
c0000db0:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000db6:	e9 83 00 00 00       	jmp    c0000e3e <sYSMALLOc+0x17c>
c0000dbb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000dc0:	74 7c                	je     c0000e3e <sYSMALLOc+0x17c>
c0000dc2:	84 c0                	test   al,al
c0000dc4:	74 0c                	je     c0000dd2 <sYSMALLOc+0x110>
c0000dc6:	89 f0                	mov    eax,esi
c0000dc8:	29 c8                	sub    eax,ecx
c0000dca:	01 e8                	add    eax,ebp
c0000dcc:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000dd2:	89 f2                	mov    edx,esi
c0000dd4:	83 e2 07             	and    edx,0x7
c0000dd7:	74 0c                	je     c0000de5 <sYSMALLOc+0x123>
c0000dd9:	b8 08 00 00 00       	mov    eax,0x8
c0000dde:	29 d0                	sub    eax,edx
c0000de0:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000de3:	eb 04                	jmp    c0000de9 <sYSMALLOc+0x127>
c0000de5:	89 f5                	mov    ebp,esi
c0000de7:	31 c0                	xor    eax,eax
c0000de9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ded:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df5:	01 c1                	add    ecx,eax
c0000df7:	83 ec 0c             	sub    esp,0xc
c0000dfa:	01 f1                	add    ecx,esi
c0000dfc:	01 ca                	add    edx,ecx
c0000dfe:	29 c8                	sub    eax,ecx
c0000e00:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000e04:	01 c2                	add    edx,eax
c0000e06:	52                   	push   edx
c0000e07:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000e0b:	e8 a3 e1 00 00       	call   c000efb3 <sbrk>
c0000e10:	83 c4 10             	add    esp,0x10
c0000e13:	83 f8 ff             	cmp    eax,0xffffffff
c0000e16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000e1a:	75 0f                	jne    c0000e2b <sYSMALLOc+0x169>
c0000e1c:	83 ec 0c             	sub    esp,0xc
c0000e1f:	6a 00                	push   0x0
c0000e21:	e8 8d e1 00 00       	call   c000efb3 <sbrk>
c0000e26:	83 c4 10             	add    esp,0x10
c0000e29:	eb 30                	jmp    c0000e5b <sYSMALLOc+0x199>
c0000e2b:	39 c6                	cmp    esi,eax
c0000e2d:	76 33                	jbe    c0000e62 <sYSMALLOc+0x1a0>
c0000e2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e33:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e3a:	01 f0                	add    eax,esi
c0000e3c:	eb 1d                	jmp    c0000e5b <sYSMALLOc+0x199>
c0000e3e:	83 ec 0c             	sub    esp,0xc
c0000e41:	89 f5                	mov    ebp,esi
c0000e43:	6a 00                	push   0x0
c0000e45:	e8 69 e1 00 00       	call   c000efb3 <sbrk>
c0000e4a:	89 c2                	mov    edx,eax
c0000e4c:	29 f2                	sub    edx,esi
c0000e4e:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e52:	83 c4 10             	add    esp,0x10
c0000e55:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e5b:	31 d2                	xor    edx,edx
c0000e5d:	83 f8 ff             	cmp    eax,0xffffffff
c0000e60:	74 66                	je     c0000ec8 <sYSMALLOc+0x206>
c0000e62:	29 e8                	sub    eax,ebp
c0000e64:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e67:	01 d0                	add    eax,edx
c0000e69:	83 c8 01             	or     eax,0x1
c0000e6c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e6f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e75:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e7a:	74 4c                	je     c0000ec8 <sYSMALLOc+0x206>
c0000e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e80:	83 e8 0c             	sub    eax,0xc
c0000e83:	83 e0 f8             	and    eax,0xfffffff8
c0000e86:	89 c2                	mov    edx,eax
c0000e88:	83 ca 01             	or     edx,0x1
c0000e8b:	83 f8 0f             	cmp    eax,0xf
c0000e8e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e91:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e99:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ea1:	76 25                	jbe    c0000ec8 <sYSMALLOc+0x206>
c0000ea3:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000ea9:	83 ec 0c             	sub    esp,0xc
c0000eac:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000eb6:	83 c7 08             	add    edi,0x8
c0000eb9:	57                   	push   edi
c0000eba:	e8 0e fd ff ff       	call   c0000bcd <dlfree>
c0000ebf:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ec5:	83 c4 10             	add    esp,0x10
c0000ec8:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ece:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ed4:	73 06                	jae    c0000edc <sYSMALLOc+0x21a>
c0000ed6:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000edc:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000ee2:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ee8:	73 06                	jae    c0000ef0 <sYSMALLOc+0x22e>
c0000eea:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ef0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ef3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ef6:	83 e2 fc             	and    edx,0xfffffffc
c0000ef9:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000efd:	0f 82 3c fe ff ff    	jb     c0000d3f <sYSMALLOc+0x7d>
c0000f03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000f07:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000f0a:	29 fa                	sub    edx,edi
c0000f0c:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000f0f:	83 ca 01             	or     edx,0x1
c0000f12:	89 fb                	mov    ebx,edi
c0000f14:	83 c0 08             	add    eax,0x8
c0000f17:	83 cb 01             	or     ebx,0x1
c0000f1a:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f1d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f20:	83 c4 2c             	add    esp,0x2c
c0000f23:	5b                   	pop    ebx
c0000f24:	5e                   	pop    esi
c0000f25:	5f                   	pop    edi
c0000f26:	5d                   	pop    ebp
c0000f27:	c3                   	ret    

c0000f28 <dlmalloc>:
c0000f28:	55                   	push   ebp
c0000f29:	57                   	push   edi
c0000f2a:	56                   	push   esi
c0000f2b:	53                   	push   ebx
c0000f2c:	83 ec 1c             	sub    esp,0x1c
c0000f2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f33:	83 f8 df             	cmp    eax,0xffffffdf
c0000f36:	0f 87 70 03 00 00    	ja     c00012ac <dlmalloc+0x384>
c0000f3c:	83 c0 0b             	add    eax,0xb
c0000f3f:	be 10 00 00 00       	mov    esi,0x10
c0000f44:	83 f8 0f             	cmp    eax,0xf
c0000f47:	76 05                	jbe    c0000f4e <dlmalloc+0x26>
c0000f49:	83 e0 f8             	and    eax,0xfffffff8
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	8b 3d 00 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a000
c0000f54:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f5a:	75 17                	jne    c0000f73 <dlmalloc+0x4b>
c0000f5c:	85 ff                	test   edi,edi
c0000f5e:	0f 85 05 03 00 00    	jne    c0001269 <dlmalloc+0x341>
c0000f64:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000f69:	e8 78 fb ff ff       	call   c0000ae6 <malloc_consolidate>
c0000f6e:	e9 f6 02 00 00       	jmp    c0001269 <dlmalloc+0x341>
c0000f73:	39 f7                	cmp    edi,esi
c0000f75:	72 1f                	jb     c0000f96 <dlmalloc+0x6e>
c0000f77:	89 f2                	mov    edx,esi
c0000f79:	c1 ea 03             	shr    edx,0x3
c0000f7c:	83 ea 02             	sub    edx,0x2
c0000f7f:	8b 04 95 04 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5ffc]
c0000f86:	85 c0                	test   eax,eax
c0000f88:	74 0c                	je     c0000f96 <dlmalloc+0x6e>
c0000f8a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f8d:	89 0c 95 04 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5ffc],ecx
c0000f94:	eb 30                	jmp    c0000fc6 <dlmalloc+0x9e>
c0000f96:	89 f0                	mov    eax,esi
c0000f98:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9e:	77 2e                	ja     c0000fce <dlmalloc+0xa6>
c0000fa0:	c1 e8 03             	shr    eax,0x3
c0000fa3:	8d 14 c5 34 a0 02 c0 	lea    edx,[eax*8-0x3ffd5fcc]
c0000faa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fae:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000fb1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000fb4:	39 c3                	cmp    ebx,eax
c0000fb6:	74 2e                	je     c0000fe6 <dlmalloc+0xbe>
c0000fb8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fbb:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fc0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fc6:	83 c0 08             	add    eax,0x8
c0000fc9:	e9 e0 02 00 00       	jmp    c00012ae <dlmalloc+0x386>
c0000fce:	e8 8f fa ff ff       	call   c0000a62 <largebin_index>
c0000fd3:	83 e7 02             	and    edi,0x2
c0000fd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fda:	74 0a                	je     c0000fe6 <dlmalloc+0xbe>
c0000fdc:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000fe1:	e8 00 fb ff ff       	call   c0000ae6 <malloc_consolidate>
c0000fe6:	8d 46 10             	lea    eax,[esi+0x10]
c0000fe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fed:	8b 1d 40 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a040
c0000ff3:	81 fb 34 a0 02 c0    	cmp    ebx,0xc002a034
c0000ff9:	0f 84 13 01 00 00    	je     c0001112 <dlmalloc+0x1ea>
c0000fff:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001002:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001005:	83 e7 fc             	and    edi,0xfffffffc
c0001008:	81 fe ff 00 00 00    	cmp    esi,0xff
c000100e:	77 4c                	ja     c000105c <dlmalloc+0x134>
c0001010:	3d 34 a0 02 c0       	cmp    eax,0xc002a034
c0001015:	75 45                	jne    c000105c <dlmalloc+0x134>
c0001017:	39 1d 30 a0 02 c0    	cmp    DWORD PTR ds:0xc002a030,ebx
c000101d:	75 3d                	jne    c000105c <dlmalloc+0x134>
c000101f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001023:	73 37                	jae    c000105c <dlmalloc+0x134>
c0001025:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001028:	89 fa                	mov    edx,edi
c000102a:	a3 3c a0 02 c0       	mov    ds:0xc002a03c,eax
c000102f:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c0001034:	a3 30 a0 02 c0       	mov    ds:0xc002a030,eax
c0001039:	29 f2                	sub    edx,esi
c000103b:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c0001042:	c7 40 0c 34 a0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a034
c0001049:	83 ce 01             	or     esi,0x1
c000104c:	89 d1                	mov    ecx,edx
c000104e:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001051:	83 c9 01             	or     ecx,0x1
c0001054:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001057:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000105a:	eb 15                	jmp    c0001071 <dlmalloc+0x149>
c000105c:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c0001061:	39 fe                	cmp    esi,edi
c0001063:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c000106a:	75 0d                	jne    c0001079 <dlmalloc+0x151>
c000106c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001071:	8d 43 08             	lea    eax,[ebx+0x8]
c0001074:	e9 35 02 00 00       	jmp    c00012ae <dlmalloc+0x386>
c0001079:	89 f8                	mov    eax,edi
c000107b:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001081:	77 19                	ja     c000109c <dlmalloc+0x174>
c0001083:	c1 e8 03             	shr    eax,0x3
c0001086:	8d 14 00             	lea    edx,[eax+eax*1]
c0001089:	83 c2 0d             	add    edx,0xd
c000108c:	8d 2c 95 f8 9f 02 c0 	lea    ebp,[edx*4-0x3ffd6008]
c0001093:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c000109a:	eb 46                	jmp    c00010e2 <dlmalloc+0x1ba>
c000109c:	e8 c1 f9 ff ff       	call   c0000a62 <largebin_index>
c00010a1:	8d 14 00             	lea    edx,[eax+eax*1]
c00010a4:	83 c2 0d             	add    edx,0xd
c00010a7:	8d 0c 95 00 a0 02 c0 	lea    ecx,[edx*4-0x3ffd6000]
c00010ae:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c00010b5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00010b8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010bc:	89 d5                	mov    ebp,edx
c00010be:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010c2:	74 1e                	je     c00010e2 <dlmalloc+0x1ba>
c00010c4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010c7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010ca:	77 12                	ja     c00010de <dlmalloc+0x1b6>
c00010cc:	83 cf 01             	or     edi,0x1
c00010cf:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010d2:	76 05                	jbe    c00010d9 <dlmalloc+0x1b1>
c00010d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010d7:	eb f6                	jmp    c00010cf <dlmalloc+0x1a7>
c00010d9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010dc:	eb 04                	jmp    c00010e2 <dlmalloc+0x1ba>
c00010de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010e2:	89 c7                	mov    edi,eax
c00010e4:	88 c1                	mov    cl,al
c00010e6:	c1 ff 05             	sar    edi,0x5
c00010e9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010ed:	bf 01 00 00 00       	mov    edi,0x1
c00010f2:	d3 e7                	shl    edi,cl
c00010f4:	89 f8                	mov    eax,edi
c00010f6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010fa:	09 04 bd 34 a3 02 c0 	or     DWORD PTR [edi*4-0x3ffd5ccc],eax
c0001101:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001104:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001107:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000110a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000110d:	e9 db fe ff ff       	jmp    c0000fed <dlmalloc+0xc5>
c0001112:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001118:	76 78                	jbe    c0001192 <dlmalloc+0x26a>
c000111a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000111e:	8d 04 c5 34 a0 02 c0 	lea    eax,[eax*8-0x3ffd5fcc]
c0001125:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000112b:	39 ca                	cmp    edx,ecx
c000112d:	74 63                	je     c0001192 <dlmalloc+0x26a>
c000112f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001132:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001135:	83 e3 fc             	and    ebx,0xfffffffc
c0001138:	39 de                	cmp    esi,ebx
c000113a:	77 52                	ja     c000118e <dlmalloc+0x266>
c000113c:	89 df                	mov    edi,ebx
c000113e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001141:	29 f7                	sub    edi,esi
c0001143:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001146:	01 d3                	add    ebx,edx
c0001148:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000114b:	83 ff 0f             	cmp    edi,0xf
c000114e:	8d 42 08             	lea    eax,[edx+0x8]
c0001151:	77 09                	ja     c000115c <dlmalloc+0x234>
c0001153:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001157:	e9 52 01 00 00       	jmp    c00012ae <dlmalloc+0x386>
c000115c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000115f:	83 ce 01             	or     esi,0x1
c0001162:	89 0d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,ecx
c0001168:	89 0d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,ecx
c000116e:	c7 41 08 34 a0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a034
c0001175:	c7 41 0c 34 a0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a034
c000117c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000117f:	89 fa                	mov    edx,edi
c0001181:	83 ca 01             	or     edx,0x1
c0001184:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001187:	89 3b                	mov    DWORD PTR [ebx],edi
c0001189:	e9 20 01 00 00       	jmp    c00012ae <dlmalloc+0x386>
c000118e:	89 c2                	mov    edx,eax
c0001190:	eb 99                	jmp    c000112b <dlmalloc+0x203>
c0001192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001196:	b8 01 00 00 00       	mov    eax,0x1
c000119b:	41                   	inc    ecx
c000119c:	89 cb                	mov    ebx,ecx
c000119e:	8d 14 cd 2c a0 02 c0 	lea    edx,[ecx*8-0x3ffd5fd4]
c00011a5:	c1 eb 05             	shr    ebx,0x5
c00011a8:	d3 e0                	shl    eax,cl
c00011aa:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c00011b1:	39 f8                	cmp    eax,edi
c00011b3:	77 04                	ja     c00011b9 <dlmalloc+0x291>
c00011b5:	85 c0                	test   eax,eax
c00011b7:	75 26                	jne    c00011df <dlmalloc+0x2b7>
c00011b9:	43                   	inc    ebx
c00011ba:	83 fb 02             	cmp    ebx,0x2
c00011bd:	0f 87 a6 00 00 00    	ja     c0001269 <dlmalloc+0x341>
c00011c3:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c00011ca:	85 ff                	test   edi,edi
c00011cc:	74 eb                	je     c00011b9 <dlmalloc+0x291>
c00011ce:	89 d8                	mov    eax,ebx
c00011d0:	c1 e0 06             	shl    eax,0x6
c00011d3:	8d 14 85 2c a0 02 c0 	lea    edx,[eax*4-0x3ffd5fd4]
c00011da:	b8 01 00 00 00       	mov    eax,0x1
c00011df:	85 f8                	test   eax,edi
c00011e1:	75 07                	jne    c00011ea <dlmalloc+0x2c2>
c00011e3:	83 c2 08             	add    edx,0x8
c00011e6:	01 c0                	add    eax,eax
c00011e8:	eb f5                	jmp    c00011df <dlmalloc+0x2b7>
c00011ea:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011ed:	39 ca                	cmp    edx,ecx
c00011ef:	75 14                	jne    c0001205 <dlmalloc+0x2dd>
c00011f1:	89 c1                	mov    ecx,eax
c00011f3:	83 c2 08             	add    edx,0x8
c00011f6:	f7 d1                	not    ecx
c00011f8:	01 c0                	add    eax,eax
c00011fa:	21 cf                	and    edi,ecx
c00011fc:	89 3c 9d 34 a3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5ccc],edi
c0001203:	eb ac                	jmp    c00011b1 <dlmalloc+0x289>
c0001205:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001208:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000120b:	83 e0 fc             	and    eax,0xfffffffc
c000120e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001211:	89 c3                	mov    ebx,eax
c0001213:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001216:	29 f3                	sub    ebx,esi
c0001218:	8d 14 01             	lea    edx,[ecx+eax*1]
c000121b:	83 fb 0f             	cmp    ebx,0xf
c000121e:	8d 41 08             	lea    eax,[ecx+0x8]
c0001221:	77 09                	ja     c000122c <dlmalloc+0x304>
c0001223:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001227:	e9 82 00 00 00       	jmp    c00012ae <dlmalloc+0x386>
c000122c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000122f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001235:	89 3d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edi
c000123b:	89 3d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,edi
c0001241:	c7 47 08 34 a0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a034
c0001248:	c7 47 0c 34 a0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a034
c000124f:	77 06                	ja     c0001257 <dlmalloc+0x32f>
c0001251:	89 3d 30 a0 02 c0    	mov    DWORD PTR ds:0xc002a030,edi
c0001257:	83 ce 01             	or     esi,0x1
c000125a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000125d:	89 d9                	mov    ecx,ebx
c000125f:	83 c9 01             	or     ecx,0x1
c0001262:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001265:	89 1a                	mov    DWORD PTR [edx],ebx
c0001267:	eb 45                	jmp    c00012ae <dlmalloc+0x386>
c0001269:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c000126e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001271:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001274:	83 e2 fc             	and    edx,0xfffffffc
c0001277:	39 d1                	cmp    ecx,edx
c0001279:	77 1e                	ja     c0001299 <dlmalloc+0x371>
c000127b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000127e:	89 f3                	mov    ebx,esi
c0001280:	89 0d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ecx
c0001286:	83 cb 01             	or     ebx,0x1
c0001289:	29 f2                	sub    edx,esi
c000128b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000128e:	83 ca 01             	or     edx,0x1
c0001291:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001294:	e9 2d fd ff ff       	jmp    c0000fc6 <dlmalloc+0x9e>
c0001299:	83 c4 1c             	add    esp,0x1c
c000129c:	89 f0                	mov    eax,esi
c000129e:	5b                   	pop    ebx
c000129f:	ba 00 a0 02 c0       	mov    edx,0xc002a000
c00012a4:	5e                   	pop    esi
c00012a5:	5f                   	pop    edi
c00012a6:	5d                   	pop    ebp
c00012a7:	e9 16 fa ff ff       	jmp    c0000cc2 <sYSMALLOc>
c00012ac:	31 c0                	xor    eax,eax
c00012ae:	83 c4 1c             	add    esp,0x1c
c00012b1:	5b                   	pop    ebx
c00012b2:	5e                   	pop    esi
c00012b3:	5f                   	pop    edi
c00012b4:	5d                   	pop    ebp
c00012b5:	c3                   	ret    

c00012b6 <iALLOc>:
c00012b6:	55                   	push   ebp
c00012b7:	89 c5                	mov    ebp,eax
c00012b9:	57                   	push   edi
c00012ba:	56                   	push   esi
c00012bb:	53                   	push   ebx
c00012bc:	83 ec 2c             	sub    esp,0x2c
c00012bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012c3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012cb:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c00012d2:	75 12                	jne    c00012e6 <iALLOc+0x30>
c00012d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012d8:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00012dd:	e8 04 f8 ff ff       	call   c0000ae6 <malloc_consolidate>
c00012e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012eb:	74 12                	je     c00012ff <iALLOc+0x49>
c00012ed:	85 ed                	test   ebp,ebp
c00012ef:	0f 84 64 01 00 00    	je     c0001459 <iALLOc+0x1a3>
c00012f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012fd:	eb 33                	jmp    c0001332 <iALLOc+0x7c>
c00012ff:	85 ed                	test   ebp,ebp
c0001301:	75 14                	jne    c0001317 <iALLOc+0x61>
c0001303:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000130b:	83 c4 2c             	add    esp,0x2c
c000130e:	5b                   	pop    ebx
c000130f:	5e                   	pop    esi
c0001310:	5f                   	pop    edi
c0001311:	5d                   	pop    ebp
c0001312:	e9 11 fc ff ff       	jmp    c0000f28 <dlmalloc>
c0001317:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000131e:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001326:	83 f8 0f             	cmp    eax,0xf
c0001329:	76 07                	jbe    c0001332 <iALLOc+0x7c>
c000132b:	83 e0 f8             	and    eax,0xfffffff8
c000132e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001332:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001337:	75 09                	jne    c0001342 <iALLOc+0x8c>
c0001339:	89 d0                	mov    eax,edx
c000133b:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000133e:	31 f6                	xor    esi,esi
c0001340:	eb 3b                	jmp    c000137d <iALLOc+0xc7>
c0001342:	8b 02                	mov    eax,DWORD PTR [edx]
c0001344:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000134c:	83 c0 0b             	add    eax,0xb
c000134f:	83 f8 0f             	cmp    eax,0xf
c0001352:	76 07                	jbe    c000135b <iALLOc+0xa5>
c0001354:	83 e0 f8             	and    eax,0xfffffff8
c0001357:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000135b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000135f:	0f af f5             	imul   esi,ebp
c0001362:	eb 25                	jmp    c0001389 <iALLOc+0xd3>
c0001364:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001366:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001369:	bb 10 00 00 00       	mov    ebx,0x10
c000136e:	83 f9 0f             	cmp    ecx,0xf
c0001371:	76 05                	jbe    c0001378 <iALLOc+0xc2>
c0001373:	83 e1 f8             	and    ecx,0xfffffff8
c0001376:	89 cb                	mov    ebx,ecx
c0001378:	01 de                	add    esi,ebx
c000137a:	83 c0 04             	add    eax,0x4
c000137d:	39 c7                	cmp    edi,eax
c000137f:	75 e3                	jne    c0001364 <iALLOc+0xae>
c0001381:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000138d:	8b 1d 54 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a354
c0001393:	83 ec 0c             	sub    esp,0xc
c0001396:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c00013a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00013a4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00013a8:	50                   	push   eax
c00013a9:	e8 7a fb ff ff       	call   c0000f28 <dlmalloc>
c00013ae:	83 c4 10             	add    esp,0x10
c00013b1:	89 1d 54 a3 02 c0    	mov    DWORD PTR ds:0xc002a354,ebx
c00013b7:	85 c0                	test   eax,eax
c00013b9:	0f 84 92 00 00 00    	je     c0001451 <iALLOc+0x19b>
c00013bf:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013c2:	8d 78 f8             	lea    edi,[eax-0x8]
c00013c5:	83 e3 fc             	and    ebx,0xfffffffc
c00013c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013cc:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013d1:	74 1e                	je     c00013f1 <iALLOc+0x13b>
c00013d3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013d7:	89 d9                	mov    ecx,ebx
c00013d9:	52                   	push   edx
c00013da:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013de:	83 e9 04             	sub    ecx,0x4
c00013e1:	51                   	push   ecx
c00013e2:	6a 00                	push   0x0
c00013e4:	50                   	push   eax
c00013e5:	e8 02 f3 ff ff       	call   c00006ec <memset>
c00013ea:	83 c4 10             	add    esp,0x10
c00013ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f6:	75 14                	jne    c000140c <iALLOc+0x156>
c00013f8:	8d 04 37             	lea    eax,[edi+esi*1]
c00013fb:	29 f3                	sub    ebx,esi
c00013fd:	8d 48 08             	lea    ecx,[eax+0x8]
c0001400:	83 cb 01             	or     ebx,0x1
c0001403:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001407:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000140a:	89 f3                	mov    ebx,esi
c000140c:	31 c0                	xor    eax,eax
c000140e:	4d                   	dec    ebp
c000140f:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001412:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001416:	39 c5                	cmp    ebp,eax
c0001418:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000141b:	74 2c                	je     c0001449 <iALLOc+0x193>
c000141d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001421:	85 c9                	test   ecx,ecx
c0001423:	75 15                	jne    c000143a <iALLOc+0x184>
c0001425:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001428:	8d 71 0b             	lea    esi,[ecx+0xb]
c000142b:	b9 10 00 00 00       	mov    ecx,0x10
c0001430:	83 fe 0f             	cmp    esi,0xf
c0001433:	76 05                	jbe    c000143a <iALLOc+0x184>
c0001435:	83 e6 f8             	and    esi,0xfffffff8
c0001438:	89 f1                	mov    ecx,esi
c000143a:	89 ce                	mov    esi,ecx
c000143c:	29 cb                	sub    ebx,ecx
c000143e:	83 ce 01             	or     esi,0x1
c0001441:	40                   	inc    eax
c0001442:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001445:	01 cf                	add    edi,ecx
c0001447:	eb c6                	jmp    c000140f <iALLOc+0x159>
c0001449:	83 cb 01             	or     ebx,0x1
c000144c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000144f:	eb 08                	jmp    c0001459 <iALLOc+0x1a3>
c0001451:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001459:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000145d:	83 c4 2c             	add    esp,0x2c
c0001460:	5b                   	pop    ebx
c0001461:	5e                   	pop    esi
c0001462:	5f                   	pop    edi
c0001463:	5d                   	pop    ebp
c0001464:	c3                   	ret    

c0001465 <dlrealloc>:
c0001465:	55                   	push   ebp
c0001466:	57                   	push   edi
c0001467:	56                   	push   esi
c0001468:	53                   	push   ebx
c0001469:	83 ec 1c             	sub    esp,0x1c
c000146c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001470:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001474:	85 db                	test   ebx,ebx
c0001476:	75 10                	jne    c0001488 <dlrealloc+0x23>
c0001478:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	5b                   	pop    ebx
c0001480:	5e                   	pop    esi
c0001481:	5f                   	pop    edi
c0001482:	5d                   	pop    ebp
c0001483:	e9 a0 fa ff ff       	jmp    c0000f28 <dlmalloc>
c0001488:	83 f8 df             	cmp    eax,0xffffffdf
c000148b:	76 07                	jbe    c0001494 <dlrealloc+0x2f>
c000148d:	31 db                	xor    ebx,ebx
c000148f:	e9 7c 01 00 00       	jmp    c0001610 <dlrealloc+0x1ab>
c0001494:	83 c0 0b             	add    eax,0xb
c0001497:	bf 10 00 00 00       	mov    edi,0x10
c000149c:	83 f8 0f             	cmp    eax,0xf
c000149f:	76 05                	jbe    c00014a6 <dlrealloc+0x41>
c00014a1:	83 e0 f8             	and    eax,0xfffffff8
c00014a4:	89 c7                	mov    edi,eax
c00014a6:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00014a9:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00014ac:	89 c6                	mov    esi,eax
c00014ae:	83 e6 fc             	and    esi,0xfffffffc
c00014b1:	a8 02                	test   al,0x2
c00014b3:	75 d8                	jne    c000148d <dlrealloc+0x28>
c00014b5:	39 f7                	cmp    edi,esi
c00014b7:	0f 86 15 01 00 00    	jbe    c00015d2 <dlrealloc+0x16d>
c00014bd:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014c1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014c4:	39 15 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,edx
c00014ca:	75 33                	jne    c00014ff <dlrealloc+0x9a>
c00014cc:	83 e1 fc             	and    ecx,0xfffffffc
c00014cf:	01 f1                	add    ecx,esi
c00014d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d5:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014d8:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014dc:	77 49                	ja     c0001527 <dlrealloc+0xc2>
c00014de:	01 fd                	add    ebp,edi
c00014e0:	83 e0 01             	and    eax,0x1
c00014e3:	09 f8                	or     eax,edi
c00014e5:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014e8:	89 2d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ebp
c00014ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014f2:	29 f8                	sub    eax,edi
c00014f4:	83 c8 01             	or     eax,0x1
c00014f7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014fa:	e9 11 01 00 00       	jmp    c0001610 <dlrealloc+0x1ab>
c00014ff:	89 c8                	mov    eax,ecx
c0001501:	83 e0 fe             	and    eax,0xfffffffe
c0001504:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001509:	75 1c                	jne    c0001527 <dlrealloc+0xc2>
c000150b:	83 e1 fc             	and    ecx,0xfffffffc
c000150e:	01 f1                	add    ecx,esi
c0001510:	39 cf                	cmp    edi,ecx
c0001512:	77 13                	ja     c0001527 <dlrealloc+0xc2>
c0001514:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001517:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000151a:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000151d:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001520:	89 ce                	mov    esi,ecx
c0001522:	e9 ab 00 00 00       	jmp    c00015d2 <dlrealloc+0x16d>
c0001527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000152b:	8d 47 f9             	lea    eax,[edi-0x7]
c000152e:	83 ec 0c             	sub    esp,0xc
c0001531:	50                   	push   eax
c0001532:	e8 f1 f9 ff ff       	call   c0000f28 <dlmalloc>
c0001537:	83 c4 10             	add    esp,0x10
c000153a:	89 c1                	mov    ecx,eax
c000153c:	85 c0                	test   eax,eax
c000153e:	0f 84 49 ff ff ff    	je     c000148d <dlrealloc+0x28>
c0001544:	8d 40 f8             	lea    eax,[eax-0x8]
c0001547:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000154b:	39 c2                	cmp    edx,eax
c000154d:	75 0a                	jne    c0001559 <dlrealloc+0xf4>
c000154f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001552:	83 e0 fc             	and    eax,0xfffffffc
c0001555:	01 c6                	add    esi,eax
c0001557:	eb 79                	jmp    c00015d2 <dlrealloc+0x16d>
c0001559:	83 ee 04             	sub    esi,0x4
c000155c:	83 fe 27             	cmp    esi,0x27
c000155f:	76 16                	jbe    c0001577 <dlrealloc+0x112>
c0001561:	50                   	push   eax
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	51                   	push   ecx
c0001565:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001569:	e8 48 f1 ff ff       	call   c00006b6 <memcpy>
c000156e:	83 c4 10             	add    esp,0x10
c0001571:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001575:	eb 43                	jmp    c00015ba <dlrealloc+0x155>
c0001577:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001579:	83 fe 13             	cmp    esi,0x13
c000157c:	89 01                	mov    DWORD PTR [ecx],eax
c000157e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001581:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001584:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001587:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000158a:	76 2e                	jbe    c00015ba <dlrealloc+0x155>
c000158c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000158f:	83 fe 1b             	cmp    esi,0x1b
c0001592:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001595:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001598:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000159b:	76 1d                	jbe    c00015ba <dlrealloc+0x155>
c000159d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00015a0:	83 fe 23             	cmp    esi,0x23
c00015a3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00015a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00015a9:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00015ac:	76 0c                	jbe    c00015ba <dlrealloc+0x155>
c00015ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00015b1:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00015b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00015b7:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015be:	83 ec 0c             	sub    esp,0xc
c00015c1:	53                   	push   ebx
c00015c2:	e8 06 f6 ff ff       	call   c0000bcd <dlfree>
c00015c7:	83 c4 10             	add    esp,0x10
c00015ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015ce:	89 cb                	mov    ebx,ecx
c00015d0:	eb 3e                	jmp    c0001610 <dlrealloc+0x1ab>
c00015d2:	89 f2                	mov    edx,esi
c00015d4:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015d7:	29 fa                	sub    edx,edi
c00015d9:	83 e1 01             	and    ecx,0x1
c00015dc:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015e0:	83 fa 0f             	cmp    edx,0xf
c00015e3:	77 0b                	ja     c00015f0 <dlrealloc+0x18b>
c00015e5:	09 ce                	or     esi,ecx
c00015e7:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015ea:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015ee:	eb 20                	jmp    c0001610 <dlrealloc+0x1ab>
c00015f0:	01 fd                	add    ebp,edi
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	09 cf                	or     edi,ecx
c00015f7:	83 ca 01             	or     edx,0x1
c00015fa:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015fd:	83 c5 08             	add    ebp,0x8
c0001600:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001603:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001607:	55                   	push   ebp
c0001608:	e8 c0 f5 ff ff       	call   c0000bcd <dlfree>
c000160d:	83 c4 10             	add    esp,0x10
c0001610:	83 c4 1c             	add    esp,0x1c
c0001613:	89 d8                	mov    eax,ebx
c0001615:	5b                   	pop    ebx
c0001616:	5e                   	pop    esi
c0001617:	5f                   	pop    edi
c0001618:	5d                   	pop    ebp
c0001619:	c3                   	ret    

c000161a <dlmemalign>:
c000161a:	55                   	push   ebp
c000161b:	57                   	push   edi
c000161c:	56                   	push   esi
c000161d:	53                   	push   ebx
c000161e:	83 ec 0c             	sub    esp,0xc
c0001621:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001625:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001629:	83 fa 08             	cmp    edx,0x8
c000162c:	77 10                	ja     c000163e <dlmemalign+0x24>
c000162e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001632:	83 c4 0c             	add    esp,0xc
c0001635:	5b                   	pop    ebx
c0001636:	5e                   	pop    esi
c0001637:	5f                   	pop    edi
c0001638:	5d                   	pop    ebp
c0001639:	e9 ea f8 ff ff       	jmp    c0000f28 <dlmalloc>
c000163e:	bf 10 00 00 00       	mov    edi,0x10
c0001643:	83 fa 0f             	cmp    edx,0xf
c0001646:	76 13                	jbe    c000165b <dlmemalign+0x41>
c0001648:	8d 4a ff             	lea    ecx,[edx-0x1]
c000164b:	85 d1                	test   ecx,edx
c000164d:	75 04                	jne    c0001653 <dlmemalign+0x39>
c000164f:	89 d7                	mov    edi,edx
c0001651:	eb 08                	jmp    c000165b <dlmemalign+0x41>
c0001653:	39 d7                	cmp    edi,edx
c0001655:	73 04                	jae    c000165b <dlmemalign+0x41>
c0001657:	01 ff                	add    edi,edi
c0001659:	eb f8                	jmp    c0001653 <dlmemalign+0x39>
c000165b:	83 f8 df             	cmp    eax,0xffffffdf
c000165e:	76 07                	jbe    c0001667 <dlmemalign+0x4d>
c0001660:	31 c0                	xor    eax,eax
c0001662:	e9 ce 00 00 00       	jmp    c0001735 <dlmemalign+0x11b>
c0001667:	83 c0 0b             	add    eax,0xb
c000166a:	bd 10 00 00 00       	mov    ebp,0x10
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 05                	jbe    c0001679 <dlmemalign+0x5f>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 c5                	mov    ebp,eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001680:	50                   	push   eax
c0001681:	e8 a2 f8 ff ff       	call   c0000f28 <dlmalloc>
c0001686:	83 c4 10             	add    esp,0x10
c0001689:	89 c1                	mov    ecx,eax
c000168b:	85 c0                	test   eax,eax
c000168d:	74 d1                	je     c0001660 <dlmemalign+0x46>
c000168f:	31 d2                	xor    edx,edx
c0001691:	8d 70 f8             	lea    esi,[eax-0x8]
c0001694:	f7 f7                	div    edi
c0001696:	85 d2                	test   edx,edx
c0001698:	74 62                	je     c00016fc <dlmemalign+0xe2>
c000169a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000169e:	89 f8                	mov    eax,edi
c00016a0:	f7 d8                	neg    eax
c00016a2:	21 c3                	and    ebx,eax
c00016a4:	83 eb 08             	sub    ebx,0x8
c00016a7:	89 d8                	mov    eax,ebx
c00016a9:	29 f0                	sub    eax,esi
c00016ab:	83 f8 0f             	cmp    eax,0xf
c00016ae:	77 02                	ja     c00016b2 <dlmemalign+0x98>
c00016b0:	01 fb                	add    ebx,edi
c00016b2:	89 d8                	mov    eax,ebx
c00016b4:	29 f0                	sub    eax,esi
c00016b6:	89 c6                	mov    esi,eax
c00016b8:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016bb:	89 c2                	mov    edx,eax
c00016bd:	83 e2 fc             	and    edx,0xfffffffc
c00016c0:	29 f2                	sub    edx,esi
c00016c2:	a8 02                	test   al,0x2
c00016c4:	74 10                	je     c00016d6 <dlmemalign+0xbc>
c00016c6:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016c9:	83 ca 02             	or     edx,0x2
c00016cc:	8d 43 08             	lea    eax,[ebx+0x8]
c00016cf:	89 33                	mov    DWORD PTR [ebx],esi
c00016d1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016d4:	eb 5f                	jmp    c0001735 <dlmemalign+0x11b>
c00016d6:	83 ec 0c             	sub    esp,0xc
c00016d9:	89 d0                	mov    eax,edx
c00016db:	83 c8 01             	or     eax,0x1
c00016de:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016e1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016e6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016e9:	83 e0 01             	and    eax,0x1
c00016ec:	09 f0                	or     eax,esi
c00016ee:	89 de                	mov    esi,ebx
c00016f0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016f3:	51                   	push   ecx
c00016f4:	e8 d4 f4 ff ff       	call   c0000bcd <dlfree>
c00016f9:	83 c4 10             	add    esp,0x10
c00016fc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016ff:	a8 02                	test   al,0x2
c0001701:	75 2f                	jne    c0001732 <dlmemalign+0x118>
c0001703:	83 e0 fc             	and    eax,0xfffffffc
c0001706:	8d 55 10             	lea    edx,[ebp+0x10]
c0001709:	39 c2                	cmp    edx,eax
c000170b:	73 25                	jae    c0001732 <dlmemalign+0x118>
c000170d:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001710:	83 ec 0c             	sub    esp,0xc
c0001713:	29 e8                	sub    eax,ebp
c0001715:	83 c2 08             	add    edx,0x8
c0001718:	83 c8 01             	or     eax,0x1
c000171b:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000171e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001721:	83 e0 01             	and    eax,0x1
c0001724:	09 c5                	or     ebp,eax
c0001726:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001729:	52                   	push   edx
c000172a:	e8 9e f4 ff ff       	call   c0000bcd <dlfree>
c000172f:	83 c4 10             	add    esp,0x10
c0001732:	8d 46 08             	lea    eax,[esi+0x8]
c0001735:	83 c4 0c             	add    esp,0xc
c0001738:	5b                   	pop    ebx
c0001739:	5e                   	pop    esi
c000173a:	5f                   	pop    edi
c000173b:	5d                   	pop    ebp
c000173c:	c3                   	ret    

c000173d <dlcalloc>:
c000173d:	53                   	push   ebx
c000173e:	83 ec 14             	sub    esp,0x14
c0001741:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001745:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000174a:	50                   	push   eax
c000174b:	e8 d8 f7 ff ff       	call   c0000f28 <dlmalloc>
c0001750:	83 c4 10             	add    esp,0x10
c0001753:	89 c3                	mov    ebx,eax
c0001755:	85 c0                	test   eax,eax
c0001757:	74 77                	je     c00017d0 <dlcalloc+0x93>
c0001759:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000175c:	89 d0                	mov    eax,edx
c000175e:	83 e0 fc             	and    eax,0xfffffffc
c0001761:	80 e2 02             	and    dl,0x2
c0001764:	75 5a                	jne    c00017c0 <dlcalloc+0x83>
c0001766:	83 e8 04             	sub    eax,0x4
c0001769:	83 f8 27             	cmp    eax,0x27
c000176c:	76 03                	jbe    c0001771 <dlcalloc+0x34>
c000176e:	51                   	push   ecx
c000176f:	eb 53                	jmp    c00017c4 <dlcalloc+0x87>
c0001771:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001777:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000177e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001785:	83 f8 13             	cmp    eax,0x13
c0001788:	76 46                	jbe    c00017d0 <dlcalloc+0x93>
c000178a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001791:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001798:	83 f8 1b             	cmp    eax,0x1b
c000179b:	76 33                	jbe    c00017d0 <dlcalloc+0x93>
c000179d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00017a4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00017ab:	83 f8 23             	cmp    eax,0x23
c00017ae:	76 20                	jbe    c00017d0 <dlcalloc+0x93>
c00017b0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00017b7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017be:	eb 10                	jmp    c00017d0 <dlcalloc+0x93>
c00017c0:	83 e8 08             	sub    eax,0x8
c00017c3:	52                   	push   edx
c00017c4:	50                   	push   eax
c00017c5:	6a 00                	push   0x0
c00017c7:	53                   	push   ebx
c00017c8:	e8 1f ef ff ff       	call   c00006ec <memset>
c00017cd:	83 c4 10             	add    esp,0x10
c00017d0:	89 d8                	mov    eax,ebx
c00017d2:	83 c4 08             	add    esp,0x8
c00017d5:	5b                   	pop    ebx
c00017d6:	c3                   	ret    

c00017d7 <dlcfree>:
c00017d7:	e9 f1 f3 ff ff       	jmp    c0000bcd <dlfree>

c00017dc <dlindependent_calloc>:
c00017dc:	83 ec 28             	sub    esp,0x28
c00017df:	b9 03 00 00 00       	mov    ecx,0x3
c00017e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017f0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017f8:	e8 b9 fa ff ff       	call   c00012b6 <iALLOc>
c00017fd:	83 c4 2c             	add    esp,0x2c
c0001800:	c3                   	ret    

c0001801 <dlindependent_comalloc>:
c0001801:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001809:	31 c9                	xor    ecx,ecx
c000180b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000180f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001813:	e9 9e fa ff ff       	jmp    c00012b6 <iALLOc>

c0001818 <dlvalloc>:
c0001818:	83 ec 0c             	sub    esp,0xc
c000181b:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c0001822:	75 0a                	jne    c000182e <dlvalloc+0x16>
c0001824:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001829:	e8 b8 f2 ff ff       	call   c0000ae6 <malloc_consolidate>
c000182e:	50                   	push   eax
c000182f:	50                   	push   eax
c0001830:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001834:	ff 35 5c a3 02 c0    	push   DWORD PTR ds:0xc002a35c
c000183a:	e8 db fd ff ff       	call   c000161a <dlmemalign>
c000183f:	83 c4 1c             	add    esp,0x1c
c0001842:	c3                   	ret    

c0001843 <dlpvalloc>:
c0001843:	83 ec 0c             	sub    esp,0xc
c0001846:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c000184d:	75 0a                	jne    c0001859 <dlpvalloc+0x16>
c000184f:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001854:	e8 8d f2 ff ff       	call   c0000ae6 <malloc_consolidate>
c0001859:	a1 5c a3 02 c0       	mov    eax,ds:0xc002a35c
c000185e:	89 c1                	mov    ecx,eax
c0001860:	52                   	push   edx
c0001861:	f7 d9                	neg    ecx
c0001863:	52                   	push   edx
c0001864:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001868:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000186c:	21 ca                	and    edx,ecx
c000186e:	52                   	push   edx
c000186f:	50                   	push   eax
c0001870:	e8 a5 fd ff ff       	call   c000161a <dlmemalign>
c0001875:	83 c4 1c             	add    esp,0x1c
c0001878:	c3                   	ret    

c0001879 <dlmalloc_trim>:
c0001879:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c000187e:	e8 63 f2 ff ff       	call   c0000ae6 <malloc_consolidate>
c0001883:	31 c0                	xor    eax,eax
c0001885:	c3                   	ret    

c0001886 <dlmalloc_usable_size>:
c0001886:	53                   	push   ebx
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000188d:	85 c9                	test   ecx,ecx
c000188f:	74 24                	je     c00018b5 <dlmalloc_usable_size+0x2f>
c0001891:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001894:	f6 c2 02             	test   dl,0x2
c0001897:	74 08                	je     c00018a1 <dlmalloc_usable_size+0x1b>
c0001899:	83 e2 fc             	and    edx,0xfffffffc
c000189c:	8d 42 f8             	lea    eax,[edx-0x8]
c000189f:	eb 14                	jmp    c00018b5 <dlmalloc_usable_size+0x2f>
c00018a1:	89 d3                	mov    ebx,edx
c00018a3:	31 c0                	xor    eax,eax
c00018a5:	83 e3 fe             	and    ebx,0xfffffffe
c00018a8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00018ad:	74 06                	je     c00018b5 <dlmalloc_usable_size+0x2f>
c00018af:	83 e2 fc             	and    edx,0xfffffffc
c00018b2:	8d 42 fc             	lea    eax,[edx-0x4]
c00018b5:	5b                   	pop    ebx
c00018b6:	c3                   	ret    

c00018b7 <dlmallinfo>:
c00018b7:	55                   	push   ebp
c00018b8:	57                   	push   edi
c00018b9:	56                   	push   esi
c00018ba:	53                   	push   ebx
c00018bb:	83 ec 08             	sub    esp,0x8
c00018be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018c2:	83 3d 2c a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a02c,0x0
c00018c9:	75 0a                	jne    c00018d5 <dlmallinfo+0x1e>
c00018cb:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00018d0:	e8 11 f2 ff ff       	call   c0000ae6 <malloc_consolidate>
c00018d5:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c00018da:	31 ed                	xor    ebp,ebp
c00018dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018df:	31 c9                	xor    ecx,ecx
c00018e1:	83 e0 fc             	and    eax,0xfffffffc
c00018e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018e8:	31 c0                	xor    eax,eax
c00018ea:	8b 14 85 04 a0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5ffc]
c00018f1:	85 d2                	test   edx,edx
c00018f3:	74 0e                	je     c0001903 <dlmallinfo+0x4c>
c00018f5:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018f8:	45                   	inc    ebp
c00018f9:	83 e6 fc             	and    esi,0xfffffffc
c00018fc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018ff:	01 f1                	add    ecx,esi
c0001901:	eb ee                	jmp    c00018f1 <dlmallinfo+0x3a>
c0001903:	40                   	inc    eax
c0001904:	83 f8 0a             	cmp    eax,0xa
c0001907:	75 e1                	jne    c00018ea <dlmallinfo+0x33>
c0001909:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190d:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001914:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001917:	b8 34 a0 02 c0       	mov    eax,0xc002a034
c000191c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000191f:	39 f0                	cmp    eax,esi
c0001921:	74 10                	je     c0001933 <dlmallinfo+0x7c>
c0001923:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001926:	ff 04 24             	inc    DWORD PTR [esp]
c0001929:	83 e7 fc             	and    edi,0xfffffffc
c000192c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000192f:	01 fa                	add    edx,edi
c0001931:	eb ec                	jmp    c000191f <dlmallinfo+0x68>
c0001933:	83 c0 08             	add    eax,0x8
c0001936:	3d 2c a3 02 c0       	cmp    eax,0xc002a32c
c000193b:	75 df                	jne    c000191c <dlmallinfo+0x65>
c000193d:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001940:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001943:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001946:	a1 68 a3 02 c0       	mov    eax,ds:0xc002a368
c000194b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000194e:	89 03                	mov    DWORD PTR [ebx],eax
c0001950:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001953:	8b 35 50 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a350
c0001959:	29 d0                	sub    eax,edx
c000195b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000195e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001961:	8b 35 64 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a364
c0001967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000196b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000196e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001971:	8b 35 74 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a374
c0001977:	89 d8                	mov    eax,ebx
c0001979:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000197c:	83 c4 08             	add    esp,0x8
c000197f:	5b                   	pop    ebx
c0001980:	5e                   	pop    esi
c0001981:	5f                   	pop    edi
c0001982:	5d                   	pop    ebp
c0001983:	c2 04 00             	ret    0x4

c0001986 <dlmalloc_stats>:
c0001986:	83 ec 30             	sub    esp,0x30
c0001989:	8d 44 24 08          	lea    eax,[esp+0x8]
c000198d:	50                   	push   eax
c000198e:	e8 24 ff ff ff       	call   c00018b7 <dlmallinfo>
c0001993:	83 c4 30             	add    esp,0x30
c0001996:	c3                   	ret    

c0001997 <dlmallopt>:
c0001997:	56                   	push   esi
c0001998:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c000199d:	53                   	push   ebx
c000199e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00019a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00019a6:	e8 3b f1 ff ff       	call   c0000ae6 <malloc_consolidate>
c00019ab:	8d 46 04             	lea    eax,[esi+0x4]
c00019ae:	83 f8 05             	cmp    eax,0x5
c00019b1:	77 67                	ja     c0001a1a <dlmallopt+0x83>
c00019b3:	ff 24 85 c4 5c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda33c]
c00019ba:	83 fb 50             	cmp    ebx,0x50
c00019bd:	77 5b                	ja     c0001a1a <dlmallopt+0x83>
c00019bf:	ba 08 00 00 00       	mov    edx,0x8
c00019c4:	85 db                	test   ebx,ebx
c00019c6:	74 12                	je     c00019da <dlmallopt+0x43>
c00019c8:	83 c3 0b             	add    ebx,0xb
c00019cb:	ba 10 00 00 00       	mov    edx,0x10
c00019d0:	83 fb 0f             	cmp    ebx,0xf
c00019d3:	76 05                	jbe    c00019da <dlmallopt+0x43>
c00019d5:	89 da                	mov    edx,ebx
c00019d7:	83 e2 f8             	and    edx,0xfffffff8
c00019da:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c00019df:	83 e0 03             	and    eax,0x3
c00019e2:	09 d0                	or     eax,edx
c00019e4:	a3 00 a0 02 c0       	mov    ds:0xc002a000,eax
c00019e9:	eb 31                	jmp    c0001a1c <dlmallopt+0x85>
c00019eb:	89 1d 44 a3 02 c0    	mov    DWORD PTR ds:0xc002a344,ebx
c00019f1:	eb 06                	jmp    c00019f9 <dlmallopt+0x62>
c00019f3:	89 1d 48 a3 02 c0    	mov    DWORD PTR ds:0xc002a348,ebx
c00019f9:	be 01 00 00 00       	mov    esi,0x1
c00019fe:	eb 1c                	jmp    c0001a1c <dlmallopt+0x85>
c0001a00:	89 1d 4c a3 02 c0    	mov    DWORD PTR ds:0xc002a34c,ebx
c0001a06:	eb f1                	jmp    c00019f9 <dlmallopt+0x62>
c0001a08:	31 f6                	xor    esi,esi
c0001a0a:	85 db                	test   ebx,ebx
c0001a0c:	75 0e                	jne    c0001a1c <dlmallopt+0x85>
c0001a0e:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c0001a18:	eb df                	jmp    c00019f9 <dlmallopt+0x62>
c0001a1a:	31 f6                	xor    esi,esi
c0001a1c:	89 f0                	mov    eax,esi
c0001a1e:	5b                   	pop    ebx
c0001a1f:	5e                   	pop    esi
c0001a20:	c3                   	ret    

c0001a21 <disk_status>:
c0001a21:	31 c0                	xor    eax,eax
c0001a23:	c3                   	ret    

c0001a24 <disk_initialize>:
c0001a24:	31 c0                	xor    eax,eax
c0001a26:	c3                   	ret    

c0001a27 <disk_read>:
c0001a27:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a2c:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a38:	e9 55 cb 01 00       	jmp    c001e592 <fatWrapperReadDisk>

c0001a3d <disk_write>:
c0001a3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a42:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a4e:	e9 86 cb 01 00       	jmp    c001e5d9 <fatWrapperWriteDisk>

c0001a53 <disk_ioctl>:
c0001a53:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a5c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a61:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a6d:	e9 ae cb 01 00       	jmp    c001e620 <fatWrapperIoctl>

c0001a72 <ld_word>:
c0001a72:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a76:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a79:	c1 e2 08             	shl    edx,0x8
c0001a7c:	09 d0                	or     eax,edx
c0001a7e:	c3                   	ret    

c0001a7f <ld_dword>:
c0001a7f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a83:	89 d1                	mov    ecx,edx
c0001a85:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a89:	c1 e1 08             	shl    ecx,0x8
c0001a8c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a8f:	09 ca                	or     edx,ecx
c0001a91:	c1 e2 08             	shl    edx,0x8
c0001a94:	09 d0                	or     eax,edx
c0001a96:	c3                   	ret    

c0001a97 <ld_qword>:
c0001a97:	57                   	push   edi
c0001a98:	56                   	push   esi
c0001a99:	53                   	push   ebx
c0001a9a:	31 db                	xor    ebx,ebx
c0001a9c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a9f:	89 df                	mov    edi,ebx
c0001aa1:	89 ce                	mov    esi,ecx
c0001aa3:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001aa7:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aab:	c1 e6 08             	shl    esi,0x8
c0001aae:	09 f2                	or     edx,esi
c0001ab0:	89 d6                	mov    esi,edx
c0001ab2:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ab6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aba:	c1 e6 08             	shl    esi,0x8
c0001abd:	09 f2                	or     edx,esi
c0001abf:	89 d6                	mov    esi,edx
c0001ac1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ac5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ac9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001acc:	c1 e6 08             	shl    esi,0x8
c0001acf:	89 fb                	mov    ebx,edi
c0001ad1:	09 f2                	or     edx,esi
c0001ad3:	89 d1                	mov    ecx,edx
c0001ad5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ad9:	c1 e1 08             	shl    ecx,0x8
c0001adc:	89 da                	mov    edx,ebx
c0001ade:	09 c8                	or     eax,ecx
c0001ae0:	5b                   	pop    ebx
c0001ae1:	5e                   	pop    esi
c0001ae2:	5f                   	pop    edi
c0001ae3:	c3                   	ret    

c0001ae4 <st_word>:
c0001ae4:	66 89 10             	mov    WORD PTR [eax],dx
c0001ae7:	c3                   	ret    

c0001ae8 <st_dword>:
c0001ae8:	89 10                	mov    DWORD PTR [eax],edx
c0001aea:	c3                   	ret    

c0001aeb <st_qword>:
c0001aeb:	89 10                	mov    DWORD PTR [eax],edx
c0001aed:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001af0:	c3                   	ret    

c0001af1 <mem_cpy>:
c0001af1:	85 c9                	test   ecx,ecx
c0001af3:	74 10                	je     c0001b05 <mem_cpy+0x14>
c0001af5:	57                   	push   edi
c0001af6:	01 c1                	add    ecx,eax
c0001af8:	56                   	push   esi
c0001af9:	89 c7                	mov    edi,eax
c0001afb:	89 d6                	mov    esi,edx
c0001afd:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001afe:	39 f9                	cmp    ecx,edi
c0001b00:	75 fb                	jne    c0001afd <mem_cpy+0xc>
c0001b02:	5e                   	pop    esi
c0001b03:	5f                   	pop    edi
c0001b04:	c3                   	ret    
c0001b05:	c3                   	ret    

c0001b06 <mem_set>:
c0001b06:	01 c1                	add    ecx,eax
c0001b08:	40                   	inc    eax
c0001b09:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b0c:	39 c8                	cmp    eax,ecx
c0001b0e:	75 f8                	jne    c0001b08 <mem_set+0x2>
c0001b10:	c3                   	ret    

c0001b11 <mem_cmp>:
c0001b11:	57                   	push   edi
c0001b12:	56                   	push   esi
c0001b13:	89 c6                	mov    esi,eax
c0001b15:	53                   	push   ebx
c0001b16:	46                   	inc    esi
c0001b17:	42                   	inc    edx
c0001b18:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b1c:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b20:	29 fb                	sub    ebx,edi
c0001b22:	89 cf                	mov    edi,ecx
c0001b24:	29 f7                	sub    edi,esi
c0001b26:	01 c7                	add    edi,eax
c0001b28:	74 04                	je     c0001b2e <mem_cmp+0x1d>
c0001b2a:	85 db                	test   ebx,ebx
c0001b2c:	74 e8                	je     c0001b16 <mem_cmp+0x5>
c0001b2e:	89 d8                	mov    eax,ebx
c0001b30:	5b                   	pop    ebx
c0001b31:	5e                   	pop    esi
c0001b32:	5f                   	pop    edi
c0001b33:	c3                   	ret    

c0001b34 <chk_chr>:
c0001b34:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b37:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b3a:	74 07                	je     c0001b43 <chk_chr+0xf>
c0001b3c:	39 d1                	cmp    ecx,edx
c0001b3e:	74 03                	je     c0001b43 <chk_chr+0xf>
c0001b40:	40                   	inc    eax
c0001b41:	eb f1                	jmp    c0001b34 <chk_chr>
c0001b43:	89 c8                	mov    eax,ecx
c0001b45:	c3                   	ret    

c0001b46 <dbc_1st>:
c0001b46:	31 c0                	xor    eax,eax
c0001b48:	c3                   	ret    

c0001b49 <dbc_2nd>:
c0001b49:	31 c0                	xor    eax,eax
c0001b4b:	c3                   	ret    

c0001b4c <tchar2uni>:
c0001b4c:	57                   	push   edi
c0001b4d:	89 c7                	mov    edi,eax
c0001b4f:	56                   	push   esi
c0001b50:	53                   	push   ebx
c0001b51:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b53:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b55:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b58:	84 c9                	test   cl,cl
c0001b5a:	78 0a                	js     c0001b66 <tchar2uni+0x1a>
c0001b5c:	0f b6 d1             	movzx  edx,cl
c0001b5f:	89 f3                	mov    ebx,esi
c0001b61:	e9 9f 00 00 00       	jmp    c0001c05 <tchar2uni+0xb9>
c0001b66:	88 ca                	mov    dl,cl
c0001b68:	83 e2 e0             	and    edx,0xffffffe0
c0001b6b:	80 fa c0             	cmp    dl,0xc0
c0001b6e:	75 0c                	jne    c0001b7c <tchar2uni+0x30>
c0001b70:	89 ca                	mov    edx,ecx
c0001b72:	b9 01 00 00 00       	mov    ecx,0x1
c0001b77:	83 e2 1f             	and    edx,0x1f
c0001b7a:	eb 2e                	jmp    c0001baa <tchar2uni+0x5e>
c0001b7c:	88 ca                	mov    dl,cl
c0001b7e:	83 e2 f0             	and    edx,0xfffffff0
c0001b81:	80 fa e0             	cmp    dl,0xe0
c0001b84:	75 0c                	jne    c0001b92 <tchar2uni+0x46>
c0001b86:	89 ca                	mov    edx,ecx
c0001b88:	b9 02 00 00 00       	mov    ecx,0x2
c0001b8d:	83 e2 0f             	and    edx,0xf
c0001b90:	eb 18                	jmp    c0001baa <tchar2uni+0x5e>
c0001b92:	88 ca                	mov    dl,cl
c0001b94:	83 e2 f8             	and    edx,0xfffffff8
c0001b97:	88 d0                	mov    al,dl
c0001b99:	83 ca ff             	or     edx,0xffffffff
c0001b9c:	3c f0                	cmp    al,0xf0
c0001b9e:	75 6c                	jne    c0001c0c <tchar2uni+0xc0>
c0001ba0:	89 ca                	mov    edx,ecx
c0001ba2:	b9 03 00 00 00       	mov    ecx,0x3
c0001ba7:	83 e2 07             	and    edx,0x7
c0001baa:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001bae:	46                   	inc    esi
c0001baf:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001bb2:	88 c8                	mov    al,cl
c0001bb4:	83 e0 c0             	and    eax,0xffffffc0
c0001bb7:	3c 80                	cmp    al,0x80
c0001bb9:	75 4e                	jne    c0001c09 <tchar2uni+0xbd>
c0001bbb:	c1 e2 06             	shl    edx,0x6
c0001bbe:	83 e1 3f             	and    ecx,0x3f
c0001bc1:	09 ca                	or     edx,ecx
c0001bc3:	39 de                	cmp    esi,ebx
c0001bc5:	75 e7                	jne    c0001bae <tchar2uni+0x62>
c0001bc7:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bca:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bd0:	77 37                	ja     c0001c09 <tchar2uni+0xbd>
c0001bd2:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bd8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bde:	76 29                	jbe    c0001c09 <tchar2uni+0xbd>
c0001be0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001be6:	76 1d                	jbe    c0001c05 <tchar2uni+0xb9>
c0001be8:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bee:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bf4:	c1 e1 06             	shl    ecx,0x6
c0001bf7:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bfd:	09 ca                	or     edx,ecx
c0001bff:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001c05:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c07:	eb 03                	jmp    c0001c0c <tchar2uni+0xc0>
c0001c09:	83 ca ff             	or     edx,0xffffffff
c0001c0c:	5b                   	pop    ebx
c0001c0d:	89 d0                	mov    eax,edx
c0001c0f:	5e                   	pop    esi
c0001c10:	5f                   	pop    edi
c0001c11:	c3                   	ret    

c0001c12 <put_utf>:
c0001c12:	53                   	push   ebx
c0001c13:	83 f8 7f             	cmp    eax,0x7f
c0001c16:	89 c3                	mov    ebx,eax
c0001c18:	b0 00                	mov    al,0x0
c0001c1a:	77 11                	ja     c0001c2d <put_utf+0x1b>
c0001c1c:	85 c9                	test   ecx,ecx
c0001c1e:	0f 84 e5 00 00 00    	je     c0001d09 <put_utf+0xf7>
c0001c24:	88 1a                	mov    BYTE PTR [edx],bl
c0001c26:	b0 01                	mov    al,0x1
c0001c28:	e9 dc 00 00 00       	jmp    c0001d09 <put_utf+0xf7>
c0001c2d:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c33:	77 23                	ja     c0001c58 <put_utf+0x46>
c0001c35:	83 f9 01             	cmp    ecx,0x1
c0001c38:	0f 86 cb 00 00 00    	jbe    c0001d09 <put_utf+0xf7>
c0001c3e:	89 d8                	mov    eax,ebx
c0001c40:	83 e3 3f             	and    ebx,0x3f
c0001c43:	c1 e8 06             	shr    eax,0x6
c0001c46:	83 cb 80             	or     ebx,0xffffff80
c0001c49:	83 c8 c0             	or     eax,0xffffffc0
c0001c4c:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c4f:	88 02                	mov    BYTE PTR [edx],al
c0001c51:	b0 02                	mov    al,0x2
c0001c53:	e9 b1 00 00 00       	jmp    c0001d09 <put_utf+0xf7>
c0001c58:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c5e:	77 40                	ja     c0001ca0 <put_utf+0x8e>
c0001c60:	83 f9 02             	cmp    ecx,0x2
c0001c63:	0f 86 a0 00 00 00    	jbe    c0001d09 <put_utf+0xf7>
c0001c69:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c6f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c75:	0f 86 8e 00 00 00    	jbe    c0001d09 <put_utf+0xf7>
c0001c7b:	89 d8                	mov    eax,ebx
c0001c7d:	c1 e8 0c             	shr    eax,0xc
c0001c80:	83 c8 e0             	or     eax,0xffffffe0
c0001c83:	88 02                	mov    BYTE PTR [edx],al
c0001c85:	89 d8                	mov    eax,ebx
c0001c87:	83 e3 3f             	and    ebx,0x3f
c0001c8a:	c1 e8 06             	shr    eax,0x6
c0001c8d:	83 cb 80             	or     ebx,0xffffff80
c0001c90:	83 e0 3f             	and    eax,0x3f
c0001c93:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c96:	83 c8 80             	or     eax,0xffffff80
c0001c99:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c9c:	b0 03                	mov    al,0x3
c0001c9e:	eb 69                	jmp    c0001d09 <put_utf+0xf7>
c0001ca0:	83 f9 03             	cmp    ecx,0x3
c0001ca3:	76 64                	jbe    c0001d09 <put_utf+0xf7>
c0001ca5:	89 d9                	mov    ecx,ebx
c0001ca7:	0f b7 c3             	movzx  eax,bx
c0001caa:	66 31 c9             	xor    cx,cx
c0001cad:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001cb3:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001cb9:	c1 e9 06             	shr    ecx,0x6
c0001cbc:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001cc2:	77 43                	ja     c0001d07 <put_utf+0xf5>
c0001cc4:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cca:	77 3b                	ja     c0001d07 <put_utf+0xf5>
c0001ccc:	09 cb                	or     ebx,ecx
c0001cce:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cd4:	89 d8                	mov    eax,ebx
c0001cd6:	c1 e8 12             	shr    eax,0x12
c0001cd9:	83 c8 f0             	or     eax,0xfffffff0
c0001cdc:	88 02                	mov    BYTE PTR [edx],al
c0001cde:	89 d8                	mov    eax,ebx
c0001ce0:	c1 e8 0c             	shr    eax,0xc
c0001ce3:	83 e0 3f             	and    eax,0x3f
c0001ce6:	83 c8 80             	or     eax,0xffffff80
c0001ce9:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cec:	89 d8                	mov    eax,ebx
c0001cee:	83 e3 3f             	and    ebx,0x3f
c0001cf1:	c1 e8 06             	shr    eax,0x6
c0001cf4:	83 cb 80             	or     ebx,0xffffff80
c0001cf7:	83 e0 3f             	and    eax,0x3f
c0001cfa:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cfd:	83 c8 80             	or     eax,0xffffff80
c0001d00:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001d03:	b0 04                	mov    al,0x4
c0001d05:	eb 02                	jmp    c0001d09 <put_utf+0xf7>
c0001d07:	31 c0                	xor    eax,eax
c0001d09:	5b                   	pop    ebx
c0001d0a:	c3                   	ret    

c0001d0b <clst2sect>:
c0001d0b:	89 c1                	mov    ecx,eax
c0001d0d:	83 ea 02             	sub    edx,0x2
c0001d10:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001d13:	83 e8 02             	sub    eax,0x2
c0001d16:	39 d0                	cmp    eax,edx
c0001d18:	76 0d                	jbe    c0001d27 <clst2sect+0x1c>
c0001d1a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d1e:	f7 e2                	mul    edx
c0001d20:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d23:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d26:	c3                   	ret    
c0001d27:	31 c0                	xor    eax,eax
c0001d29:	31 d2                	xor    edx,edx
c0001d2b:	c3                   	ret    

c0001d2c <clmt_clust>:
c0001d2c:	57                   	push   edi
c0001d2d:	89 cf                	mov    edi,ecx
c0001d2f:	56                   	push   esi
c0001d30:	89 d6                	mov    esi,edx
c0001d32:	53                   	push   ebx
c0001d33:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d37:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d3a:	89 f2                	mov    edx,esi
c0001d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d3e:	c1 ef 09             	shr    edi,0x9
c0001d41:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d45:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d48:	89 f9                	mov    ecx,edi
c0001d4a:	31 ff                	xor    edi,edi
c0001d4c:	57                   	push   edi
c0001d4d:	56                   	push   esi
c0001d4e:	51                   	push   ecx
c0001d4f:	52                   	push   edx
c0001d50:	e8 07 16 02 00       	call   c002335c <__udivdi3>
c0001d55:	83 c4 10             	add    esp,0x10
c0001d58:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d5a:	85 d2                	test   edx,edx
c0001d5c:	74 10                	je     c0001d6e <clmt_clust+0x42>
c0001d5e:	39 d0                	cmp    eax,edx
c0001d60:	72 07                	jb     c0001d69 <clmt_clust+0x3d>
c0001d62:	29 d0                	sub    eax,edx
c0001d64:	83 c3 08             	add    ebx,0x8
c0001d67:	eb ef                	jmp    c0001d58 <clmt_clust+0x2c>
c0001d69:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d6c:	89 c2                	mov    edx,eax
c0001d6e:	5b                   	pop    ebx
c0001d6f:	89 d0                	mov    eax,edx
c0001d71:	5e                   	pop    esi
c0001d72:	5f                   	pop    edi
c0001d73:	c3                   	ret    

c0001d74 <pick_lfn>:
c0001d74:	55                   	push   ebp
c0001d75:	57                   	push   edi
c0001d76:	56                   	push   esi
c0001d77:	89 d6                	mov    esi,edx
c0001d79:	53                   	push   ebx
c0001d7a:	89 c3                	mov    ebx,eax
c0001d7c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d7f:	e8 ee fc ff ff       	call   c0001a72 <ld_word>
c0001d84:	66 85 c0             	test   ax,ax
c0001d87:	74 04                	je     c0001d8d <pick_lfn+0x19>
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	eb 5c                	jmp    c0001de9 <pick_lfn+0x75>
c0001d8d:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d90:	bd 01 00 00 00       	mov    ebp,0x1
c0001d95:	83 e1 bf             	and    ecx,0xffffffbf
c0001d98:	31 ff                	xor    edi,edi
c0001d9a:	49                   	dec    ecx
c0001d9b:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d9e:	0f b6 87 e0 5d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda220]
c0001da5:	01 f0                	add    eax,esi
c0001da7:	e8 c6 fc ff ff       	call   c0001a72 <ld_word>
c0001dac:	66 85 ed             	test   bp,bp
c0001daf:	74 11                	je     c0001dc2 <pick_lfn+0x4e>
c0001db1:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db7:	77 d0                	ja     c0001d89 <pick_lfn+0x15>
c0001db9:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001dbd:	89 c5                	mov    ebp,eax
c0001dbf:	41                   	inc    ecx
c0001dc0:	eb 04                	jmp    c0001dc6 <pick_lfn+0x52>
c0001dc2:	66 40                	inc    ax
c0001dc4:	75 c3                	jne    c0001d89 <pick_lfn+0x15>
c0001dc6:	47                   	inc    edi
c0001dc7:	83 ff 0d             	cmp    edi,0xd
c0001dca:	75 d2                	jne    c0001d9e <pick_lfn+0x2a>
c0001dcc:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001dcf:	74 13                	je     c0001de4 <pick_lfn+0x70>
c0001dd1:	66 85 ed             	test   bp,bp
c0001dd4:	74 0e                	je     c0001de4 <pick_lfn+0x70>
c0001dd6:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ddc:	77 ab                	ja     c0001d89 <pick_lfn+0x15>
c0001dde:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001de4:	b8 01 00 00 00       	mov    eax,0x1
c0001de9:	5b                   	pop    ebx
c0001dea:	5e                   	pop    esi
c0001deb:	5f                   	pop    edi
c0001dec:	5d                   	pop    ebp
c0001ded:	c3                   	ret    

c0001dee <put_lfn>:
c0001dee:	55                   	push   ebp
c0001def:	31 ed                	xor    ebp,ebp
c0001df1:	57                   	push   edi
c0001df2:	89 d7                	mov    edi,edx
c0001df4:	56                   	push   esi
c0001df5:	31 f6                	xor    esi,esi
c0001df7:	53                   	push   ebx
c0001df8:	83 ec 08             	sub    esp,0x8
c0001dfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dfe:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e06:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e0c:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e0f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	e8 cb fc ff ff       	call   c0001ae4 <st_word>
c0001e19:	0f b6 d9             	movzx  ebx,cl
c0001e1c:	4b                   	dec    ebx
c0001e1d:	6b db 0d             	imul   ebx,ebx,0xd
c0001e20:	66 83 fe ff          	cmp    si,0xffff
c0001e24:	74 08                	je     c0001e2e <put_lfn+0x40>
c0001e26:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e29:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e2d:	43                   	inc    ebx
c0001e2e:	0f b6 85 e0 5d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda220]
c0001e35:	0f b7 d6             	movzx  edx,si
c0001e38:	01 f8                	add    eax,edi
c0001e3a:	e8 a5 fc ff ff       	call   c0001ae4 <st_word>
c0001e3f:	66 85 f6             	test   si,si
c0001e42:	75 03                	jne    c0001e47 <put_lfn+0x59>
c0001e44:	83 ce ff             	or     esi,0xffffffff
c0001e47:	45                   	inc    ebp
c0001e48:	83 fd 0d             	cmp    ebp,0xd
c0001e4b:	75 d3                	jne    c0001e20 <put_lfn+0x32>
c0001e4d:	66 46                	inc    si
c0001e4f:	74 0a                	je     c0001e5b <put_lfn+0x6d>
c0001e51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e54:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e59:	75 09                	jne    c0001e64 <put_lfn+0x76>
c0001e5b:	88 c8                	mov    al,cl
c0001e5d:	83 c8 40             	or     eax,0x40
c0001e60:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e64:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e68:	88 07                	mov    BYTE PTR [edi],al
c0001e6a:	83 c4 08             	add    esp,0x8
c0001e6d:	5b                   	pop    ebx
c0001e6e:	5e                   	pop    esi
c0001e6f:	5f                   	pop    edi
c0001e70:	5d                   	pop    ebp
c0001e71:	c3                   	ret    

c0001e72 <gen_numname>:
c0001e72:	57                   	push   edi
c0001e73:	89 cf                	mov    edi,ecx
c0001e75:	56                   	push   esi
c0001e76:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e7b:	53                   	push   ebx
c0001e7c:	89 c6                	mov    esi,eax
c0001e7e:	83 ec 10             	sub    esp,0x10
c0001e81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e85:	e8 67 fc ff ff       	call   c0001af1 <mem_cpy>
c0001e8a:	83 fb 05             	cmp    ebx,0x5
c0001e8d:	76 2d                	jbe    c0001ebc <gen_numname+0x4a>
c0001e8f:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e92:	66 85 c0             	test   ax,ax
c0001e95:	74 25                	je     c0001ebc <gen_numname+0x4a>
c0001e97:	83 c7 02             	add    edi,0x2
c0001e9a:	ba 10 00 00 00       	mov    edx,0x10
c0001e9f:	01 db                	add    ebx,ebx
c0001ea1:	89 c1                	mov    ecx,eax
c0001ea3:	66 d1 e8             	shr    ax,1
c0001ea6:	83 e1 01             	and    ecx,0x1
c0001ea9:	01 cb                	add    ebx,ecx
c0001eab:	0f ba e3 10          	bt     ebx,0x10
c0001eaf:	73 06                	jae    c0001eb7 <gen_numname+0x45>
c0001eb1:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001eb7:	4a                   	dec    edx
c0001eb8:	75 e5                	jne    c0001e9f <gen_numname+0x2d>
c0001eba:	eb d3                	jmp    c0001e8f <gen_numname+0x1d>
c0001ebc:	b8 07 00 00 00       	mov    eax,0x7
c0001ec1:	88 d9                	mov    cl,bl
c0001ec3:	83 e1 0f             	and    ecx,0xf
c0001ec6:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ec9:	80 fa 39             	cmp    dl,0x39
c0001ecc:	76 03                	jbe    c0001ed1 <gen_numname+0x5f>
c0001ece:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ed1:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ed4:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ed8:	89 da                	mov    edx,ebx
c0001eda:	c1 ea 04             	shr    edx,0x4
c0001edd:	83 fb 0f             	cmp    ebx,0xf
c0001ee0:	76 06                	jbe    c0001ee8 <gen_numname+0x76>
c0001ee2:	89 c8                	mov    eax,ecx
c0001ee4:	89 d3                	mov    ebx,edx
c0001ee6:	eb d9                	jmp    c0001ec1 <gen_numname+0x4f>
c0001ee8:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001eed:	31 d2                	xor    edx,edx
c0001eef:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ef2:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ef5:	39 ca                	cmp    edx,ecx
c0001ef7:	73 18                	jae    c0001f11 <gen_numname+0x9f>
c0001ef9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001efc:	3c 20                	cmp    al,0x20
c0001efe:	74 11                	je     c0001f11 <gen_numname+0x9f>
c0001f00:	e8 41 fc ff ff       	call   c0001b46 <dbc_1st>
c0001f05:	85 c0                	test   eax,eax
c0001f07:	74 05                	je     c0001f0e <gen_numname+0x9c>
c0001f09:	39 d3                	cmp    ebx,edx
c0001f0b:	74 04                	je     c0001f11 <gen_numname+0x9f>
c0001f0d:	42                   	inc    edx
c0001f0e:	42                   	inc    edx
c0001f0f:	eb e1                	jmp    c0001ef2 <gen_numname+0x80>
c0001f11:	b0 20                	mov    al,0x20
c0001f13:	83 f9 07             	cmp    ecx,0x7
c0001f16:	77 05                	ja     c0001f1d <gen_numname+0xab>
c0001f18:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f1c:	41                   	inc    ecx
c0001f1d:	42                   	inc    edx
c0001f1e:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f22:	83 fa 07             	cmp    edx,0x7
c0001f25:	76 ea                	jbe    c0001f11 <gen_numname+0x9f>
c0001f27:	83 c4 10             	add    esp,0x10
c0001f2a:	5b                   	pop    ebx
c0001f2b:	5e                   	pop    esi
c0001f2c:	5f                   	pop    edi
c0001f2d:	c3                   	ret    

c0001f2e <sum_sfn>:
c0001f2e:	31 c9                	xor    ecx,ecx
c0001f30:	31 d2                	xor    edx,edx
c0001f32:	d0 ca                	ror    dl,1
c0001f34:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f37:	41                   	inc    ecx
c0001f38:	83 f9 0b             	cmp    ecx,0xb
c0001f3b:	75 f5                	jne    c0001f32 <sum_sfn+0x4>
c0001f3d:	88 d0                	mov    al,dl
c0001f3f:	c3                   	ret    

c0001f40 <xdir_sum>:
c0001f40:	56                   	push   esi
c0001f41:	31 c9                	xor    ecx,ecx
c0001f43:	53                   	push   ebx
c0001f44:	31 d2                	xor    edx,edx
c0001f46:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f4a:	43                   	inc    ebx
c0001f4b:	c1 e3 05             	shl    ebx,0x5
c0001f4e:	83 fa 02             	cmp    edx,0x2
c0001f51:	74 0b                	je     c0001f5e <xdir_sum+0x1e>
c0001f53:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f57:	66 d1 c9             	ror    cx,1
c0001f5a:	01 f1                	add    ecx,esi
c0001f5c:	eb 05                	jmp    c0001f63 <xdir_sum+0x23>
c0001f5e:	ba 03 00 00 00       	mov    edx,0x3
c0001f63:	42                   	inc    edx
c0001f64:	39 d3                	cmp    ebx,edx
c0001f66:	77 e6                	ja     c0001f4e <xdir_sum+0xe>
c0001f68:	89 c8                	mov    eax,ecx
c0001f6a:	5b                   	pop    ebx
c0001f6b:	5e                   	pop    esi
c0001f6c:	c3                   	ret    

c0001f6d <xsum32>:
c0001f6d:	d1 ca                	ror    edx,1
c0001f6f:	0f b6 c0             	movzx  eax,al
c0001f72:	01 d0                	add    eax,edx
c0001f74:	c3                   	ret    

c0001f75 <get_xfileinfo>:
c0001f75:	55                   	push   ebp
c0001f76:	31 c9                	xor    ecx,ecx
c0001f78:	57                   	push   edi
c0001f79:	bd 40 00 00 00       	mov    ebp,0x40
c0001f7e:	56                   	push   esi
c0001f7f:	31 ff                	xor    edi,edi
c0001f81:	53                   	push   ebx
c0001f82:	89 c6                	mov    esi,eax
c0001f84:	83 ec 0c             	sub    esp,0xc
c0001f87:	89 d3                	mov    ebx,edx
c0001f89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f90:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f94:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f97:	76 6d                	jbe    c0002006 <get_xfileinfo+0x91>
c0001f99:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f9f:	76 0b                	jbe    c0001fac <get_xfileinfo+0x37>
c0001fa1:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001fa5:	bf 01 00 00 00       	mov    edi,0x1
c0001faa:	eb 63                	jmp    c000200f <get_xfileinfo+0x9a>
c0001fac:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001fb2:	75 03                	jne    c0001fb7 <get_xfileinfo+0x42>
c0001fb4:	83 c5 02             	add    ebp,0x2
c0001fb7:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fba:	83 c5 02             	add    ebp,0x2
c0001fbd:	e8 b0 fa ff ff       	call   c0001a72 <ld_word>
c0001fc2:	ff 04 24             	inc    DWORD PTR [esp]
c0001fc5:	66 85 c9             	test   cx,cx
c0001fc8:	75 0d                	jne    c0001fd7 <get_xfileinfo+0x62>
c0001fca:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fd0:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fd5:	76 2b                	jbe    c0002002 <get_xfileinfo+0x8d>
c0001fd7:	c1 e1 10             	shl    ecx,0x10
c0001fda:	ba ff 00 00 00       	mov    edx,0xff
c0001fdf:	0f b7 c0             	movzx  eax,ax
c0001fe2:	29 fa                	sub    edx,edi
c0001fe4:	09 c8                	or     eax,ecx
c0001fe6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fea:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001ff2:	e8 1b fc ff ff       	call   c0001c12 <put_utf>
c0001ff7:	84 c0                	test   al,al
c0001ff9:	74 a6                	je     c0001fa1 <get_xfileinfo+0x2c>
c0001ffb:	0f b6 c0             	movzx  eax,al
c0001ffe:	01 c7                	add    edi,eax
c0002000:	31 c0                	xor    eax,eax
c0002002:	89 c1                	mov    ecx,eax
c0002004:	eb 8a                	jmp    c0001f90 <get_xfileinfo+0x1b>
c0002006:	85 ff                	test   edi,edi
c0002008:	74 97                	je     c0001fa1 <get_xfileinfo+0x2c>
c000200a:	66 85 c9             	test   cx,cx
c000200d:	75 92                	jne    c0001fa1 <get_xfileinfo+0x2c>
c000200f:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002014:	31 c0                	xor    eax,eax
c0002016:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c000201a:	31 d2                	xor    edx,edx
c000201c:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000201f:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002022:	80 e1 10             	and    cl,0x10
c0002025:	75 08                	jne    c000202f <get_xfileinfo+0xba>
c0002027:	8d 46 38             	lea    eax,[esi+0x38]
c000202a:	e8 68 fa ff ff       	call   c0001a97 <ld_qword>
c000202f:	89 03                	mov    DWORD PTR [ebx],eax
c0002031:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002034:	8d 46 0c             	lea    eax,[esi+0xc]
c0002037:	e8 36 fa ff ff       	call   c0001a72 <ld_word>
c000203c:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002040:	8d 46 0e             	lea    eax,[esi+0xe]
c0002043:	e8 2a fa ff ff       	call   c0001a72 <ld_word>
c0002048:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000204c:	83 c4 0c             	add    esp,0xc
c000204f:	5b                   	pop    ebx
c0002050:	5e                   	pop    esi
c0002051:	5f                   	pop    edi
c0002052:	5d                   	pop    ebp
c0002053:	c3                   	ret    

c0002054 <get_ldnumber>:
c0002054:	8b 10                	mov    edx,DWORD PTR [eax]
c0002056:	85 d2                	test   edx,edx
c0002058:	74 14                	je     c000206e <get_ldnumber+0x1a>
c000205a:	56                   	push   esi
c000205b:	53                   	push   ebx
c000205c:	89 d3                	mov    ebx,edx
c000205e:	43                   	inc    ebx
c000205f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002062:	80 f9 1f             	cmp    cl,0x1f
c0002065:	76 0d                	jbe    c0002074 <get_ldnumber+0x20>
c0002067:	80 f9 3a             	cmp    cl,0x3a
c000206a:	75 f2                	jne    c000205e <get_ldnumber+0xa>
c000206c:	eb 0a                	jmp    c0002078 <get_ldnumber+0x24>
c000206e:	83 c9 ff             	or     ecx,0xffffffff
c0002071:	89 c8                	mov    eax,ecx
c0002073:	c3                   	ret    
c0002074:	31 c9                	xor    ecx,ecx
c0002076:	eb 24                	jmp    c000209c <get_ldnumber+0x48>
c0002078:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000207b:	8d 4e d0             	lea    ecx,[esi-0x30]
c000207e:	80 f9 09             	cmp    cl,0x9
c0002081:	77 16                	ja     c0002099 <get_ldnumber+0x45>
c0002083:	83 c2 02             	add    edx,0x2
c0002086:	83 c9 ff             	or     ecx,0xffffffff
c0002089:	39 d3                	cmp    ebx,edx
c000208b:	75 0f                	jne    c000209c <get_ldnumber+0x48>
c000208d:	89 f2                	mov    edx,esi
c000208f:	89 18                	mov    DWORD PTR [eax],ebx
c0002091:	0f be ca             	movsx  ecx,dl
c0002094:	83 e9 30             	sub    ecx,0x30
c0002097:	eb 03                	jmp    c000209c <get_ldnumber+0x48>
c0002099:	83 c9 ff             	or     ecx,0xffffffff
c000209c:	89 c8                	mov    eax,ecx
c000209e:	5b                   	pop    ebx
c000209f:	5e                   	pop    esi
c00020a0:	c3                   	ret    

c00020a1 <crc32>:
c00020a1:	56                   	push   esi
c00020a2:	89 d6                	mov    esi,edx
c00020a4:	53                   	push   ebx
c00020a5:	b2 01                	mov    dl,0x1
c00020a7:	bb 08 00 00 00       	mov    ebx,0x8
c00020ac:	89 f1                	mov    ecx,esi
c00020ae:	84 d1                	test   cl,dl
c00020b0:	0f 95 c1             	setne  cl
c00020b3:	0f b6 c9             	movzx  ecx,cl
c00020b6:	31 c1                	xor    ecx,eax
c00020b8:	89 c8                	mov    eax,ecx
c00020ba:	d1 e8                	shr    eax,1
c00020bc:	80 e1 01             	and    cl,0x1
c00020bf:	74 05                	je     c00020c6 <crc32+0x25>
c00020c1:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020c6:	d1 e2                	shl    edx,1
c00020c8:	4b                   	dec    ebx
c00020c9:	75 e1                	jne    c00020ac <crc32+0xb>
c00020cb:	5b                   	pop    ebx
c00020cc:	5e                   	pop    esi
c00020cd:	c3                   	ret    

c00020ce <test_gpt_header>:
c00020ce:	55                   	push   ebp
c00020cf:	b9 10 00 00 00       	mov    ecx,0x10
c00020d4:	57                   	push   edi
c00020d5:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00020da:	56                   	push   esi
c00020db:	31 ff                	xor    edi,edi
c00020dd:	53                   	push   ebx
c00020de:	89 c3                	mov    ebx,eax
c00020e0:	e8 2c fa ff ff       	call   c0001b11 <mem_cmp>
c00020e5:	85 c0                	test   eax,eax
c00020e7:	75 55                	jne    c000213e <test_gpt_header+0x70>
c00020e9:	89 c7                	mov    edi,eax
c00020eb:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020f0:	83 ce ff             	or     esi,0xffffffff
c00020f3:	31 d2                	xor    edx,edx
c00020f5:	83 fd 03             	cmp    ebp,0x3
c00020f8:	76 05                	jbe    c00020ff <test_gpt_header+0x31>
c00020fa:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020ff:	89 f0                	mov    eax,esi
c0002101:	45                   	inc    ebp
c0002102:	e8 9a ff ff ff       	call   c00020a1 <crc32>
c0002107:	83 fd 4c             	cmp    ebp,0x4c
c000210a:	89 c6                	mov    esi,eax
c000210c:	75 e5                	jne    c00020f3 <test_gpt_header+0x25>
c000210e:	8d 43 10             	lea    eax,[ebx+0x10]
c0002111:	f7 d6                	not    esi
c0002113:	e8 67 f9 ff ff       	call   c0001a7f <ld_dword>
c0002118:	39 c6                	cmp    esi,eax
c000211a:	75 22                	jne    c000213e <test_gpt_header+0x70>
c000211c:	8d 43 54             	lea    eax,[ebx+0x54]
c000211f:	e8 5b f9 ff ff       	call   c0001a7f <ld_dword>
c0002124:	83 c0 80             	add    eax,0xffffff80
c0002127:	75 15                	jne    c000213e <test_gpt_header+0x70>
c0002129:	8d 43 50             	lea    eax,[ebx+0x50]
c000212c:	e8 4e f9 ff ff       	call   c0001a7f <ld_dword>
c0002131:	3d 80 00 00 00       	cmp    eax,0x80
c0002136:	0f 96 c0             	setbe  al
c0002139:	0f b6 c0             	movzx  eax,al
c000213c:	89 c7                	mov    edi,eax
c000213e:	5b                   	pop    ebx
c000213f:	89 f8                	mov    eax,edi
c0002141:	5e                   	pop    esi
c0002142:	5f                   	pop    edi
c0002143:	5d                   	pop    ebp
c0002144:	c3                   	ret    

c0002145 <make_rand>:
c0002145:	56                   	push   esi
c0002146:	85 c0                	test   eax,eax
c0002148:	53                   	push   ebx
c0002149:	75 05                	jne    c0002150 <make_rand+0xb>
c000214b:	b8 01 00 00 00       	mov    eax,0x1
c0002150:	01 d1                	add    ecx,edx
c0002152:	bb 08 00 00 00       	mov    ebx,0x8
c0002157:	89 c6                	mov    esi,eax
c0002159:	d1 e8                	shr    eax,1
c000215b:	83 e6 01             	and    esi,0x1
c000215e:	85 f6                	test   esi,esi
c0002160:	74 05                	je     c0002167 <make_rand+0x22>
c0002162:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002167:	4b                   	dec    ebx
c0002168:	75 ed                	jne    c0002157 <make_rand+0x12>
c000216a:	42                   	inc    edx
c000216b:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000216e:	39 ca                	cmp    edx,ecx
c0002170:	75 e0                	jne    c0002152 <make_rand+0xd>
c0002172:	5b                   	pop    ebx
c0002173:	5e                   	pop    esi
c0002174:	c3                   	ret    

c0002175 <validate>:
c0002175:	56                   	push   esi
c0002176:	53                   	push   ebx
c0002177:	89 d6                	mov    esi,edx
c0002179:	51                   	push   ecx
c000217a:	85 c0                	test   eax,eax
c000217c:	75 09                	jne    c0002187 <validate+0x12>
c000217e:	b8 09 00 00 00       	mov    eax,0x9
c0002183:	31 c9                	xor    ecx,ecx
c0002185:	eb 2f                	jmp    c00021b6 <validate+0x41>
c0002187:	89 c3                	mov    ebx,eax
c0002189:	8b 00                	mov    eax,DWORD PTR [eax]
c000218b:	85 c0                	test   eax,eax
c000218d:	74 ef                	je     c000217e <validate+0x9>
c000218f:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002192:	74 ea                	je     c000217e <validate+0x9>
c0002194:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002198:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000219c:	75 e0                	jne    c000217e <validate+0x9>
c000219e:	83 ec 0c             	sub    esp,0xc
c00021a1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021a5:	50                   	push   eax
c00021a6:	e8 76 f8 ff ff       	call   c0001a21 <disk_status>
c00021ab:	83 c4 10             	add    esp,0x10
c00021ae:	a8 01                	test   al,0x1
c00021b0:	75 cc                	jne    c000217e <validate+0x9>
c00021b2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021b4:	31 c0                	xor    eax,eax
c00021b6:	89 0e                	mov    DWORD PTR [esi],ecx
c00021b8:	5a                   	pop    edx
c00021b9:	5b                   	pop    ebx
c00021ba:	5e                   	pop    esi
c00021bb:	c3                   	ret    

c00021bc <sync_window>:
c00021bc:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021c0:	0f 84 85 00 00 00    	je     c000224b <sync_window+0x8f>
c00021c6:	55                   	push   ebp
c00021c7:	8d 68 54             	lea    ebp,[eax+0x54]
c00021ca:	57                   	push   edi
c00021cb:	56                   	push   esi
c00021cc:	53                   	push   ebx
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	83 ec 28             	sub    esp,0x28
c00021d2:	6a 01                	push   0x1
c00021d4:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021d7:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021da:	55                   	push   ebp
c00021db:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021df:	50                   	push   eax
c00021e0:	e8 58 f8 ff ff       	call   c0001a3d <disk_write>
c00021e5:	83 c4 20             	add    esp,0x20
c00021e8:	ba 01 00 00 00       	mov    edx,0x1
c00021ed:	85 c0                	test   eax,eax
c00021ef:	75 50                	jne    c0002241 <sync_window+0x85>
c00021f1:	31 ff                	xor    edi,edi
c00021f3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021f6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021fa:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002201:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002204:	89 c6                	mov    esi,eax
c0002206:	89 d7                	mov    edi,edx
c0002208:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000220b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000220f:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002212:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002216:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c000221a:	73 23                	jae    c000223f <sync_window+0x83>
c000221c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002220:	75 1d                	jne    c000223f <sync_window+0x83>
c0002222:	83 ec 0c             	sub    esp,0xc
c0002225:	6a 01                	push   0x1
c0002227:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000222b:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000222f:	52                   	push   edx
c0002230:	50                   	push   eax
c0002231:	55                   	push   ebp
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 01 f8 ff ff       	call   c0001a3d <disk_write>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	31 d2                	xor    edx,edx
c0002241:	83 c4 1c             	add    esp,0x1c
c0002244:	89 d0                	mov    eax,edx
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    
c000224b:	31 d2                	xor    edx,edx
c000224d:	89 d0                	mov    eax,edx
c000224f:	c3                   	ret    

c0002250 <move_window>:
c0002250:	56                   	push   esi
c0002251:	53                   	push   ebx
c0002252:	89 c3                	mov    ebx,eax
c0002254:	83 ec 14             	sub    esp,0x14
c0002257:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000225a:	75 07                	jne    c0002263 <move_window+0x13>
c000225c:	31 f6                	xor    esi,esi
c000225e:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002261:	74 59                	je     c00022bc <move_window+0x6c>
c0002263:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002267:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000226b:	89 d8                	mov    eax,ebx
c000226d:	e8 4a ff ff ff       	call   c00021bc <sync_window>
c0002272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002276:	89 c6                	mov    esi,eax
c0002278:	85 c0                	test   eax,eax
c000227a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000227e:	75 3c                	jne    c00022bc <move_window+0x6c>
c0002280:	83 ec 0c             	sub    esp,0xc
c0002283:	8d 43 54             	lea    eax,[ebx+0x54]
c0002286:	6a 01                	push   0x1
c0002288:	51                   	push   ecx
c0002289:	52                   	push   edx
c000228a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000228e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002292:	50                   	push   eax
c0002293:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002297:	50                   	push   eax
c0002298:	e8 8a f7 ff ff       	call   c0001a27 <disk_read>
c000229d:	83 c4 20             	add    esp,0x20
c00022a0:	85 c0                	test   eax,eax
c00022a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00022a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00022aa:	74 0a                	je     c00022b6 <move_window+0x66>
c00022ac:	83 ca ff             	or     edx,0xffffffff
c00022af:	be 01 00 00 00       	mov    esi,0x1
c00022b4:	89 d1                	mov    ecx,edx
c00022b6:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00022b9:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00022bc:	89 f0                	mov    eax,esi
c00022be:	83 c4 14             	add    esp,0x14
c00022c1:	5b                   	pop    ebx
c00022c2:	5e                   	pop    esi
c00022c3:	c3                   	ret    

c00022c4 <check_fs>:
c00022c4:	53                   	push   ebx
c00022c5:	89 c3                	mov    ebx,eax
c00022c7:	83 ec 08             	sub    esp,0x8
c00022ca:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022ce:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022d5:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022dc:	e8 6f ff ff ff       	call   c0002250 <move_window>
c00022e1:	ba 04 00 00 00       	mov    edx,0x4
c00022e6:	85 c0                	test   eax,eax
c00022e8:	0f 85 89 00 00 00    	jne    c0002377 <check_fs+0xb3>
c00022ee:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022f4:	e8 79 f7 ff ff       	call   c0001a72 <ld_word>
c00022f9:	ba 03 00 00 00       	mov    edx,0x3
c00022fe:	66 3d 55 aa          	cmp    ax,0xaa55
c0002302:	75 73                	jne    c0002377 <check_fs+0xb3>
c0002304:	ba 00 5e 02 c0       	mov    edx,0xc0025e00
c0002309:	8d 43 54             	lea    eax,[ebx+0x54]
c000230c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002311:	e8 fb f7 ff ff       	call   c0001b11 <mem_cmp>
c0002316:	ba 01 00 00 00       	mov    edx,0x1
c000231b:	85 c0                	test   eax,eax
c000231d:	74 58                	je     c0002377 <check_fs+0xb3>
c000231f:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002322:	8d 50 18             	lea    edx,[eax+0x18]
c0002325:	80 fa 01             	cmp    dl,0x1
c0002328:	76 09                	jbe    c0002333 <check_fs+0x6f>
c000232a:	ba 02 00 00 00       	mov    edx,0x2
c000232f:	3c eb                	cmp    al,0xeb
c0002331:	75 44                	jne    c0002377 <check_fs+0xb3>
c0002333:	ba b8 8a 02 c0       	mov    edx,0xc0028ab8
c0002338:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000233e:	b9 03 00 00 00       	mov    ecx,0x3
c0002343:	e8 c9 f7 ff ff       	call   c0001b11 <mem_cmp>
c0002348:	31 d2                	xor    edx,edx
c000234a:	85 c0                	test   eax,eax
c000234c:	74 29                	je     c0002377 <check_fs+0xb3>
c000234e:	ba 0c 5e 02 c0       	mov    edx,0xc0025e0c
c0002353:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002359:	b9 05 00 00 00       	mov    ecx,0x5
c000235e:	e8 ae f7 ff ff       	call   c0001b11 <mem_cmp>
c0002363:	31 d2                	xor    edx,edx
c0002365:	85 c0                	test   eax,eax
c0002367:	74 0e                	je     c0002377 <check_fs+0xb3>
c0002369:	31 d2                	xor    edx,edx
c000236b:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002372:	0f 95 c2             	setne  dl
c0002375:	01 d2                	add    edx,edx
c0002377:	89 d0                	mov    eax,edx
c0002379:	83 c4 08             	add    esp,0x8
c000237c:	5b                   	pop    ebx
c000237d:	c3                   	ret    

c000237e <find_volume>:
c000237e:	55                   	push   ebp
c000237f:	31 c9                	xor    ecx,ecx
c0002381:	57                   	push   edi
c0002382:	56                   	push   esi
c0002383:	89 d6                	mov    esi,edx
c0002385:	53                   	push   ebx
c0002386:	31 d2                	xor    edx,edx
c0002388:	83 ec 3c             	sub    esp,0x3c
c000238b:	89 c3                	mov    ebx,eax
c000238d:	e8 32 ff ff ff       	call   c00022c4 <check_fs>
c0002392:	83 f8 02             	cmp    eax,0x2
c0002395:	74 0e                	je     c00023a5 <find_volume+0x27>
c0002397:	0f 87 5d 01 00 00    	ja     c00024fa <find_volume+0x17c>
c000239d:	85 f6                	test   esi,esi
c000239f:	0f 84 55 01 00 00    	je     c00024fa <find_volume+0x17c>
c00023a5:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00023ac:	0f 85 dd 00 00 00    	jne    c000248f <find_volume+0x111>
c00023b2:	31 c9                	xor    ecx,ecx
c00023b4:	ba 01 00 00 00       	mov    edx,0x1
c00023b9:	89 d8                	mov    eax,ebx
c00023bb:	e8 90 fe ff ff       	call   c0002250 <move_window>
c00023c0:	85 c0                	test   eax,eax
c00023c2:	74 0a                	je     c00023ce <find_volume+0x50>
c00023c4:	b8 04 00 00 00       	mov    eax,0x4
c00023c9:	e9 2c 01 00 00       	jmp    c00024fa <find_volume+0x17c>
c00023ce:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023d1:	89 e8                	mov    eax,ebp
c00023d3:	e8 f6 fc ff ff       	call   c00020ce <test_gpt_header>
c00023d8:	85 c0                	test   eax,eax
c00023da:	75 0a                	jne    c00023e6 <find_volume+0x68>
c00023dc:	b8 03 00 00 00       	mov    eax,0x3
c00023e1:	e9 14 01 00 00       	jmp    c00024fa <find_volume+0x17c>
c00023e6:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023ec:	e8 8e f6 ff ff       	call   c0001a7f <ld_dword>
c00023f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023f5:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023fb:	e8 97 f6 ff ff       	call   c0001a97 <ld_qword>
c0002400:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002408:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000240c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002410:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002418:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000241c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002420:	74 ba                	je     c00023dc <find_volume+0x5e>
c0002422:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002426:	31 c9                	xor    ecx,ecx
c0002428:	c1 e7 07             	shl    edi,0x7
c000242b:	89 d8                	mov    eax,ebx
c000242d:	89 fa                	mov    edx,edi
c000242f:	c1 ea 09             	shr    edx,0x9
c0002432:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002436:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000243a:	e8 11 fe ff ff       	call   c0002250 <move_window>
c000243f:	85 c0                	test   eax,eax
c0002441:	75 81                	jne    c00023c4 <find_volume+0x46>
c0002443:	81 e7 80 01 00 00    	and    edi,0x180
c0002449:	b9 10 00 00 00       	mov    ecx,0x10
c000244e:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002452:	ba f0 5d 02 c0       	mov    edx,0xc0025df0
c0002457:	e8 b5 f6 ff ff       	call   c0001b11 <mem_cmp>
c000245c:	85 c0                	test   eax,eax
c000245e:	75 29                	jne    c0002489 <find_volume+0x10b>
c0002460:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002464:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002468:	e8 2a f6 ff ff       	call   c0001a97 <ld_qword>
c000246d:	89 d1                	mov    ecx,edx
c000246f:	89 c2                	mov    edx,eax
c0002471:	89 d8                	mov    eax,ebx
c0002473:	e8 4c fe ff ff       	call   c00022c4 <check_fs>
c0002478:	85 f6                	test   esi,esi
c000247a:	75 07                	jne    c0002483 <find_volume+0x105>
c000247c:	83 f8 01             	cmp    eax,0x1
c000247f:	77 08                	ja     c0002489 <find_volume+0x10b>
c0002481:	eb 77                	jmp    c00024fa <find_volume+0x17c>
c0002483:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002487:	74 71                	je     c00024fa <find_volume+0x17c>
c0002489:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000248d:	eb 89                	jmp    c0002418 <find_volume+0x9a>
c000248f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002493:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002499:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000249f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a3:	89 cd                	mov    ebp,ecx
c00024a5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00024a9:	89 f8                	mov    eax,edi
c00024ab:	83 c7 10             	add    edi,0x10
c00024ae:	e8 cc f5 ff ff       	call   c0001a7f <ld_dword>
c00024b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00024b7:	89 01                	mov    DWORD PTR [ecx],eax
c00024b9:	83 c1 04             	add    ecx,0x4
c00024bc:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024c0:	75 e3                	jne    c00024a5 <find_volume+0x127>
c00024c2:	31 ff                	xor    edi,edi
c00024c4:	85 f6                	test   esi,esi
c00024c6:	74 03                	je     c00024cb <find_volume+0x14d>
c00024c8:	8d 7e ff             	lea    edi,[esi-0x1]
c00024cb:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024cf:	85 d2                	test   edx,edx
c00024d1:	74 14                	je     c00024e7 <find_volume+0x169>
c00024d3:	31 c9                	xor    ecx,ecx
c00024d5:	89 d8                	mov    eax,ebx
c00024d7:	e8 e8 fd ff ff       	call   c00022c4 <check_fs>
c00024dc:	83 f8 01             	cmp    eax,0x1
c00024df:	76 19                	jbe    c00024fa <find_volume+0x17c>
c00024e1:	85 f6                	test   esi,esi
c00024e3:	74 0f                	je     c00024f4 <find_volume+0x176>
c00024e5:	eb 13                	jmp    c00024fa <find_volume+0x17c>
c00024e7:	85 f6                	test   esi,esi
c00024e9:	0f 85 ed fe ff ff    	jne    c00023dc <find_volume+0x5e>
c00024ef:	b8 03 00 00 00       	mov    eax,0x3
c00024f4:	47                   	inc    edi
c00024f5:	83 ff 03             	cmp    edi,0x3
c00024f8:	76 d1                	jbe    c00024cb <find_volume+0x14d>
c00024fa:	83 c4 3c             	add    esp,0x3c
c00024fd:	5b                   	pop    ebx
c00024fe:	5e                   	pop    esi
c00024ff:	5f                   	pop    edi
c0002500:	5d                   	pop    ebp
c0002501:	c3                   	ret    

c0002502 <mount_volume>:
c0002502:	55                   	push   ebp
c0002503:	57                   	push   edi
c0002504:	89 cf                	mov    edi,ecx
c0002506:	56                   	push   esi
c0002507:	53                   	push   ebx
c0002508:	bb 0b 00 00 00       	mov    ebx,0xb
c000250d:	83 ec 3c             	sub    esp,0x3c
c0002510:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002516:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000251a:	e8 35 fb ff ff       	call   c0002054 <get_ldnumber>
c000251f:	85 c0                	test   eax,eax
c0002521:	0f 88 3a 05 00 00    	js     c0002a61 <mount_volume+0x55f>
c0002527:	8b 2c 85 a0 a3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5c60]
c000252e:	89 c6                	mov    esi,eax
c0002530:	bb 0c 00 00 00       	mov    ebx,0xc
c0002535:	85 ed                	test   ebp,ebp
c0002537:	0f 84 24 05 00 00    	je     c0002a61 <mount_volume+0x55f>
c000253d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002541:	83 e7 fe             	and    edi,0xfffffffe
c0002544:	89 2a                	mov    DWORD PTR [edx],ebp
c0002546:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000254a:	74 32                	je     c000257e <mount_volume+0x7c>
c000254c:	83 ec 0c             	sub    esp,0xc
c000254f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002553:	50                   	push   eax
c0002554:	e8 c8 f4 ff ff       	call   c0001a21 <disk_status>
c0002559:	83 c4 10             	add    esp,0x10
c000255c:	a8 01                	test   al,0x1
c000255e:	75 1e                	jne    c000257e <mount_volume+0x7c>
c0002560:	31 db                	xor    ebx,ebx
c0002562:	89 f9                	mov    ecx,edi
c0002564:	84 c9                	test   cl,cl
c0002566:	0f 84 f5 04 00 00    	je     c0002a61 <mount_volume+0x55f>
c000256c:	a8 04                	test   al,0x4
c000256e:	0f 84 ed 04 00 00    	je     c0002a61 <mount_volume+0x55f>
c0002574:	bb 0a 00 00 00       	mov    ebx,0xa
c0002579:	e9 e3 04 00 00       	jmp    c0002a61 <mount_volume+0x55f>
c000257e:	83 ec 0c             	sub    esp,0xc
c0002581:	89 f0                	mov    eax,esi
c0002583:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002587:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000258a:	0f b6 f0             	movzx  esi,al
c000258d:	bb 03 00 00 00       	mov    ebx,0x3
c0002592:	56                   	push   esi
c0002593:	e8 8c f4 ff ff       	call   c0001a24 <disk_initialize>
c0002598:	83 c4 10             	add    esp,0x10
c000259b:	a8 01                	test   al,0x1
c000259d:	0f 85 be 04 00 00    	jne    c0002a61 <mount_volume+0x55f>
c00025a3:	89 f9                	mov    ecx,edi
c00025a5:	84 c9                	test   cl,cl
c00025a7:	74 04                	je     c00025ad <mount_volume+0xab>
c00025a9:	a8 04                	test   al,0x4
c00025ab:	75 c7                	jne    c0002574 <mount_volume+0x72>
c00025ad:	31 d2                	xor    edx,edx
c00025af:	89 e8                	mov    eax,ebp
c00025b1:	e8 c8 fd ff ff       	call   c000237e <find_volume>
c00025b6:	83 f8 04             	cmp    eax,0x4
c00025b9:	75 0a                	jne    c00025c5 <mount_volume+0xc3>
c00025bb:	bb 01 00 00 00       	mov    ebx,0x1
c00025c0:	e9 9c 04 00 00       	jmp    c0002a61 <mount_volume+0x55f>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 0a                	jbe    c00025d4 <mount_volume+0xd2>
c00025ca:	bb 0d 00 00 00       	mov    ebx,0xd
c00025cf:	e9 8d 04 00 00       	jmp    c0002a61 <mount_volume+0x55f>
c00025d4:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025d7:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025e2:	75 17                	jne    c00025fb <mount_volume+0xf9>
c00025e4:	b8 0b 00 00 00       	mov    eax,0xb
c00025e9:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025ee:	75 da                	jne    c00025ca <mount_volume+0xc8>
c00025f0:	40                   	inc    eax
c00025f1:	83 f8 40             	cmp    eax,0x40
c00025f4:	75 f3                	jne    c00025e9 <mount_volume+0xe7>
c00025f6:	e9 5a 02 00 00       	jmp    c0002855 <mount_volume+0x353>
c00025fb:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025fe:	e8 6f f4 ff ff       	call   c0001a72 <ld_word>
c0002603:	66 3d 00 02          	cmp    ax,0x200
c0002607:	75 c1                	jne    c00025ca <mount_volume+0xc8>
c0002609:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000260c:	e8 61 f4 ff ff       	call   c0001a72 <ld_word>
c0002611:	0f b7 c0             	movzx  eax,ax
c0002614:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002618:	85 c0                	test   eax,eax
c000261a:	75 0c                	jne    c0002628 <mount_volume+0x126>
c000261c:	8d 45 78             	lea    eax,[ebp+0x78]
c000261f:	e8 5b f4 ff ff       	call   c0001a7f <ld_dword>
c0002624:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000262c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000262f:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002632:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002636:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002639:	48                   	dec    eax
c000263a:	3c 01                	cmp    al,0x1
c000263c:	77 8c                	ja     c00025ca <mount_volume+0xc8>
c000263e:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002642:	89 c3                	mov    ebx,eax
c0002644:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002648:	66 85 c0             	test   ax,ax
c000264b:	0f 84 79 ff ff ff    	je     c00025ca <mount_volume+0xc8>
c0002651:	8d 40 ff             	lea    eax,[eax-0x1]
c0002654:	85 d8                	test   eax,ebx
c0002656:	0f 85 6e ff ff ff    	jne    c00025ca <mount_volume+0xc8>
c000265c:	8d 45 65             	lea    eax,[ebp+0x65]
c000265f:	e8 0e f4 ff ff       	call   c0001a72 <ld_word>
c0002664:	89 c7                	mov    edi,eax
c0002666:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000266a:	a8 0f                	test   al,0xf
c000266c:	0f 85 58 ff ff ff    	jne    c00025ca <mount_volume+0xc8>
c0002672:	8d 45 67             	lea    eax,[ebp+0x67]
c0002675:	e8 f8 f3 ff ff       	call   c0001a72 <ld_word>
c000267a:	0f b7 f0             	movzx  esi,ax
c000267d:	85 f6                	test   esi,esi
c000267f:	75 0a                	jne    c000268b <mount_volume+0x189>
c0002681:	8d 45 74             	lea    eax,[ebp+0x74]
c0002684:	e8 f6 f3 ff ff       	call   c0001a7f <ld_dword>
c0002689:	89 c6                	mov    esi,eax
c000268b:	8d 45 62             	lea    eax,[ebp+0x62]
c000268e:	e8 df f3 ff ff       	call   c0001a72 <ld_word>
c0002693:	66 85 c0             	test   ax,ax
c0002696:	0f 84 2e ff ff ff    	je     c00025ca <mount_volume+0xc8>
c000269c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00026a1:	0f b7 c8             	movzx  ecx,ax
c00026a4:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00026a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00026ad:	89 fa                	mov    edx,edi
c00026af:	66 c1 ea 04          	shr    dx,0x4
c00026b3:	0f b7 d2             	movzx  edx,dx
c00026b6:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00026ba:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00026bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026c1:	39 c6                	cmp    esi,eax
c00026c3:	0f 82 01 ff ff ff    	jb     c00025ca <mount_volume+0xc8>
c00026c9:	29 c6                	sub    esi,eax
c00026cb:	31 d2                	xor    edx,edx
c00026cd:	89 f0                	mov    eax,esi
c00026cf:	f7 f3                	div    ebx
c00026d1:	39 de                	cmp    esi,ebx
c00026d3:	0f 82 f1 fe ff ff    	jb     c00025ca <mount_volume+0xc8>
c00026d9:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026de:	0f 87 e6 fe ff ff    	ja     c00025ca <mount_volume+0xc8>
c00026e4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026e9:	0f 86 63 03 00 00    	jbe    c0002a52 <mount_volume+0x550>
c00026ef:	bb 03 00 00 00       	mov    ebx,0x3
c00026f4:	8d 70 02             	lea    esi,[eax+0x2]
c00026f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002702:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002705:	31 d2                	xor    edx,edx
c0002707:	89 c8                	mov    eax,ecx
c0002709:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000270c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002710:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002714:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002718:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000271c:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000271f:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002722:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002726:	31 d2                	xor    edx,edx
c0002728:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000272c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002730:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002733:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002736:	83 fb 03             	cmp    ebx,0x3
c0002739:	75 2b                	jne    c0002766 <mount_volume+0x264>
c000273b:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000273e:	e8 2f f3 ff ff       	call   c0001a72 <ld_word>
c0002743:	66 09 c7             	or     di,ax
c0002746:	0f 85 7e fe ff ff    	jne    c00025ca <mount_volume+0xc8>
c000274c:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002752:	c1 e6 02             	shl    esi,0x2
c0002755:	e8 25 f3 ff ff       	call   c0001a7f <ld_dword>
c000275a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002761:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002764:	eb 30                	jmp    c0002796 <mount_volume+0x294>
c0002766:	66 85 ff             	test   di,di
c0002769:	0f 84 5b fe ff ff    	je     c00025ca <mount_volume+0xc8>
c000276f:	31 d2                	xor    edx,edx
c0002771:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002775:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002779:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000277d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002780:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002783:	83 fb 02             	cmp    ebx,0x2
c0002786:	75 04                	jne    c000278c <mount_volume+0x28a>
c0002788:	01 f6                	add    esi,esi
c000278a:	eb 0a                	jmp    c0002796 <mount_volume+0x294>
c000278c:	8d 04 76             	lea    eax,[esi+esi*2]
c000278f:	83 e6 01             	and    esi,0x1
c0002792:	d1 e8                	shr    eax,1
c0002794:	01 c6                	add    esi,eax
c0002796:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000279c:	c1 ee 09             	shr    esi,0x9
c000279f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00027a3:	0f 87 21 fe ff ff    	ja     c00025ca <mount_volume+0xc8>
c00027a9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00027b0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00027b7:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00027bb:	83 fb 03             	cmp    ebx,0x3
c00027be:	75 7a                	jne    c000283a <mount_volume+0x338>
c00027c0:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027c6:	e8 a7 f2 ff ff       	call   c0001a72 <ld_word>
c00027cb:	66 48                	dec    ax
c00027cd:	75 6b                	jne    c000283a <mount_volume+0x338>
c00027cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027d7:	83 c2 01             	add    edx,0x1
c00027da:	89 e8                	mov    eax,ebp
c00027dc:	83 d1 00             	adc    ecx,0x0
c00027df:	e8 6c fa ff ff       	call   c0002250 <move_window>
c00027e4:	85 c0                	test   eax,eax
c00027e6:	75 52                	jne    c000283a <mount_volume+0x338>
c00027e8:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027ec:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027f2:	e8 7b f2 ff ff       	call   c0001a72 <ld_word>
c00027f7:	66 3d 55 aa          	cmp    ax,0xaa55
c00027fb:	75 3d                	jne    c000283a <mount_volume+0x338>
c00027fd:	8d 45 54             	lea    eax,[ebp+0x54]
c0002800:	e8 7a f2 ff ff       	call   c0001a7f <ld_dword>
c0002805:	3d 52 52 61 41       	cmp    eax,0x41615252
c000280a:	75 2e                	jne    c000283a <mount_volume+0x338>
c000280c:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002812:	e8 68 f2 ff ff       	call   c0001a7f <ld_dword>
c0002817:	3d 72 72 41 61       	cmp    eax,0x61417272
c000281c:	75 1c                	jne    c000283a <mount_volume+0x338>
c000281e:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002824:	e8 56 f2 ff ff       	call   c0001a7f <ld_dword>
c0002829:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000282c:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002832:	e8 48 f2 ff ff       	call   c0001a7f <ld_dword>
c0002837:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000283a:	66 a1 80 a3 02 c0    	mov    ax,ds:0xc002a380
c0002840:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002843:	40                   	inc    eax
c0002844:	31 db                	xor    ebx,ebx
c0002846:	66 a3 80 a3 02 c0    	mov    ds:0xc002a380,ax
c000284c:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002850:	e9 0c 02 00 00       	jmp    c0002a61 <mount_volume+0x55f>
c0002855:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000285b:	e8 12 f2 ff ff       	call   c0001a72 <ld_word>
c0002860:	66 3d 00 01          	cmp    ax,0x100
c0002864:	0f 85 60 fd ff ff    	jne    c00025ca <mount_volume+0xc8>
c000286a:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002871:	0f 85 53 fd ff ff    	jne    c00025ca <mount_volume+0xc8>
c0002877:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000287d:	e8 15 f2 ff ff       	call   c0001a97 <ld_qword>
c0002882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002886:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000288a:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002890:	e8 ea f1 ff ff       	call   c0001a7f <ld_dword>
c0002895:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002898:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000289e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00028a1:	fe c8                	dec    al
c00028a3:	0f 85 21 fd ff ff    	jne    c00025ca <mount_volume+0xc8>
c00028a9:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00028b0:	bb 01 00 00 00       	mov    ebx,0x1
c00028b5:	d3 e3                	shl    ebx,cl
c00028b7:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00028bb:	66 85 db             	test   bx,bx
c00028be:	0f 84 06 fd ff ff    	je     c00025ca <mount_volume+0xc8>
c00028c4:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028ca:	e8 b0 f1 ff ff       	call   c0001a7f <ld_dword>
c00028cf:	89 c6                	mov    esi,eax
c00028d1:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028d6:	0f 87 ee fc ff ff    	ja     c00025ca <mount_volume+0xc8>
c00028dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028e0:	8d 40 02             	lea    eax,[eax+0x2]
c00028e3:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028e6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ed:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f0:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028f6:	e8 84 f1 ff ff       	call   c0001a7f <ld_dword>
c00028fb:	31 d2                	xor    edx,edx
c00028fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002901:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002905:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002909:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000290d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002910:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002913:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002919:	e8 61 f1 ff ff       	call   c0001a7f <ld_dword>
c000291e:	31 d2                	xor    edx,edx
c0002920:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002924:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002928:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000292c:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000292f:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002932:	0f b7 c3             	movzx  eax,bx
c0002935:	31 d2                	xor    edx,edx
c0002937:	0f af f0             	imul   esi,eax
c000293a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000293e:	89 f0                	mov    eax,esi
c0002940:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002944:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002948:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000294c:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002950:	39 c1                	cmp    ecx,eax
c0002952:	89 df                	mov    edi,ebx
c0002954:	19 d7                	sbb    edi,edx
c0002956:	0f 82 6e fc ff ff    	jb     c00025ca <mount_volume+0xc8>
c000295c:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002962:	31 db                	xor    ebx,ebx
c0002964:	e8 16 f1 ff ff       	call   c0001a7f <ld_dword>
c0002969:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002970:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002973:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000297b:	85 db                	test   ebx,ebx
c000297d:	75 39                	jne    c00029b8 <mount_volume+0x4b6>
c000297f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002983:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002987:	0f 86 3d fc ff ff    	jbe    c00025ca <mount_volume+0xc8>
c000298d:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002990:	31 ff                	xor    edi,edi
c0002992:	89 e8                	mov    eax,ebp
c0002994:	e8 72 f3 ff ff       	call   c0001d0b <clst2sect>
c0002999:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000299d:	01 c6                	add    esi,eax
c000299f:	89 e8                	mov    eax,ebp
c00029a1:	11 d7                	adc    edi,edx
c00029a3:	89 f2                	mov    edx,esi
c00029a5:	89 f9                	mov    ecx,edi
c00029a7:	e8 a4 f8 ff ff       	call   c0002250 <move_window>
c00029ac:	85 c0                	test   eax,eax
c00029ae:	0f 85 07 fc ff ff    	jne    c00025bb <mount_volume+0xb9>
c00029b4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00029b8:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00029bd:	74 0b                	je     c00029ca <mount_volume+0x4c8>
c00029bf:	83 c3 20             	add    ebx,0x20
c00029c2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029c8:	eb b1                	jmp    c000297b <mount_volume+0x479>
c00029ca:	8d 75 54             	lea    esi,[ebp+0x54]
c00029cd:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029d1:	e8 a9 f0 ff ff       	call   c0001a7f <ld_dword>
c00029d6:	89 c3                	mov    ebx,eax
c00029d8:	83 f8 01             	cmp    eax,0x1
c00029db:	0f 86 e9 fb ff ff    	jbe    c00025ca <mount_volume+0xc8>
c00029e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029e4:	0f 86 e0 fb ff ff    	jbe    c00025ca <mount_volume+0xc8>
c00029ea:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029ed:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029f1:	0f af c2             	imul   eax,edx
c00029f4:	31 d2                	xor    edx,edx
c00029f6:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029f9:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029fc:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029ff:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002a02:	31 c9                	xor    ecx,ecx
c0002a04:	89 da                	mov    edx,ebx
c0002a06:	89 e8                	mov    eax,ebp
c0002a08:	c1 ea 07             	shr    edx,0x7
c0002a0b:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002a0e:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002a11:	e8 3a f8 ff ff       	call   c0002250 <move_window>
c0002a16:	85 c0                	test   eax,eax
c0002a18:	0f 85 9d fb ff ff    	jne    c00025bb <mount_volume+0xb9>
c0002a1e:	89 d8                	mov    eax,ebx
c0002a20:	83 e0 7f             	and    eax,0x7f
c0002a23:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a26:	e8 54 f0 ff ff       	call   c0001a7f <ld_dword>
c0002a2b:	83 f8 ff             	cmp    eax,0xffffffff
c0002a2e:	74 0a                	je     c0002a3a <mount_volume+0x538>
c0002a30:	43                   	inc    ebx
c0002a31:	39 d8                	cmp    eax,ebx
c0002a33:	74 cd                	je     c0002a02 <mount_volume+0x500>
c0002a35:	e9 90 fb ff ff       	jmp    c00025ca <mount_volume+0xc8>
c0002a3a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a41:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a48:	bb 04 00 00 00       	mov    ebx,0x4
c0002a4d:	e9 e8 fd ff ff       	jmp    c000283a <mount_volume+0x338>
c0002a52:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a57:	19 db                	sbb    ebx,ebx
c0002a59:	83 c3 02             	add    ebx,0x2
c0002a5c:	e9 93 fc ff ff       	jmp    c00026f4 <mount_volume+0x1f2>
c0002a61:	83 c4 3c             	add    esp,0x3c
c0002a64:	89 d8                	mov    eax,ebx
c0002a66:	5b                   	pop    ebx
c0002a67:	5e                   	pop    esi
c0002a68:	5f                   	pop    edi
c0002a69:	5d                   	pop    ebp
c0002a6a:	c3                   	ret    

c0002a6b <find_bitmap>:
c0002a6b:	55                   	push   ebp
c0002a6c:	57                   	push   edi
c0002a6d:	89 c7                	mov    edi,eax
c0002a6f:	56                   	push   esi
c0002a70:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a73:	53                   	push   ebx
c0002a74:	83 ec 1c             	sub    esp,0x1c
c0002a77:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a7a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a7e:	83 e8 02             	sub    eax,0x2
c0002a81:	39 f0                	cmp    eax,esi
c0002a83:	77 02                	ja     c0002a87 <find_bitmap+0x1c>
c0002a85:	31 f6                	xor    esi,esi
c0002a87:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a8b:	89 f3                	mov    ebx,esi
c0002a8d:	31 ed                	xor    ebp,ebp
c0002a8f:	31 c9                	xor    ecx,ecx
c0002a91:	89 da                	mov    edx,ebx
c0002a93:	89 f8                	mov    eax,edi
c0002a95:	c1 ea 0c             	shr    edx,0xc
c0002a98:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a9b:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a9e:	e8 ad f7 ff ff       	call   c0002250 <move_window>
c0002aa3:	85 c0                	test   eax,eax
c0002aa5:	75 68                	jne    c0002b0f <find_bitmap+0xa4>
c0002aa7:	89 da                	mov    edx,ebx
c0002aa9:	89 d9                	mov    ecx,ebx
c0002aab:	c1 ea 03             	shr    edx,0x3
c0002aae:	83 e1 07             	and    ecx,0x7
c0002ab1:	b8 01 00 00 00       	mov    eax,0x1
c0002ab6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002abc:	d3 e0                	shl    eax,cl
c0002abe:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ac1:	83 e9 02             	sub    ecx,0x2
c0002ac4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ac8:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002acc:	43                   	inc    ebx
c0002acd:	21 c1                	and    ecx,eax
c0002acf:	d1 e0                	shl    eax,1
c0002ad1:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ad5:	77 09                	ja     c0002ae0 <find_bitmap+0x75>
c0002ad7:	31 db                	xor    ebx,ebx
c0002ad9:	ba 00 02 00 00       	mov    edx,0x200
c0002ade:	31 c0                	xor    eax,eax
c0002ae0:	84 c9                	test   cl,cl
c0002ae2:	75 10                	jne    c0002af4 <find_bitmap+0x89>
c0002ae4:	45                   	inc    ebp
c0002ae5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ae9:	75 0f                	jne    c0002afa <find_bitmap+0x8f>
c0002aeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002aef:	83 c0 02             	add    eax,0x2
c0002af2:	eb 22                	jmp    c0002b16 <find_bitmap+0xab>
c0002af4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002af8:	31 ed                	xor    ebp,ebp
c0002afa:	39 de                	cmp    esi,ebx
c0002afc:	74 16                	je     c0002b14 <find_bitmap+0xa9>
c0002afe:	84 c0                	test   al,al
c0002b00:	75 c6                	jne    c0002ac8 <find_bitmap+0x5d>
c0002b02:	42                   	inc    edx
c0002b03:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002b09:	77 84                	ja     c0002a8f <find_bitmap+0x24>
c0002b0b:	b0 01                	mov    al,0x1
c0002b0d:	eb b9                	jmp    c0002ac8 <find_bitmap+0x5d>
c0002b0f:	83 c8 ff             	or     eax,0xffffffff
c0002b12:	eb 02                	jmp    c0002b16 <find_bitmap+0xab>
c0002b14:	31 c0                	xor    eax,eax
c0002b16:	83 c4 1c             	add    esp,0x1c
c0002b19:	5b                   	pop    ebx
c0002b1a:	5e                   	pop    esi
c0002b1b:	5f                   	pop    edi
c0002b1c:	5d                   	pop    ebp
c0002b1d:	c3                   	ret    

c0002b1e <change_bitmap>:
c0002b1e:	55                   	push   ebp
c0002b1f:	89 cd                	mov    ebp,ecx
c0002b21:	57                   	push   edi
c0002b22:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b25:	56                   	push   esi
c0002b26:	89 c7                	mov    edi,eax
c0002b28:	53                   	push   ebx
c0002b29:	89 c8                	mov    eax,ecx
c0002b2b:	83 ec 1c             	sub    esp,0x1c
c0002b2e:	31 d2                	xor    edx,edx
c0002b30:	89 ce                	mov    esi,ecx
c0002b32:	c1 e8 0c             	shr    eax,0xc
c0002b35:	bb 01 00 00 00       	mov    ebx,0x1
c0002b3a:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b3d:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b40:	c1 ee 03             	shr    esi,0x3
c0002b43:	83 e1 07             	and    ecx,0x7
c0002b46:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b4c:	d3 e3                	shl    ebx,cl
c0002b4e:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b52:	89 c1                	mov    ecx,eax
c0002b54:	89 d3                	mov    ebx,edx
c0002b56:	83 c1 01             	add    ecx,0x1
c0002b59:	83 d3 00             	adc    ebx,0x0
c0002b5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b60:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b64:	89 d1                	mov    ecx,edx
c0002b66:	89 c2                	mov    edx,eax
c0002b68:	89 f8                	mov    eax,edi
c0002b6a:	e8 e1 f6 ff ff       	call   c0002250 <move_window>
c0002b6f:	89 c1                	mov    ecx,eax
c0002b71:	85 c0                	test   eax,eax
c0002b73:	75 48                	jne    c0002bbd <change_bitmap+0x9f>
c0002b75:	31 d2                	xor    edx,edx
c0002b77:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b7b:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b7f:	0f 95 c2             	setne  dl
c0002b82:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b86:	74 3c                	je     c0002bc4 <change_bitmap+0xa6>
c0002b88:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b8c:	4d                   	dec    ebp
c0002b8d:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b91:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b95:	74 32                	je     c0002bc9 <change_bitmap+0xab>
c0002b97:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b9b:	75 d8                	jne    c0002b75 <change_bitmap+0x57>
c0002b9d:	8d 46 01             	lea    eax,[esi+0x1]
c0002ba0:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ba5:	89 c3                	mov    ebx,eax
c0002ba7:	31 f6                	xor    esi,esi
c0002ba9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002bad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb1:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002bb7:	74 99                	je     c0002b52 <change_bitmap+0x34>
c0002bb9:	89 de                	mov    esi,ebx
c0002bbb:	eb b8                	jmp    c0002b75 <change_bitmap+0x57>
c0002bbd:	b9 01 00 00 00       	mov    ecx,0x1
c0002bc2:	eb 05                	jmp    c0002bc9 <change_bitmap+0xab>
c0002bc4:	b9 02 00 00 00       	mov    ecx,0x2
c0002bc9:	83 c4 1c             	add    esp,0x1c
c0002bcc:	89 c8                	mov    eax,ecx
c0002bce:	5b                   	pop    ebx
c0002bcf:	5e                   	pop    esi
c0002bd0:	5f                   	pop    edi
c0002bd1:	5d                   	pop    ebp
c0002bd2:	c3                   	ret    

c0002bd3 <put_fat>:
c0002bd3:	83 fa 01             	cmp    edx,0x1
c0002bd6:	0f 86 7b 01 00 00    	jbe    c0002d57 <put_fat+0x184>
c0002bdc:	55                   	push   ebp
c0002bdd:	57                   	push   edi
c0002bde:	89 cf                	mov    edi,ecx
c0002be0:	56                   	push   esi
c0002be1:	b9 02 00 00 00       	mov    ecx,0x2
c0002be6:	53                   	push   ebx
c0002be7:	89 c6                	mov    esi,eax
c0002be9:	83 ec 1c             	sub    esp,0x1c
c0002bec:	89 d3                	mov    ebx,edx
c0002bee:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bf1:	0f 86 68 01 00 00    	jbe    c0002d5f <put_fat+0x18c>
c0002bf7:	8a 00                	mov    al,BYTE PTR [eax]
c0002bf9:	3c 02                	cmp    al,0x2
c0002bfb:	0f 84 c7 00 00 00    	je     c0002cc8 <put_fat+0xf5>
c0002c01:	77 09                	ja     c0002c0c <put_fat+0x39>
c0002c03:	fe c8                	dec    al
c0002c05:	74 17                	je     c0002c1e <put_fat+0x4b>
c0002c07:	e9 53 01 00 00       	jmp    c0002d5f <put_fat+0x18c>
c0002c0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002c11:	3c 04                	cmp    al,0x4
c0002c13:	0f 86 e1 00 00 00    	jbe    c0002cfa <put_fat+0x127>
c0002c19:	e9 41 01 00 00       	jmp    c0002d5f <put_fat+0x18c>
c0002c1e:	89 d5                	mov    ebp,edx
c0002c20:	31 c9                	xor    ecx,ecx
c0002c22:	d1 ed                	shr    ebp,1
c0002c24:	89 f0                	mov    eax,esi
c0002c26:	01 d5                	add    ebp,edx
c0002c28:	89 ea                	mov    edx,ebp
c0002c2a:	c1 ea 09             	shr    edx,0x9
c0002c2d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c30:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c33:	e8 18 f6 ff ff       	call   c0002250 <move_window>
c0002c38:	89 c1                	mov    ecx,eax
c0002c3a:	85 c0                	test   eax,eax
c0002c3c:	0f 85 1d 01 00 00    	jne    c0002d5f <put_fat+0x18c>
c0002c42:	8d 46 54             	lea    eax,[esi+0x54]
c0002c45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c49:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c4c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c56:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c5a:	89 f8                	mov    eax,edi
c0002c5c:	83 e3 01             	and    ebx,0x1
c0002c5f:	74 0d                	je     c0002c6e <put_fat+0x9b>
c0002c61:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c64:	89 fa                	mov    edx,edi
c0002c66:	83 e0 0f             	and    eax,0xf
c0002c69:	c1 e2 04             	shl    edx,0x4
c0002c6c:	09 d0                	or     eax,edx
c0002c6e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c75:	31 c9                	xor    ecx,ecx
c0002c77:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c7b:	c1 ea 09             	shr    edx,0x9
c0002c7e:	89 f0                	mov    eax,esi
c0002c80:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c83:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c86:	e8 c5 f5 ff ff       	call   c0002250 <move_window>
c0002c8b:	89 c1                	mov    ecx,eax
c0002c8d:	85 c0                	test   eax,eax
c0002c8f:	0f 85 ca 00 00 00    	jne    c0002d5f <put_fat+0x18c>
c0002c95:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c99:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c9f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002ca3:	85 db                	test   ebx,ebx
c0002ca5:	74 07                	je     c0002cae <put_fat+0xdb>
c0002ca7:	c1 ef 04             	shr    edi,0x4
c0002caa:	89 fa                	mov    edx,edi
c0002cac:	eb 0e                	jmp    c0002cbc <put_fat+0xe9>
c0002cae:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002cb1:	c1 ef 08             	shr    edi,0x8
c0002cb4:	83 e2 f0             	and    edx,0xfffffff0
c0002cb7:	83 e7 0f             	and    edi,0xf
c0002cba:	09 fa                	or     edx,edi
c0002cbc:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002cbf:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cc3:	e9 97 00 00 00       	jmp    c0002d5f <put_fat+0x18c>
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	c1 ea 08             	shr    edx,0x8
c0002ccd:	89 f0                	mov    eax,esi
c0002ccf:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cd2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd5:	e8 76 f5 ff ff       	call   c0002250 <move_window>
c0002cda:	89 c1                	mov    ecx,eax
c0002cdc:	85 c0                	test   eax,eax
c0002cde:	75 7f                	jne    c0002d5f <put_fat+0x18c>
c0002ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ce4:	01 db                	add    ebx,ebx
c0002ce6:	0f b7 d7             	movzx  edx,di
c0002ce9:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cef:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cf3:	e8 ec ed ff ff       	call   c0001ae4 <st_word>
c0002cf8:	eb 53                	jmp    c0002d4d <put_fat+0x17a>
c0002cfa:	31 c9                	xor    ecx,ecx
c0002cfc:	c1 ea 07             	shr    edx,0x7
c0002cff:	89 f0                	mov    eax,esi
c0002d01:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d04:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d07:	e8 44 f5 ff ff       	call   c0002250 <move_window>
c0002d0c:	89 c1                	mov    ecx,eax
c0002d0e:	85 c0                	test   eax,eax
c0002d10:	75 4d                	jne    c0002d5f <put_fat+0x18c>
c0002d12:	c1 e3 02             	shl    ebx,0x2
c0002d15:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002d1b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002d1e:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d22:	74 1c                	je     c0002d40 <put_fat+0x16d>
c0002d24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d28:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d2e:	89 d8                	mov    eax,ebx
c0002d30:	e8 4a ed ff ff       	call   c0001a7f <ld_dword>
c0002d35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d39:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d3e:	09 c7                	or     edi,eax
c0002d40:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d44:	89 fa                	mov    edx,edi
c0002d46:	89 d8                	mov    eax,ebx
c0002d48:	e8 9b ed ff ff       	call   c0001ae8 <st_dword>
c0002d4d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d55:	eb 08                	jmp    c0002d5f <put_fat+0x18c>
c0002d57:	b9 02 00 00 00       	mov    ecx,0x2
c0002d5c:	89 c8                	mov    eax,ecx
c0002d5e:	c3                   	ret    
c0002d5f:	83 c4 1c             	add    esp,0x1c
c0002d62:	89 c8                	mov    eax,ecx
c0002d64:	5b                   	pop    ebx
c0002d65:	5e                   	pop    esi
c0002d66:	5f                   	pop    edi
c0002d67:	5d                   	pop    ebp
c0002d68:	c3                   	ret    

c0002d69 <fill_last_frag>:
c0002d69:	57                   	push   edi
c0002d6a:	89 cf                	mov    edi,ecx
c0002d6c:	56                   	push   esi
c0002d6d:	89 d6                	mov    esi,edx
c0002d6f:	53                   	push   ebx
c0002d70:	89 c3                	mov    ebx,eax
c0002d72:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d75:	85 c0                	test   eax,eax
c0002d77:	74 21                	je     c0002d9a <fill_last_frag+0x31>
c0002d79:	89 f9                	mov    ecx,edi
c0002d7b:	83 f8 01             	cmp    eax,0x1
c0002d7e:	76 05                	jbe    c0002d85 <fill_last_frag+0x1c>
c0002d80:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d83:	29 c1                	sub    ecx,eax
c0002d85:	8d 56 01             	lea    edx,[esi+0x1]
c0002d88:	29 c2                	sub    edx,eax
c0002d8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d8c:	e8 42 fe ff ff       	call   c0002bd3 <put_fat>
c0002d91:	85 c0                	test   eax,eax
c0002d93:	75 05                	jne    c0002d9a <fill_last_frag+0x31>
c0002d95:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d98:	eb d8                	jmp    c0002d72 <fill_last_frag+0x9>
c0002d9a:	5b                   	pop    ebx
c0002d9b:	5e                   	pop    esi
c0002d9c:	5f                   	pop    edi
c0002d9d:	c3                   	ret    

c0002d9e <fill_first_frag>:
c0002d9e:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002da2:	75 2d                	jne    c0002dd1 <fill_first_frag+0x33>
c0002da4:	57                   	push   edi
c0002da5:	56                   	push   esi
c0002da6:	53                   	push   ebx
c0002da7:	89 c3                	mov    ebx,eax
c0002da9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002dac:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002daf:	01 d7                	add    edi,edx
c0002db1:	39 fa                	cmp    edx,edi
c0002db3:	74 14                	je     c0002dc9 <fill_first_frag+0x2b>
c0002db5:	8d 72 01             	lea    esi,[edx+0x1]
c0002db8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002dba:	89 f1                	mov    ecx,esi
c0002dbc:	e8 12 fe ff ff       	call   c0002bd3 <put_fat>
c0002dc1:	89 f2                	mov    edx,esi
c0002dc3:	85 c0                	test   eax,eax
c0002dc5:	74 ea                	je     c0002db1 <fill_first_frag+0x13>
c0002dc7:	eb 0b                	jmp    c0002dd4 <fill_first_frag+0x36>
c0002dc9:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002dcd:	31 c0                	xor    eax,eax
c0002dcf:	eb 03                	jmp    c0002dd4 <fill_first_frag+0x36>
c0002dd1:	31 c0                	xor    eax,eax
c0002dd3:	c3                   	ret    
c0002dd4:	5b                   	pop    ebx
c0002dd5:	5e                   	pop    esi
c0002dd6:	5f                   	pop    edi
c0002dd7:	c3                   	ret    

c0002dd8 <get_fat>:
c0002dd8:	83 fa 01             	cmp    edx,0x1
c0002ddb:	0f 86 db 01 00 00    	jbe    c0002fbc <get_fat+0x1e4>
c0002de1:	55                   	push   ebp
c0002de2:	b9 01 00 00 00       	mov    ecx,0x1
c0002de7:	57                   	push   edi
c0002de8:	56                   	push   esi
c0002de9:	53                   	push   ebx
c0002dea:	83 ec 1c             	sub    esp,0x1c
c0002ded:	8b 38                	mov    edi,DWORD PTR [eax]
c0002def:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002df2:	0f 86 cc 01 00 00    	jbe    c0002fc4 <get_fat+0x1ec>
c0002df8:	89 c3                	mov    ebx,eax
c0002dfa:	89 d6                	mov    esi,edx
c0002dfc:	8a 07                	mov    al,BYTE PTR [edi]
c0002dfe:	3c 02                	cmp    al,0x2
c0002e00:	0f 84 99 00 00 00    	je     c0002e9f <get_fat+0xc7>
c0002e06:	77 09                	ja     c0002e11 <get_fat+0x39>
c0002e08:	fe c8                	dec    al
c0002e0a:	74 1a                	je     c0002e26 <get_fat+0x4e>
c0002e0c:	e9 b3 01 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002e11:	3c 03                	cmp    al,0x3
c0002e13:	0f 84 b5 00 00 00    	je     c0002ece <get_fat+0xf6>
c0002e19:	3c 04                	cmp    al,0x4
c0002e1b:	0f 84 e3 00 00 00    	je     c0002f04 <get_fat+0x12c>
c0002e21:	e9 9e 01 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002e26:	89 d3                	mov    ebx,edx
c0002e28:	31 c9                	xor    ecx,ecx
c0002e2a:	d1 eb                	shr    ebx,1
c0002e2c:	89 f8                	mov    eax,edi
c0002e2e:	01 d3                	add    ebx,edx
c0002e30:	89 da                	mov    edx,ebx
c0002e32:	c1 ea 09             	shr    edx,0x9
c0002e35:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e38:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3b:	e8 10 f4 ff ff       	call   c0002250 <move_window>
c0002e40:	85 c0                	test   eax,eax
c0002e42:	74 08                	je     c0002e4c <get_fat+0x74>
c0002e44:	83 c9 ff             	or     ecx,0xffffffff
c0002e47:	e9 78 01 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002e4c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e4f:	31 c9                	xor    ecx,ecx
c0002e51:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e57:	89 ea                	mov    edx,ebp
c0002e59:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e5d:	c1 ea 09             	shr    edx,0x9
c0002e60:	89 f8                	mov    eax,edi
c0002e62:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e65:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e68:	e8 e3 f3 ff ff       	call   c0002250 <move_window>
c0002e6d:	85 c0                	test   eax,eax
c0002e6f:	75 d3                	jne    c0002e44 <get_fat+0x6c>
c0002e71:	0f b6 c3             	movzx  eax,bl
c0002e74:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e7a:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e7f:	c1 e3 08             	shl    ebx,0x8
c0002e82:	09 c3                	or     ebx,eax
c0002e84:	89 d9                	mov    ecx,ebx
c0002e86:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e8c:	83 e6 01             	and    esi,0x1
c0002e8f:	0f 84 2f 01 00 00    	je     c0002fc4 <get_fat+0x1ec>
c0002e95:	89 d9                	mov    ecx,ebx
c0002e97:	c1 e9 04             	shr    ecx,0x4
c0002e9a:	e9 25 01 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002e9f:	31 c9                	xor    ecx,ecx
c0002ea1:	c1 ea 08             	shr    edx,0x8
c0002ea4:	89 f8                	mov    eax,edi
c0002ea6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eac:	e8 9f f3 ff ff       	call   c0002250 <move_window>
c0002eb1:	85 c0                	test   eax,eax
c0002eb3:	75 8f                	jne    c0002e44 <get_fat+0x6c>
c0002eb5:	01 f6                	add    esi,esi
c0002eb7:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ebd:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec1:	e8 ac eb ff ff       	call   c0001a72 <ld_word>
c0002ec6:	0f b7 c8             	movzx  ecx,ax
c0002ec9:	e9 f6 00 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002ece:	31 c9                	xor    ecx,ecx
c0002ed0:	c1 ea 07             	shr    edx,0x7
c0002ed3:	89 f8                	mov    eax,edi
c0002ed5:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ed8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002edb:	e8 70 f3 ff ff       	call   c0002250 <move_window>
c0002ee0:	85 c0                	test   eax,eax
c0002ee2:	0f 85 5c ff ff ff    	jne    c0002e44 <get_fat+0x6c>
c0002ee8:	c1 e6 02             	shl    esi,0x2
c0002eeb:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ef1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ef5:	e8 85 eb ff ff       	call   c0001a7f <ld_dword>
c0002efa:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002eff:	e9 b4 00 00 00       	jmp    c0002fb8 <get_fat+0x1e0>
c0002f04:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002f07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f0a:	89 d1                	mov    ecx,edx
c0002f0c:	09 c1                	or     ecx,eax
c0002f0e:	74 06                	je     c0002f16 <get_fat+0x13e>
c0002f10:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002f14:	75 0f                	jne    c0002f25 <get_fat+0x14d>
c0002f16:	b9 01 00 00 00       	mov    ecx,0x1
c0002f1b:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002f1f:	0f 85 9f 00 00 00    	jne    c0002fc4 <get_fat+0x1ec>
c0002f25:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f29:	89 f5                	mov    ebp,esi
c0002f2b:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f30:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f33:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f36:	80 f9 02             	cmp    cl,0x2
c0002f39:	75 35                	jne    c0002f70 <get_fat+0x198>
c0002f3b:	83 c0 ff             	add    eax,0xffffffff
c0002f3e:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f43:	83 d2 ff             	adc    edx,0xffffffff
c0002f46:	31 db                	xor    ebx,ebx
c0002f48:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f4c:	53                   	push   ebx
c0002f4d:	c1 ea 09             	shr    edx,0x9
c0002f50:	51                   	push   ecx
c0002f51:	52                   	push   edx
c0002f52:	50                   	push   eax
c0002f53:	e8 04 04 02 00       	call   c002335c <__udivdi3>
c0002f58:	83 c4 10             	add    esp,0x10
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	39 c5                	cmp    ebp,eax
c0002f62:	77 60                	ja     c0002fc4 <get_fat+0x1ec>
c0002f64:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f69:	74 59                	je     c0002fc4 <get_fat+0x1ec>
c0002f6b:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f6e:	eb 54                	jmp    c0002fc4 <get_fat+0x1ec>
c0002f70:	80 f9 03             	cmp    cl,0x3
c0002f73:	75 05                	jne    c0002f7a <get_fat+0x1a2>
c0002f75:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f78:	77 f1                	ja     c0002f6b <get_fat+0x193>
c0002f7a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f7f:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f83:	75 3f                	jne    c0002fc4 <get_fat+0x1ec>
c0002f85:	31 c9                	xor    ecx,ecx
c0002f87:	89 f2                	mov    edx,esi
c0002f89:	89 f8                	mov    eax,edi
c0002f8b:	c1 ea 07             	shr    edx,0x7
c0002f8e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f91:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f94:	e8 b7 f2 ff ff       	call   c0002250 <move_window>
c0002f99:	85 c0                	test   eax,eax
c0002f9b:	0f 85 a3 fe ff ff    	jne    c0002e44 <get_fat+0x6c>
c0002fa1:	c1 e6 02             	shl    esi,0x2
c0002fa4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002faa:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fae:	e8 cc ea ff ff       	call   c0001a7f <ld_dword>
c0002fb3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002fb8:	89 c1                	mov    ecx,eax
c0002fba:	eb 08                	jmp    c0002fc4 <get_fat+0x1ec>
c0002fbc:	b9 01 00 00 00       	mov    ecx,0x1
c0002fc1:	89 c8                	mov    eax,ecx
c0002fc3:	c3                   	ret    
c0002fc4:	83 c4 1c             	add    esp,0x1c
c0002fc7:	89 c8                	mov    eax,ecx
c0002fc9:	5b                   	pop    ebx
c0002fca:	5e                   	pop    esi
c0002fcb:	5f                   	pop    edi
c0002fcc:	5d                   	pop    ebp
c0002fcd:	c3                   	ret    

c0002fce <dir_sdi>:
c0002fce:	55                   	push   ebp
c0002fcf:	57                   	push   edi
c0002fd0:	56                   	push   esi
c0002fd1:	53                   	push   ebx
c0002fd2:	89 c3                	mov    ebx,eax
c0002fd4:	83 ec 1c             	sub    esp,0x1c
c0002fd7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fd9:	31 c0                	xor    eax,eax
c0002fdb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fde:	0f 94 c0             	sete   al
c0002fe1:	48                   	dec    eax
c0002fe2:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fe7:	05 00 00 00 10       	add    eax,0x10000000
c0002fec:	39 d0                	cmp    eax,edx
c0002fee:	77 0a                	ja     c0002ffa <dir_sdi+0x2c>
c0002ff0:	b8 02 00 00 00       	mov    eax,0x2
c0002ff5:	e9 c4 00 00 00       	jmp    c00030be <dir_sdi+0xf0>
c0002ffa:	89 d6                	mov    esi,edx
c0002ffc:	f6 c2 1f             	test   dl,0x1f
c0002fff:	75 ef                	jne    c0002ff0 <dir_sdi+0x22>
c0003001:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003004:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003007:	85 c9                	test   ecx,ecx
c0003009:	75 2d                	jne    c0003038 <dir_sdi+0x6a>
c000300b:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000300e:	77 1b                	ja     c000302b <dir_sdi+0x5d>
c0003010:	89 f2                	mov    edx,esi
c0003012:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003016:	c1 ea 05             	shr    edx,0x5
c0003019:	39 c2                	cmp    edx,eax
c000301b:	73 d3                	jae    c0002ff0 <dir_sdi+0x22>
c000301d:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003020:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003023:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003026:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003029:	eb 4b                	jmp    c0003076 <dir_sdi+0xa8>
c000302b:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000302e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003032:	85 c0                	test   eax,eax
c0003034:	74 da                	je     c0003010 <dir_sdi+0x42>
c0003036:	89 c1                	mov    ecx,eax
c0003038:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000303c:	c1 e5 09             	shl    ebp,0x9
c000303f:	89 ca                	mov    edx,ecx
c0003041:	39 ee                	cmp    esi,ebp
c0003043:	72 1c                	jb     c0003061 <dir_sdi+0x93>
c0003045:	89 d8                	mov    eax,ebx
c0003047:	e8 8c fd ff ff       	call   c0002dd8 <get_fat>
c000304c:	89 c1                	mov    ecx,eax
c000304e:	83 f8 ff             	cmp    eax,0xffffffff
c0003051:	74 66                	je     c00030b9 <dir_sdi+0xeb>
c0003053:	83 f8 01             	cmp    eax,0x1
c0003056:	76 98                	jbe    c0002ff0 <dir_sdi+0x22>
c0003058:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000305b:	76 93                	jbe    c0002ff0 <dir_sdi+0x22>
c000305d:	29 ee                	sub    esi,ebp
c000305f:	eb de                	jmp    c000303f <dir_sdi+0x71>
c0003061:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003065:	89 f8                	mov    eax,edi
c0003067:	e8 9f ec ff ff       	call   c0001d0b <clst2sect>
c000306c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003070:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003073:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003076:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003079:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000307c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000307f:	89 d1                	mov    ecx,edx
c0003081:	09 c1                	or     ecx,eax
c0003083:	0f 84 67 ff ff ff    	je     c0002ff0 <dir_sdi+0x22>
c0003089:	89 f1                	mov    ecx,esi
c000308b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003093:	c1 e9 09             	shr    ecx,0x9
c0003096:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000309a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000309e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00030a2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00030a5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00030ab:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00030ae:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00030b5:	31 c0                	xor    eax,eax
c00030b7:	eb 05                	jmp    c00030be <dir_sdi+0xf0>
c00030b9:	b8 01 00 00 00       	mov    eax,0x1
c00030be:	83 c4 1c             	add    esp,0x1c
c00030c1:	5b                   	pop    ebx
c00030c2:	5e                   	pop    esi
c00030c3:	5f                   	pop    edi
c00030c4:	5d                   	pop    ebp
c00030c5:	c3                   	ret    

c00030c6 <create_chain>:
c00030c6:	55                   	push   ebp
c00030c7:	89 c5                	mov    ebp,eax
c00030c9:	57                   	push   edi
c00030ca:	56                   	push   esi
c00030cb:	53                   	push   ebx
c00030cc:	83 ec 1c             	sub    esp,0x1c
c00030cf:	85 d2                	test   edx,edx
c00030d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030d5:	8b 30                	mov    esi,DWORD PTR [eax]
c00030d7:	75 0e                	jne    c00030e7 <create_chain+0x21>
c00030d9:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030dc:	85 ff                	test   edi,edi
c00030de:	74 39                	je     c0003119 <create_chain+0x53>
c00030e0:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030e3:	77 39                	ja     c000311e <create_chain+0x58>
c00030e5:	eb 32                	jmp    c0003119 <create_chain+0x53>
c00030e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030eb:	e8 e8 fc ff ff       	call   c0002dd8 <get_fat>
c00030f0:	89 c3                	mov    ebx,eax
c00030f2:	83 f8 01             	cmp    eax,0x1
c00030f5:	77 0a                	ja     c0003101 <create_chain+0x3b>
c00030f7:	bb 01 00 00 00       	mov    ebx,0x1
c00030fc:	e9 ba 01 00 00       	jmp    c00032bb <create_chain+0x1f5>
c0003101:	83 f8 ff             	cmp    eax,0xffffffff
c0003104:	0f 84 62 01 00 00    	je     c000326c <create_chain+0x1a6>
c000310a:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000310d:	0f 87 a8 01 00 00    	ja     c00032bb <create_chain+0x1f5>
c0003113:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003117:	eb 05                	jmp    c000311e <create_chain+0x58>
c0003119:	bf 01 00 00 00       	mov    edi,0x1
c000311e:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003122:	75 07                	jne    c000312b <create_chain+0x65>
c0003124:	31 db                	xor    ebx,ebx
c0003126:	e9 90 01 00 00       	jmp    c00032bb <create_chain+0x1f5>
c000312b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000312e:	75 74                	jne    c00031a4 <create_chain+0xde>
c0003130:	b9 01 00 00 00       	mov    ecx,0x1
c0003135:	89 fa                	mov    edx,edi
c0003137:	89 f0                	mov    eax,esi
c0003139:	e8 2d f9 ff ff       	call   c0002a6b <find_bitmap>
c000313e:	89 c3                	mov    ebx,eax
c0003140:	8d 40 ff             	lea    eax,[eax-0x1]
c0003143:	83 f8 fd             	cmp    eax,0xfffffffd
c0003146:	0f 87 6f 01 00 00    	ja     c00032bb <create_chain+0x1f5>
c000314c:	83 ec 0c             	sub    esp,0xc
c000314f:	b9 01 00 00 00       	mov    ecx,0x1
c0003154:	6a 01                	push   0x1
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 f0                	mov    eax,esi
c000315a:	e8 bf f9 ff ff       	call   c0002b1e <change_bitmap>
c000315f:	83 c4 10             	add    esp,0x10
c0003162:	83 f8 02             	cmp    eax,0x2
c0003165:	74 90                	je     c00030f7 <create_chain+0x31>
c0003167:	83 f8 01             	cmp    eax,0x1
c000316a:	0f 84 fc 00 00 00    	je     c000326c <create_chain+0x1a6>
c0003170:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003175:	75 09                	jne    c0003180 <create_chain+0xba>
c0003177:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000317b:	e9 0c 01 00 00       	jmp    c000328c <create_chain+0x1c6>
c0003180:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003184:	0f 85 e7 00 00 00    	jne    c0003271 <create_chain+0x1ab>
c000318a:	8d 57 01             	lea    edx,[edi+0x1]
c000318d:	39 da                	cmp    edx,ebx
c000318f:	0f 84 f7 00 00 00    	je     c000328c <create_chain+0x1c6>
c0003195:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003198:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000319c:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000319f:	e9 cd 00 00 00       	jmp    c0003271 <create_chain+0x1ab>
c00031a4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00031a8:	75 41                	jne    c00031eb <create_chain+0x125>
c00031aa:	8d 5f 01             	lea    ebx,[edi+0x1]
c00031ad:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031b0:	77 05                	ja     c00031b7 <create_chain+0xf1>
c00031b2:	bb 02 00 00 00       	mov    ebx,0x2
c00031b7:	89 da                	mov    edx,ebx
c00031b9:	89 e8                	mov    eax,ebp
c00031bb:	e8 18 fc ff ff       	call   c0002dd8 <get_fat>
c00031c0:	83 f8 01             	cmp    eax,0x1
c00031c3:	0f 84 2e ff ff ff    	je     c00030f7 <create_chain+0x31>
c00031c9:	83 f8 ff             	cmp    eax,0xffffffff
c00031cc:	0f 84 9a 00 00 00    	je     c000326c <create_chain+0x1a6>
c00031d2:	85 c0                	test   eax,eax
c00031d4:	74 11                	je     c00031e7 <create_chain+0x121>
c00031d6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031d9:	83 f8 01             	cmp    eax,0x1
c00031dc:	76 0d                	jbe    c00031eb <create_chain+0x125>
c00031de:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031e1:	76 08                	jbe    c00031eb <create_chain+0x125>
c00031e3:	89 c7                	mov    edi,eax
c00031e5:	eb 04                	jmp    c00031eb <create_chain+0x125>
c00031e7:	85 db                	test   ebx,ebx
c00031e9:	75 38                	jne    c0003223 <create_chain+0x15d>
c00031eb:	89 fb                	mov    ebx,edi
c00031ed:	43                   	inc    ebx
c00031ee:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031f1:	77 0e                	ja     c0003201 <create_chain+0x13b>
c00031f3:	83 ff 01             	cmp    edi,0x1
c00031f6:	0f 86 28 ff ff ff    	jbe    c0003124 <create_chain+0x5e>
c00031fc:	bb 02 00 00 00       	mov    ebx,0x2
c0003201:	89 da                	mov    edx,ebx
c0003203:	89 e8                	mov    eax,ebp
c0003205:	e8 ce fb ff ff       	call   c0002dd8 <get_fat>
c000320a:	85 c0                	test   eax,eax
c000320c:	74 15                	je     c0003223 <create_chain+0x15d>
c000320e:	83 f8 01             	cmp    eax,0x1
c0003211:	0f 84 e0 fe ff ff    	je     c00030f7 <create_chain+0x31>
c0003217:	40                   	inc    eax
c0003218:	74 52                	je     c000326c <create_chain+0x1a6>
c000321a:	39 fb                	cmp    ebx,edi
c000321c:	75 cf                	jne    c00031ed <create_chain+0x127>
c000321e:	e9 01 ff ff ff       	jmp    c0003124 <create_chain+0x5e>
c0003223:	83 c9 ff             	or     ecx,0xffffffff
c0003226:	89 da                	mov    edx,ebx
c0003228:	89 f0                	mov    eax,esi
c000322a:	e8 a4 f9 ff ff       	call   c0002bd3 <put_fat>
c000322f:	85 c0                	test   eax,eax
c0003231:	75 32                	jne    c0003265 <create_chain+0x19f>
c0003233:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003238:	74 11                	je     c000324b <create_chain+0x185>
c000323a:	89 d9                	mov    ecx,ebx
c000323c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003240:	89 f0                	mov    eax,esi
c0003242:	e8 8c f9 ff ff       	call   c0002bd3 <put_fat>
c0003247:	85 c0                	test   eax,eax
c0003249:	75 1a                	jne    c0003265 <create_chain+0x19f>
c000324b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000324e:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003251:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003254:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003257:	39 d0                	cmp    eax,edx
c0003259:	77 04                	ja     c000325f <create_chain+0x199>
c000325b:	48                   	dec    eax
c000325c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000325f:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003263:	eb 56                	jmp    c00032bb <create_chain+0x1f5>
c0003265:	48                   	dec    eax
c0003266:	0f 85 8b fe ff ff    	jne    c00030f7 <create_chain+0x31>
c000326c:	83 cb ff             	or     ebx,0xffffffff
c000326f:	eb 4a                	jmp    c00032bb <create_chain+0x1f5>
c0003271:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003275:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003278:	41                   	inc    ecx
c0003279:	39 d9                	cmp    ecx,ebx
c000327b:	75 19                	jne    c0003296 <create_chain+0x1d0>
c000327d:	b9 02 00 00 00       	mov    ecx,0x2
c0003282:	85 d2                	test   edx,edx
c0003284:	74 03                	je     c0003289 <create_chain+0x1c3>
c0003286:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003289:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000328c:	85 c0                	test   eax,eax
c000328e:	0f 85 63 fe ff ff    	jne    c00030f7 <create_chain+0x31>
c0003294:	eb b5                	jmp    c000324b <create_chain+0x185>
c0003296:	85 d2                	test   edx,edx
c0003298:	75 07                	jne    c00032a1 <create_chain+0x1db>
c000329a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00032a1:	89 d9                	mov    ecx,ebx
c00032a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a7:	89 e8                	mov    eax,ebp
c00032a9:	e8 bb fa ff ff       	call   c0002d69 <fill_last_frag>
c00032ae:	85 c0                	test   eax,eax
c00032b0:	75 b3                	jne    c0003265 <create_chain+0x19f>
c00032b2:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00032b9:	eb 90                	jmp    c000324b <create_chain+0x185>
c00032bb:	83 c4 1c             	add    esp,0x1c
c00032be:	89 d8                	mov    eax,ebx
c00032c0:	5b                   	pop    ebx
c00032c1:	5e                   	pop    esi
c00032c2:	5f                   	pop    edi
c00032c3:	5d                   	pop    ebp
c00032c4:	c3                   	ret    

c00032c5 <remove_chain>:
c00032c5:	55                   	push   ebp
c00032c6:	57                   	push   edi
c00032c7:	56                   	push   esi
c00032c8:	53                   	push   ebx
c00032c9:	83 ec 1c             	sub    esp,0x1c
c00032cc:	83 fa 01             	cmp    edx,0x1
c00032cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032d3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032d5:	77 0a                	ja     c00032e1 <remove_chain+0x1c>
c00032d7:	b8 02 00 00 00       	mov    eax,0x2
c00032dc:	e9 24 01 00 00       	jmp    c0003405 <remove_chain+0x140>
c00032e1:	89 d6                	mov    esi,edx
c00032e3:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032e6:	76 ef                	jbe    c00032d7 <remove_chain+0x12>
c00032e8:	89 c7                	mov    edi,eax
c00032ea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032ef:	75 06                	jne    c00032f7 <remove_chain+0x32>
c00032f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032f5:	eb 54                	jmp    c000334b <remove_chain+0x86>
c00032f7:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fa:	75 06                	jne    c0003302 <remove_chain+0x3d>
c00032fc:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003300:	74 ef                	je     c00032f1 <remove_chain+0x2c>
c0003302:	83 c9 ff             	or     ecx,0xffffffff
c0003305:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003309:	89 d8                	mov    eax,ebx
c000330b:	e8 c3 f8 ff ff       	call   c0002bd3 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	74 dd                	je     c00032f1 <remove_chain+0x2c>
c0003314:	e9 ec 00 00 00       	jmp    c0003405 <remove_chain+0x140>
c0003319:	83 f8 01             	cmp    eax,0x1
c000331c:	74 b9                	je     c00032d7 <remove_chain+0x12>
c000331e:	83 f8 ff             	cmp    eax,0xffffffff
c0003321:	74 6d                	je     c0003390 <remove_chain+0xcb>
c0003323:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003326:	75 6f                	jne    c0003397 <remove_chain+0xd2>
c0003328:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000332b:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000332e:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003331:	39 d0                	cmp    eax,edx
c0003333:	73 08                	jae    c000333d <remove_chain+0x78>
c0003335:	40                   	inc    eax
c0003336:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000333a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000333d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003340:	39 e9                	cmp    ecx,ebp
c0003342:	75 64                	jne    c00033a8 <remove_chain+0xe3>
c0003344:	89 ee                	mov    esi,ebp
c0003346:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003349:	76 0f                	jbe    c000335a <remove_chain+0x95>
c000334b:	89 f2                	mov    edx,esi
c000334d:	89 f8                	mov    eax,edi
c000334f:	e8 84 fa ff ff       	call   c0002dd8 <get_fat>
c0003354:	89 c5                	mov    ebp,eax
c0003356:	85 c0                	test   eax,eax
c0003358:	75 bf                	jne    c0003319 <remove_chain+0x54>
c000335a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000335d:	0f 85 a0 00 00 00    	jne    c0003403 <remove_chain+0x13e>
c0003363:	eb 6c                	jmp    c00033d1 <remove_chain+0x10c>
c0003365:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003368:	84 c0                	test   al,al
c000336a:	75 7d                	jne    c00033e9 <remove_chain+0x124>
c000336c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000336f:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003373:	0f 84 86 00 00 00    	je     c00033ff <remove_chain+0x13a>
c0003379:	89 da                	mov    edx,ebx
c000337b:	89 f8                	mov    eax,edi
c000337d:	e8 56 fa ff ff       	call   c0002dd8 <get_fat>
c0003382:	83 f8 01             	cmp    eax,0x1
c0003385:	0f 86 4c ff ff ff    	jbe    c00032d7 <remove_chain+0x12>
c000338b:	83 f8 ff             	cmp    eax,0xffffffff
c000338e:	75 4e                	jne    c00033de <remove_chain+0x119>
c0003390:	b8 01 00 00 00       	mov    eax,0x1
c0003395:	eb 6e                	jmp    c0003405 <remove_chain+0x140>
c0003397:	31 c9                	xor    ecx,ecx
c0003399:	89 f2                	mov    edx,esi
c000339b:	89 d8                	mov    eax,ebx
c000339d:	e8 31 f8 ff ff       	call   c0002bd3 <put_fat>
c00033a2:	85 c0                	test   eax,eax
c00033a4:	74 82                	je     c0003328 <remove_chain+0x63>
c00033a6:	eb 5d                	jmp    c0003405 <remove_chain+0x140>
c00033a8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033ab:	75 1b                	jne    c00033c8 <remove_chain+0x103>
c00033ad:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00033b1:	89 d8                	mov    eax,ebx
c00033b3:	83 ec 0c             	sub    esp,0xc
c00033b6:	6a 00                	push   0x0
c00033b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00033bc:	e8 5d f7 ff ff       	call   c0002b1e <change_bitmap>
c00033c1:	83 c4 10             	add    esp,0x10
c00033c4:	85 c0                	test   eax,eax
c00033c6:	75 3d                	jne    c0003405 <remove_chain+0x140>
c00033c8:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033cc:	e9 73 ff ff ff       	jmp    c0003344 <remove_chain+0x7f>
c00033d1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d6:	75 8d                	jne    c0003365 <remove_chain+0xa0>
c00033d8:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033dc:	eb 25                	jmp    c0003403 <remove_chain+0x13e>
c00033de:	8d 53 01             	lea    edx,[ebx+0x1]
c00033e1:	89 c3                	mov    ebx,eax
c00033e3:	39 c2                	cmp    edx,eax
c00033e5:	74 88                	je     c000336f <remove_chain+0xaa>
c00033e7:	eb 1a                	jmp    c0003403 <remove_chain+0x13e>
c00033e9:	3c 03                	cmp    al,0x3
c00033eb:	75 16                	jne    c0003403 <remove_chain+0x13e>
c00033ed:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033f4:	77 0d                	ja     c0003403 <remove_chain+0x13e>
c00033f6:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033f9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033fd:	72 04                	jb     c0003403 <remove_chain+0x13e>
c00033ff:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003403:	31 c0                	xor    eax,eax
c0003405:	83 c4 1c             	add    esp,0x1c
c0003408:	5b                   	pop    ebx
c0003409:	5e                   	pop    esi
c000340a:	5f                   	pop    edi
c000340b:	5d                   	pop    ebp
c000340c:	c3                   	ret    

c000340d <dir_clear>:
c000340d:	55                   	push   ebp
c000340e:	57                   	push   edi
c000340f:	56                   	push   esi
c0003410:	89 c6                	mov    esi,eax
c0003412:	53                   	push   ebx
c0003413:	83 ec 1c             	sub    esp,0x1c
c0003416:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000341a:	e8 9d ed ff ff       	call   c00021bc <sync_window>
c000341f:	85 c0                	test   eax,eax
c0003421:	0f 85 de 00 00 00    	jne    c0003505 <dir_clear+0xf8>
c0003427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000342b:	89 f0                	mov    eax,esi
c000342d:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003430:	e8 d6 e8 ff ff       	call   c0001d0b <clst2sect>
c0003435:	b9 00 02 00 00       	mov    ecx,0x200
c000343a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000343e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003442:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003445:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003448:	89 e8                	mov    eax,ebp
c000344a:	31 d2                	xor    edx,edx
c000344c:	e8 b5 e6 ff ff       	call   c0001b06 <mem_set>
c0003451:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003455:	c1 e3 09             	shl    ebx,0x9
c0003458:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000345e:	76 1f                	jbe    c000347f <dir_clear+0x72>
c0003460:	bb 00 80 00 00       	mov    ebx,0x8000
c0003465:	eb 18                	jmp    c000347f <dir_clear+0x72>
c0003467:	83 ec 0c             	sub    esp,0xc
c000346a:	53                   	push   ebx
c000346b:	e8 35 4e 00 00       	call   c00082a5 <ff_memalloc>
c0003470:	83 c4 10             	add    esp,0x10
c0003473:	89 c7                	mov    edi,eax
c0003475:	85 c0                	test   eax,eax
c0003477:	0f 85 8f 00 00 00    	jne    c000350c <dir_clear+0xff>
c000347d:	d1 eb                	shr    ebx,1
c000347f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003485:	77 e0                	ja     c0003467 <dir_clear+0x5a>
c0003487:	31 db                	xor    ebx,ebx
c0003489:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348d:	39 d8                	cmp    eax,ebx
c000348f:	76 66                	jbe    c00034f7 <dir_clear+0xea>
c0003491:	83 ec 0c             	sub    esp,0xc
c0003494:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003498:	6a 01                	push   0x1
c000349a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000349e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00034a2:	55                   	push   ebp
c00034a3:	50                   	push   eax
c00034a4:	e8 94 e5 ff ff       	call   c0001a3d <disk_write>
c00034a9:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00034ae:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00034b3:	83 c4 20             	add    esp,0x20
c00034b6:	85 c0                	test   eax,eax
c00034b8:	75 3d                	jne    c00034f7 <dir_clear+0xea>
c00034ba:	43                   	inc    ebx
c00034bb:	eb cc                	jmp    c0003489 <dir_clear+0x7c>
c00034bd:	83 ec 0c             	sub    esp,0xc
c00034c0:	31 d2                	xor    edx,edx
c00034c2:	55                   	push   ebp
c00034c3:	89 d8                	mov    eax,ebx
c00034c5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034c9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034cd:	52                   	push   edx
c00034ce:	50                   	push   eax
c00034cf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034d3:	57                   	push   edi
c00034d4:	50                   	push   eax
c00034d5:	e8 63 e5 ff ff       	call   c0001a3d <disk_write>
c00034da:	83 c4 20             	add    esp,0x20
c00034dd:	85 c0                	test   eax,eax
c00034df:	75 0a                	jne    c00034eb <dir_clear+0xde>
c00034e1:	01 eb                	add    ebx,ebp
c00034e3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034e7:	39 d8                	cmp    eax,ebx
c00034e9:	77 d2                	ja     c00034bd <dir_clear+0xb0>
c00034eb:	83 ec 0c             	sub    esp,0xc
c00034ee:	57                   	push   edi
c00034ef:	e8 c7 4d 00 00       	call   c00082bb <ff_memfree>
c00034f4:	83 c4 10             	add    esp,0x10
c00034f7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034fb:	39 d8                	cmp    eax,ebx
c00034fd:	0f 95 c0             	setne  al
c0003500:	0f b6 c0             	movzx  eax,al
c0003503:	eb 19                	jmp    c000351e <dir_clear+0x111>
c0003505:	b8 01 00 00 00       	mov    eax,0x1
c000350a:	eb 12                	jmp    c000351e <dir_clear+0x111>
c000350c:	89 d9                	mov    ecx,ebx
c000350e:	31 d2                	xor    edx,edx
c0003510:	c1 eb 09             	shr    ebx,0x9
c0003513:	e8 ee e5 ff ff       	call   c0001b06 <mem_set>
c0003518:	89 dd                	mov    ebp,ebx
c000351a:	31 db                	xor    ebx,ebx
c000351c:	eb c5                	jmp    c00034e3 <dir_clear+0xd6>
c000351e:	83 c4 1c             	add    esp,0x1c
c0003521:	5b                   	pop    ebx
c0003522:	5e                   	pop    esi
c0003523:	5f                   	pop    edi
c0003524:	5d                   	pop    ebp
c0003525:	c3                   	ret    

c0003526 <dir_next>:
c0003526:	55                   	push   ebp
c0003527:	57                   	push   edi
c0003528:	56                   	push   esi
c0003529:	53                   	push   ebx
c000352a:	89 c3                	mov    ebx,eax
c000352c:	83 ec 1c             	sub    esp,0x1c
c000352f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003535:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003538:	8d 78 20             	lea    edi,[eax+0x20]
c000353b:	31 c0                	xor    eax,eax
c000353d:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003541:	0f 94 c0             	sete   al
c0003544:	48                   	dec    eax
c0003545:	25 00 00 20 f0       	and    eax,0xf0200000
c000354a:	05 00 00 00 10       	add    eax,0x10000000
c000354f:	39 f8                	cmp    eax,edi
c0003551:	77 0e                	ja     c0003561 <dir_next+0x3b>
c0003553:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000355a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003561:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003564:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003567:	b8 04 00 00 00       	mov    eax,0x4
c000356c:	89 ce                	mov    esi,ecx
c000356e:	09 d6                	or     esi,edx
c0003570:	0f 84 da 00 00 00    	je     c0003650 <dir_next+0x12a>
c0003576:	89 f8                	mov    eax,edi
c0003578:	25 ff 01 00 00       	and    eax,0x1ff
c000357d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003581:	0f 85 b9 00 00 00    	jne    c0003640 <dir_next+0x11a>
c0003587:	83 c2 01             	add    edx,0x1
c000358a:	83 d1 00             	adc    ecx,0x0
c000358d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003590:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003593:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003596:	85 d2                	test   edx,edx
c0003598:	75 29                	jne    c00035c3 <dir_next+0x9d>
c000359a:	89 fa                	mov    edx,edi
c000359c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00035a0:	c1 ea 05             	shr    edx,0x5
c00035a3:	39 c2                	cmp    edx,eax
c00035a5:	0f 82 95 00 00 00    	jb     c0003640 <dir_next+0x11a>
c00035ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00035b2:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00035b9:	b8 04 00 00 00       	mov    eax,0x4
c00035be:	e9 8d 00 00 00       	jmp    c0003650 <dir_next+0x12a>
c00035c3:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035c7:	89 f9                	mov    ecx,edi
c00035c9:	48                   	dec    eax
c00035ca:	c1 e9 09             	shr    ecx,0x9
c00035cd:	85 c8                	test   eax,ecx
c00035cf:	75 6f                	jne    c0003640 <dir_next+0x11a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	e8 00 f8 ff ff       	call   c0002dd8 <get_fat>
c00035d8:	89 c6                	mov    esi,eax
c00035da:	83 f8 01             	cmp    eax,0x1
c00035dd:	77 07                	ja     c00035e6 <dir_next+0xc0>
c00035df:	b8 02 00 00 00       	mov    eax,0x2
c00035e4:	eb 6a                	jmp    c0003650 <dir_next+0x12a>
c00035e6:	83 f8 ff             	cmp    eax,0xffffffff
c00035e9:	75 07                	jne    c00035f2 <dir_next+0xcc>
c00035eb:	b8 01 00 00 00       	mov    eax,0x1
c00035f0:	eb 5e                	jmp    c0003650 <dir_next+0x12a>
c00035f2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035f5:	77 37                	ja     c000362e <dir_next+0x108>
c00035f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035fc:	74 ad                	je     c00035ab <dir_next+0x85>
c00035fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003601:	89 d8                	mov    eax,ebx
c0003603:	e8 be fa ff ff       	call   c00030c6 <create_chain>
c0003608:	89 c6                	mov    esi,eax
c000360a:	b8 07 00 00 00       	mov    eax,0x7
c000360f:	85 f6                	test   esi,esi
c0003611:	74 3d                	je     c0003650 <dir_next+0x12a>
c0003613:	83 fe 01             	cmp    esi,0x1
c0003616:	74 c7                	je     c00035df <dir_next+0xb9>
c0003618:	83 fe ff             	cmp    esi,0xffffffff
c000361b:	74 ce                	je     c00035eb <dir_next+0xc5>
c000361d:	89 f2                	mov    edx,esi
c000361f:	89 e8                	mov    eax,ebp
c0003621:	e8 e7 fd ff ff       	call   c000340d <dir_clear>
c0003626:	85 c0                	test   eax,eax
c0003628:	75 c1                	jne    c00035eb <dir_next+0xc5>
c000362a:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000362e:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003631:	89 f2                	mov    edx,esi
c0003633:	89 e8                	mov    eax,ebp
c0003635:	e8 d1 e6 ff ff       	call   c0001d0b <clst2sect>
c000363a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000363d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003644:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003647:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000364b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000364e:	31 c0                	xor    eax,eax
c0003650:	83 c4 1c             	add    esp,0x1c
c0003653:	5b                   	pop    ebx
c0003654:	5e                   	pop    esi
c0003655:	5f                   	pop    edi
c0003656:	5d                   	pop    ebp
c0003657:	c3                   	ret    

c0003658 <load_xdir>:
c0003658:	55                   	push   ebp
c0003659:	57                   	push   edi
c000365a:	56                   	push   esi
c000365b:	89 c6                	mov    esi,eax
c000365d:	53                   	push   ebx
c000365e:	83 ec 1c             	sub    esp,0x1c
c0003661:	8b 00                	mov    eax,DWORD PTR [eax]
c0003663:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003666:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003669:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366c:	e8 df eb ff ff       	call   c0002250 <move_window>
c0003671:	89 c3                	mov    ebx,eax
c0003673:	85 c0                	test   eax,eax
c0003675:	0f 85 0c 01 00 00    	jne    c0003787 <load_xdir+0x12f>
c000367b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000367e:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003681:	0f 85 fb 00 00 00    	jne    c0003782 <load_xdir+0x12a>
c0003687:	89 f8                	mov    eax,edi
c0003689:	b9 20 00 00 00       	mov    ecx,0x20
c000368e:	e8 5e e4 ff ff       	call   c0001af1 <mem_cpy>
c0003693:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003697:	40                   	inc    eax
c0003698:	c1 e0 05             	shl    eax,0x5
c000369b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000369f:	83 e8 60             	sub    eax,0x60
c00036a2:	3d 00 02 00 00       	cmp    eax,0x200
c00036a7:	0f 87 d5 00 00 00    	ja     c0003782 <load_xdir+0x12a>
c00036ad:	31 d2                	xor    edx,edx
c00036af:	89 f0                	mov    eax,esi
c00036b1:	e8 70 fe ff ff       	call   c0003526 <dir_next>
c00036b6:	89 c3                	mov    ebx,eax
c00036b8:	83 f8 04             	cmp    eax,0x4
c00036bb:	0f 84 c1 00 00 00    	je     c0003782 <load_xdir+0x12a>
c00036c1:	85 c0                	test   eax,eax
c00036c3:	0f 85 be 00 00 00    	jne    c0003787 <load_xdir+0x12f>
c00036c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cc:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d1:	e8 7a eb ff ff       	call   c0002250 <move_window>
c00036d6:	89 c3                	mov    ebx,eax
c00036d8:	85 c0                	test   eax,eax
c00036da:	0f 85 a7 00 00 00    	jne    c0003787 <load_xdir+0x12f>
c00036e0:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e3:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036e6:	0f 85 96 00 00 00    	jne    c0003782 <load_xdir+0x12a>
c00036ec:	8d 47 20             	lea    eax,[edi+0x20]
c00036ef:	b9 20 00 00 00       	mov    ecx,0x20
c00036f4:	e8 f8 e3 ff ff       	call   c0001af1 <mem_cpy>
c00036f9:	31 d2                	xor    edx,edx
c00036fb:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036ff:	b9 0f 00 00 00       	mov    ecx,0xf
c0003704:	83 c0 2c             	add    eax,0x2c
c0003707:	f7 f1                	div    ecx
c0003709:	c1 e0 05             	shl    eax,0x5
c000370c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003710:	77 70                	ja     c0003782 <load_xdir+0x12a>
c0003712:	bd 40 00 00 00       	mov    ebp,0x40
c0003717:	31 d2                	xor    edx,edx
c0003719:	89 f0                	mov    eax,esi
c000371b:	e8 06 fe ff ff       	call   c0003526 <dir_next>
c0003720:	89 c3                	mov    ebx,eax
c0003722:	83 f8 04             	cmp    eax,0x4
c0003725:	74 5b                	je     c0003782 <load_xdir+0x12a>
c0003727:	85 c0                	test   eax,eax
c0003729:	75 5c                	jne    c0003787 <load_xdir+0x12f>
c000372b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000372e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003731:	8b 06                	mov    eax,DWORD PTR [esi]
c0003733:	e8 18 eb ff ff       	call   c0002250 <move_window>
c0003738:	89 c3                	mov    ebx,eax
c000373a:	85 c0                	test   eax,eax
c000373c:	75 49                	jne    c0003787 <load_xdir+0x12f>
c000373e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003741:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003744:	75 3c                	jne    c0003782 <load_xdir+0x12a>
c0003746:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000374c:	77 0d                	ja     c000375b <load_xdir+0x103>
c000374e:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003751:	b9 20 00 00 00       	mov    ecx,0x20
c0003756:	e8 96 e3 ff ff       	call   c0001af1 <mem_cpy>
c000375b:	83 c5 20             	add    ebp,0x20
c000375e:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003762:	77 b3                	ja     c0003717 <load_xdir+0xbf>
c0003764:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000376a:	77 1b                	ja     c0003787 <load_xdir+0x12f>
c000376c:	89 f8                	mov    eax,edi
c000376e:	e8 cd e7 ff ff       	call   c0001f40 <xdir_sum>
c0003773:	89 c1                	mov    ecx,eax
c0003775:	8d 47 02             	lea    eax,[edi+0x2]
c0003778:	e8 f5 e2 ff ff       	call   c0001a72 <ld_word>
c000377d:	66 39 c1             	cmp    cx,ax
c0003780:	74 05                	je     c0003787 <load_xdir+0x12f>
c0003782:	bb 02 00 00 00       	mov    ebx,0x2
c0003787:	83 c4 1c             	add    esp,0x1c
c000378a:	89 d8                	mov    eax,ebx
c000378c:	5b                   	pop    ebx
c000378d:	5e                   	pop    esi
c000378e:	5f                   	pop    edi
c000378f:	5d                   	pop    ebp
c0003790:	c3                   	ret    

c0003791 <load_obj_xdir>:
c0003791:	53                   	push   ebx
c0003792:	89 c3                	mov    ebx,eax
c0003794:	83 ec 08             	sub    esp,0x8
c0003797:	8b 02                	mov    eax,DWORD PTR [edx]
c0003799:	89 03                	mov    DWORD PTR [ebx],eax
c000379b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000379e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00037a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00037a4:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00037a7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00037aa:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00037b1:	30 c0                	xor    al,al
c00037b3:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037ba:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00037bd:	89 d8                	mov    eax,ebx
c00037bf:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037c2:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037c5:	e8 04 f8 ff ff       	call   c0002fce <dir_sdi>
c00037ca:	85 c0                	test   eax,eax
c00037cc:	75 0b                	jne    c00037d9 <load_obj_xdir+0x48>
c00037ce:	89 d8                	mov    eax,ebx
c00037d0:	83 c4 08             	add    esp,0x8
c00037d3:	5b                   	pop    ebx
c00037d4:	e9 7f fe ff ff       	jmp    c0003658 <load_xdir>
c00037d9:	83 c4 08             	add    esp,0x8
c00037dc:	5b                   	pop    ebx
c00037dd:	c3                   	ret    

c00037de <dir_read>:
c00037de:	55                   	push   ebp
c00037df:	bd 04 00 00 00       	mov    ebp,0x4
c00037e4:	57                   	push   edi
c00037e5:	56                   	push   esi
c00037e6:	be ff ff ff ff       	mov    esi,0xffffffff
c00037eb:	53                   	push   ebx
c00037ec:	89 c3                	mov    ebx,eax
c00037ee:	83 ec 1c             	sub    esp,0x1c
c00037f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037f5:	8b 38                	mov    edi,DWORD PTR [eax]
c00037f7:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037fc:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037ff:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003802:	89 c8                	mov    eax,ecx
c0003804:	09 d0                	or     eax,edx
c0003806:	0f 84 25 01 00 00    	je     c0003931 <dir_read+0x153>
c000380c:	89 f8                	mov    eax,edi
c000380e:	e8 3d ea ff ff       	call   c0002250 <move_window>
c0003813:	89 c5                	mov    ebp,eax
c0003815:	85 c0                	test   eax,eax
c0003817:	0f 85 23 01 00 00    	jne    c0003940 <dir_read+0x162>
c000381d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003820:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003822:	84 c9                	test   cl,cl
c0003824:	0f 84 11 01 00 00    	je     c000393b <dir_read+0x15d>
c000382a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000382d:	75 48                	jne    c0003877 <dir_read+0x99>
c000382f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003834:	74 10                	je     c0003846 <dir_read+0x68>
c0003836:	80 f9 83             	cmp    cl,0x83
c0003839:	0f 85 dd 00 00 00    	jne    c000391c <dir_read+0x13e>
c000383f:	31 ed                	xor    ebp,ebp
c0003841:	e9 08 01 00 00       	jmp    c000394e <dir_read+0x170>
c0003846:	80 f9 85             	cmp    cl,0x85
c0003849:	0f 85 cd 00 00 00    	jne    c000391c <dir_read+0x13e>
c000384f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003852:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003855:	89 d8                	mov    eax,ebx
c0003857:	e8 fc fd ff ff       	call   c0003658 <load_xdir>
c000385c:	89 c5                	mov    ebp,eax
c000385e:	85 c0                	test   eax,eax
c0003860:	0f 85 da 00 00 00    	jne    c0003940 <dir_read+0x162>
c0003866:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003869:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000386c:	83 e0 3f             	and    eax,0x3f
c000386f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003872:	e9 d7 00 00 00       	jmp    c000394e <dir_read+0x170>
c0003877:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000387a:	83 e0 3f             	and    eax,0x3f
c000387d:	80 f9 2e             	cmp    cl,0x2e
c0003880:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003884:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003887:	0f 84 8a 00 00 00    	je     c0003917 <dir_read+0x139>
c000388d:	80 f9 e5             	cmp    cl,0xe5
c0003890:	0f 84 81 00 00 00    	je     c0003917 <dir_read+0x139>
c0003896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000389a:	83 e0 1f             	and    eax,0x1f
c000389d:	83 f8 08             	cmp    eax,0x8
c00038a0:	0f 94 c0             	sete   al
c00038a3:	0f b6 c0             	movzx  eax,al
c00038a6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038aa:	75 6b                	jne    c0003917 <dir_read+0x139>
c00038ac:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00038b1:	75 44                	jne    c00038f7 <dir_read+0x119>
c00038b3:	f6 c1 40             	test   cl,0x40
c00038b6:	74 12                	je     c00038ca <dir_read+0xec>
c00038b8:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038bb:	83 e1 bf             	and    ecx,0xffffffbf
c00038be:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038c2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038c5:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038c8:	eb 06                	jmp    c00038d0 <dir_read+0xf2>
c00038ca:	89 f0                	mov    eax,esi
c00038cc:	38 c8                	cmp    al,cl
c00038ce:	75 47                	jne    c0003917 <dir_read+0x139>
c00038d0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038d4:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d9:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038dc:	75 3e                	jne    c000391c <dir_read+0x13e>
c00038de:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038e2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038e5:	e8 8a e4 ff ff       	call   c0001d74 <pick_lfn>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 2e                	je     c000391c <dir_read+0x13e>
c00038ee:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038f2:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038f5:	eb 25                	jmp    c000391c <dir_read+0x13e>
c00038f7:	89 f0                	mov    eax,esi
c00038f9:	84 c0                	test   al,al
c00038fb:	75 11                	jne    c000390e <dir_read+0x130>
c00038fd:	89 d0                	mov    eax,edx
c00038ff:	e8 2a e6 ff ff       	call   c0001f2e <sum_sfn>
c0003904:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003908:	0f 84 31 ff ff ff    	je     c000383f <dir_read+0x61>
c000390e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003915:	eb 37                	jmp    c000394e <dir_read+0x170>
c0003917:	be ff ff ff ff       	mov    esi,0xffffffff
c000391c:	31 d2                	xor    edx,edx
c000391e:	89 d8                	mov    eax,ebx
c0003920:	e8 01 fc ff ff       	call   c0003526 <dir_next>
c0003925:	89 c5                	mov    ebp,eax
c0003927:	85 c0                	test   eax,eax
c0003929:	0f 84 cd fe ff ff    	je     c00037fc <dir_read+0x1e>
c000392f:	eb 0f                	jmp    c0003940 <dir_read+0x162>
c0003931:	85 ed                	test   ebp,ebp
c0003933:	0f 84 06 ff ff ff    	je     c000383f <dir_read+0x61>
c0003939:	eb 05                	jmp    c0003940 <dir_read+0x162>
c000393b:	bd 04 00 00 00       	mov    ebp,0x4
c0003940:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003947:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000394e:	83 c4 1c             	add    esp,0x1c
c0003951:	89 e8                	mov    eax,ebp
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	5f                   	pop    edi
c0003956:	5d                   	pop    ebp
c0003957:	c3                   	ret    

c0003958 <dir_alloc>:
c0003958:	55                   	push   ebp
c0003959:	89 d5                	mov    ebp,edx
c000395b:	57                   	push   edi
c000395c:	31 d2                	xor    edx,edx
c000395e:	56                   	push   esi
c000395f:	53                   	push   ebx
c0003960:	89 c3                	mov    ebx,eax
c0003962:	83 ec 0c             	sub    esp,0xc
c0003965:	8b 38                	mov    edi,DWORD PTR [eax]
c0003967:	e8 62 f6 ff ff       	call   c0002fce <dir_sdi>
c000396c:	85 c0                	test   eax,eax
c000396e:	75 4e                	jne    c00039be <dir_alloc+0x66>
c0003970:	31 f6                	xor    esi,esi
c0003972:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003975:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003978:	89 f8                	mov    eax,edi
c000397a:	e8 d1 e8 ff ff       	call   c0002250 <move_window>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 3b                	jne    c00039be <dir_alloc+0x66>
c0003983:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003986:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003989:	8a 12                	mov    dl,BYTE PTR [edx]
c000398b:	75 07                	jne    c0003994 <dir_alloc+0x3c>
c000398d:	f7 d2                	not    edx
c000398f:	c0 ea 07             	shr    dl,0x7
c0003992:	eb 0d                	jmp    c00039a1 <dir_alloc+0x49>
c0003994:	84 d2                	test   dl,dl
c0003996:	0f 94 c1             	sete   cl
c0003999:	80 fa e5             	cmp    dl,0xe5
c000399c:	0f 94 c2             	sete   dl
c000399f:	09 ca                	or     edx,ecx
c00039a1:	84 d2                	test   dl,dl
c00039a3:	74 07                	je     c00039ac <dir_alloc+0x54>
c00039a5:	46                   	inc    esi
c00039a6:	39 ee                	cmp    esi,ebp
c00039a8:	75 04                	jne    c00039ae <dir_alloc+0x56>
c00039aa:	eb 1c                	jmp    c00039c8 <dir_alloc+0x70>
c00039ac:	31 f6                	xor    esi,esi
c00039ae:	ba 01 00 00 00       	mov    edx,0x1
c00039b3:	89 d8                	mov    eax,ebx
c00039b5:	e8 6c fb ff ff       	call   c0003526 <dir_next>
c00039ba:	85 c0                	test   eax,eax
c00039bc:	74 b4                	je     c0003972 <dir_alloc+0x1a>
c00039be:	83 f8 04             	cmp    eax,0x4
c00039c1:	75 05                	jne    c00039c8 <dir_alloc+0x70>
c00039c3:	b8 07 00 00 00       	mov    eax,0x7
c00039c8:	83 c4 0c             	add    esp,0xc
c00039cb:	5b                   	pop    ebx
c00039cc:	5e                   	pop    esi
c00039cd:	5f                   	pop    edi
c00039ce:	5d                   	pop    ebp
c00039cf:	c3                   	ret    

c00039d0 <store_xdir>:
c00039d0:	55                   	push   ebp
c00039d1:	57                   	push   edi
c00039d2:	89 c7                	mov    edi,eax
c00039d4:	56                   	push   esi
c00039d5:	53                   	push   ebx
c00039d6:	83 ec 0c             	sub    esp,0xc
c00039d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00039db:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039de:	89 e8                	mov    eax,ebp
c00039e0:	e8 5b e5 ff ff       	call   c0001f40 <xdir_sum>
c00039e5:	0f b7 d0             	movzx  edx,ax
c00039e8:	8d 45 02             	lea    eax,[ebp+0x2]
c00039eb:	e8 f4 e0 ff ff       	call   c0001ae4 <st_word>
c00039f0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039f4:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039f7:	89 f8                	mov    eax,edi
c00039f9:	e8 d0 f5 ff ff       	call   c0002fce <dir_sdi>
c00039fe:	89 c6                	mov    esi,eax
c0003a00:	85 f6                	test   esi,esi
c0003a02:	75 3d                	jne    c0003a41 <store_xdir+0x71>
c0003a04:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003a07:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003a0a:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a0c:	e8 3f e8 ff ff       	call   c0002250 <move_window>
c0003a11:	89 c6                	mov    esi,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	75 2a                	jne    c0003a41 <store_xdir+0x71>
c0003a17:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003a1a:	b9 20 00 00 00       	mov    ecx,0x20
c0003a1f:	89 ea                	mov    edx,ebp
c0003a21:	e8 cb e0 ff ff       	call   c0001af1 <mem_cpy>
c0003a26:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a28:	85 db                	test   ebx,ebx
c0003a2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a2e:	74 11                	je     c0003a41 <store_xdir+0x71>
c0003a30:	31 d2                	xor    edx,edx
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	83 c5 20             	add    ebp,0x20
c0003a37:	e8 ea fa ff ff       	call   c0003526 <dir_next>
c0003a3c:	4b                   	dec    ebx
c0003a3d:	89 c6                	mov    esi,eax
c0003a3f:	eb bf                	jmp    c0003a00 <store_xdir+0x30>
c0003a41:	89 f0                	mov    eax,esi
c0003a43:	83 fe 02             	cmp    esi,0x2
c0003a46:	76 05                	jbe    c0003a4d <store_xdir+0x7d>
c0003a48:	b8 02 00 00 00       	mov    eax,0x2
c0003a4d:	83 c4 0c             	add    esp,0xc
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	5d                   	pop    ebp
c0003a54:	c3                   	ret    

c0003a55 <dir_remove>:
c0003a55:	57                   	push   edi
c0003a56:	56                   	push   esi
c0003a57:	53                   	push   ebx
c0003a58:	89 c3                	mov    ebx,eax
c0003a5a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a5d:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a5f:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a62:	83 fa ff             	cmp    edx,0xffffffff
c0003a65:	74 09                	je     c0003a70 <dir_remove+0x1b>
c0003a67:	e8 62 f5 ff ff       	call   c0002fce <dir_sdi>
c0003a6c:	85 c0                	test   eax,eax
c0003a6e:	75 41                	jne    c0003ab1 <dir_remove+0x5c>
c0003a70:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a73:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a76:	89 f0                	mov    eax,esi
c0003a78:	e8 d3 e7 ff ff       	call   c0002250 <move_window>
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 26                	jne    c0003aa7 <dir_remove+0x52>
c0003a81:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a84:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a87:	75 05                	jne    c0003a8e <dir_remove+0x39>
c0003a89:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a8c:	eb 03                	jmp    c0003a91 <dir_remove+0x3c>
c0003a8e:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a91:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a95:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a98:	73 17                	jae    c0003ab1 <dir_remove+0x5c>
c0003a9a:	31 d2                	xor    edx,edx
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 83 fa ff ff       	call   c0003526 <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 c9                	je     c0003a70 <dir_remove+0x1b>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_remove+0x5c>
c0003aac:	b8 02 00 00 00       	mov    eax,0x2
c0003ab1:	5b                   	pop    ebx
c0003ab2:	5e                   	pop    esi
c0003ab3:	5f                   	pop    edi
c0003ab4:	c3                   	ret    

c0003ab5 <create_name>:
c0003ab5:	55                   	push   ebp
c0003ab6:	89 d5                	mov    ebp,edx
c0003ab8:	57                   	push   edi
c0003ab9:	89 c7                	mov    edi,eax
c0003abb:	56                   	push   esi
c0003abc:	31 f6                	xor    esi,esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 3c             	sub    esp,0x3c
c0003ac2:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ac4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ac8:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003acd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ad1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ad5:	e8 72 e0 ff ff       	call   c0001b4c <tchar2uni>
c0003ada:	89 c3                	mov    ebx,eax
c0003adc:	83 f8 ff             	cmp    eax,0xffffffff
c0003adf:	75 0a                	jne    c0003aeb <create_name+0x36>
c0003ae1:	b8 06 00 00 00       	mov    eax,0x6
c0003ae6:	e9 9e 02 00 00       	jmp    c0003d89 <create_name+0x2d4>
c0003aeb:	3d ff ff 00 00       	cmp    eax,0xffff
c0003af0:	76 0c                	jbe    c0003afe <create_name+0x49>
c0003af2:	c1 e8 10             	shr    eax,0x10
c0003af5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003af9:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003afd:	46                   	inc    esi
c0003afe:	66 83 fb 1f          	cmp    bx,0x1f
c0003b02:	76 4f                	jbe    c0003b53 <create_name+0x9e>
c0003b04:	66 83 fb 5c          	cmp    bx,0x5c
c0003b08:	74 35                	je     c0003b3f <create_name+0x8a>
c0003b0a:	66 83 fb 2f          	cmp    bx,0x2f
c0003b0e:	74 2f                	je     c0003b3f <create_name+0x8a>
c0003b10:	66 83 fb 7f          	cmp    bx,0x7f
c0003b14:	77 11                	ja     c0003b27 <create_name+0x72>
c0003b16:	0f b7 d3             	movzx  edx,bx
c0003b19:	b8 12 5e 02 c0       	mov    eax,0xc0025e12
c0003b1e:	e8 11 e0 ff ff       	call   c0001b34 <chk_chr>
c0003b23:	85 c0                	test   eax,eax
c0003b25:	75 ba                	jne    c0003ae1 <create_name+0x2c>
c0003b27:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b2d:	77 b2                	ja     c0003ae1 <create_name+0x2c>
c0003b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b33:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b37:	46                   	inc    esi
c0003b38:	eb 97                	jmp    c0003ad1 <create_name+0x1c>
c0003b3a:	40                   	inc    eax
c0003b3b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b43:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b45:	80 fa 2f             	cmp    dl,0x2f
c0003b48:	74 f0                	je     c0003b3a <create_name+0x85>
c0003b4a:	80 fa 5c             	cmp    dl,0x5c
c0003b4d:	74 eb                	je     c0003b3a <create_name+0x85>
c0003b4f:	31 db                	xor    ebx,ebx
c0003b51:	eb 02                	jmp    c0003b55 <create_name+0xa0>
c0003b53:	b3 04                	mov    bl,0x4
c0003b55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b59:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b5c:	85 f6                	test   esi,esi
c0003b5e:	74 18                	je     c0003b78 <create_name+0xc3>
c0003b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b64:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b69:	66 83 f8 20          	cmp    ax,0x20
c0003b6d:	74 06                	je     c0003b75 <create_name+0xc0>
c0003b6f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b73:	75 03                	jne    c0003b78 <create_name+0xc3>
c0003b75:	4e                   	dec    esi
c0003b76:	eb e4                	jmp    c0003b5c <create_name+0xa7>
c0003b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7c:	31 ed                	xor    ebp,ebp
c0003b7e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b84:	85 f6                	test   esi,esi
c0003b86:	0f 84 55 ff ff ff    	je     c0003ae1 <create_name+0x2c>
c0003b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b90:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b93:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b97:	66 83 f8 20          	cmp    ax,0x20
c0003b9b:	75 04                	jne    c0003ba1 <create_name+0xec>
c0003b9d:	89 d5                	mov    ebp,edx
c0003b9f:	eb eb                	jmp    c0003b8c <create_name+0xd7>
c0003ba1:	85 ed                	test   ebp,ebp
c0003ba3:	75 06                	jne    c0003bab <create_name+0xf6>
c0003ba5:	66 83 f8 2e          	cmp    ax,0x2e
c0003ba9:	75 08                	jne    c0003bb3 <create_name+0xfe>
c0003bab:	83 cb 03             	or     ebx,0x3
c0003bae:	eb 03                	jmp    c0003bb3 <create_name+0xfe>
c0003bb0:	4e                   	dec    esi
c0003bb1:	74 0c                	je     c0003bbf <create_name+0x10a>
c0003bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bb7:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003bbd:	75 f1                	jne    c0003bb0 <create_name+0xfb>
c0003bbf:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bc4:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003bc7:	ba 20 00 00 00       	mov    edx,0x20
c0003bcc:	e8 35 df ff ff       	call   c0001b06 <mem_set>
c0003bd1:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bd9:	31 c9                	xor    ecx,ecx
c0003bdb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003be0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003be3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003beb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	0f 84 30 01 00 00    	je     c0003d28 <create_name+0x273>
c0003bf8:	66 83 fd 20          	cmp    bp,0x20
c0003bfc:	74 10                	je     c0003c0e <create_name+0x159>
c0003bfe:	66 83 fd 2e          	cmp    bp,0x2e
c0003c02:	75 13                	jne    c0003c17 <create_name+0x162>
c0003c04:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c08:	0f 84 6b 01 00 00    	je     c0003d79 <create_name+0x2c4>
c0003c0e:	83 cb 03             	or     ebx,0x3
c0003c11:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003c15:	eb c9                	jmp    c0003be0 <create_name+0x12b>
c0003c17:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003c1b:	73 0b                	jae    c0003c28 <create_name+0x173>
c0003c1d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c21:	75 47                	jne    c0003c6a <create_name+0x1b5>
c0003c23:	e9 51 01 00 00       	jmp    c0003d79 <create_name+0x2c4>
c0003c28:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c2d:	75 10                	jne    c0003c3f <create_name+0x18a>
c0003c2f:	83 cb 03             	or     ebx,0x3
c0003c32:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3a:	e9 e9 00 00 00       	jmp    c0003d28 <create_name+0x273>
c0003c3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c43:	74 0d                	je     c0003c52 <create_name+0x19d>
c0003c45:	83 cb 03             	or     ebx,0x3
c0003c48:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c4c:	0f 87 d6 00 00 00    	ja     c0003d28 <create_name+0x273>
c0003c52:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c57:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c5b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c63:	b9 08 00 00 00       	mov    ecx,0x8
c0003c68:	eb a7                	jmp    c0003c11 <create_name+0x15c>
c0003c6a:	66 83 fd 7f          	cmp    bp,0x7f
c0003c6e:	76 68                	jbe    c0003cd8 <create_name+0x223>
c0003c70:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c74:	88 da                	mov    dl,bl
c0003c76:	83 ca 02             	or     edx,0x2
c0003c79:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c7d:	50                   	push   eax
c0003c7e:	50                   	push   eax
c0003c7f:	68 b5 01 00 00       	push   0x1b5
c0003c84:	55                   	push   ebp
c0003c85:	e8 48 46 00 00       	call   c00082d2 <ff_uni2oem>
c0003c8a:	83 c4 10             	add    esp,0x10
c0003c8d:	89 c5                	mov    ebp,eax
c0003c8f:	a8 80                	test   al,0x80
c0003c91:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c95:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c99:	74 0c                	je     c0003ca7 <create_name+0x1f2>
c0003c9b:	83 e5 7f             	and    ebp,0x7f
c0003c9e:	0f b6 ad 60 5d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda2a0]
c0003ca5:	eb 2a                	jmp    c0003cd1 <create_name+0x21c>
c0003ca7:	66 3d ff 00          	cmp    ax,0xff
c0003cab:	76 24                	jbe    c0003cd1 <create_name+0x21c>
c0003cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003cb1:	48                   	dec    eax
c0003cb2:	39 c8                	cmp    eax,ecx
c0003cb4:	77 0c                	ja     c0003cc2 <create_name+0x20d>
c0003cb6:	83 cb 03             	or     ebx,0x3
c0003cb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003cbd:	e9 4f ff ff ff       	jmp    c0003c11 <create_name+0x15c>
c0003cc2:	89 e8                	mov    eax,ebp
c0003cc4:	88 d3                	mov    bl,dl
c0003cc6:	66 c1 e8 08          	shr    ax,0x8
c0003cca:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cce:	41                   	inc    ecx
c0003ccf:	eb 4b                	jmp    c0003d1c <create_name+0x267>
c0003cd1:	88 d3                	mov    bl,dl
c0003cd3:	66 85 ed             	test   bp,bp
c0003cd6:	74 19                	je     c0003cf1 <create_name+0x23c>
c0003cd8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cdc:	0f b7 d5             	movzx  edx,bp
c0003cdf:	b8 1b 5e 02 c0       	mov    eax,0xc0025e1b
c0003ce4:	e8 4b de ff ff       	call   c0001b34 <chk_chr>
c0003ce9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ced:	85 c0                	test   eax,eax
c0003cef:	74 0a                	je     c0003cfb <create_name+0x246>
c0003cf1:	83 cb 03             	or     ebx,0x3
c0003cf4:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cf9:	eb 21                	jmp    c0003d1c <create_name+0x267>
c0003cfb:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cfe:	66 83 f8 19          	cmp    ax,0x19
c0003d02:	77 07                	ja     c0003d0b <create_name+0x256>
c0003d04:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003d09:	eb 11                	jmp    c0003d1c <create_name+0x267>
c0003d0b:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003d0e:	66 83 f8 19          	cmp    ax,0x19
c0003d12:	77 08                	ja     c0003d1c <create_name+0x267>
c0003d14:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003d19:	83 ed 20             	sub    ebp,0x20
c0003d1c:	89 e8                	mov    eax,ebp
c0003d1e:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003d22:	41                   	inc    ecx
c0003d23:	e9 e9 fe ff ff       	jmp    c0003c11 <create_name+0x15c>
c0003d28:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d2c:	75 04                	jne    c0003d32 <create_name+0x27d>
c0003d2e:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d32:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d37:	75 05                	jne    c0003d3e <create_name+0x289>
c0003d39:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d3e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d42:	83 e0 0c             	and    eax,0xc
c0003d45:	3c 0c                	cmp    al,0xc
c0003d47:	74 0b                	je     c0003d54 <create_name+0x29f>
c0003d49:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d4d:	83 e0 03             	and    eax,0x3
c0003d50:	3c 03                	cmp    al,0x3
c0003d52:	75 05                	jne    c0003d59 <create_name+0x2a4>
c0003d54:	83 cb 02             	or     ebx,0x2
c0003d57:	eb 19                	jmp    c0003d72 <create_name+0x2bd>
c0003d59:	f6 c3 02             	test   bl,0x2
c0003d5c:	75 14                	jne    c0003d72 <create_name+0x2bd>
c0003d5e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d63:	74 03                	je     c0003d68 <create_name+0x2b3>
c0003d65:	83 cb 10             	or     ebx,0x10
c0003d68:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d6d:	74 03                	je     c0003d72 <create_name+0x2bd>
c0003d6f:	83 cb 08             	or     ebx,0x8
c0003d72:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d75:	31 c0                	xor    eax,eax
c0003d77:	eb 10                	jmp    c0003d89 <create_name+0x2d4>
c0003d79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d7e:	0f 85 ce fe ff ff    	jne    c0003c52 <create_name+0x19d>
c0003d84:	e9 a6 fe ff ff       	jmp    c0003c2f <create_name+0x17a>
c0003d89:	83 c4 3c             	add    esp,0x3c
c0003d8c:	5b                   	pop    ebx
c0003d8d:	5e                   	pop    esi
c0003d8e:	5f                   	pop    edi
c0003d8f:	5d                   	pop    ebp
c0003d90:	c3                   	ret    

c0003d91 <xname_sum>:
c0003d91:	56                   	push   esi
c0003d92:	53                   	push   ebx
c0003d93:	89 c6                	mov    esi,eax
c0003d95:	51                   	push   ecx
c0003d96:	31 db                	xor    ebx,ebx
c0003d98:	83 c6 02             	add    esi,0x2
c0003d9b:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d9f:	66 85 c0             	test   ax,ax
c0003da2:	74 1f                	je     c0003dc3 <xname_sum+0x32>
c0003da4:	83 ec 0c             	sub    esp,0xc
c0003da7:	66 d1 cb             	ror    bx,1
c0003daa:	50                   	push   eax
c0003dab:	e8 1e 46 00 00       	call   c00083ce <ff_wtoupper>
c0003db0:	83 c4 10             	add    esp,0x10
c0003db3:	0f b6 d0             	movzx  edx,al
c0003db6:	66 c1 e8 08          	shr    ax,0x8
c0003dba:	01 d3                	add    ebx,edx
c0003dbc:	66 d1 cb             	ror    bx,1
c0003dbf:	01 c3                	add    ebx,eax
c0003dc1:	eb d5                	jmp    c0003d98 <xname_sum+0x7>
c0003dc3:	89 d8                	mov    eax,ebx
c0003dc5:	5a                   	pop    edx
c0003dc6:	5b                   	pop    ebx
c0003dc7:	5e                   	pop    esi
c0003dc8:	c3                   	ret    

c0003dc9 <create_xdir>:
c0003dc9:	55                   	push   ebp
c0003dca:	b9 40 00 00 00       	mov    ecx,0x40
c0003dcf:	57                   	push   edi
c0003dd0:	bd 01 00 00 00       	mov    ebp,0x1
c0003dd5:	56                   	push   esi
c0003dd6:	31 ff                	xor    edi,edi
c0003dd8:	53                   	push   ebx
c0003dd9:	be 40 00 00 00       	mov    esi,0x40
c0003dde:	89 c3                	mov    ebx,eax
c0003de0:	83 ec 1c             	sub    esp,0x1c
c0003de3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003de7:	31 d2                	xor    edx,edx
c0003de9:	e8 18 dd ff ff       	call   c0001b06 <mem_set>
c0003dee:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003df1:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003df5:	31 c9                	xor    ecx,ecx
c0003df7:	8d 46 01             	lea    eax,[esi+0x1]
c0003dfa:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dfe:	83 c6 02             	add    esi,0x2
c0003e01:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003e05:	66 85 ed             	test   bp,bp
c0003e08:	74 12                	je     c0003e1c <create_xdir+0x53>
c0003e0a:	0f b6 c1             	movzx  eax,cl
c0003e0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e11:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003e15:	66 83 fd 01          	cmp    bp,0x1
c0003e19:	80 d9 ff             	sbb    cl,0xff
c0003e1c:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003e1f:	0f b7 d5             	movzx  edx,bp
c0003e22:	83 c6 02             	add    esi,0x2
c0003e25:	e8 ba dc ff ff       	call   c0001ae4 <st_word>
c0003e2a:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e30:	75 d3                	jne    c0003e05 <create_xdir+0x3c>
c0003e32:	8d 47 01             	lea    eax,[edi+0x1]
c0003e35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e39:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e3d:	0f b6 c1             	movzx  eax,cl
c0003e40:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e45:	74 07                	je     c0003e4e <create_xdir+0x85>
c0003e47:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e4c:	eb a9                	jmp    c0003df7 <create_xdir+0x2e>
c0003e4e:	8d 47 02             	lea    eax,[edi+0x2]
c0003e51:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e54:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e57:	89 d0                	mov    eax,edx
c0003e59:	e8 33 ff ff ff       	call   c0003d91 <xname_sum>
c0003e5e:	83 c4 1c             	add    esp,0x1c
c0003e61:	0f b7 d0             	movzx  edx,ax
c0003e64:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e67:	5b                   	pop    ebx
c0003e68:	5e                   	pop    esi
c0003e69:	5f                   	pop    edi
c0003e6a:	5d                   	pop    ebp
c0003e6b:	e9 74 dc ff ff       	jmp    c0001ae4 <st_word>

c0003e70 <cmp_lfn>:
c0003e70:	55                   	push   ebp
c0003e71:	57                   	push   edi
c0003e72:	89 d7                	mov    edi,edx
c0003e74:	56                   	push   esi
c0003e75:	53                   	push   ebx
c0003e76:	83 ec 1c             	sub    esp,0x1c
c0003e79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e7d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e80:	e8 ed db ff ff       	call   c0001a72 <ld_word>
c0003e85:	66 85 c0             	test   ax,ax
c0003e88:	74 07                	je     c0003e91 <cmp_lfn+0x21>
c0003e8a:	31 c0                	xor    eax,eax
c0003e8c:	e9 9a 00 00 00       	jmp    c0003f2b <cmp_lfn+0xbb>
c0003e91:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e93:	bd 01 00 00 00       	mov    ebp,0x1
c0003e98:	83 e3 3f             	and    ebx,0x3f
c0003e9b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003ea3:	4b                   	dec    ebx
c0003ea4:	6b db 0d             	imul   ebx,ebx,0xd
c0003ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003eab:	0f b6 80 e0 5d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda220]
c0003eb2:	01 f8                	add    eax,edi
c0003eb4:	e8 b9 db ff ff       	call   c0001a72 <ld_word>
c0003eb9:	66 85 ed             	test   bp,bp
c0003ebc:	89 c6                	mov    esi,eax
c0003ebe:	74 3c                	je     c0003efc <cmp_lfn+0x8c>
c0003ec0:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003ec6:	77 c2                	ja     c0003e8a <cmp_lfn+0x1a>
c0003ec8:	83 ec 0c             	sub    esp,0xc
c0003ecb:	0f b7 c0             	movzx  eax,ax
c0003ece:	50                   	push   eax
c0003ecf:	e8 fa 44 00 00       	call   c00083ce <ff_wtoupper>
c0003ed4:	89 c5                	mov    ebp,eax
c0003ed6:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ed9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003edd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ee1:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ee5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee8:	e8 e1 44 00 00       	call   c00083ce <ff_wtoupper>
c0003eed:	83 c4 10             	add    esp,0x10
c0003ef0:	39 c5                	cmp    ebp,eax
c0003ef2:	75 96                	jne    c0003e8a <cmp_lfn+0x1a>
c0003ef4:	89 f5                	mov    ebp,esi
c0003ef6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003efa:	eb 04                	jmp    c0003f00 <cmp_lfn+0x90>
c0003efc:	66 46                	inc    si
c0003efe:	75 8a                	jne    c0003e8a <cmp_lfn+0x1a>
c0003f00:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003f04:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003f09:	75 9c                	jne    c0003ea7 <cmp_lfn+0x37>
c0003f0b:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003f0e:	74 16                	je     c0003f26 <cmp_lfn+0xb6>
c0003f10:	66 85 ed             	test   bp,bp
c0003f13:	74 11                	je     c0003f26 <cmp_lfn+0xb6>
c0003f15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003f19:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003f1e:	0f 94 c0             	sete   al
c0003f21:	0f b6 c0             	movzx  eax,al
c0003f24:	eb 05                	jmp    c0003f2b <cmp_lfn+0xbb>
c0003f26:	b8 01 00 00 00       	mov    eax,0x1
c0003f2b:	83 c4 1c             	add    esp,0x1c
c0003f2e:	5b                   	pop    ebx
c0003f2f:	5e                   	pop    esi
c0003f30:	5f                   	pop    edi
c0003f31:	5d                   	pop    ebp
c0003f32:	c3                   	ret    

c0003f33 <dir_find>:
c0003f33:	55                   	push   ebp
c0003f34:	31 d2                	xor    edx,edx
c0003f36:	57                   	push   edi
c0003f37:	56                   	push   esi
c0003f38:	53                   	push   ebx
c0003f39:	89 c3                	mov    ebx,eax
c0003f3b:	83 ec 1c             	sub    esp,0x1c
c0003f3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f40:	e8 89 f0 ff ff       	call   c0002fce <dir_sdi>
c0003f45:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f48:	85 c0                	test   eax,eax
c0003f4a:	0f 85 9e 01 00 00    	jne    c00040ee <dir_find+0x1bb>
c0003f50:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f53:	0f 85 8d 00 00 00    	jne    c0003fe6 <dir_find+0xb3>
c0003f59:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f5c:	e8 30 fe ff ff       	call   c0003d91 <xname_sum>
c0003f61:	89 c7                	mov    edi,eax
c0003f63:	31 d2                	xor    edx,edx
c0003f65:	89 d8                	mov    eax,ebx
c0003f67:	e8 72 f8 ff ff       	call   c00037de <dir_read>
c0003f6c:	85 c0                	test   eax,eax
c0003f6e:	0f 85 5e 01 00 00    	jne    c00040d2 <dir_find+0x19f>
c0003f74:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f77:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f7a:	e8 f3 da ff ff       	call   c0001a72 <ld_word>
c0003f7f:	66 39 f8             	cmp    ax,di
c0003f82:	75 df                	jne    c0003f63 <dir_find+0x30>
c0003f84:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f87:	31 ed                	xor    ebp,ebp
c0003f89:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f8d:	ba 40 00 00 00       	mov    edx,0x40
c0003f92:	89 e9                	mov    ecx,ebp
c0003f94:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f98:	0f 84 42 01 00 00    	je     c00040e0 <dir_find+0x1ad>
c0003f9e:	f6 c2 1f             	test   dl,0x1f
c0003fa1:	75 03                	jne    c0003fa6 <dir_find+0x73>
c0003fa3:	83 c2 02             	add    edx,0x2
c0003fa6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003faa:	89 d0                	mov    eax,edx
c0003fac:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003faf:	e8 be da ff ff       	call   c0001a72 <ld_word>
c0003fb4:	83 ec 0c             	sub    esp,0xc
c0003fb7:	0f b7 c0             	movzx  eax,ax
c0003fba:	50                   	push   eax
c0003fbb:	e8 0e 44 00 00       	call   c00083ce <ff_wtoupper>
c0003fc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003fc4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fc7:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fce:	e8 fb 43 00 00       	call   c00083ce <ff_wtoupper>
c0003fd3:	83 c4 10             	add    esp,0x10
c0003fd6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fda:	75 87                	jne    c0003f63 <dir_find+0x30>
c0003fdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fe0:	45                   	inc    ebp
c0003fe1:	83 c2 02             	add    edx,0x2
c0003fe4:	eb ac                	jmp    c0003f92 <dir_find+0x5f>
c0003fe6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fed:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003ff2:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ff7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003ffa:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003ffd:	89 f0                	mov    eax,esi
c0003fff:	e8 4c e2 ff ff       	call   c0002250 <move_window>
c0004004:	85 c0                	test   eax,eax
c0004006:	0f 85 c6 00 00 00    	jne    c00040d2 <dir_find+0x19f>
c000400c:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000400f:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004012:	84 c9                	test   cl,cl
c0004014:	0f 84 bd 00 00 00    	je     c00040d7 <dir_find+0x1a4>
c000401a:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000401d:	88 d0                	mov    al,dl
c000401f:	83 e0 3f             	and    eax,0x3f
c0004022:	80 f9 e5             	cmp    cl,0xe5
c0004025:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004028:	0f 84 87 00 00 00    	je     c00040b5 <dir_find+0x182>
c000402e:	80 e2 08             	and    dl,0x8
c0004031:	74 06                	je     c0004039 <dir_find+0x106>
c0004033:	3c 0f                	cmp    al,0xf
c0004035:	75 7e                	jne    c00040b5 <dir_find+0x182>
c0004037:	eb 04                	jmp    c000403d <dir_find+0x10a>
c0004039:	3c 0f                	cmp    al,0xf
c000403b:	75 4c                	jne    c0004089 <dir_find+0x156>
c000403d:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004041:	75 7e                	jne    c00040c1 <dir_find+0x18e>
c0004043:	f6 c1 40             	test   cl,0x40
c0004046:	74 12                	je     c000405a <dir_find+0x127>
c0004048:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000404b:	83 e1 bf             	and    ecx,0xffffffbf
c000404e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004052:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004055:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004058:	eb 06                	jmp    c0004060 <dir_find+0x12d>
c000405a:	89 f8                	mov    eax,edi
c000405c:	38 c8                	cmp    al,cl
c000405e:	75 5c                	jne    c00040bc <dir_find+0x189>
c0004060:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004064:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004069:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000406c:	75 53                	jne    c00040c1 <dir_find+0x18e>
c000406e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004072:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004075:	89 ea                	mov    edx,ebp
c0004077:	e8 f4 fd ff ff       	call   c0003e70 <cmp_lfn>
c000407c:	85 c0                	test   eax,eax
c000407e:	74 41                	je     c00040c1 <dir_find+0x18e>
c0004080:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004084:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004087:	eb 38                	jmp    c00040c1 <dir_find+0x18e>
c0004089:	89 f8                	mov    eax,edi
c000408b:	84 c0                	test   al,al
c000408d:	75 0d                	jne    c000409c <dir_find+0x169>
c000408f:	89 e8                	mov    eax,ebp
c0004091:	e8 98 de ff ff       	call   c0001f2e <sum_sfn>
c0004096:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000409a:	74 52                	je     c00040ee <dir_find+0x1bb>
c000409c:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00040a0:	75 13                	jne    c00040b5 <dir_find+0x182>
c00040a2:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00040a5:	b9 0b 00 00 00       	mov    ecx,0xb
c00040aa:	89 e8                	mov    eax,ebp
c00040ac:	e8 60 da ff ff       	call   c0001b11 <mem_cmp>
c00040b1:	85 c0                	test   eax,eax
c00040b3:	74 39                	je     c00040ee <dir_find+0x1bb>
c00040b5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040bc:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040c1:	31 d2                	xor    edx,edx
c00040c3:	89 d8                	mov    eax,ebx
c00040c5:	e8 5c f4 ff ff       	call   c0003526 <dir_next>
c00040ca:	85 c0                	test   eax,eax
c00040cc:	0f 84 25 ff ff ff    	je     c0003ff7 <dir_find+0xc4>
c00040d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d5:	eb 17                	jmp    c00040ee <dir_find+0x1bb>
c00040d7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040de:	eb 0e                	jmp    c00040ee <dir_find+0x1bb>
c00040e0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040e3:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040e8:	0f 85 75 fe ff ff    	jne    c0003f63 <dir_find+0x30>
c00040ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040f1:	83 c4 1c             	add    esp,0x1c
c00040f4:	5b                   	pop    ebx
c00040f5:	5e                   	pop    esi
c00040f6:	5f                   	pop    edi
c00040f7:	5d                   	pop    ebp
c00040f8:	c3                   	ret    

c00040f9 <dir_register>:
c00040f9:	55                   	push   ebp
c00040fa:	57                   	push   edi
c00040fb:	56                   	push   esi
c00040fc:	be 06 00 00 00       	mov    esi,0x6
c0004101:	53                   	push   ebx
c0004102:	83 ec 6c             	sub    esp,0x6c
c0004105:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004109:	0f 85 62 02 00 00    	jne    c0004371 <dir_register+0x278>
c000410f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004111:	31 ff                	xor    edi,edi
c0004113:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004116:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000411b:	74 03                	je     c0004120 <dir_register+0x27>
c000411d:	47                   	inc    edi
c000411e:	eb f6                	jmp    c0004116 <dir_register+0x1d>
c0004120:	89 c3                	mov    ebx,eax
c0004122:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004126:	0f 85 e1 00 00 00    	jne    c000420d <dir_register+0x114>
c000412c:	83 c7 0e             	add    edi,0xe
c000412f:	b9 0f 00 00 00       	mov    ecx,0xf
c0004134:	89 f8                	mov    eax,edi
c0004136:	31 d2                	xor    edx,edx
c0004138:	f7 f1                	div    ecx
c000413a:	8d 50 02             	lea    edx,[eax+0x2]
c000413d:	89 c7                	mov    edi,eax
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 12 f8 ff ff       	call   c0003958 <dir_alloc>
c0004146:	89 c6                	mov    esi,eax
c0004148:	85 c0                	test   eax,eax
c000414a:	0f 85 21 02 00 00    	jne    c0004371 <dir_register+0x278>
c0004150:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004156:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004159:	c1 e7 05             	shl    edi,0x5
c000415c:	29 f8                	sub    eax,edi
c000415e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004161:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004164:	a8 04                	test   al,0x4
c0004166:	0f 84 91 00 00 00    	je     c00041fd <dir_register+0x104>
c000416c:	83 e0 fb             	and    eax,0xfffffffb
c000416f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004172:	89 d8                	mov    eax,ebx
c0004174:	e8 25 ec ff ff       	call   c0002d9e <fill_first_frag>
c0004179:	85 c0                	test   eax,eax
c000417b:	0f 85 ee 01 00 00    	jne    c000436f <dir_register+0x276>
c0004181:	83 c9 ff             	or     ecx,0xffffffff
c0004184:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004187:	89 d8                	mov    eax,ebx
c0004189:	e8 db eb ff ff       	call   c0002d69 <fill_last_frag>
c000418e:	85 c0                	test   eax,eax
c0004190:	0f 85 d9 01 00 00    	jne    c000436f <dir_register+0x276>
c0004196:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419a:	74 61                	je     c00041fd <dir_register+0x104>
c000419c:	89 da                	mov    edx,ebx
c000419e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041a2:	e8 ea f5 ff ff       	call   c0003791 <load_obj_xdir>
c00041a7:	85 c0                	test   eax,eax
c00041a9:	0f 85 c0 01 00 00    	jne    c000436f <dir_register+0x276>
c00041af:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00041b3:	31 c9                	xor    ecx,ecx
c00041b5:	c1 e2 09             	shl    edx,0x9
c00041b8:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00041bb:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00041be:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00041c1:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00041c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041c7:	83 c0 38             	add    eax,0x38
c00041ca:	e8 1c d9 ff ff       	call   c0001aeb <st_qword>
c00041cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041d2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041d5:	83 c0 28             	add    eax,0x28
c00041d8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041db:	e8 0b d9 ff ff       	call   c0001aeb <st_qword>
c00041e0:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041e3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041e6:	83 c8 01             	or     eax,0x1
c00041e9:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f0:	e8 db f7 ff ff       	call   c00039d0 <store_xdir>
c00041f5:	85 c0                	test   eax,eax
c00041f7:	0f 85 72 01 00 00    	jne    c000436f <dir_register+0x276>
c00041fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004200:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004203:	e8 c1 fb ff ff       	call   c0003dc9 <create_xdir>
c0004208:	e9 64 01 00 00       	jmp    c0004371 <dir_register+0x278>
c000420d:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004210:	b9 0c 00 00 00       	mov    ecx,0xc
c0004215:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004219:	89 c2                	mov    edx,eax
c000421b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000421f:	e8 cd d8 ff ff       	call   c0001af1 <mem_cpy>
c0004224:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004229:	74 58                	je     c0004283 <dir_register+0x18a>
c000422b:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000422f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004237:	83 ec 0c             	sub    esp,0xc
c000423a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000423d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004241:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004245:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004249:	e8 24 dc ff ff       	call   c0001e72 <gen_numname>
c000424e:	89 d8                	mov    eax,ebx
c0004250:	e8 de fc ff ff       	call   c0003f33 <dir_find>
c0004255:	83 c4 10             	add    esp,0x10
c0004258:	89 c6                	mov    esi,eax
c000425a:	85 c0                	test   eax,eax
c000425c:	75 15                	jne    c0004273 <dir_register+0x17a>
c000425e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004262:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004267:	75 ce                	jne    c0004237 <dir_register+0x13e>
c0004269:	be 07 00 00 00       	mov    esi,0x7
c000426e:	e9 fe 00 00 00       	jmp    c0004371 <dir_register+0x278>
c0004273:	83 f8 04             	cmp    eax,0x4
c0004276:	0f 85 f5 00 00 00    	jne    c0004371 <dir_register+0x278>
c000427c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004280:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004283:	b9 01 00 00 00       	mov    ecx,0x1
c0004288:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000428d:	74 0f                	je     c000429e <dir_register+0x1a5>
c000428f:	b9 0d 00 00 00       	mov    ecx,0xd
c0004294:	8d 47 0c             	lea    eax,[edi+0xc]
c0004297:	31 d2                	xor    edx,edx
c0004299:	f7 f1                	div    ecx
c000429b:	8d 48 01             	lea    ecx,[eax+0x1]
c000429e:	89 ca                	mov    edx,ecx
c00042a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042a4:	89 d8                	mov    eax,ebx
c00042a6:	e8 ad f6 ff ff       	call   c0003958 <dir_alloc>
c00042ab:	89 c6                	mov    esi,eax
c00042ad:	85 c0                	test   eax,eax
c00042af:	0f 85 bc 00 00 00    	jne    c0004371 <dir_register+0x278>
c00042b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042b9:	49                   	dec    ecx
c00042ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042be:	74 6a                	je     c000432a <dir_register+0x231>
c00042c0:	89 c8                	mov    eax,ecx
c00042c2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042c5:	c1 e0 05             	shl    eax,0x5
c00042c8:	29 c2                	sub    edx,eax
c00042ca:	89 d8                	mov    eax,ebx
c00042cc:	e8 fd ec ff ff       	call   c0002fce <dir_sdi>
c00042d1:	89 c6                	mov    esi,eax
c00042d3:	85 c0                	test   eax,eax
c00042d5:	0f 85 96 00 00 00    	jne    c0004371 <dir_register+0x278>
c00042db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042df:	e8 4a dc ff ff       	call   c0001f2e <sum_sfn>
c00042e4:	0f b6 f8             	movzx  edi,al
c00042e7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042ea:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042ed:	89 e8                	mov    eax,ebp
c00042ef:	e8 5c df ff ff       	call   c0002250 <move_window>
c00042f4:	89 c6                	mov    esi,eax
c00042f6:	85 c0                	test   eax,eax
c00042f8:	75 77                	jne    c0004371 <dir_register+0x278>
c00042fa:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 ec 0c             	sub    esp,0xc
c0004305:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004308:	57                   	push   edi
c0004309:	e8 e0 da ff ff       	call   c0001dee <put_lfn>
c000430e:	31 d2                	xor    edx,edx
c0004310:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004314:	89 d8                	mov    eax,ebx
c0004316:	e8 0b f2 ff ff       	call   c0003526 <dir_next>
c000431b:	83 c4 10             	add    esp,0x10
c000431e:	89 c6                	mov    esi,eax
c0004320:	85 c0                	test   eax,eax
c0004322:	75 4d                	jne    c0004371 <dir_register+0x278>
c0004324:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004328:	75 bd                	jne    c00042e7 <dir_register+0x1ee>
c000432a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000432d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004330:	89 e8                	mov    eax,ebp
c0004332:	e8 19 df ff ff       	call   c0002250 <move_window>
c0004337:	89 c6                	mov    esi,eax
c0004339:	85 c0                	test   eax,eax
c000433b:	75 34                	jne    c0004371 <dir_register+0x278>
c000433d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004340:	b9 20 00 00 00       	mov    ecx,0x20
c0004345:	31 d2                	xor    edx,edx
c0004347:	e8 ba d7 ff ff       	call   c0001b06 <mem_set>
c000434c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000434f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004353:	b9 0b 00 00 00       	mov    ecx,0xb
c0004358:	e8 94 d7 ff ff       	call   c0001af1 <mem_cpy>
c000435d:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004360:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004363:	83 e0 18             	and    eax,0x18
c0004366:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004369:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000436d:	eb 02                	jmp    c0004371 <dir_register+0x278>
c000436f:	89 c6                	mov    esi,eax
c0004371:	83 c4 6c             	add    esp,0x6c
c0004374:	89 f0                	mov    eax,esi
c0004376:	5b                   	pop    ebx
c0004377:	5e                   	pop    esi
c0004378:	5f                   	pop    edi
c0004379:	5d                   	pop    ebp
c000437a:	c3                   	ret    

c000437b <sync_fs>:
c000437b:	56                   	push   esi
c000437c:	53                   	push   ebx
c000437d:	53                   	push   ebx
c000437e:	89 c3                	mov    ebx,eax
c0004380:	e8 37 de ff ff       	call   c00021bc <sync_window>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 b1 00 00 00    	jne    c000443e <sync_fs+0xc3>
c000438d:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004390:	0f 85 8e 00 00 00    	jne    c0004424 <sync_fs+0xa9>
c0004396:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000439a:	0f 85 84 00 00 00    	jne    c0004424 <sync_fs+0xa9>
c00043a0:	b9 00 02 00 00       	mov    ecx,0x200
c00043a5:	8d 73 54             	lea    esi,[ebx+0x54]
c00043a8:	31 d2                	xor    edx,edx
c00043aa:	89 f0                	mov    eax,esi
c00043ac:	e8 55 d7 ff ff       	call   c0001b06 <mem_set>
c00043b1:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00043b7:	ba 55 aa 00 00       	mov    edx,0xaa55
c00043bc:	e8 23 d7 ff ff       	call   c0001ae4 <st_word>
c00043c1:	ba 52 52 61 41       	mov    edx,0x41615252
c00043c6:	89 f0                	mov    eax,esi
c00043c8:	e8 1b d7 ff ff       	call   c0001ae8 <st_dword>
c00043cd:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043d3:	ba 72 72 41 61       	mov    edx,0x61417272
c00043d8:	e8 0b d7 ff ff       	call   c0001ae8 <st_dword>
c00043dd:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043e0:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043e6:	e8 fd d6 ff ff       	call   c0001ae8 <st_dword>
c00043eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ee:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043f4:	e8 ef d6 ff ff       	call   c0001ae8 <st_dword>
c00043f9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ff:	83 c0 01             	add    eax,0x1
c0004402:	83 d2 00             	adc    edx,0x0
c0004405:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004408:	83 ec 0c             	sub    esp,0xc
c000440b:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000440e:	6a 01                	push   0x1
c0004410:	52                   	push   edx
c0004411:	50                   	push   eax
c0004412:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004416:	56                   	push   esi
c0004417:	50                   	push   eax
c0004418:	e8 20 d6 ff ff       	call   c0001a3d <disk_write>
c000441d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004421:	83 c4 20             	add    esp,0x20
c0004424:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004428:	51                   	push   ecx
c0004429:	6a 00                	push   0x0
c000442b:	6a 00                	push   0x0
c000442d:	50                   	push   eax
c000442e:	e8 20 d6 ff ff       	call   c0001a53 <disk_ioctl>
c0004433:	83 c4 10             	add    esp,0x10
c0004436:	85 c0                	test   eax,eax
c0004438:	0f 95 c0             	setne  al
c000443b:	0f b6 c0             	movzx  eax,al
c000443e:	5a                   	pop    edx
c000443f:	5b                   	pop    ebx
c0004440:	5e                   	pop    esi
c0004441:	c3                   	ret    

c0004442 <create_partition>:
c0004442:	55                   	push   ebp
c0004443:	0f b6 c0             	movzx  eax,al
c0004446:	57                   	push   edi
c0004447:	56                   	push   esi
c0004448:	53                   	push   ebx
c0004449:	83 ec 60             	sub    esp,0x60
c000444c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004450:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004454:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004458:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000445c:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004460:	50                   	push   eax
c0004461:	6a 01                	push   0x1
c0004463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004467:	e8 e7 d5 ff ff       	call   c0001a53 <disk_ioctl>
c000446c:	83 c4 10             	add    esp,0x10
c000446f:	85 c0                	test   eax,eax
c0004471:	74 0a                	je     c000447d <create_partition+0x3b>
c0004473:	b8 01 00 00 00       	mov    eax,0x1
c0004478:	e9 67 05 00 00       	jmp    c00049e4 <create_partition+0x5a2>
c000447d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004481:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004485:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004489:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000448d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004492:	0f 86 ed 03 00 00    	jbe    c0004885 <create_partition+0x443>
c0004498:	83 c0 df             	add    eax,0xffffffdf
c000449b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00044a3:	83 d2 ff             	adc    edx,0xffffffff
c00044a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00044aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00044ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00044b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044b6:	83 c0 bd             	add    eax,0xffffffbd
c00044b9:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00044c0:	83 d2 ff             	adc    edx,0xffffffff
c00044c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044c7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044d3:	be 22 00 00 00       	mov    esi,0x22
c00044d8:	31 ff                	xor    edi,edi
c00044da:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044e2:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044ea:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044f2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044f6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044fc:	75 0e                	jne    c000450c <create_partition+0xca>
c00044fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004503:	31 d2                	xor    edx,edx
c0004505:	89 d8                	mov    eax,ebx
c0004507:	e8 fa d5 ff ff       	call   c0001b06 <mem_set>
c000450c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004510:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004518:	0b 04 24             	or     eax,DWORD PTR [esp]
c000451b:	0f 84 23 01 00 00    	je     c0004644 <create_partition+0x202>
c0004521:	89 f0                	mov    eax,esi
c0004523:	89 fa                	mov    edx,edi
c0004525:	05 ff 07 00 00       	add    eax,0x7ff
c000452a:	83 d2 00             	adc    edx,0x0
c000452d:	89 c1                	mov    ecx,eax
c000452f:	89 d7                	mov    edi,edx
c0004531:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004537:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000453b:	89 ce                	mov    esi,ecx
c000453d:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004541:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004545:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004549:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000454c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004550:	89 04 24             	mov    DWORD PTR [esp],eax
c0004553:	b8 64 00 00 00       	mov    eax,0x64
c0004558:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000455b:	b8 00 00 00 00       	mov    eax,0x0
c0004560:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004564:	72 41                	jb     c00045a7 <create_partition+0x165>
c0004566:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000456a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000456e:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004572:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004577:	01 c1                	add    ecx,eax
c0004579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000457d:	f7 24 24             	mul    DWORD PTR [esp]
c0004580:	6a 00                	push   0x0
c0004582:	01 ca                	add    edx,ecx
c0004584:	6a 64                	push   0x64
c0004586:	52                   	push   edx
c0004587:	50                   	push   eax
c0004588:	e8 cf ed 01 00       	call   c002335c <__udivdi3>
c000458d:	83 c4 10             	add    esp,0x10
c0004590:	05 ff 07 00 00       	add    eax,0x7ff
c0004595:	83 d2 00             	adc    edx,0x0
c0004598:	89 c1                	mov    ecx,eax
c000459a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000459e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00045a4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00045a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00045aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00045ae:	01 f0                	add    eax,esi
c00045b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00045b4:	11 fa                	adc    edx,edi
c00045b6:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00045ba:	19 d1                	sbb    ecx,edx
c00045bc:	73 2e                	jae    c00045ec <create_partition+0x1aa>
c00045be:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00045c2:	89 f8                	mov    eax,edi
c00045c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045cb:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045d7:	73 6b                	jae    c0004644 <create_partition+0x202>
c00045d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045e1:	29 f0                	sub    eax,esi
c00045e3:	19 fa                	sbb    edx,edi
c00045e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00045e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045f3:	74 4f                	je     c0004644 <create_partition+0x202>
c00045f5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045f8:	b9 10 00 00 00       	mov    ecx,0x10
c00045fd:	ba f0 5d 02 c0       	mov    edx,0xc0025df0
c0004602:	e8 ea d4 ff ff       	call   c0001af1 <mem_cpy>
c0004607:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000460b:	b9 10 00 00 00       	mov    ecx,0x10
c0004610:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004614:	e8 2c db ff ff       	call   c0002145 <make_rand>
c0004619:	89 f2                	mov    edx,esi
c000461b:	89 f9                	mov    ecx,edi
c000461d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004621:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004625:	e8 c1 d4 ff ff       	call   c0001aeb <st_qword>
c000462a:	03 34 24             	add    esi,DWORD PTR [esp]
c000462d:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004631:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004635:	89 f2                	mov    edx,esi
c0004637:	89 f9                	mov    ecx,edi
c0004639:	83 c2 ff             	add    edx,0xffffffff
c000463c:	83 d1 ff             	adc    ecx,0xffffffff
c000463f:	e8 a7 d4 ff ff       	call   c0001aeb <st_qword>
c0004644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004648:	83 e8 80             	sub    eax,0xffffff80
c000464b:	89 c5                	mov    ebp,eax
c000464d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004651:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004657:	75 6b                	jne    c00046c4 <create_partition+0x282>
c0004659:	45                   	inc    ebp
c000465a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000465e:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004663:	e8 39 da ff ff       	call   c00020a1 <crc32>
c0004668:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000466e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004672:	75 e5                	jne    c0004659 <create_partition+0x217>
c0004674:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004678:	31 d2                	xor    edx,edx
c000467a:	83 ec 0c             	sub    esp,0xc
c000467d:	c1 ed 09             	shr    ebp,0x9
c0004680:	6a 01                	push   0x1
c0004682:	8d 45 02             	lea    eax,[ebp+0x2]
c0004685:	52                   	push   edx
c0004686:	50                   	push   eax
c0004687:	53                   	push   ebx
c0004688:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468c:	e8 ac d3 ff ff       	call   c0001a3d <disk_write>
c0004691:	83 c4 20             	add    esp,0x20
c0004694:	85 c0                	test   eax,eax
c0004696:	0f 85 d7 fd ff ff    	jne    c0004473 <create_partition+0x31>
c000469c:	83 ec 0c             	sub    esp,0xc
c000469f:	31 d2                	xor    edx,edx
c00046a1:	6a 01                	push   0x1
c00046a3:	89 e8                	mov    eax,ebp
c00046a5:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00046a9:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00046ad:	52                   	push   edx
c00046ae:	50                   	push   eax
c00046af:	53                   	push   ebx
c00046b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046b4:	e8 84 d3 ff ff       	call   c0001a3d <disk_write>
c00046b9:	83 c4 20             	add    esp,0x20
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 af fd ff ff    	jne    c0004473 <create_partition+0x31>
c00046c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046cc:	3d 00 40 00 00       	cmp    eax,0x4000
c00046d1:	74 0d                	je     c00046e0 <create_partition+0x29e>
c00046d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046db:	e9 12 fe ff ff       	jmp    c00044f2 <create_partition+0xb0>
c00046e0:	31 d2                	xor    edx,edx
c00046e2:	b9 00 02 00 00       	mov    ecx,0x200
c00046e7:	89 d8                	mov    eax,ebx
c00046e9:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046ec:	e8 15 d4 ff ff       	call   c0001b06 <mem_set>
c00046f1:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00046fe:	89 d8                	mov    eax,ebx
c0004700:	e8 ec d3 ff ff       	call   c0001af1 <mem_cpy>
c0004705:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004709:	8d 43 58             	lea    eax,[ebx+0x58]
c000470c:	f7 d2                	not    edx
c000470e:	e8 d5 d3 ff ff       	call   c0001ae8 <st_dword>
c0004713:	8d 43 18             	lea    eax,[ebx+0x18]
c0004716:	31 c9                	xor    ecx,ecx
c0004718:	89 04 24             	mov    DWORD PTR [esp],eax
c000471b:	ba 01 00 00 00       	mov    edx,0x1
c0004720:	e8 c6 d3 ff ff       	call   c0001aeb <st_qword>
c0004725:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004729:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000472d:	83 c2 ff             	add    edx,0xffffffff
c0004730:	89 e8                	mov    eax,ebp
c0004732:	83 d1 ff             	adc    ecx,0xffffffff
c0004735:	e8 b1 d3 ff ff       	call   c0001aeb <st_qword>
c000473a:	31 c9                	xor    ecx,ecx
c000473c:	8d 43 28             	lea    eax,[ebx+0x28]
c000473f:	ba 22 00 00 00       	mov    edx,0x22
c0004744:	e8 a2 d3 ff ff       	call   c0001aeb <st_qword>
c0004749:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000474d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004751:	83 c2 de             	add    edx,0xffffffde
c0004754:	8d 43 30             	lea    eax,[ebx+0x30]
c0004757:	83 d1 ff             	adc    ecx,0xffffffff
c000475a:	31 f6                	xor    esi,esi
c000475c:	e8 8a d3 ff ff       	call   c0001aeb <st_qword>
c0004761:	8d 43 54             	lea    eax,[ebx+0x54]
c0004764:	ba 80 00 00 00       	mov    edx,0x80
c0004769:	e8 7a d3 ff ff       	call   c0001ae8 <st_dword>
c000476e:	8d 43 50             	lea    eax,[ebx+0x50]
c0004771:	ba 80 00 00 00       	mov    edx,0x80
c0004776:	e8 6d d3 ff ff       	call   c0001ae8 <st_dword>
c000477b:	ba 02 00 00 00       	mov    edx,0x2
c0004780:	89 f8                	mov    eax,edi
c0004782:	e8 61 d3 ff ff       	call   c0001ae8 <st_dword>
c0004787:	8d 53 38             	lea    edx,[ebx+0x38]
c000478a:	b9 10 00 00 00       	mov    ecx,0x10
c000478f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004793:	e8 ad d9 ff ff       	call   c0002145 <make_rand>
c0004798:	83 c8 ff             	or     eax,0xffffffff
c000479b:	46                   	inc    esi
c000479c:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00047a1:	e8 fb d8 ff ff       	call   c00020a1 <crc32>
c00047a6:	83 fe 5c             	cmp    esi,0x5c
c00047a9:	75 f0                	jne    c000479b <create_partition+0x359>
c00047ab:	f7 d0                	not    eax
c00047ad:	8d 73 10             	lea    esi,[ebx+0x10]
c00047b0:	89 c2                	mov    edx,eax
c00047b2:	89 f0                	mov    eax,esi
c00047b4:	e8 2f d3 ff ff       	call   c0001ae8 <st_dword>
c00047b9:	83 ec 0c             	sub    esp,0xc
c00047bc:	6a 01                	push   0x1
c00047be:	6a 00                	push   0x0
c00047c0:	6a 01                	push   0x1
c00047c2:	53                   	push   ebx
c00047c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047c7:	e8 71 d2 ff ff       	call   c0001a3d <disk_write>
c00047cc:	83 c4 20             	add    esp,0x20
c00047cf:	85 c0                	test   eax,eax
c00047d1:	0f 85 9c fc ff ff    	jne    c0004473 <create_partition+0x31>
c00047d7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047db:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047df:	83 c2 ff             	add    edx,0xffffffff
c00047e2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e5:	83 d1 ff             	adc    ecx,0xffffffff
c00047e8:	e8 fe d2 ff ff       	call   c0001aeb <st_qword>
c00047ed:	ba 01 00 00 00       	mov    edx,0x1
c00047f2:	31 c9                	xor    ecx,ecx
c00047f4:	89 e8                	mov    eax,ebp
c00047f6:	e8 f0 d2 ff ff       	call   c0001aeb <st_qword>
c00047fb:	89 f8                	mov    eax,edi
c00047fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004801:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004805:	31 ff                	xor    edi,edi
c0004807:	e8 df d2 ff ff       	call   c0001aeb <st_qword>
c000480c:	89 f0                	mov    eax,esi
c000480e:	31 d2                	xor    edx,edx
c0004810:	e8 d3 d2 ff ff       	call   c0001ae8 <st_dword>
c0004815:	83 c8 ff             	or     eax,0xffffffff
c0004818:	47                   	inc    edi
c0004819:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000481e:	e8 7e d8 ff ff       	call   c00020a1 <crc32>
c0004823:	83 ff 5c             	cmp    edi,0x5c
c0004826:	75 f0                	jne    c0004818 <create_partition+0x3d6>
c0004828:	f7 d0                	not    eax
c000482a:	89 c2                	mov    edx,eax
c000482c:	89 f0                	mov    eax,esi
c000482e:	e8 b5 d2 ff ff       	call   c0001ae8 <st_dword>
c0004833:	83 ec 0c             	sub    esp,0xc
c0004836:	6a 01                	push   0x1
c0004838:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000483c:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004840:	83 c0 ff             	add    eax,0xffffffff
c0004843:	83 d2 ff             	adc    edx,0xffffffff
c0004846:	52                   	push   edx
c0004847:	50                   	push   eax
c0004848:	53                   	push   ebx
c0004849:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000484d:	e8 eb d1 ff ff       	call   c0001a3d <disk_write>
c0004852:	83 c4 20             	add    esp,0x20
c0004855:	85 c0                	test   eax,eax
c0004857:	0f 85 16 fc ff ff    	jne    c0004473 <create_partition+0x31>
c000485d:	31 d2                	xor    edx,edx
c000485f:	89 d8                	mov    eax,ebx
c0004861:	b9 00 02 00 00       	mov    ecx,0x200
c0004866:	e8 9b d2 ff ff       	call   c0001b06 <mem_set>
c000486b:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004871:	b9 10 00 00 00       	mov    ecx,0x10
c0004876:	ba f0 5c 02 c0       	mov    edx,0xc0025cf0
c000487b:	e8 71 d2 ff ff       	call   c0001af1 <mem_cpy>
c0004880:	e9 21 01 00 00       	jmp    c00049a6 <create_partition+0x564>
c0004885:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004889:	b9 05 00 00 00       	mov    ecx,0x5
c000488e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004891:	bf 08 00 00 00       	mov    edi,0x8
c0004896:	89 f8                	mov    eax,edi
c0004898:	31 d2                	xor    edx,edx
c000489a:	0f b6 f0             	movzx  esi,al
c000489d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a0:	f7 f6                	div    esi
c00048a2:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00048a7:	76 0a                	jbe    c00048b3 <create_partition+0x471>
c00048a9:	d1 e7                	shl    edi,1
c00048ab:	49                   	dec    ecx
c00048ac:	75 e8                	jne    c0004896 <create_partition+0x454>
c00048ae:	bf ff ff ff ff       	mov    edi,0xffffffff
c00048b3:	b9 00 02 00 00       	mov    ecx,0x200
c00048b8:	31 d2                	xor    edx,edx
c00048ba:	89 d8                	mov    eax,ebx
c00048bc:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00048c2:	e8 3f d2 ff ff       	call   c0001b06 <mem_set>
c00048c7:	b9 64 00 00 00       	mov    ecx,0x64
c00048cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048d9:	f7 f1                	div    ecx
c00048db:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	0f b6 c0             	movzx  eax,al
c00048e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048ed:	e9 80 00 00 00       	jmp    c0004972 <create_partition+0x530>
c00048f2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048f5:	29 cf                	sub    edi,ecx
c00048f7:	89 ca                	mov    edx,ecx
c00048f9:	89 f0                	mov    eax,esi
c00048fb:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004900:	e8 e3 d1 ff ff       	call   c0001ae8 <st_dword>
c0004905:	8d 46 04             	lea    eax,[esi+0x4]
c0004908:	89 fa                	mov    edx,edi
c000490a:	83 c6 10             	add    esi,0x10
c000490d:	e8 d6 d1 ff ff       	call   c0001ae8 <st_dword>
c0004912:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004916:	31 d2                	xor    edx,edx
c0004918:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c000491b:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000491f:	89 c8                	mov    eax,ecx
c0004921:	01 f9                	add    ecx,edi
c0004923:	f7 f5                	div    ebp
c0004925:	89 d5                	mov    ebp,edx
c0004927:	31 d2                	xor    edx,edx
c0004929:	45                   	inc    ebp
c000492a:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492e:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004931:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004934:	89 c2                	mov    edx,eax
c0004936:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004939:	c1 ea 02             	shr    edx,0x2
c000493c:	83 e2 c0             	and    edx,0xffffffc0
c000493f:	09 ea                	or     edx,ebp
c0004941:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004946:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004949:	31 d2                	xor    edx,edx
c000494b:	f7 f5                	div    ebp
c000494d:	89 d7                	mov    edi,edx
c000494f:	31 d2                	xor    edx,edx
c0004951:	47                   	inc    edi
c0004952:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004956:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004959:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c000495c:	89 c5                	mov    ebp,eax
c000495e:	c1 ed 02             	shr    ebp,0x2
c0004961:	83 e5 c0             	and    ebp,0xffffffc0
c0004964:	09 ef                	or     edi,ebp
c0004966:	89 fa                	mov    edx,edi
c0004968:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000496b:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004970:	74 34                	je     c00049a6 <create_partition+0x564>
c0004972:	85 c9                	test   ecx,ecx
c0004974:	74 30                	je     c00049a6 <create_partition+0x564>
c0004976:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004979:	76 2b                	jbe    c00049a6 <create_partition+0x564>
c000497b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000497f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004983:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004986:	83 ff 64             	cmp    edi,0x64
c0004989:	76 4b                	jbe    c00049d6 <create_partition+0x594>
c000498b:	89 f8                	mov    eax,edi
c000498d:	01 c8                	add    eax,ecx
c000498f:	0f 82 5d ff ff ff    	jb     c00048f2 <create_partition+0x4b0>
c0004995:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004998:	0f 87 54 ff ff ff    	ja     c00048f2 <create_partition+0x4b0>
c000499e:	85 ff                	test   edi,edi
c00049a0:	0f 85 51 ff ff ff    	jne    c00048f7 <create_partition+0x4b5>
c00049a6:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00049ac:	ba 55 aa 00 00       	mov    edx,0xaa55
c00049b1:	e8 2e d1 ff ff       	call   c0001ae4 <st_word>
c00049b6:	83 ec 0c             	sub    esp,0xc
c00049b9:	6a 01                	push   0x1
c00049bb:	6a 00                	push   0x0
c00049bd:	6a 00                	push   0x0
c00049bf:	53                   	push   ebx
c00049c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049c4:	e8 74 d0 ff ff       	call   c0001a3d <disk_write>
c00049c9:	83 c4 20             	add    esp,0x20
c00049cc:	85 c0                	test   eax,eax
c00049ce:	0f 95 c0             	setne  al
c00049d1:	0f b6 c0             	movzx  eax,al
c00049d4:	eb 0e                	jmp    c00049e4 <create_partition+0x5a2>
c00049d6:	74 07                	je     c00049df <create_partition+0x59d>
c00049d8:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049dd:	eb ac                	jmp    c000498b <create_partition+0x549>
c00049df:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049e2:	eb a7                	jmp    c000498b <create_partition+0x549>
c00049e4:	83 c4 5c             	add    esp,0x5c
c00049e7:	5b                   	pop    ebx
c00049e8:	5e                   	pop    esi
c00049e9:	5f                   	pop    edi
c00049ea:	5d                   	pop    ebp
c00049eb:	c3                   	ret    

c00049ec <get_fileinfo>:
c00049ec:	55                   	push   ebp
c00049ed:	57                   	push   edi
c00049ee:	56                   	push   esi
c00049ef:	53                   	push   ebx
c00049f0:	83 ec 1c             	sub    esp,0x1c
c00049f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00049f5:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049f9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049fd:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004a00:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004a03:	0f 84 dc 01 00 00    	je     c0004be5 <get_fileinfo+0x1f9>
c0004a09:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004a0c:	75 0f                	jne    c0004a1d <get_fileinfo+0x31>
c0004a0e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004a11:	83 c4 1c             	add    esp,0x1c
c0004a14:	5b                   	pop    ebx
c0004a15:	5e                   	pop    esi
c0004a16:	5f                   	pop    edi
c0004a17:	5d                   	pop    ebp
c0004a18:	e9 58 d5 ff ff       	jmp    c0001f75 <get_xfileinfo>
c0004a1d:	89 d3                	mov    ebx,edx
c0004a1f:	89 c6                	mov    esi,eax
c0004a21:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004a25:	74 6a                	je     c0004a91 <get_fileinfo+0xa5>
c0004a27:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a2f:	31 ed                	xor    ebp,ebp
c0004a31:	31 ff                	xor    edi,edi
c0004a33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a3e:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a42:	66 85 d2             	test   dx,dx
c0004a45:	74 3e                	je     c0004a85 <get_fileinfo+0x99>
c0004a47:	66 85 ed             	test   bp,bp
c0004a4a:	75 0c                	jne    c0004a58 <get_fileinfo+0x6c>
c0004a4c:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a52:	66 3d ff 07          	cmp    ax,0x7ff
c0004a56:	76 22                	jbe    c0004a7a <get_fileinfo+0x8e>
c0004a58:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a5d:	89 e8                	mov    eax,ebp
c0004a5f:	29 f9                	sub    ecx,edi
c0004a61:	c1 e0 10             	shl    eax,0x10
c0004a64:	09 d0                	or     eax,edx
c0004a66:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a6a:	e8 a3 d1 ff ff       	call   c0001c12 <put_utf>
c0004a6f:	84 c0                	test   al,al
c0004a71:	74 10                	je     c0004a83 <get_fileinfo+0x97>
c0004a73:	0f b6 c0             	movzx  eax,al
c0004a76:	31 d2                	xor    edx,edx
c0004a78:	01 c7                	add    edi,eax
c0004a7a:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a7f:	89 d5                	mov    ebp,edx
c0004a81:	eb b0                	jmp    c0004a33 <get_fileinfo+0x47>
c0004a83:	31 ff                	xor    edi,edi
c0004a85:	66 85 ed             	test   bp,bp
c0004a88:	74 02                	je     c0004a8c <get_fileinfo+0xa0>
c0004a8a:	31 ff                	xor    edi,edi
c0004a8c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a91:	31 ff                	xor    edi,edi
c0004a93:	31 c9                	xor    ecx,ecx
c0004a95:	83 f9 0a             	cmp    ecx,0xa
c0004a98:	0f 87 ad 00 00 00    	ja     c0004b4b <get_fileinfo+0x15f>
c0004a9e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa1:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004aa4:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004aa8:	66 83 fa 20          	cmp    dx,0x20
c0004aac:	0f 84 92 00 00 00    	je     c0004b44 <get_fileinfo+0x158>
c0004ab2:	66 83 fa 05          	cmp    dx,0x5
c0004ab6:	75 05                	jne    c0004abd <get_fileinfo+0xd1>
c0004ab8:	ba e5 00 00 00       	mov    edx,0xe5
c0004abd:	83 ff 0b             	cmp    edi,0xb
c0004ac0:	77 0b                	ja     c0004acd <get_fileinfo+0xe1>
c0004ac2:	83 fd 09             	cmp    ebp,0x9
c0004ac5:	75 06                	jne    c0004acd <get_fileinfo+0xe1>
c0004ac7:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004acc:	47                   	inc    edi
c0004acd:	0f b7 c2             	movzx  eax,dx
c0004ad0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ad4:	e8 6d d0 ff ff       	call   c0001b46 <dbc_1st>
c0004ad9:	85 c0                	test   eax,eax
c0004adb:	74 2f                	je     c0004b0c <get_fileinfo+0x120>
c0004add:	83 fd 08             	cmp    ebp,0x8
c0004ae0:	74 2a                	je     c0004b0c <get_fileinfo+0x120>
c0004ae2:	83 fd 0b             	cmp    ebp,0xb
c0004ae5:	74 25                	je     c0004b0c <get_fileinfo+0x120>
c0004ae7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aea:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004af2:	e8 52 d0 ff ff       	call   c0001b49 <dbc_2nd>
c0004af7:	85 c0                	test   eax,eax
c0004af9:	74 11                	je     c0004b0c <get_fileinfo+0x120>
c0004afb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aff:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004b04:	c1 e2 08             	shl    edx,0x8
c0004b07:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004b0a:	09 c2                	or     edx,eax
c0004b0c:	0f b7 d2             	movzx  edx,dx
c0004b0f:	50                   	push   eax
c0004b10:	50                   	push   eax
c0004b11:	68 b5 01 00 00       	push   0x1b5
c0004b16:	52                   	push   edx
c0004b17:	e8 46 38 00 00       	call   c0008362 <ff_oem2uni>
c0004b1c:	83 c4 10             	add    esp,0x10
c0004b1f:	66 85 c0             	test   ax,ax
c0004b22:	75 04                	jne    c0004b28 <get_fileinfo+0x13c>
c0004b24:	31 ff                	xor    edi,edi
c0004b26:	eb 23                	jmp    c0004b4b <get_fileinfo+0x15f>
c0004b28:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b2d:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b31:	29 f9                	sub    ecx,edi
c0004b33:	0f b7 c0             	movzx  eax,ax
c0004b36:	e8 d7 d0 ff ff       	call   c0001c12 <put_utf>
c0004b3b:	84 c0                	test   al,al
c0004b3d:	74 e5                	je     c0004b24 <get_fileinfo+0x138>
c0004b3f:	0f b6 c0             	movzx  eax,al
c0004b42:	01 c7                	add    edi,eax
c0004b44:	89 e9                	mov    ecx,ebp
c0004b46:	e9 4a ff ff ff       	jmp    c0004a95 <get_fileinfo+0xa9>
c0004b4b:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b50:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b54:	75 54                	jne    c0004baa <get_fileinfo+0x1be>
c0004b56:	85 ff                	test   edi,edi
c0004b58:	75 0b                	jne    c0004b65 <get_fileinfo+0x179>
c0004b5a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b5e:	ba 01 00 00 00       	mov    edx,0x1
c0004b63:	eb 33                	jmp    c0004b98 <get_fileinfo+0x1ac>
c0004b65:	b1 08                	mov    cl,0x8
c0004b67:	31 d2                	xor    edx,edx
c0004b69:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b6f:	84 c0                	test   al,al
c0004b71:	74 25                	je     c0004b98 <get_fileinfo+0x1ac>
c0004b73:	66 83 f8 2e          	cmp    ax,0x2e
c0004b77:	74 16                	je     c0004b8f <get_fileinfo+0x1a3>
c0004b79:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b7c:	66 83 ff 19          	cmp    di,0x19
c0004b80:	77 0f                	ja     c0004b91 <get_fileinfo+0x1a5>
c0004b82:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b85:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b88:	74 07                	je     c0004b91 <get_fileinfo+0x1a5>
c0004b8a:	83 c0 20             	add    eax,0x20
c0004b8d:	eb 02                	jmp    c0004b91 <get_fileinfo+0x1a5>
c0004b8f:	b1 10                	mov    cl,0x10
c0004b91:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b95:	42                   	inc    edx
c0004b96:	eb d1                	jmp    c0004b69 <get_fileinfo+0x17d>
c0004b98:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b9d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba0:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ba4:	75 04                	jne    c0004baa <get_fileinfo+0x1be>
c0004ba6:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004baa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bad:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004bb0:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004bb3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb6:	83 c0 1c             	add    eax,0x1c
c0004bb9:	e8 c1 ce ff ff       	call   c0001a7f <ld_dword>
c0004bbe:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004bc5:	89 03                	mov    DWORD PTR [ebx],eax
c0004bc7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bca:	83 c0 16             	add    eax,0x16
c0004bcd:	e8 a0 ce ff ff       	call   c0001a72 <ld_word>
c0004bd2:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd9:	83 c0 18             	add    eax,0x18
c0004bdc:	e8 91 ce ff ff       	call   c0001a72 <ld_word>
c0004be1:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004be5:	83 c4 1c             	add    esp,0x1c
c0004be8:	5b                   	pop    ebx
c0004be9:	5e                   	pop    esi
c0004bea:	5f                   	pop    edi
c0004beb:	5d                   	pop    ebp
c0004bec:	c3                   	ret    

c0004bed <ld_clust.isra.0>:
c0004bed:	56                   	push   esi
c0004bee:	89 c6                	mov    esi,eax
c0004bf0:	53                   	push   ebx
c0004bf1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bf4:	89 d3                	mov    ebx,edx
c0004bf6:	e8 77 ce ff ff       	call   c0001a72 <ld_word>
c0004bfb:	0f b7 c8             	movzx  ecx,ax
c0004bfe:	89 f0                	mov    eax,esi
c0004c00:	3c 03                	cmp    al,0x3
c0004c02:	75 0d                	jne    c0004c11 <ld_clust.isra.0+0x24>
c0004c04:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c07:	e8 66 ce ff ff       	call   c0001a72 <ld_word>
c0004c0c:	c1 e0 10             	shl    eax,0x10
c0004c0f:	09 c1                	or     ecx,eax
c0004c11:	89 c8                	mov    eax,ecx
c0004c13:	5b                   	pop    ebx
c0004c14:	5e                   	pop    esi
c0004c15:	c3                   	ret    

c0004c16 <st_clust.isra.1>:
c0004c16:	56                   	push   esi
c0004c17:	89 c6                	mov    esi,eax
c0004c19:	53                   	push   ebx
c0004c1a:	89 d3                	mov    ebx,edx
c0004c1c:	0f b7 d1             	movzx  edx,cx
c0004c1f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004c22:	e8 bd ce ff ff       	call   c0001ae4 <st_word>
c0004c27:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c2a:	75 0f                	jne    c0004c3b <st_clust.isra.1+0x25>
c0004c2c:	c1 e9 10             	shr    ecx,0x10
c0004c2f:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c32:	89 ca                	mov    edx,ecx
c0004c34:	5b                   	pop    ebx
c0004c35:	5e                   	pop    esi
c0004c36:	e9 a9 ce ff ff       	jmp    c0001ae4 <st_word>
c0004c3b:	5b                   	pop    ebx
c0004c3c:	5e                   	pop    esi
c0004c3d:	c3                   	ret    

c0004c3e <init_alloc_info.isra.2>:
c0004c3e:	56                   	push   esi
c0004c3f:	53                   	push   ebx
c0004c40:	89 c6                	mov    esi,eax
c0004c42:	89 d3                	mov    ebx,edx
c0004c44:	51                   	push   ecx
c0004c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c47:	83 c0 34             	add    eax,0x34
c0004c4a:	e8 30 ce ff ff       	call   c0001a7f <ld_dword>
c0004c4f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c52:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c54:	83 c0 38             	add    eax,0x38
c0004c57:	e8 3b ce ff ff       	call   c0001a97 <ld_qword>
c0004c5c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c5f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c62:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c64:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c67:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c6e:	83 e0 02             	and    eax,0x2
c0004c71:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c74:	5b                   	pop    ebx
c0004c75:	5b                   	pop    ebx
c0004c76:	5e                   	pop    esi
c0004c77:	c3                   	ret    

c0004c78 <follow_path>:
c0004c78:	56                   	push   esi
c0004c79:	53                   	push   ebx
c0004c7a:	89 c3                	mov    ebx,eax
c0004c7c:	83 ec 14             	sub    esp,0x14
c0004c7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c83:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c8b:	80 fa 5c             	cmp    dl,0x5c
c0004c8e:	75 07                	jne    c0004c97 <follow_path+0x1f>
c0004c90:	40                   	inc    eax
c0004c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c95:	eb ee                	jmp    c0004c85 <follow_path+0xd>
c0004c97:	80 fa 2f             	cmp    dl,0x2f
c0004c9a:	74 f4                	je     c0004c90 <follow_path+0x18>
c0004c9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004ca3:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004caa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004cad:	77 52                	ja     c0004d01 <follow_path+0x89>
c0004caf:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004cb3:	31 d2                	xor    edx,edx
c0004cb5:	89 d8                	mov    eax,ebx
c0004cb7:	e8 12 e3 ff ff       	call   c0002fce <dir_sdi>
c0004cbc:	eb 7c                	jmp    c0004d3a <follow_path+0xc2>
c0004cbe:	89 d8                	mov    eax,ebx
c0004cc0:	e8 6e f2 ff ff       	call   c0003f33 <dir_find>
c0004cc5:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	75 46                	jne    c0004d12 <follow_path+0x9a>
c0004ccc:	80 e2 04             	and    dl,0x4
c0004ccf:	75 69                	jne    c0004d3a <follow_path+0xc2>
c0004cd1:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cd5:	74 5e                	je     c0004d35 <follow_path+0xbd>
c0004cd7:	8a 06                	mov    al,BYTE PTR [esi]
c0004cd9:	3c 04                	cmp    al,0x4
c0004cdb:	75 41                	jne    c0004d1e <follow_path+0xa6>
c0004cdd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ce0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ce4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ce7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cea:	30 c0                	xor    al,al
c0004cec:	09 d0                	or     eax,edx
c0004cee:	89 da                	mov    edx,ebx
c0004cf0:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cf3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cf6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cf9:	8d 46 10             	lea    eax,[esi+0x10]
c0004cfc:	e8 3d ff ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c0004d01:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d05:	89 d8                	mov    eax,ebx
c0004d07:	e8 a9 ed ff ff       	call   c0003ab5 <create_name>
c0004d0c:	85 c0                	test   eax,eax
c0004d0e:	74 ae                	je     c0004cbe <follow_path+0x46>
c0004d10:	eb 28                	jmp    c0004d3a <follow_path+0xc2>
c0004d12:	83 f8 04             	cmp    eax,0x4
c0004d15:	75 23                	jne    c0004d3a <follow_path+0xc2>
c0004d17:	80 e2 04             	and    dl,0x4
c0004d1a:	74 19                	je     c0004d35 <follow_path+0xbd>
c0004d1c:	eb 1c                	jmp    c0004d3a <follow_path+0xc2>
c0004d1e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004d21:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d27:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d2b:	e8 bd fe ff ff       	call   c0004bed <ld_clust.isra.0>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	eb cc                	jmp    c0004d01 <follow_path+0x89>
c0004d35:	b8 05 00 00 00       	mov    eax,0x5
c0004d3a:	83 c4 14             	add    esp,0x14
c0004d3d:	5b                   	pop    ebx
c0004d3e:	5e                   	pop    esi
c0004d3f:	c3                   	ret    

c0004d40 <f_mount>:
c0004d40:	53                   	push   ebx
c0004d41:	83 ec 18             	sub    esp,0x18
c0004d44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d48:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d54:	e8 fb d2 ff ff       	call   c0002054 <get_ldnumber>
c0004d59:	89 c2                	mov    edx,eax
c0004d5b:	b8 0b 00 00 00       	mov    eax,0xb
c0004d60:	85 d2                	test   edx,edx
c0004d62:	78 39                	js     c0004d9d <f_mount+0x5d>
c0004d64:	8b 04 95 a0 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5c60]
c0004d6b:	85 c0                	test   eax,eax
c0004d6d:	74 03                	je     c0004d72 <f_mount+0x32>
c0004d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d76:	85 c0                	test   eax,eax
c0004d78:	74 03                	je     c0004d7d <f_mount+0x3d>
c0004d7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d81:	89 04 95 a0 a3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5c60],eax
c0004d88:	31 c0                	xor    eax,eax
c0004d8a:	84 db                	test   bl,bl
c0004d8c:	74 0f                	je     c0004d9d <f_mount+0x5d>
c0004d8e:	31 c9                	xor    ecx,ecx
c0004d90:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d94:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d98:	e8 65 d7 ff ff       	call   c0002502 <mount_volume>
c0004d9d:	83 c4 18             	add    esp,0x18
c0004da0:	5b                   	pop    ebx
c0004da1:	c3                   	ret    

c0004da2 <f_open>:
c0004da2:	55                   	push   ebp
c0004da3:	bd 09 00 00 00       	mov    ebp,0x9
c0004da8:	57                   	push   edi
c0004da9:	56                   	push   esi
c0004daa:	53                   	push   ebx
c0004dab:	83 ec 7c             	sub    esp,0x7c
c0004dae:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004db5:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004dbc:	85 db                	test   ebx,ebx
c0004dbe:	0f 84 10 04 00 00    	je     c00051d4 <f_open+0x432>
c0004dc4:	89 fe                	mov    esi,edi
c0004dc6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004dca:	83 e6 3f             	and    esi,0x3f
c0004dcd:	89 f0                	mov    eax,esi
c0004dcf:	0f b6 c8             	movzx  ecx,al
c0004dd2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004dd9:	e8 24 d7 ff ff       	call   c0002502 <mount_volume>
c0004dde:	89 c5                	mov    ebp,eax
c0004de0:	85 c0                	test   eax,eax
c0004de2:	0f 85 e6 03 00 00    	jne    c00051ce <f_open+0x42c>
c0004de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dec:	bd 11 00 00 00       	mov    ebp,0x11
c0004df1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004df5:	83 ec 0c             	sub    esp,0xc
c0004df8:	68 60 04 00 00       	push   0x460
c0004dfd:	e8 a3 34 00 00       	call   c00082a5 <ff_memalloc>
c0004e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004e06:	83 c4 10             	add    esp,0x10
c0004e09:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004e0e:	0f 84 c0 03 00 00    	je     c00051d4 <f_open+0x432>
c0004e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004e1c:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004e22:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004e25:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e28:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e33:	e8 40 fe ff ff       	call   c0004c78 <follow_path>
c0004e38:	89 c5                	mov    ebp,eax
c0004e3a:	85 c0                	test   eax,eax
c0004e3c:	75 0c                	jne    c0004e4a <f_open+0xa8>
c0004e3e:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e43:	79 05                	jns    c0004e4a <f_open+0xa8>
c0004e45:	bd 06 00 00 00       	mov    ebp,0x6
c0004e4a:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e50:	0f 84 84 01 00 00    	je     c0004fda <f_open+0x238>
c0004e56:	85 ed                	test   ebp,ebp
c0004e58:	74 20                	je     c0004e7a <f_open+0xd8>
c0004e5a:	83 fd 04             	cmp    ebp,0x4
c0004e5d:	0f 85 58 03 00 00    	jne    c00051bb <f_open+0x419>
c0004e63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e67:	83 ce 08             	or     esi,0x8
c0004e6a:	e8 8a f2 ff ff       	call   c00040f9 <dir_register>
c0004e6f:	89 c5                	mov    ebp,eax
c0004e71:	85 c0                	test   eax,eax
c0004e73:	74 2f                	je     c0004ea4 <f_open+0x102>
c0004e75:	e9 41 03 00 00       	jmp    c00051bb <f_open+0x419>
c0004e7a:	bd 07 00 00 00       	mov    ebp,0x7
c0004e7f:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e84:	0f 85 31 03 00 00    	jne    c00051bb <f_open+0x419>
c0004e8a:	bd 08 00 00 00       	mov    ebp,0x8
c0004e8f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e95:	0f 85 20 03 00 00    	jne    c00051bb <f_open+0x419>
c0004e9b:	83 e7 08             	and    edi,0x8
c0004e9e:	0f 84 65 01 00 00    	je     c0005009 <f_open+0x267>
c0004ea4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ea8:	8a 02                	mov    al,BYTE PTR [edx]
c0004eaa:	3c 04                	cmp    al,0x4
c0004eac:	0f 85 97 00 00 00    	jne    c0004f49 <f_open+0x1a7>
c0004eb2:	8d 42 10             	lea    eax,[edx+0x10]
c0004eb5:	89 13                	mov    DWORD PTR [ebx],edx
c0004eb7:	89 da                	mov    edx,ebx
c0004eb9:	e8 80 fd ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c0004ebe:	31 d2                	xor    edx,edx
c0004ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec4:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ec9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ecc:	83 c0 02             	add    eax,0x2
c0004ecf:	e8 32 cc ff ff       	call   c0001b06 <mem_set>
c0004ed4:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ed9:	31 d2                	xor    edx,edx
c0004edb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004edf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee2:	83 c0 26             	add    eax,0x26
c0004ee5:	e8 1c cc ff ff       	call   c0001b06 <mem_set>
c0004eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ef1:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ef5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004efa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004efd:	83 c0 08             	add    eax,0x8
c0004f00:	e8 e3 cb ff ff       	call   c0001ae8 <st_dword>
c0004f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f09:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004f0c:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 b7 ea ff ff       	call   c00039d0 <store_xdir>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	0f 85 98 02 00 00    	jne    c00051bb <f_open+0x419>
c0004f23:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004f26:	85 d2                	test   edx,edx
c0004f28:	0f 84 db 00 00 00    	je     c0005009 <f_open+0x267>
c0004f2e:	31 c9                	xor    ecx,ecx
c0004f30:	89 d8                	mov    eax,ebx
c0004f32:	e8 8e e3 ff ff       	call   c00032c5 <remove_chain>
c0004f37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f3b:	89 c5                	mov    ebp,eax
c0004f3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f40:	48                   	dec    eax
c0004f41:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f44:	e9 b8 00 00 00       	jmp    c0005001 <f_open+0x25f>
c0004f49:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f4d:	89 ea                	mov    edx,ebp
c0004f4f:	e8 99 fc ff ff       	call   c0004bed <ld_clust.isra.0>
c0004f54:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f59:	89 c7                	mov    edi,eax
c0004f5b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f5e:	e8 85 cb ff ff       	call   c0001ae8 <st_dword>
c0004f63:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f67:	31 c9                	xor    ecx,ecx
c0004f69:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f71:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f75:	e8 9c fc ff ff       	call   c0004c16 <st_clust.isra.1>
c0004f7a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f7e:	31 d2                	xor    edx,edx
c0004f80:	83 c0 1c             	add    eax,0x1c
c0004f83:	e8 60 cb ff ff       	call   c0001ae8 <st_dword>
c0004f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f8c:	85 ff                	test   edi,edi
c0004f8e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f92:	74 75                	je     c0005009 <f_open+0x267>
c0004f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f98:	31 c9                	xor    ecx,ecx
c0004f9a:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f9d:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004fa0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004fa4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fa8:	89 fa                	mov    edx,edi
c0004faa:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fae:	e8 12 e3 ff ff       	call   c00032c5 <remove_chain>
c0004fb3:	89 c5                	mov    ebp,eax
c0004fb5:	85 c0                	test   eax,eax
c0004fb7:	0f 85 fe 01 00 00    	jne    c00051bb <f_open+0x419>
c0004fbd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004fc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc9:	4f                   	dec    edi
c0004fca:	e8 81 d2 ff ff       	call   c0002250 <move_window>
c0004fcf:	89 c5                	mov    ebp,eax
c0004fd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fd8:	eb 27                	jmp    c0005001 <f_open+0x25f>
c0004fda:	85 ed                	test   ebp,ebp
c0004fdc:	0f 85 d9 01 00 00    	jne    c00051bb <f_open+0x419>
c0004fe2:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fe6:	bd 04 00 00 00       	mov    ebp,0x4
c0004feb:	a8 10                	test   al,0x10
c0004fed:	0f 85 c8 01 00 00    	jne    c00051bb <f_open+0x419>
c0004ff3:	83 e7 02             	and    edi,0x2
c0004ff6:	74 11                	je     c0005009 <f_open+0x267>
c0004ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0004ffd:	a8 01                	test   al,0x1
c0004fff:	eb 02                	jmp    c0005003 <f_open+0x261>
c0005001:	85 ed                	test   ebp,ebp
c0005003:	0f 85 b2 01 00 00    	jne    c00051bb <f_open+0x419>
c0005009:	f7 c6 08 00 00 00    	test   esi,0x8
c000500f:	74 03                	je     c0005014 <f_open+0x272>
c0005011:	83 ce 40             	or     esi,0x40
c0005014:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005018:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000501b:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000501e:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005021:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005024:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005028:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000502b:	8a 02                	mov    al,BYTE PTR [edx]
c000502d:	3c 04                	cmp    al,0x4
c000502f:	75 2a                	jne    c000505b <f_open+0x2b9>
c0005031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005035:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000503a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000503d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005041:	30 c0                	xor    al,al
c0005043:	09 c8                	or     eax,ecx
c0005045:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005048:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000504c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000504f:	8d 42 10             	lea    eax,[edx+0x10]
c0005052:	89 da                	mov    edx,ebx
c0005054:	e8 e5 fb ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c0005059:	eb 1c                	jmp    c0005077 <f_open+0x2d5>
c000505b:	89 fa                	mov    edx,edi
c000505d:	e8 8b fb ff ff       	call   c0004bed <ld_clust.isra.0>
c0005062:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005065:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005068:	e8 12 ca ff ff       	call   c0001a7f <ld_dword>
c000506d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005074:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000507b:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005082:	89 03                	mov    DWORD PTR [ebx],eax
c0005084:	31 d2                	xor    edx,edx
c0005086:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000508a:	b9 00 02 00 00       	mov    ecx,0x200
c000508f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005093:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005097:	89 f0                	mov    eax,esi
c0005099:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00050a0:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00050a3:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00050aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00050ad:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00050b4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00050bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00050bf:	e8 42 ca ff ff       	call   c0001b06 <mem_set>
c00050c4:	83 e6 20             	and    esi,0x20
c00050c7:	75 07                	jne    c00050d0 <f_open+0x32e>
c00050c9:	31 ed                	xor    ebp,ebp
c00050cb:	e9 eb 00 00 00       	jmp    c00051bb <f_open+0x419>
c00050d0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050d3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050e2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050e6:	74 e1                	je     c00050c9 <f_open+0x327>
c00050e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050f0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050f3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050fd:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005101:	31 ff                	xor    edi,edi
c0005103:	c1 e5 09             	shl    ebp,0x9
c0005106:	89 ee                	mov    esi,ebp
c0005108:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000510c:	89 f8                	mov    eax,edi
c000510e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005112:	73 22                	jae    c0005136 <f_open+0x394>
c0005114:	89 d8                	mov    eax,ebx
c0005116:	e8 bd dc ff ff       	call   c0002dd8 <get_fat>
c000511b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000511f:	89 c2                	mov    edx,eax
c0005121:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005125:	83 f8 01             	cmp    eax,0x1
c0005128:	76 10                	jbe    c000513a <f_open+0x398>
c000512a:	83 f8 ff             	cmp    eax,0xffffffff
c000512d:	75 d9                	jne    c0005108 <f_open+0x366>
c000512f:	bd 01 00 00 00       	mov    ebp,0x1
c0005134:	eb 09                	jmp    c000513f <f_open+0x39d>
c0005136:	31 ed                	xor    ebp,ebp
c0005138:	eb 05                	jmp    c000513f <f_open+0x39d>
c000513a:	bd 02 00 00 00       	mov    ebp,0x2
c000513f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005142:	85 ed                	test   ebp,ebp
c0005144:	75 75                	jne    c00051bb <f_open+0x419>
c0005146:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000514a:	25 ff 01 00 00       	and    eax,0x1ff
c000514f:	0f 84 74 ff ff ff    	je     c00050c9 <f_open+0x327>
c0005155:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005159:	bd 02 00 00 00       	mov    ebp,0x2
c000515e:	89 c8                	mov    eax,ecx
c0005160:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005164:	e8 a2 cb ff ff       	call   c0001d0b <clst2sect>
c0005169:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000516d:	89 d7                	mov    edi,edx
c000516f:	09 c7                	or     edi,eax
c0005171:	74 48                	je     c00051bb <f_open+0x419>
c0005173:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005177:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000517b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005183:	0f ac fe 09          	shrd   esi,edi,0x9
c0005187:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000518b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000518f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005192:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005196:	83 ec 0c             	sub    esp,0xc
c0005199:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000519c:	6a 01                	push   0x1
c000519e:	52                   	push   edx
c000519f:	50                   	push   eax
c00051a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00051a4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051a8:	50                   	push   eax
c00051a9:	e8 79 c8 ff ff       	call   c0001a27 <disk_read>
c00051ae:	83 c4 20             	add    esp,0x20
c00051b1:	85 c0                	test   eax,eax
c00051b3:	0f 95 c0             	setne  al
c00051b6:	0f b6 c0             	movzx  eax,al
c00051b9:	89 c5                	mov    ebp,eax
c00051bb:	83 ec 0c             	sub    esp,0xc
c00051be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00051c2:	e8 f4 30 00 00       	call   c00082bb <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	85 ed                	test   ebp,ebp
c00051cc:	74 06                	je     c00051d4 <f_open+0x432>
c00051ce:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051d4:	83 c4 7c             	add    esp,0x7c
c00051d7:	89 e8                	mov    eax,ebp
c00051d9:	5b                   	pop    ebx
c00051da:	5e                   	pop    esi
c00051db:	5f                   	pop    edi
c00051dc:	5d                   	pop    ebp
c00051dd:	c3                   	ret    

c00051de <f_read>:
c00051de:	55                   	push   ebp
c00051df:	57                   	push   edi
c00051e0:	56                   	push   esi
c00051e1:	53                   	push   ebx
c00051e2:	83 ec 2c             	sub    esp,0x2c
c00051e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051f3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051f7:	89 d8                	mov    eax,ebx
c00051f9:	e8 77 cf ff ff       	call   c0002175 <validate>
c00051fe:	89 c5                	mov    ebp,eax
c0005200:	85 c0                	test   eax,eax
c0005202:	0f 85 4c 02 00 00    	jne    c0005454 <f_read+0x276>
c0005208:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000520c:	85 ed                	test   ebp,ebp
c000520e:	0f 85 40 02 00 00    	jne    c0005454 <f_read+0x276>
c0005214:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005218:	0f 84 31 02 00 00    	je     c000544f <f_read+0x271>
c000521e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005221:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005224:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005227:	bf 00 00 00 00       	mov    edi,0x0
c000522c:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000522f:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005233:	89 d1                	mov    ecx,edx
c0005235:	19 f9                	sbb    ecx,edi
c0005237:	0f 83 cf 00 00 00    	jae    c000530c <f_read+0x12e>
c000523d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005241:	e9 c6 00 00 00       	jmp    c000530c <f_read+0x12e>
c0005246:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005249:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000524c:	89 d0                	mov    eax,edx
c000524e:	25 ff 01 00 00       	and    eax,0x1ff
c0005253:	0f 85 c9 01 00 00    	jne    c0005422 <f_read+0x244>
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	89 d6                	mov    esi,edx
c000525f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005263:	89 cf                	mov    edi,ecx
c0005265:	48                   	dec    eax
c0005266:	0f ac fe 09          	shrd   esi,edi,0x9
c000526a:	21 f0                	and    eax,esi
c000526c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005270:	0f 84 a6 00 00 00    	je     c000531c <f_read+0x13e>
c0005276:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000527a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000527d:	89 c8                	mov    eax,ecx
c000527f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005282:	e8 84 ca ff ff       	call   c0001d0b <clst2sect>
c0005287:	89 d7                	mov    edi,edx
c0005289:	09 c7                	or     edi,eax
c000528b:	0f 84 b4 00 00 00    	je     c0005345 <f_read+0x167>
c0005291:	31 ff                	xor    edi,edi
c0005293:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005297:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000529a:	01 c6                	add    esi,eax
c000529c:	11 d7                	adc    edi,edx
c000529e:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00052a6:	0f 86 fd 00 00 00    	jbe    c00053a9 <f_read+0x1cb>
c00052ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052b4:	c1 e8 09             	shr    eax,0x9
c00052b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ba:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00052be:	03 14 24             	add    edx,DWORD PTR [esp]
c00052c1:	39 c2                	cmp    edx,eax
c00052c3:	76 07                	jbe    c00052cc <f_read+0xee>
c00052c5:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00052cc:	83 ec 0c             	sub    esp,0xc
c00052cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052d3:	57                   	push   edi
c00052d4:	56                   	push   esi
c00052d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052dd:	50                   	push   eax
c00052de:	e8 44 c7 ff ff       	call   c0001a27 <disk_read>
c00052e3:	83 c4 20             	add    esp,0x20
c00052e6:	85 c0                	test   eax,eax
c00052e8:	75 6e                	jne    c0005358 <f_read+0x17a>
c00052ea:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052ee:	78 7e                	js     c000536e <f_read+0x190>
c00052f0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052f3:	c1 e6 09             	shl    esi,0x9
c00052f6:	31 ff                	xor    edi,edi
c00052f8:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005300:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005304:	01 30                	add    DWORD PTR [eax],esi
c0005306:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005309:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000530c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005311:	0f 85 2f ff ff ff    	jne    c0005246 <f_read+0x68>
c0005317:	e9 38 01 00 00       	jmp    c0005454 <f_read+0x276>
c000531c:	89 c8                	mov    eax,ecx
c000531e:	09 d0                	or     eax,edx
c0005320:	75 05                	jne    c0005327 <f_read+0x149>
c0005322:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005325:	eb 19                	jmp    c0005340 <f_read+0x162>
c0005327:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000532b:	74 09                	je     c0005336 <f_read+0x158>
c000532d:	89 d8                	mov    eax,ebx
c000532f:	e8 f8 c9 ff ff       	call   c0001d2c <clmt_clust>
c0005334:	eb 0a                	jmp    c0005340 <f_read+0x162>
c0005336:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005339:	89 d8                	mov    eax,ebx
c000533b:	e8 98 da ff ff       	call   c0002dd8 <get_fat>
c0005340:	83 f8 01             	cmp    eax,0x1
c0005343:	77 0e                	ja     c0005353 <f_read+0x175>
c0005345:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005349:	bd 02 00 00 00       	mov    ebp,0x2
c000534e:	e9 01 01 00 00       	jmp    c0005454 <f_read+0x276>
c0005353:	83 f8 ff             	cmp    eax,0xffffffff
c0005356:	75 0e                	jne    c0005366 <f_read+0x188>
c0005358:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000535c:	bd 01 00 00 00       	mov    ebp,0x1
c0005361:	e9 ee 00 00 00       	jmp    c0005454 <f_read+0x276>
c0005366:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005369:	e9 08 ff ff ff       	jmp    c0005276 <f_read+0x98>
c000536e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005371:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005374:	29 f0                	sub    eax,esi
c0005376:	19 fa                	sbb    edx,edi
c0005378:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000537b:	89 d7                	mov    edi,edx
c000537d:	ba 00 00 00 00       	mov    edx,0x0
c0005382:	89 f9                	mov    ecx,edi
c0005384:	19 d1                	sbb    ecx,edx
c0005386:	0f 83 64 ff ff ff    	jae    c00052f0 <f_read+0x112>
c000538c:	89 c7                	mov    edi,eax
c000538e:	8d 53 50             	lea    edx,[ebx+0x50]
c0005391:	c1 e7 09             	shl    edi,0x9
c0005394:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005398:	b9 00 02 00 00       	mov    ecx,0x200
c000539d:	01 f8                	add    eax,edi
c000539f:	e8 4d c7 ff ff       	call   c0001af1 <mem_cpy>
c00053a4:	e9 47 ff ff ff       	jmp    c00052f0 <f_read+0x112>
c00053a9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00053ac:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00053af:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00053b6:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00053ba:	75 05                	jne    c00053c1 <f_read+0x1e3>
c00053bc:	39 34 24             	cmp    DWORD PTR [esp],esi
c00053bf:	74 5b                	je     c000541c <f_read+0x23e>
c00053c1:	8d 43 50             	lea    eax,[ebx+0x50]
c00053c4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053cc:	79 2a                	jns    c00053f8 <f_read+0x21a>
c00053ce:	83 ec 0c             	sub    esp,0xc
c00053d1:	6a 01                	push   0x1
c00053d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053df:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053e3:	50                   	push   eax
c00053e4:	e8 54 c6 ff ff       	call   c0001a3d <disk_write>
c00053e9:	83 c4 20             	add    esp,0x20
c00053ec:	85 c0                	test   eax,eax
c00053ee:	0f 85 64 ff ff ff    	jne    c0005358 <f_read+0x17a>
c00053f4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053f8:	83 ec 0c             	sub    esp,0xc
c00053fb:	6a 01                	push   0x1
c00053fd:	57                   	push   edi
c00053fe:	56                   	push   esi
c00053ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005403:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005407:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000540b:	50                   	push   eax
c000540c:	e8 16 c6 ff ff       	call   c0001a27 <disk_read>
c0005411:	83 c4 20             	add    esp,0x20
c0005414:	85 c0                	test   eax,eax
c0005416:	0f 85 3c ff ff ff    	jne    c0005358 <f_read+0x17a>
c000541c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000541f:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005422:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005425:	ba 00 02 00 00       	mov    edx,0x200
c000542a:	25 ff 01 00 00       	and    eax,0x1ff
c000542f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005433:	29 c2                	sub    edx,eax
c0005435:	39 d6                	cmp    esi,edx
c0005437:	76 02                	jbe    c000543b <f_read+0x25d>
c0005439:	89 d6                	mov    esi,edx
c000543b:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000543f:	89 f1                	mov    ecx,esi
c0005441:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005445:	e8 a7 c6 ff ff       	call   c0001af1 <mem_cpy>
c000544a:	e9 a7 fe ff ff       	jmp    c00052f6 <f_read+0x118>
c000544f:	bd 07 00 00 00       	mov    ebp,0x7
c0005454:	83 c4 2c             	add    esp,0x2c
c0005457:	89 e8                	mov    eax,ebp
c0005459:	5b                   	pop    ebx
c000545a:	5e                   	pop    esi
c000545b:	5f                   	pop    edi
c000545c:	5d                   	pop    ebp
c000545d:	c3                   	ret    

c000545e <f_write>:
c000545e:	55                   	push   ebp
c000545f:	57                   	push   edi
c0005460:	56                   	push   esi
c0005461:	53                   	push   ebx
c0005462:	83 ec 2c             	sub    esp,0x2c
c0005465:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005469:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000546d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005473:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005477:	89 d8                	mov    eax,ebx
c0005479:	e8 f7 cc ff ff       	call   c0002175 <validate>
c000547e:	89 c5                	mov    ebp,eax
c0005480:	85 c0                	test   eax,eax
c0005482:	0f 85 86 02 00 00    	jne    c000570e <f_write+0x2b0>
c0005488:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000548c:	85 ed                	test   ebp,ebp
c000548e:	0f 85 7a 02 00 00    	jne    c000570e <f_write+0x2b0>
c0005494:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005498:	0f 84 6b 02 00 00    	je     c0005709 <f_write+0x2ab>
c000549e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054a2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00054a5:	0f 84 43 01 00 00    	je     c00055ee <f_write+0x190>
c00054ab:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00054ae:	89 c1                	mov    ecx,eax
c00054b0:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00054b4:	0f 83 34 01 00 00    	jae    c00055ee <f_write+0x190>
c00054ba:	f7 d0                	not    eax
c00054bc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00054c0:	e9 29 01 00 00       	jmp    c00055ee <f_write+0x190>
c00054c5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054c8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054cb:	89 d0                	mov    eax,edx
c00054cd:	25 ff 01 00 00       	and    eax,0x1ff
c00054d2:	0f 85 00 02 00 00    	jne    c00056d8 <f_write+0x27a>
c00054d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054dc:	89 d6                	mov    esi,edx
c00054de:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054e2:	89 cf                	mov    edi,ecx
c00054e4:	48                   	dec    eax
c00054e5:	0f ac fe 09          	shrd   esi,edi,0x9
c00054e9:	21 f0                	and    eax,esi
c00054eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ef:	0f 84 06 01 00 00    	je     c00055fb <f_write+0x19d>
c00054f5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054f9:	0f 88 6e 01 00 00    	js     c000566d <f_write+0x20f>
c00054ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005503:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005506:	89 c8                	mov    eax,ecx
c0005508:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000550c:	e8 fa c7 ff ff       	call   c0001d0b <clst2sect>
c0005511:	89 d1                	mov    ecx,edx
c0005513:	09 c1                	or     ecx,eax
c0005515:	0f 84 1c 01 00 00    	je     c0005637 <f_write+0x1d9>
c000551b:	31 ff                	xor    edi,edi
c000551d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005521:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005525:	01 c6                	add    esi,eax
c0005527:	11 d7                	adc    edi,edx
c0005529:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005531:	0f 86 63 01 00 00    	jbe    c000569a <f_write+0x23c>
c0005537:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000553b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000553f:	c1 e8 09             	shr    eax,0x9
c0005542:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005546:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000554a:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000554e:	39 c2                	cmp    edx,eax
c0005550:	76 08                	jbe    c000555a <f_write+0xfc>
c0005552:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005556:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000555a:	83 ec 0c             	sub    esp,0xc
c000555d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005561:	57                   	push   edi
c0005562:	56                   	push   esi
c0005563:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005567:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000556b:	50                   	push   eax
c000556c:	e8 cc c4 ff ff       	call   c0001a3d <disk_write>
c0005571:	83 c4 20             	add    esp,0x20
c0005574:	85 c0                	test   eax,eax
c0005576:	0f 85 ce 00 00 00    	jne    c000564a <f_write+0x1ec>
c000557c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005582:	29 f0                	sub    eax,esi
c0005584:	19 fa                	sbb    edx,edi
c0005586:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000558a:	89 d7                	mov    edi,edx
c000558c:	ba 00 00 00 00       	mov    edx,0x0
c0005591:	89 f9                	mov    ecx,edi
c0005593:	19 d1                	sbb    ecx,edx
c0005595:	73 1c                	jae    c00055b3 <f_write+0x155>
c0005597:	89 c7                	mov    edi,eax
c0005599:	b9 00 02 00 00       	mov    ecx,0x200
c000559e:	c1 e7 09             	shl    edi,0x9
c00055a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055a4:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00055a8:	89 fa                	mov    edx,edi
c00055aa:	e8 42 c5 ff ff       	call   c0001af1 <mem_cpy>
c00055af:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00055b7:	c1 e6 09             	shl    esi,0x9
c00055ba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00055be:	31 ff                	xor    edi,edi
c00055c0:	01 30                	add    DWORD PTR [eax],esi
c00055c2:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00055c6:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055cd:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055d3:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055d6:	89 c1                	mov    ecx,eax
c00055d8:	39 f2                	cmp    edx,esi
c00055da:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055dd:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055e0:	19 f9                	sbb    ecx,edi
c00055e2:	73 04                	jae    c00055e8 <f_write+0x18a>
c00055e4:	89 f2                	mov    edx,esi
c00055e6:	89 f8                	mov    eax,edi
c00055e8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055eb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055ee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055f3:	0f 85 cc fe ff ff    	jne    c00054c5 <f_write+0x67>
c00055f9:	eb 2e                	jmp    c0005629 <f_write+0x1cb>
c00055fb:	89 c8                	mov    eax,ecx
c00055fd:	09 d0                	or     eax,edx
c00055ff:	75 0b                	jne    c000560c <f_write+0x1ae>
c0005601:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005604:	31 d2                	xor    edx,edx
c0005606:	85 c0                	test   eax,eax
c0005608:	75 28                	jne    c0005632 <f_write+0x1d4>
c000560a:	eb 12                	jmp    c000561e <f_write+0x1c0>
c000560c:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005610:	74 09                	je     c000561b <f_write+0x1bd>
c0005612:	89 d8                	mov    eax,ebx
c0005614:	e8 13 c7 ff ff       	call   c0001d2c <clmt_clust>
c0005619:	eb 0a                	jmp    c0005625 <f_write+0x1c7>
c000561b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000561e:	89 d8                	mov    eax,ebx
c0005620:	e8 a1 da ff ff       	call   c00030c6 <create_chain>
c0005625:	85 c0                	test   eax,eax
c0005627:	75 09                	jne    c0005632 <f_write+0x1d4>
c0005629:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000562d:	e9 dc 00 00 00       	jmp    c000570e <f_write+0x2b0>
c0005632:	83 f8 01             	cmp    eax,0x1
c0005635:	75 0e                	jne    c0005645 <f_write+0x1e7>
c0005637:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000563b:	bd 02 00 00 00       	mov    ebp,0x2
c0005640:	e9 c9 00 00 00       	jmp    c000570e <f_write+0x2b0>
c0005645:	83 f8 ff             	cmp    eax,0xffffffff
c0005648:	75 0e                	jne    c0005658 <f_write+0x1fa>
c000564a:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000564e:	bd 01 00 00 00       	mov    ebp,0x1
c0005653:	e9 b6 00 00 00       	jmp    c000570e <f_write+0x2b0>
c0005658:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000565b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000565f:	0f 85 90 fe ff ff    	jne    c00054f5 <f_write+0x97>
c0005665:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005668:	e9 88 fe ff ff       	jmp    c00054f5 <f_write+0x97>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005678:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000567b:	50                   	push   eax
c000567c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005680:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005684:	50                   	push   eax
c0005685:	e8 b3 c3 ff ff       	call   c0001a3d <disk_write>
c000568a:	83 c4 20             	add    esp,0x20
c000568d:	85 c0                	test   eax,eax
c000568f:	75 b9                	jne    c000564a <f_write+0x1ec>
c0005691:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005695:	e9 65 fe ff ff       	jmp    c00054ff <f_write+0xa1>
c000569a:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000569d:	75 05                	jne    c00056a4 <f_write+0x246>
c000569f:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00056a2:	74 2e                	je     c00056d2 <f_write+0x274>
c00056a4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00056a7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056aa:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00056ad:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00056b0:	73 20                	jae    c00056d2 <f_write+0x274>
c00056b2:	83 ec 0c             	sub    esp,0xc
c00056b5:	8d 43 50             	lea    eax,[ebx+0x50]
c00056b8:	6a 01                	push   0x1
c00056ba:	57                   	push   edi
c00056bb:	56                   	push   esi
c00056bc:	50                   	push   eax
c00056bd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056c1:	50                   	push   eax
c00056c2:	e8 60 c3 ff ff       	call   c0001a27 <disk_read>
c00056c7:	83 c4 20             	add    esp,0x20
c00056ca:	85 c0                	test   eax,eax
c00056cc:	0f 85 78 ff ff ff    	jne    c000564a <f_write+0x1ec>
c00056d2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056d5:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056d8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056db:	ba 00 02 00 00       	mov    edx,0x200
c00056e0:	25 ff 01 00 00       	and    eax,0x1ff
c00056e5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056e9:	29 c2                	sub    edx,eax
c00056eb:	39 d6                	cmp    esi,edx
c00056ed:	76 02                	jbe    c00056f1 <f_write+0x293>
c00056ef:	89 d6                	mov    esi,edx
c00056f1:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056f5:	89 f1                	mov    ecx,esi
c00056f7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056fb:	e8 f1 c3 ff ff       	call   c0001af1 <mem_cpy>
c0005700:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005704:	e9 b1 fe ff ff       	jmp    c00055ba <f_write+0x15c>
c0005709:	bd 07 00 00 00       	mov    ebp,0x7
c000570e:	83 c4 2c             	add    esp,0x2c
c0005711:	89 e8                	mov    eax,ebp
c0005713:	5b                   	pop    ebx
c0005714:	5e                   	pop    esi
c0005715:	5f                   	pop    edi
c0005716:	5d                   	pop    ebp
c0005717:	c3                   	ret    

c0005718 <f_sync>:
c0005718:	56                   	push   esi
c0005719:	53                   	push   ebx
c000571a:	83 ec 64             	sub    esp,0x64
c000571d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005721:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005725:	89 d8                	mov    eax,ebx
c0005727:	e8 49 ca ff ff       	call   c0002175 <validate>
c000572c:	85 c0                	test   eax,eax
c000572e:	0f 85 ba 01 00 00    	jne    c00058ee <f_sync+0x1d6>
c0005734:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005737:	f6 c2 40             	test   dl,0x40
c000573a:	0f 84 ae 01 00 00    	je     c00058ee <f_sync+0x1d6>
c0005740:	84 d2                	test   dl,dl
c0005742:	79 33                	jns    c0005777 <f_sync+0x5f>
c0005744:	83 ec 0c             	sub    esp,0xc
c0005747:	8d 43 50             	lea    eax,[ebx+0x50]
c000574a:	6a 01                	push   0x1
c000574c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000574f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005752:	50                   	push   eax
c0005753:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005757:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000575b:	50                   	push   eax
c000575c:	e8 dc c2 ff ff       	call   c0001a3d <disk_write>
c0005761:	83 c4 20             	add    esp,0x20
c0005764:	89 c2                	mov    edx,eax
c0005766:	b8 01 00 00 00       	mov    eax,0x1
c000576b:	85 d2                	test   edx,edx
c000576d:	0f 85 7b 01 00 00    	jne    c00058ee <f_sync+0x1d6>
c0005773:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000577e:	0f 85 11 01 00 00    	jne    c0005895 <f_sync+0x17d>
c0005784:	89 d8                	mov    eax,ebx
c0005786:	e8 13 d6 ff ff       	call   c0002d9e <fill_first_frag>
c000578b:	85 c0                	test   eax,eax
c000578d:	0f 85 5b 01 00 00    	jne    c00058ee <f_sync+0x1d6>
c0005793:	83 c9 ff             	or     ecx,0xffffffff
c0005796:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005799:	89 d8                	mov    eax,ebx
c000579b:	e8 c9 d5 ff ff       	call   c0002d69 <fill_last_frag>
c00057a0:	85 c0                	test   eax,eax
c00057a2:	0f 85 46 01 00 00    	jne    c00058ee <f_sync+0x1d6>
c00057a8:	83 ec 0c             	sub    esp,0xc
c00057ab:	68 60 04 00 00       	push   0x460
c00057b0:	e8 f0 2a 00 00       	call   c00082a5 <ff_memalloc>
c00057b5:	83 c4 10             	add    esp,0x10
c00057b8:	89 c6                	mov    esi,eax
c00057ba:	b8 11 00 00 00       	mov    eax,0x11
c00057bf:	85 f6                	test   esi,esi
c00057c1:	0f 84 27 01 00 00    	je     c00058ee <f_sync+0x1d6>
c00057c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057cb:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057d1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057d7:	89 da                	mov    edx,ebx
c00057d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057dd:	e8 af df ff ff       	call   c0003791 <load_obj_xdir>
c00057e2:	85 c0                	test   eax,eax
c00057e4:	0f 85 95 00 00 00    	jne    c000587f <f_sync+0x167>
c00057ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f1:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057f5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057f8:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057fb:	83 ca 01             	or     edx,0x1
c00057fe:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005801:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005804:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005807:	83 c0 34             	add    eax,0x34
c000580a:	e8 d9 c2 ff ff       	call   c0001ae8 <st_dword>
c000580f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005813:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005816:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005819:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000581c:	83 c0 38             	add    eax,0x38
c000581f:	e8 c7 c2 ff ff       	call   c0001aeb <st_qword>
c0005824:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000582b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000582e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005831:	83 c0 28             	add    eax,0x28
c0005834:	e8 b2 c2 ff ff       	call   c0001aeb <st_qword>
c0005839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000583d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005842:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005845:	83 c0 0c             	add    eax,0xc
c0005848:	e8 9b c2 ff ff       	call   c0001ae8 <st_dword>
c000584d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005851:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005854:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005858:	31 d2                	xor    edx,edx
c000585a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000585d:	83 c0 10             	add    eax,0x10
c0005860:	e8 83 c2 ff ff       	call   c0001ae8 <st_dword>
c0005865:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005869:	e8 62 e1 ff ff       	call   c00039d0 <store_xdir>
c000586e:	85 c0                	test   eax,eax
c0005870:	75 0d                	jne    c000587f <f_sync+0x167>
c0005872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005876:	e8 00 eb ff ff       	call   c000437b <sync_fs>
c000587b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005883:	83 ec 0c             	sub    esp,0xc
c0005886:	56                   	push   esi
c0005887:	e8 2f 2a 00 00       	call   c00082bb <ff_memfree>
c000588c:	83 c4 10             	add    esp,0x10
c000588f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005893:	eb 59                	jmp    c00058ee <f_sync+0x1d6>
c0005895:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005898:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000589b:	e8 b0 c9 ff ff       	call   c0002250 <move_window>
c00058a0:	85 c0                	test   eax,eax
c00058a2:	75 4a                	jne    c00058ee <f_sync+0x1d6>
c00058a4:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00058a7:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00058ab:	89 f2                	mov    edx,esi
c00058ad:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00058b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00058b2:	e8 5f f3 ff ff       	call   c0004c16 <st_clust.isra.1>
c00058b7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ba:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058bd:	e8 26 c2 ff ff       	call   c0001ae8 <st_dword>
c00058c2:	8d 46 16             	lea    eax,[esi+0x16]
c00058c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00058ca:	e8 19 c2 ff ff       	call   c0001ae8 <st_dword>
c00058cf:	8d 46 12             	lea    eax,[esi+0x12]
c00058d2:	31 d2                	xor    edx,edx
c00058d4:	e8 0b c2 ff ff       	call   c0001ae4 <st_word>
c00058d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058dd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058e5:	e8 91 ea ff ff       	call   c000437b <sync_fs>
c00058ea:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058ee:	83 c4 64             	add    esp,0x64
c00058f1:	5b                   	pop    ebx
c00058f2:	5e                   	pop    esi
c00058f3:	c3                   	ret    

c00058f4 <f_close>:
c00058f4:	53                   	push   ebx
c00058f5:	83 ec 24             	sub    esp,0x24
c00058f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058fc:	53                   	push   ebx
c00058fd:	e8 16 fe ff ff       	call   c0005718 <f_sync>
c0005902:	83 c4 10             	add    esp,0x10
c0005905:	85 c0                	test   eax,eax
c0005907:	75 15                	jne    c000591e <f_close+0x2a>
c0005909:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000590d:	89 d8                	mov    eax,ebx
c000590f:	e8 61 c8 ff ff       	call   c0002175 <validate>
c0005914:	85 c0                	test   eax,eax
c0005916:	75 06                	jne    c000591e <f_close+0x2a>
c0005918:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000591e:	83 c4 18             	add    esp,0x18
c0005921:	5b                   	pop    ebx
c0005922:	c3                   	ret    

c0005923 <f_lseek>:
c0005923:	55                   	push   ebp
c0005924:	57                   	push   edi
c0005925:	56                   	push   esi
c0005926:	53                   	push   ebx
c0005927:	83 ec 3c             	sub    esp,0x3c
c000592a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000592e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005932:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005936:	89 04 24             	mov    DWORD PTR [esp],eax
c0005939:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000593d:	89 d8                	mov    eax,ebx
c000593f:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005943:	e8 2d c8 ff ff       	call   c0002175 <validate>
c0005948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000594c:	85 c0                	test   eax,eax
c000594e:	0f 85 7a 04 00 00    	jne    c0005dce <f_lseek+0x4ab>
c0005954:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005958:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000595c:	85 c0                	test   eax,eax
c000595e:	0f 85 6a 04 00 00    	jne    c0005dce <f_lseek+0x4ab>
c0005964:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005968:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596b:	74 0c                	je     c0005979 <f_lseek+0x56>
c000596d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005970:	85 c0                	test   eax,eax
c0005972:	75 1f                	jne    c0005993 <f_lseek+0x70>
c0005974:	e9 b5 01 00 00       	jmp    c0005b2e <f_lseek+0x20b>
c0005979:	83 c9 ff             	or     ecx,0xffffffff
c000597c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000597f:	89 d8                	mov    eax,ebx
c0005981:	e8 e3 d3 ff ff       	call   c0002d69 <fill_last_frag>
c0005986:	85 c0                	test   eax,eax
c0005988:	74 e3                	je     c000596d <f_lseek+0x4a>
c000598a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000598e:	e9 3b 04 00 00       	jmp    c0005dce <f_lseek+0x4ab>
c0005993:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005998:	0f 85 ac 00 00 00    	jne    c0005a4a <f_lseek+0x127>
c000599e:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00059a2:	0f 85 a2 00 00 00    	jne    c0005a4a <f_lseek+0x127>
c00059a8:	8d 78 04             	lea    edi,[eax+0x4]
c00059ab:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00059ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00059b0:	be 02 00 00 00       	mov    esi,0x2
c00059b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059b9:	85 ed                	test   ebp,ebp
c00059bb:	74 73                	je     c0005a30 <f_lseek+0x10d>
c00059bd:	89 e9                	mov    ecx,ebp
c00059bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059c6:	ff 04 24             	inc    DWORD PTR [esp]
c00059c9:	89 ca                	mov    edx,ecx
c00059cb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059cf:	89 d8                	mov    eax,ebx
c00059d1:	e8 02 d4 ff ff       	call   c0002dd8 <get_fat>
c00059d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059da:	83 f8 01             	cmp    eax,0x1
c00059dd:	77 11                	ja     c00059f0 <f_lseek+0xcd>
c00059df:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059e3:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059eb:	e9 de 03 00 00       	jmp    c0005dce <f_lseek+0x4ab>
c00059f0:	83 f8 ff             	cmp    eax,0xffffffff
c00059f3:	75 11                	jne    c0005a06 <f_lseek+0xe3>
c00059f5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059f9:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005a01:	e9 c8 03 00 00       	jmp    c0005dce <f_lseek+0x4ab>
c0005a06:	8d 51 01             	lea    edx,[ecx+0x1]
c0005a09:	89 c1                	mov    ecx,eax
c0005a0b:	39 c2                	cmp    edx,eax
c0005a0d:	74 b7                	je     c00059c6 <f_lseek+0xa3>
c0005a0f:	83 c6 02             	add    esi,0x2
c0005a12:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005a16:	72 0b                	jb     c0005a23 <f_lseek+0x100>
c0005a18:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005a1b:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005a1e:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a20:	83 c7 08             	add    edi,0x8
c0005a23:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a27:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a2a:	76 04                	jbe    c0005a30 <f_lseek+0x10d>
c0005a2c:	89 c5                	mov    ebp,eax
c0005a2e:	eb 8d                	jmp    c00059bd <f_lseek+0x9a>
c0005a30:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a33:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a37:	89 30                	mov    DWORD PTR [eax],esi
c0005a39:	0f 87 87 03 00 00    	ja     c0005dc6 <f_lseek+0x4a3>
c0005a3f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a45:	e9 84 03 00 00       	jmp    c0005dce <f_lseek+0x4ab>
c0005a4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a4d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a5c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a63:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a67:	73 0f                	jae    c0005a78 <f_lseek+0x155>
c0005a69:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a80:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a83:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a8e:	0f 84 3a 03 00 00    	je     c0005dce <f_lseek+0x4ab>
c0005a94:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a98:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a9c:	83 c6 ff             	add    esi,0xffffffff
c0005a9f:	89 d8                	mov    eax,ebx
c0005aa1:	83 d7 ff             	adc    edi,0xffffffff
c0005aa4:	89 f2                	mov    edx,esi
c0005aa6:	89 f9                	mov    ecx,edi
c0005aa8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005aac:	89 34 24             	mov    DWORD PTR [esp],esi
c0005aaf:	e8 78 c2 ff ff       	call   c0001d2c <clmt_clust>
c0005ab4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ab8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005abb:	89 c2                	mov    edx,eax
c0005abd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ac1:	89 c8                	mov    eax,ecx
c0005ac3:	e8 43 c2 ff ff       	call   c0001d0b <clst2sect>
c0005ac8:	89 d7                	mov    edi,edx
c0005aca:	09 c7                	or     edi,eax
c0005acc:	0f 84 0d ff ff ff    	je     c00059df <f_lseek+0xbc>
c0005ad2:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ad6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005adc:	0f 84 ec 02 00 00    	je     c0005dce <f_lseek+0x4ab>
c0005ae2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ae6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005aea:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005aed:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005af1:	0f ac fe 09          	shrd   esi,edi,0x9
c0005af5:	4d                   	dec    ebp
c0005af6:	31 ff                	xor    edi,edi
c0005af8:	21 ee                	and    esi,ebp
c0005afa:	01 c6                	add    esi,eax
c0005afc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005aff:	11 d7                	adc    edi,edx
c0005b01:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005b04:	39 fa                	cmp    edx,edi
c0005b06:	75 08                	jne    c0005b10 <f_lseek+0x1ed>
c0005b08:	39 f0                	cmp    eax,esi
c0005b0a:	0f 84 be 02 00 00    	je     c0005dce <f_lseek+0x4ab>
c0005b10:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005b13:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005b17:	0f 89 80 02 00 00    	jns    c0005d9d <f_lseek+0x47a>
c0005b1d:	83 ec 0c             	sub    esp,0xc
c0005b20:	6a 01                	push   0x1
c0005b22:	52                   	push   edx
c0005b23:	50                   	push   eax
c0005b24:	55                   	push   ebp
c0005b25:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b29:	e9 5a 02 00 00       	jmp    c0005d88 <f_lseek+0x465>
c0005b2e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b32:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b35:	74 16                	je     c0005b4d <f_lseek+0x22a>
c0005b37:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b3c:	76 0f                	jbe    c0005b4d <f_lseek+0x22a>
c0005b3e:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b45:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b4d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b50:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b53:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b56:	89 c7                	mov    edi,eax
c0005b58:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b5c:	73 0d                	jae    c0005b6b <f_lseek+0x248>
c0005b5e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b62:	75 07                	jne    c0005b6b <f_lseek+0x248>
c0005b64:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b6b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b6e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b71:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b75:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b7c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b83:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b86:	75 09                	jne    c0005b91 <f_lseek+0x26e>
c0005b88:	31 f6                	xor    esi,esi
c0005b8a:	31 ff                	xor    edi,edi
c0005b8c:	e9 af 01 00 00       	jmp    c0005d40 <f_lseek+0x41d>
c0005b91:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b95:	89 d7                	mov    edi,edx
c0005b97:	c1 e1 09             	shl    ecx,0x9
c0005b9a:	09 c7                	or     edi,eax
c0005b9c:	89 cd                	mov    ebp,ecx
c0005b9e:	74 6d                	je     c0005c0d <f_lseek+0x2ea>
c0005ba0:	83 c0 ff             	add    eax,0xffffffff
c0005ba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba7:	83 d2 ff             	adc    edx,0xffffffff
c0005baa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005bad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bb1:	83 c0 ff             	add    eax,0xffffffff
c0005bb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005bb8:	83 d2 ff             	adc    edx,0xffffffff
c0005bbb:	31 ff                	xor    edi,edi
c0005bbd:	57                   	push   edi
c0005bbe:	51                   	push   ecx
c0005bbf:	52                   	push   edx
c0005bc0:	50                   	push   eax
c0005bc1:	e8 96 d7 01 00       	call   c002335c <__udivdi3>
c0005bc6:	83 c4 10             	add    esp,0x10
c0005bc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bcd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bd1:	57                   	push   edi
c0005bd2:	55                   	push   ebp
c0005bd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bdb:	e8 7c d7 01 00       	call   c002335c <__udivdi3>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005be7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005beb:	19 d1                	sbb    ecx,edx
c0005bed:	72 1e                	jb     c0005c0d <f_lseek+0x2ea>
c0005bef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bf3:	89 e9                	mov    ecx,ebp
c0005bf5:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bf8:	f7 d9                	neg    ecx
c0005bfa:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bfd:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005c01:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005c04:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005c07:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005c0b:	eb 28                	jmp    c0005c35 <f_lseek+0x312>
c0005c0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005c10:	85 c0                	test   eax,eax
c0005c12:	75 1e                	jne    c0005c32 <f_lseek+0x30f>
c0005c14:	31 d2                	xor    edx,edx
c0005c16:	89 d8                	mov    eax,ebx
c0005c18:	e8 a9 d4 ff ff       	call   c00030c6 <create_chain>
c0005c1d:	83 f8 01             	cmp    eax,0x1
c0005c20:	0f 84 b9 fd ff ff    	je     c00059df <f_lseek+0xbc>
c0005c26:	83 f8 ff             	cmp    eax,0xffffffff
c0005c29:	0f 84 c6 fd ff ff    	je     c00059f5 <f_lseek+0xd2>
c0005c2f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c32:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c35:	85 c0                	test   eax,eax
c0005c37:	0f 84 4b ff ff ff    	je     c0005b88 <f_lseek+0x265>
c0005c3d:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c41:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c49:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c4c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c50:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c53:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c56:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c5a:	0f 83 9d 00 00 00    	jae    c0005cfd <f_lseek+0x3da>
c0005c60:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c64:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c68:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c6b:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c6f:	01 f2                	add    edx,esi
c0005c71:	11 f9                	adc    ecx,edi
c0005c73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c77:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c7b:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c7e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c81:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c84:	f6 c1 02             	test   cl,0x2
c0005c87:	74 35                	je     c0005cbe <f_lseek+0x39b>
c0005c89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c8d:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c90:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c93:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c97:	73 16                	jae    c0005caf <f_lseek+0x38c>
c0005c99:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c9d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005ca1:	88 ca                	mov    dl,cl
c0005ca3:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005ca6:	83 ca 40             	or     edx,0x40
c0005ca9:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005cac:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005caf:	89 c2                	mov    edx,eax
c0005cb1:	89 d8                	mov    eax,ebx
c0005cb3:	e8 0e d4 ff ff       	call   c00030c6 <create_chain>
c0005cb8:	85 c0                	test   eax,eax
c0005cba:	75 0b                	jne    c0005cc7 <f_lseek+0x3a4>
c0005cbc:	eb 30                	jmp    c0005cee <f_lseek+0x3cb>
c0005cbe:	89 c2                	mov    edx,eax
c0005cc0:	89 d8                	mov    eax,ebx
c0005cc2:	e8 11 d1 ff ff       	call   c0002dd8 <get_fat>
c0005cc7:	83 f8 ff             	cmp    eax,0xffffffff
c0005cca:	0f 84 25 fd ff ff    	je     c00059f5 <f_lseek+0xd2>
c0005cd0:	83 f8 01             	cmp    eax,0x1
c0005cd3:	0f 86 06 fd ff ff    	jbe    c00059df <f_lseek+0xbc>
c0005cd9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cdd:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ce0:	0f 86 f9 fc ff ff    	jbe    c00059df <f_lseek+0xbc>
c0005ce6:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ce9:	e9 5b ff ff ff       	jmp    c0005c49 <f_lseek+0x326>
c0005cee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cf5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cfd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005d00:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005d04:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005d07:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005d0a:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005d0d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005d13:	0f 84 6f fe ff ff    	je     c0005b88 <f_lseek+0x265>
c0005d19:	89 c2                	mov    edx,eax
c0005d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005d1f:	e8 e7 bf ff ff       	call   c0001d0b <clst2sect>
c0005d24:	89 d7                	mov    edi,edx
c0005d26:	09 c7                	or     edi,eax
c0005d28:	0f 84 b1 fc ff ff    	je     c00059df <f_lseek+0xbc>
c0005d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d32:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d35:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d39:	c1 ef 09             	shr    edi,0x9
c0005d3c:	01 c6                	add    esi,eax
c0005d3e:	11 d7                	adc    edi,edx
c0005d40:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d43:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d46:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d49:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d4c:	19 d1                	sbb    ecx,edx
c0005d4e:	73 0a                	jae    c0005d5a <f_lseek+0x437>
c0005d50:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d53:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d56:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d5a:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d5f:	74 6d                	je     c0005dce <f_lseek+0x4ab>
c0005d61:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d67:	39 fa                	cmp    edx,edi
c0005d69:	75 04                	jne    c0005d6f <f_lseek+0x44c>
c0005d6b:	39 f0                	cmp    eax,esi
c0005d6d:	74 5f                	je     c0005dce <f_lseek+0x4ab>
c0005d6f:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d72:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d76:	79 25                	jns    c0005d9d <f_lseek+0x47a>
c0005d78:	83 ec 0c             	sub    esp,0xc
c0005d7b:	6a 01                	push   0x1
c0005d7d:	52                   	push   edx
c0005d7e:	50                   	push   eax
c0005d7f:	55                   	push   ebp
c0005d80:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d84:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d88:	50                   	push   eax
c0005d89:	e8 af bc ff ff       	call   c0001a3d <disk_write>
c0005d8e:	83 c4 20             	add    esp,0x20
c0005d91:	85 c0                	test   eax,eax
c0005d93:	0f 85 5c fc ff ff    	jne    c00059f5 <f_lseek+0xd2>
c0005d99:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d9d:	83 ec 0c             	sub    esp,0xc
c0005da0:	6a 01                	push   0x1
c0005da2:	57                   	push   edi
c0005da3:	56                   	push   esi
c0005da4:	55                   	push   ebp
c0005da5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005da9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005dad:	50                   	push   eax
c0005dae:	e8 74 bc ff ff       	call   c0001a27 <disk_read>
c0005db3:	83 c4 20             	add    esp,0x20
c0005db6:	85 c0                	test   eax,eax
c0005db8:	0f 85 37 fc ff ff    	jne    c00059f5 <f_lseek+0xd2>
c0005dbe:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005dc1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005dc4:	eb 08                	jmp    c0005dce <f_lseek+0x4ab>
c0005dc6:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005dce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005dd2:	83 c4 3c             	add    esp,0x3c
c0005dd5:	5b                   	pop    ebx
c0005dd6:	5e                   	pop    esi
c0005dd7:	5f                   	pop    edi
c0005dd8:	5d                   	pop    ebp
c0005dd9:	c3                   	ret    

c0005dda <f_opendir>:
c0005dda:	56                   	push   esi
c0005ddb:	b8 09 00 00 00       	mov    eax,0x9
c0005de0:	53                   	push   ebx
c0005de1:	83 ec 24             	sub    esp,0x24
c0005de4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005de8:	85 db                	test   ebx,ebx
c0005dea:	0f 84 e6 00 00 00    	je     c0005ed6 <f_opendir+0xfc>
c0005df0:	31 c9                	xor    ecx,ecx
c0005df2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005df6:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dfa:	e8 03 c7 ff ff       	call   c0002502 <mount_volume>
c0005dff:	85 c0                	test   eax,eax
c0005e01:	0f 85 c9 00 00 00    	jne    c0005ed0 <f_opendir+0xf6>
c0005e07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	89 03                	mov    DWORD PTR [ebx],eax
c0005e10:	68 60 04 00 00       	push   0x460
c0005e15:	e8 8b 24 00 00       	call   c00082a5 <ff_memalloc>
c0005e1a:	83 c4 10             	add    esp,0x10
c0005e1d:	89 c6                	mov    esi,eax
c0005e1f:	b8 11 00 00 00       	mov    eax,0x11
c0005e24:	85 f6                	test   esi,esi
c0005e26:	0f 84 aa 00 00 00    	je     c0005ed6 <f_opendir+0xfc>
c0005e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e30:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e36:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e39:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e3c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e40:	89 d8                	mov    eax,ebx
c0005e42:	e8 31 ee ff ff       	call   c0004c78 <follow_path>
c0005e47:	85 c0                	test   eax,eax
c0005e49:	75 61                	jne    c0005eac <f_opendir+0xd2>
c0005e4b:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e4f:	78 46                	js     c0005e97 <f_opendir+0xbd>
c0005e51:	b8 05 00 00 00       	mov    eax,0x5
c0005e56:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e5a:	74 50                	je     c0005eac <f_opendir+0xd2>
c0005e5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e60:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e62:	3c 04                	cmp    al,0x4
c0005e64:	75 26                	jne    c0005e8c <f_opendir+0xb2>
c0005e66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e6c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e6f:	30 d2                	xor    dl,dl
c0005e71:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e75:	09 c2                	or     edx,eax
c0005e77:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e7a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e7d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e80:	89 da                	mov    edx,ebx
c0005e82:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e85:	e8 b4 ed ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c0005e8a:	eb 0b                	jmp    c0005e97 <f_opendir+0xbd>
c0005e8c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e8f:	e8 59 ed ff ff       	call   c0004bed <ld_clust.isra.0>
c0005e94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e9b:	31 d2                	xor    edx,edx
c0005e9d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005ea1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005ea5:	89 d8                	mov    eax,ebx
c0005ea7:	e8 22 d1 ff ff       	call   c0002fce <dir_sdi>
c0005eac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eb0:	83 ec 0c             	sub    esp,0xc
c0005eb3:	56                   	push   esi
c0005eb4:	e8 02 24 00 00       	call   c00082bb <ff_memfree>
c0005eb9:	83 c4 10             	add    esp,0x10
c0005ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ec0:	83 f8 04             	cmp    eax,0x4
c0005ec3:	74 06                	je     c0005ecb <f_opendir+0xf1>
c0005ec5:	85 c0                	test   eax,eax
c0005ec7:	74 0d                	je     c0005ed6 <f_opendir+0xfc>
c0005ec9:	eb 05                	jmp    c0005ed0 <f_opendir+0xf6>
c0005ecb:	b8 05 00 00 00       	mov    eax,0x5
c0005ed0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed6:	83 c4 24             	add    esp,0x24
c0005ed9:	5b                   	pop    ebx
c0005eda:	5e                   	pop    esi
c0005edb:	c3                   	ret    

c0005edc <f_closedir>:
c0005edc:	53                   	push   ebx
c0005edd:	83 ec 18             	sub    esp,0x18
c0005ee0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ee4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 86 c2 ff ff       	call   c0002175 <validate>
c0005eef:	85 c0                	test   eax,eax
c0005ef1:	75 06                	jne    c0005ef9 <f_closedir+0x1d>
c0005ef3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ef9:	83 c4 18             	add    esp,0x18
c0005efc:	5b                   	pop    ebx
c0005efd:	c3                   	ret    

c0005efe <f_readdir>:
c0005efe:	57                   	push   edi
c0005eff:	56                   	push   esi
c0005f00:	53                   	push   ebx
c0005f01:	83 ec 20             	sub    esp,0x20
c0005f04:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f08:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005f0c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005f10:	89 d8                	mov    eax,ebx
c0005f12:	e8 5e c2 ff ff       	call   c0002175 <validate>
c0005f17:	85 c0                	test   eax,eax
c0005f19:	75 77                	jne    c0005f92 <f_readdir+0x94>
c0005f1b:	85 ff                	test   edi,edi
c0005f1d:	75 0b                	jne    c0005f2a <f_readdir+0x2c>
c0005f1f:	31 d2                	xor    edx,edx
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 a6 d0 ff ff       	call   c0002fce <dir_sdi>
c0005f28:	eb 68                	jmp    c0005f92 <f_readdir+0x94>
c0005f2a:	83 ec 0c             	sub    esp,0xc
c0005f2d:	68 60 04 00 00       	push   0x460
c0005f32:	e8 6e 23 00 00       	call   c00082a5 <ff_memalloc>
c0005f37:	83 c4 10             	add    esp,0x10
c0005f3a:	89 c6                	mov    esi,eax
c0005f3c:	b8 11 00 00 00       	mov    eax,0x11
c0005f41:	85 f6                	test   esi,esi
c0005f43:	74 4d                	je     c0005f92 <f_readdir+0x94>
c0005f45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f49:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f4f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f52:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f55:	31 d2                	xor    edx,edx
c0005f57:	89 d8                	mov    eax,ebx
c0005f59:	e8 80 d8 ff ff       	call   c00037de <dir_read>
c0005f5e:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f63:	75 19                	jne    c0005f7e <f_readdir+0x80>
c0005f65:	89 fa                	mov    edx,edi
c0005f67:	89 d8                	mov    eax,ebx
c0005f69:	e8 7e ea ff ff       	call   c00049ec <get_fileinfo>
c0005f6e:	31 d2                	xor    edx,edx
c0005f70:	89 d8                	mov    eax,ebx
c0005f72:	e8 af d5 ff ff       	call   c0003526 <dir_next>
c0005f77:	83 f8 04             	cmp    eax,0x4
c0005f7a:	75 02                	jne    c0005f7e <f_readdir+0x80>
c0005f7c:	31 c0                	xor    eax,eax
c0005f7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f82:	83 ec 0c             	sub    esp,0xc
c0005f85:	56                   	push   esi
c0005f86:	e8 30 23 00 00       	call   c00082bb <ff_memfree>
c0005f8b:	83 c4 10             	add    esp,0x10
c0005f8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f92:	83 c4 20             	add    esp,0x20
c0005f95:	5b                   	pop    ebx
c0005f96:	5e                   	pop    esi
c0005f97:	5f                   	pop    edi
c0005f98:	c3                   	ret    

c0005f99 <f_stat>:
c0005f99:	57                   	push   edi
c0005f9a:	31 c9                	xor    ecx,ecx
c0005f9c:	56                   	push   esi
c0005f9d:	53                   	push   ebx
c0005f9e:	83 ec 50             	sub    esp,0x50
c0005fa1:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005fa5:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005fa9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005fad:	e8 50 c5 ff ff       	call   c0002502 <mount_volume>
c0005fb2:	89 c3                	mov    ebx,eax
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	75 67                	jne    c000601f <f_stat+0x86>
c0005fb8:	83 ec 0c             	sub    esp,0xc
c0005fbb:	bb 11 00 00 00       	mov    ebx,0x11
c0005fc0:	68 60 04 00 00       	push   0x460
c0005fc5:	e8 db 22 00 00       	call   c00082a5 <ff_memalloc>
c0005fca:	83 c4 10             	add    esp,0x10
c0005fcd:	89 c6                	mov    esi,eax
c0005fcf:	85 c0                	test   eax,eax
c0005fd1:	74 4c                	je     c000601f <f_stat+0x86>
c0005fd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fe0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fe3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fe7:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005feb:	e8 88 ec ff ff       	call   c0004c78 <follow_path>
c0005ff0:	89 c3                	mov    ebx,eax
c0005ff2:	85 c0                	test   eax,eax
c0005ff4:	75 1d                	jne    c0006013 <f_stat+0x7a>
c0005ff6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005ffb:	78 11                	js     c000600e <f_stat+0x75>
c0005ffd:	85 ff                	test   edi,edi
c0005fff:	74 12                	je     c0006013 <f_stat+0x7a>
c0006001:	89 fa                	mov    edx,edi
c0006003:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006007:	e8 e0 e9 ff ff       	call   c00049ec <get_fileinfo>
c000600c:	eb 05                	jmp    c0006013 <f_stat+0x7a>
c000600e:	bb 06 00 00 00       	mov    ebx,0x6
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	56                   	push   esi
c0006017:	e8 9f 22 00 00       	call   c00082bb <ff_memfree>
c000601c:	83 c4 10             	add    esp,0x10
c000601f:	83 c4 50             	add    esp,0x50
c0006022:	89 d8                	mov    eax,ebx
c0006024:	5b                   	pop    ebx
c0006025:	5e                   	pop    esi
c0006026:	5f                   	pop    edi
c0006027:	c3                   	ret    

c0006028 <f_getfree>:
c0006028:	55                   	push   ebp
c0006029:	31 c9                	xor    ecx,ecx
c000602b:	57                   	push   edi
c000602c:	56                   	push   esi
c000602d:	53                   	push   ebx
c000602e:	83 ec 5c             	sub    esp,0x5c
c0006031:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006035:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006039:	e8 c4 c4 ff ff       	call   c0002502 <mount_volume>
c000603e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006042:	85 c0                	test   eax,eax
c0006044:	0f 85 9d 01 00 00    	jne    c00061e7 <f_getfree+0x1bf>
c000604a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000604e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006052:	89 02                	mov    DWORD PTR [edx],eax
c0006054:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006057:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000605a:	8d 71 fe             	lea    esi,[ecx-0x2]
c000605d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006061:	39 f2                	cmp    edx,esi
c0006063:	77 0b                	ja     c0006070 <f_getfree+0x48>
c0006065:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006069:	89 10                	mov    DWORD PTR [eax],edx
c000606b:	e9 77 01 00 00       	jmp    c00061e7 <f_getfree+0x1bf>
c0006070:	8a 10                	mov    dl,BYTE PTR [eax]
c0006072:	80 fa 01             	cmp    dl,0x1
c0006075:	75 3a                	jne    c00060b1 <f_getfree+0x89>
c0006077:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000607b:	be 02 00 00 00       	mov    esi,0x2
c0006080:	31 db                	xor    ebx,ebx
c0006082:	89 f2                	mov    edx,esi
c0006084:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006088:	e8 4b cd ff ff       	call   c0002dd8 <get_fat>
c000608d:	83 f8 ff             	cmp    eax,0xffffffff
c0006090:	0f 84 28 01 00 00    	je     c00061be <f_getfree+0x196>
c0006096:	83 f8 01             	cmp    eax,0x1
c0006099:	0f 84 29 01 00 00    	je     c00061c8 <f_getfree+0x1a0>
c000609f:	83 d3 00             	adc    ebx,0x0
c00060a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a6:	46                   	inc    esi
c00060a7:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00060aa:	77 d6                	ja     c0006082 <f_getfree+0x5a>
c00060ac:	e9 25 01 00 00       	jmp    c00061d6 <f_getfree+0x1ae>
c00060b1:	80 fa 04             	cmp    dl,0x4
c00060b4:	0f 85 88 00 00 00    	jne    c0006142 <f_getfree+0x11a>
c00060ba:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00060bd:	31 ed                	xor    ebp,ebp
c00060bf:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00060c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060ca:	31 db                	xor    ebx,ebx
c00060cc:	85 ed                	test   ebp,ebp
c00060ce:	75 3f                	jne    c000610f <f_getfree+0xe7>
c00060d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060d8:	83 c0 01             	add    eax,0x1
c00060db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060df:	83 d2 00             	adc    edx,0x0
c00060e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060f2:	e8 59 c1 ff ff       	call   c0002250 <move_window>
c00060f7:	85 c0                	test   eax,eax
c00060f9:	0f 85 d3 00 00 00    	jne    c00061d2 <f_getfree+0x1aa>
c00060ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006103:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006107:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000610b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000610f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006113:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006116:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c000611a:	89 cf                	mov    edi,ecx
c000611c:	85 f6                	test   esi,esi
c000611e:	74 12                	je     c0006132 <f_getfree+0x10a>
c0006120:	88 c1                	mov    cl,al
c0006122:	83 e1 01             	and    ecx,0x1
c0006125:	80 f9 01             	cmp    cl,0x1
c0006128:	83 d3 00             	adc    ebx,0x0
c000612b:	d0 e8                	shr    al,1
c000612d:	4e                   	dec    esi
c000612e:	39 fe                	cmp    esi,edi
c0006130:	75 ea                	jne    c000611c <f_getfree+0xf4>
c0006132:	45                   	inc    ebp
c0006133:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006139:	85 f6                	test   esi,esi
c000613b:	75 8f                	jne    c00060cc <f_getfree+0xa4>
c000613d:	e9 94 00 00 00       	jmp    c00061d6 <f_getfree+0x1ae>
c0006142:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006145:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006148:	31 f6                	xor    esi,esi
c000614a:	31 db                	xor    ebx,ebx
c000614c:	85 f6                	test   esi,esi
c000614e:	75 1b                	jne    c000616b <f_getfree+0x143>
c0006150:	89 d7                	mov    edi,edx
c0006152:	89 cd                	mov    ebp,ecx
c0006154:	83 c7 01             	add    edi,0x1
c0006157:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000615b:	83 d5 00             	adc    ebp,0x0
c000615e:	e8 ed c0 ff ff       	call   c0002250 <move_window>
c0006163:	85 c0                	test   eax,eax
c0006165:	75 6b                	jne    c00061d2 <f_getfree+0x1aa>
c0006167:	89 fa                	mov    edx,edi
c0006169:	89 e9                	mov    ecx,ebp
c000616b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000616f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006173:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006177:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000617a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000617e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006182:	75 11                	jne    c0006195 <f_getfree+0x16d>
c0006184:	e8 e9 b8 ff ff       	call   c0001a72 <ld_word>
c0006189:	66 83 f8 01          	cmp    ax,0x1
c000618d:	83 d3 00             	adc    ebx,0x0
c0006190:	83 c6 02             	add    esi,0x2
c0006193:	eb 13                	jmp    c00061a8 <f_getfree+0x180>
c0006195:	e8 e5 b8 ff ff       	call   c0001a7f <ld_dword>
c000619a:	25 ff ff ff 0f       	and    eax,0xfffffff
c000619f:	83 f8 01             	cmp    eax,0x1
c00061a2:	83 d3 00             	adc    ebx,0x0
c00061a5:	83 c6 04             	add    esi,0x4
c00061a8:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00061ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00061b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00061b6:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00061ba:	75 90                	jne    c000614c <f_getfree+0x124>
c00061bc:	eb 18                	jmp    c00061d6 <f_getfree+0x1ae>
c00061be:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00061c6:	eb 0e                	jmp    c00061d6 <f_getfree+0x1ae>
c00061c8:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061d0:	eb 04                	jmp    c00061d6 <f_getfree+0x1ae>
c00061d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061d6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061da:	89 18                	mov    DWORD PTR [eax],ebx
c00061dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061e0:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061e3:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061eb:	83 c4 5c             	add    esp,0x5c
c00061ee:	5b                   	pop    ebx
c00061ef:	5e                   	pop    esi
c00061f0:	5f                   	pop    edi
c00061f1:	5d                   	pop    ebp
c00061f2:	c3                   	ret    

c00061f3 <f_truncate>:
c00061f3:	56                   	push   esi
c00061f4:	53                   	push   ebx
c00061f5:	83 ec 14             	sub    esp,0x14
c00061f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061fc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006200:	89 d8                	mov    eax,ebx
c0006202:	e8 6e bf ff ff       	call   c0002175 <validate>
c0006207:	89 c6                	mov    esi,eax
c0006209:	85 c0                	test   eax,eax
c000620b:	0f 85 d2 00 00 00    	jne    c00062e3 <f_truncate+0xf0>
c0006211:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006215:	85 f6                	test   esi,esi
c0006217:	0f 85 c6 00 00 00    	jne    c00062e3 <f_truncate+0xf0>
c000621d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006221:	0f 84 b7 00 00 00    	je     c00062de <f_truncate+0xeb>
c0006227:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000622a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000622d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006230:	89 d1                	mov    ecx,edx
c0006232:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006235:	0f 83 a8 00 00 00    	jae    c00062e3 <f_truncate+0xf0>
c000623b:	09 c2                	or     edx,eax
c000623d:	75 15                	jne    c0006254 <f_truncate+0x61>
c000623f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006242:	31 c9                	xor    ecx,ecx
c0006244:	89 d8                	mov    eax,ebx
c0006246:	e8 7a d0 ff ff       	call   c00032c5 <remove_chain>
c000624b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006252:	eb 35                	jmp    c0006289 <f_truncate+0x96>
c0006254:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006257:	89 d8                	mov    eax,ebx
c0006259:	e8 7a cb ff ff       	call   c0002dd8 <get_fat>
c000625e:	89 c2                	mov    edx,eax
c0006260:	b8 01 00 00 00       	mov    eax,0x1
c0006265:	83 fa ff             	cmp    edx,0xffffffff
c0006268:	74 1f                	je     c0006289 <f_truncate+0x96>
c000626a:	b8 02 00 00 00       	mov    eax,0x2
c000626f:	83 fa 01             	cmp    edx,0x1
c0006272:	74 15                	je     c0006289 <f_truncate+0x96>
c0006274:	31 c0                	xor    eax,eax
c0006276:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000627a:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000627d:	76 0a                	jbe    c0006289 <f_truncate+0x96>
c000627f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006282:	89 d8                	mov    eax,ebx
c0006284:	e8 3c d0 ff ff       	call   c00032c5 <remove_chain>
c0006289:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000628c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000628f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006292:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006295:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006298:	83 ca 40             	or     edx,0x40
c000629b:	85 c0                	test   eax,eax
c000629d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00062a0:	75 35                	jne    c00062d7 <f_truncate+0xe4>
c00062a2:	84 d2                	test   dl,dl
c00062a4:	79 3d                	jns    c00062e3 <f_truncate+0xf0>
c00062a6:	83 ec 0c             	sub    esp,0xc
c00062a9:	8d 43 50             	lea    eax,[ebx+0x50]
c00062ac:	6a 01                	push   0x1
c00062ae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00062b1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00062b4:	50                   	push   eax
c00062b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00062b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00062bd:	50                   	push   eax
c00062be:	e8 7a b7 ff ff       	call   c0001a3d <disk_write>
c00062c3:	83 c4 20             	add    esp,0x20
c00062c6:	85 c0                	test   eax,eax
c00062c8:	75 08                	jne    c00062d2 <f_truncate+0xdf>
c00062ca:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062ce:	31 f6                	xor    esi,esi
c00062d0:	eb 11                	jmp    c00062e3 <f_truncate+0xf0>
c00062d2:	b8 01 00 00 00       	mov    eax,0x1
c00062d7:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062da:	89 c6                	mov    esi,eax
c00062dc:	eb 05                	jmp    c00062e3 <f_truncate+0xf0>
c00062de:	be 07 00 00 00       	mov    esi,0x7
c00062e3:	89 f0                	mov    eax,esi
c00062e5:	83 c4 14             	add    esp,0x14
c00062e8:	5b                   	pop    ebx
c00062e9:	5e                   	pop    esi
c00062ea:	c3                   	ret    

c00062eb <f_unlink>:
c00062eb:	56                   	push   esi
c00062ec:	b9 02 00 00 00       	mov    ecx,0x2
c00062f1:	53                   	push   ebx
c00062f2:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062f8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062fc:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006303:	e8 fa c1 ff ff       	call   c0002502 <mount_volume>
c0006308:	85 c0                	test   eax,eax
c000630a:	0f 85 55 01 00 00    	jne    c0006465 <f_unlink+0x17a>
c0006310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006314:	83 ec 0c             	sub    esp,0xc
c0006317:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000631b:	68 60 04 00 00       	push   0x460
c0006320:	e8 80 1f 00 00       	call   c00082a5 <ff_memalloc>
c0006325:	83 c4 10             	add    esp,0x10
c0006328:	89 c3                	mov    ebx,eax
c000632a:	b8 11 00 00 00       	mov    eax,0x11
c000632f:	85 db                	test   ebx,ebx
c0006331:	0f 84 2e 01 00 00    	je     c0006465 <f_unlink+0x17a>
c0006337:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000633b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006341:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006344:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006347:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000634e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006352:	e8 21 e9 ff ff       	call   c0004c78 <follow_path>
c0006357:	85 c0                	test   eax,eax
c0006359:	0f 85 f2 00 00 00    	jne    c0006451 <f_unlink+0x166>
c000635f:	b8 06 00 00 00       	mov    eax,0x6
c0006364:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000636c:	0f 88 df 00 00 00    	js     c0006451 <f_unlink+0x166>
c0006372:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006377:	74 0a                	je     c0006383 <f_unlink+0x98>
c0006379:	b8 07 00 00 00       	mov    eax,0x7
c000637e:	e9 ce 00 00 00       	jmp    c0006451 <f_unlink+0x166>
c0006383:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006387:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000638b:	8a 02                	mov    al,BYTE PTR [edx]
c000638d:	3c 04                	cmp    al,0x4
c000638f:	75 12                	jne    c00063a3 <f_unlink+0xb8>
c0006391:	8d 42 10             	lea    eax,[edx+0x10]
c0006394:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006398:	e8 a1 e8 ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c000639d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00063a1:	eb 0e                	jmp    c00063b1 <f_unlink+0xc6>
c00063a3:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00063aa:	e8 3e e8 ff ff       	call   c0004bed <ld_clust.isra.0>
c00063af:	89 c6                	mov    esi,eax
c00063b1:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00063b6:	75 12                	jne    c00063ca <f_unlink+0xdf>
c00063b8:	8d 44 24 48          	lea    eax,[esp+0x48]
c00063bc:	e8 94 d6 ff ff       	call   c0003a55 <dir_remove>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	74 6c                	je     c0006431 <f_unlink+0x146>
c00063c5:	e9 87 00 00 00       	jmp    c0006451 <f_unlink+0x166>
c00063ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ce:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063d5:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063dc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063df:	75 21                	jne    c0006402 <f_unlink+0x117>
c00063e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063e9:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063f0:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063f7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063fb:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006402:	31 d2                	xor    edx,edx
c0006404:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000640b:	e8 be cb ff ff       	call   c0002fce <dir_sdi>
c0006410:	85 c0                	test   eax,eax
c0006412:	75 3d                	jne    c0006451 <f_unlink+0x166>
c0006414:	31 d2                	xor    edx,edx
c0006416:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000641d:	e8 bc d3 ff ff       	call   c00037de <dir_read>
c0006422:	85 c0                	test   eax,eax
c0006424:	0f 84 4f ff ff ff    	je     c0006379 <f_unlink+0x8e>
c000642a:	83 f8 04             	cmp    eax,0x4
c000642d:	75 22                	jne    c0006451 <f_unlink+0x166>
c000642f:	eb 87                	jmp    c00063b8 <f_unlink+0xcd>
c0006431:	85 f6                	test   esi,esi
c0006433:	75 0b                	jne    c0006440 <f_unlink+0x155>
c0006435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006439:	e8 3d df ff ff       	call   c000437b <sync_fs>
c000643e:	eb 11                	jmp    c0006451 <f_unlink+0x166>
c0006440:	31 c9                	xor    ecx,ecx
c0006442:	89 f2                	mov    edx,esi
c0006444:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006448:	e8 78 ce ff ff       	call   c00032c5 <remove_chain>
c000644d:	85 c0                	test   eax,eax
c000644f:	74 e4                	je     c0006435 <f_unlink+0x14a>
c0006451:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006455:	83 ec 0c             	sub    esp,0xc
c0006458:	53                   	push   ebx
c0006459:	e8 5d 1e 00 00       	call   c00082bb <ff_memfree>
c000645e:	83 c4 10             	add    esp,0x10
c0006461:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006465:	81 c4 e4 00 00 00    	add    esp,0xe4
c000646b:	5b                   	pop    ebx
c000646c:	5e                   	pop    esi
c000646d:	c3                   	ret    

c000646e <f_mkdir>:
c000646e:	57                   	push   edi
c000646f:	b9 02 00 00 00       	mov    ecx,0x2
c0006474:	56                   	push   esi
c0006475:	53                   	push   ebx
c0006476:	83 c4 80             	add    esp,0xffffff80
c0006479:	8d 54 24 08          	lea    edx,[esp+0x8]
c000647d:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006484:	e8 79 c0 ff ff       	call   c0002502 <mount_volume>
c0006489:	89 c3                	mov    ebx,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	0f 85 fe 01 00 00    	jne    c0006691 <f_mkdir+0x223>
c0006493:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006497:	bb 11 00 00 00       	mov    ebx,0x11
c000649c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00064a0:	83 ec 0c             	sub    esp,0xc
c00064a3:	68 60 04 00 00       	push   0x460
c00064a8:	e8 f8 1d 00 00       	call   c00082a5 <ff_memalloc>
c00064ad:	83 c4 10             	add    esp,0x10
c00064b0:	89 c7                	mov    edi,eax
c00064b2:	85 c0                	test   eax,eax
c00064b4:	0f 84 d7 01 00 00    	je     c0006691 <f_mkdir+0x223>
c00064ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064be:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00064c4:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064c7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064ca:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064d1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064d5:	e8 9e e7 ff ff       	call   c0004c78 <follow_path>
c00064da:	89 c3                	mov    ebx,eax
c00064dc:	85 c0                	test   eax,eax
c00064de:	74 3e                	je     c000651e <f_mkdir+0xb0>
c00064e0:	83 f8 04             	cmp    eax,0x4
c00064e3:	75 3e                	jne    c0006523 <f_mkdir+0xb5>
c00064e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e9:	31 d2                	xor    edx,edx
c00064eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064f3:	e8 ce cb ff ff       	call   c00030c6 <create_chain>
c00064f8:	89 c6                	mov    esi,eax
c00064fa:	85 c0                	test   eax,eax
c00064fc:	74 0c                	je     c000650a <f_mkdir+0x9c>
c00064fe:	bb 02 00 00 00       	mov    ebx,0x2
c0006503:	83 f8 01             	cmp    eax,0x1
c0006506:	74 07                	je     c000650f <f_mkdir+0xa1>
c0006508:	eb 2a                	jmp    c0006534 <f_mkdir+0xc6>
c000650a:	bb 07 00 00 00       	mov    ebx,0x7
c000650f:	31 c9                	xor    ecx,ecx
c0006511:	89 f2                	mov    edx,esi
c0006513:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006517:	e8 a9 cd ff ff       	call   c00032c5 <remove_chain>
c000651c:	eb 05                	jmp    c0006523 <f_mkdir+0xb5>
c000651e:	bb 08 00 00 00       	mov    ebx,0x8
c0006523:	83 ec 0c             	sub    esp,0xc
c0006526:	57                   	push   edi
c0006527:	e8 8f 1d 00 00       	call   c00082bb <ff_memfree>
c000652c:	83 c4 10             	add    esp,0x10
c000652f:	e9 5d 01 00 00       	jmp    c0006691 <f_mkdir+0x223>
c0006534:	bb 01 00 00 00       	mov    ebx,0x1
c0006539:	83 f8 ff             	cmp    eax,0xffffffff
c000653c:	74 d1                	je     c000650f <f_mkdir+0xa1>
c000653e:	89 f2                	mov    edx,esi
c0006540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006544:	e8 c4 ce ff ff       	call   c000340d <dir_clear>
c0006549:	89 c3                	mov    ebx,eax
c000654b:	85 c0                	test   eax,eax
c000654d:	75 c0                	jne    c000650f <f_mkdir+0xa1>
c000654f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006553:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006556:	74 69                	je     c00065c1 <f_mkdir+0x153>
c0006558:	b9 0b 00 00 00       	mov    ecx,0xb
c000655d:	83 c0 54             	add    eax,0x54
c0006560:	ba 20 00 00 00       	mov    edx,0x20
c0006565:	e8 9c b5 ff ff       	call   c0001b06 <mem_set>
c000656a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006573:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006577:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000657b:	83 c0 6a             	add    eax,0x6a
c000657e:	e8 65 b5 ff ff       	call   c0001ae8 <st_dword>
c0006583:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006587:	89 f1                	mov    ecx,esi
c0006589:	8d 50 54             	lea    edx,[eax+0x54]
c000658c:	e8 85 e6 ff ff       	call   c0004c16 <st_clust.isra.1>
c0006591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006595:	b9 20 00 00 00       	mov    ecx,0x20
c000659a:	8d 50 54             	lea    edx,[eax+0x54]
c000659d:	83 c0 74             	add    eax,0x74
c00065a0:	e8 4c b5 ff ff       	call   c0001af1 <mem_cpy>
c00065a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a9:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00065ad:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00065b1:	8d 50 74             	lea    edx,[eax+0x74]
c00065b4:	e8 5d e6 ff ff       	call   c0004c16 <st_clust.isra.1>
c00065b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065c1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065c5:	e8 2f db ff ff       	call   c00040f9 <dir_register>
c00065ca:	89 c3                	mov    ebx,eax
c00065cc:	85 c0                	test   eax,eax
c00065ce:	0f 85 3b ff ff ff    	jne    c000650f <f_mkdir+0xa1>
c00065d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065db:	75 74                	jne    c0006651 <f_mkdir+0x1e3>
c00065dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e0:	ba 00 00 21 50       	mov    edx,0x50210000
c00065e5:	83 c0 0c             	add    eax,0xc
c00065e8:	e8 fb b4 ff ff       	call   c0001ae8 <st_dword>
c00065ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f1:	89 f2                	mov    edx,esi
c00065f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f6:	83 c0 34             	add    eax,0x34
c00065f9:	e8 ea b4 ff ff       	call   c0001ae8 <st_dword>
c00065fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006602:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006606:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006609:	c1 e2 09             	shl    edx,0x9
c000660c:	83 c0 38             	add    eax,0x38
c000660f:	e8 d4 b4 ff ff       	call   c0001ae8 <st_dword>
c0006614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006618:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000661c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000661f:	c1 e2 09             	shl    edx,0x9
c0006622:	83 c0 28             	add    eax,0x28
c0006625:	e8 be b4 ff ff       	call   c0001ae8 <st_dword>
c000662a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006631:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006635:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006638:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000663c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006640:	e8 8b d3 ff ff       	call   c00039d0 <store_xdir>
c0006645:	89 c3                	mov    ebx,eax
c0006647:	85 c0                	test   eax,eax
c0006649:	0f 85 d4 fe ff ff    	jne    c0006523 <f_mkdir+0xb5>
c000664f:	eb 30                	jmp    c0006681 <f_mkdir+0x213>
c0006651:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006655:	ba 00 00 21 50       	mov    edx,0x50210000
c000665a:	83 c0 16             	add    eax,0x16
c000665d:	e8 86 b4 ff ff       	call   c0001ae8 <st_dword>
c0006662:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006666:	89 f1                	mov    ecx,esi
c0006668:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000666c:	e8 a5 e5 ff ff       	call   c0004c16 <st_clust.isra.1>
c0006671:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006675:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006679:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006681:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006685:	e8 f1 dc ff ff       	call   c000437b <sync_fs>
c000668a:	89 c3                	mov    ebx,eax
c000668c:	e9 92 fe ff ff       	jmp    c0006523 <f_mkdir+0xb5>
c0006691:	83 ec 80             	sub    esp,0xffffff80
c0006694:	89 d8                	mov    eax,ebx
c0006696:	5b                   	pop    ebx
c0006697:	5e                   	pop    esi
c0006698:	5f                   	pop    edi
c0006699:	c3                   	ret    

c000669a <f_rename>:
c000669a:	55                   	push   ebp
c000669b:	57                   	push   edi
c000669c:	56                   	push   esi
c000669d:	53                   	push   ebx
c000669e:	81 ec fc 00 00 00    	sub    esp,0xfc
c00066a4:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00066ab:	e8 a4 b9 ff ff       	call   c0002054 <get_ldnumber>
c00066b0:	b9 02 00 00 00       	mov    ecx,0x2
c00066b5:	8d 54 24 14          	lea    edx,[esp+0x14]
c00066b9:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00066c0:	e8 3d be ff ff       	call   c0002502 <mount_volume>
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 85 b5 02 00 00    	jne    c0006982 <f_rename+0x2e8>
c00066cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d1:	83 ec 0c             	sub    esp,0xc
c00066d4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066d8:	68 60 04 00 00       	push   0x460
c00066dd:	e8 c3 1b 00 00       	call   c00082a5 <ff_memalloc>
c00066e2:	83 c4 10             	add    esp,0x10
c00066e5:	89 c3                	mov    ebx,eax
c00066e7:	b8 11 00 00 00       	mov    eax,0x11
c00066ec:	85 db                	test   ebx,ebx
c00066ee:	0f 84 8e 02 00 00    	je     c0006982 <f_rename+0x2e8>
c00066f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066f8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066fe:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006701:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006704:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000670b:	8d 44 24 58          	lea    eax,[esp+0x58]
c000670f:	e8 64 e5 ff ff       	call   c0004c78 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	0f 85 52 02 00 00    	jne    c000696e <f_rename+0x2d4>
c000671c:	b8 06 00 00 00       	mov    eax,0x6
c0006721:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006729:	0f 85 3f 02 00 00    	jne    c000696e <f_rename+0x2d4>
c000672f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006733:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006736:	0f 85 05 01 00 00    	jne    c0006841 <f_rename+0x1a7>
c000673c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000673f:	b9 40 00 00 00       	mov    ecx,0x40
c0006744:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006748:	e8 a4 b3 ff ff       	call   c0001af1 <mem_cpy>
c000674d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006752:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006756:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000675d:	e8 8f b3 ff ff       	call   c0001af1 <mem_cpy>
c0006762:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006769:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006770:	e8 03 e5 ff ff       	call   c0004c78 <follow_path>
c0006775:	85 c0                	test   eax,eax
c0006777:	75 29                	jne    c00067a2 <f_rename+0x108>
c0006779:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000677d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006784:	74 0a                	je     c0006790 <f_rename+0xf6>
c0006786:	b8 08 00 00 00       	mov    eax,0x8
c000678b:	e9 de 01 00 00       	jmp    c000696e <f_rename+0x2d4>
c0006790:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006797:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000679e:	75 e6                	jne    c0006786 <f_rename+0xec>
c00067a0:	eb 09                	jmp    c00067ab <f_rename+0x111>
c00067a2:	83 f8 04             	cmp    eax,0x4
c00067a5:	0f 85 c3 01 00 00    	jne    c000696e <f_rename+0x2d4>
c00067ab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067b2:	e8 42 d9 ff ff       	call   c00040f9 <dir_register>
c00067b7:	85 c0                	test   eax,eax
c00067b9:	0f 85 af 01 00 00    	jne    c000696e <f_rename+0x2d4>
c00067bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c3:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00067c6:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067c9:	89 c5                	mov    ebp,eax
c00067cb:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067d2:	8d 46 24             	lea    eax,[esi+0x24]
c00067d5:	e8 98 b2 ff ff       	call   c0001a72 <ld_word>
c00067da:	b9 40 00 00 00       	mov    ecx,0x40
c00067df:	89 c7                	mov    edi,eax
c00067e1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067e5:	89 f0                	mov    eax,esi
c00067e7:	e8 05 b3 ff ff       	call   c0001af1 <mem_cpy>
c00067ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f0:	89 e9                	mov    ecx,ebp
c00067f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f5:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067f8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006800:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006803:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006806:	0f b7 d7             	movzx  edx,di
c0006809:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680c:	83 c0 24             	add    eax,0x24
c000680f:	e8 d0 b2 ff ff       	call   c0001ae4 <st_word>
c0006814:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006818:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000681b:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000681e:	a8 10                	test   al,0x10
c0006820:	75 06                	jne    c0006828 <f_rename+0x18e>
c0006822:	83 c8 20             	or     eax,0x20
c0006825:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006828:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000682f:	e8 9c d1 ff ff       	call   c00039d0 <store_xdir>
c0006834:	85 c0                	test   eax,eax
c0006836:	0f 84 1c 01 00 00    	je     c0006958 <f_rename+0x2be>
c000683c:	e9 2d 01 00 00       	jmp    c000696e <f_rename+0x2d4>
c0006841:	b9 20 00 00 00       	mov    ecx,0x20
c0006846:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000684d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006851:	e8 9b b2 ff ff       	call   c0001af1 <mem_cpy>
c0006856:	b9 4c 00 00 00       	mov    ecx,0x4c
c000685b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000685f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006866:	e8 86 b2 ff ff       	call   c0001af1 <mem_cpy>
c000686b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006872:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006879:	e8 fa e3 ff ff       	call   c0004c78 <follow_path>
c000687e:	85 c0                	test   eax,eax
c0006880:	75 27                	jne    c00068a9 <f_rename+0x20f>
c0006882:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006886:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000688d:	0f 85 f3 fe ff ff    	jne    c0006786 <f_rename+0xec>
c0006893:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000689a:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00068a1:	0f 85 df fe ff ff    	jne    c0006786 <f_rename+0xec>
c00068a7:	eb 09                	jmp    c00068b2 <f_rename+0x218>
c00068a9:	83 f8 04             	cmp    eax,0x4
c00068ac:	0f 85 bc 00 00 00    	jne    c000696e <f_rename+0x2d4>
c00068b2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068b9:	e8 3b d8 ff ff       	call   c00040f9 <dir_register>
c00068be:	85 c0                	test   eax,eax
c00068c0:	0f 85 a8 00 00 00    	jne    c000696e <f_rename+0x2d4>
c00068c6:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068cd:	b9 13 00 00 00       	mov    ecx,0x13
c00068d2:	8d 46 0d             	lea    eax,[esi+0xd]
c00068d5:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068d9:	e8 13 b2 ff ff       	call   c0001af1 <mem_cpy>
c00068de:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068e2:	a8 10                	test   al,0x10
c00068e4:	75 03                	jne    c00068e9 <f_rename+0x24f>
c00068e6:	83 c8 20             	or     eax,0x20
c00068e9:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f4:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068f8:	74 5e                	je     c0006958 <f_rename+0x2be>
c00068fa:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006901:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006905:	74 51                	je     c0006958 <f_rename+0x2be>
c0006907:	89 f2                	mov    edx,esi
c0006909:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000690d:	8a 07                	mov    al,BYTE PTR [edi]
c000690f:	e8 d9 e2 ff ff       	call   c0004bed <ld_clust.isra.0>
c0006914:	89 c2                	mov    edx,eax
c0006916:	89 f8                	mov    eax,edi
c0006918:	e8 ee b3 ff ff       	call   c0001d0b <clst2sect>
c000691d:	89 c6                	mov    esi,eax
c000691f:	89 d1                	mov    ecx,edx
c0006921:	b8 02 00 00 00       	mov    eax,0x2
c0006926:	09 f2                	or     edx,esi
c0006928:	74 44                	je     c000696e <f_rename+0x2d4>
c000692a:	89 f2                	mov    edx,esi
c000692c:	89 f8                	mov    eax,edi
c000692e:	e8 1d b9 ff ff       	call   c0002250 <move_window>
c0006933:	85 c0                	test   eax,eax
c0006935:	75 37                	jne    c000696e <f_rename+0x2d4>
c0006937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000693b:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000693f:	75 17                	jne    c0006958 <f_rename+0x2be>
c0006941:	8d 50 74             	lea    edx,[eax+0x74]
c0006944:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c000694b:	e8 c6 e2 ff ff       	call   c0004c16 <st_clust.isra.1>
c0006950:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006954:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006958:	8d 44 24 58          	lea    eax,[esp+0x58]
c000695c:	e8 f4 d0 ff ff       	call   c0003a55 <dir_remove>
c0006961:	85 c0                	test   eax,eax
c0006963:	75 09                	jne    c000696e <f_rename+0x2d4>
c0006965:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006969:	e8 0d da ff ff       	call   c000437b <sync_fs>
c000696e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006972:	83 ec 0c             	sub    esp,0xc
c0006975:	53                   	push   ebx
c0006976:	e8 40 19 00 00       	call   c00082bb <ff_memfree>
c000697b:	83 c4 10             	add    esp,0x10
c000697e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006982:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006988:	5b                   	pop    ebx
c0006989:	5e                   	pop    esi
c000698a:	5f                   	pop    edi
c000698b:	5d                   	pop    ebp
c000698c:	c3                   	ret    

c000698d <f_chmod>:
c000698d:	57                   	push   edi
c000698e:	b9 02 00 00 00       	mov    ecx,0x2
c0006993:	56                   	push   esi
c0006994:	53                   	push   ebx
c0006995:	83 ec 60             	sub    esp,0x60
c0006998:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000699c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00069a0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069a4:	8d 44 24 70          	lea    eax,[esp+0x70]
c00069a8:	e8 55 bb ff ff       	call   c0002502 <mount_volume>
c00069ad:	85 c0                	test   eax,eax
c00069af:	0f 85 af 00 00 00    	jne    c0006a64 <f_chmod+0xd7>
c00069b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b9:	83 ec 0c             	sub    esp,0xc
c00069bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069c0:	68 60 04 00 00       	push   0x460
c00069c5:	e8 db 18 00 00       	call   c00082a5 <ff_memalloc>
c00069ca:	83 c4 10             	add    esp,0x10
c00069cd:	89 c6                	mov    esi,eax
c00069cf:	b8 11 00 00 00       	mov    eax,0x11
c00069d4:	85 f6                	test   esi,esi
c00069d6:	0f 84 88 00 00 00    	je     c0006a64 <f_chmod+0xd7>
c00069dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069e6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069e9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069ec:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f4:	e8 7f e2 ff ff       	call   c0004c78 <follow_path>
c00069f9:	85 c0                	test   eax,eax
c00069fb:	75 53                	jne    c0006a50 <f_chmod+0xc3>
c00069fd:	b8 06 00 00 00       	mov    eax,0x6
c0006a02:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a07:	75 47                	jne    c0006a50 <f_chmod+0xc3>
c0006a09:	89 f9                	mov    ecx,edi
c0006a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a0f:	83 e1 27             	and    ecx,0x27
c0006a12:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a15:	75 1d                	jne    c0006a34 <f_chmod+0xa7>
c0006a17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a1a:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a1d:	21 cb                	and    ebx,ecx
c0006a1f:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a22:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006a25:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a29:	e8 a2 cf ff ff       	call   c00039d0 <store_xdir>
c0006a2e:	85 c0                	test   eax,eax
c0006a30:	75 1e                	jne    c0006a50 <f_chmod+0xc3>
c0006a32:	eb 13                	jmp    c0006a47 <f_chmod+0xba>
c0006a34:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a38:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a3b:	21 cb                	and    ebx,ecx
c0006a3d:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a40:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4b:	e8 2b d9 ff ff       	call   c000437b <sync_fs>
c0006a50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a54:	83 ec 0c             	sub    esp,0xc
c0006a57:	56                   	push   esi
c0006a58:	e8 5e 18 00 00       	call   c00082bb <ff_memfree>
c0006a5d:	83 c4 10             	add    esp,0x10
c0006a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a64:	83 c4 60             	add    esp,0x60
c0006a67:	5b                   	pop    ebx
c0006a68:	5e                   	pop    esi
c0006a69:	5f                   	pop    edi
c0006a6a:	c3                   	ret    

c0006a6b <f_utime>:
c0006a6b:	56                   	push   esi
c0006a6c:	b9 02 00 00 00       	mov    ecx,0x2
c0006a71:	53                   	push   ebx
c0006a72:	83 ec 64             	sub    esp,0x64
c0006a75:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a79:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a7d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a81:	e8 7c ba ff ff       	call   c0002502 <mount_volume>
c0006a86:	85 c0                	test   eax,eax
c0006a88:	0f 85 b5 00 00 00    	jne    c0006b43 <f_utime+0xd8>
c0006a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a92:	83 ec 0c             	sub    esp,0xc
c0006a95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a99:	68 60 04 00 00       	push   0x460
c0006a9e:	e8 02 18 00 00       	call   c00082a5 <ff_memalloc>
c0006aa3:	83 c4 10             	add    esp,0x10
c0006aa6:	89 c3                	mov    ebx,eax
c0006aa8:	b8 11 00 00 00       	mov    eax,0x11
c0006aad:	85 db                	test   ebx,ebx
c0006aaf:	0f 84 8e 00 00 00    	je     c0006b43 <f_utime+0xd8>
c0006ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006abf:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ac2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ac5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ac9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006acd:	e8 a6 e1 ff ff       	call   c0004c78 <follow_path>
c0006ad2:	85 c0                	test   eax,eax
c0006ad4:	75 59                	jne    c0006b2f <f_utime+0xc4>
c0006ad6:	b8 06 00 00 00       	mov    eax,0x6
c0006adb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae0:	75 4d                	jne    c0006b2f <f_utime+0xc4>
c0006ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ae6:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006aea:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006aee:	c1 e2 10             	shl    edx,0x10
c0006af1:	09 ca                	or     edx,ecx
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1a                	jne    c0006b12 <f_utime+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	83 c0 0c             	add    eax,0xc
c0006afe:	e8 e5 af ff ff       	call   c0001ae8 <st_dword>
c0006b03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b07:	e8 c4 ce ff ff       	call   c00039d0 <store_xdir>
c0006b0c:	85 c0                	test   eax,eax
c0006b0e:	75 1f                	jne    c0006b2f <f_utime+0xc4>
c0006b10:	eb 14                	jmp    c0006b26 <f_utime+0xbb>
c0006b12:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b16:	83 c0 16             	add    eax,0x16
c0006b19:	e8 ca af ff ff       	call   c0001ae8 <st_dword>
c0006b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b22:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2a:	e8 4c d8 ff ff       	call   c000437b <sync_fs>
c0006b2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b33:	83 ec 0c             	sub    esp,0xc
c0006b36:	53                   	push   ebx
c0006b37:	e8 7f 17 00 00       	call   c00082bb <ff_memfree>
c0006b3c:	83 c4 10             	add    esp,0x10
c0006b3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b43:	83 c4 64             	add    esp,0x64
c0006b46:	5b                   	pop    ebx
c0006b47:	5e                   	pop    esi
c0006b48:	c3                   	ret    

c0006b49 <f_getlabel>:
c0006b49:	55                   	push   ebp
c0006b4a:	31 c9                	xor    ecx,ecx
c0006b4c:	57                   	push   edi
c0006b4d:	56                   	push   esi
c0006b4e:	53                   	push   ebx
c0006b4f:	83 ec 6c             	sub    esp,0x6c
c0006b52:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b56:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b5d:	e8 a0 b9 ff ff       	call   c0002502 <mount_volume>
c0006b62:	89 c6                	mov    esi,eax
c0006b64:	85 c0                	test   eax,eax
c0006b66:	0f 85 c1 01 00 00    	jne    c0006d2d <f_getlabel+0x1e4>
c0006b6c:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b74:	0f 84 5f 01 00 00    	je     c0006cd9 <f_getlabel+0x190>
c0006b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7e:	31 d2                	xor    edx,edx
c0006b80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b84:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b8c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b90:	e8 39 c4 ff ff       	call   c0002fce <dir_sdi>
c0006b95:	85 c0                	test   eax,eax
c0006b97:	0f 85 2d 01 00 00    	jne    c0006cca <f_getlabel+0x181>
c0006b9d:	ba 01 00 00 00       	mov    edx,0x1
c0006ba2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba6:	e8 33 cc ff ff       	call   c00037de <dir_read>
c0006bab:	85 c0                	test   eax,eax
c0006bad:	0f 85 17 01 00 00    	jne    c0006cca <f_getlabel+0x181>
c0006bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bba:	74 09                	je     c0006bc5 <f_getlabel+0x7c>
c0006bbc:	31 db                	xor    ebx,ebx
c0006bbe:	31 c9                	xor    ecx,ecx
c0006bc0:	e9 c8 00 00 00       	jmp    c0006c8d <f_getlabel+0x144>
c0006bc5:	31 ed                	xor    ebp,ebp
c0006bc7:	31 db                	xor    ebx,ebx
c0006bc9:	31 ff                	xor    edi,edi
c0006bcb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bcf:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bd3:	39 fa                	cmp    edx,edi
c0006bd5:	76 4b                	jbe    c0006c22 <f_getlabel+0xd9>
c0006bd7:	47                   	inc    edi
c0006bd8:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bdb:	01 d0                	add    eax,edx
c0006bdd:	e8 90 ae ff ff       	call   c0001a72 <ld_word>
c0006be2:	66 85 ed             	test   bp,bp
c0006be5:	75 0d                	jne    c0006bf4 <f_getlabel+0xab>
c0006be7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bed:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bf2:	76 28                	jbe    c0006c1c <f_getlabel+0xd3>
c0006bf4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bfb:	89 e9                	mov    ecx,ebp
c0006bfd:	01 da                	add    edx,ebx
c0006bff:	c1 e1 10             	shl    ecx,0x10
c0006c02:	0f b7 c0             	movzx  eax,ax
c0006c05:	09 c8                	or     eax,ecx
c0006c07:	b9 04 00 00 00       	mov    ecx,0x4
c0006c0c:	e8 01 b0 ff ff       	call   c0001c12 <put_utf>
c0006c11:	84 c0                	test   al,al
c0006c13:	74 0b                	je     c0006c20 <f_getlabel+0xd7>
c0006c15:	0f b6 c0             	movzx  eax,al
c0006c18:	01 c3                	add    ebx,eax
c0006c1a:	31 c0                	xor    eax,eax
c0006c1c:	89 c5                	mov    ebp,eax
c0006c1e:	eb ab                	jmp    c0006bcb <f_getlabel+0x82>
c0006c20:	31 db                	xor    ebx,ebx
c0006c22:	66 85 ed             	test   bp,bp
c0006c25:	74 02                	je     c0006c29 <f_getlabel+0xe0>
c0006c27:	31 db                	xor    ebx,ebx
c0006c29:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c30:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c34:	e9 a0 00 00 00       	jmp    c0006cd9 <f_getlabel+0x190>
c0006c39:	83 ff 0b             	cmp    edi,0xb
c0006c3c:	74 11                	je     c0006c4f <f_getlabel+0x106>
c0006c3e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c47:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c4a:	c1 e0 08             	shl    eax,0x8
c0006c4d:	09 c2                	or     edx,eax
c0006c4f:	0f b7 d2             	movzx  edx,dx
c0006c52:	50                   	push   eax
c0006c53:	50                   	push   eax
c0006c54:	68 b5 01 00 00       	push   0x1b5
c0006c59:	52                   	push   edx
c0006c5a:	e8 03 17 00 00       	call   c0008362 <ff_oem2uni>
c0006c5f:	83 c4 10             	add    esp,0x10
c0006c62:	66 85 c0             	test   ax,ax
c0006c65:	74 46                	je     c0006cad <f_getlabel+0x164>
c0006c67:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c6e:	0f b7 c0             	movzx  eax,ax
c0006c71:	01 da                	add    edx,ebx
c0006c73:	b9 04 00 00 00       	mov    ecx,0x4
c0006c78:	e8 95 af ff ff       	call   c0001c12 <put_utf>
c0006c7d:	84 c0                	test   al,al
c0006c7f:	74 2c                	je     c0006cad <f_getlabel+0x164>
c0006c81:	0f b6 c0             	movzx  eax,al
c0006c84:	01 c3                	add    ebx,eax
c0006c86:	83 ff 0b             	cmp    edi,0xb
c0006c89:	74 24                	je     c0006caf <f_getlabel+0x166>
c0006c8b:	89 f9                	mov    ecx,edi
c0006c8d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c91:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c94:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c99:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ca2:	e8 9f ae ff ff       	call   c0001b46 <dbc_1st>
c0006ca7:	85 c0                	test   eax,eax
c0006ca9:	74 a4                	je     c0006c4f <f_getlabel+0x106>
c0006cab:	eb 8c                	jmp    c0006c39 <f_getlabel+0xf0>
c0006cad:	31 db                	xor    ebx,ebx
c0006caf:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006cb6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006cb9:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006cc0:	74 17                	je     c0006cd9 <f_getlabel+0x190>
c0006cc2:	4b                   	dec    ebx
c0006cc3:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006cc6:	74 ee                	je     c0006cb6 <f_getlabel+0x16d>
c0006cc8:	eb 0f                	jmp    c0006cd9 <f_getlabel+0x190>
c0006cca:	83 f8 04             	cmp    eax,0x4
c0006ccd:	75 5c                	jne    c0006d2b <f_getlabel+0x1e2>
c0006ccf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cd6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cd9:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ce1:	74 4a                	je     c0006d2d <f_getlabel+0x1e4>
c0006ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ce7:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cea:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ced:	e8 5e b5 ff ff       	call   c0002250 <move_window>
c0006cf2:	89 c6                	mov    esi,eax
c0006cf4:	85 c0                	test   eax,eax
c0006cf6:	75 35                	jne    c0006d2d <f_getlabel+0x1e4>
c0006cf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cfc:	b8 43 00 00 00       	mov    eax,0x43
c0006d01:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006d03:	80 f9 03             	cmp    cl,0x3
c0006d06:	74 0f                	je     c0006d17 <f_getlabel+0x1ce>
c0006d08:	31 c0                	xor    eax,eax
c0006d0a:	80 f9 04             	cmp    cl,0x4
c0006d0d:	0f 94 c0             	sete   al
c0006d10:	48                   	dec    eax
c0006d11:	83 e0 c3             	and    eax,0xffffffc3
c0006d14:	83 c0 64             	add    eax,0x64
c0006d17:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006d1b:	e8 5f ad ff ff       	call   c0001a7f <ld_dword>
c0006d20:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d27:	89 07                	mov    DWORD PTR [edi],eax
c0006d29:	eb 02                	jmp    c0006d2d <f_getlabel+0x1e4>
c0006d2b:	89 c6                	mov    esi,eax
c0006d2d:	83 c4 6c             	add    esp,0x6c
c0006d30:	89 f0                	mov    eax,esi
c0006d32:	5b                   	pop    ebx
c0006d33:	5e                   	pop    esi
c0006d34:	5f                   	pop    edi
c0006d35:	5d                   	pop    ebp
c0006d36:	c3                   	ret    

c0006d37 <f_setlabel>:
c0006d37:	56                   	push   esi
c0006d38:	b9 02 00 00 00       	mov    ecx,0x2
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 74             	sub    esp,0x74
c0006d41:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 b1 b7 ff ff       	call   c0002502 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 41 02 00 00    	jne    c0006f9c <f_setlabel+0x265>
c0006d5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d62:	0f 85 8e 00 00 00    	jne    c0006df6 <f_setlabel+0xbf>
c0006d68:	b9 16 00 00 00       	mov    ecx,0x16
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d73:	31 db                	xor    ebx,ebx
c0006d75:	e8 8c ad ff ff       	call   c0001b06 <mem_set>
c0006d7a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d81:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d84:	0f 86 0a 01 00 00    	jbe    c0006e94 <f_setlabel+0x15d>
c0006d8a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d91:	e8 b6 ad ff ff       	call   c0001b4c <tchar2uni>
c0006d96:	89 c6                	mov    esi,eax
c0006d98:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d9d:	76 2a                	jbe    c0006dc9 <f_setlabel+0x92>
c0006d9f:	83 f8 ff             	cmp    eax,0xffffffff
c0006da2:	74 05                	je     c0006da9 <f_setlabel+0x72>
c0006da4:	83 fb 09             	cmp    ebx,0x9
c0006da7:	76 0a                	jbe    c0006db3 <f_setlabel+0x7c>
c0006da9:	be 06 00 00 00       	mov    esi,0x6
c0006dae:	e9 e9 01 00 00       	jmp    c0006f9c <f_setlabel+0x265>
c0006db3:	89 c2                	mov    edx,eax
c0006db5:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006db9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbc:	c1 ea 10             	shr    edx,0x10
c0006dbf:	01 c8                	add    eax,ecx
c0006dc1:	43                   	inc    ebx
c0006dc2:	e8 1d ad ff ff       	call   c0001ae4 <st_word>
c0006dc7:	eb 04                	jmp    c0006dcd <f_setlabel+0x96>
c0006dc9:	85 c0                	test   eax,eax
c0006dcb:	74 dc                	je     c0006da9 <f_setlabel+0x72>
c0006dcd:	89 f2                	mov    edx,esi
c0006dcf:	b8 37 5d 02 c0       	mov    eax,0xc0025d37
c0006dd4:	e8 5b ad ff ff       	call   c0001b34 <chk_chr>
c0006dd9:	85 c0                	test   eax,eax
c0006ddb:	75 cc                	jne    c0006da9 <f_setlabel+0x72>
c0006ddd:	83 fb 0a             	cmp    ebx,0xa
c0006de0:	77 c7                	ja     c0006da9 <f_setlabel+0x72>
c0006de2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006de5:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006de9:	0f b7 d6             	movzx  edx,si
c0006dec:	01 c8                	add    eax,ecx
c0006dee:	43                   	inc    ebx
c0006def:	e8 f0 ac ff ff       	call   c0001ae4 <st_word>
c0006df4:	eb 84                	jmp    c0006d7a <f_setlabel+0x43>
c0006df6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfb:	ba 20 00 00 00       	mov    edx,0x20
c0006e00:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e04:	31 db                	xor    ebx,ebx
c0006e06:	e8 fb ac ff ff       	call   c0001b06 <mem_set>
c0006e0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e15:	76 60                	jbe    c0006e77 <f_setlabel+0x140>
c0006e17:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e1e:	e8 29 ad ff ff       	call   c0001b4c <tchar2uni>
c0006e23:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e28:	0f 87 7b ff ff ff    	ja     c0006da9 <f_setlabel+0x72>
c0006e2e:	83 ec 0c             	sub    esp,0xc
c0006e31:	50                   	push   eax
c0006e32:	e8 97 15 00 00       	call   c00083ce <ff_wtoupper>
c0006e37:	5a                   	pop    edx
c0006e38:	59                   	pop    ecx
c0006e39:	68 b5 01 00 00       	push   0x1b5
c0006e3e:	50                   	push   eax
c0006e3f:	e8 8e 14 00 00       	call   c00082d2 <ff_uni2oem>
c0006e44:	83 c4 10             	add    esp,0x10
c0006e47:	89 c6                	mov    esi,eax
c0006e49:	66 85 c0             	test   ax,ax
c0006e4c:	0f 84 57 ff ff ff    	je     c0006da9 <f_setlabel+0x72>
c0006e52:	0f b7 d0             	movzx  edx,ax
c0006e55:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c0006e5a:	e8 d5 ac ff ff       	call   c0001b34 <chk_chr>
c0006e5f:	85 c0                	test   eax,eax
c0006e61:	0f 85 42 ff ff ff    	jne    c0006da9 <f_setlabel+0x72>
c0006e67:	66 81 fe ff 00       	cmp    si,0xff
c0006e6c:	0f 87 14 01 00 00    	ja     c0006f86 <f_setlabel+0x24f>
c0006e72:	e9 fa 00 00 00       	jmp    c0006f71 <f_setlabel+0x23a>
c0006e77:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e7c:	0f 84 27 ff ff ff    	je     c0006da9 <f_setlabel+0x72>
c0006e82:	85 db                	test   ebx,ebx
c0006e84:	74 0e                	je     c0006e94 <f_setlabel+0x15d>
c0006e86:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e89:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e8e:	75 04                	jne    c0006e94 <f_setlabel+0x15d>
c0006e90:	89 c3                	mov    ebx,eax
c0006e92:	eb ee                	jmp    c0006e82 <f_setlabel+0x14b>
c0006e94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e98:	31 d2                	xor    edx,edx
c0006e9a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e9e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006ea6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eaa:	e8 1f c1 ff ff       	call   c0002fce <dir_sdi>
c0006eaf:	89 c6                	mov    esi,eax
c0006eb1:	85 c0                	test   eax,eax
c0006eb3:	0f 85 e3 00 00 00    	jne    c0006f9c <f_setlabel+0x265>
c0006eb9:	ba 01 00 00 00       	mov    edx,0x1
c0006ebe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ec2:	e8 17 c9 ff ff       	call   c00037de <dir_read>
c0006ec7:	85 c0                	test   eax,eax
c0006ec9:	75 21                	jne    c0006eec <f_setlabel+0x1b5>
c0006ecb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ecf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed3:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ed6:	74 5d                	je     c0006f35 <f_setlabel+0x1fe>
c0006ed8:	85 db                	test   ebx,ebx
c0006eda:	74 0b                	je     c0006ee7 <f_setlabel+0x1b0>
c0006edc:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee1:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee5:	eb 70                	jmp    c0006f57 <f_setlabel+0x220>
c0006ee7:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006eea:	eb 70                	jmp    c0006f5c <f_setlabel+0x225>
c0006eec:	83 f8 04             	cmp    eax,0x4
c0006eef:	75 7c                	jne    c0006f6d <f_setlabel+0x236>
c0006ef1:	85 db                	test   ebx,ebx
c0006ef3:	0f 84 a3 00 00 00    	je     c0006f9c <f_setlabel+0x265>
c0006ef9:	ba 01 00 00 00       	mov    edx,0x1
c0006efe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f02:	e8 51 ca ff ff       	call   c0003958 <dir_alloc>
c0006f07:	89 c6                	mov    esi,eax
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	0f 85 8b 00 00 00    	jne    c0006f9c <f_setlabel+0x265>
c0006f11:	31 d2                	xor    edx,edx
c0006f13:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f17:	b9 20 00 00 00       	mov    ecx,0x20
c0006f1c:	e8 e5 ab ff ff       	call   c0001b06 <mem_set>
c0006f21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f25:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f28:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2c:	75 18                	jne    c0006f46 <f_setlabel+0x20f>
c0006f2e:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f31:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f35:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f38:	b9 16 00 00 00       	mov    ecx,0x16
c0006f3d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f41:	83 c0 02             	add    eax,0x2
c0006f44:	eb 9b                	jmp    c0006ee1 <f_setlabel+0x1aa>
c0006f46:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f4a:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f4f:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f53:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f57:	e8 95 ab ff ff       	call   c0001af1 <mem_cpy>
c0006f5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f60:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f68:	e8 0e d4 ff ff       	call   c000437b <sync_fs>
c0006f6d:	89 c6                	mov    esi,eax
c0006f6f:	eb 2b                	jmp    c0006f9c <f_setlabel+0x265>
c0006f71:	83 fb 0a             	cmp    ebx,0xa
c0006f74:	0f 87 2f fe ff ff    	ja     c0006da9 <f_setlabel+0x72>
c0006f7a:	89 f0                	mov    eax,esi
c0006f7c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f80:	43                   	inc    ebx
c0006f81:	e9 85 fe ff ff       	jmp    c0006e0b <f_setlabel+0xd4>
c0006f86:	83 fb 09             	cmp    ebx,0x9
c0006f89:	0f 87 1a fe ff ff    	ja     c0006da9 <f_setlabel+0x72>
c0006f8f:	89 f0                	mov    eax,esi
c0006f91:	66 c1 e8 08          	shr    ax,0x8
c0006f95:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f99:	43                   	inc    ebx
c0006f9a:	eb de                	jmp    c0006f7a <f_setlabel+0x243>
c0006f9c:	89 f0                	mov    eax,esi
c0006f9e:	83 c4 74             	add    esp,0x74
c0006fa1:	5b                   	pop    ebx
c0006fa2:	5e                   	pop    esi
c0006fa3:	c3                   	ret    

c0006fa4 <f_forward>:
c0006fa4:	55                   	push   ebp
c0006fa5:	57                   	push   edi
c0006fa6:	56                   	push   esi
c0006fa7:	53                   	push   ebx
c0006fa8:	83 ec 2c             	sub    esp,0x2c
c0006fab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006faf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006fb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006fb9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006fbd:	89 d8                	mov    eax,ebx
c0006fbf:	e8 b1 b1 ff ff       	call   c0002175 <validate>
c0006fc4:	89 c5                	mov    ebp,eax
c0006fc6:	85 c0                	test   eax,eax
c0006fc8:	0f 85 aa 01 00 00    	jne    c0007178 <f_forward+0x1d4>
c0006fce:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fd2:	85 ed                	test   ebp,ebp
c0006fd4:	0f 85 9e 01 00 00    	jne    c0007178 <f_forward+0x1d4>
c0006fda:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fde:	0f 84 8f 01 00 00    	je     c0007173 <f_forward+0x1cf>
c0006fe4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fe7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fea:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fed:	bf 00 00 00 00       	mov    edi,0x0
c0006ff2:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006ff5:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006ff9:	89 d1                	mov    ecx,edx
c0006ffb:	19 f9                	sbb    ecx,edi
c0006ffd:	0f 83 cf 00 00 00    	jae    c00070d2 <f_forward+0x12e>
c0007003:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007007:	e9 c6 00 00 00       	jmp    c00070d2 <f_forward+0x12e>
c000700c:	50                   	push   eax
c000700d:	50                   	push   eax
c000700e:	6a 00                	push   0x0
c0007010:	6a 00                	push   0x0
c0007012:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007016:	83 c4 10             	add    esp,0x10
c0007019:	85 c0                	test   eax,eax
c000701b:	0f 84 57 01 00 00    	je     c0007178 <f_forward+0x1d4>
c0007021:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007024:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007028:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000702b:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000702f:	89 d7                	mov    edi,edx
c0007031:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007034:	89 c6                	mov    esi,eax
c0007036:	0f ac fe 09          	shrd   esi,edi,0x9
c000703a:	21 ce                	and    esi,ecx
c000703c:	89 c1                	mov    ecx,eax
c000703e:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007044:	0f 84 98 00 00 00    	je     c00070e2 <f_forward+0x13e>
c000704a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000704e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007051:	89 c8                	mov    eax,ecx
c0007053:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007057:	e8 af ac ff ff       	call   c0001d0b <clst2sect>
c000705c:	89 d7                	mov    edi,edx
c000705e:	09 c7                	or     edi,eax
c0007060:	0f 84 9e 00 00 00    	je     c0007104 <f_forward+0x160>
c0007066:	31 ff                	xor    edi,edi
c0007068:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000706b:	01 c6                	add    esi,eax
c000706d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007071:	11 d7                	adc    edi,edx
c0007073:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007076:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007079:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707d:	39 fa                	cmp    edx,edi
c000707f:	0f 85 a2 00 00 00    	jne    c0007127 <f_forward+0x183>
c0007085:	39 f0                	cmp    eax,esi
c0007087:	0f 85 9a 00 00 00    	jne    c0007127 <f_forward+0x183>
c000708d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007090:	ba 00 02 00 00       	mov    edx,0x200
c0007095:	25 ff 01 00 00       	and    eax,0x1ff
c000709a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000709e:	29 c2                	sub    edx,eax
c00070a0:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00070a3:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00070a6:	39 d1                	cmp    ecx,edx
c00070a8:	76 02                	jbe    c00070ac <f_forward+0x108>
c00070aa:	89 d1                	mov    ecx,edx
c00070ac:	8d 73 50             	lea    esi,[ebx+0x50]
c00070af:	52                   	push   edx
c00070b0:	01 c6                	add    esi,eax
c00070b2:	52                   	push   edx
c00070b3:	51                   	push   ecx
c00070b4:	56                   	push   esi
c00070b5:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00070b9:	83 c4 10             	add    esp,0x10
c00070bc:	85 c0                	test   eax,eax
c00070be:	74 44                	je     c0007104 <f_forward+0x160>
c00070c0:	31 ff                	xor    edi,edi
c00070c2:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00070c5:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070c8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070cc:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070d0:	01 07                	add    DWORD PTR [edi],eax
c00070d2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070d7:	0f 85 2f ff ff ff    	jne    c000700c <f_forward+0x68>
c00070dd:	e9 96 00 00 00       	jmp    c0007178 <f_forward+0x1d4>
c00070e2:	85 f6                	test   esi,esi
c00070e4:	0f 85 60 ff ff ff    	jne    c000704a <f_forward+0xa6>
c00070ea:	89 d7                	mov    edi,edx
c00070ec:	09 c7                	or     edi,eax
c00070ee:	75 05                	jne    c00070f5 <f_forward+0x151>
c00070f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070f3:	eb 0a                	jmp    c00070ff <f_forward+0x15b>
c00070f5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070f8:	89 d8                	mov    eax,ebx
c00070fa:	e8 d9 bc ff ff       	call   c0002dd8 <get_fat>
c00070ff:	83 f8 01             	cmp    eax,0x1
c0007102:	77 0b                	ja     c000710f <f_forward+0x16b>
c0007104:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007108:	bd 02 00 00 00       	mov    ebp,0x2
c000710d:	eb 69                	jmp    c0007178 <f_forward+0x1d4>
c000710f:	83 f8 ff             	cmp    eax,0xffffffff
c0007112:	75 0b                	jne    c000711f <f_forward+0x17b>
c0007114:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007118:	bd 01 00 00 00       	mov    ebp,0x1
c000711d:	eb 59                	jmp    c0007178 <f_forward+0x1d4>
c000711f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007122:	e9 23 ff ff ff       	jmp    c000704a <f_forward+0xa6>
c0007127:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000712b:	79 20                	jns    c000714d <f_forward+0x1a9>
c000712d:	83 ec 0c             	sub    esp,0xc
c0007130:	6a 01                	push   0x1
c0007132:	52                   	push   edx
c0007133:	50                   	push   eax
c0007134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007138:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000713c:	50                   	push   eax
c000713d:	e8 fb a8 ff ff       	call   c0001a3d <disk_write>
c0007142:	83 c4 20             	add    esp,0x20
c0007145:	85 c0                	test   eax,eax
c0007147:	75 cb                	jne    c0007114 <f_forward+0x170>
c0007149:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000714d:	83 ec 0c             	sub    esp,0xc
c0007150:	6a 01                	push   0x1
c0007152:	57                   	push   edi
c0007153:	56                   	push   esi
c0007154:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007158:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007160:	50                   	push   eax
c0007161:	e8 c1 a8 ff ff       	call   c0001a27 <disk_read>
c0007166:	83 c4 20             	add    esp,0x20
c0007169:	85 c0                	test   eax,eax
c000716b:	0f 84 1c ff ff ff    	je     c000708d <f_forward+0xe9>
c0007171:	eb a1                	jmp    c0007114 <f_forward+0x170>
c0007173:	bd 07 00 00 00       	mov    ebp,0x7
c0007178:	83 c4 2c             	add    esp,0x2c
c000717b:	89 e8                	mov    eax,ebp
c000717d:	5b                   	pop    ebx
c000717e:	5e                   	pop    esi
c000717f:	5f                   	pop    edi
c0007180:	5d                   	pop    ebp
c0007181:	c3                   	ret    

c0007182 <f_mkfs>:
c0007182:	55                   	push   ebp
c0007183:	57                   	push   edi
c0007184:	56                   	push   esi
c0007185:	53                   	push   ebx
c0007186:	bb 0b 00 00 00       	mov    ebx,0xb
c000718b:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007191:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007198:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000719f:	e8 b0 ae ff ff       	call   c0002054 <get_ldnumber>
c00071a4:	85 c0                	test   eax,eax
c00071a6:	0f 88 ec 10 00 00    	js     c0008298 <f_mkfs+0x1116>
c00071ac:	8b 14 85 a0 a3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5c60]
c00071b3:	85 d2                	test   edx,edx
c00071b5:	74 03                	je     c00071ba <f_mkfs+0x38>
c00071b7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00071ba:	85 f6                	test   esi,esi
c00071bc:	75 05                	jne    c00071c3 <f_mkfs+0x41>
c00071be:	be 20 5d 02 c0       	mov    esi,0xc0025d20
c00071c3:	83 ec 0c             	sub    esp,0xc
c00071c6:	0f b6 c0             	movzx  eax,al
c00071c9:	bb 03 00 00 00       	mov    ebx,0x3
c00071ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	e8 49 a8 ff ff       	call   c0001a24 <disk_initialize>
c00071db:	83 c4 10             	add    esp,0x10
c00071de:	a8 01                	test   al,0x1
c00071e0:	0f 85 b2 10 00 00    	jne    c0008298 <f_mkfs+0x1116>
c00071e6:	bb 0a 00 00 00       	mov    ebx,0xa
c00071eb:	a8 04                	test   al,0x4
c00071ed:	0f 85 a5 10 00 00    	jne    c0008298 <f_mkfs+0x1116>
c00071f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071f6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071fa:	85 c0                	test   eax,eax
c00071fc:	75 20                	jne    c000721e <f_mkfs+0x9c>
c00071fe:	51                   	push   ecx
c00071ff:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007203:	50                   	push   eax
c0007204:	6a 03                	push   0x3
c0007206:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000720a:	e8 44 a8 ff ff       	call   c0001a53 <disk_ioctl>
c000720f:	83 c4 10             	add    esp,0x10
c0007212:	85 c0                	test   eax,eax
c0007214:	74 08                	je     c000721e <f_mkfs+0x9c>
c0007216:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000721e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007222:	8d 42 ff             	lea    eax,[edx-0x1]
c0007225:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722a:	77 04                	ja     c0007230 <f_mkfs+0xae>
c000722c:	85 c2                	test   edx,eax
c000722e:	74 08                	je     c0007238 <f_mkfs+0xb6>
c0007230:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007238:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000723b:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000723f:	48                   	dec    eax
c0007240:	3c 01                	cmp    al,0x1
c0007242:	76 05                	jbe    c0007249 <f_mkfs+0xc7>
c0007244:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007249:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000724c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007250:	48                   	dec    eax
c0007251:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007256:	77 07                	ja     c000725f <f_mkfs+0xdd>
c0007258:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000725d:	74 08                	je     c0007267 <f_mkfs+0xe5>
c000725f:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007267:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000726a:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007270:	77 07                	ja     c0007279 <f_mkfs+0xf7>
c0007272:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007275:	85 d8                	test   eax,ebx
c0007277:	74 02                	je     c000727b <f_mkfs+0xf9>
c0007279:	31 db                	xor    ebx,ebx
c000727b:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007286:	77 0a                	ja     c0007292 <f_mkfs+0x110>
c0007288:	bb 11 00 00 00       	mov    ebx,0x11
c000728d:	e9 06 10 00 00       	jmp    c0008298 <f_mkfs+0x1116>
c0007292:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007299:	8b 36                	mov    esi,DWORD PTR [esi]
c000729b:	85 ed                	test   ebp,ebp
c000729d:	75 1e                	jne    c00072bd <f_mkfs+0x13b>
c000729f:	83 ec 0c             	sub    esp,0xc
c00072a2:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00072a9:	25 00 fe ff ff       	and    eax,0xfffffe00
c00072ae:	50                   	push   eax
c00072af:	e8 f1 0f 00 00       	call   c00082a5 <ff_memalloc>
c00072b4:	83 c4 10             	add    esp,0x10
c00072b7:	89 c5                	mov    ebp,eax
c00072b9:	85 c0                	test   eax,eax
c00072bb:	74 cb                	je     c0007288 <f_mkfs+0x106>
c00072bd:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00072c5:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072cd:	52                   	push   edx
c00072ce:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072d2:	50                   	push   eax
c00072d3:	6a 01                	push   0x1
c00072d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072d9:	e8 75 a7 ff ff       	call   c0001a53 <disk_ioctl>
c00072de:	83 c4 10             	add    esp,0x10
c00072e1:	85 c0                	test   eax,eax
c00072e3:	0f 85 4a 0f 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c00072e9:	89 f1                	mov    ecx,esi
c00072eb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072f3:	83 e1 0f             	and    ecx,0xf
c00072f6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fe:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007302:	83 e6 08             	and    esi,0x8
c0007305:	75 56                	jne    c000735d <f_mkfs+0x1db>
c0007307:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000730b:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000730f:	83 ff 00             	cmp    edi,0x0
c0007312:	76 20                	jbe    c0007334 <f_mkfs+0x1b2>
c0007314:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007319:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007321:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007327:	83 d7 ff             	adc    edi,0xffffffff
c000732a:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000732e:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007332:	eb 21                	jmp    c0007355 <f_mkfs+0x1d3>
c0007334:	ba 3f 00 00 00       	mov    edx,0x3f
c0007339:	39 f2                	cmp    edx,esi
c000733b:	19 f8                	sbb    eax,edi
c000733d:	73 1e                	jae    c000735d <f_mkfs+0x1db>
c000733f:	83 c6 c1             	add    esi,0xffffffc1
c0007342:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000734a:	83 d7 ff             	adc    edi,0xffffffff
c000734d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007351:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007355:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000735d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007361:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007365:	89 04 24             	mov    DWORD PTR [esp],eax
c0007368:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000736c:	31 c0                	xor    eax,eax
c000736e:	ba 7f 00 00 00       	mov    edx,0x7f
c0007373:	89 c7                	mov    edi,eax
c0007375:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007378:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000737c:	0f 83 c5 0a 00 00    	jae    c0007e47 <f_mkfs+0xcc5>
c0007382:	89 df                	mov    edi,ebx
c0007384:	c1 ef 09             	shr    edi,0x9
c0007387:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000738b:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007392:	c1 ef 09             	shr    edi,0x9
c0007395:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000739a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000739e:	74 29                	je     c00073c9 <f_mkfs+0x247>
c00073a0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073a6:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00073ab:	0f 97 c2             	seta   dl
c00073ae:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00073b1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073b5:	0f 92 c0             	setb   al
c00073b8:	08 c2                	or     dl,al
c00073ba:	75 5b                	jne    c0007417 <f_mkfs+0x295>
c00073bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c0:	83 e0 07             	and    eax,0x7
c00073c3:	3c 04                	cmp    al,0x4
c00073c5:	74 50                	je     c0007417 <f_mkfs+0x295>
c00073c7:	eb 1b                	jmp    c00073e4 <f_mkfs+0x262>
c00073c9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073ce:	0f 87 73 0a 00 00    	ja     c0007e47 <f_mkfs+0xcc5>
c00073d4:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073da:	76 08                	jbe    c00073e4 <f_mkfs+0x262>
c00073dc:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073e4:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073e8:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073ec:	83 e0 01             	and    eax,0x1
c00073ef:	80 e1 02             	and    cl,0x2
c00073f2:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073f6:	74 0d                	je     c0007405 <f_mkfs+0x283>
c00073f8:	84 c0                	test   al,al
c00073fa:	0f 84 53 09 00 00    	je     c0007d53 <f_mkfs+0xbd1>
c0007400:	e9 12 08 00 00       	jmp    c0007c17 <f_mkfs+0xa95>
c0007405:	bb 13 00 00 00       	mov    ebx,0x13
c000740a:	84 c0                	test   al,al
c000740c:	0f 85 05 08 00 00    	jne    c0007c17 <f_mkfs+0xa95>
c0007412:	e9 39 0e 00 00       	jmp    c0008250 <f_mkfs+0x10ce>
c0007417:	31 c0                	xor    eax,eax
c0007419:	ba ff 0f 00 00       	mov    edx,0xfff
c000741e:	89 c7                	mov    edi,eax
c0007420:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007423:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007427:	0f 83 1a 0a 00 00    	jae    c0007e47 <f_mkfs+0xcc5>
c000742d:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007433:	77 39                	ja     c000746e <f_mkfs+0x2ec>
c0007435:	ba ff ff 07 00       	mov    edx,0x7ffff
c000743a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007442:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007445:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007449:	73 08                	jae    c0007453 <f_mkfs+0x2d1>
c000744b:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007453:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007458:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000745b:	b8 00 00 00 00       	mov    eax,0x0
c0007460:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007464:	73 08                	jae    c000746e <f_mkfs+0x2ec>
c0007466:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000746e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007472:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007476:	83 c0 20             	add    eax,0x20
c0007479:	83 d2 00             	adc    edx,0x0
c000747c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007480:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007488:	31 d2                	xor    edx,edx
c000748a:	31 ff                	xor    edi,edi
c000748c:	52                   	push   edx
c000748d:	89 fb                	mov    ebx,edi
c000748f:	50                   	push   eax
c0007490:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007494:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007498:	e8 bf be 01 00       	call   c002335c <__udivdi3>
c000749d:	83 c4 10             	add    esp,0x10
c00074a0:	c1 e0 02             	shl    eax,0x2
c00074a3:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00074a7:	05 07 02 00 00       	add    eax,0x207
c00074ac:	89 f1                	mov    ecx,esi
c00074ae:	c1 e8 09             	shr    eax,0x9
c00074b1:	83 c1 ff             	add    ecx,0xffffffff
c00074b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00074b8:	83 d3 ff             	adc    ebx,0xffffffff
c00074bb:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00074bf:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00074c3:	31 d2                	xor    edx,edx
c00074c5:	01 c8                	add    eax,ecx
c00074c7:	11 da                	adc    edx,ebx
c00074c9:	89 c1                	mov    ecx,eax
c00074cb:	f7 de                	neg    esi
c00074cd:	89 d0                	mov    eax,edx
c00074cf:	83 d7 00             	adc    edi,0x0
c00074d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074d6:	f7 df                	neg    edi
c00074d8:	21 f1                	and    ecx,esi
c00074da:	21 f8                	and    eax,edi
c00074dc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074e4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074ec:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074f0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f3:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074f7:	0f ac d0 01          	shrd   eax,edx,0x1
c00074fb:	89 df                	mov    edi,ebx
c00074fd:	d1 ea                	shr    edx,1
c00074ff:	39 c1                	cmp    ecx,eax
c0007501:	19 d7                	sbb    edi,edx
c0007503:	0f 83 3e 09 00 00    	jae    c0007e47 <f_mkfs+0xcc5>
c0007509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000750d:	31 d2                	xor    edx,edx
c000750f:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007513:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007517:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000751b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000751e:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007522:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007526:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000752a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000752e:	83 f8 0f             	cmp    eax,0xf
c0007531:	0f 86 10 09 00 00    	jbe    c0007e47 <f_mkfs+0xcc5>
c0007537:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000753f:	0f 87 02 09 00 00    	ja     c0007e47 <f_mkfs+0xcc5>
c0007545:	31 d2                	xor    edx,edx
c0007547:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000754b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007553:	83 c0 07             	add    eax,0x7
c0007556:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000755e:	c1 e8 03             	shr    eax,0x3
c0007561:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007568:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000756c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007570:	c1 e0 09             	shl    eax,0x9
c0007573:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007577:	48                   	dec    eax
c0007578:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000757c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007580:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007584:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007588:	31 d2                	xor    edx,edx
c000758a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000758e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007599:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000759e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00075a2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00075a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00075aa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00075ae:	31 ff                	xor    edi,edi
c00075b0:	31 f6                	xor    esi,esi
c00075b2:	31 db                	xor    ebx,ebx
c00075b4:	85 ff                	test   edi,edi
c00075b6:	74 05                	je     c00075bd <f_mkfs+0x43b>
c00075b8:	4f                   	dec    edi
c00075b9:	74 44                	je     c00075ff <f_mkfs+0x47d>
c00075bb:	eb 4f                	jmp    c000760c <f_mkfs+0x48a>
c00075bd:	83 ec 0c             	sub    esp,0xc
c00075c0:	0f b7 c3             	movzx  eax,bx
c00075c3:	50                   	push   eax
c00075c4:	e8 05 0e 00 00       	call   c00083ce <ff_wtoupper>
c00075c9:	83 c4 10             	add    esp,0x10
c00075cc:	89 c1                	mov    ecx,eax
c00075ce:	8d 53 01             	lea    edx,[ebx+0x1]
c00075d1:	66 39 c3             	cmp    bx,ax
c00075d4:	75 3e                	jne    c0007614 <f_mkfs+0x492>
c00075d6:	be 01 00 00 00       	mov    esi,0x1
c00075db:	89 df                	mov    edi,ebx
c00075dd:	66 01 f7             	add    di,si
c00075e0:	75 07                	jne    c00075e9 <f_mkfs+0x467>
c00075e2:	83 fe 7f             	cmp    esi,0x7f
c00075e5:	77 31                	ja     c0007618 <f_mkfs+0x496>
c00075e7:	eb 16                	jmp    c00075ff <f_mkfs+0x47d>
c00075e9:	83 ec 0c             	sub    esp,0xc
c00075ec:	0f b7 ff             	movzx  edi,di
c00075ef:	57                   	push   edi
c00075f0:	e8 d9 0d 00 00       	call   c00083ce <ff_wtoupper>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	39 c7                	cmp    edi,eax
c00075fa:	75 e6                	jne    c00075e2 <f_mkfs+0x460>
c00075fc:	46                   	inc    esi
c00075fd:	eb dc                	jmp    c00075db <f_mkfs+0x459>
c00075ff:	31 c0                	xor    eax,eax
c0007601:	89 d9                	mov    ecx,ebx
c0007603:	4e                   	dec    esi
c0007604:	0f 95 c0             	setne  al
c0007607:	43                   	inc    ebx
c0007608:	89 c7                	mov    edi,eax
c000760a:	eb 14                	jmp    c0007620 <f_mkfs+0x49e>
c000760c:	89 f1                	mov    ecx,esi
c000760e:	01 f3                	add    ebx,esi
c0007610:	31 ff                	xor    edi,edi
c0007612:	eb 0c                	jmp    c0007620 <f_mkfs+0x49e>
c0007614:	89 d3                	mov    ebx,edx
c0007616:	eb 08                	jmp    c0007620 <f_mkfs+0x49e>
c0007618:	bf 02 00 00 00       	mov    edi,0x2
c000761d:	83 c9 ff             	or     ecx,0xffffffff
c0007620:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007624:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007627:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000762b:	0f b6 c1             	movzx  eax,cl
c000762e:	e8 3a a9 ff ff       	call   c0001f6d <xsum32>
c0007633:	66 c1 e9 08          	shr    cx,0x8
c0007637:	89 c2                	mov    edx,eax
c0007639:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000763c:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007640:	0f b7 c1             	movzx  eax,cx
c0007643:	e8 25 a9 ff ff       	call   c0001f6d <xsum32>
c0007648:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000764d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007651:	66 85 db             	test   bx,bx
c0007654:	74 1f                	je     c0007675 <f_mkfs+0x4f3>
c0007656:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007659:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007660:	83 c0 02             	add    eax,0x2
c0007663:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007669:	39 c2                	cmp    edx,eax
c000766b:	74 08                	je     c0007675 <f_mkfs+0x4f3>
c000766d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007670:	e9 3f ff ff ff       	jmp    c00075b4 <f_mkfs+0x432>
c0007675:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007678:	83 ec 0c             	sub    esp,0xc
c000767b:	05 01 02 00 00       	add    eax,0x201
c0007680:	c1 e8 09             	shr    eax,0x9
c0007683:	50                   	push   eax
c0007684:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007688:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000768c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007690:	55                   	push   ebp
c0007691:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007695:	e8 a3 a3 ff ff       	call   c0001a3d <disk_write>
c000769a:	83 c4 20             	add    esp,0x20
c000769d:	85 c0                	test   eax,eax
c000769f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00076a2:	0f 85 8b 0b 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c00076a8:	89 d0                	mov    eax,edx
c00076aa:	31 d2                	xor    edx,edx
c00076ac:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00076b0:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00076b4:	66 85 db             	test   bx,bx
c00076b7:	74 04                	je     c00076bd <f_mkfs+0x53b>
c00076b9:	31 c0                	xor    eax,eax
c00076bb:	eb b0                	jmp    c000766d <f_mkfs+0x4eb>
c00076bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00076c1:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00076c5:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076c9:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076cf:	31 d2                	xor    edx,edx
c00076d1:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076dc:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076e0:	c1 eb 09             	shr    ebx,0x9
c00076e3:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076ee:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076f6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076fa:	8d 70 01             	lea    esi,[eax+0x1]
c00076fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007701:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007705:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000770c:	31 d2                	xor    edx,edx
c000770e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007713:	89 04 24             	mov    DWORD PTR [esp],eax
c0007716:	89 c1                	mov    ecx,eax
c0007718:	89 e8                	mov    eax,ebp
c000771a:	e8 e7 a3 ff ff       	call   c0001b06 <mem_set>
c000771f:	31 c0                	xor    eax,eax
c0007721:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007724:	76 10                	jbe    c0007736 <f_mkfs+0x5b4>
c0007726:	83 fe 07             	cmp    esi,0x7
c0007729:	76 0b                	jbe    c0007736 <f_mkfs+0x5b4>
c000772b:	40                   	inc    eax
c000772c:	83 ee 08             	sub    esi,0x8
c000772f:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007734:	eb eb                	jmp    c0007721 <f_mkfs+0x59f>
c0007736:	b2 01                	mov    dl,0x1
c0007738:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000773c:	85 f6                	test   esi,esi
c000773e:	74 0c                	je     c000774c <f_mkfs+0x5ca>
c0007740:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007743:	76 07                	jbe    c000774c <f_mkfs+0x5ca>
c0007745:	08 11                	or     BYTE PTR [ecx],dl
c0007747:	4e                   	dec    esi
c0007748:	d1 e2                	shl    edx,1
c000774a:	eb f0                	jmp    c000773c <f_mkfs+0x5ba>
c000774c:	89 df                	mov    edi,ebx
c000774e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007752:	76 04                	jbe    c0007758 <f_mkfs+0x5d6>
c0007754:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007758:	83 ec 0c             	sub    esp,0xc
c000775b:	57                   	push   edi
c000775c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007760:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007764:	55                   	push   ebp
c0007765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007769:	e8 cf a2 ff ff       	call   c0001a3d <disk_write>
c000776e:	83 c4 20             	add    esp,0x20
c0007771:	85 c0                	test   eax,eax
c0007773:	0f 85 ba 0a 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007779:	31 d2                	xor    edx,edx
c000777b:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000777f:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007783:	29 fb                	sub    ebx,edi
c0007785:	0f 85 7a ff ff ff    	jne    c0007705 <f_mkfs+0x583>
c000778b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000778f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007797:	31 f6                	xor    esi,esi
c0007799:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000779d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077a0:	31 d2                	xor    edx,edx
c00077a2:	89 e8                	mov    eax,ebp
c00077a4:	e8 5d a3 ff ff       	call   c0001b06 <mem_set>
c00077a9:	31 c9                	xor    ecx,ecx
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 40                	jne    c00077ef <f_mkfs+0x66d>
c00077af:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00077b4:	89 e8                	mov    eax,ebp
c00077b6:	bb 02 00 00 00       	mov    ebx,0x2
c00077bb:	e8 28 a3 ff ff       	call   c0001ae8 <st_dword>
c00077c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00077c3:	83 ca ff             	or     edx,0xffffffff
c00077c6:	e8 1d a3 ff ff       	call   c0001ae8 <st_dword>
c00077cb:	b9 08 00 00 00       	mov    ecx,0x8
c00077d0:	eb 1d                	jmp    c00077ef <f_mkfs+0x66d>
c00077d2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077d5:	76 3b                	jbe    c0007812 <f_mkfs+0x690>
c00077d7:	43                   	inc    ebx
c00077d8:	83 fe 01             	cmp    esi,0x1
c00077db:	89 da                	mov    edx,ebx
c00077dd:	77 03                	ja     c00077e2 <f_mkfs+0x660>
c00077df:	83 ca ff             	or     edx,0xffffffff
c00077e2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077e6:	4e                   	dec    esi
c00077e7:	e8 fc a2 ff ff       	call   c0001ae8 <st_dword>
c00077ec:	83 c1 04             	add    ecx,0x4
c00077ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077f3:	85 f6                	test   esi,esi
c00077f5:	75 db                	jne    c00077d2 <f_mkfs+0x650>
c00077f7:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077fc:	77 14                	ja     c0007812 <f_mkfs+0x690>
c00077fe:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007802:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007809:	85 f6                	test   esi,esi
c000780b:	74 05                	je     c0007812 <f_mkfs+0x690>
c000780d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007810:	77 dd                	ja     c00077ef <f_mkfs+0x66d>
c0007812:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007816:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000781a:	39 cf                	cmp    edi,ecx
c000781c:	76 02                	jbe    c0007820 <f_mkfs+0x69e>
c000781e:	89 cf                	mov    edi,ecx
c0007820:	83 ec 0c             	sub    esp,0xc
c0007823:	57                   	push   edi
c0007824:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007828:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000782c:	55                   	push   ebp
c000782d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007831:	e8 07 a2 ff ff       	call   c0001a3d <disk_write>
c0007836:	83 c4 20             	add    esp,0x20
c0007839:	85 c0                	test   eax,eax
c000783b:	0f 85 f2 09 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007841:	31 d2                	xor    edx,edx
c0007843:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007847:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000784b:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000784f:	0f 85 48 ff ff ff    	jne    c000779d <f_mkfs+0x61b>
c0007855:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007858:	31 d2                	xor    edx,edx
c000785a:	89 e8                	mov    eax,ebp
c000785c:	31 ff                	xor    edi,edi
c000785e:	e8 a3 a2 ff ff       	call   c0001b06 <mem_set>
c0007863:	8d 45 34             	lea    eax,[ebp+0x34]
c0007866:	ba 02 00 00 00       	mov    edx,0x2
c000786b:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000786f:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007873:	e8 70 a2 ff ff       	call   c0001ae8 <st_dword>
c0007878:	8d 45 38             	lea    eax,[ebp+0x38]
c000787b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000787f:	e8 64 a2 ff ff       	call   c0001ae8 <st_dword>
c0007884:	8d 45 44             	lea    eax,[ebp+0x44]
c0007887:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000788b:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000788f:	e8 54 a2 ff ff       	call   c0001ae8 <st_dword>
c0007894:	8d 45 54             	lea    eax,[ebp+0x54]
c0007897:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000789b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000789f:	83 c2 02             	add    edx,0x2
c00078a2:	e8 41 a2 ff ff       	call   c0001ae8 <st_dword>
c00078a7:	8d 45 58             	lea    eax,[ebp+0x58]
c00078aa:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00078ae:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00078b2:	e8 31 a2 ff ff       	call   c0001ae8 <st_dword>
c00078b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078bb:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00078c0:	89 c6                	mov    esi,eax
c00078c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cd:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078d1:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078d8:	39 cb                	cmp    ebx,ecx
c00078da:	76 02                	jbe    c00078de <f_mkfs+0x75c>
c00078dc:	89 cb                	mov    ebx,ecx
c00078de:	83 ec 0c             	sub    esp,0xc
c00078e1:	53                   	push   ebx
c00078e2:	57                   	push   edi
c00078e3:	56                   	push   esi
c00078e4:	55                   	push   ebp
c00078e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078e9:	e8 4f a1 ff ff       	call   c0001a3d <disk_write>
c00078ee:	83 c4 20             	add    esp,0x20
c00078f1:	85 c0                	test   eax,eax
c00078f3:	0f 85 3a 09 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c00078f9:	31 d2                	xor    edx,edx
c00078fb:	b9 00 02 00 00       	mov    ecx,0x200
c0007900:	89 e8                	mov    eax,ebp
c0007902:	e8 ff a1 ff ff       	call   c0001b06 <mem_set>
c0007907:	31 d2                	xor    edx,edx
c0007909:	01 de                	add    esi,ebx
c000790b:	11 d7                	adc    edi,edx
c000790d:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007910:	75 bf                	jne    c00078d1 <f_mkfs+0x74f>
c0007912:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007916:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000791a:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007922:	b9 00 02 00 00       	mov    ecx,0x200
c0007927:	31 d2                	xor    edx,edx
c0007929:	89 e8                	mov    eax,ebp
c000792b:	e8 d6 a1 ff ff       	call   c0001b06 <mem_set>
c0007930:	b9 0b 00 00 00       	mov    ecx,0xb
c0007935:	ba 00 5e 02 c0       	mov    edx,0xc0025e00
c000793a:	89 e8                	mov    eax,ebp
c000793c:	e8 b0 a1 ff ff       	call   c0001af1 <mem_cpy>
c0007941:	8d 45 40             	lea    eax,[ebp+0x40]
c0007944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007948:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000794c:	e8 9a a1 ff ff       	call   c0001aeb <st_qword>
c0007951:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007955:	8d 45 48             	lea    eax,[ebp+0x48]
c0007958:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000795c:	e8 8a a1 ff ff       	call   c0001aeb <st_qword>
c0007961:	8d 45 50             	lea    eax,[ebp+0x50]
c0007964:	ba 20 00 00 00       	mov    edx,0x20
c0007969:	e8 7a a1 ff ff       	call   c0001ae8 <st_dword>
c000796e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007972:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007976:	e8 6d a1 ff ff       	call   c0001ae8 <st_dword>
c000797b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000797f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007983:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007987:	e8 5c a1 ff ff       	call   c0001ae8 <st_dword>
c000798c:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000798f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007993:	e8 50 a1 ff ff       	call   c0001ae8 <st_dword>
c0007998:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000799c:	8d 50 02             	lea    edx,[eax+0x2]
c000799f:	8d 45 60             	lea    eax,[ebp+0x60]
c00079a2:	e8 41 a1 ff ff       	call   c0001ae8 <st_dword>
c00079a7:	8d 45 64             	lea    eax,[ebp+0x64]
c00079aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00079af:	e8 34 a1 ff ff       	call   c0001ae8 <st_dword>
c00079b4:	8d 45 68             	lea    eax,[ebp+0x68]
c00079b7:	ba 00 01 00 00       	mov    edx,0x100
c00079bc:	e8 23 a1 ff ff       	call   c0001ae4 <st_word>
c00079c1:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00079c5:	b8 0a 00 00 00       	mov    eax,0xa
c00079ca:	48                   	dec    eax
c00079cb:	74 05                	je     c00079d2 <f_mkfs+0x850>
c00079cd:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079d0:	eb f8                	jmp    c00079ca <f_mkfs+0x848>
c00079d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079d6:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079de:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079e2:	74 05                	je     c00079e9 <f_mkfs+0x867>
c00079e4:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079e7:	eb f5                	jmp    c00079de <f_mkfs+0x85c>
c00079e9:	8d 45 78             	lea    eax,[ebp+0x78]
c00079ec:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079f1:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079f7:	31 db                	xor    ebx,ebx
c00079f9:	e8 e6 a0 ff ff       	call   c0001ae4 <st_word>
c00079fe:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007a04:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a09:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a0c:	e8 d3 a0 ff ff       	call   c0001ae4 <st_word>
c0007a11:	31 c9                	xor    ecx,ecx
c0007a13:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007a16:	83 f8 01             	cmp    eax,0x1
c0007a19:	76 13                	jbe    c0007a2e <f_mkfs+0x8ac>
c0007a1b:	83 f9 70             	cmp    ecx,0x70
c0007a1e:	74 0e                	je     c0007a2e <f_mkfs+0x8ac>
c0007a20:	89 da                	mov    edx,ebx
c0007a22:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a27:	e8 41 a5 ff ff       	call   c0001f6d <xsum32>
c0007a2c:	89 c3                	mov    ebx,eax
c0007a2e:	41                   	inc    ecx
c0007a2f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a35:	75 dc                	jne    c0007a13 <f_mkfs+0x891>
c0007a37:	89 f0                	mov    eax,esi
c0007a39:	89 fa                	mov    edx,edi
c0007a3b:	83 c0 01             	add    eax,0x1
c0007a3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a42:	83 d2 00             	adc    edx,0x0
c0007a45:	83 ec 0c             	sub    esp,0xc
c0007a48:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a4c:	6a 01                	push   0x1
c0007a4e:	57                   	push   edi
c0007a4f:	56                   	push   esi
c0007a50:	55                   	push   ebp
c0007a51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a55:	e8 e3 9f ff ff       	call   c0001a3d <disk_write>
c0007a5a:	83 c4 20             	add    esp,0x20
c0007a5d:	85 c0                	test   eax,eax
c0007a5f:	0f 85 ce 07 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007a65:	31 d2                	xor    edx,edx
c0007a67:	b9 00 02 00 00       	mov    ecx,0x200
c0007a6c:	89 e8                	mov    eax,ebp
c0007a6e:	e8 93 a0 ff ff       	call   c0001b06 <mem_set>
c0007a73:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a78:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a7b:	e8 64 a0 ff ff       	call   c0001ae4 <st_word>
c0007a80:	89 f0                	mov    eax,esi
c0007a82:	89 fa                	mov    edx,edi
c0007a84:	83 c0 09             	add    eax,0x9
c0007a87:	83 d2 00             	adc    edx,0x0
c0007a8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a91:	31 c9                	xor    ecx,ecx
c0007a93:	41                   	inc    ecx
c0007a94:	89 da                	mov    edx,ebx
c0007a96:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a9b:	e8 cd a4 ff ff       	call   c0001f6d <xsum32>
c0007aa0:	89 c3                	mov    ebx,eax
c0007aa2:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007aa8:	75 e9                	jne    c0007a93 <f_mkfs+0x911>
c0007aaa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007aae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ab2:	83 c0 01             	add    eax,0x1
c0007ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ab9:	83 d2 00             	adc    edx,0x0
c0007abc:	83 ec 0c             	sub    esp,0xc
c0007abf:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007ac3:	6a 01                	push   0x1
c0007ac5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ac9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007acd:	55                   	push   ebp
c0007ace:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad2:	e8 66 9f ff ff       	call   c0001a3d <disk_write>
c0007ad7:	83 c4 20             	add    esp,0x20
c0007ada:	85 c0                	test   eax,eax
c0007adc:	0f 85 51 07 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ae6:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007aea:	75 09                	jne    c0007af5 <f_mkfs+0x973>
c0007aec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007aef:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007af3:	74 12                	je     c0007b07 <f_mkfs+0x985>
c0007af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007af9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007afd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007b01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007b05:	eb 8a                	jmp    c0007a91 <f_mkfs+0x90f>
c0007b07:	31 d2                	xor    edx,edx
c0007b09:	b9 00 02 00 00       	mov    ecx,0x200
c0007b0e:	89 e8                	mov    eax,ebp
c0007b10:	e8 f1 9f ff ff       	call   c0001b06 <mem_set>
c0007b15:	83 c6 0b             	add    esi,0xb
c0007b18:	83 d7 00             	adc    edi,0x0
c0007b1b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007b1f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007b23:	31 c9                	xor    ecx,ecx
c0007b25:	41                   	inc    ecx
c0007b26:	89 da                	mov    edx,ebx
c0007b28:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b2d:	e8 3b a4 ff ff       	call   c0001f6d <xsum32>
c0007b32:	89 c3                	mov    ebx,eax
c0007b34:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b3a:	75 e9                	jne    c0007b25 <f_mkfs+0x9a3>
c0007b3c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b43:	83 c6 01             	add    esi,0x1
c0007b46:	83 d7 00             	adc    edi,0x0
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	6a 01                	push   0x1
c0007b4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b56:	55                   	push   ebp
c0007b57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5b:	e8 dd 9e ff ff       	call   c0001a3d <disk_write>
c0007b60:	83 c4 20             	add    esp,0x20
c0007b63:	85 c0                	test   eax,eax
c0007b65:	0f 85 c8 06 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007b6b:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b6f:	75 06                	jne    c0007b77 <f_mkfs+0x9f5>
c0007b71:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b75:	74 09                	je     c0007b80 <f_mkfs+0x9fe>
c0007b77:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b7a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b7e:	eb a3                	jmp    c0007b23 <f_mkfs+0x9a1>
c0007b80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b84:	89 da                	mov    edx,ebx
c0007b86:	01 e8                	add    eax,ebp
c0007b88:	e8 5b 9f ff ff       	call   c0001ae8 <st_dword>
c0007b8d:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b92:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b9a:	75 e4                	jne    c0007b80 <f_mkfs+0x9fe>
c0007b9c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b9f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ba3:	83 c6 02             	add    esi,0x2
c0007ba6:	83 d7 00             	adc    edi,0x0
c0007ba9:	83 ec 0c             	sub    esp,0xc
c0007bac:	6a 01                	push   0x1
c0007bae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bb6:	55                   	push   ebp
c0007bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007bbb:	e8 7d 9e ff ff       	call   c0001a3d <disk_write>
c0007bc0:	83 c4 20             	add    esp,0x20
c0007bc3:	85 c0                	test   eax,eax
c0007bc5:	0f 85 68 06 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007bcb:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007bd0:	74 0d                	je     c0007bdf <f_mkfs+0xa5d>
c0007bd2:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bda:	e9 43 fd ff ff       	jmp    c0007922 <f_mkfs+0x7a0>
c0007bdf:	b1 07                	mov    cl,0x7
c0007be1:	e9 e3 05 00 00       	jmp    c00081c9 <f_mkfs+0x1047>
c0007be6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007beb:	0f 85 4f 02 00 00    	jne    c0007e40 <f_mkfs+0xcbe>
c0007bf1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bf6:	0f 86 22 02 00 00    	jbe    c0007e1e <f_mkfs+0xc9c>
c0007bfc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c01:	0f 85 81 06 00 00    	jne    c0008288 <f_mkfs+0x1106>
c0007c07:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007c0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c0e:	83 f8 40             	cmp    eax,0x40
c0007c11:	0f 87 51 06 00 00    	ja     c0008268 <f_mkfs+0x10e6>
c0007c17:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c1b:	85 ff                	test   edi,edi
c0007c1d:	75 1c                	jne    c0007c3b <f_mkfs+0xab9>
c0007c1f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c22:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c0007c27:	c1 e9 0c             	shr    ecx,0xc
c0007c2a:	bf 01 00 00 00       	mov    edi,0x1
c0007c2f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c32:	66 85 c0             	test   ax,ax
c0007c35:	0f 85 95 01 00 00    	jne    c0007dd0 <f_mkfs+0xc4e>
c0007c3b:	31 d2                	xor    edx,edx
c0007c3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c40:	f7 f7                	div    edi
c0007c42:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c47:	0f 86 95 01 00 00    	jbe    c0007de2 <f_mkfs+0xc60>
c0007c4d:	83 c0 02             	add    eax,0x2
c0007c50:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c55:	01 c0                	add    eax,eax
c0007c57:	05 ff 01 00 00       	add    eax,0x1ff
c0007c5c:	be 01 00 00 00       	mov    esi,0x1
c0007c61:	c1 e8 09             	shr    eax,0x9
c0007c64:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c6c:	c1 e0 05             	shl    eax,0x5
c0007c6f:	c1 e8 09             	shr    eax,0x9
c0007c72:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c76:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c7b:	31 d2                	xor    edx,edx
c0007c7d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c81:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c85:	89 f0                	mov    eax,esi
c0007c87:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c8b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c9b:	31 d2                	xor    edx,edx
c0007c9d:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007ca2:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007ca6:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007caa:	31 db                	xor    ebx,ebx
c0007cac:	01 c8                	add    eax,ecx
c0007cae:	11 da                	adc    edx,ebx
c0007cb0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007cb4:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007cb8:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007cbc:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007cc0:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007cc4:	f7 da                	neg    edx
c0007cc6:	21 d1                	and    ecx,edx
c0007cc8:	29 d9                	sub    ecx,ebx
c0007cca:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ccf:	0f 85 20 01 00 00    	jne    c0007df5 <f_mkfs+0xc73>
c0007cd5:	31 db                	xor    ebx,ebx
c0007cd7:	01 ce                	add    esi,ecx
c0007cd9:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cdd:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ce1:	31 d2                	xor    edx,edx
c0007ce3:	89 f8                	mov    eax,edi
c0007ce5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ce9:	c1 e0 04             	shl    eax,0x4
c0007cec:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cf0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cf4:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cf8:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cfc:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cff:	19 d3                	sbb    ebx,edx
c0007d01:	0f 82 40 01 00 00    	jb     c0007e47 <f_mkfs+0xcc5>
c0007d07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d0a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d0e:	89 c8                	mov    eax,ecx
c0007d10:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007d15:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007d19:	29 f0                	sub    eax,esi
c0007d1b:	29 d0                	sub    eax,edx
c0007d1d:	31 d2                	xor    edx,edx
c0007d1f:	f7 f7                	div    edi
c0007d21:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d26:	89 c3                	mov    ebx,eax
c0007d28:	0f 85 b8 fe ff ff    	jne    c0007be6 <f_mkfs+0xa64>
c0007d2e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d33:	0f 87 1d 01 00 00    	ja     c0007e56 <f_mkfs+0xcd4>
c0007d39:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d3e:	0f 85 03 01 00 00    	jne    c0007e47 <f_mkfs+0xcc5>
c0007d44:	83 ff 01             	cmp    edi,0x1
c0007d47:	0f 86 fa 00 00 00    	jbe    c0007e47 <f_mkfs+0xcc5>
c0007d4d:	d1 ef                	shr    edi,1
c0007d4f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d53:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d57:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d5a:	85 db                	test   ebx,ebx
c0007d5c:	75 2d                	jne    c0007d8b <f_mkfs+0xc09>
c0007d5e:	89 cb                	mov    ebx,ecx
c0007d60:	ba 10 5d 02 c0       	mov    edx,0xc0025d10
c0007d65:	c1 eb 11             	shr    ebx,0x11
c0007d68:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d70:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d73:	66 85 c0             	test   ax,ax
c0007d76:	74 11                	je     c0007d89 <f_mkfs+0xc07>
c0007d78:	83 c2 02             	add    edx,0x2
c0007d7b:	39 d8                	cmp    eax,ebx
c0007d7d:	77 0a                	ja     c0007d89 <f_mkfs+0xc07>
c0007d7f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d83:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d87:	eb e7                	jmp    c0007d70 <f_mkfs+0xbee>
c0007d89:	31 db                	xor    ebx,ebx
c0007d8b:	31 d2                	xor    edx,edx
c0007d8d:	89 c8                	mov    eax,ecx
c0007d8f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d93:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d9a:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d9f:	c1 ea 09             	shr    edx,0x9
c0007da2:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007da7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007dab:	0f 87 96 00 00 00    	ja     c0007e47 <f_mkfs+0xcc5>
c0007db1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db5:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007dbd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007dc1:	be 20 00 00 00       	mov    esi,0x20
c0007dc6:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007dcb:	e9 a6 fe ff ff       	jmp    c0007c76 <f_mkfs+0xaf4>
c0007dd0:	83 c2 02             	add    edx,0x2
c0007dd3:	39 c8                	cmp    eax,ecx
c0007dd5:	0f 87 60 fe ff ff    	ja     c0007c3b <f_mkfs+0xab9>
c0007ddb:	01 ff                	add    edi,edi
c0007ddd:	e9 4d fe ff ff       	jmp    c0007c2f <f_mkfs+0xaad>
c0007de2:	8d 04 40             	lea    eax,[eax+eax*2]
c0007de5:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dea:	40                   	inc    eax
c0007deb:	d1 e8                	shr    eax,1
c0007ded:	83 c0 03             	add    eax,0x3
c0007df0:	e9 62 fe ff ff       	jmp    c0007c57 <f_mkfs+0xad5>
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	89 c8                	mov    eax,ecx
c0007df9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dfd:	85 d2                	test   edx,edx
c0007dff:	74 0c                	je     c0007e0d <f_mkfs+0xc8b>
c0007e01:	49                   	dec    ecx
c0007e02:	46                   	inc    esi
c0007e03:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007e08:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007e0d:	89 c8                	mov    eax,ecx
c0007e0f:	31 d2                	xor    edx,edx
c0007e11:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007e15:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007e19:	e9 c3 fe ff ff       	jmp    c0007ce1 <f_mkfs+0xb5f>
c0007e1e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e23:	77 31                	ja     c0007e56 <f_mkfs+0xcd4>
c0007e25:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e2a:	75 1b                	jne    c0007e47 <f_mkfs+0xcc5>
c0007e2c:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e33:	3d 80 00 00 00       	cmp    eax,0x80
c0007e38:	0f 86 d9 fd ff ff    	jbe    c0007c17 <f_mkfs+0xa95>
c0007e3e:	eb 07                	jmp    c0007e47 <f_mkfs+0xcc5>
c0007e40:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e45:	76 0a                	jbe    c0007e51 <f_mkfs+0xccf>
c0007e47:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e4c:	e9 ff 03 00 00       	jmp    c0008250 <f_mkfs+0x10ce>
c0007e51:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e56:	31 d2                	xor    edx,edx
c0007e58:	b9 00 02 00 00       	mov    ecx,0x200
c0007e5d:	89 e8                	mov    eax,ebp
c0007e5f:	e8 a2 9c ff ff       	call   c0001b06 <mem_set>
c0007e64:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e69:	ba 22 5e 02 c0       	mov    edx,0xc0025e22
c0007e6e:	89 e8                	mov    eax,ebp
c0007e70:	e8 7c 9c ff ff       	call   c0001af1 <mem_cpy>
c0007e75:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e78:	ba 00 02 00 00       	mov    edx,0x200
c0007e7d:	e8 62 9c ff ff       	call   c0001ae4 <st_word>
c0007e82:	89 f8                	mov    eax,edi
c0007e84:	0f b7 d6             	movzx  edx,si
c0007e87:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e8a:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e8d:	e8 52 9c ff ff       	call   c0001ae4 <st_word>
c0007e92:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e96:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9b:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e9e:	75 08                	jne    c0007ea8 <f_mkfs+0xd26>
c0007ea0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ea8:	8d 45 11             	lea    eax,[ebp+0x11]
c0007eab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007eaf:	e8 30 9c ff ff       	call   c0001ae4 <st_word>
c0007eb4:	b8 ff ff 00 00       	mov    eax,0xffff
c0007eb9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007ebd:	39 d0                	cmp    eax,edx
c0007ebf:	b8 00 00 00 00       	mov    eax,0x0
c0007ec4:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ec8:	72 0a                	jb     c0007ed4 <f_mkfs+0xd52>
c0007eca:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ecd:	e8 12 9c ff ff       	call   c0001ae4 <st_word>
c0007ed2:	eb 08                	jmp    c0007edc <f_mkfs+0xd5a>
c0007ed4:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ed7:	e8 0c 9c ff ff       	call   c0001ae8 <st_dword>
c0007edc:	8d 45 18             	lea    eax,[ebp+0x18]
c0007edf:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ee4:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ee8:	e8 f7 9b ff ff       	call   c0001ae4 <st_word>
c0007eed:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ef0:	ba ff 00 00 00       	mov    edx,0xff
c0007ef5:	e8 ea 9b ff ff       	call   c0001ae4 <st_word>
c0007efa:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007efd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f01:	e8 e2 9b ff ff       	call   c0001ae8 <st_dword>
c0007f06:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f0b:	75 57                	jne    c0007f64 <f_mkfs+0xde2>
c0007f0d:	8d 45 43             	lea    eax,[ebp+0x43]
c0007f10:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f15:	e8 ce 9b ff ff       	call   c0001ae8 <st_dword>
c0007f1a:	8d 45 24             	lea    eax,[ebp+0x24]
c0007f1d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f21:	e8 c2 9b ff ff       	call   c0001ae8 <st_dword>
c0007f26:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f29:	ba 02 00 00 00       	mov    edx,0x2
c0007f2e:	e8 b5 9b ff ff       	call   c0001ae8 <st_dword>
c0007f33:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f36:	ba 01 00 00 00       	mov    edx,0x1
c0007f3b:	e8 a4 9b ff ff       	call   c0001ae4 <st_word>
c0007f40:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f43:	ba 06 00 00 00       	mov    edx,0x6
c0007f48:	e8 97 9b ff ff       	call   c0001ae4 <st_word>
c0007f4d:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f51:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f55:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f58:	b9 13 00 00 00       	mov    ecx,0x13
c0007f5d:	ba 2e 5e 02 c0       	mov    edx,0xc0025e2e
c0007f62:	eb 2f                	jmp    c0007f93 <f_mkfs+0xe11>
c0007f64:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f67:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f6c:	e8 77 9b ff ff       	call   c0001ae8 <st_dword>
c0007f71:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f76:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f79:	e8 66 9b ff ff       	call   c0001ae4 <st_word>
c0007f7e:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f82:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f86:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f89:	b9 13 00 00 00       	mov    ecx,0x13
c0007f8e:	ba 42 5e 02 c0       	mov    edx,0xc0025e42
c0007f93:	e8 59 9b ff ff       	call   c0001af1 <mem_cpy>
c0007f98:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f9e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fa3:	89 f0                	mov    eax,esi
c0007fa5:	e8 3a 9b ff ff       	call   c0001ae4 <st_word>
c0007faa:	83 ec 0c             	sub    esp,0xc
c0007fad:	6a 01                	push   0x1
c0007faf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fb3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fb7:	55                   	push   ebp
c0007fb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fbc:	e8 7c 9a ff ff       	call   c0001a3d <disk_write>
c0007fc1:	83 c4 20             	add    esp,0x20
c0007fc4:	85 c0                	test   eax,eax
c0007fc6:	0f 85 67 02 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007fcc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fd1:	0f 85 b7 00 00 00    	jne    c000808e <f_mkfs+0xf0c>
c0007fd7:	83 ec 0c             	sub    esp,0xc
c0007fda:	6a 01                	push   0x1
c0007fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe4:	83 c0 06             	add    eax,0x6
c0007fe7:	83 d2 00             	adc    edx,0x0
c0007fea:	52                   	push   edx
c0007feb:	50                   	push   eax
c0007fec:	55                   	push   ebp
c0007fed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff1:	e8 47 9a ff ff       	call   c0001a3d <disk_write>
c0007ff6:	83 c4 20             	add    esp,0x20
c0007ff9:	b9 00 02 00 00       	mov    ecx,0x200
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	89 e8                	mov    eax,ebp
c0008002:	e8 ff 9a ff ff       	call   c0001b06 <mem_set>
c0008007:	ba 52 52 61 41       	mov    edx,0x41615252
c000800c:	89 e8                	mov    eax,ebp
c000800e:	e8 d5 9a ff ff       	call   c0001ae8 <st_dword>
c0008013:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008019:	ba 72 72 41 61       	mov    edx,0x61417272
c000801e:	e8 c5 9a ff ff       	call   c0001ae8 <st_dword>
c0008023:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008026:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000802c:	e8 b7 9a ff ff       	call   c0001ae8 <st_dword>
c0008031:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008037:	ba 02 00 00 00       	mov    edx,0x2
c000803c:	e8 a7 9a ff ff       	call   c0001ae8 <st_dword>
c0008041:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008046:	89 f0                	mov    eax,esi
c0008048:	e8 97 9a ff ff       	call   c0001ae4 <st_word>
c000804d:	83 ec 0c             	sub    esp,0xc
c0008050:	6a 01                	push   0x1
c0008052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008056:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000805a:	83 c0 07             	add    eax,0x7
c000805d:	83 d2 00             	adc    edx,0x0
c0008060:	52                   	push   edx
c0008061:	50                   	push   eax
c0008062:	55                   	push   ebp
c0008063:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008067:	e8 d1 99 ff ff       	call   c0001a3d <disk_write>
c000806c:	83 c4 14             	add    esp,0x14
c000806f:	6a 01                	push   0x1
c0008071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008075:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008079:	83 c0 01             	add    eax,0x1
c000807c:	83 d2 00             	adc    edx,0x0
c000807f:	52                   	push   edx
c0008080:	50                   	push   eax
c0008081:	55                   	push   ebp
c0008082:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008086:	e8 b2 99 ff ff       	call   c0001a3d <disk_write>
c000808b:	83 c4 20             	add    esp,0x20
c000808e:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008095:	31 d2                	xor    edx,edx
c0008097:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000809d:	31 db                	xor    ebx,ebx
c000809f:	89 e8                	mov    eax,ebp
c00080a1:	e8 60 9a ff ff       	call   c0001b06 <mem_set>
c00080a6:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00080ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00080b2:	0f 94 c3             	sete   bl
c00080b5:	4b                   	dec    ebx
c00080b6:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00080bc:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00080c2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c7:	75 21                	jne    c00080ea <f_mkfs+0xf68>
c00080c9:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080ce:	89 e8                	mov    eax,ebp
c00080d0:	e8 13 9a ff ff       	call   c0001ae8 <st_dword>
c00080d5:	8d 45 04             	lea    eax,[ebp+0x4]
c00080d8:	83 ca ff             	or     edx,0xffffffff
c00080db:	e8 08 9a ff ff       	call   c0001ae8 <st_dword>
c00080e0:	8d 45 08             	lea    eax,[ebp+0x8]
c00080e3:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080e8:	eb 04                	jmp    c00080ee <f_mkfs+0xf6c>
c00080ea:	89 da                	mov    edx,ebx
c00080ec:	89 e8                	mov    eax,ebp
c00080ee:	e8 f5 99 ff ff       	call   c0001ae8 <st_dword>
c00080f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080fb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080ff:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008103:	39 ce                	cmp    esi,ecx
c0008105:	76 02                	jbe    c0008109 <f_mkfs+0xf87>
c0008107:	89 ce                	mov    esi,ecx
c0008109:	83 ec 0c             	sub    esp,0xc
c000810c:	56                   	push   esi
c000810d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008111:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008115:	55                   	push   ebp
c0008116:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000811a:	e8 1e 99 ff ff       	call   c0001a3d <disk_write>
c000811f:	83 c4 20             	add    esp,0x20
c0008122:	85 c0                	test   eax,eax
c0008124:	0f 85 09 01 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c000812a:	31 d2                	xor    edx,edx
c000812c:	b9 00 02 00 00       	mov    ecx,0x200
c0008131:	89 e8                	mov    eax,ebp
c0008133:	e8 ce 99 ff ff       	call   c0001b06 <mem_set>
c0008138:	31 d2                	xor    edx,edx
c000813a:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000813e:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008142:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008146:	75 b3                	jne    c00080fb <f_mkfs+0xf79>
c0008148:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000814b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008152:	40                   	inc    eax
c0008153:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008157:	0f 87 65 ff ff ff    	ja     c00080c2 <f_mkfs+0xf40>
c000815d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008162:	74 04                	je     c0008168 <f_mkfs+0xfe6>
c0008164:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008168:	89 fb                	mov    ebx,edi
c000816a:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000816e:	76 04                	jbe    c0008174 <f_mkfs+0xff2>
c0008170:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008174:	83 ec 0c             	sub    esp,0xc
c0008177:	53                   	push   ebx
c0008178:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000817c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008180:	55                   	push   ebp
c0008181:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008185:	e8 b3 98 ff ff       	call   c0001a3d <disk_write>
c000818a:	83 c4 20             	add    esp,0x20
c000818d:	85 c0                	test   eax,eax
c000818f:	0f 85 9e 00 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0008195:	31 d2                	xor    edx,edx
c0008197:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000819b:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000819f:	29 df                	sub    edi,ebx
c00081a1:	75 c5                	jne    c0008168 <f_mkfs+0xfe6>
c00081a3:	b1 0c                	mov    cl,0xc
c00081a5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081aa:	74 1d                	je     c00081c9 <f_mkfs+0x1047>
c00081ac:	b8 ff ff 00 00       	mov    eax,0xffff
c00081b1:	b1 06                	mov    cl,0x6
c00081b3:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00081b7:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00081bb:	72 0c                	jb     c00081c9 <f_mkfs+0x1047>
c00081bd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00081c2:	0f 94 c1             	sete   cl
c00081c5:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081c9:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081ce:	75 4c                	jne    c000821c <f_mkfs+0x109a>
c00081d0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081d4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081d8:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081df:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081e6:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081f1:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081fc:	0f b6 c9             	movzx  ecx,cl
c00081ff:	83 ec 0c             	sub    esp,0xc
c0008202:	55                   	push   ebp
c0008203:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000820a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000820e:	e8 2f c2 ff ff       	call   c0004442 <create_partition>
c0008213:	83 c4 10             	add    esp,0x10
c0008216:	89 c3                	mov    ebx,eax
c0008218:	85 c0                	test   eax,eax
c000821a:	75 34                	jne    c0008250 <f_mkfs+0x10ce>
c000821c:	31 db                	xor    ebx,ebx
c000821e:	50                   	push   eax
c000821f:	6a 00                	push   0x0
c0008221:	6a 00                	push   0x0
c0008223:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008227:	e8 27 98 ff ff       	call   c0001a53 <disk_ioctl>
c000822c:	83 c4 10             	add    esp,0x10
c000822f:	85 c0                	test   eax,eax
c0008231:	74 1d                	je     c0008250 <f_mkfs+0x10ce>
c0008233:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000823b:	75 0c                	jne    c0008249 <f_mkfs+0x10c7>
c000823d:	83 ec 0c             	sub    esp,0xc
c0008240:	55                   	push   ebp
c0008241:	e8 75 00 00 00       	call   c00082bb <ff_memfree>
c0008246:	83 c4 10             	add    esp,0x10
c0008249:	bb 01 00 00 00       	mov    ebx,0x1
c000824e:	eb 48                	jmp    c0008298 <f_mkfs+0x1116>
c0008250:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008258:	75 3e                	jne    c0008298 <f_mkfs+0x1116>
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	55                   	push   ebp
c000825e:	e8 58 00 00 00       	call   c00082bb <ff_memfree>
c0008263:	83 c4 10             	add    esp,0x10
c0008266:	eb 30                	jmp    c0008298 <f_mkfs+0x1116>
c0008268:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000826d:	0f 85 eb fa ff ff    	jne    c0007d5e <f_mkfs+0xbdc>
c0008273:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008277:	81 ff 80 00 00 00    	cmp    edi,0x80
c000827d:	0f 86 b8 f9 ff ff    	jbe    c0007c3b <f_mkfs+0xab9>
c0008283:	e9 bf fb ff ff       	jmp    c0007e47 <f_mkfs+0xcc5>
c0008288:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000828d:	0f 85 c0 fa ff ff    	jne    c0007d53 <f_mkfs+0xbd1>
c0008293:	e9 af fb ff ff       	jmp    c0007e47 <f_mkfs+0xcc5>
c0008298:	81 c4 9c 00 00 00    	add    esp,0x9c
c000829e:	89 d8                	mov    eax,ebx
c00082a0:	5b                   	pop    ebx
c00082a1:	5e                   	pop    esi
c00082a2:	5f                   	pop    edi
c00082a3:	5d                   	pop    ebp
c00082a4:	c3                   	ret    

c00082a5 <ff_memalloc>:
c00082a5:	83 ec 0c             	sub    esp,0xc
c00082a8:	83 ec 0c             	sub    esp,0xc
c00082ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082af:	e8 b2 6e 00 00       	call   c000f166 <malloc>
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	83 c4 0c             	add    esp,0xc
c00082ba:	c3                   	ret    

c00082bb <ff_memfree>:
c00082bb:	83 ec 0c             	sub    esp,0xc
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082c5:	e8 ac 6e 00 00       	call   c000f176 <free>
c00082ca:	83 c4 10             	add    esp,0x10
c00082cd:	90                   	nop
c00082ce:	83 c4 0c             	add    esp,0xc
c00082d1:	c3                   	ret    

c00082d2 <ff_uni2oem>:
c00082d2:	83 ec 14             	sub    esp,0x14
c00082d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082d9:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082dd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082e4:	c7 44 24 0c 60 61 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026160
c00082ec:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082f1:	77 0b                	ja     c00082fe <ff_uni2oem+0x2c>
c00082f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082f7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fc:	eb 5b                	jmp    c0008359 <ff_uni2oem+0x87>
c00082fe:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008306:	77 51                	ja     c0008359 <ff_uni2oem+0x87>
c0008308:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000830e:	75 49                	jne    c0008359 <ff_uni2oem+0x87>
c0008310:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008317:	eb 0b                	jmp    c0008324 <ff_uni2oem+0x52>
c0008319:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000831e:	40                   	inc    eax
c000831f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008324:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000832a:	77 1b                	ja     c0008347 <ff_uni2oem+0x75>
c000832c:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008331:	01 c0                	add    eax,eax
c0008333:	89 c2                	mov    edx,eax
c0008335:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008339:	01 d0                	add    eax,edx
c000833b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000833e:	0f b7 c0             	movzx  eax,ax
c0008341:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008345:	75 d2                	jne    c0008319 <ff_uni2oem+0x47>
c0008347:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000834c:	83 e8 80             	sub    eax,0xffffff80
c000834f:	25 ff 00 00 00       	and    eax,0xff
c0008354:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008359:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000835e:	83 c4 14             	add    esp,0x14
c0008361:	c3                   	ret    

c0008362 <ff_oem2uni>:
c0008362:	83 ec 18             	sub    esp,0x18
c0008365:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008372:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008376:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000837d:	c7 44 24 10 60 61 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026160
c0008385:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000838b:	77 0b                	ja     c0008398 <ff_oem2uni+0x36>
c000838d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008391:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008396:	eb 2d                	jmp    c00083c5 <ff_oem2uni+0x63>
c0008398:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000839e:	75 25                	jne    c00083c5 <ff_oem2uni+0x63>
c00083a0:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00083a7:	77 1c                	ja     c00083c5 <ff_oem2uni+0x63>
c00083a9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00083ae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00083b3:	01 c0                	add    eax,eax
c00083b5:	89 c2                	mov    edx,eax
c00083b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083bb:	01 d0                	add    eax,edx
c00083bd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083c0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00083c5:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083ca:	83 c4 18             	add    esp,0x18
c00083cd:	c3                   	ret    

c00083ce <ff_wtoupper>:
c00083ce:	83 ec 10             	sub    esp,0x10
c00083d1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083d9:	0f 87 3e 01 00 00    	ja     c000851d <ff_wtoupper+0x14f>
c00083df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083e3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083e8:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083ef:	77 07                	ja     c00083f8 <ff_wtoupper+0x2a>
c00083f1:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c00083f6:	eb 05                	jmp    c00083fd <ff_wtoupper+0x2f>
c00083f8:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c00083fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008401:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008405:	8d 50 02             	lea    edx,[eax+0x2]
c0008408:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000840c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000840f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008414:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c000841a:	0f 84 f4 00 00 00    	je     c0008514 <ff_wtoupper+0x146>
c0008420:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008425:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c000842a:	0f 82 e4 00 00 00    	jb     c0008514 <ff_wtoupper+0x146>
c0008430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008434:	8d 50 02             	lea    edx,[eax+0x2]
c0008437:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000843b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000843e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008443:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008448:	66 c1 e8 08          	shr    ax,0x8
c000844c:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008451:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008458:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000845d:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008462:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008467:	01 ca                	add    edx,ecx
c0008469:	39 d0                	cmp    eax,edx
c000846b:	0f 8d 86 00 00 00    	jge    c00084f7 <ff_wtoupper+0x129>
c0008471:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008476:	83 f8 08             	cmp    eax,0x8
c0008479:	0f 87 94 00 00 00    	ja     c0008513 <ff_wtoupper+0x145>
c000847f:	8b 04 85 60 5e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda1a0]
c0008486:	ff e0                	jmp    eax
c0008488:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000848d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008492:	29 c2                	sub    edx,eax
c0008494:	89 d0                	mov    eax,edx
c0008496:	01 c0                	add    eax,eax
c0008498:	89 c2                	mov    edx,eax
c000849a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000849e:	01 d0                	add    eax,edx
c00084a0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084a3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00084a8:	eb 4b                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084aa:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084af:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00084b3:	83 e0 01             	and    eax,0x1
c00084b6:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00084bb:	eb 38                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084bd:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00084c3:	eb 30                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084c5:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084cb:	eb 28                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084cd:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084d3:	eb 20                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084d5:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084db:	eb 18                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084dd:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084e3:	eb 10                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084e5:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084eb:	eb 08                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084ed:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084f4:	90                   	nop
c00084f5:	eb 1c                	jmp    c0008513 <ff_wtoupper+0x145>
c00084f7:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084fd:	0f 85 fe fe ff ff    	jne    c0008401 <ff_wtoupper+0x33>
c0008503:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008508:	01 c0                	add    eax,eax
c000850a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000850e:	e9 ee fe ff ff       	jmp    c0008401 <ff_wtoupper+0x33>
c0008513:	90                   	nop
c0008514:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008519:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000851d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008521:	83 c4 10             	add    esp,0x10
c0008524:	c3                   	ret    

c0008525 <is_bad_src_ratio>:
c0008525:	83 ec 1c             	sub    esp,0x1c
c0008528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000852c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008530:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008538:	b8 00 00 00 00       	mov    eax,0x0
c000853d:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008542:	52                   	push   edx
c0008543:	50                   	push   eax
c0008544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008548:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000854c:	e8 de c8 01 00       	call   c0024e2f <__ltdf2>
c0008551:	83 c4 10             	add    esp,0x10
c0008554:	85 c0                	test   eax,eax
c0008556:	78 20                	js     c0008578 <is_bad_src_ratio+0x53>
c0008558:	b8 00 00 00 00       	mov    eax,0x0
c000855d:	ba 00 00 70 40       	mov    edx,0x40700000
c0008562:	52                   	push   edx
c0008563:	50                   	push   eax
c0008564:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008568:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000856c:	e8 a0 c8 01 00       	call   c0024e11 <__gtdf2>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	85 c0                	test   eax,eax
c0008576:	7e 07                	jle    c000857f <is_bad_src_ratio+0x5a>
c0008578:	b8 01 00 00 00       	mov    eax,0x1
c000857d:	eb 05                	jmp    c0008584 <is_bad_src_ratio+0x5f>
c000857f:	b8 00 00 00 00       	mov    eax,0x0
c0008584:	83 c4 1c             	add    esp,0x1c
c0008587:	c3                   	ret    

c0008588 <psrc_set_converter>:
c0008588:	56                   	push   esi
c0008589:	89 d6                	mov    esi,edx
c000858b:	53                   	push   ebx
c000858c:	89 c3                	mov    ebx,eax
c000858e:	83 ec 0c             	sub    esp,0xc
c0008591:	52                   	push   edx
c0008592:	50                   	push   eax
c0008593:	e8 58 51 00 00       	call   c000d6f0 <sinc_set_converter>
c0008598:	83 c4 10             	add    esp,0x10
c000859b:	85 c0                	test   eax,eax
c000859d:	74 25                	je     c00085c4 <psrc_set_converter+0x3c>
c000859f:	50                   	push   eax
c00085a0:	50                   	push   eax
c00085a1:	56                   	push   esi
c00085a2:	53                   	push   ebx
c00085a3:	e8 2a 59 00 00       	call   c000ded2 <zoh_set_converter>
c00085a8:	83 c4 10             	add    esp,0x10
c00085ab:	85 c0                	test   eax,eax
c00085ad:	74 15                	je     c00085c4 <psrc_set_converter+0x3c>
c00085af:	51                   	push   ecx
c00085b0:	51                   	push   ecx
c00085b1:	56                   	push   esi
c00085b2:	53                   	push   ebx
c00085b3:	e8 77 10 00 00       	call   c000962f <linear_set_converter>
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	ba 0a 00 00 00       	mov    edx,0xa
c00085c0:	85 c0                	test   eax,eax
c00085c2:	75 02                	jne    c00085c6 <psrc_set_converter+0x3e>
c00085c4:	31 d2                	xor    edx,edx
c00085c6:	89 d0                	mov    eax,edx
c00085c8:	5a                   	pop    edx
c00085c9:	5b                   	pop    ebx
c00085ca:	5e                   	pop    esi
c00085cb:	c3                   	ret    

c00085cc <src_delete>:
c00085cc:	53                   	push   ebx
c00085cd:	83 ec 08             	sub    esp,0x8
c00085d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085d4:	85 db                	test   ebx,ebx
c00085d6:	74 29                	je     c0008601 <src_delete+0x35>
c00085d8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085db:	85 c0                	test   eax,eax
c00085dd:	74 0c                	je     c00085eb <src_delete+0x1f>
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	50                   	push   eax
c00085e3:	e8 8e 6b 00 00       	call   c000f176 <free>
c00085e8:	83 c4 10             	add    esp,0x10
c00085eb:	50                   	push   eax
c00085ec:	6a 3c                	push   0x3c
c00085ee:	6a 00                	push   0x0
c00085f0:	53                   	push   ebx
c00085f1:	e8 f6 80 ff ff       	call   c00006ec <memset>
c00085f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085f9:	e8 78 6b 00 00       	call   c000f176 <free>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	31 c0                	xor    eax,eax
c0008603:	83 c4 08             	add    esp,0x8
c0008606:	5b                   	pop    ebx
c0008607:	c3                   	ret    

c0008608 <src_process>:
c0008608:	56                   	push   esi
c0008609:	53                   	push   ebx
c000860a:	83 ec 14             	sub    esp,0x14
c000860d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008611:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008615:	85 f6                	test   esi,esi
c0008617:	0f 84 2a 01 00 00    	je     c0008747 <src_process+0x13f>
c000861d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008621:	0f 84 27 01 00 00    	je     c000874e <src_process+0x146>
c0008627:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c000862b:	0f 84 1d 01 00 00    	je     c000874e <src_process+0x146>
c0008631:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008638:	0f 85 17 01 00 00    	jne    c0008755 <src_process+0x14d>
c000863e:	85 db                	test   ebx,ebx
c0008640:	0f 84 16 01 00 00    	je     c000875c <src_process+0x154>
c0008646:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008649:	0f 84 14 01 00 00    	je     c0008763 <src_process+0x15b>
c000864f:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008653:	0f 84 0a 01 00 00    	je     c0008763 <src_process+0x15b>
c0008659:	50                   	push   eax
c000865a:	50                   	push   eax
c000865b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000865e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008661:	e8 bf fe ff ff       	call   c0008525 <is_bad_src_ratio>
c0008666:	83 c4 10             	add    esp,0x10
c0008669:	85 c0                	test   eax,eax
c000866b:	0f 85 f9 00 00 00    	jne    c000876a <src_process+0x162>
c0008671:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008675:	79 07                	jns    c000867e <src_process+0x76>
c0008677:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000867e:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008682:	79 07                	jns    c000868b <src_process+0x83>
c0008684:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000868b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000868d:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008690:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008693:	39 ca                	cmp    edx,ecx
c0008695:	73 0b                	jae    c00086a2 <src_process+0x9a>
c0008697:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000869b:	8d 04 82             	lea    eax,[edx+eax*4]
c000869e:	39 c1                	cmp    ecx,eax
c00086a0:	eb 09                	jmp    c00086ab <src_process+0xa3>
c00086a2:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00086a6:	8d 04 81             	lea    eax,[ecx+eax*4]
c00086a9:	39 c2                	cmp    edx,eax
c00086ab:	0f 82 c0 00 00 00    	jb     c0008771 <src_process+0x169>
c00086b1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00086b8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00086bf:	68 00 00 70 3f       	push   0x3f700000
c00086c4:	6a 00                	push   0x0
c00086c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086c9:	ff 36                	push   DWORD PTR [esi]
c00086cb:	e8 5f c7 01 00       	call   c0024e2f <__ltdf2>
c00086d0:	83 c4 10             	add    esp,0x10
c00086d3:	85 c0                	test   eax,eax
c00086d5:	79 0b                	jns    c00086e2 <src_process+0xda>
c00086d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086da:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00086dd:	89 06                	mov    DWORD PTR [esi],eax
c00086df:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00086e2:	83 ec 10             	sub    esp,0x10
c00086e5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086e8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086ee:	ff 36                	push   DWORD PTR [esi]
c00086f0:	e8 3f be 01 00       	call   c0024534 <__subdf3>
c00086f5:	83 c4 18             	add    esp,0x18
c00086f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008700:	52                   	push   edx
c0008701:	50                   	push   eax
c0008702:	e8 b9 c8 01 00       	call   c0024fc0 <fabs>
c0008707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000870b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000870f:	83 c4 10             	add    esp,0x10
c0008712:	68 af 03 d2 3c       	push   0x3cd203af
c0008717:	68 16 56 e7 9e       	push   0x9ee75616
c000871c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008724:	e8 06 c7 01 00       	call   c0024e2f <__ltdf2>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	85 c0                	test   eax,eax
c000872e:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0008732:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008736:	79 05                	jns    c000873d <src_process+0x135>
c0008738:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000873b:	eb 03                	jmp    c0008740 <src_process+0x138>
c000873d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008740:	83 c4 14             	add    esp,0x14
c0008743:	5b                   	pop    ebx
c0008744:	5e                   	pop    esi
c0008745:	ff e0                	jmp    eax
c0008747:	b8 02 00 00 00       	mov    eax,0x2
c000874c:	eb 28                	jmp    c0008776 <src_process+0x16e>
c000874e:	b8 07 00 00 00       	mov    eax,0x7
c0008753:	eb 21                	jmp    c0008776 <src_process+0x16e>
c0008755:	b8 12 00 00 00       	mov    eax,0x12
c000875a:	eb 1a                	jmp    c0008776 <src_process+0x16e>
c000875c:	b8 03 00 00 00       	mov    eax,0x3
c0008761:	eb 13                	jmp    c0008776 <src_process+0x16e>
c0008763:	b8 04 00 00 00       	mov    eax,0x4
c0008768:	eb 0c                	jmp    c0008776 <src_process+0x16e>
c000876a:	b8 06 00 00 00       	mov    eax,0x6
c000876f:	eb 05                	jmp    c0008776 <src_process+0x16e>
c0008771:	b8 10 00 00 00       	mov    eax,0x10
c0008776:	83 c4 14             	add    esp,0x14
c0008779:	5b                   	pop    ebx
c000877a:	5e                   	pop    esi
c000877b:	c3                   	ret    

c000877c <src_callback_read>:
c000877c:	55                   	push   ebp
c000877d:	57                   	push   edi
c000877e:	56                   	push   esi
c000877f:	53                   	push   ebx
c0008780:	83 ec 3c             	sub    esp,0x3c
c0008783:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008787:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000878b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000878f:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008793:	85 ed                	test   ebp,ebp
c0008795:	0f 8e 30 01 00 00    	jle    c00088cb <src_callback_read+0x14f>
c000879b:	85 db                	test   ebx,ebx
c000879d:	0f 84 28 01 00 00    	je     c00088cb <src_callback_read+0x14f>
c00087a3:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00087aa:	74 0c                	je     c00087b8 <src_callback_read+0x3c>
c00087ac:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00087b3:	e9 13 01 00 00       	jmp    c00088cb <src_callback_read+0x14f>
c00087b8:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c00087bc:	75 0c                	jne    c00087ca <src_callback_read+0x4e>
c00087be:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00087c5:	e9 01 01 00 00       	jmp    c00088cb <src_callback_read+0x14f>
c00087ca:	51                   	push   ecx
c00087cb:	6a 24                	push   0x24
c00087cd:	6a 00                	push   0x0
c00087cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00087d3:	50                   	push   eax
c00087d4:	e8 13 7f ff ff       	call   c00006ec <memset>
c00087d9:	58                   	pop    eax
c00087da:	5a                   	pop    edx
c00087db:	57                   	push   edi
c00087dc:	56                   	push   esi
c00087dd:	e8 43 fd ff ff       	call   c0008525 <is_bad_src_ratio>
c00087e2:	83 c4 10             	add    esp,0x10
c00087e5:	85 c0                	test   eax,eax
c00087e7:	74 0c                	je     c00087f5 <src_callback_read+0x79>
c00087e9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087f0:	e9 d6 00 00 00       	jmp    c00088cb <src_callback_read+0x14f>
c00087f5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087f9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008801:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008805:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008808:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000880c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008810:	31 f6                	xor    esi,esi
c0008812:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008815:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008819:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000881e:	75 30                	jne    c0008850 <src_callback_read+0xd4>
c0008820:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008828:	52                   	push   edx
c0008829:	52                   	push   edx
c000882a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000882e:	50                   	push   eax
c000882f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008832:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008839:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000883d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008841:	83 c4 10             	add    esp,0x10
c0008844:	85 c0                	test   eax,eax
c0008846:	75 08                	jne    c0008850 <src_callback_read+0xd4>
c0008848:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008850:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008857:	50                   	push   eax
c0008858:	50                   	push   eax
c0008859:	8d 44 24 14          	lea    eax,[esp+0x14]
c000885d:	50                   	push   eax
c000885e:	53                   	push   ebx
c000885f:	e8 a4 fd ff ff       	call   c0008608 <src_process>
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000886e:	85 c0                	test   eax,eax
c0008870:	75 42                	jne    c00088b4 <src_callback_read+0x138>
c0008872:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008876:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008879:	89 f9                	mov    ecx,edi
c000887b:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c000887f:	0f af ca             	imul   ecx,edx
c0008882:	c1 e1 02             	shl    ecx,0x2
c0008885:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008889:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000888d:	0f af d1             	imul   edx,ecx
c0008890:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008894:	c1 e2 02             	shl    edx,0x2
c0008897:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000889b:	8d 14 31             	lea    edx,[ecx+esi*1]
c000889e:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00088a3:	75 04                	jne    c00088a9 <src_callback_read+0x12d>
c00088a5:	85 c9                	test   ecx,ecx
c00088a7:	74 0b                	je     c00088b4 <src_callback_read+0x138>
c00088a9:	39 d5                	cmp    ebp,edx
c00088ab:	7e 09                	jle    c00088b6 <src_callback_read+0x13a>
c00088ad:	89 d6                	mov    esi,edx
c00088af:	e9 65 ff ff ff       	jmp    c0008819 <src_callback_read+0x9d>
c00088b4:	89 f2                	mov    edx,esi
c00088b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00088ba:	85 c0                	test   eax,eax
c00088bc:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00088bf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00088c3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00088c6:	74 05                	je     c00088cd <src_callback_read+0x151>
c00088c8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088cb:	31 d2                	xor    edx,edx
c00088cd:	83 c4 3c             	add    esp,0x3c
c00088d0:	89 d0                	mov    eax,edx
c00088d2:	5b                   	pop    ebx
c00088d3:	5e                   	pop    esi
c00088d4:	5f                   	pop    edi
c00088d5:	5d                   	pop    ebp
c00088d6:	c3                   	ret    

c00088d7 <src_set_ratio>:
c00088d7:	57                   	push   edi
c00088d8:	b8 02 00 00 00       	mov    eax,0x2
c00088dd:	56                   	push   esi
c00088de:	53                   	push   ebx
c00088df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088eb:	85 db                	test   ebx,ebx
c00088ed:	74 2d                	je     c000891c <src_set_ratio+0x45>
c00088ef:	b8 07 00 00 00       	mov    eax,0x7
c00088f4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088f8:	74 22                	je     c000891c <src_set_ratio+0x45>
c00088fa:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088fe:	74 1c                	je     c000891c <src_set_ratio+0x45>
c0008900:	50                   	push   eax
c0008901:	50                   	push   eax
c0008902:	57                   	push   edi
c0008903:	56                   	push   esi
c0008904:	e8 1c fc ff ff       	call   c0008525 <is_bad_src_ratio>
c0008909:	83 c4 10             	add    esp,0x10
c000890c:	85 c0                	test   eax,eax
c000890e:	75 07                	jne    c0008917 <src_set_ratio+0x40>
c0008910:	89 33                	mov    DWORD PTR [ebx],esi
c0008912:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008915:	eb 05                	jmp    c000891c <src_set_ratio+0x45>
c0008917:	b8 06 00 00 00       	mov    eax,0x6
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	c3                   	ret    

c0008920 <src_get_channels>:
c0008920:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008924:	b8 02 00 00 00       	mov    eax,0x2
c0008929:	85 d2                	test   edx,edx
c000892b:	74 14                	je     c0008941 <src_get_channels+0x21>
c000892d:	b8 07 00 00 00       	mov    eax,0x7
c0008932:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008936:	74 09                	je     c0008941 <src_get_channels+0x21>
c0008938:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000893c:	74 03                	je     c0008941 <src_get_channels+0x21>
c000893e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008941:	c3                   	ret    

c0008942 <src_reset>:
c0008942:	53                   	push   ebx
c0008943:	b8 02 00 00 00       	mov    eax,0x2
c0008948:	83 ec 08             	sub    esp,0x8
c000894b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000894f:	85 db                	test   ebx,ebx
c0008951:	74 36                	je     c0008989 <src_reset+0x47>
c0008953:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008956:	85 c0                	test   eax,eax
c0008958:	74 09                	je     c0008963 <src_reset+0x21>
c000895a:	83 ec 0c             	sub    esp,0xc
c000895d:	53                   	push   ebx
c000895e:	ff d0                	call   eax
c0008960:	83 c4 10             	add    esp,0x10
c0008963:	31 c0                	xor    eax,eax
c0008965:	31 d2                	xor    edx,edx
c0008967:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000896a:	89 03                	mov    DWORD PTR [ebx],eax
c000896c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000896f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008972:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008979:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008987:	31 c0                	xor    eax,eax
c0008989:	83 c4 08             	add    esp,0x8
c000898c:	5b                   	pop    ebx
c000898d:	c3                   	ret    

c000898e <src_new>:
c000898e:	57                   	push   edi
c000898f:	56                   	push   esi
c0008990:	53                   	push   ebx
c0008991:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008995:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008999:	85 f6                	test   esi,esi
c000899b:	74 73                	je     c0008a10 <src_new+0x82>
c000899d:	85 ff                	test   edi,edi
c000899f:	7f 08                	jg     c00089a9 <src_new+0x1b>
c00089a1:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a7:	eb 1e                	jmp    c00089c7 <src_new+0x39>
c00089a9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089af:	50                   	push   eax
c00089b0:	50                   	push   eax
c00089b1:	6a 3c                	push   0x3c
c00089b3:	6a 01                	push   0x1
c00089b5:	e8 dc 67 00 00       	call   c000f196 <calloc>
c00089ba:	83 c4 10             	add    esp,0x10
c00089bd:	89 c3                	mov    ebx,eax
c00089bf:	85 c0                	test   eax,eax
c00089c1:	75 10                	jne    c00089d3 <src_new+0x45>
c00089c3:	85 f6                	test   esi,esi
c00089c5:	75 04                	jne    c00089cb <src_new+0x3d>
c00089c7:	31 db                	xor    ebx,ebx
c00089c9:	eb 4b                	jmp    c0008a16 <src_new+0x88>
c00089cb:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089d1:	eb 43                	jmp    c0008a16 <src_new+0x88>
c00089d3:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d6:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089e1:	e8 a2 fb ff ff       	call   c0008588 <psrc_set_converter>
c00089e6:	85 c0                	test   eax,eax
c00089e8:	74 18                	je     c0008a02 <src_new+0x74>
c00089ea:	85 f6                	test   esi,esi
c00089ec:	74 06                	je     c00089f4 <src_new+0x66>
c00089ee:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089f4:	83 ec 0c             	sub    esp,0xc
c00089f7:	53                   	push   ebx
c00089f8:	31 db                	xor    ebx,ebx
c00089fa:	e8 77 67 00 00       	call   c000f176 <free>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	83 ec 0c             	sub    esp,0xc
c0008a05:	53                   	push   ebx
c0008a06:	e8 37 ff ff ff       	call   c0008942 <src_reset>
c0008a0b:	83 c4 10             	add    esp,0x10
c0008a0e:	eb 06                	jmp    c0008a16 <src_new+0x88>
c0008a10:	85 ff                	test   edi,edi
c0008a12:	7f 9b                	jg     c00089af <src_new+0x21>
c0008a14:	eb b1                	jmp    c00089c7 <src_new+0x39>
c0008a16:	89 d8                	mov    eax,ebx
c0008a18:	5b                   	pop    ebx
c0008a19:	5e                   	pop    esi
c0008a1a:	5f                   	pop    edi
c0008a1b:	c3                   	ret    

c0008a1c <src_callback_new>:
c0008a1c:	56                   	push   esi
c0008a1d:	53                   	push   ebx
c0008a1e:	53                   	push   ebx
c0008a1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a27:	85 f6                	test   esi,esi
c0008a29:	75 0e                	jne    c0008a39 <src_callback_new+0x1d>
c0008a2b:	31 db                	xor    ebx,ebx
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	74 47                	je     c0008a78 <src_callback_new+0x5c>
c0008a31:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a37:	eb 3f                	jmp    c0008a78 <src_callback_new+0x5c>
c0008a39:	85 c0                	test   eax,eax
c0008a3b:	74 06                	je     c0008a43 <src_callback_new+0x27>
c0008a3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a43:	51                   	push   ecx
c0008a44:	50                   	push   eax
c0008a45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a4d:	e8 3c ff ff ff       	call   c000898e <src_new>
c0008a52:	83 c4 10             	add    esp,0x10
c0008a55:	89 c3                	mov    ebx,eax
c0008a57:	85 c0                	test   eax,eax
c0008a59:	74 1d                	je     c0008a78 <src_callback_new+0x5c>
c0008a5b:	83 ec 0c             	sub    esp,0xc
c0008a5e:	50                   	push   eax
c0008a5f:	e8 de fe ff ff       	call   c0008942 <src_reset>
c0008a64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a68:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a6f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a72:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a75:	83 c4 10             	add    esp,0x10
c0008a78:	89 d8                	mov    eax,ebx
c0008a7a:	5a                   	pop    edx
c0008a7b:	5b                   	pop    ebx
c0008a7c:	5e                   	pop    esi
c0008a7d:	c3                   	ret    

c0008a7e <src_get_name>:
c0008a7e:	53                   	push   ebx
c0008a7f:	83 ec 14             	sub    esp,0x14
c0008a82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a86:	53                   	push   ebx
c0008a87:	e8 3e 4c 00 00       	call   c000d6ca <sinc_get_name>
c0008a8c:	83 c4 10             	add    esp,0x10
c0008a8f:	85 c0                	test   eax,eax
c0008a91:	75 1d                	jne    c0008ab0 <src_get_name+0x32>
c0008a93:	83 ec 0c             	sub    esp,0xc
c0008a96:	53                   	push   ebx
c0008a97:	e8 18 54 00 00       	call   c000deb4 <zoh_get_name>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 0d                	jne    c0008ab0 <src_get_name+0x32>
c0008aa3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa7:	83 c4 08             	add    esp,0x8
c0008aaa:	5b                   	pop    ebx
c0008aab:	e9 61 0b 00 00       	jmp    c0009611 <linear_get_name>
c0008ab0:	83 c4 08             	add    esp,0x8
c0008ab3:	5b                   	pop    ebx
c0008ab4:	c3                   	ret    

c0008ab5 <src_get_description>:
c0008ab5:	53                   	push   ebx
c0008ab6:	83 ec 14             	sub    esp,0x14
c0008ab9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008abd:	53                   	push   ebx
c0008abe:	e8 1a 4c 00 00       	call   c000d6dd <sinc_get_description>
c0008ac3:	83 c4 10             	add    esp,0x10
c0008ac6:	85 c0                	test   eax,eax
c0008ac8:	75 1d                	jne    c0008ae7 <src_get_description+0x32>
c0008aca:	83 ec 0c             	sub    esp,0xc
c0008acd:	53                   	push   ebx
c0008ace:	e8 f0 53 00 00       	call   c000dec3 <zoh_get_description>
c0008ad3:	83 c4 10             	add    esp,0x10
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	75 0d                	jne    c0008ae7 <src_get_description+0x32>
c0008ada:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ade:	83 c4 08             	add    esp,0x8
c0008ae1:	5b                   	pop    ebx
c0008ae2:	e9 39 0b 00 00       	jmp    c0009620 <linear_get_description>
c0008ae7:	83 c4 08             	add    esp,0x8
c0008aea:	5b                   	pop    ebx
c0008aeb:	c3                   	ret    

c0008aec <src_get_version>:
c0008aec:	b8 60 62 02 c0       	mov    eax,0xc0026260
c0008af1:	c3                   	ret    

c0008af2 <src_is_valid_ratio>:
c0008af2:	83 ec 14             	sub    esp,0x14
c0008af5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008afd:	e8 23 fa ff ff       	call   c0008525 <is_bad_src_ratio>
c0008b02:	85 c0                	test   eax,eax
c0008b04:	0f 94 c0             	sete   al
c0008b07:	83 c4 1c             	add    esp,0x1c
c0008b0a:	0f b6 c0             	movzx  eax,al
c0008b0d:	c3                   	ret    

c0008b0e <src_error>:
c0008b0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b12:	31 c0                	xor    eax,eax
c0008b14:	85 d2                	test   edx,edx
c0008b16:	74 03                	je     c0008b1b <src_error+0xd>
c0008b18:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b1b:	c3                   	ret    

c0008b1c <src_strerror>:
c0008b1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b20:	31 c0                	xor    eax,eax
c0008b22:	83 fa 17             	cmp    edx,0x17
c0008b25:	77 07                	ja     c0008b2e <src_strerror+0x12>
c0008b27:	8b 04 95 c0 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9940]
c0008b2e:	c3                   	ret    

c0008b2f <src_simple>:
c0008b2f:	56                   	push   esi
c0008b30:	53                   	push   ebx
c0008b31:	83 ec 18             	sub    esp,0x18
c0008b34:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b38:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b3c:	50                   	push   eax
c0008b3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b45:	e8 44 fe ff ff       	call   c000898e <src_new>
c0008b4a:	83 c4 10             	add    esp,0x10
c0008b4d:	85 c0                	test   eax,eax
c0008b4f:	75 06                	jne    c0008b57 <src_simple+0x28>
c0008b51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b55:	eb 25                	jmp    c0008b7c <src_simple+0x4d>
c0008b57:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b5e:	89 c3                	mov    ebx,eax
c0008b60:	50                   	push   eax
c0008b61:	50                   	push   eax
c0008b62:	56                   	push   esi
c0008b63:	53                   	push   ebx
c0008b64:	e8 9f fa ff ff       	call   c0008608 <src_process>
c0008b69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b70:	e8 57 fa ff ff       	call   c00085cc <src_delete>
c0008b75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	83 c4 14             	add    esp,0x14
c0008b7f:	5b                   	pop    ebx
c0008b80:	5e                   	pop    esi
c0008b81:	c3                   	ret    

c0008b82 <src_short_to_float_array>:
c0008b82:	53                   	push   ebx
c0008b83:	83 ec 18             	sub    esp,0x18
c0008b86:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b8a:	85 db                	test   ebx,ebx
c0008b8c:	74 54                	je     c0008be2 <src_short_to_float_array+0x60>
c0008b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b92:	4b                   	dec    ebx
c0008b93:	83 ec 0c             	sub    esp,0xc
c0008b96:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b9a:	50                   	push   eax
c0008b9b:	e8 23 c0 01 00       	call   c0024bc3 <__floatsidf>
c0008ba0:	83 c4 10             	add    esp,0x10
c0008ba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bab:	68 00 00 00 3f       	push   0x3f000000
c0008bb0:	6a 00                	push   0x0
c0008bb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bba:	e8 a1 b9 01 00       	call   c0024560 <__muldf3>
c0008bbf:	59                   	pop    ecx
c0008bc0:	59                   	pop    ecx
c0008bc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bc5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bd1:	e8 5d c2 01 00       	call   c0024e33 <__truncdfsf2>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bdd:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008be0:	eb a8                	jmp    c0008b8a <src_short_to_float_array+0x8>
c0008be2:	83 c4 18             	add    esp,0x18
c0008be5:	5b                   	pop    ebx
c0008be6:	c3                   	ret    

c0008be7 <src_float_to_short_array>:
c0008be7:	56                   	push   esi
c0008be8:	53                   	push   ebx
c0008be9:	83 ec 14             	sub    esp,0x14
c0008bec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bf0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bf4:	85 db                	test   ebx,ebx
c0008bf6:	0f 84 a4 00 00 00    	je     c0008ca0 <src_float_to_short_array+0xb9>
c0008bfc:	83 ec 0c             	sub    esp,0xc
c0008bff:	4b                   	dec    ebx
c0008c00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c04:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c07:	e8 4b c3 01 00       	call   c0024f57 <__extendsfdf2>
c0008c0c:	83 c4 10             	add    esp,0x10
c0008c0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c17:	68 00 00 e0 41       	push   0x41e00000
c0008c1c:	6a 00                	push   0x0
c0008c1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c26:	e8 35 b9 01 00       	call   c0024560 <__muldf3>
c0008c2b:	83 c4 10             	add    esp,0x10
c0008c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c36:	68 ff ff df 41       	push   0x41dfffff
c0008c3b:	68 00 00 c0 ff       	push   0xffc00000
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c48:	e8 e0 c1 01 00       	call   c0024e2d <__gedf2>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	85 c0                	test   eax,eax
c0008c52:	78 08                	js     c0008c5c <src_float_to_short_array+0x75>
c0008c54:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c5a:	eb 98                	jmp    c0008bf4 <src_float_to_short_array+0xd>
c0008c5c:	68 00 00 e0 c1       	push   0xc1e00000
c0008c61:	6a 00                	push   0x0
c0008c63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6b:	e8 c1 c1 01 00       	call   c0024e31 <__ledf2>
c0008c70:	83 c4 10             	add    esp,0x10
c0008c73:	85 c0                	test   eax,eax
c0008c75:	7f 0b                	jg     c0008c82 <src_float_to_short_array+0x9b>
c0008c77:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c7d:	e9 72 ff ff ff       	jmp    c0008bf4 <src_float_to_short_array+0xd>
c0008c82:	50                   	push   eax
c0008c83:	50                   	push   eax
c0008c84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c8c:	e8 4f c3 01 00       	call   c0024fe0 <lrint>
c0008c91:	83 c4 10             	add    esp,0x10
c0008c94:	c1 f8 10             	sar    eax,0x10
c0008c97:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c9b:	e9 54 ff ff ff       	jmp    c0008bf4 <src_float_to_short_array+0xd>
c0008ca0:	83 c4 14             	add    esp,0x14
c0008ca3:	5b                   	pop    ebx
c0008ca4:	5e                   	pop    esi
c0008ca5:	c3                   	ret    

c0008ca6 <src_int_to_float_array>:
c0008ca6:	53                   	push   ebx
c0008ca7:	83 ec 18             	sub    esp,0x18
c0008caa:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cae:	85 db                	test   ebx,ebx
c0008cb0:	74 52                	je     c0008d04 <src_int_to_float_array+0x5e>
c0008cb2:	83 ec 0c             	sub    esp,0xc
c0008cb5:	4b                   	dec    ebx
c0008cb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cba:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cbd:	e8 01 bf 01 00       	call   c0024bc3 <__floatsidf>
c0008cc2:	83 c4 10             	add    esp,0x10
c0008cc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ccd:	68 00 00 00 3e       	push   0x3e000000
c0008cd2:	6a 00                	push   0x0
c0008cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cdc:	e8 7f b8 01 00       	call   c0024560 <__muldf3>
c0008ce1:	59                   	pop    ecx
c0008ce2:	59                   	pop    ecx
c0008ce3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cf3:	e8 3b c1 01 00       	call   c0024e33 <__truncdfsf2>
c0008cf8:	83 c4 10             	add    esp,0x10
c0008cfb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cff:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d02:	eb aa                	jmp    c0008cae <src_int_to_float_array+0x8>
c0008d04:	83 c4 18             	add    esp,0x18
c0008d07:	5b                   	pop    ebx
c0008d08:	c3                   	ret    

c0008d09 <src_float_to_int_array>:
c0008d09:	56                   	push   esi
c0008d0a:	53                   	push   ebx
c0008d0b:	83 ec 14             	sub    esp,0x14
c0008d0e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d12:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d16:	85 db                	test   ebx,ebx
c0008d18:	0f 84 a2 00 00 00    	je     c0008dc0 <src_float_to_int_array+0xb7>
c0008d1e:	83 ec 0c             	sub    esp,0xc
c0008d21:	4b                   	dec    ebx
c0008d22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d26:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d29:	e8 29 c2 01 00       	call   c0024f57 <__extendsfdf2>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d39:	68 00 00 e0 41       	push   0x41e00000
c0008d3e:	6a 00                	push   0x0
c0008d40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d48:	e8 13 b8 01 00       	call   c0024560 <__muldf3>
c0008d4d:	83 c4 10             	add    esp,0x10
c0008d50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d58:	68 ff ff df 41       	push   0x41dfffff
c0008d5d:	68 00 00 c0 ff       	push   0xffc00000
c0008d62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d6a:	e8 be c0 01 00       	call   c0024e2d <__gedf2>
c0008d6f:	83 c4 10             	add    esp,0x10
c0008d72:	85 c0                	test   eax,eax
c0008d74:	78 09                	js     c0008d7f <src_float_to_int_array+0x76>
c0008d76:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d7d:	eb 97                	jmp    c0008d16 <src_float_to_int_array+0xd>
c0008d7f:	68 00 00 e0 c1       	push   0xc1e00000
c0008d84:	6a 00                	push   0x0
c0008d86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d8e:	e8 9e c0 01 00       	call   c0024e31 <__ledf2>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	7f 0c                	jg     c0008da6 <src_float_to_int_array+0x9d>
c0008d9a:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008da1:	e9 70 ff ff ff       	jmp    c0008d16 <src_float_to_int_array+0xd>
c0008da6:	50                   	push   eax
c0008da7:	50                   	push   eax
c0008da8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008db0:	e8 2b c2 01 00       	call   c0024fe0 <lrint>
c0008db5:	83 c4 10             	add    esp,0x10
c0008db8:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008dbb:	e9 56 ff ff ff       	jmp    c0008d16 <src_float_to_int_array+0xd>
c0008dc0:	83 c4 14             	add    esp,0x14
c0008dc3:	5b                   	pop    ebx
c0008dc4:	5e                   	pop    esi
c0008dc5:	c3                   	ret    

c0008dc6 <is_bad_src_ratio>:
c0008dc6:	83 ec 1c             	sub    esp,0x1c
c0008dc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dd1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dd9:	b8 00 00 00 00       	mov    eax,0x0
c0008dde:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008de3:	52                   	push   edx
c0008de4:	50                   	push   eax
c0008de5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ded:	e8 3d c0 01 00       	call   c0024e2f <__ltdf2>
c0008df2:	83 c4 10             	add    esp,0x10
c0008df5:	85 c0                	test   eax,eax
c0008df7:	78 20                	js     c0008e19 <is_bad_src_ratio+0x53>
c0008df9:	b8 00 00 00 00       	mov    eax,0x0
c0008dfe:	ba 00 00 70 40       	mov    edx,0x40700000
c0008e03:	52                   	push   edx
c0008e04:	50                   	push   eax
c0008e05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0d:	e8 ff bf 01 00       	call   c0024e11 <__gtdf2>
c0008e12:	83 c4 10             	add    esp,0x10
c0008e15:	85 c0                	test   eax,eax
c0008e17:	7e 07                	jle    c0008e20 <is_bad_src_ratio+0x5a>
c0008e19:	b8 01 00 00 00       	mov    eax,0x1
c0008e1e:	eb 05                	jmp    c0008e25 <is_bad_src_ratio+0x5f>
c0008e20:	b8 00 00 00 00       	mov    eax,0x0
c0008e25:	83 c4 1c             	add    esp,0x1c
c0008e28:	c3                   	ret    

c0008e29 <fmod_one>:
c0008e29:	83 ec 2c             	sub    esp,0x2c
c0008e2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e3c:	83 ec 08             	sub    esp,0x8
c0008e3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e47:	e8 94 c1 01 00       	call   c0024fe0 <lrint>
c0008e4c:	83 c4 10             	add    esp,0x10
c0008e4f:	83 ec 0c             	sub    esp,0xc
c0008e52:	50                   	push   eax
c0008e53:	e8 6b bd 01 00       	call   c0024bc3 <__floatsidf>
c0008e58:	83 c4 10             	add    esp,0x10
c0008e5b:	52                   	push   edx
c0008e5c:	50                   	push   eax
c0008e5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e65:	e8 ca b6 01 00       	call   c0024534 <__subdf3>
c0008e6a:	83 c4 10             	add    esp,0x10
c0008e6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e75:	b8 00 00 00 00       	mov    eax,0x0
c0008e7a:	ba 00 00 00 00       	mov    edx,0x0
c0008e7f:	52                   	push   edx
c0008e80:	50                   	push   eax
c0008e81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e89:	e8 a1 bf 01 00       	call   c0024e2f <__ltdf2>
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	85 c0                	test   eax,eax
c0008e93:	79 1e                	jns    c0008eb3 <fmod_one+0x8a>
c0008e95:	b8 00 00 00 00       	mov    eax,0x0
c0008e9a:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e9f:	52                   	push   edx
c0008ea0:	50                   	push   eax
c0008ea1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008ea5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008ea9:	e8 35 b0 01 00       	call   c0023ee3 <__adddf3>
c0008eae:	83 c4 10             	add    esp,0x10
c0008eb1:	eb 08                	jmp    c0008ebb <fmod_one+0x92>
c0008eb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008eb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ebb:	83 c4 2c             	add    esp,0x2c
c0008ebe:	c3                   	ret    

c0008ebf <linear_vari_process>:
c0008ebf:	55                   	push   ebp
c0008ec0:	57                   	push   edi
c0008ec1:	56                   	push   esi
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 3c             	sub    esp,0x3c
c0008ec6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008eca:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008ed2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ed6:	0f 8e f7 06 00 00    	jle    c00095d3 <linear_vari_process+0x714>
c0008edc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ee0:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008ee8:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008eeb:	85 db                	test   ebx,ebx
c0008eed:	0f 84 e0 06 00 00    	je     c00095d3 <linear_vari_process+0x714>
c0008ef3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ef6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008efa:	74 19                	je     c0008f15 <linear_vari_process+0x56>
c0008efc:	31 d2                	xor    edx,edx
c0008efe:	39 c2                	cmp    edx,eax
c0008f00:	7d 0c                	jge    c0008f0e <linear_vari_process+0x4f>
c0008f02:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008f04:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008f07:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008f0b:	42                   	inc    edx
c0008f0c:	eb f0                	jmp    c0008efe <linear_vari_process+0x3f>
c0008f0e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f15:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f18:	0f af d0             	imul   edx,eax
c0008f1b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f1e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f22:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f29:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f2c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f33:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f37:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f3c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f44:	57                   	push   edi
c0008f45:	57                   	push   edi
c0008f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f4e:	e8 73 fe ff ff       	call   c0008dc6 <is_bad_src_ratio>
c0008f53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008f57:	83 c4 10             	add    esp,0x10
c0008f5a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008f5f:	0f 85 66 06 00 00    	jne    c00095cb <linear_vari_process+0x70c>
c0008f65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f69:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008f6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f77:	68 00 00 f0 3f       	push   0x3ff00000
c0008f7c:	6a 00                	push   0x0
c0008f7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f86:	e8 a4 be 01 00       	call   c0024e2f <__ltdf2>
c0008f8b:	83 c4 10             	add    esp,0x10
c0008f8e:	85 c0                	test   eax,eax
c0008f90:	0f 89 89 02 00 00    	jns    c000921f <linear_vari_process+0x360>
c0008f96:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f99:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f9c:	0f 8d 7d 02 00 00    	jge    c000921f <linear_vari_process+0x360>
c0008fa2:	83 ec 0c             	sub    esp,0xc
c0008fa5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008fa8:	e8 16 bc 01 00       	call   c0024bc3 <__floatsidf>
c0008fad:	83 c4 10             	add    esp,0x10
c0008fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fb3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fb7:	68 00 00 f0 3f       	push   0x3ff00000
c0008fbc:	6a 00                	push   0x0
c0008fbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc6:	e8 18 af 01 00       	call   c0023ee3 <__adddf3>
c0008fcb:	83 c4 10             	add    esp,0x10
c0008fce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fd2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fd6:	52                   	push   edx
c0008fd7:	50                   	push   eax
c0008fd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe0:	e8 7b b5 01 00       	call   c0024560 <__muldf3>
c0008fe5:	5d                   	pop    ebp
c0008fe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008fee:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008ff1:	e8 cd bb 01 00       	call   c0024bc3 <__floatsidf>
c0008ff6:	83 c4 10             	add    esp,0x10
c0008ff9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ffd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009001:	52                   	push   edx
c0009002:	50                   	push   eax
c0009003:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009007:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000900b:	e8 d3 ae 01 00       	call   c0023ee3 <__adddf3>
c0009010:	59                   	pop    ecx
c0009011:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009015:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009019:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000901c:	e8 a2 bb 01 00       	call   c0024bc3 <__floatsidf>
c0009021:	83 c4 10             	add    esp,0x10
c0009024:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009028:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000902c:	52                   	push   edx
c000902d:	50                   	push   eax
c000902e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009036:	e8 f2 bd 01 00       	call   c0024e2d <__gedf2>
c000903b:	83 c4 10             	add    esp,0x10
c000903e:	85 c0                	test   eax,eax
c0009040:	0f 89 d9 01 00 00    	jns    c000921f <linear_vari_process+0x360>
c0009046:	85 ff                	test   edi,edi
c0009048:	0f 8e f4 00 00 00    	jle    c0009142 <linear_vari_process+0x283>
c000904e:	83 ec 10             	sub    esp,0x10
c0009051:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009054:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009057:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000905b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000905e:	ff 30                	push   DWORD PTR [eax]
c0009060:	e8 cf b4 01 00       	call   c0024534 <__subdf3>
c0009065:	83 c4 18             	add    esp,0x18
c0009068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000906c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009070:	52                   	push   edx
c0009071:	50                   	push   eax
c0009072:	e8 49 bf 01 00       	call   c0024fc0 <fabs>
c0009077:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000907b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009087:	68 23 42 92 0c       	push   0xc924223
c000908c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009090:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009094:	e8 78 bd 01 00       	call   c0024e11 <__gtdf2>
c0009099:	83 c4 10             	add    esp,0x10
c000909c:	85 c0                	test   eax,eax
c000909e:	0f 8e 9e 00 00 00    	jle    c0009142 <linear_vari_process+0x283>
c00090a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b4:	52                   	push   edx
c00090b5:	50                   	push   eax
c00090b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00090b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00090bc:	e8 73 b4 01 00       	call   c0024534 <__subdf3>
c00090c1:	59                   	pop    ecx
c00090c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090c6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00090cd:	e8 f1 ba 01 00       	call   c0024bc3 <__floatsidf>
c00090d2:	83 c4 10             	add    esp,0x10
c00090d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090dd:	52                   	push   edx
c00090de:	50                   	push   eax
c00090df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	e8 74 b4 01 00       	call   c0024560 <__muldf3>
c00090ec:	5f                   	pop    edi
c00090ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00090f8:	e8 c6 ba 01 00       	call   c0024bc3 <__floatsidf>
c00090fd:	83 c4 10             	add    esp,0x10
c0009100:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009104:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009108:	52                   	push   edx
c0009109:	50                   	push   eax
c000910a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 2d b7 01 00       	call   c0024844 <__divdf3>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000911e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009122:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009126:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009132:	e8 ac ad 01 00       	call   c0023ee3 <__adddf3>
c0009137:	83 c4 10             	add    esp,0x10
c000913a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000913e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009142:	31 ff                	xor    edi,edi
c0009144:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009147:	0f 8e 9d 00 00 00    	jle    c00091ea <linear_vari_process+0x32b>
c000914d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009150:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009154:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009157:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000915b:	89 04 24             	mov    DWORD PTR [esp],eax
c000915e:	8b 06                	mov    eax,DWORD PTR [esi]
c0009160:	52                   	push   edx
c0009161:	52                   	push   edx
c0009162:	55                   	push   ebp
c0009163:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009166:	47                   	inc    edi
c0009167:	e8 0c a7 01 00       	call   c0023878 <__subsf3>
c000916c:	89 04 24             	mov    DWORD PTR [esp],eax
c000916f:	e8 e3 bd 01 00       	call   c0024f57 <__extendsfdf2>
c0009174:	83 c4 10             	add    esp,0x10
c0009177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000917b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009183:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009187:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000918b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000918f:	e8 cc b3 01 00       	call   c0024560 <__muldf3>
c0009194:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009197:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000919b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000919f:	e8 b3 bd 01 00       	call   c0024f57 <__extendsfdf2>
c00091a4:	83 c4 10             	add    esp,0x10
c00091a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091ab:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091af:	52                   	push   edx
c00091b0:	50                   	push   eax
c00091b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b9:	e8 25 ad 01 00       	call   c0023ee3 <__adddf3>
c00091be:	59                   	pop    ecx
c00091bf:	5d                   	pop    ebp
c00091c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091c4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091d0:	e8 5e bc 01 00       	call   c0024e33 <__truncdfsf2>
c00091d5:	83 c4 10             	add    esp,0x10
c00091d8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00091db:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00091df:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00091e2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00091e5:	e9 5a ff ff ff       	jmp    c0009144 <linear_vari_process+0x285>
c00091ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f2:	68 00 00 f0 3f       	push   0x3ff00000
c00091f7:	6a 00                	push   0x0
c00091f9:	e8 46 b6 01 00       	call   c0024844 <__divdf3>
c00091fe:	83 c4 10             	add    esp,0x10
c0009201:	89 04 24             	mov    DWORD PTR [esp],eax
c0009204:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009208:	52                   	push   edx
c0009209:	50                   	push   eax
c000920a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000920e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009212:	e8 cc ac 01 00       	call   c0023ee3 <__adddf3>
c0009217:	83 c4 10             	add    esp,0x10
c000921a:	e9 50 fd ff ff       	jmp    c0008f6f <linear_vari_process+0xb0>
c000921f:	50                   	push   eax
c0009220:	50                   	push   eax
c0009221:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009229:	e8 fb fb ff ff       	call   c0008e29 <fmod_one>
c000922e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009231:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009235:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009239:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009241:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009245:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009249:	e8 e6 b2 01 00       	call   c0024534 <__subdf3>
c000924e:	83 c4 18             	add    esp,0x18
c0009251:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009255:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009259:	52                   	push   edx
c000925a:	50                   	push   eax
c000925b:	e8 80 bd 01 00       	call   c0024fe0 <lrint>
c0009260:	83 c4 10             	add    esp,0x10
c0009263:	0f af f8             	imul   edi,eax
c0009266:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009269:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000926c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000926f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009272:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009275:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009279:	0f 8d b4 02 00 00    	jge    c0009533 <linear_vari_process+0x674>
c000927f:	83 ec 0c             	sub    esp,0xc
c0009282:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009285:	e8 39 b9 01 00       	call   c0024bc3 <__floatsidf>
c000928a:	83 c4 10             	add    esp,0x10
c000928d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009291:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009295:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009299:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a5:	e8 b6 b2 01 00       	call   c0024560 <__muldf3>
c00092aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00092ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b5:	e8 09 b9 01 00       	call   c0024bc3 <__floatsidf>
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c5:	52                   	push   edx
c00092c6:	50                   	push   eax
c00092c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092cf:	e8 0f ac 01 00       	call   c0023ee3 <__adddf3>
c00092d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092df:	e8 df b8 01 00       	call   c0024bc3 <__floatsidf>
c00092e4:	83 c4 10             	add    esp,0x10
c00092e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ef:	52                   	push   edx
c00092f0:	50                   	push   eax
c00092f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f9:	e8 31 bb 01 00       	call   c0024e2f <__ltdf2>
c00092fe:	83 c4 10             	add    esp,0x10
c0009301:	85 c0                	test   eax,eax
c0009303:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009307:	0f 89 26 02 00 00    	jns    c0009533 <linear_vari_process+0x674>
c000930d:	85 c9                	test   ecx,ecx
c000930f:	0f 8e f5 00 00 00    	jle    c000940a <linear_vari_process+0x54b>
c0009315:	83 ec 10             	sub    esp,0x10
c0009318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000931b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000931e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009322:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009325:	ff 30                	push   DWORD PTR [eax]
c0009327:	e8 08 b2 01 00       	call   c0024534 <__subdf3>
c000932c:	83 c4 18             	add    esp,0x18
c000932f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009333:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009337:	52                   	push   edx
c0009338:	50                   	push   eax
c0009339:	e8 82 bc 01 00       	call   c0024fc0 <fabs>
c000933e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009342:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009346:	83 c4 10             	add    esp,0x10
c0009349:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000934e:	68 23 42 92 0c       	push   0xc924223
c0009353:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009357:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935b:	e8 b1 ba 01 00       	call   c0024e11 <__gtdf2>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	85 c0                	test   eax,eax
c0009365:	0f 8e 9f 00 00 00    	jle    c000940a <linear_vari_process+0x54b>
c000936b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000936f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009372:	8b 00                	mov    eax,DWORD PTR [eax]
c0009374:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000937c:	52                   	push   edx
c000937d:	50                   	push   eax
c000937e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009381:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009384:	e8 ab b1 01 00       	call   c0024534 <__subdf3>
c0009389:	5f                   	pop    edi
c000938a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000938e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009392:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009395:	e8 29 b8 01 00       	call   c0024bc3 <__floatsidf>
c000939a:	83 c4 10             	add    esp,0x10
c000939d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093a5:	52                   	push   edx
c00093a6:	50                   	push   eax
c00093a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093af:	e8 ac b1 01 00       	call   c0024560 <__muldf3>
c00093b4:	5d                   	pop    ebp
c00093b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093b9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00093bd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00093c0:	e8 fe b7 01 00       	call   c0024bc3 <__floatsidf>
c00093c5:	83 c4 10             	add    esp,0x10
c00093c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d0:	52                   	push   edx
c00093d1:	50                   	push   eax
c00093d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093da:	e8 65 b4 01 00       	call   c0024844 <__divdf3>
c00093df:	83 c4 10             	add    esp,0x10
c00093e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093fa:	e8 e4 aa 01 00       	call   c0023ee3 <__adddf3>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009406:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000940a:	31 ff                	xor    edi,edi
c000940c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000940f:	39 f8                	cmp    eax,edi
c0009411:	0f 8e ac 00 00 00    	jle    c00094c3 <linear_vari_process+0x604>
c0009417:	8b 16                	mov    edx,DWORD PTR [esi]
c0009419:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000941c:	29 c1                	sub    ecx,eax
c000941e:	89 c8                	mov    eax,ecx
c0009420:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009423:	01 f8                	add    eax,edi
c0009425:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009429:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000942c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000942f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009433:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009436:	51                   	push   ecx
c0009437:	01 f8                	add    eax,edi
c0009439:	51                   	push   ecx
c000943a:	47                   	inc    edi
c000943b:	55                   	push   ebp
c000943c:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000943f:	e8 34 a4 01 00       	call   c0023878 <__subsf3>
c0009444:	89 04 24             	mov    DWORD PTR [esp],eax
c0009447:	e8 0b bb 01 00       	call   c0024f57 <__extendsfdf2>
c000944c:	83 c4 10             	add    esp,0x10
c000944f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009453:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009457:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000945b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000945f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009463:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009467:	e8 f4 b0 01 00       	call   c0024560 <__muldf3>
c000946c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009473:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009477:	e8 db ba 01 00       	call   c0024f57 <__extendsfdf2>
c000947c:	83 c4 10             	add    esp,0x10
c000947f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009483:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009487:	52                   	push   edx
c0009488:	50                   	push   eax
c0009489:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000948d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009491:	e8 4d aa 01 00       	call   c0023ee3 <__adddf3>
c0009496:	5d                   	pop    ebp
c0009497:	59                   	pop    ecx
c0009498:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000949c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a8:	e8 86 b9 01 00       	call   c0024e33 <__truncdfsf2>
c00094ad:	83 c4 10             	add    esp,0x10
c00094b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00094b4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00094b8:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00094bb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00094be:	e9 49 ff ff ff       	jmp    c000940c <linear_vari_process+0x54d>
c00094c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094cb:	68 00 00 f0 3f       	push   0x3ff00000
c00094d0:	6a 00                	push   0x0
c00094d2:	e8 6d b3 01 00       	call   c0024844 <__divdf3>
c00094d7:	83 c4 10             	add    esp,0x10
c00094da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094e2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094e6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f2:	e8 ec a9 01 00       	call   c0023ee3 <__adddf3>
c00094f7:	59                   	pop    ecx
c00094f8:	5f                   	pop    edi
c00094f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094fd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009509:	e8 1b f9 ff ff       	call   c0008e29 <fmod_one>
c000950e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009511:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009515:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000951d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009521:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009525:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009529:	e8 06 b0 01 00       	call   c0024534 <__subdf3>
c000952e:	e9 1b fd ff ff       	jmp    c000924e <linear_vari_process+0x38f>
c0009533:	39 fd                	cmp    ebp,edi
c0009535:	7d 38                	jge    c000956f <linear_vari_process+0x6b0>
c0009537:	83 ec 0c             	sub    esp,0xc
c000953a:	89 f8                	mov    eax,edi
c000953c:	29 e8                	sub    eax,ebp
c000953e:	99                   	cdq    
c000953f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009542:	50                   	push   eax
c0009543:	e8 7b b6 01 00       	call   c0024bc3 <__floatsidf>
c0009548:	83 c4 10             	add    esp,0x10
c000954b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000954f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009553:	52                   	push   edx
c0009554:	50                   	push   eax
c0009555:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009559:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000955d:	e8 81 a9 01 00       	call   c0023ee3 <__adddf3>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009568:	89 04 24             	mov    DWORD PTR [esp],eax
c000956b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000956f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009573:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009576:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000957a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000957d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009580:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009583:	85 c0                	test   eax,eax
c0009585:	7f 27                	jg     c00095ae <linear_vari_process+0x6ef>
c0009587:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000958b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000958f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009593:	89 01                	mov    DWORD PTR [ecx],eax
c0009595:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009598:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000959b:	99                   	cdq    
c000959c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000959f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095a5:	99                   	cdq    
c00095a6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095a9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095ac:	eb 25                	jmp    c00095d3 <linear_vari_process+0x714>
c00095ae:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095b1:	31 d2                	xor    edx,edx
c00095b3:	29 c8                	sub    eax,ecx
c00095b5:	c1 e0 02             	shl    eax,0x2
c00095b8:	39 d1                	cmp    ecx,edx
c00095ba:	7e cb                	jle    c0009587 <linear_vari_process+0x6c8>
c00095bc:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095be:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095c1:	83 c0 04             	add    eax,0x4
c00095c4:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095c8:	42                   	inc    edx
c00095c9:	eb ed                	jmp    c00095b8 <linear_vari_process+0x6f9>
c00095cb:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c00095d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095d7:	83 c4 3c             	add    esp,0x3c
c00095da:	5b                   	pop    ebx
c00095db:	5e                   	pop    esi
c00095dc:	5f                   	pop    edi
c00095dd:	5d                   	pop    ebp
c00095de:	c3                   	ret    

c00095df <linear_reset>:
c00095df:	83 ec 0c             	sub    esp,0xc
c00095e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095e6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095e9:	85 c0                	test   eax,eax
c00095eb:	74 20                	je     c000960d <linear_reset+0x2e>
c00095ed:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095f0:	83 c0 1c             	add    eax,0x1c
c00095f3:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095f6:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095fd:	c1 e2 02             	shl    edx,0x2
c0009600:	51                   	push   ecx
c0009601:	52                   	push   edx
c0009602:	6a 00                	push   0x0
c0009604:	50                   	push   eax
c0009605:	e8 e2 70 ff ff       	call   c00006ec <memset>
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	83 c4 0c             	add    esp,0xc
c0009610:	c3                   	ret    

c0009611 <linear_get_name>:
c0009611:	31 c0                	xor    eax,eax
c0009613:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009618:	75 05                	jne    c000961f <linear_get_name+0xe>
c000961a:	b8 20 67 02 c0       	mov    eax,0xc0026720
c000961f:	c3                   	ret    

c0009620 <linear_get_description>:
c0009620:	31 c0                	xor    eax,eax
c0009622:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009627:	75 05                	jne    c000962e <linear_get_description+0xe>
c0009629:	b8 34 67 02 c0       	mov    eax,0xc0026734
c000962e:	c3                   	ret    

c000962f <linear_set_converter>:
c000962f:	53                   	push   ebx
c0009630:	b8 0a 00 00 00       	mov    eax,0xa
c0009635:	83 ec 08             	sub    esp,0x8
c0009638:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000963c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009641:	75 6e                	jne    c00096b1 <linear_set_converter+0x82>
c0009643:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009646:	85 c0                	test   eax,eax
c0009648:	74 13                	je     c000965d <linear_set_converter+0x2e>
c000964a:	83 ec 0c             	sub    esp,0xc
c000964d:	50                   	push   eax
c000964e:	e8 23 5b 00 00       	call   c000f176 <free>
c0009653:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000965a:	83 c4 10             	add    esp,0x10
c000965d:	50                   	push   eax
c000965e:	50                   	push   eax
c000965f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009662:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009669:	50                   	push   eax
c000966a:	6a 01                	push   0x1
c000966c:	e8 25 5b 00 00       	call   c000f196 <calloc>
c0009671:	83 c4 10             	add    esp,0x10
c0009674:	89 c2                	mov    edx,eax
c0009676:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009679:	85 d2                	test   edx,edx
c000967b:	b8 01 00 00 00       	mov    eax,0x1
c0009680:	74 2f                	je     c00096b1 <linear_set_converter+0x82>
c0009682:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009685:	83 ec 0c             	sub    esp,0xc
c0009688:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000968b:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009691:	c7 43 24 bf 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ebf
c0009698:	c7 43 20 bf 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ebf
c000969f:	c7 43 28 df 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095df
c00096a6:	53                   	push   ebx
c00096a7:	e8 33 ff ff ff       	call   c00095df <linear_reset>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	31 c0                	xor    eax,eax
c00096b1:	83 c4 08             	add    esp,0x8
c00096b4:	5b                   	pop    ebx
c00096b5:	c3                   	ret    

c00096b6 <is_bad_src_ratio>:
c00096b6:	83 ec 1c             	sub    esp,0x1c
c00096b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00096bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00096c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096c9:	b8 00 00 00 00       	mov    eax,0x0
c00096ce:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00096d3:	52                   	push   edx
c00096d4:	50                   	push   eax
c00096d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096dd:	e8 4d b7 01 00       	call   c0024e2f <__ltdf2>
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	85 c0                	test   eax,eax
c00096e7:	78 20                	js     c0009709 <is_bad_src_ratio+0x53>
c00096e9:	b8 00 00 00 00       	mov    eax,0x0
c00096ee:	ba 00 00 70 40       	mov    edx,0x40700000
c00096f3:	52                   	push   edx
c00096f4:	50                   	push   eax
c00096f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fd:	e8 0f b7 01 00       	call   c0024e11 <__gtdf2>
c0009702:	83 c4 10             	add    esp,0x10
c0009705:	85 c0                	test   eax,eax
c0009707:	7e 07                	jle    c0009710 <is_bad_src_ratio+0x5a>
c0009709:	b8 01 00 00 00       	mov    eax,0x1
c000970e:	eb 05                	jmp    c0009715 <is_bad_src_ratio+0x5f>
c0009710:	b8 00 00 00 00       	mov    eax,0x0
c0009715:	83 c4 1c             	add    esp,0x1c
c0009718:	c3                   	ret    

c0009719 <int_to_fp>:
c0009719:	c1 e0 0c             	shl    eax,0xc
c000971c:	c3                   	ret    

c000971d <fp_to_int>:
c000971d:	c1 f8 0c             	sar    eax,0xc
c0009720:	c3                   	ret    

c0009721 <fp_fraction_part>:
c0009721:	25 ff 0f 00 00       	and    eax,0xfff
c0009726:	c3                   	ret    

c0009727 <fp_to_double>:
c0009727:	83 ec 1c             	sub    esp,0x1c
c000972a:	e8 f2 ff ff ff       	call   c0009721 <fp_fraction_part>
c000972f:	83 ec 0c             	sub    esp,0xc
c0009732:	50                   	push   eax
c0009733:	e8 8b b4 01 00       	call   c0024bc3 <__floatsidf>
c0009738:	83 c4 10             	add    esp,0x10
c000973b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000973f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009743:	68 00 00 30 3f       	push   0x3f300000
c0009748:	6a 00                	push   0x0
c000974a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009752:	e8 09 ae 01 00       	call   c0024560 <__muldf3>
c0009757:	83 c4 2c             	add    esp,0x2c
c000975a:	c3                   	ret    

c000975b <calc_output_single>:
c000975b:	55                   	push   ebp
c000975c:	57                   	push   edi
c000975d:	56                   	push   esi
c000975e:	89 c6                	mov    esi,eax
c0009760:	53                   	push   ebx
c0009761:	89 d3                	mov    ebx,edx
c0009763:	83 ec 4c             	sub    esp,0x4c
c0009766:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000976a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000976d:	e8 a7 ff ff ff       	call   c0009719 <int_to_fp>
c0009772:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009775:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009779:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000977d:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009781:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009784:	99                   	cdq    
c0009785:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000978d:	f7 fb                	idiv   ebx
c000978f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009797:	89 da                	mov    edx,ebx
c0009799:	0f af d0             	imul   edx,eax
c000979c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00097a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00097a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00097a8:	29 c2                	sub    edx,eax
c00097aa:	8d 2c 96             	lea    ebp,[esi+edx*4]
c00097ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097b1:	83 c5 04             	add    ebp,0x4
c00097b4:	e8 6e ff ff ff       	call   c0009727 <fp_to_double>
c00097b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c5:	e8 53 ff ff ff       	call   c000971d <fp_to_int>
c00097ca:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00097cd:	52                   	push   edx
c00097ce:	52                   	push   edx
c00097cf:	51                   	push   ecx
c00097d0:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00097d4:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00097d8:	e8 9b a0 01 00       	call   c0023878 <__subsf3>
c00097dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00097e0:	e8 72 b7 01 00       	call   c0024f57 <__extendsfdf2>
c00097e5:	83 c4 10             	add    esp,0x10
c00097e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009800:	e8 5b ad 01 00       	call   c0024560 <__muldf3>
c0009805:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009809:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000980d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009810:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009814:	e8 3e b7 01 00       	call   c0024f57 <__extendsfdf2>
c0009819:	83 c4 10             	add    esp,0x10
c000981c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009820:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009824:	52                   	push   edx
c0009825:	50                   	push   eax
c0009826:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000982a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000982e:	e8 b0 a6 01 00       	call   c0023ee3 <__adddf3>
c0009833:	59                   	pop    ecx
c0009834:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009838:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000983c:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009842:	e8 10 b7 01 00       	call   c0024f57 <__extendsfdf2>
c0009847:	83 c4 10             	add    esp,0x10
c000984a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000984e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009852:	52                   	push   edx
c0009853:	50                   	push   eax
c0009854:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009858:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000985c:	e8 ff ac 01 00       	call   c0024560 <__muldf3>
c0009861:	83 c4 10             	add    esp,0x10
c0009864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009868:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000986c:	52                   	push   edx
c000986d:	50                   	push   eax
c000986e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009876:	e8 68 a6 01 00       	call   c0023ee3 <__adddf3>
c000987b:	83 c4 10             	add    esp,0x10
c000987e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009882:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009886:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c000988a:	0f 89 1d ff ff ff    	jns    c00097ad <calc_output_single+0x52>
c0009890:	89 d9                	mov    ecx,ebx
c0009892:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009896:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000989a:	89 dd                	mov    ebp,ebx
c000989c:	29 c8                	sub    eax,ecx
c000989e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00098a6:	99                   	cdq    
c00098a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00098af:	f7 fb                	idiv   ebx
c00098b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00098b5:	0f af e8             	imul   ebp,eax
c00098b8:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c00098bc:	01 cd                	add    ebp,ecx
c00098be:	8d 34 86             	lea    esi,[esi+eax*4]
c00098c1:	89 e8                	mov    eax,ebp
c00098c3:	83 ee 04             	sub    esi,0x4
c00098c6:	e8 5c fe ff ff       	call   c0009727 <fp_to_double>
c00098cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098d3:	89 e8                	mov    eax,ebp
c00098d5:	29 dd                	sub    ebp,ebx
c00098d7:	e8 41 fe ff ff       	call   c000971d <fp_to_int>
c00098dc:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00098df:	52                   	push   edx
c00098e0:	52                   	push   edx
c00098e1:	51                   	push   ecx
c00098e2:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098e6:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098ea:	e8 89 9f 01 00       	call   c0023878 <__subsf3>
c00098ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00098f2:	e8 60 b6 01 00       	call   c0024f57 <__extendsfdf2>
c00098f7:	83 c4 10             	add    esp,0x10
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000990a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000990e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009912:	e8 49 ac 01 00       	call   c0024560 <__muldf3>
c0009917:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000991b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000991f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009922:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009926:	e8 2c b6 01 00       	call   c0024f57 <__extendsfdf2>
c000992b:	83 c4 10             	add    esp,0x10
c000992e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009932:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009936:	52                   	push   edx
c0009937:	50                   	push   eax
c0009938:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000993c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009940:	e8 9e a5 01 00       	call   c0023ee3 <__adddf3>
c0009945:	59                   	pop    ecx
c0009946:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000994a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000994e:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009954:	e8 fe b5 01 00       	call   c0024f57 <__extendsfdf2>
c0009959:	83 c4 10             	add    esp,0x10
c000995c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009960:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009964:	52                   	push   edx
c0009965:	50                   	push   eax
c0009966:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000996a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000996e:	e8 ed ab 01 00       	call   c0024560 <__muldf3>
c0009973:	83 c4 10             	add    esp,0x10
c0009976:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000997a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000997e:	52                   	push   edx
c000997f:	50                   	push   eax
c0009980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009988:	e8 56 a5 01 00       	call   c0023ee3 <__adddf3>
c000998d:	83 c4 10             	add    esp,0x10
c0009990:	85 ed                	test   ebp,ebp
c0009992:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009996:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000999a:	0f 8f 21 ff ff ff    	jg     c00098c1 <calc_output_single+0x166>
c00099a0:	52                   	push   edx
c00099a1:	50                   	push   eax
c00099a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099aa:	e8 34 a5 01 00       	call   c0023ee3 <__adddf3>
c00099af:	83 c4 5c             	add    esp,0x5c
c00099b2:	5b                   	pop    ebx
c00099b3:	5e                   	pop    esi
c00099b4:	5f                   	pop    edi
c00099b5:	5d                   	pop    ebp
c00099b6:	c3                   	ret    

c00099b7 <calc_output_stereo>:
c00099b7:	55                   	push   ebp
c00099b8:	89 cd                	mov    ebp,ecx
c00099ba:	57                   	push   edi
c00099bb:	56                   	push   esi
c00099bc:	53                   	push   ebx
c00099bd:	89 c3                	mov    ebx,eax
c00099bf:	83 ec 6c             	sub    esp,0x6c
c00099c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00099cd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00099d4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00099d8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00099dc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099df:	e8 35 fd ff ff       	call   c0009719 <int_to_fp>
c00099e4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099f0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099f8:	29 c8                	sub    eax,ecx
c00099fa:	99                   	cdq    
c00099fb:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a03:	0f af d0             	imul   edx,eax
c0009a06:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009a09:	31 d2                	xor    edx,edx
c0009a0b:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009a0f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009a13:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009a16:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009a1a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009a1d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009a21:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009a25:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009a28:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009a2d:	29 c1                	sub    ecx,eax
c0009a2f:	31 c0                	xor    eax,eax
c0009a31:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009a34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a3c:	83 c7 08             	add    edi,0x8
c0009a3f:	e8 e3 fc ff ff       	call   c0009727 <fp_to_double>
c0009a44:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a48:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a50:	e8 c8 fc ff ff       	call   c000971d <fp_to_int>
c0009a55:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a58:	52                   	push   edx
c0009a59:	52                   	push   edx
c0009a5a:	51                   	push   ecx
c0009a5b:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a5f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a63:	e8 10 9e 01 00       	call   c0023878 <__subsf3>
c0009a68:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a6b:	e8 e7 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009a70:	83 c4 10             	add    esp,0x10
c0009a73:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a77:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a87:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a8b:	e8 d0 aa 01 00       	call   c0024560 <__muldf3>
c0009a90:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a94:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a98:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a9b:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a9f:	e8 b3 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009aa4:	83 c4 10             	add    esp,0x10
c0009aa7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aab:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aaf:	52                   	push   edx
c0009ab0:	50                   	push   eax
c0009ab1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009ab5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009ab9:	e8 25 a4 01 00       	call   c0023ee3 <__adddf3>
c0009abe:	59                   	pop    ecx
c0009abf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009ac3:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009ac7:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009acd:	e8 85 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009ad2:	83 c4 10             	add    esp,0x10
c0009ad5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009add:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ae1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ae5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aed:	e8 6e aa 01 00       	call   c0024560 <__muldf3>
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009af9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009afd:	52                   	push   edx
c0009afe:	50                   	push   eax
c0009aff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b07:	e8 d7 a3 01 00       	call   c0023ee3 <__adddf3>
c0009b0c:	59                   	pop    ecx
c0009b0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b11:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009b15:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009b1b:	e8 37 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009b20:	83 c4 10             	add    esp,0x10
c0009b23:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009b27:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009b2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b2f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b33:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b37:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b3b:	e8 20 aa 01 00       	call   c0024560 <__muldf3>
c0009b40:	83 c4 10             	add    esp,0x10
c0009b43:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b47:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b4b:	52                   	push   edx
c0009b4c:	50                   	push   eax
c0009b4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b55:	e8 89 a3 01 00       	call   c0023ee3 <__adddf3>
c0009b5a:	83 c4 10             	add    esp,0x10
c0009b5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b65:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b69:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b6d:	0f 89 c5 fe ff ff    	jns    c0009a38 <calc_output_stereo+0x81>
c0009b73:	29 e9                	sub    ecx,ebp
c0009b75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b79:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b7d:	29 c8                	sub    eax,ecx
c0009b7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b87:	99                   	cdq    
c0009b88:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b8c:	31 d2                	xor    edx,edx
c0009b8e:	0f af f8             	imul   edi,eax
c0009b91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b95:	40                   	inc    eax
c0009b96:	01 cf                	add    edi,ecx
c0009b98:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b9d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009ba1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009ba9:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009bac:	31 c0                	xor    eax,eax
c0009bae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009bb2:	89 f8                	mov    eax,edi
c0009bb4:	83 eb 08             	sub    ebx,0x8
c0009bb7:	e8 6b fb ff ff       	call   c0009727 <fp_to_double>
c0009bbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bc4:	89 f8                	mov    eax,edi
c0009bc6:	e8 52 fb ff ff       	call   c000971d <fp_to_int>
c0009bcb:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009bce:	52                   	push   edx
c0009bcf:	52                   	push   edx
c0009bd0:	55                   	push   ebp
c0009bd1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bd5:	e8 9e 9c 01 00       	call   c0023878 <__subsf3>
c0009bda:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bdd:	e8 75 b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009be2:	83 c4 10             	add    esp,0x10
c0009be5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009be9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bfd:	e8 5e a9 01 00       	call   c0024560 <__muldf3>
c0009c02:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009c05:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009c09:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009c0d:	e8 45 b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009c12:	83 c4 10             	add    esp,0x10
c0009c15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c1d:	52                   	push   edx
c0009c1e:	50                   	push   eax
c0009c1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c27:	e8 b7 a2 01 00       	call   c0023ee3 <__adddf3>
c0009c2c:	59                   	pop    ecx
c0009c2d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009c31:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009c35:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009c3b:	e8 17 b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009c40:	83 c4 10             	add    esp,0x10
c0009c43:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c47:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c53:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c5b:	e8 00 a9 01 00       	call   c0024560 <__muldf3>
c0009c60:	83 c4 10             	add    esp,0x10
c0009c63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c6b:	52                   	push   edx
c0009c6c:	50                   	push   eax
c0009c6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c75:	e8 69 a2 01 00       	call   c0023ee3 <__adddf3>
c0009c7a:	5d                   	pop    ebp
c0009c7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c7f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c83:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c89:	e8 c9 b2 01 00       	call   c0024f57 <__extendsfdf2>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c95:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ca1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca9:	e8 b2 a8 01 00       	call   c0024560 <__muldf3>
c0009cae:	83 c4 10             	add    esp,0x10
c0009cb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009cb5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009cb9:	52                   	push   edx
c0009cba:	50                   	push   eax
c0009cbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009cbf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009cc3:	e8 1b a2 01 00       	call   c0023ee3 <__adddf3>
c0009cc8:	83 c4 10             	add    esp,0x10
c0009ccb:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009ccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009cd7:	85 ff                	test   edi,edi
c0009cd9:	0f 8f d3 fe ff ff    	jg     c0009bb2 <calc_output_stereo+0x1fb>
c0009cdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cef:	e8 ef a1 01 00       	call   c0023ee3 <__adddf3>
c0009cf4:	83 c4 10             	add    esp,0x10
c0009cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0f:	e8 4c a8 01 00       	call   c0024560 <__muldf3>
c0009d14:	59                   	pop    ecx
c0009d15:	5b                   	pop    ebx
c0009d16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d26:	e8 08 b1 01 00       	call   c0024e33 <__truncdfsf2>
c0009d2b:	83 c4 10             	add    esp,0x10
c0009d2e:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009d35:	89 03                	mov    DWORD PTR [ebx],eax
c0009d37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d47:	e8 97 a1 01 00       	call   c0023ee3 <__adddf3>
c0009d4c:	83 c4 10             	add    esp,0x10
c0009d4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 f4 a7 01 00       	call   c0024560 <__muldf3>
c0009d6c:	5e                   	pop    esi
c0009d6d:	5f                   	pop    edi
c0009d6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d7e:	e8 b0 b0 01 00       	call   c0024e33 <__truncdfsf2>
c0009d83:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d8a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d8d:	83 c4 7c             	add    esp,0x7c
c0009d90:	5b                   	pop    ebx
c0009d91:	5e                   	pop    esi
c0009d92:	5f                   	pop    edi
c0009d93:	5d                   	pop    ebp
c0009d94:	c3                   	ret    

c0009d95 <calc_output_quad>:
c0009d95:	55                   	push   ebp
c0009d96:	57                   	push   edi
c0009d97:	56                   	push   esi
c0009d98:	89 c6                	mov    esi,eax
c0009d9a:	53                   	push   ebx
c0009d9b:	83 ec 7c             	sub    esp,0x7c
c0009d9e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009da2:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009da6:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009dad:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009db4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dbc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009dbf:	e8 55 f9 ff ff       	call   c0009719 <int_to_fp>
c0009dc4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009dc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009dca:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009dce:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009dd2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009dd6:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009dda:	99                   	cdq    
c0009ddb:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009ddf:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009de3:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009de6:	31 d2                	xor    edx,edx
c0009de8:	0f af d8             	imul   ebx,eax
c0009deb:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009df3:	0f af c7             	imul   eax,edi
c0009df6:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009dfa:	29 c1                	sub    ecx,eax
c0009dfc:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009e04:	31 c0                	xor    eax,eax
c0009e06:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009e09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e0d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e15:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009e1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009e21:	89 d8                	mov    eax,ebx
c0009e23:	83 c7 10             	add    edi,0x10
c0009e26:	e8 fc f8 ff ff       	call   c0009727 <fp_to_double>
c0009e2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e33:	89 d8                	mov    eax,ebx
c0009e35:	e8 e3 f8 ff ff       	call   c000971d <fp_to_int>
c0009e3a:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	51                   	push   ecx
c0009e41:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e45:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e49:	e8 2a 9a 01 00       	call   c0023878 <__subsf3>
c0009e4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e51:	e8 01 b1 01 00       	call   c0024f57 <__extendsfdf2>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e5d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e71:	e8 ea a6 01 00       	call   c0024560 <__muldf3>
c0009e76:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e85:	e8 cd b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009e8a:	83 c4 10             	add    esp,0x10
c0009e8d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e91:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e95:	52                   	push   edx
c0009e96:	50                   	push   eax
c0009e97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9f:	e8 3f a0 01 00       	call   c0023ee3 <__adddf3>
c0009ea4:	59                   	pop    ecx
c0009ea5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ea9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ead:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009eb3:	e8 9f b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009eb8:	83 c4 10             	add    esp,0x10
c0009ebb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ecb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ed3:	e8 88 a6 01 00       	call   c0024560 <__muldf3>
c0009ed8:	83 c4 10             	add    esp,0x10
c0009edb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009edf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ee3:	52                   	push   edx
c0009ee4:	50                   	push   eax
c0009ee5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eed:	e8 f1 9f 01 00       	call   c0023ee3 <__adddf3>
c0009ef2:	59                   	pop    ecx
c0009ef3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ef7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009efb:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009f01:	e8 51 b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f19:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f21:	e8 3a a6 01 00       	call   c0024560 <__muldf3>
c0009f26:	83 c4 10             	add    esp,0x10
c0009f29:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f2d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f31:	52                   	push   edx
c0009f32:	50                   	push   eax
c0009f33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f3b:	e8 a3 9f 01 00       	call   c0023ee3 <__adddf3>
c0009f40:	59                   	pop    ecx
c0009f41:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f45:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f49:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f4f:	e8 03 b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009f54:	83 c4 10             	add    esp,0x10
c0009f57:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f5b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f67:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f6b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f6f:	e8 ec a5 01 00       	call   c0024560 <__muldf3>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f7b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f7f:	52                   	push   edx
c0009f80:	50                   	push   eax
c0009f81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f89:	e8 55 9f 01 00       	call   c0023ee3 <__adddf3>
c0009f8e:	59                   	pop    ecx
c0009f8f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f93:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f97:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f9d:	e8 b5 af 01 00       	call   c0024f57 <__extendsfdf2>
c0009fa2:	83 c4 10             	add    esp,0x10
c0009fa5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fa9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fb5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fb9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fbd:	e8 9e a5 01 00       	call   c0024560 <__muldf3>
c0009fc2:	83 c4 10             	add    esp,0x10
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fcd:	52                   	push   edx
c0009fce:	50                   	push   eax
c0009fcf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fd7:	e8 07 9f 01 00       	call   c0023ee3 <__adddf3>
c0009fdc:	83 c4 10             	add    esp,0x10
c0009fdf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fe3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fe7:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009feb:	0f 89 30 fe ff ff    	jns    c0009e21 <calc_output_quad+0x8c>
c0009ff1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009ff5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ff9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ffd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a001:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a009:	29 c8                	sub    eax,ecx
c000a00b:	99                   	cdq    
c000a00c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a010:	31 d2                	xor    edx,edx
c000a012:	0f af d8             	imul   ebx,eax
c000a015:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a019:	40                   	inc    eax
c000a01a:	01 cb                	add    ebx,ecx
c000a01c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a021:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a025:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a029:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a02d:	8d 34 86             	lea    esi,[esi+eax*4]
c000a030:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a038:	31 c0                	xor    eax,eax
c000a03a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a03e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a042:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a046:	89 d8                	mov    eax,ebx
c000a048:	83 ee 10             	sub    esi,0x10
c000a04b:	e8 d7 f6 ff ff       	call   c0009727 <fp_to_double>
c000a050:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a054:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a058:	89 d8                	mov    eax,ebx
c000a05a:	e8 be f6 ff ff       	call   c000971d <fp_to_int>
c000a05f:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a063:	52                   	push   edx
c000a064:	52                   	push   edx
c000a065:	57                   	push   edi
c000a066:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a06a:	e8 09 98 01 00       	call   c0023878 <__subsf3>
c000a06f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a072:	e8 e0 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a077:	83 c4 10             	add    esp,0x10
c000a07a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a07e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a08e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a092:	e8 c9 a4 01 00       	call   c0024560 <__muldf3>
c000a097:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a09a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a09e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a0a2:	e8 b0 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a0a7:	83 c4 10             	add    esp,0x10
c000a0aa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ae:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b2:	52                   	push   edx
c000a0b3:	50                   	push   eax
c000a0b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0bc:	e8 22 9e 01 00       	call   c0023ee3 <__adddf3>
c000a0c1:	59                   	pop    ecx
c000a0c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a0c6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a0ca:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a0d0:	e8 82 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a0d5:	83 c4 10             	add    esp,0x10
c000a0d8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0dc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ec:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f0:	e8 6b a4 01 00       	call   c0024560 <__muldf3>
c000a0f5:	83 c4 10             	add    esp,0x10
c000a0f8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a100:	52                   	push   edx
c000a101:	50                   	push   eax
c000a102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a106:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a10a:	e8 d4 9d 01 00       	call   c0023ee3 <__adddf3>
c000a10f:	5f                   	pop    edi
c000a110:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a114:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a118:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a11e:	e8 34 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a12a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a136:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13e:	e8 1d a4 01 00       	call   c0024560 <__muldf3>
c000a143:	83 c4 10             	add    esp,0x10
c000a146:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a14e:	52                   	push   edx
c000a14f:	50                   	push   eax
c000a150:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a154:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a158:	e8 86 9d 01 00       	call   c0023ee3 <__adddf3>
c000a15d:	59                   	pop    ecx
c000a15e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a162:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a166:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a16c:	e8 e6 ad 01 00       	call   c0024f57 <__extendsfdf2>
c000a171:	83 c4 10             	add    esp,0x10
c000a174:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a178:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a184:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a188:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a18c:	e8 cf a3 01 00       	call   c0024560 <__muldf3>
c000a191:	83 c4 10             	add    esp,0x10
c000a194:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a198:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a19c:	52                   	push   edx
c000a19d:	50                   	push   eax
c000a19e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1a6:	e8 38 9d 01 00       	call   c0023ee3 <__adddf3>
c000a1ab:	5f                   	pop    edi
c000a1ac:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a1b0:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a1b4:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a1ba:	e8 98 ad 01 00       	call   c0024f57 <__extendsfdf2>
c000a1bf:	83 c4 10             	add    esp,0x10
c000a1c2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a1c6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1da:	e8 81 a3 01 00       	call   c0024560 <__muldf3>
c000a1df:	83 c4 10             	add    esp,0x10
c000a1e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ea:	52                   	push   edx
c000a1eb:	50                   	push   eax
c000a1ec:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1f0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1f4:	e8 ea 9c 01 00       	call   c0023ee3 <__adddf3>
c000a1f9:	83 c4 10             	add    esp,0x10
c000a1fc:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a200:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a204:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a208:	85 db                	test   ebx,ebx
c000a20a:	0f 8f 36 fe ff ff    	jg     c000a046 <calc_output_quad+0x2b1>
c000a210:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a214:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a218:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a21c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a220:	e8 be 9c 01 00       	call   c0023ee3 <__adddf3>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a230:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a240:	e8 1b a3 01 00       	call   c0024560 <__muldf3>
c000a245:	59                   	pop    ecx
c000a246:	5b                   	pop    ebx
c000a247:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a24b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a24f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a257:	e8 d7 ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a266:	89 06                	mov    DWORD PTR [esi],eax
c000a268:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a26c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a270:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a274:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a278:	e8 66 9c 01 00       	call   c0023ee3 <__adddf3>
c000a27d:	83 c4 10             	add    esp,0x10
c000a280:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a284:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a288:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a290:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a298:	e8 c3 a2 01 00       	call   c0024560 <__muldf3>
c000a29d:	5e                   	pop    esi
c000a29e:	5f                   	pop    edi
c000a29f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	e8 7f ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a2b4:	83 c4 10             	add    esp,0x10
c000a2b7:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2be:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a2c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2d1:	e8 0d 9c 01 00       	call   c0023ee3 <__adddf3>
c000a2d6:	83 c4 10             	add    esp,0x10
c000a2d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f1:	e8 6a a2 01 00       	call   c0024560 <__muldf3>
c000a2f6:	5d                   	pop    ebp
c000a2f7:	59                   	pop    ecx
c000a2f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a300:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a304:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a308:	e8 26 ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a30d:	83 c4 10             	add    esp,0x10
c000a310:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a317:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a31a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a31e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a322:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a326:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a32a:	e8 b4 9b 01 00       	call   c0023ee3 <__adddf3>
c000a32f:	83 c4 10             	add    esp,0x10
c000a332:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a336:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a33a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a33e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a346:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a34a:	e8 11 a2 01 00       	call   c0024560 <__muldf3>
c000a34f:	5b                   	pop    ebx
c000a350:	5e                   	pop    esi
c000a351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a355:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a35d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a361:	e8 cd aa 01 00       	call   c0024e33 <__truncdfsf2>
c000a366:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a36d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a370:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a376:	5b                   	pop    ebx
c000a377:	5e                   	pop    esi
c000a378:	5f                   	pop    edi
c000a379:	5d                   	pop    ebp
c000a37a:	c3                   	ret    

c000a37b <calc_output_hex>:
c000a37b:	55                   	push   ebp
c000a37c:	89 cd                	mov    ebp,ecx
c000a37e:	57                   	push   edi
c000a37f:	56                   	push   esi
c000a380:	53                   	push   ebx
c000a381:	89 c3                	mov    ebx,eax
c000a383:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a389:	89 14 24             	mov    DWORD PTR [esp],edx
c000a38c:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a393:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a39a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a39e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a3a5:	e8 6f f3 ff ff       	call   c0009719 <int_to_fp>
c000a3aa:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a3ad:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3b1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a3b4:	29 c8                	sub    eax,ecx
c000a3b6:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a3ba:	99                   	cdq    
c000a3bb:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a3c3:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a3c6:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a3ce:	0f af f8             	imul   edi,eax
c000a3d1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a3d4:	01 cf                	add    edi,ecx
c000a3d6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a3da:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a3dd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3e1:	0f af c2             	imul   eax,edx
c000a3e4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3e8:	29 c1                	sub    ecx,eax
c000a3ea:	31 d2                	xor    edx,edx
c000a3ec:	31 c0                	xor    eax,eax
c000a3ee:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a401:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a405:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a409:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a40d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a419:	89 f8                	mov    eax,edi
c000a41b:	e8 07 f3 ff ff       	call   c0009727 <fp_to_double>
c000a420:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a424:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a428:	89 f8                	mov    eax,edi
c000a42a:	e8 ee f2 ff ff       	call   c000971d <fp_to_int>
c000a42f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a433:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a436:	52                   	push   edx
c000a437:	52                   	push   edx
c000a438:	51                   	push   ecx
c000a439:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a43d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a444:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a448:	e8 2b 94 01 00       	call   c0023878 <__subsf3>
c000a44d:	89 04 24             	mov    DWORD PTR [esp],eax
c000a450:	e8 02 ab 01 00       	call   c0024f57 <__extendsfdf2>
c000a455:	83 c4 10             	add    esp,0x10
c000a458:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a45c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a464:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a468:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a46c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a470:	e8 eb a0 01 00       	call   c0024560 <__muldf3>
c000a475:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a479:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a47d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a480:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a484:	e8 ce aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a489:	83 c4 10             	add    esp,0x10
c000a48c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a490:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a494:	52                   	push   edx
c000a495:	50                   	push   eax
c000a496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a49e:	e8 40 9a 01 00       	call   c0023ee3 <__adddf3>
c000a4a3:	59                   	pop    ecx
c000a4a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a4a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a4ac:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a4b2:	e8 a0 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a4b7:	83 c4 10             	add    esp,0x10
c000a4ba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4be:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ce:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4d2:	e8 89 a0 01 00       	call   c0024560 <__muldf3>
c000a4d7:	83 c4 10             	add    esp,0x10
c000a4da:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4de:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4e2:	52                   	push   edx
c000a4e3:	50                   	push   eax
c000a4e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4ec:	e8 f2 99 01 00       	call   c0023ee3 <__adddf3>
c000a4f1:	59                   	pop    ecx
c000a4f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4f6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4fa:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a500:	e8 52 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a505:	83 c4 10             	add    esp,0x10
c000a508:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a510:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a514:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a518:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a520:	e8 3b a0 01 00       	call   c0024560 <__muldf3>
c000a525:	83 c4 10             	add    esp,0x10
c000a528:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a52c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a530:	52                   	push   edx
c000a531:	50                   	push   eax
c000a532:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a536:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a53a:	e8 a4 99 01 00       	call   c0023ee3 <__adddf3>
c000a53f:	59                   	pop    ecx
c000a540:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a544:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a548:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a54e:	e8 04 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a553:	83 c4 10             	add    esp,0x10
c000a556:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a55a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a566:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56e:	e8 ed 9f 01 00       	call   c0024560 <__muldf3>
c000a573:	83 c4 10             	add    esp,0x10
c000a576:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a57a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a57e:	52                   	push   edx
c000a57f:	50                   	push   eax
c000a580:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a584:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a588:	e8 56 99 01 00       	call   c0023ee3 <__adddf3>
c000a58d:	59                   	pop    ecx
c000a58e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a592:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a596:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a59c:	e8 b6 a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a5a1:	83 c4 10             	add    esp,0x10
c000a5a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5bc:	e8 9f 9f 01 00       	call   c0024560 <__muldf3>
c000a5c1:	83 c4 10             	add    esp,0x10
c000a5c4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5cc:	52                   	push   edx
c000a5cd:	50                   	push   eax
c000a5ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5d6:	e8 08 99 01 00       	call   c0023ee3 <__adddf3>
c000a5db:	59                   	pop    ecx
c000a5dc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a5e0:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5e4:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5ea:	e8 68 a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a5ef:	83 c4 10             	add    esp,0x10
c000a5f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a602:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a606:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a60a:	e8 51 9f 01 00       	call   c0024560 <__muldf3>
c000a60f:	83 c4 10             	add    esp,0x10
c000a612:	83 c6 18             	add    esi,0x18
c000a615:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a619:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61d:	52                   	push   edx
c000a61e:	50                   	push   eax
c000a61f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a623:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a627:	e8 b7 98 01 00       	call   c0023ee3 <__adddf3>
c000a62c:	59                   	pop    ecx
c000a62d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a631:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a635:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a63b:	e8 17 a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a640:	83 c4 10             	add    esp,0x10
c000a643:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a647:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a653:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a657:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a65b:	e8 00 9f 01 00       	call   c0024560 <__muldf3>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a667:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a66b:	52                   	push   edx
c000a66c:	50                   	push   eax
c000a66d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a671:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a675:	e8 69 98 01 00       	call   c0023ee3 <__adddf3>
c000a67a:	83 c4 10             	add    esp,0x10
c000a67d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a681:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a685:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a688:	0f 89 8b fd ff ff    	jns    c000a419 <calc_output_hex+0x9e>
c000a68e:	31 f6                	xor    esi,esi
c000a690:	31 ff                	xor    edi,edi
c000a692:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a696:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a699:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a69d:	29 e9                	sub    ecx,ebp
c000a69f:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a6a3:	29 c8                	sub    eax,ecx
c000a6a5:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a6a8:	99                   	cdq    
c000a6a9:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a6ad:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a6b0:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a6b4:	0f af e8             	imul   ebp,eax
c000a6b7:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a6bb:	40                   	inc    eax
c000a6bc:	01 cd                	add    ebp,ecx
c000a6be:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a6c3:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a6c7:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6cb:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a6cf:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a6d2:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a6d6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a6da:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a6de:	89 e8                	mov    eax,ebp
c000a6e0:	e8 42 f0 ff ff       	call   c0009727 <fp_to_double>
c000a6e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6ed:	89 e8                	mov    eax,ebp
c000a6ef:	e8 29 f0 ff ff       	call   c000971d <fp_to_int>
c000a6f4:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6f8:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6fb:	52                   	push   edx
c000a6fc:	52                   	push   edx
c000a6fd:	51                   	push   ecx
c000a6fe:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a705:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a70c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a710:	e8 63 91 01 00       	call   c0023878 <__subsf3>
c000a715:	89 04 24             	mov    DWORD PTR [esp],eax
c000a718:	e8 3a a8 01 00       	call   c0024f57 <__extendsfdf2>
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a724:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a728:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a730:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a734:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a738:	e8 23 9e 01 00       	call   c0024560 <__muldf3>
c000a73d:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a744:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a748:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a74b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a74f:	e8 03 a8 01 00       	call   c0024f57 <__extendsfdf2>
c000a754:	83 c4 10             	add    esp,0x10
c000a757:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a75b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a75f:	52                   	push   edx
c000a760:	50                   	push   eax
c000a761:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a769:	e8 75 97 01 00       	call   c0023ee3 <__adddf3>
c000a76e:	59                   	pop    ecx
c000a76f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a773:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a777:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a77d:	e8 d5 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a789:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a795:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a799:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a79d:	e8 be 9d 01 00       	call   c0024560 <__muldf3>
c000a7a2:	83 c4 10             	add    esp,0x10
c000a7a5:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ad:	52                   	push   edx
c000a7ae:	50                   	push   eax
c000a7af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7b7:	e8 27 97 01 00       	call   c0023ee3 <__adddf3>
c000a7bc:	59                   	pop    ecx
c000a7bd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a7c1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a7c5:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a7cb:	e8 87 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7eb:	e8 70 9d 01 00       	call   c0024560 <__muldf3>
c000a7f0:	83 c4 10             	add    esp,0x10
c000a7f3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7fb:	52                   	push   edx
c000a7fc:	50                   	push   eax
c000a7fd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a801:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a805:	e8 d9 96 01 00       	call   c0023ee3 <__adddf3>
c000a80a:	59                   	pop    ecx
c000a80b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a80f:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a813:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a819:	e8 39 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a81e:	83 c4 10             	add    esp,0x10
c000a821:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a825:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a831:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a835:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a839:	e8 22 9d 01 00       	call   c0024560 <__muldf3>
c000a83e:	83 c4 10             	add    esp,0x10
c000a841:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a845:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a849:	52                   	push   edx
c000a84a:	50                   	push   eax
c000a84b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a84f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a853:	e8 8b 96 01 00       	call   c0023ee3 <__adddf3>
c000a858:	59                   	pop    ecx
c000a859:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a85d:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a861:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a867:	e8 eb a6 01 00       	call   c0024f57 <__extendsfdf2>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a873:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a877:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a883:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a887:	e8 d4 9c 01 00       	call   c0024560 <__muldf3>
c000a88c:	83 c4 10             	add    esp,0x10
c000a88f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a893:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a897:	52                   	push   edx
c000a898:	50                   	push   eax
c000a899:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a89d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a8a1:	e8 3d 96 01 00       	call   c0023ee3 <__adddf3>
c000a8a6:	59                   	pop    ecx
c000a8a7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a8ab:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a8af:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a8b5:	e8 9d a6 01 00       	call   c0024f57 <__extendsfdf2>
c000a8ba:	83 c4 10             	add    esp,0x10
c000a8bd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8cd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d5:	e8 86 9c 01 00       	call   c0024560 <__muldf3>
c000a8da:	83 c4 10             	add    esp,0x10
c000a8dd:	83 eb 18             	sub    ebx,0x18
c000a8e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e8:	52                   	push   edx
c000a8e9:	50                   	push   eax
c000a8ea:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8ee:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8f2:	e8 ec 95 01 00       	call   c0023ee3 <__adddf3>
c000a8f7:	59                   	pop    ecx
c000a8f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8fc:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a900:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a906:	e8 4c a6 01 00       	call   c0024f57 <__extendsfdf2>
c000a90b:	83 c4 10             	add    esp,0x10
c000a90e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a912:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a916:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a922:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a926:	e8 35 9c 01 00       	call   c0024560 <__muldf3>
c000a92b:	83 c4 10             	add    esp,0x10
c000a92e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a932:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a936:	52                   	push   edx
c000a937:	50                   	push   eax
c000a938:	57                   	push   edi
c000a939:	56                   	push   esi
c000a93a:	e8 a4 95 01 00       	call   c0023ee3 <__adddf3>
c000a93f:	83 c4 10             	add    esp,0x10
c000a942:	89 c6                	mov    esi,eax
c000a944:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a947:	89 d7                	mov    edi,edx
c000a949:	85 ed                	test   ebp,ebp
c000a94b:	0f 8f 8d fd ff ff    	jg     c000a6de <calc_output_hex+0x363>
c000a951:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a955:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a959:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a95d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a961:	e8 7d 95 01 00       	call   c0023ee3 <__adddf3>
c000a966:	83 c4 10             	add    esp,0x10
c000a969:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a970:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a974:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a978:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a980:	e8 db 9b 01 00       	call   c0024560 <__muldf3>
c000a985:	59                   	pop    ecx
c000a986:	5b                   	pop    ebx
c000a987:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a98b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a98f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a993:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a997:	e8 97 a4 01 00       	call   c0024e33 <__truncdfsf2>
c000a99c:	83 c4 10             	add    esp,0x10
c000a99f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a6:	89 03                	mov    DWORD PTR [ebx],eax
c000a9a8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9b8:	e8 26 95 01 00       	call   c0023ee3 <__adddf3>
c000a9bd:	83 c4 10             	add    esp,0x10
c000a9c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d7:	e8 84 9b 01 00       	call   c0024560 <__muldf3>
c000a9dc:	5d                   	pop    ebp
c000a9dd:	59                   	pop    ecx
c000a9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ee:	e8 40 a4 01 00       	call   c0024e33 <__truncdfsf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9fd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aa00:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa04:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa08:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa10:	e8 ce 94 01 00       	call   c0023ee3 <__adddf3>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2f:	e8 2c 9b 01 00       	call   c0024560 <__muldf3>
c000aa34:	5b                   	pop    ebx
c000aa35:	5d                   	pop    ebp
c000aa36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa46:	e8 e8 a3 01 00       	call   c0024e33 <__truncdfsf2>
c000aa4b:	83 c4 10             	add    esp,0x10
c000aa4e:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa55:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa58:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa5c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa68:	e8 76 94 01 00       	call   c0023ee3 <__adddf3>
c000aa6d:	83 c4 10             	add    esp,0x10
c000aa70:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa77:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa87:	e8 d4 9a 01 00       	call   c0024560 <__muldf3>
c000aa8c:	59                   	pop    ecx
c000aa8d:	5b                   	pop    ebx
c000aa8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	e8 90 a3 01 00       	call   c0024e33 <__truncdfsf2>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aab0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aab4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aab8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aabc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aac0:	e8 1e 94 01 00       	call   c0023ee3 <__adddf3>
c000aac5:	83 c4 10             	add    esp,0x10
c000aac8:	89 04 24             	mov    DWORD PTR [esp],eax
c000aacb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aacf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadf:	e8 7c 9a 01 00       	call   c0024560 <__muldf3>
c000aae4:	5d                   	pop    ebp
c000aae5:	59                   	pop    ecx
c000aae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf6:	e8 38 a3 01 00       	call   c0024e33 <__truncdfsf2>
c000aafb:	83 c4 10             	add    esp,0x10
c000aafe:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ab08:	57                   	push   edi
c000ab09:	56                   	push   esi
c000ab0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ab0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ab12:	e8 cc 93 01 00       	call   c0023ee3 <__adddf3>
c000ab17:	83 c4 10             	add    esp,0x10
c000ab1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab31:	e8 2a 9a 01 00       	call   c0024560 <__muldf3>
c000ab36:	5b                   	pop    ebx
c000ab37:	5e                   	pop    esi
c000ab38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab48:	e8 e6 a2 01 00       	call   c0024e33 <__truncdfsf2>
c000ab4d:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab54:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab57:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab5d:	5b                   	pop    ebx
c000ab5e:	5e                   	pop    esi
c000ab5f:	5f                   	pop    edi
c000ab60:	5d                   	pop    ebp
c000ab61:	c3                   	ret    

c000ab62 <sinc_reset>:
c000ab62:	56                   	push   esi
c000ab63:	53                   	push   ebx
c000ab64:	51                   	push   ecx
c000ab65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab69:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab6c:	85 db                	test   ebx,ebx
c000ab6e:	74 59                	je     c000abc9 <sinc_reset+0x67>
c000ab70:	31 d2                	xor    edx,edx
c000ab72:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab79:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab7c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab7f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab86:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab8d:	31 c0                	xor    eax,eax
c000ab8f:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab95:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab98:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab9b:	52                   	push   edx
c000ab9c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab9f:	c1 e0 02             	shl    eax,0x2
c000aba2:	50                   	push   eax
c000aba3:	6a 00                	push   0x0
c000aba5:	56                   	push   esi
c000aba6:	e8 41 5b ff ff       	call   c00006ec <memset>
c000abab:	83 c4 0c             	add    esp,0xc
c000abae:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abb1:	c1 e0 02             	shl    eax,0x2
c000abb4:	50                   	push   eax
c000abb5:	68 aa 00 00 00       	push   0xaa
c000abba:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000abbd:	8d 04 86             	lea    eax,[esi+eax*4]
c000abc0:	50                   	push   eax
c000abc1:	e8 26 5b ff ff       	call   c00006ec <memset>
c000abc6:	83 c4 10             	add    esp,0x10
c000abc9:	58                   	pop    eax
c000abca:	5b                   	pop    ebx
c000abcb:	5e                   	pop    esi
c000abcc:	c3                   	ret    

c000abcd <calc_output_multi>:
c000abcd:	55                   	push   ebp
c000abce:	57                   	push   edi
c000abcf:	56                   	push   esi
c000abd0:	89 c6                	mov    esi,eax
c000abd2:	53                   	push   ebx
c000abd3:	83 ec 4c             	sub    esp,0x4c
c000abd6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abda:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000abde:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000abe2:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000abe6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000abea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abf2:	8d 46 44             	lea    eax,[esi+0x44]
c000abf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf8:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac02:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ac05:	e8 0f eb ff ff       	call   c0009719 <int_to_fp>
c000ac0a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ac0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ac11:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ac15:	99                   	cdq    
c000ac16:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ac1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ac1e:	0f af d0             	imul   edx,eax
c000ac21:	0f af c3             	imul   eax,ebx
c000ac24:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ac28:	29 c1                	sub    ecx,eax
c000ac2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac2e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac32:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ac39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ac3d:	57                   	push   edi
c000ac3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac42:	6a 00                	push   0x0
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 9f 5a ff ff       	call   c00006ec <memset>
c000ac4d:	83 c4 10             	add    esp,0x10
c000ac50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac54:	89 df                	mov    edi,ebx
c000ac56:	e8 cc ea ff ff       	call   c0009727 <fp_to_double>
c000ac5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac67:	e8 b1 ea ff ff       	call   c000971d <fp_to_int>
c000ac6c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac6f:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac72:	51                   	push   ecx
c000ac73:	51                   	push   ecx
c000ac74:	55                   	push   ebp
c000ac75:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac79:	e8 fa 8b 01 00       	call   c0023878 <__subsf3>
c000ac7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac81:	e8 d1 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac8d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aca1:	e8 ba 98 01 00       	call   c0024560 <__muldf3>
c000aca6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000aca9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000acad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000acb1:	e8 a1 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000acb6:	83 c4 10             	add    esp,0x10
c000acb9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acbd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acc1:	52                   	push   edx
c000acc2:	50                   	push   eax
c000acc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000accb:	e8 13 92 01 00       	call   c0023ee3 <__adddf3>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acd7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acdb:	89 f8                	mov    eax,edi
c000acdd:	b9 08 00 00 00       	mov    ecx,0x8
c000ace2:	99                   	cdq    
c000ace3:	f7 f9                	idiv   ecx
c000ace5:	4a                   	dec    edx
c000ace6:	83 fa 06             	cmp    edx,0x6
c000ace9:	77 07                	ja     c000acf2 <calc_output_multi+0x125>
c000aceb:	ff 24 95 64 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd989c]
c000acf2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acf5:	4f                   	dec    edi
c000acf6:	83 ec 0c             	sub    esp,0xc
c000acf9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad00:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad07:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad0b:	e8 47 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad17:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad27:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad2b:	e8 30 98 01 00       	call   c0024560 <__muldf3>
c000ad30:	83 c4 10             	add    esp,0x10
c000ad33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad3b:	52                   	push   edx
c000ad3c:	50                   	push   eax
c000ad3d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad40:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad43:	e8 9b 91 01 00       	call   c0023ee3 <__adddf3>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad4e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad54:	4f                   	dec    edi
c000ad55:	83 ec 0c             	sub    esp,0xc
c000ad58:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad5f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad66:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad6a:	e8 e8 a1 01 00       	call   c0024f57 <__extendsfdf2>
c000ad6f:	83 c4 10             	add    esp,0x10
c000ad72:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad76:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad82:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8a:	e8 d1 97 01 00       	call   c0024560 <__muldf3>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad9a:	52                   	push   edx
c000ad9b:	50                   	push   eax
c000ad9c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad9f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ada2:	e8 3c 91 01 00       	call   c0023ee3 <__adddf3>
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adb3:	4f                   	dec    edi
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adbe:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adc5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adc9:	e8 89 a1 01 00       	call   c0024f57 <__extendsfdf2>
c000adce:	83 c4 10             	add    esp,0x10
c000add1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000add5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000addd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade9:	e8 72 97 01 00       	call   c0024560 <__muldf3>
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adf9:	52                   	push   edx
c000adfa:	50                   	push   eax
c000adfb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adfe:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae01:	e8 dd 90 01 00       	call   c0023ee3 <__adddf3>
c000ae06:	83 c4 10             	add    esp,0x10
c000ae09:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae0c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae12:	4f                   	dec    edi
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae1d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae24:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae28:	e8 2a a1 01 00       	call   c0024f57 <__extendsfdf2>
c000ae2d:	83 c4 10             	add    esp,0x10
c000ae30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae48:	e8 13 97 01 00       	call   c0024560 <__muldf3>
c000ae4d:	83 c4 10             	add    esp,0x10
c000ae50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae54:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae58:	52                   	push   edx
c000ae59:	50                   	push   eax
c000ae5a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae5d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae60:	e8 7e 90 01 00       	call   c0023ee3 <__adddf3>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae6b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae71:	4f                   	dec    edi
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae7c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae83:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae87:	e8 cb a0 01 00       	call   c0024f57 <__extendsfdf2>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea7:	e8 b4 96 01 00       	call   c0024560 <__muldf3>
c000aeac:	83 c4 10             	add    esp,0x10
c000aeaf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb7:	52                   	push   edx
c000aeb8:	50                   	push   eax
c000aeb9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aebc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aebf:	e8 1f 90 01 00       	call   c0023ee3 <__adddf3>
c000aec4:	83 c4 10             	add    esp,0x10
c000aec7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeca:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aecd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed0:	4f                   	dec    edi
c000aed1:	83 ec 0c             	sub    esp,0xc
c000aed4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aed7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aedb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aee2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aee6:	e8 6c a0 01 00       	call   c0024f57 <__extendsfdf2>
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aef6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aefa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aefe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af06:	e8 55 96 01 00       	call   c0024560 <__muldf3>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af12:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af16:	52                   	push   edx
c000af17:	50                   	push   eax
c000af18:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af1b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af1e:	e8 c0 8f 01 00       	call   c0023ee3 <__adddf3>
c000af23:	83 c4 10             	add    esp,0x10
c000af26:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af29:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af2f:	4f                   	dec    edi
c000af30:	83 ec 0c             	sub    esp,0xc
c000af33:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af3a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af41:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af45:	e8 0d a0 01 00       	call   c0024f57 <__extendsfdf2>
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af51:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af65:	e8 f6 95 01 00       	call   c0024560 <__muldf3>
c000af6a:	83 c4 10             	add    esp,0x10
c000af6d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af71:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af75:	52                   	push   edx
c000af76:	50                   	push   eax
c000af77:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af7a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af7d:	e8 61 8f 01 00       	call   c0023ee3 <__adddf3>
c000af82:	83 c4 10             	add    esp,0x10
c000af85:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af88:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af8e:	4f                   	dec    edi
c000af8f:	83 ec 0c             	sub    esp,0xc
c000af92:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af99:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afa0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afa4:	e8 ae 9f 01 00       	call   c0024f57 <__extendsfdf2>
c000afa9:	83 c4 10             	add    esp,0x10
c000afac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afc0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afc4:	e8 97 95 01 00       	call   c0024560 <__muldf3>
c000afc9:	83 c4 10             	add    esp,0x10
c000afcc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afd0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afd4:	52                   	push   edx
c000afd5:	50                   	push   eax
c000afd6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afd9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afdc:	e8 02 8f 01 00       	call   c0023ee3 <__adddf3>
c000afe1:	83 c4 10             	add    esp,0x10
c000afe4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afe7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afea:	85 ff                	test   edi,edi
c000afec:	0f 8f e9 fc ff ff    	jg     c000acdb <calc_output_multi+0x10e>
c000aff2:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000aff6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000affa:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000affe:	0f 89 4c fc ff ff    	jns    c000ac50 <calc_output_multi+0x83>
c000b004:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b008:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b00c:	29 c8                	sub    eax,ecx
c000b00e:	99                   	cdq    
c000b00f:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b013:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b017:	0f af d0             	imul   edx,eax
c000b01a:	40                   	inc    eax
c000b01b:	01 d1                	add    ecx,edx
c000b01d:	0f af c3             	imul   eax,ebx
c000b020:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b024:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b02b:	55                   	push   ebp
c000b02c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b030:	6a 00                	push   0x0
c000b032:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b036:	e8 b1 56 ff ff       	call   c00006ec <memset>
c000b03b:	83 c4 10             	add    esp,0x10
c000b03e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b042:	e8 e0 e6 ff ff       	call   c0009727 <fp_to_double>
c000b047:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b04b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b04f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b053:	e8 c5 e6 ff ff       	call   c000971d <fp_to_int>
c000b058:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b05b:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b05e:	57                   	push   edi
c000b05f:	57                   	push   edi
c000b060:	89 df                	mov    edi,ebx
c000b062:	55                   	push   ebp
c000b063:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b067:	e8 0c 88 01 00       	call   c0023878 <__subsf3>
c000b06c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b06f:	e8 e3 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b074:	83 c4 10             	add    esp,0x10
c000b077:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b07b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08f:	e8 cc 94 01 00       	call   c0024560 <__muldf3>
c000b094:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b097:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b09b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b09f:	e8 b3 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b0a4:	83 c4 10             	add    esp,0x10
c000b0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0af:	52                   	push   edx
c000b0b0:	50                   	push   eax
c000b0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b9:	e8 25 8e 01 00       	call   c0023ee3 <__adddf3>
c000b0be:	83 c4 10             	add    esp,0x10
c000b0c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0c5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b0c9:	89 f8                	mov    eax,edi
c000b0cb:	b9 08 00 00 00       	mov    ecx,0x8
c000b0d0:	99                   	cdq    
c000b0d1:	f7 f9                	idiv   ecx
c000b0d3:	4a                   	dec    edx
c000b0d4:	83 fa 06             	cmp    edx,0x6
c000b0d7:	77 07                	ja     c000b0e0 <calc_output_multi+0x513>
c000b0d9:	ff 24 95 80 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9880]
c000b0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e4:	4f                   	dec    edi
c000b0e5:	83 ec 0c             	sub    esp,0xc
c000b0e8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0ef:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0f6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0fa:	e8 58 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b0ff:	83 c4 10             	add    esp,0x10
c000b102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b10a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b112:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b116:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b11a:	e8 41 94 01 00       	call   c0024560 <__muldf3>
c000b11f:	83 c4 10             	add    esp,0x10
c000b122:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b126:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b12a:	52                   	push   edx
c000b12b:	50                   	push   eax
c000b12c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b12f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b132:	e8 ac 8d 01 00       	call   c0023ee3 <__adddf3>
c000b137:	83 c4 10             	add    esp,0x10
c000b13a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b13d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b144:	4f                   	dec    edi
c000b145:	83 ec 0c             	sub    esp,0xc
c000b148:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b14b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b14f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b156:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b15a:	e8 f8 9d 01 00       	call   c0024f57 <__extendsfdf2>
c000b15f:	83 c4 10             	add    esp,0x10
c000b162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b16a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b16e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b172:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b176:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b17a:	e8 e1 93 01 00       	call   c0024560 <__muldf3>
c000b17f:	83 c4 10             	add    esp,0x10
c000b182:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b186:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b18a:	52                   	push   edx
c000b18b:	50                   	push   eax
c000b18c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b18f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b192:	e8 4c 8d 01 00       	call   c0023ee3 <__adddf3>
c000b197:	83 c4 10             	add    esp,0x10
c000b19a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b19d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1a4:	4f                   	dec    edi
c000b1a5:	83 ec 0c             	sub    esp,0xc
c000b1a8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1af:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1b6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1ba:	e8 98 9d 01 00       	call   c0024f57 <__extendsfdf2>
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1da:	e8 81 93 01 00       	call   c0024560 <__muldf3>
c000b1df:	83 c4 10             	add    esp,0x10
c000b1e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ea:	52                   	push   edx
c000b1eb:	50                   	push   eax
c000b1ec:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1ef:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1f2:	e8 ec 8c 01 00       	call   c0023ee3 <__adddf3>
c000b1f7:	83 c4 10             	add    esp,0x10
c000b1fa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1fd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b204:	4f                   	dec    edi
c000b205:	83 ec 0c             	sub    esp,0xc
c000b208:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b20b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b20f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b216:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b21a:	e8 38 9d 01 00       	call   c0024f57 <__extendsfdf2>
c000b21f:	83 c4 10             	add    esp,0x10
c000b222:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b226:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b22a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b23a:	e8 21 93 01 00       	call   c0024560 <__muldf3>
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b246:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24a:	52                   	push   edx
c000b24b:	50                   	push   eax
c000b24c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b24f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b252:	e8 8c 8c 01 00       	call   c0023ee3 <__adddf3>
c000b257:	83 c4 10             	add    esp,0x10
c000b25a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b25d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b264:	4f                   	dec    edi
c000b265:	83 ec 0c             	sub    esp,0xc
c000b268:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b26b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b26f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b276:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b27a:	e8 d8 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b286:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b296:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29a:	e8 c1 92 01 00       	call   c0024560 <__muldf3>
c000b29f:	83 c4 10             	add    esp,0x10
c000b2a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2aa:	52                   	push   edx
c000b2ab:	50                   	push   eax
c000b2ac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2af:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b2:	e8 2c 8c 01 00       	call   c0023ee3 <__adddf3>
c000b2b7:	83 c4 10             	add    esp,0x10
c000b2ba:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2bd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2c4:	4f                   	dec    edi
c000b2c5:	83 ec 0c             	sub    esp,0xc
c000b2c8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2cf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2d6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2da:	e8 78 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b2df:	83 c4 10             	add    esp,0x10
c000b2e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fa:	e8 61 92 01 00       	call   c0024560 <__muldf3>
c000b2ff:	83 c4 10             	add    esp,0x10
c000b302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30a:	52                   	push   edx
c000b30b:	50                   	push   eax
c000b30c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b30f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b312:	e8 cc 8b 01 00       	call   c0023ee3 <__adddf3>
c000b317:	83 c4 10             	add    esp,0x10
c000b31a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b31d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b324:	4f                   	dec    edi
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b32b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b32f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b336:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b33a:	e8 18 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b346:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b34e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b352:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b356:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35a:	e8 01 92 01 00       	call   c0024560 <__muldf3>
c000b35f:	83 c4 10             	add    esp,0x10
c000b362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36a:	52                   	push   edx
c000b36b:	50                   	push   eax
c000b36c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b36f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b372:	e8 6c 8b 01 00       	call   c0023ee3 <__adddf3>
c000b377:	83 c4 10             	add    esp,0x10
c000b37a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b37d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b384:	4f                   	dec    edi
c000b385:	83 ec 0c             	sub    esp,0xc
c000b388:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b38b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b38f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b396:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b39a:	e8 b8 9b 01 00       	call   c0024f57 <__extendsfdf2>
c000b39f:	83 c4 10             	add    esp,0x10
c000b3a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ba:	e8 a1 91 01 00       	call   c0024560 <__muldf3>
c000b3bf:	83 c4 10             	add    esp,0x10
c000b3c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ca:	52                   	push   edx
c000b3cb:	50                   	push   eax
c000b3cc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3cf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d2:	e8 0c 8b 01 00       	call   c0023ee3 <__adddf3>
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3dd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e0:	85 ff                	test   edi,edi
c000b3e2:	0f 8f e1 fc ff ff    	jg     c000b0c9 <calc_output_multi+0x4fc>
c000b3e8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3ec:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3f0:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3f4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3f9:	0f 8f 3f fc ff ff    	jg     c000b03e <calc_output_multi+0x471>
c000b3ff:	be 08 00 00 00       	mov    esi,0x8
c000b404:	89 d8                	mov    eax,ebx
c000b406:	99                   	cdq    
c000b407:	f7 fe                	idiv   esi
c000b409:	4a                   	dec    edx
c000b40a:	83 fa 06             	cmp    edx,0x6
c000b40d:	77 07                	ja     c000b416 <calc_output_multi+0x849>
c000b40f:	ff 24 95 9c 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9864]
c000b416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b41a:	4b                   	dec    ebx
c000b41b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b41f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b426:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b42a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b42d:	e8 b1 8a 01 00       	call   c0023ee3 <__adddf3>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b439:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b43d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b445:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44d:	e8 0e 91 01 00       	call   c0024560 <__muldf3>
c000b452:	5d                   	pop    ebp
c000b453:	59                   	pop    ecx
c000b454:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b458:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b45c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b464:	e8 ca 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b469:	83 c4 10             	add    esp,0x10
c000b46c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b470:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b477:	4b                   	dec    ebx
c000b478:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b47c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b47f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b483:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b487:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b48a:	e8 54 8a 01 00       	call   c0023ee3 <__adddf3>
c000b48f:	83 c4 10             	add    esp,0x10
c000b492:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b496:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4aa:	e8 b1 90 01 00       	call   c0024560 <__muldf3>
c000b4af:	59                   	pop    ecx
c000b4b0:	5f                   	pop    edi
c000b4b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c1:	e8 6d 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4cd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d4:	4b                   	dec    ebx
c000b4d5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4e0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e7:	e8 f7 89 01 00       	call   c0023ee3 <__adddf3>
c000b4ec:	83 c4 10             	add    esp,0x10
c000b4ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b507:	e8 54 90 01 00       	call   c0024560 <__muldf3>
c000b50c:	5f                   	pop    edi
c000b50d:	5d                   	pop    ebp
c000b50e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b512:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b516:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51e:	e8 10 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b523:	83 c4 10             	add    esp,0x10
c000b526:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b52a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b52d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b531:	4b                   	dec    ebx
c000b532:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b536:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b539:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b53d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b541:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b544:	e8 9a 89 01 00       	call   c0023ee3 <__adddf3>
c000b549:	83 c4 10             	add    esp,0x10
c000b54c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b550:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b560:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b564:	e8 f7 8f 01 00       	call   c0024560 <__muldf3>
c000b569:	5d                   	pop    ebp
c000b56a:	59                   	pop    ecx
c000b56b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b56f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	e8 b3 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b587:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b58a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b58e:	4b                   	dec    ebx
c000b58f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b593:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b59a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b59e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a1:	e8 3d 89 01 00       	call   c0023ee3 <__adddf3>
c000b5a6:	83 c4 10             	add    esp,0x10
c000b5a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c1:	e8 9a 8f 01 00       	call   c0024560 <__muldf3>
c000b5c6:	59                   	pop    ecx
c000b5c7:	5f                   	pop    edi
c000b5c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d8:	e8 56 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b5dd:	83 c4 10             	add    esp,0x10
c000b5e0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5e4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5eb:	4b                   	dec    ebx
c000b5ec:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5fb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fe:	e8 e0 88 01 00       	call   c0023ee3 <__adddf3>
c000b603:	83 c4 10             	add    esp,0x10
c000b606:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b60a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b616:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61e:	e8 3d 8f 01 00       	call   c0024560 <__muldf3>
c000b623:	5f                   	pop    edi
c000b624:	5d                   	pop    ebp
c000b625:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b629:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b635:	e8 f9 97 01 00       	call   c0024e33 <__truncdfsf2>
c000b63a:	83 c4 10             	add    esp,0x10
c000b63d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b641:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b648:	4b                   	dec    ebx
c000b649:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b64d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b650:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b654:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b658:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b65b:	e8 83 88 01 00       	call   c0023ee3 <__adddf3>
c000b660:	83 c4 10             	add    esp,0x10
c000b663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b667:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b673:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b677:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67b:	e8 e0 8e 01 00       	call   c0024560 <__muldf3>
c000b680:	5d                   	pop    ebp
c000b681:	59                   	pop    ecx
c000b682:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b686:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b692:	e8 9c 97 01 00       	call   c0024e33 <__truncdfsf2>
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b69e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6a5:	4b                   	dec    ebx
c000b6a6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6aa:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6b1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6b5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b8:	e8 26 88 01 00       	call   c0023ee3 <__adddf3>
c000b6bd:	83 c4 10             	add    esp,0x10
c000b6c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d8:	e8 83 8e 01 00       	call   c0024560 <__muldf3>
c000b6dd:	59                   	pop    ecx
c000b6de:	5f                   	pop    edi
c000b6df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ef:	e8 3f 97 01 00       	call   c0024e33 <__truncdfsf2>
c000b6f4:	83 c4 10             	add    esp,0x10
c000b6f7:	85 db                	test   ebx,ebx
c000b6f9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6fd:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b700:	0f 8f fe fc ff ff    	jg     c000b404 <calc_output_multi+0x837>
c000b706:	83 c4 4c             	add    esp,0x4c
c000b709:	5b                   	pop    ebx
c000b70a:	5e                   	pop    esi
c000b70b:	5f                   	pop    edi
c000b70c:	5d                   	pop    ebp
c000b70d:	c3                   	ret    

c000b70e <double_to_fp>:
c000b70e:	83 ec 0c             	sub    esp,0xc
c000b711:	68 00 00 b0 40       	push   0x40b00000
c000b716:	6a 00                	push   0x0
c000b718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b720:	e8 3b 8e 01 00       	call   c0024560 <__muldf3>
c000b725:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b729:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b72d:	83 c4 1c             	add    esp,0x1c
c000b730:	e9 ab 98 01 00       	jmp    c0024fe0 <lrint>

c000b735 <fmod_one>:
c000b735:	83 ec 2c             	sub    esp,0x2c
c000b738:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b73c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b740:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b748:	83 ec 08             	sub    esp,0x8
c000b74b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b753:	e8 88 98 01 00       	call   c0024fe0 <lrint>
c000b758:	83 c4 10             	add    esp,0x10
c000b75b:	83 ec 0c             	sub    esp,0xc
c000b75e:	50                   	push   eax
c000b75f:	e8 5f 94 01 00       	call   c0024bc3 <__floatsidf>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	52                   	push   edx
c000b768:	50                   	push   eax
c000b769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b771:	e8 be 8d 01 00       	call   c0024534 <__subdf3>
c000b776:	83 c4 10             	add    esp,0x10
c000b779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b77d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b781:	b8 00 00 00 00       	mov    eax,0x0
c000b786:	ba 00 00 00 00       	mov    edx,0x0
c000b78b:	52                   	push   edx
c000b78c:	50                   	push   eax
c000b78d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b791:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b795:	e8 95 96 01 00       	call   c0024e2f <__ltdf2>
c000b79a:	83 c4 10             	add    esp,0x10
c000b79d:	85 c0                	test   eax,eax
c000b79f:	79 1e                	jns    c000b7bf <fmod_one+0x8a>
c000b7a1:	b8 00 00 00 00       	mov    eax,0x0
c000b7a6:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b7ab:	52                   	push   edx
c000b7ac:	50                   	push   eax
c000b7ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7b5:	e8 29 87 01 00       	call   c0023ee3 <__adddf3>
c000b7ba:	83 c4 10             	add    esp,0x10
c000b7bd:	eb 08                	jmp    c000b7c7 <fmod_one+0x92>
c000b7bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b7c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b7c7:	83 c4 2c             	add    esp,0x2c
c000b7ca:	c3                   	ret    

c000b7cb <prepare_data>:
c000b7cb:	55                   	push   ebp
c000b7cc:	57                   	push   edi
c000b7cd:	56                   	push   esi
c000b7ce:	53                   	push   ebx
c000b7cf:	83 ec 1c             	sub    esp,0x1c
c000b7d2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b7d6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b7da:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b7de:	0f 89 57 01 00 00    	jns    c000b93b <prepare_data+0x170>
c000b7e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b7e7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7ea:	85 d2                	test   edx,edx
c000b7ec:	75 0d                	jne    c000b7fb <prepare_data+0x30>
c000b7ee:	8d 14 36             	lea    edx,[esi+esi*1]
c000b7f1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b7f4:	29 d0                	sub    eax,edx
c000b7f6:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7f9:	eb 44                	jmp    c000b83f <prepare_data+0x74>
c000b7fb:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b7fe:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b801:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b804:	39 c1                	cmp    ecx,eax
c000b806:	7d 04                	jge    c000b80c <prepare_data+0x41>
c000b808:	29 d0                	sub    eax,edx
c000b80a:	eb 2d                	jmp    c000b839 <prepare_data+0x6e>
c000b80c:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b812:	29 d7                	sub    edi,edx
c000b814:	01 f7                	add    edi,esi
c000b816:	51                   	push   ecx
c000b817:	29 f2                	sub    edx,esi
c000b819:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b820:	8d 14 90             	lea    edx,[eax+edx*4]
c000b823:	51                   	push   ecx
c000b824:	52                   	push   edx
c000b825:	50                   	push   eax
c000b826:	e8 53 4e ff ff       	call   c000067e <memmove>
c000b82b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b82e:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b831:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b834:	29 f0                	sub    eax,esi
c000b836:	83 c4 10             	add    esp,0x10
c000b839:	29 f0                	sub    eax,esi
c000b83b:	79 02                	jns    c000b83f <prepare_data+0x74>
c000b83d:	31 c0                	xor    eax,eax
c000b83f:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b842:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b845:	29 ef                	sub    edi,ebp
c000b847:	39 c7                	cmp    edi,eax
c000b849:	7e 02                	jle    c000b84d <prepare_data+0x82>
c000b84b:	89 c7                	mov    edi,eax
c000b84d:	89 f8                	mov    eax,edi
c000b84f:	99                   	cdq    
c000b850:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b853:	b8 15 00 00 00       	mov    eax,0x15
c000b858:	29 d7                	sub    edi,edx
c000b85a:	0f 88 dd 00 00 00    	js     c000b93d <prepare_data+0x172>
c000b860:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b863:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b866:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b869:	0f 8f ce 00 00 00    	jg     c000b93d <prepare_data+0x172>
c000b86f:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b875:	50                   	push   eax
c000b876:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b87d:	50                   	push   eax
c000b87e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b882:	8b 00                	mov    eax,DWORD PTR [eax]
c000b884:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b887:	50                   	push   eax
c000b888:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b88b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b88f:	50                   	push   eax
c000b890:	e8 21 4e ff ff       	call   c00006b6 <memcpy>
c000b895:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b898:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b89b:	01 fd                	add    ebp,edi
c000b89d:	01 f9                	add    ecx,edi
c000b89f:	83 c4 10             	add    esp,0x10
c000b8a2:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b8a5:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b8a8:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b8ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8af:	0f 85 86 00 00 00    	jne    c000b93b <prepare_data+0x170>
c000b8b5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b8b8:	89 e8                	mov    eax,ebp
c000b8ba:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b8bd:	29 c8                	sub    eax,ecx
c000b8bf:	39 f8                	cmp    eax,edi
c000b8c1:	7d 78                	jge    c000b93b <prepare_data+0x170>
c000b8c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8c7:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b8cb:	74 6e                	je     c000b93b <prepare_data+0x170>
c000b8cd:	8d 7e 04             	lea    edi,[esi+0x4]
c000b8d0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b8d4:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b8d7:	29 ef                	sub    edi,ebp
c000b8d9:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b8dd:	7c 29                	jl     c000b908 <prepare_data+0x13d>
c000b8df:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8e2:	29 f1                	sub    ecx,esi
c000b8e4:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b8eb:	55                   	push   ebp
c000b8ec:	50                   	push   eax
c000b8ed:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b8f0:	50                   	push   eax
c000b8f1:	52                   	push   edx
c000b8f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8f6:	e8 83 4d ff ff       	call   c000067e <memmove>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b901:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b908:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b90b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b90e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b911:	83 c6 05             	add    esi,0x5
c000b914:	78 07                	js     c000b91d <prepare_data+0x152>
c000b916:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b919:	39 cf                	cmp    edi,ecx
c000b91b:	7e 04                	jle    c000b921 <prepare_data+0x156>
c000b91d:	89 ce                	mov    esi,ecx
c000b91f:	29 c6                	sub    esi,eax
c000b921:	8d 04 82             	lea    eax,[edx+eax*4]
c000b924:	51                   	push   ecx
c000b925:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b92c:	51                   	push   ecx
c000b92d:	6a 00                	push   0x0
c000b92f:	50                   	push   eax
c000b930:	e8 b7 4d ff ff       	call   c00006ec <memset>
c000b935:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b938:	83 c4 10             	add    esp,0x10
c000b93b:	31 c0                	xor    eax,eax
c000b93d:	83 c4 1c             	add    esp,0x1c
c000b940:	5b                   	pop    ebx
c000b941:	5e                   	pop    esi
c000b942:	5f                   	pop    edi
c000b943:	5d                   	pop    ebp
c000b944:	c3                   	ret    

c000b945 <sinc_multichan_vari_process>:
c000b945:	55                   	push   ebp
c000b946:	b8 05 00 00 00       	mov    eax,0x5
c000b94b:	57                   	push   edi
c000b94c:	56                   	push   esi
c000b94d:	53                   	push   ebx
c000b94e:	83 ec 4c             	sub    esp,0x4c
c000b951:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b955:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b959:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b95c:	85 db                	test   ebx,ebx
c000b95e:	0f 84 b5 05 00 00    	je     c000bf19 <sinc_multichan_vari_process+0x5d4>
c000b964:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b967:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b96a:	0f af d0             	imul   edx,eax
c000b96d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b970:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b974:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b97b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b97e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b985:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b988:	8b 06                	mov    eax,DWORD PTR [esi]
c000b98a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b98e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b992:	57                   	push   edi
c000b993:	57                   	push   edi
c000b994:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b998:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b99c:	e8 15 dd ff ff       	call   c00096b6 <is_bad_src_ratio>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	89 c2                	mov    edx,eax
c000b9a6:	b8 16 00 00 00       	mov    eax,0x16
c000b9ab:	85 d2                	test   edx,edx
c000b9ad:	0f 85 66 05 00 00    	jne    c000bf19 <sinc_multichan_vari_process+0x5d4>
c000b9b3:	83 ec 0c             	sub    esp,0xc
c000b9b6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b9b9:	e8 05 92 01 00       	call   c0024bc3 <__floatsidf>
c000b9be:	83 c4 10             	add    esp,0x10
c000b9c1:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9c4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9c8:	68 00 00 00 40       	push   0x40000000
c000b9cd:	6a 00                	push   0x0
c000b9cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d7:	e8 07 85 01 00       	call   c0023ee3 <__adddf3>
c000b9dc:	59                   	pop    ecx
c000b9dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9e1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b9e5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b9e8:	e8 d6 91 01 00       	call   c0024bc3 <__floatsidf>
c000b9ed:	83 c4 10             	add    esp,0x10
c000b9f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9f8:	52                   	push   edx
c000b9f9:	50                   	push   eax
c000b9fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba02:	e8 3d 8e 01 00       	call   c0024844 <__divdf3>
c000ba07:	83 c4 10             	add    esp,0x10
c000ba0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba12:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba14:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba17:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba1e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000ba21:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000ba24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba2c:	52                   	push   edx
c000ba2d:	50                   	push   eax
c000ba2e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba36:	e8 f4 93 01 00       	call   c0024e2f <__ltdf2>
c000ba3b:	83 c4 10             	add    esp,0x10
c000ba3e:	85 c0                	test   eax,eax
c000ba40:	79 1d                	jns    c000ba5f <sinc_multichan_vari_process+0x11a>
c000ba42:	68 00 00 f0 3f       	push   0x3ff00000
c000ba47:	6a 00                	push   0x0
c000ba49:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba4d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba51:	e8 d9 93 01 00       	call   c0024e2f <__ltdf2>
c000ba56:	83 c4 10             	add    esp,0x10
c000ba59:	85 c0                	test   eax,eax
c000ba5b:	78 2c                	js     c000ba89 <sinc_multichan_vari_process+0x144>
c000ba5d:	eb 4a                	jmp    c000baa9 <sinc_multichan_vari_process+0x164>
c000ba5f:	68 00 00 f0 3f       	push   0x3ff00000
c000ba64:	6a 00                	push   0x0
c000ba66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba6e:	e8 bc 93 01 00       	call   c0024e2f <__ltdf2>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	85 c0                	test   eax,eax
c000ba78:	79 2f                	jns    c000baa9 <sinc_multichan_vari_process+0x164>
c000ba7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba82:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba89:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba8d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba99:	e8 a6 8d 01 00       	call   c0024844 <__divdf3>
c000ba9e:	83 c4 10             	add    esp,0x10
c000baa1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000baa5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000baa9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000baac:	50                   	push   eax
c000baad:	50                   	push   eax
c000baae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab6:	e8 25 95 01 00       	call   c0024fe0 <lrint>
c000babb:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000babe:	40                   	inc    eax
c000babf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bac3:	0f af c7             	imul   eax,edi
c000bac6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baca:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bacd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bad1:	58                   	pop    eax
c000bad2:	5a                   	pop    edx
c000bad3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bad7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000badb:	e8 55 fc ff ff       	call   c000b735 <fmod_one>
c000bae0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bae3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baeb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000baee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000baf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bafa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bafe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb02:	e8 2d 8a 01 00       	call   c0024534 <__subdf3>
c000bb07:	83 c4 18             	add    esp,0x18
c000bb0a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb12:	52                   	push   edx
c000bb13:	50                   	push   eax
c000bb14:	e8 c7 94 01 00       	call   c0024fe0 <lrint>
c000bb19:	0f af f8             	imul   edi,eax
c000bb1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bb20:	01 f8                	add    eax,edi
c000bb22:	99                   	cdq    
c000bb23:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bb26:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bb29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb31:	68 00 00 f0 3f       	push   0x3ff00000
c000bb36:	6a 00                	push   0x0
c000bb38:	e8 07 8d 01 00       	call   c0024844 <__divdf3>
c000bb3d:	83 c4 10             	add    esp,0x10
c000bb40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb48:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bb4d:	68 23 42 92 0c       	push   0xc924223
c000bb52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb5a:	e8 84 83 01 00       	call   c0023ee3 <__adddf3>
c000bb5f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb63:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb67:	83 c4 20             	add    esp,0x20
c000bb6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb72:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb7d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb80:	7d 4e                	jge    c000bbd0 <sinc_multichan_vari_process+0x28b>
c000bb82:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb85:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb88:	01 c8                	add    eax,ecx
c000bb8a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb8d:	99                   	cdq    
c000bb8e:	f7 f9                	idiv   ecx
c000bb90:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb94:	7d 0c                	jge    c000bba2 <sinc_multichan_vari_process+0x25d>
c000bb96:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb99:	85 ff                	test   edi,edi
c000bb9b:	79 68                	jns    c000bc05 <sinc_multichan_vari_process+0x2c0>
c000bb9d:	e9 e3 00 00 00       	jmp    c000bc85 <sinc_multichan_vari_process+0x340>
c000bba2:	50                   	push   eax
c000bba3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba7:	55                   	push   ebp
c000bba8:	53                   	push   ebx
c000bba9:	e8 1d fc ff ff       	call   c000b7cb <prepare_data>
c000bbae:	83 c4 10             	add    esp,0x10
c000bbb1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bbb4:	85 c0                	test   eax,eax
c000bbb6:	0f 85 5d 03 00 00    	jne    c000bf19 <sinc_multichan_vari_process+0x5d4>
c000bbbc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bbbf:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bbc2:	01 c8                	add    eax,ecx
c000bbc4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bbc7:	99                   	cdq    
c000bbc8:	f7 f9                	idiv   ecx
c000bbca:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bbce:	7c c6                	jl     c000bb96 <sinc_multichan_vari_process+0x251>
c000bbd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbd3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbd7:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bbda:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bbdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbe1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbe5:	89 06                	mov    DWORD PTR [esi],eax
c000bbe7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bbea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbed:	99                   	cdq    
c000bbee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbf1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bbf4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bbf7:	99                   	cdq    
c000bbf8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbfb:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bbfe:	31 c0                	xor    eax,eax
c000bc00:	e9 14 03 00 00       	jmp    c000bf19 <sinc_multichan_vari_process+0x5d4>
c000bc05:	83 ec 0c             	sub    esp,0xc
c000bc08:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bc0b:	e8 b3 8f 01 00       	call   c0024bc3 <__floatsidf>
c000bc10:	83 c4 10             	add    esp,0x10
c000bc13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc17:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc1f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2b:	e8 b3 82 01 00       	call   c0023ee3 <__adddf3>
c000bc30:	83 c4 10             	add    esp,0x10
c000bc33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4b:	e8 93 82 01 00       	call   c0023ee3 <__adddf3>
c000bc50:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc57:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc5b:	e8 63 8f 01 00       	call   c0024bc3 <__floatsidf>
c000bc60:	83 c4 10             	add    esp,0x10
c000bc63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc6b:	52                   	push   edx
c000bc6c:	50                   	push   eax
c000bc6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc75:	e8 b3 91 01 00       	call   c0024e2d <__gedf2>
c000bc7a:	83 c4 10             	add    esp,0x10
c000bc7d:	85 c0                	test   eax,eax
c000bc7f:	0f 89 4b ff ff ff    	jns    c000bbd0 <sinc_multichan_vari_process+0x28b>
c000bc85:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc89:	0f 8e ed 00 00 00    	jle    c000bd7c <sinc_multichan_vari_process+0x437>
c000bc8f:	83 ec 10             	sub    esp,0x10
c000bc92:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc95:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc98:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc9b:	ff 36                	push   DWORD PTR [esi]
c000bc9d:	e8 92 88 01 00       	call   c0024534 <__subdf3>
c000bca2:	83 c4 18             	add    esp,0x18
c000bca5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcad:	52                   	push   edx
c000bcae:	50                   	push   eax
c000bcaf:	e8 0c 93 01 00       	call   c0024fc0 <fabs>
c000bcb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbc:	83 c4 10             	add    esp,0x10
c000bcbf:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bcc4:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bcc9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bccd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcd1:	e8 3b 91 01 00       	call   c0024e11 <__gtdf2>
c000bcd6:	83 c4 10             	add    esp,0x10
c000bcd9:	85 c0                	test   eax,eax
c000bcdb:	0f 8e 9b 00 00 00    	jle    c000bd7c <sinc_multichan_vari_process+0x437>
c000bce1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bce3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bce6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcee:	52                   	push   edx
c000bcef:	50                   	push   eax
c000bcf0:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bcf3:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bcf6:	e8 39 88 01 00       	call   c0024534 <__subdf3>
c000bcfb:	59                   	pop    ecx
c000bcfc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd00:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd04:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bd07:	e8 b7 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bd0c:	83 c4 10             	add    esp,0x10
c000bd0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd17:	52                   	push   edx
c000bd18:	50                   	push   eax
c000bd19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd21:	e8 3a 88 01 00       	call   c0024560 <__muldf3>
c000bd26:	5f                   	pop    edi
c000bd27:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd2b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd2f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bd32:	e8 8c 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bd37:	83 c4 10             	add    esp,0x10
c000bd3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd42:	52                   	push   edx
c000bd43:	50                   	push   eax
c000bd44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd4c:	e8 f3 8a 01 00       	call   c0024844 <__divdf3>
c000bd51:	83 c4 10             	add    esp,0x10
c000bd54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 72 81 01 00       	call   c0023ee3 <__adddf3>
c000bd71:	83 c4 10             	add    esp,0x10
c000bd74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd7c:	83 ec 0c             	sub    esp,0xc
c000bd7f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd82:	e8 3c 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bd87:	83 c4 10             	add    esp,0x10
c000bd8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bda2:	e8 88 90 01 00       	call   c0024e2f <__ltdf2>
c000bda7:	83 c4 10             	add    esp,0x10
c000bdaa:	85 c0                	test   eax,eax
c000bdac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bdb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bdb4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bdb8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bdbc:	78 10                	js     c000bdce <sinc_multichan_vari_process+0x489>
c000bdbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdc2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bdc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdde:	e8 7d 87 01 00       	call   c0024560 <__muldf3>
c000bde3:	59                   	pop    ecx
c000bde4:	5f                   	pop    edi
c000bde5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bde9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bded:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdf5:	e8 14 f9 ff ff       	call   c000b70e <double_to_fp>
c000bdfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfe:	89 c7                	mov    edi,eax
c000be00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be0c:	e8 4f 87 01 00       	call   c0024560 <__muldf3>
c000be11:	83 c4 18             	add    esp,0x18
c000be14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be1c:	52                   	push   edx
c000be1d:	50                   	push   eax
c000be1e:	e8 eb f8 ff ff       	call   c000b70e <double_to_fp>
c000be23:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000be26:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000be2a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000be2d:	8d 04 90             	lea    eax,[eax+edx*4]
c000be30:	50                   	push   eax
c000be31:	50                   	push   eax
c000be32:	50                   	push   eax
c000be33:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be36:	e8 88 8d 01 00       	call   c0024bc3 <__floatsidf>
c000be3b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be3f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be43:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be53:	e8 ec 89 01 00       	call   c0024844 <__divdf3>
c000be58:	83 c4 1c             	add    esp,0x1c
c000be5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be5f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be63:	52                   	push   edx
c000be64:	89 fa                	mov    edx,edi
c000be66:	50                   	push   eax
c000be67:	89 d8                	mov    eax,ebx
c000be69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be6c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be70:	e8 58 ed ff ff       	call   c000abcd <calc_output_multi>
c000be75:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be78:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be8b:	e8 b4 89 01 00       	call   c0024844 <__divdf3>
c000be90:	83 c4 10             	add    esp,0x10
c000be93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be97:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bea3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bea7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000beab:	e8 33 80 01 00       	call   c0023ee3 <__adddf3>
c000beb0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000beb4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000beb8:	83 c4 28             	add    esp,0x28
c000bebb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bebf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bec3:	e8 6d f8 ff ff       	call   c000b735 <fmod_one>
c000bec8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000becb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000becf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bed3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bed6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000beda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bede:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bee2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bee6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beea:	e8 45 86 01 00       	call   c0024534 <__subdf3>
c000beef:	83 c4 18             	add    esp,0x18
c000bef2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bef6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	e8 df 90 01 00       	call   c0024fe0 <lrint>
c000bf01:	0f af f8             	imul   edi,eax
c000bf04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf08:	83 c4 10             	add    esp,0x10
c000bf0b:	01 f8                	add    eax,edi
c000bf0d:	99                   	cdq    
c000bf0e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf11:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf14:	e9 61 fc ff ff       	jmp    c000bb7a <sinc_multichan_vari_process+0x235>
c000bf19:	83 c4 4c             	add    esp,0x4c
c000bf1c:	5b                   	pop    ebx
c000bf1d:	5e                   	pop    esi
c000bf1e:	5f                   	pop    edi
c000bf1f:	5d                   	pop    ebp
c000bf20:	c3                   	ret    

c000bf21 <sinc_hex_vari_process>:
c000bf21:	55                   	push   ebp
c000bf22:	b8 05 00 00 00       	mov    eax,0x5
c000bf27:	57                   	push   edi
c000bf28:	56                   	push   esi
c000bf29:	53                   	push   ebx
c000bf2a:	83 ec 4c             	sub    esp,0x4c
c000bf2d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf31:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf35:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf38:	85 db                	test   ebx,ebx
c000bf3a:	0f 84 b7 05 00 00    	je     c000c4f7 <sinc_hex_vari_process+0x5d6>
c000bf40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bf43:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf46:	0f af d0             	imul   edx,eax
c000bf49:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bf4c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bf50:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf57:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf5a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf61:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf6f:	57                   	push   edi
c000bf70:	57                   	push   edi
c000bf71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf79:	e8 38 d7 ff ff       	call   c00096b6 <is_bad_src_ratio>
c000bf7e:	83 c4 10             	add    esp,0x10
c000bf81:	89 c2                	mov    edx,eax
c000bf83:	b8 16 00 00 00       	mov    eax,0x16
c000bf88:	85 d2                	test   edx,edx
c000bf8a:	0f 85 67 05 00 00    	jne    c000c4f7 <sinc_hex_vari_process+0x5d6>
c000bf90:	83 ec 0c             	sub    esp,0xc
c000bf93:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf96:	e8 28 8c 01 00       	call   c0024bc3 <__floatsidf>
c000bf9b:	83 c4 10             	add    esp,0x10
c000bf9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfa1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bfa5:	68 00 00 00 40       	push   0x40000000
c000bfaa:	6a 00                	push   0x0
c000bfac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb4:	e8 2a 7f 01 00       	call   c0023ee3 <__adddf3>
c000bfb9:	59                   	pop    ecx
c000bfba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bfbe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bfc2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfc5:	e8 f9 8b 01 00       	call   c0024bc3 <__floatsidf>
c000bfca:	83 c4 10             	add    esp,0x10
c000bfcd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfd1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfd5:	52                   	push   edx
c000bfd6:	50                   	push   eax
c000bfd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfdb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfdf:	e8 60 88 01 00       	call   c0024844 <__divdf3>
c000bfe4:	83 c4 10             	add    esp,0x10
c000bfe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfeb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bff2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bff5:	89 04 24             	mov    DWORD PTR [esp],eax
c000bff8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bffc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfff:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c002:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c006:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c00a:	52                   	push   edx
c000c00b:	50                   	push   eax
c000c00c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c010:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c014:	e8 16 8e 01 00       	call   c0024e2f <__ltdf2>
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	85 c0                	test   eax,eax
c000c01e:	79 1d                	jns    c000c03d <sinc_hex_vari_process+0x11c>
c000c020:	68 00 00 f0 3f       	push   0x3ff00000
c000c025:	6a 00                	push   0x0
c000c027:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c02b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c02f:	e8 fb 8d 01 00       	call   c0024e2f <__ltdf2>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	85 c0                	test   eax,eax
c000c039:	78 2c                	js     c000c067 <sinc_hex_vari_process+0x146>
c000c03b:	eb 4a                	jmp    c000c087 <sinc_hex_vari_process+0x166>
c000c03d:	68 00 00 f0 3f       	push   0x3ff00000
c000c042:	6a 00                	push   0x0
c000c044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04c:	e8 de 8d 01 00       	call   c0024e2f <__ltdf2>
c000c051:	83 c4 10             	add    esp,0x10
c000c054:	85 c0                	test   eax,eax
c000c056:	79 2f                	jns    c000c087 <sinc_hex_vari_process+0x166>
c000c058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c060:	89 04 24             	mov    DWORD PTR [esp],eax
c000c063:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c067:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c06b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c077:	e8 c8 87 01 00       	call   c0024844 <__divdf3>
c000c07c:	83 c4 10             	add    esp,0x10
c000c07f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c083:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c087:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c08a:	50                   	push   eax
c000c08b:	50                   	push   eax
c000c08c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c090:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c094:	e8 47 8f 01 00       	call   c0024fe0 <lrint>
c000c099:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c09c:	40                   	inc    eax
c000c09d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a1:	0f af c7             	imul   eax,edi
c000c0a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0af:	58                   	pop    eax
c000c0b0:	5a                   	pop    edx
c000c0b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b9:	e8 77 f6 ff ff       	call   c000b735 <fmod_one>
c000c0be:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c0c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0c5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c0c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0e0:	e8 4f 84 01 00       	call   c0024534 <__subdf3>
c000c0e5:	83 c4 18             	add    esp,0x18
c000c0e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c0ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0f0:	52                   	push   edx
c000c0f1:	50                   	push   eax
c000c0f2:	e8 e9 8e 01 00       	call   c0024fe0 <lrint>
c000c0f7:	0f af f8             	imul   edi,eax
c000c0fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0fe:	01 f8                	add    eax,edi
c000c100:	99                   	cdq    
c000c101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10f:	68 00 00 f0 3f       	push   0x3ff00000
c000c114:	6a 00                	push   0x0
c000c116:	e8 29 87 01 00       	call   c0024844 <__divdf3>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c122:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c126:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c12b:	68 23 42 92 0c       	push   0xc924223
c000c130:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c134:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c138:	e8 a6 7d 01 00       	call   c0023ee3 <__adddf3>
c000c13d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c141:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c145:	83 c4 20             	add    esp,0x20
c000c148:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c150:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c158:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c15b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c15e:	7d 4e                	jge    c000c1ae <sinc_hex_vari_process+0x28d>
c000c160:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c163:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c166:	01 c8                	add    eax,ecx
c000c168:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c16b:	99                   	cdq    
c000c16c:	f7 f9                	idiv   ecx
c000c16e:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c172:	7d 0c                	jge    c000c180 <sinc_hex_vari_process+0x25f>
c000c174:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c177:	85 ff                	test   edi,edi
c000c179:	79 69                	jns    c000c1e4 <sinc_hex_vari_process+0x2c3>
c000c17b:	e9 e4 00 00 00       	jmp    c000c264 <sinc_hex_vari_process+0x343>
c000c180:	50                   	push   eax
c000c181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c185:	56                   	push   esi
c000c186:	53                   	push   ebx
c000c187:	e8 3f f6 ff ff       	call   c000b7cb <prepare_data>
c000c18c:	83 c4 10             	add    esp,0x10
c000c18f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c192:	85 c0                	test   eax,eax
c000c194:	0f 85 5d 03 00 00    	jne    c000c4f7 <sinc_hex_vari_process+0x5d6>
c000c19a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c19d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1a0:	01 c8                	add    eax,ecx
c000c1a2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1a5:	99                   	cdq    
c000c1a6:	f7 f9                	idiv   ecx
c000c1a8:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c1ac:	7c c6                	jl     c000c174 <sinc_hex_vari_process+0x253>
c000c1ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c1b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c1b5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1b8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c1c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1cc:	99                   	cdq    
c000c1cd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1d0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c1d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c1d6:	99                   	cdq    
c000c1d7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1da:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c1dd:	31 c0                	xor    eax,eax
c000c1df:	e9 13 03 00 00       	jmp    c000c4f7 <sinc_hex_vari_process+0x5d6>
c000c1e4:	83 ec 0c             	sub    esp,0xc
c000c1e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c1ea:	e8 d4 89 01 00       	call   c0024bc3 <__floatsidf>
c000c1ef:	83 c4 10             	add    esp,0x10
c000c1f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c202:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c206:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c20a:	e8 d4 7c 01 00       	call   c0023ee3 <__adddf3>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c21e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c222:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c226:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c22a:	e8 b4 7c 01 00       	call   c0023ee3 <__adddf3>
c000c22f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c232:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c236:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c23a:	e8 84 89 01 00       	call   c0024bc3 <__floatsidf>
c000c23f:	83 c4 10             	add    esp,0x10
c000c242:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c246:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c24a:	52                   	push   edx
c000c24b:	50                   	push   eax
c000c24c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c250:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c254:	e8 d4 8b 01 00       	call   c0024e2d <__gedf2>
c000c259:	83 c4 10             	add    esp,0x10
c000c25c:	85 c0                	test   eax,eax
c000c25e:	0f 89 4a ff ff ff    	jns    c000c1ae <sinc_hex_vari_process+0x28d>
c000c264:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c268:	0f 8e ef 00 00 00    	jle    c000c35d <sinc_hex_vari_process+0x43c>
c000c26e:	83 ec 10             	sub    esp,0x10
c000c271:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c274:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c277:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c27a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c27d:	e8 b2 82 01 00       	call   c0024534 <__subdf3>
c000c282:	83 c4 18             	add    esp,0x18
c000c285:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c289:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c28d:	52                   	push   edx
c000c28e:	50                   	push   eax
c000c28f:	e8 2c 8d 01 00       	call   c0024fc0 <fabs>
c000c294:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c298:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29c:	83 c4 10             	add    esp,0x10
c000c29f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2a4:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b1:	e8 5b 8b 01 00       	call   c0024e11 <__gtdf2>
c000c2b6:	83 c4 10             	add    esp,0x10
c000c2b9:	85 c0                	test   eax,eax
c000c2bb:	0f 8e 9c 00 00 00    	jle    c000c35d <sinc_hex_vari_process+0x43c>
c000c2c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2c4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2cf:	52                   	push   edx
c000c2d0:	50                   	push   eax
c000c2d1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2d4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2d7:	e8 58 82 01 00       	call   c0024534 <__subdf3>
c000c2dc:	59                   	pop    ecx
c000c2dd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c2e8:	e8 d6 88 01 00       	call   c0024bc3 <__floatsidf>
c000c2ed:	83 c4 10             	add    esp,0x10
c000c2f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2f8:	52                   	push   edx
c000c2f9:	50                   	push   eax
c000c2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c302:	e8 59 82 01 00       	call   c0024560 <__muldf3>
c000c307:	5f                   	pop    edi
c000c308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c310:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c313:	e8 ab 88 01 00       	call   c0024bc3 <__floatsidf>
c000c318:	83 c4 10             	add    esp,0x10
c000c31b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c31f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c323:	52                   	push   edx
c000c324:	50                   	push   eax
c000c325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c329:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c32d:	e8 12 85 01 00       	call   c0024844 <__divdf3>
c000c332:	83 c4 10             	add    esp,0x10
c000c335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c339:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c33d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c341:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c345:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c349:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c34d:	e8 91 7b 01 00       	call   c0023ee3 <__adddf3>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c359:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35d:	83 ec 0c             	sub    esp,0xc
c000c360:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c363:	e8 5b 88 01 00       	call   c0024bc3 <__floatsidf>
c000c368:	83 c4 10             	add    esp,0x10
c000c36b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c36f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c373:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c377:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c37b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c383:	e8 a7 8a 01 00       	call   c0024e2f <__ltdf2>
c000c388:	83 c4 10             	add    esp,0x10
c000c38b:	85 c0                	test   eax,eax
c000c38d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c391:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c395:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c399:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c39d:	78 10                	js     c000c3af <sinc_hex_vari_process+0x48e>
c000c39f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c3a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c3ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3bf:	e8 9c 81 01 00       	call   c0024560 <__muldf3>
c000c3c4:	59                   	pop    ecx
c000c3c5:	5f                   	pop    edi
c000c3c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3d6:	e8 33 f3 ff ff       	call   c000b70e <double_to_fp>
c000c3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3df:	89 c7                	mov    edi,eax
c000c3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ed:	e8 6e 81 01 00       	call   c0024560 <__muldf3>
c000c3f2:	83 c4 18             	add    esp,0x18
c000c3f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3fd:	52                   	push   edx
c000c3fe:	50                   	push   eax
c000c3ff:	e8 0a f3 ff ff       	call   c000b70e <double_to_fp>
c000c404:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c407:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c40b:	83 c4 0c             	add    esp,0xc
c000c40e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c411:	8d 04 90             	lea    eax,[eax+edx*4]
c000c414:	50                   	push   eax
c000c415:	50                   	push   eax
c000c416:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c419:	e8 a5 87 01 00       	call   c0024bc3 <__floatsidf>
c000c41e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c422:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c426:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c42a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c42e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c432:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c436:	e8 09 84 01 00       	call   c0024844 <__divdf3>
c000c43b:	83 c4 18             	add    esp,0x18
c000c43e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c442:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c446:	52                   	push   edx
c000c447:	89 fa                	mov    edx,edi
c000c449:	50                   	push   eax
c000c44a:	89 d8                	mov    eax,ebx
c000c44c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c450:	e8 26 df ff ff       	call   c000a37b <calc_output_hex>
c000c455:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c465:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c469:	e8 d6 83 01 00       	call   c0024844 <__divdf3>
c000c46e:	83 c4 10             	add    esp,0x10
c000c471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c475:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c481:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c485:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c489:	e8 55 7a 01 00       	call   c0023ee3 <__adddf3>
c000c48e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c492:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c496:	83 c4 18             	add    esp,0x18
c000c499:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c49d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a1:	e8 8f f2 ff ff       	call   c000b735 <fmod_one>
c000c4a6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c4a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4ad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c4b1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c4b4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c8:	e8 67 80 01 00       	call   c0024534 <__subdf3>
c000c4cd:	83 c4 18             	add    esp,0x18
c000c4d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4d8:	52                   	push   edx
c000c4d9:	50                   	push   eax
c000c4da:	e8 01 8b 01 00       	call   c0024fe0 <lrint>
c000c4df:	0f af f8             	imul   edi,eax
c000c4e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c4e6:	83 c4 10             	add    esp,0x10
c000c4e9:	01 f8                	add    eax,edi
c000c4eb:	99                   	cdq    
c000c4ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c4ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4f2:	e9 61 fc ff ff       	jmp    c000c158 <sinc_hex_vari_process+0x237>
c000c4f7:	83 c4 4c             	add    esp,0x4c
c000c4fa:	5b                   	pop    ebx
c000c4fb:	5e                   	pop    esi
c000c4fc:	5f                   	pop    edi
c000c4fd:	5d                   	pop    ebp
c000c4fe:	c3                   	ret    

c000c4ff <sinc_quad_vari_process>:
c000c4ff:	55                   	push   ebp
c000c500:	b8 05 00 00 00       	mov    eax,0x5
c000c505:	57                   	push   edi
c000c506:	56                   	push   esi
c000c507:	53                   	push   ebx
c000c508:	83 ec 4c             	sub    esp,0x4c
c000c50b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c50f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c513:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c516:	85 db                	test   ebx,ebx
c000c518:	0f 84 b7 05 00 00    	je     c000cad5 <sinc_quad_vari_process+0x5d6>
c000c51e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c521:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c524:	0f af d0             	imul   edx,eax
c000c527:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c52a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c52e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c535:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c538:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c53f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c542:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c545:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c549:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54d:	57                   	push   edi
c000c54e:	57                   	push   edi
c000c54f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c553:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c557:	e8 5a d1 ff ff       	call   c00096b6 <is_bad_src_ratio>
c000c55c:	83 c4 10             	add    esp,0x10
c000c55f:	89 c2                	mov    edx,eax
c000c561:	b8 16 00 00 00       	mov    eax,0x16
c000c566:	85 d2                	test   edx,edx
c000c568:	0f 85 67 05 00 00    	jne    c000cad5 <sinc_quad_vari_process+0x5d6>
c000c56e:	83 ec 0c             	sub    esp,0xc
c000c571:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c574:	e8 4a 86 01 00       	call   c0024bc3 <__floatsidf>
c000c579:	83 c4 10             	add    esp,0x10
c000c57c:	89 04 24             	mov    DWORD PTR [esp],eax
c000c57f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c583:	68 00 00 00 40       	push   0x40000000
c000c588:	6a 00                	push   0x0
c000c58a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c58e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c592:	e8 4c 79 01 00       	call   c0023ee3 <__adddf3>
c000c597:	59                   	pop    ecx
c000c598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c59c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c5a0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5a3:	e8 1b 86 01 00       	call   c0024bc3 <__floatsidf>
c000c5a8:	83 c4 10             	add    esp,0x10
c000c5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5b3:	52                   	push   edx
c000c5b4:	50                   	push   eax
c000c5b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5bd:	e8 82 82 01 00       	call   c0024844 <__divdf3>
c000c5c2:	83 c4 10             	add    esp,0x10
c000c5c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c5dd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c5e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e8:	52                   	push   edx
c000c5e9:	50                   	push   eax
c000c5ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5f2:	e8 38 88 01 00       	call   c0024e2f <__ltdf2>
c000c5f7:	83 c4 10             	add    esp,0x10
c000c5fa:	85 c0                	test   eax,eax
c000c5fc:	79 1d                	jns    c000c61b <sinc_quad_vari_process+0x11c>
c000c5fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c603:	6a 00                	push   0x0
c000c605:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c609:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c60d:	e8 1d 88 01 00       	call   c0024e2f <__ltdf2>
c000c612:	83 c4 10             	add    esp,0x10
c000c615:	85 c0                	test   eax,eax
c000c617:	78 2c                	js     c000c645 <sinc_quad_vari_process+0x146>
c000c619:	eb 4a                	jmp    c000c665 <sinc_quad_vari_process+0x166>
c000c61b:	68 00 00 f0 3f       	push   0x3ff00000
c000c620:	6a 00                	push   0x0
c000c622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62a:	e8 00 88 01 00       	call   c0024e2f <__ltdf2>
c000c62f:	83 c4 10             	add    esp,0x10
c000c632:	85 c0                	test   eax,eax
c000c634:	79 2f                	jns    c000c665 <sinc_quad_vari_process+0x166>
c000c636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c63a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c63e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c641:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c645:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c649:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c64d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c651:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c655:	e8 ea 81 01 00       	call   c0024844 <__divdf3>
c000c65a:	83 c4 10             	add    esp,0x10
c000c65d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c661:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c665:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c668:	50                   	push   eax
c000c669:	50                   	push   eax
c000c66a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c672:	e8 69 89 01 00       	call   c0024fe0 <lrint>
c000c677:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c67a:	40                   	inc    eax
c000c67b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c67f:	0f af c7             	imul   eax,edi
c000c682:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c68d:	58                   	pop    eax
c000c68e:	5a                   	pop    edx
c000c68f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c693:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c697:	e8 99 f0 ff ff       	call   c000b735 <fmod_one>
c000c69c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c69f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c6a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c6aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6be:	e8 71 7e 01 00       	call   c0024534 <__subdf3>
c000c6c3:	83 c4 18             	add    esp,0x18
c000c6c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6ce:	52                   	push   edx
c000c6cf:	50                   	push   eax
c000c6d0:	e8 0b 89 01 00       	call   c0024fe0 <lrint>
c000c6d5:	0f af f8             	imul   edi,eax
c000c6d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6dc:	01 f8                	add    eax,edi
c000c6de:	99                   	cdq    
c000c6df:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c6e2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c6e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ed:	68 00 00 f0 3f       	push   0x3ff00000
c000c6f2:	6a 00                	push   0x0
c000c6f4:	e8 4b 81 01 00       	call   c0024844 <__divdf3>
c000c6f9:	83 c4 10             	add    esp,0x10
c000c6fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c700:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c704:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c709:	68 23 42 92 0c       	push   0xc924223
c000c70e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c712:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c716:	e8 c8 77 01 00       	call   c0023ee3 <__adddf3>
c000c71b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c71f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c723:	83 c4 20             	add    esp,0x20
c000c726:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c72e:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c736:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c739:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c73c:	7d 4e                	jge    c000c78c <sinc_quad_vari_process+0x28d>
c000c73e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c741:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c744:	01 c8                	add    eax,ecx
c000c746:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c749:	99                   	cdq    
c000c74a:	f7 f9                	idiv   ecx
c000c74c:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c750:	7d 0c                	jge    c000c75e <sinc_quad_vari_process+0x25f>
c000c752:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c755:	85 ff                	test   edi,edi
c000c757:	79 69                	jns    c000c7c2 <sinc_quad_vari_process+0x2c3>
c000c759:	e9 e4 00 00 00       	jmp    c000c842 <sinc_quad_vari_process+0x343>
c000c75e:	50                   	push   eax
c000c75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c763:	56                   	push   esi
c000c764:	53                   	push   ebx
c000c765:	e8 61 f0 ff ff       	call   c000b7cb <prepare_data>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c770:	85 c0                	test   eax,eax
c000c772:	0f 85 5d 03 00 00    	jne    c000cad5 <sinc_quad_vari_process+0x5d6>
c000c778:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c77b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c77e:	01 c8                	add    eax,ecx
c000c780:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c783:	99                   	cdq    
c000c784:	f7 f9                	idiv   ecx
c000c786:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c78a:	7c c6                	jl     c000c752 <sinc_quad_vari_process+0x253>
c000c78c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c78f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c793:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c796:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c799:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c79d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c7a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c7a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c7a7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c7aa:	99                   	cdq    
c000c7ab:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c7ae:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c7b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c7b4:	99                   	cdq    
c000c7b5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c7b8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c7bb:	31 c0                	xor    eax,eax
c000c7bd:	e9 13 03 00 00       	jmp    c000cad5 <sinc_quad_vari_process+0x5d6>
c000c7c2:	83 ec 0c             	sub    esp,0xc
c000c7c5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c7c8:	e8 f6 83 01 00       	call   c0024bc3 <__floatsidf>
c000c7cd:	83 c4 10             	add    esp,0x10
c000c7d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7dc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e8:	e8 f6 76 01 00       	call   c0023ee3 <__adddf3>
c000c7ed:	83 c4 10             	add    esp,0x10
c000c7f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c804:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c808:	e8 d6 76 01 00       	call   c0023ee3 <__adddf3>
c000c80d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c810:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c814:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c818:	e8 a6 83 01 00       	call   c0024bc3 <__floatsidf>
c000c81d:	83 c4 10             	add    esp,0x10
c000c820:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c824:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c828:	52                   	push   edx
c000c829:	50                   	push   eax
c000c82a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c82e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c832:	e8 f6 85 01 00       	call   c0024e2d <__gedf2>
c000c837:	83 c4 10             	add    esp,0x10
c000c83a:	85 c0                	test   eax,eax
c000c83c:	0f 89 4a ff ff ff    	jns    c000c78c <sinc_quad_vari_process+0x28d>
c000c842:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c846:	0f 8e ef 00 00 00    	jle    c000c93b <sinc_quad_vari_process+0x43c>
c000c84c:	83 ec 10             	sub    esp,0x10
c000c84f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c852:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c855:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c858:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c85b:	e8 d4 7c 01 00       	call   c0024534 <__subdf3>
c000c860:	83 c4 18             	add    esp,0x18
c000c863:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c867:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c86b:	52                   	push   edx
c000c86c:	50                   	push   eax
c000c86d:	e8 4e 87 01 00       	call   c0024fc0 <fabs>
c000c872:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c876:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c87a:	83 c4 10             	add    esp,0x10
c000c87d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c882:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c887:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c88b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c88f:	e8 7d 85 01 00       	call   c0024e11 <__gtdf2>
c000c894:	83 c4 10             	add    esp,0x10
c000c897:	85 c0                	test   eax,eax
c000c899:	0f 8e 9c 00 00 00    	jle    c000c93b <sinc_quad_vari_process+0x43c>
c000c89f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8a2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c8a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ad:	52                   	push   edx
c000c8ae:	50                   	push   eax
c000c8af:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c8b2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c8b5:	e8 7a 7c 01 00       	call   c0024534 <__subdf3>
c000c8ba:	59                   	pop    ecx
c000c8bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8c3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c8c6:	e8 f8 82 01 00       	call   c0024bc3 <__floatsidf>
c000c8cb:	83 c4 10             	add    esp,0x10
c000c8ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d6:	52                   	push   edx
c000c8d7:	50                   	push   eax
c000c8d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e0:	e8 7b 7c 01 00       	call   c0024560 <__muldf3>
c000c8e5:	5f                   	pop    edi
c000c8e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8ea:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8ee:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c8f1:	e8 cd 82 01 00       	call   c0024bc3 <__floatsidf>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c901:	52                   	push   edx
c000c902:	50                   	push   eax
c000c903:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c907:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c90b:	e8 34 7f 01 00       	call   c0024844 <__divdf3>
c000c910:	83 c4 10             	add    esp,0x10
c000c913:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c917:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c91b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c91f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c923:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c927:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c92b:	e8 b3 75 01 00       	call   c0023ee3 <__adddf3>
c000c930:	83 c4 10             	add    esp,0x10
c000c933:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c937:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c93b:	83 ec 0c             	sub    esp,0xc
c000c93e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c941:	e8 7d 82 01 00       	call   c0024bc3 <__floatsidf>
c000c946:	83 c4 10             	add    esp,0x10
c000c949:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c94d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c951:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c955:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c959:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c961:	e8 c9 84 01 00       	call   c0024e2f <__ltdf2>
c000c966:	83 c4 10             	add    esp,0x10
c000c969:	85 c0                	test   eax,eax
c000c96b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c96f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c973:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c977:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c97b:	78 10                	js     c000c98d <sinc_quad_vari_process+0x48e>
c000c97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c981:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c985:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c989:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c995:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c999:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99d:	e8 be 7b 01 00       	call   c0024560 <__muldf3>
c000c9a2:	59                   	pop    ecx
c000c9a3:	5f                   	pop    edi
c000c9a4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b4:	e8 55 ed ff ff       	call   c000b70e <double_to_fp>
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	89 c7                	mov    edi,eax
c000c9bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9cb:	e8 90 7b 01 00       	call   c0024560 <__muldf3>
c000c9d0:	83 c4 18             	add    esp,0x18
c000c9d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9d7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	e8 2c ed ff ff       	call   c000b70e <double_to_fp>
c000c9e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c9e5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c9e9:	83 c4 0c             	add    esp,0xc
c000c9ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c9ef:	8d 04 90             	lea    eax,[eax+edx*4]
c000c9f2:	50                   	push   eax
c000c9f3:	50                   	push   eax
c000c9f4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9f7:	e8 c7 81 01 00       	call   c0024bc3 <__floatsidf>
c000c9fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca04:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca14:	e8 2b 7e 01 00       	call   c0024844 <__divdf3>
c000ca19:	83 c4 18             	add    esp,0x18
c000ca1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca20:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca24:	52                   	push   edx
c000ca25:	89 fa                	mov    edx,edi
c000ca27:	50                   	push   eax
c000ca28:	89 d8                	mov    eax,ebx
c000ca2a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000ca2e:	e8 62 d3 ff ff       	call   c0009d95 <calc_output_quad>
c000ca33:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000ca37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca47:	e8 f8 7d 01 00       	call   c0024844 <__divdf3>
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca67:	e8 77 74 01 00       	call   c0023ee3 <__adddf3>
c000ca6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca74:	83 c4 18             	add    esp,0x18
c000ca77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca7f:	e8 b1 ec ff ff       	call   c000b735 <fmod_one>
c000ca84:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca8b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca8f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caa2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caa6:	e8 89 7a 01 00       	call   c0024534 <__subdf3>
c000caab:	83 c4 18             	add    esp,0x18
c000caae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cab2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab6:	52                   	push   edx
c000cab7:	50                   	push   eax
c000cab8:	e8 23 85 01 00       	call   c0024fe0 <lrint>
c000cabd:	0f af f8             	imul   edi,eax
c000cac0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	01 f8                	add    eax,edi
c000cac9:	99                   	cdq    
c000caca:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cacd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cad0:	e9 61 fc ff ff       	jmp    c000c736 <sinc_quad_vari_process+0x237>
c000cad5:	83 c4 4c             	add    esp,0x4c
c000cad8:	5b                   	pop    ebx
c000cad9:	5e                   	pop    esi
c000cada:	5f                   	pop    edi
c000cadb:	5d                   	pop    ebp
c000cadc:	c3                   	ret    

c000cadd <sinc_stereo_vari_process>:
c000cadd:	55                   	push   ebp
c000cade:	b8 05 00 00 00       	mov    eax,0x5
c000cae3:	57                   	push   edi
c000cae4:	56                   	push   esi
c000cae5:	53                   	push   ebx
c000cae6:	83 ec 4c             	sub    esp,0x4c
c000cae9:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000caed:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000caf1:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000caf4:	85 db                	test   ebx,ebx
c000caf6:	0f 84 b7 05 00 00    	je     c000d0b3 <sinc_stereo_vari_process+0x5d6>
c000cafc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000caff:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cb02:	0f af d0             	imul   edx,eax
c000cb05:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000cb08:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000cb0c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cb13:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cb16:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cb1d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb20:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb2b:	57                   	push   edi
c000cb2c:	57                   	push   edi
c000cb2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb35:	e8 7c cb ff ff       	call   c00096b6 <is_bad_src_ratio>
c000cb3a:	83 c4 10             	add    esp,0x10
c000cb3d:	89 c2                	mov    edx,eax
c000cb3f:	b8 16 00 00 00       	mov    eax,0x16
c000cb44:	85 d2                	test   edx,edx
c000cb46:	0f 85 67 05 00 00    	jne    c000d0b3 <sinc_stereo_vari_process+0x5d6>
c000cb4c:	83 ec 0c             	sub    esp,0xc
c000cb4f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cb52:	e8 6c 80 01 00       	call   c0024bc3 <__floatsidf>
c000cb57:	83 c4 10             	add    esp,0x10
c000cb5a:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb61:	68 00 00 00 40       	push   0x40000000
c000cb66:	6a 00                	push   0x0
c000cb68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb70:	e8 6e 73 01 00       	call   c0023ee3 <__adddf3>
c000cb75:	59                   	pop    ecx
c000cb76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb7a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb7e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb81:	e8 3d 80 01 00       	call   c0024bc3 <__floatsidf>
c000cb86:	83 c4 10             	add    esp,0x10
c000cb89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb8d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb91:	52                   	push   edx
c000cb92:	50                   	push   eax
c000cb93:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb9b:	e8 a4 7c 01 00       	call   c0024844 <__divdf3>
c000cba0:	83 c4 10             	add    esp,0x10
c000cba3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cba7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbae:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbb1:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cbbb:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cbbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbcc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbd0:	e8 5a 82 01 00       	call   c0024e2f <__ltdf2>
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	85 c0                	test   eax,eax
c000cbda:	79 1d                	jns    c000cbf9 <sinc_stereo_vari_process+0x11c>
c000cbdc:	68 00 00 f0 3f       	push   0x3ff00000
c000cbe1:	6a 00                	push   0x0
c000cbe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbeb:	e8 3f 82 01 00       	call   c0024e2f <__ltdf2>
c000cbf0:	83 c4 10             	add    esp,0x10
c000cbf3:	85 c0                	test   eax,eax
c000cbf5:	78 2c                	js     c000cc23 <sinc_stereo_vari_process+0x146>
c000cbf7:	eb 4a                	jmp    c000cc43 <sinc_stereo_vari_process+0x166>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc08:	e8 22 82 01 00       	call   c0024e2f <__ltdf2>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	85 c0                	test   eax,eax
c000cc12:	79 2f                	jns    c000cc43 <sinc_stereo_vari_process+0x166>
c000cc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cc1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc1f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc23:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc27:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc33:	e8 0c 7c 01 00       	call   c0024844 <__divdf3>
c000cc38:	83 c4 10             	add    esp,0x10
c000cc3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc43:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc46:	50                   	push   eax
c000cc47:	50                   	push   eax
c000cc48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc50:	e8 8b 83 01 00       	call   c0024fe0 <lrint>
c000cc55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cc58:	40                   	inc    eax
c000cc59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5d:	0f af c7             	imul   eax,edi
c000cc60:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc67:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc6b:	58                   	pop    eax
c000cc6c:	5a                   	pop    edx
c000cc6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc75:	e8 bb ea ff ff       	call   c000b735 <fmod_one>
c000cc7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc81:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc85:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc88:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc9c:	e8 93 78 01 00       	call   c0024534 <__subdf3>
c000cca1:	83 c4 18             	add    esp,0x18
c000cca4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ccac:	52                   	push   edx
c000ccad:	50                   	push   eax
c000ccae:	e8 2d 83 01 00       	call   c0024fe0 <lrint>
c000ccb3:	0f af f8             	imul   edi,eax
c000ccb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ccba:	01 f8                	add    eax,edi
c000ccbc:	99                   	cdq    
c000ccbd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ccc0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ccc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccb:	68 00 00 f0 3f       	push   0x3ff00000
c000ccd0:	6a 00                	push   0x0
c000ccd2:	e8 6d 7b 01 00       	call   c0024844 <__divdf3>
c000ccd7:	83 c4 10             	add    esp,0x10
c000ccda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cce2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cce7:	68 23 42 92 0c       	push   0xc924223
c000ccec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf4:	e8 ea 71 01 00       	call   c0023ee3 <__adddf3>
c000ccf9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ccfd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cd01:	83 c4 20             	add    esp,0x20
c000cd04:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cd0c:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cd14:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cd17:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cd1a:	7d 4e                	jge    c000cd6a <sinc_stereo_vari_process+0x28d>
c000cd1c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd1f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd22:	01 c8                	add    eax,ecx
c000cd24:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd27:	99                   	cdq    
c000cd28:	f7 f9                	idiv   ecx
c000cd2a:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd2e:	7d 0c                	jge    c000cd3c <sinc_stereo_vari_process+0x25f>
c000cd30:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd33:	85 ff                	test   edi,edi
c000cd35:	79 69                	jns    c000cda0 <sinc_stereo_vari_process+0x2c3>
c000cd37:	e9 e4 00 00 00       	jmp    c000ce20 <sinc_stereo_vari_process+0x343>
c000cd3c:	50                   	push   eax
c000cd3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd41:	56                   	push   esi
c000cd42:	53                   	push   ebx
c000cd43:	e8 83 ea ff ff       	call   c000b7cb <prepare_data>
c000cd48:	83 c4 10             	add    esp,0x10
c000cd4b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd4e:	85 c0                	test   eax,eax
c000cd50:	0f 85 5d 03 00 00    	jne    c000d0b3 <sinc_stereo_vari_process+0x5d6>
c000cd56:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd59:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd5c:	01 c8                	add    eax,ecx
c000cd5e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd61:	99                   	cdq    
c000cd62:	f7 f9                	idiv   ecx
c000cd64:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd68:	7c c6                	jl     c000cd30 <sinc_stereo_vari_process+0x253>
c000cd6a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cd6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd71:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd74:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd85:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd88:	99                   	cdq    
c000cd89:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd8c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd8f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd92:	99                   	cdq    
c000cd93:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd96:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd99:	31 c0                	xor    eax,eax
c000cd9b:	e9 13 03 00 00       	jmp    c000d0b3 <sinc_stereo_vari_process+0x5d6>
c000cda0:	83 ec 0c             	sub    esp,0xc
c000cda3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cda6:	e8 18 7e 01 00       	call   c0024bc3 <__floatsidf>
c000cdab:	83 c4 10             	add    esp,0x10
c000cdae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cdba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cdbe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc6:	e8 18 71 01 00       	call   c0023ee3 <__adddf3>
c000cdcb:	83 c4 10             	add    esp,0x10
c000cdce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde6:	e8 f8 70 01 00       	call   c0023ee3 <__adddf3>
c000cdeb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cdee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdf2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf6:	e8 c8 7d 01 00       	call   c0024bc3 <__floatsidf>
c000cdfb:	83 c4 10             	add    esp,0x10
c000cdfe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce06:	52                   	push   edx
c000ce07:	50                   	push   eax
c000ce08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce10:	e8 18 80 01 00       	call   c0024e2d <__gedf2>
c000ce15:	83 c4 10             	add    esp,0x10
c000ce18:	85 c0                	test   eax,eax
c000ce1a:	0f 89 4a ff ff ff    	jns    c000cd6a <sinc_stereo_vari_process+0x28d>
c000ce20:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000ce24:	0f 8e ef 00 00 00    	jle    c000cf19 <sinc_stereo_vari_process+0x43c>
c000ce2a:	83 ec 10             	sub    esp,0x10
c000ce2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce33:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce36:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce39:	e8 f6 76 01 00       	call   c0024534 <__subdf3>
c000ce3e:	83 c4 18             	add    esp,0x18
c000ce41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce49:	52                   	push   edx
c000ce4a:	50                   	push   eax
c000ce4b:	e8 70 81 01 00       	call   c0024fc0 <fabs>
c000ce50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce58:	83 c4 10             	add    esp,0x10
c000ce5b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce60:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce6d:	e8 9f 7f 01 00       	call   c0024e11 <__gtdf2>
c000ce72:	83 c4 10             	add    esp,0x10
c000ce75:	85 c0                	test   eax,eax
c000ce77:	0f 8e 9c 00 00 00    	jle    c000cf19 <sinc_stereo_vari_process+0x43c>
c000ce7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce80:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce8b:	52                   	push   edx
c000ce8c:	50                   	push   eax
c000ce8d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce90:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce93:	e8 9c 76 01 00       	call   c0024534 <__subdf3>
c000ce98:	59                   	pop    ecx
c000ce99:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce9d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cea1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cea4:	e8 1a 7d 01 00       	call   c0024bc3 <__floatsidf>
c000cea9:	83 c4 10             	add    esp,0x10
c000ceac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceb0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceb4:	52                   	push   edx
c000ceb5:	50                   	push   eax
c000ceb6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cebe:	e8 9d 76 01 00       	call   c0024560 <__muldf3>
c000cec3:	5f                   	pop    edi
c000cec4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cec8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cecc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cecf:	e8 ef 7c 01 00       	call   c0024bc3 <__floatsidf>
c000ced4:	83 c4 10             	add    esp,0x10
c000ced7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cedb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cedf:	52                   	push   edx
c000cee0:	50                   	push   eax
c000cee1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee9:	e8 56 79 01 00       	call   c0024844 <__divdf3>
c000ceee:	83 c4 10             	add    esp,0x10
c000cef1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cef5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cef9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cf01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf09:	e8 d5 6f 01 00       	call   c0023ee3 <__adddf3>
c000cf0e:	83 c4 10             	add    esp,0x10
c000cf11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf19:	83 ec 0c             	sub    esp,0xc
c000cf1c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf1f:	e8 9f 7c 01 00       	call   c0024bc3 <__floatsidf>
c000cf24:	83 c4 10             	add    esp,0x10
c000cf27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3f:	e8 eb 7e 01 00       	call   c0024e2f <__ltdf2>
c000cf44:	83 c4 10             	add    esp,0x10
c000cf47:	85 c0                	test   eax,eax
c000cf49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf51:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf55:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000cf59:	78 10                	js     c000cf6b <sinc_stereo_vari_process+0x48e>
c000cf5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf5f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf67:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7b:	e8 e0 75 01 00       	call   c0024560 <__muldf3>
c000cf80:	59                   	pop    ecx
c000cf81:	5f                   	pop    edi
c000cf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf92:	e8 77 e7 ff ff       	call   c000b70e <double_to_fp>
c000cf97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf9b:	89 c7                	mov    edi,eax
c000cf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa9:	e8 b2 75 01 00       	call   c0024560 <__muldf3>
c000cfae:	83 c4 18             	add    esp,0x18
c000cfb1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfb9:	52                   	push   edx
c000cfba:	50                   	push   eax
c000cfbb:	e8 4e e7 ff ff       	call   c000b70e <double_to_fp>
c000cfc0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cfc3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cfc7:	83 c4 0c             	add    esp,0xc
c000cfca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cfcd:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfd0:	50                   	push   eax
c000cfd1:	50                   	push   eax
c000cfd2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfd5:	e8 e9 7b 01 00       	call   c0024bc3 <__floatsidf>
c000cfda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfe2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff2:	e8 4d 78 01 00       	call   c0024844 <__divdf3>
c000cff7:	83 c4 18             	add    esp,0x18
c000cffa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cffe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d002:	52                   	push   edx
c000d003:	89 fa                	mov    edx,edi
c000d005:	50                   	push   eax
c000d006:	89 d8                	mov    eax,ebx
c000d008:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d00c:	e8 a6 c9 ff ff       	call   c00099b7 <calc_output_stereo>
c000d011:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d01d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d021:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d025:	e8 1a 78 01 00       	call   c0024844 <__divdf3>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d031:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d035:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d03d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d041:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d045:	e8 99 6e 01 00       	call   c0023ee3 <__adddf3>
c000d04a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d04e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d052:	83 c4 18             	add    esp,0x18
c000d055:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d059:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05d:	e8 d3 e6 ff ff       	call   c000b735 <fmod_one>
c000d062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d069:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d06d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d080:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d084:	e8 ab 74 01 00       	call   c0024534 <__subdf3>
c000d089:	83 c4 18             	add    esp,0x18
c000d08c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d090:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d094:	52                   	push   edx
c000d095:	50                   	push   eax
c000d096:	e8 45 7f 01 00       	call   c0024fe0 <lrint>
c000d09b:	0f af f8             	imul   edi,eax
c000d09e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0a2:	83 c4 10             	add    esp,0x10
c000d0a5:	01 f8                	add    eax,edi
c000d0a7:	99                   	cdq    
c000d0a8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0ab:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ae:	e9 61 fc ff ff       	jmp    c000cd14 <sinc_stereo_vari_process+0x237>
c000d0b3:	83 c4 4c             	add    esp,0x4c
c000d0b6:	5b                   	pop    ebx
c000d0b7:	5e                   	pop    esi
c000d0b8:	5f                   	pop    edi
c000d0b9:	5d                   	pop    ebp
c000d0ba:	c3                   	ret    

c000d0bb <sinc_mono_vari_process>:
c000d0bb:	55                   	push   ebp
c000d0bc:	b8 05 00 00 00       	mov    eax,0x5
c000d0c1:	57                   	push   edi
c000d0c2:	56                   	push   esi
c000d0c3:	53                   	push   ebx
c000d0c4:	83 ec 4c             	sub    esp,0x4c
c000d0c7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0cb:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0cf:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d2:	85 db                	test   ebx,ebx
c000d0d4:	0f 84 e8 05 00 00    	je     c000d6c2 <sinc_mono_vari_process+0x607>
c000d0da:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d0dd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d0e0:	0f af d0             	imul   edx,eax
c000d0e3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d0e6:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d0ea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0f1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0fb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d101:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d105:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d109:	57                   	push   edi
c000d10a:	57                   	push   edi
c000d10b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d10f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d113:	e8 9e c5 ff ff       	call   c00096b6 <is_bad_src_ratio>
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	89 c2                	mov    edx,eax
c000d11d:	b8 16 00 00 00       	mov    eax,0x16
c000d122:	85 d2                	test   edx,edx
c000d124:	0f 85 98 05 00 00    	jne    c000d6c2 <sinc_mono_vari_process+0x607>
c000d12a:	83 ec 0c             	sub    esp,0xc
c000d12d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d130:	e8 8e 7a 01 00       	call   c0024bc3 <__floatsidf>
c000d135:	83 c4 10             	add    esp,0x10
c000d138:	89 04 24             	mov    DWORD PTR [esp],eax
c000d13b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d13f:	68 00 00 00 40       	push   0x40000000
c000d144:	6a 00                	push   0x0
c000d146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d14a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d14e:	e8 90 6d 01 00       	call   c0023ee3 <__adddf3>
c000d153:	59                   	pop    ecx
c000d154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d15c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d15f:	e8 5f 7a 01 00       	call   c0024bc3 <__floatsidf>
c000d164:	83 c4 10             	add    esp,0x10
c000d167:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d16b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d16f:	52                   	push   edx
c000d170:	50                   	push   eax
c000d171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d179:	e8 c6 76 01 00       	call   c0024844 <__divdf3>
c000d17e:	83 c4 10             	add    esp,0x10
c000d181:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d185:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d189:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d18c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d18f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d192:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d196:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d199:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d19c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d1a4:	52                   	push   edx
c000d1a5:	50                   	push   eax
c000d1a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1ae:	e8 7c 7c 01 00       	call   c0024e2f <__ltdf2>
c000d1b3:	83 c4 10             	add    esp,0x10
c000d1b6:	85 c0                	test   eax,eax
c000d1b8:	79 1d                	jns    c000d1d7 <sinc_mono_vari_process+0x11c>
c000d1ba:	68 00 00 f0 3f       	push   0x3ff00000
c000d1bf:	6a 00                	push   0x0
c000d1c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1c9:	e8 61 7c 01 00       	call   c0024e2f <__ltdf2>
c000d1ce:	83 c4 10             	add    esp,0x10
c000d1d1:	85 c0                	test   eax,eax
c000d1d3:	78 2c                	js     c000d201 <sinc_mono_vari_process+0x146>
c000d1d5:	eb 4a                	jmp    c000d221 <sinc_mono_vari_process+0x166>
c000d1d7:	68 00 00 f0 3f       	push   0x3ff00000
c000d1dc:	6a 00                	push   0x0
c000d1de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e6:	e8 44 7c 01 00       	call   c0024e2f <__ltdf2>
c000d1eb:	83 c4 10             	add    esp,0x10
c000d1ee:	85 c0                	test   eax,eax
c000d1f0:	79 2f                	jns    c000d221 <sinc_mono_vari_process+0x166>
c000d1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d201:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d205:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d209:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d20d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d211:	e8 2e 76 01 00       	call   c0024844 <__divdf3>
c000d216:	83 c4 10             	add    esp,0x10
c000d219:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d21d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d221:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d224:	50                   	push   eax
c000d225:	50                   	push   eax
c000d226:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	e8 ad 7d 01 00       	call   c0024fe0 <lrint>
c000d233:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d236:	40                   	inc    eax
c000d237:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d23b:	0f af c7             	imul   eax,edi
c000d23e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d249:	58                   	pop    eax
c000d24a:	5a                   	pop    edx
c000d24b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d253:	e8 dd e4 ff ff       	call   c000b735 <fmod_one>
c000d258:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d25b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d25f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d263:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d266:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d26a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d26e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d272:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d276:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d27a:	e8 b5 72 01 00       	call   c0024534 <__subdf3>
c000d27f:	83 c4 18             	add    esp,0x18
c000d282:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d286:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d28a:	52                   	push   edx
c000d28b:	50                   	push   eax
c000d28c:	e8 4f 7d 01 00       	call   c0024fe0 <lrint>
c000d291:	0f af f8             	imul   edi,eax
c000d294:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d298:	01 f8                	add    eax,edi
c000d29a:	99                   	cdq    
c000d29b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d29e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a9:	68 00 00 f0 3f       	push   0x3ff00000
c000d2ae:	6a 00                	push   0x0
c000d2b0:	e8 8f 75 01 00       	call   c0024844 <__divdf3>
c000d2b5:	83 c4 10             	add    esp,0x10
c000d2b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2c0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d2c5:	68 23 42 92 0c       	push   0xc924223
c000d2ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2d2:	e8 0c 6c 01 00       	call   c0023ee3 <__adddf3>
c000d2d7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2db:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d2df:	83 c4 20             	add    esp,0x20
c000d2e2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d2ea:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d2f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d2f5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d2f8:	7d 4e                	jge    c000d348 <sinc_mono_vari_process+0x28d>
c000d2fa:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2fd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d300:	01 c8                	add    eax,ecx
c000d302:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d305:	99                   	cdq    
c000d306:	f7 f9                	idiv   ecx
c000d308:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d30c:	7d 0c                	jge    c000d31a <sinc_mono_vari_process+0x25f>
c000d30e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d311:	85 ff                	test   edi,edi
c000d313:	79 69                	jns    c000d37e <sinc_mono_vari_process+0x2c3>
c000d315:	e9 e4 00 00 00       	jmp    c000d3fe <sinc_mono_vari_process+0x343>
c000d31a:	57                   	push   edi
c000d31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d31f:	56                   	push   esi
c000d320:	53                   	push   ebx
c000d321:	e8 a5 e4 ff ff       	call   c000b7cb <prepare_data>
c000d326:	83 c4 10             	add    esp,0x10
c000d329:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d32c:	85 c0                	test   eax,eax
c000d32e:	0f 85 8e 03 00 00    	jne    c000d6c2 <sinc_mono_vari_process+0x607>
c000d334:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d337:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d33a:	01 c8                	add    eax,ecx
c000d33c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d33f:	99                   	cdq    
c000d340:	f7 f9                	idiv   ecx
c000d342:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d346:	7c c6                	jl     c000d30e <sinc_mono_vari_process+0x253>
c000d348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d34b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d34f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d352:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d355:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d359:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d35d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d360:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d363:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d366:	99                   	cdq    
c000d367:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d36a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d36d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d370:	99                   	cdq    
c000d371:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d374:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d377:	31 c0                	xor    eax,eax
c000d379:	e9 44 03 00 00       	jmp    c000d6c2 <sinc_mono_vari_process+0x607>
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d384:	e8 3a 78 01 00       	call   c0024bc3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d390:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d394:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d398:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d39c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3a4:	e8 3a 6b 01 00       	call   c0023ee3 <__adddf3>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d3b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d3b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c4:	e8 1a 6b 01 00       	call   c0023ee3 <__adddf3>
c000d3c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d3cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3d4:	e8 ea 77 01 00       	call   c0024bc3 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ee:	e8 1e 7a 01 00       	call   c0024e11 <__gtdf2>
c000d3f3:	83 c4 10             	add    esp,0x10
c000d3f6:	85 c0                	test   eax,eax
c000d3f8:	0f 8f 4a ff ff ff    	jg     c000d348 <sinc_mono_vari_process+0x28d>
c000d3fe:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d402:	0f 8e ef 00 00 00    	jle    c000d4f7 <sinc_mono_vari_process+0x43c>
c000d408:	83 ec 10             	sub    esp,0x10
c000d40b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d40e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d411:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d414:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d417:	e8 18 71 01 00       	call   c0024534 <__subdf3>
c000d41c:	83 c4 18             	add    esp,0x18
c000d41f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d423:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d427:	52                   	push   edx
c000d428:	50                   	push   eax
c000d429:	e8 92 7b 01 00       	call   c0024fc0 <fabs>
c000d42e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d432:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d436:	83 c4 10             	add    esp,0x10
c000d439:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d43e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d447:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d44b:	e8 c1 79 01 00       	call   c0024e11 <__gtdf2>
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	85 c0                	test   eax,eax
c000d455:	0f 8e 9c 00 00 00    	jle    c000d4f7 <sinc_mono_vari_process+0x43c>
c000d45b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d45e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d461:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d465:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d469:	52                   	push   edx
c000d46a:	50                   	push   eax
c000d46b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d46e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d471:	e8 be 70 01 00       	call   c0024534 <__subdf3>
c000d476:	5f                   	pop    edi
c000d477:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d47b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d47f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d482:	e8 3c 77 01 00       	call   c0024bc3 <__floatsidf>
c000d487:	83 c4 10             	add    esp,0x10
c000d48a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d48e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d492:	52                   	push   edx
c000d493:	50                   	push   eax
c000d494:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d498:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49c:	e8 bf 70 01 00       	call   c0024560 <__muldf3>
c000d4a1:	59                   	pop    ecx
c000d4a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d4a6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d4aa:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d4ad:	e8 11 77 01 00       	call   c0024bc3 <__floatsidf>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4bd:	52                   	push   edx
c000d4be:	50                   	push   eax
c000d4bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c7:	e8 78 73 01 00       	call   c0024844 <__divdf3>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e7:	e8 f7 69 01 00       	call   c0023ee3 <__adddf3>
c000d4ec:	83 c4 10             	add    esp,0x10
c000d4ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f7:	83 ec 0c             	sub    esp,0xc
c000d4fa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4fd:	e8 c1 76 01 00       	call   c0024bc3 <__floatsidf>
c000d502:	83 c4 10             	add    esp,0x10
c000d505:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d50d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d511:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 0d 79 01 00       	call   c0024e2f <__ltdf2>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	85 c0                	test   eax,eax
c000d527:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d52b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d52f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d533:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d537:	78 10                	js     c000d549 <sinc_mono_vari_process+0x48e>
c000d539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d53d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d541:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d551:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d555:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d559:	e8 02 70 01 00       	call   c0024560 <__muldf3>
c000d55e:	59                   	pop    ecx
c000d55f:	5f                   	pop    edi
c000d560:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d564:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d568:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d56c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d570:	e8 99 e1 ff ff       	call   c000b70e <double_to_fp>
c000d575:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d579:	89 c7                	mov    edi,eax
c000d57b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d587:	e8 d4 6f 01 00       	call   c0024560 <__muldf3>
c000d58c:	83 c4 18             	add    esp,0x18
c000d58f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d593:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d597:	52                   	push   edx
c000d598:	50                   	push   eax
c000d599:	e8 70 e1 ff ff       	call   c000b70e <double_to_fp>
c000d59e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d5a2:	83 ec 0c             	sub    esp,0xc
c000d5a5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d5a8:	e8 16 76 01 00       	call   c0024bc3 <__floatsidf>
c000d5ad:	83 c4 10             	add    esp,0x10
c000d5b0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5b4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5b8:	52                   	push   edx
c000d5b9:	50                   	push   eax
c000d5ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c2:	e8 7d 72 01 00       	call   c0024844 <__divdf3>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5d6:	89 d8                	mov    eax,ebx
c000d5d8:	89 fa                	mov    edx,edi
c000d5da:	e8 7c c1 ff ff       	call   c000975b <calc_output_single>
c000d5df:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d5e2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d5e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5ed:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d5f1:	52                   	push   edx
c000d5f2:	50                   	push   eax
c000d5f3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5fb:	e8 60 6f 01 00       	call   c0024560 <__muldf3>
c000d600:	59                   	pop    ecx
c000d601:	59                   	pop    ecx
c000d602:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d606:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d60a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d60e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d612:	e8 1c 78 01 00       	call   c0024e33 <__truncdfsf2>
c000d617:	83 c4 10             	add    esp,0x10
c000d61a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d61e:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d621:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d62c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d630:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d634:	e8 0b 72 01 00       	call   c0024844 <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d650:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d654:	e8 8a 68 01 00       	call   c0023ee3 <__adddf3>
c000d659:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d65d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d661:	83 c4 18             	add    esp,0x18
c000d664:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d668:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d66c:	e8 c4 e0 ff ff       	call   c000b735 <fmod_one>
c000d671:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d674:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d678:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d67c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d67f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d68b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d693:	e8 9c 6e 01 00       	call   c0024534 <__subdf3>
c000d698:	83 c4 18             	add    esp,0x18
c000d69b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d69f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d6a3:	52                   	push   edx
c000d6a4:	50                   	push   eax
c000d6a5:	e8 36 79 01 00       	call   c0024fe0 <lrint>
c000d6aa:	0f af f8             	imul   edi,eax
c000d6ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6b1:	83 c4 10             	add    esp,0x10
c000d6b4:	01 f8                	add    eax,edi
c000d6b6:	99                   	cdq    
c000d6b7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d6ba:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d6bd:	e9 30 fc ff ff       	jmp    c000d2f2 <sinc_mono_vari_process+0x237>
c000d6c2:	83 c4 4c             	add    esp,0x4c
c000d6c5:	5b                   	pop    ebx
c000d6c6:	5e                   	pop    esi
c000d6c7:	5f                   	pop    edi
c000d6c8:	5d                   	pop    ebp
c000d6c9:	c3                   	ret    

c000d6ca <sinc_get_name>:
c000d6ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6ce:	31 c0                	xor    eax,eax
c000d6d0:	83 fa 02             	cmp    edx,0x2
c000d6d3:	77 07                	ja     c000d6dc <sinc_get_name+0x12>
c000d6d5:	8b 04 95 c4 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd983c]
c000d6dc:	c3                   	ret    

c000d6dd <sinc_get_description>:
c000d6dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6e1:	31 c0                	xor    eax,eax
c000d6e3:	83 fa 02             	cmp    edx,0x2
c000d6e6:	77 07                	ja     c000d6ef <sinc_get_description+0x12>
c000d6e8:	8b 04 95 b8 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9848]
c000d6ef:	c3                   	ret    

c000d6f0 <sinc_set_converter>:
c000d6f0:	53                   	push   ebx
c000d6f1:	81 ec 58 08 00 00    	sub    esp,0x858
c000d6f7:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d6fe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d701:	85 c0                	test   eax,eax
c000d703:	74 13                	je     c000d718 <sinc_set_converter+0x28>
c000d705:	83 ec 0c             	sub    esp,0xc
c000d708:	50                   	push   eax
c000d709:	e8 68 1a 00 00       	call   c000f176 <free>
c000d70e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d715:	83 c4 10             	add    esp,0x10
c000d718:	50                   	push   eax
c000d719:	68 44 08 00 00       	push   0x844
c000d71e:	6a 00                	push   0x0
c000d720:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d724:	50                   	push   eax
c000d725:	e8 c2 2f ff ff       	call   c00006ec <memset>
c000d72a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d72d:	83 c4 10             	add    esp,0x10
c000d730:	b8 0b 00 00 00       	mov    eax,0xb
c000d735:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d73b:	7f 6e                	jg     c000d7ab <sinc_set_converter+0xbb>
c000d73d:	83 fa 01             	cmp    edx,0x1
c000d740:	75 10                	jne    c000d752 <sinc_set_converter+0x62>
c000d742:	c7 43 24 bb d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0bb
c000d749:	c7 43 20 bb d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0bb
c000d750:	eb 4d                	jmp    c000d79f <sinc_set_converter+0xaf>
c000d752:	83 fa 02             	cmp    edx,0x2
c000d755:	75 10                	jne    c000d767 <sinc_set_converter+0x77>
c000d757:	c7 43 24 dd ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cadd
c000d75e:	c7 43 20 dd ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cadd
c000d765:	eb 38                	jmp    c000d79f <sinc_set_converter+0xaf>
c000d767:	83 fa 04             	cmp    edx,0x4
c000d76a:	75 10                	jne    c000d77c <sinc_set_converter+0x8c>
c000d76c:	c7 43 24 ff c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c4ff
c000d773:	c7 43 20 ff c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c4ff
c000d77a:	eb 23                	jmp    c000d79f <sinc_set_converter+0xaf>
c000d77c:	83 fa 06             	cmp    edx,0x6
c000d77f:	75 10                	jne    c000d791 <sinc_set_converter+0xa1>
c000d781:	c7 43 24 21 bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf21
c000d788:	c7 43 20 21 bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf21
c000d78f:	eb 0e                	jmp    c000d79f <sinc_set_converter+0xaf>
c000d791:	c7 43 24 45 b9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b945
c000d798:	c7 43 20 45 b9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b945
c000d79f:	c7 43 28 62 ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab62
c000d7a6:	b8 0a 00 00 00       	mov    eax,0xa
c000d7ab:	81 c4 58 08 00 00    	add    esp,0x858
c000d7b1:	5b                   	pop    ebx
c000d7b2:	c3                   	ret    

c000d7b3 <is_bad_src_ratio>:
c000d7b3:	83 ec 1c             	sub    esp,0x1c
c000d7b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d7c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7c6:	b8 00 00 00 00       	mov    eax,0x0
c000d7cb:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d7d0:	52                   	push   edx
c000d7d1:	50                   	push   eax
c000d7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7da:	e8 50 76 01 00       	call   c0024e2f <__ltdf2>
c000d7df:	83 c4 10             	add    esp,0x10
c000d7e2:	85 c0                	test   eax,eax
c000d7e4:	78 20                	js     c000d806 <is_bad_src_ratio+0x53>
c000d7e6:	b8 00 00 00 00       	mov    eax,0x0
c000d7eb:	ba 00 00 70 40       	mov    edx,0x40700000
c000d7f0:	52                   	push   edx
c000d7f1:	50                   	push   eax
c000d7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7fa:	e8 12 76 01 00       	call   c0024e11 <__gtdf2>
c000d7ff:	83 c4 10             	add    esp,0x10
c000d802:	85 c0                	test   eax,eax
c000d804:	7e 07                	jle    c000d80d <is_bad_src_ratio+0x5a>
c000d806:	b8 01 00 00 00       	mov    eax,0x1
c000d80b:	eb 05                	jmp    c000d812 <is_bad_src_ratio+0x5f>
c000d80d:	b8 00 00 00 00       	mov    eax,0x0
c000d812:	83 c4 1c             	add    esp,0x1c
c000d815:	c3                   	ret    

c000d816 <fmod_one>:
c000d816:	83 ec 2c             	sub    esp,0x2c
c000d819:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d81d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d821:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d825:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d829:	83 ec 08             	sub    esp,0x8
c000d82c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d834:	e8 a7 77 01 00       	call   c0024fe0 <lrint>
c000d839:	83 c4 10             	add    esp,0x10
c000d83c:	83 ec 0c             	sub    esp,0xc
c000d83f:	50                   	push   eax
c000d840:	e8 7e 73 01 00       	call   c0024bc3 <__floatsidf>
c000d845:	83 c4 10             	add    esp,0x10
c000d848:	52                   	push   edx
c000d849:	50                   	push   eax
c000d84a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d84e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d852:	e8 dd 6c 01 00       	call   c0024534 <__subdf3>
c000d857:	83 c4 10             	add    esp,0x10
c000d85a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d862:	b8 00 00 00 00       	mov    eax,0x0
c000d867:	ba 00 00 00 00       	mov    edx,0x0
c000d86c:	52                   	push   edx
c000d86d:	50                   	push   eax
c000d86e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d872:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d876:	e8 b4 75 01 00       	call   c0024e2f <__ltdf2>
c000d87b:	83 c4 10             	add    esp,0x10
c000d87e:	85 c0                	test   eax,eax
c000d880:	79 1e                	jns    c000d8a0 <fmod_one+0x8a>
c000d882:	b8 00 00 00 00       	mov    eax,0x0
c000d887:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d88c:	52                   	push   edx
c000d88d:	50                   	push   eax
c000d88e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d892:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d896:	e8 48 66 01 00       	call   c0023ee3 <__adddf3>
c000d89b:	83 c4 10             	add    esp,0x10
c000d89e:	eb 08                	jmp    c000d8a8 <fmod_one+0x92>
c000d8a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d8a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d8a8:	83 c4 2c             	add    esp,0x2c
c000d8ab:	c3                   	ret    

c000d8ac <zoh_vari_process>:
c000d8ac:	55                   	push   ebp
c000d8ad:	57                   	push   edi
c000d8ae:	56                   	push   esi
c000d8af:	53                   	push   ebx
c000d8b0:	83 ec 3c             	sub    esp,0x3c
c000d8b3:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d8b7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d8bb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d8c3:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d8c7:	0f 8e a9 05 00 00    	jle    c000de76 <zoh_vari_process+0x5ca>
c000d8cd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d8d0:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d8d8:	85 db                	test   ebx,ebx
c000d8da:	0f 84 96 05 00 00    	je     c000de76 <zoh_vari_process+0x5ca>
c000d8e0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d8e3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d8e7:	74 19                	je     c000d902 <zoh_vari_process+0x56>
c000d8e9:	31 d2                	xor    edx,edx
c000d8eb:	39 c2                	cmp    edx,eax
c000d8ed:	7d 0c                	jge    c000d8fb <zoh_vari_process+0x4f>
c000d8ef:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8f1:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d8f4:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d8f8:	42                   	inc    edx
c000d8f9:	eb f0                	jmp    c000d8eb <zoh_vari_process+0x3f>
c000d8fb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d902:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d905:	0f af d0             	imul   edx,eax
c000d908:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d90b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d90f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d916:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d919:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d920:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d923:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d926:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d92a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d92e:	57                   	push   edi
c000d92f:	57                   	push   edi
c000d930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d938:	e8 76 fe ff ff       	call   c000d7b3 <is_bad_src_ratio>
c000d93d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d941:	83 c4 10             	add    esp,0x10
c000d944:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d949:	0f 85 1f 05 00 00    	jne    c000de6e <zoh_vari_process+0x5c2>
c000d94f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d952:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d955:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d959:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d95d:	68 00 00 f0 3f       	push   0x3ff00000
c000d962:	6a 00                	push   0x0
c000d964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d96c:	e8 be 74 01 00       	call   c0024e2f <__ltdf2>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	85 c0                	test   eax,eax
c000d976:	0f 89 dc 01 00 00    	jns    c000db58 <zoh_vari_process+0x2ac>
c000d97c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d97f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d982:	0f 8d d0 01 00 00    	jge    c000db58 <zoh_vari_process+0x2ac>
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d98e:	e8 30 72 01 00       	call   c0024bc3 <__floatsidf>
c000d993:	83 c4 10             	add    esp,0x10
c000d996:	89 04 24             	mov    DWORD PTR [esp],eax
c000d999:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d99d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ad:	e8 ae 6b 01 00       	call   c0024560 <__muldf3>
c000d9b2:	59                   	pop    ecx
c000d9b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9bb:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9be:	e8 00 72 01 00       	call   c0024bc3 <__floatsidf>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9ce:	52                   	push   edx
c000d9cf:	50                   	push   eax
c000d9d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9d8:	e8 06 65 01 00       	call   c0023ee3 <__adddf3>
c000d9dd:	59                   	pop    ecx
c000d9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9e6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9e9:	e8 d5 71 01 00       	call   c0024bc3 <__floatsidf>
c000d9ee:	83 c4 10             	add    esp,0x10
c000d9f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9f9:	52                   	push   edx
c000d9fa:	50                   	push   eax
c000d9fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da03:	e8 25 74 01 00       	call   c0024e2d <__gedf2>
c000da08:	83 c4 10             	add    esp,0x10
c000da0b:	85 c0                	test   eax,eax
c000da0d:	0f 89 45 01 00 00    	jns    c000db58 <zoh_vari_process+0x2ac>
c000da13:	85 ff                	test   edi,edi
c000da15:	0f 8e ee 00 00 00    	jle    c000db09 <zoh_vari_process+0x25d>
c000da1b:	83 ec 10             	sub    esp,0x10
c000da1e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da21:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da24:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da27:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000da2a:	e8 05 6b 01 00       	call   c0024534 <__subdf3>
c000da2f:	83 c4 18             	add    esp,0x18
c000da32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da3a:	52                   	push   edx
c000da3b:	50                   	push   eax
c000da3c:	e8 7f 75 01 00       	call   c0024fc0 <fabs>
c000da41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da45:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da51:	68 23 42 92 0c       	push   0xc924223
c000da56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da5e:	e8 ae 73 01 00       	call   c0024e11 <__gtdf2>
c000da63:	83 c4 10             	add    esp,0x10
c000da66:	85 c0                	test   eax,eax
c000da68:	0f 8e 9b 00 00 00    	jle    c000db09 <zoh_vari_process+0x25d>
c000da6e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da71:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da74:	89 04 24             	mov    DWORD PTR [esp],eax
c000da77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da7b:	52                   	push   edx
c000da7c:	50                   	push   eax
c000da7d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da80:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da83:	e8 ac 6a 01 00       	call   c0024534 <__subdf3>
c000da88:	59                   	pop    ecx
c000da89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da91:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da94:	e8 2a 71 01 00       	call   c0024bc3 <__floatsidf>
c000da99:	83 c4 10             	add    esp,0x10
c000da9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000daa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000daa4:	52                   	push   edx
c000daa5:	50                   	push   eax
c000daa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daae:	e8 ad 6a 01 00       	call   c0024560 <__muldf3>
c000dab3:	5f                   	pop    edi
c000dab4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dab8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dabc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dabf:	e8 ff 70 01 00       	call   c0024bc3 <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dacb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad9:	e8 66 6d 01 00       	call   c0024844 <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dae5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dae9:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000daed:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000daf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daf9:	e8 e5 63 01 00       	call   c0023ee3 <__adddf3>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db09:	31 c0                	xor    eax,eax
c000db0b:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000db0e:	7e 13                	jle    c000db23 <zoh_vari_process+0x277>
c000db10:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000db14:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000db17:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000db1a:	40                   	inc    eax
c000db1b:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000db1e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000db21:	eb e8                	jmp    c000db0b <zoh_vari_process+0x25f>
c000db23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db2b:	68 00 00 f0 3f       	push   0x3ff00000
c000db30:	6a 00                	push   0x0
c000db32:	e8 0d 6d 01 00       	call   c0024844 <__divdf3>
c000db37:	83 c4 10             	add    esp,0x10
c000db3a:	89 04 24             	mov    DWORD PTR [esp],eax
c000db3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db41:	52                   	push   edx
c000db42:	50                   	push   eax
c000db43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4b:	e8 93 63 01 00       	call   c0023ee3 <__adddf3>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	e9 fd fd ff ff       	jmp    c000d955 <zoh_vari_process+0xa9>
c000db58:	57                   	push   edi
c000db59:	57                   	push   edi
c000db5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db62:	e8 af fc ff ff       	call   c000d816 <fmod_one>
c000db67:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000db6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db6e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db82:	e8 ad 69 01 00       	call   c0024534 <__subdf3>
c000db87:	83 c4 18             	add    esp,0x18
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	e8 47 74 01 00       	call   c0024fe0 <lrint>
c000db99:	83 c4 10             	add    esp,0x10
c000db9c:	0f af f8             	imul   edi,eax
c000db9f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dba2:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000dba5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000dba9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dbac:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000dbaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dbb6:	0f 8d 1d 02 00 00    	jge    c000ddd9 <zoh_vari_process+0x52d>
c000dbbc:	83 ec 0c             	sub    esp,0xc
c000dbbf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbc2:	e8 fc 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dbc7:	83 c4 10             	add    esp,0x10
c000dbca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbd6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbe2:	e8 79 69 01 00       	call   c0024560 <__muldf3>
c000dbe7:	59                   	pop    ecx
c000dbe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbec:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dbf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf4:	e8 ca 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dbf9:	83 c4 10             	add    esp,0x10
c000dbfc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc00:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc04:	52                   	push   edx
c000dc05:	50                   	push   eax
c000dc06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc0e:	e8 d0 62 01 00       	call   c0023ee3 <__adddf3>
c000dc13:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc1e:	e8 a0 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc2e:	52                   	push   edx
c000dc2f:	50                   	push   eax
c000dc30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc38:	e8 f4 71 01 00       	call   c0024e31 <__ledf2>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	85 c0                	test   eax,eax
c000dc42:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc46:	0f 8f 8d 01 00 00    	jg     c000ddd9 <zoh_vari_process+0x52d>
c000dc4c:	85 c9                	test   ecx,ecx
c000dc4e:	0f 8e ef 00 00 00    	jle    c000dd43 <zoh_vari_process+0x497>
c000dc54:	83 ec 10             	sub    esp,0x10
c000dc57:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc5a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dc60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc63:	e8 cc 68 01 00       	call   c0024534 <__subdf3>
c000dc68:	83 c4 18             	add    esp,0x18
c000dc6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc73:	52                   	push   edx
c000dc74:	50                   	push   eax
c000dc75:	e8 46 73 01 00       	call   c0024fc0 <fabs>
c000dc7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc82:	83 c4 10             	add    esp,0x10
c000dc85:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc8a:	68 23 42 92 0c       	push   0xc924223
c000dc8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc97:	e8 75 71 01 00       	call   c0024e11 <__gtdf2>
c000dc9c:	83 c4 10             	add    esp,0x10
c000dc9f:	85 c0                	test   eax,eax
c000dca1:	0f 8e 9c 00 00 00    	jle    c000dd43 <zoh_vari_process+0x497>
c000dca7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dcaa:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dcad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb5:	52                   	push   edx
c000dcb6:	50                   	push   eax
c000dcb7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcba:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcbd:	e8 72 68 01 00       	call   c0024534 <__subdf3>
c000dcc2:	5f                   	pop    edi
c000dcc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcc7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dccb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcce:	e8 f0 6e 01 00       	call   c0024bc3 <__floatsidf>
c000dcd3:	83 c4 10             	add    esp,0x10
c000dcd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcda:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcde:	52                   	push   edx
c000dcdf:	50                   	push   eax
c000dce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce8:	e8 73 68 01 00       	call   c0024560 <__muldf3>
c000dced:	59                   	pop    ecx
c000dcee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcf2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcf6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dcf9:	e8 c5 6e 01 00       	call   c0024bc3 <__floatsidf>
c000dcfe:	83 c4 10             	add    esp,0x10
c000dd01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd05:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd09:	52                   	push   edx
c000dd0a:	50                   	push   eax
c000dd0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd13:	e8 2c 6b 01 00       	call   c0024844 <__divdf3>
c000dd18:	83 c4 10             	add    esp,0x10
c000dd1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd33:	e8 ab 61 01 00       	call   c0023ee3 <__adddf3>
c000dd38:	83 c4 10             	add    esp,0x10
c000dd3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd43:	31 c0                	xor    eax,eax
c000dd45:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dd48:	39 c2                	cmp    edx,eax
c000dd4a:	7e 1d                	jle    c000dd69 <zoh_vari_process+0x4bd>
c000dd4c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dd4f:	29 d1                	sub    ecx,edx
c000dd51:	89 ca                	mov    edx,ecx
c000dd53:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd55:	01 c2                	add    edx,eax
c000dd57:	40                   	inc    eax
c000dd58:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dd5b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd5e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd61:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dd64:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd67:	eb dc                	jmp    c000dd45 <zoh_vari_process+0x499>
c000dd69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd71:	68 00 00 f0 3f       	push   0x3ff00000
c000dd76:	6a 00                	push   0x0
c000dd78:	e8 c7 6a 01 00       	call   c0024844 <__divdf3>
c000dd7d:	83 c4 10             	add    esp,0x10
c000dd80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd84:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd8c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd98:	e8 46 61 01 00       	call   c0023ee3 <__adddf3>
c000dd9d:	5f                   	pop    edi
c000dd9e:	59                   	pop    ecx
c000dd9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dda3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dda7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddaf:	e8 62 fa ff ff       	call   c000d816 <fmod_one>
c000ddb4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ddb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddcf:	e8 60 67 01 00       	call   c0024534 <__subdf3>
c000ddd4:	e9 ae fd ff ff       	jmp    c000db87 <zoh_vari_process+0x2db>
c000ddd9:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000dddd:	7d 3a                	jge    c000de19 <zoh_vari_process+0x56d>
c000dddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde3:	83 ec 0c             	sub    esp,0xc
c000dde6:	29 f8                	sub    eax,edi
c000dde8:	99                   	cdq    
c000dde9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddec:	50                   	push   eax
c000dded:	e8 d1 6d 01 00       	call   c0024bc3 <__floatsidf>
c000ddf2:	83 c4 10             	add    esp,0x10
c000ddf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddf9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddfd:	52                   	push   edx
c000ddfe:	50                   	push   eax
c000ddff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de07:	e8 d7 60 01 00       	call   c0023ee3 <__adddf3>
c000de0c:	83 c4 10             	add    esp,0x10
c000de0f:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000de12:	89 04 24             	mov    DWORD PTR [esp],eax
c000de15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000de1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de20:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000de23:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000de26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de29:	85 c0                	test   eax,eax
c000de2b:	7f 24                	jg     c000de51 <zoh_vari_process+0x5a5>
c000de2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de35:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de38:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000de3b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de3e:	99                   	cdq    
c000de3f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000de45:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000de48:	99                   	cdq    
c000de49:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de4c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000de4f:	eb 25                	jmp    c000de76 <zoh_vari_process+0x5ca>
c000de51:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000de54:	31 d2                	xor    edx,edx
c000de56:	29 c8                	sub    eax,ecx
c000de58:	c1 e0 02             	shl    eax,0x2
c000de5b:	39 d1                	cmp    ecx,edx
c000de5d:	7e ce                	jle    c000de2d <zoh_vari_process+0x581>
c000de5f:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de61:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000de64:	83 c0 04             	add    eax,0x4
c000de67:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000de6b:	42                   	inc    edx
c000de6c:	eb ed                	jmp    c000de5b <zoh_vari_process+0x5af>
c000de6e:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de7a:	83 c4 3c             	add    esp,0x3c
c000de7d:	5b                   	pop    ebx
c000de7e:	5e                   	pop    esi
c000de7f:	5f                   	pop    edi
c000de80:	5d                   	pop    ebp
c000de81:	c3                   	ret    

c000de82 <zoh_reset>:
c000de82:	83 ec 0c             	sub    esp,0xc
c000de85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de89:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de8c:	85 c0                	test   eax,eax
c000de8e:	74 20                	je     c000deb0 <zoh_reset+0x2e>
c000de90:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de93:	83 c0 1c             	add    eax,0x1c
c000de96:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de99:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000dea0:	c1 e2 02             	shl    edx,0x2
c000dea3:	51                   	push   ecx
c000dea4:	52                   	push   edx
c000dea5:	6a 00                	push   0x0
c000dea7:	50                   	push   eax
c000dea8:	e8 3f 28 ff ff       	call   c00006ec <memset>
c000dead:	83 c4 10             	add    esp,0x10
c000deb0:	83 c4 0c             	add    esp,0xc
c000deb3:	c3                   	ret    

c000deb4 <zoh_get_name>:
c000deb4:	31 c0                	xor    eax,eax
c000deb6:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000debb:	75 05                	jne    c000dec2 <zoh_get_name+0xe>
c000debd:	b8 de 68 02 c0       	mov    eax,0xc00268de
c000dec2:	c3                   	ret    

c000dec3 <zoh_get_description>:
c000dec3:	31 c0                	xor    eax,eax
c000dec5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000deca:	75 05                	jne    c000ded1 <zoh_get_description+0xe>
c000decc:	b8 ef 68 02 c0       	mov    eax,0xc00268ef
c000ded1:	c3                   	ret    

c000ded2 <zoh_set_converter>:
c000ded2:	53                   	push   ebx
c000ded3:	b8 0a 00 00 00       	mov    eax,0xa
c000ded8:	83 ec 08             	sub    esp,0x8
c000dedb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dedf:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000dee4:	75 6e                	jne    c000df54 <zoh_set_converter+0x82>
c000dee6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dee9:	85 c0                	test   eax,eax
c000deeb:	74 13                	je     c000df00 <zoh_set_converter+0x2e>
c000deed:	83 ec 0c             	sub    esp,0xc
c000def0:	50                   	push   eax
c000def1:	e8 80 12 00 00       	call   c000f176 <free>
c000def6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000defd:	83 c4 10             	add    esp,0x10
c000df00:	50                   	push   eax
c000df01:	50                   	push   eax
c000df02:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df05:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000df0c:	50                   	push   eax
c000df0d:	6a 01                	push   0x1
c000df0f:	e8 82 12 00 00       	call   c000f196 <calloc>
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	89 c2                	mov    edx,eax
c000df19:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000df1c:	85 d2                	test   edx,edx
c000df1e:	b8 01 00 00 00       	mov    eax,0x1
c000df23:	74 2f                	je     c000df54 <zoh_set_converter+0x82>
c000df25:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000df2e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000df34:	c7 43 24 ac d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d8ac
c000df3b:	c7 43 20 ac d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d8ac
c000df42:	c7 43 28 82 de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de82
c000df49:	53                   	push   ebx
c000df4a:	e8 33 ff ff ff       	call   c000de82 <zoh_reset>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	31 c0                	xor    eax,eax
c000df54:	83 c4 08             	add    esp,0x8
c000df57:	5b                   	pop    ebx
c000df58:	c3                   	ret    
c000df59:	90                   	nop

c000df5a <Computer::close(int, int, void*)>:
c000df5a:	57                   	push   edi
c000df5b:	56                   	push   esi
c000df5c:	53                   	push   ebx
c000df5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df69:	83 ec 0c             	sub    esp,0xc
c000df6c:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df72:	e8 61 58 00 00       	call   c00137d8 <Device::closeAll()>
c000df77:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df7d:	83 c4 10             	add    esp,0x10
c000df80:	8b 10                	mov    edx,DWORD PTR [eax]
c000df82:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df86:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df8e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df96:	5b                   	pop    ebx
c000df97:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df9a:	5e                   	pop    esi
c000df9b:	5f                   	pop    edi
c000df9c:	ff e0                	jmp    eax

c000df9e <Computer::Computer()>:
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa5:	83 ec 08             	sub    esp,0x8
c000dfa8:	68 26 69 02 c0       	push   0xc0026926
c000dfad:	50                   	push   eax
c000dfae:	e8 9f 58 00 00       	call   c0013852 <Device::Device(char const*)>
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c000dfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbf:	89 10                	mov    DWORD PTR [eax],edx
c000dfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc5:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd3:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000dfe7:	83 ca 04             	or     edx,0x4
c000dfea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000dff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dffa:	0f b6 d0             	movzx  edx,al
c000dffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e001:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e012:	0f b6 d0             	movzx  edx,al
c000e015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e019:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e022:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e028:	8d 50 01             	lea    edx,[eax+0x1]
c000e02b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e02f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e035:	0f b6 d0             	movzx  edx,al
c000e038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e040:	83 e1 3f             	and    ecx,0x3f
c000e043:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e051:	0f b6 d0             	movzx  edx,al
c000e054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e058:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e063:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e069:	0f b6 d0             	movzx  edx,al
c000e06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e070:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e079:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e07f:	8d 50 01             	lea    edx,[eax+0x1]
c000e082:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e086:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e08c:	0f b6 d0             	movzx  edx,al
c000e08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e093:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e097:	83 e1 3f             	and    ecx,0x3f
c000e09a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0a8:	0f b6 d0             	movzx  edx,al
c000e0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0af:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0c0:	0f b6 d0             	movzx  edx,al
c000e0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c7:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0d6:	8d 50 01             	lea    edx,[eax+0x1]
c000e0d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0dd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e0e3:	0f b6 d0             	movzx  edx,al
c000e0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e0ee:	83 e1 3f             	and    ecx,0x3f
c000e0f1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e0f5:	90                   	nop
c000e0f6:	83 c4 0c             	add    esp,0xc
c000e0f9:	c3                   	ret    

c000e0fa <Computer::setBootMessage(char const*)>:
c000e0fa:	c3                   	ret    
c000e0fb:	90                   	nop

c000e0fc <Computer::start()>:
c000e0fc:	56                   	push   esi
c000e0fd:	53                   	push   ebx
c000e0fe:	50                   	push   eax
c000e0ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e103:	e8 3e d8 00 00       	call   c001b946 <lockScheduler()>
c000e108:	e8 6d db 00 00       	call   c001bc7a <schedule()>
c000e10d:	e8 36 d8 00 00       	call   c001b948 <unlockScheduler()>
c000e112:	fb                   	sti    
c000e113:	83 ec 0c             	sub    esp,0xc
c000e116:	68 3b 07 00 00       	push   0x73b
c000e11b:	e8 48 40 00 00       	call   c0012168 <operator new(unsigned long)>
c000e120:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e127:	89 c6                	mov    esi,eax
c000e129:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c000e12f:	68 2f 69 02 c0       	push   0xc002692f
c000e134:	6a 01                	push   0x1
c000e136:	50                   	push   eax
c000e137:	e8 6a d6 00 00       	call   c001b7a6 <Process::Process(bool, char const*, Process*, char**)>
c000e13c:	83 c4 20             	add    esp,0x20
c000e13f:	68 ff 00 00 00       	push   0xff
c000e144:	6a 00                	push   0x0
c000e146:	68 f3 ea 00 c0       	push   0xc000eaf3
c000e14b:	56                   	push   esi
c000e14c:	e8 1f d9 00 00       	call   c001ba70 <Process::createThread(void (*)(void*), void*, int)>
c000e151:	6a 7a                	push   0x7a
c000e153:	6a 00                	push   0x0
c000e155:	68 a9 c2 01 c0       	push   0xc001c2a9
c000e15a:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c000e160:	e8 0b d9 00 00       	call   c001ba70 <Process::createThread(void (*)(void*), void*, int)>
c000e165:	83 c4 20             	add    esp,0x20
c000e168:	a3 08 b8 02 c0       	mov    ds:0xc002b808,eax
c000e16d:	c6 05 0d a4 02 c0 01 	mov    BYTE PTR ds:0xc002a40d,0x1
c000e174:	e8 39 44 00 00       	call   c00125b2 <initVFS()>
c000e179:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e17f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e181:	6a 00                	push   0x0
c000e183:	6a 00                	push   0x0
c000e185:	6a 00                	push   0x0
c000e187:	50                   	push   eax
c000e188:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e18b:	e8 14 c0 00 00       	call   c001a1a4 <setupSystemCalls()>
c000e190:	e8 1b 4f 00 00       	call   c00130b0 <loadClockSettings()>
c000e195:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e198:	e8 0f 56 00 00       	call   c00137ac <Device::loadDriversForAll()>
c000e19d:	5a                   	pop    edx
c000e19e:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c000e1a4:	59                   	pop    ecx
c000e1a5:	6a 01                	push   0x1
c000e1a7:	68 3c 69 02 c0       	push   0xc002693c
c000e1ac:	e8 c5 d1 00 00       	call   c001b376 <Thr::loadDLL(char const*, bool)>
c000e1b1:	5e                   	pop    esi
c000e1b2:	5a                   	pop    edx
c000e1b3:	53                   	push   ebx
c000e1b4:	50                   	push   eax
c000e1b5:	e8 82 d3 00 00       	call   c001b53c <Thr::executeDLL(unsigned long, void*)>
c000e1ba:	c7 04 24 c0 7a 02 c0 	mov    DWORD PTR [esp],0xc0027ac0
c000e1c1:	e8 91 40 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e1c6:	83 c4 10             	add    esp,0x10
c000e1c9:	83 ec 0c             	sub    esp,0xc
c000e1cc:	6a 02                	push   0x2
c000e1ce:	e8 01 dc 00 00       	call   c001bdd4 <blockTask(TaskState)>
c000e1d3:	83 c4 10             	add    esp,0x10
c000e1d6:	eb f1                	jmp    c000e1c9 <Computer::start()+0xcd>

c000e1d8 <firstTask()>:
c000e1d8:	83 ec 18             	sub    esp,0x18
c000e1db:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000e1e1:	e8 16 ff ff ff       	call   c000e0fc <Computer::start()>

c000e1e6 <Computer::detectFeatures()>:
c000e1e6:	55                   	push   ebp
c000e1e7:	57                   	push   edi
c000e1e8:	56                   	push   esi
c000e1e9:	53                   	push   ebx
c000e1ea:	83 ec 1c             	sub    esp,0x1c
c000e1ed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1f1:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e1fb:	e8 a3 21 ff ff       	call   c00003a3 <detectCPUID>
c000e200:	85 c0                	test   eax,eax
c000e202:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e208:	0f 95 c2             	setne  dl
c000e20b:	83 e0 fd             	and    eax,0xfffffffd
c000e20e:	d1 e2                	shl    edx,1
c000e210:	09 d0                	or     eax,edx
c000e212:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e218:	a8 02                	test   al,0x2
c000e21a:	75 46                	jne    c000e262 <Computer::detectFeatures()+0x7c>
c000e21c:	f6 05 21 a4 02 c0 04 	test   BYTE PTR ds:0xc002a421,0x4
c000e223:	74 07                	je     c000e22c <Computer::detectFeatures()+0x46>
c000e225:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e22c:	e8 f5 4d 01 00       	call   c0023026 <x87Detect>
c000e231:	83 e0 01             	and    eax,0x1
c000e234:	c1 e0 04             	shl    eax,0x4
c000e237:	88 c2                	mov    dl,al
c000e239:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e23f:	83 e0 ef             	and    eax,0xffffffef
c000e242:	09 d0                	or     eax,edx
c000e244:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e24a:	a8 10                	test   al,0x10
c000e24c:	0f 85 10 01 00 00    	jne    c000e362 <Computer::detectFeatures()+0x17c>
c000e252:	84 c0                	test   al,al
c000e254:	0f 88 2b 01 00 00    	js     c000e385 <Computer::detectFeatures()+0x19f>
c000e25a:	83 c4 1c             	add    esp,0x1c
c000e25d:	5b                   	pop    ebx
c000e25e:	5e                   	pop    esi
c000e25f:	5f                   	pop    edi
c000e260:	5d                   	pop    ebp
c000e261:	c3                   	ret    
c000e262:	83 ec 0c             	sub    esp,0xc
c000e265:	6a 20                	push   0x20
c000e267:	e8 48 95 00 00       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c000e26c:	83 e0 01             	and    eax,0x1
c000e26f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e276:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e27c:	83 e0 f7             	and    eax,0xfffffff7
c000e27f:	09 d0                	or     eax,edx
c000e281:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e287:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e28e:	e8 21 95 00 00       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c000e293:	83 e0 01             	and    eax,0x1
c000e296:	88 c2                	mov    dl,al
c000e298:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e29e:	83 e0 fe             	and    eax,0xfffffffe
c000e2a1:	09 d0                	or     eax,edx
c000e2a3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2a9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e2b0:	e8 ff 94 00 00       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c000e2b5:	c1 e0 07             	shl    eax,0x7
c000e2b8:	88 c2                	mov    dl,al
c000e2ba:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e2c0:	83 e0 7f             	and    eax,0x7f
c000e2c3:	09 d0                	or     eax,edx
c000e2c5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2cb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e2d2:	e8 dd 94 00 00       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 e0 01             	and    eax,0x1
c000e2dd:	c1 e0 05             	shl    eax,0x5
c000e2e0:	88 c2                	mov    dl,al
c000e2e2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2e8:	83 e0 df             	and    eax,0xffffffdf
c000e2eb:	09 d0                	or     eax,edx
c000e2ed:	f7 05 20 a4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a420,0x401
c000e2f7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2fd:	0f 84 a8 00 00 00    	je     c000e3ab <Computer::detectFeatures()+0x1c5>
c000e303:	83 ec 0c             	sub    esp,0xc
c000e306:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000e30d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e311:	50                   	push   eax
c000e312:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e316:	55                   	push   ebp
c000e317:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e31b:	57                   	push   edi
c000e31c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e320:	56                   	push   esi
c000e321:	68 00 00 00 80       	push   0x80000000
c000e326:	e8 05 94 00 00       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e32b:	83 c4 20             	add    esp,0x20
c000e32e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e335:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e339:	0f 86 dd fe ff ff    	jbe    c000e21c <Computer::detectFeatures()+0x36>
c000e33f:	83 ec 0c             	sub    esp,0xc
c000e342:	50                   	push   eax
c000e343:	55                   	push   ebp
c000e344:	57                   	push   edi
c000e345:	56                   	push   esi
c000e346:	68 01 00 00 80       	push   0x80000001
c000e34b:	e8 e0 93 00 00       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e350:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e35a:	83 c4 20             	add    esp,0x20
c000e35d:	e9 ba fe ff ff       	jmp    c000e21c <Computer::detectFeatures()+0x36>
c000e362:	e8 79 4c 01 00       	call   c0022fe0 <sseDetect>
c000e367:	88 c2                	mov    dl,al
c000e369:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e36f:	c1 e2 07             	shl    edx,0x7
c000e372:	83 e0 7f             	and    eax,0x7f
c000e375:	09 d0                	or     eax,edx
c000e377:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e37d:	84 c0                	test   al,al
c000e37f:	0f 89 d5 fe ff ff    	jns    c000e25a <Computer::detectFeatures()+0x74>
c000e385:	e8 46 4c 01 00       	call   c0022fd0 <avxDetect>
c000e38a:	83 e0 01             	and    eax,0x1
c000e38d:	c1 e0 05             	shl    eax,0x5
c000e390:	88 c2                	mov    dl,al
c000e392:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e398:	83 e0 df             	and    eax,0xffffffdf
c000e39b:	09 d0                	or     eax,edx
c000e39d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e3a3:	83 c4 1c             	add    esp,0x1c
c000e3a6:	5b                   	pop    ebx
c000e3a7:	5e                   	pop    esi
c000e3a8:	5f                   	pop    edi
c000e3a9:	5d                   	pop    ebp
c000e3aa:	c3                   	ret    
c000e3ab:	83 ec 0c             	sub    esp,0xc
c000e3ae:	68 00 02 00 00       	push   0x200
c000e3b3:	e8 fc 93 00 00       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c000e3b8:	83 c4 10             	add    esp,0x10
c000e3bb:	e9 43 ff ff ff       	jmp    c000e303 <Computer::detectFeatures()+0x11d>

c000e3c0 <Computer::displayFeatures()>:
c000e3c0:	53                   	push   ebx
c000e3c1:	83 ec 14             	sub    esp,0x14
c000e3c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3c8:	68 5f 69 02 c0       	push   0xc002695f
c000e3cd:	e8 85 3e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e3d2:	83 c4 10             	add    esp,0x10
c000e3d5:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3dc:	0f 85 73 02 00 00    	jne    c000e655 <Computer::displayFeatures()+0x295>
c000e3e2:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e3e7:	83 ec 08             	sub    esp,0x8
c000e3ea:	50                   	push   eax
c000e3eb:	68 72 69 02 c0       	push   0xc0026972
c000e3f0:	e8 62 3e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e3f5:	83 c4 10             	add    esp,0x10
c000e3f8:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3ff:	0f 85 8c 02 00 00    	jne    c000e691 <Computer::displayFeatures()+0x2d1>
c000e405:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e40a:	83 ec 08             	sub    esp,0x8
c000e40d:	50                   	push   eax
c000e40e:	68 83 69 02 c0       	push   0xc0026983
c000e413:	e8 3f 3e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e418:	83 c4 10             	add    esp,0x10
c000e41b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e422:	0f 85 5f 02 00 00    	jne    c000e687 <Computer::displayFeatures()+0x2c7>
c000e428:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e42d:	83 ec 08             	sub    esp,0x8
c000e430:	50                   	push   eax
c000e431:	68 94 69 02 c0       	push   0xc0026994
c000e436:	e8 1c 3e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e43b:	83 c4 10             	add    esp,0x10
c000e43e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e445:	0f 85 32 02 00 00    	jne    c000e67d <Computer::displayFeatures()+0x2bd>
c000e44b:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e450:	83 ec 08             	sub    esp,0x8
c000e453:	50                   	push   eax
c000e454:	68 a5 69 02 c0       	push   0xc00269a5
c000e459:	e8 f9 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e45e:	83 c4 10             	add    esp,0x10
c000e461:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e468:	0f 85 05 02 00 00    	jne    c000e673 <Computer::displayFeatures()+0x2b3>
c000e46e:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e473:	83 ec 08             	sub    esp,0x8
c000e476:	50                   	push   eax
c000e477:	68 b6 69 02 c0       	push   0xc00269b6
c000e47c:	e8 d6 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e481:	83 c4 10             	add    esp,0x10
c000e484:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e48b:	0f 85 d8 01 00 00    	jne    c000e669 <Computer::displayFeatures()+0x2a9>
c000e491:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e496:	83 ec 08             	sub    esp,0x8
c000e499:	50                   	push   eax
c000e49a:	68 c7 69 02 c0       	push   0xc00269c7
c000e49f:	e8 b3 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e4a4:	83 c4 10             	add    esp,0x10
c000e4a7:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e4ae:	0f 85 ab 01 00 00    	jne    c000e65f <Computer::displayFeatures()+0x29f>
c000e4b4:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4b9:	83 ec 08             	sub    esp,0x8
c000e4bc:	50                   	push   eax
c000e4bd:	68 d8 69 02 c0       	push   0xc00269d8
c000e4c2:	e8 90 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e4c7:	83 c4 10             	add    esp,0x10
c000e4ca:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e4d1:	0f 88 1b 02 00 00    	js     c000e6f2 <Computer::displayFeatures()+0x332>
c000e4d7:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4dc:	83 ec 08             	sub    esp,0x8
c000e4df:	50                   	push   eax
c000e4e0:	68 e9 69 02 c0       	push   0xc00269e9
c000e4e5:	e8 6d 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e4ea:	83 c4 10             	add    esp,0x10
c000e4ed:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4f4:	0f 85 a1 01 00 00    	jne    c000e69b <Computer::displayFeatures()+0x2db>
c000e4fa:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4ff:	83 ec 08             	sub    esp,0x8
c000e502:	50                   	push   eax
c000e503:	68 fa 69 02 c0       	push   0xc00269fa
c000e508:	e8 4a 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e50d:	83 c4 10             	add    esp,0x10
c000e510:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e517:	0f 85 cb 01 00 00    	jne    c000e6e8 <Computer::displayFeatures()+0x328>
c000e51d:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e522:	83 ec 08             	sub    esp,0x8
c000e525:	50                   	push   eax
c000e526:	68 0b 6a 02 c0       	push   0xc0026a0b
c000e52b:	e8 27 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e53a:	0f 85 9e 01 00 00    	jne    c000e6de <Computer::displayFeatures()+0x31e>
c000e540:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e545:	83 ec 08             	sub    esp,0x8
c000e548:	50                   	push   eax
c000e549:	68 1c 6a 02 c0       	push   0xc0026a1c
c000e54e:	e8 04 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e55d:	0f 85 71 01 00 00    	jne    c000e6d4 <Computer::displayFeatures()+0x314>
c000e563:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e568:	83 ec 08             	sub    esp,0x8
c000e56b:	50                   	push   eax
c000e56c:	68 2d 6a 02 c0       	push   0xc0026a2d
c000e571:	e8 e1 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e576:	83 c4 10             	add    esp,0x10
c000e579:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e580:	0f 85 44 01 00 00    	jne    c000e6ca <Computer::displayFeatures()+0x30a>
c000e586:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e58b:	83 ec 08             	sub    esp,0x8
c000e58e:	50                   	push   eax
c000e58f:	68 3e 6a 02 c0       	push   0xc0026a3e
c000e594:	e8 be 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e599:	83 c4 10             	add    esp,0x10
c000e59c:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e5a3:	0f 85 17 01 00 00    	jne    c000e6c0 <Computer::displayFeatures()+0x300>
c000e5a9:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5ae:	83 ec 08             	sub    esp,0x8
c000e5b1:	50                   	push   eax
c000e5b2:	68 4f 6a 02 c0       	push   0xc0026a4f
c000e5b7:	e8 9b 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e5bc:	83 c4 10             	add    esp,0x10
c000e5bf:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e5c6:	0f 85 ea 00 00 00    	jne    c000e6b6 <Computer::displayFeatures()+0x2f6>
c000e5cc:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5d1:	83 ec 08             	sub    esp,0x8
c000e5d4:	50                   	push   eax
c000e5d5:	68 60 6a 02 c0       	push   0xc0026a60
c000e5da:	e8 78 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e5df:	83 c4 10             	add    esp,0x10
c000e5e2:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5e9:	0f 88 0d 01 00 00    	js     c000e6fc <Computer::displayFeatures()+0x33c>
c000e5ef:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5f4:	83 ec 08             	sub    esp,0x8
c000e5f7:	50                   	push   eax
c000e5f8:	68 71 6a 02 c0       	push   0xc0026a71
c000e5fd:	e8 55 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e602:	83 c4 10             	add    esp,0x10
c000e605:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e60c:	0f 85 9a 00 00 00    	jne    c000e6ac <Computer::displayFeatures()+0x2ec>
c000e612:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e617:	83 ec 08             	sub    esp,0x8
c000e61a:	50                   	push   eax
c000e61b:	68 82 6a 02 c0       	push   0xc0026a82
c000e620:	e8 32 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e625:	83 c4 10             	add    esp,0x10
c000e628:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e62f:	75 74                	jne    c000e6a5 <Computer::displayFeatures()+0x2e5>
c000e631:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e636:	83 ec 08             	sub    esp,0x8
c000e639:	50                   	push   eax
c000e63a:	68 93 6a 02 c0       	push   0xc0026a93
c000e63f:	e8 13 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e644:	c7 44 24 20 7e 80 02 c0 	mov    DWORD PTR [esp+0x20],0xc002807e
c000e64c:	83 c4 18             	add    esp,0x18
c000e64f:	5b                   	pop    ebx
c000e650:	e9 02 3c 00 00       	jmp    c0012257 <Dbg::kprintf(char const*, ...)>
c000e655:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e65a:	e9 88 fd ff ff       	jmp    c000e3e7 <Computer::displayFeatures()+0x27>
c000e65f:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e664:	e9 50 fe ff ff       	jmp    c000e4b9 <Computer::displayFeatures()+0xf9>
c000e669:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e66e:	e9 23 fe ff ff       	jmp    c000e496 <Computer::displayFeatures()+0xd6>
c000e673:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e678:	e9 f6 fd ff ff       	jmp    c000e473 <Computer::displayFeatures()+0xb3>
c000e67d:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e682:	e9 c9 fd ff ff       	jmp    c000e450 <Computer::displayFeatures()+0x90>
c000e687:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e68c:	e9 9c fd ff ff       	jmp    c000e42d <Computer::displayFeatures()+0x6d>
c000e691:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e696:	e9 6f fd ff ff       	jmp    c000e40a <Computer::displayFeatures()+0x4a>
c000e69b:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6a0:	e9 5a fe ff ff       	jmp    c000e4ff <Computer::displayFeatures()+0x13f>
c000e6a5:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6aa:	eb 8a                	jmp    c000e636 <Computer::displayFeatures()+0x276>
c000e6ac:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6b1:	e9 61 ff ff ff       	jmp    c000e617 <Computer::displayFeatures()+0x257>
c000e6b6:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6bb:	e9 11 ff ff ff       	jmp    c000e5d1 <Computer::displayFeatures()+0x211>
c000e6c0:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6c5:	e9 e4 fe ff ff       	jmp    c000e5ae <Computer::displayFeatures()+0x1ee>
c000e6ca:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6cf:	e9 b7 fe ff ff       	jmp    c000e58b <Computer::displayFeatures()+0x1cb>
c000e6d4:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6d9:	e9 8a fe ff ff       	jmp    c000e568 <Computer::displayFeatures()+0x1a8>
c000e6de:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6e3:	e9 5d fe ff ff       	jmp    c000e545 <Computer::displayFeatures()+0x185>
c000e6e8:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6ed:	e9 30 fe ff ff       	jmp    c000e522 <Computer::displayFeatures()+0x162>
c000e6f2:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6f7:	e9 e0 fd ff ff       	jmp    c000e4dc <Computer::displayFeatures()+0x11c>
c000e6fc:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e701:	e9 ee fe ff ff       	jmp    c000e5f4 <Computer::displayFeatures()+0x234>

c000e706 <Computer::rdmsr(unsigned int)>:
c000e706:	83 ec 0c             	sub    esp,0xc
c000e709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e714:	74 0a                	je     c000e720 <Computer::rdmsr(unsigned int)+0x1a>
c000e716:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e71a:	0f 32                	rdmsr  
c000e71c:	83 c4 0c             	add    esp,0xc
c000e71f:	c3                   	ret    
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	68 a4 6a 02 c0       	push   0xc0026aa4
c000e728:	e8 c6 a2 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000e72d:	83 c4 10             	add    esp,0x10
c000e730:	eb e4                	jmp    c000e716 <Computer::rdmsr(unsigned int)+0x10>

c000e732 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e732:	57                   	push   edi
c000e733:	56                   	push   esi
c000e734:	52                   	push   edx
c000e735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e739:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e73d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e741:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e748:	74 0e                	je     c000e758 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e74a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e74e:	89 f0                	mov    eax,esi
c000e750:	89 fa                	mov    edx,edi
c000e752:	0f 30                	wrmsr  
c000e754:	58                   	pop    eax
c000e755:	5e                   	pop    esi
c000e756:	5f                   	pop    edi
c000e757:	c3                   	ret    
c000e758:	83 ec 0c             	sub    esp,0xc
c000e75b:	68 aa 6a 02 c0       	push   0xc0026aaa
c000e760:	e8 8e a2 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000e765:	83 c4 10             	add    esp,0x10
c000e768:	eb e0                	jmp    c000e74a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e76a <Computer::nmiEnabled()>:
c000e76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e76e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e774:	c3                   	ret    
c000e775:	90                   	nop

c000e776 <Computer::readCMOS(unsigned char)>:
c000e776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e77a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e781:	19 c0                	sbb    eax,eax
c000e783:	83 e0 80             	and    eax,0xffffff80
c000e786:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e78a:	e6 70                	out    0x70,al
c000e78c:	e4 71                	in     al,0x71
c000e78e:	c3                   	ret    
c000e78f:	90                   	nop

c000e790 <Computer::enableNMI(bool)>:
c000e790:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e798:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e79e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e7a6:	eb ce                	jmp    c000e776 <Computer::readCMOS(unsigned char)>

c000e7a8 <Computer::open(int, int, void*)>:
c000e7a8:	56                   	push   esi
c000e7a9:	53                   	push   ebx
c000e7aa:	83 ec 10             	sub    esp,0x10
c000e7ad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7b1:	f6 05 20 a4 02 c0 04 	test   BYTE PTR ds:0xc002a420,0x4
c000e7b8:	68 68 22 00 00       	push   0x2268
c000e7bd:	0f 94 05 c0 93 02 c0 	sete   BYTE PTR ds:0xc00293c0
c000e7c4:	e8 9f 39 00 00       	call   c0012168 <operator new(unsigned long)>
c000e7c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7cc:	89 c6                	mov    esi,eax
c000e7ce:	e8 21 86 00 00       	call   c0016df4 <ACPI::ACPI()>
c000e7d3:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7d9:	58                   	pop    eax
c000e7da:	5a                   	pop    edx
c000e7db:	56                   	push   esi
c000e7dc:	53                   	push   ebx
c000e7dd:	e8 80 4e 00 00       	call   c0013662 <Device::addChild(Device*)>
c000e7e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7e5:	e8 fc f9 ff ff       	call   c000e1e6 <Computer::detectFeatures()>
c000e7ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7ed:	e8 ce fb ff ff       	call   c000e3c0 <Computer::displayFeatures()>
c000e7f2:	59                   	pop    ecx
c000e7f3:	5e                   	pop    esi
c000e7f4:	6a 01                	push   0x1
c000e7f6:	53                   	push   ebx
c000e7f7:	e8 94 ff ff ff       	call   c000e790 <Computer::enableNMI(bool)>
c000e7fc:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e803:	e8 60 39 00 00       	call   c0012168 <operator new(unsigned long)>
c000e808:	89 04 24             	mov    DWORD PTR [esp],eax
c000e80b:	89 c6                	mov    esi,eax
c000e80d:	e8 72 90 00 00       	call   c0017884 <CPU::CPU()>
c000e812:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e818:	58                   	pop    eax
c000e819:	5a                   	pop    edx
c000e81a:	56                   	push   esi
c000e81b:	53                   	push   ebx
c000e81c:	e8 41 4e 00 00       	call   c0013662 <Device::addChild(Device*)>
c000e821:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e827:	8b 10                	mov    edx,DWORD PTR [eax]
c000e829:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e82d:	6a 00                	push   0x0
c000e82f:	6a 00                	push   0x0
c000e831:	50                   	push   eax
c000e832:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e835:	83 c4 20             	add    esp,0x20
c000e838:	e8 8d 53 00 00       	call   c0013bca <setupFPU()>
c000e83d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e843:	85 c0                	test   eax,eax
c000e845:	74 1f                	je     c000e866 <Computer::open(int, int, void*)+0xbe>
c000e847:	83 ec 08             	sub    esp,0x8
c000e84a:	50                   	push   eax
c000e84b:	53                   	push   ebx
c000e84c:	e8 11 4e 00 00       	call   c0013662 <Device::addChild(Device*)>
c000e851:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e857:	8b 10                	mov    edx,DWORD PTR [eax]
c000e859:	6a 00                	push   0x0
c000e85b:	6a 00                	push   0x0
c000e85d:	6a 00                	push   0x0
c000e85f:	50                   	push   eax
c000e860:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e863:	83 c4 20             	add    esp,0x20
c000e866:	83 ec 0c             	sub    esp,0xc
c000e869:	68 d8 e1 00 c0       	push   0xc000e1d8
c000e86e:	e8 fd d2 00 00       	call   c001bb70 <setupMultitasking(void (*)())>
c000e873:	83 c4 14             	add    esp,0x14
c000e876:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e87b:	5b                   	pop    ebx
c000e87c:	5e                   	pop    esi
c000e87d:	c3                   	ret    

c000e87e <Computer::disableNMI()>:
c000e87e:	6a 00                	push   0x0
c000e880:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e884:	e8 07 ff ff ff       	call   c000e790 <Computer::enableNMI(bool)>
c000e889:	58                   	pop    eax
c000e88a:	5a                   	pop    edx
c000e88b:	c3                   	ret    

c000e88c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e890:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e897:	19 c0                	sbb    eax,eax
c000e899:	83 e0 80             	and    eax,0xffffff80
c000e89c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e8a0:	e6 70                	out    0x70,al
c000e8a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a6:	e6 71                	out    0x71,al
c000e8a8:	c3                   	ret    
c000e8a9:	90                   	nop

c000e8aa <Computer::handleNMI()>:
c000e8aa:	56                   	push   esi
c000e8ab:	53                   	push   ebx
c000e8ac:	83 ec 10             	sub    esp,0x10
c000e8af:	e4 92                	in     al,0x92
c000e8b1:	89 c6                	mov    esi,eax
c000e8b3:	e4 61                	in     al,0x61
c000e8b5:	68 b0 6a 02 c0       	push   0xc0026ab0
c000e8ba:	88 c3                	mov    bl,al
c000e8bc:	e8 96 39 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e8c1:	83 c4 10             	add    esp,0x10
c000e8c4:	83 e6 10             	and    esi,0x10
c000e8c7:	75 0d                	jne    c000e8d6 <Computer::handleNMI()+0x2c>
c000e8c9:	f6 c3 40             	test   bl,0x40
c000e8cc:	75 1d                	jne    c000e8eb <Computer::handleNMI()+0x41>
c000e8ce:	84 db                	test   bl,bl
c000e8d0:	78 2d                	js     c000e8ff <Computer::handleNMI()+0x55>
c000e8d2:	58                   	pop    eax
c000e8d3:	5b                   	pop    ebx
c000e8d4:	5e                   	pop    esi
c000e8d5:	c3                   	ret    
c000e8d6:	83 ec 0c             	sub    esp,0xc
c000e8d9:	68 c1 6a 02 c0       	push   0xc0026ac1
c000e8de:	e8 10 a1 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000e8e3:	83 c4 10             	add    esp,0x10
c000e8e6:	f6 c3 40             	test   bl,0x40
c000e8e9:	74 e3                	je     c000e8ce <Computer::handleNMI()+0x24>
c000e8eb:	83 ec 0c             	sub    esp,0xc
c000e8ee:	68 ce 6a 02 c0       	push   0xc0026ace
c000e8f3:	e8 fb a0 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000e8f8:	83 c4 10             	add    esp,0x10
c000e8fb:	84 db                	test   bl,bl
c000e8fd:	79 d3                	jns    c000e8d2 <Computer::handleNMI()+0x28>
c000e8ff:	c7 44 24 10 d8 6a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026ad8
c000e907:	5a                   	pop    edx
c000e908:	5b                   	pop    ebx
c000e909:	5e                   	pop    esi
c000e90a:	e9 e4 a0 00 00       	jmp    c00189f3 <Krnl::panic(char const*)>
c000e90f:	90                   	nop

c000e910 <Computer::setDiskActivityLight(int, bool)>:
c000e910:	56                   	push   esi
c000e911:	53                   	push   ebx
c000e912:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e916:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e91b:	77 1b                	ja     c000e938 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e91d:	e4 92                	in     al,0x92
c000e91f:	bb 40 00 00 00       	mov    ebx,0x40
c000e924:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e928:	89 da                	mov    edx,ebx
c000e92a:	d3 e2                	shl    edx,cl
c000e92c:	89 f1                	mov    ecx,esi
c000e92e:	f7 d2                	not    edx
c000e930:	d3 e3                	shl    ebx,cl
c000e932:	21 d0                	and    eax,edx
c000e934:	09 d8                	or     eax,ebx
c000e936:	e6 92                	out    0x92,al
c000e938:	5b                   	pop    ebx
c000e939:	5e                   	pop    esi
c000e93a:	c3                   	ret    
c000e93b:	90                   	nop

c000e93c <GDTEntry::setBase(unsigned int)>:
c000e93c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e940:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e944:	89 c1                	mov    ecx,eax
c000e946:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e94a:	c1 e9 10             	shr    ecx,0x10
c000e94d:	c1 e8 18             	shr    eax,0x18
c000e950:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e953:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e956:	c3                   	ret    
c000e957:	90                   	nop

c000e958 <GDTEntry::setLimit(unsigned int)>:
c000e958:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e95c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e960:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e963:	66 89 01             	mov    WORD PTR [ecx],ax
c000e966:	83 e2 f0             	and    edx,0xfffffff0
c000e969:	c1 e8 10             	shr    eax,0x10
c000e96c:	83 e0 0f             	and    eax,0xf
c000e96f:	09 d0                	or     eax,edx
c000e971:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e974:	c3                   	ret    
c000e975:	90                   	nop

c000e976 <GDT::GDT()>:
c000e976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e984:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e98a:	90                   	nop
c000e98b:	c3                   	ret    

c000e98c <GDT::addEntry(GDTEntry)>:
c000e98c:	53                   	push   ebx
c000e98d:	83 ec 0c             	sub    esp,0xc
c000e990:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e994:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e996:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e99d:	52                   	push   edx
c000e99e:	50                   	push   eax
c000e99f:	68 14 6b 02 c0       	push   0xc0026b14
c000e9a4:	e8 ae 38 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e9a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e9ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9af:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9b3:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e9b7:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e9bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e9be:	c1 e0 03             	shl    eax,0x3
c000e9c1:	89 13                	mov    DWORD PTR [ebx],edx
c000e9c3:	83 c4 18             	add    esp,0x18
c000e9c6:	5b                   	pop    ebx
c000e9c7:	c3                   	ret    

c000e9c8 <GDT::getNumberOfEntries()>:
c000e9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9ce:	c3                   	ret    
c000e9cf:	90                   	nop

c000e9d0 <GDT::flush()>:
c000e9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9d4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9d6:	83 c0 04             	add    eax,0x4
c000e9d9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9e0:	a3 12 a4 02 c0       	mov    ds:0xc002a412,eax
c000e9e5:	66 89 15 10 a4 02 c0 	mov    WORD PTR ds:0xc002a410,dx
c000e9ec:	e9 26 1a ff ff       	jmp    c0000417 <loadGDT>
c000e9f1:	90                   	nop

c000e9f2 <GDT::setup()>:
c000e9f2:	55                   	push   ebp
c000e9f3:	57                   	push   edi
c000e9f4:	56                   	push   esi
c000e9f5:	53                   	push   ebx
c000e9f6:	83 ec 3c             	sub    esp,0x3c
c000e9f9:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9fd:	6a 00                	push   0x0
c000e9ff:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ea03:	53                   	push   ebx
c000ea04:	e8 33 ff ff ff       	call   c000e93c <GDTEntry::setBase(unsigned int)>
c000ea09:	6a 00                	push   0x0
c000ea0b:	53                   	push   ebx
c000ea0c:	e8 47 ff ff ff       	call   c000e958 <GDTEntry::setLimit(unsigned int)>
c000ea11:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ea19:	6a 00                	push   0x0
c000ea1b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ea1f:	53                   	push   ebx
c000ea20:	e8 17 ff ff ff       	call   c000e93c <GDTEntry::setBase(unsigned int)>
c000ea25:	68 ff ff ff 00       	push   0xffffff
c000ea2a:	53                   	push   ebx
c000ea2b:	e8 28 ff ff ff       	call   c000e958 <GDTEntry::setLimit(unsigned int)>
c000ea30:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea34:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea39:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea3e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea42:	83 c4 20             	add    esp,0x20
c000ea45:	6a 00                	push   0x0
c000ea47:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea4b:	53                   	push   ebx
c000ea4c:	e8 eb fe ff ff       	call   c000e93c <GDTEntry::setBase(unsigned int)>
c000ea51:	68 ff ff ff 00       	push   0xffffff
c000ea56:	53                   	push   ebx
c000ea57:	e8 fc fe ff ff       	call   c000e958 <GDTEntry::setLimit(unsigned int)>
c000ea5c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea64:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea6c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea75:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea7a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea7e:	89 d8                	mov    eax,ebx
c000ea80:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea84:	80 cc 60             	or     ah,0x60
c000ea87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea8b:	83 c4 0c             	add    esp,0xc
c000ea8e:	89 f8                	mov    eax,edi
c000ea90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea94:	80 cc 60             	or     ah,0x60
c000ea97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea9b:	89 c7                	mov    edi,eax
c000ea9d:	55                   	push   ebp
c000ea9e:	e8 e9 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000eaa3:	83 c4 0c             	add    esp,0xc
c000eaa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaaa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaae:	55                   	push   ebp
c000eaaf:	e8 d8 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000eab4:	83 c4 0c             	add    esp,0xc
c000eab7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eabb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eabf:	55                   	push   ebp
c000eac0:	e8 c7 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000eac5:	83 c4 0c             	add    esp,0xc
c000eac8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eacc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ead0:	53                   	push   ebx
c000ead1:	51                   	push   ecx
c000ead2:	55                   	push   ebp
c000ead3:	e8 b4 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000ead8:	83 c4 0c             	add    esp,0xc
c000eadb:	57                   	push   edi
c000eadc:	56                   	push   esi
c000eadd:	55                   	push   ebp
c000eade:	e8 a9 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000eae3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eae6:	e8 e5 fe ff ff       	call   c000e9d0 <GDT::flush()>
c000eaeb:	83 c4 4c             	add    esp,0x4c
c000eaee:	5b                   	pop    ebx
c000eaef:	5e                   	pop    esi
c000eaf0:	5f                   	pop    edi
c000eaf1:	5d                   	pop    ebp
c000eaf2:	c3                   	ret    

c000eaf3 <idleFunction(void*)>:
c000eaf3:	53                   	push   ebx
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	e8 4c ce 00 00       	call   c001b948 <unlockScheduler()>
c000eafc:	e8 6f 8d 00 00       	call   c0017870 <CPU::current()>
c000eb01:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eb08:	74 41                	je     c000eb4b <idleFunction(void*)+0x58>
c000eb0a:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c000eb0f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb16:	74 33                	je     c000eb4b <idleFunction(void*)+0x58>
c000eb18:	31 db                	xor    ebx,ebx
c000eb1a:	52                   	push   edx
c000eb1b:	52                   	push   edx
c000eb1c:	68 e1 00 00 00       	push   0xe1
c000eb21:	50                   	push   eax
c000eb22:	e8 df fb ff ff       	call   c000e706 <Computer::rdmsr(unsigned int)>
c000eb27:	53                   	push   ebx
c000eb28:	83 e0 02             	and    eax,0x2
c000eb2b:	50                   	push   eax
c000eb2c:	68 e1 00 00 00       	push   0xe1
c000eb31:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000eb37:	e8 f6 fb ff ff       	call   c000e732 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb3c:	83 c4 20             	add    esp,0x20
c000eb3f:	e8 f0 16 ff ff       	call   c0000234 <doTPAUSE>
c000eb44:	e8 17 65 01 00       	call   c0025060 <idleCommon()>
c000eb49:	eb f4                	jmp    c000eb3f <idleFunction(void*)+0x4c>
c000eb4b:	fb                   	sti    
c000eb4c:	f4                   	hlt    
c000eb4d:	e8 0e 65 01 00       	call   c0025060 <idleCommon()>
c000eb52:	eb f7                	jmp    c000eb4b <idleFunction(void*)+0x58>

c000eb54 <IDTEntry::IDTEntry(bool)>:
c000eb54:	83 ec 04             	sub    esp,0x4
c000eb57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb5b:	88 04 24             	mov    BYTE PTR [esp],al
c000eb5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb62:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb6c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb74:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb77:	83 e2 f0             	and    edx,0xfffffff0
c000eb7a:	83 ca 0e             	or     edx,0xe
c000eb7d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb84:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb87:	83 e2 ef             	and    edx,0xffffffef
c000eb8a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb8d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb91:	74 04                	je     c000eb97 <IDTEntry::IDTEntry(bool)+0x43>
c000eb93:	b2 03                	mov    dl,0x3
c000eb95:	eb 02                	jmp    c000eb99 <IDTEntry::IDTEntry(bool)+0x45>
c000eb97:	b2 00                	mov    dl,0x0
c000eb99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb9d:	83 e2 03             	and    edx,0x3
c000eba0:	88 d1                	mov    cl,dl
c000eba2:	c1 e1 05             	shl    ecx,0x5
c000eba5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eba8:	83 e2 9f             	and    edx,0xffffff9f
c000ebab:	09 ca                	or     edx,ecx
c000ebad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebb4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ebb7:	83 ca 80             	or     edx,0xffffff80
c000ebba:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebbd:	90                   	nop
c000ebbe:	83 c4 04             	add    esp,0x4
c000ebc1:	c3                   	ret    

c000ebc2 <IDTEntry::setOffset(unsigned int)>:
c000ebc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ebc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebca:	66 89 02             	mov    WORD PTR [edx],ax
c000ebcd:	c1 e8 10             	shr    eax,0x10
c000ebd0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ebd4:	c3                   	ret    
c000ebd5:	90                   	nop

c000ebd6 <IDT::IDT()>:
c000ebd6:	90                   	nop
c000ebd7:	c3                   	ret    

c000ebd8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ebd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebdc:	83 c0 30             	add    eax,0x30
c000ebdf:	c3                   	ret    

c000ebe0 <IDT::addEntry(IDTEntry, int)>:
c000ebe0:	53                   	push   ebx
c000ebe1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebe5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebe9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebf1:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebf4:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebf8:	5b                   	pop    ebx
c000ebf9:	c3                   	ret    

c000ebfa <IDT::addEntry(int, void (*)(), bool)>:
c000ebfa:	53                   	push   ebx
c000ebfb:	83 ec 10             	sub    esp,0x10
c000ebfe:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ec03:	50                   	push   eax
c000ec04:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ec08:	53                   	push   ebx
c000ec09:	e8 46 ff ff ff       	call   c000eb54 <IDTEntry::IDTEntry(bool)>
c000ec0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ec12:	53                   	push   ebx
c000ec13:	e8 aa ff ff ff       	call   c000ebc2 <IDTEntry::setOffset(unsigned int)>
c000ec18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ec28:	e8 b3 ff ff ff       	call   c000ebe0 <IDT::addEntry(IDTEntry, int)>
c000ec2d:	83 c4 30             	add    esp,0x30
c000ec30:	5b                   	pop    ebx
c000ec31:	c3                   	ret    

c000ec32 <IDT::flush()>:
c000ec32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec36:	66 c7 05 18 a4 02 c0 ff 07 	mov    WORD PTR ds:0xc002a418,0x7ff
c000ec3f:	a3 1a a4 02 c0       	mov    ds:0xc002a41a,eax
c000ec44:	0f 01 1d 18 a4 02 c0 	lidtd  ds:0xc002a418
c000ec4b:	c3                   	ret    

c000ec4c <IDT::setup()>:
c000ec4c:	57                   	push   edi
c000ec4d:	56                   	push   esi
c000ec4e:	53                   	push   ebx
c000ec4f:	83 ec 10             	sub    esp,0x10
c000ec52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec56:	6a 00                	push   0x0
c000ec58:	68 37 04 00 c0       	push   0xc0000437
c000ec5d:	6a 00                	push   0x0
c000ec5f:	53                   	push   ebx
c000ec60:	e8 95 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ec65:	6a 00                	push   0x0
c000ec67:	68 47 04 00 c0       	push   0xc0000447
c000ec6c:	6a 01                	push   0x1
c000ec6e:	53                   	push   ebx
c000ec6f:	e8 86 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ec74:	83 c4 20             	add    esp,0x20
c000ec77:	6a 00                	push   0x0
c000ec79:	68 51 04 00 c0       	push   0xc0000451
c000ec7e:	6a 02                	push   0x2
c000ec80:	53                   	push   ebx
c000ec81:	e8 74 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ec86:	6a 00                	push   0x0
c000ec88:	68 5b 04 00 c0       	push   0xc000045b
c000ec8d:	6a 03                	push   0x3
c000ec8f:	53                   	push   ebx
c000ec90:	e8 65 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ec95:	83 c4 20             	add    esp,0x20
c000ec98:	6a 00                	push   0x0
c000ec9a:	68 65 04 00 c0       	push   0xc0000465
c000ec9f:	6a 04                	push   0x4
c000eca1:	53                   	push   ebx
c000eca2:	e8 53 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eca7:	6a 00                	push   0x0
c000eca9:	68 6f 04 00 c0       	push   0xc000046f
c000ecae:	6a 05                	push   0x5
c000ecb0:	53                   	push   ebx
c000ecb1:	e8 44 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ecb6:	83 c4 20             	add    esp,0x20
c000ecb9:	6a 00                	push   0x0
c000ecbb:	68 79 04 00 c0       	push   0xc0000479
c000ecc0:	6a 06                	push   0x6
c000ecc2:	53                   	push   ebx
c000ecc3:	e8 32 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ecc8:	6a 00                	push   0x0
c000ecca:	68 83 04 00 c0       	push   0xc0000483
c000eccf:	6a 07                	push   0x7
c000ecd1:	53                   	push   ebx
c000ecd2:	e8 23 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ecd7:	83 c4 20             	add    esp,0x20
c000ecda:	6a 00                	push   0x0
c000ecdc:	68 8d 04 00 c0       	push   0xc000048d
c000ece1:	6a 08                	push   0x8
c000ece3:	53                   	push   ebx
c000ece4:	e8 11 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ece9:	6a 00                	push   0x0
c000eceb:	68 95 04 00 c0       	push   0xc0000495
c000ecf0:	6a 09                	push   0x9
c000ecf2:	53                   	push   ebx
c000ecf3:	e8 02 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ecf8:	83 c4 20             	add    esp,0x20
c000ecfb:	6a 00                	push   0x0
c000ecfd:	68 9f 04 00 c0       	push   0xc000049f
c000ed02:	6a 0a                	push   0xa
c000ed04:	53                   	push   ebx
c000ed05:	e8 f0 fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed0a:	6a 00                	push   0x0
c000ed0c:	68 a7 04 00 c0       	push   0xc00004a7
c000ed11:	6a 0b                	push   0xb
c000ed13:	53                   	push   ebx
c000ed14:	e8 e1 fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed19:	83 c4 20             	add    esp,0x20
c000ed1c:	6a 00                	push   0x0
c000ed1e:	68 af 04 00 c0       	push   0xc00004af
c000ed23:	6a 0c                	push   0xc
c000ed25:	53                   	push   ebx
c000ed26:	e8 cf fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed2b:	6a 00                	push   0x0
c000ed2d:	68 b7 04 00 c0       	push   0xc00004b7
c000ed32:	6a 0d                	push   0xd
c000ed34:	53                   	push   ebx
c000ed35:	e8 c0 fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed3a:	83 c4 20             	add    esp,0x20
c000ed3d:	6a 00                	push   0x0
c000ed3f:	68 bf 04 00 c0       	push   0xc00004bf
c000ed44:	6a 0e                	push   0xe
c000ed46:	53                   	push   ebx
c000ed47:	e8 ae fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed4c:	6a 00                	push   0x0
c000ed4e:	68 c7 04 00 c0       	push   0xc00004c7
c000ed53:	6a 0f                	push   0xf
c000ed55:	53                   	push   ebx
c000ed56:	e8 9f fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed5b:	83 c4 20             	add    esp,0x20
c000ed5e:	6a 00                	push   0x0
c000ed60:	68 d1 04 00 c0       	push   0xc00004d1
c000ed65:	6a 10                	push   0x10
c000ed67:	53                   	push   ebx
c000ed68:	e8 8d fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed6d:	6a 00                	push   0x0
c000ed6f:	68 db 04 00 c0       	push   0xc00004db
c000ed74:	6a 11                	push   0x11
c000ed76:	53                   	push   ebx
c000ed77:	e8 7e fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed7c:	83 c4 20             	add    esp,0x20
c000ed7f:	6a 00                	push   0x0
c000ed81:	68 e5 04 00 c0       	push   0xc00004e5
c000ed86:	6a 12                	push   0x12
c000ed88:	53                   	push   ebx
c000ed89:	e8 6c fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed8e:	6a 01                	push   0x1
c000ed90:	68 ef 04 00 c0       	push   0xc00004ef
c000ed95:	6a 60                	push   0x60
c000ed97:	53                   	push   ebx
c000ed98:	e8 5d fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed9d:	83 c4 20             	add    esp,0x20
c000eda0:	6a 00                	push   0x0
c000eda2:	68 f9 04 00 c0       	push   0xc00004f9
c000eda7:	6a 20                	push   0x20
c000eda9:	53                   	push   ebx
c000edaa:	e8 4b fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000edaf:	6a 00                	push   0x0
c000edb1:	68 03 05 00 c0       	push   0xc0000503
c000edb6:	6a 21                	push   0x21
c000edb8:	53                   	push   ebx
c000edb9:	e8 3c fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000edbe:	83 c4 20             	add    esp,0x20
c000edc1:	6a 00                	push   0x0
c000edc3:	68 0d 05 00 c0       	push   0xc000050d
c000edc8:	6a 22                	push   0x22
c000edca:	53                   	push   ebx
c000edcb:	e8 2a fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000edd0:	6a 00                	push   0x0
c000edd2:	68 17 05 00 c0       	push   0xc0000517
c000edd7:	6a 23                	push   0x23
c000edd9:	53                   	push   ebx
c000edda:	e8 1b fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eddf:	83 c4 20             	add    esp,0x20
c000ede2:	6a 00                	push   0x0
c000ede4:	68 21 05 00 c0       	push   0xc0000521
c000ede9:	6a 24                	push   0x24
c000edeb:	53                   	push   ebx
c000edec:	e8 09 fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000edf1:	6a 00                	push   0x0
c000edf3:	68 2b 05 00 c0       	push   0xc000052b
c000edf8:	6a 25                	push   0x25
c000edfa:	53                   	push   ebx
c000edfb:	e8 fa fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee00:	83 c4 20             	add    esp,0x20
c000ee03:	6a 00                	push   0x0
c000ee05:	68 35 05 00 c0       	push   0xc0000535
c000ee0a:	6a 26                	push   0x26
c000ee0c:	53                   	push   ebx
c000ee0d:	e8 e8 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee12:	6a 00                	push   0x0
c000ee14:	68 3f 05 00 c0       	push   0xc000053f
c000ee19:	6a 27                	push   0x27
c000ee1b:	53                   	push   ebx
c000ee1c:	e8 d9 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee21:	83 c4 20             	add    esp,0x20
c000ee24:	6a 00                	push   0x0
c000ee26:	68 49 05 00 c0       	push   0xc0000549
c000ee2b:	6a 28                	push   0x28
c000ee2d:	53                   	push   ebx
c000ee2e:	e8 c7 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee33:	6a 00                	push   0x0
c000ee35:	68 53 05 00 c0       	push   0xc0000553
c000ee3a:	6a 29                	push   0x29
c000ee3c:	53                   	push   ebx
c000ee3d:	e8 b8 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee42:	83 c4 20             	add    esp,0x20
c000ee45:	6a 00                	push   0x0
c000ee47:	68 5d 05 00 c0       	push   0xc000055d
c000ee4c:	6a 2a                	push   0x2a
c000ee4e:	53                   	push   ebx
c000ee4f:	e8 a6 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee54:	6a 00                	push   0x0
c000ee56:	68 67 05 00 c0       	push   0xc0000567
c000ee5b:	6a 2b                	push   0x2b
c000ee5d:	53                   	push   ebx
c000ee5e:	e8 97 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee63:	83 c4 20             	add    esp,0x20
c000ee66:	6a 00                	push   0x0
c000ee68:	68 71 05 00 c0       	push   0xc0000571
c000ee6d:	6a 2c                	push   0x2c
c000ee6f:	53                   	push   ebx
c000ee70:	e8 85 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee75:	6a 00                	push   0x0
c000ee77:	68 7b 05 00 c0       	push   0xc000057b
c000ee7c:	6a 2d                	push   0x2d
c000ee7e:	53                   	push   ebx
c000ee7f:	e8 76 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee84:	83 c4 20             	add    esp,0x20
c000ee87:	6a 00                	push   0x0
c000ee89:	68 85 05 00 c0       	push   0xc0000585
c000ee8e:	6a 2e                	push   0x2e
c000ee90:	53                   	push   ebx
c000ee91:	e8 64 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee96:	6a 00                	push   0x0
c000ee98:	68 8f 05 00 c0       	push   0xc000058f
c000ee9d:	6a 2f                	push   0x2f
c000ee9f:	53                   	push   ebx
c000eea0:	e8 55 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eea5:	83 c4 20             	add    esp,0x20
c000eea8:	6a 00                	push   0x0
c000eeaa:	68 99 05 00 c0       	push   0xc0000599
c000eeaf:	6a 30                	push   0x30
c000eeb1:	53                   	push   ebx
c000eeb2:	e8 43 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eeb7:	6a 00                	push   0x0
c000eeb9:	68 a3 05 00 c0       	push   0xc00005a3
c000eebe:	6a 31                	push   0x31
c000eec0:	53                   	push   ebx
c000eec1:	e8 34 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eec6:	83 c4 20             	add    esp,0x20
c000eec9:	6a 00                	push   0x0
c000eecb:	68 ad 05 00 c0       	push   0xc00005ad
c000eed0:	6a 32                	push   0x32
c000eed2:	53                   	push   ebx
c000eed3:	e8 22 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eed8:	6a 00                	push   0x0
c000eeda:	68 b7 05 00 c0       	push   0xc00005b7
c000eedf:	6a 33                	push   0x33
c000eee1:	53                   	push   ebx
c000eee2:	e8 13 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eee7:	83 c4 20             	add    esp,0x20
c000eeea:	6a 00                	push   0x0
c000eeec:	68 c1 05 00 c0       	push   0xc00005c1
c000eef1:	6a 34                	push   0x34
c000eef3:	53                   	push   ebx
c000eef4:	e8 01 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eef9:	6a 00                	push   0x0
c000eefb:	68 cb 05 00 c0       	push   0xc00005cb
c000ef00:	6a 35                	push   0x35
c000ef02:	53                   	push   ebx
c000ef03:	e8 f2 fc ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ef08:	83 c4 20             	add    esp,0x20
c000ef0b:	6a 00                	push   0x0
c000ef0d:	68 d5 05 00 c0       	push   0xc00005d5
c000ef12:	6a 36                	push   0x36
c000ef14:	53                   	push   ebx
c000ef15:	e8 e0 fc ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ef1a:	6a 00                	push   0x0
c000ef1c:	68 df 05 00 c0       	push   0xc00005df
c000ef21:	6a 37                	push   0x37
c000ef23:	53                   	push   ebx
c000ef24:	e8 d1 fc ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ef29:	83 c4 20             	add    esp,0x20
c000ef2c:	e8 e4 24 00 00       	call   c0011415 <Virt::getAKernelVAS()>
c000ef31:	52                   	push   edx
c000ef32:	6a 03                	push   0x3
c000ef34:	6a 02                	push   0x2
c000ef36:	50                   	push   eax
c000ef37:	e8 1c 2b 00 00       	call   c0011a58 <VAS::allocatePages(int, int)>
c000ef3c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef43:	89 c6                	mov    esi,eax
c000ef45:	e8 1e 32 00 00       	call   c0012168 <operator new(unsigned long)>
c000ef4a:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef50:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef53:	89 c7                	mov    edi,eax
c000ef55:	e8 c0 1c 00 00       	call   c0010c1a <TSS::TSS()>
c000ef5a:	83 c4 0c             	add    esp,0xc
c000ef5d:	68 8d 04 00 c0       	push   0xc000048d
c000ef62:	56                   	push   esi
c000ef63:	57                   	push   edi
c000ef64:	e8 f1 1c 00 00       	call   c0010c5a <TSS::setup(unsigned long, unsigned long)>
c000ef69:	59                   	pop    ecx
c000ef6a:	89 c6                	mov    esi,eax
c000ef6c:	5f                   	pop    edi
c000ef6d:	6a 00                	push   0x0
c000ef6f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef73:	50                   	push   eax
c000ef74:	e8 db fb ff ff       	call   c000eb54 <IDTEntry::IDTEntry(bool)>
c000ef79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef7d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef82:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef89:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef93:	80 ce 05             	or     dh,0x5
c000ef96:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efa1:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000efa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efa7:	e8 86 fc ff ff       	call   c000ec32 <IDT::flush()>
c000efac:	83 c4 20             	add    esp,0x20
c000efaf:	5b                   	pop    ebx
c000efb0:	5e                   	pop    esi
c000efb1:	5f                   	pop    edi
c000efb2:	c3                   	ret    

c000efb3 <sbrk>:
c000efb3:	55                   	push   ebp
c000efb4:	57                   	push   edi
c000efb5:	56                   	push   esi
c000efb6:	53                   	push   ebx
c000efb7:	83 ec 1c             	sub    esp,0x1c
c000efba:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000efbe:	85 db                	test   ebx,ebx
c000efc0:	74 37                	je     c000eff9 <sbrk+0x46>
c000efc2:	78 3f                	js     c000f003 <sbrk+0x50>
c000efc4:	e8 a7 88 00 00       	call   c0017870 <CPU::current()>
c000efc9:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000efcf:	83 e0 01             	and    eax,0x1
c000efd2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000efd6:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c000efdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efdf:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efe5:	89 d8                	mov    eax,ebx
c000efe7:	78 35                	js     c000f01e <sbrk+0x6b>
c000efe9:	c1 f8 0c             	sar    eax,0xc
c000efec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eff0:	89 c7                	mov    edi,eax
c000eff2:	be 00 00 00 00       	mov    esi,0x0
c000eff7:	eb 3c                	jmp    c000f035 <sbrk+0x82>
c000eff9:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c000effe:	e9 ad 00 00 00       	jmp    c000f0b0 <sbrk+0xfd>
c000f003:	83 ec 08             	sub    esp,0x8
c000f006:	53                   	push   ebx
c000f007:	68 30 6b 02 c0       	push   0xc0026b30
c000f00c:	e8 46 32 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f011:	83 c4 10             	add    esp,0x10
c000f014:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f019:	e9 92 00 00 00       	jmp    c000f0b0 <sbrk+0xfd>
c000f01e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f024:	eb c3                	jmp    c000efe9 <sbrk+0x36>
c000f026:	81 05 a0 93 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00293a0,0x1000
c000f030:	46                   	inc    esi
c000f031:	39 f7                	cmp    edi,esi
c000f033:	74 34                	je     c000f069 <sbrk+0xb6>
c000f035:	e8 db 23 00 00       	call   c0011415 <Virt::getAKernelVAS()>
c000f03a:	89 c3                	mov    ebx,eax
c000f03c:	8b 2d a0 93 02 c0    	mov    ebp,DWORD PTR ds:0xc00293a0
c000f042:	e8 c9 06 00 00       	call   c000f710 <Phys::allocatePage()>
c000f047:	68 01 04 00 00       	push   0x401
c000f04c:	55                   	push   ebp
c000f04d:	50                   	push   eax
c000f04e:	53                   	push   ebx
c000f04f:	e8 04 29 00 00       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f054:	83 c4 10             	add    esp,0x10
c000f057:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f05c:	74 c8                	je     c000f026 <sbrk+0x73>
c000f05e:	8b 1d a0 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293a0
c000f064:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f067:	eb bd                	jmp    c000f026 <sbrk+0x73>
c000f069:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f06e:	74 48                	je     c000f0b8 <sbrk+0x105>
c000f070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f074:	89 d3                	mov    ebx,edx
c000f076:	c1 eb 0a             	shr    ebx,0xa
c000f079:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f07f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f085:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f089:	c1 e0 0c             	shl    eax,0xc
c000f08c:	01 d0                	add    eax,edx
c000f08e:	c1 e8 0a             	shr    eax,0xa
c000f091:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f096:	2d 00 00 40 00       	sub    eax,0x400000
c000f09b:	39 c3                	cmp    ebx,eax
c000f09d:	77 0d                	ja     c000f0ac <sbrk+0xf9>
c000f09f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f0a2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f0a8:	39 d8                	cmp    eax,ebx
c000f0aa:	73 f3                	jae    c000f09f <sbrk+0xec>
c000f0ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b0:	83 c4 1c             	add    esp,0x1c
c000f0b3:	5b                   	pop    ebx
c000f0b4:	5e                   	pop    esi
c000f0b5:	5f                   	pop    edi
c000f0b6:	5d                   	pop    ebp
c000f0b7:	c3                   	ret    
c000f0b8:	e8 b8 5f 01 00       	call   c0025075 <CPU::readCR3()>
c000f0bd:	83 ec 0c             	sub    esp,0xc
c000f0c0:	50                   	push   eax
c000f0c1:	e8 c1 5f 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c000f0c6:	83 c4 10             	add    esp,0x10
c000f0c9:	eb e1                	jmp    c000f0ac <sbrk+0xf9>

c000f0cb <mmap>:
c000f0cb:	83 ec 18             	sub    esp,0x18
c000f0ce:	68 60 6b 02 c0       	push   0xc0026b60
c000f0d3:	e8 1b 99 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000f0d8:	b8 00 00 00 00       	mov    eax,0x0
c000f0dd:	83 c4 1c             	add    esp,0x1c
c000f0e0:	c3                   	ret    

c000f0e1 <munmap>:
c000f0e1:	83 ec 18             	sub    esp,0x18
c000f0e4:	68 65 6b 02 c0       	push   0xc0026b65
c000f0e9:	e8 05 99 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000f0ee:	b8 00 00 00 00       	mov    eax,0x0
c000f0f3:	83 c4 1c             	add    esp,0x1c
c000f0f6:	c3                   	ret    

c000f0f7 <liballoc_lock()>:
c000f0f7:	83 ec 0c             	sub    esp,0xc
c000f0fa:	e8 47 c8 00 00       	call   c001b946 <lockScheduler()>
c000f0ff:	b8 00 00 00 00       	mov    eax,0x0
c000f104:	83 c4 0c             	add    esp,0xc
c000f107:	c3                   	ret    

c000f108 <liballoc_unlock()>:
c000f108:	83 ec 0c             	sub    esp,0xc
c000f10b:	e8 38 c8 00 00       	call   c001b948 <unlockScheduler()>
c000f110:	b8 00 00 00 00       	mov    eax,0x0
c000f115:	83 c4 0c             	add    esp,0xc
c000f118:	c3                   	ret    

c000f119 <liballoc_alloc(int)>:
c000f119:	83 ec 0c             	sub    esp,0xc
c000f11c:	e8 f4 22 00 00       	call   c0011415 <Virt::getAKernelVAS()>
c000f121:	83 ec 04             	sub    esp,0x4
c000f124:	6a 01                	push   0x1
c000f126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f12a:	50                   	push   eax
c000f12b:	e8 28 29 00 00       	call   c0011a58 <VAS::allocatePages(int, int)>
c000f130:	83 c4 1c             	add    esp,0x1c
c000f133:	c3                   	ret    

c000f134 <liballoc_free(void*, int)>:
c000f134:	83 ec 0c             	sub    esp,0xc
c000f137:	e8 d9 22 00 00       	call   c0011415 <Virt::getAKernelVAS()>
c000f13c:	83 ec 08             	sub    esp,0x8
c000f13f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f143:	50                   	push   eax
c000f144:	e8 b9 25 00 00       	call   c0011702 <VAS::freeAllocatedPages(unsigned long)>
c000f149:	b8 00 00 00 00       	mov    eax,0x0
c000f14e:	83 c4 1c             	add    esp,0x1c
c000f151:	c3                   	ret    

c000f152 <realloc>:
c000f152:	83 ec 14             	sub    esp,0x14
c000f155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f15d:	e8 03 23 ff ff       	call   c0001465 <dlrealloc>
c000f162:	83 c4 1c             	add    esp,0x1c
c000f165:	c3                   	ret    

c000f166 <malloc>:
c000f166:	83 ec 18             	sub    esp,0x18
c000f169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f16d:	e8 b6 1d ff ff       	call   c0000f28 <dlmalloc>
c000f172:	83 c4 1c             	add    esp,0x1c
c000f175:	c3                   	ret    

c000f176 <free>:
c000f176:	83 ec 18             	sub    esp,0x18
c000f179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f17d:	e8 4b 1a ff ff       	call   c0000bcd <dlfree>
c000f182:	83 c4 1c             	add    esp,0x1c
c000f185:	c3                   	ret    

c000f186 <rfree>:
c000f186:	83 ec 18             	sub    esp,0x18
c000f189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f18d:	e8 e4 ff ff ff       	call   c000f176 <free>
c000f192:	83 c4 1c             	add    esp,0x1c
c000f195:	c3                   	ret    

c000f196 <calloc>:
c000f196:	56                   	push   esi
c000f197:	53                   	push   ebx
c000f198:	83 ec 10             	sub    esp,0x10
c000f19b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f19f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f1a4:	53                   	push   ebx
c000f1a5:	e8 bc ff ff ff       	call   c000f166 <malloc>
c000f1aa:	89 c6                	mov    esi,eax
c000f1ac:	83 c4 0c             	add    esp,0xc
c000f1af:	53                   	push   ebx
c000f1b0:	6a 00                	push   0x0
c000f1b2:	50                   	push   eax
c000f1b3:	e8 34 15 ff ff       	call   c00006ec <memset>
c000f1b8:	89 f0                	mov    eax,esi
c000f1ba:	83 c4 14             	add    esp,0x14
c000f1bd:	5b                   	pop    ebx
c000f1be:	5e                   	pop    esi
c000f1bf:	c3                   	ret    

c000f1c0 <hwTextMode_loadInData(VgaText*)>:
c000f1c0:	57                   	push   edi
c000f1c1:	56                   	push   esi
c000f1c2:	53                   	push   ebx
c000f1c3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f1c7:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f1cd:	85 c0                	test   eax,eax
c000f1cf:	7e 30                	jle    c000f201 <hwTextMode_loadInData(VgaText*)+0x41>
c000f1d1:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f1d4:	31 f6                	xor    esi,esi
c000f1d6:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f1d9:	31 c0                	xor    eax,eax
c000f1db:	c1 e1 05             	shl    ecx,0x5
c000f1de:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1e4:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1e8:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1ec:	40                   	inc    eax
c000f1ed:	83 f8 50             	cmp    eax,0x50
c000f1f0:	75 f2                	jne    c000f1e4 <hwTextMode_loadInData(VgaText*)+0x24>
c000f1f2:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1f8:	46                   	inc    esi
c000f1f9:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1ff:	7f d5                	jg     c000f1d6 <hwTextMode_loadInData(VgaText*)+0x16>
c000f201:	5b                   	pop    ebx
c000f202:	5e                   	pop    esi
c000f203:	5f                   	pop    edi
c000f204:	c3                   	ret    

c000f205 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f205:	56                   	push   esi
c000f206:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f20b:	53                   	push   ebx
c000f20c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f210:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f214:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f21a:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f220:	c1 e0 04             	shl    eax,0x4
c000f223:	83 e6 0f             	and    esi,0xf
c000f226:	0f b6 c0             	movzx  eax,al
c000f229:	41                   	inc    ecx
c000f22a:	09 f0                	or     eax,esi
c000f22c:	83 c2 02             	add    edx,0x2
c000f22f:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f233:	c1 e0 08             	shl    eax,0x8
c000f236:	09 f0                	or     eax,esi
c000f238:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f23c:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f242:	75 d0                	jne    c000f214 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f244:	5b                   	pop    ebx
c000f245:	5e                   	pop    esi
c000f246:	c3                   	ret    

c000f247 <hwTextMode_showCursor(VgaText*, bool)>:
c000f247:	56                   	push   esi
c000f248:	53                   	push   ebx
c000f249:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f24e:	74 38                	je     c000f288 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f250:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f255:	b0 0a                	mov    al,0xa
c000f257:	89 da                	mov    edx,ebx
c000f259:	ee                   	out    dx,al
c000f25a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f25f:	89 ca                	mov    edx,ecx
c000f261:	ec                   	in     al,dx
c000f262:	b2 0f                	mov    dl,0xf
c000f264:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f268:	83 e0 c0             	and    eax,0xffffffc0
c000f26b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f271:	09 d0                	or     eax,edx
c000f273:	89 ca                	mov    edx,ecx
c000f275:	ee                   	out    dx,al
c000f276:	b0 0b                	mov    al,0xb
c000f278:	89 da                	mov    edx,ebx
c000f27a:	ee                   	out    dx,al
c000f27b:	89 ca                	mov    edx,ecx
c000f27d:	ec                   	in     al,dx
c000f27e:	83 e0 e0             	and    eax,0xffffffe0
c000f281:	83 c8 0f             	or     eax,0xf
c000f284:	ee                   	out    dx,al
c000f285:	5b                   	pop    ebx
c000f286:	5e                   	pop    esi
c000f287:	c3                   	ret    
c000f288:	b0 0a                	mov    al,0xa
c000f28a:	ba d4 03 00 00       	mov    edx,0x3d4
c000f28f:	ee                   	out    dx,al
c000f290:	b0 20                	mov    al,0x20
c000f292:	ba d5 03 00 00       	mov    edx,0x3d5
c000f297:	ee                   	out    dx,al
c000f298:	5b                   	pop    ebx
c000f299:	5e                   	pop    esi
c000f29a:	c3                   	ret    

c000f29b <hwTextMode_update(VgaText*)>:
c000f29b:	c3                   	ret    

c000f29c <hwTextMode_updateCursor(VgaText*)>:
c000f29c:	56                   	push   esi
c000f29d:	b9 19 00 00 00       	mov    ecx,0x19
c000f2a2:	53                   	push   ebx
c000f2a3:	be d4 03 00 00       	mov    esi,0x3d4
c000f2a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2ac:	89 f2                	mov    edx,esi
c000f2ae:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f2b4:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f2ba:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f2bd:	c1 e1 04             	shl    ecx,0x4
c000f2c0:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f2c6:	b0 0f                	mov    al,0xf
c000f2c8:	ee                   	out    dx,al
c000f2c9:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f2ce:	88 c8                	mov    al,cl
c000f2d0:	89 da                	mov    edx,ebx
c000f2d2:	ee                   	out    dx,al
c000f2d3:	b0 0e                	mov    al,0xe
c000f2d5:	89 f2                	mov    edx,esi
c000f2d7:	ee                   	out    dx,al
c000f2d8:	89 c8                	mov    eax,ecx
c000f2da:	89 da                	mov    edx,ebx
c000f2dc:	66 c1 e8 08          	shr    ax,0x8
c000f2e0:	ee                   	out    dx,al
c000f2e1:	5b                   	pop    ebx
c000f2e2:	5e                   	pop    esi
c000f2e3:	c3                   	ret    

c000f2e4 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2e4:	ba da 03 00 00       	mov    edx,0x3da
c000f2e9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2ee:	75 18                	jne    c000f308 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2f0:	ec                   	in     al,dx
c000f2f1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2f6:	b0 30                	mov    al,0x30
c000f2f8:	89 ca                	mov    edx,ecx
c000f2fa:	ee                   	out    dx,al
c000f2fb:	ba c1 03 00 00       	mov    edx,0x3c1
c000f300:	ec                   	in     al,dx
c000f301:	83 c8 08             	or     eax,0x8
c000f304:	89 ca                	mov    edx,ecx
c000f306:	ee                   	out    dx,al
c000f307:	c3                   	ret    
c000f308:	ec                   	in     al,dx
c000f309:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f30e:	b0 30                	mov    al,0x30
c000f310:	89 ca                	mov    edx,ecx
c000f312:	ee                   	out    dx,al
c000f313:	ba c1 03 00 00       	mov    edx,0x3c1
c000f318:	ec                   	in     al,dx
c000f319:	83 e0 f7             	and    eax,0xfffffff7
c000f31c:	89 ca                	mov    edx,ecx
c000f31e:	ee                   	out    dx,al
c000f31f:	c3                   	ret    

c000f320 <hwTextMode_scrollScreen(VgaText*)>:
c000f320:	55                   	push   ebp
c000f321:	bd 02 00 00 00       	mov    ebp,0x2
c000f326:	57                   	push   edi
c000f327:	56                   	push   esi
c000f328:	53                   	push   ebx
c000f329:	83 ec 1c             	sub    esp,0x1c
c000f32c:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f334:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f338:	31 c0                	xor    eax,eax
c000f33a:	eb 0b                	jmp    c000f347 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f33c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f342:	74 57                	je     c000f39b <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f344:	43                   	inc    ebx
c000f345:	89 f0                	mov    eax,esi
c000f347:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f34d:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f353:	88 13                	mov    BYTE PTR [ebx],dl
c000f355:	8d 70 01             	lea    esi,[eax+0x1]
c000f358:	83 fd 18             	cmp    ebp,0x18
c000f35b:	75 df                	jne    c000f33c <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f35d:	a8 01                	test   al,0x1
c000f35f:	75 13                	jne    c000f374 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f361:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f364:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f36a:	75 d8                	jne    c000f344 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f36c:	83 c4 1c             	add    esp,0x1c
c000f36f:	5b                   	pop    ebx
c000f370:	5e                   	pop    esi
c000f371:	5f                   	pop    edi
c000f372:	5d                   	pop    ebp
c000f373:	c3                   	ret    
c000f374:	83 ec 08             	sub    esp,0x8
c000f377:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f37b:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f382:	50                   	push   eax
c000f383:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f387:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f38e:	50                   	push   eax
c000f38f:	e8 66 0b 00 00       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c000f394:	83 c4 10             	add    esp,0x10
c000f397:	88 07                	mov    BYTE PTR [edi],al
c000f399:	eb c9                	jmp    c000f364 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f39b:	45                   	inc    ebp
c000f39c:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f3a4:	eb 8e                	jmp    c000f334 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f3a6 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f3a6:	56                   	push   esi
c000f3a7:	53                   	push   ebx
c000f3a8:	83 ec 0c             	sub    esp,0xc
c000f3ab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f3af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f3b3:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3b8:	50                   	push   eax
c000f3b9:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3be:	50                   	push   eax
c000f3bf:	e8 36 0b 00 00       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c000f3c4:	5a                   	pop    edx
c000f3c5:	0f b6 c0             	movzx  eax,al
c000f3c8:	59                   	pop    ecx
c000f3c9:	50                   	push   eax
c000f3ca:	89 f0                	mov    eax,esi
c000f3cc:	0f be f0             	movsx  esi,al
c000f3cf:	56                   	push   esi
c000f3d0:	e8 cb 0b 00 00       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c000f3d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3d9:	ba 19 00 00 00       	mov    edx,0x19
c000f3de:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3e4:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3e7:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3ea:	c1 e1 04             	shl    ecx,0x4
c000f3ed:	c1 e2 04             	shl    edx,0x4
c000f3f0:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3f4:	01 ca                	add    edx,ecx
c000f3f6:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3fe:	83 c4 14             	add    esp,0x14
c000f401:	5b                   	pop    ebx
c000f402:	5e                   	pop    esi
c000f403:	c3                   	ret    

c000f404 <setupTextMode()>:
c000f404:	c7 05 b8 a4 02 c0 e4 f2 00 c0 	mov    DWORD PTR ds:0xc002a4b8,0xc000f2e4
c000f40e:	c7 05 a4 a4 02 c0 c0 f1 00 c0 	mov    DWORD PTR ds:0xc002a4a4,0xc000f1c0
c000f418:	c7 05 a0 a4 02 c0 05 f2 00 c0 	mov    DWORD PTR ds:0xc002a4a0,0xc000f205
c000f422:	c7 05 ac a4 02 c0 20 f3 00 c0 	mov    DWORD PTR ds:0xc002a4ac,0xc000f320
c000f42c:	c7 05 b4 a4 02 c0 47 f2 00 c0 	mov    DWORD PTR ds:0xc002a4b4,0xc000f247
c000f436:	c7 05 a8 a4 02 c0 9b f2 00 c0 	mov    DWORD PTR ds:0xc002a4a8,0xc000f29b
c000f440:	c7 05 b0 a4 02 c0 9c f2 00 c0 	mov    DWORD PTR ds:0xc002a4b0,0xc000f29c
c000f44a:	c7 05 bc a4 02 c0 a6 f3 00 c0 	mov    DWORD PTR ds:0xc002a4bc,0xc000f3a6
c000f454:	c3                   	ret    

c000f455 <kernel_main>:
c000f455:	57                   	push   edi
c000f456:	bf f9 03 00 00       	mov    edi,0x3f9
c000f45b:	56                   	push   esi
c000f45c:	31 f6                	xor    esi,esi
c000f45e:	53                   	push   ebx
c000f45f:	83 ec 10             	sub    esp,0x10
c000f462:	e8 ed 08 00 00       	call   c000fd54 <installVgaTextImplementation()>
c000f467:	e8 98 ff ff ff       	call   c000f404 <setupTextMode()>
c000f46c:	89 f0                	mov    eax,esi
c000f46e:	89 fa                	mov    edx,edi
c000f470:	ee                   	out    dx,al
c000f471:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f476:	b0 80                	mov    al,0x80
c000f478:	89 da                	mov    edx,ebx
c000f47a:	ee                   	out    dx,al
c000f47b:	b1 03                	mov    cl,0x3
c000f47d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f482:	88 c8                	mov    al,cl
c000f484:	ee                   	out    dx,al
c000f485:	89 f0                	mov    eax,esi
c000f487:	89 fa                	mov    edx,edi
c000f489:	ee                   	out    dx,al
c000f48a:	88 c8                	mov    al,cl
c000f48c:	89 da                	mov    edx,ebx
c000f48e:	ee                   	out    dx,al
c000f48f:	b0 c7                	mov    al,0xc7
c000f491:	ba fa 03 00 00       	mov    edx,0x3fa
c000f496:	ee                   	out    dx,al
c000f497:	b0 0b                	mov    al,0xb
c000f499:	ba fc 03 00 00       	mov    edx,0x3fc
c000f49e:	ee                   	out    dx,al
c000f49f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f4a4:	83 ec 0c             	sub    esp,0xc
c000f4a7:	05 ff 0f 00 00       	add    eax,0xfff
c000f4ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4b1:	50                   	push   eax
c000f4b2:	e8 59 03 00 00       	call   c000f810 <Phys::physicalMemorySetup(unsigned int)>
c000f4b7:	e8 da 1e 00 00       	call   c0011396 <Virt::virtualMemorySetup()>
c000f4bc:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f4cb:	75 0e                	jne    c000f4db <kernel_main+0x86>
c000f4cd:	89 d8                	mov    eax,ebx
c000f4cf:	25 48 03 00 00       	and    eax,0x348
c000f4d4:	3d 00 03 00 00       	cmp    eax,0x300
c000f4d9:	74 10                	je     c000f4eb <kernel_main+0x96>
c000f4db:	83 ec 0c             	sub    esp,0xc
c000f4de:	68 7f 80 02 c0       	push   0xc002807f
c000f4e3:	e8 0b 95 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000f4e8:	83 c4 10             	add    esp,0x10
c000f4eb:	83 ec 0c             	sub    esp,0xc
c000f4ee:	89 1d 20 a4 02 c0    	mov    DWORD PTR ds:0xc002a420,ebx
c000f4f4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 42 20 00 00       	call   c0011540 <VAS::VAS()>
c000f4fe:	89 1d 64 a5 02 c0    	mov    DWORD PTR ds:0xc002a564,ebx
c000f504:	e8 17 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f509:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f510:	e8 53 2c 00 00       	call   c0012168 <operator new(unsigned long)>
c000f515:	89 04 24             	mov    DWORD PTR [esp],eax
c000f518:	89 c6                	mov    esi,eax
c000f51a:	e8 7f ea ff ff       	call   c000df9e <Computer::Computer()>
c000f51f:	6a 00                	push   0x0
c000f521:	89 35 08 a4 02 c0    	mov    DWORD PTR ds:0xc002a408,esi
c000f527:	6a 00                	push   0x0
c000f529:	6a 00                	push   0x0
c000f52b:	56                   	push   esi
c000f52c:	e8 77 f2 ff ff       	call   c000e7a8 <Computer::open(int, int, void*)>
c000f531:	83 c4 14             	add    esp,0x14
c000f534:	53                   	push   ebx
c000f535:	e8 b2 22 00 00       	call   c00117ec <VAS::~VAS()>
c000f53a:	c7 04 24 6c 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b6c
c000f541:	e8 ad 94 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000f546:	83 c4 20             	add    esp,0x20
c000f549:	5b                   	pop    ebx
c000f54a:	5e                   	pop    esi
c000f54b:	5f                   	pop    edi
c000f54c:	c3                   	ret    

c000f54d <Phys::allocateDMA(unsigned long)>:
c000f54d:	55                   	push   ebp
c000f54e:	31 d2                	xor    edx,edx
c000f550:	57                   	push   edi
c000f551:	31 ed                	xor    ebp,ebp
c000f553:	56                   	push   esi
c000f554:	31 c9                	xor    ecx,ecx
c000f556:	53                   	push   ebx
c000f557:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f55b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f561:	31 c0                	xor    eax,eax
c000f563:	c1 ee 0c             	shr    esi,0xc
c000f566:	eb 17                	jmp    c000f57f <Phys::allocateDMA(unsigned long)+0x32>
c000f568:	85 c9                	test   ecx,ecx
c000f56a:	75 04                	jne    c000f570 <Phys::allocateDMA(unsigned long)+0x23>
c000f56c:	89 d5                	mov    ebp,edx
c000f56e:	89 d0                	mov    eax,edx
c000f570:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f573:	39 de                	cmp    esi,ebx
c000f575:	74 20                	je     c000f597 <Phys::allocateDMA(unsigned long)+0x4a>
c000f577:	42                   	inc    edx
c000f578:	89 d9                	mov    ecx,ebx
c000f57a:	83 fa 2f             	cmp    edx,0x2f
c000f57d:	7f 11                	jg     c000f590 <Phys::allocateDMA(unsigned long)+0x43>
c000f57f:	80 ba 60 a4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5ba0],0x0
c000f586:	74 e0                	je     c000f568 <Phys::allocateDMA(unsigned long)+0x1b>
c000f588:	31 c9                	xor    ecx,ecx
c000f58a:	42                   	inc    edx
c000f58b:	83 fa 2f             	cmp    edx,0x2f
c000f58e:	7e ef                	jle    c000f57f <Phys::allocateDMA(unsigned long)+0x32>
c000f590:	5b                   	pop    ebx
c000f591:	31 c0                	xor    eax,eax
c000f593:	5e                   	pop    esi
c000f594:	5f                   	pop    edi
c000f595:	5d                   	pop    ebp
c000f596:	c3                   	ret    
c000f597:	8d 14 30             	lea    edx,[eax+esi*1]
c000f59a:	89 d7                	mov    edi,edx
c000f59c:	4f                   	dec    edi
c000f59d:	79 03                	jns    c000f5a2 <Phys::allocateDMA(unsigned long)+0x55>
c000f59f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f5a2:	c1 ff 04             	sar    edi,0x4
c000f5a5:	89 c2                	mov    edx,eax
c000f5a7:	c1 fa 04             	sar    edx,0x4
c000f5aa:	39 fa                	cmp    edx,edi
c000f5ac:	75 2f                	jne    c000f5dd <Phys::allocateDMA(unsigned long)+0x90>
c000f5ae:	85 db                	test   ebx,ebx
c000f5b0:	74 1a                	je     c000f5cc <Phys::allocateDMA(unsigned long)+0x7f>
c000f5b2:	be 60 a4 02 c0       	mov    esi,0xc002a460
c000f5b7:	8d 90 60 a4 02 c0    	lea    edx,[eax-0x3ffd5ba0]
c000f5bd:	f7 d6                	not    esi
c000f5bf:	29 c6                	sub    esi,eax
c000f5c1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f5c4:	42                   	inc    edx
c000f5c5:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f5c8:	39 d9                	cmp    ecx,ebx
c000f5ca:	7f f5                	jg     c000f5c1 <Phys::allocateDMA(unsigned long)+0x74>
c000f5cc:	85 ff                	test   edi,edi
c000f5ce:	74 13                	je     c000f5e3 <Phys::allocateDMA(unsigned long)+0x96>
c000f5d0:	5b                   	pop    ebx
c000f5d1:	05 50 20 0c 00       	add    eax,0xc2050
c000f5d6:	5e                   	pop    esi
c000f5d7:	c1 e0 0c             	shl    eax,0xc
c000f5da:	5f                   	pop    edi
c000f5db:	5d                   	pop    ebp
c000f5dc:	c3                   	ret    
c000f5dd:	89 ea                	mov    edx,ebp
c000f5df:	31 c9                	xor    ecx,ecx
c000f5e1:	eb a7                	jmp    c000f58a <Phys::allocateDMA(unsigned long)+0x3d>
c000f5e3:	5b                   	pop    ebx
c000f5e4:	c1 e0 0c             	shl    eax,0xc
c000f5e7:	5e                   	pop    esi
c000f5e8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5ed:	5f                   	pop    edi
c000f5ee:	5d                   	pop    ebp
c000f5ef:	c3                   	ret    

c000f5f0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5f8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5fe:	c1 e9 0c             	shr    ecx,0xc
c000f601:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f606:	76 25                	jbe    c000f62d <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f608:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f60d:	c1 e8 0c             	shr    eax,0xc
c000f610:	8d 50 10             	lea    edx,[eax+0x10]
c000f613:	85 c9                	test   ecx,ecx
c000f615:	74 15                	je     c000f62c <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f617:	8d 82 60 a4 02 c0    	lea    eax,[edx-0x3ffd5ba0]
c000f61d:	8d 94 11 60 a4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5ba0]
c000f624:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f627:	40                   	inc    eax
c000f628:	39 d0                	cmp    eax,edx
c000f62a:	75 f8                	jne    c000f624 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f62c:	c3                   	ret    
c000f62d:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f633:	c1 ea 0c             	shr    edx,0xc
c000f636:	eb db                	jmp    c000f613 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f638 <Phys::setPageState(unsigned long, bool)>:
c000f638:	56                   	push   esi
c000f639:	ba 01 00 00 00       	mov    edx,0x1
c000f63e:	53                   	push   ebx
c000f63f:	8b 35 a4 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293a4
c000f645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f649:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f64d:	89 c8                	mov    eax,ecx
c000f64f:	83 e1 07             	and    ecx,0x7
c000f652:	c1 e8 03             	shr    eax,0x3
c000f655:	d3 e3                	shl    ebx,cl
c000f657:	01 c6                	add    esi,eax
c000f659:	d3 e2                	shl    edx,cl
c000f65b:	f7 d2                	not    edx
c000f65d:	20 16                	and    BYTE PTR [esi],dl
c000f65f:	03 05 a4 93 02 c0    	add    eax,DWORD PTR ds:0xc00293a4
c000f665:	08 18                	or     BYTE PTR [eax],bl
c000f667:	5b                   	pop    ebx
c000f668:	5e                   	pop    esi
c000f669:	c3                   	ret    

c000f66a <Phys::getPageState(unsigned long)>:
c000f66a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f66e:	8b 15 a4 93 02 c0    	mov    edx,DWORD PTR ds:0xc00293a4
c000f674:	89 c8                	mov    eax,ecx
c000f676:	83 e1 07             	and    ecx,0x7
c000f679:	c1 e8 03             	shr    eax,0x3
c000f67c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f680:	d3 f8                	sar    eax,cl
c000f682:	83 e0 01             	and    eax,0x1
c000f685:	c3                   	ret    

c000f686 <Phys::freePage(unsigned long)>:
c000f686:	53                   	push   ebx
c000f687:	83 ec 08             	sub    esp,0x8
c000f68a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f68e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f694:	76 57                	jbe    c000f6ed <Phys::freePage(unsigned long)+0x67>
c000f696:	c1 eb 0c             	shr    ebx,0xc
c000f699:	53                   	push   ebx
c000f69a:	e8 cb ff ff ff       	call   c000f66a <Phys::getPageState(unsigned long)>
c000f69f:	5a                   	pop    edx
c000f6a0:	84 c0                	test   al,al
c000f6a2:	74 5b                	je     c000f6ff <Phys::freePage(unsigned long)+0x79>
c000f6a4:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f6a9:	48                   	dec    eax
c000f6aa:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f6af:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6b2:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6b5:	c1 e0 02             	shl    eax,0x2
c000f6b8:	99                   	cdq    
c000f6b9:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f6bf:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f6c5:	75 13                	jne    c000f6da <Phys::freePage(unsigned long)+0x54>
c000f6c7:	83 ec 08             	sub    esp,0x8
c000f6ca:	6a 00                	push   0x0
c000f6cc:	53                   	push   ebx
c000f6cd:	e8 66 ff ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000f6d2:	83 c4 10             	add    esp,0x10
c000f6d5:	83 c4 08             	add    esp,0x8
c000f6d8:	5b                   	pop    ebx
c000f6d9:	c3                   	ret    
c000f6da:	83 ec 0c             	sub    esp,0xc
c000f6dd:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f6e2:	50                   	push   eax
c000f6e3:	e8 00 0a 00 00       	call   c00100e8 <VgaText::updateRAMUsageDisplay(int)>
c000f6e8:	83 c4 10             	add    esp,0x10
c000f6eb:	eb da                	jmp    c000f6c7 <Phys::freePage(unsigned long)+0x41>
c000f6ed:	68 00 10 00 00       	push   0x1000
c000f6f2:	53                   	push   ebx
c000f6f3:	e8 f8 fe ff ff       	call   c000f5f0 <Phys::freeDMA(unsigned long, unsigned long)>
c000f6f8:	59                   	pop    ecx
c000f6f9:	5b                   	pop    ebx
c000f6fa:	83 c4 08             	add    esp,0x8
c000f6fd:	5b                   	pop    ebx
c000f6fe:	c3                   	ret    
c000f6ff:	c7 44 24 10 87 6b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026b87
c000f707:	83 c4 08             	add    esp,0x8
c000f70a:	5b                   	pop    ebx
c000f70b:	e9 e3 92 00 00       	jmp    c00189f3 <Krnl::panic(char const*)>

c000f710 <Phys::allocatePage()>:
c000f710:	56                   	push   esi
c000f711:	53                   	push   ebx
c000f712:	51                   	push   ecx
c000f713:	8b 35 40 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a440
c000f719:	89 f3                	mov    ebx,esi
c000f71b:	eb 0a                	jmp    c000f727 <Phys::allocatePage()+0x17>
c000f71d:	89 1d 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,ebx
c000f723:	39 de                	cmp    esi,ebx
c000f725:	74 24                	je     c000f74b <Phys::allocatePage()+0x3b>
c000f727:	53                   	push   ebx
c000f728:	e8 3d ff ff ff       	call   c000f66a <Phys::getPageState(unsigned long)>
c000f72d:	5a                   	pop    edx
c000f72e:	84 c0                	test   al,al
c000f730:	74 5a                	je     c000f78c <Phys::allocatePage()+0x7c>
c000f732:	43                   	inc    ebx
c000f733:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f739:	75 e2                	jne    c000f71d <Phys::allocatePage()+0xd>
c000f73b:	31 db                	xor    ebx,ebx
c000f73d:	c7 05 40 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a440,0x0
c000f747:	39 de                	cmp    esi,ebx
c000f749:	75 dc                	jne    c000f727 <Phys::allocatePage()+0x17>
c000f74b:	83 ec 0c             	sub    esp,0xc
c000f74e:	68 9d 6b 02 c0       	push   0xc0026b9d
c000f753:	e8 ff 2a 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f758:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f75f:	e8 e9 fd ff ff       	call   c000f54d <Phys::allocateDMA(unsigned long)>
c000f764:	83 c4 10             	add    esp,0x10
c000f767:	85 c0                	test   eax,eax
c000f769:	75 56                	jne    c000f7c1 <Phys::allocatePage()+0xb1>
c000f76b:	83 ec 0c             	sub    esp,0xc
c000f76e:	68 ae 6b 02 c0       	push   0xc0026bae
c000f773:	e8 7b 92 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000f778:	83 c4 10             	add    esp,0x10
c000f77b:	8b 1d 40 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a440
c000f781:	53                   	push   ebx
c000f782:	e8 e3 fe ff ff       	call   c000f66a <Phys::getPageState(unsigned long)>
c000f787:	5a                   	pop    edx
c000f788:	84 c0                	test   al,al
c000f78a:	75 a6                	jne    c000f732 <Phys::allocatePage()+0x22>
c000f78c:	6a 01                	push   0x1
c000f78e:	53                   	push   ebx
c000f78f:	e8 a4 fe ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000f794:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f799:	59                   	pop    ecx
c000f79a:	40                   	inc    eax
c000f79b:	5b                   	pop    ebx
c000f79c:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f7a1:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7a4:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7a7:	c1 e0 02             	shl    eax,0x2
c000f7aa:	99                   	cdq    
c000f7ab:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f7b1:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f7b7:	75 0c                	jne    c000f7c5 <Phys::allocatePage()+0xb5>
c000f7b9:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c000f7be:	c1 e0 0c             	shl    eax,0xc
c000f7c1:	5a                   	pop    edx
c000f7c2:	5b                   	pop    ebx
c000f7c3:	5e                   	pop    esi
c000f7c4:	c3                   	ret    
c000f7c5:	83 ec 0c             	sub    esp,0xc
c000f7c8:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f7cd:	50                   	push   eax
c000f7ce:	e8 15 09 00 00       	call   c00100e8 <VgaText::updateRAMUsageDisplay(int)>
c000f7d3:	83 c4 10             	add    esp,0x10
c000f7d6:	eb e1                	jmp    c000f7b9 <Phys::allocatePage()+0xa9>

c000f7d8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f7d8:	56                   	push   esi
c000f7d9:	53                   	push   ebx
c000f7da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7de:	39 1d 44 a4 02 c0    	cmp    DWORD PTR ds:0xc002a444,ebx
c000f7e4:	73 06                	jae    c000f7ec <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7e6:	89 1d 44 a4 02 c0    	mov    DWORD PTR ds:0xc002a444,ebx
c000f7ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7f0:	c1 eb 0c             	shr    ebx,0xc
c000f7f3:	c1 e8 0c             	shr    eax,0xc
c000f7f6:	39 d8                	cmp    eax,ebx
c000f7f8:	73 13                	jae    c000f80d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7fa:	6a 00                	push   0x0
c000f7fc:	8d 70 01             	lea    esi,[eax+0x1]
c000f7ff:	50                   	push   eax
c000f800:	e8 33 fe ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000f805:	5a                   	pop    edx
c000f806:	89 f0                	mov    eax,esi
c000f808:	59                   	pop    ecx
c000f809:	39 f3                	cmp    ebx,esi
c000f80b:	75 ed                	jne    c000f7fa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f80d:	5b                   	pop    ebx
c000f80e:	5e                   	pop    esi
c000f80f:	c3                   	ret    

c000f810 <Phys::physicalMemorySetup(unsigned int)>:
c000f810:	55                   	push   ebp
c000f811:	57                   	push   edi
c000f812:	56                   	push   esi
c000f813:	53                   	push   ebx
c000f814:	31 db                	xor    ebx,ebx
c000f816:	83 ec 40             	sub    esp,0x40
c000f819:	6a 30                	push   0x30
c000f81b:	6a 00                	push   0x0
c000f81d:	68 60 a4 02 c0       	push   0xc002a460
c000f822:	e8 c5 0e ff ff       	call   c00006ec <memset>
c000f827:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f82b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f830:	05 00 10 00 00       	add    eax,0x1000
c000f835:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f839:	83 c4 10             	add    esp,0x10
c000f83c:	83 ec 08             	sub    esp,0x8
c000f83f:	6a 01                	push   0x1
c000f841:	53                   	push   ebx
c000f842:	43                   	inc    ebx
c000f843:	e8 f0 fd ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f851:	75 e9                	jne    c000f83c <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f853:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f85a:	66 85 c0             	test   ax,ax
c000f85d:	0f 84 8e 01 00 00    	je     c000f9f1 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f863:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f867:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f86f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f873:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f878:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f87c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f884:	eb 15                	jmp    c000f89b <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f886:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f88a:	83 c3 18             	add    ebx,0x18
c000f88d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f891:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f895:	0f 84 66 01 00 00    	je     c000fa01 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f89b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f89e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f8a1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f8a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8ac:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f8ae:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f8b1:	01 f0                	add    eax,esi
c000f8b3:	55                   	push   ebp
c000f8b4:	11 fa                	adc    edx,edi
c000f8b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8ba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f8be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8c2:	56                   	push   esi
c000f8c3:	68 e8 6b 02 c0       	push   0xc0026be8
c000f8c8:	e8 8a 29 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f8cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8d1:	83 c4 10             	add    esp,0x10
c000f8d4:	09 f8                	or     eax,edi
c000f8d6:	0f 85 25 01 00 00    	jne    c000fa01 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8dc:	4d                   	dec    ebp
c000f8dd:	75 a7                	jne    c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8df:	ba 00 00 08 00       	mov    edx,0x80000
c000f8e4:	89 c1                	mov    ecx,eax
c000f8e6:	39 f2                	cmp    edx,esi
c000f8e8:	19 f9                	sbb    ecx,edi
c000f8ea:	0f 82 a7 00 00 00    	jb     c000f997 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8f0:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8f4:	89 c1                	mov    ecx,eax
c000f8f6:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8fa:	0f 83 97 00 00 00    	jae    c000f997 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f900:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f905:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f909:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f90d:	39 fa                	cmp    edx,edi
c000f90f:	19 e8                	sbb    eax,ebp
c000f911:	0f 82 14 01 00 00    	jb     c000fa2b <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f917:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f91b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f91f:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f925:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f92a:	83 d5 ff             	adc    ebp,0xffffffff
c000f92d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f931:	31 c0                	xor    eax,eax
c000f933:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f937:	39 fa                	cmp    edx,edi
c000f939:	89 c1                	mov    ecx,eax
c000f93b:	19 e9                	sbb    ecx,ebp
c000f93d:	0f 83 43 ff ff ff    	jae    c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f943:	be 00 00 08 00       	mov    esi,0x80000
c000f948:	50                   	push   eax
c000f949:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f94d:	57                   	push   edi
c000f94e:	56                   	push   esi
c000f94f:	68 0c 6c 02 c0       	push   0xc0026c0c
c000f954:	e8 fe 28 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f959:	5a                   	pop    edx
c000f95a:	59                   	pop    ecx
c000f95b:	57                   	push   edi
c000f95c:	56                   	push   esi
c000f95d:	e8 76 fe ff ff       	call   c000f7d8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f962:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f966:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f96a:	83 c4 0c             	add    esp,0xc
c000f96d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f971:	03 05 50 a4 02 c0    	add    eax,DWORD PTR ds:0xc002a450
c000f977:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f97e:	a3 50 a4 02 c0       	mov    ds:0xc002a450,eax
c000f983:	52                   	push   edx
c000f984:	50                   	push   eax
c000f985:	68 ca 6b 02 c0       	push   0xc0026bca
c000f98a:	e8 c8 28 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f98f:	83 c4 10             	add    esp,0x10
c000f992:	e9 ef fe ff ff       	jmp    c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f997:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f99b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f99f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9a3:	39 ea                	cmp    edx,ebp
c000f9a5:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f9a9:	0f 82 d7 fe ff ff    	jb     c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9af:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f9b4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f9b8:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f9bc:	0f 83 c4 fe ff ff    	jae    c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9c2:	39 ee                	cmp    esi,ebp
c000f9c4:	89 f8                	mov    eax,edi
c000f9c6:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f9ca:	0f 83 78 ff ff ff    	jae    c000f948 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9d8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9dc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9e0:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9ec:	e9 57 ff ff ff       	jmp    c000f948 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9f1:	83 ec 0c             	sub    esp,0xc
c000f9f4:	68 bc 6b 02 c0       	push   0xc0026bbc
c000f9f9:	e8 f5 8f 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000f9fe:	83 c4 10             	add    esp,0x10
c000fa01:	bb 40 01 00 00       	mov    ebx,0x140
c000fa06:	83 ec 08             	sub    esp,0x8
c000fa09:	6a 00                	push   0x0
c000fa0b:	53                   	push   ebx
c000fa0c:	43                   	inc    ebx
c000fa0d:	e8 26 fc ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000fa12:	ff 05 50 a4 02 c0    	inc    DWORD PTR ds:0xc002a450
c000fa18:	83 c4 10             	add    esp,0x10
c000fa1b:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fa21:	75 e3                	jne    c000fa06 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fa23:	83 c4 3c             	add    esp,0x3c
c000fa26:	5b                   	pop    ebx
c000fa27:	5e                   	pop    esi
c000fa28:	5f                   	pop    edi
c000fa29:	5d                   	pop    ebp
c000fa2a:	c3                   	ret    
c000fa2b:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fa33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa3b:	e9 d7 fe ff ff       	jmp    c000f917 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa40 <Pipe::isAtty()>:
c000fa40:	31 c0                	xor    eax,eax
c000fa42:	c3                   	ret    
c000fa43:	90                   	nop

c000fa44 <Pipe::~Pipe()>:
c000fa44:	83 ec 0c             	sub    esp,0xc
c000fa47:	ba 78 6c 02 c0       	mov    edx,0xc0026c78
c000fa4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa50:	89 10                	mov    DWORD PTR [eax],edx
c000fa52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa56:	83 ec 0c             	sub    esp,0xc
c000fa59:	50                   	push   eax
c000fa5a:	e8 c5 15 00 00       	call   c0011024 <UnixFile::~UnixFile()>
c000fa5f:	83 c4 10             	add    esp,0x10
c000fa62:	90                   	nop
c000fa63:	83 c4 0c             	add    esp,0xc
c000fa66:	c3                   	ret    
c000fa67:	90                   	nop

c000fa68 <Pipe::~Pipe()>:
c000fa68:	83 ec 0c             	sub    esp,0xc
c000fa6b:	83 ec 0c             	sub    esp,0xc
c000fa6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa72:	e8 cd ff ff ff       	call   c000fa44 <Pipe::~Pipe()>
c000fa77:	83 c4 10             	add    esp,0x10
c000fa7a:	83 ec 08             	sub    esp,0x8
c000fa7d:	6a 20                	push   0x20
c000fa7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa83:	e8 ef 26 00 00       	call   c0012177 <operator delete(void*, unsigned long)>
c000fa88:	83 c4 10             	add    esp,0x10
c000fa8b:	83 c4 0c             	add    esp,0xc
c000fa8e:	c3                   	ret    
c000fa8f:	90                   	nop

c000fa90 <Pipe::read(unsigned long long, void*, int*)>:
c000fa90:	55                   	push   ebp
c000fa91:	57                   	push   edi
c000fa92:	56                   	push   esi
c000fa93:	53                   	push   ebx
c000fa94:	83 ec 1c             	sub    esp,0x1c
c000fa97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa9b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa9f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000faa3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000faa6:	89 c8                	mov    eax,ecx
c000faa8:	99                   	cdq    
c000faa9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000faad:	74 19                	je     c000fac8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000faaf:	39 f9                	cmp    ecx,edi
c000fab1:	89 d1                	mov    ecx,edx
c000fab3:	19 f1                	sbb    ecx,esi
c000fab5:	73 11                	jae    c000fac8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fab7:	e8 8a be 00 00       	call   c001b946 <lockScheduler()>
c000fabc:	e8 b9 c1 00 00       	call   c001bc7a <schedule()>
c000fac1:	e8 82 be 00 00       	call   c001b948 <unlockScheduler()>
c000fac6:	eb db                	jmp    c000faa3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fac8:	39 f8                	cmp    eax,edi
c000faca:	89 d1                	mov    ecx,edx
c000facc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fad0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fad4:	19 f1                	sbb    ecx,esi
c000fad6:	73 08                	jae    c000fae0 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fad8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fadc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fae0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fae3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fae6:	29 c6                	sub    esi,eax
c000fae8:	89 f1                	mov    ecx,esi
c000faea:	c1 f9 1f             	sar    ecx,0x1f
c000faed:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000faf1:	89 ca                	mov    edx,ecx
c000faf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faf7:	19 d1                	sbb    ecx,edx
c000faf9:	73 04                	jae    c000faff <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fafb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000faff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fb03:	89 fd                	mov    ebp,edi
c000fb05:	29 f5                	sub    ebp,esi
c000fb07:	85 f6                	test   esi,esi
c000fb09:	74 12                	je     c000fb1d <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fb0b:	52                   	push   edx
c000fb0c:	56                   	push   esi
c000fb0d:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fb10:	50                   	push   eax
c000fb11:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fb15:	e8 9c 0b ff ff       	call   c00006b6 <memcpy>
c000fb1a:	83 c4 10             	add    esp,0x10
c000fb1d:	85 ed                	test   ebp,ebp
c000fb1f:	74 12                	je     c000fb33 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fb21:	50                   	push   eax
c000fb22:	55                   	push   ebp
c000fb23:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fb26:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fb2a:	56                   	push   esi
c000fb2b:	e8 86 0b ff ff       	call   c00006b6 <memcpy>
c000fb30:	83 c4 10             	add    esp,0x10
c000fb33:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fb36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fb39:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb3c:	99                   	cdq    
c000fb3d:	89 f7                	mov    edi,esi
c000fb3f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb43:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb47:	c1 ff 1f             	sar    edi,0x1f
c000fb4a:	57                   	push   edi
c000fb4b:	56                   	push   esi
c000fb4c:	52                   	push   edx
c000fb4d:	50                   	push   eax
c000fb4e:	e8 09 39 01 00       	call   c002345c <__umoddi3>
c000fb53:	83 c4 10             	add    esp,0x10
c000fb56:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb59:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb5e:	75 10                	jne    c000fb70 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb60:	83 ec 0c             	sub    esp,0xc
c000fb63:	68 35 6c 02 c0       	push   0xc0026c35
c000fb68:	e8 86 8e 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000fb6d:	83 c4 10             	add    esp,0x10
c000fb70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb78:	89 10                	mov    DWORD PTR [eax],edx
c000fb7a:	83 c4 1c             	add    esp,0x1c
c000fb7d:	31 c0                	xor    eax,eax
c000fb7f:	5b                   	pop    ebx
c000fb80:	5e                   	pop    esi
c000fb81:	5f                   	pop    edi
c000fb82:	5d                   	pop    ebp
c000fb83:	c3                   	ret    

c000fb84 <Pipe::write(unsigned long long, void*, int*)>:
c000fb84:	55                   	push   ebp
c000fb85:	57                   	push   edi
c000fb86:	56                   	push   esi
c000fb87:	53                   	push   ebx
c000fb88:	83 ec 1c             	sub    esp,0x1c
c000fb8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb8f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb93:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb97:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb9a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb9d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fba0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fba4:	89 de                	mov    esi,ebx
c000fba6:	89 df                	mov    edi,ebx
c000fba8:	c1 ff 1f             	sar    edi,0x1f
c000fbab:	01 c6                	add    esi,eax
c000fbad:	89 c8                	mov    eax,ecx
c000fbaf:	11 d7                	adc    edi,edx
c000fbb1:	99                   	cdq    
c000fbb2:	39 f1                	cmp    ecx,esi
c000fbb4:	89 d0                	mov    eax,edx
c000fbb6:	19 f8                	sbb    eax,edi
c000fbb8:	b8 01 00 00 00       	mov    eax,0x1
c000fbbd:	0f 82 80 00 00 00    	jb     c000fc43 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fbc3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fbc6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fbc9:	01 d8                	add    eax,ebx
c000fbcb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fbcf:	99                   	cdq    
c000fbd0:	f7 f9                	idiv   ecx
c000fbd2:	29 d1                	sub    ecx,edx
c000fbd4:	89 d7                	mov    edi,edx
c000fbd6:	89 c8                	mov    eax,ecx
c000fbd8:	99                   	cdq    
c000fbd9:	39 ce                	cmp    esi,ecx
c000fbdb:	19 d3                	sbb    ebx,edx
c000fbdd:	bb 00 00 00 00       	mov    ebx,0x0
c000fbe2:	72 04                	jb     c000fbe8 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbe4:	89 f3                	mov    ebx,esi
c000fbe6:	29 cb                	sub    ebx,ecx
c000fbe8:	89 f1                	mov    ecx,esi
c000fbea:	29 d9                	sub    ecx,ebx
c000fbec:	74 1a                	je     c000fc08 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbee:	52                   	push   edx
c000fbef:	51                   	push   ecx
c000fbf0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbf4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbf8:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbfb:	57                   	push   edi
c000fbfc:	e8 b5 0a ff ff       	call   c00006b6 <memcpy>
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc08:	85 db                	test   ebx,ebx
c000fc0a:	74 12                	je     c000fc1e <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fc0c:	50                   	push   eax
c000fc0d:	53                   	push   ebx
c000fc0e:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fc12:	51                   	push   ecx
c000fc13:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fc16:	e8 9b 0a ff ff       	call   c00006b6 <memcpy>
c000fc1b:	83 c4 10             	add    esp,0x10
c000fc1e:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fc21:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fc26:	75 10                	jne    c000fc38 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fc28:	83 ec 0c             	sub    esp,0xc
c000fc2b:	68 51 6c 02 c0       	push   0xc0026c51
c000fc30:	e8 be 8d 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c000fc35:	83 c4 10             	add    esp,0x10
c000fc38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc3c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc3f:	89 38                	mov    DWORD PTR [eax],edi
c000fc41:	31 c0                	xor    eax,eax
c000fc43:	83 c4 1c             	add    esp,0x1c
c000fc46:	5b                   	pop    ebx
c000fc47:	5e                   	pop    esi
c000fc48:	5f                   	pop    edi
c000fc49:	5d                   	pop    ebp
c000fc4a:	c3                   	ret    
c000fc4b:	90                   	nop

c000fc4c <Pipe::Pipe(int)>:
c000fc4c:	83 ec 0c             	sub    esp,0xc
c000fc4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc53:	83 ec 08             	sub    esp,0x8
c000fc56:	6a 00                	push   0x0
c000fc58:	50                   	push   eax
c000fc59:	e8 24 12 00 00       	call   c0010e82 <UnixFile::UnixFile(int)>
c000fc5e:	83 c4 10             	add    esp,0x10
c000fc61:	ba 78 6c 02 c0       	mov    edx,0xc0026c78
c000fc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc6a:	89 10                	mov    DWORD PTR [eax],edx
c000fc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc7b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc86:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc91:	83 ec 0c             	sub    esp,0xc
c000fc94:	50                   	push   eax
c000fc95:	e8 cc f4 ff ff       	call   c000f166 <malloc>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	89 c2                	mov    edx,eax
c000fc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcaa:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fcae:	90                   	nop
c000fcaf:	83 c4 0c             	add    esp,0xc
c000fcb2:	c3                   	ret    
c000fcb3:	90                   	nop

c000fcb4 <VgaText::isAtty()>:
c000fcb4:	b0 01                	mov    al,0x1
c000fcb6:	c3                   	ret    
c000fcb7:	90                   	nop

c000fcb8 <VgaText::~VgaText()>:
c000fcb8:	83 ec 0c             	sub    esp,0xc
c000fcbb:	ba 34 6d 02 c0       	mov    edx,0xc0026d34
c000fcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcc4:	89 10                	mov    DWORD PTR [eax],edx
c000fcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcca:	83 ec 0c             	sub    esp,0xc
c000fccd:	50                   	push   eax
c000fcce:	e8 51 13 00 00       	call   c0011024 <UnixFile::~UnixFile()>
c000fcd3:	83 c4 10             	add    esp,0x10
c000fcd6:	90                   	nop
c000fcd7:	83 c4 0c             	add    esp,0xc
c000fcda:	c3                   	ret    
c000fcdb:	90                   	nop

c000fcdc <VgaText::~VgaText()>:
c000fcdc:	83 ec 0c             	sub    esp,0xc
c000fcdf:	83 ec 0c             	sub    esp,0xc
c000fce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fce6:	e8 cd ff ff ff       	call   c000fcb8 <VgaText::~VgaText()>
c000fceb:	83 c4 10             	add    esp,0x10
c000fcee:	83 ec 08             	sub    esp,0x8
c000fcf1:	68 60 12 00 00       	push   0x1260
c000fcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcfa:	e8 78 24 00 00       	call   c0012177 <operator delete(void*, unsigned long)>
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	83 c4 0c             	add    esp,0xc
c000fd05:	c3                   	ret    

c000fd06 <VgaText::read(unsigned long long, void*, int*)>:
c000fd06:	83 ec 10             	sub    esp,0x10
c000fd09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd15:	e8 0e 57 00 00       	call   c0015428 <readKeyboard(VgaText*, char*, unsigned long)>
c000fd1a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fd1e:	89 02                	mov    DWORD PTR [edx],eax
c000fd20:	31 c0                	xor    eax,eax
c000fd22:	83 c4 1c             	add    esp,0x1c
c000fd25:	c3                   	ret    

c000fd26 <setTerminalScrollLock(bool)>:
c000fd26:	c3                   	ret    

c000fd27 <addToTerminalCycle(VgaText*)>:
c000fd27:	8b 15 c0 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4c0
c000fd2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd31:	85 d2                	test   edx,edx
c000fd33:	75 0c                	jne    c000fd41 <addToTerminalCycle(VgaText*)+0x1a>
c000fd35:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd3b:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c000fd40:	c3                   	ret    
c000fd41:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd47:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd4d:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd53:	c3                   	ret    

c000fd54 <installVgaTextImplementation()>:
c000fd54:	83 ec 10             	sub    esp,0x10
c000fd57:	6a 20                	push   0x20
c000fd59:	6a 00                	push   0x0
c000fd5b:	68 a0 a4 02 c0       	push   0xc002a4a0
c000fd60:	e8 87 09 ff ff       	call   c00006ec <memset>
c000fd65:	83 c4 1c             	add    esp,0x1c
c000fd68:	c3                   	ret    

c000fd69 <scrollTerminalScrollLock(int)>:
c000fd69:	c3                   	ret    

c000fd6a <VgaText::load()>:
c000fd6a:	53                   	push   ebx
c000fd6b:	31 c0                	xor    eax,eax
c000fd6d:	83 ec 58             	sub    esp,0x58
c000fd70:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd74:	89 e2                	mov    edx,esp
c000fd76:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd7a:	40                   	inc    eax
c000fd7b:	83 f8 50             	cmp    eax,0x50
c000fd7e:	75 f6                	jne    c000fd76 <VgaText::load()+0xc>
c000fd80:	31 c0                	xor    eax,eax
c000fd82:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd89:	84 c9                	test   cl,cl
c000fd8b:	74 06                	je     c000fd93 <VgaText::load()+0x29>
c000fd8d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd90:	40                   	inc    eax
c000fd91:	eb ef                	jmp    c000fd82 <VgaText::load()+0x18>
c000fd93:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd99:	85 c0                	test   eax,eax
c000fd9b:	74 09                	je     c000fda6 <VgaText::load()+0x3c>
c000fd9d:	51                   	push   ecx
c000fd9e:	51                   	push   ecx
c000fd9f:	52                   	push   edx
c000fda0:	53                   	push   ebx
c000fda1:	ff d0                	call   eax
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fdac:	85 c0                	test   eax,eax
c000fdae:	74 09                	je     c000fdb9 <VgaText::load()+0x4f>
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	53                   	push   ebx
c000fdb4:	ff d0                	call   eax
c000fdb6:	83 c4 10             	add    esp,0x10
c000fdb9:	83 c4 58             	add    esp,0x58
c000fdbc:	5b                   	pop    ebx
c000fdbd:	c3                   	ret    

c000fdbe <VgaText::updateCursor()>:
c000fdbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc2:	39 05 c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,eax
c000fdc8:	75 0c                	jne    c000fdd6 <VgaText::updateCursor()+0x18>
c000fdca:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fdd0:	85 c0                	test   eax,eax
c000fdd2:	74 02                	je     c000fdd6 <VgaText::updateCursor()+0x18>
c000fdd4:	ff e0                	jmp    eax
c000fdd6:	c3                   	ret    
c000fdd7:	90                   	nop

c000fdd8 <VgaText::showCursor(bool)>:
c000fdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fddc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fde0:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fde6:	c3                   	ret    
c000fde7:	90                   	nop

c000fde8 <VgaText::disableBlink(bool)>:
c000fde8:	56                   	push   esi
c000fde9:	53                   	push   ebx
c000fdea:	51                   	push   ecx
c000fdeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdf3:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000fdf9:	75 18                	jne    c000fe13 <VgaText::disableBlink(bool)+0x2b>
c000fdfb:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fe01:	85 c0                	test   eax,eax
c000fe03:	74 0e                	je     c000fe13 <VgaText::disableBlink(bool)+0x2b>
c000fe05:	89 f1                	mov    ecx,esi
c000fe07:	52                   	push   edx
c000fe08:	52                   	push   edx
c000fe09:	0f b6 d1             	movzx  edx,cl
c000fe0c:	52                   	push   edx
c000fe0d:	53                   	push   ebx
c000fe0e:	ff d0                	call   eax
c000fe10:	83 c4 10             	add    esp,0x10
c000fe13:	89 f0                	mov    eax,esi
c000fe15:	83 f0 01             	xor    eax,0x1
c000fe18:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fe1e:	58                   	pop    eax
c000fe1f:	5b                   	pop    ebx
c000fe20:	5e                   	pop    esi
c000fe21:	c3                   	ret    

c000fe22 <VgaText::doANSI_SGR(int)>:
c000fe22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe2a:	85 d2                	test   edx,edx
c000fe2c:	75 14                	jne    c000fe42 <VgaText::doANSI_SGR(int)+0x20>
c000fe2e:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fe34:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe3a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe40:	eb 65                	jmp    c000fea7 <VgaText::doANSI_SGR(int)+0x85>
c000fe42:	83 fa 07             	cmp    edx,0x7
c000fe45:	75 14                	jne    c000fe5b <VgaText::doANSI_SGR(int)+0x39>
c000fe47:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe4d:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe53:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe59:	eb 4c                	jmp    c000fea7 <VgaText::doANSI_SGR(int)+0x85>
c000fe5b:	83 fa 1b             	cmp    edx,0x1b
c000fe5e:	74 ce                	je     c000fe2e <VgaText::doANSI_SGR(int)+0xc>
c000fe60:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe63:	83 f9 07             	cmp    ecx,0x7
c000fe66:	77 09                	ja     c000fe71 <VgaText::doANSI_SGR(int)+0x4f>
c000fe68:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe6f:	eb 20                	jmp    c000fe91 <VgaText::doANSI_SGR(int)+0x6f>
c000fe71:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe74:	83 f9 07             	cmp    ecx,0x7
c000fe77:	77 09                	ja     c000fe82 <VgaText::doANSI_SGR(int)+0x60>
c000fe79:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe80:	eb 25                	jmp    c000fea7 <VgaText::doANSI_SGR(int)+0x85>
c000fe82:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe85:	83 f9 07             	cmp    ecx,0x7
c000fe88:	77 0e                	ja     c000fe98 <VgaText::doANSI_SGR(int)+0x76>
c000fe8a:	8b 14 95 98 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d68]
c000fe91:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe97:	c3                   	ret    
c000fe98:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe9b:	83 f9 07             	cmp    ecx,0x7
c000fe9e:	77 0d                	ja     c000fead <VgaText::doANSI_SGR(int)+0x8b>
c000fea0:	8b 14 95 70 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d90]
c000fea7:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fead:	c3                   	ret    

c000feae <VgaText::setDefaultBgColour(VgaColour)>:
c000feae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb6:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000febc:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fec2:	c3                   	ret    
c000fec3:	90                   	nop

c000fec4 <VgaText::setDefaultFgColour(VgaColour)>:
c000fec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fecc:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fed2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fed8:	c3                   	ret    
c000fed9:	90                   	nop

c000feda <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000feda:	53                   	push   ebx
c000fedb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fedf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fee3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fee7:	51                   	push   ecx
c000fee8:	e8 c1 ff ff ff       	call   c000feae <VgaText::setDefaultBgColour(VgaColour)>
c000feed:	58                   	pop    eax
c000feee:	5a                   	pop    edx
c000feef:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fef3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fef7:	5b                   	pop    ebx
c000fef8:	eb ca                	jmp    c000fec4 <VgaText::setDefaultFgColour(VgaColour)>

c000fefa <VgaText::combineColours(unsigned char, unsigned char)>:
c000fefa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fefe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ff03:	83 e0 0f             	and    eax,0xf
c000ff06:	c1 e2 04             	shl    edx,0x4
c000ff09:	09 d0                	or     eax,edx
c000ff0b:	c3                   	ret    

c000ff0c <VgaText::scrollScreen()>:
c000ff0c:	57                   	push   edi
c000ff0d:	56                   	push   esi
c000ff0e:	be 01 00 00 00       	mov    esi,0x1
c000ff13:	53                   	push   ebx
c000ff14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff18:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000ff1e:	31 ff                	xor    edi,edi
c000ff20:	01 d9                	add    ecx,ebx
c000ff22:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ff25:	83 fe 17             	cmp    esi,0x17
c000ff28:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ff2e:	75 28                	jne    c000ff58 <VgaText::scrollScreen()+0x4c>
c000ff30:	f7 c7 01 00 00 00    	test   edi,0x1
c000ff36:	74 1c                	je     c000ff54 <VgaText::scrollScreen()+0x48>
c000ff38:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff3f:	50                   	push   eax
c000ff40:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff47:	50                   	push   eax
c000ff48:	e8 ad ff ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c000ff4d:	5a                   	pop    edx
c000ff4e:	5a                   	pop    edx
c000ff4f:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff52:	eb 04                	jmp    c000ff58 <VgaText::scrollScreen()+0x4c>
c000ff54:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff58:	47                   	inc    edi
c000ff59:	41                   	inc    ecx
c000ff5a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff60:	75 c0                	jne    c000ff22 <VgaText::scrollScreen()+0x16>
c000ff62:	46                   	inc    esi
c000ff63:	83 fe 18             	cmp    esi,0x18
c000ff66:	75 b0                	jne    c000ff18 <VgaText::scrollScreen()+0xc>
c000ff68:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000ff6e:	75 24                	jne    c000ff94 <VgaText::scrollScreen()+0x88>
c000ff70:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff77:	74 08                	je     c000ff81 <VgaText::scrollScreen()+0x75>
c000ff79:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff7f:	eb 13                	jmp    c000ff94 <VgaText::scrollScreen()+0x88>
c000ff81:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff87:	85 c0                	test   eax,eax
c000ff89:	74 09                	je     c000ff94 <VgaText::scrollScreen()+0x88>
c000ff8b:	83 ec 0c             	sub    esp,0xc
c000ff8e:	53                   	push   ebx
c000ff8f:	ff d0                	call   eax
c000ff91:	83 c4 10             	add    esp,0x10
c000ff94:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff98:	5b                   	pop    ebx
c000ff99:	5e                   	pop    esi
c000ff9a:	5f                   	pop    edi
c000ff9b:	e9 1e fe ff ff       	jmp    c000fdbe <VgaText::updateCursor()>

c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ffa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ffa5:	c1 e0 08             	shl    eax,0x8
c000ffa8:	89 c2                	mov    edx,eax
c000ffaa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ffaf:	09 d0                	or     eax,edx
c000ffb1:	c3                   	ret    

c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ffb2:	53                   	push   ebx
c000ffb3:	83 ec 08             	sub    esp,0x8
c000ffb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ffba:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffbf:	50                   	push   eax
c000ffc0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffc5:	50                   	push   eax
c000ffc6:	e8 2f ff ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c000ffcb:	5a                   	pop    edx
c000ffcc:	0f b6 c0             	movzx  eax,al
c000ffcf:	5b                   	pop    ebx
c000ffd0:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ffd5:	50                   	push   eax
c000ffd6:	53                   	push   ebx
c000ffd7:	e8 c4 ff ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffdc:	5a                   	pop    edx
c000ffdd:	5a                   	pop    edx
c000ffde:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffe4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffe8:	0f b7 d2             	movzx  edx,dx
c000ffeb:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000fff0:	39 0d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ecx
c000fff6:	75 14                	jne    c001000c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fff8:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000fffe:	85 c0                	test   eax,eax
c0010000:	74 0a                	je     c001000c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010002:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010006:	83 c4 08             	add    esp,0x8
c0010009:	5b                   	pop    ebx
c001000a:	ff e0                	jmp    eax
c001000c:	83 c4 08             	add    esp,0x8
c001000f:	5b                   	pop    ebx
c0010010:	c3                   	ret    
c0010011:	90                   	nop

c0010012 <VgaText::getCursorX()>:
c0010012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010016:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001001c:	c3                   	ret    
c001001d:	90                   	nop

c001001e <VgaText::getCursorY()>:
c001001e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010022:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010028:	c3                   	ret    
c0010029:	90                   	nop

c001002a <VgaText::setCursor(int, int)>:
c001002a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001002e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010032:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010038:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001003c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010042:	e9 77 fd ff ff       	jmp    c000fdbe <VgaText::updateCursor()>
c0010047:	90                   	nop

c0010048 <VgaText::setCursorX(int)>:
c0010048:	83 ec 10             	sub    esp,0x10
c001004b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001004f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010059:	50                   	push   eax
c001005a:	e8 cb ff ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c001005f:	83 c4 1c             	add    esp,0x1c
c0010062:	c3                   	ret    
c0010063:	90                   	nop

c0010064 <VgaText::setCursorY(int)>:
c0010064:	83 ec 10             	sub    esp,0x10
c0010067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001006b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001006f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010075:	50                   	push   eax
c0010076:	e8 af ff ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c001007b:	83 c4 1c             	add    esp,0x1c
c001007e:	c3                   	ret    
c001007f:	90                   	nop

c0010080 <VgaText::incrementCursor(bool)>:
c0010080:	56                   	push   esi
c0010081:	53                   	push   ebx
c0010082:	51                   	push   ecx
c0010083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010087:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001008b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010091:	40                   	inc    eax
c0010092:	83 f8 50             	cmp    eax,0x50
c0010095:	74 08                	je     c001009f <VgaText::incrementCursor(bool)+0x1f>
c0010097:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001009d:	eb 33                	jmp    c00100d2 <VgaText::incrementCursor(bool)+0x52>
c001009f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00100a5:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00100af:	8d 50 01             	lea    edx,[eax+0x1]
c00100b2:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00100b8:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00100be:	75 12                	jne    c00100d2 <VgaText::incrementCursor(bool)+0x52>
c00100c0:	83 ec 0c             	sub    esp,0xc
c00100c3:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00100c9:	53                   	push   ebx
c00100ca:	e8 3d fe ff ff       	call   c000ff0c <VgaText::scrollScreen()>
c00100cf:	83 c4 10             	add    esp,0x10
c00100d2:	89 f0                	mov    eax,esi
c00100d4:	84 c0                	test   al,al
c00100d6:	74 0c                	je     c00100e4 <VgaText::incrementCursor(bool)+0x64>
c00100d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100dc:	5a                   	pop    edx
c00100dd:	5b                   	pop    ebx
c00100de:	5e                   	pop    esi
c00100df:	e9 da fc ff ff       	jmp    c000fdbe <VgaText::updateCursor()>
c00100e4:	58                   	pop    eax
c00100e5:	5b                   	pop    ebx
c00100e6:	5e                   	pop    esi
c00100e7:	c3                   	ret    

c00100e8 <VgaText::updateRAMUsageDisplay(int)>:
c00100e8:	53                   	push   ebx
c00100e9:	bb 0a 00 00 00       	mov    ebx,0xa
c00100ee:	6a 0f                	push   0xf
c00100f0:	6a 00                	push   0x0
c00100f2:	e8 03 fe ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c00100f7:	5a                   	pop    edx
c00100f8:	59                   	pop    ecx
c00100f9:	0f b6 c8             	movzx  ecx,al
c00100fc:	51                   	push   ecx
c00100fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010101:	99                   	cdq    
c0010102:	f7 fb                	idiv   ebx
c0010104:	89 d3                	mov    ebx,edx
c0010106:	83 c0 30             	add    eax,0x30
c0010109:	83 c3 30             	add    ebx,0x30
c001010c:	0f be c0             	movsx  eax,al
c001010f:	0f b6 db             	movzx  ebx,bl
c0010112:	50                   	push   eax
c0010113:	e8 88 fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010118:	5a                   	pop    edx
c0010119:	5a                   	pop    edx
c001011a:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c0010120:	51                   	push   ecx
c0010121:	53                   	push   ebx
c0010122:	e8 79 fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010127:	5b                   	pop    ebx
c0010128:	5a                   	pop    edx
c0010129:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c001012f:	51                   	push   ecx
c0010130:	6a 25                	push   0x25
c0010132:	e8 69 fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010137:	59                   	pop    ecx
c0010138:	5b                   	pop    ebx
c0010139:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c001013f:	5b                   	pop    ebx
c0010140:	c3                   	ret    
c0010141:	90                   	nop

c0010142 <VgaText::updateDiskUsage()>:
c0010142:	55                   	push   ebp
c0010143:	bd 10 27 00 00       	mov    ebp,0x2710
c0010148:	57                   	push   edi
c0010149:	56                   	push   esi
c001014a:	53                   	push   ebx
c001014b:	6a 0f                	push   0xf
c001014d:	6a 00                	push   0x0
c001014f:	e8 a6 fd ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c0010154:	5a                   	pop    edx
c0010155:	0f b6 d8             	movzx  ebx,al
c0010158:	59                   	pop    ecx
c0010159:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c001015e:	53                   	push   ebx
c001015f:	b9 0a 00 00 00       	mov    ecx,0xa
c0010164:	99                   	cdq    
c0010165:	f7 fd                	idiv   ebp
c0010167:	99                   	cdq    
c0010168:	f7 f9                	idiv   ecx
c001016a:	8d 42 30             	lea    eax,[edx+0x30]
c001016d:	0f b6 c0             	movzx  eax,al
c0010170:	50                   	push   eax
c0010171:	e8 2a fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010176:	5e                   	pop    esi
c0010177:	5f                   	pop    edi
c0010178:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001017e:	bf e8 03 00 00       	mov    edi,0x3e8
c0010183:	53                   	push   ebx
c0010184:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c0010189:	99                   	cdq    
c001018a:	f7 ff                	idiv   edi
c001018c:	99                   	cdq    
c001018d:	f7 f9                	idiv   ecx
c001018f:	8d 42 30             	lea    eax,[edx+0x30]
c0010192:	0f b6 c0             	movzx  eax,al
c0010195:	50                   	push   eax
c0010196:	e8 05 fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001019b:	5a                   	pop    edx
c001019c:	5e                   	pop    esi
c001019d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c00101a3:	be 64 00 00 00       	mov    esi,0x64
c00101a8:	53                   	push   ebx
c00101a9:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101ae:	99                   	cdq    
c00101af:	f7 fe                	idiv   esi
c00101b1:	99                   	cdq    
c00101b2:	f7 f9                	idiv   ecx
c00101b4:	8d 42 30             	lea    eax,[edx+0x30]
c00101b7:	0f b6 c0             	movzx  eax,al
c00101ba:	50                   	push   eax
c00101bb:	e8 e0 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c00101c0:	5a                   	pop    edx
c00101c1:	5a                   	pop    edx
c00101c2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00101c8:	53                   	push   ebx
c00101c9:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101ce:	99                   	cdq    
c00101cf:	f7 f9                	idiv   ecx
c00101d1:	99                   	cdq    
c00101d2:	f7 f9                	idiv   ecx
c00101d4:	8d 42 30             	lea    eax,[edx+0x30]
c00101d7:	0f b6 c0             	movzx  eax,al
c00101da:	50                   	push   eax
c00101db:	e8 c0 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c00101e0:	5a                   	pop    edx
c00101e1:	5a                   	pop    edx
c00101e2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101e8:	53                   	push   ebx
c00101e9:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101ee:	99                   	cdq    
c00101ef:	f7 f9                	idiv   ecx
c00101f1:	8d 42 30             	lea    eax,[edx+0x30]
c00101f4:	0f b6 c0             	movzx  eax,al
c00101f7:	50                   	push   eax
c00101f8:	e8 a3 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c00101fd:	5a                   	pop    edx
c00101fe:	5a                   	pop    edx
c00101ff:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c0010205:	53                   	push   ebx
c0010206:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001020b:	99                   	cdq    
c001020c:	f7 fd                	idiv   ebp
c001020e:	99                   	cdq    
c001020f:	f7 f9                	idiv   ecx
c0010211:	8d 42 30             	lea    eax,[edx+0x30]
c0010214:	0f b6 c0             	movzx  eax,al
c0010217:	50                   	push   eax
c0010218:	e8 83 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001021d:	5d                   	pop    ebp
c001021e:	5a                   	pop    edx
c001021f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010225:	53                   	push   ebx
c0010226:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001022b:	99                   	cdq    
c001022c:	f7 ff                	idiv   edi
c001022e:	99                   	cdq    
c001022f:	f7 f9                	idiv   ecx
c0010231:	8d 42 30             	lea    eax,[edx+0x30]
c0010234:	0f b6 c0             	movzx  eax,al
c0010237:	50                   	push   eax
c0010238:	e8 63 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001023d:	5f                   	pop    edi
c001023e:	5d                   	pop    ebp
c001023f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c0010245:	53                   	push   ebx
c0010246:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001024b:	99                   	cdq    
c001024c:	f7 fe                	idiv   esi
c001024e:	99                   	cdq    
c001024f:	f7 f9                	idiv   ecx
c0010251:	8d 42 30             	lea    eax,[edx+0x30]
c0010254:	0f b6 c0             	movzx  eax,al
c0010257:	50                   	push   eax
c0010258:	e8 43 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001025d:	5a                   	pop    edx
c001025e:	5e                   	pop    esi
c001025f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010265:	53                   	push   ebx
c0010266:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001026b:	99                   	cdq    
c001026c:	f7 f9                	idiv   ecx
c001026e:	99                   	cdq    
c001026f:	f7 f9                	idiv   ecx
c0010271:	8d 42 30             	lea    eax,[edx+0x30]
c0010274:	0f b6 c0             	movzx  eax,al
c0010277:	50                   	push   eax
c0010278:	e8 23 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001027d:	5f                   	pop    edi
c001027e:	5d                   	pop    ebp
c001027f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010285:	53                   	push   ebx
c0010286:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001028b:	99                   	cdq    
c001028c:	f7 f9                	idiv   ecx
c001028e:	83 c2 30             	add    edx,0x30
c0010291:	0f b6 d2             	movzx  edx,dl
c0010294:	52                   	push   edx
c0010295:	e8 06 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001029a:	5a                   	pop    edx
c001029b:	59                   	pop    ecx
c001029c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c00102a2:	5b                   	pop    ebx
c00102a3:	5e                   	pop    esi
c00102a4:	5f                   	pop    edi
c00102a5:	5d                   	pop    ebp
c00102a6:	c3                   	ret    
c00102a7:	90                   	nop

c00102a8 <VgaText::updateTitle()>:
c00102a8:	53                   	push   ebx
c00102a9:	31 c0                	xor    eax,eax
c00102ab:	83 ec 58             	sub    esp,0x58
c00102ae:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00102b2:	89 e1                	mov    ecx,esp
c00102b4:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00102b8:	40                   	inc    eax
c00102b9:	83 f8 50             	cmp    eax,0x50
c00102bc:	75 f6                	jne    c00102b4 <VgaText::updateTitle()+0xc>
c00102be:	31 c0                	xor    eax,eax
c00102c0:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00102c7:	84 db                	test   bl,bl
c00102c9:	74 06                	je     c00102d1 <VgaText::updateTitle()+0x29>
c00102cb:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102ce:	40                   	inc    eax
c00102cf:	eb ef                	jmp    c00102c0 <VgaText::updateTitle()+0x18>
c00102d1:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00102d7:	85 c0                	test   eax,eax
c00102d9:	74 09                	je     c00102e4 <VgaText::updateTitle()+0x3c>
c00102db:	53                   	push   ebx
c00102dc:	53                   	push   ebx
c00102dd:	51                   	push   ecx
c00102de:	52                   	push   edx
c00102df:	ff d0                	call   eax
c00102e1:	83 c4 10             	add    esp,0x10
c00102e4:	e8 59 fe ff ff       	call   c0010142 <VgaText::updateDiskUsage()>
c00102e9:	83 c4 58             	add    esp,0x58
c00102ec:	5b                   	pop    ebx
c00102ed:	c3                   	ret    

c00102ee <VgaText::setTitleTextColour(VgaColour)>:
c00102ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102f6:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102fc:	eb aa                	jmp    c00102a8 <VgaText::updateTitle()>

c00102fe <VgaText::setTitleColour(VgaColour)>:
c00102fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010302:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010306:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001030c:	eb 9a                	jmp    c00102a8 <VgaText::updateTitle()>

c001030e <VgaText::setTitle(char*)>:
c001030e:	53                   	push   ebx
c001030f:	83 ec 10             	sub    esp,0x10
c0010312:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031a:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010320:	50                   	push   eax
c0010321:	e8 65 04 ff ff       	call   c000078b <strcpy>
c0010326:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001032a:	83 c4 18             	add    esp,0x18
c001032d:	5b                   	pop    ebx
c001032e:	e9 75 ff ff ff       	jmp    c00102a8 <VgaText::updateTitle()>
c0010333:	90                   	nop

c0010334 <VgaText::decrementCursor(bool)>:
c0010334:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010338:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001033c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010342:	85 c0                	test   eax,eax
c0010344:	74 07                	je     c001034d <VgaText::decrementCursor(bool)+0x19>
c0010346:	48                   	dec    eax
c0010347:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001034d:	84 c9                	test   cl,cl
c001034f:	74 09                	je     c001035a <VgaText::decrementCursor(bool)+0x26>
c0010351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010355:	e9 64 fa ff ff       	jmp    c000fdbe <VgaText::updateCursor()>
c001035a:	c3                   	ret    
c001035b:	90                   	nop

c001035c <VgaText::putchar(char, VgaColour, VgaColour)>:
c001035c:	53                   	push   ebx
c001035d:	83 ec 08             	sub    esp,0x8
c0010360:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010364:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010368:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001036c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010370:	3c 07                	cmp    al,0x7
c0010372:	75 2a                	jne    c001039e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010374:	a1 6c a5 02 c0       	mov    eax,ds:0xc002a56c
c0010379:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010381:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010389:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010391:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010395:	83 c4 08             	add    esp,0x8
c0010398:	5b                   	pop    ebx
c0010399:	e9 a4 2c 00 00       	jmp    c0013042 <Buzzer::beep(int, int, bool)>
c001039e:	3c 0d                	cmp    al,0xd
c00103a0:	75 0c                	jne    c00103ae <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00103a2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103ac:	eb 3b                	jmp    c00103e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00103ae:	3c 0a                	cmp    al,0xa
c00103b0:	75 40                	jne    c00103f2 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00103b2:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00103b8:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103c2:	8d 50 01             	lea    edx,[eax+0x1]
c00103c5:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103cb:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103d1:	75 12                	jne    c00103e5 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00103d3:	83 ec 0c             	sub    esp,0xc
c00103d6:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103dc:	53                   	push   ebx
c00103dd:	e8 2a fb ff ff       	call   c000ff0c <VgaText::scrollScreen()>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103e9:	83 c4 08             	add    esp,0x8
c00103ec:	5b                   	pop    ebx
c00103ed:	e9 cc f9 ff ff       	jmp    c000fdbe <VgaText::updateCursor()>
c00103f2:	3c 08                	cmp    al,0x8
c00103f4:	75 31                	jne    c0010427 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103f6:	50                   	push   eax
c00103f7:	50                   	push   eax
c00103f8:	6a 01                	push   0x1
c00103fa:	53                   	push   ebx
c00103fb:	e8 34 ff ff ff       	call   c0010334 <VgaText::decrementCursor(bool)>
c0010400:	5a                   	pop    edx
c0010401:	59                   	pop    ecx
c0010402:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010408:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001040e:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010414:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001041a:	6a 20                	push   0x20
c001041c:	53                   	push   ebx
c001041d:	e8 90 fb ff ff       	call   c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010422:	83 c4 28             	add    esp,0x28
c0010425:	5b                   	pop    ebx
c0010426:	c3                   	ret    
c0010427:	83 ec 08             	sub    esp,0x8
c001042a:	0f be c0             	movsx  eax,al
c001042d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010433:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010439:	51                   	push   ecx
c001043a:	52                   	push   edx
c001043b:	50                   	push   eax
c001043c:	53                   	push   ebx
c001043d:	e8 70 fb ff ff       	call   c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010442:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010446:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001044e:	83 c4 28             	add    esp,0x28
c0010451:	5b                   	pop    ebx
c0010452:	e9 29 fc ff ff       	jmp    c0010080 <VgaText::incrementCursor(bool)>
c0010457:	90                   	nop

c0010458 <VgaText::isShowingCursor()>:
c0010458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001045c:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010462:	c3                   	ret    
c0010463:	90                   	nop

c0010464 <VgaText::isBlinkDisabled()>:
c0010464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010468:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001046e:	83 f0 01             	xor    eax,0x1
c0010471:	c3                   	ret    

c0010472 <VgaText::setCursorHeight(int)>:
c0010472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010476:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001047a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010480:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010487:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001048b:	e9 48 f9 ff ff       	jmp    c000fdd8 <VgaText::showCursor(bool)>

c0010490 <VgaText::getCursorHeight()>:
c0010490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010494:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001049a:	c3                   	ret    

c001049b <setActiveTerminal(VgaText*)>:
c001049b:	53                   	push   ebx
c001049c:	83 ec 08             	sub    esp,0x8
c001049f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104a3:	85 db                	test   ebx,ebx
c00104a5:	75 11                	jne    c00104b8 <setActiveTerminal(VgaText*)+0x1d>
c00104a7:	c7 44 24 10 8c 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026c8c
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 3b 85 00 00       	jmp    c00189f3 <Krnl::panic(char const*)>
c00104b8:	50                   	push   eax
c00104b9:	50                   	push   eax
c00104ba:	53                   	push   ebx
c00104bb:	68 9a 6c 02 c0       	push   0xc0026c9a
c00104c0:	e8 92 1d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00104c5:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c00104ca:	83 c4 10             	add    esp,0x10
c00104cd:	85 c0                	test   eax,eax
c00104cf:	74 0c                	je     c00104dd <setActiveTerminal(VgaText*)+0x42>
c00104d1:	83 ec 0c             	sub    esp,0xc
c00104d4:	50                   	push   eax
c00104d5:	e8 e4 f8 ff ff       	call   c000fdbe <VgaText::updateCursor()>
c00104da:	83 c4 10             	add    esp,0x10
c00104dd:	89 1d c4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4c4,ebx
c00104e3:	51                   	push   ecx
c00104e4:	51                   	push   ecx
c00104e5:	53                   	push   ebx
c00104e6:	68 b2 6c 02 c0       	push   0xc0026cb2
c00104eb:	e8 67 1d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00104f0:	83 c4 0c             	add    esp,0xc
c00104f3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104f9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104ff:	53                   	push   ebx
c0010500:	e8 25 fb ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c0010505:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010508:	e8 57 ff ff ff       	call   c0010464 <VgaText::isBlinkDisabled()>
c001050d:	5a                   	pop    edx
c001050e:	0f b6 c0             	movzx  eax,al
c0010511:	59                   	pop    ecx
c0010512:	50                   	push   eax
c0010513:	53                   	push   ebx
c0010514:	e8 cf f8 ff ff       	call   c000fde8 <VgaText::disableBlink(bool)>
c0010519:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001051c:	e8 6f ff ff ff       	call   c0010490 <VgaText::getCursorHeight()>
c0010521:	5a                   	pop    edx
c0010522:	59                   	pop    ecx
c0010523:	50                   	push   eax
c0010524:	53                   	push   ebx
c0010525:	e8 48 ff ff ff       	call   c0010472 <VgaText::setCursorHeight(int)>
c001052a:	83 c4 10             	add    esp,0x10
c001052d:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010534:	75 0a                	jne    c0010540 <setActiveTerminal(VgaText*)+0xa5>
c0010536:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010540:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010544:	83 c4 08             	add    esp,0x8
c0010547:	5b                   	pop    ebx
c0010548:	e9 1d f8 ff ff       	jmp    c000fd6a <VgaText::load()>

c001054d <doTerminalCycle()>:
c001054d:	83 ec 18             	sub    esp,0x18
c0010550:	a1 c0 a4 02 c0       	mov    eax,ds:0xc002a4c0
c0010555:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001055b:	50                   	push   eax
c001055c:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c0010561:	e8 35 ff ff ff       	call   c001049b <setActiveTerminal(VgaText*)>
c0010566:	83 c4 1c             	add    esp,0x1c
c0010569:	c3                   	ret    

c001056a <VgaText::doUpdate()>:
c001056a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001056e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010574:	85 c0                	test   eax,eax
c0010576:	74 02                	je     c001057a <VgaText::doUpdate()+0x10>
c0010578:	ff e0                	jmp    eax
c001057a:	c3                   	ret    
c001057b:	90                   	nop

c001057c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001057c:	55                   	push   ebp
c001057d:	57                   	push   edi
c001057e:	56                   	push   esi
c001057f:	53                   	push   ebx
c0010580:	83 ec 1c             	sub    esp,0x1c
c0010583:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010587:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001058c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010593:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010596:	50                   	push   eax
c0010597:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001059c:	50                   	push   eax
c001059d:	e8 58 f9 ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c00105a2:	59                   	pop    ecx
c00105a3:	0f b6 c0             	movzx  eax,al
c00105a6:	5b                   	pop    ebx
c00105a7:	31 c9                	xor    ecx,ecx
c00105a9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00105b5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105bf:	0f b7 db             	movzx  ebx,bx
c00105c2:	01 db                	add    ebx,ebx
c00105c4:	01 fb                	add    ebx,edi
c00105c6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00105c9:	84 c0                	test   al,al
c00105cb:	0f 84 38 01 00 00    	je     c0010709 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00105d1:	3c 0d                	cmp    al,0xd
c00105d3:	75 0f                	jne    c00105e4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00105d5:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105df:	e9 1f 01 00 00       	jmp    c0010703 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105e4:	3c 0a                	cmp    al,0xa
c00105e6:	75 5b                	jne    c0010643 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105e8:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105ee:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105f8:	8d 48 01             	lea    ecx,[eax+0x1]
c00105fb:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010601:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010607:	75 12                	jne    c001061b <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010612:	55                   	push   ebp
c0010613:	e8 f4 f8 ff ff       	call   c000ff0c <VgaText::scrollScreen()>
c0010618:	83 c4 10             	add    esp,0x10
c001061b:	83 ec 0c             	sub    esp,0xc
c001061e:	55                   	push   ebp
c001061f:	e8 9a f7 ff ff       	call   c000fdbe <VgaText::updateCursor()>
c0010624:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001062c:	83 c4 10             	add    esp,0x10
c001062f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010635:	31 c9                	xor    ecx,ecx
c0010637:	0f b7 db             	movzx  ebx,bx
c001063a:	01 db                	add    ebx,ebx
c001063c:	01 fb                	add    ebx,edi
c001063e:	e9 c0 00 00 00       	jmp    c0010703 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010643:	3c 08                	cmp    al,0x8
c0010645:	75 4e                	jne    c0010695 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010647:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001064b:	53                   	push   ebx
c001064c:	53                   	push   ebx
c001064d:	6a 01                	push   0x1
c001064f:	55                   	push   ebp
c0010650:	e8 df fc ff ff       	call   c0010334 <VgaText::decrementCursor(bool)>
c0010655:	58                   	pop    eax
c0010656:	5a                   	pop    edx
c0010657:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001065d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010663:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010669:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c001066f:	6a 20                	push   0x20
c0010671:	55                   	push   ebp
c0010672:	e8 3b f9 ff ff       	call   c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010677:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001067f:	83 c4 20             	add    esp,0x20
c0010682:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010688:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001068c:	0f b7 db             	movzx  ebx,bx
c001068f:	01 db                	add    ebx,ebx
c0010691:	01 fb                	add    ebx,edi
c0010693:	eb 6e                	jmp    c0010703 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010695:	51                   	push   ecx
c0010696:	51                   	push   ecx
c0010697:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001069b:	50                   	push   eax
c001069c:	e8 ff f8 ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c00106a1:	83 c4 10             	add    esp,0x10
c00106a4:	66 89 03             	mov    WORD PTR [ebx],ax
c00106a7:	39 2d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebp
c00106ad:	75 2a                	jne    c00106d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106af:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c00106b5:	85 c0                	test   eax,eax
c00106b7:	74 20                	je     c00106d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106b9:	52                   	push   edx
c00106ba:	52                   	push   edx
c00106bb:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00106c1:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00106c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106cf:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00106d2:	51                   	push   ecx
c00106d3:	55                   	push   ebp
c00106d4:	ff d0                	call   eax
c00106d6:	83 c4 20             	add    esp,0x20
c00106d9:	83 c3 02             	add    ebx,0x2
c00106dc:	50                   	push   eax
c00106dd:	50                   	push   eax
c00106de:	6a 00                	push   0x0
c00106e0:	55                   	push   ebp
c00106e1:	e8 9a f9 ff ff       	call   c0010080 <VgaText::incrementCursor(bool)>
c00106e6:	83 c4 10             	add    esp,0x10
c00106e9:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106f0:	75 0f                	jne    c0010701 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106f2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106fa:	0f b7 db             	movzx  ebx,bx
c00106fd:	01 db                	add    ebx,ebx
c00106ff:	01 fb                	add    ebx,edi
c0010701:	b1 01                	mov    cl,0x1
c0010703:	46                   	inc    esi
c0010704:	e9 bd fe ff ff       	jmp    c00105c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010709:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001070d:	83 ec 0c             	sub    esp,0xc
c0010710:	55                   	push   ebp
c0010711:	e8 a8 f6 ff ff       	call   c000fdbe <VgaText::updateCursor()>
c0010716:	83 c4 10             	add    esp,0x10
c0010719:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001071d:	84 c9                	test   cl,cl
c001071f:	74 0c                	je     c001072d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010721:	83 ec 0c             	sub    esp,0xc
c0010724:	55                   	push   ebp
c0010725:	e8 40 fe ff ff       	call   c001056a <VgaText::doUpdate()>
c001072a:	83 c4 10             	add    esp,0x10
c001072d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010734:	83 c4 1c             	add    esp,0x1c
c0010737:	5b                   	pop    ebx
c0010738:	5e                   	pop    esi
c0010739:	5f                   	pop    edi
c001073a:	5d                   	pop    ebp
c001073b:	c3                   	ret    

c001073c <VgaText::clearScreen()>:
c001073c:	57                   	push   edi
c001073d:	56                   	push   esi
c001073e:	31 f6                	xor    esi,esi
c0010740:	53                   	push   ebx
c0010741:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010745:	52                   	push   edx
c0010746:	6a 00                	push   0x0
c0010748:	6a 00                	push   0x0
c001074a:	53                   	push   ebx
c001074b:	e8 da f8 ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c0010750:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010757:	83 c4 10             	add    esp,0x10
c001075a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010760:	7e 26                	jle    c0010788 <VgaText::clearScreen()+0x4c>
c0010762:	31 ff                	xor    edi,edi
c0010764:	50                   	push   eax
c0010765:	50                   	push   eax
c0010766:	56                   	push   esi
c0010767:	57                   	push   edi
c0010768:	47                   	inc    edi
c0010769:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001076f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010775:	6a 20                	push   0x20
c0010777:	53                   	push   ebx
c0010778:	e8 35 f8 ff ff       	call   c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001077d:	83 c4 20             	add    esp,0x20
c0010780:	83 ff 50             	cmp    edi,0x50
c0010783:	75 df                	jne    c0010764 <VgaText::clearScreen()+0x28>
c0010785:	46                   	inc    esi
c0010786:	eb d2                	jmp    c001075a <VgaText::clearScreen()+0x1e>
c0010788:	83 ec 0c             	sub    esp,0xc
c001078b:	53                   	push   ebx
c001078c:	e8 d9 fd ff ff       	call   c001056a <VgaText::doUpdate()>
c0010791:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010798:	83 c4 10             	add    esp,0x10
c001079b:	5b                   	pop    ebx
c001079c:	5e                   	pop    esi
c001079d:	5f                   	pop    edi
c001079e:	c3                   	ret    
c001079f:	90                   	nop

c00107a0 <VgaText::putchar(char)>:
c00107a0:	56                   	push   esi
c00107a1:	53                   	push   ebx
c00107a2:	83 ec 14             	sub    esp,0x14
c00107a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00107a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107ad:	3c 5b                	cmp    al,0x5b
c00107af:	75 21                	jne    c00107d2 <VgaText::putchar(char)+0x32>
c00107b1:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00107b8:	74 28                	je     c00107e2 <VgaText::putchar(char)+0x42>
c00107ba:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00107c3:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00107cd:	e9 e2 00 00 00       	jmp    c00108b4 <VgaText::putchar(char)+0x114>
c00107d2:	3c 1b                	cmp    al,0x1b
c00107d4:	75 0c                	jne    c00107e2 <VgaText::putchar(char)+0x42>
c00107d6:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107dd:	e9 d2 00 00 00       	jmp    c00108b4 <VgaText::putchar(char)+0x114>
c00107e2:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107e8:	84 c9                	test   cl,cl
c00107ea:	0f 84 ab 00 00 00    	je     c001089b <VgaText::putchar(char)+0xfb>
c00107f0:	8d 50 c0             	lea    edx,[eax-0x40]
c00107f3:	80 fa 3e             	cmp    dl,0x3e
c00107f6:	0f 87 82 00 00 00    	ja     c001087e <VgaText::putchar(char)+0xde>
c00107fc:	3c 6d                	cmp    al,0x6d
c00107fe:	75 4d                	jne    c001084d <VgaText::putchar(char)+0xad>
c0010800:	31 f6                	xor    esi,esi
c0010802:	31 d2                	xor    edx,edx
c0010804:	31 c0                	xor    eax,eax
c0010806:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001080c:	7e 30                	jle    c001083e <VgaText::putchar(char)+0x9e>
c001080e:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010816:	80 fa 3b             	cmp    dl,0x3b
c0010819:	75 17                	jne    c0010832 <VgaText::putchar(char)+0x92>
c001081b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001081f:	50                   	push   eax
c0010820:	53                   	push   ebx
c0010821:	e8 fc f5 ff ff       	call   c000fe22 <VgaText::doANSI_SGR(int)>
c0010826:	59                   	pop    ecx
c0010827:	31 d2                	xor    edx,edx
c0010829:	58                   	pop    eax
c001082a:	31 c0                	xor    eax,eax
c001082c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010830:	eb 09                	jmp    c001083b <VgaText::putchar(char)+0x9b>
c0010832:	6b c0 0a             	imul   eax,eax,0xa
c0010835:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010839:	88 ca                	mov    dl,cl
c001083b:	46                   	inc    esi
c001083c:	eb c8                	jmp    c0010806 <VgaText::putchar(char)+0x66>
c001083e:	84 d2                	test   dl,dl
c0010840:	74 31                	je     c0010873 <VgaText::putchar(char)+0xd3>
c0010842:	50                   	push   eax
c0010843:	53                   	push   ebx
c0010844:	e8 d9 f5 ff ff       	call   c000fe22 <VgaText::doANSI_SGR(int)>
c0010849:	58                   	pop    eax
c001084a:	5a                   	pop    edx
c001084b:	eb 26                	jmp    c0010873 <VgaText::putchar(char)+0xd3>
c001084d:	3c 4a                	cmp    al,0x4a
c001084f:	75 22                	jne    c0010873 <VgaText::putchar(char)+0xd3>
c0010851:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010858:	75 19                	jne    c0010873 <VgaText::putchar(char)+0xd3>
c001085a:	83 ec 0c             	sub    esp,0xc
c001085d:	53                   	push   ebx
c001085e:	e8 d9 fe ff ff       	call   c001073c <VgaText::clearScreen()>
c0010863:	83 c4 0c             	add    esp,0xc
c0010866:	6a 00                	push   0x0
c0010868:	6a 00                	push   0x0
c001086a:	53                   	push   ebx
c001086b:	e8 ba f7 ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c0010870:	83 c4 10             	add    esp,0x10
c0010873:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001087c:	eb 36                	jmp    c00108b4 <VgaText::putchar(char)+0x114>
c001087e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010884:	83 fa 0e             	cmp    edx,0xe
c0010887:	7f 2b                	jg     c00108b4 <VgaText::putchar(char)+0x114>
c0010889:	8d 4a 01             	lea    ecx,[edx+0x1]
c001088c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010892:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010899:	eb 19                	jmp    c00108b4 <VgaText::putchar(char)+0x114>
c001089b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108a1:	0f be c0             	movsx  eax,al
c00108a4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108aa:	50                   	push   eax
c00108ab:	53                   	push   ebx
c00108ac:	e8 ab fa ff ff       	call   c001035c <VgaText::putchar(char, VgaColour, VgaColour)>
c00108b1:	83 c4 10             	add    esp,0x10
c00108b4:	83 c4 14             	add    esp,0x14
c00108b7:	5b                   	pop    ebx
c00108b8:	5e                   	pop    esi
c00108b9:	c3                   	ret    

c00108ba <VgaText::puts(char const*)>:
c00108ba:	53                   	push   ebx
c00108bb:	83 ec 08             	sub    esp,0x8
c00108be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00108c5:	84 c0                	test   al,al
c00108c7:	74 12                	je     c00108db <VgaText::puts(char const*)+0x21>
c00108c9:	43                   	inc    ebx
c00108ca:	51                   	push   ecx
c00108cb:	51                   	push   ecx
c00108cc:	50                   	push   eax
c00108cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d1:	e8 ca fe ff ff       	call   c00107a0 <VgaText::putchar(char)>
c00108d6:	83 c4 10             	add    esp,0x10
c00108d9:	eb e7                	jmp    c00108c2 <VgaText::puts(char const*)+0x8>
c00108db:	83 c4 08             	add    esp,0x8
c00108de:	5b                   	pop    ebx
c00108df:	c3                   	ret    

c00108e0 <VgaText::putx(unsigned int)>:
c00108e0:	57                   	push   edi
c00108e1:	b9 11 00 00 00       	mov    ecx,0x11
c00108e6:	56                   	push   esi
c00108e7:	be ce 6c 02 c0       	mov    esi,0xc0026cce
c00108ec:	53                   	push   ebx
c00108ed:	83 ec 20             	sub    esp,0x20
c00108f0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108f4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108f8:	fc                   	cld    
c00108f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108fb:	be 08 00 00 00       	mov    esi,0x8
c0010900:	50                   	push   eax
c0010901:	50                   	push   eax
c0010902:	89 d8                	mov    eax,ebx
c0010904:	c1 e3 04             	shl    ebx,0x4
c0010907:	c1 e8 1c             	shr    eax,0x1c
c001090a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001090f:	50                   	push   eax
c0010910:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010914:	e8 87 fe ff ff       	call   c00107a0 <VgaText::putchar(char)>
c0010919:	83 c4 10             	add    esp,0x10
c001091c:	4e                   	dec    esi
c001091d:	75 e1                	jne    c0010900 <VgaText::putx(unsigned int)+0x20>
c001091f:	83 c4 20             	add    esp,0x20
c0010922:	5b                   	pop    ebx
c0010923:	5e                   	pop    esi
c0010924:	5f                   	pop    edi
c0010925:	c3                   	ret    

c0010926 <VgaText::VgaText(char const*)>:
c0010926:	57                   	push   edi
c0010927:	56                   	push   esi
c0010928:	53                   	push   ebx
c0010929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092d:	83 ec 08             	sub    esp,0x8
c0010930:	6a 00                	push   0x0
c0010932:	50                   	push   eax
c0010933:	e8 4a 05 00 00       	call   c0010e82 <UnixFile::UnixFile(int)>
c0010938:	83 c4 10             	add    esp,0x10
c001093b:	ba 34 6d 02 c0       	mov    edx,0xc0026d34
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	89 10                	mov    DWORD PTR [eax],edx
c0010946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010958:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010966:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001096d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010971:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010998:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001099f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a3:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00109aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ae:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00109b4:	bb a0 a4 02 c0       	mov    ebx,0xc002a4a0
c00109b9:	b8 08 00 00 00       	mov    eax,0x8
c00109be:	fc                   	cld    
c00109bf:	89 d7                	mov    edi,edx
c00109c1:	89 de                	mov    esi,ebx
c00109c3:	89 c1                	mov    ecx,eax
c00109c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00109c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cb:	05 1e 10 00 00       	add    eax,0x101e
c00109d0:	83 ec 08             	sub    esp,0x8
c00109d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d7:	50                   	push   eax
c00109d8:	e8 ae fd fe ff       	call   c000078b <strcpy>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e4:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f2:	83 c0 0c             	add    eax,0xc
c00109f5:	83 ec 04             	sub    esp,0x4
c00109f8:	68 00 0f 00 00       	push   0xf00
c00109fd:	6a 00                	push   0x0
c00109ff:	50                   	push   eax
c0010a00:	e8 e7 fc fe ff       	call   c00006ec <memset>
c0010a05:	83 c4 10             	add    esp,0x10
c0010a08:	83 ec 04             	sub    esp,0x4
c0010a0b:	6a 00                	push   0x0
c0010a0d:	6a 07                	push   0x7
c0010a0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a13:	e8 c2 f4 ff ff       	call   c000feda <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010a18:	83 c4 10             	add    esp,0x10
c0010a1b:	83 ec 08             	sub    esp,0x8
c0010a1e:	6a 02                	push   0x2
c0010a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a24:	e8 49 fa ff ff       	call   c0010472 <VgaText::setCursorHeight(int)>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	83 ec 04             	sub    esp,0x4
c0010a2f:	6a 00                	push   0x0
c0010a31:	6a 00                	push   0x0
c0010a33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a37:	e8 ee f5 ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c0010a3c:	83 c4 10             	add    esp,0x10
c0010a3f:	83 ec 08             	sub    esp,0x8
c0010a42:	6a 01                	push   0x1
c0010a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a48:	e8 8b f3 ff ff       	call   c000fdd8 <VgaText::showCursor(bool)>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	83 ec 08             	sub    esp,0x8
c0010a53:	6a 01                	push   0x1
c0010a55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a59:	e8 8a f3 ff ff       	call   c000fde8 <VgaText::disableBlink(bool)>
c0010a5e:	83 c4 10             	add    esp,0x10
c0010a61:	83 ec 0c             	sub    esp,0xc
c0010a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a68:	e8 cf fc ff ff       	call   c001073c <VgaText::clearScreen()>
c0010a6d:	83 c4 10             	add    esp,0x10
c0010a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a74:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7f:	05 9e 10 00 00       	add    eax,0x109e
c0010a84:	83 ec 04             	sub    esp,0x4
c0010a87:	68 96 00 00 00       	push   0x96
c0010a8c:	6a 00                	push   0x0
c0010a8e:	50                   	push   eax
c0010a8f:	e8 58 fc fe ff       	call   c00006ec <memset>
c0010a94:	83 c4 10             	add    esp,0x10
c0010a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9b:	05 34 11 00 00       	add    eax,0x1134
c0010aa0:	83 ec 04             	sub    esp,0x4
c0010aa3:	68 2c 01 00 00       	push   0x12c
c0010aa8:	6a 00                	push   0x0
c0010aaa:	50                   	push   eax
c0010aab:	e8 3c fc fe ff       	call   c00006ec <memset>
c0010ab0:	83 c4 10             	add    esp,0x10
c0010ab3:	90                   	nop
c0010ab4:	5b                   	pop    ebx
c0010ab5:	5e                   	pop    esi
c0010ab6:	5f                   	pop    edi
c0010ab7:	c3                   	ret    

c0010ab8 <VgaText::receiveKey(unsigned char)>:
c0010ab8:	55                   	push   ebp
c0010ab9:	57                   	push   edi
c0010aba:	56                   	push   esi
c0010abb:	53                   	push   ebx
c0010abc:	83 ec 1c             	sub    esp,0x1c
c0010abf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ac3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ac7:	84 db                	test   bl,bl
c0010ac9:	0f 84 c9 00 00 00    	je     c0010b98 <VgaText::receiveKey(unsigned char)+0xe0>
c0010acf:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010ad5:	80 fb 08             	cmp    bl,0x8
c0010ad8:	75 2c                	jne    c0010b06 <VgaText::receiveKey(unsigned char)+0x4e>
c0010ada:	83 ec 0c             	sub    esp,0xc
c0010add:	57                   	push   edi
c0010ade:	e8 26 fc fe ff       	call   c0000709 <strlen>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	85 c0                	test   eax,eax
c0010ae8:	74 41                	je     c0010b2b <VgaText::receiveKey(unsigned char)+0x73>
c0010aea:	50                   	push   eax
c0010aeb:	50                   	push   eax
c0010aec:	6a 08                	push   0x8
c0010aee:	56                   	push   esi
c0010aef:	e8 ac fc ff ff       	call   c00107a0 <VgaText::putchar(char)>
c0010af4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010af7:	e8 0d fc fe ff       	call   c0000709 <strlen>
c0010afc:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010b04:	eb 22                	jmp    c0010b28 <VgaText::receiveKey(unsigned char)+0x70>
c0010b06:	0f be c3             	movsx  eax,bl
c0010b09:	52                   	push   edx
c0010b0a:	52                   	push   edx
c0010b0b:	50                   	push   eax
c0010b0c:	56                   	push   esi
c0010b0d:	e8 8e fc ff ff       	call   c00107a0 <VgaText::putchar(char)>
c0010b12:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010b16:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010b1b:	59                   	pop    ecx
c0010b1c:	5d                   	pop    ebp
c0010b1d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010b21:	50                   	push   eax
c0010b22:	57                   	push   edi
c0010b23:	e8 1a fd fe ff       	call   c0000842 <strcat>
c0010b28:	83 c4 10             	add    esp,0x10
c0010b2b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010b32:	75 05                	jne    c0010b39 <VgaText::receiveKey(unsigned char)+0x81>
c0010b34:	80 fb 0a             	cmp    bl,0xa
c0010b37:	75 53                	jne    c0010b8c <VgaText::receiveKey(unsigned char)+0xd4>
c0010b39:	83 ec 0c             	sub    esp,0xc
c0010b3c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b42:	53                   	push   ebx
c0010b43:	e8 c1 fb fe ff       	call   c0000709 <strlen>
c0010b48:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b4b:	89 c5                	mov    ebp,eax
c0010b4d:	e8 b7 fb fe ff       	call   c0000709 <strlen>
c0010b52:	83 c4 10             	add    esp,0x10
c0010b55:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b59:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b5e:	76 10                	jbe    c0010b70 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b60:	83 ec 0c             	sub    esp,0xc
c0010b63:	68 df 6c 02 c0       	push   0xc0026cdf
c0010b68:	e8 86 7e 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	50                   	push   eax
c0010b71:	50                   	push   eax
c0010b72:	57                   	push   edi
c0010b73:	53                   	push   ebx
c0010b74:	e8 c9 fc fe ff       	call   c0000842 <strcat>
c0010b79:	83 c4 0c             	add    esp,0xc
c0010b7c:	68 96 00 00 00       	push   0x96
c0010b81:	6a 00                	push   0x0
c0010b83:	57                   	push   edi
c0010b84:	e8 63 fb fe ff       	call   c00006ec <memset>
c0010b89:	83 c4 10             	add    esp,0x10
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	56                   	push   esi
c0010b90:	e8 d5 f9 ff ff       	call   c001056a <VgaText::doUpdate()>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	83 c4 1c             	add    esp,0x1c
c0010b9b:	5b                   	pop    ebx
c0010b9c:	5e                   	pop    esi
c0010b9d:	5f                   	pop    edi
c0010b9e:	5d                   	pop    ebp
c0010b9f:	c3                   	ret    

c0010ba0 <VgaText::write(unsigned long long, void*, int*)>:
c0010ba0:	55                   	push   ebp
c0010ba1:	57                   	push   edi
c0010ba2:	56                   	push   esi
c0010ba3:	53                   	push   ebx
c0010ba4:	83 ec 0c             	sub    esp,0xc
c0010ba7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010bab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010baf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bb3:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010bba:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010bbd:	39 eb                	cmp    ebx,ebp
c0010bbf:	74 13                	je     c0010bd4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010bc1:	43                   	inc    ebx
c0010bc2:	50                   	push   eax
c0010bc3:	50                   	push   eax
c0010bc4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010bc8:	50                   	push   eax
c0010bc9:	56                   	push   esi
c0010bca:	e8 d1 fb ff ff       	call   c00107a0 <VgaText::putchar(char)>
c0010bcf:	83 c4 10             	add    esp,0x10
c0010bd2:	eb e9                	jmp    c0010bbd <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010bd4:	83 ec 0c             	sub    esp,0xc
c0010bd7:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010bde:	56                   	push   esi
c0010bdf:	e8 86 f9 ff ff       	call   c001056a <VgaText::doUpdate()>
c0010be4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010be8:	89 38                	mov    DWORD PTR [eax],edi
c0010bea:	83 c4 1c             	add    esp,0x1c
c0010bed:	31 c0                	xor    eax,eax
c0010bef:	5b                   	pop    ebx
c0010bf0:	5e                   	pop    esi
c0010bf1:	5f                   	pop    edi
c0010bf2:	5d                   	pop    ebp
c0010bf3:	c3                   	ret    

c0010bf4 <newTerminal(char*)>:
c0010bf4:	83 ec 28             	sub    esp,0x28
c0010bf7:	68 60 12 00 00       	push   0x1260
c0010bfc:	e8 67 15 00 00       	call   c0012168 <operator new(unsigned long)>
c0010c01:	5a                   	pop    edx
c0010c02:	59                   	pop    ecx
c0010c03:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010c07:	50                   	push   eax
c0010c08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c0c:	e8 15 fd ff ff       	call   c0010926 <VgaText::VgaText(char const*)>
c0010c11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010c15:	83 c4 2c             	add    esp,0x2c
c0010c18:	c3                   	ret    
c0010c19:	90                   	nop

c0010c1a <TSS::TSS()>:
c0010c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c25:	90                   	nop
c0010c26:	c3                   	ret    
c0010c27:	90                   	nop

c0010c28 <TSS::setESP(unsigned long)>:
c0010c28:	55                   	push   ebp
c0010c29:	89 e5                	mov    ebp,esp
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c37:	90                   	nop
c0010c38:	5d                   	pop    ebp
c0010c39:	c3                   	ret    

c0010c3a <TSS::flush()>:
c0010c3a:	55                   	push   ebp
c0010c3b:	89 e5                	mov    ebp,esp
c0010c3d:	83 ec 10             	sub    esp,0x10
c0010c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c45:	83 c8 03             	or     eax,0x3
c0010c48:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c4c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c50:	66 89 d0             	mov    ax,dx
c0010c53:	0f 00 d8             	ltr    ax
c0010c56:	90                   	nop
c0010c57:	c9                   	leave  
c0010c58:	c3                   	ret    
c0010c59:	90                   	nop

c0010c5a <TSS::setup(unsigned long, unsigned long)>:
c0010c5a:	55                   	push   ebp
c0010c5b:	89 e5                	mov    ebp,esp
c0010c5d:	53                   	push   ebx
c0010c5e:	83 ec 14             	sub    esp,0x14
c0010c61:	83 ec 0c             	sub    esp,0xc
c0010c64:	6a 68                	push   0x68
c0010c66:	e8 fb e4 ff ff       	call   c000f166 <malloc>
c0010c6b:	83 c4 10             	add    esp,0x10
c0010c6e:	89 c2                	mov    edx,eax
c0010c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7c:	83 ec 04             	sub    esp,0x4
c0010c7f:	6a 68                	push   0x68
c0010c81:	6a 00                	push   0x0
c0010c83:	50                   	push   eax
c0010c84:	e8 63 fa fe ff       	call   c00006ec <memset>
c0010c89:	83 c4 10             	add    esp,0x10
c0010c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c92:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c9e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010caa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010cbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ccb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cce:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cda:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ce9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010cec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cf5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cfe:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d08:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010d0b:	e8 65 43 01 00       	call   c0025075 <CPU::readCR3()>
c0010d10:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d19:	83 ec 08             	sub    esp,0x8
c0010d1c:	50                   	push   eax
c0010d1d:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d20:	50                   	push   eax
c0010d21:	e8 16 dc ff ff       	call   c000e93c <GDTEntry::setBase(unsigned int)>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	83 ec 08             	sub    esp,0x8
c0010d2c:	6a 68                	push   0x68
c0010d2e:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d31:	50                   	push   eax
c0010d32:	e8 21 dc ff ff       	call   c000e958 <GDTEntry::setLimit(unsigned int)>
c0010d37:	83 c4 10             	add    esp,0x10
c0010d3a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d3e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d41:	83 e0 0f             	and    eax,0xf
c0010d44:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d47:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d4a:	83 c8 40             	or     eax,0x40
c0010d4d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d50:	e8 1b 6b 00 00       	call   c0017870 <CPU::current()>
c0010d55:	05 78 01 00 00       	add    eax,0x178
c0010d5a:	83 ec 04             	sub    esp,0x4
c0010d5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d60:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d63:	50                   	push   eax
c0010d64:	e8 23 dc ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c0010d69:	83 c4 10             	add    esp,0x10
c0010d6c:	89 c2                	mov    edx,eax
c0010d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d71:	89 10                	mov    DWORD PTR [eax],edx
c0010d73:	e8 f8 6a 00 00       	call   c0017870 <CPU::current()>
c0010d78:	05 78 01 00 00       	add    eax,0x178
c0010d7d:	83 ec 0c             	sub    esp,0xc
c0010d80:	50                   	push   eax
c0010d81:	e8 4a dc ff ff       	call   c000e9d0 <GDT::flush()>
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d8e:	83 ec 08             	sub    esp,0x8
c0010d91:	50                   	push   eax
c0010d92:	68 48 6d 02 c0       	push   0xc0026d48
c0010d97:	e8 bb 14 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0010d9c:	83 c4 10             	add    esp,0x10
c0010d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010da2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010da4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010da7:	c9                   	leave  
c0010da8:	c3                   	ret    
c0010da9:	90                   	nop

c0010daa <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010daa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010db2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010db5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010dba:	75 08                	jne    c0010dc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010dbc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010dc2:	eb 38                	jmp    c0010dfc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010dc4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010dc9:	75 17                	jne    c0010de2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010dcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010dd3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ddf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010de2:	89 c1                	mov    ecx,eax
c0010de4:	83 e1 fd             	and    ecx,0xfffffffd
c0010de7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010ded:	74 cd                	je     c0010dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010def:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010df4:	83 e0 ef             	and    eax,0xffffffef
c0010df7:	83 f8 08             	cmp    eax,0x8
c0010dfa:	76 c0                	jbe    c0010dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010dfc:	31 c0                	xor    eax,eax
c0010dfe:	c3                   	ret    
c0010dff:	90                   	nop

c0010e00 <ReservedFilename::isAtty()>:
c0010e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e04:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e07:	31 c0                	xor    eax,eax
c0010e09:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010e0f:	74 09                	je     c0010e1a <ReservedFilename::isAtty()+0x1a>
c0010e11:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e17:	0f 94 c0             	sete   al
c0010e1a:	c3                   	ret    
c0010e1b:	90                   	nop

c0010e1c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e2b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e30:	75 08                	jne    c0010e3a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e32:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e38:	eb 3d                	jmp    c0010e77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e3a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e3f:	75 17                	jne    c0010e58 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e49:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e55:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e58:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e5d:	75 04                	jne    c0010e63 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e5f:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e61:	eb 14                	jmp    c0010e77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e63:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e68:	74 c8                	je     c0010e32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e6a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e6f:	83 e0 ef             	and    eax,0xffffffef
c0010e72:	83 f8 08             	cmp    eax,0x8
c0010e75:	76 bb                	jbe    c0010e32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e77:	31 c0                	xor    eax,eax
c0010e79:	c3                   	ret    

c0010e7a <UnixFile::getFileDescriptor()>:
c0010e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e81:	c3                   	ret    

c0010e82 <UnixFile::UnixFile(int)>:
c0010e82:	53                   	push   ebx
c0010e83:	83 ec 18             	sub    esp,0x18
c0010e86:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c0010e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e8f:	89 10                	mov    DWORD PTR [eax],edx
c0010e91:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e99:	0f 8f 4d 01 00 00    	jg     c0010fec <UnixFile::UnixFile(int)+0x16a>
c0010e9f:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c0010ea4:	8d 50 01             	lea    edx,[eax+0x1]
c0010ea7:	89 15 20 94 02 c0    	mov    DWORD PTR ds:0xc0029420,edx
c0010ead:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010eb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010eb4:	83 ec 08             	sub    esp,0x8
c0010eb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ebb:	68 58 a5 02 c0       	push   0xc002a558
c0010ec0:	e8 25 42 01 00       	call   c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	a0 54 a5 02 c0       	mov    al,ds:0xc002a554
c0010ecd:	83 f0 01             	xor    eax,0x1
c0010ed0:	84 c0                	test   al,al
c0010ed2:	0f 84 15 01 00 00    	je     c0010fed <UnixFile::UnixFile(int)+0x16b>
c0010ed8:	c6 05 54 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a554,0x1
c0010edf:	83 ec 0c             	sub    esp,0xc
c0010ee2:	6a 0c                	push   0xc
c0010ee4:	e8 7f 12 00 00       	call   c0012168 <operator new(unsigned long)>
c0010ee9:	83 c4 10             	add    esp,0x10
c0010eec:	89 c3                	mov    ebx,eax
c0010eee:	83 ec 08             	sub    esp,0x8
c0010ef1:	68 03 ff ff 0f       	push   0xfffff03
c0010ef6:	53                   	push   ebx
c0010ef7:	e8 f6 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	89 1d 4c a5 02 c0    	mov    DWORD PTR ds:0xc002a54c,ebx
c0010f05:	83 ec 0c             	sub    esp,0xc
c0010f08:	6a 0c                	push   0xc
c0010f0a:	e8 59 12 00 00       	call   c0012168 <operator new(unsigned long)>
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	89 c3                	mov    ebx,eax
c0010f14:	83 ec 08             	sub    esp,0x8
c0010f17:	68 01 ff ff 0f       	push   0xfffff01
c0010f1c:	53                   	push   ebx
c0010f1d:	e8 d0 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	89 1d 50 a5 02 c0    	mov    DWORD PTR ds:0xc002a550,ebx
c0010f2b:	83 ec 0c             	sub    esp,0xc
c0010f2e:	6a 0c                	push   0xc
c0010f30:	e8 33 12 00 00       	call   c0012168 <operator new(unsigned long)>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	89 c3                	mov    ebx,eax
c0010f3a:	83 ec 08             	sub    esp,0x8
c0010f3d:	68 00 ff ff 0f       	push   0xfffff00
c0010f42:	53                   	push   ebx
c0010f43:	e8 aa 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	89 1d 44 a5 02 c0    	mov    DWORD PTR ds:0xc002a544,ebx
c0010f51:	83 ec 0c             	sub    esp,0xc
c0010f54:	6a 0c                	push   0xc
c0010f56:	e8 0d 12 00 00       	call   c0012168 <operator new(unsigned long)>
c0010f5b:	83 c4 10             	add    esp,0x10
c0010f5e:	89 c3                	mov    ebx,eax
c0010f60:	83 ec 08             	sub    esp,0x8
c0010f63:	68 02 ff ff 0f       	push   0xfffff02
c0010f68:	53                   	push   ebx
c0010f69:	e8 84 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	89 1d 48 a5 02 c0    	mov    DWORD PTR ds:0xc002a548,ebx
c0010f77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f7f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f84:	7f 67                	jg     c0010fed <UnixFile::UnixFile(int)+0x16b>
c0010f86:	83 ec 0c             	sub    esp,0xc
c0010f89:	6a 0c                	push   0xc
c0010f8b:	e8 d8 11 00 00       	call   c0012168 <operator new(unsigned long)>
c0010f90:	83 c4 10             	add    esp,0x10
c0010f93:	89 c3                	mov    ebx,eax
c0010f95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f99:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f9e:	83 ec 08             	sub    esp,0x8
c0010fa1:	50                   	push   eax
c0010fa2:	53                   	push   ebx
c0010fa3:	e8 4a 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010fa8:	83 c4 10             	add    esp,0x10
c0010fab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010faf:	89 1c 85 20 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ae0],ebx
c0010fb6:	83 ec 0c             	sub    esp,0xc
c0010fb9:	6a 0c                	push   0xc
c0010fbb:	e8 a8 11 00 00       	call   c0012168 <operator new(unsigned long)>
c0010fc0:	83 c4 10             	add    esp,0x10
c0010fc3:	89 c3                	mov    ebx,eax
c0010fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc9:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fce:	83 ec 08             	sub    esp,0x8
c0010fd1:	50                   	push   eax
c0010fd2:	53                   	push   ebx
c0010fd3:	e8 1a 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010fd8:	83 c4 10             	add    esp,0x10
c0010fdb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fdf:	89 1c 85 e0 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5b20],ebx
c0010fe6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fea:	eb 93                	jmp    c0010f7f <UnixFile::UnixFile(int)+0xfd>
c0010fec:	90                   	nop
c0010fed:	83 c4 18             	add    esp,0x18
c0010ff0:	5b                   	pop    ebx
c0010ff1:	c3                   	ret    

c0010ff2 <ReservedFilename::ReservedFilename(int)>:
c0010ff2:	83 ec 0c             	sub    esp,0xc
c0010ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff9:	83 ec 08             	sub    esp,0x8
c0010ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011000:	50                   	push   eax
c0011001:	e8 7c fe ff ff       	call   c0010e82 <UnixFile::UnixFile(int)>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	89 10                	mov    DWORD PTR [eax],edx
c0011014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001101c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001101f:	90                   	nop
c0011020:	83 c4 0c             	add    esp,0xc
c0011023:	c3                   	ret    

c0011024 <UnixFile::~UnixFile()>:
c0011024:	83 ec 1c             	sub    esp,0x1c
c0011027:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c001102c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011030:	89 10                	mov    DWORD PTR [eax],edx
c0011032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001103e:	7f 73                	jg     c00110b3 <UnixFile::~UnixFile()+0x8f>
c0011040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	68 58 a5 02 c0       	push   0xc002a558
c0011050:	e8 69 41 01 00       	call   c00251be <LinkedList<UnixFile>::getFirstElement()>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001105c:	83 ec 0c             	sub    esp,0xc
c001105f:	68 58 a5 02 c0       	push   0xc002a558
c0011064:	e8 5d 41 01 00       	call   c00251c6 <LinkedList<UnixFile>::removeFirst()>
c0011069:	83 c4 10             	add    esp,0x10
c001106c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011074:	74 40                	je     c00110b6 <UnixFile::~UnixFile()+0x92>
c0011076:	83 ec 08             	sub    esp,0x8
c0011079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001107d:	68 58 a5 02 c0       	push   0xc002a558
c0011082:	e8 63 40 01 00       	call   c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011087:	83 c4 10             	add    esp,0x10
c001108a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001108e:	8d 50 01             	lea    edx,[eax+0x1]
c0011091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011095:	3d 88 13 00 00       	cmp    eax,0x1388
c001109a:	0f 94 c0             	sete   al
c001109d:	84 c0                	test   al,al
c001109f:	74 a7                	je     c0011048 <UnixFile::~UnixFile()+0x24>
c00110a1:	83 ec 0c             	sub    esp,0xc
c00110a4:	68 0c 6e 02 c0       	push   0xc0026e0c
c00110a9:	e8 45 79 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	eb 95                	jmp    c0011048 <UnixFile::~UnixFile()+0x24>
c00110b3:	90                   	nop
c00110b4:	eb 01                	jmp    c00110b7 <UnixFile::~UnixFile()+0x93>
c00110b6:	90                   	nop
c00110b7:	90                   	nop
c00110b8:	83 c4 1c             	add    esp,0x1c
c00110bb:	c3                   	ret    

c00110bc <UnixFile::~UnixFile()>:
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	83 ec 0c             	sub    esp,0xc
c00110c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c6:	e8 59 ff ff ff       	call   c0011024 <UnixFile::~UnixFile()>
c00110cb:	83 c4 10             	add    esp,0x10
c00110ce:	83 ec 08             	sub    esp,0x8
c00110d1:	6a 0c                	push   0xc
c00110d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110d7:	e8 9b 10 00 00       	call   c0012177 <operator delete(void*, unsigned long)>
c00110dc:	83 c4 10             	add    esp,0x10
c00110df:	83 c4 0c             	add    esp,0xc
c00110e2:	c3                   	ret    
c00110e3:	90                   	nop

c00110e4 <ReservedFilename::~ReservedFilename()>:
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c00110ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f0:	89 10                	mov    DWORD PTR [eax],edx
c00110f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f6:	83 ec 0c             	sub    esp,0xc
c00110f9:	50                   	push   eax
c00110fa:	e8 25 ff ff ff       	call   c0011024 <UnixFile::~UnixFile()>
c00110ff:	83 c4 10             	add    esp,0x10
c0011102:	90                   	nop
c0011103:	83 c4 0c             	add    esp,0xc
c0011106:	c3                   	ret    
c0011107:	90                   	nop

c0011108 <ReservedFilename::~ReservedFilename()>:
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	83 ec 0c             	sub    esp,0xc
c001110e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011112:	e8 cd ff ff ff       	call   c00110e4 <ReservedFilename::~ReservedFilename()>
c0011117:	83 c4 10             	add    esp,0x10
c001111a:	83 ec 08             	sub    esp,0x8
c001111d:	6a 0c                	push   0xc
c001111f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011123:	e8 4f 10 00 00       	call   c0012177 <operator delete(void*, unsigned long)>
c0011128:	83 c4 10             	add    esp,0x10
c001112b:	83 c4 0c             	add    esp,0xc
c001112e:	c3                   	ret    

c001112f <getFromFileDescriptor(int)>:
c001112f:	53                   	push   ebx
c0011130:	83 ec 08             	sub    esp,0x8
c0011133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001113d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011143:	7f 2c                	jg     c0011171 <getFromFileDescriptor(int)+0x42>
c0011145:	83 ec 0c             	sub    esp,0xc
c0011148:	68 58 a5 02 c0       	push   0xc002a558
c001114d:	e8 6c 40 01 00       	call   c00251be <LinkedList<UnixFile>::getFirstElement()>
c0011152:	83 c4 10             	add    esp,0x10
c0011155:	85 c0                	test   eax,eax
c0011157:	75 04                	jne    c001115d <getFromFileDescriptor(int)+0x2e>
c0011159:	31 c0                	xor    eax,eax
c001115b:	eb 6e                	jmp    c00111cb <getFromFileDescriptor(int)+0x9c>
c001115d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011160:	74 69                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c0011162:	52                   	push   edx
c0011163:	52                   	push   edx
c0011164:	50                   	push   eax
c0011165:	68 58 a5 02 c0       	push   0xc002a558
c001116a:	e8 f9 40 01 00       	call   c0025268 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001116f:	eb e1                	jmp    c0011152 <getFromFileDescriptor(int)+0x23>
c0011171:	a1 4c a5 02 c0       	mov    eax,ds:0xc002a54c
c0011176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001117c:	74 4d                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c001117e:	a1 50 a5 02 c0       	mov    eax,ds:0xc002a550
c0011183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011189:	74 40                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c001118b:	a1 48 a5 02 c0       	mov    eax,ds:0xc002a548
c0011190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011196:	74 33                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c0011198:	a1 44 a5 02 c0       	mov    eax,ds:0xc002a544
c001119d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00111a3:	74 26                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c00111a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00111ab:	83 f8 08             	cmp    eax,0x8
c00111ae:	77 09                	ja     c00111b9 <getFromFileDescriptor(int)+0x8a>
c00111b0:	8b 04 85 20 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ae0]
c00111b7:	eb 12                	jmp    c00111cb <getFromFileDescriptor(int)+0x9c>
c00111b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111bf:	83 fb 08             	cmp    ebx,0x8
c00111c2:	77 95                	ja     c0011159 <getFromFileDescriptor(int)+0x2a>
c00111c4:	8b 04 9d e0 a4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5b20]
c00111cb:	83 c4 08             	add    esp,0x8
c00111ce:	5b                   	pop    ebx
c00111cf:	c3                   	ret    

c00111d0 <__static_initialization_and_destruction_0(int, int)>:
c00111d0:	83 ec 0c             	sub    esp,0xc
c00111d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111d8:	75 34                	jne    c001120e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111e2:	75 2a                	jne    c001120e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111e4:	83 ec 0c             	sub    esp,0xc
c00111e7:	68 58 a5 02 c0       	push   0xc002a558
c00111ec:	e8 a1 3e 01 00       	call   c0025092 <LinkedList<UnixFile>::LinkedList()>
c00111f1:	83 c4 10             	add    esp,0x10
c00111f4:	83 ec 04             	sub    esp,0x4
c00111f7:	68 9c 93 02 c0       	push   0xc002939c
c00111fc:	68 58 a5 02 c0       	push   0xc002a558
c0011201:	68 90 50 02 c0       	push   0xc0025090
c0011206:	e8 e8 0e 00 00       	call   c00120f3 <__cxa_atexit>
c001120b:	83 c4 10             	add    esp,0x10
c001120e:	90                   	nop
c001120f:	83 c4 0c             	add    esp,0xc
c0011212:	c3                   	ret    

c0011213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011213:	83 ec 0c             	sub    esp,0xc
c0011216:	83 ec 08             	sub    esp,0x8
c0011219:	68 ff ff 00 00       	push   0xffff
c001121e:	6a 01                	push   0x1
c0011220:	e8 ab ff ff ff       	call   c00111d0 <__static_initialization_and_destruction_0(int, int)>
c0011225:	83 c4 10             	add    esp,0x10
c0011228:	83 c4 0c             	add    esp,0xc
c001122b:	c3                   	ret    

c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001122c:	53                   	push   ebx
c001122d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001123b:	89 c8                	mov    eax,ecx
c001123d:	d1 e8                	shr    eax,1
c001123f:	03 05 28 94 02 c0    	add    eax,DWORD PTR ds:0xc0029428
c0011245:	83 e1 01             	and    ecx,0x1
c0011248:	8a 10                	mov    dl,BYTE PTR [eax]
c001124a:	75 09                	jne    c0011255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001124c:	83 e2 f0             	and    edx,0xfffffff0
c001124f:	09 da                	or     edx,ebx
c0011251:	88 10                	mov    BYTE PTR [eax],dl
c0011253:	5b                   	pop    ebx
c0011254:	c3                   	ret    
c0011255:	c1 e3 04             	shl    ebx,0x4
c0011258:	83 e2 0f             	and    edx,0xf
c001125b:	09 da                	or     edx,ebx
c001125d:	88 10                	mov    BYTE PTR [eax],dl
c001125f:	5b                   	pop    ebx
c0011260:	c3                   	ret    

c0011261 <Virt::getPageState(unsigned long)>:
c0011261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011265:	8b 0d 28 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029428
c001126b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011271:	89 d0                	mov    eax,edx
c0011273:	d1 e8                	shr    eax,1
c0011275:	83 e2 01             	and    edx,0x1
c0011278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001127b:	75 04                	jne    c0011281 <Virt::getPageState(unsigned long)+0x20>
c001127d:	83 e0 0f             	and    eax,0xf
c0011280:	c3                   	ret    
c0011281:	c0 e8 04             	shr    al,0x4
c0011284:	c3                   	ret    

c0011285 <Virt::allocateKernelVirtualPages(int)>:
c0011285:	55                   	push   ebp
c0011286:	31 ed                	xor    ebp,ebp
c0011288:	57                   	push   edi
c0011289:	56                   	push   esi
c001128a:	53                   	push   ebx
c001128b:	31 db                	xor    ebx,ebx
c001128d:	83 ec 1c             	sub    esp,0x1c
c0011290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011294:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c001129a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001129f:	57                   	push   edi
c00112a0:	e8 bc ff ff ff       	call   c0011261 <Virt::getPageState(unsigned long)>
c00112a5:	5a                   	pop    edx
c00112a6:	84 c0                	test   al,al
c00112a8:	75 3a                	jne    c00112e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112aa:	85 db                	test   ebx,ebx
c00112ac:	75 02                	jne    c00112b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112ae:	89 fd                	mov    ebp,edi
c00112b0:	43                   	inc    ebx
c00112b1:	39 f3                	cmp    ebx,esi
c00112b3:	74 5a                	je     c001130f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112b5:	47                   	inc    edi
c00112b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112bc:	76 31                	jbe    c00112ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112be:	c7 05 24 94 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029424,0xc8000
c00112c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112cd:	75 28                	jne    c00112f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112d9:	57                   	push   edi
c00112da:	e8 82 ff ff ff       	call   c0011261 <Virt::getPageState(unsigned long)>
c00112df:	5a                   	pop    edx
c00112e0:	84 c0                	test   al,al
c00112e2:	74 c6                	je     c00112aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00112e4:	31 db                	xor    ebx,ebx
c00112e6:	47                   	inc    edi
c00112e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112ed:	77 cf                	ja     c00112be <Virt::allocateKernelVirtualPages(int)+0x39>
c00112ef:	89 3d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edi
c00112f5:	eb a8                	jmp    c001129f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112f7:	83 ec 0c             	sub    esp,0xc
c00112fa:	68 64 6e 02 c0       	push   0xc0026e64
c00112ff:	e8 ef 76 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0011304:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	eb 90                	jmp    c001129f <Virt::allocateKernelVirtualPages(int)+0x1a>
c001130f:	89 2d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ebp
c0011315:	4b                   	dec    ebx
c0011316:	74 5f                	je     c0011377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011318:	85 f6                	test   esi,esi
c001131a:	74 3d                	je     c0011359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001131c:	89 e8                	mov    eax,ebp
c001131e:	31 db                	xor    ebx,ebx
c0011320:	8d 7e ff             	lea    edi,[esi-0x1]
c0011323:	eb 14                	jmp    c0011339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011325:	6a 01                	push   0x1
c0011327:	43                   	inc    ebx
c0011328:	50                   	push   eax
c0011329:	e8 fe fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001132e:	58                   	pop    eax
c001132f:	39 f3                	cmp    ebx,esi
c0011331:	5a                   	pop    edx
c0011332:	74 25                	je     c0011359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011334:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0011339:	8d 50 01             	lea    edx,[eax+0x1]
c001133c:	85 db                	test   ebx,ebx
c001133e:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c0011344:	74 20                	je     c0011366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011346:	39 df                	cmp    edi,ebx
c0011348:	75 db                	jne    c0011325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001134a:	6a 03                	push   0x3
c001134c:	43                   	inc    ebx
c001134d:	50                   	push   eax
c001134e:	e8 d9 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011353:	59                   	pop    ecx
c0011354:	39 f3                	cmp    ebx,esi
c0011356:	58                   	pop    eax
c0011357:	75 db                	jne    c0011334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011359:	83 c4 1c             	add    esp,0x1c
c001135c:	89 e8                	mov    eax,ebp
c001135e:	5b                   	pop    ebx
c001135f:	c1 e0 0c             	shl    eax,0xc
c0011362:	5e                   	pop    esi
c0011363:	5f                   	pop    edi
c0011364:	5d                   	pop    ebp
c0011365:	c3                   	ret    
c0011366:	6a 02                	push   0x2
c0011368:	bb 01 00 00 00       	mov    ebx,0x1
c001136d:	50                   	push   eax
c001136e:	e8 b9 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011373:	58                   	pop    eax
c0011374:	5a                   	pop    edx
c0011375:	eb bd                	jmp    c0011334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011377:	6a 04                	push   0x4
c0011379:	8d 45 01             	lea    eax,[ebp+0x1]
c001137c:	55                   	push   ebp
c001137d:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0011382:	e8 a5 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011387:	59                   	pop    ecx
c0011388:	89 e8                	mov    eax,ebp
c001138a:	5b                   	pop    ebx
c001138b:	c1 e0 0c             	shl    eax,0xc
c001138e:	83 c4 1c             	add    esp,0x1c
c0011391:	5b                   	pop    ebx
c0011392:	5e                   	pop    esi
c0011393:	5f                   	pop    edi
c0011394:	5d                   	pop    ebp
c0011395:	c3                   	ret    

c0011396 <Virt::virtualMemorySetup()>:
c0011396:	53                   	push   ebx
c0011397:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001139c:	83 ec 08             	sub    esp,0x8
c001139f:	6a 0f                	push   0xf
c00113a1:	53                   	push   ebx
c00113a2:	43                   	inc    ebx
c00113a3:	e8 84 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a8:	59                   	pop    ecx
c00113a9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113af:	58                   	pop    eax
c00113b0:	75 ed                	jne    c001139f <Virt::virtualMemorySetup()+0x9>
c00113b2:	83 ec 08             	sub    esp,0x8
c00113b5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113ba:	68 00 00 00 c8       	push   0xc8000000
c00113bf:	68 eb 6f 02 c0       	push   0xc0026feb
c00113c4:	e8 8e 0e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00113c9:	58                   	pop    eax
c00113ca:	5a                   	pop    edx
c00113cb:	68 00 f0 ff ef       	push   0xeffff000
c00113d0:	68 ff 6f 02 c0       	push   0xc0026fff
c00113d5:	e8 7d 0e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	83 ec 08             	sub    esp,0x8
c00113e0:	6a 00                	push   0x0
c00113e2:	53                   	push   ebx
c00113e3:	43                   	inc    ebx
c00113e4:	e8 43 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e9:	83 c4 10             	add    esp,0x10
c00113ec:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f2:	75 e9                	jne    c00113dd <Virt::virtualMemorySetup()+0x47>
c00113f4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113f9:	83 ec 08             	sub    esp,0x8
c00113fc:	6a 0f                	push   0xf
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 27 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001140e:	75 e9                	jne    c00113f9 <Virt::virtualMemorySetup()+0x63>
c0011410:	83 c4 08             	add    esp,0x8
c0011413:	5b                   	pop    ebx
c0011414:	c3                   	ret    

c0011415 <Virt::getAKernelVAS()>:
c0011415:	a1 64 a5 02 c0       	mov    eax,ds:0xc002a564
c001141a:	c3                   	ret    

c001141b <Virt::setupPageSwapping(int)>:
c001141b:	57                   	push   edi
c001141c:	56                   	push   esi
c001141d:	53                   	push   ebx
c001141e:	83 ec 1c             	sub    esp,0x1c
c0011421:	68 14 01 00 00       	push   0x114
c0011426:	e8 3d 0d 00 00       	call   c0012168 <operator new(unsigned long)>
c001142b:	83 c4 0c             	add    esp,0xc
c001142e:	89 c6                	mov    esi,eax
c0011430:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c0011436:	68 13 70 02 c0       	push   0xc0027013
c001143b:	50                   	push   eax
c001143c:	e8 45 13 00 00       	call   c0012786 <File::File(char const*, Process*)>
c0011441:	89 34 24             	mov    DWORD PTR [esp],esi
c0011444:	e8 19 15 00 00       	call   c0012962 <File::unlink()>
c0011449:	58                   	pop    eax
c001144a:	5a                   	pop    edx
c001144b:	6a 12                	push   0x12
c001144d:	56                   	push   esi
c001144e:	e8 97 13 00 00       	call   c00127ea <File::open(FileOpenMode)>
c0011453:	83 c4 10             	add    esp,0x10
c0011456:	85 c0                	test   eax,eax
c0011458:	0f 85 bf 00 00 00    	jne    c001151d <Virt::setupPageSwapping(int)+0x102>
c001145e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011462:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001146a:	c1 e3 08             	shl    ebx,0x8
c001146d:	83 ec 0c             	sub    esp,0xc
c0011470:	68 00 00 01 00       	push   0x10000
c0011475:	e8 ec dc ff ff       	call   c000f166 <malloc>
c001147a:	83 c4 0c             	add    esp,0xc
c001147d:	89 c7                	mov    edi,eax
c001147f:	68 00 00 01 00       	push   0x10000
c0011484:	6a 00                	push   0x0
c0011486:	50                   	push   eax
c0011487:	e8 60 f2 fe ff       	call   c00006ec <memset>
c001148c:	83 c4 10             	add    esp,0x10
c001148f:	85 db                	test   ebx,ebx
c0011491:	79 03                	jns    c0011496 <Virt::setupPageSwapping(int)+0x7b>
c0011493:	83 c3 0f             	add    ebx,0xf
c0011496:	c1 fb 04             	sar    ebx,0x4
c0011499:	4b                   	dec    ebx
c001149a:	83 fb ff             	cmp    ebx,0xffffffff
c001149d:	74 4b                	je     c00114ea <Virt::setupPageSwapping(int)+0xcf>
c001149f:	83 ec 0c             	sub    esp,0xc
c00114a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00114a4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114a8:	52                   	push   edx
c00114a9:	57                   	push   edi
c00114aa:	6a 00                	push   0x0
c00114ac:	68 00 00 01 00       	push   0x10000
c00114b1:	56                   	push   esi
c00114b2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114b5:	83 c4 20             	add    esp,0x20
c00114b8:	85 c0                	test   eax,eax
c00114ba:	75 4e                	jne    c001150a <Virt::setupPageSwapping(int)+0xef>
c00114bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114c0:	3d 00 00 01 00       	cmp    eax,0x10000
c00114c5:	74 d2                	je     c0011499 <Virt::setupPageSwapping(int)+0x7e>
c00114c7:	83 ec 08             	sub    esp,0x8
c00114ca:	4b                   	dec    ebx
c00114cb:	50                   	push   eax
c00114cc:	68 66 70 02 c0       	push   0xc0027066
c00114d1:	e8 81 0d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00114d6:	c7 04 24 6f 70 02 c0 	mov    DWORD PTR [esp],0xc002706f
c00114dd:	e8 11 75 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	83 fb ff             	cmp    ebx,0xffffffff
c00114e8:	75 b5                	jne    c001149f <Virt::setupPageSwapping(int)+0x84>
c00114ea:	83 ec 0c             	sub    esp,0xc
c00114ed:	56                   	push   esi
c00114ee:	e8 55 13 00 00       	call   c0012848 <File::close()>
c00114f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f6:	e8 8b dc ff ff       	call   c000f186 <rfree>
c00114fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00114fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0011500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011503:	83 c4 20             	add    esp,0x20
c0011506:	5b                   	pop    ebx
c0011507:	5e                   	pop    esi
c0011508:	5f                   	pop    edi
c0011509:	c3                   	ret    
c001150a:	83 ec 08             	sub    esp,0x8
c001150d:	50                   	push   eax
c001150e:	68 4e 70 02 c0       	push   0xc002704e
c0011513:	e8 3f 0d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0011518:	83 c4 10             	add    esp,0x10
c001151b:	eb 9f                	jmp    c00114bc <Virt::setupPageSwapping(int)+0xa1>
c001151d:	83 ec 08             	sub    esp,0x8
c0011520:	50                   	push   eax
c0011521:	68 2a 70 02 c0       	push   0xc002702a
c0011526:	e8 2c 0d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001152b:	c7 04 24 33 70 02 c0 	mov    DWORD PTR [esp],0xc0027033
c0011532:	e8 bc 74 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0011537:	83 c4 10             	add    esp,0x10
c001153a:	e9 1f ff ff ff       	jmp    c001145e <Virt::setupPageSwapping(int)+0x43>
c001153f:	90                   	nop

c0011540 <VAS::VAS()>:
c0011540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011544:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001154b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154f:	a3 64 a5 02 c0       	mov    ds:0xc002a564,eax
c0011554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011558:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001155c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011560:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011567:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001156e:	90                   	nop
c001156f:	c3                   	ret    

c0011570 <VAS::VAS(VAS*)>:
c0011570:	83 ec 0c             	sub    esp,0xc
c0011573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011577:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001157e:	83 ec 0c             	sub    esp,0xc
c0011581:	68 84 6e 02 c0       	push   0xc0026e84
c0011586:	e8 68 74 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	90                   	nop
c001158f:	83 c4 0c             	add    esp,0xc
c0011592:	c3                   	ret    
c0011593:	90                   	nop

c0011594 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011594:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011598:	89 c2                	mov    edx,eax
c001159a:	c1 e8 0a             	shr    eax,0xa
c001159d:	c1 ea 16             	shr    edx,0x16
c00115a0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115a5:	19 c9                	sbb    ecx,ecx
c00115a7:	c1 e2 0c             	shl    edx,0xc
c00115aa:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115b0:	25 fc 0f 00 00       	and    eax,0xffc
c00115b5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115bc:	01 d0                	add    eax,edx
c00115be:	c3                   	ret    
c00115bf:	90                   	nop

c00115c0 <VAS::getPageTableEntry(unsigned long)>:
c00115c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115c4:	89 ca                	mov    edx,ecx
c00115c6:	c1 e9 0a             	shr    ecx,0xa
c00115c9:	c1 ea 16             	shr    edx,0x16
c00115cc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115d2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115d8:	c1 e0 0c             	shl    eax,0xc
c00115db:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115de:	c3                   	ret    

c00115df <Virt::freeKernelVirtualPages(unsigned long)>:
c00115df:	57                   	push   edi
c00115e0:	56                   	push   esi
c00115e1:	be 01 00 00 00       	mov    esi,0x1
c00115e6:	53                   	push   ebx
c00115e7:	83 ec 10             	sub    esp,0x10
c00115ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115ee:	c1 eb 0c             	shr    ebx,0xc
c00115f1:	eb 3f                	jmp    c0011632 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115f3:	e8 1d fe ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c00115f8:	83 ec 08             	sub    esp,0x8
c00115fb:	57                   	push   edi
c00115fc:	50                   	push   eax
c00115fd:	e8 be ff ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0011602:	83 c4 10             	add    esp,0x10
c0011605:	8b 00                	mov    eax,DWORD PTR [eax]
c0011607:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001160b:	f6 c4 04             	test   ah,0x4
c001160e:	75 5f                	jne    c001166f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011610:	80 fa 04             	cmp    dl,0x4
c0011613:	74 78                	je     c001168d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011615:	80 fa 02             	cmp    dl,0x2
c0011618:	0f 84 88 00 00 00    	je     c00116a6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001161e:	80 fa 03             	cmp    dl,0x3
c0011621:	0f 84 ad 00 00 00    	je     c00116d4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011627:	fe ca                	dec    dl
c0011629:	0f 84 92 00 00 00    	je     c00116c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001162f:	43                   	inc    ebx
c0011630:	31 f6                	xor    esi,esi
c0011632:	53                   	push   ebx
c0011633:	e8 29 fc ff ff       	call   c0011261 <Virt::getPageState(unsigned long)>
c0011638:	5f                   	pop    edi
c0011639:	89 df                	mov    edi,ebx
c001163b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001163f:	c1 e7 0c             	shl    edi,0xc
c0011642:	84 c0                	test   al,al
c0011644:	75 ad                	jne    c00115f3 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011646:	83 ec 0c             	sub    esp,0xc
c0011649:	68 75 70 02 c0       	push   0xc0027075
c001164e:	e8 a0 73 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0011653:	e8 bd fd ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c0011658:	5a                   	pop    edx
c0011659:	59                   	pop    ecx
c001165a:	57                   	push   edi
c001165b:	50                   	push   eax
c001165c:	e8 5f ff ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0011661:	83 c4 10             	add    esp,0x10
c0011664:	8b 00                	mov    eax,DWORD PTR [eax]
c0011666:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001166a:	f6 c4 04             	test   ah,0x4
c001166d:	74 c0                	je     c001162f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001166f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011673:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011678:	83 ec 0c             	sub    esp,0xc
c001167b:	50                   	push   eax
c001167c:	e8 05 e0 ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011688:	80 fa 04             	cmp    dl,0x4
c001168b:	75 88                	jne    c0011615 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001168d:	89 f0                	mov    eax,esi
c001168f:	84 c0                	test   al,al
c0011691:	75 47                	jne    c00116da <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011693:	c7 44 24 20 a8 6e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026ea8
c001169b:	83 c4 10             	add    esp,0x10
c001169e:	5b                   	pop    ebx
c001169f:	5e                   	pop    esi
c00116a0:	5f                   	pop    edi
c00116a1:	e9 4d 73 00 00       	jmp    c00189f3 <Krnl::panic(char const*)>
c00116a6:	89 f0                	mov    eax,esi
c00116a8:	84 c0                	test   al,al
c00116aa:	75 15                	jne    c00116c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116ac:	83 ec 0c             	sub    esp,0xc
c00116af:	68 91 70 02 c0       	push   0xc0027091
c00116b4:	e8 3a 73 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c00116b9:	83 c4 10             	add    esp,0x10
c00116bc:	e9 6e ff ff ff       	jmp    c001162f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116c1:	83 ec 08             	sub    esp,0x8
c00116c4:	6a 00                	push   0x0
c00116c6:	53                   	push   ebx
c00116c7:	e8 60 fb ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116cc:	83 c4 10             	add    esp,0x10
c00116cf:	e9 5b ff ff ff       	jmp    c001162f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116d4:	89 f0                	mov    eax,esi
c00116d6:	84 c0                	test   al,al
c00116d8:	75 15                	jne    c00116ef <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116da:	83 ec 08             	sub    esp,0x8
c00116dd:	6a 00                	push   0x0
c00116df:	53                   	push   ebx
c00116e0:	e8 47 fb ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	83 c4 10             	add    esp,0x10
c00116eb:	5b                   	pop    ebx
c00116ec:	5e                   	pop    esi
c00116ed:	5f                   	pop    edi
c00116ee:	c3                   	ret    
c00116ef:	c7 44 24 20 ad 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc00270ad
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	5b                   	pop    ebx
c00116fb:	5e                   	pop    esi
c00116fc:	5f                   	pop    edi
c00116fd:	e9 f1 72 00 00       	jmp    c00189f3 <Krnl::panic(char const*)>

c0011702 <VAS::freeAllocatedPages(unsigned long)>:
c0011702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001170a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001170e:	74 09                	je     c0011719 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011710:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011714:	e9 c6 fe ff ff       	jmp    c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c0011719:	c7 44 24 04 cc 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026ecc
c0011721:	e9 31 0b 00 00       	jmp    c0012257 <Dbg::kprintf(char const*, ...)>

c0011726 <VAS::virtualToPhysical(unsigned long)>:
c0011726:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001172a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001172e:	e8 8d fe ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0011733:	5a                   	pop    edx
c0011734:	8b 00                	mov    eax,DWORD PTR [eax]
c0011736:	59                   	pop    ecx
c0011737:	25 00 f0 ff ff       	and    eax,0xfffff000
c001173c:	c3                   	ret    
c001173d:	90                   	nop

c001173e <VAS::reflagRange(unsigned long, int, int, int)>:
c001173e:	55                   	push   ebp
c001173f:	57                   	push   edi
c0011740:	56                   	push   esi
c0011741:	53                   	push   ebx
c0011742:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011746:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001174a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001174e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011752:	85 db                	test   ebx,ebx
c0011754:	7e 22                	jle    c0011778 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011756:	c1 e3 0c             	shl    ebx,0xc
c0011759:	01 f3                	add    ebx,esi
c001175b:	56                   	push   esi
c001175c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011762:	55                   	push   ebp
c0011763:	e8 58 fe ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0011768:	5a                   	pop    edx
c0011769:	59                   	pop    ecx
c001176a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001176c:	21 f9                	and    ecx,edi
c001176e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011772:	39 f3                	cmp    ebx,esi
c0011774:	89 08                	mov    DWORD PTR [eax],ecx
c0011776:	75 e3                	jne    c001175b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011778:	5b                   	pop    ebx
c0011779:	5e                   	pop    esi
c001177a:	5f                   	pop    edi
c001177b:	5d                   	pop    ebp
c001177c:	c3                   	ret    
c001177d:	90                   	nop

c001177e <VAS::setToWriteCombining(unsigned long, int)>:
c001177e:	83 ec 0c             	sub    esp,0xc
c0011781:	e8 ea 60 00 00       	call   c0017870 <CPU::current()>
c0011786:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001178d:	75 04                	jne    c0011793 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001178f:	83 c4 0c             	add    esp,0xc
c0011792:	c3                   	ret    
c0011793:	83 ec 0c             	sub    esp,0xc
c0011796:	68 80 00 00 00       	push   0x80
c001179b:	6a ff                	push   0xffffffff
c001179d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a9:	e8 90 ff ff ff       	call   c001173e <VAS::reflagRange(unsigned long, int, int, int)>
c00117ae:	83 c4 20             	add    esp,0x20
c00117b1:	83 c4 0c             	add    esp,0xc
c00117b4:	c3                   	ret    
c00117b5:	90                   	nop

c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b6:	83 ec 0c             	sub    esp,0xc
c00117b9:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117cc:	19 c0                	sbb    eax,eax
c00117ce:	83 ca 03             	or     edx,0x3
c00117d1:	83 e0 fc             	and    eax,0xfffffffc
c00117d4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117db:	e8 95 38 01 00       	call   c0025075 <CPU::readCR3()>
c00117e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117e4:	83 c4 0c             	add    esp,0xc
c00117e7:	e9 9b 38 01 00       	jmp    c0025087 <CPU::writeCR3(unsigned long)>

c00117ec <VAS::~VAS()>:
c00117ec:	83 ec 2c             	sub    esp,0x2c
c00117ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117f7:	e8 4a a1 00 00       	call   c001b946 <lockScheduler()>
c00117fc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011801:	8b 00                	mov    eax,DWORD PTR [eax]
c0011803:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011806:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001180c:	83 ec 04             	sub    esp,0x4
c001180f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011813:	6a 01                	push   0x1
c0011815:	50                   	push   eax
c0011816:	e8 9b ff ff ff       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001181b:	83 c4 10             	add    esp,0x10
c001181e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011826:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001182e:	0f 8f d7 00 00 00    	jg     c001190b <VAS::~VAS()+0x11f>
c0011834:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011838:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001183b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001183f:	c1 e2 02             	shl    edx,0x2
c0011842:	01 d0                	add    eax,edx
c0011844:	8b 00                	mov    eax,DWORD PTR [eax]
c0011846:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001184a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001184e:	83 e0 01             	and    eax,0x1
c0011851:	0f 84 ab 00 00 00    	je     c0011902 <VAS::~VAS()+0x116>
c0011857:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001185f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011867:	7f 75                	jg     c00118de <VAS::~VAS()+0xf2>
c0011869:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001186d:	c1 e0 0a             	shl    eax,0xa
c0011870:	89 c2                	mov    edx,eax
c0011872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011876:	01 d0                	add    eax,edx
c0011878:	c1 e0 0c             	shl    eax,0xc
c001187b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001187f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011884:	8b 00                	mov    eax,DWORD PTR [eax]
c0011886:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011889:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001188f:	83 ec 04             	sub    esp,0x4
c0011892:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011896:	6a 01                	push   0x1
c0011898:	50                   	push   eax
c0011899:	e8 f6 fc ff ff       	call   c0011594 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001189e:	83 c4 10             	add    esp,0x10
c00118a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00118ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118b3:	25 01 04 00 00       	and    eax,0x401
c00118b8:	3d 01 04 00 00       	cmp    eax,0x401
c00118bd:	75 19                	jne    c00118d8 <VAS::~VAS()+0xec>
c00118bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118c8:	83 ec 0c             	sub    esp,0xc
c00118cb:	50                   	push   eax
c00118cc:	e8 b5 dd ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c00118d1:	83 c4 10             	add    esp,0x10
c00118d4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118dc:	eb 81                	jmp    c001185f <VAS::~VAS()+0x73>
c00118de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e2:	25 00 04 00 00       	and    eax,0x400
c00118e7:	74 19                	je     c0011902 <VAS::~VAS()+0x116>
c00118e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118f2:	83 ec 0c             	sub    esp,0xc
c00118f5:	50                   	push   eax
c00118f6:	e8 8b dd ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c00118fb:	83 c4 10             	add    esp,0x10
c00118fe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011902:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011906:	e9 1b ff ff ff       	jmp    c0011826 <VAS::~VAS()+0x3a>
c001190b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	50                   	push   eax
c0011916:	e8 c4 fc ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011922:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011925:	83 ec 0c             	sub    esp,0xc
c0011928:	50                   	push   eax
c0011929:	e8 58 dd ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c001192e:	83 c4 10             	add    esp,0x10
c0011931:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011939:	c1 e0 02             	shl    eax,0x2
c001193c:	83 ec 08             	sub    esp,0x8
c001193f:	50                   	push   eax
c0011940:	68 f0 6e 02 c0       	push   0xc0026ef0
c0011945:	e8 0d 09 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	e8 f6 9f 00 00       	call   c001b948 <unlockScheduler()>
c0011952:	90                   	nop
c0011953:	83 c4 2c             	add    esp,0x2c
c0011956:	c3                   	ret    
c0011957:	90                   	nop

c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011958:	55                   	push   ebp
c0011959:	57                   	push   edi
c001195a:	56                   	push   esi
c001195b:	53                   	push   ebx
c001195c:	83 ec 1c             	sub    esp,0x1c
c001195f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011963:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011967:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001196d:	77 08                	ja     c0011977 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001196f:	0f 20 d8             	mov    eax,cr3
c0011972:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011975:	75 47                	jne    c00119be <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011977:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001197b:	09 d8                	or     eax,ebx
c001197d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011982:	75 57                	jne    c00119db <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011984:	89 de                	mov    esi,ebx
c0011986:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011989:	c1 ee 16             	shr    esi,0x16
c001198c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011993:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011997:	74 54                	je     c00119ed <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011999:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001199d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119a3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119a7:	c1 e6 0c             	shl    esi,0xc
c00119aa:	c1 eb 0a             	shr    ebx,0xa
c00119ad:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119b3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119b6:	83 c4 1c             	add    esp,0x1c
c00119b9:	5b                   	pop    ebx
c00119ba:	5e                   	pop    esi
c00119bb:	5f                   	pop    edi
c00119bc:	5d                   	pop    ebp
c00119bd:	c3                   	ret    
c00119be:	83 ec 0c             	sub    esp,0xc
c00119c1:	68 10 6f 02 c0       	push   0xc0026f10
c00119c6:	e8 8c 08 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00119cb:	83 c4 10             	add    esp,0x10
c00119ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119d2:	09 d8                	or     eax,ebx
c00119d4:	a9 ff 0f 00 00       	test   eax,0xfff
c00119d9:	74 a9                	je     c0011984 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119db:	83 ec 0c             	sub    esp,0xc
c00119de:	68 78 6f 02 c0       	push   0xc0026f78
c00119e3:	e8 0b 70 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c00119e8:	83 c4 10             	add    esp,0x10
c00119eb:	eb 97                	jmp    c0011984 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f1:	e8 1a dd ff ff       	call   c000f710 <Phys::allocatePage()>
c00119f6:	89 c5                	mov    ebp,eax
c00119f8:	e8 18 fa ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011a04:	6a 01                	push   0x1
c0011a06:	e8 7a f8 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0011a0b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a12:	6a 01                	push   0x1
c0011a14:	50                   	push   eax
c0011a15:	55                   	push   ebp
c0011a16:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a20:	51                   	push   ecx
c0011a21:	e8 1e 02 00 00       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a26:	83 c4 1c             	add    esp,0x1c
c0011a29:	68 00 10 00 00       	push   0x1000
c0011a2e:	6a 00                	push   0x0
c0011a30:	50                   	push   eax
c0011a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a35:	e8 b2 ec fe ff       	call   c00006ec <memset>
c0011a3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a3e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a41:	e8 99 fb ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c0011a46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a4a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a53:	e9 41 ff ff ff       	jmp    c0011999 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a58 <VAS::allocatePages(int, int)>:
c0011a58:	55                   	push   ebp
c0011a59:	57                   	push   edi
c0011a5a:	56                   	push   esi
c0011a5b:	53                   	push   ebx
c0011a5c:	83 ec 1c             	sub    esp,0x1c
c0011a5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a63:	e8 08 5e 00 00       	call   c0017870 <CPU::current()>
c0011a68:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a6e:	83 e0 01             	and    eax,0x1
c0011a71:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a75:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a79:	0f 85 d7 00 00 00    	jne    c0011b56 <VAS::allocatePages(int, int)+0xfe>
c0011a7f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a86:	85 c0                	test   eax,eax
c0011a88:	0f 84 ac 00 00 00    	je     c0011b3a <VAS::allocatePages(int, int)+0xe2>
c0011a8e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a96:	c1 e6 0c             	shl    esi,0xc
c0011a99:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a9d:	85 c0                	test   eax,eax
c0011a9f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011aa2:	7e 33                	jle    c0011ad7 <VAS::allocatePages(int, int)+0x7f>
c0011aa4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011aa8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aac:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ab2:	e8 59 dc ff ff       	call   c000f710 <Phys::allocatePage()>
c0011ab7:	55                   	push   ebp
c0011ab8:	53                   	push   ebx
c0011ab9:	50                   	push   eax
c0011aba:	57                   	push   edi
c0011abb:	e8 98 fe ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ac0:	83 c4 10             	add    esp,0x10
c0011ac3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ac8:	74 03                	je     c0011acd <VAS::allocatePages(int, int)+0x75>
c0011aca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011acd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ad3:	39 de                	cmp    esi,ebx
c0011ad5:	75 db                	jne    c0011ab2 <VAS::allocatePages(int, int)+0x5a>
c0011ad7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011adc:	74 3f                	je     c0011b1d <VAS::allocatePages(int, int)+0xc5>
c0011ade:	c1 ee 0a             	shr    esi,0xa
c0011ae1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ae5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011aeb:	c1 eb 0a             	shr    ebx,0xa
c0011aee:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011af4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011afa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b00:	39 f3                	cmp    ebx,esi
c0011b02:	77 0d                	ja     c0011b11 <VAS::allocatePages(int, int)+0xb9>
c0011b04:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b07:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b0d:	39 de                	cmp    esi,ebx
c0011b0f:	73 f3                	jae    c0011b04 <VAS::allocatePages(int, int)+0xac>
c0011b11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b15:	83 c4 1c             	add    esp,0x1c
c0011b18:	5b                   	pop    ebx
c0011b19:	5e                   	pop    esi
c0011b1a:	5f                   	pop    edi
c0011b1b:	5d                   	pop    ebp
c0011b1c:	c3                   	ret    
c0011b1d:	e8 53 35 01 00       	call   c0025075 <CPU::readCR3()>
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	50                   	push   eax
c0011b26:	e8 5c 35 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b32:	83 c4 1c             	add    esp,0x1c
c0011b35:	5b                   	pop    ebx
c0011b36:	5e                   	pop    esi
c0011b37:	5f                   	pop    edi
c0011b38:	5d                   	pop    ebp
c0011b39:	c3                   	ret    
c0011b3a:	83 ec 0c             	sub    esp,0xc
c0011b3d:	68 9c 6f 02 c0       	push   0xc0026f9c
c0011b42:	e8 ac 6e 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0011b47:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	e9 38 ff ff ff       	jmp    c0011a8e <VAS::allocatePages(int, int)+0x36>
c0011b56:	83 ec 0c             	sub    esp,0xc
c0011b59:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b5d:	e8 23 f7 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0011b62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b66:	83 c4 10             	add    esp,0x10
c0011b69:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b6e:	0f 87 94 00 00 00    	ja     c0011c08 <VAS::allocatePages(int, int)+0x1b0>
c0011b74:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b78:	85 d2                	test   edx,edx
c0011b7a:	7e 3c                	jle    c0011bb8 <VAS::allocatePages(int, int)+0x160>
c0011b7c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b80:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b88:	c1 e5 0c             	shl    ebp,0xc
c0011b8b:	81 ce 00 04 00 00    	or     esi,0x400
c0011b91:	01 dd                	add    ebp,ebx
c0011b93:	e8 78 db ff ff       	call   c000f710 <Phys::allocatePage()>
c0011b98:	56                   	push   esi
c0011b99:	53                   	push   ebx
c0011b9a:	50                   	push   eax
c0011b9b:	57                   	push   edi
c0011b9c:	e8 b7 fd ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ba1:	83 c4 10             	add    esp,0x10
c0011ba4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba9:	74 03                	je     c0011bae <VAS::allocatePages(int, int)+0x156>
c0011bab:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bae:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bb4:	39 dd                	cmp    ebp,ebx
c0011bb6:	75 db                	jne    c0011b93 <VAS::allocatePages(int, int)+0x13b>
c0011bb8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bbd:	0f 84 5a ff ff ff    	je     c0011b1d <VAS::allocatePages(int, int)+0xc5>
c0011bc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bcb:	89 d3                	mov    ebx,edx
c0011bcd:	c1 e0 0c             	shl    eax,0xc
c0011bd0:	c1 eb 0a             	shr    ebx,0xa
c0011bd3:	01 d0                	add    eax,edx
c0011bd5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bdb:	c1 e8 0a             	shr    eax,0xa
c0011bde:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011be4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011be9:	2d 00 00 40 00       	sub    eax,0x400000
c0011bee:	39 c3                	cmp    ebx,eax
c0011bf0:	0f 87 1b ff ff ff    	ja     c0011b11 <VAS::allocatePages(int, int)+0xb9>
c0011bf6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bff:	39 d8                	cmp    eax,ebx
c0011c01:	73 f3                	jae    c0011bf6 <VAS::allocatePages(int, int)+0x19e>
c0011c03:	e9 09 ff ff ff       	jmp    c0011b11 <VAS::allocatePages(int, int)+0xb9>
c0011c08:	e8 63 5c 00 00       	call   c0017870 <CPU::current()>
c0011c0d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c14:	0f 84 5a ff ff ff    	je     c0011b74 <VAS::allocatePages(int, int)+0x11c>
c0011c1a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c22:	e9 4d ff ff ff       	jmp    c0011b74 <VAS::allocatePages(int, int)+0x11c>
c0011c27:	90                   	nop

c0011c28 <VAS::setCPUSpecific(unsigned long)>:
c0011c28:	83 ec 0c             	sub    esp,0xc
c0011c2b:	6a 05                	push   0x5
c0011c2d:	68 00 00 40 c2       	push   0xc2400000
c0011c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c3a:	e8 19 fd ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c3f:	83 c4 1c             	add    esp,0x1c
c0011c42:	c3                   	ret    
c0011c43:	90                   	nop

c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c44:	55                   	push   ebp
c0011c45:	57                   	push   edi
c0011c46:	56                   	push   esi
c0011c47:	53                   	push   ebx
c0011c48:	83 ec 1c             	sub    esp,0x1c
c0011c4b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c4f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c53:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c57:	e8 14 5c 00 00       	call   c0017870 <CPU::current()>
c0011c5c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c62:	83 e0 01             	and    eax,0x1
c0011c65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6d:	85 c0                	test   eax,eax
c0011c6f:	7e 39                	jle    c0011caa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c75:	89 f3                	mov    ebx,esi
c0011c77:	c1 e0 0c             	shl    eax,0xc
c0011c7a:	01 f0                	add    eax,esi
c0011c7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c80:	55                   	push   ebp
c0011c81:	53                   	push   ebx
c0011c82:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c86:	29 f0                	sub    eax,esi
c0011c88:	01 d8                	add    eax,ebx
c0011c8a:	50                   	push   eax
c0011c8b:	57                   	push   edi
c0011c8c:	e8 c7 fc ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c91:	83 c4 10             	add    esp,0x10
c0011c94:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c99:	74 03                	je     c0011c9e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c9b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c9e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ca4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ca8:	75 d6                	jne    c0011c80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011caa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011caf:	74 42                	je     c0011cf3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011cb1:	89 f3                	mov    ebx,esi
c0011cb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cb7:	c1 eb 0a             	shr    ebx,0xa
c0011cba:	c1 e0 0c             	shl    eax,0xc
c0011cbd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cc3:	01 f0                	add    eax,esi
c0011cc5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ccb:	c1 e8 0a             	shr    eax,0xa
c0011cce:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cd3:	2d 00 00 40 00       	sub    eax,0x400000
c0011cd8:	39 c3                	cmp    ebx,eax
c0011cda:	77 0d                	ja     c0011ce9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ce5:	39 d8                	cmp    eax,ebx
c0011ce7:	73 f3                	jae    c0011cdc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011ce9:	83 c4 1c             	add    esp,0x1c
c0011cec:	89 f0                	mov    eax,esi
c0011cee:	5b                   	pop    ebx
c0011cef:	5e                   	pop    esi
c0011cf0:	5f                   	pop    edi
c0011cf1:	5d                   	pop    ebp
c0011cf2:	c3                   	ret    
c0011cf3:	e8 7d 33 01 00       	call   c0025075 <CPU::readCR3()>
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	50                   	push   eax
c0011cfc:	e8 86 33 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c0011d01:	89 f0                	mov    eax,esi
c0011d03:	83 c4 10             	add    esp,0x10
c0011d06:	83 c4 1c             	add    esp,0x1c
c0011d09:	5b                   	pop    ebx
c0011d0a:	5e                   	pop    esi
c0011d0b:	5f                   	pop    edi
c0011d0c:	5d                   	pop    ebp
c0011d0d:	c3                   	ret    

c0011d0e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d0e:	55                   	push   ebp
c0011d0f:	57                   	push   edi
c0011d10:	56                   	push   esi
c0011d11:	53                   	push   ebx
c0011d12:	83 ec 1c             	sub    esp,0x1c
c0011d15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d19:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d1d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d21:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d2a:	75 4a                	jne    c0011d76 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d2c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d30:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d33:	c1 eb 16             	shr    ebx,0x16
c0011d36:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d3d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d41:	74 4d                	je     c0011d90 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d47:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d4b:	c1 e8 0a             	shr    eax,0xa
c0011d4e:	80 fa 01             	cmp    dl,0x1
c0011d51:	19 d2                	sbb    edx,edx
c0011d53:	c1 e3 0c             	shl    ebx,0xc
c0011d56:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d5a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d60:	25 fc 0f 00 00       	and    eax,0xffc
c0011d65:	01 d8                	add    eax,ebx
c0011d67:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d6e:	83 c4 1c             	add    esp,0x1c
c0011d71:	5b                   	pop    ebx
c0011d72:	5e                   	pop    esi
c0011d73:	5f                   	pop    edi
c0011d74:	5d                   	pop    ebp
c0011d75:	c3                   	ret    
c0011d76:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d7a:	83 ec 0c             	sub    esp,0xc
c0011d7d:	68 c8 6f 02 c0       	push   0xc0026fc8
c0011d82:	e8 6c 6c 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0011d87:	83 c4 10             	add    esp,0x10
c0011d8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d8e:	eb 9c                	jmp    c0011d2c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d94:	e8 77 d9 ff ff       	call   c000f710 <Phys::allocatePage()>
c0011d99:	89 c5                	mov    ebp,eax
c0011d9b:	e8 75 f6 ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c0011da0:	83 ec 0c             	sub    esp,0xc
c0011da3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011da7:	6a 01                	push   0x1
c0011da9:	e8 d7 f4 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0011dae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011db5:	6a 01                	push   0x1
c0011db7:	50                   	push   eax
c0011db8:	55                   	push   ebp
c0011db9:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dbf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dc3:	51                   	push   ecx
c0011dc4:	e8 7b fe ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dc9:	83 c4 1c             	add    esp,0x1c
c0011dcc:	68 00 10 00 00       	push   0x1000
c0011dd1:	6a 00                	push   0x0
c0011dd3:	50                   	push   eax
c0011dd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dd8:	e8 0f e9 fe ff       	call   c00006ec <memset>
c0011ddd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011de1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011de4:	e8 f6 f7 ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c0011de9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011dec:	83 c4 10             	add    esp,0x10
c0011def:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011df2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011df6:	e9 48 ff ff ff       	jmp    c0011d43 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011dfb:	90                   	nop

c0011dfc <VAS::VAS(bool)>:
c0011dfc:	53                   	push   ebx
c0011dfd:	83 ec 28             	sub    esp,0x28
c0011e00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e04:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e17:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e1b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e1e:	e8 ed d8 ff ff       	call   c000f710 <Phys::allocatePage()>
c0011e23:	89 c2                	mov    edx,eax
c0011e25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e29:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e2c:	e8 e4 f5 ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c0011e31:	89 c3                	mov    ebx,eax
c0011e33:	83 ec 0c             	sub    esp,0xc
c0011e36:	6a 01                	push   0x1
c0011e38:	e8 48 f4 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0011e3d:	83 c4 10             	add    esp,0x10
c0011e40:	89 c2                	mov    edx,eax
c0011e42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e49:	83 ec 0c             	sub    esp,0xc
c0011e4c:	6a 03                	push   0x3
c0011e4e:	6a 01                	push   0x1
c0011e50:	52                   	push   edx
c0011e51:	50                   	push   eax
c0011e52:	53                   	push   ebx
c0011e53:	e8 ec fd ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e58:	83 c4 20             	add    esp,0x20
c0011e5b:	89 c2                	mov    edx,eax
c0011e5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e61:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e64:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e6c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e74:	7f 1c                	jg     c0011e92 <VAS::VAS(bool)+0x96>
c0011e76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e81:	c1 e2 02             	shl    edx,0x2
c0011e84:	01 d0                	add    eax,edx
c0011e86:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e8c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e90:	eb da                	jmp    c0011e6c <VAS::VAS(bool)+0x70>
c0011e92:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e9a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011ea2:	7f 71                	jg     c0011f15 <VAS::VAS(bool)+0x119>
c0011ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ea8:	2d 00 02 00 00       	sub    eax,0x200
c0011ead:	c1 e0 0c             	shl    eax,0xc
c0011eb0:	83 c8 03             	or     eax,0x3
c0011eb3:	89 c3                	mov    ebx,eax
c0011eb5:	e8 b6 59 00 00       	call   c0017870 <CPU::current()>
c0011eba:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ec0:	83 e0 10             	and    eax,0x10
c0011ec3:	84 c0                	test   al,al
c0011ec5:	74 07                	je     c0011ece <VAS::VAS(bool)+0xd2>
c0011ec7:	b8 00 01 00 00       	mov    eax,0x100
c0011ecc:	eb 05                	jmp    c0011ed3 <VAS::VAS(bool)+0xd7>
c0011ece:	b8 00 00 00 00       	mov    eax,0x0
c0011ed3:	09 d8                	or     eax,ebx
c0011ed5:	89 c1                	mov    ecx,eax
c0011ed7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011edb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ede:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ee2:	c1 e2 02             	shl    edx,0x2
c0011ee5:	01 d0                	add    eax,edx
c0011ee7:	89 ca                	mov    edx,ecx
c0011ee9:	89 10                	mov    DWORD PTR [eax],edx
c0011eeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011eef:	2d 40 03 00 00       	sub    eax,0x340
c0011ef4:	83 f8 7f             	cmp    eax,0x7f
c0011ef7:	77 16                	ja     c0011f0f <VAS::VAS(bool)+0x113>
c0011ef9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011efd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f04:	c1 e2 02             	shl    edx,0x2
c0011f07:	01 d0                	add    eax,edx
c0011f09:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f0f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f13:	eb 85                	jmp    c0011e9a <VAS::VAS(bool)+0x9e>
c0011f15:	e8 56 59 00 00       	call   c0017870 <CPU::current()>
c0011f1a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f20:	83 e0 10             	and    eax,0x10
c0011f23:	84 c0                	test   al,al
c0011f25:	74 07                	je     c0011f2e <VAS::VAS(bool)+0x132>
c0011f27:	b8 03 41 00 00       	mov    eax,0x4103
c0011f2c:	eb 05                	jmp    c0011f33 <VAS::VAS(bool)+0x137>
c0011f2e:	b8 03 40 00 00       	mov    eax,0x4003
c0011f33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f37:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f3a:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f40:	89 02                	mov    DWORD PTR [edx],eax
c0011f42:	e8 29 59 00 00       	call   c0017870 <CPU::current()>
c0011f47:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f4d:	83 ec 08             	sub    esp,0x8
c0011f50:	50                   	push   eax
c0011f51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f55:	e8 ce fc ff ff       	call   c0011c28 <VAS::setCPUSpecific(unsigned long)>
c0011f5a:	83 c4 10             	add    esp,0x10
c0011f5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f61:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f64:	e8 07 59 00 00       	call   c0017870 <CPU::current()>
c0011f69:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f6f:	83 e0 10             	and    eax,0x10
c0011f72:	84 c0                	test   al,al
c0011f74:	74 07                	je     c0011f7d <VAS::VAS(bool)+0x181>
c0011f76:	b8 00 01 00 00       	mov    eax,0x100
c0011f7b:	eb 05                	jmp    c0011f82 <VAS::VAS(bool)+0x186>
c0011f7d:	b8 00 00 00 00       	mov    eax,0x0
c0011f82:	09 d8                	or     eax,ebx
c0011f84:	89 c2                	mov    edx,eax
c0011f86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f8d:	05 fc 0f 00 00       	add    eax,0xffc
c0011f92:	83 ca 03             	or     edx,0x3
c0011f95:	89 10                	mov    DWORD PTR [eax],edx
c0011f97:	e8 d4 58 00 00       	call   c0017870 <CPU::current()>
c0011f9c:	83 ec 0c             	sub    esp,0xc
c0011f9f:	50                   	push   eax
c0011fa0:	e8 9f 19 00 00       	call   c0013944 <Device::getName()>
c0011fa5:	83 c4 10             	add    esp,0x10
c0011fa8:	83 ec 08             	sub    esp,0x8
c0011fab:	68 c7 70 02 c0       	push   0xc00270c7
c0011fb0:	50                   	push   eax
c0011fb1:	e8 26 e8 fe ff       	call   c00007dc <strcmp>
c0011fb6:	83 c4 10             	add    esp,0x10
c0011fb9:	85 c0                	test   eax,eax
c0011fbb:	0f 94 c0             	sete   al
c0011fbe:	84 c0                	test   al,al
c0011fc0:	74 64                	je     c0012026 <VAS::VAS(bool)+0x22a>
c0011fc2:	e8 62 99 00 00       	call   c001b929 <disableIRQs()>
c0011fc7:	e8 a4 58 00 00       	call   c0017870 <CPU::current()>
c0011fcc:	05 7c 09 00 00       	add    eax,0x97c
c0011fd1:	83 ec 0c             	sub    esp,0xc
c0011fd4:	50                   	push   eax
c0011fd5:	e8 fe cb ff ff       	call   c000ebd8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe2:	89 c3                	mov    ebx,eax
c0011fe4:	e8 87 58 00 00       	call   c0017870 <CPU::current()>
c0011fe9:	05 7c 09 00 00       	add    eax,0x97c
c0011fee:	83 ec 0c             	sub    esp,0xc
c0011ff1:	50                   	push   eax
c0011ff2:	e8 e1 cb ff ff       	call   c000ebd8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	83 ec 08             	sub    esp,0x8
c0011ffd:	50                   	push   eax
c0011ffe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012002:	e8 b9 f5 ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0012007:	83 c4 10             	add    esp,0x10
c001200a:	8b 00                	mov    eax,DWORD PTR [eax]
c001200c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012011:	6a 11                	push   0x11
c0012013:	53                   	push   ebx
c0012014:	50                   	push   eax
c0012015:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012019:	e8 3a f9 ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	e8 11 99 00 00       	call   c001b937 <enableIRQs()>
c0012026:	90                   	nop
c0012027:	83 c4 28             	add    esp,0x28
c001202a:	5b                   	pop    ebx
c001202b:	c3                   	ret    

c001202c <mapVASFirstTime>:
c001202c:	55                   	push   ebp
c001202d:	57                   	push   edi
c001202e:	56                   	push   esi
c001202f:	53                   	push   ebx
c0012030:	83 ec 0c             	sub    esp,0xc
c0012033:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012038:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001203b:	4a                   	dec    edx
c001203c:	0f 84 99 00 00 00    	je     c00120db <mapVASFirstTime+0xaf>
c0012042:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012045:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012048:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001204d:	c1 e5 15             	shl    ebp,0x15
c0012050:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012055:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001205b:	29 eb                	sub    ebx,ebp
c001205d:	29 ee                	sub    esi,ebp
c001205f:	e8 ac d6 ff ff       	call   c000f710 <Phys::allocatePage()>
c0012064:	83 ec 0c             	sub    esp,0xc
c0012067:	68 03 04 00 00       	push   0x403
c001206c:	6a 01                	push   0x1
c001206e:	53                   	push   ebx
c001206f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012075:	50                   	push   eax
c0012076:	57                   	push   edi
c0012077:	e8 c8 fb ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001207c:	83 c4 20             	add    esp,0x20
c001207f:	39 f3                	cmp    ebx,esi
c0012081:	75 dc                	jne    c001205f <mapVASFirstTime+0x33>
c0012083:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012088:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001208d:	29 ee                	sub    esi,ebp
c001208f:	29 e8                	sub    eax,ebp
c0012091:	89 c5                	mov    ebp,eax
c0012093:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012097:	19 db                	sbb    ebx,ebx
c0012099:	e8 72 d6 ff ff       	call   c000f710 <Phys::allocatePage()>
c001209e:	83 e3 04             	and    ebx,0x4
c00120a1:	83 ec 0c             	sub    esp,0xc
c00120a4:	81 c3 03 04 00 00    	add    ebx,0x403
c00120aa:	53                   	push   ebx
c00120ab:	6a 01                	push   0x1
c00120ad:	56                   	push   esi
c00120ae:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120b4:	50                   	push   eax
c00120b5:	57                   	push   edi
c00120b6:	e8 89 fb ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120bb:	83 c4 20             	add    esp,0x20
c00120be:	39 f5                	cmp    ebp,esi
c00120c0:	75 d1                	jne    c0012093 <mapVASFirstTime+0x67>
c00120c2:	e8 ae 2f 01 00       	call   c0025075 <CPU::readCR3()>
c00120c7:	83 ec 0c             	sub    esp,0xc
c00120ca:	50                   	push   eax
c00120cb:	e8 b7 2f 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c00120d0:	83 c4 10             	add    esp,0x10
c00120d3:	83 c4 0c             	add    esp,0xc
c00120d6:	5b                   	pop    ebx
c00120d7:	5e                   	pop    esi
c00120d8:	5f                   	pop    edi
c00120d9:	5d                   	pop    ebp
c00120da:	c3                   	ret    
c00120db:	83 ec 0c             	sub    esp,0xc
c00120de:	68 d5 70 02 c0       	push   0xc00270d5
c00120e3:	e8 6f 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	83 c4 0c             	add    esp,0xc
c00120ee:	5b                   	pop    ebx
c00120ef:	5e                   	pop    esi
c00120f0:	5f                   	pop    edi
c00120f1:	5d                   	pop    ebp
c00120f2:	c3                   	ret    

c00120f3 <__cxa_atexit>:
c00120f3:	31 c0                	xor    eax,eax
c00120f5:	c3                   	ret    

c00120f6 <__cxa_finalize>:
c00120f6:	c3                   	ret    

c00120f7 <__stack_chk_fail>:
c00120f7:	55                   	push   ebp
c00120f8:	89 e5                	mov    ebp,esp
c00120fa:	83 ec 10             	sub    esp,0x10
c00120fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012100:	68 ee 70 02 c0       	push   0xc00270ee
c0012105:	e8 4d 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001210a:	58                   	pop    eax
c001210b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001210e:	5a                   	pop    edx
c001210f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012112:	68 ee 70 02 c0       	push   0xc00270ee
c0012117:	e8 3b 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001211c:	59                   	pop    ecx
c001211d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012120:	5a                   	pop    edx
c0012121:	8b 00                	mov    eax,DWORD PTR [eax]
c0012123:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012126:	68 ee 70 02 c0       	push   0xc00270ee
c001212b:	e8 27 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0012130:	59                   	pop    ecx
c0012131:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012134:	5a                   	pop    edx
c0012135:	8b 00                	mov    eax,DWORD PTR [eax]
c0012137:	8b 00                	mov    eax,DWORD PTR [eax]
c0012139:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001213c:	68 ee 70 02 c0       	push   0xc00270ee
c0012141:	e8 11 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0012146:	c7 04 24 f6 70 02 c0 	mov    DWORD PTR [esp],0xc00270f6
c001214d:	e8 a1 68 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0012152:	83 c4 10             	add    esp,0x10
c0012155:	c9                   	leave  
c0012156:	c3                   	ret    

c0012157 <__cxa_pure_virtual>:
c0012157:	83 ec 18             	sub    esp,0x18
c001215a:	68 0e 71 02 c0       	push   0xc002710e
c001215f:	e8 8f 68 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0012164:	83 c4 1c             	add    esp,0x1c
c0012167:	c3                   	ret    

c0012168 <operator new(unsigned long)>:
c0012168:	e9 f9 cf ff ff       	jmp    c000f166 <malloc>

c001216d <operator new[](unsigned long)>:
c001216d:	e9 f4 cf ff ff       	jmp    c000f166 <malloc>

c0012172 <operator delete(void*)>:
c0012172:	e9 0f d0 ff ff       	jmp    c000f186 <rfree>

c0012177 <operator delete(void*, unsigned long)>:
c0012177:	e9 0a d0 ff ff       	jmp    c000f186 <rfree>

c001217c <operator delete[](void*)>:
c001217c:	e9 05 d0 ff ff       	jmp    c000f186 <rfree>

c0012181 <operator delete[](void*, unsigned long)>:
c0012181:	e9 00 d0 ff ff       	jmp    c000f186 <rfree>

c0012186 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012186:	57                   	push   edi
c0012187:	b9 3f 00 00 00       	mov    ecx,0x3f
c001218c:	56                   	push   esi
c001218d:	be 24 71 02 c0       	mov    esi,0xc0027124
c0012192:	53                   	push   ebx
c0012193:	83 ec 40             	sub    esp,0x40
c0012196:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001219a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001219e:	fc                   	cld    
c001219f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121a1:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00121a5:	83 f9 3e             	cmp    ecx,0x3e
c00121a8:	7e 05                	jle    c00121af <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00121aa:	b9 3e 00 00 00       	mov    ecx,0x3e
c00121af:	89 df                	mov    edi,ebx
c00121b1:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121b5:	eb 02                	jmp    c00121b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121b7:	89 c7                	mov    edi,eax
c00121b9:	31 d2                	xor    edx,edx
c00121bb:	46                   	inc    esi
c00121bc:	89 f8                	mov    eax,edi
c00121be:	f7 f1                	div    ecx
c00121c0:	39 cf                	cmp    edi,ecx
c00121c2:	73 f3                	jae    c00121b7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121c7:	eb 02                	jmp    c00121cb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121c9:	89 c3                	mov    ebx,eax
c00121cb:	31 d2                	xor    edx,edx
c00121cd:	4e                   	dec    esi
c00121ce:	89 d8                	mov    eax,ebx
c00121d0:	f7 f1                	div    ecx
c00121d2:	39 cb                	cmp    ebx,ecx
c00121d4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121d8:	88 16                	mov    BYTE PTR [esi],dl
c00121da:	73 ed                	jae    c00121c9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121dc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121e0:	83 c4 40             	add    esp,0x40
c00121e3:	5b                   	pop    ebx
c00121e4:	5e                   	pop    esi
c00121e5:	5f                   	pop    edi
c00121e6:	c3                   	ret    

c00121e7 <Dbg::logc(char)>:
c00121e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121eb:	ba fd 03 00 00       	mov    edx,0x3fd
c00121f0:	ec                   	in     al,dx
c00121f1:	a8 20                	test   al,0x20
c00121f3:	74 fb                	je     c00121f0 <Dbg::logc(char)+0x9>
c00121f5:	ba f8 03 00 00       	mov    edx,0x3f8
c00121fa:	88 c8                	mov    al,cl
c00121fc:	ee                   	out    dx,al
c00121fd:	c3                   	ret    

c00121fe <Dbg::logs(char*)>:
c00121fe:	53                   	push   ebx
c00121ff:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012203:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012206:	84 c0                	test   al,al
c0012208:	74 0f                	je     c0012219 <Dbg::logs(char*)+0x1b>
c001220a:	50                   	push   eax
c001220b:	43                   	inc    ebx
c001220c:	e8 d6 ff ff ff       	call   c00121e7 <Dbg::logc(char)>
c0012211:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012214:	5a                   	pop    edx
c0012215:	84 c0                	test   al,al
c0012217:	75 f1                	jne    c001220a <Dbg::logs(char*)+0xc>
c0012219:	5b                   	pop    ebx
c001221a:	c3                   	ret    

c001221b <Dbg::logWriteInt(unsigned int)>:
c001221b:	83 ec 10             	sub    esp,0x10
c001221e:	6a 0a                	push   0xa
c0012220:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012224:	50                   	push   eax
c0012225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012229:	e8 58 ff ff ff       	call   c0012186 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001222e:	50                   	push   eax
c001222f:	e8 ca ff ff ff       	call   c00121fe <Dbg::logs(char*)>
c0012234:	83 c4 20             	add    esp,0x20
c0012237:	c3                   	ret    

c0012238 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012238:	83 ec 10             	sub    esp,0x10
c001223b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001223f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012243:	50                   	push   eax
c0012244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012248:	e8 39 ff ff ff       	call   c0012186 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001224d:	50                   	push   eax
c001224e:	e8 ab ff ff ff       	call   c00121fe <Dbg::logs(char*)>
c0012253:	83 c4 20             	add    esp,0x20
c0012256:	c3                   	ret    

c0012257 <Dbg::kprintf(char const*, ...)>:
c0012257:	55                   	push   ebp
c0012258:	57                   	push   edi
c0012259:	56                   	push   esi
c001225a:	53                   	push   ebx
c001225b:	83 ec 0c             	sub    esp,0xc
c001225e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012262:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012266:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001226a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001226d:	84 c0                	test   al,al
c001226f:	74 4a                	je     c00122bb <Dbg::kprintf(char const*, ...)+0x64>
c0012271:	31 db                	xor    ebx,ebx
c0012273:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012276:	3c 25                	cmp    al,0x25
c0012278:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001227b:	0f 85 e4 00 00 00    	jne    c0012365 <Dbg::kprintf(char const*, ...)+0x10e>
c0012281:	83 c3 02             	add    ebx,0x2
c0012284:	8a 07                	mov    al,BYTE PTR [edi]
c0012286:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012289:	83 e8 25             	sub    eax,0x25
c001228c:	3c 53                	cmp    al,0x53
c001228e:	0f 87 ba 00 00 00    	ja     c001234e <Dbg::kprintf(char const*, ...)+0xf7>
c0012294:	0f b6 c0             	movzx  eax,al
c0012297:	ff 24 85 64 71 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8e9c]
c001229e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122a2:	89 c8                	mov    eax,ecx
c00122a4:	83 c1 04             	add    ecx,0x4
c00122a7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122ab:	ff 30                	push   DWORD PTR [eax]
c00122ad:	e8 4c ff ff ff       	call   c00121fe <Dbg::logs(char*)>
c00122b2:	58                   	pop    eax
c00122b3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122b7:	84 c0                	test   al,al
c00122b9:	75 b8                	jne    c0012273 <Dbg::kprintf(char const*, ...)+0x1c>
c00122bb:	83 c4 0c             	add    esp,0xc
c00122be:	5b                   	pop    ebx
c00122bf:	5e                   	pop    esi
c00122c0:	5f                   	pop    edi
c00122c1:	5d                   	pop    ebp
c00122c2:	c3                   	ret    
c00122c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122c7:	89 d0                	mov    eax,edx
c00122c9:	83 c2 04             	add    edx,0x4
c00122cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122d0:	ff 30                	push   DWORD PTR [eax]
c00122d2:	e8 44 ff ff ff       	call   c001221b <Dbg::logWriteInt(unsigned int)>
c00122d7:	58                   	pop    eax
c00122d8:	eb d9                	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c00122da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122de:	89 d0                	mov    eax,edx
c00122e0:	83 c2 04             	add    edx,0x4
c00122e3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122ea:	50                   	push   eax
c00122eb:	e8 f7 fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c00122f0:	58                   	pop    eax
c00122f1:	eb c0                	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c00122f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122f7:	89 c8                	mov    eax,ecx
c00122f9:	83 c1 04             	add    ecx,0x4
c00122fc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012300:	ff 30                	push   DWORD PTR [eax]
c0012302:	e8 14 ff ff ff       	call   c001221b <Dbg::logWriteInt(unsigned int)>
c0012307:	5f                   	pop    edi
c0012308:	eb a9                	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c001230a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001230e:	89 c8                	mov    eax,ecx
c0012310:	83 c1 04             	add    ecx,0x4
c0012313:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012317:	6a 10                	push   0x10
c0012319:	ff 30                	push   DWORD PTR [eax]
c001231b:	e8 18 ff ff ff       	call   c0012238 <Dbg::logWriteIntBase(unsigned int, int)>
c0012320:	59                   	pop    ecx
c0012321:	5f                   	pop    edi
c0012322:	eb 8f                	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012328:	89 d0                	mov    eax,edx
c001232a:	83 c2 08             	add    edx,0x8
c001232d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012331:	6a 10                	push   0x10
c0012333:	ff 30                	push   DWORD PTR [eax]
c0012335:	e8 fe fe ff ff       	call   c0012238 <Dbg::logWriteIntBase(unsigned int, int)>
c001233a:	58                   	pop    eax
c001233b:	5a                   	pop    edx
c001233c:	e9 72 ff ff ff       	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012341:	6a 25                	push   0x25
c0012343:	e8 9f fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c0012348:	58                   	pop    eax
c0012349:	e9 65 ff ff ff       	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c001234e:	6a 25                	push   0x25
c0012350:	e8 92 fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c0012355:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012358:	50                   	push   eax
c0012359:	e8 89 fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c001235e:	5a                   	pop    edx
c001235f:	59                   	pop    ecx
c0012360:	e9 4e ff ff ff       	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012365:	50                   	push   eax
c0012366:	89 eb                	mov    ebx,ebp
c0012368:	e8 7a fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c001236d:	89 fd                	mov    ebp,edi
c001236f:	58                   	pop    eax
c0012370:	e9 3e ff ff ff       	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012375:	90                   	nop

c0012376 <File::read(unsigned long long, void*, int*)>:
c0012376:	53                   	push   ebx
c0012377:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001237b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001237f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012386:	3c 19                	cmp    al,0x19
c0012388:	77 35                	ja     c00123bf <File::read(unsigned long long, void*, int*)+0x49>
c001238a:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c0012391:	85 c0                	test   eax,eax
c0012393:	74 2a                	je     c00123bf <File::read(unsigned long long, void*, int*)+0x49>
c0012395:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001239b:	85 c0                	test   eax,eax
c001239d:	74 20                	je     c00123bf <File::read(unsigned long long, void*, int*)+0x49>
c001239f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123a3:	74 21                	je     c00123c6 <File::read(unsigned long long, void*, int*)+0x50>
c00123a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123a7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123ab:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123b9:	5b                   	pop    ebx
c00123ba:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123bd:	ff e0                	jmp    eax
c00123bf:	b8 0b 00 00 00       	mov    eax,0xb
c00123c4:	eb 05                	jmp    c00123cb <File::read(unsigned long long, void*, int*)+0x55>
c00123c6:	b8 05 00 00 00       	mov    eax,0x5
c00123cb:	5b                   	pop    ebx
c00123cc:	c3                   	ret    
c00123cd:	90                   	nop

c00123ce <File::write(unsigned long long, void*, int*)>:
c00123ce:	53                   	push   ebx
c00123cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123de:	3c 19                	cmp    al,0x19
c00123e0:	77 35                	ja     c0012417 <File::write(unsigned long long, void*, int*)+0x49>
c00123e2:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c00123e9:	85 c0                	test   eax,eax
c00123eb:	74 2a                	je     c0012417 <File::write(unsigned long long, void*, int*)+0x49>
c00123ed:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123f3:	85 c0                	test   eax,eax
c00123f5:	74 20                	je     c0012417 <File::write(unsigned long long, void*, int*)+0x49>
c00123f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123fb:	74 21                	je     c001241e <File::write(unsigned long long, void*, int*)+0x50>
c00123fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012403:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012409:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001240d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012411:	5b                   	pop    ebx
c0012412:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012415:	ff e0                	jmp    eax
c0012417:	b8 0b 00 00 00       	mov    eax,0xb
c001241c:	eb 05                	jmp    c0012423 <File::write(unsigned long long, void*, int*)+0x55>
c001241e:	b8 05 00 00 00       	mov    eax,0x5
c0012423:	5b                   	pop    ebx
c0012424:	c3                   	ret    
c0012425:	90                   	nop

c0012426 <Directory::read(unsigned long long, void*, int*)>:
c0012426:	53                   	push   ebx
c0012427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001242b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001242f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012436:	3c 19                	cmp    al,0x19
c0012438:	77 35                	ja     c001246f <Directory::read(unsigned long long, void*, int*)+0x49>
c001243a:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c0012441:	85 c0                	test   eax,eax
c0012443:	74 2a                	je     c001246f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012445:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001244b:	85 c0                	test   eax,eax
c001244d:	74 20                	je     c001246f <Directory::read(unsigned long long, void*, int*)+0x49>
c001244f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012453:	74 21                	je     c0012476 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012455:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012457:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001245b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012461:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012465:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012469:	5b                   	pop    ebx
c001246a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001246d:	ff e0                	jmp    eax
c001246f:	b8 0b 00 00 00       	mov    eax,0xb
c0012474:	eb 05                	jmp    c001247b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012476:	b8 05 00 00 00       	mov    eax,0x5
c001247b:	5b                   	pop    ebx
c001247c:	c3                   	ret    
c001247d:	90                   	nop

c001247e <Directory::write(unsigned long long, void*, int*)>:
c001247e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012482:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012489:	b8 0b 00 00 00       	mov    eax,0xb
c001248e:	80 fa 19             	cmp    dl,0x19
c0012491:	77 18                	ja     c00124ab <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012493:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c001249a:	85 d2                	test   edx,edx
c001249c:	74 0d                	je     c00124ab <Directory::write(unsigned long long, void*, int*)+0x2d>
c001249e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00124a5:	19 c0                	sbb    eax,eax
c00124a7:	83 e0 0a             	and    eax,0xa
c00124aa:	40                   	inc    eax
c00124ab:	c3                   	ret    

c00124ac <File::isAtty()>:
c00124ac:	31 c0                	xor    eax,eax
c00124ae:	c3                   	ret    
c00124af:	90                   	nop

c00124b0 <Directory::isAtty()>:
c00124b0:	31 c0                	xor    eax,eax
c00124b2:	c3                   	ret    
c00124b3:	90                   	nop

c00124b4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124b4:	b8 0a 00 00 00       	mov    eax,0xa
c00124b9:	c3                   	ret    

c00124ba <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124ba:	b8 0a 00 00 00       	mov    eax,0xa
c00124bf:	c3                   	ret    

c00124c0 <File::~File()>:
c00124c0:	83 ec 0c             	sub    esp,0xc
c00124c3:	ba 20 73 02 c0       	mov    edx,0xc0027320
c00124c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cc:	89 10                	mov    DWORD PTR [eax],edx
c00124ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d2:	83 ec 0c             	sub    esp,0xc
c00124d5:	50                   	push   eax
c00124d6:	e8 49 eb ff ff       	call   c0011024 <UnixFile::~UnixFile()>
c00124db:	83 c4 10             	add    esp,0x10
c00124de:	90                   	nop
c00124df:	83 c4 0c             	add    esp,0xc
c00124e2:	c3                   	ret    
c00124e3:	90                   	nop

c00124e4 <File::~File()>:
c00124e4:	83 ec 0c             	sub    esp,0xc
c00124e7:	83 ec 0c             	sub    esp,0xc
c00124ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ee:	e8 cd ff ff ff       	call   c00124c0 <File::~File()>
c00124f3:	83 c4 10             	add    esp,0x10
c00124f6:	83 ec 08             	sub    esp,0x8
c00124f9:	68 14 01 00 00       	push   0x114
c00124fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012502:	e8 70 fc ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0012507:	83 c4 10             	add    esp,0x10
c001250a:	83 c4 0c             	add    esp,0xc
c001250d:	c3                   	ret    

c001250e <Directory::~Directory()>:
c001250e:	83 ec 0c             	sub    esp,0xc
c0012511:	ba 3c 73 02 c0       	mov    edx,0xc002733c
c0012516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251a:	89 10                	mov    DWORD PTR [eax],edx
c001251c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012520:	83 ec 0c             	sub    esp,0xc
c0012523:	50                   	push   eax
c0012524:	e8 fb ea ff ff       	call   c0011024 <UnixFile::~UnixFile()>
c0012529:	83 c4 10             	add    esp,0x10
c001252c:	90                   	nop
c001252d:	83 c4 0c             	add    esp,0xc
c0012530:	c3                   	ret    
c0012531:	90                   	nop

c0012532 <Directory::~Directory()>:
c0012532:	83 ec 0c             	sub    esp,0xc
c0012535:	83 ec 0c             	sub    esp,0xc
c0012538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001253c:	e8 cd ff ff ff       	call   c001250e <Directory::~Directory()>
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	83 ec 08             	sub    esp,0x8
c0012547:	68 14 01 00 00       	push   0x114
c001254c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012550:	e8 22 fc ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0012555:	83 c4 10             	add    esp,0x10
c0012558:	83 c4 0c             	add    esp,0xc
c001255b:	c3                   	ret    

c001255c <Filesystem::Filesystem()>:
c001255c:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c0012561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012565:	89 10                	mov    DWORD PTR [eax],edx
c0012567:	8b 15 68 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a568
c001256d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012571:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012578:	a3 68 a5 02 c0       	mov    ds:0xc002a568,eax
c001257d:	90                   	nop
c001257e:	c3                   	ret    
c001257f:	90                   	nop

c0012580 <Filesystem::~Filesystem()>:
c0012580:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c0012585:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012589:	89 10                	mov    DWORD PTR [eax],edx
c001258b:	90                   	nop
c001258c:	c3                   	ret    
c001258d:	90                   	nop

c001258e <Filesystem::~Filesystem()>:
c001258e:	83 ec 0c             	sub    esp,0xc
c0012591:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012595:	e8 e6 ff ff ff       	call   c0012580 <Filesystem::~Filesystem()>
c001259a:	83 c4 04             	add    esp,0x4
c001259d:	83 ec 08             	sub    esp,0x8
c00125a0:	6a 08                	push   0x8
c00125a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a6:	e8 cc fb ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00125ab:	83 c4 10             	add    esp,0x10
c00125ae:	83 c4 0c             	add    esp,0xc
c00125b1:	c3                   	ret    

c00125b2 <initVFS()>:
c00125b2:	83 ec 18             	sub    esp,0x18
c00125b5:	6a 08                	push   0x8
c00125b7:	e8 ac fb ff ff       	call   c0012168 <operator new(unsigned long)>
c00125bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00125bf:	e8 60 c1 00 00       	call   c001e724 <FAT::FAT()>
c00125c4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125cb:	e8 98 fb ff ff       	call   c0012168 <operator new(unsigned long)>
c00125d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00125d3:	e8 c2 d3 00 00       	call   c001f99a <ISO9660::ISO9660()>
c00125d8:	83 c4 1c             	add    esp,0x1c
c00125db:	c3                   	ret    

c00125dc <standardiseFiles(char*, char const*, char const*)>:
c00125dc:	55                   	push   ebp
c00125dd:	57                   	push   edi
c00125de:	56                   	push   esi
c00125df:	53                   	push   ebx
c00125e0:	81 ec 10 04 00 00    	sub    esp,0x410
c00125e6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125ed:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125f4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125fb:	68 00 04 00 00       	push   0x400
c0012600:	6a 00                	push   0x0
c0012602:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012606:	56                   	push   esi
c0012607:	e8 e0 e0 fe ff       	call   c00006ec <memset>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012613:	75 0b                	jne    c0012620 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012615:	50                   	push   eax
c0012616:	50                   	push   eax
c0012617:	57                   	push   edi
c0012618:	56                   	push   esi
c0012619:	e8 6d e1 fe ff       	call   c000078b <strcpy>
c001261e:	eb 41                	jmp    c0012661 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012620:	8a 07                	mov    al,BYTE PTR [edi]
c0012622:	3c 5c                	cmp    al,0x5c
c0012624:	74 04                	je     c001262a <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012626:	3c 2f                	cmp    al,0x2f
c0012628:	75 18                	jne    c0012642 <standardiseFiles(char*, char const*, char const*)+0x66>
c001262a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001262d:	3c 60                	cmp    al,0x60
c001262f:	7e 03                	jle    c0012634 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012631:	83 e8 20             	sub    eax,0x20
c0012634:	88 04 24             	mov    BYTE PTR [esp],al
c0012637:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001263e:	50                   	push   eax
c001263f:	50                   	push   eax
c0012640:	eb 18                	jmp    c001265a <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012642:	50                   	push   eax
c0012643:	50                   	push   eax
c0012644:	55                   	push   ebp
c0012645:	56                   	push   esi
c0012646:	e8 40 e1 fe ff       	call   c000078b <strcpy>
c001264b:	5a                   	pop    edx
c001264c:	59                   	pop    ecx
c001264d:	68 cc 85 02 c0       	push   0xc00285cc
c0012652:	56                   	push   esi
c0012653:	e8 ea e1 fe ff       	call   c0000842 <strcat>
c0012658:	5d                   	pop    ebp
c0012659:	58                   	pop    eax
c001265a:	57                   	push   edi
c001265b:	56                   	push   esi
c001265c:	e8 e1 e1 fe ff       	call   c0000842 <strcat>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012667:	3c 60                	cmp    al,0x60
c0012669:	7e 03                	jle    c001266e <standardiseFiles(char*, char const*, char const*)+0x92>
c001266b:	83 e8 20             	sub    eax,0x20
c001266e:	88 04 24             	mov    BYTE PTR [esp],al
c0012671:	88 03                	mov    BYTE PTR [ebx],al
c0012673:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001267a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012680:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012684:	bf 03 00 00 00       	mov    edi,0x3
c0012689:	b8 03 00 00 00       	mov    eax,0x3
c001268e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012691:	84 d2                	test   dl,dl
c0012693:	0f 84 91 00 00 00    	je     c001272a <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012699:	8d 4f 01             	lea    ecx,[edi+0x1]
c001269c:	80 fa 5c             	cmp    dl,0x5c
c001269f:	74 05                	je     c00126a6 <standardiseFiles(char*, char const*, char const*)+0xca>
c00126a1:	80 fa 2f             	cmp    dl,0x2f
c00126a4:	75 12                	jne    c00126b8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a6:	89 c5                	mov    ebp,eax
c00126a8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126ad:	74 09                	je     c00126b8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126af:	40                   	inc    eax
c00126b0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126b4:	89 cf                	mov    edi,ecx
c00126b6:	eb d6                	jmp    c001268e <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126b8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126bd:	75 5b                	jne    c001271a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126bf:	80 fa 2e             	cmp    dl,0x2e
c00126c2:	75 56                	jne    c001271a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126c4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126c8:	74 19                	je     c00126e3 <standardiseFiles(char*, char const*, char const*)+0x107>
c00126ca:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126cf:	74 53                	je     c0012724 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126d1:	89 f9                	mov    ecx,edi
c00126d3:	41                   	inc    ecx
c00126d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126d7:	80 fa 2f             	cmp    dl,0x2f
c00126da:	74 f7                	je     c00126d3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126dc:	80 fa 5c             	cmp    dl,0x5c
c00126df:	74 f2                	je     c00126d3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126e1:	eb d1                	jmp    c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126e3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126e8:	74 3a                	je     c0012724 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126ea:	83 f8 03             	cmp    eax,0x3
c00126ed:	74 c5                	je     c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126ef:	41                   	inc    ecx
c00126f0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126f3:	80 fa 2f             	cmp    dl,0x2f
c00126f6:	74 f7                	je     c00126ef <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f8:	80 fa 5c             	cmp    dl,0x5c
c00126fb:	74 f2                	je     c00126ef <standardiseFiles(char*, char const*, char const*)+0x113>
c00126fd:	48                   	dec    eax
c00126fe:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012702:	75 06                	jne    c001270a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012704:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012708:	eb f3                	jmp    c00126fd <standardiseFiles(char*, char const*, char const*)+0x121>
c001270a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001270e:	74 07                	je     c0012717 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012710:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012714:	48                   	dec    eax
c0012715:	eb f3                	jmp    c001270a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012717:	40                   	inc    eax
c0012718:	eb 9a                	jmp    c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271a:	80 fa 2f             	cmp    dl,0x2f
c001271d:	74 95                	je     c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271f:	80 fa 5c             	cmp    dl,0x5c
c0012722:	74 90                	je     c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012724:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012727:	40                   	inc    eax
c0012728:	eb 8a                	jmp    c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001272a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001272e:	83 ec 0c             	sub    esp,0xc
c0012731:	53                   	push   ebx
c0012732:	e8 d2 df fe ff       	call   c0000709 <strlen>
c0012737:	83 c4 10             	add    esp,0x10
c001273a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001273f:	75 26                	jne    c0012767 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012741:	83 ec 0c             	sub    esp,0xc
c0012744:	53                   	push   ebx
c0012745:	e8 bf df fe ff       	call   c0000709 <strlen>
c001274a:	83 c4 10             	add    esp,0x10
c001274d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012752:	74 26                	je     c001277a <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012754:	83 ec 0c             	sub    esp,0xc
c0012757:	53                   	push   ebx
c0012758:	e8 ac df fe ff       	call   c0000709 <strlen>
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012765:	eb c7                	jmp    c001272e <standardiseFiles(char*, char const*, char const*)+0x152>
c0012767:	83 ec 0c             	sub    esp,0xc
c001276a:	53                   	push   ebx
c001276b:	e8 99 df fe ff       	call   c0000709 <strlen>
c0012770:	83 c4 10             	add    esp,0x10
c0012773:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012778:	74 c7                	je     c0012741 <standardiseFiles(char*, char const*, char const*)+0x165>
c001277a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012780:	5b                   	pop    ebx
c0012781:	5e                   	pop    esi
c0012782:	5f                   	pop    edi
c0012783:	5d                   	pop    ebp
c0012784:	c3                   	ret    
c0012785:	90                   	nop

c0012786 <File::File(char const*, Process*)>:
c0012786:	83 ec 0c             	sub    esp,0xc
c0012789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278d:	83 ec 08             	sub    esp,0x8
c0012790:	6a 00                	push   0x0
c0012792:	50                   	push   eax
c0012793:	e8 ea e6 ff ff       	call   c0010e82 <UnixFile::UnixFile(int)>
c0012798:	83 c4 10             	add    esp,0x10
c001279b:	ba 20 73 02 c0       	mov    edx,0xc0027320
c00127a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a4:	89 10                	mov    DWORD PTR [eax],edx
c00127a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127aa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b4:	83 c0 0d             	add    eax,0xd
c00127b7:	83 ec 04             	sub    esp,0x4
c00127ba:	52                   	push   edx
c00127bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127bf:	50                   	push   eax
c00127c0:	e8 17 fe ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c00127c5:	83 c4 10             	add    esp,0x10
c00127c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127cc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127cf:	8d 50 bf             	lea    edx,[eax-0x41]
c00127d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127e4:	90                   	nop
c00127e5:	83 c4 0c             	add    esp,0xc
c00127e8:	c3                   	ret    
c00127e9:	90                   	nop

c00127ea <File::open(FileOpenMode)>:
c00127ea:	53                   	push   ebx
c00127eb:	b8 0b 00 00 00       	mov    eax,0xb
c00127f0:	83 ec 08             	sub    esp,0x8
c00127f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127f7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127fe:	80 fa 19             	cmp    dl,0x19
c0012801:	77 40                	ja     c0012843 <File::open(FileOpenMode)+0x59>
c0012803:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c001280a:	85 d2                	test   edx,edx
c001280c:	74 35                	je     c0012843 <File::open(FileOpenMode)+0x59>
c001280e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012814:	85 d2                	test   edx,edx
c0012816:	74 2b                	je     c0012843 <File::open(FileOpenMode)+0x59>
c0012818:	b8 06 00 00 00       	mov    eax,0x6
c001281d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012821:	75 20                	jne    c0012843 <File::open(FileOpenMode)+0x59>
c0012823:	8b 02                	mov    eax,DWORD PTR [edx]
c0012825:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001282b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001282f:	51                   	push   ecx
c0012830:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012833:	51                   	push   ecx
c0012834:	52                   	push   edx
c0012835:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012838:	83 c4 10             	add    esp,0x10
c001283b:	85 c0                	test   eax,eax
c001283d:	75 04                	jne    c0012843 <File::open(FileOpenMode)+0x59>
c001283f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012843:	83 c4 08             	add    esp,0x8
c0012846:	5b                   	pop    ebx
c0012847:	c3                   	ret    

c0012848 <File::close()>:
c0012848:	53                   	push   ebx
c0012849:	b8 0b 00 00 00       	mov    eax,0xb
c001284e:	83 ec 08             	sub    esp,0x8
c0012851:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012855:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001285c:	80 fa 19             	cmp    dl,0x19
c001285f:	77 41                	ja     c00128a2 <File::close()+0x5a>
c0012861:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012868:	85 db                	test   ebx,ebx
c001286a:	74 36                	je     c00128a2 <File::close()+0x5a>
c001286c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012873:	74 2d                	je     c00128a2 <File::close()+0x5a>
c0012875:	b8 05 00 00 00       	mov    eax,0x5
c001287a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001287e:	74 22                	je     c00128a2 <File::close()+0x5a>
c0012880:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012884:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c001288b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012891:	53                   	push   ebx
c0012892:	53                   	push   ebx
c0012893:	8b 10                	mov    edx,DWORD PTR [eax]
c0012895:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001289b:	50                   	push   eax
c001289c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001289f:	83 c4 10             	add    esp,0x10
c00128a2:	83 c4 08             	add    esp,0x8
c00128a5:	5b                   	pop    ebx
c00128a6:	c3                   	ret    
c00128a7:	90                   	nop

c00128a8 <File::seek(unsigned long long)>:
c00128a8:	56                   	push   esi
c00128a9:	53                   	push   ebx
c00128aa:	b8 0b 00 00 00       	mov    eax,0xb
c00128af:	51                   	push   ecx
c00128b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128b8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128c3:	80 fa 19             	cmp    dl,0x19
c00128c6:	77 31                	ja     c00128f9 <File::seek(unsigned long long)+0x51>
c00128c8:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c00128cf:	85 d2                	test   edx,edx
c00128d1:	74 26                	je     c00128f9 <File::seek(unsigned long long)+0x51>
c00128d3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128d9:	85 d2                	test   edx,edx
c00128db:	74 1c                	je     c00128f9 <File::seek(unsigned long long)+0x51>
c00128dd:	b8 05 00 00 00       	mov    eax,0x5
c00128e2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128e6:	74 11                	je     c00128f9 <File::seek(unsigned long long)+0x51>
c00128e8:	8b 02                	mov    eax,DWORD PTR [edx]
c00128ea:	53                   	push   ebx
c00128eb:	51                   	push   ecx
c00128ec:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128f2:	52                   	push   edx
c00128f3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	5a                   	pop    edx
c00128fa:	5b                   	pop    ebx
c00128fb:	5e                   	pop    esi
c00128fc:	c3                   	ret    
c00128fd:	90                   	nop

c00128fe <File::tell(unsigned long long*)>:
c00128fe:	83 ec 0c             	sub    esp,0xc
c0012901:	b8 0b 00 00 00       	mov    eax,0xb
c0012906:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001290a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012911:	80 fa 19             	cmp    dl,0x19
c0012914:	77 34                	ja     c001294a <File::tell(unsigned long long*)+0x4c>
c0012916:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c001291d:	85 d2                	test   edx,edx
c001291f:	74 29                	je     c001294a <File::tell(unsigned long long*)+0x4c>
c0012921:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012927:	85 d2                	test   edx,edx
c0012929:	74 1f                	je     c001294a <File::tell(unsigned long long*)+0x4c>
c001292b:	b8 05 00 00 00       	mov    eax,0x5
c0012930:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012934:	74 14                	je     c001294a <File::tell(unsigned long long*)+0x4c>
c0012936:	50                   	push   eax
c0012937:	8b 02                	mov    eax,DWORD PTR [edx]
c0012939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001293d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012943:	52                   	push   edx
c0012944:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012947:	83 c4 10             	add    esp,0x10
c001294a:	83 c4 0c             	add    esp,0xc
c001294d:	c3                   	ret    

c001294e <File::rewind()>:
c001294e:	83 ec 10             	sub    esp,0x10
c0012951:	6a 00                	push   0x0
c0012953:	6a 00                	push   0x0
c0012955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012959:	e8 4a ff ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001295e:	83 c4 1c             	add    esp,0x1c
c0012961:	c3                   	ret    

c0012962 <File::unlink()>:
c0012962:	83 ec 0c             	sub    esp,0xc
c0012965:	b8 0b 00 00 00       	mov    eax,0xb
c001296a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001296e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012975:	80 f9 19             	cmp    cl,0x19
c0012978:	77 2f                	ja     c00129a9 <File::unlink()+0x47>
c001297a:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012981:	85 c9                	test   ecx,ecx
c0012983:	74 24                	je     c00129a9 <File::unlink()+0x47>
c0012985:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001298b:	85 c9                	test   ecx,ecx
c001298d:	74 1a                	je     c00129a9 <File::unlink()+0x47>
c001298f:	b8 06 00 00 00       	mov    eax,0x6
c0012994:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012998:	75 0f                	jne    c00129a9 <File::unlink()+0x47>
c001299a:	83 c2 0d             	add    edx,0xd
c001299d:	50                   	push   eax
c001299e:	50                   	push   eax
c001299f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129a1:	52                   	push   edx
c00129a2:	51                   	push   ecx
c00129a3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00129a6:	83 c4 10             	add    esp,0x10
c00129a9:	83 c4 0c             	add    esp,0xc
c00129ac:	c3                   	ret    
c00129ad:	90                   	nop

c00129ae <File::rename(char const*)>:
c00129ae:	83 ec 0c             	sub    esp,0xc
c00129b1:	b8 0b 00 00 00       	mov    eax,0xb
c00129b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129c1:	80 f9 19             	cmp    cl,0x19
c00129c4:	77 32                	ja     c00129f8 <File::rename(char const*)+0x4a>
c00129c6:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c00129cd:	85 c9                	test   ecx,ecx
c00129cf:	74 27                	je     c00129f8 <File::rename(char const*)+0x4a>
c00129d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129d7:	85 c9                	test   ecx,ecx
c00129d9:	74 1d                	je     c00129f8 <File::rename(char const*)+0x4a>
c00129db:	b8 06 00 00 00       	mov    eax,0x6
c00129e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129e4:	75 12                	jne    c00129f8 <File::rename(char const*)+0x4a>
c00129e6:	83 c2 0d             	add    edx,0xd
c00129e9:	50                   	push   eax
c00129ea:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129f0:	52                   	push   edx
c00129f1:	51                   	push   ecx
c00129f2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129f5:	83 c4 10             	add    esp,0x10
c00129f8:	83 c4 0c             	add    esp,0xc
c00129fb:	c3                   	ret    

c00129fc <File::chfatattr(unsigned char, unsigned char)>:
c00129fc:	57                   	push   edi
c00129fd:	b8 0b 00 00 00       	mov    eax,0xb
c0012a02:	56                   	push   esi
c0012a03:	53                   	push   ebx
c0012a04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a13:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a17:	80 f9 19             	cmp    cl,0x19
c0012a1a:	77 37                	ja     c0012a53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a1c:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a23:	85 c9                	test   ecx,ecx
c0012a25:	74 2c                	je     c0012a53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a27:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a2d:	85 c9                	test   ecx,ecx
c0012a2f:	74 22                	je     c0012a53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a31:	b8 06 00 00 00       	mov    eax,0x6
c0012a36:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a3a:	75 17                	jne    c0012a53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a3c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a3e:	89 f0                	mov    eax,esi
c0012a40:	83 c2 0d             	add    edx,0xd
c0012a43:	0f b6 f0             	movzx  esi,al
c0012a46:	0f b6 db             	movzx  ebx,bl
c0012a49:	56                   	push   esi
c0012a4a:	53                   	push   ebx
c0012a4b:	52                   	push   edx
c0012a4c:	51                   	push   ecx
c0012a4d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a50:	83 c4 10             	add    esp,0x10
c0012a53:	5b                   	pop    ebx
c0012a54:	5e                   	pop    esi
c0012a55:	5f                   	pop    edi
c0012a56:	c3                   	ret    
c0012a57:	90                   	nop

c0012a58 <File::exists()>:
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	31 c0                	xor    eax,eax
c0012a5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a61:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a68:	80 f9 19             	cmp    cl,0x19
c0012a6b:	77 24                	ja     c0012a91 <File::exists()+0x39>
c0012a6d:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a74:	85 c9                	test   ecx,ecx
c0012a76:	74 19                	je     c0012a91 <File::exists()+0x39>
c0012a78:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a7e:	85 c9                	test   ecx,ecx
c0012a80:	74 0f                	je     c0012a91 <File::exists()+0x39>
c0012a82:	83 c2 0d             	add    edx,0xd
c0012a85:	50                   	push   eax
c0012a86:	50                   	push   eax
c0012a87:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a89:	52                   	push   edx
c0012a8a:	51                   	push   ecx
c0012a8b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a8e:	83 c4 10             	add    esp,0x10
c0012a91:	83 c4 0c             	add    esp,0xc
c0012a94:	c3                   	ret    
c0012a95:	90                   	nop

c0012a96 <File::stat(unsigned long long*, bool*)>:
c0012a96:	56                   	push   esi
c0012a97:	53                   	push   ebx
c0012a98:	50                   	push   eax
c0012a99:	b8 0b 00 00 00       	mov    eax,0xb
c0012a9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012aa2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012aa6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ab1:	80 f9 19             	cmp    cl,0x19
c0012ab4:	77 3d                	ja     c0012af3 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ab6:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012abd:	85 c9                	test   ecx,ecx
c0012abf:	74 32                	je     c0012af3 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ac1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ac7:	85 c9                	test   ecx,ecx
c0012ac9:	74 28                	je     c0012af3 <File::stat(unsigned long long*, bool*)+0x5d>
c0012acb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012acd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ad1:	74 13                	je     c0012ae6 <File::stat(unsigned long long*, bool*)+0x50>
c0012ad3:	83 ec 04             	sub    esp,0x4
c0012ad6:	56                   	push   esi
c0012ad7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012add:	51                   	push   ecx
c0012ade:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ae1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ae4:	eb 0a                	jmp    c0012af0 <File::stat(unsigned long long*, bool*)+0x5a>
c0012ae6:	53                   	push   ebx
c0012ae7:	83 c2 0d             	add    edx,0xd
c0012aea:	56                   	push   esi
c0012aeb:	52                   	push   edx
c0012aec:	51                   	push   ecx
c0012aed:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012af0:	83 c4 10             	add    esp,0x10
c0012af3:	5a                   	pop    edx
c0012af4:	5b                   	pop    ebx
c0012af5:	5e                   	pop    esi
c0012af6:	c3                   	ret    

c0012af7 <getcwd(Process*, char*, int)>:
c0012af7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012afb:	31 c0                	xor    eax,eax
c0012afd:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b00:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b04:	7d 15                	jge    c0012b1b <getcwd(Process*, char*, int)+0x24>
c0012b06:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b0a:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b11:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b14:	84 c9                	test   cl,cl
c0012b16:	74 06                	je     c0012b1e <getcwd(Process*, char*, int)+0x27>
c0012b18:	40                   	inc    eax
c0012b19:	eb e2                	jmp    c0012afd <getcwd(Process*, char*, int)+0x6>
c0012b1b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b1e:	31 c0                	xor    eax,eax
c0012b20:	c3                   	ret    

c0012b21 <setcwd(Process*, char*)>:
c0012b21:	55                   	push   ebp
c0012b22:	57                   	push   edi
c0012b23:	56                   	push   esi
c0012b24:	53                   	push   ebx
c0012b25:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b2b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b32:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b38:	57                   	push   edi
c0012b39:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b40:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b44:	56                   	push   esi
c0012b45:	e8 92 fa ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c0012b4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b4d:	e8 b7 db fe ff       	call   c0000709 <strlen>
c0012b52:	83 c4 10             	add    esp,0x10
c0012b55:	83 f8 02             	cmp    eax,0x2
c0012b58:	77 17                	ja     c0012b71 <setcwd(Process*, char*)+0x50>
c0012b5a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b5f:	83 e8 41             	sub    eax,0x41
c0012b62:	83 f8 19             	cmp    eax,0x19
c0012b65:	76 24                	jbe    c0012b8b <setcwd(Process*, char*)+0x6a>
c0012b67:	b8 03 00 00 00       	mov    eax,0x3
c0012b6c:	e9 cb 00 00 00       	jmp    c0012c3c <setcwd(Process*, char*)+0x11b>
c0012b71:	83 ec 0c             	sub    esp,0xc
c0012b74:	56                   	push   esi
c0012b75:	e8 8f db fe ff       	call   c0000709 <strlen>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	83 f8 03             	cmp    eax,0x3
c0012b80:	75 33                	jne    c0012bb5 <setcwd(Process*, char*)+0x94>
c0012b82:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b87:	75 2c                	jne    c0012bb5 <setcwd(Process*, char*)+0x94>
c0012b89:	eb cf                	jmp    c0012b5a <setcwd(Process*, char*)+0x39>
c0012b8b:	8b 14 85 00 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5600]
c0012b92:	b8 05 00 00 00       	mov    eax,0x5
c0012b97:	85 d2                	test   edx,edx
c0012b99:	0f 84 9d 00 00 00    	je     c0012c3c <setcwd(Process*, char*)+0x11b>
c0012b9f:	b8 06 00 00 00       	mov    eax,0x6
c0012ba4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012bab:	0f 84 8b 00 00 00    	je     c0012c3c <setcwd(Process*, char*)+0x11b>
c0012bb1:	51                   	push   ecx
c0012bb2:	51                   	push   ecx
c0012bb3:	eb 7b                	jmp    c0012c30 <setcwd(Process*, char*)+0x10f>
c0012bb5:	83 ec 0c             	sub    esp,0xc
c0012bb8:	68 14 01 00 00       	push   0x114
c0012bbd:	e8 a6 f5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0012bc2:	83 c4 0c             	add    esp,0xc
c0012bc5:	89 c3                	mov    ebx,eax
c0012bc7:	55                   	push   ebp
c0012bc8:	56                   	push   esi
c0012bc9:	50                   	push   eax
c0012bca:	e8 b7 fb ff ff       	call   c0012786 <File::File(char const*, Process*)>
c0012bcf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bd4:	83 c4 0c             	add    esp,0xc
c0012bd7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bdb:	50                   	push   eax
c0012bdc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012be0:	50                   	push   eax
c0012be1:	53                   	push   ebx
c0012be2:	e8 af fe ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c0012be7:	83 c4 10             	add    esp,0x10
c0012bea:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bec:	83 f8 02             	cmp    eax,0x2
c0012bef:	75 09                	jne    c0012bfa <setcwd(Process*, char*)+0xd9>
c0012bf1:	83 ec 0c             	sub    esp,0xc
c0012bf4:	53                   	push   ebx
c0012bf5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012bf8:	eb 0d                	jmp    c0012c07 <setcwd(Process*, char*)+0xe6>
c0012bfa:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012bfd:	85 c0                	test   eax,eax
c0012bff:	74 10                	je     c0012c11 <setcwd(Process*, char*)+0xf0>
c0012c01:	83 ec 0c             	sub    esp,0xc
c0012c04:	53                   	push   ebx
c0012c05:	ff d2                	call   edx
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	b8 01 00 00 00       	mov    eax,0x1
c0012c0f:	eb 2b                	jmp    c0012c3c <setcwd(Process*, char*)+0x11b>
c0012c11:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c16:	75 10                	jne    c0012c28 <setcwd(Process*, char*)+0x107>
c0012c18:	83 ec 0c             	sub    esp,0xc
c0012c1b:	53                   	push   ebx
c0012c1c:	ff d2                	call   edx
c0012c1e:	83 c4 10             	add    esp,0x10
c0012c21:	b8 02 00 00 00       	mov    eax,0x2
c0012c26:	eb 14                	jmp    c0012c3c <setcwd(Process*, char*)+0x11b>
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	53                   	push   ebx
c0012c2c:	ff d2                	call   edx
c0012c2e:	58                   	pop    eax
c0012c2f:	5a                   	pop    edx
c0012c30:	56                   	push   esi
c0012c31:	57                   	push   edi
c0012c32:	e8 54 db fe ff       	call   c000078b <strcpy>
c0012c37:	83 c4 10             	add    esp,0x10
c0012c3a:	31 c0                	xor    eax,eax
c0012c3c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c42:	5b                   	pop    ebx
c0012c43:	5e                   	pop    esi
c0012c44:	5f                   	pop    edi
c0012c45:	5d                   	pop    ebp
c0012c46:	c3                   	ret    
c0012c47:	90                   	nop

c0012c48 <Directory::Directory(char const*, Process*)>:
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c4f:	83 ec 08             	sub    esp,0x8
c0012c52:	6a 00                	push   0x0
c0012c54:	50                   	push   eax
c0012c55:	e8 28 e2 ff ff       	call   c0010e82 <UnixFile::UnixFile(int)>
c0012c5a:	83 c4 10             	add    esp,0x10
c0012c5d:	ba 3c 73 02 c0       	mov    edx,0xc002733c
c0012c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c66:	89 10                	mov    DWORD PTR [eax],edx
c0012c68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c6c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c76:	83 c0 0d             	add    eax,0xd
c0012c79:	83 ec 04             	sub    esp,0x4
c0012c7c:	52                   	push   edx
c0012c7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c81:	50                   	push   eax
c0012c82:	e8 55 f9 ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c91:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c98:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ca6:	90                   	nop
c0012ca7:	83 c4 0c             	add    esp,0xc
c0012caa:	c3                   	ret    
c0012cab:	90                   	nop

c0012cac <Directory::open()>:
c0012cac:	53                   	push   ebx
c0012cad:	b8 0b 00 00 00       	mov    eax,0xb
c0012cb2:	83 ec 08             	sub    esp,0x8
c0012cb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cb9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cc0:	80 fa 19             	cmp    dl,0x19
c0012cc3:	77 3d                	ja     c0012d02 <Directory::open()+0x56>
c0012cc5:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012ccc:	85 d2                	test   edx,edx
c0012cce:	74 32                	je     c0012d02 <Directory::open()+0x56>
c0012cd0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cd6:	85 d2                	test   edx,edx
c0012cd8:	74 28                	je     c0012d02 <Directory::open()+0x56>
c0012cda:	b8 06 00 00 00       	mov    eax,0x6
c0012cdf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ce3:	75 1d                	jne    c0012d02 <Directory::open()+0x56>
c0012ce5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ceb:	50                   	push   eax
c0012cec:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cee:	51                   	push   ecx
c0012cef:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cf2:	51                   	push   ecx
c0012cf3:	52                   	push   edx
c0012cf4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012cf7:	83 c4 10             	add    esp,0x10
c0012cfa:	85 c0                	test   eax,eax
c0012cfc:	75 04                	jne    c0012d02 <Directory::open()+0x56>
c0012cfe:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d02:	83 c4 08             	add    esp,0x8
c0012d05:	5b                   	pop    ebx
c0012d06:	c3                   	ret    
c0012d07:	90                   	nop

c0012d08 <Directory::close()>:
c0012d08:	53                   	push   ebx
c0012d09:	b8 0b 00 00 00       	mov    eax,0xb
c0012d0e:	83 ec 08             	sub    esp,0x8
c0012d11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d15:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d1c:	80 fa 19             	cmp    dl,0x19
c0012d1f:	77 41                	ja     c0012d62 <Directory::close()+0x5a>
c0012d21:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012d28:	85 db                	test   ebx,ebx
c0012d2a:	74 36                	je     c0012d62 <Directory::close()+0x5a>
c0012d2c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d33:	74 2d                	je     c0012d62 <Directory::close()+0x5a>
c0012d35:	b8 05 00 00 00       	mov    eax,0x5
c0012d3a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d3e:	74 22                	je     c0012d62 <Directory::close()+0x5a>
c0012d40:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d44:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c0012d4b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d51:	53                   	push   ebx
c0012d52:	53                   	push   ebx
c0012d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d55:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d5b:	50                   	push   eax
c0012d5c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d5f:	83 c4 10             	add    esp,0x10
c0012d62:	83 c4 08             	add    esp,0x8
c0012d65:	5b                   	pop    ebx
c0012d66:	c3                   	ret    
c0012d67:	90                   	nop

c0012d68 <Directory::unlink()>:
c0012d68:	83 ec 0c             	sub    esp,0xc
c0012d6b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d7b:	80 f9 19             	cmp    cl,0x19
c0012d7e:	77 2f                	ja     c0012daf <Directory::unlink()+0x47>
c0012d80:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012d87:	85 c9                	test   ecx,ecx
c0012d89:	74 24                	je     c0012daf <Directory::unlink()+0x47>
c0012d8b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d91:	85 c9                	test   ecx,ecx
c0012d93:	74 1a                	je     c0012daf <Directory::unlink()+0x47>
c0012d95:	b8 06 00 00 00       	mov    eax,0x6
c0012d9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d9e:	75 0f                	jne    c0012daf <Directory::unlink()+0x47>
c0012da0:	83 c2 0d             	add    edx,0xd
c0012da3:	50                   	push   eax
c0012da4:	50                   	push   eax
c0012da5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012da7:	52                   	push   edx
c0012da8:	51                   	push   ecx
c0012da9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012dac:	83 c4 10             	add    esp,0x10
c0012daf:	83 c4 0c             	add    esp,0xc
c0012db2:	c3                   	ret    
c0012db3:	90                   	nop

c0012db4 <Directory::rename(char const*)>:
c0012db4:	83 ec 0c             	sub    esp,0xc
c0012db7:	b8 0b 00 00 00       	mov    eax,0xb
c0012dbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dc7:	80 f9 19             	cmp    cl,0x19
c0012dca:	77 32                	ja     c0012dfe <Directory::rename(char const*)+0x4a>
c0012dcc:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012dd3:	85 c9                	test   ecx,ecx
c0012dd5:	74 27                	je     c0012dfe <Directory::rename(char const*)+0x4a>
c0012dd7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ddd:	85 c9                	test   ecx,ecx
c0012ddf:	74 1d                	je     c0012dfe <Directory::rename(char const*)+0x4a>
c0012de1:	b8 06 00 00 00       	mov    eax,0x6
c0012de6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dea:	75 12                	jne    c0012dfe <Directory::rename(char const*)+0x4a>
c0012dec:	83 c2 0d             	add    edx,0xd
c0012def:	50                   	push   eax
c0012df0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012df2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012df6:	52                   	push   edx
c0012df7:	51                   	push   ecx
c0012df8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012dfb:	83 c4 10             	add    esp,0x10
c0012dfe:	83 c4 0c             	add    esp,0xc
c0012e01:	c3                   	ret    

c0012e02 <Directory::exists()>:
c0012e02:	83 ec 0c             	sub    esp,0xc
c0012e05:	31 c0                	xor    eax,eax
c0012e07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e0b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e12:	80 f9 19             	cmp    cl,0x19
c0012e15:	77 24                	ja     c0012e3b <Directory::exists()+0x39>
c0012e17:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012e1e:	85 c9                	test   ecx,ecx
c0012e20:	74 19                	je     c0012e3b <Directory::exists()+0x39>
c0012e22:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e28:	85 c9                	test   ecx,ecx
c0012e2a:	74 0f                	je     c0012e3b <Directory::exists()+0x39>
c0012e2c:	83 c2 0d             	add    edx,0xd
c0012e2f:	50                   	push   eax
c0012e30:	50                   	push   eax
c0012e31:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e33:	52                   	push   edx
c0012e34:	51                   	push   ecx
c0012e35:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e38:	83 c4 10             	add    esp,0x10
c0012e3b:	83 c4 0c             	add    esp,0xc
c0012e3e:	c3                   	ret    
c0012e3f:	90                   	nop

c0012e40 <Directory::read(dirent*)>:
c0012e40:	83 ec 1c             	sub    esp,0x1c
c0012e43:	b8 0b 00 00 00       	mov    eax,0xb
c0012e48:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e4c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e53:	80 fa 19             	cmp    dl,0x19
c0012e56:	77 30                	ja     c0012e88 <Directory::read(dirent*)+0x48>
c0012e58:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012e5f:	85 d2                	test   edx,edx
c0012e61:	74 25                	je     c0012e88 <Directory::read(dirent*)+0x48>
c0012e63:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e6a:	74 1c                	je     c0012e88 <Directory::read(dirent*)+0x48>
c0012e6c:	83 ec 0c             	sub    esp,0xc
c0012e6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e71:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e75:	52                   	push   edx
c0012e76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e7a:	6a 00                	push   0x0
c0012e7c:	68 10 01 00 00       	push   0x110
c0012e81:	51                   	push   ecx
c0012e82:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e85:	83 c4 20             	add    esp,0x20
c0012e88:	83 c4 1c             	add    esp,0x1c
c0012e8b:	c3                   	ret    

c0012e8c <Directory::create()>:
c0012e8c:	83 ec 0c             	sub    esp,0xc
c0012e8f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e9f:	80 f9 19             	cmp    cl,0x19
c0012ea2:	77 2f                	ja     c0012ed3 <Directory::create()+0x47>
c0012ea4:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012eab:	85 c9                	test   ecx,ecx
c0012ead:	74 24                	je     c0012ed3 <Directory::create()+0x47>
c0012eaf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb5:	85 c9                	test   ecx,ecx
c0012eb7:	74 1a                	je     c0012ed3 <Directory::create()+0x47>
c0012eb9:	b8 06 00 00 00       	mov    eax,0x6
c0012ebe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ec2:	75 0f                	jne    c0012ed3 <Directory::create()+0x47>
c0012ec4:	83 c2 0d             	add    edx,0xd
c0012ec7:	50                   	push   eax
c0012ec8:	50                   	push   eax
c0012ec9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ecb:	52                   	push   edx
c0012ecc:	51                   	push   ecx
c0012ecd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	83 c4 0c             	add    esp,0xc
c0012ed6:	c3                   	ret    
c0012ed7:	90                   	nop

c0012ed8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ed8:	b8 0a 00 00 00       	mov    eax,0xa
c0012edd:	c3                   	ret    

c0012ede <Bus::Bus(char const*)>:
c0012ede:	83 ec 0c             	sub    esp,0xc
c0012ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee5:	83 ec 08             	sub    esp,0x8
c0012ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eec:	50                   	push   eax
c0012eed:	e8 60 09 00 00       	call   c0013852 <Device::Device(char const*)>
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	ba 58 73 02 c0       	mov    edx,0xc0027358
c0012efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efe:	89 10                	mov    DWORD PTR [eax],edx
c0012f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f04:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f0e:	90                   	nop
c0012f0f:	83 c4 0c             	add    esp,0xc
c0012f12:	c3                   	ret    
c0012f13:	90                   	nop

c0012f14 <Bus::~Bus()>:
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	ba 58 73 02 c0       	mov    edx,0xc0027358
c0012f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f20:	89 10                	mov    DWORD PTR [eax],edx
c0012f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f26:	83 ec 0c             	sub    esp,0xc
c0012f29:	50                   	push   eax
c0012f2a:	e8 d5 05 00 00       	call   c0013504 <Device::~Device()>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	90                   	nop
c0012f33:	83 c4 0c             	add    esp,0xc
c0012f36:	c3                   	ret    
c0012f37:	90                   	nop

c0012f38 <Bus::~Bus()>:
c0012f38:	83 ec 0c             	sub    esp,0xc
c0012f3b:	83 ec 0c             	sub    esp,0xc
c0012f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f42:	e8 cd ff ff ff       	call   c0012f14 <Bus::~Bus()>
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	83 ec 08             	sub    esp,0x8
c0012f4d:	68 58 01 00 00       	push   0x158
c0012f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f56:	e8 1c f2 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0012f5b:	83 c4 10             	add    esp,0x10
c0012f5e:	83 c4 0c             	add    esp,0xc
c0012f61:	c3                   	ret    

c0012f62 <Buzzer::Buzzer(char const*)>:
c0012f62:	83 ec 0c             	sub    esp,0xc
c0012f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f69:	83 ec 08             	sub    esp,0x8
c0012f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f70:	50                   	push   eax
c0012f71:	e8 dc 08 00 00       	call   c0013852 <Device::Device(char const*)>
c0012f76:	83 c4 10             	add    esp,0x10
c0012f79:	ba 84 73 02 c0       	mov    edx,0xc0027384
c0012f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f82:	89 10                	mov    DWORD PTR [eax],edx
c0012f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f88:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f96:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012fa0:	90                   	nop
c0012fa1:	83 c4 0c             	add    esp,0xc
c0012fa4:	c3                   	ret    
c0012fa5:	90                   	nop

c0012fa6 <Buzzer::~Buzzer()>:
c0012fa6:	83 ec 0c             	sub    esp,0xc
c0012fa9:	ba 84 73 02 c0       	mov    edx,0xc0027384
c0012fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb2:	89 10                	mov    DWORD PTR [eax],edx
c0012fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb8:	83 ec 0c             	sub    esp,0xc
c0012fbb:	50                   	push   eax
c0012fbc:	e8 43 05 00 00       	call   c0013504 <Device::~Device()>
c0012fc1:	83 c4 10             	add    esp,0x10
c0012fc4:	90                   	nop
c0012fc5:	83 c4 0c             	add    esp,0xc
c0012fc8:	c3                   	ret    
c0012fc9:	90                   	nop

c0012fca <Buzzer::~Buzzer()>:
c0012fca:	83 ec 0c             	sub    esp,0xc
c0012fcd:	83 ec 0c             	sub    esp,0xc
c0012fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd4:	e8 cd ff ff ff       	call   c0012fa6 <Buzzer::~Buzzer()>
c0012fd9:	83 c4 10             	add    esp,0x10
c0012fdc:	83 ec 08             	sub    esp,0x8
c0012fdf:	68 5c 01 00 00       	push   0x15c
c0012fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe8:	e8 8a f1 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0012fed:	83 c4 10             	add    esp,0x10
c0012ff0:	83 c4 0c             	add    esp,0xc
c0012ff3:	c3                   	ret    

c0012ff4 <Buzzer::stop()>:
c0012ff4:	83 ec 14             	sub    esp,0x14
c0012ff7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ffb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ffd:	6a 00                	push   0x0
c0012fff:	50                   	push   eax
c0013000:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013003:	83 c4 1c             	add    esp,0x1c
c0013006:	c3                   	ret    

c0013007 <beepThread(void*)>:
c0013007:	53                   	push   ebx
c0013008:	83 ec 08             	sub    esp,0x8
c001300b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001300f:	e8 34 89 00 00       	call   c001b948 <unlockScheduler()>
c0013014:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013019:	52                   	push   edx
c001301a:	52                   	push   edx
c001301b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013021:	52                   	push   edx
c0013022:	50                   	push   eax
c0013023:	e8 66 8e 00 00       	call   c001be8e <nanoSleep(unsigned long long)>
c0013028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001302b:	e8 c4 ff ff ff       	call   c0012ff4 <Buzzer::stop()>
c0013030:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013038:	83 c4 18             	add    esp,0x18
c001303b:	5b                   	pop    ebx
c001303c:	e9 93 8d 00 00       	jmp    c001bdd4 <blockTask(TaskState)>
c0013041:	90                   	nop

c0013042 <Buzzer::beep(int, int, bool)>:
c0013042:	57                   	push   edi
c0013043:	56                   	push   esi
c0013044:	53                   	push   ebx
c0013045:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013049:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001304d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013051:	52                   	push   edx
c0013052:	52                   	push   edx
c0013053:	8b 06                	mov    eax,DWORD PTR [esi]
c0013055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013059:	56                   	push   esi
c001305a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001305d:	83 c4 10             	add    esp,0x10
c0013060:	89 f8                	mov    eax,edi
c0013062:	84 c0                	test   al,al
c0013064:	74 1f                	je     c0013085 <Buzzer::beep(int, int, bool)+0x43>
c0013066:	50                   	push   eax
c0013067:	50                   	push   eax
c0013068:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001306e:	99                   	cdq    
c001306f:	52                   	push   edx
c0013070:	50                   	push   eax
c0013071:	e8 18 8e 00 00       	call   c001be8e <nanoSleep(unsigned long long)>
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001307d:	5b                   	pop    ebx
c001307e:	5e                   	pop    esi
c001307f:	5f                   	pop    edi
c0013080:	e9 6f ff ff ff       	jmp    c0012ff4 <Buzzer::stop()>
c0013085:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001308b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0013090:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013098:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001309c:	c7 44 24 14 07 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013007
c00130a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a8:	5b                   	pop    ebx
c00130a9:	5e                   	pop    esi
c00130aa:	5f                   	pop    edi
c00130ab:	e9 c0 89 00 00       	jmp    c001ba70 <Process::createThread(void (*)(void*), void*, int)>

c00130b0 <loadClockSettings()>:
c00130b0:	c7 05 74 a5 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a574,0xa
c00130ba:	c6 05 71 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a571,0x0
c00130c1:	c6 05 70 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a570,0x1
c00130c8:	c3                   	ret    
c00130c9:	90                   	nop

c00130ca <Clock::Clock(char const*)>:
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d1:	83 ec 08             	sub    esp,0x8
c00130d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d8:	50                   	push   eax
c00130d9:	e8 74 07 00 00       	call   c0013852 <Device::Device(char const*)>
c00130de:	83 c4 10             	add    esp,0x10
c00130e1:	ba b4 73 02 c0       	mov    edx,0xc00273b4
c00130e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ea:	89 10                	mov    DWORD PTR [eax],edx
c00130ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130fa:	90                   	nop
c00130fb:	83 c4 0c             	add    esp,0xc
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <Clock::~Clock()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	ba b4 73 02 c0       	mov    edx,0xc00273b4
c0013108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310c:	89 10                	mov    DWORD PTR [eax],edx
c001310e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013112:	83 ec 0c             	sub    esp,0xc
c0013115:	50                   	push   eax
c0013116:	e8 e9 03 00 00       	call   c0013504 <Device::~Device()>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	90                   	nop
c001311f:	83 c4 0c             	add    esp,0xc
c0013122:	c3                   	ret    
c0013123:	90                   	nop

c0013124 <Clock::~Clock()>:
c0013124:	83 ec 0c             	sub    esp,0xc
c0013127:	83 ec 0c             	sub    esp,0xc
c001312a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312e:	e8 cd ff ff ff       	call   c0013100 <Clock::~Clock()>
c0013133:	83 c4 10             	add    esp,0x10
c0013136:	83 ec 08             	sub    esp,0x8
c0013139:	68 58 01 00 00       	push   0x158
c001313e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013142:	e8 30 f0 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	83 c4 0c             	add    esp,0xc
c001314d:	c3                   	ret    

c001314e <Clock::timeInSecondsLocal()>:
c001314e:	53                   	push   ebx
c001314f:	83 ec 14             	sub    esp,0x14
c0013152:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013156:	8b 10                	mov    edx,DWORD PTR [eax]
c0013158:	50                   	push   eax
c0013159:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001315c:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c0013163:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c0013169:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001316f:	89 cb                	mov    ebx,ecx
c0013171:	c1 fb 1f             	sar    ebx,0x1f
c0013174:	01 c8                	add    eax,ecx
c0013176:	11 da                	adc    edx,ebx
c0013178:	83 c4 10             	add    esp,0x10
c001317b:	31 c9                	xor    ecx,ecx
c001317d:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c0013184:	74 05                	je     c001318b <Clock::timeInSecondsLocal()+0x3d>
c0013186:	b9 08 07 00 00       	mov    ecx,0x708
c001318b:	31 db                	xor    ebx,ebx
c001318d:	01 c8                	add    eax,ecx
c001318f:	11 da                	adc    edx,ebx
c0013191:	83 c4 08             	add    esp,0x8
c0013194:	5b                   	pop    ebx
c0013195:	c3                   	ret    

c0013196 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013196:	57                   	push   edi
c0013197:	56                   	push   esi
c0013198:	53                   	push   ebx
c0013199:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001319d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131a7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131aa:	0f b6 05 70 a5 02 c0 	movzx  eax,BYTE PTR ds:0xc002a570
c00131b1:	03 05 74 a5 02 c0    	add    eax,DWORD PTR ds:0xc002a574
c00131b7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131bd:	99                   	cdq    
c00131be:	29 c6                	sub    esi,eax
c00131c0:	19 d7                	sbb    edi,edx
c00131c2:	89 f0                	mov    eax,esi
c00131c4:	89 fa                	mov    edx,edi
c00131c6:	31 f6                	xor    esi,esi
c00131c8:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c00131cf:	74 05                	je     c00131d6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131d1:	be 08 07 00 00       	mov    esi,0x708
c00131d6:	31 ff                	xor    edi,edi
c00131d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131dc:	29 f0                	sub    eax,esi
c00131de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131e2:	19 fa                	sbb    edx,edi
c00131e4:	89 d8                	mov    eax,ebx
c00131e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131ea:	5b                   	pop    ebx
c00131eb:	5e                   	pop    esi
c00131ec:	5f                   	pop    edi
c00131ed:	ff e0                	jmp    eax

c00131ef <datetimeToSeconds(datetime_t)>:
c00131ef:	55                   	push   ebp
c00131f0:	57                   	push   edi
c00131f1:	56                   	push   esi
c00131f2:	53                   	push   ebx
c00131f3:	83 ec 14             	sub    esp,0x14
c00131f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131fa:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131fe:	89 d3                	mov    ebx,edx
c0013200:	0f b6 c6             	movzx  eax,dh
c0013203:	c1 eb 10             	shr    ebx,0x10
c0013206:	48                   	dec    eax
c0013207:	66 81 eb 6c 07       	sub    bx,0x76c
c001320c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013210:	0f b6 f5             	movzx  esi,ch
c0013213:	89 cf                	mov    edi,ecx
c0013215:	6b f6 3c             	imul   esi,esi,0x3c
c0013218:	c1 ef 10             	shr    edi,0x10
c001321b:	0f b6 c9             	movzx  ecx,cl
c001321e:	89 f8                	mov    eax,edi
c0013220:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013226:	0f b6 f8             	movzx  edi,al
c0013229:	0f b6 d2             	movzx  edx,dl
c001322c:	01 fe                	add    esi,edi
c001322e:	01 f1                	add    ecx,esi
c0013230:	0f b7 f3             	movzx  esi,bx
c0013233:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013237:	c1 f9 1f             	sar    ecx,0x1f
c001323a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001323f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013243:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013248:	8b 0c 8d 00 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8c00]
c001324f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013253:	76 29                	jbe    c001327e <datetimeToSeconds(datetime_t)+0x8f>
c0013255:	f6 c3 03             	test   bl,0x3
c0013258:	75 24                	jne    c001327e <datetimeToSeconds(datetime_t)+0x8f>
c001325a:	31 d2                	xor    edx,edx
c001325c:	bf 64 00 00 00       	mov    edi,0x64
c0013261:	89 d8                	mov    eax,ebx
c0013263:	66 f7 f7             	div    di
c0013266:	66 85 d2             	test   dx,dx
c0013269:	75 12                	jne    c001327d <datetimeToSeconds(datetime_t)+0x8e>
c001326b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013271:	bf 90 01 00 00       	mov    edi,0x190
c0013276:	99                   	cdq    
c0013277:	f7 ff                	idiv   edi
c0013279:	85 d2                	test   edx,edx
c001327b:	75 01                	jne    c001327e <datetimeToSeconds(datetime_t)+0x8f>
c001327d:	41                   	inc    ecx
c001327e:	66 83 fb 46          	cmp    bx,0x46
c0013282:	76 45                	jbe    c00132c9 <datetimeToSeconds(datetime_t)+0xda>
c0013284:	bb 46 00 00 00       	mov    ebx,0x46
c0013289:	bf 64 00 00 00       	mov    edi,0x64
c001328e:	bd 90 01 00 00       	mov    ebp,0x190
c0013293:	b8 6d 01 00 00       	mov    eax,0x16d
c0013298:	f6 c3 03             	test   bl,0x3
c001329b:	75 23                	jne    c00132c0 <datetimeToSeconds(datetime_t)+0xd1>
c001329d:	89 d8                	mov    eax,ebx
c001329f:	99                   	cdq    
c00132a0:	f7 ff                	idiv   edi
c00132a2:	b8 6e 01 00 00       	mov    eax,0x16e
c00132a7:	85 d2                	test   edx,edx
c00132a9:	75 15                	jne    c00132c0 <datetimeToSeconds(datetime_t)+0xd1>
c00132ab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132b1:	99                   	cdq    
c00132b2:	f7 fd                	idiv   ebp
c00132b4:	83 fa 01             	cmp    edx,0x1
c00132b7:	19 c0                	sbb    eax,eax
c00132b9:	f7 d0                	not    eax
c00132bb:	05 6e 01 00 00       	add    eax,0x16e
c00132c0:	01 c1                	add    ecx,eax
c00132c2:	43                   	inc    ebx
c00132c3:	39 f3                	cmp    ebx,esi
c00132c5:	7c cc                	jl     c0013293 <datetimeToSeconds(datetime_t)+0xa4>
c00132c7:	eb 35                	jmp    c00132fe <datetimeToSeconds(datetime_t)+0x10f>
c00132c9:	74 33                	je     c00132fe <datetimeToSeconds(datetime_t)+0x10f>
c00132cb:	b8 45 00 00 00       	mov    eax,0x45
c00132d0:	89 c2                	mov    edx,eax
c00132d2:	83 e2 03             	and    edx,0x3
c00132d5:	39 f0                	cmp    eax,esi
c00132d7:	7e 0f                	jle    c00132e8 <datetimeToSeconds(datetime_t)+0xf9>
c00132d9:	83 fa 01             	cmp    edx,0x1
c00132dc:	19 d2                	sbb    edx,edx
c00132de:	48                   	dec    eax
c00132df:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132e6:	eb e8                	jmp    c00132d0 <datetimeToSeconds(datetime_t)+0xe1>
c00132e8:	b8 6d 01 00 00       	mov    eax,0x16d
c00132ed:	85 d2                	test   edx,edx
c00132ef:	75 0b                	jne    c00132fc <datetimeToSeconds(datetime_t)+0x10d>
c00132f1:	66 83 fb 01          	cmp    bx,0x1
c00132f5:	19 c0                	sbb    eax,eax
c00132f7:	05 6e 01 00 00       	add    eax,0x16e
c00132fc:	29 c1                	sub    ecx,eax
c00132fe:	b8 80 51 01 00       	mov    eax,0x15180
c0013303:	f7 e9                	imul   ecx
c0013305:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013309:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001330d:	83 c4 14             	add    esp,0x14
c0013310:	5b                   	pop    ebx
c0013311:	5e                   	pop    esi
c0013312:	5f                   	pop    edi
c0013313:	5d                   	pop    ebp
c0013314:	c3                   	ret    
c0013315:	90                   	nop

c0013316 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013316:	57                   	push   edi
c0013317:	56                   	push   esi
c0013318:	53                   	push   ebx
c0013319:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001331d:	8b 06                	mov    eax,DWORD PTR [esi]
c001331f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013322:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001332a:	e8 c0 fe ff ff       	call   c00131ef <datetimeToSeconds(datetime_t)>
c001332f:	59                   	pop    ecx
c0013330:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c0013337:	5b                   	pop    ebx
c0013338:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c001333e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013344:	89 cb                	mov    ebx,ecx
c0013346:	c1 fb 1f             	sar    ebx,0x1f
c0013349:	29 c8                	sub    eax,ecx
c001334b:	19 da                	sbb    edx,ebx
c001334d:	31 c9                	xor    ecx,ecx
c001334f:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c0013356:	74 05                	je     c001335d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013358:	b9 08 07 00 00       	mov    ecx,0x708
c001335d:	31 db                	xor    ebx,ebx
c001335f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013363:	29 c8                	sub    eax,ecx
c0013365:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013369:	19 da                	sbb    edx,ebx
c001336b:	89 f8                	mov    eax,edi
c001336d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013371:	5b                   	pop    ebx
c0013372:	5e                   	pop    esi
c0013373:	5f                   	pop    edi
c0013374:	ff e0                	jmp    eax

c0013376 <secondsToDatetime(unsigned long long)>:
c0013376:	55                   	push   ebp
c0013377:	57                   	push   edi
c0013378:	56                   	push   esi
c0013379:	53                   	push   ebx
c001337a:	83 ec 1c             	sub    esp,0x1c
c001337d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013381:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013385:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013389:	6a 00                	push   0x0
c001338b:	68 80 51 01 00       	push   0x15180
c0013390:	55                   	push   ebp
c0013391:	57                   	push   edi
c0013392:	e8 c5 ff 00 00       	call   c002335c <__udivdi3>
c0013397:	83 c4 10             	add    esp,0x10
c001339a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00133a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133a4:	6a 00                	push   0x0
c00133a6:	68 80 51 01 00       	push   0x15180
c00133ab:	55                   	push   ebp
c00133ac:	57                   	push   edi
c00133ad:	bf 10 0e 00 00       	mov    edi,0xe10
c00133b2:	e8 a5 00 01 00       	call   c002345c <__umoddi3>
c00133b7:	83 c4 10             	add    esp,0x10
c00133ba:	99                   	cdq    
c00133bb:	f7 ff                	idiv   edi
c00133bd:	bf 3c 00 00 00       	mov    edi,0x3c
c00133c2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133c5:	89 d0                	mov    eax,edx
c00133c7:	99                   	cdq    
c00133c8:	f7 ff                	idiv   edi
c00133ca:	85 db                	test   ebx,ebx
c00133cc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133cf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133d2:	79 11                	jns    c00133e5 <secondsToDatetime(unsigned long long)+0x6f>
c00133d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133d8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133de:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133e3:	eb 07                	jmp    c00133ec <secondsToDatetime(unsigned long long)+0x76>
c00133e5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133ea:	89 d8                	mov    eax,ebx
c00133ec:	bf b4 05 00 00       	mov    edi,0x5b4
c00133f1:	99                   	cdq    
c00133f2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133f7:	f7 f9                	idiv   ecx
c00133f9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013402:	31 d2                	xor    edx,edx
c0013404:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001340c:	01 c3                	add    ebx,eax
c001340e:	89 d8                	mov    eax,ebx
c0013410:	f7 f1                	div    ecx
c0013412:	31 d2                	xor    edx,edx
c0013414:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013417:	89 d8                	mov    eax,ebx
c0013419:	f7 f7                	div    edi
c001341b:	31 d2                	xor    edx,edx
c001341d:	29 c1                	sub    ecx,eax
c001341f:	89 d8                	mov    eax,ebx
c0013421:	f7 f5                	div    ebp
c0013423:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013428:	29 c1                	sub    ecx,eax
c001342a:	31 d2                	xor    edx,edx
c001342c:	89 c8                	mov    eax,ecx
c001342e:	f7 f5                	div    ebp
c0013430:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013435:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013439:	31 d2                	xor    edx,edx
c001343b:	89 c8                	mov    eax,ecx
c001343d:	f7 f5                	div    ebp
c001343f:	31 d2                	xor    edx,edx
c0013441:	01 c3                	add    ebx,eax
c0013443:	89 c8                	mov    eax,ecx
c0013445:	f7 f7                	div    edi
c0013447:	bf 99 00 00 00       	mov    edi,0x99
c001344c:	29 c3                	sub    ebx,eax
c001344e:	31 d2                	xor    edx,edx
c0013450:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013458:	29 c3                	sub    ebx,eax
c001345a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001345d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013460:	bb 05 00 00 00       	mov    ebx,0x5
c0013465:	83 c1 02             	add    ecx,0x2
c0013468:	89 c8                	mov    eax,ecx
c001346a:	f7 f7                	div    edi
c001346c:	31 d2                	xor    edx,edx
c001346e:	89 c7                	mov    edi,eax
c0013470:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013476:	83 c0 02             	add    eax,0x2
c0013479:	f7 f3                	div    ebx
c001347b:	89 eb                	mov    ebx,ebp
c001347d:	29 c3                	sub    ebx,eax
c001347f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013485:	88 1e                	mov    BYTE PTR [esi],bl
c0013487:	19 c0                	sbb    eax,eax
c0013489:	31 d2                	xor    edx,edx
c001348b:	83 e0 0c             	and    eax,0xc
c001348e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013492:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001349a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001349e:	83 f9 01             	cmp    ecx,0x1
c00134a1:	0f 96 c2             	setbe  dl
c00134a4:	41                   	inc    ecx
c00134a5:	01 d0                	add    eax,edx
c00134a7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134aa:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134ae:	83 c4 1c             	add    esp,0x1c
c00134b1:	89 f0                	mov    eax,esi
c00134b3:	5b                   	pop    ebx
c00134b4:	5e                   	pop    esi
c00134b5:	5f                   	pop    edi
c00134b6:	5d                   	pop    ebp
c00134b7:	c2 04 00             	ret    0x4

c00134ba <Clock::timeInDatetimeLocal()>:
c00134ba:	53                   	push   ebx
c00134bb:	83 ec 14             	sub    esp,0x14
c00134be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134c6:	e8 83 fc ff ff       	call   c001314e <Clock::timeInSecondsLocal()>
c00134cb:	83 c4 0c             	add    esp,0xc
c00134ce:	52                   	push   edx
c00134cf:	50                   	push   eax
c00134d0:	53                   	push   ebx
c00134d1:	e8 a0 fe ff ff       	call   c0013376 <secondsToDatetime(unsigned long long)>
c00134d6:	89 d8                	mov    eax,ebx
c00134d8:	83 c4 14             	add    esp,0x14
c00134db:	5b                   	pop    ebx
c00134dc:	c2 04 00             	ret    0x4
c00134df:	90                   	nop

c00134e0 <Device::hibernate()>:
c00134e0:	c3                   	ret    
c00134e1:	90                   	nop

c00134e2 <Device::wake()>:
c00134e2:	c3                   	ret    
c00134e3:	90                   	nop

c00134e4 <Device::detect()>:
c00134e4:	c3                   	ret    
c00134e5:	90                   	nop

c00134e6 <Device::disableLegacy()>:
c00134e6:	c3                   	ret    
c00134e7:	90                   	nop

c00134e8 <Device::powerSaving(PowerSavingLevel)>:
c00134e8:	c3                   	ret    
c00134e9:	90                   	nop

c00134ea <DriverlessDevice::close(int, int, void*)>:
c00134ea:	31 c0                	xor    eax,eax
c00134ec:	c3                   	ret    
c00134ed:	90                   	nop

c00134ee <DriverlessDevice::detect()>:
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <DriverlessDevice::open(int, int, void*)>:
c00134f0:	83 ec 18             	sub    esp,0x18
c00134f3:	68 30 74 02 c0       	push   0xc0027430
c00134f8:	e8 f6 54 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c00134fd:	83 c8 ff             	or     eax,0xffffffff
c0013500:	83 c4 1c             	add    esp,0x1c
c0013503:	c3                   	ret    

c0013504 <Device::~Device()>:
c0013504:	ba 58 74 02 c0       	mov    edx,0xc0027458
c0013509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001350d:	89 10                	mov    DWORD PTR [eax],edx
c001350f:	90                   	nop
c0013510:	c3                   	ret    
c0013511:	90                   	nop

c0013512 <Device::~Device()>:
c0013512:	83 ec 0c             	sub    esp,0xc
c0013515:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013519:	e8 e6 ff ff ff       	call   c0013504 <Device::~Device()>
c001351e:	83 c4 04             	add    esp,0x4
c0013521:	83 ec 08             	sub    esp,0x8
c0013524:	68 58 01 00 00       	push   0x158
c0013529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001352d:	e8 45 ec ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013532:	83 c4 10             	add    esp,0x10
c0013535:	83 c4 0c             	add    esp,0xc
c0013538:	c3                   	ret    
c0013539:	90                   	nop

c001353a <Device::findAndLoadDriver()>:
c001353a:	c3                   	ret    
c001353b:	90                   	nop

c001353c <Device::preOpenPCI(PCIDeviceInfo)>:
c001353c:	57                   	push   edi
c001353d:	b9 09 00 00 00       	mov    ecx,0x9
c0013542:	56                   	push   esi
c0013543:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013547:	8d 74 24 10          	lea    esi,[esp+0x10]
c001354b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013555:	81 c7 18 01 00 00    	add    edi,0x118
c001355b:	fc                   	cld    
c001355c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001355e:	5e                   	pop    esi
c001355f:	5f                   	pop    edi
c0013560:	c3                   	ret    
c0013561:	90                   	nop

c0013562 <Device::preOpenACPI(void*, char*, char*)>:
c0013562:	56                   	push   esi
c0013563:	53                   	push   ebx
c0013564:	83 ec 08             	sub    esp,0x8
c0013567:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001356b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001356f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013579:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001357d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013583:	6a 1e                	push   0x1e
c0013585:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001358b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001358f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013595:	50                   	push   eax
c0013596:	e8 1b d1 fe ff       	call   c00006b6 <memcpy>
c001359b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001359f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00135a3:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135ab:	83 c4 14             	add    esp,0x14
c00135ae:	5b                   	pop    ebx
c00135af:	5e                   	pop    esi
c00135b0:	e9 01 d1 fe ff       	jmp    c00006b6 <memcpy>
c00135b5:	90                   	nop

c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135b6:	55                   	push   ebp
c00135b7:	57                   	push   edi
c00135b8:	56                   	push   esi
c00135b9:	53                   	push   ebx
c00135ba:	83 ec 0c             	sub    esp,0xc
c00135bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135c1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00135c5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135cd:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135d2:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135d9:	75 0b                	jne    c00135e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135db:	8b 00                	mov    eax,DWORD PTR [eax]
c00135dd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135e1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135e4:	eb 24                	jmp    c001360a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00135e6:	e8 85 42 00 00       	call   c0017870 <CPU::current()>
c00135eb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00135f3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00135f7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135fb:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00135ff:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013603:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013607:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001360a:	83 c4 0c             	add    esp,0xc
c001360d:	5b                   	pop    ebx
c001360e:	5e                   	pop    esi
c001360f:	5f                   	pop    edi
c0013610:	5d                   	pop    ebp
c0013611:	ff e0                	jmp    eax
c0013613:	90                   	nop

c0013614 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013614:	57                   	push   edi
c0013615:	56                   	push   esi
c0013616:	53                   	push   ebx
c0013617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001361f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013623:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013628:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001362f:	75 0b                	jne    c001363c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013631:	8b 00                	mov    eax,DWORD PTR [eax]
c0013633:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013637:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001363a:	eb 20                	jmp    c001365c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001363c:	e8 2f 42 00 00       	call   c0017870 <CPU::current()>
c0013641:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013647:	8b 10                	mov    edx,DWORD PTR [eax]
c0013649:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001364d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013651:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013655:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013659:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001365c:	5b                   	pop    ebx
c001365d:	5e                   	pop    esi
c001365e:	5f                   	pop    edi
c001365f:	ff e0                	jmp    eax
c0013661:	90                   	nop

c0013662 <Device::addChild(Device*)>:
c0013662:	53                   	push   ebx
c0013663:	83 ec 08             	sub    esp,0x8
c0013666:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001366a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001366e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013674:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001367a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001367c:	85 d2                	test   edx,edx
c001367e:	74 04                	je     c0013684 <Device::addChild(Device*)+0x22>
c0013680:	89 d3                	mov    ebx,edx
c0013682:	eb f6                	jmp    c001367a <Device::addChild(Device*)+0x18>
c0013684:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013687:	83 ec 0c             	sub    esp,0xc
c001368a:	6a 08                	push   0x8
c001368c:	e8 d7 ea ff ff       	call   c0012168 <operator new(unsigned long)>
c0013691:	89 03                	mov    DWORD PTR [ebx],eax
c0013693:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013699:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136a0:	83 c4 18             	add    esp,0x18
c00136a3:	5b                   	pop    ebx
c00136a4:	c3                   	ret    
c00136a5:	90                   	nop

c00136a6 <Device::removeAllChildren()>:
c00136a6:	56                   	push   esi
c00136a7:	53                   	push   ebx
c00136a8:	52                   	push   edx
c00136a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136ad:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136b6:	74 17                	je     c00136cf <Device::removeAllChildren()+0x29>
c00136b8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136bb:	85 c0                	test   eax,eax
c00136bd:	74 0c                	je     c00136cb <Device::removeAllChildren()+0x25>
c00136bf:	83 ec 0c             	sub    esp,0xc
c00136c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00136c4:	50                   	push   eax
c00136c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136cd:	eb e4                	jmp    c00136b3 <Device::removeAllChildren()+0xd>
c00136cf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e8:	58                   	pop    eax
c00136e9:	5b                   	pop    ebx
c00136ea:	5e                   	pop    esi
c00136eb:	c3                   	ret    

c00136ec <Device::hibernateAll()>:
c00136ec:	53                   	push   ebx
c00136ed:	83 ec 14             	sub    esp,0x14
c00136f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136f6:	53                   	push   ebx
c00136f7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013700:	83 c4 10             	add    esp,0x10
c0013703:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013706:	74 0f                	je     c0013717 <Device::hibernateAll()+0x2b>
c0013708:	83 ec 0c             	sub    esp,0xc
c001370b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001370e:	e8 d9 ff ff ff       	call   c00136ec <Device::hibernateAll()>
c0013713:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013715:	eb e9                	jmp    c0013700 <Device::hibernateAll()+0x14>
c0013717:	83 c4 08             	add    esp,0x8
c001371a:	5b                   	pop    ebx
c001371b:	c3                   	ret    

c001371c <Device::wakeAll()>:
c001371c:	53                   	push   ebx
c001371d:	83 ec 14             	sub    esp,0x14
c0013720:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013726:	53                   	push   ebx
c0013727:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001372a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013730:	83 c4 10             	add    esp,0x10
c0013733:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013736:	74 0f                	je     c0013747 <Device::wakeAll()+0x2b>
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001373e:	e8 d9 ff ff ff       	call   c001371c <Device::wakeAll()>
c0013743:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013745:	eb e9                	jmp    c0013730 <Device::wakeAll()+0x14>
c0013747:	83 c4 08             	add    esp,0x8
c001374a:	5b                   	pop    ebx
c001374b:	c3                   	ret    

c001374c <Device::detectAll()>:
c001374c:	53                   	push   ebx
c001374d:	83 ec 14             	sub    esp,0x14
c0013750:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013754:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013756:	53                   	push   ebx
c0013757:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001375a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013766:	74 0f                	je     c0013777 <Device::detectAll()+0x2b>
c0013768:	83 ec 0c             	sub    esp,0xc
c001376b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001376e:	e8 d9 ff ff ff       	call   c001374c <Device::detectAll()>
c0013773:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013775:	eb e9                	jmp    c0013760 <Device::detectAll()+0x14>
c0013777:	83 c4 08             	add    esp,0x8
c001377a:	5b                   	pop    ebx
c001377b:	c3                   	ret    

c001377c <Device::disableLegacyAll()>:
c001377c:	53                   	push   ebx
c001377d:	83 ec 14             	sub    esp,0x14
c0013780:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013784:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013786:	53                   	push   ebx
c0013787:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001378a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013796:	74 0f                	je     c00137a7 <Device::disableLegacyAll()+0x2b>
c0013798:	83 ec 0c             	sub    esp,0xc
c001379b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001379e:	e8 d9 ff ff ff       	call   c001377c <Device::disableLegacyAll()>
c00137a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137a5:	eb e9                	jmp    c0013790 <Device::disableLegacyAll()+0x14>
c00137a7:	83 c4 08             	add    esp,0x8
c00137aa:	5b                   	pop    ebx
c00137ab:	c3                   	ret    

c00137ac <Device::loadDriversForAll()>:
c00137ac:	53                   	push   ebx
c00137ad:	83 ec 08             	sub    esp,0x8
c00137b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b4:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137ba:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137bc:	85 db                	test   ebx,ebx
c00137be:	74 12                	je     c00137d2 <Device::loadDriversForAll()+0x26>
c00137c0:	83 ec 0c             	sub    esp,0xc
c00137c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00137c6:	e8 e1 ff ff ff       	call   c00137ac <Device::loadDriversForAll()>
c00137cb:	83 c4 10             	add    esp,0x10
c00137ce:	89 d8                	mov    eax,ebx
c00137d0:	eb e8                	jmp    c00137ba <Device::loadDriversForAll()+0xe>
c00137d2:	83 c4 08             	add    esp,0x8
c00137d5:	5b                   	pop    ebx
c00137d6:	c3                   	ret    
c00137d7:	90                   	nop

c00137d8 <Device::closeAll()>:
c00137d8:	53                   	push   ebx
c00137d9:	83 ec 08             	sub    esp,0x8
c00137dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e2:	6a 00                	push   0x0
c00137e4:	6a 00                	push   0x0
c00137e6:	6a 00                	push   0x0
c00137e8:	53                   	push   ebx
c00137e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137ec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137f2:	83 c4 10             	add    esp,0x10
c00137f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137f8:	74 0f                	je     c0013809 <Device::closeAll()+0x31>
c00137fa:	83 ec 0c             	sub    esp,0xc
c00137fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013800:	e8 d3 ff ff ff       	call   c00137d8 <Device::closeAll()>
c0013805:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013807:	eb e9                	jmp    c00137f2 <Device::closeAll()+0x1a>
c0013809:	83 c4 08             	add    esp,0x8
c001380c:	5b                   	pop    ebx
c001380d:	c3                   	ret    

c001380e <Device::powerSavingAll(PowerSavingLevel)>:
c001380e:	56                   	push   esi
c001380f:	53                   	push   ebx
c0013810:	83 ec 0c             	sub    esp,0xc
c0013813:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013817:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001381b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001381d:	56                   	push   esi
c001381e:	53                   	push   ebx
c001381f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013822:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013828:	83 c4 10             	add    esp,0x10
c001382b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001382e:	74 0f                	je     c001383f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013830:	52                   	push   edx
c0013831:	52                   	push   edx
c0013832:	56                   	push   esi
c0013833:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013836:	e8 d3 ff ff ff       	call   c001380e <Device::powerSavingAll(PowerSavingLevel)>
c001383b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001383d:	eb e9                	jmp    c0013828 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001383f:	58                   	pop    eax
c0013840:	5b                   	pop    ebx
c0013841:	5e                   	pop    esi
c0013842:	c3                   	ret    
c0013843:	90                   	nop

c0013844 <Device::setName(char const*)>:
c0013844:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001384c:	e9 3a cf fe ff       	jmp    c000078b <strcpy>
c0013851:	90                   	nop

c0013852 <Device::Device(char const*)>:
c0013852:	83 ec 0c             	sub    esp,0xc
c0013855:	ba 58 74 02 c0       	mov    edx,0xc0027458
c001385a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385e:	89 10                	mov    DWORD PTR [eax],edx
c0013860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013864:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001386e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013872:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001387c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013880:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001388a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013898:	83 ec 08             	sub    esp,0x8
c001389b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138a3:	e8 9c ff ff ff       	call   c0013844 <Device::setName(char const*)>
c00138a8:	83 c4 10             	add    esp,0x10
c00138ab:	83 ec 0c             	sub    esp,0xc
c00138ae:	6a 08                	push   0x8
c00138b0:	e8 b3 e8 ff ff       	call   c0012168 <operator new(unsigned long)>
c00138b5:	83 c4 10             	add    esp,0x10
c00138b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138c9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ff:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013918:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013926:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013934:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001393e:	90                   	nop
c001393f:	83 c4 0c             	add    esp,0xc
c0013942:	c3                   	ret    
c0013943:	90                   	nop

c0013944 <Device::getName()>:
c0013944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013948:	05 d0 00 00 00       	add    eax,0xd0
c001394d:	c3                   	ret    

c001394e <DriverlessDevice::DriverlessDevice(char const*)>:
c001394e:	83 ec 0c             	sub    esp,0xc
c0013951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013955:	83 ec 08             	sub    esp,0x8
c0013958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001395c:	50                   	push   eax
c001395d:	e8 f0 fe ff ff       	call   c0013852 <Device::Device(char const*)>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	ba 84 74 02 c0       	mov    edx,0xc0027484
c001396a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001396e:	89 10                	mov    DWORD PTR [eax],edx
c0013970:	90                   	nop
c0013971:	83 c4 0c             	add    esp,0xc
c0013974:	c3                   	ret    
c0013975:	90                   	nop

c0013976 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013976:	57                   	push   edi
c0013977:	56                   	push   esi
c0013978:	53                   	push   ebx
c0013979:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001397d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013981:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013985:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001398b:	75 0c                	jne    c0013999 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001398d:	52                   	push   edx
c001398e:	52                   	push   edx
c001398f:	53                   	push   ebx
c0013990:	56                   	push   esi
c0013991:	e8 1e 19 01 00       	call   c00252b4 <LinkedList<Device>::addElement(Device*)>
c0013996:	83 c4 10             	add    esp,0x10
c0013999:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001399f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139a2:	74 12                	je     c00139b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00139a4:	50                   	push   eax
c00139a5:	57                   	push   edi
c00139a6:	56                   	push   esi
c00139a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139aa:	e8 c7 ff ff ff       	call   c0013976 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	eb e9                	jmp    c001399f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139b6:	5b                   	pop    ebx
c00139b7:	5e                   	pop    esi
c00139b8:	5f                   	pop    edi
c00139b9:	c3                   	ret    

c00139ba <getDevicesOfType(DeviceType)>:
c00139ba:	53                   	push   ebx
c00139bb:	83 ec 14             	sub    esp,0x14
c00139be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139c2:	53                   	push   ebx
c00139c3:	e8 c8 19 01 00       	call   c0025390 <LinkedList<Device>::LinkedList()>
c00139c8:	83 c4 0c             	add    esp,0xc
c00139cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139cf:	53                   	push   ebx
c00139d0:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c00139d6:	e8 9b ff ff ff       	call   c0013976 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139db:	89 d8                	mov    eax,ebx
c00139dd:	83 c4 18             	add    esp,0x18
c00139e0:	5b                   	pop    ebx
c00139e1:	c2 04 00             	ret    0x4

c00139e4 <HardDiskController::HardDiskController(char const*)>:
c00139e4:	83 ec 0c             	sub    esp,0xc
c00139e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139eb:	83 ec 08             	sub    esp,0x8
c00139ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139f2:	50                   	push   eax
c00139f3:	e8 5a fe ff ff       	call   c0013852 <Device::Device(char const*)>
c00139f8:	83 c4 10             	add    esp,0x10
c00139fb:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c0013a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a04:	89 10                	mov    DWORD PTR [eax],edx
c0013a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a14:	90                   	nop
c0013a15:	83 c4 0c             	add    esp,0xc
c0013a18:	c3                   	ret    
c0013a19:	90                   	nop

c0013a1a <HardDiskController::~HardDiskController()>:
c0013a1a:	83 ec 0c             	sub    esp,0xc
c0013a1d:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c0013a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a26:	89 10                	mov    DWORD PTR [eax],edx
c0013a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	50                   	push   eax
c0013a30:	e8 cf fa ff ff       	call   c0013504 <Device::~Device()>
c0013a35:	83 c4 10             	add    esp,0x10
c0013a38:	90                   	nop
c0013a39:	83 c4 0c             	add    esp,0xc
c0013a3c:	c3                   	ret    
c0013a3d:	90                   	nop

c0013a3e <HardDiskController::~HardDiskController()>:
c0013a3e:	83 ec 0c             	sub    esp,0xc
c0013a41:	83 ec 0c             	sub    esp,0xc
c0013a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a48:	e8 cd ff ff ff       	call   c0013a1a <HardDiskController::~HardDiskController()>
c0013a4d:	83 c4 10             	add    esp,0x10
c0013a50:	83 ec 08             	sub    esp,0x8
c0013a53:	68 58 01 00 00       	push   0x158
c0013a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a5c:	e8 16 e7 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	83 c4 0c             	add    esp,0xc
c0013a67:	c3                   	ret    

c0013a68 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a68:	83 ec 0c             	sub    esp,0xc
c0013a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6f:	83 ec 08             	sub    esp,0x8
c0013a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a76:	50                   	push   eax
c0013a77:	e8 d6 fd ff ff       	call   c0013852 <Device::Device(char const*)>
c0013a7c:	83 c4 10             	add    esp,0x10
c0013a7f:	ba dc 74 02 c0       	mov    edx,0xc00274dc
c0013a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a88:	89 10                	mov    DWORD PTR [eax],edx
c0013a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a99:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ab6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013aca:	90                   	nop
c0013acb:	83 c4 0c             	add    esp,0xc
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <PhysicalDisk::startCache()>:
c0013ad0:	56                   	push   esi
c0013ad1:	53                   	push   ebx
c0013ad2:	83 ec 10             	sub    esp,0x10
c0013ad5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ad9:	6a 30                	push   0x30
c0013adb:	e8 88 e6 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013ae0:	89 c6                	mov    esi,eax
c0013ae2:	58                   	pop    eax
c0013ae3:	5a                   	pop    edx
c0013ae4:	53                   	push   ebx
c0013ae5:	56                   	push   esi
c0013ae6:	e8 15 25 00 00       	call   c0016000 <VCache::VCache(PhysicalDisk*)>
c0013aeb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013af1:	83 c4 14             	add    esp,0x14
c0013af4:	5b                   	pop    ebx
c0013af5:	5e                   	pop    esi
c0013af6:	c3                   	ret    
c0013af7:	90                   	nop

c0013af8 <PhysicalDisk::~PhysicalDisk()>:
c0013af8:	83 ec 0c             	sub    esp,0xc
c0013afb:	ba dc 74 02 c0       	mov    edx,0xc00274dc
c0013b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b04:	89 10                	mov    DWORD PTR [eax],edx
c0013b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0a:	83 ec 0c             	sub    esp,0xc
c0013b0d:	50                   	push   eax
c0013b0e:	e8 f1 f9 ff ff       	call   c0013504 <Device::~Device()>
c0013b13:	83 c4 10             	add    esp,0x10
c0013b16:	90                   	nop
c0013b17:	83 c4 0c             	add    esp,0xc
c0013b1a:	c3                   	ret    
c0013b1b:	90                   	nop

c0013b1c <PhysicalDisk::~PhysicalDisk()>:
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	83 ec 0c             	sub    esp,0xc
c0013b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b26:	e8 cd ff ff ff       	call   c0013af8 <PhysicalDisk::~PhysicalDisk()>
c0013b2b:	83 c4 10             	add    esp,0x10
c0013b2e:	83 ec 08             	sub    esp,0x8
c0013b31:	68 6c 01 00 00       	push   0x16c
c0013b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3a:	e8 38 e6 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013b3f:	83 c4 10             	add    esp,0x10
c0013b42:	83 c4 0c             	add    esp,0xc
c0013b45:	c3                   	ret    

c0013b46 <FPU::FPU(char const*)>:
c0013b46:	83 ec 0c             	sub    esp,0xc
c0013b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4d:	83 ec 08             	sub    esp,0x8
c0013b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b54:	50                   	push   eax
c0013b55:	e8 f8 fc ff ff       	call   c0013852 <Device::Device(char const*)>
c0013b5a:	83 c4 10             	add    esp,0x10
c0013b5d:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c0013b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b66:	89 10                	mov    DWORD PTR [eax],edx
c0013b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b76:	90                   	nop
c0013b77:	83 c4 0c             	add    esp,0xc
c0013b7a:	c3                   	ret    
c0013b7b:	90                   	nop

c0013b7c <FPU::~FPU()>:
c0013b7c:	83 ec 0c             	sub    esp,0xc
c0013b7f:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c0013b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b88:	89 10                	mov    DWORD PTR [eax],edx
c0013b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8e:	83 ec 0c             	sub    esp,0xc
c0013b91:	50                   	push   eax
c0013b92:	e8 6d f9 ff ff       	call   c0013504 <Device::~Device()>
c0013b97:	83 c4 10             	add    esp,0x10
c0013b9a:	90                   	nop
c0013b9b:	83 c4 0c             	add    esp,0xc
c0013b9e:	c3                   	ret    
c0013b9f:	90                   	nop

c0013ba0 <FPU::~FPU()>:
c0013ba0:	83 ec 0c             	sub    esp,0xc
c0013ba3:	83 ec 0c             	sub    esp,0xc
c0013ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013baa:	e8 cd ff ff ff       	call   c0013b7c <FPU::~FPU()>
c0013baf:	83 c4 10             	add    esp,0x10
c0013bb2:	83 ec 08             	sub    esp,0x8
c0013bb5:	68 58 01 00 00       	push   0x158
c0013bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bbe:	e8 b4 e5 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013bc3:	83 c4 10             	add    esp,0x10
c0013bc6:	83 c4 0c             	add    esp,0xc
c0013bc9:	c3                   	ret    

c0013bca <setupFPU()>:
c0013bca:	53                   	push   ebx
c0013bcb:	83 ec 08             	sub    esp,0x8
c0013bce:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0013bd4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013bdb:	74 19                	je     c0013bf6 <setupFPU()+0x2c>
c0013bdd:	83 ec 0c             	sub    esp,0xc
c0013be0:	68 58 01 00 00       	push   0x158
c0013be5:	e8 7e e5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013bea:	89 c3                	mov    ebx,eax
c0013bec:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bef:	e8 3e e4 00 00       	call   c0022032 <AVX::AVX()>
c0013bf4:	eb 5b                	jmp    c0013c51 <setupFPU()+0x87>
c0013bf6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013bfc:	84 c0                	test   al,al
c0013bfe:	79 19                	jns    c0013c19 <setupFPU()+0x4f>
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	68 58 01 00 00       	push   0x158
c0013c08:	e8 5b e5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013c0d:	89 c3                	mov    ebx,eax
c0013c0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c12:	e8 41 e5 00 00       	call   c0022158 <SSE::SSE()>
c0013c17:	eb 38                	jmp    c0013c51 <setupFPU()+0x87>
c0013c19:	a8 20                	test   al,0x20
c0013c1b:	74 19                	je     c0013c36 <setupFPU()+0x6c>
c0013c1d:	83 ec 0c             	sub    esp,0xc
c0013c20:	68 58 01 00 00       	push   0x158
c0013c25:	e8 3e e5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013c2a:	89 c3                	mov    ebx,eax
c0013c2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c2f:	e8 8e e4 00 00       	call   c00220c2 <MMX::MMX()>
c0013c34:	eb 1b                	jmp    c0013c51 <setupFPU()+0x87>
c0013c36:	a8 10                	test   al,0x10
c0013c38:	74 1c                	je     c0013c56 <setupFPU()+0x8c>
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	68 58 01 00 00       	push   0x158
c0013c42:	e8 21 e5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013c47:	89 c3                	mov    ebx,eax
c0013c49:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c4c:	e8 95 e5 00 00       	call   c00221e6 <x87::x87()>
c0013c51:	83 c4 10             	add    esp,0x10
c0013c54:	eb 35                	jmp    c0013c8b <setupFPU()+0xc1>
c0013c56:	83 ec 0c             	sub    esp,0xc
c0013c59:	83 e0 ef             	and    eax,0xffffffef
c0013c5c:	31 db                	xor    ebx,ebx
c0013c5e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c64:	68 08 75 02 c0       	push   0xc0027508
c0013c69:	e8 e9 e5 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0013c6e:	e8 fd 3b 00 00       	call   c0017870 <CPU::current()>
c0013c73:	e8 f8 3b 00 00       	call   c0017870 <CPU::current()>
c0013c78:	e8 6b 17 01 00       	call   c00253e8 <CPU::readCR0()>
c0013c7d:	83 c8 04             	or     eax,0x4
c0013c80:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c83:	e8 72 17 01 00       	call   c00253fa <CPU::writeCR0(unsigned long)>
c0013c88:	83 c4 10             	add    esp,0x10
c0013c8b:	89 d8                	mov    eax,ebx
c0013c8d:	83 c4 08             	add    esp,0x8
c0013c90:	5b                   	pop    ebx
c0013c91:	c3                   	ret    

c0013c92 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c9a:	c1 e0 04             	shl    eax,0x4
c0013c9d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013ca1:	8d 50 10             	lea    edx,[eax+0x10]
c0013ca4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013caa:	74 08                	je     c0013cb4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013cac:	83 c0 04             	add    eax,0x4
c0013caf:	39 d0                	cmp    eax,edx
c0013cb1:	75 f1                	jne    c0013ca4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013cb3:	c3                   	ret    
c0013cb4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cbe:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013cc8:	eb e2                	jmp    c0013cac <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013cca <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013cca:	57                   	push   edi
c0013ccb:	31 c0                	xor    eax,eax
c0013ccd:	56                   	push   esi
c0013cce:	53                   	push   ebx
c0013ccf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013cd3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cd7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013cdb:	89 da                	mov    edx,ebx
c0013cdd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ce1:	c1 e2 04             	shl    edx,0x4
c0013ce4:	01 ca                	add    edx,ecx
c0013ce6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013cee:	74 16                	je     c0013d06 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013cf0:	40                   	inc    eax
c0013cf1:	83 f8 04             	cmp    eax,0x4
c0013cf4:	75 f0                	jne    c0013ce6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013cf6:	c7 44 24 10 4c 75 02 c0 	mov    DWORD PTR [esp+0x10],0xc002754c
c0013cfe:	5b                   	pop    ebx
c0013cff:	5e                   	pop    esi
c0013d00:	5f                   	pop    edi
c0013d01:	e9 ed 4c 00 00       	jmp    c00189f3 <Krnl::panic(char const*)>
c0013d06:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013d09:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013d0c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013d12:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013d18:	5b                   	pop    ebx
c0013d19:	5e                   	pop    esi
c0013d1a:	5f                   	pop    edi
c0013d1b:	c3                   	ret    

c0013d1c <doubleFault(regs*, void*)>:
c0013d1c:	55                   	push   ebp
c0013d1d:	89 e5                	mov    ebp,esp
c0013d1f:	83 ec 08             	sub    esp,0x8
c0013d22:	83 ec 0c             	sub    esp,0xc
c0013d25:	68 87 75 02 c0       	push   0xc0027587
c0013d2a:	e8 c4 4c 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0013d2f:	83 c4 10             	add    esp,0x10
c0013d32:	90                   	nop
c0013d33:	c9                   	leave  
c0013d34:	c3                   	ret    
c0013d35:	90                   	nop

c0013d36 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d36:	56                   	push   esi
c0013d37:	53                   	push   ebx
c0013d38:	50                   	push   eax
c0013d39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d41:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d46:	75 35                	jne    c0013d7d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d48:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d4b:	31 d2                	xor    edx,edx
c0013d4d:	89 c1                	mov    ecx,eax
c0013d4f:	c1 e1 04             	shl    ecx,0x4
c0013d52:	01 f1                	add    ecx,esi
c0013d54:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d5c:	74 3e                	je     c0013d9c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d5e:	42                   	inc    edx
c0013d5f:	83 fa 04             	cmp    edx,0x4
c0013d62:	75 f0                	jne    c0013d54 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	68 cc 75 02 c0       	push   0xc00275cc
c0013d6c:	e8 82 4c 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0013d71:	83 c4 10             	add    esp,0x10
c0013d74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d79:	5a                   	pop    edx
c0013d7a:	5b                   	pop    ebx
c0013d7b:	5e                   	pop    esi
c0013d7c:	c3                   	ret    
c0013d7d:	83 ec 0c             	sub    esp,0xc
c0013d80:	56                   	push   esi
c0013d81:	e8 be fb ff ff       	call   c0013944 <Device::getName()>
c0013d86:	83 c4 10             	add    esp,0x10
c0013d89:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d8c:	75 ba                	jne    c0013d48 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d8e:	83 fb 0f             	cmp    ebx,0xf
c0013d91:	7f 29                	jg     c0013dbc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013d93:	0f b6 9b e0 96 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd6920]
c0013d9a:	eb ac                	jmp    c0013d48 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d9c:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013da3:	8d 04 86             	lea    eax,[esi+eax*4]
c0013da6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013dac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013db0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013db6:	89 d8                	mov    eax,ebx
c0013db8:	5a                   	pop    edx
c0013db9:	5b                   	pop    ebx
c0013dba:	5e                   	pop    esi
c0013dbb:	c3                   	ret    
c0013dbc:	83 ec 0c             	sub    esp,0xc
c0013dbf:	68 94 75 02 c0       	push   0xc0027594
c0013dc4:	e8 2a 4c 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0013dc9:	83 c4 10             	add    esp,0x10
c0013dcc:	e9 77 ff ff ff       	jmp    c0013d48 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dd1:	90                   	nop

c0013dd2 <InterruptController::clearAllHandlers(int, bool)>:
c0013dd2:	56                   	push   esi
c0013dd3:	53                   	push   ebx
c0013dd4:	52                   	push   edx
c0013dd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dd9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ddd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013de2:	75 61                	jne    c0013e45 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013de4:	8d 46 20             	lea    eax,[esi+0x20]
c0013de7:	c1 e6 04             	shl    esi,0x4
c0013dea:	c1 e0 04             	shl    eax,0x4
c0013ded:	01 de                	add    esi,ebx
c0013def:	01 d8                	add    eax,ebx
c0013df1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013dfb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013e05:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013e0f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013e19:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013e23:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e2d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e37:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e41:	58                   	pop    eax
c0013e42:	5b                   	pop    ebx
c0013e43:	5e                   	pop    esi
c0013e44:	c3                   	ret    
c0013e45:	83 ec 0c             	sub    esp,0xc
c0013e48:	53                   	push   ebx
c0013e49:	e8 f6 fa ff ff       	call   c0013944 <Device::getName()>
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e54:	75 8e                	jne    c0013de4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e56:	83 fe 0f             	cmp    esi,0xf
c0013e59:	7f 09                	jg     c0013e64 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e5b:	0f b6 b6 e0 96 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd6920]
c0013e62:	eb 80                	jmp    c0013de4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e64:	83 ec 0c             	sub    esp,0xc
c0013e67:	68 08 76 02 c0       	push   0xc0027608
c0013e6c:	e8 82 4b 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0013e71:	83 c4 10             	add    esp,0x10
c0013e74:	e9 6b ff ff ff       	jmp    c0013de4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e79:	90                   	nop

c0013e7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e7a:	56                   	push   esi
c0013e7b:	53                   	push   ebx
c0013e7c:	52                   	push   edx
c0013e7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e85:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e8a:	75 3a                	jne    c0013ec6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e90:	8d 50 20             	lea    edx,[eax+0x20]
c0013e93:	c1 e2 04             	shl    edx,0x4
c0013e96:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e99:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e9d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013ea3:	74 0b                	je     c0013eb0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013ea5:	83 c0 04             	add    eax,0x4
c0013ea8:	39 d0                	cmp    eax,edx
c0013eaa:	75 f1                	jne    c0013e9d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013eac:	58                   	pop    eax
c0013ead:	5b                   	pop    ebx
c0013eae:	5e                   	pop    esi
c0013eaf:	c3                   	ret    
c0013eb0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eba:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ec4:	eb df                	jmp    c0013ea5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	56                   	push   esi
c0013eca:	e8 75 fa ff ff       	call   c0013944 <Device::getName()>
c0013ecf:	83 c4 10             	add    esp,0x10
c0013ed2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ed5:	75 b5                	jne    c0013e8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ed7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013edc:	7f 11                	jg     c0013eef <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013ede:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ee2:	0f b6 80 e0 96 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6920]
c0013ee9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eed:	eb 9d                	jmp    c0013e8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	68 08 76 02 c0       	push   0xc0027608
c0013ef7:	e8 f7 4a 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0013efc:	83 c4 10             	add    esp,0x10
c0013eff:	eb 8b                	jmp    c0013e8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013f01 <nmiHandler(regs*, void*)>:
c0013f01:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0013f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f0a:	e9 9b a9 ff ff       	jmp    c000e8aa <Computer::handleNMI()>

c0013f0f <int_handler>:
c0013f0f:	55                   	push   ebp
c0013f10:	57                   	push   edi
c0013f11:	56                   	push   esi
c0013f12:	53                   	push   ebx
c0013f13:	83 ec 0c             	sub    esp,0xc
c0013f16:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f1a:	80 3d 54 ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae54,0x0
c0013f21:	74 0b                	je     c0013f2e <int_handler+0x1f>
c0013f23:	fa                   	cli    
c0013f24:	f4                   	hlt    
c0013f25:	80 3d 54 ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae54,0x0
c0013f2c:	75 f5                	jne    c0013f23 <int_handler+0x14>
c0013f2e:	e8 3d 39 00 00       	call   c0017870 <CPU::current()>
c0013f33:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f36:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f3c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f3f:	83 f8 17             	cmp    eax,0x17
c0013f42:	77 13                	ja     c0013f57 <int_handler+0x48>
c0013f44:	83 ec 08             	sub    esp,0x8
c0013f47:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f49:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f4c:	0f b6 c0             	movzx  eax,al
c0013f4f:	50                   	push   eax
c0013f50:	57                   	push   edi
c0013f51:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f54:	83 c4 10             	add    esp,0x10
c0013f57:	83 c3 15             	add    ebx,0x15
c0013f5a:	c1 e3 04             	shl    ebx,0x4
c0013f5d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f61:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f68:	31 db                	xor    ebx,ebx
c0013f6a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f6e:	85 c0                	test   eax,eax
c0013f70:	74 13                	je     c0013f85 <int_handler+0x76>
c0013f72:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f75:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f79:	74 1c                	je     c0013f97 <int_handler+0x88>
c0013f7b:	83 ec 08             	sub    esp,0x8
c0013f7e:	52                   	push   edx
c0013f7f:	56                   	push   esi
c0013f80:	ff d0                	call   eax
c0013f82:	83 c4 10             	add    esp,0x10
c0013f85:	43                   	inc    ebx
c0013f86:	83 fb 04             	cmp    ebx,0x4
c0013f89:	75 df                	jne    c0013f6a <int_handler+0x5b>
c0013f8b:	83 c4 0c             	add    esp,0xc
c0013f8e:	31 c0                	xor    eax,eax
c0013f90:	5b                   	pop    ebx
c0013f91:	31 d2                	xor    edx,edx
c0013f93:	5e                   	pop    esi
c0013f94:	5f                   	pop    edi
c0013f95:	5d                   	pop    ebp
c0013f96:	c3                   	ret    
c0013f97:	83 ec 08             	sub    esp,0x8
c0013f9a:	52                   	push   edx
c0013f9b:	56                   	push   esi
c0013f9c:	ff d0                	call   eax
c0013f9e:	83 c4 10             	add    esp,0x10
c0013fa1:	83 c4 0c             	add    esp,0xc
c0013fa4:	5b                   	pop    ebx
c0013fa5:	5e                   	pop    esi
c0013fa6:	5f                   	pop    edi
c0013fa7:	5d                   	pop    ebp
c0013fa8:	c3                   	ret    
c0013fa9:	90                   	nop

c0013faa <InterruptController::InterruptController(char const*)>:
c0013faa:	83 ec 1c             	sub    esp,0x1c
c0013fad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb1:	83 ec 08             	sub    esp,0x8
c0013fb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fb8:	50                   	push   eax
c0013fb9:	e8 94 f8 ff ff       	call   c0013852 <Device::Device(char const*)>
c0013fbe:	83 c4 10             	add    esp,0x10
c0013fc1:	ba 3c 78 02 c0       	mov    edx,0xc002783c
c0013fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fca:	89 10                	mov    DWORD PTR [eax],edx
c0013fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fe2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013fea:	7f 5e                	jg     c001404a <InterruptController::InterruptController(char const*)+0xa0>
c0013fec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ff4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013ff9:	7f 49                	jg     c0014044 <InterruptController::InterruptController(char const*)+0x9a>
c0013ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014003:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001400a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001400e:	01 ca                	add    edx,ecx
c0014010:	83 c2 54             	add    edx,0x54
c0014013:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001401b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014023:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001402a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001402e:	01 ca                	add    edx,ecx
c0014030:	81 c2 54 04 00 00    	add    edx,0x454
c0014036:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001403e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014042:	eb b0                	jmp    c0013ff4 <InterruptController::InterruptController(char const*)+0x4a>
c0014044:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014048:	eb 98                	jmp    c0013fe2 <InterruptController::InterruptController(char const*)+0x38>
c001404a:	90                   	nop
c001404b:	83 c4 1c             	add    esp,0x1c
c001404e:	c3                   	ret    
c001404f:	90                   	nop

c0014050 <InterruptController::~InterruptController()>:
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	ba 3c 78 02 c0       	mov    edx,0xc002783c
c0014058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405c:	89 10                	mov    DWORD PTR [eax],edx
c001405e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	50                   	push   eax
c0014066:	e8 99 f4 ff ff       	call   c0013504 <Device::~Device()>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	90                   	nop
c001406f:	83 c4 0c             	add    esp,0xc
c0014072:	c3                   	ret    
c0014073:	90                   	nop

c0014074 <InterruptController::~InterruptController()>:
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	83 ec 0c             	sub    esp,0xc
c001407a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001407e:	e8 cd ff ff ff       	call   c0014050 <InterruptController::~InterruptController()>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	83 ec 08             	sub    esp,0x8
c0014089:	68 58 21 00 00       	push   0x2158
c001408e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014092:	e8 e0 e0 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0014097:	83 c4 10             	add    esp,0x10
c001409a:	83 c4 0c             	add    esp,0xc
c001409d:	c3                   	ret    

c001409e <displayDebugInfo(regs*)>:
c001409e:	55                   	push   ebp
c001409f:	57                   	push   edi
c00140a0:	56                   	push   esi
c00140a1:	53                   	push   ebx
c00140a2:	83 ec 24             	sub    esp,0x24
c00140a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00140a9:	0f 20 c2             	mov    edx,cr0
c00140ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140b0:	0f 20 d7             	mov    edi,cr2
c00140b3:	0f 20 de             	mov    esi,cr3
c00140b6:	0f 20 e5             	mov    ebp,cr4
c00140b9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00140bc:	68 42 76 02 c0       	push   0xc0027642
c00140c1:	e8 91 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00140c6:	58                   	pop    eax
c00140c7:	5a                   	pop    edx
c00140c8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140cb:	68 4d 76 02 c0       	push   0xc002764d
c00140d0:	e8 82 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00140d5:	59                   	pop    ecx
c00140d6:	58                   	pop    eax
c00140d7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140da:	68 58 76 02 c0       	push   0xc0027658
c00140df:	e8 73 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00140e4:	58                   	pop    eax
c00140e5:	5a                   	pop    edx
c00140e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140e9:	68 63 76 02 c0       	push   0xc0027663
c00140ee:	e8 64 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00140f3:	59                   	pop    ecx
c00140f4:	58                   	pop    eax
c00140f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00140f8:	68 6e 76 02 c0       	push   0xc002766e
c00140fd:	e8 55 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014102:	58                   	pop    eax
c0014103:	5a                   	pop    edx
c0014104:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014107:	68 79 76 02 c0       	push   0xc0027679
c001410c:	e8 46 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014111:	59                   	pop    ecx
c0014112:	58                   	pop    eax
c0014113:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014116:	68 84 76 02 c0       	push   0xc0027684
c001411b:	e8 37 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014120:	58                   	pop    eax
c0014121:	5a                   	pop    edx
c0014122:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014125:	68 8f 76 02 c0       	push   0xc002768f
c001412a:	e8 28 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001412f:	59                   	pop    ecx
c0014130:	58                   	pop    eax
c0014131:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014134:	68 9a 76 02 c0       	push   0xc002769a
c0014139:	e8 19 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001413e:	58                   	pop    eax
c001413f:	5a                   	pop    edx
c0014140:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014143:	68 a9 76 02 c0       	push   0xc00276a9
c0014148:	e8 0a e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001414d:	59                   	pop    ecx
c001414e:	58                   	pop    eax
c001414f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014152:	68 b4 76 02 c0       	push   0xc00276b4
c0014157:	e8 fb e0 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001415c:	58                   	pop    eax
c001415d:	5a                   	pop    edx
c001415e:	57                   	push   edi
c001415f:	68 bf 76 02 c0       	push   0xc00276bf
c0014164:	e8 ee e0 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014169:	59                   	pop    ecx
c001416a:	58                   	pop    eax
c001416b:	56                   	push   esi
c001416c:	68 ca 76 02 c0       	push   0xc00276ca
c0014171:	e8 e1 e0 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014176:	58                   	pop    eax
c0014177:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001417c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014182:	e8 14 c3 ff ff       	call   c001049b <setActiveTerminal(VgaText*)>
c0014187:	58                   	pop    eax
c0014188:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001418b:	5a                   	pop    edx
c001418c:	c1 e0 05             	shl    eax,0x5
c001418f:	05 40 94 02 c0       	add    eax,0xc0029440
c0014194:	50                   	push   eax
c0014195:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001419a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141a0:	e8 15 c7 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00141a5:	59                   	pop    ecx
c00141a6:	58                   	pop    eax
c00141a7:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141ac:	68 d5 76 02 c0       	push   0xc00276d5
c00141b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141b7:	e8 fe c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00141bc:	58                   	pop    eax
c00141bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c2:	5a                   	pop    edx
c00141c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00141c6:	83 c0 0c             	add    eax,0xc
c00141c9:	50                   	push   eax
c00141ca:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141d5:	e8 e0 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00141da:	59                   	pop    ecx
c00141db:	58                   	pop    eax
c00141dc:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141e1:	68 de 76 02 c0       	push   0xc00276de
c00141e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141ec:	e8 c9 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00141f1:	58                   	pop    eax
c00141f2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141f7:	5a                   	pop    edx
c00141f8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014201:	e8 da c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0014206:	59                   	pop    ecx
c0014207:	58                   	pop    eax
c0014208:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001420d:	68 e6 76 02 c0       	push   0xc00276e6
c0014212:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014218:	e8 9d c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c001421d:	58                   	pop    eax
c001421e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014223:	5a                   	pop    edx
c0014224:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014227:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001422d:	e8 ae c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0014232:	59                   	pop    ecx
c0014233:	58                   	pop    eax
c0014234:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014239:	68 ee 76 02 c0       	push   0xc00276ee
c001423e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014244:	e8 71 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014249:	58                   	pop    eax
c001424a:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001424f:	5a                   	pop    edx
c0014250:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014253:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014259:	e8 82 c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001425e:	59                   	pop    ecx
c001425f:	58                   	pop    eax
c0014260:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014265:	68 f6 76 02 c0       	push   0xc00276f6
c001426a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014270:	e8 45 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014275:	58                   	pop    eax
c0014276:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001427b:	5a                   	pop    edx
c001427c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001427f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014285:	e8 56 c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001428a:	59                   	pop    ecx
c001428b:	58                   	pop    eax
c001428c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014291:	68 fe 76 02 c0       	push   0xc00276fe
c0014296:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001429c:	e8 19 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00142a1:	58                   	pop    eax
c00142a2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142a7:	5a                   	pop    edx
c00142a8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00142ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b1:	e8 2a c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00142b6:	59                   	pop    ecx
c00142b7:	58                   	pop    eax
c00142b8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142bd:	68 06 77 02 c0       	push   0xc0027706
c00142c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142c8:	e8 ed c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00142cd:	58                   	pop    eax
c00142ce:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142d3:	5a                   	pop    edx
c00142d4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142dd:	e8 fe c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00142e2:	59                   	pop    ecx
c00142e3:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142e8:	5b                   	pop    ebx
c00142e9:	68 0e 77 02 c0       	push   0xc002770e
c00142ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142f4:	e8 c1 c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00142f9:	58                   	pop    eax
c00142fa:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142ff:	5a                   	pop    edx
c0014300:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014304:	52                   	push   edx
c0014305:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001430b:	e8 d0 c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0014310:	59                   	pop    ecx
c0014311:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014316:	5b                   	pop    ebx
c0014317:	68 17 77 02 c0       	push   0xc0027717
c001431c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014322:	e8 93 c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014327:	58                   	pop    eax
c0014328:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001432d:	5a                   	pop    edx
c001432e:	57                   	push   edi
c001432f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014335:	e8 a6 c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001433a:	59                   	pop    ecx
c001433b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014340:	5b                   	pop    ebx
c0014341:	68 1f 77 02 c0       	push   0xc002771f
c0014346:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434c:	e8 69 c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014351:	5f                   	pop    edi
c0014352:	58                   	pop    eax
c0014353:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014358:	56                   	push   esi
c0014359:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001435f:	e8 7c c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0014364:	58                   	pop    eax
c0014365:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001436a:	5a                   	pop    edx
c001436b:	68 27 77 02 c0       	push   0xc0027727
c0014370:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014376:	e8 3f c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c001437b:	59                   	pop    ecx
c001437c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014381:	5b                   	pop    ebx
c0014382:	55                   	push   ebp
c0014383:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014389:	e8 52 c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001438e:	5e                   	pop    esi
c001438f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014394:	5f                   	pop    edi
c0014395:	68 2f 77 02 c0       	push   0xc002772f
c001439a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a0:	e8 15 c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00143a5:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143aa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143b0:	e8 4e 10 01 00       	call   c0025403 <CPU::readDR0()>
c00143b5:	5d                   	pop    ebp
c00143b6:	5a                   	pop    edx
c00143b7:	50                   	push   eax
c00143b8:	53                   	push   ebx
c00143b9:	e8 22 c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00143be:	59                   	pop    ecx
c00143bf:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143c4:	5b                   	pop    ebx
c00143c5:	68 38 77 02 c0       	push   0xc0027738
c00143ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143d0:	e8 e5 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00143d5:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143da:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143e0:	e8 30 10 01 00       	call   c0025415 <CPU::readDR1()>
c00143e5:	5e                   	pop    esi
c00143e6:	5f                   	pop    edi
c00143e7:	50                   	push   eax
c00143e8:	53                   	push   ebx
c00143e9:	e8 f2 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00143ee:	5d                   	pop    ebp
c00143ef:	58                   	pop    eax
c00143f0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143f5:	68 40 77 02 c0       	push   0xc0027740
c00143fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014400:	e8 b5 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014405:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001440a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014410:	e8 12 10 01 00       	call   c0025427 <CPU::readDR2()>
c0014415:	5a                   	pop    edx
c0014416:	59                   	pop    ecx
c0014417:	50                   	push   eax
c0014418:	53                   	push   ebx
c0014419:	e8 c2 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001441e:	5b                   	pop    ebx
c001441f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014424:	5e                   	pop    esi
c0014425:	68 48 77 02 c0       	push   0xc0027748
c001442a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014430:	e8 85 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014435:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001443a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014440:	e8 f4 0f 01 00       	call   c0025439 <CPU::readDR3()>
c0014445:	5f                   	pop    edi
c0014446:	5d                   	pop    ebp
c0014447:	50                   	push   eax
c0014448:	53                   	push   ebx
c0014449:	e8 92 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001444e:	58                   	pop    eax
c001444f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014454:	5a                   	pop    edx
c0014455:	68 50 77 02 c0       	push   0xc0027750
c001445a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014460:	e8 55 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014465:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001446a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014470:	e8 d6 0f 01 00       	call   c002544b <CPU::readDR6()>
c0014475:	59                   	pop    ecx
c0014476:	5e                   	pop    esi
c0014477:	50                   	push   eax
c0014478:	53                   	push   ebx
c0014479:	e8 62 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001447e:	5f                   	pop    edi
c001447f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014484:	5d                   	pop    ebp
c0014485:	68 58 77 02 c0       	push   0xc0027758
c001448a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014490:	e8 25 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014495:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001449a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144a0:	e8 b8 0f 01 00       	call   c002545d <CPU::readDR7()>
c00144a5:	5a                   	pop    edx
c00144a6:	59                   	pop    ecx
c00144a7:	50                   	push   eax
c00144a8:	53                   	push   ebx
c00144a9:	e8 32 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00144ae:	fa                   	cli    
c00144af:	f4                   	hlt    
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	eb fe                	jmp    c00144b3 <displayDebugInfo(regs*)+0x415>

c00144b5 <x87EmulHandler(regs*, void*)>:
c00144b5:	53                   	push   ebx
c00144b6:	83 ec 14             	sub    esp,0x14
c00144b9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144bd:	53                   	push   ebx
c00144be:	e8 82 8d 00 00       	call   c001d245 <Vm::x87Handler(regs*)>
c00144c3:	83 c4 10             	add    esp,0x10
c00144c6:	84 c0                	test   al,al
c00144c8:	74 05                	je     c00144cf <x87EmulHandler(regs*, void*)+0x1a>
c00144ca:	83 c4 08             	add    esp,0x8
c00144cd:	5b                   	pop    ebx
c00144ce:	c3                   	ret    
c00144cf:	83 ec 0c             	sub    esp,0xc
c00144d2:	68 60 77 02 c0       	push   0xc0027760
c00144d7:	e8 7b dd ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00144dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144df:	e8 ba fb ff ff       	call   c001409e <displayDebugInfo(regs*)>

c00144e4 <gpFault(regs*, void*)>:
c00144e4:	53                   	push   ebx
c00144e5:	83 ec 14             	sub    esp,0x14
c00144e8:	c7 05 90 a5 02 c0 b9 c7 01 c0 	mov    DWORD PTR ds:0xc002a590,0xc001c7b9
c00144f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144f6:	53                   	push   ebx
c00144f7:	e8 bd 82 00 00       	call   c001c7b9 <Vm::faultHandler(regs*)>
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	84 c0                	test   al,al
c0014501:	74 05                	je     c0014508 <gpFault(regs*, void*)+0x24>
c0014503:	83 c4 08             	add    esp,0x8
c0014506:	5b                   	pop    ebx
c0014507:	c3                   	ret    
c0014508:	83 ec 0c             	sub    esp,0xc
c001450b:	68 76 77 02 c0       	push   0xc0027776
c0014510:	e8 42 dd ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014515:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014518:	e8 81 fb ff ff       	call   c001409e <displayDebugInfo(regs*)>

c001451d <pgFault(regs*, void*)>:
c001451d:	83 ec 18             	sub    esp,0x18
c0014520:	68 91 77 02 c0       	push   0xc0027791
c0014525:	e8 2d dd ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001452a:	58                   	pop    eax
c001452b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001452f:	e8 6a fb ff ff       	call   c001409e <displayDebugInfo(regs*)>

c0014534 <otherISRHandler(regs*, void*)>:
c0014534:	53                   	push   ebx
c0014535:	83 ec 0c             	sub    esp,0xc
c0014538:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001453c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001453f:	50                   	push   eax
c0014540:	50                   	push   eax
c0014541:	68 9e 77 02 c0       	push   0xc002779e
c0014546:	e8 0c dd ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001454b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001454e:	e8 4b fb ff ff       	call   c001409e <displayDebugInfo(regs*)>

c0014553 <opcodeFault(regs*, void*)>:
c0014553:	55                   	push   ebp
c0014554:	89 e5                	mov    ebp,esp
c0014556:	56                   	push   esi
c0014557:	53                   	push   ebx
c0014558:	83 ec 40             	sub    esp,0x40
c001455b:	e8 10 33 00 00       	call   c0017870 <CPU::current()>
c0014560:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014566:	84 c0                	test   al,al
c0014568:	74 24                	je     c001458e <opcodeFault(regs*, void*)+0x3b>
c001456a:	83 ec 0c             	sub    esp,0xc
c001456d:	68 bc 77 02 c0       	push   0xc00277bc
c0014572:	e8 e0 dc ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014577:	83 c4 10             	add    esp,0x10
c001457a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001457d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014580:	8d 50 19             	lea    edx,[eax+0x19]
c0014583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014586:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014589:	e9 77 05 00 00       	jmp    c0014b05 <opcodeFault(regs*, void*)+0x5b2>
c001458e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014591:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014594:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014597:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001459b:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001459f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00145a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145ab:	8a 00                	mov    al,BYTE PTR [eax]
c00145ad:	3c f0                	cmp    al,0xf0
c00145af:	75 17                	jne    c00145c8 <opcodeFault(regs*, void*)+0x75>
c00145b1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145ba:	8d 50 01             	lea    edx,[eax+0x1]
c00145bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145c3:	e9 da 00 00 00       	jmp    c00146a2 <opcodeFault(regs*, void*)+0x14f>
c00145c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145cb:	8a 00                	mov    al,BYTE PTR [eax]
c00145cd:	3c f2                	cmp    al,0xf2
c00145cf:	74 09                	je     c00145da <opcodeFault(regs*, void*)+0x87>
c00145d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145d4:	8a 00                	mov    al,BYTE PTR [eax]
c00145d6:	3c f3                	cmp    al,0xf3
c00145d8:	75 1b                	jne    c00145f5 <opcodeFault(regs*, void*)+0xa2>
c00145da:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145e7:	8d 50 01             	lea    edx,[eax+0x1]
c00145ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145f0:	e9 ad 00 00 00       	jmp    c00146a2 <opcodeFault(regs*, void*)+0x14f>
c00145f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145f8:	8a 00                	mov    al,BYTE PTR [eax]
c00145fa:	3c 66                	cmp    al,0x66
c00145fc:	75 1f                	jne    c001461d <opcodeFault(regs*, void*)+0xca>
c00145fe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014602:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014606:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001460c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001460f:	8d 50 01             	lea    edx,[eax+0x1]
c0014612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014615:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014618:	e9 85 00 00 00       	jmp    c00146a2 <opcodeFault(regs*, void*)+0x14f>
c001461d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014620:	8a 00                	mov    al,BYTE PTR [eax]
c0014622:	3c 67                	cmp    al,0x67
c0014624:	75 18                	jne    c001463e <opcodeFault(regs*, void*)+0xeb>
c0014626:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001462a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001462d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014630:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014633:	8d 50 01             	lea    edx,[eax+0x1]
c0014636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014639:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001463c:	eb 64                	jmp    c00146a2 <opcodeFault(regs*, void*)+0x14f>
c001463e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014641:	8a 00                	mov    al,BYTE PTR [eax]
c0014643:	3c 2e                	cmp    al,0x2e
c0014645:	74 09                	je     c0014650 <opcodeFault(regs*, void*)+0xfd>
c0014647:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001464a:	8a 00                	mov    al,BYTE PTR [eax]
c001464c:	3c 3e                	cmp    al,0x3e
c001464e:	75 18                	jne    c0014668 <opcodeFault(regs*, void*)+0x115>
c0014650:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014654:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001465a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001465d:	8d 50 01             	lea    edx,[eax+0x1]
c0014660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014663:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014666:	eb 3a                	jmp    c00146a2 <opcodeFault(regs*, void*)+0x14f>
c0014668:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001466b:	8a 00                	mov    al,BYTE PTR [eax]
c001466d:	3c 36                	cmp    al,0x36
c001466f:	74 1b                	je     c001468c <opcodeFault(regs*, void*)+0x139>
c0014671:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014674:	8a 00                	mov    al,BYTE PTR [eax]
c0014676:	3c 26                	cmp    al,0x26
c0014678:	74 12                	je     c001468c <opcodeFault(regs*, void*)+0x139>
c001467a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001467d:	8a 00                	mov    al,BYTE PTR [eax]
c001467f:	3c 64                	cmp    al,0x64
c0014681:	74 09                	je     c001468c <opcodeFault(regs*, void*)+0x139>
c0014683:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014686:	8a 00                	mov    al,BYTE PTR [eax]
c0014688:	3c 65                	cmp    al,0x65
c001468a:	75 16                	jne    c00146a2 <opcodeFault(regs*, void*)+0x14f>
c001468c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014690:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014696:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014699:	8d 50 01             	lea    edx,[eax+0x1]
c001469c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001469f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146a5:	8a 00                	mov    al,BYTE PTR [eax]
c00146a7:	3c 0f                	cmp    al,0xf
c00146a9:	0f 85 ad 00 00 00    	jne    c001475c <opcodeFault(regs*, void*)+0x209>
c00146af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146b2:	40                   	inc    eax
c00146b3:	8a 00                	mov    al,BYTE PTR [eax]
c00146b5:	3c c2                	cmp    al,0xc2
c00146b7:	74 0e                	je     c00146c7 <opcodeFault(regs*, void*)+0x174>
c00146b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146bc:	40                   	inc    eax
c00146bd:	8a 00                	mov    al,BYTE PTR [eax]
c00146bf:	3c c3                	cmp    al,0xc3
c00146c1:	0f 85 95 00 00 00    	jne    c001475c <opcodeFault(regs*, void*)+0x209>
c00146c7:	83 ec 0c             	sub    esp,0xc
c00146ca:	68 df 77 02 c0       	push   0xc00277df
c00146cf:	e8 83 db ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146dd:	8d 50 01             	lea    edx,[eax+0x1]
c00146e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146e3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146e6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146ec:	8a 00                	mov    al,BYTE PTR [eax]
c00146ee:	8d 50 fe             	lea    edx,[eax-0x2]
c00146f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146f4:	88 10                	mov    BYTE PTR [eax],dl
c00146f6:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00146f9:	50                   	push   eax
c00146fa:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00146fd:	50                   	push   eax
c00146fe:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014701:	50                   	push   eax
c0014702:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014705:	e8 ee 40 00 00       	call   c00187f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001470a:	83 c4 10             	add    esp,0x10
c001470d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014710:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014713:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014716:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014719:	01 d0                	add    eax,edx
c001471b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001471e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014721:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014724:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014727:	48                   	dec    eax
c0014728:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001472b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001472e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014731:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014737:	83 ec 04             	sub    esp,0x4
c001473a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001473d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014740:	50                   	push   eax
c0014741:	e8 23 ba fe ff       	call   c0000169 <voodooXADD>
c0014746:	83 c4 10             	add    esp,0x10
c0014749:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001474c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001474f:	01 c2                	add    edx,eax
c0014751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014754:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014757:	e9 a9 03 00 00       	jmp    c0014b05 <opcodeFault(regs*, void*)+0x5b2>
c001475c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001475f:	8a 00                	mov    al,BYTE PTR [eax]
c0014761:	3c 0f                	cmp    al,0xf
c0014763:	0f 85 8b 01 00 00    	jne    c00148f4 <opcodeFault(regs*, void*)+0x3a1>
c0014769:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001476c:	40                   	inc    eax
c001476d:	8a 00                	mov    al,BYTE PTR [eax]
c001476f:	3c c7                	cmp    al,0xc7
c0014771:	0f 86 7d 01 00 00    	jbe    c00148f4 <opcodeFault(regs*, void*)+0x3a1>
c0014777:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001477a:	40                   	inc    eax
c001477b:	8a 00                	mov    al,BYTE PTR [eax]
c001477d:	3c cf                	cmp    al,0xcf
c001477f:	0f 87 6f 01 00 00    	ja     c00148f4 <opcodeFault(regs*, void*)+0x3a1>
c0014785:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014788:	40                   	inc    eax
c0014789:	8a 00                	mov    al,BYTE PTR [eax]
c001478b:	83 c0 38             	add    eax,0x38
c001478e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014791:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014795:	75 0b                	jne    c00147a2 <opcodeFault(regs*, void*)+0x24f>
c0014797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001479a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001479d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147a0:	eb 75                	jmp    c0014817 <opcodeFault(regs*, void*)+0x2c4>
c00147a2:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00147a6:	75 0b                	jne    c00147b3 <opcodeFault(regs*, void*)+0x260>
c00147a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00147ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147b1:	eb 64                	jmp    c0014817 <opcodeFault(regs*, void*)+0x2c4>
c00147b3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00147b7:	75 0b                	jne    c00147c4 <opcodeFault(regs*, void*)+0x271>
c00147b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147bc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00147bf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147c2:	eb 53                	jmp    c0014817 <opcodeFault(regs*, void*)+0x2c4>
c00147c4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00147c8:	75 0b                	jne    c00147d5 <opcodeFault(regs*, void*)+0x282>
c00147ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00147d0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147d3:	eb 42                	jmp    c0014817 <opcodeFault(regs*, void*)+0x2c4>
c00147d5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147d9:	75 0b                	jne    c00147e6 <opcodeFault(regs*, void*)+0x293>
c00147db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147de:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00147e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147e4:	eb 31                	jmp    c0014817 <opcodeFault(regs*, void*)+0x2c4>
c00147e6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00147ea:	75 0b                	jne    c00147f7 <opcodeFault(regs*, void*)+0x2a4>
c00147ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ef:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00147f2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147f5:	eb 20                	jmp    c0014817 <opcodeFault(regs*, void*)+0x2c4>
c00147f7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00147fb:	75 0b                	jne    c0014808 <opcodeFault(regs*, void*)+0x2b5>
c00147fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014800:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014803:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014806:	eb 0f                	jmp    c0014817 <opcodeFault(regs*, void*)+0x2c4>
c0014808:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001480c:	75 09                	jne    c0014817 <opcodeFault(regs*, void*)+0x2c4>
c001480e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014811:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014814:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014817:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001481b:	74 10                	je     c001482d <opcodeFault(regs*, void*)+0x2da>
c001481d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014824:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001482b:	eb 2d                	jmp    c001485a <opcodeFault(regs*, void*)+0x307>
c001482d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014830:	c1 e0 18             	shl    eax,0x18
c0014833:	89 c2                	mov    edx,eax
c0014835:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014838:	c1 e0 08             	shl    eax,0x8
c001483b:	25 00 00 ff 00       	and    eax,0xff0000
c0014840:	09 c2                	or     edx,eax
c0014842:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014845:	c1 e8 08             	shr    eax,0x8
c0014848:	25 00 ff 00 00       	and    eax,0xff00
c001484d:	09 c2                	or     edx,eax
c001484f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014852:	c1 e8 18             	shr    eax,0x18
c0014855:	09 d0                	or     eax,edx
c0014857:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001485a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001485e:	75 0b                	jne    c001486b <opcodeFault(regs*, void*)+0x318>
c0014860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014863:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014866:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014869:	eb 75                	jmp    c00148e0 <opcodeFault(regs*, void*)+0x38d>
c001486b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001486f:	75 0b                	jne    c001487c <opcodeFault(regs*, void*)+0x329>
c0014871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014874:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014877:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001487a:	eb 64                	jmp    c00148e0 <opcodeFault(regs*, void*)+0x38d>
c001487c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014880:	75 0b                	jne    c001488d <opcodeFault(regs*, void*)+0x33a>
c0014882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014885:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014888:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001488b:	eb 53                	jmp    c00148e0 <opcodeFault(regs*, void*)+0x38d>
c001488d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014891:	75 0b                	jne    c001489e <opcodeFault(regs*, void*)+0x34b>
c0014893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014896:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001489c:	eb 42                	jmp    c00148e0 <opcodeFault(regs*, void*)+0x38d>
c001489e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00148a2:	75 0b                	jne    c00148af <opcodeFault(regs*, void*)+0x35c>
c00148a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148aa:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00148ad:	eb 31                	jmp    c00148e0 <opcodeFault(regs*, void*)+0x38d>
c00148af:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00148b3:	75 0b                	jne    c00148c0 <opcodeFault(regs*, void*)+0x36d>
c00148b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00148be:	eb 20                	jmp    c00148e0 <opcodeFault(regs*, void*)+0x38d>
c00148c0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00148c4:	75 0b                	jne    c00148d1 <opcodeFault(regs*, void*)+0x37e>
c00148c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148cc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00148cf:	eb 0f                	jmp    c00148e0 <opcodeFault(regs*, void*)+0x38d>
c00148d1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148d5:	75 09                	jne    c00148e0 <opcodeFault(regs*, void*)+0x38d>
c00148d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148dd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00148e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148e6:	8d 50 02             	lea    edx,[eax+0x2]
c00148e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148ef:	e9 11 02 00 00       	jmp    c0014b05 <opcodeFault(regs*, void*)+0x5b2>
c00148f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148f7:	8a 00                	mov    al,BYTE PTR [eax]
c00148f9:	3c 0f                	cmp    al,0xf
c00148fb:	0f 85 76 01 00 00    	jne    c0014a77 <opcodeFault(regs*, void*)+0x524>
c0014901:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014904:	40                   	inc    eax
c0014905:	8a 00                	mov    al,BYTE PTR [eax]
c0014907:	3c c7                	cmp    al,0xc7
c0014909:	0f 85 68 01 00 00    	jne    c0014a77 <opcodeFault(regs*, void*)+0x524>
c001490f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014915:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014918:	8d 50 01             	lea    edx,[eax+0x1]
c001491b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001491e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014921:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014924:	50                   	push   eax
c0014925:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014928:	50                   	push   eax
c0014929:	8d 45 bc             	lea    eax,[ebp-0x44]
c001492c:	50                   	push   eax
c001492d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014930:	e8 c3 3e 00 00       	call   c00187f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014935:	83 c4 10             	add    esp,0x10
c0014938:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001493b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001493e:	83 f0 01             	xor    eax,0x1
c0014941:	84 c0                	test   al,al
c0014943:	0f 84 2e 01 00 00    	je     c0014a77 <opcodeFault(regs*, void*)+0x524>
c0014949:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001494c:	3c 01                	cmp    al,0x1
c001494e:	0f 85 23 01 00 00    	jne    c0014a77 <opcodeFault(regs*, void*)+0x524>
c0014954:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014957:	83 f0 01             	xor    eax,0x1
c001495a:	84 c0                	test   al,al
c001495c:	0f 84 15 01 00 00    	je     c0014a77 <opcodeFault(regs*, void*)+0x524>
c0014962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014965:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014968:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001496b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014972:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014975:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014978:	89 c2                	mov    edx,eax
c001497a:	b8 00 00 00 00       	mov    eax,0x0
c001497f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014982:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014988:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001498b:	ba 00 00 00 00       	mov    edx,0x0
c0014990:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014993:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014999:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001499c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001499f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00149a6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149a9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149ac:	89 c2                	mov    edx,eax
c00149ae:	b8 00 00 00 00       	mov    eax,0x0
c00149b3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149b6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00149b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149bf:	ba 00 00 00 00       	mov    edx,0x0
c00149c4:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00149c7:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00149ca:	e8 77 6f 00 00       	call   c001b946 <lockScheduler()>
c00149cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00149d7:	89 c1                	mov    ecx,eax
c00149d9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00149dc:	89 cb                	mov    ebx,ecx
c00149de:	89 d0                	mov    eax,edx
c00149e0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00149e3:	89 c6                	mov    esi,eax
c00149e5:	89 f0                	mov    eax,esi
c00149e7:	09 d8                	or     eax,ebx
c00149e9:	85 c0                	test   eax,eax
c00149eb:	75 21                	jne    c0014a0e <opcodeFault(regs*, void*)+0x4bb>
c00149ed:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00149f0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149f3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149f6:	89 01                	mov    DWORD PTR [ecx],eax
c00149f8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00149fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a01:	83 c8 40             	or     eax,0x40
c0014a04:	89 c2                	mov    edx,eax
c0014a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a09:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a0c:	eb 3e                	jmp    c0014a4c <opcodeFault(regs*, void*)+0x4f9>
c0014a0e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014a11:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014a14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a16:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014a19:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014a1c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a22:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014a25:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014a28:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014a2b:	89 d0                	mov    eax,edx
c0014a2d:	31 d2                	xor    edx,edx
c0014a2f:	89 c3                	mov    ebx,eax
c0014a31:	89 d6                	mov    esi,edx
c0014a33:	89 da                	mov    edx,ebx
c0014a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a38:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a41:	83 e0 bf             	and    eax,0xffffffbf
c0014a44:	89 c2                	mov    edx,eax
c0014a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a49:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a4c:	e8 f7 6e 00 00       	call   c001b948 <unlockScheduler()>
c0014a51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a54:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a57:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a5a:	01 c2                	add    edx,eax
c0014a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a62:	83 ec 0c             	sub    esp,0xc
c0014a65:	68 ee 77 02 c0       	push   0xc00277ee
c0014a6a:	e8 e8 d7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014a6f:	83 c4 10             	add    esp,0x10
c0014a72:	e9 8e 00 00 00       	jmp    c0014b05 <opcodeFault(regs*, void*)+0x5b2>
c0014a77:	83 ec 0c             	sub    esp,0xc
c0014a7a:	68 01 78 02 c0       	push   0xc0027801
c0014a7f:	e8 d3 d7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014a84:	83 c4 10             	add    esp,0x10
c0014a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a93:	c1 e0 04             	shl    eax,0x4
c0014a96:	01 d0                	add    eax,edx
c0014a98:	83 c0 03             	add    eax,0x3
c0014a9b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a9d:	0f b6 d8             	movzx  ebx,al
c0014aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014aac:	c1 e0 04             	shl    eax,0x4
c0014aaf:	01 d0                	add    eax,edx
c0014ab1:	83 c0 02             	add    eax,0x2
c0014ab4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab6:	0f b6 c8             	movzx  ecx,al
c0014ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ac5:	c1 e0 04             	shl    eax,0x4
c0014ac8:	01 d0                	add    eax,edx
c0014aca:	40                   	inc    eax
c0014acb:	8a 00                	mov    al,BYTE PTR [eax]
c0014acd:	0f b6 d0             	movzx  edx,al
c0014ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014adc:	c1 e0 04             	shl    eax,0x4
c0014adf:	01 f0                	add    eax,esi
c0014ae1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ae3:	0f b6 c0             	movzx  eax,al
c0014ae6:	83 ec 0c             	sub    esp,0xc
c0014ae9:	53                   	push   ebx
c0014aea:	51                   	push   ecx
c0014aeb:	52                   	push   edx
c0014aec:	50                   	push   eax
c0014aed:	68 14 78 02 c0       	push   0xc0027814
c0014af2:	e8 60 d7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014af7:	83 c4 20             	add    esp,0x20
c0014afa:	83 ec 0c             	sub    esp,0xc
c0014afd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b00:	e8 99 f5 ff ff       	call   c001409e <displayDebugInfo(regs*)>
c0014b05:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014b08:	5b                   	pop    ebx
c0014b09:	5e                   	pop    esi
c0014b0a:	5d                   	pop    ebp
c0014b0b:	c3                   	ret    

c0014b0c <displayProgramFault(char const*)>:
c0014b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b14:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014b1a:	85 c0                	test   eax,eax
c0014b1c:	74 15                	je     c0014b33 <displayProgramFault(char const*)+0x27>
c0014b1e:	83 ec 0c             	sub    esp,0xc
c0014b21:	6a 04                	push   0x4
c0014b23:	6a 0f                	push   0xf
c0014b25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b29:	50                   	push   eax
c0014b2a:	e8 4d ba ff ff       	call   c001057c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014b2f:	83 c4 1c             	add    esp,0x1c
c0014b32:	c3                   	ret    
c0014b33:	c3                   	ret    

c0014b34 <setupInterruptController()>:
c0014b34:	55                   	push   ebp
c0014b35:	89 e5                	mov    ebp,esp
c0014b37:	53                   	push   ebx
c0014b38:	83 ec 14             	sub    esp,0x14
c0014b3b:	e8 2c 2d 00 00       	call   c001786c <CPU::getNumber()>
c0014b40:	85 c0                	test   eax,eax
c0014b42:	0f 95 c0             	setne  al
c0014b45:	84 c0                	test   al,al
c0014b47:	74 56                	je     c0014b9f <setupInterruptController()+0x6b>
c0014b49:	83 ec 0c             	sub    esp,0xc
c0014b4c:	68 58 21 00 00       	push   0x2158
c0014b51:	e8 12 d6 ff ff       	call   c0012168 <operator new(unsigned long)>
c0014b56:	83 c4 10             	add    esp,0x10
c0014b59:	89 c3                	mov    ebx,eax
c0014b5b:	83 ec 0c             	sub    esp,0xc
c0014b5e:	53                   	push   ebx
c0014b5f:	e8 2c d8 00 00       	call   c0022390 <APIC::APIC()>
c0014b64:	83 c4 10             	add    esp,0x10
c0014b67:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b6a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b72:	83 c0 08             	add    eax,0x8
c0014b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b77:	6a 00                	push   0x0
c0014b79:	6a 00                	push   0x0
c0014b7b:	6a 00                	push   0x0
c0014b7d:	52                   	push   edx
c0014b7e:	ff d0                	call   eax
c0014b80:	83 c4 10             	add    esp,0x10
c0014b83:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014b88:	83 ec 08             	sub    esp,0x8
c0014b8b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014b8e:	50                   	push   eax
c0014b8f:	e8 ce ea ff ff       	call   c0013662 <Device::addChild(Device*)>
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b9a:	e9 48 03 00 00       	jmp    c0014ee7 <setupInterruptController()+0x3b3>
c0014b9f:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014ba4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014baa:	83 e0 01             	and    eax,0x1
c0014bad:	84 c0                	test   al,al
c0014baf:	0f 95 c0             	setne  al
c0014bb2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014bb5:	83 ec 0c             	sub    esp,0xc
c0014bb8:	68 58 21 00 00       	push   0x2158
c0014bbd:	e8 a6 d5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0014bc2:	83 c4 10             	add    esp,0x10
c0014bc5:	89 c3                	mov    ebx,eax
c0014bc7:	83 ec 0c             	sub    esp,0xc
c0014bca:	53                   	push   ebx
c0014bcb:	e8 82 dc 00 00       	call   c0022852 <PIC::PIC()>
c0014bd0:	83 c4 10             	add    esp,0x10
c0014bd3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bd6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bde:	83 c0 08             	add    eax,0x8
c0014be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014be3:	6a 00                	push   0x0
c0014be5:	6a 00                	push   0x0
c0014be7:	6a 00                	push   0x0
c0014be9:	52                   	push   edx
c0014bea:	ff d0                	call   eax
c0014bec:	83 c4 10             	add    esp,0x10
c0014bef:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014bf3:	74 6e                	je     c0014c63 <setupInterruptController()+0x12f>
c0014bf5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bfd:	83 c0 0c             	add    eax,0xc
c0014c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c02:	6a 00                	push   0x0
c0014c04:	6a 00                	push   0x0
c0014c06:	6a 00                	push   0x0
c0014c08:	52                   	push   edx
c0014c09:	ff d0                	call   eax
c0014c0b:	83 c4 10             	add    esp,0x10
c0014c0e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014c12:	74 15                	je     c0014c29 <setupInterruptController()+0xf5>
c0014c14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c19:	83 c0 04             	add    eax,0x4
c0014c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c1e:	83 ec 0c             	sub    esp,0xc
c0014c21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c24:	ff d0                	call   eax
c0014c26:	83 c4 10             	add    esp,0x10
c0014c29:	83 ec 0c             	sub    esp,0xc
c0014c2c:	68 58 21 00 00       	push   0x2158
c0014c31:	e8 32 d5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0014c36:	83 c4 10             	add    esp,0x10
c0014c39:	89 c3                	mov    ebx,eax
c0014c3b:	83 ec 0c             	sub    esp,0xc
c0014c3e:	53                   	push   ebx
c0014c3f:	e8 4c d7 00 00       	call   c0022390 <APIC::APIC()>
c0014c44:	83 c4 10             	add    esp,0x10
c0014c47:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c4a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c52:	83 c0 08             	add    eax,0x8
c0014c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c57:	6a 00                	push   0x0
c0014c59:	6a 00                	push   0x0
c0014c5b:	6a 00                	push   0x0
c0014c5d:	52                   	push   edx
c0014c5e:	ff d0                	call   eax
c0014c60:	83 c4 10             	add    esp,0x10
c0014c63:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014c68:	83 ec 08             	sub    esp,0x8
c0014c6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c6e:	50                   	push   eax
c0014c6f:	e8 ee e9 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0014c74:	83 c4 10             	add    esp,0x10
c0014c77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c7c:	83 c0 24             	add    eax,0x24
c0014c7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c81:	6a 00                	push   0x0
c0014c83:	68 34 45 01 c0       	push   0xc0014534
c0014c88:	6a 00                	push   0x0
c0014c8a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c8d:	ff d0                	call   eax
c0014c8f:	83 c4 10             	add    esp,0x10
c0014c92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c97:	83 c0 24             	add    eax,0x24
c0014c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c9c:	6a 00                	push   0x0
c0014c9e:	68 34 45 01 c0       	push   0xc0014534
c0014ca3:	6a 01                	push   0x1
c0014ca5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ca8:	ff d0                	call   eax
c0014caa:	83 c4 10             	add    esp,0x10
c0014cad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb2:	83 c0 24             	add    eax,0x24
c0014cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb7:	6a 00                	push   0x0
c0014cb9:	68 01 3f 01 c0       	push   0xc0013f01
c0014cbe:	6a 02                	push   0x2
c0014cc0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cc3:	ff d0                	call   eax
c0014cc5:	83 c4 10             	add    esp,0x10
c0014cc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ccd:	83 c0 24             	add    eax,0x24
c0014cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd2:	6a 00                	push   0x0
c0014cd4:	68 34 45 01 c0       	push   0xc0014534
c0014cd9:	6a 03                	push   0x3
c0014cdb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cde:	ff d0                	call   eax
c0014ce0:	83 c4 10             	add    esp,0x10
c0014ce3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce8:	83 c0 24             	add    eax,0x24
c0014ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ced:	6a 00                	push   0x0
c0014cef:	68 34 45 01 c0       	push   0xc0014534
c0014cf4:	6a 04                	push   0x4
c0014cf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cf9:	ff d0                	call   eax
c0014cfb:	83 c4 10             	add    esp,0x10
c0014cfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d03:	83 c0 24             	add    eax,0x24
c0014d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d08:	6a 00                	push   0x0
c0014d0a:	68 34 45 01 c0       	push   0xc0014534
c0014d0f:	6a 05                	push   0x5
c0014d11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d14:	ff d0                	call   eax
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d1e:	83 c0 24             	add    eax,0x24
c0014d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d23:	6a 00                	push   0x0
c0014d25:	68 53 45 01 c0       	push   0xc0014553
c0014d2a:	6a 06                	push   0x6
c0014d2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d2f:	ff d0                	call   eax
c0014d31:	83 c4 10             	add    esp,0x10
c0014d34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d37:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d39:	83 c0 24             	add    eax,0x24
c0014d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d3e:	6a 00                	push   0x0
c0014d40:	68 b5 44 01 c0       	push   0xc00144b5
c0014d45:	6a 07                	push   0x7
c0014d47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d4a:	ff d0                	call   eax
c0014d4c:	83 c4 10             	add    esp,0x10
c0014d4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d52:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d54:	83 c0 24             	add    eax,0x24
c0014d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d59:	6a 00                	push   0x0
c0014d5b:	68 1c 3d 01 c0       	push   0xc0013d1c
c0014d60:	6a 08                	push   0x8
c0014d62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d65:	ff d0                	call   eax
c0014d67:	83 c4 10             	add    esp,0x10
c0014d6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d6f:	83 c0 24             	add    eax,0x24
c0014d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d74:	6a 00                	push   0x0
c0014d76:	68 34 45 01 c0       	push   0xc0014534
c0014d7b:	6a 09                	push   0x9
c0014d7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d80:	ff d0                	call   eax
c0014d82:	83 c4 10             	add    esp,0x10
c0014d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d88:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8a:	83 c0 24             	add    eax,0x24
c0014d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8f:	6a 00                	push   0x0
c0014d91:	68 34 45 01 c0       	push   0xc0014534
c0014d96:	6a 0a                	push   0xa
c0014d98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d9b:	ff d0                	call   eax
c0014d9d:	83 c4 10             	add    esp,0x10
c0014da0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014da5:	83 c0 24             	add    eax,0x24
c0014da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014daa:	6a 00                	push   0x0
c0014dac:	68 34 45 01 c0       	push   0xc0014534
c0014db1:	6a 0b                	push   0xb
c0014db3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014db6:	ff d0                	call   eax
c0014db8:	83 c4 10             	add    esp,0x10
c0014dbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc0:	83 c0 24             	add    eax,0x24
c0014dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc5:	6a 00                	push   0x0
c0014dc7:	68 34 45 01 c0       	push   0xc0014534
c0014dcc:	6a 0c                	push   0xc
c0014dce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dd1:	ff d0                	call   eax
c0014dd3:	83 c4 10             	add    esp,0x10
c0014dd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ddb:	83 c0 24             	add    eax,0x24
c0014dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de0:	6a 00                	push   0x0
c0014de2:	68 e4 44 01 c0       	push   0xc00144e4
c0014de7:	6a 0d                	push   0xd
c0014de9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dec:	ff d0                	call   eax
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df6:	83 c0 24             	add    eax,0x24
c0014df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dfb:	6a 00                	push   0x0
c0014dfd:	68 1d 45 01 c0       	push   0xc001451d
c0014e02:	6a 0e                	push   0xe
c0014e04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e07:	ff d0                	call   eax
c0014e09:	83 c4 10             	add    esp,0x10
c0014e0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e11:	83 c0 24             	add    eax,0x24
c0014e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e16:	6a 00                	push   0x0
c0014e18:	68 34 45 01 c0       	push   0xc0014534
c0014e1d:	6a 0f                	push   0xf
c0014e1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e22:	ff d0                	call   eax
c0014e24:	83 c4 10             	add    esp,0x10
c0014e27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e2c:	83 c0 24             	add    eax,0x24
c0014e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e31:	6a 00                	push   0x0
c0014e33:	68 34 45 01 c0       	push   0xc0014534
c0014e38:	6a 10                	push   0x10
c0014e3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e3d:	ff d0                	call   eax
c0014e3f:	83 c4 10             	add    esp,0x10
c0014e42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e47:	83 c0 24             	add    eax,0x24
c0014e4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e4c:	6a 00                	push   0x0
c0014e4e:	68 34 45 01 c0       	push   0xc0014534
c0014e53:	6a 11                	push   0x11
c0014e55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e58:	ff d0                	call   eax
c0014e5a:	83 c4 10             	add    esp,0x10
c0014e5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e62:	83 c0 24             	add    eax,0x24
c0014e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e67:	6a 00                	push   0x0
c0014e69:	68 34 45 01 c0       	push   0xc0014534
c0014e6e:	6a 12                	push   0x12
c0014e70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e73:	ff d0                	call   eax
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e7d:	83 c0 24             	add    eax,0x24
c0014e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e82:	6a 00                	push   0x0
c0014e84:	68 34 45 01 c0       	push   0xc0014534
c0014e89:	6a 13                	push   0x13
c0014e8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e8e:	ff d0                	call   eax
c0014e90:	83 c4 10             	add    esp,0x10
c0014e93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e96:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e98:	83 c0 24             	add    eax,0x24
c0014e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e9d:	6a 00                	push   0x0
c0014e9f:	68 34 45 01 c0       	push   0xc0014534
c0014ea4:	6a 14                	push   0x14
c0014ea6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ea9:	ff d0                	call   eax
c0014eab:	83 c4 10             	add    esp,0x10
c0014eae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb3:	83 c0 24             	add    eax,0x24
c0014eb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb8:	6a 00                	push   0x0
c0014eba:	68 34 45 01 c0       	push   0xc0014534
c0014ebf:	6a 1e                	push   0x1e
c0014ec1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ec4:	ff d0                	call   eax
c0014ec6:	83 c4 10             	add    esp,0x10
c0014ec9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ece:	83 c0 24             	add    eax,0x24
c0014ed1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed3:	6a 00                	push   0x0
c0014ed5:	68 5d a3 01 c0       	push   0xc001a35d
c0014eda:	6a 60                	push   0x60
c0014edc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014edf:	ff d0                	call   eax
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ee7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014eea:	c9                   	leave  
c0014eeb:	c3                   	ret    

c0014eec <InterruptController::convertLegacyIRQNumber(int)>:
c0014eec:	55                   	push   ebp
c0014eed:	89 e5                	mov    ebp,esp
c0014eef:	83 ec 08             	sub    esp,0x8
c0014ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef5:	83 ec 0c             	sub    esp,0xc
c0014ef8:	50                   	push   eax
c0014ef9:	e8 46 ea ff ff       	call   c0013944 <Device::getName()>
c0014efe:	83 c4 10             	add    esp,0x10
c0014f01:	8a 00                	mov    al,BYTE PTR [eax]
c0014f03:	3c 41                	cmp    al,0x41
c0014f05:	0f 94 c0             	sete   al
c0014f08:	84 c0                	test   al,al
c0014f0a:	74 28                	je     c0014f34 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f0c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014f10:	7f 12                	jg     c0014f24 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014f12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f15:	05 e0 96 02 c0       	add    eax,0xc00296e0
c0014f1a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f1c:	0f b6 c0             	movzx  eax,al
c0014f1f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014f22:	eb 10                	jmp    c0014f34 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f24:	83 ec 0c             	sub    esp,0xc
c0014f27:	68 94 75 02 c0       	push   0xc0027594
c0014f2c:	e8 c2 3a 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0014f31:	83 c4 10             	add    esp,0x10
c0014f34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f37:	c9                   	leave  
c0014f38:	c3                   	ret    
c0014f39:	90                   	nop

c0014f3a <startGUI(void*)>:
c0014f3a:	55                   	push   ebp
c0014f3b:	89 e5                	mov    ebp,esp
c0014f3d:	53                   	push   ebx
c0014f3e:	83 ec 04             	sub    esp,0x4
c0014f41:	e8 02 6a 00 00       	call   c001b948 <unlockScheduler()>
c0014f46:	e8 e6 69 00 00       	call   c001b931 <getIRQNestingLevel()>
c0014f4b:	83 ec 08             	sub    esp,0x8
c0014f4e:	50                   	push   eax
c0014f4f:	68 7c 78 02 c0       	push   0xc002787c
c0014f54:	e8 fe d2 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014f59:	83 c4 10             	add    esp,0x10
c0014f5c:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014f62:	83 ec 08             	sub    esp,0x8
c0014f65:	6a 01                	push   0x1
c0014f67:	68 96 78 02 c0       	push   0xc0027896
c0014f6c:	e8 05 64 00 00       	call   c001b376 <Thr::loadDLL(char const*, bool)>
c0014f71:	83 c4 10             	add    esp,0x10
c0014f74:	83 ec 08             	sub    esp,0x8
c0014f77:	53                   	push   ebx
c0014f78:	50                   	push   eax
c0014f79:	e8 be 65 00 00       	call   c001b53c <Thr::executeDLL(unsigned long, void*)>
c0014f7e:	83 c4 10             	add    esp,0x10
c0014f81:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014f87:	83 ec 08             	sub    esp,0x8
c0014f8a:	6a 01                	push   0x1
c0014f8c:	68 b0 78 02 c0       	push   0xc00278b0
c0014f91:	e8 e0 63 00 00       	call   c001b376 <Thr::loadDLL(char const*, bool)>
c0014f96:	83 c4 10             	add    esp,0x10
c0014f99:	83 ec 08             	sub    esp,0x8
c0014f9c:	53                   	push   ebx
c0014f9d:	50                   	push   eax
c0014f9e:	e8 99 65 00 00       	call   c001b53c <Thr::executeDLL(unsigned long, void*)>
c0014fa3:	83 c4 10             	add    esp,0x10
c0014fa6:	90                   	nop
c0014fa7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014faa:	c9                   	leave  
c0014fab:	c3                   	ret    

c0014fac <sendKeyToTerminal(unsigned char)>:
c0014fac:	55                   	push   ebp
c0014fad:	89 e5                	mov    ebp,esp
c0014faf:	83 ec 28             	sub    esp,0x28
c0014fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014fb8:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c0014fbd:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014fc1:	83 ec 08             	sub    esp,0x8
c0014fc4:	52                   	push   edx
c0014fc5:	50                   	push   eax
c0014fc6:	e8 ed ba ff ff       	call   c0010ab8 <VgaText::receiveKey(unsigned char)>
c0014fcb:	83 c4 10             	add    esp,0x10
c0014fce:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014fd2:	75 41                	jne    c0015015 <sendKeyToTerminal(unsigned char)+0x69>
c0014fd4:	e8 94 69 00 00       	call   c001b96d <lockStuff()>
c0014fd9:	a1 a0 a5 02 c0       	mov    eax,ds:0xc002a5a0
c0014fde:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fe1:	c7 05 a0 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a5a0,0x0
c0014feb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fef:	74 1f                	je     c0015010 <sendKeyToTerminal(unsigned char)+0x64>
c0014ff1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014ff7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014ffa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ffd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015000:	83 ec 0c             	sub    esp,0xc
c0015003:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015006:	e8 4b 6f 00 00       	call   c001bf56 <unblockTask(ThreadControlBlock*)>
c001500b:	83 c4 10             	add    esp,0x10
c001500e:	eb db                	jmp    c0014feb <sendKeyToTerminal(unsigned char)+0x3f>
c0015010:	e8 ea 6c 00 00       	call   c001bcff <unlockStuff()>
c0015015:	90                   	nop
c0015016:	c9                   	leave  
c0015017:	c3                   	ret    

c0015018 <sendKeyboardToken(KeyboardToken)>:
c0015018:	55                   	push   ebp
c0015019:	89 e5                	mov    ebp,esp
c001501b:	83 ec 18             	sub    esp,0x18
c001501e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015024:	0f b7 c0             	movzx  eax,ax
c0015027:	83 f2 01             	xor    edx,0x1
c001502a:	88 90 c0 a5 02 c0    	mov    BYTE PTR [eax-0x3ffd5a40],dl
c0015030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015033:	66 3d 03 02          	cmp    ax,0x203
c0015037:	75 07                	jne    c0015040 <sendKeyboardToken(KeyboardToken)+0x28>
c0015039:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c001503e:	84 c0                	test   al,al
c0015040:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015044:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015047:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c001504c:	38 c2                	cmp    dl,al
c001504e:	74 1c                	je     c001506c <sendKeyboardToken(KeyboardToken)+0x54>
c0015050:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015053:	a2 c8 a9 02 c0       	mov    ds:0xc002a9c8,al
c0015058:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c001505d:	0f b6 c0             	movzx  eax,al
c0015060:	83 ec 0c             	sub    esp,0xc
c0015063:	50                   	push   eax
c0015064:	e8 bd ac ff ff       	call   c000fd26 <setTerminalScrollLock(bool)>
c0015069:	83 c4 10             	add    esp,0x10
c001506c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001506f:	84 c0                	test   al,al
c0015071:	0f 84 ae 00 00 00    	je     c0015125 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507a:	66 3d 10 03          	cmp    ax,0x310
c001507e:	75 06                	jne    c0015086 <sendKeyboardToken(KeyboardToken)+0x6e>
c0015080:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015089:	66 3d 11 03          	cmp    ax,0x311
c001508d:	75 06                	jne    c0015095 <sendKeyboardToken(KeyboardToken)+0x7d>
c001508f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015098:	66 3d 12 03          	cmp    ax,0x312
c001509c:	75 06                	jne    c00150a4 <sendKeyboardToken(KeyboardToken)+0x8c>
c001509e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00150a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a7:	66 3d 13 03          	cmp    ax,0x313
c00150ab:	75 06                	jne    c00150b3 <sendKeyboardToken(KeyboardToken)+0x9b>
c00150ad:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00150b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b6:	66 3d 14 03          	cmp    ax,0x314
c00150ba:	75 06                	jne    c00150c2 <sendKeyboardToken(KeyboardToken)+0xaa>
c00150bc:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00150c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c5:	66 3d 15 03          	cmp    ax,0x315
c00150c9:	75 06                	jne    c00150d1 <sendKeyboardToken(KeyboardToken)+0xb9>
c00150cb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d4:	66 3d 16 03          	cmp    ax,0x316
c00150d8:	75 06                	jne    c00150e0 <sendKeyboardToken(KeyboardToken)+0xc8>
c00150da:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00150e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e3:	66 3d 17 03          	cmp    ax,0x317
c00150e7:	75 06                	jne    c00150ef <sendKeyboardToken(KeyboardToken)+0xd7>
c00150e9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00150ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f2:	66 3d 18 03          	cmp    ax,0x318
c00150f6:	75 06                	jne    c00150fe <sendKeyboardToken(KeyboardToken)+0xe6>
c00150f8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00150fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015101:	66 3d 19 03          	cmp    ax,0x319
c0015105:	75 06                	jne    c001510d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015107:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001510d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015110:	66 3d 1a 03          	cmp    ax,0x31a
c0015114:	0f 85 c9 00 00 00    	jne    c00151e3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001511a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015120:	e9 be 00 00 00       	jmp    c00151e3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015128:	66 3d 10 03          	cmp    ax,0x310
c001512c:	75 0a                	jne    c0015138 <sendKeyboardToken(KeyboardToken)+0x120>
c001512e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015134:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513b:	66 3d 11 03          	cmp    ax,0x311
c001513f:	75 0a                	jne    c001514b <sendKeyboardToken(KeyboardToken)+0x133>
c0015141:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015147:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001514b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514e:	66 3d 12 03          	cmp    ax,0x312
c0015152:	75 0a                	jne    c001515e <sendKeyboardToken(KeyboardToken)+0x146>
c0015154:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001515a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001515e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015161:	66 3d 13 03          	cmp    ax,0x313
c0015165:	75 0a                	jne    c0015171 <sendKeyboardToken(KeyboardToken)+0x159>
c0015167:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001516d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015174:	66 3d 14 03          	cmp    ax,0x314
c0015178:	75 0a                	jne    c0015184 <sendKeyboardToken(KeyboardToken)+0x16c>
c001517a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015180:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015187:	66 3d 15 03          	cmp    ax,0x315
c001518b:	75 0a                	jne    c0015197 <sendKeyboardToken(KeyboardToken)+0x17f>
c001518d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015193:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519a:	66 3d 16 03          	cmp    ax,0x316
c001519e:	75 0a                	jne    c00151aa <sendKeyboardToken(KeyboardToken)+0x192>
c00151a0:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00151a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ad:	66 3d 17 03          	cmp    ax,0x317
c00151b1:	75 0a                	jne    c00151bd <sendKeyboardToken(KeyboardToken)+0x1a5>
c00151b3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00151b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c0:	66 3d 18 03          	cmp    ax,0x318
c00151c4:	75 0a                	jne    c00151d0 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00151c6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00151cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d3:	66 3d 19 03          	cmp    ax,0x319
c00151d7:	75 0a                	jne    c00151e3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151d9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00151df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e6:	66 3d 00 02          	cmp    ax,0x200
c00151ea:	75 2a                	jne    c0015216 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151ec:	a0 c0 a9 02 c0       	mov    al,ds:0xc002a9c0
c00151f1:	83 f0 01             	xor    eax,0x1
c00151f4:	84 c0                	test   al,al
c00151f6:	74 1e                	je     c0015216 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151f8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00151fd:	6a 01                	push   0x1
c00151ff:	6a 00                	push   0x0
c0015201:	68 3a 4f 01 c0       	push   0xc0014f3a
c0015206:	50                   	push   eax
c0015207:	e8 64 68 00 00       	call   c001ba70 <Process::createThread(void (*)(void*), void*, int)>
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	c6 05 c0 a9 02 c0 01 	mov    BYTE PTR ds:0xc002a9c0,0x1
c0015216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015219:	66 3d 1d 03          	cmp    ax,0x31d
c001521d:	75 06                	jne    c0015225 <sendKeyboardToken(KeyboardToken)+0x20d>
c001521f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015228:	66 3d 1c 03          	cmp    ax,0x31c
c001522c:	75 06                	jne    c0015234 <sendKeyboardToken(KeyboardToken)+0x21c>
c001522e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015237:	66 3d 1b 03          	cmp    ax,0x31b
c001523b:	75 06                	jne    c0015243 <sendKeyboardToken(KeyboardToken)+0x22b>
c001523d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015246:	66 3d 1e 03          	cmp    ax,0x31e
c001524a:	75 06                	jne    c0015252 <sendKeyboardToken(KeyboardToken)+0x23a>
c001524c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015255:	66 3d 1f 03          	cmp    ax,0x31f
c0015259:	75 06                	jne    c0015261 <sendKeyboardToken(KeyboardToken)+0x249>
c001525b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015264:	66 3d 1a 03          	cmp    ax,0x31a
c0015268:	75 06                	jne    c0015270 <sendKeyboardToken(KeyboardToken)+0x258>
c001526a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015270:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015274:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015277:	83 f0 01             	xor    eax,0x1
c001527a:	84 c0                	test   al,al
c001527c:	74 77                	je     c00152f5 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001527e:	a0 c1 a6 02 c0       	mov    al,ds:0xc002a6c1
c0015283:	84 c0                	test   al,al
c0015285:	74 41                	je     c00152c8 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0015287:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001528b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001528f:	74 2b                	je     c00152bc <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015291:	8b 15 c4 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9c4
c0015297:	89 d0                	mov    eax,edx
c0015299:	c1 e0 02             	shl    eax,0x2
c001529c:	01 d0                	add    eax,edx
c001529e:	01 c0                	add    eax,eax
c00152a0:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c00152a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a8:	0f b7 c0             	movzx  eax,ax
c00152ab:	8d 50 d0             	lea    edx,[eax-0x30]
c00152ae:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152b3:	01 d0                	add    eax,edx
c00152b5:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c00152ba:	eb 6d                	jmp    c0015329 <sendKeyboardToken(KeyboardToken)+0x311>
c00152bc:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c00152c6:	eb 61                	jmp    c0015329 <sendKeyboardToken(KeyboardToken)+0x311>
c00152c8:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152cd:	85 c0                	test   eax,eax
c00152cf:	74 18                	je     c00152e9 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152d1:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152d6:	0f b6 c0             	movzx  eax,al
c00152d9:	83 ec 0c             	sub    esp,0xc
c00152dc:	50                   	push   eax
c00152dd:	e8 ca fc ff ff       	call   c0014fac <sendKeyToTerminal(unsigned char)>
c00152e2:	83 c4 10             	add    esp,0x10
c00152e5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152e9:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c00152f3:	eb 34                	jmp    c0015329 <sendKeyboardToken(KeyboardToken)+0x311>
c00152f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f8:	66 3d 01 01          	cmp    ax,0x101
c00152fc:	75 2b                	jne    c0015329 <sendKeyboardToken(KeyboardToken)+0x311>
c00152fe:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c0015303:	85 c0                	test   eax,eax
c0015305:	74 18                	je     c001531f <sendKeyboardToken(KeyboardToken)+0x307>
c0015307:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c001530c:	0f b6 c0             	movzx  eax,al
c001530f:	83 ec 0c             	sub    esp,0xc
c0015312:	50                   	push   eax
c0015313:	e8 94 fc ff ff       	call   c0014fac <sendKeyToTerminal(unsigned char)>
c0015318:	83 c4 10             	add    esp,0x10
c001531b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001531f:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c0015329:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001532c:	83 f0 01             	xor    eax,0x1
c001532f:	84 c0                	test   al,al
c0015331:	74 4c                	je     c001537f <sendKeyboardToken(KeyboardToken)+0x367>
c0015333:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015336:	83 f0 01             	xor    eax,0x1
c0015339:	84 c0                	test   al,al
c001533b:	74 42                	je     c001537f <sendKeyboardToken(KeyboardToken)+0x367>
c001533d:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c0015342:	83 f0 01             	xor    eax,0x1
c0015345:	84 c0                	test   al,al
c0015347:	74 36                	je     c001537f <sendKeyboardToken(KeyboardToken)+0x367>
c0015349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534c:	66 83 f8 1f          	cmp    ax,0x1f
c0015350:	76 09                	jbe    c001535b <sendKeyboardToken(KeyboardToken)+0x343>
c0015352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015355:	66 83 f8 7e          	cmp    ax,0x7e
c0015359:	76 12                	jbe    c001536d <sendKeyboardToken(KeyboardToken)+0x355>
c001535b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535e:	66 83 f8 0a          	cmp    ax,0xa
c0015362:	74 09                	je     c001536d <sendKeyboardToken(KeyboardToken)+0x355>
c0015364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015367:	66 83 f8 08          	cmp    ax,0x8
c001536b:	75 12                	jne    c001537f <sendKeyboardToken(KeyboardToken)+0x367>
c001536d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015370:	0f b6 c0             	movzx  eax,al
c0015373:	83 ec 0c             	sub    esp,0xc
c0015376:	50                   	push   eax
c0015377:	e8 30 fc ff ff       	call   c0014fac <sendKeyToTerminal(unsigned char)>
c001537c:	83 c4 10             	add    esp,0x10
c001537f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015382:	83 f0 01             	xor    eax,0x1
c0015385:	84 c0                	test   al,al
c0015387:	74 4f                	je     c00153d8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015389:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001538c:	83 f0 01             	xor    eax,0x1
c001538f:	84 c0                	test   al,al
c0015391:	74 45                	je     c00153d8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015393:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c0015398:	84 c0                	test   al,al
c001539a:	74 3c                	je     c00153d8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001539c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539f:	66 83 f8 3f          	cmp    ax,0x3f
c00153a3:	76 33                	jbe    c00153d8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a8:	66 83 f8 7f          	cmp    ax,0x7f
c00153ac:	77 2a                	ja     c00153d8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b1:	88 c2                	mov    dl,al
c00153b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b6:	66 83 f8 5f          	cmp    ax,0x5f
c00153ba:	76 04                	jbe    c00153c0 <sendKeyboardToken(KeyboardToken)+0x3a8>
c00153bc:	b0 20                	mov    al,0x20
c00153be:	eb 02                	jmp    c00153c2 <sendKeyboardToken(KeyboardToken)+0x3aa>
c00153c0:	b0 00                	mov    al,0x0
c00153c2:	29 c2                	sub    edx,eax
c00153c4:	88 d0                	mov    al,dl
c00153c6:	83 e8 40             	sub    eax,0x40
c00153c9:	0f b6 c0             	movzx  eax,al
c00153cc:	83 ec 0c             	sub    esp,0xc
c00153cf:	50                   	push   eax
c00153d0:	e8 d7 fb ff ff       	call   c0014fac <sendKeyToTerminal(unsigned char)>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153db:	66 3d 00 03          	cmp    ax,0x300
c00153df:	75 0f                	jne    c00153f0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153e1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153e4:	83 f0 01             	xor    eax,0x1
c00153e7:	84 c0                	test   al,al
c00153e9:	74 05                	je     c00153f0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153eb:	e8 5d b1 ff ff       	call   c001054d <doTerminalCycle()>
c00153f0:	90                   	nop
c00153f1:	c9                   	leave  
c00153f2:	c3                   	ret    

c00153f3 <clearInternalKeybuffer(VgaText*)>:
c00153f3:	55                   	push   ebp
c00153f4:	89 e5                	mov    ebp,esp
c00153f6:	83 ec 08             	sub    esp,0x8
c00153f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fc:	05 34 11 00 00       	add    eax,0x1134
c0015401:	83 ec 0c             	sub    esp,0xc
c0015404:	50                   	push   eax
c0015405:	e8 ff b2 fe ff       	call   c0000709 <strlen>
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015410:	81 c2 34 11 00 00    	add    edx,0x1134
c0015416:	83 ec 04             	sub    esp,0x4
c0015419:	50                   	push   eax
c001541a:	6a 00                	push   0x0
c001541c:	52                   	push   edx
c001541d:	e8 ca b2 fe ff       	call   c00006ec <memset>
c0015422:	83 c4 10             	add    esp,0x10
c0015425:	90                   	nop
c0015426:	c9                   	leave  
c0015427:	c3                   	ret    

c0015428 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015428:	55                   	push   ebp
c0015429:	89 e5                	mov    ebp,esp
c001542b:	83 ec 18             	sub    esp,0x18
c001542e:	fb                   	sti    
c001542f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015436:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001543a:	0f 84 8a 00 00 00    	je     c00154ca <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015443:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015449:	84 c0                	test   al,al
c001544b:	75 11                	jne    c001545e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001544d:	e8 f4 64 00 00       	call   c001b946 <lockScheduler()>
c0015452:	e8 23 68 00 00       	call   c001bc7a <schedule()>
c0015457:	e8 ec 64 00 00       	call   c001b948 <unlockScheduler()>
c001545c:	eb e2                	jmp    c0015440 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001545e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015461:	8d 50 01             	lea    edx,[eax+0x1]
c0015464:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015467:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001546a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015470:	88 10                	mov    BYTE PTR [eax],dl
c0015472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015475:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001547b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001547e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015481:	05 34 11 00 00       	add    eax,0x1134
c0015486:	83 ec 0c             	sub    esp,0xc
c0015489:	50                   	push   eax
c001548a:	e8 7a b2 fe ff       	call   c0000709 <strlen>
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015495:	81 c2 34 11 00 00    	add    edx,0x1134
c001549b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001549e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00154a1:	81 c2 34 11 00 00    	add    edx,0x1134
c00154a7:	83 ec 04             	sub    esp,0x4
c00154aa:	50                   	push   eax
c00154ab:	51                   	push   ecx
c00154ac:	52                   	push   edx
c00154ad:	e8 cc b1 fe ff       	call   c000067e <memmove>
c00154b2:	83 c4 10             	add    esp,0x10
c00154b5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00154b8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154bb:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00154bf:	0f 85 71 ff ff ff    	jne    c0015436 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00154c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c8:	eb 03                	jmp    c00154cd <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00154ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cd:	c9                   	leave  
c00154ce:	c3                   	ret    
c00154cf:	90                   	nop

c00154d0 <Keyboard::Keyboard(char const*)>:
c00154d0:	83 ec 0c             	sub    esp,0xc
c00154d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154d7:	83 ec 08             	sub    esp,0x8
c00154da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154de:	50                   	push   eax
c00154df:	e8 6e e3 ff ff       	call   c0013852 <Device::Device(char const*)>
c00154e4:	83 c4 10             	add    esp,0x10
c00154e7:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c00154ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154f0:	89 10                	mov    DWORD PTR [eax],edx
c00154f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154f6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015500:	c6 05 a4 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5a4,0x1
c0015507:	90                   	nop
c0015508:	83 c4 0c             	add    esp,0xc
c001550b:	c3                   	ret    

c001550c <Keyboard::~Keyboard()>:
c001550c:	83 ec 0c             	sub    esp,0xc
c001550f:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c0015514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015518:	89 10                	mov    DWORD PTR [eax],edx
c001551a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001551e:	83 ec 0c             	sub    esp,0xc
c0015521:	50                   	push   eax
c0015522:	e8 dd df ff ff       	call   c0013504 <Device::~Device()>
c0015527:	83 c4 10             	add    esp,0x10
c001552a:	90                   	nop
c001552b:	83 c4 0c             	add    esp,0xc
c001552e:	c3                   	ret    
c001552f:	90                   	nop

c0015530 <Keyboard::~Keyboard()>:
c0015530:	83 ec 0c             	sub    esp,0xc
c0015533:	83 ec 0c             	sub    esp,0xc
c0015536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001553a:	e8 cd ff ff ff       	call   c001550c <Keyboard::~Keyboard()>
c001553f:	83 c4 10             	add    esp,0x10
c0015542:	83 ec 08             	sub    esp,0x8
c0015545:	68 5c 01 00 00       	push   0x15c
c001554a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001554e:	e8 24 cc ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0015553:	83 c4 10             	add    esp,0x10
c0015556:	83 c4 0c             	add    esp,0xc
c0015559:	c3                   	ret    

c001555a <LogicalDisk::close(int, int, void*)>:
c001555a:	83 c8 ff             	or     eax,0xffffffff
c001555d:	c3                   	ret    

c001555e <LogicalDisk::~LogicalDisk()>:
c001555e:	83 ec 0c             	sub    esp,0xc
c0015561:	ba 84 79 02 c0       	mov    edx,0xc0027984
c0015566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001556a:	89 10                	mov    DWORD PTR [eax],edx
c001556c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015570:	83 ec 0c             	sub    esp,0xc
c0015573:	50                   	push   eax
c0015574:	e8 8b df ff ff       	call   c0013504 <Device::~Device()>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	90                   	nop
c001557d:	83 c4 0c             	add    esp,0xc
c0015580:	c3                   	ret    
c0015581:	90                   	nop

c0015582 <LogicalDisk::~LogicalDisk()>:
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	83 ec 0c             	sub    esp,0xc
c0015588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001558c:	e8 cd ff ff ff       	call   c001555e <LogicalDisk::~LogicalDisk()>
c0015591:	83 c4 10             	add    esp,0x10
c0015594:	83 ec 08             	sub    esp,0x8
c0015597:	68 74 01 00 00       	push   0x174
c001559c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155a0:	e8 d2 cb ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00155a5:	83 c4 10             	add    esp,0x10
c00155a8:	83 c4 0c             	add    esp,0xc
c00155ab:	c3                   	ret    

c00155ac <LogicalDisk::open(int, int, void*)>:
c00155ac:	83 ec 18             	sub    esp,0x18
c00155af:	68 00 79 02 c0       	push   0xc0027900
c00155b4:	e8 3a 34 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c00155b9:	83 c8 ff             	or     eax,0xffffffff
c00155bc:	83 c4 1c             	add    esp,0x1c
c00155bf:	c3                   	ret    

c00155c0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00155c0:	53                   	push   ebx
c00155c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00155c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155cd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155d3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155d9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00155df:	77 10                	ja     c00155f1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00155e1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00155e7:	89 d3                	mov    ebx,edx
c00155e9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00155ef:	72 05                	jb     c00155f6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00155f1:	83 c8 ff             	or     eax,0xffffffff
c00155f4:	89 c2                	mov    edx,eax
c00155f6:	5b                   	pop    ebx
c00155f7:	c3                   	ret    

c00155f8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00155f8:	56                   	push   esi
c00155f9:	83 c8 ff             	or     eax,0xffffffff
c00155fc:	53                   	push   ebx
c00155fd:	89 c2                	mov    edx,eax
c00155ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015603:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015607:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001560b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015611:	77 27                	ja     c001563a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015613:	89 d8                	mov    eax,ebx
c0015615:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001561b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015621:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015626:	89 c2                	mov    edx,eax
c0015628:	73 10                	jae    c001563a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001562a:	89 c8                	mov    eax,ecx
c001562c:	89 da                	mov    edx,ebx
c001562e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015634:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001563a:	5b                   	pop    ebx
c001563b:	5e                   	pop    esi
c001563c:	c3                   	ret    
c001563d:	90                   	nop

c001563e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001563e:	83 ec 1c             	sub    esp,0x1c
c0015641:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015645:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015649:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001564d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015651:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015655:	89 04 24             	mov    DWORD PTR [esp],eax
c0015658:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001565c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015664:	83 ec 08             	sub    esp,0x8
c0015667:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001566b:	50                   	push   eax
c001566c:	e8 e1 e1 ff ff       	call   c0013852 <Device::Device(char const*)>
c0015671:	83 c4 10             	add    esp,0x10
c0015674:	ba 84 79 02 c0       	mov    edx,0xc0027984
c0015679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001567d:	89 10                	mov    DWORD PTR [eax],edx
c001567f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015683:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001568a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001568e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015699:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00156a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156af:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00156b5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00156bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00156c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156c6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00156cc:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156da:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00156e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00156ee:	90                   	nop
c00156ef:	83 c4 1c             	add    esp,0x1c
c00156f2:	c3                   	ret    
c00156f3:	90                   	nop

c00156f4 <LogicalDisk::assignDriveLetter()>:
c00156f4:	55                   	push   ebp
c00156f5:	57                   	push   edi
c00156f6:	56                   	push   esi
c00156f7:	53                   	push   ebx
c00156f8:	83 ec 14             	sub    esp,0x14
c00156fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156ff:	8b 3d e0 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e0
c0015705:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001570b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001570f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015715:	8b 3d e4 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e4
c001571b:	3c 01                	cmp    al,0x1
c001571d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015721:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015725:	19 c0                	sbb    eax,eax
c0015727:	83 e0 02             	and    eax,0x2
c001572a:	83 c0 41             	add    eax,0x41
c001572d:	0f be e8             	movsx  ebp,al
c0015730:	3c 43                	cmp    al,0x43
c0015732:	75 10                	jne    c0015744 <LogicalDisk::assignDriveLetter()+0x50>
c0015734:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001573b:	75 5d                	jne    c001579a <LogicalDisk::assignDriveLetter()+0xa6>
c001573d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015742:	75 56                	jne    c001579a <LogicalDisk::assignDriveLetter()+0xa6>
c0015744:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015747:	ba 01 00 00 00       	mov    edx,0x1
c001574c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015750:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015754:	d3 e2                	shl    edx,cl
c0015756:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001575a:	89 d7                	mov    edi,edx
c001575c:	89 d6                	mov    esi,edx
c001575e:	c1 ff 1f             	sar    edi,0x1f
c0015761:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015765:	21 f9                	and    ecx,edi
c0015767:	09 d1                	or     ecx,edx
c0015769:	75 2f                	jne    c001579a <LogicalDisk::assignDriveLetter()+0xa6>
c001576b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001576f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015773:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015779:	09 f2                	or     edx,esi
c001577b:	89 15 e0 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e0,edx
c0015781:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015785:	09 fa                	or     edx,edi
c0015787:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001578b:	89 15 e4 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e4,edx
c0015791:	89 1c bd 00 aa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5600],ebx
c0015798:	eb 08                	jmp    c00157a2 <LogicalDisk::assignDriveLetter()+0xae>
c001579a:	45                   	inc    ebp
c001579b:	40                   	inc    eax
c001579c:	3c 5b                	cmp    al,0x5b
c001579e:	75 90                	jne    c0015730 <LogicalDisk::assignDriveLetter()+0x3c>
c00157a0:	31 c0                	xor    eax,eax
c00157a2:	83 c4 14             	add    esp,0x14
c00157a5:	5b                   	pop    ebx
c00157a6:	5e                   	pop    esi
c00157a7:	5f                   	pop    edi
c00157a8:	5d                   	pop    ebp
c00157a9:	c3                   	ret    

c00157aa <LogicalDisk::mount()>:
c00157aa:	56                   	push   esi
c00157ab:	53                   	push   ebx
c00157ac:	51                   	push   ecx
c00157ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157b1:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c00157b7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00157c1:	85 db                	test   ebx,ebx
c00157c3:	74 50                	je     c0015815 <LogicalDisk::mount()+0x6b>
c00157c5:	e8 67 61 00 00       	call   c001b931 <getIRQNestingLevel()>
c00157ca:	52                   	push   edx
c00157cb:	52                   	push   edx
c00157cc:	50                   	push   eax
c00157cd:	68 24 79 02 c0       	push   0xc0027924
c00157d2:	e8 80 ca ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00157d7:	83 c4 0c             	add    esp,0xc
c00157da:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00157e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00157e3:	83 e8 41             	sub    eax,0x41
c00157e6:	50                   	push   eax
c00157e7:	56                   	push   esi
c00157e8:	53                   	push   ebx
c00157e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	84 c0                	test   al,al
c00157f1:	74 08                	je     c00157fb <LogicalDisk::mount()+0x51>
c00157f3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00157f9:	eb 1c                	jmp    c0015817 <LogicalDisk::mount()+0x6d>
c00157fb:	e8 31 61 00 00       	call   c001b931 <getIRQNestingLevel()>
c0015800:	51                   	push   ecx
c0015801:	51                   	push   ecx
c0015802:	50                   	push   eax
c0015803:	68 3f 79 02 c0       	push   0xc002793f
c0015808:	e8 4a ca ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001580d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015810:	83 c4 10             	add    esp,0x10
c0015813:	eb ac                	jmp    c00157c1 <LogicalDisk::mount()+0x17>
c0015815:	31 c0                	xor    eax,eax
c0015817:	5a                   	pop    edx
c0015818:	5b                   	pop    ebx
c0015819:	5e                   	pop    esi
c001581a:	c3                   	ret    
c001581b:	90                   	nop

c001581c <LogicalDisk::unmount()>:
c001581c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015820:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001582a:	c3                   	ret    
c001582b:	90                   	nop

c001582c <LogicalDisk::unassignDriveLetter()>:
c001582c:	57                   	push   edi
c001582d:	56                   	push   esi
c001582e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015832:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015839:	84 c9                	test   cl,cl
c001583b:	75 0f                	jne    c001584c <LogicalDisk::unassignDriveLetter()+0x20>
c001583d:	c7 44 24 0c 5a 79 02 c0 	mov    DWORD PTR [esp+0xc],0xc002795a
c0015845:	5e                   	pop    esi
c0015846:	5f                   	pop    edi
c0015847:	e9 a7 31 00 00       	jmp    c00189f3 <Krnl::panic(char const*)>
c001584c:	83 e9 41             	sub    ecx,0x41
c001584f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015856:	b8 01 00 00 00       	mov    eax,0x1
c001585b:	c7 04 8d 00 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5600],0x0
c0015866:	d3 e0                	shl    eax,cl
c0015868:	89 c7                	mov    edi,eax
c001586a:	f7 d0                	not    eax
c001586c:	c1 ff 1f             	sar    edi,0x1f
c001586f:	21 05 e0 a9 02 c0    	and    DWORD PTR ds:0xc002a9e0,eax
c0015875:	89 fe                	mov    esi,edi
c0015877:	f7 d6                	not    esi
c0015879:	21 35 e4 a9 02 c0    	and    DWORD PTR ds:0xc002a9e4,esi
c001587f:	5e                   	pop    esi
c0015880:	5f                   	pop    edi
c0015881:	c3                   	ret    

c0015882 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015882:	57                   	push   edi
c0015883:	56                   	push   esi
c0015884:	53                   	push   ebx
c0015885:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015889:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001588d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015891:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015895:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001589b:	77 41                	ja     c00158de <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001589d:	99                   	cdq    
c001589e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00158a4:	01 c8                	add    eax,ecx
c00158a6:	11 da                	adc    edx,ebx
c00158a8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158ae:	19 d7                	sbb    edi,edx
c00158b0:	72 33                	jb     c00158e5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00158b2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158b8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158c2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158c6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158d6:	5b                   	pop    ebx
c00158d7:	5e                   	pop    esi
c00158d8:	5f                   	pop    edi
c00158d9:	e9 9a 09 00 00       	jmp    c0016278 <VCache::read(unsigned long long, int, void*)>
c00158de:	b8 05 00 00 00       	mov    eax,0x5
c00158e3:	eb 05                	jmp    c00158ea <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00158e5:	b8 07 00 00 00       	mov    eax,0x7
c00158ea:	5b                   	pop    ebx
c00158eb:	5e                   	pop    esi
c00158ec:	5f                   	pop    edi
c00158ed:	c3                   	ret    

c00158ee <LogicalDisk::write(unsigned long long, int, void*)>:
c00158ee:	57                   	push   edi
c00158ef:	56                   	push   esi
c00158f0:	53                   	push   ebx
c00158f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015901:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015907:	77 41                	ja     c001594a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015909:	99                   	cdq    
c001590a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015910:	01 c8                	add    eax,ecx
c0015912:	11 da                	adc    edx,ebx
c0015914:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001591a:	19 d7                	sbb    edi,edx
c001591c:	72 33                	jb     c0015951 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001591e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015924:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001592a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001592e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015932:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015938:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001593e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015942:	5b                   	pop    ebx
c0015943:	5e                   	pop    esi
c0015944:	5f                   	pop    edi
c0015945:	e9 4a 08 00 00       	jmp    c0016194 <VCache::write(unsigned long long, int, void*)>
c001594a:	b8 05 00 00 00       	mov    eax,0x5
c001594f:	eb 05                	jmp    c0015956 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015951:	b8 07 00 00 00       	mov    eax,0x7
c0015956:	5b                   	pop    ebx
c0015957:	5e                   	pop    esi
c0015958:	5f                   	pop    edi
c0015959:	c3                   	ret    

c001595a <Mouse::Mouse(char const*)>:
c001595a:	83 ec 0c             	sub    esp,0xc
c001595d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015961:	83 ec 08             	sub    esp,0x8
c0015964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015968:	50                   	push   eax
c0015969:	e8 e4 de ff ff       	call   c0013852 <Device::Device(char const*)>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	ba b0 79 02 c0       	mov    edx,0xc00279b0
c0015976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001597a:	89 10                	mov    DWORD PTR [eax],edx
c001597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015980:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001598a:	90                   	nop
c001598b:	83 c4 0c             	add    esp,0xc
c001598e:	c3                   	ret    
c001598f:	90                   	nop

c0015990 <Mouse::~Mouse()>:
c0015990:	83 ec 0c             	sub    esp,0xc
c0015993:	ba b0 79 02 c0       	mov    edx,0xc00279b0
c0015998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599c:	89 10                	mov    DWORD PTR [eax],edx
c001599e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a2:	83 ec 0c             	sub    esp,0xc
c00159a5:	50                   	push   eax
c00159a6:	e8 59 db ff ff       	call   c0013504 <Device::~Device()>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	90                   	nop
c00159af:	83 c4 0c             	add    esp,0xc
c00159b2:	c3                   	ret    
c00159b3:	90                   	nop

c00159b4 <Mouse::~Mouse()>:
c00159b4:	83 ec 0c             	sub    esp,0xc
c00159b7:	83 ec 0c             	sub    esp,0xc
c00159ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159be:	e8 cd ff ff ff       	call   c0015990 <Mouse::~Mouse()>
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	83 ec 08             	sub    esp,0x8
c00159c9:	68 58 01 00 00       	push   0x158
c00159ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159d2:	e8 a0 c7 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00159d7:	83 c4 10             	add    esp,0x10
c00159da:	83 c4 0c             	add    esp,0xc
c00159dd:	c3                   	ret    

c00159de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00159de:	55                   	push   ebp
c00159df:	57                   	push   edi
c00159e0:	56                   	push   esi
c00159e1:	53                   	push   ebx
c00159e2:	81 ec 28 01 00 00    	sub    esp,0x128
c00159e8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00159ef:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00159f6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00159fd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015a08:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015a0c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a13:	e8 2c df ff ff       	call   c0013944 <Device::getName()>
c0015a18:	5a                   	pop    edx
c0015a19:	59                   	pop    ecx
c0015a1a:	50                   	push   eax
c0015a1b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015a1f:	55                   	push   ebp
c0015a20:	e8 66 ad fe ff       	call   c000078b <strcpy>
c0015a25:	5b                   	pop    ebx
c0015a26:	58                   	pop    eax
c0015a27:	68 d4 79 02 c0       	push   0xc00279d4
c0015a2c:	55                   	push   ebp
c0015a2d:	e8 10 ae fe ff       	call   c0000842 <strcat>
c0015a32:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a39:	e8 2a c7 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015a3e:	83 c4 0c             	add    esp,0xc
c0015a41:	89 c3                	mov    ebx,eax
c0015a43:	57                   	push   edi
c0015a44:	56                   	push   esi
c0015a45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a4d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a54:	55                   	push   ebp
c0015a55:	50                   	push   eax
c0015a56:	e8 e3 fb ff ff       	call   c001563e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a5b:	83 c4 14             	add    esp,0x14
c0015a5e:	53                   	push   ebx
c0015a5f:	e8 90 fc ff ff       	call   c00156f4 <LogicalDisk::assignDriveLetter()>
c0015a64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a67:	e8 3e fd ff ff       	call   c00157aa <LogicalDisk::mount()>
c0015a6c:	58                   	pop    eax
c0015a6d:	5a                   	pop    edx
c0015a6e:	53                   	push   ebx
c0015a6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a76:	e8 e7 db ff ff       	call   c0013662 <Device::addChild(Device*)>
c0015a7b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a81:	5b                   	pop    ebx
c0015a82:	5e                   	pop    esi
c0015a83:	5f                   	pop    edi
c0015a84:	5d                   	pop    ebp
c0015a85:	c3                   	ret    

c0015a86 <createPartitionsForDisk(PhysicalDisk*)>:
c0015a86:	55                   	push   ebp
c0015a87:	57                   	push   edi
c0015a88:	56                   	push   esi
c0015a89:	53                   	push   ebx
c0015a8a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015a90:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015a97:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015a9d:	3d 00 02 00 00       	cmp    eax,0x200
c0015aa2:	74 27                	je     c0015acb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015aa4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015aaa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015ab0:	83 ec 10             	sub    esp,0x10
c0015ab3:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015ab7:	99                   	cdq    
c0015ab8:	c1 e6 0a             	shl    esi,0xa
c0015abb:	52                   	push   edx
c0015abc:	89 fd                	mov    ebp,edi
c0015abe:	50                   	push   eax
c0015abf:	55                   	push   ebp
c0015ac0:	56                   	push   esi
c0015ac1:	e8 96 d8 00 00       	call   c002335c <__udivdi3>
c0015ac6:	e9 b1 00 00 00       	jmp    c0015b7c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015acb:	83 ec 0c             	sub    esp,0xc
c0015ace:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ad0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015ad4:	56                   	push   esi
c0015ad5:	6a 01                	push   0x1
c0015ad7:	6a 00                	push   0x0
c0015ad9:	6a 00                	push   0x0
c0015adb:	53                   	push   ebx
c0015adc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015adf:	83 c4 20             	add    esp,0x20
c0015ae2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015aea:	75 0a                	jne    c0015af6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015aec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015af4:	74 2c                	je     c0015b22 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015af6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015afc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b02:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b08:	83 ec 10             	sub    esp,0x10
c0015b0b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b0f:	89 f7                	mov    edi,esi
c0015b11:	c1 e0 0a             	shl    eax,0xa
c0015b14:	c1 ff 1f             	sar    edi,0x1f
c0015b17:	57                   	push   edi
c0015b18:	56                   	push   esi
c0015b19:	52                   	push   edx
c0015b1a:	50                   	push   eax
c0015b1b:	e8 3c d8 00 00       	call   c002335c <__udivdi3>
c0015b20:	eb 5a                	jmp    c0015b7c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015b22:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015b29:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b30:	83 e1 7f             	and    ecx,0x7f
c0015b33:	83 e0 7f             	and    eax,0x7f
c0015b36:	01 c1                	add    ecx,eax
c0015b38:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b3f:	83 e0 7f             	and    eax,0x7f
c0015b42:	01 c1                	add    ecx,eax
c0015b44:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b4b:	83 e0 7f             	and    eax,0x7f
c0015b4e:	00 c1                	add    cl,al
c0015b50:	74 41                	je     c0015b93 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b52:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b58:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b5e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b64:	83 ec 10             	sub    esp,0x10
c0015b67:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b6b:	89 f7                	mov    edi,esi
c0015b6d:	c1 e0 0a             	shl    eax,0xa
c0015b70:	c1 ff 1f             	sar    edi,0x1f
c0015b73:	57                   	push   edi
c0015b74:	56                   	push   esi
c0015b75:	52                   	push   edx
c0015b76:	50                   	push   eax
c0015b77:	e8 e0 d7 00 00       	call   c002335c <__udivdi3>
c0015b7c:	83 c4 14             	add    esp,0x14
c0015b7f:	52                   	push   edx
c0015b80:	50                   	push   eax
c0015b81:	6a 00                	push   0x0
c0015b83:	6a 00                	push   0x0
c0015b85:	53                   	push   ebx
c0015b86:	e8 53 fe ff ff       	call   c00159de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015b8b:	83 c4 20             	add    esp,0x20
c0015b8e:	e9 79 01 00 00       	jmp    c0015d0c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015b93:	89 f0                	mov    eax,esi
c0015b95:	31 f6                	xor    esi,esi
c0015b97:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015b9e:	75 02                	jne    c0015ba2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015ba0:	89 f1                	mov    ecx,esi
c0015ba2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015ba9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015bb0:	c1 e2 08             	shl    edx,0x8
c0015bb3:	c1 e7 10             	shl    edi,0x10
c0015bb6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015bbe:	09 fa                	or     edx,edi
c0015bc0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015bc8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015bcf:	83 c0 10             	add    eax,0x10
c0015bd2:	09 fa                	or     edx,edi
c0015bd4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bdb:	c1 e7 18             	shl    edi,0x18
c0015bde:	09 fa                	or     edx,edi
c0015be0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015be7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015beb:	c1 e7 10             	shl    edi,0x10
c0015bee:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015bf5:	c1 e2 08             	shl    edx,0x8
c0015bf8:	09 fa                	or     edx,edi
c0015bfa:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015c01:	09 fa                	or     edx,edi
c0015c03:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015c0a:	c1 e7 18             	shl    edi,0x18
c0015c0d:	09 fa                	or     edx,edi
c0015c0f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015c13:	46                   	inc    esi
c0015c14:	83 fe 04             	cmp    esi,0x4
c0015c17:	0f 85 7a ff ff ff    	jne    c0015b97 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c21:	83 f0 01             	xor    eax,0x1
c0015c24:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015c28:	75 57                	jne    c0015c81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c2e:	83 f0 01             	xor    eax,0x1
c0015c31:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c35:	75 4a                	jne    c0015c81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c37:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c3b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c43:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c4b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c51:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c57:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c5d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c61:	89 f7                	mov    edi,esi
c0015c63:	c1 e0 0a             	shl    eax,0xa
c0015c66:	c1 ff 1f             	sar    edi,0x1f
c0015c69:	57                   	push   edi
c0015c6a:	56                   	push   esi
c0015c6b:	52                   	push   edx
c0015c6c:	50                   	push   eax
c0015c6d:	e8 ea d6 00 00       	call   c002335c <__udivdi3>
c0015c72:	83 c4 10             	add    esp,0x10
c0015c75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c7d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015c81:	84 c9                	test   cl,cl
c0015c83:	74 53                	je     c0015cd8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015c85:	0f b6 c9             	movzx  ecx,cl
c0015c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c90:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c94:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015c98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015ca0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015ca4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015ca8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015cac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015cb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cb8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015cbc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015cc0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015cc4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015cc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015ccc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cd0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015cd4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015cd8:	31 ed                	xor    ebp,ebp
c0015cda:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015cde:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015ce2:	89 f8                	mov    eax,edi
c0015ce4:	09 f0                	or     eax,esi
c0015ce6:	74 1e                	je     c0015d06 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015ce8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015cec:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015cf0:	89 d1                	mov    ecx,edx
c0015cf2:	09 c1                	or     ecx,eax
c0015cf4:	74 10                	je     c0015d06 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015cf6:	83 ec 0c             	sub    esp,0xc
c0015cf9:	57                   	push   edi
c0015cfa:	56                   	push   esi
c0015cfb:	52                   	push   edx
c0015cfc:	50                   	push   eax
c0015cfd:	53                   	push   ebx
c0015cfe:	e8 db fc ff ff       	call   c00159de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015d03:	83 c4 20             	add    esp,0x20
c0015d06:	45                   	inc    ebp
c0015d07:	83 fd 04             	cmp    ebp,0x4
c0015d0a:	75 ce                	jne    c0015cda <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015d0c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015d12:	5b                   	pop    ebx
c0015d13:	5e                   	pop    esi
c0015d14:	5f                   	pop    edi
c0015d15:	5d                   	pop    ebp
c0015d16:	c3                   	ret    
c0015d17:	90                   	nop

c0015d18 <Timer::Timer(char const*)>:
c0015d18:	83 ec 0c             	sub    esp,0xc
c0015d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d1f:	83 ec 08             	sub    esp,0x8
c0015d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d26:	50                   	push   eax
c0015d27:	e8 26 db ff ff       	call   c0013852 <Device::Device(char const*)>
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	ba e8 79 02 c0       	mov    edx,0xc00279e8
c0015d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d38:	89 10                	mov    DWORD PTR [eax],edx
c0015d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d3e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d48:	90                   	nop
c0015d49:	83 c4 0c             	add    esp,0xc
c0015d4c:	c3                   	ret    
c0015d4d:	90                   	nop

c0015d4e <Timer::~Timer()>:
c0015d4e:	83 ec 0c             	sub    esp,0xc
c0015d51:	ba e8 79 02 c0       	mov    edx,0xc00279e8
c0015d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d5a:	89 10                	mov    DWORD PTR [eax],edx
c0015d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d60:	83 ec 0c             	sub    esp,0xc
c0015d63:	50                   	push   eax
c0015d64:	e8 9b d7 ff ff       	call   c0013504 <Device::~Device()>
c0015d69:	83 c4 10             	add    esp,0x10
c0015d6c:	90                   	nop
c0015d6d:	83 c4 0c             	add    esp,0xc
c0015d70:	c3                   	ret    
c0015d71:	90                   	nop

c0015d72 <Timer::~Timer()>:
c0015d72:	83 ec 0c             	sub    esp,0xc
c0015d75:	83 ec 0c             	sub    esp,0xc
c0015d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d7c:	e8 cd ff ff ff       	call   c0015d4e <Timer::~Timer()>
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	83 ec 08             	sub    esp,0x8
c0015d87:	68 5c 01 00 00       	push   0x15c
c0015d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d90:	e8 e2 c3 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0015d95:	83 c4 10             	add    esp,0x10
c0015d98:	83 c4 0c             	add    esp,0xc
c0015d9b:	c3                   	ret    

c0015d9c <Timer::read()>:
c0015d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015da0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015da6:	c3                   	ret    

c0015da7 <timerHandler(unsigned long long)>:
c0015da7:	55                   	push   ebp
c0015da8:	57                   	push   edi
c0015da9:	56                   	push   esi
c0015daa:	53                   	push   ebx
c0015dab:	83 ec 0c             	sub    esp,0xc
c0015dae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015db2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015db6:	01 35 70 aa 02 c0    	add    DWORD PTR ds:0xc002aa70,esi
c0015dbc:	11 3d 74 aa 02 c0    	adc    DWORD PTR ds:0xc002aa74,edi
c0015dc2:	80 3d 0d a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40d,0x0
c0015dc9:	0f 84 07 01 00 00    	je     c0015ed6 <timerHandler(unsigned long long)+0x12f>
c0015dcf:	e8 99 5b 00 00       	call   c001b96d <lockStuff()>
c0015dd4:	83 ec 0c             	sub    esp,0xc
c0015dd7:	68 3c b8 02 c0       	push   0xc002b83c
c0015ddc:	e8 8f f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015de1:	c7 04 24 3c b8 02 c0 	mov    DWORD PTR [esp],0xc002b83c
c0015de8:	89 c3                	mov    ebx,eax
c0015dea:	e8 89 f6 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015def:	83 c4 10             	add    esp,0x10
c0015df2:	84 c0                	test   al,al
c0015df4:	74 60                	je     c0015e56 <timerHandler(unsigned long long)+0xaf>
c0015df6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015dfc:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015dff:	85 c0                	test   eax,eax
c0015e01:	0f 85 91 00 00 00    	jne    c0015e98 <timerHandler(unsigned long long)+0xf1>
c0015e07:	e9 be 00 00 00       	jmp    c0015eca <timerHandler(unsigned long long)+0x123>
c0015e0c:	83 ec 0c             	sub    esp,0xc
c0015e0f:	55                   	push   ebp
c0015e10:	e8 41 61 00 00       	call   c001bf56 <unblockTask(ThreadControlBlock*)>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	39 eb                	cmp    ebx,ebp
c0015e1a:	75 12                	jne    c0015e2e <timerHandler(unsigned long long)+0x87>
c0015e1c:	83 ec 0c             	sub    esp,0xc
c0015e1f:	68 3c b8 02 c0       	push   0xc002b83c
c0015e24:	e8 47 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e29:	89 c3                	mov    ebx,eax
c0015e2b:	83 c4 10             	add    esp,0x10
c0015e2e:	83 ec 0c             	sub    esp,0xc
c0015e31:	68 3c b8 02 c0       	push   0xc002b83c
c0015e36:	e8 3d f6 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e3b:	83 c4 10             	add    esp,0x10
c0015e3e:	84 c0                	test   al,al
c0015e40:	75 b4                	jne    c0015df6 <timerHandler(unsigned long long)+0x4f>
c0015e42:	83 ec 0c             	sub    esp,0xc
c0015e45:	68 3c b8 02 c0       	push   0xc002b83c
c0015e4a:	e8 21 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e4f:	83 c4 10             	add    esp,0x10
c0015e52:	39 d8                	cmp    eax,ebx
c0015e54:	74 a0                	je     c0015df6 <timerHandler(unsigned long long)+0x4f>
c0015e56:	83 ec 0c             	sub    esp,0xc
c0015e59:	68 3c b8 02 c0       	push   0xc002b83c
c0015e5e:	e8 0d f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e63:	c7 04 24 3c b8 02 c0 	mov    DWORD PTR [esp],0xc002b83c
c0015e6a:	89 c5                	mov    ebp,eax
c0015e6c:	e8 23 f6 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e71:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e74:	83 c4 10             	add    esp,0x10
c0015e77:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e7a:	39 15 70 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa70,edx
c0015e80:	a1 74 aa 02 c0       	mov    eax,ds:0xc002aa74
c0015e85:	19 c8                	sbb    eax,ecx
c0015e87:	73 83                	jae    c0015e0c <timerHandler(unsigned long long)+0x65>
c0015e89:	50                   	push   eax
c0015e8a:	50                   	push   eax
c0015e8b:	55                   	push   ebp
c0015e8c:	68 3c b8 02 c0       	push   0xc002b83c
c0015e91:	e8 ac f6 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e96:	eb 93                	jmp    c0015e2b <timerHandler(unsigned long long)+0x84>
c0015e98:	80 3d 0c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40c,0x0
c0015e9f:	74 29                	je     c0015eca <timerHandler(unsigned long long)+0x123>
c0015ea1:	39 c6                	cmp    esi,eax
c0015ea3:	bb 00 00 00 00       	mov    ebx,0x0
c0015ea8:	19 df                	sbb    edi,ebx
c0015eaa:	72 19                	jb     c0015ec5 <timerHandler(unsigned long long)+0x11e>
c0015eac:	e8 95 5a 00 00       	call   c001b946 <lockScheduler()>
c0015eb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015eb9:	e8 bc 5d 00 00       	call   c001bc7a <schedule()>
c0015ebe:	e8 85 5a 00 00       	call   c001b948 <unlockScheduler()>
c0015ec3:	eb 05                	jmp    c0015eca <timerHandler(unsigned long long)+0x123>
c0015ec5:	29 f0                	sub    eax,esi
c0015ec7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015eca:	83 c4 0c             	add    esp,0xc
c0015ecd:	5b                   	pop    ebx
c0015ece:	5e                   	pop    esi
c0015ecf:	5f                   	pop    edi
c0015ed0:	5d                   	pop    ebp
c0015ed1:	e9 29 5e 00 00       	jmp    c001bcff <unlockStuff()>
c0015ed6:	83 c4 0c             	add    esp,0xc
c0015ed9:	5b                   	pop    ebx
c0015eda:	5e                   	pop    esi
c0015edb:	5f                   	pop    edi
c0015edc:	5d                   	pop    ebp
c0015edd:	c3                   	ret    

c0015ede <setupTimer(int)>:
c0015ede:	57                   	push   edi
c0015edf:	56                   	push   esi
c0015ee0:	53                   	push   ebx
c0015ee1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ee5:	e8 82 19 00 00       	call   c001786c <CPU::getNumber()>
c0015eea:	85 c0                	test   eax,eax
c0015eec:	74 32                	je     c0015f20 <setupTimer(int)+0x42>
c0015eee:	83 ec 0c             	sub    esp,0xc
c0015ef1:	68 60 01 00 00       	push   0x160
c0015ef6:	e8 6d c2 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015efb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015efe:	89 c3                	mov    ebx,eax
c0015f00:	e8 fb ce 00 00       	call   c0022e00 <APICTimer::APICTimer()>
c0015f05:	6a 00                	push   0x0
c0015f07:	6a 00                	push   0x0
c0015f09:	56                   	push   esi
c0015f0a:	53                   	push   ebx
c0015f0b:	e8 f8 cd 00 00       	call   c0022d08 <APICTimer::open(int, int, void*)>
c0015f10:	83 c4 20             	add    esp,0x20
c0015f13:	e8 58 19 00 00       	call   c0017870 <CPU::current()>
c0015f18:	56                   	push   esi
c0015f19:	56                   	push   esi
c0015f1a:	53                   	push   ebx
c0015f1b:	e9 96 00 00 00       	jmp    c0015fb6 <setupTimer(int)+0xd8>
c0015f20:	e8 4b 19 00 00       	call   c0017870 <CPU::current()>
c0015f25:	83 ec 0c             	sub    esp,0xc
c0015f28:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f2e:	e8 11 da ff ff       	call   c0013944 <Device::getName()>
c0015f33:	83 c4 10             	add    esp,0x10
c0015f36:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f39:	0f 85 87 00 00 00    	jne    c0015fc6 <setupTimer(int)+0xe8>
c0015f3f:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0015f44:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f4b:	74 79                	je     c0015fc6 <setupTimer(int)+0xe8>
c0015f4d:	83 ec 0c             	sub    esp,0xc
c0015f50:	68 5c 01 00 00       	push   0x15c
c0015f55:	e8 0e c2 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015f5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f5d:	89 c3                	mov    ebx,eax
c0015f5f:	e8 ec cf 00 00       	call   c0022f50 <PIT::PIT()>
c0015f64:	59                   	pop    ecx
c0015f65:	5f                   	pop    edi
c0015f66:	53                   	push   ebx
c0015f67:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0015f6d:	e8 f0 d6 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0015f72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f74:	6a 00                	push   0x0
c0015f76:	6a 00                	push   0x0
c0015f78:	56                   	push   esi
c0015f79:	53                   	push   ebx
c0015f7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f7d:	83 c4 14             	add    esp,0x14
c0015f80:	68 60 01 00 00       	push   0x160
c0015f85:	e8 de c1 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015f8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f8d:	89 c7                	mov    edi,eax
c0015f8f:	e8 6c ce 00 00       	call   c0022e00 <APICTimer::APICTimer()>
c0015f94:	6a 00                	push   0x0
c0015f96:	6a 00                	push   0x0
c0015f98:	56                   	push   esi
c0015f99:	57                   	push   edi
c0015f9a:	e8 69 cd 00 00       	call   c0022d08 <APICTimer::open(int, int, void*)>
c0015f9f:	83 c4 20             	add    esp,0x20
c0015fa2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fa4:	6a 00                	push   0x0
c0015fa6:	6a 00                	push   0x0
c0015fa8:	6a 00                	push   0x0
c0015faa:	53                   	push   ebx
c0015fab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fae:	e8 bd 18 00 00       	call   c0017870 <CPU::current()>
c0015fb3:	5a                   	pop    edx
c0015fb4:	59                   	pop    ecx
c0015fb5:	57                   	push   edi
c0015fb6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015fbc:	e8 a1 d6 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0015fc1:	83 c4 10             	add    esp,0x10
c0015fc4:	eb 33                	jmp    c0015ff9 <setupTimer(int)+0x11b>
c0015fc6:	83 ec 0c             	sub    esp,0xc
c0015fc9:	68 5c 01 00 00       	push   0x15c
c0015fce:	e8 95 c1 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015fd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fd6:	89 c3                	mov    ebx,eax
c0015fd8:	e8 73 cf 00 00       	call   c0022f50 <PIT::PIT()>
c0015fdd:	58                   	pop    eax
c0015fde:	5a                   	pop    edx
c0015fdf:	53                   	push   ebx
c0015fe0:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0015fe6:	e8 77 d6 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0015feb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fed:	6a 00                	push   0x0
c0015fef:	6a 00                	push   0x0
c0015ff1:	56                   	push   esi
c0015ff2:	53                   	push   ebx
c0015ff3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ff6:	83 c4 20             	add    esp,0x20
c0015ff9:	89 d8                	mov    eax,ebx
c0015ffb:	5b                   	pop    ebx
c0015ffc:	5e                   	pop    esi
c0015ffd:	5f                   	pop    edi
c0015ffe:	c3                   	ret    
c0015fff:	90                   	nop

c0016000 <VCache::VCache(PhysicalDisk*)>:
c0016000:	53                   	push   ebx
c0016001:	83 ec 08             	sub    esp,0x8
c0016004:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c0016009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600d:	89 10                	mov    DWORD PTR [eax],edx
c001600f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016013:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001601a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001601e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016029:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016030:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001603b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016042:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016058:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001605c:	83 ec 0c             	sub    esp,0xc
c001605f:	6a 10                	push   0x10
c0016061:	e8 02 c1 ff ff       	call   c0012168 <operator new(unsigned long)>
c0016066:	83 c4 10             	add    esp,0x10
c0016069:	89 c3                	mov    ebx,eax
c001606b:	83 ec 0c             	sub    esp,0xc
c001606e:	53                   	push   ebx
c001606f:	e8 ea 59 00 00       	call   c001ba5e <Mutex::Mutex()>
c0016074:	83 c4 10             	add    esp,0x10
c0016077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001607e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016082:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016086:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001608d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016094:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016098:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001609e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160a2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00160a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160a9:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00160af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00160b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160b9:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00160bc:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00160bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00160c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160cb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160d1:	c1 e0 06             	shl    eax,0x6
c00160d4:	83 ec 0c             	sub    esp,0xc
c00160d7:	50                   	push   eax
c00160d8:	e8 89 90 ff ff       	call   c000f166 <malloc>
c00160dd:	83 c4 10             	add    esp,0x10
c00160e0:	89 c2                	mov    edx,eax
c00160e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00160e9:	90                   	nop
c00160ea:	83 c4 08             	add    esp,0x8
c00160ed:	5b                   	pop    ebx
c00160ee:	c3                   	ret    
c00160ef:	90                   	nop

c00160f0 <VCache::writeWriteBuffer()>:
c00160f0:	53                   	push   ebx
c00160f1:	83 ec 14             	sub    esp,0x14
c00160f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00160f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00160fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00160fd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016100:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016103:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016106:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016109:	50                   	push   eax
c001610a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001610d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016114:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001611b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001611f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016126:	83 c4 28             	add    esp,0x28
c0016129:	5b                   	pop    ebx
c001612a:	c3                   	ret    
c001612b:	90                   	nop

c001612c <VCache::~VCache()>:
c001612c:	83 ec 0c             	sub    esp,0xc
c001612f:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c0016134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016138:	89 10                	mov    DWORD PTR [eax],edx
c001613a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001613e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016141:	84 c0                	test   al,al
c0016143:	74 0f                	je     c0016154 <VCache::~VCache()+0x28>
c0016145:	83 ec 0c             	sub    esp,0xc
c0016148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001614c:	e8 9f ff ff ff       	call   c00160f0 <VCache::writeWriteBuffer()>
c0016151:	83 c4 10             	add    esp,0x10
c0016154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016158:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001615b:	83 ec 0c             	sub    esp,0xc
c001615e:	50                   	push   eax
c001615f:	e8 12 90 ff ff       	call   c000f176 <free>
c0016164:	83 c4 10             	add    esp,0x10
c0016167:	90                   	nop
c0016168:	83 c4 0c             	add    esp,0xc
c001616b:	c3                   	ret    

c001616c <VCache::~VCache()>:
c001616c:	83 ec 0c             	sub    esp,0xc
c001616f:	83 ec 0c             	sub    esp,0xc
c0016172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016176:	e8 b1 ff ff ff       	call   c001612c <VCache::~VCache()>
c001617b:	83 c4 10             	add    esp,0x10
c001617e:	83 ec 08             	sub    esp,0x8
c0016181:	6a 30                	push   0x30
c0016183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016187:	e8 eb bf ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001618c:	83 c4 10             	add    esp,0x10
c001618f:	83 c4 0c             	add    esp,0xc
c0016192:	c3                   	ret    
c0016193:	90                   	nop

c0016194 <VCache::write(unsigned long long, int, void*)>:
c0016194:	55                   	push   ebp
c0016195:	57                   	push   edi
c0016196:	56                   	push   esi
c0016197:	53                   	push   ebx
c0016198:	83 ec 28             	sub    esp,0x28
c001619b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001619f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00161a3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00161a7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00161ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00161ae:	e8 0d 5d 00 00       	call   c001bec0 <Semaphore::acquire()>
c00161b3:	83 c4 10             	add    esp,0x10
c00161b6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00161ba:	74 66                	je     c0016222 <VCache::write(unsigned long long, int, void*)+0x8e>
c00161bc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161bf:	99                   	cdq    
c00161c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161c4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00161c7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00161ca:	89 c1                	mov    ecx,eax
c00161cc:	89 d0                	mov    eax,edx
c00161ce:	31 f1                	xor    ecx,esi
c00161d0:	31 f8                	xor    eax,edi
c00161d2:	89 ca                	mov    edx,ecx
c00161d4:	09 c2                	or     edx,eax
c00161d6:	75 3e                	jne    c0016216 <VCache::write(unsigned long long, int, void*)+0x82>
c00161d8:	83 fd 01             	cmp    ebp,0x1
c00161db:	75 39                	jne    c0016216 <VCache::write(unsigned long long, int, void*)+0x82>
c00161dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161e0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00161e6:	51                   	push   ecx
c00161e7:	50                   	push   eax
c00161e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00161f0:	0f af c8             	imul   ecx,eax
c00161f3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00161f6:	51                   	push   ecx
c00161f7:	e8 ba a4 fe ff       	call   c00006b6 <memcpy>
c00161fc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161ff:	83 c4 10             	add    esp,0x10
c0016202:	40                   	inc    eax
c0016203:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016206:	83 f8 40             	cmp    eax,0x40
c0016209:	75 57                	jne    c0016262 <VCache::write(unsigned long long, int, void*)+0xce>
c001620b:	83 ec 0c             	sub    esp,0xc
c001620e:	53                   	push   ebx
c001620f:	e8 dc fe ff ff       	call   c00160f0 <VCache::writeWriteBuffer()>
c0016214:	eb 34                	jmp    c001624a <VCache::write(unsigned long long, int, void*)+0xb6>
c0016216:	83 ec 0c             	sub    esp,0xc
c0016219:	53                   	push   ebx
c001621a:	e8 d1 fe ff ff       	call   c00160f0 <VCache::writeWriteBuffer()>
c001621f:	83 c4 10             	add    esp,0x10
c0016222:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016225:	83 fd 3f             	cmp    ebp,0x3f
c0016228:	7f 25                	jg     c001624f <VCache::write(unsigned long long, int, void*)+0xbb>
c001622a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001622d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016230:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016233:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016237:	52                   	push   edx
c0016238:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001623e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016242:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016245:	e8 6c a4 fe ff       	call   c00006b6 <memcpy>
c001624a:	83 c4 10             	add    esp,0x10
c001624d:	eb 13                	jmp    c0016262 <VCache::write(unsigned long long, int, void*)+0xce>
c001624f:	83 ec 0c             	sub    esp,0xc
c0016252:	8b 10                	mov    edx,DWORD PTR [eax]
c0016254:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016258:	55                   	push   ebp
c0016259:	57                   	push   edi
c001625a:	56                   	push   esi
c001625b:	50                   	push   eax
c001625c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001625f:	83 c4 20             	add    esp,0x20
c0016262:	83 ec 0c             	sub    esp,0xc
c0016265:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016268:	e8 db 61 00 00       	call   c001c448 <Semaphore::release()>
c001626d:	83 c4 2c             	add    esp,0x2c
c0016270:	31 c0                	xor    eax,eax
c0016272:	5b                   	pop    ebx
c0016273:	5e                   	pop    esi
c0016274:	5f                   	pop    edi
c0016275:	5d                   	pop    ebp
c0016276:	c3                   	ret    
c0016277:	90                   	nop

c0016278 <VCache::read(unsigned long long, int, void*)>:
c0016278:	57                   	push   edi
c0016279:	56                   	push   esi
c001627a:	53                   	push   ebx
c001627b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001627f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016283:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016287:	83 ec 0c             	sub    esp,0xc
c001628a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001628d:	e8 2e 5c 00 00       	call   c001bec0 <Semaphore::acquire()>
c0016292:	83 c4 10             	add    esp,0x10
c0016295:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016299:	74 0c                	je     c00162a7 <VCache::read(unsigned long long, int, void*)+0x2f>
c001629b:	83 ec 0c             	sub    esp,0xc
c001629e:	53                   	push   ebx
c001629f:	e8 4c fe ff ff       	call   c00160f0 <VCache::writeWriteBuffer()>
c00162a4:	83 c4 10             	add    esp,0x10
c00162a7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00162aa:	83 ec 0c             	sub    esp,0xc
c00162ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00162af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162b7:	57                   	push   edi
c00162b8:	56                   	push   esi
c00162b9:	50                   	push   eax
c00162ba:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162bd:	83 c4 14             	add    esp,0x14
c00162c0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162c3:	e8 80 61 00 00       	call   c001c448 <Semaphore::release()>
c00162c8:	83 c4 10             	add    esp,0x10
c00162cb:	31 c0                	xor    eax,eax
c00162cd:	5b                   	pop    ebx
c00162ce:	5e                   	pop    esi
c00162cf:	5f                   	pop    edi
c00162d0:	c3                   	ret    
c00162d1:	90                   	nop

c00162d2 <Video::putrect(int, int, int, int, unsigned int)>:
c00162d2:	55                   	push   ebp
c00162d3:	57                   	push   edi
c00162d4:	56                   	push   esi
c00162d5:	53                   	push   ebx
c00162d6:	83 ec 1c             	sub    esp,0x1c
c00162d9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00162e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162e5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00162e9:	01 e8                	add    eax,ebp
c00162eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162f3:	01 df                	add    edi,ebx
c00162f5:	39 fb                	cmp    ebx,edi
c00162f7:	7d 1b                	jge    c0016314 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00162f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00162fd:	7d 12                	jge    c0016311 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00162ff:	8b 16                	mov    edx,DWORD PTR [esi]
c0016301:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016305:	53                   	push   ebx
c0016306:	55                   	push   ebp
c0016307:	45                   	inc    ebp
c0016308:	56                   	push   esi
c0016309:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001630c:	83 c4 10             	add    esp,0x10
c001630f:	eb e8                	jmp    c00162f9 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0016311:	43                   	inc    ebx
c0016312:	eb e1                	jmp    c00162f5 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0016314:	83 c4 1c             	add    esp,0x1c
c0016317:	5b                   	pop    ebx
c0016318:	5e                   	pop    esi
c0016319:	5f                   	pop    edi
c001631a:	5d                   	pop    ebp
c001631b:	c3                   	ret    

c001631c <Video::blit(unsigned int*, int, int, int, int)>:
c001631c:	55                   	push   ebp
c001631d:	57                   	push   edi
c001631e:	56                   	push   esi
c001631f:	53                   	push   ebx
c0016320:	83 ec 1c             	sub    esp,0x1c
c0016323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016327:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001632b:	85 c0                	test   eax,eax
c001632d:	79 02                	jns    c0016331 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001632f:	31 c0                	xor    eax,eax
c0016331:	c1 e0 02             	shl    eax,0x2
c0016334:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016338:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001633c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016340:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016344:	39 d8                	cmp    eax,ebx
c0016346:	7e 49                	jle    c0016391 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016348:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001634e:	7c 41                	jl     c0016391 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016350:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016354:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016358:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001635c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016360:	39 f9                	cmp    ecx,edi
c0016362:	7e 22                	jle    c0016386 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016364:	83 c5 04             	add    ebp,0x4
c0016367:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001636d:	7c 14                	jl     c0016383 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001636f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016371:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016374:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016378:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001637c:	56                   	push   esi
c001637d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	47                   	inc    edi
c0016384:	eb d2                	jmp    c0016358 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001638a:	43                   	inc    ebx
c001638b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001638f:	eb ab                	jmp    c001633c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016391:	83 c4 1c             	add    esp,0x1c
c0016394:	5b                   	pop    ebx
c0016395:	5e                   	pop    esi
c0016396:	5f                   	pop    edi
c0016397:	5d                   	pop    ebp
c0016398:	c3                   	ret    
c0016399:	90                   	nop

c001639a <Video::clearScreen(unsigned int)>:
c001639a:	57                   	push   edi
c001639b:	56                   	push   esi
c001639c:	53                   	push   ebx
c001639d:	31 db                	xor    ebx,ebx
c001639f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163a3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00163a9:	7e 1f                	jle    c00163ca <Video::clearScreen(unsigned int)+0x30>
c00163ab:	31 ff                	xor    edi,edi
c00163ad:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00163b3:	7e 12                	jle    c00163c7 <Video::clearScreen(unsigned int)+0x2d>
c00163b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00163b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163bb:	53                   	push   ebx
c00163bc:	57                   	push   edi
c00163bd:	47                   	inc    edi
c00163be:	56                   	push   esi
c00163bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00163c2:	83 c4 10             	add    esp,0x10
c00163c5:	eb e6                	jmp    c00163ad <Video::clearScreen(unsigned int)+0x13>
c00163c7:	43                   	inc    ebx
c00163c8:	eb d9                	jmp    c00163a3 <Video::clearScreen(unsigned int)+0x9>
c00163ca:	5b                   	pop    ebx
c00163cb:	5e                   	pop    esi
c00163cc:	5f                   	pop    edi
c00163cd:	c3                   	ret    

c00163ce <Video::putpixel(int, int, unsigned int)>:
c00163ce:	c7 44 24 04 20 7a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027a20
c00163d6:	e9 7c be ff ff       	jmp    c0012257 <Dbg::kprintf(char const*, ...)>
c00163db:	90                   	nop

c00163dc <Video::Video(char const*)>:
c00163dc:	83 ec 0c             	sub    esp,0xc
c00163df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e3:	83 ec 08             	sub    esp,0x8
c00163e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ea:	50                   	push   eax
c00163eb:	e8 62 d4 ff ff       	call   c0013852 <Device::Device(char const*)>
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c00163f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fc:	89 10                	mov    DWORD PTR [eax],edx
c00163fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016402:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001640c:	90                   	nop
c001640d:	83 c4 0c             	add    esp,0xc
c0016410:	c3                   	ret    
c0016411:	90                   	nop

c0016412 <Video::~Video()>:
c0016412:	83 ec 0c             	sub    esp,0xc
c0016415:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c001641a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641e:	89 10                	mov    DWORD PTR [eax],edx
c0016420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016424:	83 ec 0c             	sub    esp,0xc
c0016427:	50                   	push   eax
c0016428:	e8 d7 d0 ff ff       	call   c0013504 <Device::~Device()>
c001642d:	83 c4 10             	add    esp,0x10
c0016430:	90                   	nop
c0016431:	83 c4 0c             	add    esp,0xc
c0016434:	c3                   	ret    
c0016435:	90                   	nop

c0016436 <Video::~Video()>:
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	83 ec 0c             	sub    esp,0xc
c001643c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016440:	e8 cd ff ff ff       	call   c0016412 <Video::~Video()>
c0016445:	83 c4 10             	add    esp,0x10
c0016448:	83 ec 08             	sub    esp,0x8
c001644b:	68 64 01 00 00       	push   0x164
c0016450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016454:	e8 1e bd ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0016459:	83 c4 10             	add    esp,0x10
c001645c:	83 c4 0c             	add    esp,0xc
c001645f:	c3                   	ret    

c0016460 <Video::isMonochrome()>:
c0016460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016464:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001646a:	c3                   	ret    
c001646b:	90                   	nop

c001646c <Video::getWidth()>:
c001646c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016470:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016476:	c3                   	ret    
c0016477:	90                   	nop

c0016478 <Video::getHeight()>:
c0016478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001647c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016482:	c3                   	ret    
c0016483:	90                   	nop

c0016484 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016484:	55                   	push   ebp
c0016485:	57                   	push   edi
c0016486:	56                   	push   esi
c0016487:	53                   	push   ebx
c0016488:	83 ec 2c             	sub    esp,0x2c
c001648b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001648f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016493:	83 f8 01             	cmp    eax,0x1
c0016496:	19 c9                	sbb    ecx,ecx
c0016498:	31 db                	xor    ebx,ebx
c001649a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001649e:	89 cd                	mov    ebp,ecx
c00164a0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00164a8:	f7 d5                	not    ebp
c00164aa:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00164b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00164b4:	01 d8                	add    eax,ebx
c00164b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164ba:	56                   	push   esi
c00164bb:	e8 b8 ff ff ff       	call   c0016478 <Video::getHeight()>
c00164c0:	59                   	pop    ecx
c00164c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00164c5:	7e 70                	jle    c0016537 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00164c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164cb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00164cf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164da:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00164e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164e5:	89 f8                	mov    eax,edi
c00164e7:	83 c0 20             	add    eax,0x20
c00164ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164ee:	56                   	push   esi
c00164ef:	e8 78 ff ff ff       	call   c001646c <Video::getWidth()>
c00164f4:	5a                   	pop    edx
c00164f5:	39 c7                	cmp    edi,eax
c00164f7:	7d 34                	jge    c001652d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00164f9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00164fe:	74 05                	je     c0016505 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016500:	8b 06                	mov    eax,DWORD PTR [esi]
c0016502:	55                   	push   ebp
c0016503:	eb 0d                	jmp    c0016512 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016505:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001650a:	74 12                	je     c001651e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001650c:	8b 06                	mov    eax,DWORD PTR [esi]
c001650e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016512:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016516:	57                   	push   edi
c0016517:	56                   	push   esi
c0016518:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016522:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016526:	47                   	inc    edi
c0016527:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001652b:	75 c1                	jne    c00164ee <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001652d:	43                   	inc    ebx
c001652e:	83 fb 20             	cmp    ebx,0x20
c0016531:	0f 85 79 ff ff ff    	jne    c00164b0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016537:	83 c4 2c             	add    esp,0x2c
c001653a:	5b                   	pop    ebx
c001653b:	5e                   	pop    esi
c001653c:	5f                   	pop    edi
c001653d:	5d                   	pop    ebp
c001653e:	c3                   	ret    
c001653f:	90                   	nop

c0016540 <ACPI::close(int, int, void*)>:
c0016540:	83 ec 1c             	sub    esp,0x1c
c0016543:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001654b:	74 0a                	je     c0016557 <ACPI::close(int, int, void*)+0x17>
c001654d:	b8 00 00 00 00       	mov    eax,0x0
c0016552:	e9 9a 00 00 00       	jmp    c00165f1 <ACPI::close(int, int, void*)+0xb1>
c0016557:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001655c:	75 37                	jne    c0016595 <ACPI::close(int, int, void*)+0x55>
c001655e:	83 ec 0c             	sub    esp,0xc
c0016561:	68 70 7a 02 c0       	push   0xc0027a70
c0016566:	e8 ec bc ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001656b:	83 c4 10             	add    esp,0x10
c001656e:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016573:	85 c0                	test   eax,eax
c0016575:	74 07                	je     c001657e <ACPI::close(int, int, void*)+0x3e>
c0016577:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001657c:	ff d0                	call   eax
c001657e:	83 ec 0c             	sub    esp,0xc
c0016581:	68 24 7b 02 c0       	push   0xc0027b24
c0016586:	e8 68 24 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016593:	eb 5c                	jmp    c00165f1 <ACPI::close(int, int, void*)+0xb1>
c0016595:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001659a:	75 50                	jne    c00165ec <ACPI::close(int, int, void*)+0xac>
c001659c:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c00165a1:	85 c0                	test   eax,eax
c00165a3:	74 07                	je     c00165ac <ACPI::close(int, int, void*)+0x6c>
c00165a5:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c00165aa:	ff d0                	call   eax
c00165ac:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00165b1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00165b6:	83 e0 02             	and    eax,0x2
c00165b9:	74 1c                	je     c00165d7 <ACPI::close(int, int, void*)+0x97>
c00165bb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00165c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165c6:	89 c2                	mov    edx,eax
c00165c8:	ec                   	in     al,dx
c00165c9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00165cd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165d5:	eb da                	jmp    c00165b1 <ACPI::close(int, int, void*)+0x71>
c00165d7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00165de:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00165e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00165e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165eb:	ee                   	out    dx,al
c00165ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165f1:	83 c4 1c             	add    esp,0x1c
c00165f4:	c3                   	ret    

c00165f5 <findRSDP()>:
c00165f5:	83 ec 1c             	sub    esp,0x1c
c00165f8:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00165fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016603:	83 e0 04             	and    eax,0x4
c0016606:	84 c0                	test   al,al
c0016608:	75 07                	jne    c0016611 <findRSDP()+0x1c>
c001660a:	b8 00 00 00 00       	mov    eax,0x0
c001660f:	eb 6a                	jmp    c001667b <findRSDP()+0x86>
c0016611:	a1 50 a4 02 c0       	mov    eax,ds:0xc002a450
c0016616:	3d ff 07 00 00       	cmp    eax,0x7ff
c001661b:	7f 1b                	jg     c0016638 <findRSDP()+0x43>
c001661d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016622:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016628:	83 e2 fb             	and    edx,0xfffffffb
c001662b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016631:	b8 00 00 00 00       	mov    eax,0x0
c0016636:	eb 43                	jmp    c001667b <findRSDP()+0x86>
c0016638:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016640:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016648:	77 2c                	ja     c0016676 <findRSDP()+0x81>
c001664a:	83 ec 04             	sub    esp,0x4
c001664d:	6a 08                	push   0x8
c001664f:	68 7d 7a 02 c0       	push   0xc0027a7d
c0016654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016658:	e8 f6 9f fe ff       	call   c0000653 <memcmp>
c001665d:	83 c4 10             	add    esp,0x10
c0016660:	85 c0                	test   eax,eax
c0016662:	0f 94 c0             	sete   al
c0016665:	84 c0                	test   al,al
c0016667:	74 06                	je     c001666f <findRSDP()+0x7a>
c0016669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001666d:	eb 0c                	jmp    c001667b <findRSDP()+0x86>
c001666f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016674:	eb ca                	jmp    c0016640 <findRSDP()+0x4b>
c0016676:	b8 00 00 00 00       	mov    eax,0x0
c001667b:	83 c4 1c             	add    esp,0x1c
c001667e:	c3                   	ret    

c001667f <loadACPITables(unsigned char*)>:
c001667f:	56                   	push   esi
c0016680:	53                   	push   ebx
c0016681:	83 ec 44             	sub    esp,0x44
c0016684:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016689:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001668f:	83 e0 04             	and    eax,0x4
c0016692:	84 c0                	test   al,al
c0016694:	0f 84 05 02 00 00    	je     c001689f <loadACPITables(unsigned char*)+0x220>
c001669a:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c001669f:	84 c0                	test   al,al
c00166a1:	74 75                	je     c0016718 <loadACPITables(unsigned char*)+0x99>
c00166a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166a7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166b2:	83 e8 24             	sub    eax,0x24
c00166b5:	c1 e8 03             	shr    eax,0x3
c00166b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00166bc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00166c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166c8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00166cc:	0f 8d b2 00 00 00    	jge    c0016784 <loadACPITables(unsigned char*)+0x105>
c00166d2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166d6:	83 c0 24             	add    eax,0x24
c00166d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00166dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00166e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166e9:	c1 e0 03             	shl    eax,0x3
c00166ec:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00166f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00166f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00166f9:	89 c1                	mov    ecx,eax
c00166fb:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c0016700:	8d 50 01             	lea    edx,[eax+0x1]
c0016703:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c0016709:	89 ca                	mov    edx,ecx
c001670b:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c0016712:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016716:	eb ac                	jmp    c00166c4 <loadACPITables(unsigned char*)+0x45>
c0016718:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001671c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016724:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016727:	83 e8 24             	sub    eax,0x24
c001672a:	c1 e8 02             	shr    eax,0x2
c001672d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016731:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016739:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001673d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016741:	7d 41                	jge    c0016784 <loadACPITables(unsigned char*)+0x105>
c0016743:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016747:	83 c0 24             	add    eax,0x24
c001674a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001674e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016756:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001675a:	c1 e0 02             	shl    eax,0x2
c001675d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016765:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016767:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c001676c:	8d 50 01             	lea    edx,[eax+0x1]
c001676f:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c0016775:	89 ca                	mov    edx,ecx
c0016777:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c001677e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016782:	eb b5                	jmp    c0016739 <loadACPITables(unsigned char*)+0xba>
c0016784:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001678c:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c0016791:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016795:	0f 8d 05 01 00 00    	jge    c00168a0 <loadACPITables(unsigned char*)+0x221>
c001679b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001679f:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c00167a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b6:	25 ff 0f 00 00       	and    eax,0xfff
c00167bb:	89 c6                	mov    esi,eax
c00167bd:	e8 53 ac ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c00167c2:	89 c3                	mov    ebx,eax
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	6a 01                	push   0x1
c00167c9:	e8 b7 aa ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c00167ce:	83 c4 10             	add    esp,0x10
c00167d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167d5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167db:	83 ec 0c             	sub    esp,0xc
c00167de:	6a 01                	push   0x1
c00167e0:	6a 01                	push   0x1
c00167e2:	50                   	push   eax
c00167e3:	52                   	push   edx
c00167e4:	53                   	push   ebx
c00167e5:	e8 5a b4 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167ea:	83 c4 20             	add    esp,0x20
c00167ed:	09 f0                	or     eax,esi
c00167ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167f7:	c1 e0 03             	shl    eax,0x3
c00167fa:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c00167ff:	83 ec 04             	sub    esp,0x4
c0016802:	6a 04                	push   0x4
c0016804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016808:	50                   	push   eax
c0016809:	e8 a8 9e fe ff       	call   c00006b6 <memcpy>
c001680e:	83 c4 10             	add    esp,0x10
c0016811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016815:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016818:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001681c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016820:	05 00 10 00 00       	add    eax,0x1000
c0016825:	c1 e8 0c             	shr    eax,0xc
c0016828:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001682c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016830:	89 04 24             	mov    DWORD PTR [esp],eax
c0016833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016837:	25 ff 0f 00 00       	and    eax,0xfff
c001683c:	89 c6                	mov    esi,eax
c001683e:	e8 d2 ab ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c0016843:	89 c3                	mov    ebx,eax
c0016845:	83 ec 0c             	sub    esp,0xc
c0016848:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001684c:	e8 34 aa ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0016851:	83 c4 10             	add    esp,0x10
c0016854:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016858:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001685e:	83 ec 0c             	sub    esp,0xc
c0016861:	6a 01                	push   0x1
c0016863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016867:	50                   	push   eax
c0016868:	52                   	push   edx
c0016869:	53                   	push   ebx
c001686a:	e8 d5 b3 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001686f:	83 c4 20             	add    esp,0x20
c0016872:	09 f0                	or     eax,esi
c0016874:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016878:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001687b:	83 ec 0c             	sub    esp,0xc
c001687e:	50                   	push   eax
c001687f:	e8 5b ad ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c0016884:	83 c4 10             	add    esp,0x10
c0016887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001688b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001688f:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c0016896:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001689a:	e9 ed fe ff ff       	jmp    c001678c <loadACPITables(unsigned char*)+0x10d>
c001689f:	90                   	nop
c00168a0:	83 c4 44             	add    esp,0x44
c00168a3:	5b                   	pop    ebx
c00168a4:	5e                   	pop    esi
c00168a5:	c3                   	ret    

c00168a6 <findRSDT(unsigned char*)>:
c00168a6:	56                   	push   esi
c00168a7:	53                   	push   ebx
c00168a8:	83 ec 44             	sub    esp,0x44
c00168ab:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00168b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00168b6:	83 e0 04             	and    eax,0x4
c00168b9:	84 c0                	test   al,al
c00168bb:	75 0a                	jne    c00168c7 <findRSDT(unsigned char*)+0x21>
c00168bd:	b8 00 00 00 00       	mov    eax,0x0
c00168c2:	e9 f7 00 00 00       	jmp    c00169be <findRSDT(unsigned char*)+0x118>
c00168c7:	83 ec 04             	sub    esp,0x4
c00168ca:	6a 24                	push   0x24
c00168cc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168d4:	50                   	push   eax
c00168d5:	e8 dc 9d fe ff       	call   c00006b6 <memcpy>
c00168da:	83 c4 10             	add    esp,0x10
c00168dd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00168e1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00168e5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00168ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00168f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016901:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016905:	25 ff 0f 00 00       	and    eax,0xfff
c001690a:	89 c6                	mov    esi,eax
c001690c:	e8 04 ab ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c0016911:	89 c3                	mov    ebx,eax
c0016913:	83 ec 0c             	sub    esp,0xc
c0016916:	6a 02                	push   0x2
c0016918:	e8 68 a9 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016924:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001692a:	83 ec 0c             	sub    esp,0xc
c001692d:	6a 01                	push   0x1
c001692f:	6a 02                	push   0x2
c0016931:	50                   	push   eax
c0016932:	52                   	push   edx
c0016933:	53                   	push   ebx
c0016934:	e8 0b b3 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016939:	83 c4 20             	add    esp,0x20
c001693c:	09 f0                	or     eax,esi
c001693e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016946:	25 ff 0f 00 00       	and    eax,0xfff
c001694b:	89 c6                	mov    esi,eax
c001694d:	e8 c3 aa ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c0016952:	89 c3                	mov    ebx,eax
c0016954:	83 ec 0c             	sub    esp,0xc
c0016957:	6a 02                	push   0x2
c0016959:	e8 27 a9 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c001695e:	83 c4 10             	add    esp,0x10
c0016961:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016965:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001696b:	83 ec 0c             	sub    esp,0xc
c001696e:	6a 01                	push   0x1
c0016970:	6a 02                	push   0x2
c0016972:	50                   	push   eax
c0016973:	52                   	push   edx
c0016974:	53                   	push   ebx
c0016975:	e8 ca b2 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001697a:	83 c4 20             	add    esp,0x20
c001697d:	09 f0                	or     eax,esi
c001697f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016983:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016988:	75 11                	jne    c001699b <findRSDT(unsigned char*)+0xf5>
c001698a:	c6 05 a0 ac 02 c0 00 	mov    BYTE PTR ds:0xc002aca0,0x0
c0016991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016995:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016999:	eb 1f                	jmp    c00169ba <findRSDT(unsigned char*)+0x114>
c001699b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00169a0:	75 11                	jne    c00169b3 <findRSDT(unsigned char*)+0x10d>
c00169a2:	c6 05 a0 ac 02 c0 01 	mov    BYTE PTR ds:0xc002aca0,0x1
c00169a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169b1:	eb 07                	jmp    c00169ba <findRSDT(unsigned char*)+0x114>
c00169b3:	b8 00 00 00 00       	mov    eax,0x0
c00169b8:	eb 04                	jmp    c00169be <findRSDT(unsigned char*)+0x118>
c00169ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169be:	83 c4 44             	add    esp,0x44
c00169c1:	5b                   	pop    ebx
c00169c2:	5e                   	pop    esi
c00169c3:	c3                   	ret    

c00169c4 <findDataTable(unsigned char*, char*)>:
c00169c4:	83 ec 1c             	sub    esp,0x1c
c00169c7:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00169cc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169d2:	83 e0 04             	and    eax,0x4
c00169d5:	84 c0                	test   al,al
c00169d7:	75 07                	jne    c00169e0 <findDataTable(unsigned char*, char*)+0x1c>
c00169d9:	b8 00 00 00 00       	mov    eax,0x0
c00169de:	eb 7c                	jmp    c0016a5c <findDataTable(unsigned char*, char*)+0x98>
c00169e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00169e8:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c00169ed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00169f1:	7d 3a                	jge    c0016a2d <findDataTable(unsigned char*, char*)+0x69>
c00169f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169f7:	c1 e0 03             	shl    eax,0x3
c00169fa:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c00169ff:	83 ec 04             	sub    esp,0x4
c0016a02:	6a 04                	push   0x4
c0016a04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a08:	50                   	push   eax
c0016a09:	e8 45 9c fe ff       	call   c0000653 <memcmp>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	85 c0                	test   eax,eax
c0016a13:	0f 94 c0             	sete   al
c0016a16:	84 c0                	test   al,al
c0016a18:	74 0d                	je     c0016a27 <findDataTable(unsigned char*, char*)+0x63>
c0016a1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a1e:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c0016a25:	eb 35                	jmp    c0016a5c <findDataTable(unsigned char*, char*)+0x98>
c0016a27:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016a2b:	eb bb                	jmp    c00169e8 <findDataTable(unsigned char*, char*)+0x24>
c0016a2d:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c0016a32:	84 c0                	test   al,al
c0016a34:	74 07                	je     c0016a3d <findDataTable(unsigned char*, char*)+0x79>
c0016a36:	b8 58 00 00 00       	mov    eax,0x58
c0016a3b:	eb 05                	jmp    c0016a42 <findDataTable(unsigned char*, char*)+0x7e>
c0016a3d:	b8 52 00 00 00       	mov    eax,0x52
c0016a42:	83 ec 04             	sub    esp,0x4
c0016a45:	50                   	push   eax
c0016a46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a4a:	68 48 7b 02 c0       	push   0xc0027b48
c0016a4f:	e8 03 b8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0016a54:	83 c4 10             	add    esp,0x10
c0016a57:	b8 00 00 00 00       	mov    eax,0x0
c0016a5c:	83 c4 1c             	add    esp,0x1c
c0016a5f:	c3                   	ret    

c0016a60 <scanMADT()>:
c0016a60:	83 ec 2c             	sub    esp,0x2c
c0016a63:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016a68:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a6e:	83 e0 04             	and    eax,0x4
c0016a71:	84 c0                	test   al,al
c0016a73:	0f 84 73 03 00 00    	je     c0016dec <scanMADT()+0x38c>
c0016a79:	e8 77 fb ff ff       	call   c00165f5 <findRSDP()>
c0016a7e:	a3 ac ac 02 c0       	mov    ds:0xc002acac,eax
c0016a83:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016a88:	85 c0                	test   eax,eax
c0016a8a:	75 19                	jne    c0016aa5 <scanMADT()+0x45>
c0016a8c:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016a91:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a97:	83 e2 fb             	and    edx,0xfffffffb
c0016a9a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016aa0:	e9 4b 03 00 00       	jmp    c0016df0 <scanMADT()+0x390>
c0016aa5:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016aaa:	83 ec 0c             	sub    esp,0xc
c0016aad:	50                   	push   eax
c0016aae:	e8 f3 fd ff ff       	call   c00168a6 <findRSDT(unsigned char*)>
c0016ab3:	83 c4 10             	add    esp,0x10
c0016ab6:	a3 a8 ac 02 c0       	mov    ds:0xc002aca8,eax
c0016abb:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016ac0:	85 c0                	test   eax,eax
c0016ac2:	75 19                	jne    c0016add <scanMADT()+0x7d>
c0016ac4:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016ac9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016acf:	83 e2 fb             	and    edx,0xfffffffb
c0016ad2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ad8:	e9 13 03 00 00       	jmp    c0016df0 <scanMADT()+0x390>
c0016add:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016ae2:	83 ec 0c             	sub    esp,0xc
c0016ae5:	50                   	push   eax
c0016ae6:	e8 94 fb ff ff       	call   c001667f <loadACPITables(unsigned char*)>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016af3:	83 ec 08             	sub    esp,0x8
c0016af6:	68 86 7a 02 c0       	push   0xc0027a86
c0016afb:	50                   	push   eax
c0016afc:	e8 c3 fe ff ff       	call   c00169c4 <findDataTable(unsigned char*, char*)>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b08:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016b0d:	75 19                	jne    c0016b28 <scanMADT()+0xc8>
c0016b0f:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016b14:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016b1a:	83 e2 fe             	and    edx,0xfffffffe
c0016b1d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016b23:	e9 c8 02 00 00       	jmp    c0016df0 <scanMADT()+0x390>
c0016b28:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b37:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016b3b:	0f 87 af 02 00 00    	ja     c0016df0 <scanMADT()+0x390>
c0016b41:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016b49:	0f 87 a1 02 00 00    	ja     c0016df0 <scanMADT()+0x390>
c0016b4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b5b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b66:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b6a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b72:	8d 50 01             	lea    edx,[eax+0x1]
c0016b75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b7d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b81:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016b85:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016b8a:	0f 86 5f 02 00 00    	jbe    c0016def <scanMADT()+0x38f>
c0016b90:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016b95:	75 57                	jne    c0016bee <scanMADT()+0x18e>
c0016b97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b9b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016ba2:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016ba8:	0f b6 d2             	movzx  edx,dl
c0016bab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016baf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bb3:	88 82 20 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd51e0],al
c0016bb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bbd:	8d 50 01             	lea    edx,[eax+0x1]
c0016bc0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bc4:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016bca:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016bcd:	88 0d e0 ad 02 c0    	mov    BYTE PTR ds:0xc002ade0,cl
c0016bd3:	0f b6 d2             	movzx  edx,dl
c0016bd6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bda:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bde:	88 82 00 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd5200],al
c0016be4:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016be9:	e9 ea 01 00 00       	jmp    c0016dd8 <scanMADT()+0x378>
c0016bee:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016bf3:	0f 85 14 01 00 00    	jne    c0016d0d <scanMADT()+0x2ad>
c0016bf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bfd:	8d 50 01             	lea    edx,[eax+0x1]
c0016c00:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c04:	8a 15 b0 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002acb0
c0016c0a:	0f b6 d2             	movzx  edx,dl
c0016c0d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016c11:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016c15:	88 82 c0 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd5340],al
c0016c1b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016c1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c27:	01 d0                	add    eax,edx
c0016c29:	83 c0 2c             	add    eax,0x2c
c0016c2c:	8a 00                	mov    al,BYTE PTR [eax]
c0016c2e:	0f b6 d0             	movzx  edx,al
c0016c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c35:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c3c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c40:	0f b6 c0             	movzx  eax,al
c0016c43:	c1 e0 08             	shl    eax,0x8
c0016c46:	89 d1                	mov    ecx,edx
c0016c48:	09 c1                	or     ecx,eax
c0016c4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c4e:	8d 50 02             	lea    edx,[eax+0x2]
c0016c51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c59:	0f b6 c0             	movzx  eax,al
c0016c5c:	c1 e0 10             	shl    eax,0x10
c0016c5f:	09 c1                	or     ecx,eax
c0016c61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c65:	8d 50 03             	lea    edx,[eax+0x3]
c0016c68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c6c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c70:	0f b6 c0             	movzx  eax,al
c0016c73:	c1 e0 18             	shl    eax,0x18
c0016c76:	09 c1                	or     ecx,eax
c0016c78:	89 ca                	mov    edx,ecx
c0016c7a:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016c7f:	0f b6 c0             	movzx  eax,al
c0016c82:	89 14 85 e0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5320],edx
c0016c89:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016c8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c96:	01 d0                	add    eax,edx
c0016c98:	83 c0 2c             	add    eax,0x2c
c0016c9b:	8a 00                	mov    al,BYTE PTR [eax]
c0016c9d:	0f b6 d0             	movzx  edx,al
c0016ca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ca4:	8d 48 01             	lea    ecx,[eax+0x1]
c0016ca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cab:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016caf:	0f b6 c0             	movzx  eax,al
c0016cb2:	c1 e0 08             	shl    eax,0x8
c0016cb5:	89 d1                	mov    ecx,edx
c0016cb7:	09 c1                	or     ecx,eax
c0016cb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cbd:	8d 50 02             	lea    edx,[eax+0x2]
c0016cc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cc4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cc8:	0f b6 c0             	movzx  eax,al
c0016ccb:	c1 e0 10             	shl    eax,0x10
c0016cce:	09 c1                	or     ecx,eax
c0016cd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cd4:	8d 50 03             	lea    edx,[eax+0x3]
c0016cd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cdb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cdf:	0f b6 c0             	movzx  eax,al
c0016ce2:	c1 e0 18             	shl    eax,0x18
c0016ce5:	09 c1                	or     ecx,eax
c0016ce7:	89 ca                	mov    edx,ecx
c0016ce9:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016cee:	0f b6 c0             	movzx  eax,al
c0016cf1:	89 14 85 60 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd52a0],edx
c0016cf8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016cfd:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016d02:	40                   	inc    eax
c0016d03:	a2 b0 ac 02 c0       	mov    ds:0xc002acb0,al
c0016d08:	e9 cb 00 00 00       	jmp    c0016dd8 <scanMADT()+0x378>
c0016d0d:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0016d12:	0f 85 a6 00 00 00    	jne    c0016dbe <scanMADT()+0x35e>
c0016d18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d1c:	8d 50 01             	lea    edx,[eax+0x1]
c0016d1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d27:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d2b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016d2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d33:	8d 50 01             	lea    edx,[eax+0x1]
c0016d36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d3a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d3e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d42:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d46:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d4e:	01 d0                	add    eax,edx
c0016d50:	83 c0 2c             	add    eax,0x2c
c0016d53:	8a 00                	mov    al,BYTE PTR [eax]
c0016d55:	0f b6 d0             	movzx  edx,al
c0016d58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d5c:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d63:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d67:	0f b6 c0             	movzx  eax,al
c0016d6a:	c1 e0 08             	shl    eax,0x8
c0016d6d:	89 d1                	mov    ecx,edx
c0016d6f:	09 c1                	or     ecx,eax
c0016d71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d75:	8d 50 02             	lea    edx,[eax+0x2]
c0016d78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d7c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d80:	0f b6 c0             	movzx  eax,al
c0016d83:	c1 e0 10             	shl    eax,0x10
c0016d86:	09 c1                	or     ecx,eax
c0016d88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d8c:	8d 50 03             	lea    edx,[eax+0x3]
c0016d8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d93:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d97:	0f b6 c0             	movzx  eax,al
c0016d9a:	c1 e0 18             	shl    eax,0x18
c0016d9d:	09 c8                	or     eax,ecx
c0016d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016da8:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016dad:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016db2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016db6:	88 90 e0 96 02 c0    	mov    BYTE PTR [eax-0x3ffd6920],dl
c0016dbc:	eb 1a                	jmp    c0016dd8 <scanMADT()+0x378>
c0016dbe:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016dc3:	75 07                	jne    c0016dcc <scanMADT()+0x36c>
c0016dc5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016dca:	eb 0c                	jmp    c0016dd8 <scanMADT()+0x378>
c0016dcc:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016dd1:	75 05                	jne    c0016dd8 <scanMADT()+0x378>
c0016dd3:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016dd8:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016ddd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016de1:	01 d0                	add    eax,edx
c0016de3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016de7:	e9 44 fd ff ff       	jmp    c0016b30 <scanMADT()+0xd0>
c0016dec:	90                   	nop
c0016ded:	eb 01                	jmp    c0016df0 <scanMADT()+0x390>
c0016def:	90                   	nop
c0016df0:	83 c4 2c             	add    esp,0x2c
c0016df3:	c3                   	ret    

c0016df4 <ACPI::ACPI()>:
c0016df4:	83 ec 0c             	sub    esp,0xc
c0016df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dfb:	83 ec 08             	sub    esp,0x8
c0016dfe:	68 8b 7a 02 c0       	push   0xc0027a8b
c0016e03:	50                   	push   eax
c0016e04:	e8 49 ca ff ff       	call   c0013852 <Device::Device(char const*)>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	ba 14 7c 02 c0       	mov    edx,0xc0027c14
c0016e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e15:	89 10                	mov    DWORD PTR [eax],edx
c0016e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e1b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e26:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e34:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e42:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016e49:	e8 12 fc ff ff       	call   c0016a60 <scanMADT()>
c0016e4e:	90                   	nop
c0016e4f:	83 c4 0c             	add    esp,0xc
c0016e52:	c3                   	ret    
c0016e53:	90                   	nop

c0016e54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016e54:	83 ec 2c             	sub    esp,0x2c
c0016e57:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e5f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016e63:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016e67:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016e6c:	88 d0                	mov    al,dl
c0016e6e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016e72:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016e77:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016e7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e83:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016e89:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016e8d:	0f 8d 97 00 00 00    	jge    c0016f2a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e9b:	83 c2 2a             	add    edx,0x2a
c0016e9e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016ea2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016ea7:	75 78                	jne    c0016f21 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016ea9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ead:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016eb1:	83 c2 2a             	add    edx,0x2a
c0016eb4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016eb8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016ebc:	75 63                	jne    c0016f21 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016ebe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016ec3:	74 3a                	je     c0016eff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016ec5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ec9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ecd:	83 c2 2a             	add    edx,0x2a
c0016ed0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016ed4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ed8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016edb:	39 c2                	cmp    edx,eax
c0016edd:	74 10                	je     c0016eef <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016edf:	83 ec 0c             	sub    esp,0xc
c0016ee2:	68 78 7b 02 c0       	push   0xc0027b78
c0016ee7:	e8 07 1b 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0016eec:	83 c4 10             	add    esp,0x10
c0016eef:	83 ec 0c             	sub    esp,0xc
c0016ef2:	68 90 7a 02 c0       	push   0xc0027a90
c0016ef7:	e8 f7 1a 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0016efc:	83 c4 10             	add    esp,0x10
c0016eff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016f03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f0b:	83 c2 2a             	add    edx,0x2a
c0016f0e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016f12:	8b 02                	mov    eax,DWORD PTR [edx]
c0016f14:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016f17:	89 01                	mov    DWORD PTR [ecx],eax
c0016f19:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f1c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016f21:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016f25:	e9 55 ff ff ff       	jmp    c0016e7f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016f2a:	90                   	nop
c0016f2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f2f:	83 c4 2c             	add    esp,0x2c
c0016f32:	c2 04 00             	ret    0x4
c0016f35:	90                   	nop

c0016f36 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016f36:	56                   	push   esi
c0016f37:	53                   	push   ebx
c0016f38:	83 ec 14             	sub    esp,0x14
c0016f3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f3f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016f43:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f47:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016f4c:	88 c8                	mov    al,cl
c0016f4e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016f52:	88 d0                	mov    al,dl
c0016f54:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5c:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f66:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016f6c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016f71:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f76:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016f7b:	83 ec 04             	sub    esp,0x4
c0016f7e:	56                   	push   esi
c0016f7f:	53                   	push   ebx
c0016f80:	51                   	push   ecx
c0016f81:	52                   	push   edx
c0016f82:	50                   	push   eax
c0016f83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016f87:	68 a8 7b 02 c0       	push   0xc0027ba8
c0016f8c:	e8 c6 b2 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0016f91:	83 c4 20             	add    esp,0x20
c0016f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f98:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016fa5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016fa9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016fad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016fb7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fbb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fc2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcb:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fd1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016fd5:	8d 48 01             	lea    ecx,[eax+0x1]
c0016fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fdc:	83 c2 2a             	add    edx,0x2a
c0016fdf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0016fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016ff4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016ff8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0016ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017000:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017006:	8d 50 01             	lea    edx,[eax+0x1]
c0017009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700d:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017017:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001701d:	3d 00 08 00 00       	cmp    eax,0x800
c0017022:	75 10                	jne    c0017034 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017024:	83 ec 0c             	sub    esp,0xc
c0017027:	68 9f 7a 02 c0       	push   0xc0027a9f
c001702c:	e8 c2 19 00 00       	call   c00189f3 <Krnl::panic(char const*)>
c0017031:	83 c4 10             	add    esp,0x10
c0017034:	90                   	nop
c0017035:	83 c4 14             	add    esp,0x14
c0017038:	5b                   	pop    ebx
c0017039:	5e                   	pop    esi
c001703a:	c3                   	ret    
c001703b:	90                   	nop

c001703c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001703c:	b8 00 00 00 00       	mov    eax,0x0
c0017041:	c3                   	ret    

c0017042 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017042:	83 ec 1c             	sub    esp,0x1c
c0017045:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017049:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001704c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017050:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017055:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001705a:	83 ec 08             	sub    esp,0x8
c001705d:	52                   	push   edx
c001705e:	50                   	push   eax
c001705f:	e8 12 77 ff ff       	call   c000e776 <Computer::readCMOS(unsigned char)>
c0017064:	83 c4 10             	add    esp,0x10
c0017067:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001706b:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017070:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017075:	83 ec 04             	sub    esp,0x4
c0017078:	6a 01                	push   0x1
c001707a:	52                   	push   edx
c001707b:	50                   	push   eax
c001707c:	e8 0b 78 ff ff       	call   c000e88c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017081:	83 c4 10             	add    esp,0x10
c0017084:	90                   	nop
c0017085:	83 c4 1c             	add    esp,0x1c
c0017088:	c3                   	ret    
c0017089:	90                   	nop

c001708a <ACPI::open(int, int, void*)>:
c001708a:	53                   	push   ebx
c001708b:	83 ec 18             	sub    esp,0x18
c001708e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017092:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709d:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00170a3:	84 c0                	test   al,al
c00170a5:	74 60                	je     c0017107 <ACPI::open(int, int, void*)+0x7d>
c00170a7:	83 ec 0c             	sub    esp,0xc
c00170aa:	68 58 01 00 00       	push   0x158
c00170af:	e8 b4 b0 ff ff       	call   c0012168 <operator new(unsigned long)>
c00170b4:	83 c4 10             	add    esp,0x10
c00170b7:	89 c3                	mov    ebx,eax
c00170b9:	83 ec 0c             	sub    esp,0xc
c00170bc:	53                   	push   ebx
c00170bd:	e8 10 90 00 00       	call   c00200d2 <PCI::PCI()>
c00170c2:	83 c4 10             	add    esp,0x10
c00170c5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00170c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cd:	83 ec 08             	sub    esp,0x8
c00170d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170d4:	50                   	push   eax
c00170d5:	e8 88 c5 ff ff       	call   c0013662 <Device::addChild(Device*)>
c00170da:	83 c4 10             	add    esp,0x10
c00170dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00170e3:	83 c0 08             	add    eax,0x8
c00170e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00170e8:	6a 00                	push   0x0
c00170ea:	6a 00                	push   0x0
c00170ec:	6a 00                	push   0x0
c00170ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170f2:	ff d0                	call   eax
c00170f4:	83 c4 10             	add    esp,0x10
c00170f7:	83 ec 0c             	sub    esp,0xc
c00170fa:	68 bc 7a 02 c0       	push   0xc0027abc
c00170ff:	e8 53 b1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017104:	83 c4 10             	add    esp,0x10
c0017107:	83 ec 0c             	sub    esp,0xc
c001710a:	68 c7 7a 02 c0       	push   0xc0027ac7
c001710f:	e8 80 37 00 00       	call   c001a894 <Thr::loadKernelSymbolTable(char const*)>
c0017114:	83 c4 10             	add    esp,0x10
c0017117:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c001711d:	83 ec 08             	sub    esp,0x8
c0017120:	6a 01                	push   0x1
c0017122:	68 e5 7a 02 c0       	push   0xc0027ae5
c0017127:	e8 4a 42 00 00       	call   c001b376 <Thr::loadDLL(char const*, bool)>
c001712c:	83 c4 10             	add    esp,0x10
c001712f:	83 ec 08             	sub    esp,0x8
c0017132:	53                   	push   ebx
c0017133:	50                   	push   eax
c0017134:	e8 03 44 00 00       	call   c001b53c <Thr::executeDLL(unsigned long, void*)>
c0017139:	83 c4 10             	add    esp,0x10
c001713c:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017141:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017147:	83 e0 04             	and    eax,0x4
c001714a:	84 c0                	test   al,al
c001714c:	0f 84 cf 00 00 00    	je     c0017221 <ACPI::open(int, int, void*)+0x197>
c0017152:	83 ec 0c             	sub    esp,0xc
c0017155:	68 14 01 00 00       	push   0x114
c001715a:	e8 09 b0 ff ff       	call   c0012168 <operator new(unsigned long)>
c001715f:	83 c4 10             	add    esp,0x10
c0017162:	89 c3                	mov    ebx,eax
c0017164:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0017169:	83 ec 04             	sub    esp,0x4
c001716c:	50                   	push   eax
c001716d:	68 02 7b 02 c0       	push   0xc0027b02
c0017172:	53                   	push   ebx
c0017173:	e8 0e b6 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001717f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017184:	74 17                	je     c001719d <ACPI::open(int, int, void*)+0x113>
c0017186:	83 ec 0c             	sub    esp,0xc
c0017189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001718d:	e8 c6 b8 ff ff       	call   c0012a58 <File::exists()>
c0017192:	83 c4 10             	add    esp,0x10
c0017195:	84 c0                	test   al,al
c0017197:	74 04                	je     c001719d <ACPI::open(int, int, void*)+0x113>
c0017199:	b0 01                	mov    al,0x1
c001719b:	eb 02                	jmp    c001719f <ACPI::open(int, int, void*)+0x115>
c001719d:	b0 00                	mov    al,0x0
c001719f:	84 c0                	test   al,al
c00171a1:	74 25                	je     c00171c8 <ACPI::open(int, int, void*)+0x13e>
c00171a3:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c00171a9:	83 ec 08             	sub    esp,0x8
c00171ac:	6a 01                	push   0x1
c00171ae:	68 02 7b 02 c0       	push   0xc0027b02
c00171b3:	e8 be 41 00 00       	call   c001b376 <Thr::loadDLL(char const*, bool)>
c00171b8:	83 c4 10             	add    esp,0x10
c00171bb:	83 ec 08             	sub    esp,0x8
c00171be:	53                   	push   ebx
c00171bf:	50                   	push   eax
c00171c0:	e8 77 43 00 00       	call   c001b53c <Thr::executeDLL(unsigned long, void*)>
c00171c5:	83 c4 10             	add    esp,0x10
c00171c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171cd:	74 1e                	je     c00171ed <ACPI::open(int, int, void*)+0x163>
c00171cf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171d4:	74 17                	je     c00171ed <ACPI::open(int, int, void*)+0x163>
c00171d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171da:	8b 00                	mov    eax,DWORD PTR [eax]
c00171dc:	83 c0 08             	add    eax,0x8
c00171df:	8b 00                	mov    eax,DWORD PTR [eax]
c00171e1:	83 ec 0c             	sub    esp,0xc
c00171e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171e8:	ff d0                	call   eax
c00171ea:	83 c4 10             	add    esp,0x10
c00171ed:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c00171f2:	83 ec 08             	sub    esp,0x8
c00171f5:	68 1f 7b 02 c0       	push   0xc0027b1f
c00171fa:	50                   	push   eax
c00171fb:	e8 c4 f7 ff ff       	call   c00169c4 <findDataTable(unsigned char*, char*)>
c0017200:	83 c4 10             	add    esp,0x10
c0017203:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017207:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001720c:	74 13                	je     c0017221 <ACPI::open(int, int, void*)+0x197>
c001720e:	83 ec 08             	sub    esp,0x8
c0017211:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017219:	e8 24 fe ff ff       	call   c0017042 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001721e:	83 c4 10             	add    esp,0x10
c0017221:	b8 00 00 00 00       	mov    eax,0x0
c0017226:	83 c4 18             	add    esp,0x18
c0017229:	5b                   	pop    ebx
c001722a:	c3                   	ret    
c001722b:	90                   	nop

c001722c <ACPI::sleep()>:
c001722c:	83 ec 0c             	sub    esp,0xc
c001722f:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c0017234:	85 c0                	test   eax,eax
c0017236:	74 07                	je     c001723f <ACPI::sleep()+0x13>
c0017238:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c001723d:	ff d0                	call   eax
c001723f:	90                   	nop
c0017240:	83 c4 0c             	add    esp,0xc
c0017243:	c3                   	ret    

c0017244 <CPU::close(int, int, void*)>:
c0017244:	31 c0                	xor    eax,eax
c0017246:	c3                   	ret    

c0017247 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0017247:	55                   	push   ebp
c0017248:	57                   	push   edi
c0017249:	56                   	push   esi
c001724a:	53                   	push   ebx
c001724b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001724f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017253:	89 ce                	mov    esi,ecx
c0017255:	89 d5                	mov    ebp,edx
c0017257:	80 f9 04             	cmp    cl,0x4
c001725a:	75 28                	jne    c0017284 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c001725c:	8d 42 f9             	lea    eax,[edx-0x7]
c001725f:	3c 03                	cmp    al,0x3
c0017261:	0f 86 63 01 00 00    	jbe    c00173ca <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0017267:	80 fa 03             	cmp    dl,0x3
c001726a:	0f 84 5a 01 00 00    	je     c00173ca <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0017270:	8d 7a f2             	lea    edi,[edx-0xe]
c0017273:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c0017278:	89 fb                	mov    ebx,edi
c001727a:	80 fb 01             	cmp    bl,0x1
c001727d:	77 4e                	ja     c00172cd <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c001727f:	e9 52 01 00 00       	jmp    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017284:	80 f9 05             	cmp    cl,0x5
c0017287:	75 4d                	jne    c00172d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0017289:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c001728e:	80 fa 03             	cmp    dl,0x3
c0017291:	0f 86 3f 01 00 00    	jbe    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017297:	8d 7a fa             	lea    edi,[edx-0x6]
c001729a:	b8 d0 98 02 c0       	mov    eax,0xc00298d0
c001729f:	89 fb                	mov    ebx,edi
c00172a1:	80 fb 01             	cmp    bl,0x1
c00172a4:	0f 86 2c 01 00 00    	jbe    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172aa:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c00172af:	80 fa 08             	cmp    dl,0x8
c00172b2:	0f 84 1e 01 00 00    	je     c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172b8:	89 d7                	mov    edi,edx
c00172ba:	b8 f0 98 02 c0       	mov    eax,0xc00298f0
c00172bf:	83 e7 fb             	and    edi,0xfffffffb
c00172c2:	89 fb                	mov    ebx,edi
c00172c4:	80 fb 09             	cmp    bl,0x9
c00172c7:	0f 84 09 01 00 00    	je     c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172cd:	31 c0                	xor    eax,eax
c00172cf:	89 eb                	mov    ebx,ebp
c00172d1:	0f b6 fb             	movzx  edi,bl
c00172d4:	eb 30                	jmp    c0017306 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00172d6:	31 c0                	xor    eax,eax
c00172d8:	80 f9 06             	cmp    cl,0x6
c00172db:	75 f2                	jne    c00172cf <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00172dd:	80 fa 0a             	cmp    dl,0xa
c00172e0:	77 ed                	ja     c00172cf <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00172e2:	bf de 05 00 00       	mov    edi,0x5de
c00172e7:	0f a3 d7             	bt     edi,edx
c00172ea:	73 e3                	jae    c00172cf <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00172ec:	b8 00 99 02 c0       	mov    eax,0xc0029900
c00172f1:	e9 e0 00 00 00       	jmp    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172f6:	39 c7                	cmp    edi,eax
c00172f8:	0f 84 d3 00 00 00    	je     c00173d1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00172fe:	40                   	inc    eax
c00172ff:	3d d0 00 00 00       	cmp    eax,0xd0
c0017304:	74 09                	je     c001730f <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0017306:	89 f3                	mov    ebx,esi
c0017308:	80 fb 0f             	cmp    bl,0xf
c001730b:	75 f1                	jne    c00172fe <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c001730d:	eb e7                	jmp    c00172f6 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c001730f:	80 f9 10             	cmp    cl,0x10
c0017312:	75 14                	jne    c0017328 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0017314:	8d 42 fc             	lea    eax,[edx-0x4]
c0017317:	83 e0 fb             	and    eax,0xfffffffb
c001731a:	3c 02                	cmp    al,0x2
c001731c:	76 34                	jbe    c0017352 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c001731e:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017323:	80 fa 02             	cmp    dl,0x2
c0017326:	eb 24                	jmp    c001734c <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0017328:	80 f9 11             	cmp    cl,0x11
c001732b:	75 13                	jne    c0017340 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c001732d:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017332:	80 fa 03             	cmp    dl,0x3
c0017335:	0f 85 9b 00 00 00    	jne    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001733b:	e9 91 00 00 00       	jmp    c00173d1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0017340:	80 f9 12             	cmp    cl,0x12
c0017343:	75 14                	jne    c0017359 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0017345:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001734a:	fe ca                	dec    dl
c001734c:	0f 85 84 00 00 00    	jne    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017352:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0017357:	eb 7d                	jmp    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017359:	80 f9 14             	cmp    cl,0x14
c001735c:	75 12                	jne    c0017370 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c001735e:	4a                   	dec    edx
c001735f:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017364:	80 fa 01             	cmp    dl,0x1
c0017367:	77 6d                	ja     c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017369:	b8 30 99 02 c0       	mov    eax,0xc0029930
c001736e:	eb 66                	jmp    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017370:	80 f9 15             	cmp    cl,0x15
c0017373:	75 31                	jne    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0017375:	b8 40 99 02 c0       	mov    eax,0xc0029940
c001737a:	80 fa 01             	cmp    dl,0x1
c001737d:	74 57                	je     c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001737f:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017384:	80 fa 13             	cmp    dl,0x13
c0017387:	76 0c                	jbe    c0017395 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0017389:	80 fa 30             	cmp    dl,0x30
c001738c:	75 48                	jne    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001738e:	b8 60 99 02 c0       	mov    eax,0xc0029960
c0017393:	eb 41                	jmp    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017395:	b9 04 00 09 00       	mov    ecx,0x90004
c001739a:	0f a3 d1             	bt     ecx,edx
c001739d:	73 37                	jae    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001739f:	b8 50 99 02 c0       	mov    eax,0xc0029950
c00173a4:	eb 30                	jmp    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173a6:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c00173ab:	80 f9 16             	cmp    cl,0x16
c00173ae:	75 26                	jne    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173b0:	b8 70 99 02 c0       	mov    eax,0xc0029970
c00173b5:	84 d2                	test   dl,dl
c00173b7:	74 1d                	je     c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173b9:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c00173be:	80 fa 30             	cmp    dl,0x30
c00173c1:	75 13                	jne    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173c3:	b8 80 99 02 c0       	mov    eax,0xc0029980
c00173c8:	eb 0c                	jmp    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173ca:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c00173cf:	eb 05                	jmp    c00173d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173d1:	b8 10 99 02 c0       	mov    eax,0xc0029910
c00173d6:	5b                   	pop    ebx
c00173d7:	5e                   	pop    esi
c00173d8:	5f                   	pop    edi
c00173d9:	5d                   	pop    ebp
c00173da:	c3                   	ret    

c00173db <lookupIntelCPUName(unsigned char, unsigned char)>:
c00173db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00173df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173e3:	80 f9 04             	cmp    cl,0x4
c00173e6:	75 6b                	jne    c0017453 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c00173e8:	b8 00 97 02 c0       	mov    eax,0xc0029700
c00173ed:	80 fa 01             	cmp    dl,0x1
c00173f0:	0f 86 92 02 00 00    	jbe    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00173f6:	b8 10 97 02 c0       	mov    eax,0xc0029710
c00173fb:	80 fa 02             	cmp    dl,0x2
c00173fe:	0f 84 84 02 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017404:	b8 20 97 02 c0       	mov    eax,0xc0029720
c0017409:	80 fa 03             	cmp    dl,0x3
c001740c:	0f 84 76 02 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017412:	b8 30 97 02 c0       	mov    eax,0xc0029730
c0017417:	80 fa 04             	cmp    dl,0x4
c001741a:	0f 84 68 02 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017420:	b8 40 97 02 c0       	mov    eax,0xc0029740
c0017425:	80 fa 05             	cmp    dl,0x5
c0017428:	0f 84 5a 02 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001742e:	b8 20 97 02 c0       	mov    eax,0xc0029720
c0017433:	80 fa 07             	cmp    dl,0x7
c0017436:	0f 84 4c 02 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001743c:	83 ea 08             	sub    edx,0x8
c001743f:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017444:	80 fa 01             	cmp    dl,0x1
c0017447:	0f 87 3b 02 00 00    	ja     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001744d:	b8 50 97 02 c0       	mov    eax,0xc0029750
c0017452:	c3                   	ret    
c0017453:	80 f9 05             	cmp    cl,0x5
c0017456:	75 45                	jne    c001749d <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0017458:	8d 4a ff             	lea    ecx,[edx-0x1]
c001745b:	b8 60 97 02 c0       	mov    eax,0xc0029760
c0017460:	80 f9 02             	cmp    cl,0x2
c0017463:	0f 86 1f 02 00 00    	jbe    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017469:	80 fa 04             	cmp    dl,0x4
c001746c:	0f 84 f3 01 00 00    	je     c0017665 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0017472:	80 fa 07             	cmp    dl,0x7
c0017475:	0f 84 0d 02 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001747b:	b8 70 97 02 c0       	mov    eax,0xc0029770
c0017480:	80 fa 08             	cmp    dl,0x8
c0017483:	0f 84 ff 01 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017489:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001748e:	80 fa 09             	cmp    dl,0x9
c0017491:	0f 85 f1 01 00 00    	jne    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017497:	b8 80 97 02 c0       	mov    eax,0xc0029780
c001749c:	c3                   	ret    
c001749d:	80 f9 06             	cmp    cl,0x6
c00174a0:	0f 85 85 01 00 00    	jne    c001762b <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c00174a6:	b8 90 97 02 c0       	mov    eax,0xc0029790
c00174ab:	80 fa 01             	cmp    dl,0x1
c00174ae:	0f 84 d4 01 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174b4:	8d 42 fb             	lea    eax,[edx-0x5]
c00174b7:	3c 01                	cmp    al,0x1
c00174b9:	0f 86 ac 01 00 00    	jbe    c001766b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00174bf:	80 fa 03             	cmp    dl,0x3
c00174c2:	0f 84 a3 01 00 00    	je     c001766b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00174c8:	8d 4a f9             	lea    ecx,[edx-0x7]
c00174cb:	b8 b0 97 02 c0       	mov    eax,0xc00297b0
c00174d0:	80 f9 01             	cmp    cl,0x1
c00174d3:	0f 86 af 01 00 00    	jbe    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174d9:	80 fa 09             	cmp    dl,0x9
c00174dc:	0f 84 8f 01 00 00    	je     c0017671 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c00174e2:	8d 4a f6             	lea    ecx,[edx-0xa]
c00174e5:	80 f9 01             	cmp    cl,0x1
c00174e8:	0f 86 9a 01 00 00    	jbe    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174ee:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c00174f3:	80 fa 0d             	cmp    dl,0xd
c00174f6:	0f 84 8c 01 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174fc:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c0017501:	80 fa 0e             	cmp    dl,0xe
c0017504:	0f 84 7e 01 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001750a:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c001750f:	80 fa 0f             	cmp    dl,0xf
c0017512:	0f 84 70 01 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017518:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c001751d:	80 fa 15             	cmp    dl,0x15
c0017520:	0f 84 62 01 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017526:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017529:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c001752e:	80 f9 01             	cmp    cl,0x1
c0017531:	0f 86 51 01 00 00    	jbe    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017537:	80 fa 1a             	cmp    dl,0x1a
c001753a:	0f 84 37 01 00 00    	je     c0017677 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0017540:	80 fa 1c             	cmp    dl,0x1c
c0017543:	0f 84 34 01 00 00    	je     c001767d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0017549:	80 fa 1d             	cmp    dl,0x1d
c001754c:	0f 84 36 01 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017552:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017557:	80 fa 25             	cmp    dl,0x25
c001755a:	0f 84 28 01 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017560:	8d 4a da             	lea    ecx,[edx-0x26]
c0017563:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0017568:	80 f9 01             	cmp    cl,0x1
c001756b:	0f 86 17 01 00 00    	jbe    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017571:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017576:	80 fa 2a             	cmp    dl,0x2a
c0017579:	0f 84 09 01 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001757f:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017584:	80 fa 2c             	cmp    dl,0x2c
c0017587:	0f 84 fb 00 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001758d:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017592:	80 fa 2d             	cmp    dl,0x2d
c0017595:	0f 84 ed 00 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001759b:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c00175a0:	80 fa 2e             	cmp    dl,0x2e
c00175a3:	0f 84 df 00 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175a9:	b8 10 98 02 c0       	mov    eax,0xc0029810
c00175ae:	80 fa 2f             	cmp    dl,0x2f
c00175b1:	0f 84 d1 00 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175b7:	8d 4a cb             	lea    ecx,[edx-0x35]
c00175ba:	b8 00 98 02 c0       	mov    eax,0xc0029800
c00175bf:	80 f9 01             	cmp    cl,0x1
c00175c2:	0f 86 c0 00 00 00    	jbe    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175c8:	b8 30 98 02 c0       	mov    eax,0xc0029830
c00175cd:	80 fa 37             	cmp    dl,0x37
c00175d0:	0f 84 b2 00 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175d6:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175db:	80 fa 3a             	cmp    dl,0x3a
c00175de:	0f 84 a4 00 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175e4:	b8 50 98 02 c0       	mov    eax,0xc0029850
c00175e9:	80 fa 3c             	cmp    dl,0x3c
c00175ec:	0f 84 96 00 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175f2:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00175f7:	80 fa 3d             	cmp    dl,0x3d
c00175fa:	0f 84 88 00 00 00    	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017600:	b8 40 98 02 c0       	mov    eax,0xc0029840
c0017605:	80 fa 3e             	cmp    dl,0x3e
c0017608:	74 7e                	je     c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001760a:	8d 42 bb             	lea    eax,[edx-0x45]
c001760d:	3c 01                	cmp    al,0x1
c001760f:	76 72                	jbe    c0017683 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0017611:	80 fa 3f             	cmp    dl,0x3f
c0017614:	74 6d                	je     c0017683 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0017616:	80 fa 4a             	cmp    dl,0x4a
c0017619:	74 0a                	je     c0017625 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c001761b:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017620:	80 fa 4d             	cmp    dl,0x4d
c0017623:	75 63                	jne    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017625:	b8 30 98 02 c0       	mov    eax,0xc0029830
c001762a:	c3                   	ret    
c001762b:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017630:	80 f9 0b             	cmp    cl,0xb
c0017633:	75 0a                	jne    c001763f <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0017635:	fe ca                	dec    dl
c0017637:	75 4f                	jne    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017639:	b8 70 98 02 c0       	mov    eax,0xc0029870
c001763e:	c3                   	ret    
c001763f:	80 f9 0f             	cmp    cl,0xf
c0017642:	75 44                	jne    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017644:	b8 80 98 02 c0       	mov    eax,0xc0029880
c0017649:	80 fa 02             	cmp    dl,0x2
c001764c:	76 3a                	jbe    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001764e:	8d 42 fd             	lea    eax,[edx-0x3]
c0017651:	3c 01                	cmp    al,0x1
c0017653:	76 0a                	jbe    c001765f <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0017655:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001765a:	80 fa 06             	cmp    dl,0x6
c001765d:	75 29                	jne    c0017688 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001765f:	b8 90 98 02 c0       	mov    eax,0xc0029890
c0017664:	c3                   	ret    
c0017665:	b8 70 97 02 c0       	mov    eax,0xc0029770
c001766a:	c3                   	ret    
c001766b:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c0017670:	c3                   	ret    
c0017671:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c0017676:	c3                   	ret    
c0017677:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c001767c:	c3                   	ret    
c001767d:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0017682:	c3                   	ret    
c0017683:	b8 50 98 02 c0       	mov    eax,0xc0029850
c0017688:	c3                   	ret    

c0017689 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0017689:	60                   	pusha  
c001768a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001768e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017692:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017696:	9c                   	pushf  
c0017697:	fa                   	cli    
c0017698:	0f 09                	wbinvd 
c001769a:	0f 30                	wrmsr  
c001769c:	9d                   	popf   
c001769d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176a1:	89 02                	mov    DWORD PTR [edx],eax
c00176a3:	61                   	popa   
c00176a4:	c3                   	ret    

c00176a5 <AMD_K6_read_msr(unsigned int, REGS*)>:
c00176a5:	60                   	pusha  
c00176a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176aa:	9c                   	pushf  
c00176ab:	fa                   	cli    
c00176ac:	0f 09                	wbinvd 
c00176ae:	31 c0                	xor    eax,eax
c00176b0:	31 d2                	xor    edx,edx
c00176b2:	0f 32                	rdmsr  
c00176b4:	9d                   	popf   
c00176b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176b9:	89 02                	mov    DWORD PTR [edx],eax
c00176bb:	61                   	popa   
c00176bc:	c3                   	ret    

c00176bd <AMD_K6_writeback(int, int, int)>:
c00176bd:	56                   	push   esi
c00176be:	53                   	push   ebx
c00176bf:	83 ec 10             	sub    esp,0x10
c00176c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176c6:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00176cb:	75 5d                	jne    c001772a <AMD_K6_writeback(int, int, int)+0x6d>
c00176cd:	83 f8 08             	cmp    eax,0x8
c00176d0:	75 09                	jne    c00176db <AMD_K6_writeback(int, int, int)+0x1e>
c00176d2:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00176d7:	7e 13                	jle    c00176ec <AMD_K6_writeback(int, int, int)+0x2f>
c00176d9:	eb 30                	jmp    c001770b <AMD_K6_writeback(int, int, int)+0x4e>
c00176db:	83 f8 06             	cmp    eax,0x6
c00176de:	7c 4a                	jl     c001772a <AMD_K6_writeback(int, int, int)+0x6d>
c00176e0:	83 f8 07             	cmp    eax,0x7
c00176e3:	7e 07                	jle    c00176ec <AMD_K6_writeback(int, int, int)+0x2f>
c00176e5:	83 f8 09             	cmp    eax,0x9
c00176e8:	74 21                	je     c001770b <AMD_K6_writeback(int, int, int)+0x4e>
c00176ea:	eb 3e                	jmp    c001772a <AMD_K6_writeback(int, int, int)+0x6d>
c00176ec:	89 e6                	mov    esi,esp
c00176ee:	8b 1d 44 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a444
c00176f4:	56                   	push   esi
c00176f5:	c1 eb 15             	shr    ebx,0x15
c00176f8:	68 82 00 00 c0       	push   0xc0000082
c00176fd:	83 e3 7e             	and    ebx,0x7e
c0017700:	e8 a0 ff ff ff       	call   c00176a5 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017705:	56                   	push   esi
c0017706:	6a 00                	push   0x0
c0017708:	53                   	push   ebx
c0017709:	eb 12                	jmp    c001771d <AMD_K6_writeback(int, int, int)+0x60>
c001770b:	89 e3                	mov    ebx,esp
c001770d:	53                   	push   ebx
c001770e:	68 82 00 00 c0       	push   0xc0000082
c0017713:	e8 8d ff ff ff       	call   c00176a5 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017718:	53                   	push   ebx
c0017719:	6a 00                	push   0x0
c001771b:	6a 00                	push   0x0
c001771d:	68 82 00 00 c0       	push   0xc0000082
c0017722:	e8 62 ff ff ff       	call   c0017689 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017727:	83 c4 18             	add    esp,0x18
c001772a:	83 c4 10             	add    esp,0x10
c001772d:	5b                   	pop    ebx
c001772e:	5e                   	pop    esi
c001772f:	c3                   	ret    

c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017730:	55                   	push   ebp
c0017731:	57                   	push   edi
c0017732:	56                   	push   esi
c0017733:	53                   	push   ebx
c0017734:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017738:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001773c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017740:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017744:	39 05 a0 99 02 c0    	cmp    DWORD PTR ds:0xc00299a0,eax
c001774a:	75 23                	jne    c001776f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001774c:	a1 4c ae 02 c0       	mov    eax,ds:0xc002ae4c
c0017751:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017755:	89 06                	mov    DWORD PTR [esi],eax
c0017757:	a1 48 ae 02 c0       	mov    eax,ds:0xc002ae48
c001775c:	89 07                	mov    DWORD PTR [edi],eax
c001775e:	a1 44 ae 02 c0       	mov    eax,ds:0xc002ae44
c0017763:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017766:	a1 40 ae 02 c0       	mov    eax,ds:0xc002ae40
c001776b:	89 02                	mov    DWORD PTR [edx],eax
c001776d:	eb 3f                	jmp    c00177ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001776f:	31 c9                	xor    ecx,ecx
c0017771:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017775:	0f a2                	cpuid  
c0017777:	89 06                	mov    DWORD PTR [esi],eax
c0017779:	89 1f                	mov    DWORD PTR [edi],ebx
c001777b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001777f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017782:	89 10                	mov    DWORD PTR [eax],edx
c0017784:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017788:	a3 a0 99 02 c0       	mov    ds:0xc00299a0,eax
c001778d:	8b 06                	mov    eax,DWORD PTR [esi]
c001778f:	a3 4c ae 02 c0       	mov    ds:0xc002ae4c,eax
c0017794:	8b 07                	mov    eax,DWORD PTR [edi]
c0017796:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c001779b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001779e:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c00177a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00177a9:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c00177ae:	5b                   	pop    ebx
c00177af:	5e                   	pop    esi
c00177b0:	5f                   	pop    edi
c00177b1:	5d                   	pop    ebp
c00177b2:	c3                   	ret    
c00177b3:	90                   	nop

c00177b4 <CPU::cpuidCheckEDX(unsigned int)>:
c00177b4:	83 ec 10             	sub    esp,0x10
c00177b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177bb:	50                   	push   eax
c00177bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177c0:	50                   	push   eax
c00177c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177c5:	50                   	push   eax
c00177c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ca:	50                   	push   eax
c00177cb:	6a 01                	push   0x1
c00177cd:	e8 5e ff ff ff       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177d6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00177da:	0f 95 c0             	setne  al
c00177dd:	83 c4 24             	add    esp,0x24
c00177e0:	c3                   	ret    
c00177e1:	90                   	nop

c00177e2 <CPU::cpuidCheckECX(unsigned int)>:
c00177e2:	83 ec 10             	sub    esp,0x10
c00177e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e9:	50                   	push   eax
c00177ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ee:	50                   	push   eax
c00177ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177f3:	50                   	push   eax
c00177f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177f8:	50                   	push   eax
c00177f9:	6a 01                	push   0x1
c00177fb:	e8 30 ff ff ff       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017800:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017804:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017808:	0f 95 c0             	setne  al
c001780b:	83 c4 24             	add    esp,0x24
c001780e:	c3                   	ret    
c001780f:	90                   	nop

c0017810 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0017810:	83 ec 10             	sub    esp,0x10
c0017813:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017817:	50                   	push   eax
c0017818:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001781c:	50                   	push   eax
c001781d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017821:	50                   	push   eax
c0017822:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017826:	50                   	push   eax
c0017827:	6a 07                	push   0x7
c0017829:	e8 02 ff ff ff       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001782e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017832:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017836:	0f 95 c0             	setne  al
c0017839:	83 c4 24             	add    esp,0x24
c001783c:	c3                   	ret    
c001783d:	90                   	nop

c001783e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001783e:	83 ec 10             	sub    esp,0x10
c0017841:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017845:	50                   	push   eax
c0017846:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001784a:	50                   	push   eax
c001784b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001784f:	50                   	push   eax
c0017850:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017854:	50                   	push   eax
c0017855:	6a 07                	push   0x7
c0017857:	e8 d4 fe ff ff       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001785c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017860:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017864:	0f 95 c0             	setne  al
c0017867:	83 c4 24             	add    esp,0x24
c001786a:	c3                   	ret    
c001786b:	90                   	nop

c001786c <CPU::getNumber()>:
c001786c:	31 c0                	xor    eax,eax
c001786e:	c3                   	ret    
c001786f:	90                   	nop

c0017870 <CPU::current()>:
c0017870:	e8 f7 ff ff ff       	call   c001786c <CPU::getNumber()>
c0017875:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c001787b:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0017882:	c3                   	ret    
c0017883:	90                   	nop

c0017884 <CPU::CPU()>:
c0017884:	83 ec 0c             	sub    esp,0xc
c0017887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001788b:	83 ec 08             	sub    esp,0x8
c001788e:	68 2a 7f 02 c0       	push   0xc0027f2a
c0017893:	50                   	push   eax
c0017894:	e8 b9 bf ff ff       	call   c0013852 <Device::Device(char const*)>
c0017899:	83 c4 10             	add    esp,0x10
c001789c:	ba 04 80 02 c0       	mov    edx,0xc0028004
c00178a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a5:	89 10                	mov    DWORD PTR [eax],edx
c00178a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ab:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00178b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b9:	05 78 01 00 00       	add    eax,0x178
c00178be:	83 ec 0c             	sub    esp,0xc
c00178c1:	50                   	push   eax
c00178c2:	e8 af 70 ff ff       	call   c000e976 <GDT::GDT()>
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ce:	05 7c 09 00 00       	add    eax,0x97c
c00178d3:	83 ec 0c             	sub    esp,0xc
c00178d6:	50                   	push   eax
c00178d7:	e8 fa 72 ff ff       	call   c000ebd6 <IDT::IDT()>
c00178dc:	83 c4 10             	add    esp,0x10
c00178df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e3:	05 7c 11 00 00       	add    eax,0x117c
c00178e8:	83 ec 0c             	sub    esp,0xc
c00178eb:	50                   	push   eax
c00178ec:	e8 29 93 ff ff       	call   c0010c1a <TSS::TSS()>
c00178f1:	83 c4 10             	add    esp,0x10
c00178f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00178ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017903:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001790d:	90                   	nop
c001790e:	83 c4 0c             	add    esp,0xc
c0017911:	c3                   	ret    

c0017912 <CPU::displayFeatures()>:
c0017912:	53                   	push   ebx
c0017913:	83 ec 10             	sub    esp,0x10
c0017916:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001791a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017920:	68 38 7c 02 c0       	push   0xc0027c38
c0017925:	e8 2d a9 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001792a:	59                   	pop    ecx
c001792b:	58                   	pop    eax
c001792c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017932:	50                   	push   eax
c0017933:	68 49 7c 02 c0       	push   0xc0027c49
c0017938:	e8 1a a9 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001793d:	58                   	pop    eax
c001793e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017944:	5a                   	pop    edx
c0017945:	c1 e8 0e             	shr    eax,0xe
c0017948:	0f b6 c0             	movzx  eax,al
c001794b:	50                   	push   eax
c001794c:	68 5a 7c 02 c0       	push   0xc0027c5a
c0017951:	e8 01 a9 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017956:	59                   	pop    ecx
c0017957:	58                   	pop    eax
c0017958:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001795e:	66 c1 e8 06          	shr    ax,0x6
c0017962:	0f b6 c0             	movzx  eax,al
c0017965:	50                   	push   eax
c0017966:	68 6b 7c 02 c0       	push   0xc0027c6b
c001796b:	e8 e7 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017970:	c7 04 24 7e 80 02 c0 	mov    DWORD PTR [esp],0xc002807e
c0017977:	e8 db a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001797c:	83 c4 10             	add    esp,0x10
c001797f:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017984:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001798b:	74 05                	je     c0017992 <CPU::displayFeatures()+0x80>
c001798d:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017992:	52                   	push   edx
c0017993:	52                   	push   edx
c0017994:	50                   	push   eax
c0017995:	68 7c 7c 02 c0       	push   0xc0027c7c
c001799a:	e8 b8 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001799f:	83 c4 10             	add    esp,0x10
c00179a2:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179a7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00179ae:	78 05                	js     c00179b5 <CPU::displayFeatures()+0xa3>
c00179b0:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179b5:	51                   	push   ecx
c00179b6:	51                   	push   ecx
c00179b7:	50                   	push   eax
c00179b8:	68 93 7c 02 c0       	push   0xc0027c93
c00179bd:	e8 95 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00179c2:	83 c4 10             	add    esp,0x10
c00179c5:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179ca:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00179d1:	75 05                	jne    c00179d8 <CPU::displayFeatures()+0xc6>
c00179d3:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179d8:	52                   	push   edx
c00179d9:	52                   	push   edx
c00179da:	50                   	push   eax
c00179db:	68 aa 7c 02 c0       	push   0xc0027caa
c00179e0:	e8 72 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179ed:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00179f4:	75 05                	jne    c00179fb <CPU::displayFeatures()+0xe9>
c00179f6:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179fb:	51                   	push   ecx
c00179fc:	51                   	push   ecx
c00179fd:	50                   	push   eax
c00179fe:	68 c1 7c 02 c0       	push   0xc0027cc1
c0017a03:	e8 4f a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017a08:	83 c4 10             	add    esp,0x10
c0017a0b:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a10:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017a17:	75 05                	jne    c0017a1e <CPU::displayFeatures()+0x10c>
c0017a19:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a1e:	52                   	push   edx
c0017a1f:	52                   	push   edx
c0017a20:	50                   	push   eax
c0017a21:	68 d8 7c 02 c0       	push   0xc0027cd8
c0017a26:	e8 2c a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017a2b:	83 c4 10             	add    esp,0x10
c0017a2e:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a33:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017a3a:	75 05                	jne    c0017a41 <CPU::displayFeatures()+0x12f>
c0017a3c:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a41:	51                   	push   ecx
c0017a42:	51                   	push   ecx
c0017a43:	50                   	push   eax
c0017a44:	68 ef 7c 02 c0       	push   0xc0027cef
c0017a49:	e8 09 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a56:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017a5d:	75 05                	jne    c0017a64 <CPU::displayFeatures()+0x152>
c0017a5f:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a64:	52                   	push   edx
c0017a65:	52                   	push   edx
c0017a66:	50                   	push   eax
c0017a67:	68 06 7d 02 c0       	push   0xc0027d06
c0017a6c:	e8 e6 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a79:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017a80:	75 05                	jne    c0017a87 <CPU::displayFeatures()+0x175>
c0017a82:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a87:	51                   	push   ecx
c0017a88:	51                   	push   ecx
c0017a89:	50                   	push   eax
c0017a8a:	68 1d 7d 02 c0       	push   0xc0027d1d
c0017a8f:	e8 c3 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a9c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017aa3:	75 05                	jne    c0017aaa <CPU::displayFeatures()+0x198>
c0017aa5:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017aaa:	52                   	push   edx
c0017aab:	52                   	push   edx
c0017aac:	50                   	push   eax
c0017aad:	68 34 7d 02 c0       	push   0xc0027d34
c0017ab2:	e8 a0 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017abf:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017ac6:	75 05                	jne    c0017acd <CPU::displayFeatures()+0x1bb>
c0017ac8:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017acd:	51                   	push   ecx
c0017ace:	51                   	push   ecx
c0017acf:	50                   	push   eax
c0017ad0:	68 4b 7d 02 c0       	push   0xc0027d4b
c0017ad5:	e8 7d a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017ada:	83 c4 10             	add    esp,0x10
c0017add:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017ae2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017ae9:	75 05                	jne    c0017af0 <CPU::displayFeatures()+0x1de>
c0017aeb:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017af0:	52                   	push   edx
c0017af1:	52                   	push   edx
c0017af2:	50                   	push   eax
c0017af3:	68 62 7d 02 c0       	push   0xc0027d62
c0017af8:	e8 5a a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b05:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017b0c:	75 05                	jne    c0017b13 <CPU::displayFeatures()+0x201>
c0017b0e:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b13:	51                   	push   ecx
c0017b14:	51                   	push   ecx
c0017b15:	50                   	push   eax
c0017b16:	68 79 7d 02 c0       	push   0xc0027d79
c0017b1b:	e8 37 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017b20:	83 c4 10             	add    esp,0x10
c0017b23:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b28:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017b2f:	75 05                	jne    c0017b36 <CPU::displayFeatures()+0x224>
c0017b31:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b36:	52                   	push   edx
c0017b37:	52                   	push   edx
c0017b38:	50                   	push   eax
c0017b39:	68 90 7d 02 c0       	push   0xc0027d90
c0017b3e:	e8 14 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b4b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017b52:	78 05                	js     c0017b59 <CPU::displayFeatures()+0x247>
c0017b54:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b59:	51                   	push   ecx
c0017b5a:	51                   	push   ecx
c0017b5b:	50                   	push   eax
c0017b5c:	68 a7 7d 02 c0       	push   0xc0027da7
c0017b61:	e8 f1 a6 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b6e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017b75:	75 05                	jne    c0017b7c <CPU::displayFeatures()+0x26a>
c0017b77:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b7c:	52                   	push   edx
c0017b7d:	52                   	push   edx
c0017b7e:	50                   	push   eax
c0017b7f:	68 be 7d 02 c0       	push   0xc0027dbe
c0017b84:	e8 ce a6 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017b89:	83 c4 18             	add    esp,0x18
c0017b8c:	5b                   	pop    ebx
c0017b8d:	c3                   	ret    

c0017b8e <CPU::detectFeatures()>:
c0017b8e:	55                   	push   ebp
c0017b8f:	57                   	push   edi
c0017b90:	56                   	push   esi
c0017b91:	53                   	push   ebx
c0017b92:	83 ec 50             	sub    esp,0x50
c0017b95:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017b99:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017ba3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017baa:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017bb0:	6a 0d                	push   0xd
c0017bb2:	6a 00                	push   0x0
c0017bb4:	57                   	push   edi
c0017bb5:	e8 32 8b fe ff       	call   c00006ec <memset>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017bc2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017bc9:	0f 84 20 09 00 00    	je     c00184ef <CPU::detectFeatures()+0x961>
c0017bcf:	83 ec 0c             	sub    esp,0xc
c0017bd2:	6a 10                	push   0x10
c0017bd4:	e8 db fb ff ff       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c0017bd9:	83 e0 01             	and    eax,0x1
c0017bdc:	8d 14 00             	lea    edx,[eax+eax*1]
c0017bdf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017be5:	83 e0 fd             	and    eax,0xfffffffd
c0017be8:	09 d0                	or     eax,edx
c0017bea:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017bf0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017bf7:	e8 b8 fb ff ff       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c0017bfc:	83 e0 01             	and    eax,0x1
c0017bff:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017c06:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c0c:	83 e0 fb             	and    eax,0xfffffffb
c0017c0f:	09 d0                	or     eax,edx
c0017c11:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c17:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017c1e:	e8 91 fb ff ff       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c0017c23:	83 e0 01             	and    eax,0x1
c0017c26:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017c2d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c33:	83 e0 f7             	and    eax,0xfffffff7
c0017c36:	09 d0                	or     eax,edx
c0017c38:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c3e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017c45:	e8 6a fb ff ff       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c0017c4a:	83 e0 01             	and    eax,0x1
c0017c4d:	c1 e0 04             	shl    eax,0x4
c0017c50:	88 c2                	mov    dl,al
c0017c52:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c58:	83 e0 ef             	and    eax,0xffffffef
c0017c5b:	09 d0                	or     eax,edx
c0017c5d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c63:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017c6a:	e8 45 fb ff ff       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c0017c6f:	83 e0 01             	and    eax,0x1
c0017c72:	c1 e0 05             	shl    eax,0x5
c0017c75:	88 c2                	mov    dl,al
c0017c77:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c7d:	83 e0 df             	and    eax,0xffffffdf
c0017c80:	09 d0                	or     eax,edx
c0017c82:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c88:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017c8f:	e8 20 fb ff ff       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c0017c94:	83 e0 01             	and    eax,0x1
c0017c97:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c9a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017ca0:	83 e0 fd             	and    eax,0xfffffffd
c0017ca3:	09 d0                	or     eax,edx
c0017ca5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017cab:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017cb2:	e8 fd fa ff ff       	call   c00177b4 <CPU::cpuidCheckEDX(unsigned int)>
c0017cb7:	83 e0 01             	and    eax,0x1
c0017cba:	c1 e0 06             	shl    eax,0x6
c0017cbd:	88 c2                	mov    dl,al
c0017cbf:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017cc5:	83 e0 bf             	and    eax,0xffffffbf
c0017cc8:	09 d0                	or     eax,edx
c0017cca:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017cd0:	58                   	pop    eax
c0017cd1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017cd5:	56                   	push   esi
c0017cd6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017cda:	55                   	push   ebp
c0017cdb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017cdf:	50                   	push   eax
c0017ce0:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017ce4:	52                   	push   edx
c0017ce5:	6a 00                	push   0x0
c0017ce7:	e8 44 fa ff ff       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017cec:	83 c4 1c             	add    esp,0x1c
c0017cef:	6a 04                	push   0x4
c0017cf1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cf5:	50                   	push   eax
c0017cf6:	57                   	push   edi
c0017cf7:	e8 ba 89 fe ff       	call   c00006b6 <memcpy>
c0017cfc:	83 c4 0c             	add    esp,0xc
c0017cff:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017d05:	6a 04                	push   0x4
c0017d07:	56                   	push   esi
c0017d08:	50                   	push   eax
c0017d09:	e8 a8 89 fe ff       	call   c00006b6 <memcpy>
c0017d0e:	83 c4 0c             	add    esp,0xc
c0017d11:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017d17:	6a 04                	push   0x4
c0017d19:	55                   	push   ebp
c0017d1a:	50                   	push   eax
c0017d1b:	e8 96 89 fe ff       	call   c00006b6 <memcpy>
c0017d20:	58                   	pop    eax
c0017d21:	5a                   	pop    edx
c0017d22:	68 d5 7d 02 c0       	push   0xc0027dd5
c0017d27:	57                   	push   edi
c0017d28:	e8 af 8a fe ff       	call   c00007dc <strcmp>
c0017d2d:	83 c4 10             	add    esp,0x10
c0017d30:	85 c0                	test   eax,eax
c0017d32:	75 0f                	jne    c0017d43 <CPU::detectFeatures()+0x1b5>
c0017d34:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017d3e:	e9 22 02 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017d43:	50                   	push   eax
c0017d44:	50                   	push   eax
c0017d45:	68 e2 7d 02 c0       	push   0xc0027de2
c0017d4a:	57                   	push   edi
c0017d4b:	e8 8c 8a fe ff       	call   c00007dc <strcmp>
c0017d50:	83 c4 10             	add    esp,0x10
c0017d53:	85 c0                	test   eax,eax
c0017d55:	74 dd                	je     c0017d34 <CPU::detectFeatures()+0x1a6>
c0017d57:	51                   	push   ecx
c0017d58:	51                   	push   ecx
c0017d59:	68 ef 7d 02 c0       	push   0xc0027def
c0017d5e:	57                   	push   edi
c0017d5f:	e8 78 8a fe ff       	call   c00007dc <strcmp>
c0017d64:	83 c4 10             	add    esp,0x10
c0017d67:	85 c0                	test   eax,eax
c0017d69:	74 2a                	je     c0017d95 <CPU::detectFeatures()+0x207>
c0017d6b:	52                   	push   edx
c0017d6c:	52                   	push   edx
c0017d6d:	68 fc 7d 02 c0       	push   0xc0027dfc
c0017d72:	57                   	push   edi
c0017d73:	e8 64 8a fe ff       	call   c00007dc <strcmp>
c0017d78:	83 c4 10             	add    esp,0x10
c0017d7b:	85 c0                	test   eax,eax
c0017d7d:	74 16                	je     c0017d95 <CPU::detectFeatures()+0x207>
c0017d7f:	50                   	push   eax
c0017d80:	50                   	push   eax
c0017d81:	68 09 7e 02 c0       	push   0xc0027e09
c0017d86:	57                   	push   edi
c0017d87:	e8 50 8a fe ff       	call   c00007dc <strcmp>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	85 c0                	test   eax,eax
c0017d91:	74 48                	je     c0017ddb <CPU::detectFeatures()+0x24d>
c0017d93:	eb 0f                	jmp    c0017da4 <CPU::detectFeatures()+0x216>
c0017d95:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017d9f:	e9 c1 01 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017da4:	50                   	push   eax
c0017da5:	50                   	push   eax
c0017da6:	68 16 7e 02 c0       	push   0xc0027e16
c0017dab:	57                   	push   edi
c0017dac:	e8 2b 8a fe ff       	call   c00007dc <strcmp>
c0017db1:	83 c4 10             	add    esp,0x10
c0017db4:	85 c0                	test   eax,eax
c0017db6:	74 23                	je     c0017ddb <CPU::detectFeatures()+0x24d>
c0017db8:	50                   	push   eax
c0017db9:	50                   	push   eax
c0017dba:	68 23 7e 02 c0       	push   0xc0027e23
c0017dbf:	57                   	push   edi
c0017dc0:	e8 17 8a fe ff       	call   c00007dc <strcmp>
c0017dc5:	83 c4 10             	add    esp,0x10
c0017dc8:	85 c0                	test   eax,eax
c0017dca:	75 1e                	jne    c0017dea <CPU::detectFeatures()+0x25c>
c0017dcc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017dd6:	e9 8a 01 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017ddb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017de5:	e9 7b 01 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017dea:	50                   	push   eax
c0017deb:	50                   	push   eax
c0017dec:	68 30 7e 02 c0       	push   0xc0027e30
c0017df1:	57                   	push   edi
c0017df2:	e8 e5 89 fe ff       	call   c00007dc <strcmp>
c0017df7:	83 c4 10             	add    esp,0x10
c0017dfa:	85 c0                	test   eax,eax
c0017dfc:	75 0f                	jne    c0017e0d <CPU::detectFeatures()+0x27f>
c0017dfe:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017e08:	e9 58 01 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017e0d:	50                   	push   eax
c0017e0e:	50                   	push   eax
c0017e0f:	68 ef 7d 02 c0       	push   0xc0027def
c0017e14:	57                   	push   edi
c0017e15:	e8 c2 89 fe ff       	call   c00007dc <strcmp>
c0017e1a:	83 c4 10             	add    esp,0x10
c0017e1d:	85 c0                	test   eax,eax
c0017e1f:	75 0f                	jne    c0017e30 <CPU::detectFeatures()+0x2a2>
c0017e21:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017e2b:	e9 35 01 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017e30:	50                   	push   eax
c0017e31:	50                   	push   eax
c0017e32:	68 3d 7e 02 c0       	push   0xc0027e3d
c0017e37:	57                   	push   edi
c0017e38:	e8 9f 89 fe ff       	call   c00007dc <strcmp>
c0017e3d:	83 c4 10             	add    esp,0x10
c0017e40:	85 c0                	test   eax,eax
c0017e42:	75 0f                	jne    c0017e53 <CPU::detectFeatures()+0x2c5>
c0017e44:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017e4e:	e9 12 01 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017e53:	51                   	push   ecx
c0017e54:	51                   	push   ecx
c0017e55:	68 4a 7e 02 c0       	push   0xc0027e4a
c0017e5a:	57                   	push   edi
c0017e5b:	e8 7c 89 fe ff       	call   c00007dc <strcmp>
c0017e60:	83 c4 10             	add    esp,0x10
c0017e63:	85 c0                	test   eax,eax
c0017e65:	75 0f                	jne    c0017e76 <CPU::detectFeatures()+0x2e8>
c0017e67:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017e71:	e9 ef 00 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017e76:	52                   	push   edx
c0017e77:	52                   	push   edx
c0017e78:	68 57 7e 02 c0       	push   0xc0027e57
c0017e7d:	57                   	push   edi
c0017e7e:	e8 59 89 fe ff       	call   c00007dc <strcmp>
c0017e83:	83 c4 10             	add    esp,0x10
c0017e86:	85 c0                	test   eax,eax
c0017e88:	75 0f                	jne    c0017e99 <CPU::detectFeatures()+0x30b>
c0017e8a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017e94:	e9 cc 00 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017e99:	50                   	push   eax
c0017e9a:	50                   	push   eax
c0017e9b:	68 64 7e 02 c0       	push   0xc0027e64
c0017ea0:	57                   	push   edi
c0017ea1:	e8 36 89 fe ff       	call   c00007dc <strcmp>
c0017ea6:	83 c4 10             	add    esp,0x10
c0017ea9:	85 c0                	test   eax,eax
c0017eab:	75 0f                	jne    c0017ebc <CPU::detectFeatures()+0x32e>
c0017ead:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017eb7:	e9 a9 00 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017ebc:	50                   	push   eax
c0017ebd:	50                   	push   eax
c0017ebe:	68 71 7e 02 c0       	push   0xc0027e71
c0017ec3:	57                   	push   edi
c0017ec4:	e8 13 89 fe ff       	call   c00007dc <strcmp>
c0017ec9:	83 c4 10             	add    esp,0x10
c0017ecc:	85 c0                	test   eax,eax
c0017ece:	75 0f                	jne    c0017edf <CPU::detectFeatures()+0x351>
c0017ed0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017eda:	e9 86 00 00 00       	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017edf:	50                   	push   eax
c0017ee0:	50                   	push   eax
c0017ee1:	68 7e 7e 02 c0       	push   0xc0027e7e
c0017ee6:	57                   	push   edi
c0017ee7:	e8 f0 88 fe ff       	call   c00007dc <strcmp>
c0017eec:	83 c4 10             	add    esp,0x10
c0017eef:	85 c0                	test   eax,eax
c0017ef1:	75 0c                	jne    c0017eff <CPU::detectFeatures()+0x371>
c0017ef3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017efd:	eb 66                	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017eff:	50                   	push   eax
c0017f00:	50                   	push   eax
c0017f01:	68 8b 7e 02 c0       	push   0xc0027e8b
c0017f06:	57                   	push   edi
c0017f07:	e8 d0 88 fe ff       	call   c00007dc <strcmp>
c0017f0c:	83 c4 10             	add    esp,0x10
c0017f0f:	85 c0                	test   eax,eax
c0017f11:	75 0c                	jne    c0017f1f <CPU::detectFeatures()+0x391>
c0017f13:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017f1d:	eb 46                	jmp    c0017f65 <CPU::detectFeatures()+0x3d7>
c0017f1f:	50                   	push   eax
c0017f20:	50                   	push   eax
c0017f21:	68 98 7e 02 c0       	push   0xc0027e98
c0017f26:	57                   	push   edi
c0017f27:	e8 b0 88 fe ff       	call   c00007dc <strcmp>
c0017f2c:	83 c4 10             	add    esp,0x10
c0017f2f:	85 c0                	test   eax,eax
c0017f31:	74 e0                	je     c0017f13 <CPU::detectFeatures()+0x385>
c0017f33:	50                   	push   eax
c0017f34:	50                   	push   eax
c0017f35:	68 a5 7e 02 c0       	push   0xc0027ea5
c0017f3a:	57                   	push   edi
c0017f3b:	e8 9c 88 fe ff       	call   c00007dc <strcmp>
c0017f40:	83 c4 10             	add    esp,0x10
c0017f43:	85 c0                	test   eax,eax
c0017f45:	74 cc                	je     c0017f13 <CPU::detectFeatures()+0x385>
c0017f47:	51                   	push   ecx
c0017f48:	51                   	push   ecx
c0017f49:	68 b2 7e 02 c0       	push   0xc0027eb2
c0017f4e:	57                   	push   edi
c0017f4f:	e8 88 88 fe ff       	call   c00007dc <strcmp>
c0017f54:	83 c4 10             	add    esp,0x10
c0017f57:	85 c0                	test   eax,eax
c0017f59:	74 b8                	je     c0017f13 <CPU::detectFeatures()+0x385>
c0017f5b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017f65:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017f6a:	0f 86 be 00 00 00    	jbe    c001802e <CPU::detectFeatures()+0x4a0>
c0017f70:	83 ec 0c             	sub    esp,0xc
c0017f73:	68 80 00 00 00       	push   0x80
c0017f78:	e8 93 f8 ff ff       	call   c0017810 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017f7d:	83 e0 01             	and    eax,0x1
c0017f80:	c1 e0 06             	shl    eax,0x6
c0017f83:	88 c2                	mov    dl,al
c0017f85:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017f8b:	83 e0 bf             	and    eax,0xffffffbf
c0017f8e:	09 d0                	or     eax,edx
c0017f90:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017f96:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017f9d:	e8 6e f8 ff ff       	call   c0017810 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017fa2:	83 e0 01             	and    eax,0x1
c0017fa5:	c1 e0 04             	shl    eax,0x4
c0017fa8:	88 c2                	mov    dl,al
c0017faa:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017fb0:	83 e0 ef             	and    eax,0xffffffef
c0017fb3:	09 d0                	or     eax,edx
c0017fb5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017fbb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017fc2:	e8 49 f8 ff ff       	call   c0017810 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017fc7:	c1 e0 07             	shl    eax,0x7
c0017fca:	88 c2                	mov    dl,al
c0017fcc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017fd2:	83 e0 7f             	and    eax,0x7f
c0017fd5:	09 d0                	or     eax,edx
c0017fd7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017fdd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017fe4:	e8 55 f8 ff ff       	call   c001783e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0017fe9:	83 e0 01             	and    eax,0x1
c0017fec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017ff3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017ff9:	83 e0 f7             	and    eax,0xfffffff7
c0017ffc:	09 d0                	or     eax,edx
c0017ffe:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018004:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001800b:	e8 2e f8 ff ff       	call   c001783e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018010:	83 c4 10             	add    esp,0x10
c0018013:	83 e0 01             	and    eax,0x1
c0018016:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001801d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018023:	83 e0 fb             	and    eax,0xfffffffb
c0018026:	09 d0                	or     eax,edx
c0018028:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001802e:	83 ec 0c             	sub    esp,0xc
c0018031:	56                   	push   esi
c0018032:	55                   	push   ebp
c0018033:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018037:	57                   	push   edi
c0018038:	8d 44 24 28          	lea    eax,[esp+0x28]
c001803c:	50                   	push   eax
c001803d:	6a 01                	push   0x1
c001803f:	e8 ec f6 ff ff       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018044:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018048:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001804e:	88 ca                	mov    dl,cl
c0018050:	83 e0 f0             	and    eax,0xfffffff0
c0018053:	83 e2 0f             	and    edx,0xf
c0018056:	09 d0                	or     eax,edx
c0018058:	88 ca                	mov    dl,cl
c001805a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018060:	c0 ea 04             	shr    dl,0x4
c0018063:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018067:	0f b6 c2             	movzx  eax,dl
c001806a:	83 c4 20             	add    esp,0x20
c001806d:	c1 e0 06             	shl    eax,0x6
c0018070:	89 c5                	mov    ebp,eax
c0018072:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018078:	66 25 3f c0          	and    ax,0xc03f
c001807c:	09 e8                	or     eax,ebp
c001807e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018085:	89 c8                	mov    eax,ecx
c0018087:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001808d:	c1 e8 08             	shr    eax,0x8
c0018090:	83 e2 3f             	and    edx,0x3f
c0018093:	83 e0 0f             	and    eax,0xf
c0018096:	89 c5                	mov    ebp,eax
c0018098:	c1 e5 06             	shl    ebp,0x6
c001809b:	09 d5                	or     ebp,edx
c001809d:	89 ea                	mov    edx,ebp
c001809f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00180a5:	88 c2                	mov    dl,al
c00180a7:	c0 ea 02             	shr    dl,0x2
c00180aa:	89 d5                	mov    ebp,edx
c00180ac:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00180b2:	83 e2 c0             	and    edx,0xffffffc0
c00180b5:	09 d5                	or     ebp,edx
c00180b7:	89 ea                	mov    edx,ebp
c00180b9:	89 cd                	mov    ebp,ecx
c00180bb:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00180c1:	c1 ed 0c             	shr    ebp,0xc
c00180c4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00180ca:	83 e5 03             	and    ebp,0x3
c00180cd:	83 e2 cf             	and    edx,0xffffffcf
c00180d0:	c1 e5 04             	shl    ebp,0x4
c00180d3:	09 d5                	or     ebp,edx
c00180d5:	3c 06                	cmp    al,0x6
c00180d7:	89 ea                	mov    edx,ebp
c00180d9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00180df:	74 04                	je     c00180e5 <CPU::detectFeatures()+0x557>
c00180e1:	3c 0f                	cmp    al,0xf
c00180e3:	75 5c                	jne    c0018141 <CPU::detectFeatures()+0x5b3>
c00180e5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00180e9:	89 cd                	mov    ebp,ecx
c00180eb:	c1 ed 10             	shr    ebp,0x10
c00180ee:	c1 e5 04             	shl    ebp,0x4
c00180f1:	09 ea                	or     edx,ebp
c00180f3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00180f9:	0f b6 d2             	movzx  edx,dl
c00180fc:	66 81 e5 3f c0       	and    bp,0xc03f
c0018101:	c1 e2 06             	shl    edx,0x6
c0018104:	09 ea                	or     edx,ebp
c0018106:	3c 0f                	cmp    al,0xf
c0018108:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001810f:	75 30                	jne    c0018141 <CPU::detectFeatures()+0x5b3>
c0018111:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018117:	c1 e9 14             	shr    ecx,0x14
c001811a:	83 e0 3f             	and    eax,0x3f
c001811d:	83 c1 0f             	add    ecx,0xf
c0018120:	88 ca                	mov    dl,cl
c0018122:	c0 e9 02             	shr    cl,0x2
c0018125:	c1 e2 06             	shl    edx,0x6
c0018128:	09 d0                	or     eax,edx
c001812a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018130:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018136:	83 e0 c0             	and    eax,0xffffffc0
c0018139:	09 c1                	or     ecx,eax
c001813b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018141:	83 ec 0c             	sub    esp,0xc
c0018144:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001814b:	56                   	push   esi
c001814c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018150:	50                   	push   eax
c0018151:	57                   	push   edi
c0018152:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018156:	55                   	push   ebp
c0018157:	68 00 00 00 80       	push   0x80000000
c001815c:	e8 cf f5 ff ff       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018161:	83 c4 20             	add    esp,0x20
c0018164:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001816c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018170:	76 1e                	jbe    c0018190 <CPU::detectFeatures()+0x602>
c0018172:	83 ec 0c             	sub    esp,0xc
c0018175:	56                   	push   esi
c0018176:	50                   	push   eax
c0018177:	57                   	push   edi
c0018178:	55                   	push   ebp
c0018179:	68 01 00 00 80       	push   0x80000001
c001817e:	e8 ad f5 ff ff       	call   c0017730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018183:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001818d:	83 c4 20             	add    esp,0x20
c0018190:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018196:	83 f8 01             	cmp    eax,0x1
c0018199:	75 6f                	jne    c001820a <CPU::detectFeatures()+0x67c>
c001819b:	51                   	push   ecx
c001819c:	51                   	push   ecx
c001819d:	68 be 7e 02 c0       	push   0xc0027ebe
c00181a2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00181a6:	56                   	push   esi
c00181a7:	e8 df 85 fe ff       	call   c000078b <strcpy>
c00181ac:	5f                   	pop    edi
c00181ad:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181b3:	5d                   	pop    ebp
c00181b4:	66 c1 e8 06          	shr    ax,0x6
c00181b8:	0f b6 c0             	movzx  eax,al
c00181bb:	50                   	push   eax
c00181bc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181c2:	c1 e8 0e             	shr    eax,0xe
c00181c5:	0f b6 c0             	movzx  eax,al
c00181c8:	50                   	push   eax
c00181c9:	e8 0d f2 ff ff       	call   c00173db <lookupIntelCPUName(unsigned char, unsigned char)>
c00181ce:	5a                   	pop    edx
c00181cf:	59                   	pop    ecx
c00181d0:	50                   	push   eax
c00181d1:	56                   	push   esi
c00181d2:	e8 6b 86 fe ff       	call   c0000842 <strcat>
c00181d7:	5f                   	pop    edi
c00181d8:	5d                   	pop    ebp
c00181d9:	56                   	push   esi
c00181da:	53                   	push   ebx
c00181db:	e8 64 b6 ff ff       	call   c0013844 <Device::setName(char const*)>
c00181e0:	58                   	pop    eax
c00181e1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00181e7:	5a                   	pop    edx
c00181e8:	68 c5 7e 02 c0       	push   0xc0027ec5
c00181ed:	50                   	push   eax
c00181ee:	e8 e9 85 fe ff       	call   c00007dc <strcmp>
c00181f3:	83 c4 10             	add    esp,0x10
c00181f6:	85 c0                	test   eax,eax
c00181f8:	0f 85 73 03 00 00    	jne    c0018571 <CPU::detectFeatures()+0x9e3>
c00181fe:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018205:	e9 67 03 00 00       	jmp    c0018571 <CPU::detectFeatures()+0x9e3>
c001820a:	83 f8 02             	cmp    eax,0x2
c001820d:	0f 85 b5 00 00 00    	jne    c00182c8 <CPU::detectFeatures()+0x73a>
c0018213:	57                   	push   edi
c0018214:	57                   	push   edi
c0018215:	68 d7 7e 02 c0       	push   0xc0027ed7
c001821a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001821e:	56                   	push   esi
c001821f:	e8 67 85 fe ff       	call   c000078b <strcpy>
c0018224:	5d                   	pop    ebp
c0018225:	58                   	pop    eax
c0018226:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001822c:	66 c1 e8 06          	shr    ax,0x6
c0018230:	0f b6 c0             	movzx  eax,al
c0018233:	50                   	push   eax
c0018234:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001823a:	c1 e8 0e             	shr    eax,0xe
c001823d:	0f b6 c0             	movzx  eax,al
c0018240:	50                   	push   eax
c0018241:	e8 01 f0 ff ff       	call   c0017247 <lookupAMDCPUName(unsigned char, unsigned char)>
c0018246:	5a                   	pop    edx
c0018247:	59                   	pop    ecx
c0018248:	50                   	push   eax
c0018249:	56                   	push   esi
c001824a:	e8 f3 85 fe ff       	call   c0000842 <strcat>
c001824f:	5f                   	pop    edi
c0018250:	5d                   	pop    ebp
c0018251:	56                   	push   esi
c0018252:	53                   	push   ebx
c0018253:	e8 ec b5 ff ff       	call   c0013844 <Device::setName(char const*)>
c0018258:	58                   	pop    eax
c0018259:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001825f:	5a                   	pop    edx
c0018260:	68 dc 7e 02 c0       	push   0xc0027edc
c0018265:	50                   	push   eax
c0018266:	e8 71 85 fe ff       	call   c00007dc <strcmp>
c001826b:	83 c4 10             	add    esp,0x10
c001826e:	85 c0                	test   eax,eax
c0018270:	75 20                	jne    c0018292 <CPU::detectFeatures()+0x704>
c0018272:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0018278:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001827e:	a8 01                	test   al,0x1
c0018280:	74 10                	je     c0018292 <CPU::detectFeatures()+0x704>
c0018282:	83 e0 fe             	and    eax,0xfffffffe
c0018285:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001828b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018292:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018298:	c1 e8 0e             	shr    eax,0xe
c001829b:	3c 05                	cmp    al,0x5
c001829d:	0f 85 ce 02 00 00    	jne    c0018571 <CPU::detectFeatures()+0x9e3>
c00182a3:	56                   	push   esi
c00182a4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00182aa:	83 e0 0f             	and    eax,0xf
c00182ad:	50                   	push   eax
c00182ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182b4:	66 c1 e8 06          	shr    ax,0x6
c00182b8:	0f b6 c0             	movzx  eax,al
c00182bb:	50                   	push   eax
c00182bc:	6a 05                	push   0x5
c00182be:	e8 fa f3 ff ff       	call   c00176bd <AMD_K6_writeback(int, int, int)>
c00182c3:	e9 1f 02 00 00       	jmp    c00184e7 <CPU::detectFeatures()+0x959>
c00182c8:	8d 50 fd             	lea    edx,[eax-0x3]
c00182cb:	83 fa 01             	cmp    edx,0x1
c00182ce:	76 09                	jbe    c00182d9 <CPU::detectFeatures()+0x74b>
c00182d0:	83 f8 06             	cmp    eax,0x6
c00182d3:	0f 85 91 01 00 00    	jne    c001846a <CPU::detectFeatures()+0x8dc>
c00182d9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182df:	c1 ea 0e             	shr    edx,0xe
c00182e2:	80 fa 05             	cmp    dl,0x5
c00182e5:	75 7b                	jne    c0018362 <CPU::detectFeatures()+0x7d4>
c00182e7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182ed:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00182f2:	66 81 fa 00 01       	cmp    dx,0x100
c00182f7:	75 0c                	jne    c0018305 <CPU::detectFeatures()+0x777>
c00182f9:	51                   	push   ecx
c00182fa:	51                   	push   ecx
c00182fb:	68 e3 7e 02 c0       	push   0xc0027ee3
c0018300:	e9 dc 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c0018305:	66 81 fa 00 02       	cmp    dx,0x200
c001830a:	75 0c                	jne    c0018318 <CPU::detectFeatures()+0x78a>
c001830c:	52                   	push   edx
c001830d:	52                   	push   edx
c001830e:	68 f6 7e 02 c0       	push   0xc0027ef6
c0018313:	e9 c9 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c0018318:	66 81 fa 40 02       	cmp    dx,0x240
c001831d:	75 0c                	jne    c001832b <CPU::detectFeatures()+0x79d>
c001831f:	50                   	push   eax
c0018320:	50                   	push   eax
c0018321:	68 08 7f 02 c0       	push   0xc0027f08
c0018326:	e9 b6 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c001832b:	83 f8 06             	cmp    eax,0x6
c001832e:	75 0c                	jne    c001833c <CPU::detectFeatures()+0x7ae>
c0018330:	50                   	push   eax
c0018331:	50                   	push   eax
c0018332:	68 1a 7f 02 c0       	push   0xc0027f1a
c0018337:	e9 a5 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c001833c:	83 f8 04             	cmp    eax,0x4
c001833f:	75 0c                	jne    c001834d <CPU::detectFeatures()+0x7bf>
c0018341:	50                   	push   eax
c0018342:	50                   	push   eax
c0018343:	68 26 7f 02 c0       	push   0xc0027f26
c0018348:	e9 94 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c001834d:	83 f8 03             	cmp    eax,0x3
c0018350:	0f 85 1b 02 00 00    	jne    c0018571 <CPU::detectFeatures()+0x9e3>
c0018356:	50                   	push   eax
c0018357:	50                   	push   eax
c0018358:	68 2e 7f 02 c0       	push   0xc0027f2e
c001835d:	e9 7f 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c0018362:	80 fa 06             	cmp    dl,0x6
c0018365:	0f 85 db 00 00 00    	jne    c0018446 <CPU::detectFeatures()+0x8b8>
c001836b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018371:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018376:	66 81 fa 80 01       	cmp    dx,0x180
c001837b:	75 0c                	jne    c0018389 <CPU::detectFeatures()+0x7fb>
c001837d:	50                   	push   eax
c001837e:	50                   	push   eax
c001837f:	68 39 7f 02 c0       	push   0xc0027f39
c0018384:	e9 58 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c0018389:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001838f:	66 f7 c1 80 ff       	test   cx,0xff80
c0018394:	75 0c                	jne    c00183a2 <CPU::detectFeatures()+0x814>
c0018396:	50                   	push   eax
c0018397:	50                   	push   eax
c0018398:	68 49 7f 02 c0       	push   0xc0027f49
c001839d:	e9 3f 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c00183a2:	66 81 fa 40 02       	cmp    dx,0x240
c00183a7:	75 0c                	jne    c00183b5 <CPU::detectFeatures()+0x827>
c00183a9:	55                   	push   ebp
c00183aa:	55                   	push   ebp
c00183ab:	68 50 7f 02 c0       	push   0xc0027f50
c00183b0:	e9 2c 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c00183b5:	66 81 fa 80 02       	cmp    dx,0x280
c00183ba:	75 0c                	jne    c00183c8 <CPU::detectFeatures()+0x83a>
c00183bc:	57                   	push   edi
c00183bd:	57                   	push   edi
c00183be:	68 59 7f 02 c0       	push   0xc0027f59
c00183c3:	e9 19 01 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c00183c8:	66 81 fa 40 03       	cmp    dx,0x340
c00183cd:	74 ed                	je     c00183bc <CPU::detectFeatures()+0x82e>
c00183cf:	66 81 fa c0 03       	cmp    dx,0x3c0
c00183d4:	75 0c                	jne    c00183e2 <CPU::detectFeatures()+0x854>
c00183d6:	56                   	push   esi
c00183d7:	56                   	push   esi
c00183d8:	68 60 7f 02 c0       	push   0xc0027f60
c00183dd:	e9 ff 00 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c00183e2:	83 f8 06             	cmp    eax,0x6
c00183e5:	0f 84 45 ff ff ff    	je     c0018330 <CPU::detectFeatures()+0x7a2>
c00183eb:	83 f8 04             	cmp    eax,0x4
c00183ee:	0f 84 4d ff ff ff    	je     c0018341 <CPU::detectFeatures()+0x7b3>
c00183f4:	83 f8 03             	cmp    eax,0x3
c00183f7:	0f 85 74 01 00 00    	jne    c0018571 <CPU::detectFeatures()+0x9e3>
c00183fd:	51                   	push   ecx
c00183fe:	51                   	push   ecx
c00183ff:	68 69 7f 02 c0       	push   0xc0027f69
c0018404:	53                   	push   ebx
c0018405:	e8 3a b4 ff ff       	call   c0013844 <Device::setName(char const*)>
c001840a:	b1 c1                	mov    cl,0xc1
c001840c:	88 c8                	mov    al,cl
c001840e:	e6 22                	out    0x22,al
c0018410:	e4 23                	in     al,0x23
c0018412:	88 c2                	mov    dl,al
c0018414:	88 c8                	mov    al,cl
c0018416:	e6 22                	out    0x22,al
c0018418:	88 d0                	mov    al,dl
c001841a:	83 c8 10             	or     eax,0x10
c001841d:	e6 23                	out    0x23,al
c001841f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018426:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018429:	89 d0                	mov    eax,edx
c001842b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018431:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018435:	40                   	inc    eax
c0018436:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001843c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018441:	e9 a1 00 00 00       	jmp    c00184e7 <CPU::detectFeatures()+0x959>
c0018446:	83 f8 06             	cmp    eax,0x6
c0018449:	0f 84 e1 fe ff ff    	je     c0018330 <CPU::detectFeatures()+0x7a2>
c001844f:	83 f8 04             	cmp    eax,0x4
c0018452:	0f 84 e9 fe ff ff    	je     c0018341 <CPU::detectFeatures()+0x7b3>
c0018458:	83 f8 03             	cmp    eax,0x3
c001845b:	0f 85 10 01 00 00    	jne    c0018571 <CPU::detectFeatures()+0x9e3>
c0018461:	52                   	push   edx
c0018462:	52                   	push   edx
c0018463:	68 74 7f 02 c0       	push   0xc0027f74
c0018468:	eb 77                	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c001846a:	83 f8 07             	cmp    eax,0x7
c001846d:	75 09                	jne    c0018478 <CPU::detectFeatures()+0x8ea>
c001846f:	50                   	push   eax
c0018470:	50                   	push   eax
c0018471:	68 7e 7f 02 c0       	push   0xc0027f7e
c0018476:	eb 69                	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c0018478:	83 f8 0a             	cmp    eax,0xa
c001847b:	75 09                	jne    c0018486 <CPU::detectFeatures()+0x8f8>
c001847d:	50                   	push   eax
c001847e:	50                   	push   eax
c001847f:	68 89 7f 02 c0       	push   0xc0027f89
c0018484:	eb 5b                	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c0018486:	83 f8 0b             	cmp    eax,0xb
c0018489:	75 09                	jne    c0018494 <CPU::detectFeatures()+0x906>
c001848b:	50                   	push   eax
c001848c:	50                   	push   eax
c001848d:	68 91 7f 02 c0       	push   0xc0027f91
c0018492:	eb 4d                	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c0018494:	83 f8 08             	cmp    eax,0x8
c0018497:	75 09                	jne    c00184a2 <CPU::detectFeatures()+0x914>
c0018499:	50                   	push   eax
c001849a:	50                   	push   eax
c001849b:	68 9a 7f 02 c0       	push   0xc0027f9a
c00184a0:	eb 3f                	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c00184a2:	83 f8 09             	cmp    eax,0x9
c00184a5:	75 09                	jne    c00184b0 <CPU::detectFeatures()+0x922>
c00184a7:	50                   	push   eax
c00184a8:	50                   	push   eax
c00184a9:	68 a2 7f 02 c0       	push   0xc0027fa2
c00184ae:	eb 31                	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c00184b0:	83 f8 05             	cmp    eax,0x5
c00184b3:	75 09                	jne    c00184be <CPU::detectFeatures()+0x930>
c00184b5:	50                   	push   eax
c00184b6:	50                   	push   eax
c00184b7:	68 aa 7f 02 c0       	push   0xc0027faa
c00184bc:	eb 23                	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c00184be:	83 f8 0c             	cmp    eax,0xc
c00184c1:	75 09                	jne    c00184cc <CPU::detectFeatures()+0x93e>
c00184c3:	55                   	push   ebp
c00184c4:	55                   	push   ebp
c00184c5:	68 b8 7f 02 c0       	push   0xc0027fb8
c00184ca:	eb 15                	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c00184cc:	83 f8 0d             	cmp    eax,0xd
c00184cf:	75 09                	jne    c00184da <CPU::detectFeatures()+0x94c>
c00184d1:	57                   	push   edi
c00184d2:	57                   	push   edi
c00184d3:	68 c3 7f 02 c0       	push   0xc0027fc3
c00184d8:	eb 07                	jmp    c00184e1 <CPU::detectFeatures()+0x953>
c00184da:	56                   	push   esi
c00184db:	56                   	push   esi
c00184dc:	68 d7 7f 02 c0       	push   0xc0027fd7
c00184e1:	53                   	push   ebx
c00184e2:	e8 5d b3 ff ff       	call   c0013844 <Device::setName(char const*)>
c00184e7:	83 c4 10             	add    esp,0x10
c00184ea:	e9 82 00 00 00       	jmp    c0018571 <CPU::detectFeatures()+0x9e3>
c00184ef:	51                   	push   ecx
c00184f0:	51                   	push   ecx
c00184f1:	68 23 7e 02 c0       	push   0xc0027e23
c00184f6:	57                   	push   edi
c00184f7:	e8 8f 82 fe ff       	call   c000078b <strcpy>
c00184fc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018506:	e8 58 7d fe ff       	call   c0000263 <is486>
c001850b:	83 c4 10             	add    esp,0x10
c001850e:	85 c0                	test   eax,eax
c0018510:	74 2d                	je     c001853f <CPU::detectFeatures()+0x9b1>
c0018512:	52                   	push   edx
c0018513:	52                   	push   edx
c0018514:	68 e3 7f 02 c0       	push   0xc0027fe3
c0018519:	53                   	push   ebx
c001851a:	e8 25 b3 ff ff       	call   c0013844 <Device::setName(char const*)>
c001851f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018526:	e8 bd ce 00 00       	call   c00253e8 <CPU::readCR0()>
c001852b:	83 c4 10             	add    esp,0x10
c001852e:	83 e0 14             	and    eax,0x14
c0018531:	83 f8 04             	cmp    eax,0x4
c0018534:	75 1f                	jne    c0018555 <CPU::detectFeatures()+0x9c7>
c0018536:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001853d:	eb 32                	jmp    c0018571 <CPU::detectFeatures()+0x9e3>
c001853f:	50                   	push   eax
c0018540:	50                   	push   eax
c0018541:	68 ee 7f 02 c0       	push   0xc0027fee
c0018546:	53                   	push   ebx
c0018547:	e8 f8 b2 ff ff       	call   c0013844 <Device::setName(char const*)>
c001854c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018553:	eb d1                	jmp    c0018526 <CPU::detectFeatures()+0x998>
c0018555:	e8 e4 7c fe ff       	call   c000023e <hasLegacyFPU>
c001855a:	83 e0 01             	and    eax,0x1
c001855d:	8d 14 00             	lea    edx,[eax+eax*1]
c0018560:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018566:	83 e0 fd             	and    eax,0xfffffffd
c0018569:	09 d0                	or     eax,edx
c001856b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018571:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018578:	83 c4 4c             	add    esp,0x4c
c001857b:	5b                   	pop    ebx
c001857c:	5e                   	pop    esi
c001857d:	5f                   	pop    edi
c001857e:	5d                   	pop    ebp
c001857f:	c3                   	ret    

c0018580 <CPU::setupSMEP()>:
c0018580:	83 ec 0c             	sub    esp,0xc
c0018583:	e8 2a d1 00 00       	call   c00256b2 <CPU::readCR4()>
c0018588:	0d 00 00 10 00       	or     eax,0x100000
c001858d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018591:	83 c4 0c             	add    esp,0xc
c0018594:	e9 34 d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c0018599:	90                   	nop

c001859a <CPU::setupUMIP()>:
c001859a:	83 ec 0c             	sub    esp,0xc
c001859d:	e8 10 d1 00 00       	call   c00256b2 <CPU::readCR4()>
c00185a2:	80 cc 08             	or     ah,0x8
c00185a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185a9:	83 c4 0c             	add    esp,0xc
c00185ac:	e9 1c d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185b1:	90                   	nop

c00185b2 <CPU::setupTSC()>:
c00185b2:	83 ec 0c             	sub    esp,0xc
c00185b5:	e8 f8 d0 00 00       	call   c00256b2 <CPU::readCR4()>
c00185ba:	83 c8 04             	or     eax,0x4
c00185bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185c1:	83 c4 0c             	add    esp,0xc
c00185c4:	e9 04 d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185c9:	90                   	nop

c00185ca <CPU::setupLargePages()>:
c00185ca:	83 ec 0c             	sub    esp,0xc
c00185cd:	e8 e0 d0 00 00       	call   c00256b2 <CPU::readCR4()>
c00185d2:	83 c8 10             	or     eax,0x10
c00185d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185d9:	83 c4 0c             	add    esp,0xc
c00185dc:	e9 ec d0 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185e1:	90                   	nop

c00185e2 <CPU::setupPAT()>:
c00185e2:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00185e7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00185ee:	74 2c                	je     c001861c <CPU::setupPAT()+0x3a>
c00185f0:	53                   	push   ebx
c00185f1:	83 ec 10             	sub    esp,0x10
c00185f4:	68 77 02 00 00       	push   0x277
c00185f9:	50                   	push   eax
c00185fa:	e8 07 61 ff ff       	call   c000e706 <Computer::rdmsr(unsigned int)>
c00185ff:	83 e2 f8             	and    edx,0xfffffff8
c0018602:	83 ca 01             	or     edx,0x1
c0018605:	52                   	push   edx
c0018606:	50                   	push   eax
c0018607:	68 77 02 00 00       	push   0x277
c001860c:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0018612:	e8 1b 61 ff ff       	call   c000e732 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018617:	83 c4 28             	add    esp,0x28
c001861a:	5b                   	pop    ebx
c001861b:	c3                   	ret    
c001861c:	c3                   	ret    
c001861d:	90                   	nop

c001861e <CPU::setupMTRR()>:
c001861e:	c3                   	ret    
c001861f:	90                   	nop

c0018620 <CPU::setupGlobalPages()>:
c0018620:	83 ec 0c             	sub    esp,0xc
c0018623:	e8 8a d0 00 00       	call   c00256b2 <CPU::readCR4()>
c0018628:	0c 80                	or     al,0x80
c001862a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001862e:	83 c4 0c             	add    esp,0xc
c0018631:	e9 97 d0 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>

c0018636 <CPU::allowUsermodeDataAccess()>:
c0018636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001863a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018641:	74 03                	je     c0018646 <CPU::allowUsermodeDataAccess()+0x10>
c0018643:	0f 01 cb             	stac   
c0018646:	c3                   	ret    
c0018647:	90                   	nop

c0018648 <CPU::prohibitUsermodeDataAccess()>:
c0018648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001864c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018653:	74 03                	je     c0018658 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018655:	0f 01 ca             	clac   
c0018658:	c3                   	ret    
c0018659:	90                   	nop

c001865a <CPU::setupSMAP()>:
c001865a:	53                   	push   ebx
c001865b:	83 ec 08             	sub    esp,0x8
c001865e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018662:	e8 4b d0 00 00       	call   c00256b2 <CPU::readCR4()>
c0018667:	83 ec 0c             	sub    esp,0xc
c001866a:	0d 00 00 20 00       	or     eax,0x200000
c001866f:	50                   	push   eax
c0018670:	e8 58 d0 00 00       	call   c00256cd <CPU::writeCR4(unsigned long)>
c0018675:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018679:	83 c4 18             	add    esp,0x18
c001867c:	5b                   	pop    ebx
c001867d:	eb c9                	jmp    c0018648 <CPU::prohibitUsermodeDataAccess()>
c001867f:	90                   	nop

c0018680 <CPU::setupFeatures()>:
c0018680:	53                   	push   ebx
c0018681:	83 ec 08             	sub    esp,0x8
c0018684:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018688:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001868f:	74 0c                	je     c001869d <CPU::setupFeatures()+0x1d>
c0018691:	83 ec 0c             	sub    esp,0xc
c0018694:	53                   	push   ebx
c0018695:	e8 e6 fe ff ff       	call   c0018580 <CPU::setupSMEP()>
c001869a:	83 c4 10             	add    esp,0x10
c001869d:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00186a4:	74 0c                	je     c00186b2 <CPU::setupFeatures()+0x32>
c00186a6:	83 ec 0c             	sub    esp,0xc
c00186a9:	53                   	push   ebx
c00186aa:	e8 ab ff ff ff       	call   c001865a <CPU::setupSMAP()>
c00186af:	83 c4 10             	add    esp,0x10
c00186b2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00186b9:	74 0c                	je     c00186c7 <CPU::setupFeatures()+0x47>
c00186bb:	83 ec 0c             	sub    esp,0xc
c00186be:	53                   	push   ebx
c00186bf:	e8 d6 fe ff ff       	call   c001859a <CPU::setupUMIP()>
c00186c4:	83 c4 10             	add    esp,0x10
c00186c7:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00186ce:	74 0c                	je     c00186dc <CPU::setupFeatures()+0x5c>
c00186d0:	83 ec 0c             	sub    esp,0xc
c00186d3:	53                   	push   ebx
c00186d4:	e8 d9 fe ff ff       	call   c00185b2 <CPU::setupTSC()>
c00186d9:	83 c4 10             	add    esp,0x10
c00186dc:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00186e3:	74 0c                	je     c00186f1 <CPU::setupFeatures()+0x71>
c00186e5:	83 ec 0c             	sub    esp,0xc
c00186e8:	53                   	push   ebx
c00186e9:	e8 dc fe ff ff       	call   c00185ca <CPU::setupLargePages()>
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00186f8:	74 0c                	je     c0018706 <CPU::setupFeatures()+0x86>
c00186fa:	83 ec 0c             	sub    esp,0xc
c00186fd:	53                   	push   ebx
c00186fe:	e8 1d ff ff ff       	call   c0018620 <CPU::setupGlobalPages()>
c0018703:	83 c4 10             	add    esp,0x10
c0018706:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001870d:	74 0d                	je     c001871c <CPU::setupFeatures()+0x9c>
c001870f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018713:	83 c4 08             	add    esp,0x8
c0018716:	5b                   	pop    ebx
c0018717:	e9 c6 fe ff ff       	jmp    c00185e2 <CPU::setupPAT()>
c001871c:	83 c4 08             	add    esp,0x8
c001871f:	5b                   	pop    ebx
c0018720:	c3                   	ret    
c0018721:	90                   	nop

c0018722 <CPU::open(int, int, void*)>:
c0018722:	57                   	push   edi
c0018723:	56                   	push   esi
c0018724:	53                   	push   ebx
c0018725:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018729:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001872d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018733:	83 ec 0c             	sub    esp,0xc
c0018736:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001873c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018742:	50                   	push   eax
c0018743:	e8 aa 62 ff ff       	call   c000e9f2 <GDT::setup()>
c0018748:	83 c4 0c             	add    esp,0xc
c001874b:	6a 00                	push   0x0
c001874d:	68 ef be ad de       	push   0xdeadbeef
c0018752:	57                   	push   edi
c0018753:	e8 02 85 ff ff       	call   c0010c5a <TSS::setup(unsigned long, unsigned long)>
c0018758:	89 3c 24             	mov    DWORD PTR [esp],edi
c001875b:	e8 da 84 ff ff       	call   c0010c3a <TSS::flush()>
c0018760:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018766:	89 04 24             	mov    DWORD PTR [esp],eax
c0018769:	e8 de 64 ff ff       	call   c000ec4c <IDT::setup()>
c001876e:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0018775:	e8 4a cf 00 00       	call   c00256c4 <CPU::writeDR7(unsigned long)>
c001877a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018784:	e8 87 6f ff ff       	call   c000f710 <Phys::allocatePage()>
c0018789:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001878f:	89 30                	mov    DWORD PTR [eax],esi
c0018791:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018797:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001879a:	58                   	pop    eax
c001879b:	5a                   	pop    edx
c001879c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00187a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00187a6:	e8 7d 94 ff ff       	call   c0011c28 <VAS::setCPUSpecific(unsigned long)>
c00187ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187ae:	e8 db f3 ff ff       	call   c0017b8e <CPU::detectFeatures()>
c00187b3:	e8 7c c3 ff ff       	call   c0014b34 <setupInterruptController()>
c00187b8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00187be:	a1 20 a4 02 c0       	mov    eax,ds:0xc002a420
c00187c3:	83 e0 10             	and    eax,0x10
c00187c6:	83 f8 01             	cmp    eax,0x1
c00187c9:	19 c0                	sbb    eax,eax
c00187cb:	83 e0 46             	and    eax,0x46
c00187ce:	83 c0 1e             	add    eax,0x1e
c00187d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00187d4:	e8 05 d7 ff ff       	call   c0015ede <setupTimer(int)>
c00187d9:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00187df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187e2:	e8 99 fe ff ff       	call   c0018680 <CPU::setupFeatures()>
c00187e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187ea:	e8 23 f1 ff ff       	call   c0017912 <CPU::displayFeatures()>
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	31 c0                	xor    eax,eax
c00187f4:	5b                   	pop    ebx
c00187f5:	5e                   	pop    esi
c00187f6:	5f                   	pop    edi
c00187f7:	c3                   	ret    

c00187f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00187f8:	57                   	push   edi
c00187f9:	56                   	push   esi
c00187fa:	53                   	push   ebx
c00187fb:	51                   	push   ecx
c00187fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018800:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018803:	0f 02 c0             	lar    eax,ax
c0018806:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018809:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001880d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018810:	88 ca                	mov    dl,cl
c0018812:	c0 ea 06             	shr    dl,0x6
c0018815:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018819:	89 ca                	mov    edx,ecx
c001881b:	66 c1 ea 03          	shr    dx,0x3
c001881f:	83 e2 07             	and    edx,0x7
c0018822:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018827:	88 17                	mov    BYTE PTR [edi],dl
c0018829:	0f 84 a6 01 00 00    	je     c00189d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001882f:	83 e1 07             	and    ecx,0x7
c0018832:	80 f9 04             	cmp    cl,0x4
c0018835:	0f 84 98 00 00 00    	je     c00188d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001883b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018840:	0f 95 c0             	setne  al
c0018843:	80 f9 05             	cmp    cl,0x5
c0018846:	0f 95 c2             	setne  dl
c0018849:	08 c2                	or     dl,al
c001884b:	74 79                	je     c00188c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001884d:	84 c9                	test   cl,cl
c001884f:	75 05                	jne    c0018856 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018851:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018854:	eb 3c                	jmp    c0018892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018856:	80 f9 01             	cmp    cl,0x1
c0018859:	75 05                	jne    c0018860 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001885b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001885e:	eb 32                	jmp    c0018892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018860:	80 f9 02             	cmp    cl,0x2
c0018863:	75 05                	jne    c001886a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018865:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018868:	eb 28                	jmp    c0018892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001886a:	31 c0                	xor    eax,eax
c001886c:	80 f9 03             	cmp    cl,0x3
c001886f:	75 05                	jne    c0018876 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018871:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018874:	eb 1c                	jmp    c0018892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018876:	80 f9 05             	cmp    cl,0x5
c0018879:	75 05                	jne    c0018880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001887b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001887e:	eb 12                	jmp    c0018892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018880:	80 f9 06             	cmp    cl,0x6
c0018883:	75 05                	jne    c001888a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018885:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018888:	eb 08                	jmp    c0018892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001888a:	80 f9 07             	cmp    cl,0x7
c001888d:	75 03                	jne    c0018892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001888f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018892:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018897:	75 10                	jne    c00188a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018899:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001889d:	b9 03 00 00 00       	mov    ecx,0x3
c00188a2:	01 d0                	add    eax,edx
c00188a4:	e9 37 01 00 00       	jmp    c00189e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188a9:	b9 02 00 00 00       	mov    ecx,0x2
c00188ae:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00188b3:	0f 85 27 01 00 00    	jne    c00189e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188b9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00188bc:	b9 06 00 00 00       	mov    ecx,0x6
c00188c1:	e9 1a 01 00 00       	jmp    c00189e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188c6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00188c9:	b9 06 00 00 00       	mov    ecx,0x6
c00188ce:	e9 0f 01 00 00       	jmp    c00189e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00188d3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00188d6:	88 ca                	mov    dl,cl
c00188d8:	c0 ea 06             	shr    dl,0x6
c00188db:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00188df:	89 ca                	mov    edx,ecx
c00188e1:	66 c1 ea 03          	shr    dx,0x3
c00188e5:	83 e2 07             	and    edx,0x7
c00188e8:	80 e1 07             	and    cl,0x7
c00188eb:	75 05                	jne    c00188f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00188ed:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00188f0:	eb 4c                	jmp    c001893e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188f2:	80 f9 01             	cmp    cl,0x1
c00188f5:	75 05                	jne    c00188fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00188f7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00188fa:	eb 42                	jmp    c001893e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188fc:	80 f9 02             	cmp    cl,0x2
c00188ff:	75 05                	jne    c0018906 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0018901:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0018904:	eb 38                	jmp    c001893e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018906:	80 f9 03             	cmp    cl,0x3
c0018909:	75 05                	jne    c0018910 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001890b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001890e:	eb 2e                	jmp    c001893e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018910:	80 f9 04             	cmp    cl,0x4
c0018913:	75 12                	jne    c0018927 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0018915:	f6 c4 60             	test   ah,0x60
c0018918:	75 08                	jne    c0018922 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001891a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001891d:	8d 78 14             	lea    edi,[eax+0x14]
c0018920:	eb 1c                	jmp    c001893e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018922:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018925:	eb 17                	jmp    c001893e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018927:	80 f9 05             	cmp    cl,0x5
c001892a:	75 05                	jne    c0018931 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001892c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001892f:	eb 0d                	jmp    c001893e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018931:	80 f9 06             	cmp    cl,0x6
c0018934:	75 05                	jne    c001893b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018936:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018939:	eb 03                	jmp    c001893e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001893b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001893e:	84 d2                	test   dl,dl
c0018940:	75 05                	jne    c0018947 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018942:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018945:	eb 3c                	jmp    c0018983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018947:	80 fa 01             	cmp    dl,0x1
c001894a:	75 05                	jne    c0018951 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001894c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001894f:	eb 32                	jmp    c0018983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018951:	80 fa 02             	cmp    dl,0x2
c0018954:	75 05                	jne    c001895b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018956:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018959:	eb 28                	jmp    c0018983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001895b:	80 fa 03             	cmp    dl,0x3
c001895e:	75 05                	jne    c0018965 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018960:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018963:	eb 1e                	jmp    c0018983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018965:	31 c0                	xor    eax,eax
c0018967:	80 fa 04             	cmp    dl,0x4
c001896a:	74 17                	je     c0018983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001896c:	80 fa 05             	cmp    dl,0x5
c001896f:	75 05                	jne    c0018976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018971:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018974:	eb 0d                	jmp    c0018983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018976:	80 fa 06             	cmp    dl,0x6
c0018979:	75 05                	jne    c0018980 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001897b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001897e:	eb 03                	jmp    c0018983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018980:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018983:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018988:	0f 94 c2             	sete   dl
c001898b:	80 f9 05             	cmp    cl,0x5
c001898e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018992:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018997:	d3 e0                	shl    eax,cl
c0018999:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001899d:	74 0a                	je     c00189a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001899f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189a2:	b9 07 00 00 00       	mov    ecx,0x7
c00189a7:	eb 37                	jmp    c00189e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00189a9:	01 f8                	add    eax,edi
c00189ab:	b9 03 00 00 00       	mov    ecx,0x3
c00189b0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00189b5:	74 2b                	je     c00189e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189b7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00189bc:	75 0d                	jne    c00189cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00189be:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00189c2:	01 c8                	add    eax,ecx
c00189c4:	b9 04 00 00 00       	mov    ecx,0x4
c00189c9:	eb 17                	jmp    c00189e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189cb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189ce:	b9 07 00 00 00       	mov    ecx,0x7
c00189d3:	eb 0d                	jmp    c00189e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189d5:	b9 02 00 00 00       	mov    ecx,0x2
c00189da:	b2 01                	mov    dl,0x1
c00189dc:	31 c0                	xor    eax,eax
c00189de:	eb 02                	jmp    c00189e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189e0:	31 d2                	xor    edx,edx
c00189e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189e6:	89 0b                	mov    DWORD PTR [ebx],ecx
c00189e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189ec:	88 11                	mov    BYTE PTR [ecx],dl
c00189ee:	5a                   	pop    edx
c00189ef:	5b                   	pop    ebx
c00189f0:	5e                   	pop    esi
c00189f1:	5f                   	pop    edi
c00189f2:	c3                   	ret    

c00189f3 <Krnl::panic(char const*)>:
c00189f3:	55                   	push   ebp
c00189f4:	89 e5                	mov    ebp,esp
c00189f6:	53                   	push   ebx
c00189f7:	50                   	push   eax
c00189f8:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c00189fd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0018a00:	85 c0                	test   eax,eax
c0018a02:	74 02                	je     c0018a06 <Krnl::panic(char const*)+0x13>
c0018a04:	ff d0                	call   eax
c0018a06:	fa                   	cli    
c0018a07:	c6 05 54 ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae54,0x1
c0018a0e:	83 ec 08             	sub    esp,0x8
c0018a11:	c6 05 c0 93 02 c0 00 	mov    BYTE PTR ds:0xc00293c0,0x0
c0018a18:	53                   	push   ebx
c0018a19:	68 28 80 02 c0       	push   0xc0028028
c0018a1e:	e8 34 98 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0018a23:	58                   	pop    eax
c0018a24:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a2f:	e8 67 7a ff ff       	call   c001049b <setActiveTerminal(VgaText*)>
c0018a34:	83 c4 0c             	add    esp,0xc
c0018a37:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a3c:	6a 01                	push   0x1
c0018a3e:	6a 0f                	push   0xf
c0018a40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a46:	e8 8f 74 ff ff       	call   c000feda <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a4b:	5a                   	pop    edx
c0018a4c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a57:	e8 e0 7c ff ff       	call   c001073c <VgaText::clearScreen()>
c0018a5c:	59                   	pop    ecx
c0018a5d:	58                   	pop    eax
c0018a5e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a63:	68 41 80 02 c0       	push   0xc0028041
c0018a68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a6e:	e8 47 7e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018a73:	58                   	pop    eax
c0018a74:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a79:	5a                   	pop    edx
c0018a7a:	68 e8 80 02 c0       	push   0xc00280e8
c0018a7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a85:	e8 30 7e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018a8a:	59                   	pop    ecx
c0018a8b:	58                   	pop    eax
c0018a8c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a91:	68 5d 80 02 c0       	push   0xc002805d
c0018a96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a9c:	e8 19 7e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018aa1:	58                   	pop    eax
c0018aa2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018aa7:	5a                   	pop    edx
c0018aa8:	53                   	push   ebx
c0018aa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018aaf:	e8 06 7e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018ab4:	59                   	pop    ecx
c0018ab5:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018aba:	5b                   	pop    ebx
c0018abb:	68 7d 80 02 c0       	push   0xc002807d
c0018ac0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ac6:	e8 ef 7d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018acb:	58                   	pop    eax
c0018acc:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ad1:	5a                   	pop    edx
c0018ad2:	68 24 81 02 c0       	push   0xc0028124
c0018ad7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018add:	e8 d8 7d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018ae2:	59                   	pop    ecx
c0018ae3:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ae8:	5b                   	pop    ebx
c0018ae9:	68 5d 80 02 c0       	push   0xc002805d
c0018aee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018af4:	e8 c1 7d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018af9:	58                   	pop    eax
c0018afa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018aff:	5a                   	pop    edx
c0018b00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018b03:	83 c0 0c             	add    eax,0xc
c0018b06:	50                   	push   eax
c0018b07:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b12:	e8 a3 7d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018b17:	59                   	pop    ecx
c0018b18:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b1d:	5b                   	pop    ebx
c0018b1e:	68 7c 80 02 c0       	push   0xc002807c
c0018b23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b29:	e8 8c 7d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018b2e:	58                   	pop    eax
c0018b2f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b34:	5a                   	pop    edx
c0018b35:	68 50 81 02 c0       	push   0xc0028150
c0018b3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b40:	e8 75 7d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018b45:	59                   	pop    ecx
c0018b46:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b4b:	5b                   	pop    ebx
c0018b4c:	68 90 81 02 c0       	push   0xc0028190
c0018b51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b57:	e8 5e 7d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018b5c:	58                   	pop    eax
c0018b5d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b62:	5a                   	pop    edx
c0018b63:	68 68 80 02 c0       	push   0xc0028068
c0018b68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b6e:	e8 47 7d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018b73:	59                   	pop    ecx
c0018b74:	5b                   	pop    ebx
c0018b75:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018b78:	68 80 80 02 c0       	push   0xc0028080
c0018b7d:	e8 d5 96 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0018b82:	58                   	pop    eax
c0018b83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b86:	5a                   	pop    edx
c0018b87:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b8a:	68 89 80 02 c0       	push   0xc0028089
c0018b8f:	e8 c3 96 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0018b94:	59                   	pop    ecx
c0018b95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b98:	5b                   	pop    ebx
c0018b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b9b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b9e:	68 92 80 02 c0       	push   0xc0028092
c0018ba3:	e8 af 96 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0018ba8:	58                   	pop    eax
c0018ba9:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bae:	5a                   	pop    edx
c0018baf:	68 d4 81 02 c0       	push   0xc00281d4
c0018bb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bba:	e8 fb 7c ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018bbf:	59                   	pop    ecx
c0018bc0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bc5:	5b                   	pop    ebx
c0018bc6:	68 9b 80 02 c0       	push   0xc002809b
c0018bcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bd1:	e8 e4 7c ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018bd6:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bdb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018be1:	e8 02 c8 00 00       	call   c00253e8 <CPU::readCR0()>
c0018be6:	5a                   	pop    edx
c0018be7:	59                   	pop    ecx
c0018be8:	50                   	push   eax
c0018be9:	53                   	push   ebx
c0018bea:	e8 f1 7c ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0018bef:	5b                   	pop    ebx
c0018bf0:	58                   	pop    eax
c0018bf1:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bf6:	68 a5 80 02 c0       	push   0xc00280a5
c0018bfb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c01:	e8 b4 7c ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018c06:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c0b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c11:	e8 c0 ca 00 00       	call   c00256d6 <CPU::readCR2()>
c0018c16:	5a                   	pop    edx
c0018c17:	59                   	pop    ecx
c0018c18:	50                   	push   eax
c0018c19:	53                   	push   ebx
c0018c1a:	e8 c1 7c ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0018c1f:	5b                   	pop    ebx
c0018c20:	58                   	pop    eax
c0018c21:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c26:	68 af 80 02 c0       	push   0xc00280af
c0018c2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c31:	e8 84 7c ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018c36:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c3b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c41:	e8 2f c4 00 00       	call   c0025075 <CPU::readCR3()>
c0018c46:	5a                   	pop    edx
c0018c47:	59                   	pop    ecx
c0018c48:	50                   	push   eax
c0018c49:	53                   	push   ebx
c0018c4a:	e8 91 7c ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0018c4f:	5b                   	pop    ebx
c0018c50:	58                   	pop    eax
c0018c51:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c56:	68 c2 80 02 c0       	push   0xc00280c2
c0018c5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c61:	e8 54 7c ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018c66:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c6b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c71:	e8 3c ca 00 00       	call   c00256b2 <CPU::readCR4()>
c0018c76:	5a                   	pop    edx
c0018c77:	59                   	pop    ecx
c0018c78:	50                   	push   eax
c0018c79:	53                   	push   ebx
c0018c7a:	e8 61 7c ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0018c7f:	5b                   	pop    ebx
c0018c80:	58                   	pop    eax
c0018c81:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c86:	68 cc 80 02 c0       	push   0xc00280cc
c0018c8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c91:	e8 24 7c ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018c96:	5a                   	pop    edx
c0018c97:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c9c:	59                   	pop    ecx
c0018c9d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018ca3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018ca6:	50                   	push   eax
c0018ca7:	e8 34 7c ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0018cac:	5b                   	pop    ebx
c0018cad:	58                   	pop    eax
c0018cae:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cb3:	68 e3 80 02 c0       	push   0xc00280e3
c0018cb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cbe:	e8 f7 7b ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018cc3:	5a                   	pop    edx
c0018cc4:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cc9:	59                   	pop    ecx
c0018cca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cd0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018cd3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018cd6:	50                   	push   eax
c0018cd7:	e8 04 7c ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0018cdc:	5b                   	pop    ebx
c0018cdd:	58                   	pop    eax
c0018cde:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ce3:	68 e3 80 02 c0       	push   0xc00280e3
c0018ce8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cee:	e8 c7 7b ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0018cf3:	59                   	pop    ecx
c0018cf4:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cf9:	5b                   	pop    ebx
c0018cfa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018d00:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018d03:	8b 12                	mov    edx,DWORD PTR [edx]
c0018d05:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018d08:	50                   	push   eax
c0018d09:	e8 d2 7b ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0018d0e:	83 c4 10             	add    esp,0x10
c0018d11:	b2 fe                	mov    dl,0xfe
c0018d13:	e4 60                	in     al,0x60
c0018d15:	3c 1c                	cmp    al,0x1c
c0018d17:	74 04                	je     c0018d1d <Krnl::panic(char const*)+0x32a>
c0018d19:	3c 5a                	cmp    al,0x5a
c0018d1b:	75 f6                	jne    c0018d13 <Krnl::panic(char const*)+0x320>
c0018d1d:	e4 64                	in     al,0x64
c0018d1f:	a8 02                	test   al,0x2
c0018d21:	75 fa                	jne    c0018d1d <Krnl::panic(char const*)+0x32a>
c0018d23:	88 d0                	mov    al,dl
c0018d25:	e6 64                	out    0x64,al
c0018d27:	fa                   	cli    
c0018d28:	f4                   	hlt    
c0018d29:	eb e8                	jmp    c0018d13 <Krnl::panic(char const*)+0x320>

c0018d2b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018d2b:	55                   	push   ebp
c0018d2c:	57                   	push   edi
c0018d2d:	56                   	push   esi
c0018d2e:	53                   	push   ebx
c0018d2f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018d35:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018d3c:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018d3e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018d41:	80 fb 40             	cmp    bl,0x40
c0018d44:	75 1b                	jne    c0018d61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018d46:	8a 16                	mov    dl,BYTE PTR [esi]
c0018d48:	84 d2                	test   dl,dl
c0018d4a:	0f 84 f1 00 00 00    	je     c0018e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d50:	8d 46 01             	lea    eax,[esi+0x1]
c0018d53:	80 fa 3a             	cmp    dl,0x3a
c0018d56:	74 04                	je     c0018d5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018d58:	89 c6                	mov    esi,eax
c0018d5a:	eb ea                	jmp    c0018d46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018d5c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018d5f:	89 c6                	mov    esi,eax
c0018d61:	50                   	push   eax
c0018d62:	6a 40                	push   0x40
c0018d64:	6a 00                	push   0x0
c0018d66:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018d6a:	50                   	push   eax
c0018d6b:	e8 7c 79 fe ff       	call   c00006ec <memset>
c0018d70:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018d77:	31 c0                	xor    eax,eax
c0018d79:	83 c4 10             	add    esp,0x10
c0018d7c:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018d7e:	84 c9                	test   cl,cl
c0018d80:	0f 84 bb 00 00 00    	je     c0018e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d86:	3d c7 00 00 00       	cmp    eax,0xc7
c0018d8b:	0f 8f b0 00 00 00    	jg     c0018e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d91:	80 f9 0a             	cmp    cl,0xa
c0018d94:	0f 85 98 00 00 00    	jne    c0018e32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018d9a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018d9f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018da3:	a8 df                	test   al,0xdf
c0018da5:	0f 94 c1             	sete   cl
c0018da8:	3c 23                	cmp    al,0x23
c0018daa:	0f 94 c2             	sete   dl
c0018dad:	08 d1                	or     cl,dl
c0018daf:	75 4a                	jne    c0018dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018db1:	8d 50 f7             	lea    edx,[eax-0x9]
c0018db4:	80 fa 01             	cmp    dl,0x1
c0018db7:	76 42                	jbe    c0018dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018db9:	3c 5b                	cmp    al,0x5b
c0018dbb:	75 42                	jne    c0018dff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018dbd:	80 fb 40             	cmp    bl,0x40
c0018dc0:	75 39                	jne    c0018dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018dc2:	83 ec 0c             	sub    esp,0xc
c0018dc5:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018dc9:	52                   	push   edx
c0018dca:	e8 3a 79 fe ff       	call   c0000709 <strlen>
c0018dcf:	83 c4 10             	add    esp,0x10
c0018dd2:	83 f8 3f             	cmp    eax,0x3f
c0018dd5:	77 6a                	ja     c0018e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018dd7:	50                   	push   eax
c0018dd8:	50                   	push   eax
c0018dd9:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018ddd:	52                   	push   edx
c0018dde:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018de2:	52                   	push   edx
c0018de3:	e8 a3 79 fe ff       	call   c000078b <strcpy>
c0018de8:	58                   	pop    eax
c0018de9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018ded:	52                   	push   edx
c0018dee:	e8 16 79 fe ff       	call   c0000709 <strlen>
c0018df3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018df8:	83 c4 10             	add    esp,0x10
c0018dfb:	31 d2                	xor    edx,edx
c0018dfd:	eb 3a                	jmp    c0018e39 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018dff:	80 fb 40             	cmp    bl,0x40
c0018e02:	74 06                	je     c0018e0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018e04:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018e08:	eb 20                	jmp    c0018e2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018e0a:	50                   	push   eax
c0018e0b:	50                   	push   eax
c0018e0c:	55                   	push   ebp
c0018e0d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e11:	50                   	push   eax
c0018e12:	e8 c5 79 fe ff       	call   c00007dc <strcmp>
c0018e17:	83 c4 10             	add    esp,0x10
c0018e1a:	85 c0                	test   eax,eax
c0018e1c:	75 dd                	jne    c0018dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e1e:	eb e4                	jmp    c0018e04 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018e20:	8d 50 01             	lea    edx,[eax+0x1]
c0018e23:	80 f9 3d             	cmp    cl,0x3d
c0018e26:	74 1d                	je     c0018e45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018e28:	89 d0                	mov    eax,edx
c0018e2a:	8a 08                	mov    cl,BYTE PTR [eax]
c0018e2c:	84 c9                	test   cl,cl
c0018e2e:	75 f0                	jne    c0018e20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018e30:	eb 0f                	jmp    c0018e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e32:	8d 50 01             	lea    edx,[eax+0x1]
c0018e35:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018e39:	47                   	inc    edi
c0018e3a:	89 d0                	mov    eax,edx
c0018e3c:	e9 3b ff ff ff       	jmp    c0018d7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018e41:	31 c0                	xor    eax,eax
c0018e43:	eb 33                	jmp    c0018e78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018e45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018e49:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018e4c:	50                   	push   eax
c0018e4d:	50                   	push   eax
c0018e4e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018e52:	50                   	push   eax
c0018e53:	56                   	push   esi
c0018e54:	e8 83 79 fe ff       	call   c00007dc <strcmp>
c0018e59:	83 c4 10             	add    esp,0x10
c0018e5c:	85 c0                	test   eax,eax
c0018e5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e62:	75 97                	jne    c0018dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e64:	51                   	push   ecx
c0018e65:	51                   	push   ecx
c0018e66:	52                   	push   edx
c0018e67:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018e6e:	e8 18 79 fe ff       	call   c000078b <strcpy>
c0018e73:	83 c4 10             	add    esp,0x10
c0018e76:	b0 01                	mov    al,0x1
c0018e78:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018e7e:	5b                   	pop    ebx
c0018e7f:	5e                   	pop    esi
c0018e80:	5f                   	pop    edi
c0018e81:	5d                   	pop    ebp
c0018e82:	c3                   	ret    

c0018e83 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018e83:	57                   	push   edi
c0018e84:	56                   	push   esi
c0018e85:	53                   	push   ebx
c0018e86:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e8c:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018e93:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018e9a:	53                   	push   ebx
c0018e9b:	e8 69 78 fe ff       	call   c0000709 <strlen>
c0018ea0:	89 34 24             	mov    DWORD PTR [esp],esi
c0018ea3:	89 c7                	mov    edi,eax
c0018ea5:	e8 5f 78 fe ff       	call   c0000709 <strlen>
c0018eaa:	83 c4 10             	add    esp,0x10
c0018ead:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018eb1:	31 ff                	xor    edi,edi
c0018eb3:	3d ff 00 00 00       	cmp    eax,0xff
c0018eb8:	0f 87 18 01 00 00    	ja     c0018fd6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018ebe:	51                   	push   ecx
c0018ebf:	51                   	push   ecx
c0018ec0:	56                   	push   esi
c0018ec1:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018ec5:	56                   	push   esi
c0018ec6:	e8 c0 78 fe ff       	call   c000078b <strcpy>
c0018ecb:	58                   	pop    eax
c0018ecc:	5a                   	pop    edx
c0018ecd:	68 cc 85 02 c0       	push   0xc00285cc
c0018ed2:	56                   	push   esi
c0018ed3:	e8 6a 79 fe ff       	call   c0000842 <strcat>
c0018ed8:	59                   	pop    ecx
c0018ed9:	58                   	pop    eax
c0018eda:	53                   	push   ebx
c0018edb:	56                   	push   esi
c0018edc:	e8 61 79 fe ff       	call   c0000842 <strcat>
c0018ee1:	58                   	pop    eax
c0018ee2:	5a                   	pop    edx
c0018ee3:	68 fa 81 02 c0       	push   0xc00281fa
c0018ee8:	56                   	push   esi
c0018ee9:	e8 54 79 fe ff       	call   c0000842 <strcat>
c0018eee:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018ef5:	e8 6e 92 ff ff       	call   c0012168 <operator new(unsigned long)>
c0018efa:	83 c4 0c             	add    esp,0xc
c0018efd:	89 c3                	mov    ebx,eax
c0018eff:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c0018f05:	56                   	push   esi
c0018f06:	50                   	push   eax
c0018f07:	e8 7a 98 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c0018f0c:	59                   	pop    ecx
c0018f0d:	5e                   	pop    esi
c0018f0e:	6a 01                	push   0x1
c0018f10:	53                   	push   ebx
c0018f11:	e8 d4 98 ff ff       	call   c00127ea <File::open(FileOpenMode)>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	85 c0                	test   eax,eax
c0018f1b:	74 08                	je     c0018f25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0018f1d:	83 ec 0c             	sub    esp,0xc
c0018f20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f22:	53                   	push   ebx
c0018f23:	eb 2e                	jmp    c0018f53 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018f25:	52                   	push   edx
c0018f26:	8d 44 24 07          	lea    eax,[esp+0x7]
c0018f2a:	50                   	push   eax
c0018f2b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f2f:	50                   	push   eax
c0018f30:	53                   	push   ebx
c0018f31:	e8 60 9b ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c0018f36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f3a:	83 c4 10             	add    esp,0x10
c0018f3d:	89 c1                	mov    ecx,eax
c0018f3f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018f43:	75 13                	jne    c0018f58 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018f45:	83 ec 0c             	sub    esp,0xc
c0018f48:	53                   	push   ebx
c0018f49:	e8 fa 98 ff ff       	call   c0012848 <File::close()>
c0018f4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f56:	eb 7b                	jmp    c0018fd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018f58:	83 ec 0c             	sub    esp,0xc
c0018f5b:	50                   	push   eax
c0018f5c:	e8 05 62 ff ff       	call   c000f166 <malloc>
c0018f61:	89 c6                	mov    esi,eax
c0018f63:	58                   	pop    eax
c0018f64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f66:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f6a:	52                   	push   edx
c0018f6b:	56                   	push   esi
c0018f6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f74:	53                   	push   ebx
c0018f75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018f78:	83 c4 20             	add    esp,0x20
c0018f7b:	85 c0                	test   eax,eax
c0018f7d:	75 0a                	jne    c0018f89 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f83:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f87:	74 18                	je     c0018fa1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0018f89:	83 ec 0c             	sub    esp,0xc
c0018f8c:	31 ff                	xor    edi,edi
c0018f8e:	53                   	push   ebx
c0018f8f:	e8 b4 98 ff ff       	call   c0012848 <File::close()>
c0018f94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f9c:	83 c4 10             	add    esp,0x10
c0018f9f:	eb 35                	jmp    c0018fd6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018fa1:	83 ec 0c             	sub    esp,0xc
c0018fa4:	53                   	push   ebx
c0018fa5:	e8 9e 98 ff ff       	call   c0012848 <File::close()>
c0018faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018fac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018faf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018fb2:	83 c4 0c             	add    esp,0xc
c0018fb5:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fbc:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fc3:	56                   	push   esi
c0018fc4:	e8 62 fd ff ff       	call   c0018d2b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0018fc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0018fcc:	89 c7                	mov    edi,eax
c0018fce:	e8 a3 61 ff ff       	call   c000f176 <free>
c0018fd3:	83 c4 10             	add    esp,0x10
c0018fd6:	81 c4 10 01 00 00    	add    esp,0x110
c0018fdc:	89 f8                	mov    eax,edi
c0018fde:	5b                   	pop    ebx
c0018fdf:	5e                   	pop    esi
c0018fe0:	5f                   	pop    edi
c0018fe1:	c3                   	ret    

c0018fe2 <Reg::getLine(char*, char*, char*)>:
c0018fe2:	57                   	push   edi
c0018fe3:	56                   	push   esi
c0018fe4:	53                   	push   ebx
c0018fe5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fe9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018ff1:	57                   	push   edi
c0018ff2:	56                   	push   esi
c0018ff3:	53                   	push   ebx
c0018ff4:	68 ff 81 02 c0       	push   0xc00281ff
c0018ff9:	e8 85 fe ff ff       	call   c0018e83 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018ffe:	83 c4 10             	add    esp,0x10
c0019001:	84 c0                	test   al,al
c0019003:	75 10                	jne    c0019015 <Reg::getLine(char*, char*, char*)+0x33>
c0019005:	57                   	push   edi
c0019006:	56                   	push   esi
c0019007:	53                   	push   ebx
c0019008:	68 24 82 02 c0       	push   0xc0028224
c001900d:	e8 71 fe ff ff       	call   c0018e83 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019012:	83 c4 10             	add    esp,0x10
c0019015:	5b                   	pop    ebx
c0019016:	5e                   	pop    esi
c0019017:	5f                   	pop    edi
c0019018:	c3                   	ret    

c0019019 <Reg::readInt(char*, char*, int*)>:
c0019019:	55                   	push   ebp
c001901a:	57                   	push   edi
c001901b:	56                   	push   esi
c001901c:	53                   	push   ebx
c001901d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019023:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019027:	57                   	push   edi
c0019028:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001902f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019036:	e8 a7 ff ff ff       	call   c0018fe2 <Reg::getLine(char*, char*, char*)>
c001903b:	83 c4 10             	add    esp,0x10
c001903e:	84 c0                	test   al,al
c0019040:	0f 84 b3 00 00 00    	je     c00190f9 <Reg::readInt(char*, char*, int*)+0xe0>
c0019046:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001904a:	80 fa 2b             	cmp    dl,0x2b
c001904d:	74 0c                	je     c001905b <Reg::readInt(char*, char*, int*)+0x42>
c001904f:	80 fa 2d             	cmp    dl,0x2d
c0019052:	75 0e                	jne    c0019062 <Reg::readInt(char*, char*, int*)+0x49>
c0019054:	ba 01 00 00 00       	mov    edx,0x1
c0019059:	eb 0b                	jmp    c0019066 <Reg::readInt(char*, char*, int*)+0x4d>
c001905b:	ba 01 00 00 00       	mov    edx,0x1
c0019060:	eb 02                	jmp    c0019064 <Reg::readInt(char*, char*, int*)+0x4b>
c0019062:	31 d2                	xor    edx,edx
c0019064:	31 c0                	xor    eax,eax
c0019066:	be 0a 00 00 00       	mov    esi,0xa
c001906b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019070:	75 20                	jne    c0019092 <Reg::readInt(char*, char*, int*)+0x79>
c0019072:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019076:	80 f9 78             	cmp    cl,0x78
c0019079:	75 0a                	jne    c0019085 <Reg::readInt(char*, char*, int*)+0x6c>
c001907b:	83 c2 02             	add    edx,0x2
c001907e:	be 10 00 00 00       	mov    esi,0x10
c0019083:	eb 0d                	jmp    c0019092 <Reg::readInt(char*, char*, int*)+0x79>
c0019085:	80 f9 62             	cmp    cl,0x62
c0019088:	75 08                	jne    c0019092 <Reg::readInt(char*, char*, int*)+0x79>
c001908a:	83 c2 02             	add    edx,0x2
c001908d:	be 02 00 00 00       	mov    esi,0x2
c0019092:	01 d7                	add    edi,edx
c0019094:	31 d2                	xor    edx,edx
c0019096:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019098:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001909c:	80 fb 0d             	cmp    bl,0xd
c001909f:	0f 94 c3             	sete   bl
c00190a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00190a7:	0f 94 c1             	sete   cl
c00190aa:	08 cb                	or     bl,cl
c00190ac:	75 3a                	jne    c00190e8 <Reg::readInt(char*, char*, int*)+0xcf>
c00190ae:	0f af d6             	imul   edx,esi
c00190b1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00190b6:	83 fe 10             	cmp    esi,0x10
c00190b9:	75 26                	jne    c00190e1 <Reg::readInt(char*, char*, int*)+0xc8>
c00190bb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190bf:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00190c2:	89 e9                	mov    ecx,ebp
c00190c4:	80 f9 05             	cmp    cl,0x5
c00190c7:	77 06                	ja     c00190cf <Reg::readInt(char*, char*, int*)+0xb6>
c00190c9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00190cd:	eb 16                	jmp    c00190e5 <Reg::readInt(char*, char*, int*)+0xcc>
c00190cf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190d3:	83 e9 61             	sub    ecx,0x61
c00190d6:	80 f9 05             	cmp    cl,0x5
c00190d9:	77 06                	ja     c00190e1 <Reg::readInt(char*, char*, int*)+0xc8>
c00190db:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00190df:	eb 04                	jmp    c00190e5 <Reg::readInt(char*, char*, int*)+0xcc>
c00190e1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00190e5:	47                   	inc    edi
c00190e6:	eb ae                	jmp    c0019096 <Reg::readInt(char*, char*, int*)+0x7d>
c00190e8:	84 c0                	test   al,al
c00190ea:	74 02                	je     c00190ee <Reg::readInt(char*, char*, int*)+0xd5>
c00190ec:	f7 da                	neg    edx
c00190ee:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00190f5:	89 10                	mov    DWORD PTR [eax],edx
c00190f7:	88 d8                	mov    al,bl
c00190f9:	81 c4 ec 00 00 00    	add    esp,0xec
c00190ff:	5b                   	pop    ebx
c0019100:	5e                   	pop    esi
c0019101:	5f                   	pop    edi
c0019102:	5d                   	pop    ebp
c0019103:	c3                   	ret    

c0019104 <Reg::readString(char*, char*, char*, int)>:
c0019104:	57                   	push   edi
c0019105:	56                   	push   esi
c0019106:	53                   	push   ebx
c0019107:	81 ec d4 00 00 00    	sub    esp,0xd4
c001910d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019114:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019118:	57                   	push   edi
c0019119:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019120:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019127:	e8 b6 fe ff ff       	call   c0018fe2 <Reg::getLine(char*, char*, char*)>
c001912c:	83 c4 10             	add    esp,0x10
c001912f:	89 c6                	mov    esi,eax
c0019131:	84 c0                	test   al,al
c0019133:	74 44                	je     c0019179 <Reg::readString(char*, char*, char*, int)+0x75>
c0019135:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001913c:	31 c0                	xor    eax,eax
c001913e:	4a                   	dec    edx
c001913f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019142:	84 c9                	test   cl,cl
c0019144:	74 0f                	je     c0019155 <Reg::readString(char*, char*, char*, int)+0x51>
c0019146:	39 c2                	cmp    edx,eax
c0019148:	7e 0b                	jle    c0019155 <Reg::readString(char*, char*, char*, int)+0x51>
c001914a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001914d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019152:	40                   	inc    eax
c0019153:	eb ea                	jmp    c001913f <Reg::readString(char*, char*, char*, int)+0x3b>
c0019155:	83 ec 0c             	sub    esp,0xc
c0019158:	53                   	push   ebx
c0019159:	e8 ab 75 fe ff       	call   c0000709 <strlen>
c001915e:	83 c4 10             	add    esp,0x10
c0019161:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019166:	75 11                	jne    c0019179 <Reg::readString(char*, char*, char*, int)+0x75>
c0019168:	83 ec 0c             	sub    esp,0xc
c001916b:	53                   	push   ebx
c001916c:	e8 98 75 fe ff       	call   c0000709 <strlen>
c0019171:	83 c4 10             	add    esp,0x10
c0019174:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019179:	81 c4 d0 00 00 00    	add    esp,0xd0
c001917f:	89 f0                	mov    eax,esi
c0019181:	5b                   	pop    ebx
c0019182:	5e                   	pop    esi
c0019183:	5f                   	pop    edi
c0019184:	c3                   	ret    

c0019185 <Reg::readBool(char*, char*, bool*)>:
c0019185:	83 ec 20             	sub    esp,0x20
c0019188:	8d 44 24 10          	lea    eax,[esp+0x10]
c001918c:	50                   	push   eax
c001918d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019195:	e8 7f fe ff ff       	call   c0019019 <Reg::readInt(char*, char*, int*)>
c001919a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001919f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00191a3:	0f 95 02             	setne  BYTE PTR [edx]
c00191a6:	83 c4 2c             	add    esp,0x2c
c00191a9:	c3                   	ret    

c00191aa <Reg::readBoolWithDefault(char*, char*, bool)>:
c00191aa:	53                   	push   ebx
c00191ab:	83 ec 1c             	sub    esp,0x1c
c00191ae:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00191b2:	8d 44 24 13          	lea    eax,[esp+0x13]
c00191b6:	50                   	push   eax
c00191b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191bf:	e8 c1 ff ff ff       	call   c0019185 <Reg::readBool(char*, char*, bool*)>
c00191c4:	83 c4 10             	add    esp,0x10
c00191c7:	84 c0                	test   al,al
c00191c9:	74 04                	je     c00191cf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00191cb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00191cf:	88 d8                	mov    al,bl
c00191d1:	83 c4 18             	add    esp,0x18
c00191d4:	5b                   	pop    ebx
c00191d5:	c3                   	ret    

c00191d6 <Reg::readIntWithDefault(char*, char*, int)>:
c00191d6:	53                   	push   ebx
c00191d7:	83 ec 1c             	sub    esp,0x1c
c00191da:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00191de:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191e2:	50                   	push   eax
c00191e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191eb:	e8 29 fe ff ff       	call   c0019019 <Reg::readInt(char*, char*, int*)>
c00191f0:	83 c4 10             	add    esp,0x10
c00191f3:	84 c0                	test   al,al
c00191f5:	74 04                	je     c00191fb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00191f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00191fb:	89 d8                	mov    eax,ebx
c00191fd:	83 c4 18             	add    esp,0x18
c0019200:	5b                   	pop    ebx
c0019201:	c3                   	ret    

c0019202 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0019202:	56                   	push   esi
c0019203:	53                   	push   ebx
c0019204:	51                   	push   ecx
c0019205:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019209:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001920d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019211:	56                   	push   esi
c0019212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001921a:	e8 e5 fe ff ff       	call   c0019104 <Reg::readString(char*, char*, char*, int)>
c001921f:	83 c4 10             	add    esp,0x10
c0019222:	84 c0                	test   al,al
c0019224:	74 02                	je     c0019228 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0019226:	89 f3                	mov    ebx,esi
c0019228:	89 d8                	mov    eax,ebx
c001922a:	5a                   	pop    edx
c001922b:	5b                   	pop    ebx
c001922c:	5e                   	pop    esi
c001922d:	c3                   	ret    

c001922e <Sys::exit(regs*)>:
c001922e:	83 ec 18             	sub    esp,0x18
c0019231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019235:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019238:	e8 1f 31 00 00       	call   c001c35c <terminateTask(int)>
c001923d:	83 c8 ff             	or     eax,0xffffffff
c0019240:	83 c4 1c             	add    esp,0x1c
c0019243:	89 c2                	mov    edx,eax
c0019245:	c3                   	ret    

c0019246 <Sys::loadDLL(regs*)>:
c0019246:	56                   	push   esi
c0019247:	53                   	push   ebx
c0019248:	31 d2                	xor    edx,edx
c001924a:	51                   	push   ecx
c001924b:	b8 01 00 00 00       	mov    eax,0x1
c0019250:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019254:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019258:	74 7d                	je     c00192d7 <Sys::loadDLL(regs*)+0x91>
c001925a:	83 ec 0c             	sub    esp,0xc
c001925d:	68 14 01 00 00       	push   0x114
c0019262:	e8 01 8f ff ff       	call   c0012168 <operator new(unsigned long)>
c0019267:	83 c4 0c             	add    esp,0xc
c001926a:	89 c3                	mov    ebx,eax
c001926c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019271:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019274:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019277:	53                   	push   ebx
c0019278:	e8 09 95 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001927d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019280:	e8 d3 97 ff ff       	call   c0012a58 <File::exists()>
c0019285:	83 c4 10             	add    esp,0x10
c0019288:	84 c0                	test   al,al
c001928a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001928c:	75 11                	jne    c001929f <Sys::loadDLL(regs*)+0x59>
c001928e:	83 ec 0c             	sub    esp,0xc
c0019291:	53                   	push   ebx
c0019292:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	b8 03 00 00 00       	mov    eax,0x3
c001929d:	eb 36                	jmp    c00192d5 <Sys::loadDLL(regs*)+0x8f>
c001929f:	83 ec 0c             	sub    esp,0xc
c00192a2:	53                   	push   ebx
c00192a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00192a6:	58                   	pop    eax
c00192a7:	5a                   	pop    edx
c00192a8:	6a 00                	push   0x0
c00192aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00192ad:	e8 c4 20 00 00       	call   c001b376 <Thr::loadDLL(char const*, bool)>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	89 c1                	mov    ecx,eax
c00192b7:	31 d2                	xor    edx,edx
c00192b9:	b8 04 00 00 00       	mov    eax,0x4
c00192be:	85 c9                	test   ecx,ecx
c00192c0:	74 15                	je     c00192d7 <Sys::loadDLL(regs*)+0x91>
c00192c2:	53                   	push   ebx
c00192c3:	53                   	push   ebx
c00192c4:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c00192ca:	51                   	push   ecx
c00192cb:	e8 6c 22 00 00       	call   c001b53c <Thr::executeDLL(unsigned long, void*)>
c00192d0:	83 c4 10             	add    esp,0x10
c00192d3:	31 c0                	xor    eax,eax
c00192d5:	31 d2                	xor    edx,edx
c00192d7:	59                   	pop    ecx
c00192d8:	5b                   	pop    ebx
c00192d9:	5e                   	pop    esi
c00192da:	c3                   	ret    

c00192db <Sys::read(regs*)>:
c00192db:	57                   	push   edi
c00192dc:	56                   	push   esi
c00192dd:	53                   	push   ebx
c00192de:	83 ec 10             	sub    esp,0x10
c00192e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00192e8:	83 f8 02             	cmp    eax,0x2
c00192eb:	77 10                	ja     c00192fd <Sys::read(regs*)+0x22>
c00192ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00192f5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00192fb:	eb 0e                	jmp    c001930b <Sys::read(regs*)+0x30>
c00192fd:	83 ec 0c             	sub    esp,0xc
c0019300:	50                   	push   eax
c0019301:	e8 29 7e ff ff       	call   c001112f <getFromFileDescriptor(int)>
c0019306:	83 c4 10             	add    esp,0x10
c0019309:	89 c1                	mov    ecx,eax
c001930b:	83 c8 ff             	or     eax,0xffffffff
c001930e:	85 c9                	test   ecx,ecx
c0019310:	89 c2                	mov    edx,eax
c0019312:	74 28                	je     c001933c <Sys::read(regs*)+0x61>
c0019314:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001931c:	31 ff                	xor    edi,edi
c001931e:	83 ec 0c             	sub    esp,0xc
c0019321:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019323:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019327:	52                   	push   edx
c0019328:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001932b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001932e:	57                   	push   edi
c001932f:	56                   	push   esi
c0019330:	51                   	push   ecx
c0019331:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019334:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019338:	83 c4 20             	add    esp,0x20
c001933b:	99                   	cdq    
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	5b                   	pop    ebx
c0019340:	5e                   	pop    esi
c0019341:	5f                   	pop    edi
c0019342:	c3                   	ret    

c0019343 <Sys::sbrk(regs*)>:
c0019343:	56                   	push   esi
c0019344:	53                   	push   ebx
c0019345:	50                   	push   eax
c0019346:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001934b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001934f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019352:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019355:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001935b:	85 db                	test   ebx,ebx
c001935d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019360:	74 02                	je     c0019364 <Sys::sbrk(regs*)+0x21>
c0019362:	79 06                	jns    c001936a <Sys::sbrk(regs*)+0x27>
c0019364:	89 f0                	mov    eax,esi
c0019366:	31 d2                	xor    edx,edx
c0019368:	eb 2a                	jmp    c0019394 <Sys::sbrk(regs*)+0x51>
c001936a:	83 c8 ff             	or     eax,0xffffffff
c001936d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019373:	89 c2                	mov    edx,eax
c0019375:	77 1d                	ja     c0019394 <Sys::sbrk(regs*)+0x51>
c0019377:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001937d:	50                   	push   eax
c001937e:	c1 ea 0c             	shr    edx,0xc
c0019381:	68 07 04 00 00       	push   0x407
c0019386:	52                   	push   edx
c0019387:	51                   	push   ecx
c0019388:	e8 cb 86 ff ff       	call   c0011a58 <VAS::allocatePages(int, int)>
c001938d:	89 f0                	mov    eax,esi
c001938f:	31 d2                	xor    edx,edx
c0019391:	83 c4 10             	add    esp,0x10
c0019394:	59                   	pop    ecx
c0019395:	5b                   	pop    ebx
c0019396:	5e                   	pop    esi
c0019397:	c3                   	ret    

c0019398 <Sys::write(regs*)>:
c0019398:	57                   	push   edi
c0019399:	56                   	push   esi
c001939a:	53                   	push   ebx
c001939b:	83 ec 10             	sub    esp,0x10
c001939e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00193a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00193a5:	83 f8 02             	cmp    eax,0x2
c00193a8:	77 10                	ja     c00193ba <Sys::write(regs*)+0x22>
c00193aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193b2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00193b8:	eb 0e                	jmp    c00193c8 <Sys::write(regs*)+0x30>
c00193ba:	83 ec 0c             	sub    esp,0xc
c00193bd:	50                   	push   eax
c00193be:	e8 6c 7d ff ff       	call   c001112f <getFromFileDescriptor(int)>
c00193c3:	83 c4 10             	add    esp,0x10
c00193c6:	89 c1                	mov    ecx,eax
c00193c8:	83 c8 ff             	or     eax,0xffffffff
c00193cb:	85 c9                	test   ecx,ecx
c00193cd:	89 c2                	mov    edx,eax
c00193cf:	74 28                	je     c00193f9 <Sys::write(regs*)+0x61>
c00193d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00193d9:	31 ff                	xor    edi,edi
c00193db:	83 ec 0c             	sub    esp,0xc
c00193de:	8b 01                	mov    eax,DWORD PTR [ecx]
c00193e0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00193e4:	52                   	push   edx
c00193e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00193e8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00193eb:	57                   	push   edi
c00193ec:	56                   	push   esi
c00193ed:	51                   	push   ecx
c00193ee:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00193f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193f5:	83 c4 20             	add    esp,0x20
c00193f8:	99                   	cdq    
c00193f9:	83 c4 10             	add    esp,0x10
c00193fc:	5b                   	pop    ebx
c00193fd:	5e                   	pop    esi
c00193fe:	5f                   	pop    edi
c00193ff:	c3                   	ret    

c0019400 <Sys::yield(regs*)>:
c0019400:	83 ec 0c             	sub    esp,0xc
c0019403:	e8 3e 25 00 00       	call   c001b946 <lockScheduler()>
c0019408:	e8 6d 28 00 00       	call   c001bc7a <schedule()>
c001940d:	e8 36 25 00 00       	call   c001b948 <unlockScheduler()>
c0019412:	31 c0                	xor    eax,eax
c0019414:	31 d2                	xor    edx,edx
c0019416:	83 c4 0c             	add    esp,0xc
c0019419:	c3                   	ret    

c001941a <sysCallGetPID(regs*)>:
c001941a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001941f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019422:	8b 00                	mov    eax,DWORD PTR [eax]
c0019424:	99                   	cdq    
c0019425:	c3                   	ret    

c0019426 <sysCallSeekDir(regs*)>:
c0019426:	31 c0                	xor    eax,eax
c0019428:	31 d2                	xor    edx,edx
c001942a:	c3                   	ret    

c001942b <sysCallTellDir(regs*)>:
c001942b:	31 c0                	xor    eax,eax
c001942d:	31 d2                	xor    edx,edx
c001942f:	c3                   	ret    

c0019430 <sysCallVerify(regs*)>:
c0019430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019434:	31 d2                	xor    edx,edx
c0019436:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019439:	c3                   	ret    

c001943a <sysCallFork(regs*)>:
c001943a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001943f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019444:	c3                   	ret    

c0019445 <sysCallExecve(regs*)>:
c0019445:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001944a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001944f:	c3                   	ret    

c0019450 <sysCallGetArgc(regs*)>:
c0019450:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019455:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019458:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001945e:	99                   	cdq    
c001945f:	c3                   	ret    

c0019460 <sysFormatDisk(regs*)>:
c0019460:	56                   	push   esi
c0019461:	53                   	push   ebx
c0019462:	53                   	push   ebx
c0019463:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019467:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c001946d:	eb 25                	jmp    c0019494 <sysFormatDisk(regs*)+0x34>
c001946f:	83 ec 0c             	sub    esp,0xc
c0019472:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019475:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019477:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001947a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001947d:	50                   	push   eax
c001947e:	ff 34 85 00 aa 02 c0 	push   DWORD PTR [eax*4-0x3ffd5600]
c0019485:	53                   	push   ebx
c0019486:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019489:	83 c4 20             	add    esp,0x20
c001948c:	83 f8 08             	cmp    eax,0x8
c001948f:	75 12                	jne    c00194a3 <sysFormatDisk(regs*)+0x43>
c0019491:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019494:	85 db                	test   ebx,ebx
c0019496:	75 d7                	jne    c001946f <sysFormatDisk(regs*)+0xf>
c0019498:	59                   	pop    ecx
c0019499:	b8 03 00 00 00       	mov    eax,0x3
c001949e:	31 d2                	xor    edx,edx
c00194a0:	5b                   	pop    ebx
c00194a1:	5e                   	pop    esi
c00194a2:	c3                   	ret    
c00194a3:	85 c0                	test   eax,eax
c00194a5:	74 1b                	je     c00194c2 <sysFormatDisk(regs*)+0x62>
c00194a7:	83 f8 09             	cmp    eax,0x9
c00194aa:	74 0b                	je     c00194b7 <sysFormatDisk(regs*)+0x57>
c00194ac:	59                   	pop    ecx
c00194ad:	b8 02 00 00 00       	mov    eax,0x2
c00194b2:	31 d2                	xor    edx,edx
c00194b4:	5b                   	pop    ebx
c00194b5:	5e                   	pop    esi
c00194b6:	c3                   	ret    
c00194b7:	59                   	pop    ecx
c00194b8:	b8 01 00 00 00       	mov    eax,0x1
c00194bd:	31 d2                	xor    edx,edx
c00194bf:	5b                   	pop    ebx
c00194c0:	5e                   	pop    esi
c00194c1:	c3                   	ret    
c00194c2:	59                   	pop    ecx
c00194c3:	31 c0                	xor    eax,eax
c00194c5:	31 d2                	xor    edx,edx
c00194c7:	5b                   	pop    ebx
c00194c8:	5e                   	pop    esi
c00194c9:	c3                   	ret    

c00194ca <sysSetDiskVolumeLabel(regs*)>:
c00194ca:	56                   	push   esi
c00194cb:	53                   	push   ebx
c00194cc:	53                   	push   ebx
c00194cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194d1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00194d4:	83 f8 19             	cmp    eax,0x19
c00194d7:	77 29                	ja     c0019502 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194d9:	8b 0c 85 00 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5600]
c00194e0:	85 c9                	test   ecx,ecx
c00194e2:	74 1e                	je     c0019502 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194e4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00194e7:	85 d2                	test   edx,edx
c00194e9:	74 17                	je     c0019502 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194eb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00194f1:	8b 33                	mov    esi,DWORD PTR [ebx]
c00194f3:	52                   	push   edx
c00194f4:	50                   	push   eax
c00194f5:	51                   	push   ecx
c00194f6:	53                   	push   ebx
c00194f7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00194fa:	83 c4 10             	add    esp,0x10
c00194fd:	99                   	cdq    
c00194fe:	59                   	pop    ecx
c00194ff:	5b                   	pop    ebx
c0019500:	5e                   	pop    esi
c0019501:	c3                   	ret    
c0019502:	59                   	pop    ecx
c0019503:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019508:	ba ff ff ff ff       	mov    edx,0xffffffff
c001950d:	5b                   	pop    ebx
c001950e:	5e                   	pop    esi
c001950f:	c3                   	ret    

c0019510 <sysGetDiskVolumeLabel(regs*)>:
c0019510:	57                   	push   edi
c0019511:	56                   	push   esi
c0019512:	53                   	push   ebx
c0019513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019517:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001951a:	83 fa 19             	cmp    edx,0x19
c001951d:	77 34                	ja     c0019553 <sysGetDiskVolumeLabel(regs*)+0x43>
c001951f:	8b 0c 95 00 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5600]
c0019526:	85 c9                	test   ecx,ecx
c0019528:	74 29                	je     c0019553 <sysGetDiskVolumeLabel(regs*)+0x43>
c001952a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001952d:	85 db                	test   ebx,ebx
c001952f:	74 22                	je     c0019553 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019531:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019534:	85 c0                	test   eax,eax
c0019536:	74 1b                	je     c0019553 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019538:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001953e:	83 ec 0c             	sub    esp,0xc
c0019541:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019543:	50                   	push   eax
c0019544:	53                   	push   ebx
c0019545:	52                   	push   edx
c0019546:	51                   	push   ecx
c0019547:	56                   	push   esi
c0019548:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001954b:	83 c4 20             	add    esp,0x20
c001954e:	99                   	cdq    
c001954f:	5b                   	pop    ebx
c0019550:	5e                   	pop    esi
c0019551:	5f                   	pop    edi
c0019552:	c3                   	ret    
c0019553:	5b                   	pop    ebx
c0019554:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019559:	ba ff ff ff ff       	mov    edx,0xffffffff
c001955e:	5e                   	pop    esi
c001955f:	5f                   	pop    edi
c0019560:	c3                   	ret    

c0019561 <sysShutdown(regs*)>:
c0019561:	83 ec 0c             	sub    esp,0xc
c0019564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019568:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001956b:	85 c0                	test   eax,eax
c001956d:	74 18                	je     c0019587 <sysShutdown(regs*)+0x26>
c001956f:	83 f8 01             	cmp    eax,0x1
c0019572:	74 38                	je     c00195ac <sysShutdown(regs*)+0x4b>
c0019574:	83 f8 02             	cmp    eax,0x2
c0019577:	74 24                	je     c001959d <sysShutdown(regs*)+0x3c>
c0019579:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001957e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019583:	83 c4 0c             	add    esp,0xc
c0019586:	c3                   	ret    
c0019587:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001958c:	8b 10                	mov    edx,DWORD PTR [eax]
c001958e:	6a 00                	push   0x0
c0019590:	6a 00                	push   0x0
c0019592:	6a 00                	push   0x0
c0019594:	50                   	push   eax
c0019595:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019598:	83 c4 10             	add    esp,0x10
c001959b:	eb dc                	jmp    c0019579 <sysShutdown(regs*)+0x18>
c001959d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00195a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00195a4:	6a 00                	push   0x0
c00195a6:	6a 00                	push   0x0
c00195a8:	6a 01                	push   0x1
c00195aa:	eb e8                	jmp    c0019594 <sysShutdown(regs*)+0x33>
c00195ac:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c00195b1:	85 c0                	test   eax,eax
c00195b3:	74 02                	je     c00195b7 <sysShutdown(regs*)+0x56>
c00195b5:	ff d0                	call   eax
c00195b7:	31 c0                	xor    eax,eax
c00195b9:	31 d2                	xor    edx,edx
c00195bb:	83 c4 0c             	add    esp,0xc
c00195be:	c3                   	ret    

c00195bf <sysCallGetCwd(regs*)>:
c00195bf:	83 ec 10             	sub    esp,0x10
c00195c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195c6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00195c9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195d4:	e8 1e 95 ff ff       	call   c0012af7 <getcwd(Process*, char*, int)>
c00195d9:	83 c4 1c             	add    esp,0x1c
c00195dc:	99                   	cdq    
c00195dd:	c3                   	ret    

c00195de <sysCallSetCwd(regs*)>:
c00195de:	83 ec 14             	sub    esp,0x14
c00195e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195e5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195ed:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195f0:	e8 2c 95 ff ff       	call   c0012b21 <setcwd(Process*, char*)>
c00195f5:	83 c4 1c             	add    esp,0x1c
c00195f8:	99                   	cdq    
c00195f9:	c3                   	ret    

c00195fa <sysCallRealpath(regs*)>:
c00195fa:	83 ec 0c             	sub    esp,0xc
c00195fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019601:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0019604:	85 d2                	test   edx,edx
c0019606:	74 07                	je     c001960f <sysCallRealpath(regs*)+0x15>
c0019608:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001960b:	85 c0                	test   eax,eax
c001960d:	75 0b                	jne    c001961a <sysCallRealpath(regs*)+0x20>
c001960f:	b8 01 00 00 00       	mov    eax,0x1
c0019614:	31 d2                	xor    edx,edx
c0019616:	83 c4 0c             	add    esp,0xc
c0019619:	c3                   	ret    
c001961a:	51                   	push   ecx
c001961b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019621:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019624:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001962a:	51                   	push   ecx
c001962b:	52                   	push   edx
c001962c:	50                   	push   eax
c001962d:	e8 aa 8f ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c0019632:	83 c4 10             	add    esp,0x10
c0019635:	31 c0                	xor    eax,eax
c0019637:	31 d2                	xor    edx,edx
c0019639:	83 c4 0c             	add    esp,0xc
c001963c:	c3                   	ret    

c001963d <sysCallReadDir(regs*)>:
c001963d:	53                   	push   ebx
c001963e:	83 ec 18             	sub    esp,0x18
c0019641:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019645:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019648:	83 f8 02             	cmp    eax,0x2
c001964b:	76 53                	jbe    c00196a0 <sysCallReadDir(regs*)+0x63>
c001964d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019650:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019656:	77 4f                	ja     c00196a7 <sysCallReadDir(regs*)+0x6a>
c0019658:	83 ec 0c             	sub    esp,0xc
c001965b:	50                   	push   eax
c001965c:	e8 ce 7a ff ff       	call   c001112f <getFromFileDescriptor(int)>
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	85 c0                	test   eax,eax
c0019666:	74 50                	je     c00196b8 <sysCallReadDir(regs*)+0x7b>
c0019668:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019670:	83 ec 0c             	sub    esp,0xc
c0019673:	8b 10                	mov    edx,DWORD PTR [eax]
c0019675:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019679:	51                   	push   ecx
c001967a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001967d:	6a 00                	push   0x0
c001967f:	68 10 01 00 00       	push   0x110
c0019684:	50                   	push   eax
c0019685:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019688:	83 c4 20             	add    esp,0x20
c001968b:	85 c0                	test   eax,eax
c001968d:	74 38                	je     c00196c7 <sysCallReadDir(regs*)+0x8a>
c001968f:	83 f8 07             	cmp    eax,0x7
c0019692:	74 0c                	je     c00196a0 <sysCallReadDir(regs*)+0x63>
c0019694:	b8 02 00 00 00       	mov    eax,0x2
c0019699:	31 d2                	xor    edx,edx
c001969b:	83 c4 18             	add    esp,0x18
c001969e:	5b                   	pop    ebx
c001969f:	c3                   	ret    
c00196a0:	b8 01 00 00 00       	mov    eax,0x1
c00196a5:	eb f2                	jmp    c0019699 <sysCallReadDir(regs*)+0x5c>
c00196a7:	83 ec 08             	sub    esp,0x8
c00196aa:	52                   	push   edx
c00196ab:	68 40 82 02 c0       	push   0xc0028240
c00196b0:	e8 a2 8b ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00196b5:	83 c4 10             	add    esp,0x10
c00196b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00196bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00196c2:	83 c4 18             	add    esp,0x18
c00196c5:	5b                   	pop    ebx
c00196c6:	c3                   	ret    
c00196c7:	31 c0                	xor    eax,eax
c00196c9:	eb ce                	jmp    c0019699 <sysCallReadDir(regs*)+0x5c>

c00196cb <sysCallIsATTY(regs*)>:
c00196cb:	83 ec 0c             	sub    esp,0xc
c00196ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196d2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00196d5:	83 f8 02             	cmp    eax,0x2
c00196d8:	76 07                	jbe    c00196e1 <sysCallIsATTY(regs*)+0x16>
c00196da:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00196df:	75 26                	jne    c0019707 <sysCallIsATTY(regs*)+0x3c>
c00196e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196e9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00196ef:	85 c0                	test   eax,eax
c00196f1:	74 24                	je     c0019717 <sysCallIsATTY(regs*)+0x4c>
c00196f3:	83 ec 0c             	sub    esp,0xc
c00196f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00196f8:	50                   	push   eax
c00196f9:	ff 12                	call   DWORD PTR [edx]
c00196fb:	31 d2                	xor    edx,edx
c00196fd:	0f b6 c0             	movzx  eax,al
c0019700:	83 c4 10             	add    esp,0x10
c0019703:	83 c4 0c             	add    esp,0xc
c0019706:	c3                   	ret    
c0019707:	83 ec 0c             	sub    esp,0xc
c001970a:	50                   	push   eax
c001970b:	e8 1f 7a ff ff       	call   c001112f <getFromFileDescriptor(int)>
c0019710:	83 c4 10             	add    esp,0x10
c0019713:	85 c0                	test   eax,eax
c0019715:	75 dc                	jne    c00196f3 <sysCallIsATTY(regs*)+0x28>
c0019717:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001971c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019721:	83 c4 0c             	add    esp,0xc
c0019724:	c3                   	ret    

c0019725 <sysCallSeek(regs*)>:
c0019725:	53                   	push   ebx
c0019726:	83 ec 08             	sub    esp,0x8
c0019729:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001972d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019730:	83 f8 02             	cmp    eax,0x2
c0019733:	76 4a                	jbe    c001977f <sysCallSeek(regs*)+0x5a>
c0019735:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001973a:	77 32                	ja     c001976e <sysCallSeek(regs*)+0x49>
c001973c:	83 ec 0c             	sub    esp,0xc
c001973f:	50                   	push   eax
c0019740:	e8 ea 79 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c0019745:	83 c4 0c             	add    esp,0xc
c0019748:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001974b:	31 db                	xor    ebx,ebx
c001974d:	53                   	push   ebx
c001974e:	51                   	push   ecx
c001974f:	50                   	push   eax
c0019750:	e8 53 91 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c0019755:	83 c4 10             	add    esp,0x10
c0019758:	85 c0                	test   eax,eax
c001975a:	0f 95 c0             	setne  al
c001975d:	31 d2                	xor    edx,edx
c001975f:	0f b6 c0             	movzx  eax,al
c0019762:	f7 d8                	neg    eax
c0019764:	83 d2 00             	adc    edx,0x0
c0019767:	83 c4 08             	add    esp,0x8
c001976a:	f7 da                	neg    edx
c001976c:	5b                   	pop    ebx
c001976d:	c3                   	ret    
c001976e:	83 ec 08             	sub    esp,0x8
c0019771:	50                   	push   eax
c0019772:	68 fc 82 02 c0       	push   0xc00282fc
c0019777:	e8 db 8a ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019784:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019789:	83 c4 08             	add    esp,0x8
c001978c:	5b                   	pop    ebx
c001978d:	c3                   	ret    

c001978e <sysCallTell(regs*)>:
c001978e:	53                   	push   ebx
c001978f:	83 ec 08             	sub    esp,0x8
c0019792:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019796:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019799:	83 f8 02             	cmp    eax,0x2
c001979c:	76 5e                	jbe    c00197fc <sysCallTell(regs*)+0x6e>
c001979e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00197a3:	77 2d                	ja     c00197d2 <sysCallTell(regs*)+0x44>
c00197a5:	83 ec 0c             	sub    esp,0xc
c00197a8:	50                   	push   eax
c00197a9:	e8 81 79 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c00197ae:	5a                   	pop    edx
c00197af:	59                   	pop    ecx
c00197b0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00197b3:	50                   	push   eax
c00197b4:	e8 45 91 ff ff       	call   c00128fe <File::tell(unsigned long long*)>
c00197b9:	83 c4 10             	add    esp,0x10
c00197bc:	85 c0                	test   eax,eax
c00197be:	0f 95 c0             	setne  al
c00197c1:	31 d2                	xor    edx,edx
c00197c3:	0f b6 c0             	movzx  eax,al
c00197c6:	f7 d8                	neg    eax
c00197c8:	83 d2 00             	adc    edx,0x0
c00197cb:	83 c4 08             	add    esp,0x8
c00197ce:	f7 da                	neg    edx
c00197d0:	5b                   	pop    ebx
c00197d1:	c3                   	ret    
c00197d2:	83 ec 08             	sub    esp,0x8
c00197d5:	50                   	push   eax
c00197d6:	68 16 83 02 c0       	push   0xc0028316
c00197db:	e8 77 8a ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00197e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00197ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00197f3:	31 d2                	xor    edx,edx
c00197f5:	31 c0                	xor    eax,eax
c00197f7:	83 c4 08             	add    esp,0x8
c00197fa:	5b                   	pop    ebx
c00197fb:	c3                   	ret    
c00197fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019801:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019806:	83 c4 08             	add    esp,0x8
c0019809:	5b                   	pop    ebx
c001980a:	c3                   	ret    

c001980b <sysCallSizeFromFilename(regs*)>:
c001980b:	57                   	push   edi
c001980c:	56                   	push   esi
c001980d:	53                   	push   ebx
c001980e:	83 ec 10             	sub    esp,0x10
c0019811:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019815:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0019818:	83 fb 02             	cmp    ebx,0x2
c001981b:	0f 86 8a 00 00 00    	jbe    c00198ab <sysCallSizeFromFilename(regs*)+0xa0>
c0019821:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0019827:	77 56                	ja     c001987f <sysCallSizeFromFilename(regs*)+0x74>
c0019829:	83 ec 0c             	sub    esp,0xc
c001982c:	68 14 01 00 00       	push   0x114
c0019831:	e8 32 89 ff ff       	call   c0012168 <operator new(unsigned long)>
c0019836:	83 c4 0c             	add    esp,0xc
c0019839:	89 c7                	mov    edi,eax
c001983b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019840:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019843:	53                   	push   ebx
c0019844:	57                   	push   edi
c0019845:	e8 3c 8f ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001984a:	83 c4 0c             	add    esp,0xc
c001984d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019851:	50                   	push   eax
c0019852:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019855:	57                   	push   edi
c0019856:	e8 3b 92 ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c001985b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001985e:	89 c3                	mov    ebx,eax
c0019860:	8b 07                	mov    eax,DWORD PTR [edi]
c0019862:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019865:	83 c4 10             	add    esp,0x10
c0019868:	31 c0                	xor    eax,eax
c001986a:	85 db                	test   ebx,ebx
c001986c:	0f 95 c0             	setne  al
c001986f:	31 d2                	xor    edx,edx
c0019871:	f7 d8                	neg    eax
c0019873:	83 d2 00             	adc    edx,0x0
c0019876:	83 c4 10             	add    esp,0x10
c0019879:	f7 da                	neg    edx
c001987b:	5b                   	pop    ebx
c001987c:	5e                   	pop    esi
c001987d:	5f                   	pop    edi
c001987e:	c3                   	ret    
c001987f:	83 ec 08             	sub    esp,0x8
c0019882:	53                   	push   ebx
c0019883:	68 30 83 02 c0       	push   0xc0028330
c0019888:	e8 ca 89 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001988d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019890:	83 c4 10             	add    esp,0x10
c0019893:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019899:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00198a0:	31 d2                	xor    edx,edx
c00198a2:	83 c4 10             	add    esp,0x10
c00198a5:	31 c0                	xor    eax,eax
c00198a7:	5b                   	pop    ebx
c00198a8:	5e                   	pop    esi
c00198a9:	5f                   	pop    edi
c00198aa:	c3                   	ret    
c00198ab:	83 c4 10             	add    esp,0x10
c00198ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00198b3:	5b                   	pop    ebx
c00198b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00198b9:	5e                   	pop    esi
c00198ba:	5f                   	pop    edi
c00198bb:	c3                   	ret    

c00198bc <sysCallSize(regs*)>:
c00198bc:	53                   	push   ebx
c00198bd:	83 ec 18             	sub    esp,0x18
c00198c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00198c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00198c7:	83 f8 02             	cmp    eax,0x2
c00198ca:	76 64                	jbe    c0019930 <sysCallSize(regs*)+0x74>
c00198cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00198d1:	77 33                	ja     c0019906 <sysCallSize(regs*)+0x4a>
c00198d3:	83 ec 0c             	sub    esp,0xc
c00198d6:	50                   	push   eax
c00198d7:	e8 53 78 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c00198dc:	83 c4 0c             	add    esp,0xc
c00198df:	8d 54 24 13          	lea    edx,[esp+0x13]
c00198e3:	52                   	push   edx
c00198e4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00198e7:	50                   	push   eax
c00198e8:	e8 a9 91 ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c00198ed:	83 c4 10             	add    esp,0x10
c00198f0:	85 c0                	test   eax,eax
c00198f2:	0f 95 c0             	setne  al
c00198f5:	31 d2                	xor    edx,edx
c00198f7:	0f b6 c0             	movzx  eax,al
c00198fa:	f7 d8                	neg    eax
c00198fc:	83 d2 00             	adc    edx,0x0
c00198ff:	83 c4 18             	add    esp,0x18
c0019902:	f7 da                	neg    edx
c0019904:	5b                   	pop    ebx
c0019905:	c3                   	ret    
c0019906:	83 ec 08             	sub    esp,0x8
c0019909:	50                   	push   eax
c001990a:	68 30 83 02 c0       	push   0xc0028330
c001990f:	e8 43 89 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0019914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019917:	83 c4 10             	add    esp,0x10
c001991a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019920:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019927:	31 d2                	xor    edx,edx
c0019929:	31 c0                	xor    eax,eax
c001992b:	83 c4 18             	add    esp,0x18
c001992e:	5b                   	pop    ebx
c001992f:	c3                   	ret    
c0019930:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019935:	ba ff ff ff ff       	mov    edx,0xffffffff
c001993a:	83 c4 18             	add    esp,0x18
c001993d:	5b                   	pop    ebx
c001993e:	c3                   	ret    

c001993f <sysCallClose(regs*)>:
c001993f:	53                   	push   ebx
c0019940:	83 ec 08             	sub    esp,0x8
c0019943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019947:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001994a:	83 f8 02             	cmp    eax,0x2
c001994d:	76 50                	jbe    c001999f <sysCallClose(regs*)+0x60>
c001994f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019954:	74 58                	je     c00199ae <sysCallClose(regs*)+0x6f>
c0019956:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001995b:	74 60                	je     c00199bd <sysCallClose(regs*)+0x7e>
c001995d:	77 2f                	ja     c001998e <sysCallClose(regs*)+0x4f>
c001995f:	83 ec 0c             	sub    esp,0xc
c0019962:	50                   	push   eax
c0019963:	e8 c7 77 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c0019968:	89 c3                	mov    ebx,eax
c001996a:	89 04 24             	mov    DWORD PTR [esp],eax
c001996d:	e8 d6 8e ff ff       	call   c0012848 <File::close()>
c0019972:	83 c4 10             	add    esp,0x10
c0019975:	85 db                	test   ebx,ebx
c0019977:	74 0c                	je     c0019985 <sysCallClose(regs*)+0x46>
c0019979:	83 ec 0c             	sub    esp,0xc
c001997c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001997e:	53                   	push   ebx
c001997f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019982:	83 c4 10             	add    esp,0x10
c0019985:	31 c0                	xor    eax,eax
c0019987:	31 d2                	xor    edx,edx
c0019989:	83 c4 08             	add    esp,0x8
c001998c:	5b                   	pop    ebx
c001998d:	c3                   	ret    
c001998e:	83 ec 08             	sub    esp,0x8
c0019991:	50                   	push   eax
c0019992:	68 64 82 02 c0       	push   0xc0028264
c0019997:	e8 bb 88 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001999c:	83 c4 10             	add    esp,0x10
c001999f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00199a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00199a9:	83 c4 08             	add    esp,0x8
c00199ac:	5b                   	pop    ebx
c00199ad:	c3                   	ret    
c00199ae:	83 ec 0c             	sub    esp,0xc
c00199b1:	68 4b 83 02 c0       	push   0xc002834b
c00199b6:	e8 9c 88 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00199bb:	eb c5                	jmp    c0019982 <sysCallClose(regs*)+0x43>
c00199bd:	83 ec 0c             	sub    esp,0xc
c00199c0:	68 59 83 02 c0       	push   0xc0028359
c00199c5:	eb ef                	jmp    c00199b6 <sysCallClose(regs*)+0x77>

c00199c7 <sysCallOpenDir(regs*)>:
c00199c7:	56                   	push   esi
c00199c8:	53                   	push   ebx
c00199c9:	53                   	push   ebx
c00199ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199ce:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00199d1:	85 f6                	test   esi,esi
c00199d3:	74 51                	je     c0019a26 <sysCallOpenDir(regs*)+0x5f>
c00199d5:	83 ec 0c             	sub    esp,0xc
c00199d8:	68 14 01 00 00       	push   0x114
c00199dd:	e8 86 87 ff ff       	call   c0012168 <operator new(unsigned long)>
c00199e2:	83 c4 0c             	add    esp,0xc
c00199e5:	89 c6                	mov    esi,eax
c00199e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199ec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00199f2:	56                   	push   esi
c00199f3:	e8 50 92 ff ff       	call   c0012c48 <Directory::Directory(char const*, Process*)>
c00199f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00199fb:	e8 ac 92 ff ff       	call   c0012cac <Directory::open()>
c0019a00:	83 c4 10             	add    esp,0x10
c0019a03:	85 c0                	test   eax,eax
c0019a05:	75 1f                	jne    c0019a26 <sysCallOpenDir(regs*)+0x5f>
c0019a07:	83 ec 0c             	sub    esp,0xc
c0019a0a:	56                   	push   esi
c0019a0b:	e8 6a 74 ff ff       	call   c0010e7a <UnixFile::getFileDescriptor()>
c0019a10:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019a13:	83 c4 10             	add    esp,0x10
c0019a16:	89 02                	mov    DWORD PTR [edx],eax
c0019a18:	c1 f8 1f             	sar    eax,0x1f
c0019a1b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019a1e:	31 c0                	xor    eax,eax
c0019a20:	59                   	pop    ecx
c0019a21:	31 d2                	xor    edx,edx
c0019a23:	5b                   	pop    ebx
c0019a24:	5e                   	pop    esi
c0019a25:	c3                   	ret    
c0019a26:	59                   	pop    ecx
c0019a27:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019a2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a31:	5b                   	pop    ebx
c0019a32:	5e                   	pop    esi
c0019a33:	c3                   	ret    

c0019a34 <sysCallMakeDir(regs*)>:
c0019a34:	56                   	push   esi
c0019a35:	53                   	push   ebx
c0019a36:	83 ec 10             	sub    esp,0x10
c0019a39:	68 14 01 00 00       	push   0x114
c0019a3e:	e8 25 87 ff ff       	call   c0012168 <operator new(unsigned long)>
c0019a43:	83 c4 0c             	add    esp,0xc
c0019a46:	89 c3                	mov    ebx,eax
c0019a48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a4d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a54:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019a57:	53                   	push   ebx
c0019a58:	e8 eb 91 ff ff       	call   c0012c48 <Directory::Directory(char const*, Process*)>
c0019a5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a60:	e8 27 94 ff ff       	call   c0012e8c <Directory::create()>
c0019a65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a68:	89 c6                	mov    esi,eax
c0019a6a:	e8 99 92 ff ff       	call   c0012d08 <Directory::close()>
c0019a6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a77:	31 c0                	xor    eax,eax
c0019a79:	85 f6                	test   esi,esi
c0019a7b:	0f 95 c0             	setne  al
c0019a7e:	31 d2                	xor    edx,edx
c0019a80:	f7 d8                	neg    eax
c0019a82:	83 d2 00             	adc    edx,0x0
c0019a85:	83 c4 14             	add    esp,0x14
c0019a88:	f7 da                	neg    edx
c0019a8a:	5b                   	pop    ebx
c0019a8b:	5e                   	pop    esi
c0019a8c:	c3                   	ret    

c0019a8d <sysCallCloseDir(regs*)>:
c0019a8d:	53                   	push   ebx
c0019a8e:	83 ec 08             	sub    esp,0x8
c0019a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a95:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019a98:	83 f8 02             	cmp    eax,0x2
c0019a9b:	76 47                	jbe    c0019ae4 <sysCallCloseDir(regs*)+0x57>
c0019a9d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019aa2:	77 2f                	ja     c0019ad3 <sysCallCloseDir(regs*)+0x46>
c0019aa4:	83 ec 0c             	sub    esp,0xc
c0019aa7:	50                   	push   eax
c0019aa8:	e8 82 76 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c0019aad:	89 c3                	mov    ebx,eax
c0019aaf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ab2:	e8 51 92 ff ff       	call   c0012d08 <Directory::close()>
c0019ab7:	83 c4 10             	add    esp,0x10
c0019aba:	85 db                	test   ebx,ebx
c0019abc:	74 0c                	je     c0019aca <sysCallCloseDir(regs*)+0x3d>
c0019abe:	83 ec 0c             	sub    esp,0xc
c0019ac1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ac3:	53                   	push   ebx
c0019ac4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ac7:	83 c4 10             	add    esp,0x10
c0019aca:	31 c0                	xor    eax,eax
c0019acc:	31 d2                	xor    edx,edx
c0019ace:	83 c4 08             	add    esp,0x8
c0019ad1:	5b                   	pop    ebx
c0019ad2:	c3                   	ret    
c0019ad3:	83 ec 08             	sub    esp,0x8
c0019ad6:	50                   	push   eax
c0019ad7:	68 8c 82 02 c0       	push   0xc002828c
c0019adc:	e8 76 87 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0019ae1:	83 c4 10             	add    esp,0x10
c0019ae4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ae9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019aee:	83 c4 08             	add    esp,0x8
c0019af1:	5b                   	pop    ebx
c0019af2:	c3                   	ret    

c0019af3 <sysCallWait(regs*)>:
c0019af3:	83 ec 10             	sub    esp,0x10
c0019af6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019afa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019afd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019b00:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019b03:	e8 ed 22 00 00       	call   c001bdf5 <waitTask(int, int*, int)>
c0019b08:	83 c4 1c             	add    esp,0x1c
c0019b0b:	99                   	cdq    
c0019b0c:	c3                   	ret    

c0019b0d <sysCallRmdir(regs*)>:
c0019b0d:	56                   	push   esi
c0019b0e:	53                   	push   ebx
c0019b0f:	83 ec 10             	sub    esp,0x10
c0019b12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b16:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b19:	68 14 01 00 00       	push   0x114
c0019b1e:	e8 45 86 ff ff       	call   c0012168 <operator new(unsigned long)>
c0019b23:	83 c4 0c             	add    esp,0xc
c0019b26:	89 c3                	mov    ebx,eax
c0019b28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b2d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b30:	56                   	push   esi
c0019b31:	53                   	push   ebx
c0019b32:	e8 4f 8c ff ff       	call   c0012786 <File::File(char const*, Process*)>
c0019b37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b3a:	e8 23 8e ff ff       	call   c0012962 <File::unlink()>
c0019b3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b42:	89 c6                	mov    esi,eax
c0019b44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b49:	31 c0                	xor    eax,eax
c0019b4b:	85 f6                	test   esi,esi
c0019b4d:	0f 95 c0             	setne  al
c0019b50:	31 d2                	xor    edx,edx
c0019b52:	f7 d8                	neg    eax
c0019b54:	83 d2 00             	adc    edx,0x0
c0019b57:	83 c4 14             	add    esp,0x14
c0019b5a:	f7 da                	neg    edx
c0019b5c:	5b                   	pop    ebx
c0019b5d:	5e                   	pop    esi
c0019b5e:	c3                   	ret    

c0019b5f <sysCallUnlink(regs*)>:
c0019b5f:	56                   	push   esi
c0019b60:	53                   	push   ebx
c0019b61:	83 ec 10             	sub    esp,0x10
c0019b64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b68:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b6b:	68 14 01 00 00       	push   0x114
c0019b70:	e8 f3 85 ff ff       	call   c0012168 <operator new(unsigned long)>
c0019b75:	83 c4 0c             	add    esp,0xc
c0019b78:	89 c3                	mov    ebx,eax
c0019b7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b7f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b82:	56                   	push   esi
c0019b83:	53                   	push   ebx
c0019b84:	e8 fd 8b ff ff       	call   c0012786 <File::File(char const*, Process*)>
c0019b89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b8c:	e8 d1 8d ff ff       	call   c0012962 <File::unlink()>
c0019b91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b94:	89 c6                	mov    esi,eax
c0019b96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b9b:	31 c0                	xor    eax,eax
c0019b9d:	85 f6                	test   esi,esi
c0019b9f:	0f 95 c0             	setne  al
c0019ba2:	31 d2                	xor    edx,edx
c0019ba4:	f7 d8                	neg    eax
c0019ba6:	83 d2 00             	adc    edx,0x0
c0019ba9:	83 c4 14             	add    esp,0x14
c0019bac:	f7 da                	neg    edx
c0019bae:	5b                   	pop    ebx
c0019baf:	5e                   	pop    esi
c0019bb0:	c3                   	ret    

c0019bb1 <sysCallGetArgv(regs*)>:
c0019bb1:	83 ec 0c             	sub    esp,0xc
c0019bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bb8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019bbb:	85 c0                	test   eax,eax
c0019bbd:	78 2b                	js     c0019bea <sysCallGetArgv(regs*)+0x39>
c0019bbf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019bc5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019bc8:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019bce:	7d 1a                	jge    c0019bea <sysCallGetArgv(regs*)+0x39>
c0019bd0:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019bd7:	85 c0                	test   eax,eax
c0019bd9:	74 17                	je     c0019bf2 <sysCallGetArgv(regs*)+0x41>
c0019bdb:	83 ec 08             	sub    esp,0x8
c0019bde:	50                   	push   eax
c0019bdf:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019be2:	e8 a4 6b fe ff       	call   c000078b <strcpy>
c0019be7:	83 c4 10             	add    esp,0x10
c0019bea:	31 c0                	xor    eax,eax
c0019bec:	31 d2                	xor    edx,edx
c0019bee:	83 c4 0c             	add    esp,0xc
c0019bf1:	c3                   	ret    
c0019bf2:	b8 01 00 00 00       	mov    eax,0x1
c0019bf7:	31 d2                	xor    edx,edx
c0019bf9:	83 c4 0c             	add    esp,0xc
c0019bfc:	c3                   	ret    

c0019bfd <sysCallTTYName(regs*)>:
c0019bfd:	56                   	push   esi
c0019bfe:	53                   	push   ebx
c0019bff:	53                   	push   ebx
c0019c00:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c04:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c07:	85 c0                	test   eax,eax
c0019c09:	74 5f                	je     c0019c6a <sysCallTTYName(regs*)+0x6d>
c0019c0b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c0e:	83 f8 02             	cmp    eax,0x2
c0019c11:	77 3e                	ja     c0019c51 <sysCallTTYName(regs*)+0x54>
c0019c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c18:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019c1b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019c21:	85 db                	test   ebx,ebx
c0019c23:	74 45                	je     c0019c6a <sysCallTTYName(regs*)+0x6d>
c0019c25:	83 ec 0c             	sub    esp,0xc
c0019c28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c2a:	53                   	push   ebx
c0019c2b:	ff 10                	call   DWORD PTR [eax]
c0019c2d:	83 c4 10             	add    esp,0x10
c0019c30:	84 c0                	test   al,al
c0019c32:	74 41                	je     c0019c75 <sysCallTTYName(regs*)+0x78>
c0019c34:	83 ec 08             	sub    esp,0x8
c0019c37:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019c3d:	53                   	push   ebx
c0019c3e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019c41:	e8 45 6b fe ff       	call   c000078b <strcpy>
c0019c46:	83 c4 10             	add    esp,0x10
c0019c49:	31 c0                	xor    eax,eax
c0019c4b:	59                   	pop    ecx
c0019c4c:	31 d2                	xor    edx,edx
c0019c4e:	5b                   	pop    ebx
c0019c4f:	5e                   	pop    esi
c0019c50:	c3                   	ret    
c0019c51:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019c56:	74 bb                	je     c0019c13 <sysCallTTYName(regs*)+0x16>
c0019c58:	83 ec 0c             	sub    esp,0xc
c0019c5b:	50                   	push   eax
c0019c5c:	e8 ce 74 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c0019c61:	83 c4 10             	add    esp,0x10
c0019c64:	89 c3                	mov    ebx,eax
c0019c66:	85 db                	test   ebx,ebx
c0019c68:	75 bb                	jne    c0019c25 <sysCallTTYName(regs*)+0x28>
c0019c6a:	59                   	pop    ecx
c0019c6b:	b8 01 00 00 00       	mov    eax,0x1
c0019c70:	31 d2                	xor    edx,edx
c0019c72:	5b                   	pop    ebx
c0019c73:	5e                   	pop    esi
c0019c74:	c3                   	ret    
c0019c75:	59                   	pop    ecx
c0019c76:	b8 02 00 00 00       	mov    eax,0x2
c0019c7b:	31 d2                	xor    edx,edx
c0019c7d:	5b                   	pop    ebx
c0019c7e:	5e                   	pop    esi
c0019c7f:	c3                   	ret    

c0019c80 <sysCallGetEnv(regs*)>:
c0019c80:	83 ec 0c             	sub    esp,0xc
c0019c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c87:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019c8a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019c8d:	85 c9                	test   ecx,ecx
c0019c8f:	75 22                	jne    c0019cb3 <sysCallGetEnv(regs*)+0x33>
c0019c91:	85 d2                	test   edx,edx
c0019c93:	74 08                	je     c0019c9d <sysCallGetEnv(regs*)+0x1d>
c0019c95:	31 c0                	xor    eax,eax
c0019c97:	31 d2                	xor    edx,edx
c0019c99:	83 c4 0c             	add    esp,0xc
c0019c9c:	c3                   	ret    
c0019c9d:	83 ec 0c             	sub    esp,0xc
c0019ca0:	68 b0 82 02 c0       	push   0xc00282b0
c0019ca5:	e8 5f 6a fe ff       	call   c0000709 <strlen>
c0019caa:	83 c4 10             	add    esp,0x10
c0019cad:	31 d2                	xor    edx,edx
c0019caf:	83 c4 0c             	add    esp,0xc
c0019cb2:	c3                   	ret    
c0019cb3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019cb6:	85 d2                	test   edx,edx
c0019cb8:	74 05                	je     c0019cbf <sysCallGetEnv(regs*)+0x3f>
c0019cba:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019cbd:	eb d6                	jmp    c0019c95 <sysCallGetEnv(regs*)+0x15>
c0019cbf:	83 ec 08             	sub    esp,0x8
c0019cc2:	68 b0 82 02 c0       	push   0xc00282b0
c0019cc7:	50                   	push   eax
c0019cc8:	e8 be 6a fe ff       	call   c000078b <strcpy>
c0019ccd:	83 c4 10             	add    esp,0x10
c0019cd0:	eb c3                	jmp    c0019c95 <sysCallGetEnv(regs*)+0x15>

c0019cd2 <sysCallUSleep(regs*)>:
c0019cd2:	83 ec 14             	sub    esp,0x14
c0019cd5:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019cda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cde:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019ce5:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019ce8:	01 ca                	add    edx,ecx
c0019cea:	52                   	push   edx
c0019ceb:	50                   	push   eax
c0019cec:	e8 9d 21 00 00       	call   c001be8e <nanoSleep(unsigned long long)>
c0019cf1:	31 c0                	xor    eax,eax
c0019cf3:	31 d2                	xor    edx,edx
c0019cf5:	83 c4 1c             	add    esp,0x1c
c0019cf8:	c3                   	ret    

c0019cf9 <sysCallSpawn(regs*)>:
c0019cf9:	56                   	push   esi
c0019cfa:	53                   	push   ebx
c0019cfb:	53                   	push   ebx
c0019cfc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019d00:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019d03:	85 f6                	test   esi,esi
c0019d05:	75 08                	jne    c0019d0f <sysCallSpawn(regs*)+0x16>
c0019d07:	59                   	pop    ecx
c0019d08:	31 c0                	xor    eax,eax
c0019d0a:	31 d2                	xor    edx,edx
c0019d0c:	5b                   	pop    ebx
c0019d0d:	5e                   	pop    esi
c0019d0e:	c3                   	ret    
c0019d0f:	83 ec 0c             	sub    esp,0xc
c0019d12:	68 3b 07 00 00       	push   0x73b
c0019d17:	e8 4c 84 ff ff       	call   c0012168 <operator new(unsigned long)>
c0019d1c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019d1f:	89 c6                	mov    esi,eax
c0019d21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d26:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019d29:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019d2c:	56                   	push   esi
c0019d2d:	e8 bc 18 00 00       	call   c001b5ee <Process::Process(char const*, Process*, char**)>
c0019d32:	83 c4 20             	add    esp,0x20
c0019d35:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019d3c:	75 c9                	jne    c0019d07 <sysCallSpawn(regs*)+0xe>
c0019d3e:	83 ec 0c             	sub    esp,0xc
c0019d41:	56                   	push   esi
c0019d42:	e8 0d 1e 00 00       	call   c001bb54 <Process::createUserThread()>
c0019d47:	8b 06                	mov    eax,DWORD PTR [esi]
c0019d49:	83 c4 10             	add    esp,0x10
c0019d4c:	99                   	cdq    
c0019d4d:	59                   	pop    ecx
c0019d4e:	5b                   	pop    ebx
c0019d4f:	5e                   	pop    esi
c0019d50:	c3                   	ret    

c0019d51 <sysAppSettings(regs*)>:
c0019d51:	53                   	push   ebx
c0019d52:	83 ec 08             	sub    esp,0x8
c0019d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d59:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019d5c:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019d62:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019d67:	66 3d c0 09          	cmp    ax,0x9c0
c0019d6b:	75 2f                	jne    c0019d9c <sysAppSettings(regs*)+0x4b>
c0019d6d:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019d73:	83 e0 1f             	and    eax,0x1f
c0019d76:	3c 01                	cmp    al,0x1
c0019d78:	74 2e                	je     c0019da8 <sysAppSettings(regs*)+0x57>
c0019d7a:	3c 07                	cmp    al,0x7
c0019d7c:	0f 84 bd 00 00 00    	je     c0019e3f <sysAppSettings(regs*)+0xee>
c0019d82:	84 c0                	test   al,al
c0019d84:	0f 84 dc 00 00 00    	je     c0019e66 <sysAppSettings(regs*)+0x115>
c0019d8a:	3c 08                	cmp    al,0x8
c0019d8c:	74 6d                	je     c0019dfb <sysAppSettings(regs*)+0xaa>
c0019d8e:	0f b6 c0             	movzx  eax,al
c0019d91:	83 c4 08             	add    esp,0x8
c0019d94:	05 e8 03 00 00       	add    eax,0x3e8
c0019d99:	5b                   	pop    ebx
c0019d9a:	99                   	cdq    
c0019d9b:	c3                   	ret    
c0019d9c:	b8 01 00 00 00       	mov    eax,0x1
c0019da1:	31 d2                	xor    edx,edx
c0019da3:	83 c4 08             	add    esp,0x8
c0019da6:	5b                   	pop    ebx
c0019da7:	c3                   	ret    
c0019da8:	51                   	push   ecx
c0019da9:	68 00 01 00 00       	push   0x100
c0019dae:	6a 00                	push   0x0
c0019db0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019db5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019db8:	83 c0 0c             	add    eax,0xc
c0019dbb:	50                   	push   eax
c0019dbc:	e8 2b 69 fe ff       	call   c00006ec <memset>
c0019dc1:	83 c4 0c             	add    esp,0xc
c0019dc4:	68 ff 00 00 00       	push   0xff
c0019dc9:	53                   	push   ebx
c0019dca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dcf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dd2:	83 c0 0c             	add    eax,0xc
c0019dd5:	50                   	push   eax
c0019dd6:	e8 db 68 fe ff       	call   c00006b6 <memcpy>
c0019ddb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019de0:	5b                   	pop    ebx
c0019de1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019de4:	5a                   	pop    edx
c0019de5:	8d 50 0c             	lea    edx,[eax+0xc]
c0019de8:	52                   	push   edx
c0019de9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019def:	e8 1a 65 ff ff       	call   c001030e <VgaText::setTitle(char*)>
c0019df4:	83 c4 10             	add    esp,0x10
c0019df7:	31 c0                	xor    eax,eax
c0019df9:	eb a6                	jmp    c0019da1 <sysAppSettings(regs*)+0x50>
c0019dfb:	83 ec 08             	sub    esp,0x8
c0019dfe:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019e04:	83 e0 0f             	and    eax,0xf
c0019e07:	50                   	push   eax
c0019e08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e16:	e8 e3 64 ff ff       	call   c00102fe <VgaText::setTitleColour(VgaColour)>
c0019e1b:	58                   	pop    eax
c0019e1c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019e22:	5a                   	pop    edx
c0019e23:	c1 e8 04             	shr    eax,0x4
c0019e26:	83 e0 0f             	and    eax,0xf
c0019e29:	50                   	push   eax
c0019e2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e38:	e8 b1 64 ff ff       	call   c00102ee <VgaText::setTitleTextColour(VgaColour)>
c0019e3d:	eb b5                	jmp    c0019df4 <sysAppSettings(regs*)+0xa3>
c0019e3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e47:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019e4d:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019e53:	c0 e8 06             	shr    al,0x6
c0019e56:	83 e0 01             	and    eax,0x1
c0019e59:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019e5f:	31 c0                	xor    eax,eax
c0019e61:	e9 3b ff ff ff       	jmp    c0019da1 <sysAppSettings(regs*)+0x50>
c0019e66:	b8 02 00 00 00       	mov    eax,0x2
c0019e6b:	e9 31 ff ff ff       	jmp    c0019da1 <sysAppSettings(regs*)+0x50>

c0019e70 <sysSetFatAttrib(regs*)>:
c0019e70:	57                   	push   edi
c0019e71:	56                   	push   esi
c0019e72:	53                   	push   ebx
c0019e73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e77:	83 ec 0c             	sub    esp,0xc
c0019e7a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e7d:	68 14 01 00 00       	push   0x114
c0019e82:	e8 e1 82 ff ff       	call   c0012168 <operator new(unsigned long)>
c0019e87:	83 c4 0c             	add    esp,0xc
c0019e8a:	89 c3                	mov    ebx,eax
c0019e8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e91:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019e94:	57                   	push   edi
c0019e95:	53                   	push   ebx
c0019e96:	e8 eb 88 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c0019e9b:	83 c4 0c             	add    esp,0xc
c0019e9e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ea1:	0f b6 d4             	movzx  edx,ah
c0019ea4:	0f b6 c0             	movzx  eax,al
c0019ea7:	52                   	push   edx
c0019ea8:	50                   	push   eax
c0019ea9:	53                   	push   ebx
c0019eaa:	e8 4d 8b ff ff       	call   c00129fc <File::chfatattr(unsigned char, unsigned char)>
c0019eaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eb2:	89 c6                	mov    esi,eax
c0019eb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019eb6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019eb9:	83 c4 10             	add    esp,0x10
c0019ebc:	31 c0                	xor    eax,eax
c0019ebe:	5b                   	pop    ebx
c0019ebf:	85 f6                	test   esi,esi
c0019ec1:	5e                   	pop    esi
c0019ec2:	0f 95 c0             	setne  al
c0019ec5:	5f                   	pop    edi
c0019ec6:	31 d2                	xor    edx,edx
c0019ec8:	f7 d8                	neg    eax
c0019eca:	83 d2 00             	adc    edx,0x0
c0019ecd:	f7 da                	neg    edx
c0019ecf:	c3                   	ret    

c0019ed0 <sysPanic(regs*)>:
c0019ed0:	83 ec 18             	sub    esp,0x18
c0019ed3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ed7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019eda:	e8 14 eb ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0019edf:	c7 04 24 67 83 02 c0 	mov    DWORD PTR [esp],0xc0028367
c0019ee6:	e8 08 eb ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0019eeb:	b8 01 00 00 00       	mov    eax,0x1
c0019ef0:	31 d2                	xor    edx,edx
c0019ef2:	83 c4 1c             	add    esp,0x1c
c0019ef5:	c3                   	ret    

c0019ef6 <sysPipe(regs*)>:
c0019ef6:	57                   	push   edi
c0019ef7:	56                   	push   esi
c0019ef8:	53                   	push   ebx
c0019ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019efd:	83 ec 0c             	sub    esp,0xc
c0019f00:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0019f03:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0019f06:	6a 20                	push   0x20
c0019f08:	e8 5b 82 ff ff       	call   c0012168 <operator new(unsigned long)>
c0019f0d:	89 c3                	mov    ebx,eax
c0019f0f:	58                   	pop    eax
c0019f10:	5a                   	pop    edx
c0019f11:	68 00 50 00 00       	push   0x5000
c0019f16:	53                   	push   ebx
c0019f17:	e8 30 5d ff ff       	call   c000fc4c <Pipe::Pipe(int)>
c0019f1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f1f:	e8 56 6f ff ff       	call   c0010e7a <UnixFile::getFileDescriptor()>
c0019f24:	89 07                	mov    DWORD PTR [edi],eax
c0019f26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f29:	e8 4c 6f ff ff       	call   c0010e7a <UnixFile::getFileDescriptor()>
c0019f2e:	83 c4 10             	add    esp,0x10
c0019f31:	89 06                	mov    DWORD PTR [esi],eax
c0019f33:	31 d2                	xor    edx,edx
c0019f35:	5b                   	pop    ebx
c0019f36:	31 c0                	xor    eax,eax
c0019f38:	5e                   	pop    esi
c0019f39:	5f                   	pop    edi
c0019f3a:	c3                   	ret    

c0019f3b <sysGetUnixTime(regs*)>:
c0019f3b:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0019f40:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019f46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f4a:	e9 ff 91 ff ff       	jmp    c001314e <Clock::timeInSecondsLocal()>

c0019f4f <string_ends_with(char const*, char const*)>:
c0019f4f:	57                   	push   edi
c0019f50:	56                   	push   esi
c0019f51:	53                   	push   ebx
c0019f52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f56:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f5a:	83 ec 0c             	sub    esp,0xc
c0019f5d:	53                   	push   ebx
c0019f5e:	e8 a6 67 fe ff       	call   c0000709 <strlen>
c0019f63:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f66:	89 c6                	mov    esi,eax
c0019f68:	e8 9c 67 fe ff       	call   c0000709 <strlen>
c0019f6d:	83 c4 10             	add    esp,0x10
c0019f70:	39 c6                	cmp    esi,eax
c0019f72:	7d 06                	jge    c0019f7a <string_ends_with(char const*, char const*)+0x2b>
c0019f74:	5b                   	pop    ebx
c0019f75:	31 c0                	xor    eax,eax
c0019f77:	5e                   	pop    esi
c0019f78:	5f                   	pop    edi
c0019f79:	c3                   	ret    
c0019f7a:	83 ec 08             	sub    esp,0x8
c0019f7d:	29 c6                	sub    esi,eax
c0019f7f:	57                   	push   edi
c0019f80:	01 f3                	add    ebx,esi
c0019f82:	53                   	push   ebx
c0019f83:	e8 54 68 fe ff       	call   c00007dc <strcmp>
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	85 c0                	test   eax,eax
c0019f8d:	5b                   	pop    ebx
c0019f8e:	0f 94 c0             	sete   al
c0019f91:	5e                   	pop    esi
c0019f92:	0f b6 c0             	movzx  eax,al
c0019f95:	5f                   	pop    edi
c0019f96:	c3                   	ret    

c0019f97 <sysCallOpen(regs*)>:
c0019f97:	56                   	push   esi
c0019f98:	53                   	push   ebx
c0019f99:	81 ec 04 01 00 00    	sub    esp,0x104
c0019f9f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0019fa6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0019fa9:	85 c9                	test   ecx,ecx
c0019fab:	0f 84 b3 00 00 00    	je     c001a064 <sysCallOpen(regs*)+0xcd>
c0019fb1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0019fb4:	85 c0                	test   eax,eax
c0019fb6:	0f 84 a8 00 00 00    	je     c001a064 <sysCallOpen(regs*)+0xcd>
c0019fbc:	52                   	push   edx
c0019fbd:	68 76 83 02 c0       	push   0xc0028376
c0019fc2:	50                   	push   eax
c0019fc3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019fc7:	56                   	push   esi
c0019fc8:	e8 0f 86 ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c0019fcd:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fd0:	e8 34 67 fe ff       	call   c0000709 <strlen>
c0019fd5:	83 c4 10             	add    esp,0x10
c0019fd8:	48                   	dec    eax
c0019fd9:	74 1d                	je     c0019ff8 <sysCallOpen(regs*)+0x61>
c0019fdb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0019fde:	eb 0f                	jmp    c0019fef <sysCallOpen(regs*)+0x58>
c0019fe0:	80 fa 3a             	cmp    dl,0x3a
c0019fe3:	74 0f                	je     c0019ff4 <sysCallOpen(regs*)+0x5d>
c0019fe5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0019fe9:	48                   	dec    eax
c0019fea:	74 0c                	je     c0019ff8 <sysCallOpen(regs*)+0x61>
c0019fec:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0019fef:	80 fa 2e             	cmp    dl,0x2e
c0019ff2:	75 ec                	jne    c0019fe0 <sysCallOpen(regs*)+0x49>
c0019ff4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0019ff8:	83 ec 08             	sub    esp,0x8
c0019ffb:	68 7a 83 02 c0       	push   0xc002837a
c001a000:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a003:	e8 47 ff ff ff       	call   c0019f4f <string_ends_with(char const*, char const*)>
c001a008:	83 c4 10             	add    esp,0x10
c001a00b:	85 c0                	test   eax,eax
c001a00d:	75 17                	jne    c001a026 <sysCallOpen(regs*)+0x8f>
c001a00f:	83 ec 08             	sub    esp,0x8
c001a012:	68 9b 83 02 c0       	push   0xc002839b
c001a017:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a01a:	e8 30 ff ff ff       	call   c0019f4f <string_ends_with(char const*, char const*)>
c001a01f:	83 c4 10             	add    esp,0x10
c001a022:	85 c0                	test   eax,eax
c001a024:	74 51                	je     c001a077 <sysCallOpen(regs*)+0xe0>
c001a026:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a029:	83 ec 08             	sub    esp,0x8
c001a02c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a032:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a039:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a03c:	ff 30                	push   DWORD PTR [eax]
c001a03e:	68 7f 83 02 c0       	push   0xc002837f
c001a043:	e8 0f 82 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a048:	c7 04 24 8e 83 02 c0 	mov    DWORD PTR [esp],0xc002838e
c001a04f:	e8 03 82 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a054:	83 c4 10             	add    esp,0x10
c001a057:	81 c4 04 01 00 00    	add    esp,0x104
c001a05d:	31 c0                	xor    eax,eax
c001a05f:	31 d2                	xor    edx,edx
c001a061:	5b                   	pop    ebx
c001a062:	5e                   	pop    esi
c001a063:	c3                   	ret    
c001a064:	81 c4 04 01 00 00    	add    esp,0x104
c001a06a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a06f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a074:	5b                   	pop    ebx
c001a075:	5e                   	pop    esi
c001a076:	c3                   	ret    
c001a077:	83 ec 08             	sub    esp,0x8
c001a07a:	68 7b 83 02 c0       	push   0xc002837b
c001a07f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a082:	e8 55 67 fe ff       	call   c00007dc <strcmp>
c001a087:	83 c4 10             	add    esp,0x10
c001a08a:	85 c0                	test   eax,eax
c001a08c:	74 98                	je     c001a026 <sysCallOpen(regs*)+0x8f>
c001a08e:	83 ec 08             	sub    esp,0x8
c001a091:	68 7a 83 02 c0       	push   0xc002837a
c001a096:	56                   	push   esi
c001a097:	e8 b3 fe ff ff       	call   c0019f4f <string_ends_with(char const*, char const*)>
c001a09c:	83 c4 10             	add    esp,0x10
c001a09f:	85 c0                	test   eax,eax
c001a0a1:	75 83                	jne    c001a026 <sysCallOpen(regs*)+0x8f>
c001a0a3:	83 ec 08             	sub    esp,0x8
c001a0a6:	68 a0 83 02 c0       	push   0xc00283a0
c001a0ab:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0ae:	e8 9c fe ff ff       	call   c0019f4f <string_ends_with(char const*, char const*)>
c001a0b3:	83 c4 10             	add    esp,0x10
c001a0b6:	85 c0                	test   eax,eax
c001a0b8:	0f 85 d1 00 00 00    	jne    c001a18f <sysCallOpen(regs*)+0x1f8>
c001a0be:	83 ec 08             	sub    esp,0x8
c001a0c1:	68 a5 83 02 c0       	push   0xc00283a5
c001a0c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0c9:	e8 81 fe ff ff       	call   c0019f4f <string_ends_with(char const*, char const*)>
c001a0ce:	83 c4 10             	add    esp,0x10
c001a0d1:	85 c0                	test   eax,eax
c001a0d3:	0f 85 b6 00 00 00    	jne    c001a18f <sysCallOpen(regs*)+0x1f8>
c001a0d9:	83 ec 08             	sub    esp,0x8
c001a0dc:	68 a1 83 02 c0       	push   0xc00283a1
c001a0e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0e4:	e8 f3 66 fe ff       	call   c00007dc <strcmp>
c001a0e9:	83 c4 10             	add    esp,0x10
c001a0ec:	85 c0                	test   eax,eax
c001a0ee:	0f 84 9b 00 00 00    	je     c001a18f <sysCallOpen(regs*)+0x1f8>
c001a0f4:	83 ec 08             	sub    esp,0x8
c001a0f7:	68 a0 83 02 c0       	push   0xc00283a0
c001a0fc:	56                   	push   esi
c001a0fd:	e8 4d fe ff ff       	call   c0019f4f <string_ends_with(char const*, char const*)>
c001a102:	83 c4 10             	add    esp,0x10
c001a105:	85 c0                	test   eax,eax
c001a107:	0f 85 82 00 00 00    	jne    c001a18f <sysCallOpen(regs*)+0x1f8>
c001a10d:	83 ec 0c             	sub    esp,0xc
c001a110:	68 14 01 00 00       	push   0x114
c001a115:	e8 4e 80 ff ff       	call   c0012168 <operator new(unsigned long)>
c001a11a:	83 c4 0c             	add    esp,0xc
c001a11d:	89 c6                	mov    esi,eax
c001a11f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a124:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a127:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a12a:	56                   	push   esi
c001a12b:	e8 56 86 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001a130:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a133:	83 c4 10             	add    esp,0x10
c001a136:	0f b6 c2             	movzx  eax,dl
c001a139:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a13c:	89 d0                	mov    eax,edx
c001a13e:	83 e0 01             	and    eax,0x1
c001a141:	f6 c2 02             	test   dl,0x2
c001a144:	74 03                	je     c001a149 <sysCallOpen(regs*)+0x1b2>
c001a146:	83 c8 02             	or     eax,0x2
c001a149:	f6 c2 04             	test   dl,0x4
c001a14c:	74 03                	je     c001a151 <sysCallOpen(regs*)+0x1ba>
c001a14e:	83 c8 04             	or     eax,0x4
c001a151:	f6 c2 08             	test   dl,0x8
c001a154:	74 03                	je     c001a159 <sysCallOpen(regs*)+0x1c2>
c001a156:	83 c8 0a             	or     eax,0xa
c001a159:	83 e2 10             	and    edx,0x10
c001a15c:	74 03                	je     c001a161 <sysCallOpen(regs*)+0x1ca>
c001a15e:	83 c8 12             	or     eax,0x12
c001a161:	83 ec 08             	sub    esp,0x8
c001a164:	50                   	push   eax
c001a165:	56                   	push   esi
c001a166:	e8 7f 86 ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001a16b:	83 c4 10             	add    esp,0x10
c001a16e:	85 c0                	test   eax,eax
c001a170:	0f 85 ee fe ff ff    	jne    c001a064 <sysCallOpen(regs*)+0xcd>
c001a176:	83 ec 0c             	sub    esp,0xc
c001a179:	56                   	push   esi
c001a17a:	e8 fb 6c ff ff       	call   c0010e7a <UnixFile::getFileDescriptor()>
c001a17f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a182:	89 02                	mov    DWORD PTR [edx],eax
c001a184:	c1 f8 1f             	sar    eax,0x1f
c001a187:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a18a:	e9 c5 fe ff ff       	jmp    c001a054 <sysCallOpen(regs*)+0xbd>
c001a18f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a192:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a198:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a19f:	e9 b3 fe ff ff       	jmp    c001a057 <sysCallOpen(regs*)+0xc0>

c001a1a4 <setupSystemCalls()>:
c001a1a4:	c7 05 60 ae 02 c0 00 94 01 c0 	mov    DWORD PTR ds:0xc002ae60,0xc0019400
c001a1ae:	c7 05 64 ae 02 c0 2e 92 01 c0 	mov    DWORD PTR ds:0xc002ae64,0xc001922e
c001a1b8:	c7 05 68 ae 02 c0 43 93 01 c0 	mov    DWORD PTR ds:0xc002ae68,0xc0019343
c001a1c2:	c7 05 6c ae 02 c0 98 93 01 c0 	mov    DWORD PTR ds:0xc002ae6c,0xc0019398
c001a1cc:	c7 05 70 ae 02 c0 db 92 01 c0 	mov    DWORD PTR ds:0xc002ae70,0xc00192db
c001a1d6:	c7 05 74 ae 02 c0 1a 94 01 c0 	mov    DWORD PTR ds:0xc002ae74,0xc001941a
c001a1e0:	c7 05 78 ae 02 c0 bf 95 01 c0 	mov    DWORD PTR ds:0xc002ae78,0xc00195bf
c001a1ea:	c7 05 7c ae 02 c0 de 95 01 c0 	mov    DWORD PTR ds:0xc002ae7c,0xc00195de
c001a1f4:	c7 05 84 ae 02 c0 3f 99 01 c0 	mov    DWORD PTR ds:0xc002ae84,0xc001993f
c001a1fe:	c7 05 80 ae 02 c0 97 9f 01 c0 	mov    DWORD PTR ds:0xc002ae80,0xc0019f97
c001a208:	c7 05 88 ae 02 c0 c7 99 01 c0 	mov    DWORD PTR ds:0xc002ae88,0xc00199c7
c001a212:	c7 05 8c ae 02 c0 3d 96 01 c0 	mov    DWORD PTR ds:0xc002ae8c,0xc001963d
c001a21c:	c7 05 90 ae 02 c0 26 94 01 c0 	mov    DWORD PTR ds:0xc002ae90,0xc0019426
c001a226:	c7 05 94 ae 02 c0 2b 94 01 c0 	mov    DWORD PTR ds:0xc002ae94,0xc001942b
c001a230:	c7 05 98 ae 02 c0 34 9a 01 c0 	mov    DWORD PTR ds:0xc002ae98,0xc0019a34
c001a23a:	c7 05 9c ae 02 c0 8d 9a 01 c0 	mov    DWORD PTR ds:0xc002ae9c,0xc0019a8d
c001a244:	c7 05 a0 ae 02 c0 25 97 01 c0 	mov    DWORD PTR ds:0xc002aea0,0xc0019725
c001a24e:	c7 05 a4 ae 02 c0 8e 97 01 c0 	mov    DWORD PTR ds:0xc002aea4,0xc001978e
c001a258:	c7 05 a8 ae 02 c0 bc 98 01 c0 	mov    DWORD PTR ds:0xc002aea8,0xc00198bc
c001a262:	c7 05 ac ae 02 c0 30 94 01 c0 	mov    DWORD PTR ds:0xc002aeac,0xc0019430
c001a26c:	c7 05 b0 ae 02 c0 f3 9a 01 c0 	mov    DWORD PTR ds:0xc002aeb0,0xc0019af3
c001a276:	c7 05 b4 ae 02 c0 3a 94 01 c0 	mov    DWORD PTR ds:0xc002aeb4,0xc001943a
c001a280:	c7 05 b8 ae 02 c0 45 94 01 c0 	mov    DWORD PTR ds:0xc002aeb8,0xc0019445
c001a28a:	c7 05 bc ae 02 c0 0d 9b 01 c0 	mov    DWORD PTR ds:0xc002aebc,0xc0019b0d
c001a294:	c7 05 c0 ae 02 c0 5f 9b 01 c0 	mov    DWORD PTR ds:0xc002aec0,0xc0019b5f
c001a29e:	c7 05 c4 ae 02 c0 50 94 01 c0 	mov    DWORD PTR ds:0xc002aec4,0xc0019450
c001a2a8:	c7 05 c8 ae 02 c0 b1 9b 01 c0 	mov    DWORD PTR ds:0xc002aec8,0xc0019bb1
c001a2b2:	c7 05 cc ae 02 c0 fa 95 01 c0 	mov    DWORD PTR ds:0xc002aecc,0xc00195fa
c001a2bc:	c7 05 d0 ae 02 c0 fd 9b 01 c0 	mov    DWORD PTR ds:0xc002aed0,0xc0019bfd
c001a2c6:	c7 05 d4 ae 02 c0 cb 96 01 c0 	mov    DWORD PTR ds:0xc002aed4,0xc00196cb
c001a2d0:	c7 05 d8 ae 02 c0 d2 9c 01 c0 	mov    DWORD PTR ds:0xc002aed8,0xc0019cd2
c001a2da:	c7 05 dc ae 02 c0 0b 98 01 c0 	mov    DWORD PTR ds:0xc002aedc,0xc001980b
c001a2e4:	c7 05 e0 ae 02 c0 f9 9c 01 c0 	mov    DWORD PTR ds:0xc002aee0,0xc0019cf9
c001a2ee:	c7 05 e4 ae 02 c0 80 9c 01 c0 	mov    DWORD PTR ds:0xc002aee4,0xc0019c80
c001a2f8:	c7 05 e8 ae 02 c0 51 9d 01 c0 	mov    DWORD PTR ds:0xc002aee8,0xc0019d51
c001a302:	c7 05 ec ae 02 c0 60 94 01 c0 	mov    DWORD PTR ds:0xc002aeec,0xc0019460
c001a30c:	c7 05 f0 ae 02 c0 ca 94 01 c0 	mov    DWORD PTR ds:0xc002aef0,0xc00194ca
c001a316:	c7 05 f4 ae 02 c0 10 95 01 c0 	mov    DWORD PTR ds:0xc002aef4,0xc0019510
c001a320:	c7 05 f8 ae 02 c0 70 9e 01 c0 	mov    DWORD PTR ds:0xc002aef8,0xc0019e70
c001a32a:	c7 05 fc ae 02 c0 d0 9e 01 c0 	mov    DWORD PTR ds:0xc002aefc,0xc0019ed0
c001a334:	c7 05 00 af 02 c0 61 95 01 c0 	mov    DWORD PTR ds:0xc002af00,0xc0019561
c001a33e:	c7 05 04 af 02 c0 f6 9e 01 c0 	mov    DWORD PTR ds:0xc002af04,0xc0019ef6
c001a348:	c7 05 08 af 02 c0 3b 9f 01 c0 	mov    DWORD PTR ds:0xc002af08,0xc0019f3b
c001a352:	c7 05 0c af 02 c0 46 92 01 c0 	mov    DWORD PTR ds:0xc002af0c,0xc0019246
c001a35c:	c3                   	ret    

c001a35d <systemCall(regs*, void*)>:
c001a35d:	53                   	push   ebx
c001a35e:	83 ec 08             	sub    esp,0x8
c001a361:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a365:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a368:	83 f8 7f             	cmp    eax,0x7f
c001a36b:	77 16                	ja     c001a383 <systemCall(regs*, void*)+0x26>
c001a36d:	8b 14 85 60 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd51a0]
c001a374:	85 d2                	test   edx,edx
c001a376:	74 0b                	je     c001a383 <systemCall(regs*, void*)+0x26>
c001a378:	83 ec 0c             	sub    esp,0xc
c001a37b:	53                   	push   ebx
c001a37c:	ff d2                	call   edx
c001a37e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a381:	eb 0d                	jmp    c001a390 <systemCall(regs*, void*)+0x33>
c001a383:	52                   	push   edx
c001a384:	52                   	push   edx
c001a385:	50                   	push   eax
c001a386:	68 aa 83 02 c0       	push   0xc00283aa
c001a38b:	e8 c7 7e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a390:	83 c4 10             	add    esp,0x10
c001a393:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a398:	31 d2                	xor    edx,edx
c001a39a:	83 c4 08             	add    esp,0x8
c001a39d:	5b                   	pop    ebx
c001a39e:	c3                   	ret    

c001a39f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a39f:	55                   	push   ebp
c001a3a0:	89 e5                	mov    ebp,esp
c001a3a2:	57                   	push   edi
c001a3a3:	56                   	push   esi
c001a3a4:	53                   	push   ebx
c001a3a5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a3ab:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a3ae:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a3b1:	85 c0                	test   eax,eax
c001a3b3:	0f 95 c1             	setne  cl
c001a3b6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a3ba:	0f 94 c2             	sete   dl
c001a3bd:	84 d1                	test   cl,dl
c001a3bf:	74 26                	je     c001a3e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3c1:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a3c8:	74 1d                	je     c001a3e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3ca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a3cd:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a3d3:	89 d6                	mov    esi,edx
c001a3d5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a3db:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a3e1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a3e4:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a3e7:	83 ec 0c             	sub    esp,0xc
c001a3ea:	05 ff 0f 00 00       	add    eax,0xfff
c001a3ef:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a3f2:	6a 01                	push   0x1
c001a3f4:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a3fa:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a400:	e8 80 6e ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c001a405:	83 c4 10             	add    esp,0x10
c001a408:	89 c6                	mov    esi,eax
c001a40a:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a410:	0f 86 21 01 00 00    	jbe    c001a537 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a416:	c1 eb 0c             	shr    ebx,0xc
c001a419:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a423:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a429:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a42c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a42f:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a435:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a438:	29 d8                	sub    eax,ebx
c001a43a:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a440:	0f 83 f4 00 00 00    	jae    c001a53a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a446:	83 ec 0c             	sub    esp,0xc
c001a449:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a44f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a452:	3d 00 10 00 00       	cmp    eax,0x1000
c001a457:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a459:	52                   	push   edx
c001a45a:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a460:	52                   	push   edx
c001a461:	76 05                	jbe    c001a468 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a463:	b8 00 10 00 00       	mov    eax,0x1000
c001a468:	31 d2                	xor    edx,edx
c001a46a:	52                   	push   edx
c001a46b:	50                   	push   eax
c001a46c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a46f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a472:	83 c4 20             	add    esp,0x20
c001a475:	85 c0                	test   eax,eax
c001a477:	74 1f                	je     c001a498 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a479:	51                   	push   ecx
c001a47a:	51                   	push   ecx
c001a47b:	50                   	push   eax
c001a47c:	68 be 83 02 c0       	push   0xc00283be
c001a481:	e8 d1 7d ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a486:	89 34 24             	mov    DWORD PTR [esp],esi
c001a489:	e8 51 71 ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c001a48e:	83 c4 10             	add    esp,0x10
c001a491:	31 c0                	xor    eax,eax
c001a493:	e9 7c 01 00 00       	jmp    c001a614 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a498:	e8 a9 14 00 00       	call   c001b946 <lockScheduler()>
c001a49d:	e8 6e 52 ff ff       	call   c000f710 <Phys::allocatePage()>
c001a4a2:	6a 07                	push   0x7
c001a4a4:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a4aa:	56                   	push   esi
c001a4ab:	50                   	push   eax
c001a4ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4b2:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4b5:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4bb:	e8 98 74 ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a4c0:	83 c4 0c             	add    esp,0xc
c001a4c3:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4c9:	6a 00                	push   0x0
c001a4cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4d1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4d4:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4da:	e8 d7 72 ff ff       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001a4df:	58                   	pop    eax
c001a4e0:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a4e6:	5a                   	pop    edx
c001a4e7:	68 07 04 00 00       	push   0x407
c001a4ec:	53                   	push   ebx
c001a4ed:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a4f3:	50                   	push   eax
c001a4f4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4fa:	6a 00                	push   0x0
c001a4fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a501:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a504:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a50a:	e8 ff 77 ff ff       	call   c0011d0e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a50f:	83 c4 1c             	add    esp,0x1c
c001a512:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a518:	68 00 10 00 00       	push   0x1000
c001a51d:	50                   	push   eax
c001a51e:	56                   	push   esi
c001a51f:	e8 92 61 fe ff       	call   c00006b6 <memcpy>
c001a524:	e8 1f 14 00 00       	call   c001b948 <unlockScheduler()>
c001a529:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a52f:	83 c4 10             	add    esp,0x10
c001a532:	e9 f5 fe ff ff       	jmp    c001a42c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a537:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a53a:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a544:	0f 86 bc 00 00 00    	jbe    c001a606 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a54a:	e8 f7 13 00 00       	call   c001b946 <lockScheduler()>
c001a54f:	51                   	push   ecx
c001a550:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a556:	6a 00                	push   0x0
c001a558:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a55d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a560:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a566:	e8 4b 72 ff ff       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001a56b:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a571:	83 c4 10             	add    esp,0x10
c001a574:	c1 e8 0c             	shr    eax,0xc
c001a577:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a581:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a587:	e8 84 51 ff ff       	call   c000f710 <Phys::allocatePage()>
c001a58c:	6a 07                	push   0x7
c001a58e:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a594:	56                   	push   esi
c001a595:	50                   	push   eax
c001a596:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a59c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a59f:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a5a5:	e8 ae 73 ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a5aa:	58                   	pop    eax
c001a5ab:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a5b1:	5a                   	pop    edx
c001a5b2:	68 07 04 00 00       	push   0x407
c001a5b7:	53                   	push   ebx
c001a5b8:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a5be:	50                   	push   eax
c001a5bf:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a5c5:	6a 00                	push   0x0
c001a5c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5cf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a5d5:	e8 34 77 ff ff       	call   c0011d0e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a5da:	83 c4 1c             	add    esp,0x1c
c001a5dd:	68 00 10 00 00       	push   0x1000
c001a5e2:	6a 00                	push   0x0
c001a5e4:	56                   	push   esi
c001a5e5:	e8 02 61 fe ff       	call   c00006ec <memset>
c001a5ea:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a5f9:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a5ff:	77 86                	ja     c001a587 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a601:	e8 42 13 00 00       	call   c001b948 <unlockScheduler()>
c001a606:	83 ec 0c             	sub    esp,0xc
c001a609:	56                   	push   esi
c001a60a:	e8 d0 6f ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c001a60f:	83 c4 10             	add    esp,0x10
c001a612:	b0 01                	mov    al,0x1
c001a614:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a617:	5b                   	pop    ebx
c001a618:	5e                   	pop    esi
c001a619:	5f                   	pop    edi
c001a61a:	5d                   	pop    ebp
c001a61b:	c3                   	ret    

c001a61c <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a61c:	55                   	push   ebp
c001a61d:	57                   	push   edi
c001a61e:	56                   	push   esi
c001a61f:	53                   	push   ebx
c001a620:	83 ec 48             	sub    esp,0x48
c001a623:	68 14 01 00 00       	push   0x114
c001a628:	e8 3b 7b ff ff       	call   c0012168 <operator new(unsigned long)>
c001a62d:	83 c4 0c             	add    esp,0xc
c001a630:	89 c6                	mov    esi,eax
c001a632:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a636:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a63a:	50                   	push   eax
c001a63b:	e8 46 81 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001a640:	58                   	pop    eax
c001a641:	5a                   	pop    edx
c001a642:	6a 01                	push   0x1
c001a644:	56                   	push   esi
c001a645:	e8 a0 81 ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001a64a:	83 c4 10             	add    esp,0x10
c001a64d:	85 c0                	test   eax,eax
c001a64f:	0f 85 47 01 00 00    	jne    c001a79c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a655:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a65d:	83 ec 0c             	sub    esp,0xc
c001a660:	6a 34                	push   0x34
c001a662:	e8 ff 4a ff ff       	call   c000f166 <malloc>
c001a667:	89 c3                	mov    ebx,eax
c001a669:	58                   	pop    eax
c001a66a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a66c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a670:	57                   	push   edi
c001a671:	53                   	push   ebx
c001a672:	6a 00                	push   0x0
c001a674:	6a 34                	push   0x34
c001a676:	56                   	push   esi
c001a677:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a67a:	83 c4 20             	add    esp,0x20
c001a67d:	85 c0                	test   eax,eax
c001a67f:	0f 85 17 01 00 00    	jne    c001a79c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a685:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a68b:	0f 85 0b 01 00 00    	jne    c001a79c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a691:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a694:	85 c0                	test   eax,eax
c001a696:	0f 84 00 01 00 00    	je     c001a79c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a69c:	31 d2                	xor    edx,edx
c001a69e:	55                   	push   ebp
c001a69f:	52                   	push   edx
c001a6a0:	50                   	push   eax
c001a6a1:	56                   	push   esi
c001a6a2:	e8 01 82 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001a6a7:	83 c4 10             	add    esp,0x10
c001a6aa:	85 c0                	test   eax,eax
c001a6ac:	0f 85 ea 00 00 00    	jne    c001a79c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6b2:	83 ec 0c             	sub    esp,0xc
c001a6b5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a6b8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6c0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6c4:	0f af c2             	imul   eax,edx
c001a6c7:	50                   	push   eax
c001a6c8:	e8 99 4a ff ff       	call   c000f166 <malloc>
c001a6cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a6d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6d4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a6d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6da:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6de:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6e2:	0f af c2             	imul   eax,edx
c001a6e5:	99                   	cdq    
c001a6e6:	52                   	push   edx
c001a6e7:	50                   	push   eax
c001a6e8:	56                   	push   esi
c001a6e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a6ec:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a6ef:	83 c4 20             	add    esp,0x20
c001a6f2:	85 c0                	test   eax,eax
c001a6f4:	0f 84 a2 00 00 00    	je     c001a79c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6fa:	31 d2                	xor    edx,edx
c001a6fc:	51                   	push   ecx
c001a6fd:	52                   	push   edx
c001a6fe:	50                   	push   eax
c001a6ff:	56                   	push   esi
c001a700:	e8 a3 81 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001a705:	83 c4 10             	add    esp,0x10
c001a708:	85 c0                	test   eax,eax
c001a70a:	0f 85 8c 00 00 00    	jne    c001a79c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a710:	83 ec 0c             	sub    esp,0xc
c001a713:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a717:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a71b:	31 ed                	xor    ebp,ebp
c001a71d:	0f af c2             	imul   eax,edx
c001a720:	50                   	push   eax
c001a721:	e8 40 4a ff ff       	call   c000f166 <malloc>
c001a726:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a729:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a72d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a72f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a733:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a737:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a73b:	0f af c2             	imul   eax,edx
c001a73e:	99                   	cdq    
c001a73f:	52                   	push   edx
c001a740:	50                   	push   eax
c001a741:	56                   	push   esi
c001a742:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a745:	83 c4 20             	add    esp,0x20
c001a748:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a750:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a754:	0f 86 80 00 00 00    	jbe    c001a7da <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a75a:	0f b7 fd             	movzx  edi,bp
c001a75d:	c1 e7 05             	shl    edi,0x5
c001a760:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a764:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a767:	75 6b                	jne    c001a7d4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a769:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a76c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a770:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a777:	52                   	push   edx
c001a778:	31 d2                	xor    edx,edx
c001a77a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a77d:	52                   	push   edx
c001a77e:	50                   	push   eax
c001a77f:	56                   	push   esi
c001a780:	e8 23 81 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001a785:	83 c4 10             	add    esp,0x10
c001a788:	85 c0                	test   eax,eax
c001a78a:	74 17                	je     c001a7a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a78c:	83 ec 0c             	sub    esp,0xc
c001a78f:	68 e9 83 02 c0       	push   0xc00283e9
c001a794:	e8 be 7a ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a799:	83 c4 10             	add    esp,0x10
c001a79c:	31 c0                	xor    eax,eax
c001a79e:	e9 87 00 00 00       	jmp    c001a82a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a7a3:	83 ec 0c             	sub    esp,0xc
c001a7a6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a7a9:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a7ac:	50                   	push   eax
c001a7ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a7b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7b5:	56                   	push   esi
c001a7b6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a7ba:	e8 e0 fb ff ff       	call   c001a39f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a7bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7c3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a7c7:	83 c4 20             	add    esp,0x20
c001a7ca:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a7ce:	73 04                	jae    c001a7d4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a7d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7d4:	45                   	inc    ebp
c001a7d5:	e9 76 ff ff ff       	jmp    c001a750 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a7da:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a7de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7e6:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a7f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a7fa:	05 00 10 00 00       	add    eax,0x1000
c001a7ff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a806:	e8 6b 49 ff ff       	call   c000f176 <free>
c001a80b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a80e:	e8 63 49 ff ff       	call   c000f176 <free>
c001a813:	58                   	pop    eax
c001a814:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a818:	e8 59 49 ff ff       	call   c000f176 <free>
c001a81d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a820:	e8 23 80 ff ff       	call   c0012848 <File::close()>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	b0 01                	mov    al,0x1
c001a82a:	83 c4 3c             	add    esp,0x3c
c001a82d:	5b                   	pop    ebx
c001a82e:	5e                   	pop    esi
c001a82f:	5f                   	pop    edi
c001a830:	5d                   	pop    ebp
c001a831:	c3                   	ret    

c001a832 <Thr::runtimeReferenceHelper()>:
c001a832:	83 ec 18             	sub    esp,0x18
c001a835:	68 f1 83 02 c0       	push   0xc00283f1
c001a83a:	e8 18 7a ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a83f:	fa                   	cli    
c001a840:	83 c4 10             	add    esp,0x10
c001a843:	eb fe                	jmp    c001a843 <Thr::runtimeReferenceHelper()+0x11>

c001a845 <Thr::getAddressOfKernelSymbol(char const*)>:
c001a845:	57                   	push   edi
c001a846:	56                   	push   esi
c001a847:	53                   	push   ebx
c001a848:	31 db                	xor    ebx,ebx
c001a84a:	39 1d 00 b8 02 c0    	cmp    DWORD PTR ds:0xc002b800,ebx
c001a850:	7e 3c                	jle    c001a88e <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a852:	8b 34 9d 80 b7 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4880]
c001a859:	31 ff                	xor    edi,edi
c001a85b:	39 3c 9d 80 b6 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4980],edi
c001a862:	7e 27                	jle    c001a88b <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a864:	50                   	push   eax
c001a865:	50                   	push   eax
c001a866:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a86a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a86c:	03 04 9d 00 b7 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd4900]
c001a873:	50                   	push   eax
c001a874:	e8 63 5f fe ff       	call   c00007dc <strcmp>
c001a879:	83 c4 10             	add    esp,0x10
c001a87c:	85 c0                	test   eax,eax
c001a87e:	75 05                	jne    c001a885 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a880:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a883:	eb 0b                	jmp    c001a890 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a885:	83 c6 10             	add    esi,0x10
c001a888:	47                   	inc    edi
c001a889:	eb d0                	jmp    c001a85b <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a88b:	43                   	inc    ebx
c001a88c:	eb bc                	jmp    c001a84a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a88e:	31 c0                	xor    eax,eax
c001a890:	5b                   	pop    ebx
c001a891:	5e                   	pop    esi
c001a892:	5f                   	pop    edi
c001a893:	c3                   	ret    

c001a894 <Thr::loadKernelSymbolTable(char const*)>:
c001a894:	55                   	push   ebp
c001a895:	57                   	push   edi
c001a896:	56                   	push   esi
c001a897:	53                   	push   ebx
c001a898:	83 ec 68             	sub    esp,0x68
c001a89b:	8b 35 54 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b854
c001a8a1:	68 14 01 00 00       	push   0x114
c001a8a6:	e8 bd 78 ff ff       	call   c0012168 <operator new(unsigned long)>
c001a8ab:	83 c4 0c             	add    esp,0xc
c001a8ae:	89 c3                	mov    ebx,eax
c001a8b0:	56                   	push   esi
c001a8b1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a8b5:	50                   	push   eax
c001a8b6:	e8 cb 7e ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001a8bb:	5e                   	pop    esi
c001a8bc:	5f                   	pop    edi
c001a8bd:	6a 01                	push   0x1
c001a8bf:	53                   	push   ebx
c001a8c0:	e8 25 7f ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001a8c5:	83 c4 10             	add    esp,0x10
c001a8c8:	31 d2                	xor    edx,edx
c001a8ca:	85 c0                	test   eax,eax
c001a8cc:	0f 85 79 02 00 00    	jne    c001ab4b <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a8d2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a8da:	83 ec 0c             	sub    esp,0xc
c001a8dd:	6a 34                	push   0x34
c001a8df:	e8 82 48 ff ff       	call   c000f166 <malloc>
c001a8e4:	59                   	pop    ecx
c001a8e5:	89 c7                	mov    edi,eax
c001a8e7:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a8eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8ed:	56                   	push   esi
c001a8ee:	57                   	push   edi
c001a8ef:	6a 00                	push   0x0
c001a8f1:	6a 34                	push   0x34
c001a8f3:	53                   	push   ebx
c001a8f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a8f7:	83 c4 20             	add    esp,0x20
c001a8fa:	85 c0                	test   eax,eax
c001a8fc:	74 17                	je     c001a915 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001a8fe:	83 ec 0c             	sub    esp,0xc
c001a901:	68 13 84 02 c0       	push   0xc0028413
c001a906:	e8 e8 e0 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001a90b:	83 c4 10             	add    esp,0x10
c001a90e:	31 d2                	xor    edx,edx
c001a910:	e9 36 02 00 00       	jmp    c001ab4b <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a915:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001a91b:	75 e1                	jne    c001a8fe <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a91d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001a920:	85 c0                	test   eax,eax
c001a922:	74 da                	je     c001a8fe <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a924:	52                   	push   edx
c001a925:	31 d2                	xor    edx,edx
c001a927:	52                   	push   edx
c001a928:	50                   	push   eax
c001a929:	53                   	push   ebx
c001a92a:	e8 79 7f ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001a92f:	83 c4 10             	add    esp,0x10
c001a932:	85 c0                	test   eax,eax
c001a934:	75 c8                	jne    c001a8fe <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a936:	83 ec 0c             	sub    esp,0xc
c001a939:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a93d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a941:	31 ed                	xor    ebp,ebp
c001a943:	0f af c2             	imul   eax,edx
c001a946:	50                   	push   eax
c001a947:	e8 1a 48 ff ff       	call   c000f166 <malloc>
c001a94c:	89 34 24             	mov    DWORD PTR [esp],esi
c001a94f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a953:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001a955:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a959:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a95d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a961:	0f af c2             	imul   eax,edx
c001a964:	99                   	cdq    
c001a965:	52                   	push   edx
c001a966:	50                   	push   eax
c001a967:	53                   	push   ebx
c001a968:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a96b:	83 c4 20             	add    esp,0x20
c001a96e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a976:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001a97e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a986:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a98e:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001a992:	0f 86 aa 00 00 00    	jbe    c001aa42 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001a998:	0f b7 f5             	movzx  esi,bp
c001a99b:	6b f6 28             	imul   esi,esi,0x28
c001a99e:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001a9a2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a9a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9a9:	50                   	push   eax
c001a9aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a9ae:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001a9b2:	8b 16                	mov    edx,DWORD PTR [esi]
c001a9b4:	6b c0 28             	imul   eax,eax,0x28
c001a9b7:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001a9bb:	89 d0                	mov    eax,edx
c001a9bd:	31 d2                	xor    edx,edx
c001a9bf:	52                   	push   edx
c001a9c0:	50                   	push   eax
c001a9c1:	53                   	push   ebx
c001a9c2:	e8 e1 7e ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001a9c7:	83 c4 0c             	add    esp,0xc
c001a9ca:	6a 20                	push   0x20
c001a9cc:	6a 00                	push   0x0
c001a9ce:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9d2:	52                   	push   edx
c001a9d3:	e8 14 5d fe ff       	call   c00006ec <memset>
c001a9d8:	58                   	pop    eax
c001a9d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9db:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a9df:	51                   	push   ecx
c001a9e0:	8d 54 24 40          	lea    edx,[esp+0x40]
c001a9e4:	52                   	push   edx
c001a9e5:	6a 00                	push   0x0
c001a9e7:	6a 1f                	push   0x1f
c001a9e9:	53                   	push   ebx
c001a9ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9ed:	83 c4 18             	add    esp,0x18
c001a9f0:	68 2a 84 02 c0       	push   0xc002842a
c001a9f5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9f9:	52                   	push   edx
c001a9fa:	e8 dd 5d fe ff       	call   c00007dc <strcmp>
c001a9ff:	83 c4 10             	add    esp,0x10
c001aa02:	85 c0                	test   eax,eax
c001aa04:	75 0f                	jne    c001aa15 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001aa06:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa15:	50                   	push   eax
c001aa16:	50                   	push   eax
c001aa17:	68 32 84 02 c0       	push   0xc0028432
c001aa1c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aa20:	50                   	push   eax
c001aa21:	e8 b6 5d fe ff       	call   c00007dc <strcmp>
c001aa26:	83 c4 10             	add    esp,0x10
c001aa29:	85 c0                	test   eax,eax
c001aa2b:	75 0f                	jne    c001aa3c <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001aa2d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa3c:	45                   	inc    ebp
c001aa3d:	e9 4c ff ff ff       	jmp    c001a98e <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aa42:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa47:	75 10                	jne    c001aa59 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aa49:	83 ec 0c             	sub    esp,0xc
c001aa4c:	68 3a 84 02 c0       	push   0xc002843a
c001aa51:	e8 9d df ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001aa56:	83 c4 10             	add    esp,0x10
c001aa59:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa5e:	75 10                	jne    c001aa70 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aa60:	83 ec 0c             	sub    esp,0xc
c001aa63:	68 3a 84 02 c0       	push   0xc002843a
c001aa68:	e8 86 df ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001aa6d:	83 c4 10             	add    esp,0x10
c001aa70:	31 d2                	xor    edx,edx
c001aa72:	50                   	push   eax
c001aa73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa77:	52                   	push   edx
c001aa78:	50                   	push   eax
c001aa79:	53                   	push   ebx
c001aa7a:	e8 29 7e ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001aa7f:	5a                   	pop    edx
c001aa80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aa84:	e8 dd 46 ff ff       	call   c000f166 <malloc>
c001aa89:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aa91:	89 c1                	mov    ecx,eax
c001aa93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa9b:	5e                   	pop    esi
c001aa9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa9e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001aaa2:	55                   	push   ebp
c001aaa3:	51                   	push   ecx
c001aaa4:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001aaa8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aab0:	53                   	push   ebx
c001aab1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aab4:	83 c4 14             	add    esp,0x14
c001aab7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aabb:	e8 a6 46 ff ff       	call   c000f166 <malloc>
c001aac0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aac3:	89 c6                	mov    esi,eax
c001aac5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aac7:	56                   	push   esi
c001aac8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aacc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aad0:	53                   	push   ebx
c001aad1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aad4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aad8:	8b 15 00 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b800
c001aade:	83 c4 1c             	add    esp,0x1c
c001aae1:	c1 e8 04             	shr    eax,0x4
c001aae4:	89 04 95 80 b6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4980],eax
c001aaeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aaef:	31 d2                	xor    edx,edx
c001aaf1:	52                   	push   edx
c001aaf2:	50                   	push   eax
c001aaf3:	53                   	push   ebx
c001aaf4:	e8 af 7d ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001aaf9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aafc:	31 d2                	xor    edx,edx
c001aafe:	56                   	push   esi
c001aaff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab03:	52                   	push   edx
c001ab04:	50                   	push   eax
c001ab05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab07:	53                   	push   ebx
c001ab08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab0b:	83 c4 14             	add    esp,0x14
c001ab0e:	53                   	push   ebx
c001ab0f:	e8 34 7d ff ff       	call   c0012848 <File::close()>
c001ab14:	5d                   	pop    ebp
c001ab15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab19:	e8 58 46 ff ff       	call   c000f176 <free>
c001ab1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ab21:	e8 50 46 ff ff       	call   c000f176 <free>
c001ab26:	a1 00 b8 02 c0       	mov    eax,ds:0xc002b800
c001ab2b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ab2f:	8d 50 01             	lea    edx,[eax+0x1]
c001ab32:	89 0c 85 80 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4880],ecx
c001ab39:	89 15 00 b8 02 c0    	mov    DWORD PTR ds:0xc002b800,edx
c001ab3f:	89 34 85 00 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4900],esi
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	b2 01                	mov    dl,0x1
c001ab4b:	83 c4 5c             	add    esp,0x5c
c001ab4e:	88 d0                	mov    al,dl
c001ab50:	5b                   	pop    ebx
c001ab51:	5e                   	pop    esi
c001ab52:	5f                   	pop    edi
c001ab53:	5d                   	pop    ebp
c001ab54:	c3                   	ret    

c001ab55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ab55:	55                   	push   ebp
c001ab56:	57                   	push   edi
c001ab57:	56                   	push   esi
c001ab58:	53                   	push   ebx
c001ab59:	81 ec 68 03 00 00    	sub    esp,0x368
c001ab5f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ab66:	8b 1d 54 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b854
c001ab6c:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ab70:	68 14 01 00 00       	push   0x114
c001ab75:	e8 ee 75 ff ff       	call   c0012168 <operator new(unsigned long)>
c001ab7a:	83 c4 0c             	add    esp,0xc
c001ab7d:	89 c7                	mov    edi,eax
c001ab7f:	53                   	push   ebx
c001ab80:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ab87:	50                   	push   eax
c001ab88:	e8 f9 7b ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001ab8d:	5e                   	pop    esi
c001ab8e:	5d                   	pop    ebp
c001ab8f:	6a 01                	push   0x1
c001ab91:	57                   	push   edi
c001ab92:	e8 53 7c ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001ab97:	83 c4 10             	add    esp,0x10
c001ab9a:	85 c0                	test   eax,eax
c001ab9c:	0f 85 10 07 00 00    	jne    c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001aba2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001abaa:	83 ec 0c             	sub    esp,0xc
c001abad:	6a 34                	push   0x34
c001abaf:	e8 b2 45 ff ff       	call   c000f166 <malloc>
c001abb4:	5b                   	pop    ebx
c001abb5:	89 c5                	mov    ebp,eax
c001abb7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001abbb:	8b 07                	mov    eax,DWORD PTR [edi]
c001abbd:	53                   	push   ebx
c001abbe:	55                   	push   ebp
c001abbf:	6a 00                	push   0x0
c001abc1:	6a 34                	push   0x34
c001abc3:	57                   	push   edi
c001abc4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abc7:	83 c4 20             	add    esp,0x20
c001abca:	85 c0                	test   eax,eax
c001abcc:	0f 85 e0 06 00 00    	jne    c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abd2:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001abd9:	0f 85 d3 06 00 00    	jne    c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abdf:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abe2:	85 c0                	test   eax,eax
c001abe4:	0f 84 c8 06 00 00    	je     c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abea:	31 d2                	xor    edx,edx
c001abec:	51                   	push   ecx
c001abed:	52                   	push   edx
c001abee:	50                   	push   eax
c001abef:	57                   	push   edi
c001abf0:	e8 b3 7c ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001abf5:	83 c4 10             	add    esp,0x10
c001abf8:	85 c0                	test   eax,eax
c001abfa:	0f 85 b2 06 00 00    	jne    c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac00:	83 ec 0c             	sub    esp,0xc
c001ac03:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001ac06:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ac0a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac0e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac12:	0f af c2             	imul   eax,edx
c001ac15:	50                   	push   eax
c001ac16:	e8 4b 45 ff ff       	call   c000f166 <malloc>
c001ac1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac22:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac28:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ac2c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac30:	0f af c2             	imul   eax,edx
c001ac33:	99                   	cdq    
c001ac34:	52                   	push   edx
c001ac35:	50                   	push   eax
c001ac36:	57                   	push   edi
c001ac37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac3a:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001ac3d:	83 c4 20             	add    esp,0x20
c001ac40:	85 c0                	test   eax,eax
c001ac42:	0f 84 6a 06 00 00    	je     c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac48:	52                   	push   edx
c001ac49:	31 d2                	xor    edx,edx
c001ac4b:	52                   	push   edx
c001ac4c:	50                   	push   eax
c001ac4d:	57                   	push   edi
c001ac4e:	e8 55 7c ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001ac53:	83 c4 10             	add    esp,0x10
c001ac56:	85 c0                	test   eax,eax
c001ac58:	0f 85 54 06 00 00    	jne    c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac5e:	83 ec 0c             	sub    esp,0xc
c001ac61:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac65:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac69:	31 f6                	xor    esi,esi
c001ac6b:	0f af c2             	imul   eax,edx
c001ac6e:	50                   	push   eax
c001ac6f:	e8 f2 44 ff ff       	call   c000f166 <malloc>
c001ac74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac77:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ac7b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac81:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac85:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac89:	0f af c2             	imul   eax,edx
c001ac8c:	99                   	cdq    
c001ac8d:	52                   	push   edx
c001ac8e:	50                   	push   eax
c001ac8f:	57                   	push   edi
c001ac90:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac93:	83 c4 20             	add    esp,0x20
c001ac96:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001ac9a:	0f 86 af 00 00 00    	jbe    c001ad4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001aca0:	0f b7 de             	movzx  ebx,si
c001aca3:	c1 e3 05             	shl    ebx,0x5
c001aca6:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001acaa:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001acad:	0f 85 96 00 00 00    	jne    c001ad49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001acb3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001acb6:	31 d2                	xor    edx,edx
c001acb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acbc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001acbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acc3:	50                   	push   eax
c001acc4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001acc7:	52                   	push   edx
c001acc8:	50                   	push   eax
c001acc9:	57                   	push   edi
c001acca:	e8 d9 7b ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001accf:	83 c4 10             	add    esp,0x10
c001acd2:	85 c0                	test   eax,eax
c001acd4:	0f 85 d8 05 00 00    	jne    c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acda:	52                   	push   edx
c001acdb:	52                   	push   edx
c001acdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ace0:	68 54 84 02 c0       	push   0xc0028454
c001ace5:	e8 6d 75 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001acea:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001acf1:	31 d2                	xor    edx,edx
c001acf3:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001acf7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001acfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acff:	59                   	pop    ecx
c001ad00:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ad02:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ad09:	50                   	push   eax
c001ad0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad12:	52                   	push   edx
c001ad13:	50                   	push   eax
c001ad14:	57                   	push   edi
c001ad15:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad18:	83 c4 18             	add    esp,0x18
c001ad1b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad1e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad21:	50                   	push   eax
c001ad22:	68 78 84 02 c0       	push   0xc0028478
c001ad27:	e8 2b 75 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001ad2c:	83 c4 0c             	add    esp,0xc
c001ad2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad32:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad35:	50                   	push   eax
c001ad36:	6a 00                	push   0x0
c001ad38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ad40:	50                   	push   eax
c001ad41:	e8 a6 59 fe ff       	call   c00006ec <memset>
c001ad46:	83 c4 10             	add    esp,0x10
c001ad49:	46                   	inc    esi
c001ad4a:	e9 47 ff ff ff       	jmp    c001ac96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ad4f:	31 db                	xor    ebx,ebx
c001ad51:	50                   	push   eax
c001ad52:	68 00 01 00 00       	push   0x100
c001ad57:	6a 00                	push   0x0
c001ad59:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ad5d:	50                   	push   eax
c001ad5e:	e8 89 59 fe ff       	call   c00006ec <memset>
c001ad63:	83 c4 0c             	add    esp,0xc
c001ad66:	68 00 01 00 00       	push   0x100
c001ad6b:	6a 00                	push   0x0
c001ad6d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ad74:	50                   	push   eax
c001ad75:	e8 72 59 fe ff       	call   c00006ec <memset>
c001ad7a:	83 c4 10             	add    esp,0x10
c001ad7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ad85:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad8d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ad95:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ad9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ada5:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001ada9:	0f 86 2f 01 00 00    	jbe    c001aede <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001adaf:	0f b7 f3             	movzx  esi,bx
c001adb2:	6b f6 28             	imul   esi,esi,0x28
c001adb5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001adb9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001adbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adc0:	50                   	push   eax
c001adc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adc5:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001adc9:	8b 06                	mov    eax,DWORD PTR [esi]
c001adcb:	6b d2 28             	imul   edx,edx,0x28
c001adce:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001add2:	31 d2                	xor    edx,edx
c001add4:	52                   	push   edx
c001add5:	50                   	push   eax
c001add6:	57                   	push   edi
c001add7:	e8 cc 7a ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001addc:	83 c4 0c             	add    esp,0xc
c001addf:	6a 20                	push   0x20
c001ade1:	6a 00                	push   0x0
c001ade3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001adea:	51                   	push   ecx
c001adeb:	e8 fc 58 fe ff       	call   c00006ec <memset>
c001adf0:	58                   	pop    eax
c001adf1:	8b 07                	mov    eax,DWORD PTR [edi]
c001adf3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001adf7:	52                   	push   edx
c001adf8:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001adff:	51                   	push   ecx
c001ae00:	6a 00                	push   0x0
c001ae02:	6a 1f                	push   0x1f
c001ae04:	57                   	push   edi
c001ae05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae08:	83 c4 1c             	add    esp,0x1c
c001ae0b:	6a 09                	push   0x9
c001ae0d:	68 95 84 02 c0       	push   0xc0028495
c001ae12:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ae19:	51                   	push   ecx
c001ae1a:	e8 34 58 fe ff       	call   c0000653 <memcmp>
c001ae1f:	83 c4 10             	add    esp,0x10
c001ae22:	85 c0                	test   eax,eax
c001ae24:	75 21                	jne    c001ae47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001ae26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae2a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae32:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae36:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae39:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae40:	89 c8                	mov    eax,ecx
c001ae42:	40                   	inc    eax
c001ae43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae47:	50                   	push   eax
c001ae48:	6a 09                	push   0x9
c001ae4a:	68 9f 84 02 c0       	push   0xc002849f
c001ae4f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae56:	50                   	push   eax
c001ae57:	e8 f7 57 fe ff       	call   c0000653 <memcmp>
c001ae5c:	83 c4 10             	add    esp,0x10
c001ae5f:	85 c0                	test   eax,eax
c001ae61:	75 21                	jne    c001ae84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001ae63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae67:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae6f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae73:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae76:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae7d:	89 c8                	mov    eax,ecx
c001ae7f:	40                   	inc    eax
c001ae80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae84:	50                   	push   eax
c001ae85:	50                   	push   eax
c001ae86:	68 2a 84 02 c0       	push   0xc002842a
c001ae8b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae92:	50                   	push   eax
c001ae93:	e8 44 59 fe ff       	call   c00007dc <strcmp>
c001ae98:	83 c4 10             	add    esp,0x10
c001ae9b:	85 c0                	test   eax,eax
c001ae9d:	75 0f                	jne    c001aeae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001ae9f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aeae:	50                   	push   eax
c001aeaf:	50                   	push   eax
c001aeb0:	68 32 84 02 c0       	push   0xc0028432
c001aeb5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001aebc:	50                   	push   eax
c001aebd:	e8 1a 59 fe ff       	call   c00007dc <strcmp>
c001aec2:	83 c4 10             	add    esp,0x10
c001aec5:	85 c0                	test   eax,eax
c001aec7:	75 0f                	jne    c001aed8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001aec9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aed4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aed8:	43                   	inc    ebx
c001aed9:	e9 c7 fe ff ff       	jmp    c001ada5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001aede:	31 d2                	xor    edx,edx
c001aee0:	50                   	push   eax
c001aee1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aee5:	52                   	push   edx
c001aee6:	50                   	push   eax
c001aee7:	57                   	push   edi
c001aee8:	e8 bb 79 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001aeed:	5a                   	pop    edx
c001aeee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aef2:	e8 6f 42 ff ff       	call   c000f166 <malloc>
c001aef7:	31 d2                	xor    edx,edx
c001aef9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aefd:	59                   	pop    ecx
c001aefe:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af00:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001af04:	53                   	push   ebx
c001af05:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af0d:	52                   	push   edx
c001af0e:	50                   	push   eax
c001af0f:	57                   	push   edi
c001af10:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af13:	83 c4 14             	add    esp,0x14
c001af16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af1a:	e8 47 42 ff ff       	call   c000f166 <malloc>
c001af1f:	31 d2                	xor    edx,edx
c001af21:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af25:	83 c4 0c             	add    esp,0xc
c001af28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af2c:	52                   	push   edx
c001af2d:	50                   	push   eax
c001af2e:	57                   	push   edi
c001af2f:	e8 74 79 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001af34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af37:	31 d2                	xor    edx,edx
c001af39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af3d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af43:	52                   	push   edx
c001af44:	50                   	push   eax
c001af45:	57                   	push   edi
c001af46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af49:	83 c4 20             	add    esp,0x20
c001af4c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af58:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001af5c:	0f 84 54 03 00 00    	je     c001b2b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001af62:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001af69:	31 d2                	xor    edx,edx
c001af6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af6f:	c1 e8 03             	shr    eax,0x3
c001af72:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001af76:	50                   	push   eax
c001af77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af7b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001af7f:	52                   	push   edx
c001af80:	50                   	push   eax
c001af81:	57                   	push   edi
c001af82:	e8 21 79 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001af87:	58                   	pop    eax
c001af88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af8c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001af93:	e8 ce 41 ff ff       	call   c000f166 <malloc>
c001af98:	31 d2                	xor    edx,edx
c001af9a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af9e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001afa0:	58                   	pop    eax
c001afa1:	8d 44 24 58          	lea    eax,[esp+0x58]
c001afa5:	50                   	push   eax
c001afa6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afae:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001afb5:	52                   	push   edx
c001afb6:	50                   	push   eax
c001afb7:	57                   	push   edi
c001afb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001afbb:	83 c4 20             	add    esp,0x20
c001afbe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001afc6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001afca:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001afce:	0f 8d c6 02 00 00    	jge    c001b29a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001afd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afdc:	31 db                	xor    ebx,ebx
c001afde:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001afe1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afe9:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001afed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aff1:	c1 e8 08             	shr    eax,0x8
c001aff4:	89 c6                	mov    esi,eax
c001aff6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001affa:	c1 e6 04             	shl    esi,0x4
c001affd:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b001:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b004:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b008:	85 c0                	test   eax,eax
c001b00a:	0f 85 17 01 00 00    	jne    c001b127 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b010:	83 ec 0c             	sub    esp,0xc
c001b013:	b3 01                	mov    bl,0x1
c001b015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b019:	03 06                	add    eax,DWORD PTR [esi]
c001b01b:	50                   	push   eax
c001b01c:	e8 24 f8 ff ff       	call   c001a845 <Thr::getAddressOfKernelSymbol(char const*)>
c001b021:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b025:	83 c4 10             	add    esp,0x10
c001b028:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b02d:	0f 85 f4 00 00 00    	jne    c001b127 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b033:	50                   	push   eax
c001b034:	50                   	push   eax
c001b035:	68 a9 84 02 c0       	push   0xc00284a9
c001b03a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b03e:	03 06                	add    eax,DWORD PTR [esi]
c001b040:	50                   	push   eax
c001b041:	e8 96 57 fe ff       	call   c00007dc <strcmp>
c001b046:	83 c4 10             	add    esp,0x10
c001b049:	85 c0                	test   eax,eax
c001b04b:	75 0a                	jne    c001b057 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b04d:	b8 5c 33 02 c0       	mov    eax,0xc002335c
c001b052:	e9 ca 00 00 00       	jmp    c001b121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b057:	50                   	push   eax
c001b058:	50                   	push   eax
c001b059:	68 b3 84 02 c0       	push   0xc00284b3
c001b05e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b062:	03 06                	add    eax,DWORD PTR [esi]
c001b064:	50                   	push   eax
c001b065:	e8 72 57 fe ff       	call   c00007dc <strcmp>
c001b06a:	83 c4 10             	add    esp,0x10
c001b06d:	85 c0                	test   eax,eax
c001b06f:	75 0a                	jne    c001b07b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b071:	b8 90 30 02 c0       	mov    eax,0xc0023090
c001b076:	e9 a6 00 00 00       	jmp    c001b121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b07b:	53                   	push   ebx
c001b07c:	53                   	push   ebx
c001b07d:	68 bc 84 02 c0       	push   0xc00284bc
c001b082:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b086:	03 06                	add    eax,DWORD PTR [esi]
c001b088:	50                   	push   eax
c001b089:	e8 4e 57 fe ff       	call   c00007dc <strcmp>
c001b08e:	83 c4 10             	add    esp,0x10
c001b091:	85 c0                	test   eax,eax
c001b093:	75 0a                	jne    c001b09f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b095:	b8 5c 34 02 c0       	mov    eax,0xc002345c
c001b09a:	e9 82 00 00 00       	jmp    c001b121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b09f:	51                   	push   ecx
c001b0a0:	51                   	push   ecx
c001b0a1:	68 c6 84 02 c0       	push   0xc00284c6
c001b0a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0aa:	03 06                	add    eax,DWORD PTR [esi]
c001b0ac:	50                   	push   eax
c001b0ad:	e8 2a 57 fe ff       	call   c00007dc <strcmp>
c001b0b2:	83 c4 10             	add    esp,0x10
c001b0b5:	85 c0                	test   eax,eax
c001b0b7:	74 63                	je     c001b11c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b0b9:	50                   	push   eax
c001b0ba:	50                   	push   eax
c001b0bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0bf:	03 06                	add    eax,DWORD PTR [esi]
c001b0c1:	50                   	push   eax
c001b0c2:	68 cf 84 02 c0       	push   0xc00284cf
c001b0c7:	e8 8b 71 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001b0cc:	58                   	pop    eax
c001b0cd:	5a                   	pop    edx
c001b0ce:	68 e9 84 02 c0       	push   0xc00284e9
c001b0d3:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b0da:	53                   	push   ebx
c001b0db:	e8 ab 56 fe ff       	call   c000078b <strcpy>
c001b0e0:	59                   	pop    ecx
c001b0e1:	58                   	pop    eax
c001b0e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0e6:	03 06                	add    eax,DWORD PTR [esi]
c001b0e8:	50                   	push   eax
c001b0e9:	53                   	push   ebx
c001b0ea:	e8 53 57 fe ff       	call   c0000842 <strcat>
c001b0ef:	58                   	pop    eax
c001b0f0:	5a                   	pop    edx
c001b0f1:	68 7f 85 02 c0       	push   0xc002857f
c001b0f6:	53                   	push   ebx
c001b0f7:	e8 46 57 fe ff       	call   c0000842 <strcat>
c001b0fc:	83 c4 10             	add    esp,0x10
c001b0ff:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b104:	0f 84 4b 01 00 00    	je     c001b255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b10a:	83 ec 0c             	sub    esp,0xc
c001b10d:	53                   	push   ebx
c001b10e:	e8 e0 d8 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001b113:	83 c4 10             	add    esp,0x10
c001b116:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b11a:	eb 0b                	jmp    c001b127 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b11c:	b8 dc 31 02 c0       	mov    eax,0xc00231dc
c001b121:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b125:	b3 01                	mov    bl,0x1
c001b127:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b12c:	0f 85 80 00 00 00    	jne    c001b1b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b132:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b139:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b13d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b141:	01 ce                	add    esi,ecx
c001b143:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b14b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b14d:	0f 94 c2             	sete   dl
c001b150:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b158:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b15d:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b161:	84 db                	test   bl,bl
c001b163:	74 31                	je     c001b196 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b165:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b169:	01 c3                	add    ebx,eax
c001b16b:	84 d2                	test   dl,dl
c001b16d:	75 0a                	jne    c001b179 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b16f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b173:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b177:	76 32                	jbe    c001b1ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b179:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b17e:	0f 84 d1 00 00 00    	je     c001b255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b184:	83 ec 0c             	sub    esp,0xc
c001b187:	68 00 85 02 c0       	push   0xc0028500
c001b18c:	e8 62 d8 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001b191:	83 c4 10             	add    esp,0x10
c001b194:	eb 15                	jmp    c001b1ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b196:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b199:	84 d2                	test   dl,dl
c001b19b:	75 0e                	jne    c001b1ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b19d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b1a1:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b1a5:	77 04                	ja     c001b1ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b1a7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b1ab:	89 1e                	mov    DWORD PTR [esi],ebx
c001b1ad:	e9 df 00 00 00       	jmp    c001b291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b1b2:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b1b7:	75 6e                	jne    c001b227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b1b9:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b1c0:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b1c4:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b1c8:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b1d0:	74 17                	je     c001b1e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1d2:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b1da:	74 0d                	je     c001b1e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1dc:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b1e0:	83 e8 04             	sub    eax,0x4
c001b1e3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b1e7:	76 17                	jbe    c001b200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b1e9:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b1ee:	74 65                	je     c001b255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b1f0:	83 ec 0c             	sub    esp,0xc
c001b1f3:	68 1c 85 02 c0       	push   0xc002851c
c001b1f8:	e8 f6 d7 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001b1fd:	83 c4 10             	add    esp,0x10
c001b200:	8b 16                	mov    edx,DWORD PTR [esi]
c001b202:	84 db                	test   bl,bl
c001b204:	74 13                	je     c001b219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b206:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b20a:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b211:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b215:	01 d0                	add    eax,edx
c001b217:	eb 06                	jmp    c001b21f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b219:	89 d0                	mov    eax,edx
c001b21b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b21f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b223:	89 06                	mov    DWORD PTR [esi],eax
c001b225:	eb 6a                	jmp    c001b291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b227:	50                   	push   eax
c001b228:	50                   	push   eax
c001b229:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b22e:	50                   	push   eax
c001b22f:	68 38 85 02 c0       	push   0xc0028538
c001b234:	e8 1e 70 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001b239:	83 c4 10             	add    esp,0x10
c001b23c:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b241:	74 12                	je     c001b255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b243:	83 ec 0c             	sub    esp,0xc
c001b246:	68 43 85 02 c0       	push   0xc0028543
c001b24b:	e8 a3 d7 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001b250:	83 c4 10             	add    esp,0x10
c001b253:	eb 3c                	jmp    c001b291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b255:	83 ec 0c             	sub    esp,0xc
c001b258:	57                   	push   edi
c001b259:	e8 ea 75 ff ff       	call   c0012848 <File::close()>
c001b25e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b261:	8b 07                	mov    eax,DWORD PTR [edi]
c001b263:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b266:	59                   	pop    ecx
c001b267:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b26b:	e8 06 3f ff ff       	call   c000f176 <free>
c001b270:	5b                   	pop    ebx
c001b271:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b275:	e8 fc 3e ff ff       	call   c000f176 <free>
c001b27a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b27d:	e8 f4 3e ff ff       	call   c000f176 <free>
c001b282:	5e                   	pop    esi
c001b283:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b287:	e8 ea 3e ff ff       	call   c000f176 <free>
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	eb 21                	jmp    c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b291:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b295:	e9 2c fd ff ff       	jmp    c001afc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b29a:	83 ec 0c             	sub    esp,0xc
c001b29d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b2a1:	e8 d0 3e ff ff       	call   c000f176 <free>
c001b2a6:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b2aa:	83 c4 10             	add    esp,0x10
c001b2ad:	e9 a2 fc ff ff       	jmp    c001af54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b2b2:	31 c0                	xor    eax,eax
c001b2b4:	eb 32                	jmp    c001b2e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b2b6:	83 ec 0c             	sub    esp,0xc
c001b2b9:	57                   	push   edi
c001b2ba:	e8 89 75 ff ff       	call   c0012848 <File::close()>
c001b2bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b2c2:	8b 07                	mov    eax,DWORD PTR [edi]
c001b2c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2c7:	58                   	pop    eax
c001b2c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2cc:	e8 a5 3e ff ff       	call   c000f176 <free>
c001b2d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2d4:	e8 9d 3e ff ff       	call   c000f176 <free>
c001b2d9:	5a                   	pop    edx
c001b2da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b2de:	e8 93 3e ff ff       	call   c000f176 <free>
c001b2e3:	83 c4 10             	add    esp,0x10
c001b2e6:	b0 01                	mov    al,0x1
c001b2e8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b2ee:	5b                   	pop    ebx
c001b2ef:	5e                   	pop    esi
c001b2f0:	5f                   	pop    edi
c001b2f1:	5d                   	pop    ebp
c001b2f2:	c3                   	ret    

c001b2f3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b2f3:	56                   	push   esi
c001b2f4:	31 d2                	xor    edx,edx
c001b2f6:	53                   	push   ebx
c001b2f7:	8b 1d 60 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b060
c001b2fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b301:	39 d3                	cmp    ebx,edx
c001b303:	7e 1b                	jle    c001b320 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b305:	8b 04 95 80 b2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4d80]
c001b30c:	39 c8                	cmp    eax,ecx
c001b30e:	77 0d                	ja     c001b31d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b310:	8b 34 95 80 b0 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4f80]
c001b317:	01 c6                	add    esi,eax
c001b319:	39 ce                	cmp    esi,ecx
c001b31b:	77 05                	ja     c001b322 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b31d:	42                   	inc    edx
c001b31e:	eb e1                	jmp    c001b301 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b320:	31 c0                	xor    eax,eax
c001b322:	5b                   	pop    ebx
c001b323:	5e                   	pop    esi
c001b324:	c3                   	ret    

c001b325 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b325:	53                   	push   ebx
c001b326:	31 c0                	xor    eax,eax
c001b328:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b32c:	8b 1d 60 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b060
c001b332:	39 c3                	cmp    ebx,eax
c001b334:	7e 22                	jle    c001b358 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b336:	8b 14 85 80 b2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4d80]
c001b33d:	39 ca                	cmp    edx,ecx
c001b33f:	77 14                	ja     c001b355 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b341:	03 14 85 80 b0 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4f80]
c001b348:	39 ca                	cmp    edx,ecx
c001b34a:	76 09                	jbe    c001b355 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b34c:	8b 04 85 80 b4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4b80]
c001b353:	eb 05                	jmp    c001b35a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b355:	40                   	inc    eax
c001b356:	eb da                	jmp    c001b332 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b358:	31 c0                	xor    eax,eax
c001b35a:	5b                   	pop    ebx
c001b35b:	c3                   	ret    

c001b35c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b35c:	53                   	push   ebx
c001b35d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b361:	53                   	push   ebx
c001b362:	e8 8c ff ff ff       	call   c001b2f3 <Thr::getDriverBaseFromAddress(unsigned long)>
c001b367:	5a                   	pop    edx
c001b368:	31 d2                	xor    edx,edx
c001b36a:	85 c0                	test   eax,eax
c001b36c:	74 04                	je     c001b372 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b36e:	89 da                	mov    edx,ebx
c001b370:	29 c2                	sub    edx,eax
c001b372:	89 d0                	mov    eax,edx
c001b374:	5b                   	pop    ebx
c001b375:	c3                   	ret    

c001b376 <Thr::loadDLL(char const*, bool)>:
c001b376:	55                   	push   ebp
c001b377:	57                   	push   edi
c001b378:	56                   	push   esi
c001b379:	53                   	push   ebx
c001b37a:	81 ec 34 01 00 00    	sub    esp,0x134
c001b380:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b387:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b38e:	56                   	push   esi
c001b38f:	68 5b 85 02 c0       	push   0xc002855b
c001b394:	e8 be 6e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001b399:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b3a0:	e8 c3 6d ff ff       	call   c0012168 <operator new(unsigned long)>
c001b3a5:	83 c4 0c             	add    esp,0xc
c001b3a8:	89 c3                	mov    ebx,eax
c001b3aa:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c001b3b0:	56                   	push   esi
c001b3b1:	50                   	push   eax
c001b3b2:	e8 cf 73 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001b3b7:	83 c4 0c             	add    esp,0xc
c001b3ba:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b3be:	50                   	push   eax
c001b3bf:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b3c3:	50                   	push   eax
c001b3c4:	53                   	push   ebx
c001b3c5:	e8 cc 76 ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c001b3ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3d2:	83 c4 10             	add    esp,0x10
c001b3d5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b3da:	75 0a                	jne    c001b3e6 <Thr::loadDLL(char const*, bool)+0x70>
c001b3dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3e0:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b3e4:	75 3c                	jne    c001b422 <Thr::loadDLL(char const*, bool)+0xac>
c001b3e6:	89 e8                	mov    eax,ebp
c001b3e8:	84 c0                	test   al,al
c001b3ea:	0f 84 3d 01 00 00    	je     c001b52d <Thr::loadDLL(char const*, bool)+0x1b7>
c001b3f0:	50                   	push   eax
c001b3f1:	50                   	push   eax
c001b3f2:	68 6c 85 02 c0       	push   0xc002856c
c001b3f7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b3fb:	53                   	push   ebx
c001b3fc:	e8 8a 53 fe ff       	call   c000078b <strcpy>
c001b401:	58                   	pop    eax
c001b402:	5a                   	pop    edx
c001b403:	56                   	push   esi
c001b404:	53                   	push   ebx
c001b405:	e8 38 54 fe ff       	call   c0000842 <strcat>
c001b40a:	59                   	pop    ecx
c001b40b:	5f                   	pop    edi
c001b40c:	68 7f 85 02 c0       	push   0xc002857f
c001b411:	53                   	push   ebx
c001b412:	e8 2b 54 fe ff       	call   c0000842 <strcat>
c001b417:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b41a:	e8 d4 d5 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001b41f:	83 c4 10             	add    esp,0x10
c001b422:	e8 ee 5f ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c001b427:	51                   	push   ecx
c001b428:	6a 03                	push   0x3
c001b42a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b42e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b432:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b438:	83 d3 00             	adc    ebx,0x0
c001b43b:	89 ca                	mov    edx,ecx
c001b43d:	89 d1                	mov    ecx,edx
c001b43f:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b443:	51                   	push   ecx
c001b444:	50                   	push   eax
c001b445:	e8 0e 66 ff ff       	call   c0011a58 <VAS::allocatePages(int, int)>
c001b44a:	89 34 24             	mov    DWORD PTR [esp],esi
c001b44d:	89 c3                	mov    ebx,eax
c001b44f:	e8 b5 52 fe ff       	call   c0000709 <strlen>
c001b454:	8b 3d 60 b0 02 c0    	mov    edi,DWORD PTR ds:0xc002b060
c001b45a:	40                   	inc    eax
c001b45b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b45e:	e8 03 3d ff ff       	call   c000f166 <malloc>
c001b463:	89 04 bd 80 b4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4b80],eax
c001b46a:	5f                   	pop    edi
c001b46b:	58                   	pop    eax
c001b46c:	a1 60 b0 02 c0       	mov    eax,ds:0xc002b060
c001b471:	56                   	push   esi
c001b472:	ff 34 85 80 b4 02 c0 	push   DWORD PTR [eax*4-0x3ffd4b80]
c001b479:	e8 0d 53 fe ff       	call   c000078b <strcpy>
c001b47e:	a1 60 b0 02 c0       	mov    eax,ds:0xc002b060
c001b483:	8d 50 01             	lea    edx,[eax+0x1]
c001b486:	89 1c 85 80 b2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4d80],ebx
c001b48d:	89 15 60 b0 02 c0    	mov    DWORD PTR ds:0xc002b060,edx
c001b493:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b497:	83 c4 0c             	add    esp,0xc
c001b49a:	89 14 85 80 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f80],edx
c001b4a1:	6a 01                	push   0x1
c001b4a3:	53                   	push   ebx
c001b4a4:	56                   	push   esi
c001b4a5:	e8 ab f6 ff ff       	call   c001ab55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b4aa:	83 c4 10             	add    esp,0x10
c001b4ad:	89 c7                	mov    edi,eax
c001b4af:	fe c8                	dec    al
c001b4b1:	74 16                	je     c001b4c9 <Thr::loadDLL(char const*, bool)+0x153>
c001b4b3:	89 e8                	mov    eax,ebp
c001b4b5:	84 c0                	test   al,al
c001b4b7:	74 10                	je     c001b4c9 <Thr::loadDLL(char const*, bool)+0x153>
c001b4b9:	83 ec 0c             	sub    esp,0xc
c001b4bc:	68 81 85 02 c0       	push   0xc0028581
c001b4c1:	e8 2d d5 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001b4c6:	83 c4 10             	add    esp,0x10
c001b4c9:	31 f6                	xor    esi,esi
c001b4cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b4d3:	05 ff 0f 00 00       	add    eax,0xfff
c001b4d8:	83 d2 00             	adc    edx,0x0
c001b4db:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b4df:	c1 ea 0c             	shr    edx,0xc
c001b4e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b4ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b4ee:	ba 00 00 00 00       	mov    edx,0x0
c001b4f3:	89 d0                	mov    eax,edx
c001b4f5:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b4f9:	73 2c                	jae    c001b527 <Thr::loadDLL(char const*, bool)+0x1b1>
c001b4fb:	e8 15 5f ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c001b500:	89 f5                	mov    ebp,esi
c001b502:	c1 e5 0c             	shl    ebp,0xc
c001b505:	52                   	push   edx
c001b506:	01 dd                	add    ebp,ebx
c001b508:	52                   	push   edx
c001b509:	55                   	push   ebp
c001b50a:	50                   	push   eax
c001b50b:	e8 b0 60 ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c001b510:	83 c4 10             	add    esp,0x10
c001b513:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b516:	75 0c                	jne    c001b524 <Thr::loadDLL(char const*, bool)+0x1ae>
c001b518:	83 ec 0c             	sub    esp,0xc
c001b51b:	55                   	push   ebp
c001b51c:	e8 65 41 ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	46                   	inc    esi
c001b525:	eb a4                	jmp    c001b4cb <Thr::loadDLL(char const*, bool)+0x155>
c001b527:	89 f8                	mov    eax,edi
c001b529:	84 c0                	test   al,al
c001b52b:	75 02                	jne    c001b52f <Thr::loadDLL(char const*, bool)+0x1b9>
c001b52d:	31 db                	xor    ebx,ebx
c001b52f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b535:	89 d8                	mov    eax,ebx
c001b537:	5b                   	pop    ebx
c001b538:	5e                   	pop    esi
c001b539:	5f                   	pop    edi
c001b53a:	5d                   	pop    ebp
c001b53b:	c3                   	ret    

c001b53c <Thr::executeDLL(unsigned long, void*)>:
c001b53c:	56                   	push   esi
c001b53d:	53                   	push   ebx
c001b53e:	51                   	push   ecx
c001b53f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b543:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b547:	85 db                	test   ebx,ebx
c001b549:	75 10                	jne    c001b55b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b54b:	83 ec 0c             	sub    esp,0xc
c001b54e:	68 a0 85 02 c0       	push   0xc00285a0
c001b553:	e8 9b d4 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001b558:	83 c4 10             	add    esp,0x10
c001b55b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b55f:	89 d8                	mov    eax,ebx
c001b561:	5a                   	pop    edx
c001b562:	5b                   	pop    ebx
c001b563:	5e                   	pop    esi
c001b564:	ff e0                	jmp    eax

c001b566 <changeTSS>:
c001b566:	83 ec 0c             	sub    esp,0xc
c001b569:	e8 02 c3 ff ff       	call   c0017870 <CPU::current()>
c001b56e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b574:	83 ec 08             	sub    esp,0x8
c001b577:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001b57a:	05 7c 11 00 00       	add    eax,0x117c
c001b57f:	c1 e1 15             	shl    ecx,0x15
c001b582:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001b587:	29 ca                	sub    edx,ecx
c001b589:	52                   	push   edx
c001b58a:	50                   	push   eax
c001b58b:	e8 98 56 ff ff       	call   c0010c28 <TSS::setESP(unsigned long)>
c001b590:	83 c4 1c             	add    esp,0x1c
c001b593:	c3                   	ret    

c001b594 <Process::addArgs(char**)>:
c001b594:	57                   	push   edi
c001b595:	56                   	push   esi
c001b596:	53                   	push   ebx
c001b597:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b59b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b59f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b5a9:	85 ff                	test   edi,edi
c001b5ab:	74 3d                	je     c001b5ea <Process::addArgs(char**)+0x56>
c001b5ad:	8b 07                	mov    eax,DWORD PTR [edi]
c001b5af:	85 c0                	test   eax,eax
c001b5b1:	74 37                	je     c001b5ea <Process::addArgs(char**)+0x56>
c001b5b3:	31 db                	xor    ebx,ebx
c001b5b5:	83 ec 0c             	sub    esp,0xc
c001b5b8:	50                   	push   eax
c001b5b9:	e8 4b 51 fe ff       	call   c0000709 <strlen>
c001b5be:	40                   	inc    eax
c001b5bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5c2:	e8 9f 3b ff ff       	call   c000f166 <malloc>
c001b5c7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b5ce:	5a                   	pop    edx
c001b5cf:	59                   	pop    ecx
c001b5d0:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b5d3:	43                   	inc    ebx
c001b5d4:	50                   	push   eax
c001b5d5:	e8 b1 51 fe ff       	call   c000078b <strcpy>
c001b5da:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b5e0:	83 c4 10             	add    esp,0x10
c001b5e3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b5e6:	85 c0                	test   eax,eax
c001b5e8:	75 cb                	jne    c001b5b5 <Process::addArgs(char**)+0x21>
c001b5ea:	5b                   	pop    ebx
c001b5eb:	5e                   	pop    esi
c001b5ec:	5f                   	pop    edi
c001b5ed:	c3                   	ret    

c001b5ee <Process::Process(char const*, Process*, char**)>:
c001b5ee:	56                   	push   esi
c001b5ef:	53                   	push   ebx
c001b5f0:	83 ec 14             	sub    esp,0x14
c001b5f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5f7:	05 0c 02 00 00       	add    eax,0x20c
c001b5fc:	bb 07 00 00 00       	mov    ebx,0x7
c001b601:	89 c6                	mov    esi,eax
c001b603:	85 db                	test   ebx,ebx
c001b605:	78 12                	js     c001b619 <Process::Process(char const*, Process*, char**)+0x2b>
c001b607:	83 ec 0c             	sub    esp,0xc
c001b60a:	56                   	push   esi
c001b60b:	e8 da a0 00 00       	call   c00256ea <ThreadControlBlock::ThreadControlBlock()>
c001b610:	83 c4 10             	add    esp,0x10
c001b613:	83 c6 63             	add    esi,0x63
c001b616:	4b                   	dec    ebx
c001b617:	eb ea                	jmp    c001b603 <Process::Process(char const*, Process*, char**)+0x15>
c001b619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b61d:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b628:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b631:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001b636:	8d 50 01             	lea    edx,[eax+0x1]
c001b639:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001b63f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b643:	89 02                	mov    DWORD PTR [edx],eax
c001b645:	83 ec 0c             	sub    esp,0xc
c001b648:	6a 10                	push   0x10
c001b64a:	e8 19 6b ff ff       	call   c0012168 <operator new(unsigned long)>
c001b64f:	83 c4 10             	add    esp,0x10
c001b652:	89 c3                	mov    ebx,eax
c001b654:	83 ec 08             	sub    esp,0x8
c001b657:	6a 00                	push   0x0
c001b659:	53                   	push   ebx
c001b65a:	e8 9d 67 ff ff       	call   c0011dfc <VAS::VAS(bool)>
c001b65f:	83 c4 10             	add    esp,0x10
c001b662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b666:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b670:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b67e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b682:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b68c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b692:	85 c0                	test   eax,eax
c001b694:	74 42                	je     c001b6d8 <Process::Process(char const*, Process*, char**)+0xea>
c001b696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b69a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b6a0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6aa:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b6b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b6ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b6c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6c4:	05 0c 01 00 00       	add    eax,0x10c
c001b6c9:	83 ec 08             	sub    esp,0x8
c001b6cc:	52                   	push   edx
c001b6cd:	50                   	push   eax
c001b6ce:	e8 b8 50 fe ff       	call   c000078b <strcpy>
c001b6d3:	83 c4 10             	add    esp,0x10
c001b6d6:	eb 5c                	jmp    c001b734 <Process::Process(char const*, Process*, char**)+0x146>
c001b6d8:	83 ec 0c             	sub    esp,0xc
c001b6db:	68 60 12 00 00       	push   0x1260
c001b6e0:	e8 83 6a ff ff       	call   c0012168 <operator new(unsigned long)>
c001b6e5:	83 c4 10             	add    esp,0x10
c001b6e8:	89 c3                	mov    ebx,eax
c001b6ea:	83 ec 08             	sub    esp,0x8
c001b6ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6f1:	53                   	push   ebx
c001b6f2:	e8 2f 52 ff ff       	call   c0010926 <VgaText::VgaText(char const*)>
c001b6f7:	83 c4 10             	add    esp,0x10
c001b6fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6fe:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b708:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b70e:	83 ec 0c             	sub    esp,0xc
c001b711:	50                   	push   eax
c001b712:	e8 10 46 ff ff       	call   c000fd27 <addToTerminalCycle(VgaText*)>
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b71e:	05 0c 01 00 00       	add    eax,0x10c
c001b723:	83 ec 08             	sub    esp,0x8
c001b726:	68 ca 85 02 c0       	push   0xc00285ca
c001b72b:	50                   	push   eax
c001b72c:	e8 5a 50 fe ff       	call   c000078b <strcpy>
c001b731:	83 c4 10             	add    esp,0x10
c001b734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b738:	83 c0 0c             	add    eax,0xc
c001b73b:	83 ec 08             	sub    esp,0x8
c001b73e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b742:	50                   	push   eax
c001b743:	e8 43 50 fe ff       	call   c000078b <strcpy>
c001b748:	83 c4 10             	add    esp,0x10
c001b74b:	83 ec 08             	sub    esp,0x8
c001b74e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b752:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b756:	e8 39 fe ff ff       	call   c001b594 <Process::addArgs(char**)>
c001b75b:	83 c4 10             	add    esp,0x10
c001b75e:	83 ec 08             	sub    esp,0x8
c001b761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b769:	e8 ae ee ff ff       	call   c001a61c <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b76e:	83 c4 10             	add    esp,0x10
c001b771:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b775:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b779:	83 f0 01             	xor    eax,0x1
c001b77c:	88 c2                	mov    dl,al
c001b77e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b782:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b788:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b78d:	83 ec 08             	sub    esp,0x8
c001b790:	50                   	push   eax
c001b791:	68 c8 86 02 c0       	push   0xc00286c8
c001b796:	e8 bc 6a ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001b79b:	83 c4 10             	add    esp,0x10
c001b79e:	90                   	nop
c001b79f:	83 c4 14             	add    esp,0x14
c001b7a2:	5b                   	pop    ebx
c001b7a3:	5e                   	pop    esi
c001b7a4:	c3                   	ret    
c001b7a5:	90                   	nop

c001b7a6 <Process::Process(bool, char const*, Process*, char**)>:
c001b7a6:	56                   	push   esi
c001b7a7:	53                   	push   ebx
c001b7a8:	83 ec 14             	sub    esp,0x14
c001b7ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7b7:	05 0c 02 00 00       	add    eax,0x20c
c001b7bc:	bb 07 00 00 00       	mov    ebx,0x7
c001b7c1:	89 c6                	mov    esi,eax
c001b7c3:	85 db                	test   ebx,ebx
c001b7c5:	78 12                	js     c001b7d9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b7c7:	83 ec 0c             	sub    esp,0xc
c001b7ca:	56                   	push   esi
c001b7cb:	e8 1a 9f 00 00       	call   c00256ea <ThreadControlBlock::ThreadControlBlock()>
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	83 c6 63             	add    esi,0x63
c001b7d6:	4b                   	dec    ebx
c001b7d7:	eb ea                	jmp    c001b7c3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b7d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7dd:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7e8:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b7f1:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001b7f6:	8d 50 01             	lea    edx,[eax+0x1]
c001b7f9:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001b7ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b803:	89 02                	mov    DWORD PTR [edx],eax
c001b805:	83 ec 0c             	sub    esp,0xc
c001b808:	6a 10                	push   0x10
c001b80a:	e8 59 69 ff ff       	call   c0012168 <operator new(unsigned long)>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	89 c3                	mov    ebx,eax
c001b814:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b819:	83 ec 08             	sub    esp,0x8
c001b81c:	50                   	push   eax
c001b81d:	53                   	push   ebx
c001b81e:	e8 d9 65 ff ff       	call   c0011dfc <VAS::VAS(bool)>
c001b823:	83 c4 10             	add    esp,0x10
c001b826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b82a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b834:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b83e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b842:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b846:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b850:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b856:	85 c0                	test   eax,eax
c001b858:	74 42                	je     c001b89c <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b85a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b85e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b864:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b86e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b878:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b87e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b888:	05 0c 01 00 00       	add    eax,0x10c
c001b88d:	83 ec 08             	sub    esp,0x8
c001b890:	52                   	push   edx
c001b891:	50                   	push   eax
c001b892:	e8 f4 4e fe ff       	call   c000078b <strcpy>
c001b897:	83 c4 10             	add    esp,0x10
c001b89a:	eb 5c                	jmp    c001b8f8 <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b89c:	83 ec 0c             	sub    esp,0xc
c001b89f:	68 60 12 00 00       	push   0x1260
c001b8a4:	e8 bf 68 ff ff       	call   c0012168 <operator new(unsigned long)>
c001b8a9:	83 c4 10             	add    esp,0x10
c001b8ac:	89 c3                	mov    ebx,eax
c001b8ae:	83 ec 08             	sub    esp,0x8
c001b8b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8b5:	53                   	push   ebx
c001b8b6:	e8 6b 50 ff ff       	call   c0010926 <VgaText::VgaText(char const*)>
c001b8bb:	83 c4 10             	add    esp,0x10
c001b8be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8c2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b8c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8cc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	50                   	push   eax
c001b8d6:	e8 4c 44 ff ff       	call   c000fd27 <addToTerminalCycle(VgaText*)>
c001b8db:	83 c4 10             	add    esp,0x10
c001b8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8e2:	05 0c 01 00 00       	add    eax,0x10c
c001b8e7:	83 ec 08             	sub    esp,0x8
c001b8ea:	68 ca 85 02 c0       	push   0xc00285ca
c001b8ef:	50                   	push   eax
c001b8f0:	e8 96 4e fe ff       	call   c000078b <strcpy>
c001b8f5:	83 c4 10             	add    esp,0x10
c001b8f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8fc:	83 c0 0c             	add    eax,0xc
c001b8ff:	83 ec 08             	sub    esp,0x8
c001b902:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b906:	50                   	push   eax
c001b907:	e8 7f 4e fe ff       	call   c000078b <strcpy>
c001b90c:	83 c4 10             	add    esp,0x10
c001b90f:	83 ec 08             	sub    esp,0x8
c001b912:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b91a:	e8 75 fc ff ff       	call   c001b594 <Process::addArgs(char**)>
c001b91f:	83 c4 10             	add    esp,0x10
c001b922:	90                   	nop
c001b923:	83 c4 14             	add    esp,0x14
c001b926:	5b                   	pop    ebx
c001b927:	5e                   	pop    esi
c001b928:	c3                   	ret    

c001b929 <disableIRQs()>:
c001b929:	fa                   	cli    
c001b92a:	ff 05 2c b8 02 c0    	inc    DWORD PTR ds:0xc002b82c
c001b930:	c3                   	ret    

c001b931 <getIRQNestingLevel()>:
c001b931:	a1 2c b8 02 c0       	mov    eax,ds:0xc002b82c
c001b936:	c3                   	ret    

c001b937 <enableIRQs()>:
c001b937:	a1 2c b8 02 c0       	mov    eax,ds:0xc002b82c
c001b93c:	48                   	dec    eax
c001b93d:	a3 2c b8 02 c0       	mov    ds:0xc002b82c,eax
c001b942:	75 01                	jne    c001b945 <enableIRQs()+0xe>
c001b944:	fb                   	sti    
c001b945:	c3                   	ret    

c001b946 <lockScheduler()>:
c001b946:	eb e1                	jmp    c001b929 <disableIRQs()>

c001b948 <unlockScheduler()>:
c001b948:	eb ed                	jmp    c001b937 <enableIRQs()>

c001b94a <userModeEntryPoint(void*)>:
c001b94a:	83 ec 0c             	sub    esp,0xc
c001b94d:	e8 f6 ff ff ff       	call   c001b948 <unlockScheduler()>
c001b952:	fb                   	sti    
c001b953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b958:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b95b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001b961:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b965:	83 c4 0c             	add    esp,0xc
c001b968:	e9 5d 49 fe ff       	jmp    c00002ca <goToUsermode>

c001b96d <lockStuff()>:
c001b96d:	e8 b7 ff ff ff       	call   c001b929 <disableIRQs()>
c001b972:	ff 05 28 b8 02 c0    	inc    DWORD PTR ds:0xc002b828
c001b978:	c3                   	ret    

c001b979 <taskStartupFunction>:
c001b979:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001b981:	c3                   	ret    

c001b982 <updateTimeUsed()>:
c001b982:	57                   	push   edi
c001b983:	56                   	push   esi
c001b984:	53                   	push   ebx
c001b985:	e8 e6 be ff ff       	call   c0017870 <CPU::current()>
c001b98a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001b991:	74 49                	je     c001b9dc <updateTimeUsed()+0x5a>
c001b993:	0f 31                	rdtsc  
c001b995:	89 c1                	mov    ecx,eax
c001b997:	a3 68 b8 02 c0       	mov    ds:0xc002b868,eax
c001b99c:	2b 0d 58 b8 02 c0    	sub    ecx,DWORD PTR ds:0xc002b858
c001b9a2:	89 d3                	mov    ebx,edx
c001b9a4:	89 0d 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,ecx
c001b9aa:	1b 1d 5c b8 02 c0    	sbb    ebx,DWORD PTR ds:0xc002b85c
c001b9b0:	a3 58 b8 02 c0       	mov    ds:0xc002b858,eax
c001b9b5:	89 1d 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,ebx
c001b9bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9c0:	89 15 6c b8 02 c0    	mov    DWORD PTR ds:0xc002b86c,edx
c001b9c6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001b9c9:	89 15 5c b8 02 c0    	mov    DWORD PTR ds:0xc002b85c,edx
c001b9cf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001b9d2:	01 f1                	add    ecx,esi
c001b9d4:	11 fb                	adc    ebx,edi
c001b9d6:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001b9d9:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001b9dc:	5b                   	pop    ebx
c001b9dd:	5e                   	pop    esi
c001b9de:	5f                   	pop    edi
c001b9df:	c3                   	ret    

c001b9e0 <switchToThread(ThreadControlBlock*)>:
c001b9e0:	53                   	push   ebx
c001b9e1:	83 ec 08             	sub    esp,0x8
c001b9e4:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001b9e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9ed:	85 c0                	test   eax,eax
c001b9ef:	75 30                	jne    c001ba21 <switchToThread(ThreadControlBlock*)+0x41>
c001b9f1:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001b9f4:	3c ff                	cmp    al,0xff
c001b9f6:	74 25                	je     c001ba1d <switchToThread(ThreadControlBlock*)+0x3d>
c001b9f8:	0f b6 d0             	movzx  edx,al
c001b9fb:	b8 84 03 00 00       	mov    eax,0x384
c001ba00:	29 d0                	sub    eax,edx
c001ba02:	c1 e0 10             	shl    eax,0x10
c001ba05:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ba08:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ba0b:	e8 72 ff ff ff       	call   c001b982 <updateTimeUsed()>
c001ba10:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ba14:	83 c4 08             	add    esp,0x8
c001ba17:	5b                   	pop    ebx
c001ba18:	e9 e6 48 fe ff       	jmp    c0000303 <switchToThreadASM>
c001ba1d:	31 c0                	xor    eax,eax
c001ba1f:	eb e7                	jmp    c001ba08 <switchToThread(ThreadControlBlock*)+0x28>
c001ba21:	c7 05 24 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x1
c001ba2b:	83 c4 08             	add    esp,0x8
c001ba2e:	5b                   	pop    ebx
c001ba2f:	c3                   	ret    

c001ba30 <Semaphore::Semaphore(int)>:
c001ba30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba38:	89 10                	mov    DWORD PTR [eax],edx
c001ba3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba3e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ba45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba54:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba5b:	90                   	nop
c001ba5c:	c3                   	ret    
c001ba5d:	90                   	nop

c001ba5e <Mutex::Mutex()>:
c001ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba62:	6a 01                	push   0x1
c001ba64:	50                   	push   eax
c001ba65:	e8 c6 ff ff ff       	call   c001ba30 <Semaphore::Semaphore(int)>
c001ba6a:	83 c4 08             	add    esp,0x8
c001ba6d:	90                   	nop
c001ba6e:	c3                   	ret    
c001ba6f:	90                   	nop

c001ba70 <Process::createThread(void (*)(void*), void*, int)>:
c001ba70:	55                   	push   ebp
c001ba71:	31 c9                	xor    ecx,ecx
c001ba73:	57                   	push   edi
c001ba74:	56                   	push   esi
c001ba75:	53                   	push   ebx
c001ba76:	83 ec 1c             	sub    esp,0x1c
c001ba79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba7d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ba84:	89 f2                	mov    edx,esi
c001ba86:	0f b7 c2             	movzx  eax,dx
c001ba89:	83 e2 01             	and    edx,0x1
c001ba8c:	74 14                	je     c001baa2 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ba8e:	d1 f8                	sar    eax,1
c001ba90:	41                   	inc    ecx
c001ba91:	89 c2                	mov    edx,eax
c001ba93:	83 f9 10             	cmp    ecx,0x10
c001ba96:	75 ee                	jne    c001ba86 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ba98:	83 c4 1c             	add    esp,0x1c
c001ba9b:	31 c0                	xor    eax,eax
c001ba9d:	5b                   	pop    ebx
c001ba9e:	5e                   	pop    esi
c001ba9f:	5f                   	pop    edi
c001baa0:	5d                   	pop    ebp
c001baa1:	c3                   	ret    
c001baa2:	83 ec 08             	sub    esp,0x8
c001baa5:	b8 01 00 00 00       	mov    eax,0x1
c001baaa:	d3 e0                	shl    eax,cl
c001baac:	09 c6                	or     esi,eax
c001baae:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bab4:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001babb:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001babe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bac1:	01 ce                	add    esi,ecx
c001bac3:	89 f0                	mov    eax,esi
c001bac5:	c1 e0 05             	shl    eax,0x5
c001bac8:	01 c6                	add    esi,eax
c001baca:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bacd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bad3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bad9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001badd:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001bae3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bae9:	89 ca                	mov    edx,ecx
c001baeb:	f7 da                	neg    edx
c001baed:	c1 e2 15             	shl    edx,0x15
c001baf0:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001baf6:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001bafc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bb00:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bb0a:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bb10:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bb14:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bb1a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bb24:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bb2e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bb35:	50                   	push   eax
c001bb36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb3a:	68 48 b8 02 c0       	push   0xc002b848
c001bb3f:	e8 fe 99 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bb44:	83 c4 10             	add    esp,0x10
c001bb47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb4b:	83 c4 1c             	add    esp,0x1c
c001bb4e:	5b                   	pop    ebx
c001bb4f:	5e                   	pop    esi
c001bb50:	5f                   	pop    edi
c001bb51:	5d                   	pop    ebp
c001bb52:	c3                   	ret    
c001bb53:	90                   	nop

c001bb54 <Process::createUserThread()>:
c001bb54:	83 ec 0c             	sub    esp,0xc
c001bb57:	68 80 00 00 00       	push   0x80
c001bb5c:	6a 00                	push   0x0
c001bb5e:	68 4a b9 01 c0       	push   0xc001b94a
c001bb63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb67:	e8 04 ff ff ff       	call   c001ba70 <Process::createThread(void (*)(void*), void*, int)>
c001bb6c:	83 c4 1c             	add    esp,0x1c
c001bb6f:	c3                   	ret    

c001bb70 <setupMultitasking(void (*)())>:
c001bb70:	56                   	push   esi
c001bb71:	53                   	push   ebx
c001bb72:	53                   	push   ebx
c001bb73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb77:	eb 10                	jmp    c001bb89 <setupMultitasking(void (*)())+0x19>
c001bb79:	83 ec 0c             	sub    esp,0xc
c001bb7c:	68 48 b8 02 c0       	push   0xc002b848
c001bb81:	e8 0e 99 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	83 ec 0c             	sub    esp,0xc
c001bb8c:	68 48 b8 02 c0       	push   0xc002b848
c001bb91:	e8 e2 98 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bb96:	83 c4 10             	add    esp,0x10
c001bb99:	84 c0                	test   al,al
c001bb9b:	74 dc                	je     c001bb79 <setupMultitasking(void (*)())+0x9>
c001bb9d:	83 ec 0c             	sub    esp,0xc
c001bba0:	68 3b 07 00 00       	push   0x73b
c001bba5:	e8 be 65 ff ff       	call   c0012168 <operator new(unsigned long)>
c001bbaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bbb1:	89 c3                	mov    ebx,eax
c001bbb3:	6a 00                	push   0x0
c001bbb5:	68 ce 85 02 c0       	push   0xc00285ce
c001bbba:	6a 01                	push   0x1
c001bbbc:	50                   	push   eax
c001bbbd:	e8 e4 fb ff ff       	call   c001b7a6 <Process::Process(bool, char const*, Process*, char**)>
c001bbc2:	83 c4 18             	add    esp,0x18
c001bbc5:	89 1d 54 b8 02 c0    	mov    DWORD PTR ds:0xc002b854,ebx
c001bbcb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbd1:	68 f0 86 02 c0       	push   0xc00286f0
c001bbd6:	e8 7c 66 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bbdb:	58                   	pop    eax
c001bbdc:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbe2:	e8 b4 48 ff ff       	call   c001049b <setActiveTerminal(VgaText*)>
c001bbe7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bbef:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bbf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bbf8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bc02:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bc08:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bc0e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bc18:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bc22:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bc2c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bc32:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bc38:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bc42:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bc48:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bc52:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bc58:	5a                   	pop    edx
c001bc59:	59                   	pop    ecx
c001bc5a:	68 ca 85 02 c0       	push   0xc00285ca
c001bc5f:	50                   	push   eax
c001bc60:	e8 26 4b fe ff       	call   c000078b <strcpy>
c001bc65:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bc6c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bc70:	83 c4 14             	add    esp,0x14
c001bc73:	5b                   	pop    ebx
c001bc74:	5e                   	pop    esi
c001bc75:	e9 7b 46 fe ff       	jmp    c00002f5 <switchToThreadASMFirstTime>

c001bc7a <schedule()>:
c001bc7a:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001bc7f:	85 c0                	test   eax,eax
c001bc81:	74 0b                	je     c001bc8e <schedule()+0x14>
c001bc83:	c7 05 24 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x1
c001bc8d:	c3                   	ret    
c001bc8e:	53                   	push   ebx
c001bc8f:	83 ec 14             	sub    esp,0x14
c001bc92:	68 48 b8 02 c0       	push   0xc002b848
c001bc97:	e8 dc 97 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bc9c:	83 c4 10             	add    esp,0x10
c001bc9f:	84 c0                	test   al,al
c001bca1:	75 38                	jne    c001bcdb <schedule()+0x61>
c001bca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcab:	4a                   	dec    edx
c001bcac:	74 32                	je     c001bce0 <schedule()+0x66>
c001bcae:	83 ec 0c             	sub    esp,0xc
c001bcb1:	68 48 b8 02 c0       	push   0xc002b848
c001bcb6:	e8 b5 97 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bcbb:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001bcc2:	89 c3                	mov    ebx,eax
c001bcc4:	e8 cb 97 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bcc9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bcd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcd3:	e8 08 fd ff ff       	call   c001b9e0 <switchToThread(ThreadControlBlock*)>
c001bcd8:	83 c4 10             	add    esp,0x10
c001bcdb:	83 c4 08             	add    esp,0x8
c001bcde:	5b                   	pop    ebx
c001bcdf:	c3                   	ret    
c001bce0:	83 ec 08             	sub    esp,0x8
c001bce3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bcea:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bcf0:	68 48 b8 02 c0       	push   0xc002b848
c001bcf5:	e8 48 98 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bcfa:	83 c4 10             	add    esp,0x10
c001bcfd:	eb af                	jmp    c001bcae <schedule()+0x34>

c001bcff <unlockStuff()>:
c001bcff:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001bd04:	48                   	dec    eax
c001bd05:	a3 28 b8 02 c0       	mov    ds:0xc002b828,eax
c001bd0a:	75 09                	jne    c001bd15 <unlockStuff()+0x16>
c001bd0c:	a1 24 b8 02 c0       	mov    eax,ds:0xc002b824
c001bd11:	85 c0                	test   eax,eax
c001bd13:	75 05                	jne    c001bd1a <unlockStuff()+0x1b>
c001bd15:	e9 1d fc ff ff       	jmp    c001b937 <enableIRQs()>
c001bd1a:	83 ec 0c             	sub    esp,0xc
c001bd1d:	c7 05 24 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x0
c001bd27:	e8 4e ff ff ff       	call   c001bc7a <schedule()>
c001bd2c:	83 c4 0c             	add    esp,0xc
c001bd2f:	e9 03 fc ff ff       	jmp    c001b937 <enableIRQs()>

c001bd34 <Semaphore::tryAcquire()>:
c001bd34:	83 ec 0c             	sub    esp,0xc
c001bd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd3b:	e8 2d fc ff ff       	call   c001b96d <lockStuff()>
c001bd40:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bd43:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bd45:	7c 0b                	jl     c001bd52 <Semaphore::tryAcquire()+0x1e>
c001bd47:	e8 b3 ff ff ff       	call   c001bcff <unlockStuff()>
c001bd4c:	31 c0                	xor    eax,eax
c001bd4e:	83 c4 0c             	add    esp,0xc
c001bd51:	c3                   	ret    
c001bd52:	42                   	inc    edx
c001bd53:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd56:	e8 a4 ff ff ff       	call   c001bcff <unlockStuff()>
c001bd5b:	b0 01                	mov    al,0x1
c001bd5d:	83 c4 0c             	add    esp,0xc
c001bd60:	c3                   	ret    
c001bd61:	90                   	nop

c001bd62 <Semaphore::assertLocked(char const*)>:
c001bd62:	83 ec 0c             	sub    esp,0xc
c001bd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd6d:	e8 fb fb ff ff       	call   c001b96d <lockStuff()>
c001bd72:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd74:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001bd77:	7c 05                	jl     c001bd7e <Semaphore::assertLocked(char const*)+0x1c>
c001bd79:	83 c4 0c             	add    esp,0xc
c001bd7c:	eb 81                	jmp    c001bcff <unlockStuff()>
c001bd7e:	83 ec 0c             	sub    esp,0xc
c001bd81:	52                   	push   edx
c001bd82:	e8 6c cc ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	83 c4 0c             	add    esp,0xc
c001bd8d:	e9 6d ff ff ff       	jmp    c001bcff <unlockStuff()>

c001bd92 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001bd92:	83 ec 0c             	sub    esp,0xc
c001bd95:	e8 97 fb ff ff       	call   c001b931 <getIRQNestingLevel()>
c001bd9a:	83 ec 08             	sub    esp,0x8
c001bd9d:	50                   	push   eax
c001bd9e:	68 24 87 02 c0       	push   0xc0028724
c001bda3:	e8 af 64 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bda8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bdac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdb1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdb4:	e8 c1 fe ff ff       	call   c001bc7a <schedule()>
c001bdb9:	e8 8a fb ff ff       	call   c001b948 <unlockScheduler()>
c001bdbe:	e8 6e fb ff ff       	call   c001b931 <getIRQNestingLevel()>
c001bdc3:	5a                   	pop    edx
c001bdc4:	59                   	pop    ecx
c001bdc5:	50                   	push   eax
c001bdc6:	68 58 87 02 c0       	push   0xc0028758
c001bdcb:	e8 87 64 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bdd0:	83 c4 1c             	add    esp,0x1c
c001bdd3:	c3                   	ret    

c001bdd4 <blockTask(TaskState)>:
c001bdd4:	83 ec 0c             	sub    esp,0xc
c001bdd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bddb:	e8 66 fb ff ff       	call   c001b946 <lockScheduler()>
c001bde0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bde8:	e8 8d fe ff ff       	call   c001bc7a <schedule()>
c001bded:	83 c4 0c             	add    esp,0xc
c001bdf0:	e9 53 fb ff ff       	jmp    c001b948 <unlockScheduler()>

c001bdf5 <waitTask(int, int*, int)>:
c001bdf5:	83 ec 18             	sub    esp,0x18
c001bdf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdfd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be01:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001be04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be0d:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001be10:	6a 07                	push   0x7
c001be12:	e8 bd ff ff ff       	call   c001bdd4 <blockTask(TaskState)>
c001be17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be1c:	83 c4 10             	add    esp,0x10
c001be1f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001be22:	85 d2                	test   edx,edx
c001be24:	74 0a                	je     c001be30 <waitTask(int, int*, int)+0x3b>
c001be26:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001be29:	89 02                	mov    DWORD PTR [edx],eax
c001be2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be30:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001be33:	83 c4 0c             	add    esp,0xc
c001be36:	c3                   	ret    

c001be37 <nanoSleepUntil(unsigned long long)>:
c001be37:	83 ec 0c             	sub    esp,0xc
c001be3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be42:	3b 05 70 aa 02 c0    	cmp    eax,DWORD PTR ds:0xc002aa70
c001be48:	89 d1                	mov    ecx,edx
c001be4a:	1b 0d 74 aa 02 c0    	sbb    ecx,DWORD PTR ds:0xc002aa74
c001be50:	73 04                	jae    c001be56 <nanoSleepUntil(unsigned long long)+0x1f>
c001be52:	83 c4 0c             	add    esp,0xc
c001be55:	c3                   	ret    
c001be56:	e8 12 fb ff ff       	call   c001b96d <lockStuff()>
c001be5b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be61:	83 ec 08             	sub    esp,0x8
c001be64:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001be67:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001be6a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001be70:	68 3c b8 02 c0       	push   0xc002b83c
c001be75:	e8 c8 96 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001be7a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001be81:	e8 4e ff ff ff       	call   c001bdd4 <blockTask(TaskState)>
c001be86:	83 c4 1c             	add    esp,0x1c
c001be89:	e9 71 fe ff ff       	jmp    c001bcff <unlockStuff()>

c001be8e <nanoSleep(unsigned long long)>:
c001be8e:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c001be93:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c001be99:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001be9d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001bea1:	eb 94                	jmp    c001be37 <nanoSleepUntil(unsigned long long)>

c001bea3 <sleep(unsigned long long)>:
c001bea3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001beab:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001beb0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001beb4:	01 ca                	add    edx,ecx
c001beb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001beba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bebe:	eb ce                	jmp    c001be8e <nanoSleep(unsigned long long)>

c001bec0 <Semaphore::acquire()>:
c001bec0:	83 ec 0c             	sub    esp,0xc
c001bec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec7:	e8 a1 fa ff ff       	call   c001b96d <lockStuff()>
c001becc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001becf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bed1:	7d 0c                	jge    c001bedf <Semaphore::acquire()+0x1f>
c001bed3:	42                   	inc    edx
c001bed4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bed7:	83 c4 0c             	add    esp,0xc
c001beda:	e9 20 fe ff ff       	jmp    c001bcff <unlockStuff()>
c001bedf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bee5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001beec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001beef:	85 d2                	test   edx,edx
c001bef1:	74 2a                	je     c001bf1d <Semaphore::acquire()+0x5d>
c001bef3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bef6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001befc:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001beff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf05:	83 ec 0c             	sub    esp,0xc
c001bf08:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf0b:	6a 05                	push   0x5
c001bf0d:	e8 c2 fe ff ff       	call   c001bdd4 <blockTask(TaskState)>
c001bf12:	83 c4 10             	add    esp,0x10
c001bf15:	83 c4 0c             	add    esp,0xc
c001bf18:	e9 e2 fd ff ff       	jmp    c001bcff <unlockStuff()>
c001bf1d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf26:	eb d7                	jmp    c001beff <Semaphore::acquire()+0x3f>

c001bf28 <taskReturned>:
c001bf28:	83 ec 18             	sub    esp,0x18
c001bf2b:	68 8c 87 02 c0       	push   0xc002878c
c001bf30:	e8 be ca ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001bf35:	83 c4 10             	add    esp,0x10
c001bf38:	83 ec 0c             	sub    esp,0xc
c001bf3b:	6a 02                	push   0x2
c001bf3d:	e8 92 fe ff ff       	call   c001bdd4 <blockTask(TaskState)>
c001bf42:	e8 ff f9 ff ff       	call   c001b946 <lockScheduler()>
c001bf47:	e8 2e fd ff ff       	call   c001bc7a <schedule()>
c001bf4c:	e8 f7 f9 ff ff       	call   c001b948 <unlockScheduler()>
c001bf51:	83 c4 10             	add    esp,0x10
c001bf54:	eb e2                	jmp    c001bf38 <taskReturned+0x10>

c001bf56 <unblockTask(ThreadControlBlock*)>:
c001bf56:	53                   	push   ebx
c001bf57:	83 ec 08             	sub    esp,0x8
c001bf5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf5e:	e8 e3 f9 ff ff       	call   c001b946 <lockScheduler()>
c001bf63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf66:	85 c0                	test   eax,eax
c001bf68:	74 5c                	je     c001bfc6 <unblockTask(ThreadControlBlock*)+0x70>
c001bf6a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf6d:	48                   	dec    eax
c001bf6e:	74 31                	je     c001bfa1 <unblockTask(ThreadControlBlock*)+0x4b>
c001bf70:	83 ec 0c             	sub    esp,0xc
c001bf73:	68 48 b8 02 c0       	push   0xc002b848
c001bf78:	e8 f3 94 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bf7d:	83 c4 10             	add    esp,0x10
c001bf80:	85 c0                	test   eax,eax
c001bf82:	75 17                	jne    c001bf9b <unblockTask(ThreadControlBlock*)+0x45>
c001bf84:	eb 65                	jmp    c001bfeb <unblockTask(ThreadControlBlock*)+0x95>
c001bf86:	83 ec 08             	sub    esp,0x8
c001bf89:	50                   	push   eax
c001bf8a:	68 48 b8 02 c0       	push   0xc002b848
c001bf8f:	e8 ec 97 00 00       	call   c0025780 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001bf94:	83 c4 10             	add    esp,0x10
c001bf97:	85 c0                	test   eax,eax
c001bf99:	74 50                	je     c001bfeb <unblockTask(ThreadControlBlock*)+0x95>
c001bf9b:	39 c3                	cmp    ebx,eax
c001bf9d:	75 e7                	jne    c001bf86 <unblockTask(ThreadControlBlock*)+0x30>
c001bf9f:	eb 1c                	jmp    c001bfbd <unblockTask(ThreadControlBlock*)+0x67>
c001bfa1:	83 ec 0c             	sub    esp,0xc
c001bfa4:	68 7c 88 02 c0       	push   0xc002887c
c001bfa9:	e8 a9 62 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bfae:	c7 04 24 08 88 02 c0 	mov    DWORD PTR [esp],0xc0028808
c001bfb5:	e8 9d 62 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bfba:	83 c4 10             	add    esp,0x10
c001bfbd:	83 c4 08             	add    esp,0x8
c001bfc0:	5b                   	pop    ebx
c001bfc1:	e9 82 f9 ff ff       	jmp    c001b948 <unlockScheduler()>
c001bfc6:	83 ec 0c             	sub    esp,0xc
c001bfc9:	68 c0 87 02 c0       	push   0xc00287c0
c001bfce:	e8 84 62 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bfd3:	c7 04 24 08 88 02 c0 	mov    DWORD PTR [esp],0xc0028808
c001bfda:	e8 78 62 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bfdf:	83 c4 10             	add    esp,0x10
c001bfe2:	83 c4 08             	add    esp,0x8
c001bfe5:	5b                   	pop    ebx
c001bfe6:	e9 5d f9 ff ff       	jmp    c001b948 <unlockScheduler()>
c001bfeb:	83 ec 08             	sub    esp,0x8
c001bfee:	53                   	push   ebx
c001bfef:	68 48 b8 02 c0       	push   0xc002b848
c001bff4:	e8 49 95 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bff9:	83 c4 10             	add    esp,0x10
c001bffc:	83 c4 08             	add    esp,0x8
c001bfff:	5b                   	pop    ebx
c001c000:	e9 43 f9 ff ff       	jmp    c001b948 <unlockScheduler()>

c001c005 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c005:	55                   	push   ebp
c001c006:	57                   	push   edi
c001c007:	56                   	push   esi
c001c008:	53                   	push   ebx
c001c009:	83 ec 1c             	sub    esp,0x1c
c001c00c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c010:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c013:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c019:	85 c9                	test   ecx,ecx
c001c01b:	7e 20                	jle    c001c03d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c01d:	31 f6                	xor    esi,esi
c001c01f:	83 ec 0c             	sub    esp,0xc
c001c022:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c029:	46                   	inc    esi
c001c02a:	e8 47 31 ff ff       	call   c000f176 <free>
c001c02f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c032:	83 c4 10             	add    esp,0x10
c001c035:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c03b:	7f e2                	jg     c001c01f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c03d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c047:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c04c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c04f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c052:	d3 c0                	rol    eax,cl
c001c054:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c05b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c05e:	89 f7                	mov    edi,esi
c001c060:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c068:	0f 85 4f 01 00 00    	jne    c001c1bd <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c06e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c074:	85 c0                	test   eax,eax
c001c076:	0f 84 aa 00 00 00    	je     c001c126 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c07c:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c07f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c083:	31 c9                	xor    ecx,ecx
c001c085:	eb 10                	jmp    c001c097 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c087:	41                   	inc    ecx
c001c088:	83 f9 10             	cmp    ecx,0x10
c001c08b:	0f 84 95 00 00 00    	je     c001c126 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c091:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c097:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c09e:	d3 fa                	sar    edx,cl
c001c0a0:	83 e2 01             	and    edx,0x1
c001c0a3:	74 e2                	je     c001c087 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0a5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c0a8:	01 ca                	add    edx,ecx
c001c0aa:	89 d5                	mov    ebp,edx
c001c0ac:	c1 e5 05             	shl    ebp,0x5
c001c0af:	01 ea                	add    edx,ebp
c001c0b1:	01 d0                	add    eax,edx
c001c0b3:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c0b9:	83 fd 07             	cmp    ebp,0x7
c001c0bc:	75 c9                	jne    c001c087 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0be:	05 40 02 00 00       	add    eax,0x240
c001c0c3:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c0c6:	83 fd ff             	cmp    ebp,0xffffffff
c001c0c9:	0f 8c 08 01 00 00    	jl     c001c1d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c0cf:	0f 84 b9 01 00 00    	je     c001c28e <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c0d5:	85 ed                	test   ebp,ebp
c001c0d7:	0f 84 a0 01 00 00    	je     c001c27d <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c0dd:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c0df:	75 a6                	jne    c001c087 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0e1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c0e7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c0eb:	01 d0                	add    eax,edx
c001c0ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c0f1:	83 ec 0c             	sub    esp,0xc
c001c0f4:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c0fa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c0fd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c103:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c10a:	50                   	push   eax
c001c10b:	e8 46 fe ff ff       	call   c001bf56 <unblockTask(ThreadControlBlock*)>
c001c110:	83 c4 10             	add    esp,0x10
c001c113:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c116:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c11a:	89 f7                	mov    edi,esi
c001c11c:	41                   	inc    ecx
c001c11d:	83 f9 10             	cmp    ecx,0x10
c001c120:	0f 85 6b ff ff ff    	jne    c001c091 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c126:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c12c:	85 c0                	test   eax,eax
c001c12e:	74 5d                	je     c001c18d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c130:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c136:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c13c:	74 4f                	je     c001c18d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c13e:	83 ec 0c             	sub    esp,0xc
c001c141:	68 48 b8 02 c0       	push   0xc002b848
c001c146:	e8 25 93 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c14b:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c152:	89 c7                	mov    edi,eax
c001c154:	e8 1f 93 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c159:	83 c4 10             	add    esp,0x10
c001c15c:	84 c0                	test   al,al
c001c15e:	0f 84 e4 00 00 00    	je     c001c248 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c164:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c167:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c16d:	85 d2                	test   edx,edx
c001c16f:	74 0f                	je     c001c180 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c171:	83 ec 0c             	sub    esp,0xc
c001c174:	8b 02                	mov    eax,DWORD PTR [edx]
c001c176:	52                   	push   edx
c001c177:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c17a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c17d:	83 c4 10             	add    esp,0x10
c001c180:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c18a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c18d:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c193:	85 db                	test   ebx,ebx
c001c195:	74 16                	je     c001c1ad <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c197:	83 ec 0c             	sub    esp,0xc
c001c19a:	53                   	push   ebx
c001c19b:	e8 4c 56 ff ff       	call   c00117ec <VAS::~VAS()>
c001c1a0:	58                   	pop    eax
c001c1a1:	5a                   	pop    edx
c001c1a2:	6a 10                	push   0x10
c001c1a4:	53                   	push   ebx
c001c1a5:	e8 cd 5f ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001c1aa:	83 c4 10             	add    esp,0x10
c001c1ad:	83 ec 0c             	sub    esp,0xc
c001c1b0:	68 d5 85 02 c0       	push   0xc00285d5
c001c1b5:	e8 9d 60 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c1ba:	83 c4 10             	add    esp,0x10
c001c1bd:	83 ec 08             	sub    esp,0x8
c001c1c0:	68 3b 07 00 00       	push   0x73b
c001c1c5:	68 e3 85 02 c0       	push   0xc00285e3
c001c1ca:	e8 88 60 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c1cf:	83 c4 2c             	add    esp,0x2c
c001c1d2:	5b                   	pop    ebx
c001c1d3:	5e                   	pop    esi
c001c1d4:	5f                   	pop    edi
c001c1d5:	5d                   	pop    ebp
c001c1d6:	c3                   	ret    
c001c1d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1db:	83 ec 0c             	sub    esp,0xc
c001c1de:	68 c0 88 02 c0       	push   0xc00288c0
c001c1e3:	e8 0b c8 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001c1e8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c1eb:	83 c4 10             	add    esp,0x10
c001c1ee:	89 f7                	mov    edi,esi
c001c1f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1f4:	e9 8e fe ff ff       	jmp    c001c087 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1f9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c1ff:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c205:	75 1c                	jne    c001c223 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c207:	83 ec 0c             	sub    esp,0xc
c001c20a:	68 28 89 02 c0       	push   0xc0028928
c001c20f:	e8 43 60 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c214:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c21b:	e8 b4 fb ff ff       	call   c001bdd4 <blockTask(TaskState)>
c001c220:	83 c4 10             	add    esp,0x10
c001c223:	83 ec 08             	sub    esp,0x8
c001c226:	56                   	push   esi
c001c227:	68 48 b8 02 c0       	push   0xc002b848
c001c22c:	e8 11 93 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c231:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c238:	e8 33 92 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c23d:	83 c4 10             	add    esp,0x10
c001c240:	39 f8                	cmp    eax,edi
c001c242:	0f 84 1c ff ff ff    	je     c001c164 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c248:	83 ec 0c             	sub    esp,0xc
c001c24b:	68 48 b8 02 c0       	push   0xc002b848
c001c250:	e8 1b 92 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c255:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c25c:	89 c6                	mov    esi,eax
c001c25e:	e8 31 92 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	39 f3                	cmp    ebx,esi
c001c268:	74 b9                	je     c001c223 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c26a:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c26d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c270:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c276:	75 ab                	jne    c001c223 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c278:	e9 7c ff ff ff       	jmp    c001c1f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c27d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c281:	83 ec 0c             	sub    esp,0xc
c001c284:	68 f4 88 02 c0       	push   0xc00288f4
c001c289:	e9 55 ff ff ff       	jmp    c001c1e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c28e:	8b 36                	mov    esi,DWORD PTR [esi]
c001c290:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c294:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c297:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c29a:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c2a0:	01 d7                	add    edi,edx
c001c2a2:	89 f8                	mov    eax,edi
c001c2a4:	e9 44 fe ff ff       	jmp    c001c0ed <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c2a9 <cleanerTaskFunction(void*)>:
c001c2a9:	53                   	push   ebx
c001c2aa:	83 ec 08             	sub    esp,0x8
c001c2ad:	e8 96 f6 ff ff       	call   c001b948 <unlockScheduler()>
c001c2b2:	e8 8f f6 ff ff       	call   c001b946 <lockScheduler()>
c001c2b7:	80 3d 0c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b80c,0x0
c001c2be:	0f 85 8e 00 00 00    	jne    c001c352 <cleanerTaskFunction(void*)+0xa9>
c001c2c4:	83 ec 0c             	sub    esp,0xc
c001c2c7:	6a 02                	push   0x2
c001c2c9:	e8 c4 fa ff ff       	call   c001bd92 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c2ce:	83 c4 10             	add    esp,0x10
c001c2d1:	c6 05 0c b8 02 c0 00 	mov    BYTE PTR ds:0xc002b80c,0x0
c001c2d8:	e8 90 f6 ff ff       	call   c001b96d <lockStuff()>
c001c2dd:	e8 64 f6 ff ff       	call   c001b946 <lockScheduler()>
c001c2e2:	83 ec 0c             	sub    esp,0xc
c001c2e5:	68 30 b8 02 c0       	push   0xc002b830
c001c2ea:	e8 89 91 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c2ef:	83 c4 10             	add    esp,0x10
c001c2f2:	84 c0                	test   al,al
c001c2f4:	75 40                	jne    c001c336 <cleanerTaskFunction(void*)+0x8d>
c001c2f6:	83 ec 0c             	sub    esp,0xc
c001c2f9:	68 30 b8 02 c0       	push   0xc002b830
c001c2fe:	e8 6d 91 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c303:	c7 04 24 30 b8 02 c0 	mov    DWORD PTR [esp],0xc002b830
c001c30a:	89 c3                	mov    ebx,eax
c001c30c:	e8 83 91 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c311:	c7 04 24 f9 85 02 c0 	mov    DWORD PTR [esp],0xc00285f9
c001c318:	e8 3a 5f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c31d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c320:	e8 e0 fc ff ff       	call   c001c005 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c325:	c7 04 24 12 86 02 c0 	mov    DWORD PTR [esp],0xc0028612
c001c32c:	e8 26 5f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c331:	83 c4 10             	add    esp,0x10
c001c334:	eb ac                	jmp    c001c2e2 <cleanerTaskFunction(void*)+0x39>
c001c336:	e8 0d f6 ff ff       	call   c001b948 <unlockScheduler()>
c001c33b:	e8 bf f9 ff ff       	call   c001bcff <unlockStuff()>
c001c340:	e8 01 f6 ff ff       	call   c001b946 <lockScheduler()>
c001c345:	80 3d 0c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b80c,0x0
c001c34c:	0f 84 72 ff ff ff    	je     c001c2c4 <cleanerTaskFunction(void*)+0x1b>
c001c352:	e8 f1 f5 ff ff       	call   c001b948 <unlockScheduler()>
c001c357:	e9 75 ff ff ff       	jmp    c001c2d1 <cleanerTaskFunction(void*)+0x28>

c001c35c <terminateTask(int)>:
c001c35c:	83 ec 14             	sub    esp,0x14
c001c35f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c364:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c367:	83 c0 0c             	add    eax,0xc
c001c36a:	50                   	push   eax
c001c36b:	68 50 89 02 c0       	push   0xc0028950
c001c370:	e8 e2 5e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c375:	e8 f3 f5 ff ff       	call   c001b96d <lockStuff()>
c001c37a:	e8 c7 f5 ff ff       	call   c001b946 <lockScheduler()>
c001c37f:	c7 04 24 25 86 02 c0 	mov    DWORD PTR [esp],0xc0028625
c001c386:	e8 cc 5e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c38b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c38f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c394:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c39c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c39f:	5a                   	pop    edx
c001c3a0:	59                   	pop    ecx
c001c3a1:	50                   	push   eax
c001c3a2:	68 30 b8 02 c0       	push   0xc002b830
c001c3a7:	e8 96 91 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c3ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3b1:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c3b8:	c7 04 24 3f 86 02 c0 	mov    DWORD PTR [esp],0xc002863f
c001c3bf:	e8 93 5e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c3c4:	83 c4 10             	add    esp,0x10
c001c3c7:	a1 08 b8 02 c0       	mov    eax,ds:0xc002b808
c001c3cc:	85 c0                	test   eax,eax
c001c3ce:	74 5a                	je     c001c42a <terminateTask(int)+0xce>
c001c3d0:	83 ec 0c             	sub    esp,0xc
c001c3d3:	68 59 86 02 c0       	push   0xc0028659
c001c3d8:	e8 7a 5e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c3dd:	58                   	pop    eax
c001c3de:	c6 05 0c b8 02 c0 01 	mov    BYTE PTR ds:0xc002b80c,0x1
c001c3e5:	ff 35 08 b8 02 c0    	push   DWORD PTR ds:0xc002b808
c001c3eb:	e8 66 fb ff ff       	call   c001bf56 <unblockTask(ThreadControlBlock*)>
c001c3f0:	c7 04 24 73 86 02 c0 	mov    DWORD PTR [esp],0xc0028673
c001c3f7:	e8 5b 5e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c3fc:	83 c4 10             	add    esp,0x10
c001c3ff:	e8 44 f5 ff ff       	call   c001b948 <unlockScheduler()>
c001c404:	e8 f6 f8 ff ff       	call   c001bcff <unlockStuff()>
c001c409:	83 ec 0c             	sub    esp,0xc
c001c40c:	68 ab 86 02 c0       	push   0xc00286ab
c001c411:	e8 41 5e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c416:	83 c4 10             	add    esp,0x10
c001c419:	e8 28 f5 ff ff       	call   c001b946 <lockScheduler()>
c001c41e:	e8 57 f8 ff ff       	call   c001bc7a <schedule()>
c001c423:	e8 20 f5 ff ff       	call   c001b948 <unlockScheduler()>
c001c428:	eb ef                	jmp    c001c419 <terminateTask(int)+0xbd>
c001c42a:	83 ec 0c             	sub    esp,0xc
c001c42d:	68 8d 86 02 c0       	push   0xc002868d
c001c432:	e8 20 5e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c437:	83 c4 10             	add    esp,0x10
c001c43a:	eb c3                	jmp    c001c3ff <terminateTask(int)+0xa3>

c001c43c <Thr::terminateFromIRQ(int)>:
c001c43c:	83 ec 18             	sub    esp,0x18
c001c43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c443:	e8 14 ff ff ff       	call   c001c35c <terminateTask(int)>

c001c448 <Semaphore::release()>:
c001c448:	83 ec 0c             	sub    esp,0xc
c001c44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44f:	e8 19 f5 ff ff       	call   c001b96d <lockStuff()>
c001c454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c457:	85 d2                	test   edx,edx
c001c459:	74 1a                	je     c001c475 <Semaphore::release()+0x2d>
c001c45b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c45e:	83 ec 0c             	sub    esp,0xc
c001c461:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c464:	52                   	push   edx
c001c465:	e8 ec fa ff ff       	call   c001bf56 <unblockTask(ThreadControlBlock*)>
c001c46a:	83 c4 10             	add    esp,0x10
c001c46d:	83 c4 0c             	add    esp,0xc
c001c470:	e9 8a f8 ff ff       	jmp    c001bcff <unlockStuff()>
c001c475:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c478:	83 c4 0c             	add    esp,0xc
c001c47b:	e9 7f f8 ff ff       	jmp    c001bcff <unlockStuff()>

c001c480 <__static_initialization_and_destruction_0(int, int)>:
c001c480:	83 ec 0c             	sub    esp,0xc
c001c483:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c488:	0f 85 88 00 00 00    	jne    c001c516 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c48e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c496:	75 7e                	jne    c001c516 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c498:	83 ec 0c             	sub    esp,0xc
c001c49b:	68 48 b8 02 c0       	push   0xc002b848
c001c4a0:	e8 83 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4a5:	83 c4 10             	add    esp,0x10
c001c4a8:	83 ec 04             	sub    esp,0x4
c001c4ab:	68 9c 93 02 c0       	push   0xc002939c
c001c4b0:	68 48 b8 02 c0       	push   0xc002b848
c001c4b5:	68 e8 56 02 c0       	push   0xc00256e8
c001c4ba:	e8 34 5c ff ff       	call   c00120f3 <__cxa_atexit>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	83 ec 0c             	sub    esp,0xc
c001c4c5:	68 3c b8 02 c0       	push   0xc002b83c
c001c4ca:	e8 59 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4cf:	83 c4 10             	add    esp,0x10
c001c4d2:	83 ec 04             	sub    esp,0x4
c001c4d5:	68 9c 93 02 c0       	push   0xc002939c
c001c4da:	68 3c b8 02 c0       	push   0xc002b83c
c001c4df:	68 e8 56 02 c0       	push   0xc00256e8
c001c4e4:	e8 0a 5c ff ff       	call   c00120f3 <__cxa_atexit>
c001c4e9:	83 c4 10             	add    esp,0x10
c001c4ec:	83 ec 0c             	sub    esp,0xc
c001c4ef:	68 30 b8 02 c0       	push   0xc002b830
c001c4f4:	e8 2f 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	83 ec 04             	sub    esp,0x4
c001c4ff:	68 9c 93 02 c0       	push   0xc002939c
c001c504:	68 30 b8 02 c0       	push   0xc002b830
c001c509:	68 e8 56 02 c0       	push   0xc00256e8
c001c50e:	e8 e0 5b ff ff       	call   c00120f3 <__cxa_atexit>
c001c513:	83 c4 10             	add    esp,0x10
c001c516:	90                   	nop
c001c517:	83 c4 0c             	add    esp,0xc
c001c51a:	c3                   	ret    

c001c51b <_GLOBAL__sub_I_kernelProcess>:
c001c51b:	83 ec 0c             	sub    esp,0xc
c001c51e:	83 ec 08             	sub    esp,0x8
c001c521:	68 ff ff 00 00       	push   0xffff
c001c526:	6a 01                	push   0x1
c001c528:	e8 53 ff ff ff       	call   c001c480 <__static_initialization_and_destruction_0(int, int)>
c001c52d:	83 c4 10             	add    esp,0x10
c001c530:	83 c4 0c             	add    esp,0xc
c001c533:	c3                   	ret    

c001c534 <Vm::vm8086EntryPoint(void*)>:
c001c534:	83 ec 0c             	sub    esp,0xc
c001c537:	e8 0c f4 ff ff       	call   c001b948 <unlockScheduler()>
c001c53c:	fb                   	sti    
c001c53d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c542:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c546:	52                   	push   edx
c001c547:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c54b:	52                   	push   edx
c001c54c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c550:	52                   	push   edx
c001c551:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c555:	50                   	push   eax
c001c556:	e8 3e 3d fe ff       	call   c0000299 <goToVM86>
c001c55b:	83 c4 1c             	add    esp,0x1c
c001c55e:	c3                   	ret    

c001c55f <Vm::inbv(unsigned short)>:
c001c55f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c563:	ec                   	in     al,dx
c001c564:	c3                   	ret    

c001c565 <Vm::outbv(unsigned short, unsigned char)>:
c001c565:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c56d:	ee                   	out    dx,al
c001c56e:	c3                   	ret    

c001c56f <Vm::realToLinear(unsigned short, unsigned short)>:
c001c56f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c574:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c579:	c1 e0 04             	shl    eax,0x4
c001c57c:	01 d0                	add    eax,edx
c001c57e:	c3                   	ret    

c001c57f <Vm::getSegment(unsigned int)>:
c001c57f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c583:	c1 e8 10             	shr    eax,0x10
c001c586:	c3                   	ret    

c001c587 <Vm::getOffset(unsigned int)>:
c001c587:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58b:	c3                   	ret    

c001c58c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c58c:	55                   	push   ebp
c001c58d:	57                   	push   edi
c001c58e:	56                   	push   esi
c001c58f:	53                   	push   ebx
c001c590:	83 ec 2c             	sub    esp,0x2c
c001c593:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c597:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c59b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c59f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c5a3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c5a7:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c5ab:	e8 96 f3 ff ff       	call   c001b946 <lockScheduler()>
c001c5b0:	68 80 00 00 00       	push   0x80
c001c5b5:	6a 00                	push   0x0
c001c5b7:	68 34 c5 01 c0       	push   0xc001c534
c001c5bc:	55                   	push   ebp
c001c5bd:	e8 ae f4 ff ff       	call   c001ba70 <Process::createThread(void (*)(void*), void*, int)>
c001c5c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5c6:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c5ca:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c5ce:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c5d2:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c5d6:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c5da:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c5e1:	e8 82 5b ff ff       	call   c0012168 <operator new(unsigned long)>
c001c5e6:	83 c4 0c             	add    esp,0xc
c001c5e9:	89 c3                	mov    ebx,eax
c001c5eb:	55                   	push   ebp
c001c5ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5f0:	50                   	push   eax
c001c5f1:	e8 90 61 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001c5f6:	83 c4 0c             	add    esp,0xc
c001c5f9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c5fd:	50                   	push   eax
c001c5fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c602:	50                   	push   eax
c001c603:	53                   	push   ebx
c001c604:	e8 8d 64 ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c001c609:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c60d:	83 c4 10             	add    esp,0x10
c001c610:	84 d2                	test   dl,dl
c001c612:	74 1c                	je     c001c630 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c614:	83 ec 0c             	sub    esp,0xc
c001c617:	68 6f 89 02 c0       	push   0xc002896f
c001c61c:	e8 d2 c3 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001c621:	e8 22 f3 ff ff       	call   c001b948 <unlockScheduler()>
c001c626:	83 c4 10             	add    esp,0x10
c001c629:	31 d2                	xor    edx,edx
c001c62b:	e9 81 00 00 00       	jmp    c001c6b1 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c630:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c634:	51                   	push   ecx
c001c635:	51                   	push   ecx
c001c636:	6a 01                	push   0x1
c001c638:	53                   	push   ebx
c001c639:	e8 ac 61 ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001c63e:	83 c4 10             	add    esp,0x10
c001c641:	85 c0                	test   eax,eax
c001c643:	74 1b                	je     c001c660 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c645:	83 ec 0c             	sub    esp,0xc
c001c648:	68 88 89 02 c0       	push   0xc0028988
c001c64d:	e8 a1 c3 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001c652:	e8 f1 f2 ff ff       	call   c001b948 <unlockScheduler()>
c001c657:	83 c4 10             	add    esp,0x10
c001c65a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c65e:	eb 51                	jmp    c001c6b1 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c660:	83 ec 0c             	sub    esp,0xc
c001c663:	0f b7 ff             	movzx  edi,di
c001c666:	6a 07                	push   0x7
c001c668:	0f b7 f6             	movzx  esi,si
c001c66b:	68 00 01 00 00       	push   0x100
c001c670:	6a 00                	push   0x0
c001c672:	6a 00                	push   0x0
c001c674:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c67a:	e8 c5 55 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c67f:	83 c4 18             	add    esp,0x18
c001c682:	57                   	push   edi
c001c683:	56                   	push   esi
c001c684:	e8 e6 fe ff ff       	call   c001c56f <Vm::realToLinear(unsigned short, unsigned short)>
c001c689:	5a                   	pop    edx
c001c68a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c68c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c690:	51                   	push   ecx
c001c691:	50                   	push   eax
c001c692:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c696:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c69a:	53                   	push   ebx
c001c69b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c69e:	83 c4 14             	add    esp,0x14
c001c6a1:	53                   	push   ebx
c001c6a2:	e8 a1 61 ff ff       	call   c0012848 <File::close()>
c001c6a7:	e8 9c f2 ff ff       	call   c001b948 <unlockScheduler()>
c001c6ac:	83 c4 10             	add    esp,0x10
c001c6af:	b2 01                	mov    dl,0x1
c001c6b1:	83 c4 2c             	add    esp,0x2c
c001c6b4:	88 d0                	mov    al,dl
c001c6b6:	5b                   	pop    ebx
c001c6b7:	5e                   	pop    esi
c001c6b8:	5f                   	pop    edi
c001c6b9:	5d                   	pop    ebp
c001c6ba:	c3                   	ret    

c001c6bb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c6bb:	57                   	push   edi
c001c6bc:	56                   	push   esi
c001c6bd:	53                   	push   ebx
c001c6be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c6c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c6ca:	83 e8 06             	sub    eax,0x6
c001c6cd:	0f b7 c0             	movzx  eax,ax
c001c6d0:	50                   	push   eax
c001c6d1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c6d6:	50                   	push   eax
c001c6d7:	e8 93 fe ff ff       	call   c001c56f <Vm::realToLinear(unsigned short, unsigned short)>
c001c6dc:	5a                   	pop    edx
c001c6dd:	5e                   	pop    esi
c001c6de:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c6e1:	8d 56 fa             	lea    edx,[esi-0x6]
c001c6e4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c6ea:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c6ed:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c6f0:	83 c2 02             	add    edx,0x2
c001c6f3:	66 89 10             	mov    WORD PTR [eax],dx
c001c6f6:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c6f9:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c6fd:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c700:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c704:	89 d6                	mov    esi,edx
c001c706:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c70c:	66 81 e6 ff fd       	and    si,0xfdff
c001c711:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c715:	74 07                	je     c001c71e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c717:	89 d6                	mov    esi,edx
c001c719:	66 81 ce 00 02       	or     si,0x200
c001c71e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c722:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c727:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c72b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c733:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c736:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c73e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c741:	5b                   	pop    ebx
c001c742:	5e                   	pop    esi
c001c743:	5f                   	pop    edi
c001c744:	c3                   	ret    

c001c745 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c745:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c74a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c74f:	c1 e0 04             	shl    eax,0x4
c001c752:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c755:	c3                   	ret    

c001c756 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c756:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c75b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c760:	c1 e0 04             	shl    eax,0x4
c001c763:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c767:	c3                   	ret    

c001c768 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c768:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c76d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c772:	c1 e0 04             	shl    eax,0x4
c001c775:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c778:	c3                   	ret    

c001c779 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c779:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c77e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c783:	c1 e0 04             	shl    eax,0x4
c001c786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c78a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c78d:	c3                   	ret    

c001c78e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c78e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c793:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c798:	c1 e0 04             	shl    eax,0x4
c001c79b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c79f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c7a3:	c3                   	ret    

c001c7a4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c7a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c7ae:	c1 e0 04             	shl    eax,0x4
c001c7b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7b5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c7b8:	c3                   	ret    

c001c7b9 <Vm::faultHandler(regs*)>:
c001c7b9:	55                   	push   ebp
c001c7ba:	57                   	push   edi
c001c7bb:	56                   	push   esi
c001c7bc:	53                   	push   ebx
c001c7bd:	83 ec 1c             	sub    esp,0x1c
c001c7c0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c7c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c7c7:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c7cb:	0f b7 f0             	movzx  esi,ax
c001c7ce:	52                   	push   edx
c001c7cf:	0f b7 c0             	movzx  eax,ax
c001c7d2:	50                   	push   eax
c001c7d3:	e8 97 fd ff ff       	call   c001c56f <Vm::realToLinear(unsigned short, unsigned short)>
c001c7d8:	5a                   	pop    edx
c001c7d9:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c7dc:	59                   	pop    ecx
c001c7dd:	89 c7                	mov    edi,eax
c001c7df:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c7e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7ef:	0f b7 c5             	movzx  eax,bp
c001c7f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7f6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c7fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7fe:	e8 6c fd ff ff       	call   c001c56f <Vm::realToLinear(unsigned short, unsigned short)>
c001c803:	5a                   	pop    edx
c001c804:	59                   	pop    ecx
c001c805:	b1 06                	mov    cl,0x6
c001c807:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c80c:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c811:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c814:	80 fa 9d             	cmp    dl,0x9d
c001c817:	0f 84 1d 02 00 00    	je     c001ca3a <Vm::faultHandler(regs*)+0x281>
c001c81d:	0f 87 8e 00 00 00    	ja     c001c8b1 <Vm::faultHandler(regs*)+0xf8>
c001c823:	80 fa 66             	cmp    dl,0x66
c001c826:	0f 84 89 01 00 00    	je     c001c9b5 <Vm::faultHandler(regs*)+0x1fc>
c001c82c:	77 44                	ja     c001c872 <Vm::faultHandler(regs*)+0xb9>
c001c82e:	80 fa 36             	cmp    dl,0x36
c001c831:	0f 84 74 01 00 00    	je     c001c9ab <Vm::faultHandler(regs*)+0x1f2>
c001c837:	77 1a                	ja     c001c853 <Vm::faultHandler(regs*)+0x9a>
c001c839:	80 fa 26             	cmp    dl,0x26
c001c83c:	0f 84 4b 01 00 00    	je     c001c98d <Vm::faultHandler(regs*)+0x1d4>
c001c842:	80 fa 2e             	cmp    dl,0x2e
c001c845:	0f 85 4a 05 00 00    	jne    c001cd95 <Vm::faultHandler(regs*)+0x5dc>
c001c84b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c84e:	31 c9                	xor    ecx,ecx
c001c850:	47                   	inc    edi
c001c851:	eb be                	jmp    c001c811 <Vm::faultHandler(regs*)+0x58>
c001c853:	80 fa 64             	cmp    dl,0x64
c001c856:	0f 84 3b 01 00 00    	je     c001c997 <Vm::faultHandler(regs*)+0x1de>
c001c85c:	0f 87 3f 01 00 00    	ja     c001c9a1 <Vm::faultHandler(regs*)+0x1e8>
c001c862:	80 fa 3e             	cmp    dl,0x3e
c001c865:	0f 85 2a 05 00 00    	jne    c001cd95 <Vm::faultHandler(regs*)+0x5dc>
c001c86b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c86e:	b1 01                	mov    cl,0x1
c001c870:	eb de                	jmp    c001c850 <Vm::faultHandler(regs*)+0x97>
c001c872:	80 fa 6d             	cmp    dl,0x6d
c001c875:	0f 84 bf 02 00 00    	je     c001cb3a <Vm::faultHandler(regs*)+0x381>
c001c87b:	77 17                	ja     c001c894 <Vm::faultHandler(regs*)+0xdb>
c001c87d:	80 fa 67             	cmp    dl,0x67
c001c880:	0f 84 3c 01 00 00    	je     c001c9c2 <Vm::faultHandler(regs*)+0x209>
c001c886:	80 fa 6c             	cmp    dl,0x6c
c001c889:	0f 84 5d 02 00 00    	je     c001caec <Vm::faultHandler(regs*)+0x333>
c001c88f:	e9 01 05 00 00       	jmp    c001cd95 <Vm::faultHandler(regs*)+0x5dc>
c001c894:	80 fa 6f             	cmp    dl,0x6f
c001c897:	0f 84 8b 03 00 00    	je     c001cc28 <Vm::faultHandler(regs*)+0x46f>
c001c89d:	0f 82 0f 03 00 00    	jb     c001cbb2 <Vm::faultHandler(regs*)+0x3f9>
c001c8a3:	80 fa 9c             	cmp    dl,0x9c
c001c8a6:	0f 84 23 01 00 00    	je     c001c9cf <Vm::faultHandler(regs*)+0x216>
c001c8ac:	e9 e4 04 00 00       	jmp    c001cd95 <Vm::faultHandler(regs*)+0x5dc>
c001c8b1:	80 fa ec             	cmp    dl,0xec
c001c8b4:	0f 84 7f 04 00 00    	je     c001cd39 <Vm::faultHandler(regs*)+0x580>
c001c8ba:	77 7b                	ja     c001c937 <Vm::faultHandler(regs*)+0x17e>
c001c8bc:	80 fa e4             	cmp    dl,0xe4
c001c8bf:	0f 84 fe 03 00 00    	je     c001ccc3 <Vm::faultHandler(regs*)+0x50a>
c001c8c5:	77 53                	ja     c001c91a <Vm::faultHandler(regs*)+0x161>
c001c8c7:	80 fa cd             	cmp    dl,0xcd
c001c8ca:	0f 84 cd 01 00 00    	je     c001ca9d <Vm::faultHandler(regs*)+0x2e4>
c001c8d0:	80 fa cf             	cmp    dl,0xcf
c001c8d3:	0f 85 bc 04 00 00    	jne    c001cd95 <Vm::faultHandler(regs*)+0x5dc>
c001c8d9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c8dc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c8df:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c8e3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c8e6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c8ea:	81 ca 00 02 02 00    	or     edx,0x20200
c001c8f0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001c8f3:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001c8f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c8fd:	66 c1 e8 09          	shr    ax,0x9
c001c901:	83 e0 01             	and    eax,0x1
c001c904:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001c907:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c90a:	83 c0 06             	add    eax,0x6
c001c90d:	25 ff ff 00 00       	and    eax,0xffff
c001c912:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001c915:	e9 77 04 00 00       	jmp    c001cd91 <Vm::faultHandler(regs*)+0x5d8>
c001c91a:	80 fa e6             	cmp    dl,0xe6
c001c91d:	0f 84 ea 03 00 00    	je     c001cd0d <Vm::faultHandler(regs*)+0x554>
c001c923:	0f 82 b6 03 00 00    	jb     c001ccdf <Vm::faultHandler(regs*)+0x526>
c001c929:	80 fa e7             	cmp    dl,0xe7
c001c92c:	0f 84 f2 03 00 00    	je     c001cd24 <Vm::faultHandler(regs*)+0x56b>
c001c932:	e9 5e 04 00 00       	jmp    c001cd95 <Vm::faultHandler(regs*)+0x5dc>
c001c937:	80 fa ef             	cmp    dl,0xef
c001c93a:	0f 84 3c 04 00 00    	je     c001cd7c <Vm::faultHandler(regs*)+0x5c3>
c001c940:	77 28                	ja     c001c96a <Vm::faultHandler(regs*)+0x1b1>
c001c942:	80 fa ed             	cmp    dl,0xed
c001c945:	0f 84 0a 04 00 00    	je     c001cd55 <Vm::faultHandler(regs*)+0x59c>
c001c94b:	80 fa ee             	cmp    dl,0xee
c001c94e:	0f 85 41 04 00 00    	jne    c001cd95 <Vm::faultHandler(regs*)+0x5dc>
c001c954:	50                   	push   eax
c001c955:	50                   	push   eax
c001c956:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001c95a:	50                   	push   eax
c001c95b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001c95f:	50                   	push   eax
c001c960:	e8 00 fc ff ff       	call   c001c565 <Vm::outbv(unsigned short, unsigned char)>
c001c965:	e9 0a 04 00 00       	jmp    c001cd74 <Vm::faultHandler(regs*)+0x5bb>
c001c96a:	80 fa fa             	cmp    dl,0xfa
c001c96d:	0f 84 5d 01 00 00    	je     c001cad0 <Vm::faultHandler(regs*)+0x317>
c001c973:	80 fa fb             	cmp    dl,0xfb
c001c976:	0f 84 62 01 00 00    	je     c001cade <Vm::faultHandler(regs*)+0x325>
c001c97c:	80 fa f3             	cmp    dl,0xf3
c001c97f:	0f 85 10 04 00 00    	jne    c001cd95 <Vm::faultHandler(regs*)+0x5dc>
c001c985:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c988:	e9 c3 fe ff ff       	jmp    c001c850 <Vm::faultHandler(regs*)+0x97>
c001c98d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c990:	b1 02                	mov    cl,0x2
c001c992:	e9 b9 fe ff ff       	jmp    c001c850 <Vm::faultHandler(regs*)+0x97>
c001c997:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c99a:	b1 03                	mov    cl,0x3
c001c99c:	e9 af fe ff ff       	jmp    c001c850 <Vm::faultHandler(regs*)+0x97>
c001c9a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9a4:	b1 04                	mov    cl,0x4
c001c9a6:	e9 a5 fe ff ff       	jmp    c001c850 <Vm::faultHandler(regs*)+0x97>
c001c9ab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9ae:	b1 05                	mov    cl,0x5
c001c9b0:	e9 9b fe ff ff       	jmp    c001c850 <Vm::faultHandler(regs*)+0x97>
c001c9b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9b8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001c9bd:	e9 8e fe ff ff       	jmp    c001c850 <Vm::faultHandler(regs*)+0x97>
c001c9c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9c5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001c9ca:	e9 81 fe ff ff       	jmp    c001c850 <Vm::faultHandler(regs*)+0x97>
c001c9cf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c9d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c9d6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001c9db:	74 30                	je     c001ca0d <Vm::faultHandler(regs*)+0x254>
c001c9dd:	83 e9 04             	sub    ecx,0x4
c001c9e0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001c9e6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001c9ec:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001c9ef:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001c9f2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c9f8:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001c9fc:	0f 84 8c 03 00 00    	je     c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001ca02:	80 ce 02             	or     dh,0x2
c001ca05:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ca08:	e9 81 03 00 00       	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001ca0d:	83 e9 02             	sub    ecx,0x2
c001ca10:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ca16:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ca19:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca1d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ca23:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ca27:	74 05                	je     c001ca2e <Vm::faultHandler(regs*)+0x275>
c001ca29:	80 ce 02             	or     dh,0x2
c001ca2c:	eb 03                	jmp    c001ca31 <Vm::faultHandler(regs*)+0x278>
c001ca2e:	80 e6 fd             	and    dh,0xfd
c001ca31:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca35:	e9 54 03 00 00       	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001ca3a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ca3f:	74 2a                	je     c001ca6b <Vm::faultHandler(regs*)+0x2b2>
c001ca41:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca43:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ca49:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca4f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca52:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca54:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca5a:	c1 e8 09             	shr    eax,0x9
c001ca5d:	83 e0 01             	and    eax,0x1
c001ca60:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca63:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca66:	83 c0 04             	add    eax,0x4
c001ca69:	eb 25                	jmp    c001ca90 <Vm::faultHandler(regs*)+0x2d7>
c001ca6b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ca6e:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca74:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca77:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ca7a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca80:	66 c1 e8 09          	shr    ax,0x9
c001ca84:	83 e0 01             	and    eax,0x1
c001ca87:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca8a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca8d:	83 c0 02             	add    eax,0x2
c001ca90:	25 ff ff 00 00       	and    eax,0xffff
c001ca95:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ca98:	e9 f1 02 00 00       	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001ca9d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001caa1:	3c ff                	cmp    al,0xff
c001caa3:	75 10                	jne    c001cab5 <Vm::faultHandler(regs*)+0x2fc>
c001caa5:	83 ec 0c             	sub    esp,0xc
c001caa8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001caab:	e8 8c f9 ff ff       	call   c001c43c <Thr::terminateFromIRQ(int)>
c001cab0:	e9 c2 02 00 00       	jmp    c001cd77 <Vm::faultHandler(regs*)+0x5be>
c001cab5:	83 ec 0c             	sub    esp,0xc
c001cab8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cac0:	57                   	push   edi
c001cac1:	50                   	push   eax
c001cac2:	53                   	push   ebx
c001cac3:	e8 f3 fb ff ff       	call   c001c6bb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001cac8:	83 c4 20             	add    esp,0x20
c001cacb:	e9 c1 02 00 00       	jmp    c001cd91 <Vm::faultHandler(regs*)+0x5d8>
c001cad0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cad5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cad9:	e9 b0 02 00 00       	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001cade:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cae3:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cae7:	e9 a2 02 00 00       	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001caec:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001caf1:	74 0d                	je     c001cb00 <Vm::faultHandler(regs*)+0x347>
c001caf3:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001cafa:	0f 87 e9 02 00 00    	ja     c001cde9 <Vm::faultHandler(regs*)+0x630>
c001cb00:	83 ec 0c             	sub    esp,0xc
c001cb03:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cb06:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cb0a:	50                   	push   eax
c001cb0b:	e8 4f fa ff ff       	call   c001c55f <Vm::inbv(unsigned short)>
c001cb10:	83 c4 0c             	add    esp,0xc
c001cb13:	0f b6 c0             	movzx  eax,al
c001cb16:	0f b7 c9             	movzx  ecx,cx
c001cb19:	50                   	push   eax
c001cb1a:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cb1e:	50                   	push   eax
c001cb1f:	51                   	push   ecx
c001cb20:	e8 54 fc ff ff       	call   c001c779 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb2b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb2f:	74 03                	je     c001cb34 <Vm::faultHandler(regs*)+0x37b>
c001cb31:	48                   	dec    eax
c001cb32:	eb 01                	jmp    c001cb35 <Vm::faultHandler(regs*)+0x37c>
c001cb34:	40                   	inc    eax
c001cb35:	0f b7 c0             	movzx  eax,ax
c001cb38:	eb 70                	jmp    c001cbaa <Vm::faultHandler(regs*)+0x3f1>
c001cb3a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cb3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cb40:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cb45:	74 0c                	je     c001cb53 <Vm::faultHandler(regs*)+0x39a>
c001cb47:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cb4d:	0f 87 96 02 00 00    	ja     c001cde9 <Vm::faultHandler(regs*)+0x630>
c001cb53:	0f b7 c9             	movzx  ecx,cx
c001cb56:	0f b7 f6             	movzx  esi,si
c001cb59:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cb5c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cb61:	74 20                	je     c001cb83 <Vm::faultHandler(regs*)+0x3ca>
c001cb63:	ed                   	in     eax,dx
c001cb64:	55                   	push   ebp
c001cb65:	50                   	push   eax
c001cb66:	51                   	push   ecx
c001cb67:	56                   	push   esi
c001cb68:	e8 37 fc ff ff       	call   c001c7a4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cb6d:	83 c4 10             	add    esp,0x10
c001cb70:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb73:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb77:	74 05                	je     c001cb7e <Vm::faultHandler(regs*)+0x3c5>
c001cb79:	83 e8 04             	sub    eax,0x4
c001cb7c:	eb 27                	jmp    c001cba5 <Vm::faultHandler(regs*)+0x3ec>
c001cb7e:	83 c0 04             	add    eax,0x4
c001cb81:	eb 22                	jmp    c001cba5 <Vm::faultHandler(regs*)+0x3ec>
c001cb83:	66 ed                	in     ax,dx
c001cb85:	0f b7 c0             	movzx  eax,ax
c001cb88:	57                   	push   edi
c001cb89:	50                   	push   eax
c001cb8a:	51                   	push   ecx
c001cb8b:	56                   	push   esi
c001cb8c:	e8 fd fb ff ff       	call   c001c78e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cb91:	83 c4 10             	add    esp,0x10
c001cb94:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb97:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb9b:	74 05                	je     c001cba2 <Vm::faultHandler(regs*)+0x3e9>
c001cb9d:	83 e8 02             	sub    eax,0x2
c001cba0:	eb 03                	jmp    c001cba5 <Vm::faultHandler(regs*)+0x3ec>
c001cba2:	83 c0 02             	add    eax,0x2
c001cba5:	25 ff ff 00 00       	and    eax,0xffff
c001cbaa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cbad:	e9 dc 01 00 00       	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001cbb2:	49                   	dec    ecx
c001cbb3:	80 f9 05             	cmp    cl,0x5
c001cbb6:	77 24                	ja     c001cbdc <Vm::faultHandler(regs*)+0x423>
c001cbb8:	0f b6 c9             	movzx  ecx,cl
c001cbbb:	ff 24 8d d0 89 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7630]
c001cbc2:	0f b7 f5             	movzx  esi,bp
c001cbc5:	eb 15                	jmp    c001cbdc <Vm::faultHandler(regs*)+0x423>
c001cbc7:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001cbcb:	eb 0f                	jmp    c001cbdc <Vm::faultHandler(regs*)+0x423>
c001cbcd:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001cbd1:	eb 09                	jmp    c001cbdc <Vm::faultHandler(regs*)+0x423>
c001cbd3:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001cbd7:	eb 03                	jmp    c001cbdc <Vm::faultHandler(regs*)+0x423>
c001cbd9:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001cbdc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbdf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cbe4:	74 0b                	je     c001cbf1 <Vm::faultHandler(regs*)+0x438>
c001cbe6:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbeb:	0f 87 f8 01 00 00    	ja     c001cde9 <Vm::faultHandler(regs*)+0x630>
c001cbf1:	0f b7 c0             	movzx  eax,ax
c001cbf4:	52                   	push   edx
c001cbf5:	52                   	push   edx
c001cbf6:	50                   	push   eax
c001cbf7:	56                   	push   esi
c001cbf8:	e8 48 fb ff ff       	call   c001c745 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001cbfd:	59                   	pop    ecx
c001cbfe:	0f b6 c0             	movzx  eax,al
c001cc01:	5e                   	pop    esi
c001cc02:	50                   	push   eax
c001cc03:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cc07:	50                   	push   eax
c001cc08:	e8 58 f9 ff ff       	call   c001c565 <Vm::outbv(unsigned short, unsigned char)>
c001cc0d:	83 c4 10             	add    esp,0x10
c001cc10:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cc13:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc17:	74 03                	je     c001cc1c <Vm::faultHandler(regs*)+0x463>
c001cc19:	48                   	dec    eax
c001cc1a:	eb 01                	jmp    c001cc1d <Vm::faultHandler(regs*)+0x464>
c001cc1c:	40                   	inc    eax
c001cc1d:	0f b7 c0             	movzx  eax,ax
c001cc20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cc23:	e9 66 01 00 00       	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001cc28:	49                   	dec    ecx
c001cc29:	80 f9 05             	cmp    cl,0x5
c001cc2c:	77 1f                	ja     c001cc4d <Vm::faultHandler(regs*)+0x494>
c001cc2e:	0f b6 c9             	movzx  ecx,cl
c001cc31:	ff 24 8d e8 89 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7618]
c001cc38:	89 ee                	mov    esi,ebp
c001cc3a:	eb 11                	jmp    c001cc4d <Vm::faultHandler(regs*)+0x494>
c001cc3c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001cc3f:	eb 0c                	jmp    c001cc4d <Vm::faultHandler(regs*)+0x494>
c001cc41:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cc44:	eb 07                	jmp    c001cc4d <Vm::faultHandler(regs*)+0x494>
c001cc46:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001cc49:	eb 02                	jmp    c001cc4d <Vm::faultHandler(regs*)+0x494>
c001cc4b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cc4d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cc50:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc55:	74 0c                	je     c001cc63 <Vm::faultHandler(regs*)+0x4aa>
c001cc57:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc5d:	0f 87 86 01 00 00    	ja     c001cde9 <Vm::faultHandler(regs*)+0x630>
c001cc63:	0f b7 d6             	movzx  edx,si
c001cc66:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cc69:	0f b7 c1             	movzx  eax,cx
c001cc6c:	81 e7 00 04 00 00    	and    edi,0x400
c001cc72:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cc75:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc7a:	74 1d                	je     c001cc99 <Vm::faultHandler(regs*)+0x4e0>
c001cc7c:	55                   	push   ebp
c001cc7d:	55                   	push   ebp
c001cc7e:	50                   	push   eax
c001cc7f:	52                   	push   edx
c001cc80:	e8 e3 fa ff ff       	call   c001c768 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cc85:	83 c4 10             	add    esp,0x10
c001cc88:	89 f2                	mov    edx,esi
c001cc8a:	ef                   	out    dx,eax
c001cc8b:	85 ff                	test   edi,edi
c001cc8d:	74 05                	je     c001cc94 <Vm::faultHandler(regs*)+0x4db>
c001cc8f:	83 e9 04             	sub    ecx,0x4
c001cc92:	eb 21                	jmp    c001ccb5 <Vm::faultHandler(regs*)+0x4fc>
c001cc94:	83 c1 04             	add    ecx,0x4
c001cc97:	eb 1c                	jmp    c001ccb5 <Vm::faultHandler(regs*)+0x4fc>
c001cc99:	55                   	push   ebp
c001cc9a:	55                   	push   ebp
c001cc9b:	50                   	push   eax
c001cc9c:	52                   	push   edx
c001cc9d:	e8 b4 fa ff ff       	call   c001c756 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001cca2:	83 c4 10             	add    esp,0x10
c001cca5:	89 f2                	mov    edx,esi
c001cca7:	66 ef                	out    dx,ax
c001cca9:	85 ff                	test   edi,edi
c001ccab:	74 05                	je     c001ccb2 <Vm::faultHandler(regs*)+0x4f9>
c001ccad:	83 e9 02             	sub    ecx,0x2
c001ccb0:	eb 03                	jmp    c001ccb5 <Vm::faultHandler(regs*)+0x4fc>
c001ccb2:	83 c1 02             	add    ecx,0x2
c001ccb5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ccbb:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001ccbe:	e9 cb 00 00 00       	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001ccc3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ccca:	83 ec 0c             	sub    esp,0xc
c001cccd:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ccd1:	50                   	push   eax
c001ccd2:	e8 88 f8 ff ff       	call   c001c55f <Vm::inbv(unsigned short)>
c001ccd7:	0f b6 c0             	movzx  eax,al
c001ccda:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ccdd:	eb 3f                	jmp    c001cd1e <Vm::faultHandler(regs*)+0x565>
c001ccdf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cce4:	74 07                	je     c001cced <Vm::faultHandler(regs*)+0x534>
c001cce6:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccea:	ed                   	in     eax,dx
c001cceb:	eb 14                	jmp    c001cd01 <Vm::faultHandler(regs*)+0x548>
c001cced:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001ccf0:	66 31 c9             	xor    cx,cx
c001ccf3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001ccf6:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccfa:	66 ed                	in     ax,dx
c001ccfc:	0f b7 c0             	movzx  eax,ax
c001ccff:	09 c8                	or     eax,ecx
c001cd01:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd04:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cd08:	e9 84 00 00 00       	jmp    c001cd91 <Vm::faultHandler(regs*)+0x5d8>
c001cd0d:	52                   	push   edx
c001cd0e:	52                   	push   edx
c001cd0f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cd13:	50                   	push   eax
c001cd14:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cd18:	50                   	push   eax
c001cd19:	e8 47 f8 ff ff       	call   c001c565 <Vm::outbv(unsigned short, unsigned char)>
c001cd1e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cd22:	eb 53                	jmp    c001cd77 <Vm::faultHandler(regs*)+0x5be>
c001cd24:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd27:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cd2b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd30:	74 03                	je     c001cd35 <Vm::faultHandler(regs*)+0x57c>
c001cd32:	ef                   	out    dx,eax
c001cd33:	eb cf                	jmp    c001cd04 <Vm::faultHandler(regs*)+0x54b>
c001cd35:	66 ef                	out    dx,ax
c001cd37:	eb cb                	jmp    c001cd04 <Vm::faultHandler(regs*)+0x54b>
c001cd39:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cd40:	83 ec 0c             	sub    esp,0xc
c001cd43:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cd47:	50                   	push   eax
c001cd48:	e8 12 f8 ff ff       	call   c001c55f <Vm::inbv(unsigned short)>
c001cd4d:	0f b6 c0             	movzx  eax,al
c001cd50:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cd53:	eb 1f                	jmp    c001cd74 <Vm::faultHandler(regs*)+0x5bb>
c001cd55:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd58:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd5d:	74 03                	je     c001cd62 <Vm::faultHandler(regs*)+0x5a9>
c001cd5f:	ed                   	in     eax,dx
c001cd60:	eb 0d                	jmp    c001cd6f <Vm::faultHandler(regs*)+0x5b6>
c001cd62:	66 ed                	in     ax,dx
c001cd64:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001cd67:	0f b7 c0             	movzx  eax,ax
c001cd6a:	66 31 d2             	xor    dx,dx
c001cd6d:	09 d0                	or     eax,edx
c001cd6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd72:	eb 1a                	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001cd74:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd77:	83 c4 10             	add    esp,0x10
c001cd7a:	eb 15                	jmp    c001cd91 <Vm::faultHandler(regs*)+0x5d8>
c001cd7c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd7f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd82:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd87:	74 03                	je     c001cd8c <Vm::faultHandler(regs*)+0x5d3>
c001cd89:	ef                   	out    dx,eax
c001cd8a:	eb 02                	jmp    c001cd8e <Vm::faultHandler(regs*)+0x5d5>
c001cd8c:	66 ef                	out    dx,ax
c001cd8e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd91:	b0 01                	mov    al,0x1
c001cd93:	eb 56                	jmp    c001cdeb <Vm::faultHandler(regs*)+0x632>
c001cd95:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001cd99:	50                   	push   eax
c001cd9a:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001cd9e:	50                   	push   eax
c001cd9f:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001cda3:	50                   	push   eax
c001cda4:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001cda8:	50                   	push   eax
c001cda9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cdad:	50                   	push   eax
c001cdae:	52                   	push   edx
c001cdaf:	52                   	push   edx
c001cdb0:	68 a1 89 02 c0       	push   0xc00289a1
c001cdb5:	e8 9d 54 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001cdba:	83 c4 20             	add    esp,0x20
c001cdbd:	83 ec 0c             	sub    esp,0xc
c001cdc0:	6a 60                	push   0x60
c001cdc2:	e8 98 f7 ff ff       	call   c001c55f <Vm::inbv(unsigned short)>
c001cdc7:	83 c4 10             	add    esp,0x10
c001cdca:	3c 1c                	cmp    al,0x1c
c001cdcc:	74 04                	je     c001cdd2 <Vm::faultHandler(regs*)+0x619>
c001cdce:	3c 5a                	cmp    al,0x5a
c001cdd0:	75 eb                	jne    c001cdbd <Vm::faultHandler(regs*)+0x604>
c001cdd2:	3c 5a                	cmp    al,0x5a
c001cdd4:	74 04                	je     c001cdda <Vm::faultHandler(regs*)+0x621>
c001cdd6:	3c 1c                	cmp    al,0x1c
c001cdd8:	75 0f                	jne    c001cde9 <Vm::faultHandler(regs*)+0x630>
c001cdda:	83 ec 0c             	sub    esp,0xc
c001cddd:	6a 60                	push   0x60
c001cddf:	e8 7b f7 ff ff       	call   c001c55f <Vm::inbv(unsigned short)>
c001cde4:	83 c4 10             	add    esp,0x10
c001cde7:	eb e9                	jmp    c001cdd2 <Vm::faultHandler(regs*)+0x619>
c001cde9:	31 c0                	xor    eax,eax
c001cdeb:	83 c4 1c             	add    esp,0x1c
c001cdee:	5b                   	pop    ebx
c001cdef:	5e                   	pop    esi
c001cdf0:	5f                   	pop    edi
c001cdf1:	5d                   	pop    ebp
c001cdf2:	c3                   	ret    

c001cdf3 <Vm::fpuInternalTo32(unsigned long long)>:
c001cdf3:	57                   	push   edi
c001cdf4:	56                   	push   esi
c001cdf5:	53                   	push   ebx
c001cdf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfe:	89 d6                	mov    esi,edx
c001ce00:	89 d7                	mov    edi,edx
c001ce02:	89 c1                	mov    ecx,eax
c001ce04:	c1 ef 14             	shr    edi,0x14
c001ce07:	89 d3                	mov    ebx,edx
c001ce09:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ce0f:	31 d2                	xor    edx,edx
c001ce11:	89 f8                	mov    eax,edi
c001ce13:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ce19:	bf ff 00 00 00       	mov    edi,0xff
c001ce1e:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ce23:	83 d2 ff             	adc    edx,0xffffffff
c001ce26:	39 c7                	cmp    edi,eax
c001ce28:	bf 00 00 00 00       	mov    edi,0x0
c001ce2d:	19 d7                	sbb    edi,edx
c001ce2f:	72 15                	jb     c001ce46 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ce31:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ce35:	c1 e0 17             	shl    eax,0x17
c001ce38:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ce3e:	09 f1                	or     ecx,esi
c001ce40:	09 c1                	or     ecx,eax
c001ce42:	89 cf                	mov    edi,ecx
c001ce44:	eb 02                	jmp    c001ce48 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ce46:	31 ff                	xor    edi,edi
c001ce48:	89 f8                	mov    eax,edi
c001ce4a:	5b                   	pop    ebx
c001ce4b:	5e                   	pop    esi
c001ce4c:	5f                   	pop    edi
c001ce4d:	c3                   	ret    

c001ce4e <Vm::fpuInternalTo64(unsigned long long)>:
c001ce4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce56:	c3                   	ret    

c001ce57 <Vm::fpu32ToInternal(unsigned int)>:
c001ce57:	57                   	push   edi
c001ce58:	31 ff                	xor    edi,edi
c001ce5a:	56                   	push   esi
c001ce5b:	53                   	push   ebx
c001ce5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ce60:	89 cb                	mov    ebx,ecx
c001ce62:	89 ce                	mov    esi,ecx
c001ce64:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ce6a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ce70:	c1 e9 17             	shr    ecx,0x17
c001ce73:	89 f0                	mov    eax,esi
c001ce75:	0f b6 d1             	movzx  edx,cl
c001ce78:	81 c2 80 03 00 00    	add    edx,0x380
c001ce7e:	89 d1                	mov    ecx,edx
c001ce80:	89 fa                	mov    edx,edi
c001ce82:	c1 e1 14             	shl    ecx,0x14
c001ce85:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ce89:	c1 e0 1d             	shl    eax,0x1d
c001ce8c:	89 d7                	mov    edi,edx
c001ce8e:	89 c6                	mov    esi,eax
c001ce90:	89 ca                	mov    edx,ecx
c001ce92:	89 f0                	mov    eax,esi
c001ce94:	09 fa                	or     edx,edi
c001ce96:	09 da                	or     edx,ebx
c001ce98:	5b                   	pop    ebx
c001ce99:	5e                   	pop    esi
c001ce9a:	5f                   	pop    edi
c001ce9b:	c3                   	ret    

c001ce9c <Vm::fpu64ToInternal(unsigned long long)>:
c001ce9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cea0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cea4:	c3                   	ret    

c001cea5 <Vm::fpuFloatToLong(unsigned long long)>:
c001cea5:	57                   	push   edi
c001cea6:	31 c0                	xor    eax,eax
c001cea8:	56                   	push   esi
c001cea9:	31 d2                	xor    edx,edx
c001ceab:	53                   	push   ebx
c001ceac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ceb0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ceb4:	89 d9                	mov    ecx,ebx
c001ceb6:	c1 e9 14             	shr    ecx,0x14
c001ceb9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cebf:	89 cf                	mov    edi,ecx
c001cec1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001cec7:	78 33                	js     c001cefc <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cec9:	89 d9                	mov    ecx,ebx
c001cecb:	89 f0                	mov    eax,esi
c001cecd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ced3:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ced9:	89 ca                	mov    edx,ecx
c001cedb:	b9 34 00 00 00       	mov    ecx,0x34
c001cee0:	29 f9                	sub    ecx,edi
c001cee2:	0f ad d0             	shrd   eax,edx,cl
c001cee5:	d3 fa                	sar    edx,cl
c001cee7:	f6 c1 20             	test   cl,0x20
c001ceea:	74 05                	je     c001cef1 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ceec:	89 d0                	mov    eax,edx
c001ceee:	c1 fa 1f             	sar    edx,0x1f
c001cef1:	85 db                	test   ebx,ebx
c001cef3:	79 07                	jns    c001cefc <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cef5:	f7 d8                	neg    eax
c001cef7:	83 d2 00             	adc    edx,0x0
c001cefa:	f7 da                	neg    edx
c001cefc:	5b                   	pop    ebx
c001cefd:	5e                   	pop    esi
c001cefe:	5f                   	pop    edi
c001ceff:	c3                   	ret    

c001cf00 <Vm::fpuULongToFloat(unsigned long long)>:
c001cf00:	57                   	push   edi
c001cf01:	31 c9                	xor    ecx,ecx
c001cf03:	56                   	push   esi
c001cf04:	53                   	push   ebx
c001cf05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf09:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cf0d:	0f ba e7 14          	bt     edi,0x14
c001cf11:	72 07                	jb     c001cf1a <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001cf13:	01 f6                	add    esi,esi
c001cf15:	11 ff                	adc    edi,edi
c001cf17:	41                   	inc    ecx
c001cf18:	eb f3                	jmp    c001cf0d <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001cf1a:	89 fa                	mov    edx,edi
c001cf1c:	89 f0                	mov    eax,esi
c001cf1e:	bb 33 04 00 00       	mov    ebx,0x433
c001cf23:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001cf29:	29 cb                	sub    ebx,ecx
c001cf2b:	89 d9                	mov    ecx,ebx
c001cf2d:	5b                   	pop    ebx
c001cf2e:	c1 e1 14             	shl    ecx,0x14
c001cf31:	5e                   	pop    esi
c001cf32:	09 ca                	or     edx,ecx
c001cf34:	5f                   	pop    edi
c001cf35:	c3                   	ret    

c001cf36 <Vm::fpuLongToFloat(long long)>:
c001cf36:	56                   	push   esi
c001cf37:	31 c0                	xor    eax,eax
c001cf39:	53                   	push   ebx
c001cf3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf42:	39 c8                	cmp    eax,ecx
c001cf44:	19 d8                	sbb    eax,ebx
c001cf46:	7d 04                	jge    c001cf4c <Vm::fpuLongToFloat(long long)+0x16>
c001cf48:	31 f6                	xor    esi,esi
c001cf4a:	eb 0c                	jmp    c001cf58 <Vm::fpuLongToFloat(long long)+0x22>
c001cf4c:	f7 d9                	neg    ecx
c001cf4e:	be 01 00 00 00       	mov    esi,0x1
c001cf53:	83 d3 00             	adc    ebx,0x0
c001cf56:	f7 db                	neg    ebx
c001cf58:	31 c0                	xor    eax,eax
c001cf5a:	0f ba e3 14          	bt     ebx,0x14
c001cf5e:	72 07                	jb     c001cf67 <Vm::fpuLongToFloat(long long)+0x31>
c001cf60:	01 c9                	add    ecx,ecx
c001cf62:	11 db                	adc    ebx,ebx
c001cf64:	40                   	inc    eax
c001cf65:	eb f3                	jmp    c001cf5a <Vm::fpuLongToFloat(long long)+0x24>
c001cf67:	ba 33 04 00 00       	mov    edx,0x433
c001cf6c:	29 c2                	sub    edx,eax
c001cf6e:	89 c8                	mov    eax,ecx
c001cf70:	c1 e2 14             	shl    edx,0x14
c001cf73:	89 d9                	mov    ecx,ebx
c001cf75:	89 f3                	mov    ebx,esi
c001cf77:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cf7d:	09 ca                	or     edx,ecx
c001cf7f:	84 db                	test   bl,bl
c001cf81:	74 06                	je     c001cf89 <Vm::fpuLongToFloat(long long)+0x53>
c001cf83:	81 ca 00 00 00 80    	or     edx,0x80000000
c001cf89:	5b                   	pop    ebx
c001cf8a:	5e                   	pop    esi
c001cf8b:	c3                   	ret    

c001cf8c <Vm::fpuGet0()>:
c001cf8c:	31 c0                	xor    eax,eax
c001cf8e:	31 d2                	xor    edx,edx
c001cf90:	c3                   	ret    

c001cf91 <Vm::fpuGet1()>:
c001cf91:	b8 01 00 00 00       	mov    eax,0x1
c001cf96:	31 d2                	xor    edx,edx
c001cf98:	c3                   	ret    

c001cf99 <Vm::fpuGetPi()>:
c001cf99:	b8 03 00 00 00       	mov    eax,0x3
c001cf9e:	31 d2                	xor    edx,edx
c001cfa0:	c3                   	ret    

c001cfa1 <Vm::fpuGetLog2E()>:
c001cfa1:	83 ec 18             	sub    esp,0x18
c001cfa4:	68 00 8a 02 c0       	push   0xc0028a00
c001cfa9:	e8 45 ba ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001cfae:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfb3:	31 d2                	xor    edx,edx
c001cfb5:	83 c4 1c             	add    esp,0x1c
c001cfb8:	c3                   	ret    

c001cfb9 <Vm::fpuGetLogE2()>:
c001cfb9:	83 ec 18             	sub    esp,0x18
c001cfbc:	68 0c 8a 02 c0       	push   0xc0028a0c
c001cfc1:	e8 2d ba ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001cfc6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfcb:	31 d2                	xor    edx,edx
c001cfcd:	83 c4 1c             	add    esp,0x1c
c001cfd0:	c3                   	ret    

c001cfd1 <Vm::fpuGetLog210()>:
c001cfd1:	83 ec 18             	sub    esp,0x18
c001cfd4:	68 18 8a 02 c0       	push   0xc0028a18
c001cfd9:	e8 15 ba ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001cfde:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfe3:	31 d2                	xor    edx,edx
c001cfe5:	83 c4 1c             	add    esp,0x1c
c001cfe8:	c3                   	ret    

c001cfe9 <Vm::fpuGetLog102()>:
c001cfe9:	83 ec 18             	sub    esp,0x18
c001cfec:	68 25 8a 02 c0       	push   0xc0028a25
c001cff1:	e8 fd b9 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001cff6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cffb:	31 d2                	xor    edx,edx
c001cffd:	83 c4 1c             	add    esp,0x1c
c001d000:	c3                   	ret    

c001d001 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001d001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d005:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d009:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d00d:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d011:	0f 92 c0             	setb   al
c001d014:	c3                   	ret    

c001d015 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01d:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d021:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d025:	09 c2                	or     edx,eax
c001d027:	0f 94 c0             	sete   al
c001d02a:	c3                   	ret    

c001d02b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d02b:	57                   	push   edi
c001d02c:	56                   	push   esi
c001d02d:	53                   	push   ebx
c001d02e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d032:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d036:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d03a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d03e:	57                   	push   edi
c001d03f:	56                   	push   esi
c001d040:	53                   	push   ebx
c001d041:	51                   	push   ecx
c001d042:	e8 ce ff ff ff       	call   c001d015 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d047:	83 c4 10             	add    esp,0x10
c001d04a:	88 c2                	mov    dl,al
c001d04c:	31 c0                	xor    eax,eax
c001d04e:	84 d2                	test   dl,dl
c001d050:	75 0c                	jne    c001d05e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d052:	57                   	push   edi
c001d053:	56                   	push   esi
c001d054:	53                   	push   ebx
c001d055:	51                   	push   ecx
c001d056:	e8 a6 ff ff ff       	call   c001d001 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d05b:	83 c4 10             	add    esp,0x10
c001d05e:	83 e0 01             	and    eax,0x1
c001d061:	5b                   	pop    ebx
c001d062:	88 c1                	mov    cl,al
c001d064:	83 e2 01             	and    edx,0x1
c001d067:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d06c:	c1 e2 06             	shl    edx,0x6
c001d06f:	83 e0 ba             	and    eax,0xffffffba
c001d072:	5e                   	pop    esi
c001d073:	09 c8                	or     eax,ecx
c001d075:	5f                   	pop    edi
c001d076:	09 d0                	or     eax,edx
c001d078:	a2 81 b8 02 c0       	mov    ds:0xc002b881,al
c001d07d:	c3                   	ret    

c001d07e <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d07e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d082:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d086:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d08a:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d08e:	c3                   	ret    

c001d08f <Vm::fpuAbs(unsigned long long)>:
c001d08f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d093:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d097:	c3                   	ret    

c001d098 <Vm::fpuChs(unsigned long long)>:
c001d098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d09c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0a0:	f7 d8                	neg    eax
c001d0a2:	83 d2 00             	adc    edx,0x0
c001d0a5:	f7 da                	neg    edx
c001d0a7:	c3                   	ret    

c001d0a8 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d0a8:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d0ac:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d0b1:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d0b5:	eb c7                	jmp    c001d07e <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d0b7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d0b7:	53                   	push   ebx
c001d0b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d0c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0c8:	0f af ca             	imul   ecx,edx
c001d0cb:	0f af d8             	imul   ebx,eax
c001d0ce:	f7 e2                	mul    edx
c001d0d0:	01 d9                	add    ecx,ebx
c001d0d2:	5b                   	pop    ebx
c001d0d3:	01 ca                	add    edx,ecx
c001d0d5:	c3                   	ret    

c001d0d6 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d0d6:	83 ec 0c             	sub    esp,0xc
c001d0d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e9:	e8 6e 62 00 00       	call   c002335c <__udivdi3>
c001d0ee:	83 c4 1c             	add    esp,0x1c
c001d0f1:	c3                   	ret    

c001d0f2 <Vm::fpuSquare(unsigned long long)>:
c001d0f2:	50                   	push   eax
c001d0f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0fb:	52                   	push   edx
c001d0fc:	50                   	push   eax
c001d0fd:	52                   	push   edx
c001d0fe:	50                   	push   eax
c001d0ff:	e8 b3 ff ff ff       	call   c001d0b7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d104:	83 c4 14             	add    esp,0x14
c001d107:	c3                   	ret    

c001d108 <Vm::fpuGetReg(int)>:
c001d108:	83 ec 0c             	sub    esp,0xc
c001d10b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d110:	76 10                	jbe    c001d122 <Vm::fpuGetReg(int)+0x1a>
c001d112:	83 ec 0c             	sub    esp,0xc
c001d115:	68 32 8a 02 c0       	push   0xc0028a32
c001d11a:	e8 d4 b8 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001d11f:	83 c4 10             	add    esp,0x10
c001d122:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d127:	b9 08 00 00 00       	mov    ecx,0x8
c001d12c:	c0 e8 03             	shr    al,0x3
c001d12f:	83 e0 07             	and    eax,0x7
c001d132:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d136:	99                   	cdq    
c001d137:	f7 f9                	idiv   ecx
c001d139:	8b 04 d5 84 b8 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd477c]
c001d140:	8b 14 d5 88 b8 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4778]
c001d147:	83 c4 0c             	add    esp,0xc
c001d14a:	c3                   	ret    

c001d14b <Vm::fpuSetReg(int, unsigned long long)>:
c001d14b:	57                   	push   edi
c001d14c:	56                   	push   esi
c001d14d:	52                   	push   edx
c001d14e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d152:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d156:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d15b:	76 10                	jbe    c001d16d <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d15d:	83 ec 0c             	sub    esp,0xc
c001d160:	68 45 8a 02 c0       	push   0xc0028a45
c001d165:	e8 89 b8 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001d16a:	83 c4 10             	add    esp,0x10
c001d16d:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d172:	b9 08 00 00 00       	mov    ecx,0x8
c001d177:	c0 e8 03             	shr    al,0x3
c001d17a:	83 e0 07             	and    eax,0x7
c001d17d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d181:	99                   	cdq    
c001d182:	f7 f9                	idiv   ecx
c001d184:	89 34 d5 84 b8 02 c0 	mov    DWORD PTR [edx*8-0x3ffd477c],esi
c001d18b:	89 3c d5 88 b8 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4778],edi
c001d192:	58                   	pop    eax
c001d193:	5e                   	pop    esi
c001d194:	5f                   	pop    edi
c001d195:	c3                   	ret    

c001d196 <Vm::fpuPush(unsigned long long)>:
c001d196:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d19b:	c0 e8 03             	shr    al,0x3
c001d19e:	83 e0 07             	and    eax,0x7
c001d1a1:	83 c0 07             	add    eax,0x7
c001d1a4:	88 c2                	mov    dl,al
c001d1a6:	83 e0 07             	and    eax,0x7
c001d1a9:	83 e2 07             	and    edx,0x7
c001d1ac:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d1b3:	8a 15 81 b8 02 c0    	mov    dl,BYTE PTR ds:0xc002b881
c001d1b9:	83 e2 c7             	and    edx,0xffffffc7
c001d1bc:	09 ca                	or     edx,ecx
c001d1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d1c2:	88 15 81 b8 02 c0    	mov    BYTE PTR ds:0xc002b881,dl
c001d1c8:	89 0c c5 88 b8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4778],ecx
c001d1cf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1d3:	89 14 c5 84 b8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd477c],edx
c001d1da:	a1 c4 b8 02 c0       	mov    eax,ds:0xc002b8c4
c001d1df:	83 f8 08             	cmp    eax,0x8
c001d1e2:	75 08                	jne    c001d1ec <Vm::fpuPush(unsigned long long)+0x56>
c001d1e4:	80 0d 80 b8 02 c0 40 	or     BYTE PTR ds:0xc002b880,0x40
c001d1eb:	c3                   	ret    
c001d1ec:	40                   	inc    eax
c001d1ed:	a3 c4 b8 02 c0       	mov    ds:0xc002b8c4,eax
c001d1f2:	c3                   	ret    

c001d1f3 <Vm::fpuPop()>:
c001d1f3:	8a 0d 81 b8 02 c0    	mov    cl,BYTE PTR ds:0xc002b881
c001d1f9:	53                   	push   ebx
c001d1fa:	c0 e9 03             	shr    cl,0x3
c001d1fd:	8a 1d 81 b8 02 c0    	mov    bl,BYTE PTR ds:0xc002b881
c001d203:	83 e1 07             	and    ecx,0x7
c001d206:	83 e3 c7             	and    ebx,0xffffffc7
c001d209:	8b 04 cd 84 b8 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd477c]
c001d210:	8b 14 cd 88 b8 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4778]
c001d217:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d21e:	83 e1 38             	and    ecx,0x38
c001d221:	09 d9                	or     ecx,ebx
c001d223:	88 0d 81 b8 02 c0    	mov    BYTE PTR ds:0xc002b881,cl
c001d229:	8b 0d c4 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8c4
c001d22f:	85 c9                	test   ecx,ecx
c001d231:	74 09                	je     c001d23c <Vm::fpuPop()+0x49>
c001d233:	49                   	dec    ecx
c001d234:	89 0d c4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c4,ecx
c001d23a:	eb 07                	jmp    c001d243 <Vm::fpuPop()+0x50>
c001d23c:	80 0d 80 b8 02 c0 40 	or     BYTE PTR ds:0xc002b880,0x40
c001d243:	5b                   	pop    ebx
c001d244:	c3                   	ret    

c001d245 <Vm::x87Handler(regs*)>:
c001d245:	55                   	push   ebp
c001d246:	57                   	push   edi
c001d247:	56                   	push   esi
c001d248:	53                   	push   ebx
c001d249:	83 ec 1c             	sub    esp,0x1c
c001d24c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d250:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d255:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d258:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d260:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d264:	50                   	push   eax
c001d265:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d269:	50                   	push   eax
c001d26a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d26e:	50                   	push   eax
c001d26f:	53                   	push   ebx
c001d270:	e8 83 b5 ff ff       	call   c00187f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d275:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	89 c6                	mov    esi,eax
c001d27d:	80 fa d9             	cmp    dl,0xd9
c001d280:	0f 85 52 01 00 00    	jne    c001d3d8 <Vm::x87Handler(regs*)+0x193>
c001d286:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d28a:	8d 50 20             	lea    edx,[eax+0x20]
c001d28d:	80 fa 0e             	cmp    dl,0xe
c001d290:	0f 87 86 00 00 00    	ja     c001d31c <Vm::x87Handler(regs*)+0xd7>
c001d296:	0f b6 d2             	movzx  edx,dl
c001d299:	ff 24 95 58 8a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd75a8]
c001d2a0:	e8 e7 fc ff ff       	call   c001cf8c <Vm::fpuGet0()>
c001d2a5:	eb 05                	jmp    c001d2ac <Vm::x87Handler(regs*)+0x67>
c001d2a7:	e8 e5 fc ff ff       	call   c001cf91 <Vm::fpuGet1()>
c001d2ac:	57                   	push   edi
c001d2ad:	57                   	push   edi
c001d2ae:	52                   	push   edx
c001d2af:	50                   	push   eax
c001d2b0:	e8 e1 fe ff ff       	call   c001d196 <Vm::fpuPush(unsigned long long)>
c001d2b5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d2b9:	83 c4 10             	add    esp,0x10
c001d2bc:	b0 01                	mov    al,0x1
c001d2be:	e9 e3 09 00 00       	jmp    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001d2c3:	83 ec 0c             	sub    esp,0xc
c001d2c6:	6a 00                	push   0x0
c001d2c8:	e8 3b fe ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d2cd:	59                   	pop    ecx
c001d2ce:	5e                   	pop    esi
c001d2cf:	52                   	push   edx
c001d2d0:	50                   	push   eax
c001d2d1:	e8 c2 fd ff ff       	call   c001d098 <Vm::fpuChs(unsigned long long)>
c001d2d6:	eb 13                	jmp    c001d2eb <Vm::x87Handler(regs*)+0xa6>
c001d2d8:	83 ec 0c             	sub    esp,0xc
c001d2db:	6a 00                	push   0x0
c001d2dd:	e8 26 fe ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d2e2:	5f                   	pop    edi
c001d2e3:	5d                   	pop    ebp
c001d2e4:	52                   	push   edx
c001d2e5:	50                   	push   eax
c001d2e6:	e8 a4 fd ff ff       	call   c001d08f <Vm::fpuAbs(unsigned long long)>
c001d2eb:	83 c4 0c             	add    esp,0xc
c001d2ee:	52                   	push   edx
c001d2ef:	50                   	push   eax
c001d2f0:	6a 00                	push   0x0
c001d2f2:	e8 54 fe ff ff       	call   c001d14b <Vm::fpuSetReg(int, unsigned long long)>
c001d2f7:	eb bc                	jmp    c001d2b5 <Vm::x87Handler(regs*)+0x70>
c001d2f9:	e8 d3 fc ff ff       	call   c001cfd1 <Vm::fpuGetLog210()>
c001d2fe:	eb ac                	jmp    c001d2ac <Vm::x87Handler(regs*)+0x67>
c001d300:	e8 9c fc ff ff       	call   c001cfa1 <Vm::fpuGetLog2E()>
c001d305:	eb a5                	jmp    c001d2ac <Vm::x87Handler(regs*)+0x67>
c001d307:	e8 8d fc ff ff       	call   c001cf99 <Vm::fpuGetPi()>
c001d30c:	eb 9e                	jmp    c001d2ac <Vm::x87Handler(regs*)+0x67>
c001d30e:	e8 d6 fc ff ff       	call   c001cfe9 <Vm::fpuGetLog102()>
c001d313:	eb 97                	jmp    c001d2ac <Vm::x87Handler(regs*)+0x67>
c001d315:	e8 9f fc ff ff       	call   c001cfb9 <Vm::fpuGetLogE2()>
c001d31a:	eb 90                	jmp    c001d2ac <Vm::x87Handler(regs*)+0x67>
c001d31c:	8d 50 40             	lea    edx,[eax+0x40]
c001d31f:	80 fa 07             	cmp    dl,0x7
c001d322:	77 15                	ja     c001d339 <Vm::x87Handler(regs*)+0xf4>
c001d324:	83 ec 0c             	sub    esp,0xc
c001d327:	2d c0 00 00 00       	sub    eax,0xc0
c001d32c:	50                   	push   eax
c001d32d:	e8 d6 fd ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d332:	59                   	pop    ecx
c001d333:	5e                   	pop    esi
c001d334:	e9 75 ff ff ff       	jmp    c001d2ae <Vm::x87Handler(regs*)+0x69>
c001d339:	8d 50 38             	lea    edx,[eax+0x38]
c001d33c:	80 fa 07             	cmp    dl,0x7
c001d33f:	77 3c                	ja     c001d37d <Vm::x87Handler(regs*)+0x138>
c001d341:	83 ec 0c             	sub    esp,0xc
c001d344:	2d c8 00 00 00       	sub    eax,0xc8
c001d349:	50                   	push   eax
c001d34a:	e8 b9 fd ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d34f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d356:	89 c6                	mov    esi,eax
c001d358:	89 d7                	mov    edi,edx
c001d35a:	e8 a9 fd ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d35f:	83 c4 0c             	add    esp,0xc
c001d362:	52                   	push   edx
c001d363:	50                   	push   eax
c001d364:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d368:	2d c8 00 00 00       	sub    eax,0xc8
c001d36d:	50                   	push   eax
c001d36e:	e8 d8 fd ff ff       	call   c001d14b <Vm::fpuSetReg(int, unsigned long long)>
c001d373:	83 c4 0c             	add    esp,0xc
c001d376:	57                   	push   edi
c001d377:	56                   	push   esi
c001d378:	e9 73 ff ff ff       	jmp    c001d2f0 <Vm::x87Handler(regs*)+0xab>
c001d37d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d381:	84 d2                	test   dl,dl
c001d383:	75 0f                	jne    c001d394 <Vm::x87Handler(regs*)+0x14f>
c001d385:	83 ec 0c             	sub    esp,0xc
c001d388:	ff 36                	push   DWORD PTR [esi]
c001d38a:	e8 c8 fa ff ff       	call   c001ce57 <Vm::fpu32ToInternal(unsigned int)>
c001d38f:	e9 bf 00 00 00       	jmp    c001d453 <Vm::x87Handler(regs*)+0x20e>
c001d394:	80 fa 03             	cmp    dl,0x3
c001d397:	75 13                	jne    c001d3ac <Vm::x87Handler(regs*)+0x167>
c001d399:	e8 55 fe ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001d39e:	55                   	push   ebp
c001d39f:	55                   	push   ebp
c001d3a0:	52                   	push   edx
c001d3a1:	50                   	push   eax
c001d3a2:	e8 4c fa ff ff       	call   c001cdf3 <Vm::fpuInternalTo32(unsigned long long)>
c001d3a7:	e9 88 00 00 00       	jmp    c001d434 <Vm::x87Handler(regs*)+0x1ef>
c001d3ac:	80 fa 05             	cmp    dl,0x5
c001d3af:	75 0e                	jne    c001d3bf <Vm::x87Handler(regs*)+0x17a>
c001d3b1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d3b4:	66 a3 82 b8 02 c0    	mov    ds:0xc002b882,ax
c001d3ba:	e9 df 00 00 00       	jmp    c001d49e <Vm::x87Handler(regs*)+0x259>
c001d3bf:	31 c0                	xor    eax,eax
c001d3c1:	80 fa 07             	cmp    dl,0x7
c001d3c4:	0f 85 dc 08 00 00    	jne    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001d3ca:	66 a1 82 b8 02 c0    	mov    ax,ds:0xc002b882
c001d3d0:	66 89 06             	mov    WORD PTR [esi],ax
c001d3d3:	e9 c6 00 00 00       	jmp    c001d49e <Vm::x87Handler(regs*)+0x259>
c001d3d8:	80 fa d8             	cmp    dl,0xd8
c001d3db:	0f 84 c9 00 00 00    	je     c001d4aa <Vm::x87Handler(regs*)+0x265>
c001d3e1:	80 fa dc             	cmp    dl,0xdc
c001d3e4:	0f 84 0d 02 00 00    	je     c001d5f7 <Vm::x87Handler(regs*)+0x3b2>
c001d3ea:	80 fa de             	cmp    dl,0xde
c001d3ed:	0f 84 cd 02 00 00    	je     c001d6c0 <Vm::x87Handler(regs*)+0x47b>
c001d3f3:	80 fa dd             	cmp    dl,0xdd
c001d3f6:	0f 84 5f 04 00 00    	je     c001d85b <Vm::x87Handler(regs*)+0x616>
c001d3fc:	80 fa da             	cmp    dl,0xda
c001d3ff:	0f 84 24 05 00 00    	je     c001d929 <Vm::x87Handler(regs*)+0x6e4>
c001d405:	80 fa df             	cmp    dl,0xdf
c001d408:	0f 84 68 05 00 00    	je     c001d976 <Vm::x87Handler(regs*)+0x731>
c001d40e:	31 c0                	xor    eax,eax
c001d410:	80 fa db             	cmp    dl,0xdb
c001d413:	0f 85 8d 08 00 00    	jne    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001d419:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d41d:	80 fa 03             	cmp    dl,0x3
c001d420:	0f 85 70 06 00 00    	jne    c001da96 <Vm::x87Handler(regs*)+0x851>
c001d426:	e8 c8 fd ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001d42b:	55                   	push   ebp
c001d42c:	55                   	push   ebp
c001d42d:	52                   	push   edx
c001d42e:	50                   	push   eax
c001d42f:	e8 71 fa ff ff       	call   c001cea5 <Vm::fpuFloatToLong(unsigned long long)>
c001d434:	83 c4 10             	add    esp,0x10
c001d437:	89 06                	mov    DWORD PTR [esi],eax
c001d439:	eb 63                	jmp    c001d49e <Vm::x87Handler(regs*)+0x259>
c001d43b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d43f:	84 d2                	test   dl,dl
c001d441:	0f 85 e6 05 00 00    	jne    c001da2d <Vm::x87Handler(regs*)+0x7e8>
c001d447:	57                   	push   edi
c001d448:	57                   	push   edi
c001d449:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d44c:	ff 36                	push   DWORD PTR [esi]
c001d44e:	e8 49 fa ff ff       	call   c001ce9c <Vm::fpu64ToInternal(unsigned long long)>
c001d453:	5e                   	pop    esi
c001d454:	5f                   	pop    edi
c001d455:	52                   	push   edx
c001d456:	50                   	push   eax
c001d457:	e8 3a fd ff ff       	call   c001d196 <Vm::fpuPush(unsigned long long)>
c001d45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d460:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d463:	e9 51 fe ff ff       	jmp    c001d2b9 <Vm::x87Handler(regs*)+0x74>
c001d468:	80 fa 03             	cmp    dl,0x3
c001d46b:	0f 85 d7 06 00 00    	jne    c001db48 <Vm::x87Handler(regs*)+0x903>
c001d471:	57                   	push   edi
c001d472:	57                   	push   edi
c001d473:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d476:	ff 36                	push   DWORD PTR [esi]
c001d478:	e8 1f fa ff ff       	call   c001ce9c <Vm::fpu64ToInternal(unsigned long long)>
c001d47d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d484:	89 c6                	mov    esi,eax
c001d486:	89 d7                	mov    edi,edx
c001d488:	e8 7b fc ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d48d:	57                   	push   edi
c001d48e:	56                   	push   esi
c001d48f:	52                   	push   edx
c001d490:	50                   	push   eax
c001d491:	e8 95 fb ff ff       	call   c001d02b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d496:	83 c4 20             	add    esp,0x20
c001d499:	e8 55 fd ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001d49e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4a2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d4a5:	e9 12 fe ff ff       	jmp    c001d2bc <Vm::x87Handler(regs*)+0x77>
c001d4aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d4ae:	8d 50 40             	lea    edx,[eax+0x40]
c001d4b1:	80 fa 07             	cmp    dl,0x7
c001d4b4:	77 29                	ja     c001d4df <Vm::x87Handler(regs*)+0x29a>
c001d4b6:	83 ec 0c             	sub    esp,0xc
c001d4b9:	2d c0 00 00 00       	sub    eax,0xc0
c001d4be:	50                   	push   eax
c001d4bf:	e8 44 fc ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d4c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4cb:	89 c6                	mov    esi,eax
c001d4cd:	89 d7                	mov    edi,edx
c001d4cf:	e8 34 fc ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d4d4:	57                   	push   edi
c001d4d5:	56                   	push   esi
c001d4d6:	52                   	push   edx
c001d4d7:	50                   	push   eax
c001d4d8:	e8 a1 fb ff ff       	call   c001d07e <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d4dd:	eb 2f                	jmp    c001d50e <Vm::x87Handler(regs*)+0x2c9>
c001d4df:	8d 50 38             	lea    edx,[eax+0x38]
c001d4e2:	80 fa 07             	cmp    dl,0x7
c001d4e5:	77 2f                	ja     c001d516 <Vm::x87Handler(regs*)+0x2d1>
c001d4e7:	83 ec 0c             	sub    esp,0xc
c001d4ea:	2d c8 00 00 00       	sub    eax,0xc8
c001d4ef:	50                   	push   eax
c001d4f0:	e8 13 fc ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d4f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4fc:	89 c6                	mov    esi,eax
c001d4fe:	89 d7                	mov    edi,edx
c001d500:	e8 03 fc ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d505:	57                   	push   edi
c001d506:	56                   	push   esi
c001d507:	52                   	push   edx
c001d508:	50                   	push   eax
c001d509:	e8 a9 fb ff ff       	call   c001d0b7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d50e:	83 c4 1c             	add    esp,0x1c
c001d511:	e9 d8 fd ff ff       	jmp    c001d2ee <Vm::x87Handler(regs*)+0xa9>
c001d516:	8d 50 30             	lea    edx,[eax+0x30]
c001d519:	80 fa 07             	cmp    dl,0x7
c001d51c:	77 0d                	ja     c001d52b <Vm::x87Handler(regs*)+0x2e6>
c001d51e:	83 ec 0c             	sub    esp,0xc
c001d521:	2d d0 00 00 00       	sub    eax,0xd0
c001d526:	e9 99 03 00 00       	jmp    c001d8c4 <Vm::x87Handler(regs*)+0x67f>
c001d52b:	8d 50 28             	lea    edx,[eax+0x28]
c001d52e:	80 fa 07             	cmp    dl,0x7
c001d531:	77 0d                	ja     c001d540 <Vm::x87Handler(regs*)+0x2fb>
c001d533:	83 ec 0c             	sub    esp,0xc
c001d536:	2d d8 00 00 00       	sub    eax,0xd8
c001d53b:	e9 c0 03 00 00       	jmp    c001d900 <Vm::x87Handler(regs*)+0x6bb>
c001d540:	8d 50 20             	lea    edx,[eax+0x20]
c001d543:	80 fa 07             	cmp    dl,0x7
c001d546:	77 1b                	ja     c001d563 <Vm::x87Handler(regs*)+0x31e>
c001d548:	83 ec 0c             	sub    esp,0xc
c001d54b:	2d e0 00 00 00       	sub    eax,0xe0
c001d550:	50                   	push   eax
c001d551:	e8 b2 fb ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d556:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d55d:	89 c6                	mov    esi,eax
c001d55f:	89 d7                	mov    edi,edx
c001d561:	eb 22                	jmp    c001d585 <Vm::x87Handler(regs*)+0x340>
c001d563:	8d 50 18             	lea    edx,[eax+0x18]
c001d566:	80 fa 07             	cmp    dl,0x7
c001d569:	77 2d                	ja     c001d598 <Vm::x87Handler(regs*)+0x353>
c001d56b:	83 ec 0c             	sub    esp,0xc
c001d56e:	6a 00                	push   0x0
c001d570:	e8 93 fb ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d575:	89 c6                	mov    esi,eax
c001d577:	89 d7                	mov    edi,edx
c001d579:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d57d:	2d e8 00 00 00       	sub    eax,0xe8
c001d582:	89 04 24             	mov    DWORD PTR [esp],eax
c001d585:	e8 7e fb ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d58a:	57                   	push   edi
c001d58b:	56                   	push   esi
c001d58c:	52                   	push   edx
c001d58d:	50                   	push   eax
c001d58e:	e8 15 fb ff ff       	call   c001d0a8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d593:	e9 76 ff ff ff       	jmp    c001d50e <Vm::x87Handler(regs*)+0x2c9>
c001d598:	8d 50 10             	lea    edx,[eax+0x10]
c001d59b:	80 fa 07             	cmp    dl,0x7
c001d59e:	77 1b                	ja     c001d5bb <Vm::x87Handler(regs*)+0x376>
c001d5a0:	83 ec 0c             	sub    esp,0xc
c001d5a3:	2d f0 00 00 00       	sub    eax,0xf0
c001d5a8:	50                   	push   eax
c001d5a9:	e8 5a fb ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d5ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5b5:	89 c6                	mov    esi,eax
c001d5b7:	89 d7                	mov    edi,edx
c001d5b9:	eb 22                	jmp    c001d5dd <Vm::x87Handler(regs*)+0x398>
c001d5bb:	3c f7                	cmp    al,0xf7
c001d5bd:	0f 86 d1 03 00 00    	jbe    c001d994 <Vm::x87Handler(regs*)+0x74f>
c001d5c3:	83 ec 0c             	sub    esp,0xc
c001d5c6:	6a 00                	push   0x0
c001d5c8:	e8 3b fb ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d5cd:	89 c6                	mov    esi,eax
c001d5cf:	89 d7                	mov    edi,edx
c001d5d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5d5:	2d f8 00 00 00       	sub    eax,0xf8
c001d5da:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5dd:	e8 26 fb ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d5e2:	57                   	push   edi
c001d5e3:	56                   	push   esi
c001d5e4:	52                   	push   edx
c001d5e5:	50                   	push   eax
c001d5e6:	e8 eb fa ff ff       	call   c001d0d6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d5eb:	83 c4 1c             	add    esp,0x1c
c001d5ee:	52                   	push   edx
c001d5ef:	50                   	push   eax
c001d5f0:	6a 00                	push   0x0
c001d5f2:	e9 51 02 00 00       	jmp    c001d848 <Vm::x87Handler(regs*)+0x603>
c001d5f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5fb:	8d 50 40             	lea    edx,[eax+0x40]
c001d5fe:	80 fa 07             	cmp    dl,0x7
c001d601:	77 37                	ja     c001d63a <Vm::x87Handler(regs*)+0x3f5>
c001d603:	83 ec 0c             	sub    esp,0xc
c001d606:	2d c0 00 00 00       	sub    eax,0xc0
c001d60b:	50                   	push   eax
c001d60c:	e8 f7 fa ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d611:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d618:	89 c6                	mov    esi,eax
c001d61a:	89 d7                	mov    edi,edx
c001d61c:	e8 e7 fa ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d621:	57                   	push   edi
c001d622:	56                   	push   esi
c001d623:	52                   	push   edx
c001d624:	50                   	push   eax
c001d625:	e8 54 fa ff ff       	call   c001d07e <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d62a:	83 c4 1c             	add    esp,0x1c
c001d62d:	52                   	push   edx
c001d62e:	50                   	push   eax
c001d62f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d633:	2d c0 00 00 00       	sub    eax,0xc0
c001d638:	eb 3d                	jmp    c001d677 <Vm::x87Handler(regs*)+0x432>
c001d63a:	8d 50 38             	lea    edx,[eax+0x38]
c001d63d:	80 fa 07             	cmp    dl,0x7
c001d640:	77 3b                	ja     c001d67d <Vm::x87Handler(regs*)+0x438>
c001d642:	83 ec 0c             	sub    esp,0xc
c001d645:	2d c8 00 00 00       	sub    eax,0xc8
c001d64a:	50                   	push   eax
c001d64b:	e8 b8 fa ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d650:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d657:	89 c6                	mov    esi,eax
c001d659:	89 d7                	mov    edi,edx
c001d65b:	e8 a8 fa ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d660:	57                   	push   edi
c001d661:	56                   	push   esi
c001d662:	52                   	push   edx
c001d663:	50                   	push   eax
c001d664:	e8 4e fa ff ff       	call   c001d0b7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d669:	83 c4 1c             	add    esp,0x1c
c001d66c:	52                   	push   edx
c001d66d:	50                   	push   eax
c001d66e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d672:	2d c8 00 00 00       	sub    eax,0xc8
c001d677:	50                   	push   eax
c001d678:	e9 75 fc ff ff       	jmp    c001d2f2 <Vm::x87Handler(regs*)+0xad>
c001d67d:	83 c0 18             	add    eax,0x18
c001d680:	3c 07                	cmp    al,0x7
c001d682:	0f 87 3b 04 00 00    	ja     c001dac3 <Vm::x87Handler(regs*)+0x87e>
c001d688:	83 ec 0c             	sub    esp,0xc
c001d68b:	6a 00                	push   0x0
c001d68d:	e8 76 fa ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d692:	89 c6                	mov    esi,eax
c001d694:	89 d7                	mov    edi,edx
c001d696:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d69a:	2d e8 00 00 00       	sub    eax,0xe8
c001d69f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6a2:	e8 61 fa ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d6a7:	57                   	push   edi
c001d6a8:	56                   	push   esi
c001d6a9:	52                   	push   edx
c001d6aa:	50                   	push   eax
c001d6ab:	e8 f8 f9 ff ff       	call   c001d0a8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d6b0:	83 c4 1c             	add    esp,0x1c
c001d6b3:	52                   	push   edx
c001d6b4:	50                   	push   eax
c001d6b5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6b9:	2d e8 00 00 00       	sub    eax,0xe8
c001d6be:	eb b7                	jmp    c001d677 <Vm::x87Handler(regs*)+0x432>
c001d6c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6c4:	8d 50 40             	lea    edx,[eax+0x40]
c001d6c7:	80 fa 07             	cmp    dl,0x7
c001d6ca:	77 3a                	ja     c001d706 <Vm::x87Handler(regs*)+0x4c1>
c001d6cc:	83 ec 0c             	sub    esp,0xc
c001d6cf:	2d c0 00 00 00       	sub    eax,0xc0
c001d6d4:	50                   	push   eax
c001d6d5:	e8 2e fa ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d6da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6e1:	89 c6                	mov    esi,eax
c001d6e3:	89 d7                	mov    edi,edx
c001d6e5:	e8 1e fa ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d6ea:	57                   	push   edi
c001d6eb:	56                   	push   esi
c001d6ec:	52                   	push   edx
c001d6ed:	50                   	push   eax
c001d6ee:	e8 8b f9 ff ff       	call   c001d07e <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d6f3:	83 c4 1c             	add    esp,0x1c
c001d6f6:	52                   	push   edx
c001d6f7:	50                   	push   eax
c001d6f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6fc:	2d c0 00 00 00       	sub    eax,0xc0
c001d701:	e9 9e 01 00 00       	jmp    c001d8a4 <Vm::x87Handler(regs*)+0x65f>
c001d706:	8d 50 20             	lea    edx,[eax+0x20]
c001d709:	80 fa 07             	cmp    dl,0x7
c001d70c:	77 3a                	ja     c001d748 <Vm::x87Handler(regs*)+0x503>
c001d70e:	83 ec 0c             	sub    esp,0xc
c001d711:	2d e0 00 00 00       	sub    eax,0xe0
c001d716:	50                   	push   eax
c001d717:	e8 ec f9 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d71c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d723:	89 c6                	mov    esi,eax
c001d725:	89 d7                	mov    edi,edx
c001d727:	e8 dc f9 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d72c:	57                   	push   edi
c001d72d:	56                   	push   esi
c001d72e:	52                   	push   edx
c001d72f:	50                   	push   eax
c001d730:	e8 73 f9 ff ff       	call   c001d0a8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d735:	83 c4 1c             	add    esp,0x1c
c001d738:	52                   	push   edx
c001d739:	50                   	push   eax
c001d73a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d73e:	2d e0 00 00 00       	sub    eax,0xe0
c001d743:	e9 5c 01 00 00       	jmp    c001d8a4 <Vm::x87Handler(regs*)+0x65f>
c001d748:	8d 50 18             	lea    edx,[eax+0x18]
c001d74b:	80 fa 07             	cmp    dl,0x7
c001d74e:	77 3b                	ja     c001d78b <Vm::x87Handler(regs*)+0x546>
c001d750:	83 ec 0c             	sub    esp,0xc
c001d753:	6a 00                	push   0x0
c001d755:	e8 ae f9 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d75a:	89 c6                	mov    esi,eax
c001d75c:	89 d7                	mov    edi,edx
c001d75e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d762:	2d e8 00 00 00       	sub    eax,0xe8
c001d767:	89 04 24             	mov    DWORD PTR [esp],eax
c001d76a:	e8 99 f9 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d76f:	57                   	push   edi
c001d770:	56                   	push   esi
c001d771:	52                   	push   edx
c001d772:	50                   	push   eax
c001d773:	e8 30 f9 ff ff       	call   c001d0a8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d778:	83 c4 1c             	add    esp,0x1c
c001d77b:	52                   	push   edx
c001d77c:	50                   	push   eax
c001d77d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d781:	2d e8 00 00 00       	sub    eax,0xe8
c001d786:	e9 19 01 00 00       	jmp    c001d8a4 <Vm::x87Handler(regs*)+0x65f>
c001d78b:	8d 50 38             	lea    edx,[eax+0x38]
c001d78e:	80 fa 07             	cmp    dl,0x7
c001d791:	77 37                	ja     c001d7ca <Vm::x87Handler(regs*)+0x585>
c001d793:	83 ec 0c             	sub    esp,0xc
c001d796:	2d c8 00 00 00       	sub    eax,0xc8
c001d79b:	50                   	push   eax
c001d79c:	e8 67 f9 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d7a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d7a8:	89 c6                	mov    esi,eax
c001d7aa:	89 d7                	mov    edi,edx
c001d7ac:	e8 57 f9 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d7b1:	57                   	push   edi
c001d7b2:	56                   	push   esi
c001d7b3:	52                   	push   edx
c001d7b4:	50                   	push   eax
c001d7b5:	e8 fd f8 ff ff       	call   c001d0b7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d7ba:	83 c4 1c             	add    esp,0x1c
c001d7bd:	52                   	push   edx
c001d7be:	50                   	push   eax
c001d7bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7c3:	2d c8 00 00 00       	sub    eax,0xc8
c001d7c8:	eb 7d                	jmp    c001d847 <Vm::x87Handler(regs*)+0x602>
c001d7ca:	3c f7                	cmp    al,0xf7
c001d7cc:	76 38                	jbe    c001d806 <Vm::x87Handler(regs*)+0x5c1>
c001d7ce:	83 ec 0c             	sub    esp,0xc
c001d7d1:	6a 00                	push   0x0
c001d7d3:	e8 30 f9 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d7d8:	89 c6                	mov    esi,eax
c001d7da:	89 d7                	mov    edi,edx
c001d7dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7e0:	2d f8 00 00 00       	sub    eax,0xf8
c001d7e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7e8:	e8 1b f9 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d7ed:	57                   	push   edi
c001d7ee:	56                   	push   esi
c001d7ef:	52                   	push   edx
c001d7f0:	50                   	push   eax
c001d7f1:	e8 e0 f8 ff ff       	call   c001d0d6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d7f6:	83 c4 1c             	add    esp,0x1c
c001d7f9:	52                   	push   edx
c001d7fa:	50                   	push   eax
c001d7fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7ff:	2d f8 00 00 00       	sub    eax,0xf8
c001d804:	eb 41                	jmp    c001d847 <Vm::x87Handler(regs*)+0x602>
c001d806:	8d 50 10             	lea    edx,[eax+0x10]
c001d809:	80 fa 07             	cmp    dl,0x7
c001d80c:	0f 87 5a 01 00 00    	ja     c001d96c <Vm::x87Handler(regs*)+0x727>
c001d812:	83 ec 0c             	sub    esp,0xc
c001d815:	2d f0 00 00 00       	sub    eax,0xf0
c001d81a:	50                   	push   eax
c001d81b:	e8 e8 f8 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d820:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d827:	89 c6                	mov    esi,eax
c001d829:	89 d7                	mov    edi,edx
c001d82b:	e8 d8 f8 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d830:	57                   	push   edi
c001d831:	56                   	push   esi
c001d832:	52                   	push   edx
c001d833:	50                   	push   eax
c001d834:	e8 9d f8 ff ff       	call   c001d0d6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d839:	83 c4 1c             	add    esp,0x1c
c001d83c:	52                   	push   edx
c001d83d:	50                   	push   eax
c001d83e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d842:	2d f0 00 00 00       	sub    eax,0xf0
c001d847:	50                   	push   eax
c001d848:	e8 fe f8 ff ff       	call   c001d14b <Vm::fpuSetReg(int, unsigned long long)>
c001d84d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d851:	e8 9d f9 ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001d856:	e9 5e fa ff ff       	jmp    c001d2b9 <Vm::x87Handler(regs*)+0x74>
c001d85b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d85f:	8d 50 30             	lea    edx,[eax+0x30]
c001d862:	80 fa 07             	cmp    dl,0x7
c001d865:	77 1d                	ja     c001d884 <Vm::x87Handler(regs*)+0x63f>
c001d867:	83 ec 0c             	sub    esp,0xc
c001d86a:	6a 00                	push   0x0
c001d86c:	e8 97 f8 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d871:	83 c4 0c             	add    esp,0xc
c001d874:	52                   	push   edx
c001d875:	50                   	push   eax
c001d876:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d87a:	2d d0 00 00 00       	sub    eax,0xd0
c001d87f:	e9 f3 fd ff ff       	jmp    c001d677 <Vm::x87Handler(regs*)+0x432>
c001d884:	8d 50 28             	lea    edx,[eax+0x28]
c001d887:	80 fa 07             	cmp    dl,0x7
c001d88a:	77 28                	ja     c001d8b4 <Vm::x87Handler(regs*)+0x66f>
c001d88c:	83 ec 0c             	sub    esp,0xc
c001d88f:	6a 00                	push   0x0
c001d891:	e8 72 f8 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d896:	83 c4 0c             	add    esp,0xc
c001d899:	52                   	push   edx
c001d89a:	50                   	push   eax
c001d89b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d89f:	2d d8 00 00 00       	sub    eax,0xd8
c001d8a4:	50                   	push   eax
c001d8a5:	e8 a1 f8 ff ff       	call   c001d14b <Vm::fpuSetReg(int, unsigned long long)>
c001d8aa:	e8 44 f9 ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001d8af:	e9 01 fa ff ff       	jmp    c001d2b5 <Vm::x87Handler(regs*)+0x70>
c001d8b4:	8d 50 20             	lea    edx,[eax+0x20]
c001d8b7:	80 fa 07             	cmp    dl,0x7
c001d8ba:	77 30                	ja     c001d8ec <Vm::x87Handler(regs*)+0x6a7>
c001d8bc:	83 ec 0c             	sub    esp,0xc
c001d8bf:	2d e0 00 00 00       	sub    eax,0xe0
c001d8c4:	50                   	push   eax
c001d8c5:	e8 3e f8 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d8ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8d1:	89 c6                	mov    esi,eax
c001d8d3:	89 d7                	mov    edi,edx
c001d8d5:	e8 2e f8 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d8da:	57                   	push   edi
c001d8db:	56                   	push   esi
c001d8dc:	52                   	push   edx
c001d8dd:	50                   	push   eax
c001d8de:	e8 48 f7 ff ff       	call   c001d02b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d8e3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d8e7:	e9 54 02 00 00       	jmp    c001db40 <Vm::x87Handler(regs*)+0x8fb>
c001d8ec:	8d 50 18             	lea    edx,[eax+0x18]
c001d8ef:	80 fa 07             	cmp    dl,0x7
c001d8f2:	0f 87 43 fb ff ff    	ja     c001d43b <Vm::x87Handler(regs*)+0x1f6>
c001d8f8:	83 ec 0c             	sub    esp,0xc
c001d8fb:	2d e8 00 00 00       	sub    eax,0xe8
c001d900:	50                   	push   eax
c001d901:	e8 02 f8 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d906:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d90d:	89 c6                	mov    esi,eax
c001d90f:	89 d7                	mov    edi,edx
c001d911:	e8 f2 f7 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d916:	57                   	push   edi
c001d917:	56                   	push   esi
c001d918:	52                   	push   edx
c001d919:	50                   	push   eax
c001d91a:	e8 0c f7 ff ff       	call   c001d02b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d91f:	83 c4 20             	add    esp,0x20
c001d922:	e8 cc f8 ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001d927:	eb 62                	jmp    c001d98b <Vm::x87Handler(regs*)+0x746>
c001d929:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001d92d:	0f 85 0f 01 00 00    	jne    c001da42 <Vm::x87Handler(regs*)+0x7fd>
c001d933:	83 ec 0c             	sub    esp,0xc
c001d936:	6a 01                	push   0x1
c001d938:	e8 cb f7 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d93d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d944:	89 c6                	mov    esi,eax
c001d946:	89 d7                	mov    edi,edx
c001d948:	e8 bb f7 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d94d:	57                   	push   edi
c001d94e:	56                   	push   esi
c001d94f:	52                   	push   edx
c001d950:	50                   	push   eax
c001d951:	e8 d5 f6 ff ff       	call   c001d02b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d956:	83 c4 20             	add    esp,0x20
c001d959:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d95d:	e8 91 f8 ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001d962:	e8 8c f8 ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001d967:	e9 50 f9 ff ff       	jmp    c001d2bc <Vm::x87Handler(regs*)+0x77>
c001d96c:	3c d9                	cmp    al,0xd9
c001d96e:	0f 85 b5 02 00 00    	jne    c001dc29 <Vm::x87Handler(regs*)+0x9e4>
c001d974:	eb bd                	jmp    c001d933 <Vm::x87Handler(regs*)+0x6ee>
c001d976:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001d97a:	0f 85 ea 02 00 00    	jne    c001dc6a <Vm::x87Handler(regs*)+0xa25>
c001d980:	0f b7 05 80 b8 02 c0 	movzx  eax,WORD PTR ds:0xc002b880
c001d987:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001d98b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d98f:	e9 28 f9 ff ff       	jmp    c001d2bc <Vm::x87Handler(regs*)+0x77>
c001d994:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d998:	84 d2                	test   dl,dl
c001d99a:	75 0f                	jne    c001d9ab <Vm::x87Handler(regs*)+0x766>
c001d99c:	83 ec 0c             	sub    esp,0xc
c001d99f:	ff 36                	push   DWORD PTR [esi]
c001d9a1:	e8 b1 f4 ff ff       	call   c001ce57 <Vm::fpu32ToInternal(unsigned int)>
c001d9a6:	e9 2c 01 00 00       	jmp    c001dad7 <Vm::x87Handler(regs*)+0x892>
c001d9ab:	80 fa 01             	cmp    dl,0x1
c001d9ae:	75 0f                	jne    c001d9bf <Vm::x87Handler(regs*)+0x77a>
c001d9b0:	83 ec 0c             	sub    esp,0xc
c001d9b3:	ff 36                	push   DWORD PTR [esi]
c001d9b5:	e8 9d f4 ff ff       	call   c001ce57 <Vm::fpu32ToInternal(unsigned int)>
c001d9ba:	e9 81 02 00 00       	jmp    c001dc40 <Vm::x87Handler(regs*)+0x9fb>
c001d9bf:	80 fa 04             	cmp    dl,0x4
c001d9c2:	75 0f                	jne    c001d9d3 <Vm::x87Handler(regs*)+0x78e>
c001d9c4:	83 ec 0c             	sub    esp,0xc
c001d9c7:	ff 36                	push   DWORD PTR [esi]
c001d9c9:	e8 89 f4 ff ff       	call   c001ce57 <Vm::fpu32ToInternal(unsigned int)>
c001d9ce:	e9 86 01 00 00       	jmp    c001db59 <Vm::x87Handler(regs*)+0x914>
c001d9d3:	80 fa 05             	cmp    dl,0x5
c001d9d6:	75 1b                	jne    c001d9f3 <Vm::x87Handler(regs*)+0x7ae>
c001d9d8:	83 ec 0c             	sub    esp,0xc
c001d9db:	6a 00                	push   0x0
c001d9dd:	e8 26 f7 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001d9e2:	89 c7                	mov    edi,eax
c001d9e4:	89 d5                	mov    ebp,edx
c001d9e6:	58                   	pop    eax
c001d9e7:	ff 36                	push   DWORD PTR [esi]
c001d9e9:	e8 69 f4 ff ff       	call   c001ce57 <Vm::fpu32ToInternal(unsigned int)>
c001d9ee:	e9 a3 01 00 00       	jmp    c001db96 <Vm::x87Handler(regs*)+0x951>
c001d9f3:	80 fa 06             	cmp    dl,0x6
c001d9f6:	75 0f                	jne    c001da07 <Vm::x87Handler(regs*)+0x7c2>
c001d9f8:	83 ec 0c             	sub    esp,0xc
c001d9fb:	ff 36                	push   DWORD PTR [esi]
c001d9fd:	e8 55 f4 ff ff       	call   c001ce57 <Vm::fpu32ToInternal(unsigned int)>
c001da02:	e9 ae 01 00 00       	jmp    c001dbb5 <Vm::x87Handler(regs*)+0x970>
c001da07:	31 c0                	xor    eax,eax
c001da09:	80 fa 07             	cmp    dl,0x7
c001da0c:	0f 85 94 02 00 00    	jne    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001da12:	83 ec 0c             	sub    esp,0xc
c001da15:	6a 00                	push   0x0
c001da17:	e8 ec f6 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001da1c:	89 c7                	mov    edi,eax
c001da1e:	89 d5                	mov    ebp,edx
c001da20:	58                   	pop    eax
c001da21:	ff 36                	push   DWORD PTR [esi]
c001da23:	e8 2f f4 ff ff       	call   c001ce57 <Vm::fpu32ToInternal(unsigned int)>
c001da28:	e9 cb 01 00 00       	jmp    c001dbf8 <Vm::x87Handler(regs*)+0x9b3>
c001da2d:	80 fa 03             	cmp    dl,0x3
c001da30:	0f 85 d3 01 00 00    	jne    c001dc09 <Vm::x87Handler(regs*)+0x9c4>
c001da36:	e8 b8 f7 ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001da3b:	51                   	push   ecx
c001da3c:	51                   	push   ecx
c001da3d:	e9 de 01 00 00       	jmp    c001dc20 <Vm::x87Handler(regs*)+0x9db>
c001da42:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da46:	80 fa 01             	cmp    dl,0x1
c001da49:	75 09                	jne    c001da54 <Vm::x87Handler(regs*)+0x80f>
c001da4b:	57                   	push   edi
c001da4c:	57                   	push   edi
c001da4d:	8b 06                	mov    eax,DWORD PTR [esi]
c001da4f:	e9 e3 01 00 00       	jmp    c001dc37 <Vm::x87Handler(regs*)+0x9f2>
c001da54:	80 fa 04             	cmp    dl,0x4
c001da57:	75 12                	jne    c001da6b <Vm::x87Handler(regs*)+0x826>
c001da59:	31 d2                	xor    edx,edx
c001da5b:	51                   	push   ecx
c001da5c:	51                   	push   ecx
c001da5d:	8b 06                	mov    eax,DWORD PTR [esi]
c001da5f:	52                   	push   edx
c001da60:	50                   	push   eax
c001da61:	e8 d0 f4 ff ff       	call   c001cf36 <Vm::fpuLongToFloat(long long)>
c001da66:	e9 ee 00 00 00       	jmp    c001db59 <Vm::x87Handler(regs*)+0x914>
c001da6b:	31 c0                	xor    eax,eax
c001da6d:	80 fa 07             	cmp    dl,0x7
c001da70:	0f 85 30 02 00 00    	jne    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001da76:	83 ec 0c             	sub    esp,0xc
c001da79:	6a 00                	push   0x0
c001da7b:	e8 88 f6 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001da80:	89 c7                	mov    edi,eax
c001da82:	89 d5                	mov    ebp,edx
c001da84:	58                   	pop    eax
c001da85:	8b 06                	mov    eax,DWORD PTR [esi]
c001da87:	5a                   	pop    edx
c001da88:	31 d2                	xor    edx,edx
c001da8a:	52                   	push   edx
c001da8b:	50                   	push   eax
c001da8c:	e8 a5 f4 ff ff       	call   c001cf36 <Vm::fpuLongToFloat(long long)>
c001da91:	e9 62 01 00 00       	jmp    c001dbf8 <Vm::x87Handler(regs*)+0x9b3>
c001da96:	84 d2                	test   dl,dl
c001da98:	75 0d                	jne    c001daa7 <Vm::x87Handler(regs*)+0x862>
c001da9a:	31 d2                	xor    edx,edx
c001da9c:	55                   	push   ebp
c001da9d:	55                   	push   ebp
c001da9e:	8b 06                	mov    eax,DWORD PTR [esi]
c001daa0:	52                   	push   edx
c001daa1:	50                   	push   eax
c001daa2:	e9 d3 01 00 00       	jmp    c001dc7a <Vm::x87Handler(regs*)+0xa35>
c001daa7:	31 c0                	xor    eax,eax
c001daa9:	80 fa 02             	cmp    dl,0x2
c001daac:	0f 85 f4 01 00 00    	jne    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001dab2:	83 ec 0c             	sub    esp,0xc
c001dab5:	6a 00                	push   0x0
c001dab7:	e8 4c f6 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001dabc:	59                   	pop    ecx
c001dabd:	5f                   	pop    edi
c001dabe:	e9 6a f9 ff ff       	jmp    c001d42d <Vm::x87Handler(regs*)+0x1e8>
c001dac3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dac7:	84 d2                	test   dl,dl
c001dac9:	75 2a                	jne    c001daf5 <Vm::x87Handler(regs*)+0x8b0>
c001dacb:	50                   	push   eax
c001dacc:	50                   	push   eax
c001dacd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dad0:	ff 36                	push   DWORD PTR [esi]
c001dad2:	e8 c5 f3 ff ff       	call   c001ce9c <Vm::fpu64ToInternal(unsigned long long)>
c001dad7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dade:	89 c6                	mov    esi,eax
c001dae0:	89 d7                	mov    edi,edx
c001dae2:	e8 21 f6 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001dae7:	57                   	push   edi
c001dae8:	56                   	push   esi
c001dae9:	52                   	push   edx
c001daea:	50                   	push   eax
c001daeb:	e8 8e f5 ff ff       	call   c001d07e <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001daf0:	e9 64 01 00 00       	jmp    c001dc59 <Vm::x87Handler(regs*)+0xa14>
c001daf5:	80 fa 01             	cmp    dl,0x1
c001daf8:	75 11                	jne    c001db0b <Vm::x87Handler(regs*)+0x8c6>
c001dafa:	50                   	push   eax
c001dafb:	50                   	push   eax
c001dafc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001daff:	ff 36                	push   DWORD PTR [esi]
c001db01:	e8 96 f3 ff ff       	call   c001ce9c <Vm::fpu64ToInternal(unsigned long long)>
c001db06:	e9 35 01 00 00       	jmp    c001dc40 <Vm::x87Handler(regs*)+0x9fb>
c001db0b:	80 fa 02             	cmp    dl,0x2
c001db0e:	0f 85 54 f9 ff ff    	jne    c001d468 <Vm::x87Handler(regs*)+0x223>
c001db14:	55                   	push   ebp
c001db15:	55                   	push   ebp
c001db16:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db19:	ff 36                	push   DWORD PTR [esi]
c001db1b:	e8 7c f3 ff ff       	call   c001ce9c <Vm::fpu64ToInternal(unsigned long long)>
c001db20:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db27:	89 c6                	mov    esi,eax
c001db29:	89 d7                	mov    edi,edx
c001db2b:	e8 d8 f5 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001db30:	57                   	push   edi
c001db31:	56                   	push   esi
c001db32:	52                   	push   edx
c001db33:	50                   	push   eax
c001db34:	e8 f2 f4 ff ff       	call   c001d02b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001db39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db3d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001db40:	83 c4 20             	add    esp,0x20
c001db43:	e9 74 f7 ff ff       	jmp    c001d2bc <Vm::x87Handler(regs*)+0x77>
c001db48:	80 fa 04             	cmp    dl,0x4
c001db4b:	75 2a                	jne    c001db77 <Vm::x87Handler(regs*)+0x932>
c001db4d:	51                   	push   ecx
c001db4e:	51                   	push   ecx
c001db4f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db52:	ff 36                	push   DWORD PTR [esi]
c001db54:	e8 43 f3 ff ff       	call   c001ce9c <Vm::fpu64ToInternal(unsigned long long)>
c001db59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db60:	89 c6                	mov    esi,eax
c001db62:	89 d7                	mov    edi,edx
c001db64:	e8 9f f5 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001db69:	57                   	push   edi
c001db6a:	56                   	push   esi
c001db6b:	52                   	push   edx
c001db6c:	50                   	push   eax
c001db6d:	e8 36 f5 ff ff       	call   c001d0a8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db72:	e9 e2 00 00 00       	jmp    c001dc59 <Vm::x87Handler(regs*)+0xa14>
c001db77:	80 fa 05             	cmp    dl,0x5
c001db7a:	75 28                	jne    c001dba4 <Vm::x87Handler(regs*)+0x95f>
c001db7c:	83 ec 0c             	sub    esp,0xc
c001db7f:	6a 00                	push   0x0
c001db81:	e8 82 f5 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001db86:	89 c7                	mov    edi,eax
c001db88:	89 d5                	mov    ebp,edx
c001db8a:	58                   	pop    eax
c001db8b:	5a                   	pop    edx
c001db8c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db8f:	ff 36                	push   DWORD PTR [esi]
c001db91:	e8 06 f3 ff ff       	call   c001ce9c <Vm::fpu64ToInternal(unsigned long long)>
c001db96:	83 c4 10             	add    esp,0x10
c001db99:	55                   	push   ebp
c001db9a:	57                   	push   edi
c001db9b:	52                   	push   edx
c001db9c:	50                   	push   eax
c001db9d:	e8 06 f5 ff ff       	call   c001d0a8 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dba2:	eb 60                	jmp    c001dc04 <Vm::x87Handler(regs*)+0x9bf>
c001dba4:	80 fa 06             	cmp    dl,0x6
c001dba7:	75 2a                	jne    c001dbd3 <Vm::x87Handler(regs*)+0x98e>
c001dba9:	51                   	push   ecx
c001dbaa:	51                   	push   ecx
c001dbab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbae:	ff 36                	push   DWORD PTR [esi]
c001dbb0:	e8 e7 f2 ff ff       	call   c001ce9c <Vm::fpu64ToInternal(unsigned long long)>
c001dbb5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbbc:	89 c6                	mov    esi,eax
c001dbbe:	89 d7                	mov    edi,edx
c001dbc0:	e8 43 f5 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001dbc5:	57                   	push   edi
c001dbc6:	56                   	push   esi
c001dbc7:	52                   	push   edx
c001dbc8:	50                   	push   eax
c001dbc9:	e8 08 f5 ff ff       	call   c001d0d6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbce:	e9 86 00 00 00       	jmp    c001dc59 <Vm::x87Handler(regs*)+0xa14>
c001dbd3:	31 c0                	xor    eax,eax
c001dbd5:	80 fa 07             	cmp    dl,0x7
c001dbd8:	0f 85 c8 00 00 00    	jne    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001dbde:	83 ec 0c             	sub    esp,0xc
c001dbe1:	6a 00                	push   0x0
c001dbe3:	e8 20 f5 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001dbe8:	89 c7                	mov    edi,eax
c001dbea:	89 d5                	mov    ebp,edx
c001dbec:	58                   	pop    eax
c001dbed:	5a                   	pop    edx
c001dbee:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbf1:	ff 36                	push   DWORD PTR [esi]
c001dbf3:	e8 a4 f2 ff ff       	call   c001ce9c <Vm::fpu64ToInternal(unsigned long long)>
c001dbf8:	83 c4 10             	add    esp,0x10
c001dbfb:	55                   	push   ebp
c001dbfc:	57                   	push   edi
c001dbfd:	52                   	push   edx
c001dbfe:	50                   	push   eax
c001dbff:	e8 d2 f4 ff ff       	call   c001d0d6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dc04:	83 c4 0c             	add    esp,0xc
c001dc07:	eb 53                	jmp    c001dc5c <Vm::x87Handler(regs*)+0xa17>
c001dc09:	31 c0                	xor    eax,eax
c001dc0b:	80 fa 02             	cmp    dl,0x2
c001dc0e:	0f 85 92 00 00 00    	jne    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001dc14:	83 ec 0c             	sub    esp,0xc
c001dc17:	6a 00                	push   0x0
c001dc19:	e8 ea f4 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001dc1e:	59                   	pop    ecx
c001dc1f:	5f                   	pop    edi
c001dc20:	52                   	push   edx
c001dc21:	50                   	push   eax
c001dc22:	e8 27 f2 ff ff       	call   c001ce4e <Vm::fpuInternalTo64(unsigned long long)>
c001dc27:	eb 70                	jmp    c001dc99 <Vm::x87Handler(regs*)+0xa54>
c001dc29:	31 c0                	xor    eax,eax
c001dc2b:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001dc30:	75 74                	jne    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001dc32:	50                   	push   eax
c001dc33:	50                   	push   eax
c001dc34:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dc37:	31 d2                	xor    edx,edx
c001dc39:	52                   	push   edx
c001dc3a:	50                   	push   eax
c001dc3b:	e8 f6 f2 ff ff       	call   c001cf36 <Vm::fpuLongToFloat(long long)>
c001dc40:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc47:	89 c6                	mov    esi,eax
c001dc49:	89 d7                	mov    edi,edx
c001dc4b:	e8 b8 f4 ff ff       	call   c001d108 <Vm::fpuGetReg(int)>
c001dc50:	57                   	push   edi
c001dc51:	56                   	push   esi
c001dc52:	52                   	push   edx
c001dc53:	50                   	push   eax
c001dc54:	e8 5e f4 ff ff       	call   c001d0b7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dc59:	83 c4 1c             	add    esp,0x1c
c001dc5c:	52                   	push   edx
c001dc5d:	50                   	push   eax
c001dc5e:	6a 00                	push   0x0
c001dc60:	e8 e6 f4 ff ff       	call   c001d14b <Vm::fpuSetReg(int, unsigned long long)>
c001dc65:	e9 f2 f7 ff ff       	jmp    c001d45c <Vm::x87Handler(regs*)+0x217>
c001dc6a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dc6e:	80 fa 05             	cmp    dl,0x5
c001dc71:	75 11                	jne    c001dc84 <Vm::x87Handler(regs*)+0xa3f>
c001dc73:	55                   	push   ebp
c001dc74:	55                   	push   ebp
c001dc75:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc78:	ff 36                	push   DWORD PTR [esi]
c001dc7a:	e8 81 f2 ff ff       	call   c001cf00 <Vm::fpuULongToFloat(unsigned long long)>
c001dc7f:	e9 cf f7 ff ff       	jmp    c001d453 <Vm::x87Handler(regs*)+0x20e>
c001dc84:	31 c0                	xor    eax,eax
c001dc86:	80 fa 07             	cmp    dl,0x7
c001dc89:	75 1b                	jne    c001dca6 <Vm::x87Handler(regs*)+0xa61>
c001dc8b:	e8 63 f5 ff ff       	call   c001d1f3 <Vm::fpuPop()>
c001dc90:	51                   	push   ecx
c001dc91:	51                   	push   ecx
c001dc92:	52                   	push   edx
c001dc93:	50                   	push   eax
c001dc94:	e8 0c f2 ff ff       	call   c001cea5 <Vm::fpuFloatToLong(unsigned long long)>
c001dc99:	83 c4 10             	add    esp,0x10
c001dc9c:	89 06                	mov    DWORD PTR [esi],eax
c001dc9e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001dca1:	e9 f8 f7 ff ff       	jmp    c001d49e <Vm::x87Handler(regs*)+0x259>
c001dca6:	83 c4 1c             	add    esp,0x1c
c001dca9:	5b                   	pop    ebx
c001dcaa:	5e                   	pop    esi
c001dcab:	5f                   	pop    edi
c001dcac:	5d                   	pop    ebp
c001dcad:	c3                   	ret    

c001dcae <__static_initialization_and_destruction_0(int, int)>:
c001dcae:	83 ec 0c             	sub    esp,0xc
c001dcb1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dcb6:	75 1a                	jne    c001dcd2 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dcb8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dcc0:	75 10                	jne    c001dcd2 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dcc2:	83 ec 0c             	sub    esp,0xc
c001dcc5:	68 80 b8 02 c0       	push   0xc002b880
c001dcca:	e8 b9 7a 00 00       	call   c0025788 <Vm::_FPUState::_FPUState()>
c001dccf:	83 c4 10             	add    esp,0x10
c001dcd2:	90                   	nop
c001dcd3:	83 c4 0c             	add    esp,0xc
c001dcd6:	c3                   	ret    

c001dcd7 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001dcd7:	83 ec 0c             	sub    esp,0xc
c001dcda:	83 ec 08             	sub    esp,0x8
c001dcdd:	68 ff ff 00 00       	push   0xffff
c001dce2:	6a 01                	push   0x1
c001dce4:	e8 c5 ff ff ff       	call   c001dcae <__static_initialization_and_destruction_0(int, int)>
c001dce9:	83 c4 10             	add    esp,0x10
c001dcec:	83 c4 0c             	add    esp,0xc
c001dcef:	c3                   	ret    

c001dcf0 <FAT::getName()>:
c001dcf0:	b8 94 8a 02 c0       	mov    eax,0xc0028a94
c001dcf5:	c3                   	ret    

c001dcf6 <FAT::tell(void*, unsigned long long*)>:
c001dcf6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dcfb:	75 06                	jne    c001dd03 <FAT::tell(void*, unsigned long long*)+0xd>
c001dcfd:	b8 04 00 00 00       	mov    eax,0x4
c001dd02:	c3                   	ret    
c001dd03:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd08:	75 06                	jne    c001dd10 <FAT::tell(void*, unsigned long long*)+0x1a>
c001dd0a:	b8 04 00 00 00       	mov    eax,0x4
c001dd0f:	c3                   	ret    
c001dd10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd14:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001dd17:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001dd1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd1e:	89 01                	mov    DWORD PTR [ecx],eax
c001dd20:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd23:	b8 00 00 00 00       	mov    eax,0x0
c001dd28:	c3                   	ret    
c001dd29:	90                   	nop

c001dd2a <FAT::stat(void*, unsigned long long*)>:
c001dd2a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dd2f:	75 06                	jne    c001dd37 <FAT::stat(void*, unsigned long long*)+0xd>
c001dd31:	b8 04 00 00 00       	mov    eax,0x4
c001dd36:	c3                   	ret    
c001dd37:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd3c:	75 06                	jne    c001dd44 <FAT::stat(void*, unsigned long long*)+0x1a>
c001dd3e:	b8 04 00 00 00       	mov    eax,0x4
c001dd43:	c3                   	ret    
c001dd44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001dd4b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd52:	89 01                	mov    DWORD PTR [ecx],eax
c001dd54:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd57:	b8 00 00 00 00       	mov    eax,0x0
c001dd5c:	c3                   	ret    
c001dd5d:	90                   	nop

c001dd5e <FAT::~FAT()>:
c001dd5e:	83 ec 0c             	sub    esp,0xc
c001dd61:	ba 18 8b 02 c0       	mov    edx,0xc0028b18
c001dd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6a:	89 10                	mov    DWORD PTR [eax],edx
c001dd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd70:	83 ec 0c             	sub    esp,0xc
c001dd73:	50                   	push   eax
c001dd74:	e8 07 48 ff ff       	call   c0012580 <Filesystem::~Filesystem()>
c001dd79:	83 c4 10             	add    esp,0x10
c001dd7c:	90                   	nop
c001dd7d:	83 c4 0c             	add    esp,0xc
c001dd80:	c3                   	ret    
c001dd81:	90                   	nop

c001dd82 <FAT::~FAT()>:
c001dd82:	83 ec 0c             	sub    esp,0xc
c001dd85:	83 ec 0c             	sub    esp,0xc
c001dd88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd8c:	e8 cd ff ff ff       	call   c001dd5e <FAT::~FAT()>
c001dd91:	83 c4 10             	add    esp,0x10
c001dd94:	83 ec 08             	sub    esp,0x8
c001dd97:	6a 08                	push   0x8
c001dd99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd9d:	e8 d5 43 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001dda2:	83 c4 10             	add    esp,0x10
c001dda5:	83 c4 0c             	add    esp,0xc
c001dda8:	c3                   	ret    
c001dda9:	90                   	nop

c001ddaa <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ddaa:	83 ec 1c             	sub    esp,0x1c
c001ddad:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ddb4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ddb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddbd:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001ddc4:	83 f8 ff             	cmp    eax,0xffffffff
c001ddc7:	75 34                	jne    c001ddfd <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ddc9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddcd:	88 c2                	mov    dl,al
c001ddcf:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001ddd4:	01 d0                	add    eax,edx
c001ddd6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddda:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001dde0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dde4:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001ddeb:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001ddf0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddf4:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001ddfb:	eb 17                	jmp    c001de14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ddfd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001de01:	88 c2                	mov    dl,al
c001de03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001de07:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de0e:	01 d0                	add    eax,edx
c001de10:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de14:	83 ec 04             	sub    esp,0x4
c001de17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de1f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001de23:	50                   	push   eax
c001de24:	e8 20 8d fe ff       	call   c0006b49 <f_getlabel>
c001de29:	83 c4 10             	add    esp,0x10
c001de2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de35:	75 07                	jne    c001de3e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001de37:	b8 00 00 00 00       	mov    eax,0x0
c001de3c:	eb 05                	jmp    c001de43 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001de3e:	b8 01 00 00 00       	mov    eax,0x1
c001de43:	83 c4 1c             	add    esp,0x1c
c001de46:	c3                   	ret    
c001de47:	90                   	nop

c001de48 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001de48:	57                   	push   edi
c001de49:	83 ec 58             	sub    esp,0x58
c001de4c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001de54:	8d 54 24 10          	lea    edx,[esp+0x10]
c001de58:	b9 0f 00 00 00       	mov    ecx,0xf
c001de5d:	b8 00 00 00 00       	mov    eax,0x0
c001de62:	fc                   	cld    
c001de63:	89 d7                	mov    edi,edx
c001de65:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de67:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de6b:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de72:	83 f8 ff             	cmp    eax,0xffffffff
c001de75:	75 34                	jne    c001deab <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001de77:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de7b:	88 c2                	mov    dl,al
c001de7d:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de82:	01 d0                	add    eax,edx
c001de84:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de88:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001de8e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de92:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001de99:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de9e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001dea2:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001dea9:	eb 17                	jmp    c001dec2 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001deab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001deaf:	88 c2                	mov    dl,al
c001deb1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001deb5:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001debc:	01 d0                	add    eax,edx
c001debe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dec2:	83 ec 08             	sub    esp,0x8
c001dec5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001dec9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001decd:	50                   	push   eax
c001dece:	e8 6f 29 fe ff       	call   c0000842 <strcat>
c001ded3:	83 c4 10             	add    esp,0x10
c001ded6:	83 ec 0c             	sub    esp,0xc
c001ded9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dedd:	50                   	push   eax
c001dede:	e8 54 8e fe ff       	call   c0006d37 <f_setlabel>
c001dee3:	83 c4 10             	add    esp,0x10
c001dee6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001deea:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001deef:	75 07                	jne    c001def8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001def1:	b8 00 00 00 00       	mov    eax,0x0
c001def6:	eb 05                	jmp    c001defd <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001def8:	b8 01 00 00 00       	mov    eax,0x1
c001defd:	83 c4 58             	add    esp,0x58
c001df00:	5f                   	pop    edi
c001df01:	c3                   	ret    

c001df02 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001df02:	83 ec 2c             	sub    esp,0x2c
c001df05:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001df0d:	83 ec 08             	sub    esp,0x8
c001df10:	68 b8 8a 02 c0       	push   0xc0028ab8
c001df15:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df19:	e8 be 28 fe ff       	call   c00007dc <strcmp>
c001df1e:	83 c4 10             	add    esp,0x10
c001df21:	85 c0                	test   eax,eax
c001df23:	0f 94 c0             	sete   al
c001df26:	84 c0                	test   al,al
c001df28:	74 0d                	je     c001df37 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001df2a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df32:	e9 a6 00 00 00       	jmp    c001dfdd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df37:	83 ec 08             	sub    esp,0x8
c001df3a:	68 aa 8a 02 c0       	push   0xc0028aaa
c001df3f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df43:	e8 94 28 fe ff       	call   c00007dc <strcmp>
c001df48:	83 c4 10             	add    esp,0x10
c001df4b:	85 c0                	test   eax,eax
c001df4d:	0f 94 c0             	sete   al
c001df50:	84 c0                	test   al,al
c001df52:	74 0a                	je     c001df5e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001df54:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df5c:	eb 7f                	jmp    c001dfdd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df5e:	83 ec 08             	sub    esp,0x8
c001df61:	68 b0 8a 02 c0       	push   0xc0028ab0
c001df66:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df6a:	e8 6d 28 fe ff       	call   c00007dc <strcmp>
c001df6f:	83 c4 10             	add    esp,0x10
c001df72:	85 c0                	test   eax,eax
c001df74:	0f 94 c0             	sete   al
c001df77:	84 c0                	test   al,al
c001df79:	74 0a                	je     c001df85 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001df7b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df83:	eb 58                	jmp    c001dfdd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df85:	83 ec 08             	sub    esp,0x8
c001df88:	68 0c 5e 02 c0       	push   0xc0025e0c
c001df8d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df91:	e8 46 28 fe ff       	call   c00007dc <strcmp>
c001df96:	83 c4 10             	add    esp,0x10
c001df99:	85 c0                	test   eax,eax
c001df9b:	0f 94 c0             	sete   al
c001df9e:	84 c0                	test   al,al
c001dfa0:	74 0a                	je     c001dfac <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001dfa2:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001dfaa:	eb 31                	jmp    c001dfdd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfac:	83 ec 08             	sub    esp,0x8
c001dfaf:	68 b6 8a 02 c0       	push   0xc0028ab6
c001dfb4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dfb8:	e8 1f 28 fe ff       	call   c00007dc <strcmp>
c001dfbd:	83 c4 10             	add    esp,0x10
c001dfc0:	85 c0                	test   eax,eax
c001dfc2:	0f 94 c0             	sete   al
c001dfc5:	84 c0                	test   al,al
c001dfc7:	74 0a                	je     c001dfd3 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001dfc9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001dfd1:	eb 0a                	jmp    c001dfdd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfd3:	b8 08 00 00 00       	mov    eax,0x8
c001dfd8:	e9 04 01 00 00       	jmp    c001e0e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001dfdd:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001dfe4:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001dfe9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dfed:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001dff4:	83 f8 ff             	cmp    eax,0xffffffff
c001dff7:	75 34                	jne    c001e02d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001dff9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dffd:	88 c2                	mov    dl,al
c001dfff:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e004:	01 d0                	add    eax,edx
c001e006:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e00a:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e010:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e014:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e01b:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e020:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e024:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e02b:	eb 17                	jmp    c001e044 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e02d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e031:	88 c2                	mov    dl,al
c001e033:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e037:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e03e:	01 d0                	add    eax,edx
c001e040:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e044:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e048:	88 04 24             	mov    BYTE PTR [esp],al
c001e04b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e04f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e053:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e05b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e060:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e068:	83 ec 0c             	sub    esp,0xc
c001e06b:	68 00 20 00 00       	push   0x2000
c001e070:	e8 f1 10 ff ff       	call   c000f166 <malloc>
c001e075:	83 c4 10             	add    esp,0x10
c001e078:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e07c:	68 00 20 00 00       	push   0x2000
c001e081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e085:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e089:	50                   	push   eax
c001e08a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e08e:	50                   	push   eax
c001e08f:	e8 ee 90 fe ff       	call   c0007182 <f_mkfs>
c001e094:	83 c4 10             	add    esp,0x10
c001e097:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e09b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e0a0:	75 07                	jne    c001e0a9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e0a2:	b8 00 00 00 00       	mov    eax,0x0
c001e0a7:	eb 38                	jmp    c001e0e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0a9:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e0ae:	75 17                	jne    c001e0c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e0b0:	83 ec 0c             	sub    esp,0xc
c001e0b3:	68 e8 8a 02 c0       	push   0xc0028ae8
c001e0b8:	e8 9a 41 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001e0bd:	83 c4 10             	add    esp,0x10
c001e0c0:	b8 09 00 00 00       	mov    eax,0x9
c001e0c5:	eb 1a                	jmp    c001e0e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0cb:	83 ec 08             	sub    esp,0x8
c001e0ce:	50                   	push   eax
c001e0cf:	68 bc 8a 02 c0       	push   0xc0028abc
c001e0d4:	e8 7e 41 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001e0d9:	83 c4 10             	add    esp,0x10
c001e0dc:	b8 01 00 00 00       	mov    eax,0x1
c001e0e1:	83 c4 2c             	add    esp,0x2c
c001e0e4:	c3                   	ret    
c001e0e5:	90                   	nop

c001e0e6 <FAT::tryMount(LogicalDisk*, int)>:
c001e0e6:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e0ec:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e0f1:	83 f8 14             	cmp    eax,0x14
c001e0f4:	75 17                	jne    c001e10d <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e0f6:	83 ec 0c             	sub    esp,0xc
c001e0f9:	68 ce 8a 02 c0       	push   0xc0028ace
c001e0fe:	e8 f0 a8 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001e103:	83 c4 10             	add    esp,0x10
c001e106:	b0 00                	mov    al,0x0
c001e108:	e9 d7 01 00 00       	jmp    c001e2e4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e10d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e114:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e11a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e120:	3d 00 02 00 00       	cmp    eax,0x200
c001e125:	74 07                	je     c001e12e <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e127:	b0 00                	mov    al,0x0
c001e129:	e9 b6 01 00 00       	jmp    c001e2e4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e12e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e136:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e13d:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e144:	83 f8 ff             	cmp    eax,0xffffffff
c001e147:	74 07                	je     c001e150 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e149:	b0 01                	mov    al,0x1
c001e14b:	e9 94 01 00 00       	jmp    c001e2e4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e150:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e15a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e162:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e169:	88 c2                	mov    dl,al
c001e16b:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e170:	01 d0                	add    eax,edx
c001e172:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e179:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e17f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e186:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e18d:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e192:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e199:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e1a0:	83 ec 0c             	sub    esp,0xc
c001e1a3:	68 54 02 00 00       	push   0x254
c001e1a8:	e8 b9 0f ff ff       	call   c000f166 <malloc>
c001e1ad:	83 c4 10             	add    esp,0x10
c001e1b0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e1b7:	83 ec 04             	sub    esp,0x4
c001e1ba:	6a 00                	push   0x0
c001e1bc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e1c3:	50                   	push   eax
c001e1c4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1cb:	e8 70 6b fe ff       	call   c0004d40 <f_mount>
c001e1d0:	83 c4 10             	add    esp,0x10
c001e1d3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e1da:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e1e2:	74 19                	je     c001e1fd <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e1e4:	83 ec 0c             	sub    esp,0xc
c001e1e7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1ee:	e8 93 0f ff ff       	call   c000f186 <rfree>
c001e1f3:	83 c4 10             	add    esp,0x10
c001e1f6:	b0 00                	mov    al,0x0
c001e1f8:	e9 e7 00 00 00       	jmp    c001e2e4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e1fd:	83 ec 04             	sub    esp,0x4
c001e200:	68 00 01 00 00       	push   0x100
c001e205:	6a 00                	push   0x0
c001e207:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e20e:	50                   	push   eax
c001e20f:	e8 d8 24 fe ff       	call   c00006ec <memset>
c001e214:	83 c4 10             	add    esp,0x10
c001e217:	83 ec 08             	sub    esp,0x8
c001e21a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e221:	50                   	push   eax
c001e222:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e229:	50                   	push   eax
c001e22a:	e8 13 26 fe ff       	call   c0000842 <strcat>
c001e22f:	83 c4 10             	add    esp,0x10
c001e232:	83 ec 08             	sub    esp,0x8
c001e235:	68 dc 8a 02 c0       	push   0xc0028adc
c001e23a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e241:	50                   	push   eax
c001e242:	e8 fb 25 fe ff       	call   c0000842 <strcat>
c001e247:	83 c4 10             	add    esp,0x10
c001e24a:	83 ec 04             	sub    esp,0x4
c001e24d:	6a 01                	push   0x1
c001e24f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e256:	50                   	push   eax
c001e257:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e25b:	50                   	push   eax
c001e25c:	e8 41 6b fe ff       	call   c0004da2 <f_open>
c001e261:	83 c4 10             	add    esp,0x10
c001e264:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e26b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e272:	85 c0                	test   eax,eax
c001e274:	74 0a                	je     c001e280 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e276:	78 2d                	js     c001e2a5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e278:	83 e8 04             	sub    eax,0x4
c001e27b:	83 f8 01             	cmp    eax,0x1
c001e27e:	77 25                	ja     c001e2a5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e280:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e28f:	50                   	push   eax
c001e290:	e8 5f 76 fe ff       	call   c00058f4 <f_close>
c001e295:	83 c4 10             	add    esp,0x10
c001e298:	90                   	nop
c001e299:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e2a1:	74 3a                	je     c001e2dd <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e2a3:	eb 2d                	jmp    c001e2d2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e2a5:	83 ec 0c             	sub    esp,0xc
c001e2a8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e2af:	e8 d2 0e ff ff       	call   c000f186 <rfree>
c001e2b4:	83 c4 10             	add    esp,0x10
c001e2b7:	83 ec 04             	sub    esp,0x4
c001e2ba:	6a 00                	push   0x0
c001e2bc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e2c3:	50                   	push   eax
c001e2c4:	6a 00                	push   0x0
c001e2c6:	e8 75 6a fe ff       	call   c0004d40 <f_mount>
c001e2cb:	83 c4 10             	add    esp,0x10
c001e2ce:	b0 00                	mov    al,0x0
c001e2d0:	eb 12                	jmp    c001e2e4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e2d2:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e2d7:	40                   	inc    eax
c001e2d8:	a3 e0 b8 02 c0       	mov    ds:0xc002b8e0,eax
c001e2dd:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e2e4:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e2ea:	c3                   	ret    
c001e2eb:	90                   	nop

c001e2ec <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e2ec:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e2f2:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e2fa:	74 0a                	je     c001e306 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e2fc:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e304:	75 0a                	jne    c001e310 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e306:	b8 04 00 00 00       	mov    eax,0x4
c001e30b:	e9 db 00 00 00       	jmp    c001e3eb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e310:	83 ec 08             	sub    esp,0x8
c001e313:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e31a:	50                   	push   eax
c001e31b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e322:	e8 d7 7b fe ff       	call   c0005efe <f_readdir>
c001e327:	83 c4 10             	add    esp,0x10
c001e32a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e331:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e337:	83 ec 0c             	sub    esp,0xc
c001e33a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e341:	83 c0 1a             	add    eax,0x1a
c001e344:	50                   	push   eax
c001e345:	e8 bf 23 fe ff       	call   c0000709 <strlen>
c001e34a:	83 c4 10             	add    esp,0x10
c001e34d:	ba 00 00 00 00       	mov    edx,0x0
c001e352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e356:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e35a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e361:	0f b6 c0             	movzx  eax,al
c001e364:	83 e0 10             	and    eax,0x10
c001e367:	74 07                	je     c001e370 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e369:	b8 02 00 00 00       	mov    eax,0x2
c001e36e:	eb 05                	jmp    c001e375 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e370:	b8 01 00 00 00       	mov    eax,0x1
c001e375:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e379:	83 ec 08             	sub    esp,0x8
c001e37c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e383:	83 c0 1a             	add    eax,0x1a
c001e386:	50                   	push   eax
c001e387:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e38b:	83 c0 10             	add    eax,0x10
c001e38e:	50                   	push   eax
c001e38f:	e8 f7 23 fe ff       	call   c000078b <strcpy>
c001e394:	83 c4 10             	add    esp,0x10
c001e397:	83 ec 04             	sub    esp,0x4
c001e39a:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e3a1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e3a5:	50                   	push   eax
c001e3a6:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e3ad:	e8 04 23 fe ff       	call   c00006b6 <memcpy>
c001e3b2:	83 c4 10             	add    esp,0x10
c001e3b5:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e3bc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e3c2:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e3c9:	84 c0                	test   al,al
c001e3cb:	75 07                	jne    c001e3d4 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e3cd:	b8 07 00 00 00       	mov    eax,0x7
c001e3d2:	eb 17                	jmp    c001e3eb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3d4:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e3db:	85 c0                	test   eax,eax
c001e3dd:	75 07                	jne    c001e3e6 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e3df:	b8 00 00 00 00       	mov    eax,0x0
c001e3e4:	eb 05                	jmp    c001e3eb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3e6:	b8 01 00 00 00       	mov    eax,0x1
c001e3eb:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e3f1:	c3                   	ret    

c001e3f2 <FAT::read(void*, unsigned long, void*, int*)>:
c001e3f2:	83 ec 1c             	sub    esp,0x1c
c001e3f5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e3fa:	74 07                	je     c001e403 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e3fc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e401:	75 07                	jne    c001e40a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e403:	b8 04 00 00 00       	mov    eax,0x4
c001e408:	eb 3d                	jmp    c001e447 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e40a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e40e:	50                   	push   eax
c001e40f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e413:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e417:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e41b:	e8 be 6d fe ff       	call   c00051de <f_read>
c001e420:	83 c4 10             	add    esp,0x10
c001e423:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e427:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e42b:	89 c2                	mov    edx,eax
c001e42d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e431:	89 10                	mov    DWORD PTR [eax],edx
c001e433:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e437:	85 c0                	test   eax,eax
c001e439:	75 07                	jne    c001e442 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e43b:	b8 00 00 00 00       	mov    eax,0x0
c001e440:	eb 05                	jmp    c001e447 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e442:	b8 01 00 00 00       	mov    eax,0x1
c001e447:	83 c4 1c             	add    esp,0x1c
c001e44a:	c3                   	ret    
c001e44b:	90                   	nop

c001e44c <FAT::write(void*, unsigned long, void*, int*)>:
c001e44c:	83 ec 1c             	sub    esp,0x1c
c001e44f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e454:	74 07                	je     c001e45d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e456:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e45b:	75 07                	jne    c001e464 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e45d:	b8 04 00 00 00       	mov    eax,0x4
c001e462:	eb 3d                	jmp    c001e4a1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e464:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e468:	50                   	push   eax
c001e469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e46d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e471:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e475:	e8 e4 6f fe ff       	call   c000545e <f_write>
c001e47a:	83 c4 10             	add    esp,0x10
c001e47d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e481:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e485:	89 c2                	mov    edx,eax
c001e487:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e48b:	89 10                	mov    DWORD PTR [eax],edx
c001e48d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e491:	85 c0                	test   eax,eax
c001e493:	75 07                	jne    c001e49c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e495:	b8 00 00 00 00       	mov    eax,0x0
c001e49a:	eb 05                	jmp    c001e4a1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e49c:	b8 01 00 00 00       	mov    eax,0x1
c001e4a1:	83 c4 1c             	add    esp,0x1c
c001e4a4:	c3                   	ret    
c001e4a5:	90                   	nop

c001e4a6 <FAT::close(void*)>:
c001e4a6:	83 ec 1c             	sub    esp,0x1c
c001e4a9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4ae:	75 07                	jne    c001e4b7 <FAT::close(void*)+0x11>
c001e4b0:	b8 04 00 00 00       	mov    eax,0x4
c001e4b5:	eb 36                	jmp    c001e4ed <FAT::close(void*)+0x47>
c001e4b7:	83 ec 0c             	sub    esp,0xc
c001e4ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4be:	e8 31 74 fe ff       	call   c00058f4 <f_close>
c001e4c3:	83 c4 10             	add    esp,0x10
c001e4c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4ca:	83 ec 0c             	sub    esp,0xc
c001e4cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4d1:	e8 a0 0c ff ff       	call   c000f176 <free>
c001e4d6:	83 c4 10             	add    esp,0x10
c001e4d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4dd:	85 c0                	test   eax,eax
c001e4df:	75 07                	jne    c001e4e8 <FAT::close(void*)+0x42>
c001e4e1:	b8 00 00 00 00       	mov    eax,0x0
c001e4e6:	eb 05                	jmp    c001e4ed <FAT::close(void*)+0x47>
c001e4e8:	b8 01 00 00 00       	mov    eax,0x1
c001e4ed:	83 c4 1c             	add    esp,0x1c
c001e4f0:	c3                   	ret    
c001e4f1:	90                   	nop

c001e4f2 <FAT::closeDir(void*)>:
c001e4f2:	83 ec 1c             	sub    esp,0x1c
c001e4f5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4fa:	75 07                	jne    c001e503 <FAT::closeDir(void*)+0x11>
c001e4fc:	b8 04 00 00 00       	mov    eax,0x4
c001e501:	eb 36                	jmp    c001e539 <FAT::closeDir(void*)+0x47>
c001e503:	83 ec 0c             	sub    esp,0xc
c001e506:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e50a:	e8 cd 79 fe ff       	call   c0005edc <f_closedir>
c001e50f:	83 c4 10             	add    esp,0x10
c001e512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e516:	83 ec 0c             	sub    esp,0xc
c001e519:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e51d:	e8 54 0c ff ff       	call   c000f176 <free>
c001e522:	83 c4 10             	add    esp,0x10
c001e525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e529:	85 c0                	test   eax,eax
c001e52b:	75 07                	jne    c001e534 <FAT::closeDir(void*)+0x42>
c001e52d:	b8 00 00 00 00       	mov    eax,0x0
c001e532:	eb 05                	jmp    c001e539 <FAT::closeDir(void*)+0x47>
c001e534:	b8 01 00 00 00       	mov    eax,0x1
c001e539:	83 c4 1c             	add    esp,0x1c
c001e53c:	c3                   	ret    
c001e53d:	90                   	nop

c001e53e <FAT::seek(void*, unsigned long long)>:
c001e53e:	83 ec 2c             	sub    esp,0x2c
c001e541:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e549:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e54d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e551:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e556:	75 07                	jne    c001e55f <FAT::seek(void*, unsigned long long)+0x21>
c001e558:	b8 04 00 00 00       	mov    eax,0x4
c001e55d:	eb 2f                	jmp    c001e58e <FAT::seek(void*, unsigned long long)+0x50>
c001e55f:	83 ec 04             	sub    esp,0x4
c001e562:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e566:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e56a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e56e:	e8 b0 73 fe ff       	call   c0005923 <f_lseek>
c001e573:	83 c4 10             	add    esp,0x10
c001e576:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e57e:	85 c0                	test   eax,eax
c001e580:	75 07                	jne    c001e589 <FAT::seek(void*, unsigned long long)+0x4b>
c001e582:	b8 00 00 00 00       	mov    eax,0x0
c001e587:	eb 05                	jmp    c001e58e <FAT::seek(void*, unsigned long long)+0x50>
c001e589:	b8 01 00 00 00       	mov    eax,0x1
c001e58e:	83 c4 2c             	add    esp,0x2c
c001e591:	c3                   	ret    

c001e592 <fatWrapperReadDisk>:
c001e592:	83 ec 1c             	sub    esp,0x1c
c001e595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e599:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e59d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5b1:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e5b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5bc:	83 ec 0c             	sub    esp,0xc
c001e5bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5c3:	52                   	push   edx
c001e5c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5cc:	50                   	push   eax
c001e5cd:	e8 b0 72 ff ff       	call   c0015882 <LogicalDisk::read(unsigned long long, int, void*)>
c001e5d2:	83 c4 20             	add    esp,0x20
c001e5d5:	83 c4 1c             	add    esp,0x1c
c001e5d8:	c3                   	ret    

c001e5d9 <fatWrapperWriteDisk>:
c001e5d9:	83 ec 1c             	sub    esp,0x1c
c001e5dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e5e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5e8:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5f3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5f8:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e5ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e603:	83 ec 0c             	sub    esp,0xc
c001e606:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e60a:	52                   	push   edx
c001e60b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e60f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e613:	50                   	push   eax
c001e614:	e8 d5 72 ff ff       	call   c00158ee <LogicalDisk::write(unsigned long long, int, void*)>
c001e619:	83 c4 20             	add    esp,0x20
c001e61c:	83 c4 1c             	add    esp,0x1c
c001e61f:	c3                   	ret    

c001e620 <fatWrapperIoctl>:
c001e620:	53                   	push   ebx
c001e621:	83 ec 28             	sub    esp,0x28
c001e624:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e628:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e62c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e630:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e634:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e639:	75 31                	jne    c001e66c <fatWrapperIoctl+0x4c>
c001e63b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e63f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e643:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e648:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e64f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e655:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e65b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e65f:	66 89 02             	mov    WORD PTR [edx],ax
c001e662:	b8 00 00 00 00       	mov    eax,0x0
c001e667:	e9 b2 00 00 00       	jmp    c001e71e <fatWrapperIoctl+0xfe>
c001e66c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e671:	75 6a                	jne    c001e6dd <fatWrapperIoctl+0xbd>
c001e673:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e677:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e67b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e680:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e687:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e68d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e693:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e699:	89 c8                	mov    eax,ecx
c001e69b:	89 da                	mov    edx,ebx
c001e69d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e6a1:	c1 e0 0a             	shl    eax,0xa
c001e6a4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e6a9:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c001e6b0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e6b6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e6bc:	89 cb                	mov    ebx,ecx
c001e6be:	c1 fb 1f             	sar    ebx,0x1f
c001e6c1:	53                   	push   ebx
c001e6c2:	51                   	push   ecx
c001e6c3:	52                   	push   edx
c001e6c4:	50                   	push   eax
c001e6c5:	e8 92 4c 00 00       	call   c002335c <__udivdi3>
c001e6ca:	83 c4 10             	add    esp,0x10
c001e6cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e6d1:	89 01                	mov    DWORD PTR [ecx],eax
c001e6d3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e6d6:	b8 00 00 00 00       	mov    eax,0x0
c001e6db:	eb 41                	jmp    c001e71e <fatWrapperIoctl+0xfe>
c001e6dd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e6e2:	75 07                	jne    c001e6eb <fatWrapperIoctl+0xcb>
c001e6e4:	b8 00 00 00 00       	mov    eax,0x0
c001e6e9:	eb 33                	jmp    c001e71e <fatWrapperIoctl+0xfe>
c001e6eb:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e6f0:	75 19                	jne    c001e70b <fatWrapperIoctl+0xeb>
c001e6f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e6fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6fe:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e704:	b8 00 00 00 00       	mov    eax,0x0
c001e709:	eb 13                	jmp    c001e71e <fatWrapperIoctl+0xfe>
c001e70b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e710:	75 07                	jne    c001e719 <fatWrapperIoctl+0xf9>
c001e712:	b8 00 00 00 00       	mov    eax,0x0
c001e717:	eb 05                	jmp    c001e71e <fatWrapperIoctl+0xfe>
c001e719:	b8 04 00 00 00       	mov    eax,0x4
c001e71e:	83 c4 28             	add    esp,0x28
c001e721:	5b                   	pop    ebx
c001e722:	c3                   	ret    
c001e723:	90                   	nop

c001e724 <FAT::FAT()>:
c001e724:	83 ec 1c             	sub    esp,0x1c
c001e727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e72b:	83 ec 0c             	sub    esp,0xc
c001e72e:	50                   	push   eax
c001e72f:	e8 28 3e ff ff       	call   c001255c <Filesystem::Filesystem()>
c001e734:	83 c4 10             	add    esp,0x10
c001e737:	ba 18 8b 02 c0       	mov    edx,0xc0028b18
c001e73c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e740:	89 10                	mov    DWORD PTR [eax],edx
c001e742:	c7 05 e0 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b8e0,0x0
c001e74c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e754:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e759:	7f 15                	jg     c001e770 <FAT::FAT()+0x4c>
c001e75b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e75f:	c7 04 85 00 b9 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd4700],0xffffffff
c001e76a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e76e:	eb e4                	jmp    c001e754 <FAT::FAT()+0x30>
c001e770:	90                   	nop
c001e771:	83 c4 1c             	add    esp,0x1c
c001e774:	c3                   	ret    
c001e775:	90                   	nop

c001e776 <FAT::fixFilepath(char*)>:
c001e776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e77a:	8a 00                	mov    al,BYTE PTR [eax]
c001e77c:	3c 40                	cmp    al,0x40
c001e77e:	7e 2c                	jle    c001e7ac <FAT::fixFilepath(char*)+0x36>
c001e780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e784:	8a 00                	mov    al,BYTE PTR [eax]
c001e786:	83 e8 41             	sub    eax,0x41
c001e789:	88 c2                	mov    dl,al
c001e78b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e78f:	88 10                	mov    BYTE PTR [eax],dl
c001e791:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e795:	8a 00                	mov    al,BYTE PTR [eax]
c001e797:	0f be c0             	movsx  eax,al
c001e79a:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e7a1:	83 c0 30             	add    eax,0x30
c001e7a4:	88 c2                	mov    dl,al
c001e7a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7aa:	88 10                	mov    BYTE PTR [eax],dl
c001e7ac:	90                   	nop
c001e7ad:	c3                   	ret    

c001e7ae <FAT::open(char const*, void**, FileOpenMode)>:
c001e7ae:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e7b4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e7bc:	74 0a                	je     c001e7c8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e7be:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e7c6:	75 0a                	jne    c001e7d2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e7c8:	b8 04 00 00 00       	mov    eax,0x4
c001e7cd:	e9 fd 00 00 00       	jmp    c001e8cf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e7d2:	83 ec 08             	sub    esp,0x8
c001e7d5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e7e0:	50                   	push   eax
c001e7e1:	e8 a5 1f fe ff       	call   c000078b <strcpy>
c001e7e6:	83 c4 10             	add    esp,0x10
c001e7e9:	83 ec 08             	sub    esp,0x8
c001e7ec:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e7f0:	50                   	push   eax
c001e7f1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7f8:	e8 79 ff ff ff       	call   c001e776 <FAT::fixFilepath(char*)>
c001e7fd:	83 c4 10             	add    esp,0x10
c001e800:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e808:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e80f:	83 e0 01             	and    eax,0x1
c001e812:	74 08                	je     c001e81c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e814:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e81c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e823:	83 e0 04             	and    eax,0x4
c001e826:	74 10                	je     c001e838 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e828:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e830:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e838:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e83f:	83 e0 02             	and    eax,0x2
c001e842:	74 08                	je     c001e84c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e844:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e84c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e853:	83 e0 08             	and    eax,0x8
c001e856:	74 08                	je     c001e860 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e858:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e860:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e867:	83 e0 10             	and    eax,0x10
c001e86a:	74 08                	je     c001e874 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e86c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e874:	83 ec 0c             	sub    esp,0xc
c001e877:	68 50 02 00 00       	push   0x250
c001e87c:	e8 e5 08 ff ff       	call   c000f166 <malloc>
c001e881:	83 c4 10             	add    esp,0x10
c001e884:	89 c2                	mov    edx,eax
c001e886:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e88d:	89 10                	mov    DWORD PTR [eax],edx
c001e88f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e897:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e89e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8a0:	83 ec 04             	sub    esp,0x4
c001e8a3:	52                   	push   edx
c001e8a4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e8a8:	52                   	push   edx
c001e8a9:	50                   	push   eax
c001e8aa:	e8 f3 64 fe ff       	call   c0004da2 <f_open>
c001e8af:	83 c4 10             	add    esp,0x10
c001e8b2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e8b9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e8c1:	74 07                	je     c001e8ca <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e8c3:	b8 01 00 00 00       	mov    eax,0x1
c001e8c8:	eb 05                	jmp    c001e8cf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e8ca:	b8 00 00 00 00       	mov    eax,0x0
c001e8cf:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e8d5:	c3                   	ret    

c001e8d6 <FAT::openDir(char const*, void**)>:
c001e8d6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e8dc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e8e4:	74 0a                	je     c001e8f0 <FAT::openDir(char const*, void**)+0x1a>
c001e8e6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e8ee:	75 07                	jne    c001e8f7 <FAT::openDir(char const*, void**)+0x21>
c001e8f0:	b8 04 00 00 00       	mov    eax,0x4
c001e8f5:	eb 7d                	jmp    c001e974 <FAT::openDir(char const*, void**)+0x9e>
c001e8f7:	83 ec 08             	sub    esp,0x8
c001e8fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e901:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e905:	50                   	push   eax
c001e906:	e8 80 1e fe ff       	call   c000078b <strcpy>
c001e90b:	83 c4 10             	add    esp,0x10
c001e90e:	83 ec 08             	sub    esp,0x8
c001e911:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e915:	50                   	push   eax
c001e916:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e91d:	e8 54 fe ff ff       	call   c001e776 <FAT::fixFilepath(char*)>
c001e922:	83 c4 10             	add    esp,0x10
c001e925:	83 ec 0c             	sub    esp,0xc
c001e928:	6a 4c                	push   0x4c
c001e92a:	e8 37 08 ff ff       	call   c000f166 <malloc>
c001e92f:	83 c4 10             	add    esp,0x10
c001e932:	89 c2                	mov    edx,eax
c001e934:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e93b:	89 10                	mov    DWORD PTR [eax],edx
c001e93d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e944:	8b 00                	mov    eax,DWORD PTR [eax]
c001e946:	83 ec 08             	sub    esp,0x8
c001e949:	8d 54 24 14          	lea    edx,[esp+0x14]
c001e94d:	52                   	push   edx
c001e94e:	50                   	push   eax
c001e94f:	e8 86 74 fe ff       	call   c0005dda <f_opendir>
c001e954:	83 c4 10             	add    esp,0x10
c001e957:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e95e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001e966:	74 07                	je     c001e96f <FAT::openDir(char const*, void**)+0x99>
c001e968:	b8 01 00 00 00       	mov    eax,0x1
c001e96d:	eb 05                	jmp    c001e974 <FAT::openDir(char const*, void**)+0x9e>
c001e96f:	b8 00 00 00 00       	mov    eax,0x0
c001e974:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e97a:	c3                   	ret    
c001e97b:	90                   	nop

c001e97c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001e97c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001e982:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001e98a:	75 0a                	jne    c001e996 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001e98c:	b8 04 00 00 00       	mov    eax,0x4
c001e991:	e9 c9 00 00 00       	jmp    c001ea5f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e996:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001e99e:	75 0a                	jne    c001e9aa <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001e9a0:	b8 04 00 00 00       	mov    eax,0x4
c001e9a5:	e9 b5 00 00 00       	jmp    c001ea5f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9aa:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001e9b2:	75 0a                	jne    c001e9be <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001e9b4:	b8 04 00 00 00       	mov    eax,0x4
c001e9b9:	e9 a1 00 00 00       	jmp    c001ea5f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9be:	83 ec 08             	sub    esp,0x8
c001e9c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9c8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9cf:	50                   	push   eax
c001e9d0:	e8 b6 1d fe ff       	call   c000078b <strcpy>
c001e9d5:	83 c4 10             	add    esp,0x10
c001e9d8:	83 ec 08             	sub    esp,0x8
c001e9db:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001e9e2:	50                   	push   eax
c001e9e3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9ea:	e8 87 fd ff ff       	call   c001e776 <FAT::fixFilepath(char*)>
c001e9ef:	83 c4 10             	add    esp,0x10
c001e9f2:	83 ec 08             	sub    esp,0x8
c001e9f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e9f9:	50                   	push   eax
c001e9fa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ea01:	50                   	push   eax
c001ea02:	e8 92 75 fe ff       	call   c0005f99 <f_stat>
c001ea07:	83 c4 10             	add    esp,0x10
c001ea0a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ea11:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ea18:	85 c0                	test   eax,eax
c001ea1a:	74 07                	je     c001ea23 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ea1c:	83 f8 04             	cmp    eax,0x4
c001ea1f:	74 32                	je     c001ea53 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001ea21:	eb 37                	jmp    c001ea5a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001ea23:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ea27:	0f b6 c0             	movzx  eax,al
c001ea2a:	83 e0 10             	and    eax,0x10
c001ea2d:	0f 95 c2             	setne  dl
c001ea30:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ea37:	88 10                	mov    BYTE PTR [eax],dl
c001ea39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ea3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea40:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ea47:	89 01                	mov    DWORD PTR [ecx],eax
c001ea49:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ea4c:	b8 00 00 00 00       	mov    eax,0x0
c001ea51:	eb 0c                	jmp    c001ea5f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea53:	b8 02 00 00 00       	mov    eax,0x2
c001ea58:	eb 05                	jmp    c001ea5f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea5a:	b8 01 00 00 00       	mov    eax,0x1
c001ea5f:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ea65:	c3                   	ret    

c001ea66 <FAT::unlink(char const*)>:
c001ea66:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ea6c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ea74:	75 07                	jne    c001ea7d <FAT::unlink(char const*)+0x17>
c001ea76:	b8 04 00 00 00       	mov    eax,0x4
c001ea7b:	eb 5c                	jmp    c001ead9 <FAT::unlink(char const*)+0x73>
c001ea7d:	83 ec 08             	sub    esp,0x8
c001ea80:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea87:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea8b:	50                   	push   eax
c001ea8c:	e8 fa 1c fe ff       	call   c000078b <strcpy>
c001ea91:	83 c4 10             	add    esp,0x10
c001ea94:	83 ec 08             	sub    esp,0x8
c001ea97:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea9b:	50                   	push   eax
c001ea9c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eaa3:	e8 ce fc ff ff       	call   c001e776 <FAT::fixFilepath(char*)>
c001eaa8:	83 c4 10             	add    esp,0x10
c001eaab:	83 ec 0c             	sub    esp,0xc
c001eaae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eab2:	50                   	push   eax
c001eab3:	e8 33 78 fe ff       	call   c00062eb <f_unlink>
c001eab8:	83 c4 10             	add    esp,0x10
c001eabb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001eac2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001eac9:	85 c0                	test   eax,eax
c001eacb:	75 07                	jne    c001ead4 <FAT::unlink(char const*)+0x6e>
c001eacd:	b8 00 00 00 00       	mov    eax,0x0
c001ead2:	eb 05                	jmp    c001ead9 <FAT::unlink(char const*)+0x73>
c001ead4:	b8 01 00 00 00       	mov    eax,0x1
c001ead9:	81 c4 1c 01 00 00    	add    esp,0x11c
c001eadf:	c3                   	ret    

c001eae0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001eae0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001eae6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001eaed:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001eaf4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001eaf8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eafc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001eb04:	75 0a                	jne    c001eb10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001eb06:	b8 04 00 00 00       	mov    eax,0x4
c001eb0b:	e9 1c 01 00 00       	jmp    c001ec2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001eb10:	83 ec 08             	sub    esp,0x8
c001eb13:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001eb1e:	50                   	push   eax
c001eb1f:	e8 67 1c fe ff       	call   c000078b <strcpy>
c001eb24:	83 c4 10             	add    esp,0x10
c001eb27:	83 ec 08             	sub    esp,0x8
c001eb2a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb2e:	50                   	push   eax
c001eb2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb36:	e8 3b fc ff ff       	call   c001e776 <FAT::fixFilepath(char*)>
c001eb3b:	83 c4 10             	add    esp,0x10
c001eb3e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001eb46:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001eb4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb53:	83 e0 01             	and    eax,0x1
c001eb56:	74 08                	je     c001eb60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001eb58:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001eb60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb65:	83 e0 02             	and    eax,0x2
c001eb68:	74 08                	je     c001eb72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001eb6a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001eb72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb77:	83 e0 04             	and    eax,0x4
c001eb7a:	74 08                	je     c001eb84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001eb7c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001eb84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb89:	83 e0 08             	and    eax,0x8
c001eb8c:	74 08                	je     c001eb96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001eb8e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001eb96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb9b:	83 e0 01             	and    eax,0x1
c001eb9e:	74 08                	je     c001eba8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001eba0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001eba8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebad:	83 e0 02             	and    eax,0x2
c001ebb0:	74 08                	je     c001ebba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001ebb2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ebba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebbf:	83 e0 04             	and    eax,0x4
c001ebc2:	74 08                	je     c001ebcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001ebc4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ebcc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebd1:	83 e0 08             	and    eax,0x8
c001ebd4:	74 08                	je     c001ebde <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ebd6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ebde:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ebe5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ebec:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ebf4:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ebfc:	83 ec 04             	sub    esp,0x4
c001ebff:	52                   	push   edx
c001ec00:	50                   	push   eax
c001ec01:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ec05:	50                   	push   eax
c001ec06:	e8 82 7d fe ff       	call   c000698d <f_chmod>
c001ec0b:	83 c4 10             	add    esp,0x10
c001ec0e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ec15:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ec1c:	85 c0                	test   eax,eax
c001ec1e:	75 07                	jne    c001ec27 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ec20:	b8 00 00 00 00       	mov    eax,0x0
c001ec25:	eb 05                	jmp    c001ec2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ec27:	b8 01 00 00 00       	mov    eax,0x1
c001ec2c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ec32:	c3                   	ret    
c001ec33:	90                   	nop

c001ec34 <FAT::rename(char const*, char const*)>:
c001ec34:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ec3a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ec42:	74 0a                	je     c001ec4e <FAT::rename(char const*, char const*)+0x1a>
c001ec44:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ec4c:	75 0a                	jne    c001ec58 <FAT::rename(char const*, char const*)+0x24>
c001ec4e:	b8 04 00 00 00       	mov    eax,0x4
c001ec53:	e9 98 00 00 00       	jmp    c001ecf0 <FAT::rename(char const*, char const*)+0xbc>
c001ec58:	83 ec 08             	sub    esp,0x8
c001ec5b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec62:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ec69:	50                   	push   eax
c001ec6a:	e8 1c 1b fe ff       	call   c000078b <strcpy>
c001ec6f:	83 c4 10             	add    esp,0x10
c001ec72:	83 ec 08             	sub    esp,0x8
c001ec75:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ec7c:	50                   	push   eax
c001ec7d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec84:	e8 ed fa ff ff       	call   c001e776 <FAT::fixFilepath(char*)>
c001ec89:	83 c4 10             	add    esp,0x10
c001ec8c:	83 ec 08             	sub    esp,0x8
c001ec8f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ec96:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ec9a:	50                   	push   eax
c001ec9b:	e8 eb 1a fe ff       	call   c000078b <strcpy>
c001eca0:	83 c4 10             	add    esp,0x10
c001eca3:	83 ec 08             	sub    esp,0x8
c001eca6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecaa:	50                   	push   eax
c001ecab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ecb2:	e8 bf fa ff ff       	call   c001e776 <FAT::fixFilepath(char*)>
c001ecb7:	83 c4 10             	add    esp,0x10
c001ecba:	83 ec 08             	sub    esp,0x8
c001ecbd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecc1:	50                   	push   eax
c001ecc2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ecc9:	50                   	push   eax
c001ecca:	e8 cb 79 fe ff       	call   c000669a <f_rename>
c001eccf:	83 c4 10             	add    esp,0x10
c001ecd2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ecd9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ece0:	85 c0                	test   eax,eax
c001ece2:	75 07                	jne    c001eceb <FAT::rename(char const*, char const*)+0xb7>
c001ece4:	b8 00 00 00 00       	mov    eax,0x0
c001ece9:	eb 05                	jmp    c001ecf0 <FAT::rename(char const*, char const*)+0xbc>
c001eceb:	b8 01 00 00 00       	mov    eax,0x1
c001ecf0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ecf6:	c3                   	ret    
c001ecf7:	90                   	nop

c001ecf8 <FAT::mkdir(char const*)>:
c001ecf8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ecfe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ed06:	75 07                	jne    c001ed0f <FAT::mkdir(char const*)+0x17>
c001ed08:	b8 04 00 00 00       	mov    eax,0x4
c001ed0d:	eb 5c                	jmp    c001ed6b <FAT::mkdir(char const*)+0x73>
c001ed0f:	83 ec 08             	sub    esp,0x8
c001ed12:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed19:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed1d:	50                   	push   eax
c001ed1e:	e8 68 1a fe ff       	call   c000078b <strcpy>
c001ed23:	83 c4 10             	add    esp,0x10
c001ed26:	83 ec 08             	sub    esp,0x8
c001ed29:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed2d:	50                   	push   eax
c001ed2e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed35:	e8 3c fa ff ff       	call   c001e776 <FAT::fixFilepath(char*)>
c001ed3a:	83 c4 10             	add    esp,0x10
c001ed3d:	83 ec 0c             	sub    esp,0xc
c001ed40:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed44:	50                   	push   eax
c001ed45:	e8 24 77 fe ff       	call   c000646e <f_mkdir>
c001ed4a:	83 c4 10             	add    esp,0x10
c001ed4d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ed54:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ed5b:	85 c0                	test   eax,eax
c001ed5d:	75 07                	jne    c001ed66 <FAT::mkdir(char const*)+0x6e>
c001ed5f:	b8 00 00 00 00       	mov    eax,0x0
c001ed64:	eb 05                	jmp    c001ed6b <FAT::mkdir(char const*)+0x73>
c001ed66:	b8 01 00 00 00       	mov    eax,0x1
c001ed6b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ed71:	c3                   	ret    

c001ed72 <FAT::exists(char const*)>:
c001ed72:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ed78:	83 ec 08             	sub    esp,0x8
c001ed7b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed86:	50                   	push   eax
c001ed87:	e8 ff 19 fe ff       	call   c000078b <strcpy>
c001ed8c:	83 c4 10             	add    esp,0x10
c001ed8f:	83 ec 08             	sub    esp,0x8
c001ed92:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ed96:	50                   	push   eax
c001ed97:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed9e:	e8 d3 f9 ff ff       	call   c001e776 <FAT::fixFilepath(char*)>
c001eda3:	83 c4 10             	add    esp,0x10
c001eda6:	83 ec 08             	sub    esp,0x8
c001eda9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001edb0:	50                   	push   eax
c001edb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edb5:	50                   	push   eax
c001edb6:	e8 de 71 fe ff       	call   c0005f99 <f_stat>
c001edbb:	83 c4 10             	add    esp,0x10
c001edbe:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001edc5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001edcc:	85 c0                	test   eax,eax
c001edce:	75 04                	jne    c001edd4 <FAT::exists(char const*)+0x62>
c001edd0:	b0 01                	mov    al,0x1
c001edd2:	eb 02                	jmp    c001edd6 <FAT::exists(char const*)+0x64>
c001edd4:	b0 00                	mov    al,0x0
c001edd6:	81 c4 2c 02 00 00    	add    esp,0x22c
c001eddc:	c3                   	ret    
c001eddd:	90                   	nop

c001edde <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001edde:	b8 08 00 00 00       	mov    eax,0x8
c001ede3:	c3                   	ret    

c001ede4 <ISO9660::seek(void*, unsigned long long)>:
c001ede4:	53                   	push   ebx
c001ede5:	b8 04 00 00 00       	mov    eax,0x4
c001edea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001edee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001edf2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001edf6:	85 d2                	test   edx,edx
c001edf8:	74 17                	je     c001ee11 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001edfa:	89 c8                	mov    eax,ecx
c001edfc:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001edff:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001ee02:	b8 01 00 00 00       	mov    eax,0x1
c001ee07:	73 08                	jae    c001ee11 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ee09:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ee0c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ee0f:	31 c0                	xor    eax,eax
c001ee11:	5b                   	pop    ebx
c001ee12:	c3                   	ret    
c001ee13:	90                   	nop

c001ee14 <ISO9660::tell(void*, unsigned long long*)>:
c001ee14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee1c:	85 d2                	test   edx,edx
c001ee1e:	74 12                	je     c001ee32 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee20:	85 c0                	test   eax,eax
c001ee22:	74 0e                	je     c001ee32 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee24:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ee27:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ee2a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee2d:	89 10                	mov    DWORD PTR [eax],edx
c001ee2f:	31 c0                	xor    eax,eax
c001ee31:	c3                   	ret    
c001ee32:	b8 04 00 00 00       	mov    eax,0x4
c001ee37:	c3                   	ret    

c001ee38 <ISO9660::getName()>:
c001ee38:	b8 74 8b 02 c0       	mov    eax,0xc0028b74
c001ee3d:	c3                   	ret    

c001ee3e <ISO9660::stat(void*, unsigned long long*)>:
c001ee3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee46:	85 d2                	test   edx,edx
c001ee48:	74 12                	je     c001ee5c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee4a:	85 c0                	test   eax,eax
c001ee4c:	74 0e                	je     c001ee5c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee4e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ee51:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ee54:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee57:	89 10                	mov    DWORD PTR [eax],edx
c001ee59:	31 c0                	xor    eax,eax
c001ee5b:	c3                   	ret    
c001ee5c:	b8 04 00 00 00       	mov    eax,0x4
c001ee61:	c3                   	ret    

c001ee62 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ee62:	b8 01 00 00 00       	mov    eax,0x1
c001ee67:	c3                   	ret    

c001ee68 <ISO9660::unlink(char const*)>:
c001ee68:	b8 01 00 00 00       	mov    eax,0x1
c001ee6d:	c3                   	ret    

c001ee6e <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ee6e:	b8 01 00 00 00       	mov    eax,0x1
c001ee73:	c3                   	ret    

c001ee74 <ISO9660::rename(char const*, char const*)>:
c001ee74:	b8 01 00 00 00       	mov    eax,0x1
c001ee79:	c3                   	ret    

c001ee7a <ISO9660::mkdir(char const*)>:
c001ee7a:	b8 01 00 00 00       	mov    eax,0x1
c001ee7f:	c3                   	ret    

c001ee80 <ISO9660::close(void*)>:
c001ee80:	83 ec 0c             	sub    esp,0xc
c001ee83:	b8 04 00 00 00       	mov    eax,0x4
c001ee88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee8c:	85 d2                	test   edx,edx
c001ee8e:	74 0e                	je     c001ee9e <ISO9660::close(void*)+0x1e>
c001ee90:	83 ec 0c             	sub    esp,0xc
c001ee93:	52                   	push   edx
c001ee94:	e8 dd 02 ff ff       	call   c000f176 <free>
c001ee99:	83 c4 10             	add    esp,0x10
c001ee9c:	31 c0                	xor    eax,eax
c001ee9e:	83 c4 0c             	add    esp,0xc
c001eea1:	c3                   	ret    

c001eea2 <ISO9660::closeDir(void*)>:
c001eea2:	83 ec 0c             	sub    esp,0xc
c001eea5:	b8 04 00 00 00       	mov    eax,0x4
c001eeaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeae:	85 d2                	test   edx,edx
c001eeb0:	74 0e                	je     c001eec0 <ISO9660::closeDir(void*)+0x1e>
c001eeb2:	83 ec 0c             	sub    esp,0xc
c001eeb5:	52                   	push   edx
c001eeb6:	e8 bb 02 ff ff       	call   c000f176 <free>
c001eebb:	83 c4 10             	add    esp,0x10
c001eebe:	31 c0                	xor    eax,eax
c001eec0:	83 c4 0c             	add    esp,0xc
c001eec3:	c3                   	ret    

c001eec4 <ISO9660::~ISO9660()>:
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	ba c8 8b 02 c0       	mov    edx,0xc0028bc8
c001eecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed0:	89 10                	mov    DWORD PTR [eax],edx
c001eed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed6:	83 ec 0c             	sub    esp,0xc
c001eed9:	50                   	push   eax
c001eeda:	e8 a1 36 ff ff       	call   c0012580 <Filesystem::~Filesystem()>
c001eedf:	83 c4 10             	add    esp,0x10
c001eee2:	90                   	nop
c001eee3:	83 c4 0c             	add    esp,0xc
c001eee6:	c3                   	ret    
c001eee7:	90                   	nop

c001eee8 <ISO9660::~ISO9660()>:
c001eee8:	83 ec 0c             	sub    esp,0xc
c001eeeb:	83 ec 0c             	sub    esp,0xc
c001eeee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eef2:	e8 cd ff ff ff       	call   c001eec4 <ISO9660::~ISO9660()>
c001eef7:	83 c4 10             	add    esp,0x10
c001eefa:	83 ec 08             	sub    esp,0x8
c001eefd:	6a 08                	push   0x8
c001eeff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef03:	e8 6f 32 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001ef08:	83 c4 10             	add    esp,0x10
c001ef0b:	83 c4 0c             	add    esp,0xc
c001ef0e:	c3                   	ret    

c001ef0f <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ef0f:	55                   	push   ebp
c001ef10:	31 c9                	xor    ecx,ecx
c001ef12:	57                   	push   edi
c001ef13:	56                   	push   esi
c001ef14:	53                   	push   ebx
c001ef15:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ef19:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef1d:	89 eb                	mov    ebx,ebp
c001ef1f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ef23:	39 ce                	cmp    esi,ecx
c001ef25:	7e 17                	jle    c001ef3e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ef27:	31 d2                	xor    edx,edx
c001ef29:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ef2d:	7d 13                	jge    c001ef42 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ef2f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef33:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ef36:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ef39:	75 0d                	jne    c001ef48 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ef3b:	42                   	inc    edx
c001ef3c:	eb eb                	jmp    c001ef29 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ef3e:	31 c0                	xor    eax,eax
c001ef40:	eb 0a                	jmp    c001ef4c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef42:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ef46:	eb 04                	jmp    c001ef4c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef48:	41                   	inc    ecx
c001ef49:	43                   	inc    ebx
c001ef4a:	eb d7                	jmp    c001ef23 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ef4c:	5b                   	pop    ebx
c001ef4d:	5e                   	pop    esi
c001ef4e:	5f                   	pop    edi
c001ef4f:	5d                   	pop    ebp
c001ef50:	c3                   	ret    

c001ef51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ef51:	56                   	push   esi
c001ef52:	53                   	push   ebx
c001ef53:	52                   	push   edx
c001ef54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef58:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ef5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef60:	39 0d e0 b9 02 c0    	cmp    DWORD PTR ds:0xc002b9e0,ecx
c001ef66:	75 08                	jne    c001ef70 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ef68:	38 05 a8 99 02 c0    	cmp    BYTE PTR ds:0xc00299a8,al
c001ef6e:	74 2b                	je     c001ef9b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ef70:	83 ec 0c             	sub    esp,0xc
c001ef73:	a2 a8 99 02 c0       	mov    ds:0xc00299a8,al
c001ef78:	68 00 ba 02 c0       	push   0xc002ba00
c001ef7d:	0f be c0             	movsx  eax,al
c001ef80:	6a 01                	push   0x1
c001ef82:	89 0d e0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9e0,ecx
c001ef88:	31 db                	xor    ebx,ebx
c001ef8a:	53                   	push   ebx
c001ef8b:	51                   	push   ecx
c001ef8c:	ff 34 85 fc a8 02 c0 	push   DWORD PTR [eax*4-0x3ffd5704]
c001ef93:	e8 ea 68 ff ff       	call   c0015882 <LogicalDisk::read(unsigned long long, int, void*)>
c001ef98:	83 c4 20             	add    esp,0x20
c001ef9b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001efa3:	c7 44 24 14 00 ba 02 c0 	mov    DWORD PTR [esp+0x14],0xc002ba00
c001efab:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001efaf:	58                   	pop    eax
c001efb0:	5b                   	pop    ebx
c001efb1:	5e                   	pop    esi
c001efb2:	e9 ff 16 fe ff       	jmp    c00006b6 <memcpy>
c001efb7:	90                   	nop

c001efb8 <ISO9660::tryMount(LogicalDisk*, int)>:
c001efb8:	81 ec 10 08 00 00    	sub    esp,0x810
c001efbe:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001efc5:	83 c0 41             	add    eax,0x41
c001efc8:	0f be c0             	movsx  eax,al
c001efcb:	50                   	push   eax
c001efcc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001efd0:	50                   	push   eax
c001efd1:	6a 10                	push   0x10
c001efd3:	e8 79 ff ff ff       	call   c001ef51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001efd8:	83 c4 10             	add    esp,0x10
c001efdb:	31 c0                	xor    eax,eax
c001efdd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001efe2:	75 1d                	jne    c001f001 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efe4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001efe9:	75 16                	jne    c001f001 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efeb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001eff0:	75 0f                	jne    c001f001 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001eff2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001eff7:	75 08                	jne    c001f001 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001eff9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001effe:	0f 94 c0             	sete   al
c001f001:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f007:	c3                   	ret    

c001f008 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f008:	55                   	push   ebp
c001f009:	57                   	push   edi
c001f00a:	56                   	push   esi
c001f00b:	53                   	push   ebx
c001f00c:	81 ec 34 08 00 00    	sub    esp,0x834
c001f012:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f019:	55                   	push   ebp
c001f01a:	68 8f 8b 02 c0       	push   0xc0028b8f
c001f01f:	e8 33 32 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f02f:	0f 84 06 02 00 00    	je     c001f23b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f035:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f03d:	0f 84 f8 01 00 00    	je     c001f23b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f043:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f04a:	b8 01 00 00 00       	mov    eax,0x1
c001f04f:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f053:	0f 85 e7 01 00 00    	jne    c001f240 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f059:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f05c:	31 d2                	xor    edx,edx
c001f05e:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f061:	89 e9                	mov    ecx,ebp
c001f063:	89 d3                	mov    ebx,edx
c001f065:	01 f1                	add    ecx,esi
c001f067:	11 fb                	adc    ebx,edi
c001f069:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f06d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f071:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f078:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f07b:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f07e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f082:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f086:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f08a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f08e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f092:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f096:	72 19                	jb     c001f0b1 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f098:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f0a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f0ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0af:	eb 13                	jmp    c001f0c4 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f0b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0b9:	29 f0                	sub    eax,esi
c001f0bb:	19 fa                	sbb    edx,edi
c001f0bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f0c4:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f0cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f0ce:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0d0:	53                   	push   ebx
c001f0d1:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f0d5:	c1 e0 0b             	shl    eax,0xb
c001f0d8:	01 c6                	add    esi,eax
c001f0da:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f0e1:	11 d7                	adc    edi,edx
c001f0e3:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f0e7:	89 fa                	mov    edx,edi
c001f0e9:	50                   	push   eax
c001f0ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f0ee:	50                   	push   eax
c001f0ef:	89 f0                	mov    eax,esi
c001f0f1:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f0f5:	50                   	push   eax
c001f0f6:	e8 56 fe ff ff       	call   c001ef51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f0fb:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f102:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f106:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f109:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f10d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f113:	83 c4 10             	add    esp,0x10
c001f116:	b8 00 08 00 00       	mov    eax,0x800
c001f11b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f11f:	29 d0                	sub    eax,edx
c001f121:	39 c1                	cmp    ecx,eax
c001f123:	83 db 00             	sbb    ebx,0x0
c001f126:	7d 19                	jge    c001f141 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f128:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f12d:	75 16                	jne    c001f145 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f12f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f136:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f13c:	e9 f6 00 00 00       	jmp    c001f237 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f141:	89 c5                	mov    ebp,eax
c001f143:	eb 03                	jmp    c001f148 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f145:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f148:	51                   	push   ecx
c001f149:	55                   	push   ebp
c001f14a:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f14e:	50                   	push   eax
c001f14f:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f156:	e8 5b 15 fe ff       	call   c00006b6 <memcpy>
c001f15b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f15f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f163:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f16a:	01 e8                	add    eax,ebp
c001f16c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f170:	89 e8                	mov    eax,ebp
c001f172:	99                   	cdq    
c001f173:	01 ee                	add    esi,ebp
c001f175:	11 d7                	adc    edi,edx
c001f177:	29 e9                	sub    ecx,ebp
c001f179:	19 d3                	sbb    ebx,edx
c001f17b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f17f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f183:	83 c4 10             	add    esp,0x10
c001f186:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f18b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f18e:	b8 00 00 00 00       	mov    eax,0x0
c001f193:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f197:	7d 3f                	jge    c001f1d8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f199:	52                   	push   edx
c001f19a:	89 fa                	mov    edx,edi
c001f19c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1a3:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1a7:	50                   	push   eax
c001f1a8:	89 f0                	mov    eax,esi
c001f1aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f1ae:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1b2:	50                   	push   eax
c001f1b3:	e8 99 fd ff ff       	call   c001ef51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1b8:	81 c6 00 08 00 00    	add    esi,0x800
c001f1be:	83 d7 00             	adc    edi,0x0
c001f1c1:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f1c9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f1d1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f1d6:	eb ab                	jmp    c001f183 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1dc:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f1df:	74 34                	je     c001f215 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f1e1:	89 fa                	mov    edx,edi
c001f1e3:	50                   	push   eax
c001f1e4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1eb:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1ef:	50                   	push   eax
c001f1f0:	89 f0                	mov    eax,esi
c001f1f2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f1f6:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1fa:	55                   	push   ebp
c001f1fb:	50                   	push   eax
c001f1fc:	e8 50 fd ff ff       	call   c001ef51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f201:	83 c4 0c             	add    esp,0xc
c001f204:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f208:	55                   	push   ebp
c001f209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f20d:	e8 a4 14 fe ff       	call   c00006b6 <memcpy>
c001f212:	83 c4 10             	add    esp,0x10
c001f215:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f21c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f220:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f224:	89 38                	mov    DWORD PTR [eax],edi
c001f226:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f22d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f231:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f234:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f237:	31 c0                	xor    eax,eax
c001f239:	eb 05                	jmp    c001f240 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f23b:	b8 04 00 00 00       	mov    eax,0x4
c001f240:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f246:	5b                   	pop    ebx
c001f247:	5e                   	pop    esi
c001f248:	5f                   	pop    edi
c001f249:	5d                   	pop    ebp
c001f24a:	c3                   	ret    
c001f24b:	90                   	nop

c001f24c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f24c:	55                   	push   ebp
c001f24d:	57                   	push   edi
c001f24e:	56                   	push   esi
c001f24f:	53                   	push   ebx
c001f250:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f256:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f25d:	85 f6                	test   esi,esi
c001f25f:	0f 84 64 02 00 00    	je     c001f4c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f265:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f26d:	0f 84 56 02 00 00    	je     c001f4c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f273:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f276:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f279:	75 0a                	jne    c001f285 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f27b:	b8 07 00 00 00       	mov    eax,0x7
c001f280:	e9 49 02 00 00       	jmp    c001f4ce <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f285:	50                   	push   eax
c001f286:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f28a:	50                   	push   eax
c001f28b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f292:	53                   	push   ebx
c001f293:	8b 06                	mov    eax,DWORD PTR [esi]
c001f295:	c1 e0 0b             	shl    eax,0xb
c001f298:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f29b:	c1 e8 0b             	shr    eax,0xb
c001f29e:	50                   	push   eax
c001f29f:	e8 ad fc ff ff       	call   c001ef51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f2a4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f2a7:	83 c4 10             	add    esp,0x10
c001f2aa:	89 c1                	mov    ecx,eax
c001f2ac:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f2af:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f2b5:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f2b8:	84 db                	test   bl,bl
c001f2ba:	0f 85 90 00 00 00    	jne    c001f350 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f2c0:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f2c6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f2cc:	29 c7                	sub    edi,eax
c001f2ce:	89 fb                	mov    ebx,edi
c001f2d0:	c1 fb 1f             	sar    ebx,0x1f
c001f2d3:	01 f8                	add    eax,edi
c001f2d5:	11 da                	adc    edx,ebx
c001f2d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f2df:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f2e2:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f2e5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f2e8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f2eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2ee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2f2:	89 d8                	mov    eax,ebx
c001f2f4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2f7:	ba 00 00 00 00       	mov    edx,0x0
c001f2fc:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f300:	b8 00 00 00 00       	mov    eax,0x0
c001f305:	73 0b                	jae    c001f312 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f307:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f30a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f30e:	29 f8                	sub    eax,edi
c001f310:	19 da                	sbb    edx,ebx
c001f312:	89 d3                	mov    ebx,edx
c001f314:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f317:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f31a:	09 c3                	or     ebx,eax
c001f31c:	0f 84 59 ff ff ff    	je     c001f27b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f322:	55                   	push   ebp
c001f323:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f327:	50                   	push   eax
c001f328:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f32f:	53                   	push   ebx
c001f330:	8b 06                	mov    eax,DWORD PTR [esi]
c001f332:	c1 e0 0b             	shl    eax,0xb
c001f335:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f339:	c1 e8 0b             	shr    eax,0xb
c001f33c:	50                   	push   eax
c001f33d:	e8 0f fc ff ff       	call   c001ef51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f342:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f345:	83 c4 10             	add    esp,0x10
c001f348:	25 ff 07 00 00       	and    eax,0x7ff
c001f34d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f350:	57                   	push   edi
c001f351:	6a 28                	push   0x28
c001f353:	6a 00                	push   0x0
c001f355:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f359:	50                   	push   eax
c001f35a:	e8 8d 13 fe ff       	call   c00006ec <memset>
c001f35f:	31 d2                	xor    edx,edx
c001f361:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f364:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f36a:	89 f8                	mov    eax,edi
c001f36c:	83 c0 21             	add    eax,0x21
c001f36f:	83 d2 00             	adc    edx,0x0
c001f372:	89 c7                	mov    edi,eax
c001f374:	89 d5                	mov    ebp,edx
c001f376:	83 c4 10             	add    esp,0x10
c001f379:	31 c9                	xor    ecx,ecx
c001f37b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f382:	83 f9 28             	cmp    ecx,0x28
c001f385:	88 04 24             	mov    BYTE PTR [esp],al
c001f388:	0f 94 c2             	sete   dl
c001f38b:	88 d0                	mov    al,dl
c001f38d:	ba ff 07 00 00       	mov    edx,0x7ff
c001f392:	39 fa                	cmp    edx,edi
c001f394:	ba 00 00 00 00       	mov    edx,0x0
c001f399:	19 ea                	sbb    edx,ebp
c001f39b:	0f 92 c2             	setb   dl
c001f39e:	09 c2                	or     edx,eax
c001f3a0:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f3a4:	0f 94 c0             	sete   al
c001f3a7:	08 d0                	or     al,dl
c001f3a9:	75 16                	jne    c001f3c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f3ab:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f3af:	74 10                	je     c001f3c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f3b1:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f3b4:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f3b8:	41                   	inc    ecx
c001f3b9:	83 c7 01             	add    edi,0x1
c001f3bc:	83 d5 00             	adc    ebp,0x0
c001f3bf:	eb ba                	jmp    c001f37b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f3c1:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f3c8:	83 ec 0c             	sub    esp,0xc
c001f3cb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f3cf:	57                   	push   edi
c001f3d0:	e8 34 13 fe ff       	call   c0000709 <strlen>
c001f3d5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f3dd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3e1:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f3e8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f3eb:	5a                   	pop    edx
c001f3ec:	25 ff 07 00 00       	and    eax,0x7ff
c001f3f1:	01 c8                	add    eax,ecx
c001f3f3:	59                   	pop    ecx
c001f3f4:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f3fa:	83 e0 02             	and    eax,0x2
c001f3fd:	3c 01                	cmp    al,0x1
c001f3ff:	19 c0                	sbb    eax,eax
c001f401:	83 c0 02             	add    eax,0x2
c001f404:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f408:	57                   	push   edi
c001f409:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f40d:	50                   	push   eax
c001f40e:	e8 78 13 fe ff       	call   c000078b <strcpy>
c001f413:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f417:	83 c4 10             	add    esp,0x10
c001f41a:	84 c0                	test   al,al
c001f41c:	75 21                	jne    c001f43f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f41e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f426:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f42e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f436:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f43d:	eb 28                	jmp    c001f467 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f43f:	fe c8                	dec    al
c001f441:	75 24                	jne    c001f467 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f443:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f44b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f453:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f45b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f462:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f467:	0f b6 fb             	movzx  edi,bl
c001f46a:	31 db                	xor    ebx,ebx
c001f46c:	50                   	push   eax
c001f46d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f474:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f478:	50                   	push   eax
c001f479:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f480:	e8 31 12 fe ff       	call   c00006b6 <memcpy>
c001f485:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f48c:	89 f9                	mov    ecx,edi
c001f48e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f494:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f497:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f49a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f49d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f4a0:	83 c4 10             	add    esp,0x10
c001f4a3:	39 c7                	cmp    edi,eax
c001f4a5:	89 df                	mov    edi,ebx
c001f4a7:	19 d7                	sbb    edi,edx
c001f4a9:	72 10                	jb     c001f4bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f4ab:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f4b2:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f4b9:	eb 0a                	jmp    c001f4c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f4bb:	29 c8                	sub    eax,ecx
c001f4bd:	19 da                	sbb    edx,ebx
c001f4bf:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f4c2:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f4c5:	31 c0                	xor    eax,eax
c001f4c7:	eb 05                	jmp    c001f4ce <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f4c9:	b8 04 00 00 00       	mov    eax,0x4
c001f4ce:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f4d4:	5b                   	pop    ebx
c001f4d5:	5e                   	pop    esi
c001f4d6:	5f                   	pop    edi
c001f4d7:	5d                   	pop    ebp
c001f4d8:	c3                   	ret    

c001f4d9 <readRoot(unsigned int*, unsigned int*, char)>:
c001f4d9:	81 ec 40 08 00 00    	sub    esp,0x840
c001f4df:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f4e7:	50                   	push   eax
c001f4e8:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f4ec:	50                   	push   eax
c001f4ed:	6a 10                	push   0x10
c001f4ef:	e8 5d fa ff ff       	call   c001ef51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f4f4:	83 c4 0c             	add    esp,0xc
c001f4f7:	6a 22                	push   0x22
c001f4f9:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f500:	50                   	push   eax
c001f501:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f505:	50                   	push   eax
c001f506:	e8 ab 11 fe ff       	call   c00006b6 <memcpy>
c001f50b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f512:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f516:	89 10                	mov    DWORD PTR [eax],edx
c001f518:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f51f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f523:	89 10                	mov    DWORD PTR [eax],edx
c001f525:	b0 01                	mov    al,0x1
c001f527:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f52d:	c3                   	ret    

c001f52e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f52e:	55                   	push   ebp
c001f52f:	57                   	push   edi
c001f530:	56                   	push   esi
c001f531:	53                   	push   ebx
c001f532:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f538:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f53f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f546:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f54a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f54e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f552:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f556:	75 03                	jne    c001f55b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f558:	83 c3 02             	add    ebx,0x2
c001f55b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f55e:	75 03                	jne    c001f563 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f560:	43                   	inc    ebx
c001f561:	eb f8                	jmp    c001f55b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f563:	51                   	push   ecx
c001f564:	68 00 01 00 00       	push   0x100
c001f569:	6a 00                	push   0x0
c001f56b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f56f:	50                   	push   eax
c001f570:	e8 77 11 fe ff       	call   c00006ec <memset>
c001f575:	83 c4 10             	add    esp,0x10
c001f578:	31 d2                	xor    edx,edx
c001f57a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f57d:	84 c0                	test   al,al
c001f57f:	74 21                	je     c001f5a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f581:	3c 2f                	cmp    al,0x2f
c001f583:	75 0b                	jne    c001f590 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f585:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f589:	bd 01 00 00 00       	mov    ebp,0x1
c001f58e:	eb 14                	jmp    c001f5a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f590:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f593:	80 f9 19             	cmp    cl,0x19
c001f596:	77 03                	ja     c001f59b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f598:	83 e8 20             	sub    eax,0x20
c001f59b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f59f:	42                   	inc    edx
c001f5a0:	eb d8                	jmp    c001f57a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f5a2:	31 ed                	xor    ebp,ebp
c001f5a4:	83 ec 0c             	sub    esp,0xc
c001f5a7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f5ae:	e8 b3 fb fe ff       	call   c000f166 <malloc>
c001f5b3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f5ba:	89 c6                	mov    esi,eax
c001f5bc:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f5c2:	c1 ef 0b             	shr    edi,0xb
c001f5c5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f5cc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f5d0:	83 c4 10             	add    esp,0x10
c001f5d3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f5d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5dc:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f5e3:	74 28                	je     c001f60d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f5e5:	52                   	push   edx
c001f5e6:	57                   	push   edi
c001f5e7:	50                   	push   eax
c001f5e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f5ec:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f5f3:	e8 59 f9 ff ff       	call   c001ef51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5fc:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f603:	05 00 08 00 00       	add    eax,0x800
c001f608:	83 c4 10             	add    esp,0x10
c001f60b:	eb cb                	jmp    c001f5d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f60d:	83 ec 0c             	sub    esp,0xc
c001f610:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f614:	57                   	push   edi
c001f615:	e8 ef 10 fe ff       	call   c0000709 <strlen>
c001f61a:	50                   	push   eax
c001f61b:	57                   	push   edi
c001f61c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f623:	56                   	push   esi
c001f624:	e8 e6 f8 ff ff       	call   c001ef0f <__memmem(unsigned char*, int, unsigned char*, int)>
c001f629:	83 c4 20             	add    esp,0x20
c001f62c:	85 c0                	test   eax,eax
c001f62e:	75 13                	jne    c001f643 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f630:	83 ec 0c             	sub    esp,0xc
c001f633:	56                   	push   esi
c001f634:	e8 3d fb fe ff       	call   c000f176 <free>
c001f639:	83 c4 10             	add    esp,0x10
c001f63c:	31 c0                	xor    eax,eax
c001f63e:	e9 b3 00 00 00       	jmp    c001f6f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f643:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f647:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f64b:	c1 e7 08             	shl    edi,0x8
c001f64e:	c1 e2 10             	shl    edx,0x10
c001f651:	09 d7                	or     edi,edx
c001f653:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f657:	09 d7                	or     edi,edx
c001f659:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f65d:	c1 e2 18             	shl    edx,0x18
c001f660:	09 d7                	or     edi,edx
c001f662:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f666:	89 d1                	mov    ecx,edx
c001f668:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f66c:	c1 e1 08             	shl    ecx,0x8
c001f66f:	c1 e2 10             	shl    edx,0x10
c001f672:	09 ca                	or     edx,ecx
c001f674:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f678:	09 ca                	or     edx,ecx
c001f67a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f67e:	c1 e1 18             	shl    ecx,0x18
c001f681:	09 ca                	or     edx,ecx
c001f683:	89 e9                	mov    ecx,ebp
c001f685:	84 c9                	test   cl,cl
c001f687:	74 3c                	je     c001f6c5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f689:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f68d:	83 ec 0c             	sub    esp,0xc
c001f690:	56                   	push   esi
c001f691:	e8 e0 fa fe ff       	call   c000f176 <free>
c001f696:	83 c4 0c             	add    esp,0xc
c001f699:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6a0:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f6a5:	50                   	push   eax
c001f6a6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6ad:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6b8:	52                   	push   edx
c001f6b9:	57                   	push   edi
c001f6ba:	53                   	push   ebx
c001f6bb:	e8 6e fe ff ff       	call   c001f52e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f6c0:	83 c4 20             	add    esp,0x20
c001f6c3:	eb 31                	jmp    c001f6f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f6c5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f6c8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f6cf:	d0 e8                	shr    al,1
c001f6d1:	89 3b                	mov    DWORD PTR [ebx],edi
c001f6d3:	83 e0 01             	and    eax,0x1
c001f6d6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f6dd:	83 ec 0c             	sub    esp,0xc
c001f6e0:	89 13                	mov    DWORD PTR [ebx],edx
c001f6e2:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f6e9:	89 03                	mov    DWORD PTR [ebx],eax
c001f6eb:	56                   	push   esi
c001f6ec:	e8 85 fa fe ff       	call   c000f176 <free>
c001f6f1:	83 c4 10             	add    esp,0x10
c001f6f4:	b0 01                	mov    al,0x1
c001f6f6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f6fc:	5b                   	pop    ebx
c001f6fd:	5e                   	pop    esi
c001f6fe:	5f                   	pop    edi
c001f6ff:	5d                   	pop    ebp
c001f700:	c3                   	ret    

c001f701 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f701:	55                   	push   ebp
c001f702:	57                   	push   edi
c001f703:	56                   	push   esi
c001f704:	53                   	push   ebx
c001f705:	83 ec 20             	sub    esp,0x20
c001f708:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f70c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f710:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f714:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f71c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f724:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f729:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f72f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f735:	57                   	push   edi
c001f736:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f73a:	50                   	push   eax
c001f73b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f73f:	50                   	push   eax
c001f740:	e8 94 fd ff ff       	call   c001f4d9 <readRoot(unsigned int*, unsigned int*, char)>
c001f745:	5a                   	pop    edx
c001f746:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f74a:	e8 ba 0f fe ff       	call   c0000709 <strlen>
c001f74f:	83 c4 10             	add    esp,0x10
c001f752:	83 f8 03             	cmp    eax,0x3
c001f755:	77 17                	ja     c001f76e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f75b:	89 03                	mov    DWORD PTR [ebx],eax
c001f75d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f761:	89 06                	mov    DWORD PTR [esi],eax
c001f763:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f76a:	b0 01                	mov    al,0x1
c001f76c:	eb 19                	jmp    c001f787 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f76e:	50                   	push   eax
c001f76f:	55                   	push   ebp
c001f770:	57                   	push   edi
c001f771:	56                   	push   esi
c001f772:	53                   	push   ebx
c001f773:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f777:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f77b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f77f:	e8 aa fd ff ff       	call   c001f52e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f784:	83 c4 20             	add    esp,0x20
c001f787:	83 c4 1c             	add    esp,0x1c
c001f78a:	5b                   	pop    ebx
c001f78b:	5e                   	pop    esi
c001f78c:	5f                   	pop    edi
c001f78d:	5d                   	pop    ebp
c001f78e:	c3                   	ret    
c001f78f:	90                   	nop

c001f790 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f790:	57                   	push   edi
c001f791:	56                   	push   esi
c001f792:	53                   	push   ebx
c001f793:	83 ec 10             	sub    esp,0x10
c001f796:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f79a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f79e:	85 ff                	test   edi,edi
c001f7a0:	74 7b                	je     c001f81d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f7a2:	85 f6                	test   esi,esi
c001f7a4:	74 77                	je     c001f81d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	6a 1c                	push   0x1c
c001f7ab:	e8 b6 f9 fe ff       	call   c000f166 <malloc>
c001f7b0:	89 07                	mov    DWORD PTR [edi],eax
c001f7b2:	89 c3                	mov    ebx,eax
c001f7b4:	58                   	pop    eax
c001f7b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f7b9:	50                   	push   eax
c001f7ba:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f7bd:	50                   	push   eax
c001f7be:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7c2:	50                   	push   eax
c001f7c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7c7:	50                   	push   eax
c001f7c8:	56                   	push   esi
c001f7c9:	e8 33 ff ff ff       	call   c001f701 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f7ce:	83 c4 20             	add    esp,0x20
c001f7d1:	84 c0                	test   al,al
c001f7d3:	74 07                	je     c001f7dc <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f7d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7da:	74 0b                	je     c001f7e7 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f7dc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f7e0:	b8 01 00 00 00       	mov    eax,0x1
c001f7e5:	eb 3b                	jmp    c001f822 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7eb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f7ef:	89 03                	mov    DWORD PTR [ebx],eax
c001f7f1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f7f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f803:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f80a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f80d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f814:	8a 06                	mov    al,BYTE PTR [esi]
c001f816:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f819:	31 c0                	xor    eax,eax
c001f81b:	eb 05                	jmp    c001f822 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f81d:	b8 04 00 00 00       	mov    eax,0x4
c001f822:	83 c4 10             	add    esp,0x10
c001f825:	5b                   	pop    ebx
c001f826:	5e                   	pop    esi
c001f827:	5f                   	pop    edi
c001f828:	c3                   	ret    
c001f829:	90                   	nop

c001f82a <ISO9660::exists(char const*)>:
c001f82a:	83 ec 28             	sub    esp,0x28
c001f82d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f831:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f835:	52                   	push   edx
c001f836:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f839:	52                   	push   edx
c001f83a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f83e:	52                   	push   edx
c001f83f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f843:	52                   	push   edx
c001f844:	50                   	push   eax
c001f845:	e8 b7 fe ff ff       	call   c001f701 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f84a:	83 c4 3c             	add    esp,0x3c
c001f84d:	c3                   	ret    

c001f84e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f84e:	56                   	push   esi
c001f84f:	53                   	push   ebx
c001f850:	83 ec 14             	sub    esp,0x14
c001f853:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f857:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f85b:	85 db                	test   ebx,ebx
c001f85d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f861:	0f 94 c2             	sete   dl
c001f864:	85 f6                	test   esi,esi
c001f866:	0f 94 c0             	sete   al
c001f869:	08 c2                	or     dl,al
c001f86b:	75 68                	jne    c001f8d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f86d:	85 c9                	test   ecx,ecx
c001f86f:	74 64                	je     c001f8d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f871:	83 ec 0c             	sub    esp,0xc
c001f874:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f877:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f87b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f881:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f888:	50                   	push   eax
c001f889:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f88c:	50                   	push   eax
c001f88d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f891:	50                   	push   eax
c001f892:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f896:	50                   	push   eax
c001f897:	51                   	push   ecx
c001f898:	e8 64 fe ff ff       	call   c001f701 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f89d:	83 c4 20             	add    esp,0x20
c001f8a0:	ba 01 00 00 00       	mov    edx,0x1
c001f8a5:	84 c0                	test   al,al
c001f8a7:	74 31                	je     c001f8da <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8b4:	89 03                	mov    DWORD PTR [ebx],eax
c001f8b6:	ba 00 00 00 00       	mov    edx,0x0
c001f8bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8bf:	85 c0                	test   eax,eax
c001f8c1:	0f 95 06             	setne  BYTE PTR [esi]
c001f8c4:	74 14                	je     c001f8da <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8c6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f8cc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8d3:	eb 05                	jmp    c001f8da <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8d5:	ba 04 00 00 00       	mov    edx,0x4
c001f8da:	83 c4 14             	add    esp,0x14
c001f8dd:	89 d0                	mov    eax,edx
c001f8df:	5b                   	pop    ebx
c001f8e0:	5e                   	pop    esi
c001f8e1:	c3                   	ret    

c001f8e2 <ISO9660::openDir(char const*, void**)>:
c001f8e2:	57                   	push   edi
c001f8e3:	56                   	push   esi
c001f8e4:	53                   	push   ebx
c001f8e5:	83 ec 10             	sub    esp,0x10
c001f8e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f8ec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f8f0:	85 ff                	test   edi,edi
c001f8f2:	0f 84 95 00 00 00    	je     c001f98d <ISO9660::openDir(char const*, void**)+0xab>
c001f8f8:	85 f6                	test   esi,esi
c001f8fa:	0f 84 8d 00 00 00    	je     c001f98d <ISO9660::openDir(char const*, void**)+0xab>
c001f900:	83 ec 0c             	sub    esp,0xc
c001f903:	6a 1c                	push   0x1c
c001f905:	e8 5c f8 fe ff       	call   c000f166 <malloc>
c001f90a:	89 07                	mov    DWORD PTR [edi],eax
c001f90c:	89 c3                	mov    ebx,eax
c001f90e:	59                   	pop    ecx
c001f90f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f913:	50                   	push   eax
c001f914:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f917:	50                   	push   eax
c001f918:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f91c:	50                   	push   eax
c001f91d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f921:	50                   	push   eax
c001f922:	56                   	push   esi
c001f923:	e8 d9 fd ff ff       	call   c001f701 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f928:	83 c4 20             	add    esp,0x20
c001f92b:	84 c0                	test   al,al
c001f92d:	74 07                	je     c001f936 <ISO9660::openDir(char const*, void**)+0x54>
c001f92f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f934:	75 21                	jne    c001f957 <ISO9660::openDir(char const*, void**)+0x75>
c001f936:	0f b6 c0             	movzx  eax,al
c001f939:	52                   	push   edx
c001f93a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f93e:	50                   	push   eax
c001f93f:	68 a2 8b 02 c0       	push   0xc0028ba2
c001f944:	e8 0e 29 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001f949:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f94d:	83 c4 10             	add    esp,0x10
c001f950:	b8 01 00 00 00       	mov    eax,0x1
c001f955:	eb 3b                	jmp    c001f992 <ISO9660::openDir(char const*, void**)+0xb0>
c001f957:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f95b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f95f:	89 03                	mov    DWORD PTR [ebx],eax
c001f961:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f968:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f96c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f973:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f97a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f97d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f984:	8a 06                	mov    al,BYTE PTR [esi]
c001f986:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f989:	31 c0                	xor    eax,eax
c001f98b:	eb 05                	jmp    c001f992 <ISO9660::openDir(char const*, void**)+0xb0>
c001f98d:	b8 04 00 00 00       	mov    eax,0x4
c001f992:	83 c4 10             	add    esp,0x10
c001f995:	5b                   	pop    ebx
c001f996:	5e                   	pop    esi
c001f997:	5f                   	pop    edi
c001f998:	c3                   	ret    
c001f999:	90                   	nop

c001f99a <ISO9660::ISO9660()>:
c001f99a:	83 ec 0c             	sub    esp,0xc
c001f99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a1:	83 ec 0c             	sub    esp,0xc
c001f9a4:	50                   	push   eax
c001f9a5:	e8 b2 2b ff ff       	call   c001255c <Filesystem::Filesystem()>
c001f9aa:	83 c4 10             	add    esp,0x10
c001f9ad:	ba c8 8b 02 c0       	mov    edx,0xc0028bc8
c001f9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b6:	89 10                	mov    DWORD PTR [eax],edx
c001f9b8:	90                   	nop
c001f9b9:	83 c4 0c             	add    esp,0xc
c001f9bc:	c3                   	ret    
c001f9bd:	90                   	nop

c001f9be <SoundChannel::~SoundChannel()>:
c001f9be:	83 ec 0c             	sub    esp,0xc
c001f9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001f9c8:	83 ec 0c             	sub    esp,0xc
c001f9cb:	50                   	push   eax
c001f9cc:	e8 a5 f7 fe ff       	call   c000f176 <free>
c001f9d1:	83 c4 10             	add    esp,0x10
c001f9d4:	90                   	nop
c001f9d5:	83 c4 0c             	add    esp,0xc
c001f9d8:	c3                   	ret    
c001f9d9:	90                   	nop

c001f9da <SoundChannel::setSpeed(float)>:
c001f9da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f9e5:	c3                   	ret    

c001f9e6 <SoundChannel::getSpeed()>:
c001f9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001f9ed:	c3                   	ret    

c001f9ee <SoundChannel::setVolume(int)>:
c001f9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9f2:	83 f8 64             	cmp    eax,0x64
c001f9f5:	7e 05                	jle    c001f9fc <SoundChannel::setVolume(int)+0xe>
c001f9f7:	b8 64 00 00 00       	mov    eax,0x64
c001f9fc:	85 c0                	test   eax,eax
c001f9fe:	79 02                	jns    c001fa02 <SoundChannel::setVolume(int)+0x14>
c001fa00:	31 c0                	xor    eax,eax
c001fa02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa06:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001fa09:	c3                   	ret    

c001fa0a <SoundChannel::getVolume()>:
c001fa0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001fa11:	c3                   	ret    

c001fa12 <SoundChannel::pause()>:
c001fa12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa16:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001fa1a:	c3                   	ret    
c001fa1b:	90                   	nop

c001fa1c <SoundChannel::SoundChannel(int, int, int, int)>:
c001fa1c:	83 ec 1c             	sub    esp,0x1c
c001fa1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fa23:	e8 ea ff ff ff       	call   c001fa12 <SoundChannel::pause()>
c001fa28:	83 c4 04             	add    esp,0x4
c001fa2b:	6a 50                	push   0x50
c001fa2d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa31:	e8 b8 ff ff ff       	call   c001f9ee <SoundChannel::setVolume(int)>
c001fa36:	83 c4 08             	add    esp,0x8
c001fa39:	a1 40 8c 02 c0       	mov    eax,ds:0xc0028c40
c001fa3e:	50                   	push   eax
c001fa3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa43:	e8 92 ff ff ff       	call   c001f9da <SoundChannel::setSpeed(float)>
c001fa48:	83 c4 08             	add    esp,0x8
c001fa4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa4f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fa53:	89 10                	mov    DWORD PTR [eax],edx
c001fa55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa64:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fa68:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa6b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fa70:	75 23                	jne    c001fa95 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fa72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa76:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa7f:	0f af c2             	imul   eax,edx
c001fa82:	85 c0                	test   eax,eax
c001fa84:	79 03                	jns    c001fa89 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fa86:	83 c0 03             	add    eax,0x3
c001fa89:	c1 f8 02             	sar    eax,0x2
c001fa8c:	05 a0 0f 00 00       	add    eax,0xfa0
c001fa91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fa95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fa9d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001faa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faa4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001faab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faaf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001fab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faba:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fabd:	c1 e0 02             	shl    eax,0x2
c001fac0:	83 ec 0c             	sub    esp,0xc
c001fac3:	50                   	push   eax
c001fac4:	e8 9d f6 fe ff       	call   c000f166 <malloc>
c001fac9:	83 c4 10             	add    esp,0x10
c001facc:	89 c2                	mov    edx,eax
c001face:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001fad5:	83 ec 04             	sub    esp,0x4
c001fad8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fadc:	50                   	push   eax
c001fadd:	6a 01                	push   0x1
c001fadf:	6a 04                	push   0x4
c001fae1:	e8 a8 8e fe ff       	call   c000898e <src_new>
c001fae6:	83 c4 10             	add    esp,0x10
c001fae9:	89 c2                	mov    edx,eax
c001faeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001faf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf6:	85 c0                	test   eax,eax
c001faf8:	74 10                	je     c001fb0a <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001fafa:	83 ec 0c             	sub    esp,0xc
c001fafd:	68 24 8c 02 c0       	push   0xc0028c24
c001fb02:	e8 ec 8e ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c001fb07:	83 c4 10             	add    esp,0x10
c001fb0a:	a0 00 c6 02 c0       	mov    al,ds:0xc002c600
c001fb0f:	83 f0 01             	xor    eax,0x1
c001fb12:	84 c0                	test   al,al
c001fb14:	74 57                	je     c001fb6d <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fb16:	a1 44 8c 02 c0       	mov    eax,ds:0xc0028c44
c001fb1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fb1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fb27:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fb2f:	7f 35                	jg     c001fb66 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001fb31:	83 ec 0c             	sub    esp,0xc
c001fb34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb38:	e8 4a 41 00 00       	call   c0023c87 <__floatsisf>
c001fb3d:	83 c4 10             	add    esp,0x10
c001fb40:	8b 15 44 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c44
c001fb46:	83 ec 08             	sub    esp,0x8
c001fb49:	52                   	push   edx
c001fb4a:	50                   	push   eax
c001fb4b:	e8 49 3d 00 00       	call   c0023899 <__mulsf3>
c001fb50:	83 c4 10             	add    esp,0x10
c001fb53:	89 c2                	mov    edx,eax
c001fb55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb59:	89 14 85 00 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e00],edx
c001fb60:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fb64:	eb c1                	jmp    c001fb27 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fb66:	c6 05 00 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c600,0x1
c001fb6d:	90                   	nop
c001fb6e:	83 c4 1c             	add    esp,0x1c
c001fb71:	c3                   	ret    

c001fb72 <SoundChannel::play()>:
c001fb72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb76:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fb7a:	c3                   	ret    
c001fb7b:	90                   	nop

c001fb7c <SoundChannel::paused()>:
c001fb7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb80:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fb83:	c3                   	ret    

c001fb84 <SoundChannel::getSampleRate()>:
c001fb84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb88:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb8a:	c3                   	ret    
c001fb8b:	90                   	nop

c001fb8c <SoundChannel::getBits()>:
c001fb8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb93:	c3                   	ret    

c001fb94 <SoundChannel::getBufferUsed()>:
c001fb94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb98:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fb9b:	c3                   	ret    

c001fb9c <SoundChannel::getBufferSize()>:
c001fb9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fba3:	c3                   	ret    

c001fba4 <SoundChannel::unbuffer(float*, int, int)>:
c001fba4:	56                   	push   esi
c001fba5:	53                   	push   ebx
c001fba6:	83 ec 40             	sub    esp,0x40
c001fba9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fbad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fbb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fbb4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fbb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fbbb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fbbf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fbc3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fbc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbcb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fbcf:	e8 b3 40 00 00       	call   c0023c87 <__floatsisf>
c001fbd4:	5a                   	pop    edx
c001fbd5:	89 c6                	mov    esi,eax
c001fbd7:	ff 33                	push   DWORD PTR [ebx]
c001fbd9:	e8 a9 40 00 00       	call   c0023c87 <__floatsisf>
c001fbde:	59                   	pop    ecx
c001fbdf:	5a                   	pop    edx
c001fbe0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fbe3:	50                   	push   eax
c001fbe4:	e8 b0 3c 00 00       	call   c0023899 <__mulsf3>
c001fbe9:	59                   	pop    ecx
c001fbea:	5a                   	pop    edx
c001fbeb:	50                   	push   eax
c001fbec:	56                   	push   esi
c001fbed:	e8 6a 3e 00 00       	call   c0023a5c <__divsf3>
c001fbf2:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbf5:	e8 5d 53 00 00       	call   c0024f57 <__extendsfdf2>
c001fbfa:	59                   	pop    ecx
c001fbfb:	5e                   	pop    esi
c001fbfc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fc00:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fc04:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fc0c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc10:	50                   	push   eax
c001fc11:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fc14:	e8 ef 89 fe ff       	call   c0008608 <src_process>
c001fc19:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fc1d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fc20:	83 c4 0c             	add    esp,0xc
c001fc23:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fc26:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fc29:	29 d0                	sub    eax,edx
c001fc2b:	c1 e0 02             	shl    eax,0x2
c001fc2e:	50                   	push   eax
c001fc2f:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fc32:	50                   	push   eax
c001fc33:	51                   	push   ecx
c001fc34:	e8 45 0a fe ff       	call   c000067e <memmove>
c001fc39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc3d:	83 c4 44             	add    esp,0x44
c001fc40:	5b                   	pop    ebx
c001fc41:	5e                   	pop    esi
c001fc42:	c3                   	ret    
c001fc43:	90                   	nop

c001fc44 <SoundChannel::buffer8(unsigned char*, int)>:
c001fc44:	55                   	push   ebp
c001fc45:	57                   	push   edi
c001fc46:	56                   	push   esi
c001fc47:	53                   	push   ebx
c001fc48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc4c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fc50:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc53:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fc57:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc5a:	74 7a                	je     c001fcd6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc5c:	85 ff                	test   edi,edi
c001fc5e:	7e 76                	jle    c001fcd6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc60:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fc64:	8d 70 01             	lea    esi,[eax+0x1]
c001fc67:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc6a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc6d:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fc74:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc77:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc7a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc7d:	74 5e                	je     c001fcdd <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fc7f:	83 ff 01             	cmp    edi,0x1
c001fc82:	74 4b                	je     c001fccf <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fc84:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fc88:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc8b:	8d 70 01             	lea    esi,[eax+0x1]
c001fc8e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc91:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fc98:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc9b:	b8 02 00 00 00       	mov    eax,0x2
c001fca0:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fca3:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fca6:	75 23                	jne    c001fccb <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fca8:	eb 27                	jmp    c001fcd1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fcaa:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fcaf:	8d 71 01             	lea    esi,[ecx+0x1]
c001fcb2:	40                   	inc    eax
c001fcb3:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fcb6:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fcb9:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fcc0:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fcc3:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fcc6:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fcc9:	74 06                	je     c001fcd1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fccb:	39 c7                	cmp    edi,eax
c001fccd:	75 db                	jne    c001fcaa <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fccf:	89 f8                	mov    eax,edi
c001fcd1:	5b                   	pop    ebx
c001fcd2:	5e                   	pop    esi
c001fcd3:	5f                   	pop    edi
c001fcd4:	5d                   	pop    ebp
c001fcd5:	c3                   	ret    
c001fcd6:	5b                   	pop    ebx
c001fcd7:	31 c0                	xor    eax,eax
c001fcd9:	5e                   	pop    esi
c001fcda:	5f                   	pop    edi
c001fcdb:	5d                   	pop    ebp
c001fcdc:	c3                   	ret    
c001fcdd:	b8 01 00 00 00       	mov    eax,0x1
c001fce2:	eb ed                	jmp    c001fcd1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fce4 <SoundDevice::SoundDevice(char const*)>:
c001fce4:	83 ec 1c             	sub    esp,0x1c
c001fce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fceb:	83 ec 08             	sub    esp,0x8
c001fcee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fcf2:	50                   	push   eax
c001fcf3:	e8 5a 3b ff ff       	call   c0013852 <Device::Device(char const*)>
c001fcf8:	83 c4 10             	add    esp,0x10
c001fcfb:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c001fd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd04:	89 10                	mov    DWORD PTR [eax],edx
c001fd06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd0a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fd14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd18:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fd22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd2a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd2f:	7f 19                	jg     c001fd4a <SoundDevice::SoundDevice(char const*)+0x66>
c001fd31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd39:	83 c2 54             	add    edx,0x54
c001fd3c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fd44:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fd48:	eb e0                	jmp    c001fd2a <SoundDevice::SoundDevice(char const*)+0x46>
c001fd4a:	90                   	nop
c001fd4b:	83 c4 1c             	add    esp,0x1c
c001fd4e:	c3                   	ret    
c001fd4f:	90                   	nop

c001fd50 <SoundDevice::~SoundDevice()>:
c001fd50:	53                   	push   ebx
c001fd51:	83 ec 18             	sub    esp,0x18
c001fd54:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c001fd59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd5d:	89 10                	mov    DWORD PTR [eax],edx
c001fd5f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd67:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd6c:	7f 46                	jg     c001fdb4 <SoundDevice::~SoundDevice()+0x64>
c001fd6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd76:	83 c2 54             	add    edx,0x54
c001fd79:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fd7d:	85 c0                	test   eax,eax
c001fd7f:	74 2d                	je     c001fdae <SoundDevice::~SoundDevice()+0x5e>
c001fd81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd89:	83 c2 54             	add    edx,0x54
c001fd8c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fd90:	85 db                	test   ebx,ebx
c001fd92:	74 1a                	je     c001fdae <SoundDevice::~SoundDevice()+0x5e>
c001fd94:	83 ec 0c             	sub    esp,0xc
c001fd97:	53                   	push   ebx
c001fd98:	e8 21 fc ff ff       	call   c001f9be <SoundChannel::~SoundChannel()>
c001fd9d:	83 c4 10             	add    esp,0x10
c001fda0:	83 ec 08             	sub    esp,0x8
c001fda3:	6a 2c                	push   0x2c
c001fda5:	53                   	push   ebx
c001fda6:	e8 cc 23 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001fdab:	83 c4 10             	add    esp,0x10
c001fdae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fdb2:	eb b3                	jmp    c001fd67 <SoundDevice::~SoundDevice()+0x17>
c001fdb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	50                   	push   eax
c001fdbc:	e8 43 37 ff ff       	call   c0013504 <Device::~Device()>
c001fdc1:	83 c4 10             	add    esp,0x10
c001fdc4:	90                   	nop
c001fdc5:	83 c4 18             	add    esp,0x18
c001fdc8:	5b                   	pop    ebx
c001fdc9:	c3                   	ret    

c001fdca <SoundDevice::~SoundDevice()>:
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	83 ec 0c             	sub    esp,0xc
c001fdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd4:	e8 77 ff ff ff       	call   c001fd50 <SoundDevice::~SoundDevice()>
c001fdd9:	83 c4 10             	add    esp,0x10
c001fddc:	83 ec 08             	sub    esp,0x8
c001fddf:	68 e4 01 00 00       	push   0x1e4
c001fde4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde8:	e8 8a 23 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001fded:	83 c4 10             	add    esp,0x10
c001fdf0:	83 c4 0c             	add    esp,0xc
c001fdf3:	c3                   	ret    

c001fdf4 <SoundDevice::getFreeChannelNum()>:
c001fdf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fdf8:	31 c0                	xor    eax,eax
c001fdfa:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001fe02:	74 09                	je     c001fe0d <SoundDevice::getFreeChannelNum()+0x19>
c001fe04:	40                   	inc    eax
c001fe05:	83 f8 20             	cmp    eax,0x20
c001fe08:	75 f0                	jne    c001fdfa <SoundDevice::getFreeChannelNum()+0x6>
c001fe0a:	83 c8 ff             	or     eax,0xffffffff
c001fe0d:	c3                   	ret    

c001fe0e <SoundDevice::addChannel(SoundChannel*)>:
c001fe0e:	56                   	push   esi
c001fe0f:	53                   	push   ebx
c001fe10:	51                   	push   ecx
c001fe11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fe19:	53                   	push   ebx
c001fe1a:	e8 d5 ff ff ff       	call   c001fdf4 <SoundDevice::getFreeChannelNum()>
c001fe1f:	5a                   	pop    edx
c001fe20:	83 f8 ff             	cmp    eax,0xffffffff
c001fe23:	74 51                	je     c001fe76 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe25:	85 f6                	test   esi,esi
c001fe27:	74 4d                	je     c001fe76 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe29:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001fe30:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001fe37:	75 30                	jne    c001fe69 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001fe39:	83 ec 0c             	sub    esp,0xc
c001fe3c:	56                   	push   esi
c001fe3d:	e8 42 fd ff ff       	call   c001fb84 <SoundChannel::getSampleRate()>
c001fe42:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001fe48:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe4b:	e8 3c fd ff ff       	call   c001fb8c <SoundChannel::getBits()>
c001fe50:	83 c4 0c             	add    esp,0xc
c001fe53:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001fe59:	8b 13                	mov    edx,DWORD PTR [ebx]
c001fe5b:	50                   	push   eax
c001fe5c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001fe62:	53                   	push   ebx
c001fe63:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001fe66:	83 c4 10             	add    esp,0x10
c001fe69:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001fe6f:	b8 01 00 00 00       	mov    eax,0x1
c001fe74:	eb 03                	jmp    c001fe79 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001fe76:	83 c8 ff             	or     eax,0xffffffff
c001fe79:	5a                   	pop    edx
c001fe7a:	5b                   	pop    ebx
c001fe7b:	5e                   	pop    esi
c001fe7c:	c3                   	ret    
c001fe7d:	90                   	nop

c001fe7e <SoundDevice::removeChannel(int)>:
c001fe7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe86:	83 fa 1f             	cmp    edx,0x1f
c001fe89:	77 23                	ja     c001feae <SoundDevice::removeChannel(int)+0x30>
c001fe8b:	8d 14 90             	lea    edx,[eax+edx*4]
c001fe8e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001fe95:	74 17                	je     c001feae <SoundDevice::removeChannel(int)+0x30>
c001fe97:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001fea1:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001fea7:	75 05                	jne    c001feae <SoundDevice::removeChannel(int)+0x30>
c001fea9:	8b 00                	mov    eax,DWORD PTR [eax]
c001feab:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001feae:	c3                   	ret    
c001feaf:	90                   	nop

c001feb0 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001feb0:	57                   	push   edi
c001feb1:	56                   	push   esi
c001feb2:	53                   	push   ebx
c001feb3:	31 db                	xor    ebx,ebx
c001feb5:	83 ec 10             	sub    esp,0x10
c001feb8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001febc:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001fec0:	0f 8d cb 00 00 00    	jge    c001ff91 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001fec6:	83 ec 0c             	sub    esp,0xc
c001fec9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fecd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001fed0:	e8 82 50 00 00       	call   c0024f57 <__extendsfdf2>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fedc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fee0:	68 00 00 f0 3f       	push   0x3ff00000
c001fee5:	6a 00                	push   0x0
c001fee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001feeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001feef:	e8 ef 3f 00 00       	call   c0023ee3 <__adddf3>
c001fef4:	83 c4 10             	add    esp,0x10
c001fef7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fefb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001feff:	68 00 00 e0 3f       	push   0x3fe00000
c001ff04:	6a 00                	push   0x0
c001ff06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff0e:	e8 4d 46 00 00       	call   c0024560 <__muldf3>
c001ff13:	83 c4 10             	add    esp,0x10
c001ff16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff1e:	68 00 00 60 40       	push   0x40600000
c001ff23:	6a 00                	push   0x0
c001ff25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff2d:	e8 2e 46 00 00       	call   c0024560 <__muldf3>
c001ff32:	59                   	pop    ecx
c001ff33:	5f                   	pop    edi
c001ff34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ff3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff44:	e8 ea 4e 00 00       	call   c0024e33 <__truncdfsf2>
c001ff49:	5a                   	pop    edx
c001ff4a:	89 c7                	mov    edi,eax
c001ff4c:	59                   	pop    ecx
c001ff4d:	68 00 00 fe 42       	push   0x42fe0000
c001ff52:	50                   	push   eax
c001ff53:	e8 85 3f 00 00       	call   c0023edd <__gesf2>
c001ff58:	83 c4 10             	add    esp,0x10
c001ff5b:	85 c0                	test   eax,eax
c001ff5d:	78 06                	js     c001ff65 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c001ff5f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ff63:	eb 26                	jmp    c001ff8b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff65:	50                   	push   eax
c001ff66:	50                   	push   eax
c001ff67:	6a 00                	push   0x0
c001ff69:	57                   	push   edi
c001ff6a:	e8 72 3f 00 00       	call   c0023ee1 <__lesf2>
c001ff6f:	83 c4 10             	add    esp,0x10
c001ff72:	85 c0                	test   eax,eax
c001ff74:	7f 06                	jg     c001ff7c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c001ff76:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ff7a:	eb 0f                	jmp    c001ff8b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	57                   	push   edi
c001ff80:	e8 67 50 00 00       	call   c0024fec <lrintf>
c001ff85:	83 c4 10             	add    esp,0x10
c001ff88:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ff8b:	43                   	inc    ebx
c001ff8c:	e9 2b ff ff ff       	jmp    c001febc <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c001ff91:	83 c4 10             	add    esp,0x10
c001ff94:	5b                   	pop    ebx
c001ff95:	5e                   	pop    esi
c001ff96:	5f                   	pop    edi
c001ff97:	c3                   	ret    

c001ff98 <SoundDevice::getAudio(int, float*, float*)>:
c001ff98:	55                   	push   ebp
c001ff99:	57                   	push   edi
c001ff9a:	56                   	push   esi
c001ff9b:	53                   	push   ebx
c001ff9c:	31 db                	xor    ebx,ebx
c001ff9e:	83 ec 20             	sub    esp,0x20
c001ffa1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ffa5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ffa9:	c1 e0 02             	shl    eax,0x2
c001ffac:	50                   	push   eax
c001ffad:	6a 00                	push   0x0
c001ffaf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffb3:	e8 34 07 fe ff       	call   c00006ec <memset>
c001ffb8:	83 c4 10             	add    esp,0x10
c001ffbb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ffbf:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ffc6:	85 c0                	test   eax,eax
c001ffc8:	0f 84 d7 00 00 00    	je     c00200a5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffce:	83 ec 0c             	sub    esp,0xc
c001ffd1:	50                   	push   eax
c001ffd2:	e8 a5 fb ff ff       	call   c001fb7c <SoundChannel::paused()>
c001ffd7:	83 c4 10             	add    esp,0x10
c001ffda:	84 c0                	test   al,al
c001ffdc:	0f 85 c3 00 00 00    	jne    c00200a5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffe2:	83 ec 0c             	sub    esp,0xc
c001ffe5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ffec:	e8 19 fa ff ff       	call   c001fa0a <SoundChannel::getVolume()>
c001fff1:	83 c4 10             	add    esp,0x10
c001fff4:	85 c0                	test   eax,eax
c001fff6:	0f 84 a9 00 00 00    	je     c00200a5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001fffc:	83 ec 0c             	sub    esp,0xc
c001ffff:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020006:	e8 ff f9 ff ff       	call   c001fa0a <SoundChannel::getVolume()>
c002000b:	83 ec 0c             	sub    esp,0xc
c002000e:	50                   	push   eax
c002000f:	e8 73 3c 00 00       	call   c0023c87 <__floatsisf>
c0020014:	59                   	pop    ecx
c0020015:	5d                   	pop    ebp
c0020016:	31 ed                	xor    ebp,ebp
c0020018:	68 00 00 c8 42       	push   0x42c80000
c002001d:	50                   	push   eax
c002001e:	e8 39 3a 00 00       	call   c0023a5c <__divsf3>
c0020023:	83 c4 10             	add    esp,0x10
c0020026:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002002a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002002e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020034:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020038:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002003f:	e8 60 fb ff ff       	call   c001fba4 <SoundChannel::unbuffer(float*, int, int)>
c0020044:	83 c4 20             	add    esp,0x20
c0020047:	89 c1                	mov    ecx,eax
c0020049:	39 cd                	cmp    ebp,ecx
c002004b:	7d 52                	jge    c002009f <SoundDevice::getAudio(int, float*, float*)+0x107>
c002004d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020051:	50                   	push   eax
c0020052:	50                   	push   eax
c0020053:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020057:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002005a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002005e:	e8 36 38 00 00       	call   c0023899 <__mulsf3>
c0020063:	5a                   	pop    edx
c0020064:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020068:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002006e:	e8 14 3c 00 00       	call   c0023c87 <__floatsisf>
c0020073:	59                   	pop    ecx
c0020074:	5a                   	pop    edx
c0020075:	50                   	push   eax
c0020076:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002007a:	e8 dd 39 00 00       	call   c0023a5c <__divsf3>
c002007f:	59                   	pop    ecx
c0020080:	5a                   	pop    edx
c0020081:	50                   	push   eax
c0020082:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020086:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020089:	e8 e8 34 00 00       	call   c0023576 <__addsf3>
c002008e:	83 c4 10             	add    esp,0x10
c0020091:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020099:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002009c:	45                   	inc    ebp
c002009d:	eb aa                	jmp    c0020049 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002009f:	39 cf                	cmp    edi,ecx
c00200a1:	7e 02                	jle    c00200a5 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00200a3:	89 cf                	mov    edi,ecx
c00200a5:	43                   	inc    ebx
c00200a6:	83 fb 20             	cmp    ebx,0x20
c00200a9:	0f 85 10 ff ff ff    	jne    c001ffbf <SoundDevice::getAudio(int, float*, float*)+0x27>
c00200af:	83 c4 1c             	add    esp,0x1c
c00200b2:	89 f8                	mov    eax,edi
c00200b4:	5b                   	pop    ebx
c00200b5:	5e                   	pop    esi
c00200b6:	5f                   	pop    edi
c00200b7:	5d                   	pop    ebp
c00200b8:	c3                   	ret    
c00200b9:	90                   	nop

c00200ba <PCI::open(int, int, void*)>:
c00200ba:	83 ec 18             	sub    esp,0x18
c00200bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00200c3:	50                   	push   eax
c00200c4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00200c7:	31 c0                	xor    eax,eax
c00200c9:	83 c4 1c             	add    esp,0x1c
c00200cc:	c3                   	ret    
c00200cd:	90                   	nop

c00200ce <PCI::close(int, int, void*)>:
c00200ce:	31 c0                	xor    eax,eax
c00200d0:	c3                   	ret    
c00200d1:	90                   	nop

c00200d2 <PCI::PCI()>:
c00200d2:	83 ec 0c             	sub    esp,0xc
c00200d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d9:	83 ec 08             	sub    esp,0x8
c00200dc:	68 80 8c 02 c0       	push   0xc0028c80
c00200e1:	50                   	push   eax
c00200e2:	e8 f7 2d ff ff       	call   c0012ede <Bus::Bus(char const*)>
c00200e7:	83 c4 10             	add    esp,0x10
c00200ea:	ba 0c 8d 02 c0       	mov    edx,0xc0028d0c
c00200ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f3:	89 10                	mov    DWORD PTR [eax],edx
c00200f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00200ff:	0f b6 d0             	movzx  edx,al
c0020102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020106:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002010d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020111:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020117:	0f b6 d0             	movzx  edx,al
c002011a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020127:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002012d:	8d 50 01             	lea    edx,[eax+0x1]
c0020130:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020134:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002013a:	0f b6 d0             	movzx  edx,al
c002013d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020141:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020145:	83 c9 c0             	or     ecx,0xffffffc0
c0020148:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002014c:	90                   	nop
c002014d:	83 c4 0c             	add    esp,0xc
c0020150:	c3                   	ret    
c0020151:	90                   	nop

c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020152:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020156:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002015b:	89 ca                	mov    edx,ecx
c002015d:	c1 e0 10             	shl    eax,0x10
c0020160:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020166:	09 d0                	or     eax,edx
c0020168:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002016d:	c1 e2 08             	shl    edx,0x8
c0020170:	09 d0                	or     eax,edx
c0020172:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020177:	c1 e2 0b             	shl    edx,0xb
c002017a:	09 d0                	or     eax,edx
c002017c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020181:	0d 00 00 00 80       	or     eax,0x80000000
c0020186:	ef                   	out    dx,eax
c0020187:	ba fc 0c 00 00       	mov    edx,0xcfc
c002018c:	ed                   	in     eax,dx
c002018d:	83 e1 02             	and    ecx,0x2
c0020190:	0f b6 c9             	movzx  ecx,cl
c0020193:	c1 e1 03             	shl    ecx,0x3
c0020196:	d3 e8                	shr    eax,cl
c0020198:	c3                   	ret    
c0020199:	90                   	nop

c002019a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002019a:	6a 00                	push   0x0
c002019c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201a1:	50                   	push   eax
c00201a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201a7:	50                   	push   eax
c00201a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201ad:	50                   	push   eax
c00201ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201b2:	e8 9b ff ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201b7:	83 c4 14             	add    esp,0x14
c00201ba:	c3                   	ret    
c00201bb:	90                   	nop

c00201bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00201bc:	6a 0e                	push   0xe
c00201be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201c3:	50                   	push   eax
c00201c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201c9:	50                   	push   eax
c00201ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201cf:	50                   	push   eax
c00201d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201d4:	e8 79 ff ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201d9:	83 c4 14             	add    esp,0x14
c00201dc:	0f b6 c0             	movzx  eax,al
c00201df:	c3                   	ret    

c00201e0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00201e0:	55                   	push   ebp
c00201e1:	57                   	push   edi
c00201e2:	56                   	push   esi
c00201e3:	53                   	push   ebx
c00201e4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00201e9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00201ee:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00201f3:	6a 0a                	push   0xa
c00201f5:	56                   	push   esi
c00201f6:	55                   	push   ebp
c00201f7:	57                   	push   edi
c00201f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00201fc:	e8 51 ff ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020201:	6a 0a                	push   0xa
c0020203:	89 c3                	mov    ebx,eax
c0020205:	56                   	push   esi
c0020206:	0f b6 db             	movzx  ebx,bl
c0020209:	55                   	push   ebp
c002020a:	57                   	push   edi
c002020b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002020f:	e8 3e ff ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020214:	83 c4 28             	add    esp,0x28
c0020217:	25 00 ff 00 00       	and    eax,0xff00
c002021c:	09 d8                	or     eax,ebx
c002021e:	5b                   	pop    ebx
c002021f:	5e                   	pop    esi
c0020220:	5f                   	pop    edi
c0020221:	5d                   	pop    ebp
c0020222:	c3                   	ret    
c0020223:	90                   	nop

c0020224 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020224:	6a 08                	push   0x8
c0020226:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002022b:	50                   	push   eax
c002022c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020231:	50                   	push   eax
c0020232:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020237:	50                   	push   eax
c0020238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002023c:	e8 11 ff ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020241:	83 c4 14             	add    esp,0x14
c0020244:	0f b6 c4             	movzx  eax,ah
c0020247:	c3                   	ret    

c0020248 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020248:	6a 08                	push   0x8
c002024a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002024f:	50                   	push   eax
c0020250:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020255:	50                   	push   eax
c0020256:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002025b:	50                   	push   eax
c002025c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020260:	e8 ed fe ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020265:	83 c4 14             	add    esp,0x14
c0020268:	c3                   	ret    
c0020269:	90                   	nop

c002026a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002026a:	6a 3c                	push   0x3c
c002026c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020271:	50                   	push   eax
c0020272:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020277:	50                   	push   eax
c0020278:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002027d:	50                   	push   eax
c002027e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020282:	e8 cb fe ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020287:	83 c4 14             	add    esp,0x14
c002028a:	c3                   	ret    
c002028b:	90                   	nop

c002028c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002028c:	6a 18                	push   0x18
c002028e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020293:	50                   	push   eax
c0020294:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020299:	50                   	push   eax
c002029a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002029f:	50                   	push   eax
c00202a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00202a4:	e8 a9 fe ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202a9:	83 c4 14             	add    esp,0x14
c00202ac:	0f b6 c4             	movzx  eax,ah
c00202af:	c3                   	ret    

c00202b0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00202b0:	55                   	push   ebp
c00202b1:	57                   	push   edi
c00202b2:	56                   	push   esi
c00202b3:	53                   	push   ebx
c00202b4:	50                   	push   eax
c00202b5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00202b9:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00202be:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00202c3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00202c8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00202cf:	8d 43 12             	lea    eax,[ebx+0x12]
c00202d2:	83 c3 10             	add    ebx,0x10
c00202d5:	0f b6 c0             	movzx  eax,al
c00202d8:	0f b6 db             	movzx  ebx,bl
c00202db:	50                   	push   eax
c00202dc:	51                   	push   ecx
c00202dd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00202e1:	57                   	push   edi
c00202e2:	55                   	push   ebp
c00202e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202e7:	e8 66 fe ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202ec:	53                   	push   ebx
c00202ed:	89 c6                	mov    esi,eax
c00202ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00202f3:	c1 e6 10             	shl    esi,0x10
c00202f6:	51                   	push   ecx
c00202f7:	57                   	push   edi
c00202f8:	55                   	push   ebp
c00202f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202fd:	e8 50 fe ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020302:	83 c4 2c             	add    esp,0x2c
c0020305:	0f b7 c0             	movzx  eax,ax
c0020308:	5b                   	pop    ebx
c0020309:	09 f0                	or     eax,esi
c002030b:	5e                   	pop    esi
c002030c:	5f                   	pop    edi
c002030d:	5d                   	pop    ebp
c002030e:	c3                   	ret    
c002030f:	90                   	nop

c0020310 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0020310:	53                   	push   ebx
c0020311:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020316:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002031b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002031f:	c1 e1 10             	shl    ecx,0x10
c0020322:	25 fc 00 00 00       	and    eax,0xfc
c0020327:	09 c1                	or     ecx,eax
c0020329:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002032e:	c1 e0 08             	shl    eax,0x8
c0020331:	09 c1                	or     ecx,eax
c0020333:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020338:	c1 e0 0b             	shl    eax,0xb
c002033b:	09 c1                	or     ecx,eax
c002033d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020343:	89 c8                	mov    eax,ecx
c0020345:	ef                   	out    dx,eax
c0020346:	ba fc 0c 00 00       	mov    edx,0xcfc
c002034b:	ed                   	in     eax,dx
c002034c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020351:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020356:	74 0a                	je     c0020362 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020358:	0f b7 d8             	movzx  ebx,ax
c002035b:	89 d0                	mov    eax,edx
c002035d:	c1 e0 10             	shl    eax,0x10
c0020360:	eb 05                	jmp    c0020367 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020362:	66 31 c0             	xor    ax,ax
c0020365:	89 d3                	mov    ebx,edx
c0020367:	09 c3                	or     ebx,eax
c0020369:	ba f8 0c 00 00       	mov    edx,0xcf8
c002036e:	89 c8                	mov    eax,ecx
c0020370:	ef                   	out    dx,eax
c0020371:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020376:	89 d8                	mov    eax,ebx
c0020378:	ef                   	out    dx,eax
c0020379:	5b                   	pop    ebx
c002037a:	c3                   	ret    
c002037b:	90                   	nop

c002037c <PCI::checkBus(unsigned char)>:
c002037c:	56                   	push   esi
c002037d:	53                   	push   ebx
c002037e:	31 db                	xor    ebx,ebx
c0020380:	51                   	push   ecx
c0020381:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020386:	52                   	push   edx
c0020387:	53                   	push   ebx
c0020388:	43                   	inc    ebx
c0020389:	56                   	push   esi
c002038a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038e:	e8 29 03 00 00       	call   c00206bc <PCI::checkDevice(unsigned char, unsigned char)>
c0020393:	83 c4 10             	add    esp,0x10
c0020396:	83 fb 20             	cmp    ebx,0x20
c0020399:	75 eb                	jne    c0020386 <PCI::checkBus(unsigned char)+0xa>
c002039b:	58                   	pop    eax
c002039c:	5b                   	pop    ebx
c002039d:	5e                   	pop    esi
c002039e:	c3                   	ret    
c002039f:	90                   	nop

c00203a0 <PCI::foundDevice(PCIDeviceInfo)>:
c00203a0:	55                   	push   ebp
c00203a1:	57                   	push   edi
c00203a2:	56                   	push   esi
c00203a3:	53                   	push   ebx
c00203a4:	83 ec 1c             	sub    esp,0x1c
c00203a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00203ab:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00203b1:	0f 84 51 01 00 00    	je     c0020508 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c00203b7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00203bb:	66 81 f9 06 04       	cmp    cx,0x406
c00203c0:	75 2c                	jne    c00203ee <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00203c2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00203c7:	50                   	push   eax
c00203c8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00203cd:	50                   	push   eax
c00203ce:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00203d3:	50                   	push   eax
c00203d4:	56                   	push   esi
c00203d5:	e8 b2 fe ff ff       	call   c002028c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00203da:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00203de:	0f b6 c0             	movzx  eax,al
c00203e1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00203e5:	83 c4 2c             	add    esp,0x2c
c00203e8:	5b                   	pop    ebx
c00203e9:	5e                   	pop    esi
c00203ea:	5f                   	pop    edi
c00203eb:	5d                   	pop    ebp
c00203ec:	eb 8e                	jmp    c002037c <PCI::checkBus(unsigned char)>
c00203ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00203f2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00203f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203fc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020400:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0020404:	88 d3                	mov    bl,dl
c0020406:	85 c0                	test   eax,eax
c0020408:	74 33                	je     c002043d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002040a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002040d:	85 d2                	test   edx,edx
c002040f:	74 28                	je     c0020439 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020411:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0020417:	31 ef                	xor    edi,ebp
c0020419:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002041f:	75 18                	jne    c0020439 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020421:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020425:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002042b:	75 0c                	jne    c0020439 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002042d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020433:	0f 84 cf 00 00 00    	je     c0020508 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020439:	8b 00                	mov    eax,DWORD PTR [eax]
c002043b:	eb c9                	jmp    c0020406 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002043d:	66 81 f9 01 06       	cmp    cx,0x601
c0020442:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020446:	75 18                	jne    c0020460 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c0020448:	83 ec 0c             	sub    esp,0xc
c002044b:	68 58 01 00 00       	push   0x158
c0020450:	e8 13 1d ff ff       	call   c0012168 <operator new(unsigned long)>
c0020455:	59                   	pop    ecx
c0020456:	89 c5                	mov    ebp,eax
c0020458:	5f                   	pop    edi
c0020459:	68 88 8c 02 c0       	push   0xc0028c88
c002045e:	eb 7d                	jmp    c00204dd <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020460:	66 81 f9 01 01       	cmp    cx,0x101
c0020465:	75 60                	jne    c00204c7 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020467:	83 ec 0c             	sub    esp,0xc
c002046a:	68 70 02 00 00       	push   0x270
c002046f:	e8 f4 1c ff ff       	call   c0012168 <operator new(unsigned long)>
c0020474:	89 04 24             	mov    DWORD PTR [esp],eax
c0020477:	89 c5                	mov    ebp,eax
c0020479:	e8 02 03 00 00       	call   c0020780 <IDE::IDE()>
c002047e:	58                   	pop    eax
c002047f:	5a                   	pop    edx
c0020480:	55                   	push   ebp
c0020481:	56                   	push   esi
c0020482:	e8 db 31 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0020487:	83 ec 1c             	sub    esp,0x1c
c002048a:	b9 09 00 00 00       	mov    ecx,0x9
c002048f:	fc                   	cld    
c0020490:	89 e7                	mov    edi,esp
c0020492:	89 de                	mov    esi,ebx
c0020494:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020496:	55                   	push   ebp
c0020497:	e8 a0 30 ff ff       	call   c001353c <Device::preOpenPCI(PCIDeviceInfo)>
c002049c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002049f:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00204a3:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00204ab:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00204b3:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00204bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204be:	83 c4 4c             	add    esp,0x4c
c00204c1:	5b                   	pop    ebx
c00204c2:	5e                   	pop    esi
c00204c3:	5f                   	pop    edi
c00204c4:	5d                   	pop    ebp
c00204c5:	ff e0                	jmp    eax
c00204c7:	83 ec 0c             	sub    esp,0xc
c00204ca:	68 58 01 00 00       	push   0x158
c00204cf:	e8 94 1c ff ff       	call   c0012168 <operator new(unsigned long)>
c00204d4:	59                   	pop    ecx
c00204d5:	89 c5                	mov    ebp,eax
c00204d7:	5f                   	pop    edi
c00204d8:	68 a7 8c 02 c0       	push   0xc0028ca7
c00204dd:	55                   	push   ebp
c00204de:	e8 6b 34 ff ff       	call   c001394e <DriverlessDevice::DriverlessDevice(char const*)>
c00204e3:	58                   	pop    eax
c00204e4:	5a                   	pop    edx
c00204e5:	55                   	push   ebp
c00204e6:	56                   	push   esi
c00204e7:	e8 76 31 ff ff       	call   c0013662 <Device::addChild(Device*)>
c00204ec:	b9 09 00 00 00       	mov    ecx,0x9
c00204f1:	fc                   	cld    
c00204f2:	89 df                	mov    edi,ebx
c00204f4:	89 de                	mov    esi,ebx
c00204f6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00204f8:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00204fc:	83 c4 2c             	add    esp,0x2c
c00204ff:	5b                   	pop    ebx
c0020500:	5e                   	pop    esi
c0020501:	5f                   	pop    edi
c0020502:	5d                   	pop    ebp
c0020503:	e9 34 30 ff ff       	jmp    c001353c <Device::preOpenPCI(PCIDeviceInfo)>
c0020508:	83 c4 1c             	add    esp,0x1c
c002050b:	5b                   	pop    ebx
c002050c:	5e                   	pop    esi
c002050d:	5f                   	pop    edi
c002050e:	5d                   	pop    ebp
c002050f:	c3                   	ret    

c0020510 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020510:	55                   	push   ebp
c0020511:	57                   	push   edi
c0020512:	56                   	push   esi
c0020513:	53                   	push   ebx
c0020514:	83 ec 5c             	sub    esp,0x5c
c0020517:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002051b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002051f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020523:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0020528:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002052c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020530:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020539:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002053e:	6a 0c                	push   0xc
c0020540:	55                   	push   ebp
c0020541:	53                   	push   ebx
c0020542:	57                   	push   edi
c0020543:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002054a:	e8 03 fc ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002054f:	55                   	push   ebp
c0020550:	53                   	push   ebx
c0020551:	57                   	push   edi
c0020552:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020559:	e8 82 fc ff ff       	call   c00201e0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002055e:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020563:	83 c4 24             	add    esp,0x24
c0020566:	55                   	push   ebp
c0020567:	53                   	push   ebx
c0020568:	57                   	push   edi
c0020569:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002056d:	e8 f8 fc ff ff       	call   c002026a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020572:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020576:	6a 3c                	push   0x3c
c0020578:	55                   	push   ebp
c0020579:	53                   	push   ebx
c002057a:	57                   	push   edi
c002057b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020582:	e8 cb fb ff ff       	call   c0020152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020587:	0f b6 c4             	movzx  eax,ah
c002058a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002058e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020592:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020596:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c002059b:	83 c4 24             	add    esp,0x24
c002059e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00205a4:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c00205ab:	74 6c                	je     c0020619 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00205ad:	31 f6                	xor    esi,esi
c00205af:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c00205b5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205bb:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00205c1:	7e 56                	jle    c0020619 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00205c3:	8d 14 f2             	lea    edx,[edx+esi*8]
c00205c6:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00205cd:	39 cb                	cmp    ebx,ecx
c00205cf:	75 45                	jne    c0020616 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205d1:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00205d8:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00205dc:	75 38                	jne    c0020616 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205de:	83 ec 0c             	sub    esp,0xc
c00205e1:	68 c1 8c 02 c0       	push   0xc0028cc1
c00205e6:	e8 6c 1c ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00205eb:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c00205f1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205f7:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00205ff:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0020603:	52                   	push   edx
c0020604:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020608:	53                   	push   ebx
c0020609:	68 e6 8c 02 c0       	push   0xc0028ce6
c002060e:	e8 44 1c ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0020613:	83 c4 20             	add    esp,0x20
c0020616:	46                   	inc    esi
c0020617:	eb 96                	jmp    c00205af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0020619:	31 d2                	xor    edx,edx
c002061b:	83 ec 0c             	sub    esp,0xc
c002061e:	55                   	push   ebp
c002061f:	53                   	push   ebx
c0020620:	57                   	push   edi
c0020621:	52                   	push   edx
c0020622:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020626:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002062d:	e8 7e fc ff ff       	call   c00202b0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020632:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020636:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002063a:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002063e:	42                   	inc    edx
c002063f:	83 c4 20             	add    esp,0x20
c0020642:	83 fa 06             	cmp    edx,0x6
c0020645:	75 d4                	jne    c002061b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020647:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002064b:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002064f:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020653:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020657:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002065b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002065f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020664:	86 e0                	xchg   al,ah
c0020666:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002066b:	55                   	push   ebp
c002066c:	53                   	push   ebx
c002066d:	57                   	push   edi
c002066e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020672:	e8 ad fb ff ff       	call   c0020224 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020677:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002067b:	55                   	push   ebp
c002067c:	53                   	push   ebx
c002067d:	57                   	push   edi
c002067e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020685:	e8 10 fb ff ff       	call   c002019a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002068a:	83 ec 0c             	sub    esp,0xc
c002068d:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020692:	b9 09 00 00 00       	mov    ecx,0x9
c0020697:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002069b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002069f:	fc                   	cld    
c00206a0:	89 e7                	mov    edi,esp
c00206a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00206a4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00206ab:	e8 f0 fc ff ff       	call   c00203a0 <PCI::foundDevice(PCIDeviceInfo)>
c00206b0:	81 c4 8c 00 00 00    	add    esp,0x8c
c00206b6:	5b                   	pop    ebx
c00206b7:	5e                   	pop    esi
c00206b8:	5f                   	pop    edi
c00206b9:	5d                   	pop    ebp
c00206ba:	c3                   	ret    
c00206bb:	90                   	nop

c00206bc <PCI::checkDevice(unsigned char, unsigned char)>:
c00206bc:	55                   	push   ebp
c00206bd:	57                   	push   edi
c00206be:	56                   	push   esi
c00206bf:	53                   	push   ebx
c00206c0:	83 ec 0c             	sub    esp,0xc
c00206c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00206c7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00206cc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00206d1:	6a 00                	push   0x0
c00206d3:	56                   	push   esi
c00206d4:	57                   	push   edi
c00206d5:	55                   	push   ebp
c00206d6:	e8 bf fa ff ff       	call   c002019a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206db:	6a 00                	push   0x0
c00206dd:	56                   	push   esi
c00206de:	57                   	push   edi
c00206df:	55                   	push   ebp
c00206e0:	e8 2b fe ff ff       	call   c0020510 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00206e5:	83 c4 20             	add    esp,0x20
c00206e8:	6a 00                	push   0x0
c00206ea:	56                   	push   esi
c00206eb:	57                   	push   edi
c00206ec:	55                   	push   ebp
c00206ed:	e8 ca fa ff ff       	call   c00201bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00206f2:	83 c4 10             	add    esp,0x10
c00206f5:	84 c0                	test   al,al
c00206f7:	79 27                	jns    c0020720 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00206f9:	bb 01 00 00 00       	mov    ebx,0x1
c00206fe:	53                   	push   ebx
c00206ff:	56                   	push   esi
c0020700:	57                   	push   edi
c0020701:	55                   	push   ebp
c0020702:	e8 93 fa ff ff       	call   c002019a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020707:	83 c4 10             	add    esp,0x10
c002070a:	66 40                	inc    ax
c002070c:	74 0c                	je     c002071a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002070e:	53                   	push   ebx
c002070f:	56                   	push   esi
c0020710:	57                   	push   edi
c0020711:	55                   	push   ebp
c0020712:	e8 f9 fd ff ff       	call   c0020510 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020717:	83 c4 10             	add    esp,0x10
c002071a:	43                   	inc    ebx
c002071b:	83 fb 08             	cmp    ebx,0x8
c002071e:	75 de                	jne    c00206fe <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020720:	83 c4 0c             	add    esp,0xc
c0020723:	5b                   	pop    ebx
c0020724:	5e                   	pop    esi
c0020725:	5f                   	pop    edi
c0020726:	5d                   	pop    ebp
c0020727:	c3                   	ret    

c0020728 <PCI::detect()>:
c0020728:	56                   	push   esi
c0020729:	53                   	push   ebx
c002072a:	53                   	push   ebx
c002072b:	31 db                	xor    ebx,ebx
c002072d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020731:	6a 00                	push   0x0
c0020733:	6a 00                	push   0x0
c0020735:	6a 00                	push   0x0
c0020737:	56                   	push   esi
c0020738:	e8 7f fa ff ff       	call   c00201bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002073d:	83 c4 10             	add    esp,0x10
c0020740:	a8 80                	test   al,0x80
c0020742:	75 21                	jne    c0020765 <PCI::detect()+0x3d>
c0020744:	51                   	push   ecx
c0020745:	51                   	push   ecx
c0020746:	6a 00                	push   0x0
c0020748:	56                   	push   esi
c0020749:	e8 2e fc ff ff       	call   c002037c <PCI::checkBus(unsigned char)>
c002074e:	83 c4 10             	add    esp,0x10
c0020751:	eb 24                	jmp    c0020777 <PCI::detect()+0x4f>
c0020753:	52                   	push   edx
c0020754:	52                   	push   edx
c0020755:	53                   	push   ebx
c0020756:	43                   	inc    ebx
c0020757:	56                   	push   esi
c0020758:	e8 1f fc ff ff       	call   c002037c <PCI::checkBus(unsigned char)>
c002075d:	83 c4 10             	add    esp,0x10
c0020760:	83 fb 08             	cmp    ebx,0x8
c0020763:	74 12                	je     c0020777 <PCI::detect()+0x4f>
c0020765:	53                   	push   ebx
c0020766:	6a 00                	push   0x0
c0020768:	6a 00                	push   0x0
c002076a:	56                   	push   esi
c002076b:	e8 2a fa ff ff       	call   c002019a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020770:	83 c4 10             	add    esp,0x10
c0020773:	66 40                	inc    ax
c0020775:	74 dc                	je     c0020753 <PCI::detect()+0x2b>
c0020777:	58                   	pop    eax
c0020778:	5b                   	pop    ebx
c0020779:	5e                   	pop    esi
c002077a:	c3                   	ret    
c002077b:	90                   	nop

c002077c <IDE::close(int, int, void*)>:
c002077c:	83 c8 ff             	or     eax,0xffffffff
c002077f:	c3                   	ret    

c0020780 <IDE::IDE()>:
c0020780:	83 ec 0c             	sub    esp,0xc
c0020783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020787:	83 ec 08             	sub    esp,0x8
c002078a:	68 30 8d 02 c0       	push   0xc0028d30
c002078f:	50                   	push   eax
c0020790:	e8 4f 32 ff ff       	call   c00139e4 <HardDiskController::HardDiskController(char const*)>
c0020795:	83 c4 10             	add    esp,0x10
c0020798:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c002079d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207a1:	89 10                	mov    DWORD PTR [eax],edx
c00207a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207a7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00207ae:	90                   	nop
c00207af:	83 c4 0c             	add    esp,0xc
c00207b2:	c3                   	ret    
c00207b3:	90                   	nop

c00207b4 <IDE::prepareInterrupt(unsigned char)>:
c00207b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00207bd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00207c5:	c3                   	ret    

c00207c6 <selectDrive(unsigned char, unsigned char)>:
c00207c6:	c3                   	ret    
c00207c7:	90                   	nop

c00207c8 <IDE::getBase(unsigned char)>:
c00207c8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00207cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207d1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00207d9:	c3                   	ret    

c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00207da:	55                   	push   ebp
c00207db:	57                   	push   edi
c00207dc:	56                   	push   esi
c00207dd:	53                   	push   ebx
c00207de:	83 ec 1c             	sub    esp,0x1c
c00207e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00207e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00207e9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00207ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00207f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00207f4:	80 f9 03             	cmp    cl,0x3
c00207f7:	77 51                	ja     c002084a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00207f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207fd:	0f b6 f2             	movzx  esi,dl
c0020800:	0f b6 db             	movzx  ebx,bl
c0020803:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020806:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002080a:	83 ca 80             	or     edx,0xffffff80
c002080d:	0f b6 d2             	movzx  edx,dl
c0020810:	52                   	push   edx
c0020811:	6a 0c                	push   0xc
c0020813:	56                   	push   esi
c0020814:	57                   	push   edi
c0020815:	e8 c0 ff ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002081a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002081f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020823:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0020827:	ee                   	out    dx,al
c0020828:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002082d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0020831:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020835:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020839:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020841:	83 c4 2c             	add    esp,0x2c
c0020844:	5b                   	pop    ebx
c0020845:	5e                   	pop    esi
c0020846:	5f                   	pop    edi
c0020847:	5d                   	pop    ebp
c0020848:	eb 90                	jmp    c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002084a:	80 fb 07             	cmp    bl,0x7
c002084d:	77 12                	ja     c0020861 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002084f:	0f b6 d2             	movzx  edx,dl
c0020852:	0f b6 db             	movzx  ebx,bl
c0020855:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002085d:	89 da                	mov    edx,ebx
c002085f:	eb 2f                	jmp    c0020890 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020861:	80 fb 0d             	cmp    bl,0xd
c0020864:	77 13                	ja     c0020879 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0020866:	0f b6 d2             	movzx  edx,dl
c0020869:	0f b6 db             	movzx  ebx,bl
c002086c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020873:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0020877:	eb 17                	jmp    c0020890 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020879:	80 fb 15             	cmp    bl,0x15
c002087c:	77 13                	ja     c0020891 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002087e:	0f b6 d2             	movzx  edx,dl
c0020881:	0f b6 db             	movzx  ebx,bl
c0020884:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002088c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0020890:	ee                   	out    dx,al
c0020891:	83 c4 1c             	add    esp,0x1c
c0020894:	5b                   	pop    ebx
c0020895:	5e                   	pop    esi
c0020896:	5f                   	pop    edi
c0020897:	5d                   	pop    ebp
c0020898:	c3                   	ret    
c0020899:	90                   	nop

c002089a <IDE::read(unsigned char, unsigned char)>:
c002089a:	55                   	push   ebp
c002089b:	57                   	push   edi
c002089c:	56                   	push   esi
c002089d:	53                   	push   ebx
c002089e:	83 ec 1c             	sub    esp,0x1c
c00208a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00208a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00208a9:	8d 43 f8             	lea    eax,[ebx-0x8]
c00208ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00208b0:	3c 03                	cmp    al,0x3
c00208b2:	77 43                	ja     c00208f7 <IDE::read(unsigned char, unsigned char)+0x5d>
c00208b4:	0f b6 f2             	movzx  esi,dl
c00208b7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00208ba:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00208be:	83 c8 80             	or     eax,0xffffff80
c00208c1:	0f b6 c0             	movzx  eax,al
c00208c4:	50                   	push   eax
c00208c5:	6a 0c                	push   0xc
c00208c7:	56                   	push   esi
c00208c8:	57                   	push   edi
c00208c9:	e8 0c ff ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208ce:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00208d3:	0f b6 c3             	movzx  eax,bl
c00208d6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00208da:	ec                   	in     al,dx
c00208db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00208df:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00208e4:	52                   	push   edx
c00208e5:	6a 0c                	push   0xc
c00208e7:	56                   	push   esi
c00208e8:	57                   	push   edi
c00208e9:	e8 ec fe ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208ee:	83 c4 20             	add    esp,0x20
c00208f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00208f5:	eb 49                	jmp    c0020940 <IDE::read(unsigned char, unsigned char)+0xa6>
c00208f7:	80 fb 07             	cmp    bl,0x7
c00208fa:	77 12                	ja     c002090e <IDE::read(unsigned char, unsigned char)+0x74>
c00208fc:	0f b6 d2             	movzx  edx,dl
c00208ff:	0f b6 c3             	movzx  eax,bl
c0020902:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002090a:	89 c2                	mov    edx,eax
c002090c:	eb 31                	jmp    c002093f <IDE::read(unsigned char, unsigned char)+0xa5>
c002090e:	80 fb 0d             	cmp    bl,0xd
c0020911:	77 13                	ja     c0020926 <IDE::read(unsigned char, unsigned char)+0x8c>
c0020913:	0f b6 d2             	movzx  edx,dl
c0020916:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002091d:	0f b6 d3             	movzx  edx,bl
c0020920:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020924:	eb 19                	jmp    c002093f <IDE::read(unsigned char, unsigned char)+0xa5>
c0020926:	31 c0                	xor    eax,eax
c0020928:	80 fb 15             	cmp    bl,0x15
c002092b:	77 13                	ja     c0020940 <IDE::read(unsigned char, unsigned char)+0xa6>
c002092d:	0f b6 d2             	movzx  edx,dl
c0020930:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020938:	0f b6 d3             	movzx  edx,bl
c002093b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002093f:	ec                   	in     al,dx
c0020940:	83 c4 1c             	add    esp,0x1c
c0020943:	5b                   	pop    ebx
c0020944:	5e                   	pop    esi
c0020945:	5f                   	pop    edi
c0020946:	5d                   	pop    ebp
c0020947:	c3                   	ret    

c0020948 <IDE::waitInterrupt(unsigned char)>:
c0020948:	55                   	push   ebp
c0020949:	57                   	push   edi
c002094a:	56                   	push   esi
c002094b:	53                   	push   ebx
c002094c:	31 db                	xor    ebx,ebx
c002094e:	83 ec 0c             	sub    esp,0xc
c0020951:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020955:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002095a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020962:	89 e8                	mov    eax,ebp
c0020964:	84 c0                	test   al,al
c0020966:	75 34                	jne    c002099c <IDE::waitInterrupt(unsigned char)+0x54>
c0020968:	52                   	push   edx
c0020969:	6a 0c                	push   0xc
c002096b:	56                   	push   esi
c002096c:	57                   	push   edi
c002096d:	e8 28 ff ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020972:	83 c4 10             	add    esp,0x10
c0020975:	a8 01                	test   al,0x1
c0020977:	75 2b                	jne    c00209a4 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020979:	f6 c3 04             	test   bl,0x4
c002097c:	75 16                	jne    c0020994 <IDE::waitInterrupt(unsigned char)+0x4c>
c002097e:	83 fb 32             	cmp    ebx,0x32
c0020981:	7e 11                	jle    c0020994 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020983:	50                   	push   eax
c0020984:	50                   	push   eax
c0020985:	6a 00                	push   0x0
c0020987:	68 80 96 98 00       	push   0x989680
c002098c:	e8 fd b4 ff ff       	call   c001be8e <nanoSleep(unsigned long long)>
c0020991:	83 c4 10             	add    esp,0x10
c0020994:	83 fb 3c             	cmp    ebx,0x3c
c0020997:	74 0b                	je     c00209a4 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020999:	43                   	inc    ebx
c002099a:	eb be                	jmp    c002095a <IDE::waitInterrupt(unsigned char)+0x12>
c002099c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00209a4:	83 c4 0c             	add    esp,0xc
c00209a7:	89 e8                	mov    eax,ebp
c00209a9:	5b                   	pop    ebx
c00209aa:	5e                   	pop    esi
c00209ab:	5f                   	pop    edi
c00209ac:	5d                   	pop    ebp
c00209ad:	c3                   	ret    

c00209ae <ideChannel0IRQHandler(regs*, void*)>:
c00209ae:	83 ec 10             	sub    esp,0x10
c00209b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209b5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00209bc:	6a 07                	push   0x7
c00209be:	6a 00                	push   0x0
c00209c0:	50                   	push   eax
c00209c1:	e8 d4 fe ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c00209c6:	83 c4 1c             	add    esp,0x1c
c00209c9:	c3                   	ret    

c00209ca <ideChannel1IRQHandler(regs*, void*)>:
c00209ca:	83 ec 10             	sub    esp,0x10
c00209cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209d1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00209d8:	6a 07                	push   0x7
c00209da:	6a 01                	push   0x1
c00209dc:	50                   	push   eax
c00209dd:	e8 b8 fe ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c00209e2:	83 c4 1c             	add    esp,0x1c
c00209e5:	c3                   	ret    

c00209e6 <IDE::enableIRQs(unsigned char, bool)>:
c00209e6:	57                   	push   edi
c00209e7:	56                   	push   esi
c00209e8:	be 04 00 00 00       	mov    esi,0x4
c00209ed:	53                   	push   ebx
c00209ee:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00209f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209f7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00209fc:	0f 94 c0             	sete   al
c00209ff:	d1 e0                	shl    eax,1
c0020a01:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0020a08:	0f b6 c0             	movzx  eax,al
c0020a0b:	50                   	push   eax
c0020a0c:	6a 0c                	push   0xc
c0020a0e:	57                   	push   edi
c0020a0f:	53                   	push   ebx
c0020a10:	e8 c5 fd ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020a15:	83 c4 10             	add    esp,0x10
c0020a18:	50                   	push   eax
c0020a19:	6a 0c                	push   0xc
c0020a1b:	57                   	push   edi
c0020a1c:	53                   	push   ebx
c0020a1d:	e8 78 fe ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020a22:	83 c4 10             	add    esp,0x10
c0020a25:	4e                   	dec    esi
c0020a26:	75 f0                	jne    c0020a18 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020a28:	5b                   	pop    ebx
c0020a29:	5e                   	pop    esi
c0020a2a:	5f                   	pop    edi
c0020a2b:	c3                   	ret    

c0020a2c <IDE::open(int, int, void*)>:
c0020a2c:	55                   	push   ebp
c0020a2d:	57                   	push   edi
c0020a2e:	56                   	push   esi
c0020a2f:	53                   	push   ebx
c0020a30:	83 ec 1c             	sub    esp,0x1c
c0020a33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020a37:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020a40:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020a49:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020a50:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020a57:	0f 85 b0 02 00 00    	jne    c0020d0d <IDE::open(int, int, void*)+0x2e1>
c0020a5d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020a63:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020a67:	83 e0 7f             	and    eax,0x7f
c0020a6a:	3c 05                	cmp    al,0x5
c0020a6c:	74 04                	je     c0020a72 <IDE::open(int, int, void*)+0x46>
c0020a6e:	3c 0f                	cmp    al,0xf
c0020a70:	75 32                	jne    c0020aa4 <IDE::open(int, int, void*)+0x78>
c0020a72:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020a78:	83 e0 fc             	and    eax,0xfffffffc
c0020a7b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020a82:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020a88:	83 e0 fc             	and    eax,0xfffffffc
c0020a8b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020a92:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020a98:	83 e0 fc             	and    eax,0xfffffffc
c0020a9b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020aa2:	eb 14                	jmp    c0020ab8 <IDE::open(int, int, void*)+0x8c>
c0020aa4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020aae:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020ab8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020abf:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020ac6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020aca:	89 c6                	mov    esi,eax
c0020acc:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020ad1:	c1 e6 10             	shl    esi,0x10
c0020ad4:	89 e8                	mov    eax,ebp
c0020ad6:	89 fa                	mov    edx,edi
c0020ad8:	c1 e0 0b             	shl    eax,0xb
c0020adb:	09 f0                	or     eax,esi
c0020add:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020ae4:	c1 e6 08             	shl    esi,0x8
c0020ae7:	09 c6                	or     esi,eax
c0020ae9:	89 f0                	mov    eax,esi
c0020aeb:	0d 08 00 00 80       	or     eax,0x80000008
c0020af0:	ef                   	out    dx,eax
c0020af1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020af6:	89 ca                	mov    edx,ecx
c0020af8:	ed                   	in     eax,dx
c0020af9:	c1 e8 10             	shr    eax,0x10
c0020afc:	3d ff ff 00 00       	cmp    eax,0xffff
c0020b01:	0f 84 f5 00 00 00    	je     c0020bfc <IDE::open(int, int, void*)+0x1d0>
c0020b07:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020b0d:	89 fa                	mov    edx,edi
c0020b0f:	89 f0                	mov    eax,esi
c0020b11:	ef                   	out    dx,eax
c0020b12:	b0 fe                	mov    al,0xfe
c0020b14:	89 ca                	mov    edx,ecx
c0020b16:	ee                   	out    dx,al
c0020b17:	89 f0                	mov    eax,esi
c0020b19:	89 fa                	mov    edx,edi
c0020b1b:	ef                   	out    dx,eax
c0020b1c:	89 ca                	mov    edx,ecx
c0020b1e:	ed                   	in     eax,dx
c0020b1f:	3c fe                	cmp    al,0xfe
c0020b21:	0f 85 a9 00 00 00    	jne    c0020bd0 <IDE::open(int, int, void*)+0x1a4>
c0020b27:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0020b2d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020b34:	74 33                	je     c0020b69 <IDE::open(int, int, void*)+0x13d>
c0020b36:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020b3c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020b40:	40                   	inc    eax
c0020b41:	83 ec 0c             	sub    esp,0xc
c0020b44:	0f b6 c0             	movzx  eax,al
c0020b47:	50                   	push   eax
c0020b48:	55                   	push   ebp
c0020b49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b4d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020b53:	51                   	push   ecx
c0020b54:	e8 fb 62 ff ff       	call   c0016e54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020b59:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020b5e:	83 c4 1c             	add    esp,0x1c
c0020b61:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020b67:	eb 0a                	jmp    c0020b73 <IDE::open(int, int, void*)+0x147>
c0020b69:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020b73:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020b7a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020b81:	c1 e1 10             	shl    ecx,0x10
c0020b84:	c1 e0 08             	shl    eax,0x8
c0020b87:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020b8c:	09 c1                	or     ecx,eax
c0020b8e:	89 fa                	mov    edx,edi
c0020b90:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020b97:	c1 e0 0b             	shl    eax,0xb
c0020b9a:	09 c1                	or     ecx,eax
c0020b9c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020ba2:	89 c8                	mov    eax,ecx
c0020ba4:	ef                   	out    dx,eax
c0020ba5:	be fc 0c 00 00       	mov    esi,0xcfc
c0020baa:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020bb0:	89 f2                	mov    edx,esi
c0020bb2:	ee                   	out    dx,al
c0020bb3:	89 c8                	mov    eax,ecx
c0020bb5:	89 fa                	mov    edx,edi
c0020bb7:	ef                   	out    dx,eax
c0020bb8:	89 f2                	mov    edx,esi
c0020bba:	ed                   	in     eax,dx
c0020bbb:	0f b6 c0             	movzx  eax,al
c0020bbe:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020bc4:	74 46                	je     c0020c0c <IDE::open(int, int, void*)+0x1e0>
c0020bc6:	83 ec 0c             	sub    esp,0xc
c0020bc9:	68 48 8d 02 c0       	push   0xc0028d48
c0020bce:	eb 34                	jmp    c0020c04 <IDE::open(int, int, void*)+0x1d8>
c0020bd0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020bd9:	75 17                	jne    c0020bf2 <IDE::open(int, int, void*)+0x1c6>
c0020bdb:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020be0:	74 07                	je     c0020be9 <IDE::open(int, int, void*)+0x1bd>
c0020be2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020be7:	75 09                	jne    c0020bf2 <IDE::open(int, int, void*)+0x1c6>
c0020be9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020bf0:	eb 1a                	jmp    c0020c0c <IDE::open(int, int, void*)+0x1e0>
c0020bf2:	83 ec 0c             	sub    esp,0xc
c0020bf5:	68 50 8d 02 c0       	push   0xc0028d50
c0020bfa:	eb 08                	jmp    c0020c04 <IDE::open(int, int, void*)+0x1d8>
c0020bfc:	83 ec 0c             	sub    esp,0xc
c0020bff:	68 81 8d 02 c0       	push   0xc0028d81
c0020c04:	e8 ea 7d ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0020c09:	83 c4 10             	add    esp,0x10
c0020c0c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020c13:	79 1a                	jns    c0020c2f <IDE::open(int, int, void*)+0x203>
c0020c15:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020c1b:	83 e0 fc             	and    eax,0xfffffffc
c0020c1e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020c25:	83 c0 08             	add    eax,0x8
c0020c28:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020c2f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020c35:	89 c2                	mov    edx,eax
c0020c37:	83 e2 0f             	and    edx,0xf
c0020c3a:	66 83 fa 08          	cmp    dx,0x8
c0020c3e:	75 0a                	jne    c0020c4a <IDE::open(int, int, void*)+0x21e>
c0020c40:	83 e8 02             	sub    eax,0x2
c0020c43:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020c4a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020c50:	89 c2                	mov    edx,eax
c0020c52:	83 e2 0f             	and    edx,0xf
c0020c55:	66 83 fa 08          	cmp    dx,0x8
c0020c59:	75 0a                	jne    c0020c65 <IDE::open(int, int, void*)+0x239>
c0020c5b:	83 e8 02             	sub    eax,0x2
c0020c5e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020c65:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020c6c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020c73:	89 d0                	mov    eax,edx
c0020c75:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020c78:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020c7c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020c80:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020c83:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020c88:	0f b6 c9             	movzx  ecx,cl
c0020c8b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020c92:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020c95:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020c99:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020c9d:	8d 50 02             	lea    edx,[eax+0x2]
c0020ca0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020ca5:	0f b6 d2             	movzx  edx,dl
c0020ca8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020cae:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cb1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020cb5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020cb9:	8d 48 03             	lea    ecx,[eax+0x3]
c0020cbc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020cc1:	0f b6 c9             	movzx  ecx,cl
c0020cc4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020cca:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020ccd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020cd1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020cd5:	8d 50 04             	lea    edx,[eax+0x4]
c0020cd8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020cde:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020ce3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020cea:	66 85 f6             	test   si,si
c0020ced:	74 3e                	je     c0020d2d <IDE::open(int, int, void*)+0x301>
c0020cef:	0f b6 d2             	movzx  edx,dl
c0020cf2:	83 c0 05             	add    eax,0x5
c0020cf5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cf8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020cfc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020d00:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020d06:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020d0b:	eb 20                	jmp    c0020d2d <IDE::open(int, int, void*)+0x301>
c0020d0d:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020d17:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020d21:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020d28:	e9 02 ff ff ff       	jmp    c0020c2f <IDE::open(int, int, void*)+0x203>
c0020d2d:	52                   	push   edx
c0020d2e:	52                   	push   edx
c0020d2f:	6a 00                	push   0x0
c0020d31:	53                   	push   ebx
c0020d32:	e8 7d fa ff ff       	call   c00207b4 <IDE::prepareInterrupt(unsigned char)>
c0020d37:	59                   	pop    ecx
c0020d38:	5e                   	pop    esi
c0020d39:	6a 01                	push   0x1
c0020d3b:	53                   	push   ebx
c0020d3c:	e8 73 fa ff ff       	call   c00207b4 <IDE::prepareInterrupt(unsigned char)>
c0020d41:	83 c4 0c             	add    esp,0xc
c0020d44:	6a 00                	push   0x0
c0020d46:	6a 00                	push   0x0
c0020d48:	53                   	push   ebx
c0020d49:	e8 98 fc ff ff       	call   c00209e6 <IDE::enableIRQs(unsigned char, bool)>
c0020d4e:	83 c4 0c             	add    esp,0xc
c0020d51:	6a 00                	push   0x0
c0020d53:	6a 01                	push   0x1
c0020d55:	53                   	push   ebx
c0020d56:	e8 8b fc ff ff       	call   c00209e6 <IDE::enableIRQs(unsigned char, bool)>
c0020d5b:	83 c4 10             	add    esp,0x10
c0020d5e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020d65:	74 40                	je     c0020da7 <IDE::open(int, int, void*)+0x37b>
c0020d67:	83 ec 0c             	sub    esp,0xc
c0020d6a:	68 ab 8d 02 c0       	push   0xc0028dab
c0020d6f:	e8 e3 14 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0020d74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d77:	6a 01                	push   0x1
c0020d79:	68 ae 09 02 c0       	push   0xc00209ae
c0020d7e:	6a 0e                	push   0xe
c0020d80:	53                   	push   ebx
c0020d81:	e8 30 28 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d86:	83 c4 14             	add    esp,0x14
c0020d89:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020d8f:	53                   	push   ebx
c0020d90:	6a 01                	push   0x1
c0020d92:	68 ca 09 02 c0       	push   0xc00209ca
c0020d97:	6a 0f                	push   0xf
c0020d99:	53                   	push   ebx
c0020d9a:	e8 17 28 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d9f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020da5:	eb 4a                	jmp    c0020df1 <IDE::open(int, int, void*)+0x3c5>
c0020da7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020db1:	50                   	push   eax
c0020db2:	6a 0f                	push   0xf
c0020db4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020dba:	68 c7 8d 02 c0       	push   0xc0028dc7
c0020dbf:	e8 93 14 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0020dc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020dc7:	6a 00                	push   0x0
c0020dc9:	68 ae 09 02 c0       	push   0xc00209ae
c0020dce:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020dd4:	53                   	push   ebx
c0020dd5:	e8 dc 27 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020dda:	83 c4 14             	add    esp,0x14
c0020ddd:	53                   	push   ebx
c0020dde:	6a 00                	push   0x0
c0020de0:	68 ca 09 02 c0       	push   0xc00209ca
c0020de5:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020deb:	53                   	push   ebx
c0020dec:	e8 c5 27 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020df1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020df3:	83 c4 20             	add    esp,0x20
c0020df6:	83 ec 0c             	sub    esp,0xc
c0020df9:	53                   	push   ebx
c0020dfa:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020dfd:	83 c4 0c             	add    esp,0xc
c0020e00:	6a 07                	push   0x7
c0020e02:	6a 00                	push   0x0
c0020e04:	53                   	push   ebx
c0020e05:	e8 90 fa ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020e0a:	83 c4 0c             	add    esp,0xc
c0020e0d:	6a 07                	push   0x7
c0020e0f:	6a 01                	push   0x1
c0020e11:	53                   	push   ebx
c0020e12:	e8 83 fa ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020e17:	83 c4 0c             	add    esp,0xc
c0020e1a:	6a 01                	push   0x1
c0020e1c:	6a 00                	push   0x0
c0020e1e:	53                   	push   ebx
c0020e1f:	e8 c2 fb ff ff       	call   c00209e6 <IDE::enableIRQs(unsigned char, bool)>
c0020e24:	83 c4 0c             	add    esp,0xc
c0020e27:	6a 01                	push   0x1
c0020e29:	6a 01                	push   0x1
c0020e2b:	53                   	push   ebx
c0020e2c:	e8 b5 fb ff ff       	call   c00209e6 <IDE::enableIRQs(unsigned char, bool)>
c0020e31:	83 c4 2c             	add    esp,0x2c
c0020e34:	31 c0                	xor    eax,eax
c0020e36:	5b                   	pop    ebx
c0020e37:	5e                   	pop    esi
c0020e38:	5f                   	pop    edi
c0020e39:	5d                   	pop    ebp
c0020e3a:	c3                   	ret    
c0020e3b:	90                   	nop

c0020e3c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020e3c:	55                   	push   ebp
c0020e3d:	57                   	push   edi
c0020e3e:	56                   	push   esi
c0020e3f:	53                   	push   ebx
c0020e40:	83 ec 1c             	sub    esp,0x1c
c0020e43:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020e4b:	8d 50 f8             	lea    edx,[eax-0x8]
c0020e4e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020e52:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020e56:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e5a:	80 fa 03             	cmp    dl,0x3
c0020e5d:	77 5d                	ja     c0020ebc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020e5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020e63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e67:	0f b6 db             	movzx  ebx,bl
c0020e6a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020e6d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020e71:	83 ca 80             	or     edx,0xffffff80
c0020e74:	0f b6 d2             	movzx  edx,dl
c0020e77:	52                   	push   edx
c0020e78:	6a 0c                	push   0xc
c0020e7a:	53                   	push   ebx
c0020e7b:	56                   	push   esi
c0020e7c:	e8 59 f9 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e81:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020e86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e8a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020e8e:	0f b6 c0             	movzx  eax,al
c0020e91:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020e95:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020e97:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020e9c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020ea0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020ea4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020ea8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020eb0:	83 c4 2c             	add    esp,0x2c
c0020eb3:	5b                   	pop    ebx
c0020eb4:	5e                   	pop    esi
c0020eb5:	5f                   	pop    edi
c0020eb6:	5d                   	pop    ebp
c0020eb7:	e9 1e f9 ff ff       	jmp    c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020ebc:	3c 07                	cmp    al,0x7
c0020ebe:	77 10                	ja     c0020ed0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020ec0:	0f b6 db             	movzx  ebx,bl
c0020ec3:	0f b6 d0             	movzx  edx,al
c0020ec6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020ece:	eb 2d                	jmp    c0020efd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ed0:	3c 0d                	cmp    al,0xd
c0020ed2:	77 13                	ja     c0020ee7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020ed4:	0f b6 db             	movzx  ebx,bl
c0020ed7:	0f b6 c0             	movzx  eax,al
c0020eda:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020ee1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020ee5:	eb 16                	jmp    c0020efd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ee7:	3c 15                	cmp    al,0x15
c0020ee9:	77 14                	ja     c0020eff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020eeb:	0f b6 db             	movzx  ebx,bl
c0020eee:	0f b6 c0             	movzx  eax,al
c0020ef1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020ef9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020efd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020eff:	83 c4 1c             	add    esp,0x1c
c0020f02:	5b                   	pop    ebx
c0020f03:	5e                   	pop    esi
c0020f04:	5f                   	pop    edi
c0020f05:	5d                   	pop    ebp
c0020f06:	c3                   	ret    
c0020f07:	90                   	nop

c0020f08 <IDE::detect()>:
c0020f08:	55                   	push   ebp
c0020f09:	57                   	push   edi
c0020f0a:	56                   	push   esi
c0020f0b:	53                   	push   ebx
c0020f0c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020f12:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020f19:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0020f20:	0f 85 be 02 00 00    	jne    c00211e4 <IDE::detect()+0x2dc>
c0020f26:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020f2d:	31 f6                	xor    esi,esi
c0020f2f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f37:	31 ed                	xor    ebp,ebp
c0020f39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f3d:	c1 e0 06             	shl    eax,0x6
c0020f40:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020f48:	89 e8                	mov    eax,ebp
c0020f4a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f4e:	c1 e0 04             	shl    eax,0x4
c0020f51:	83 c8 a0             	or     eax,0xffffffa0
c0020f54:	0f b6 c0             	movzx  eax,al
c0020f57:	50                   	push   eax
c0020f58:	6a 06                	push   0x6
c0020f5a:	56                   	push   esi
c0020f5b:	53                   	push   ebx
c0020f5c:	e8 79 f8 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f61:	83 c4 0c             	add    esp,0xc
c0020f64:	6a 0c                	push   0xc
c0020f66:	56                   	push   esi
c0020f67:	53                   	push   ebx
c0020f68:	e8 2d f9 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020f6d:	83 c4 0c             	add    esp,0xc
c0020f70:	6a 0c                	push   0xc
c0020f72:	56                   	push   esi
c0020f73:	53                   	push   ebx
c0020f74:	e8 21 f9 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020f79:	83 c4 0c             	add    esp,0xc
c0020f7c:	6a 0c                	push   0xc
c0020f7e:	56                   	push   esi
c0020f7f:	53                   	push   ebx
c0020f80:	e8 15 f9 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020f85:	83 c4 0c             	add    esp,0xc
c0020f88:	6a 0c                	push   0xc
c0020f8a:	56                   	push   esi
c0020f8b:	53                   	push   ebx
c0020f8c:	e8 09 f9 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020f91:	68 ec 00 00 00       	push   0xec
c0020f96:	6a 07                	push   0x7
c0020f98:	56                   	push   esi
c0020f99:	53                   	push   ebx
c0020f9a:	e8 3b f8 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f9f:	83 c4 1c             	add    esp,0x1c
c0020fa2:	6a 0c                	push   0xc
c0020fa4:	56                   	push   esi
c0020fa5:	53                   	push   ebx
c0020fa6:	e8 ef f8 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020fab:	83 c4 0c             	add    esp,0xc
c0020fae:	6a 0c                	push   0xc
c0020fb0:	56                   	push   esi
c0020fb1:	53                   	push   ebx
c0020fb2:	e8 e3 f8 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020fb7:	83 c4 0c             	add    esp,0xc
c0020fba:	6a 0c                	push   0xc
c0020fbc:	56                   	push   esi
c0020fbd:	53                   	push   ebx
c0020fbe:	e8 d7 f8 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020fc3:	83 c4 0c             	add    esp,0xc
c0020fc6:	6a 0c                	push   0xc
c0020fc8:	56                   	push   esi
c0020fc9:	53                   	push   ebx
c0020fca:	e8 cb f8 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020fcf:	83 c4 0c             	add    esp,0xc
c0020fd2:	6a 0c                	push   0xc
c0020fd4:	56                   	push   esi
c0020fd5:	53                   	push   ebx
c0020fd6:	e8 bf f8 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020fdb:	83 c4 10             	add    esp,0x10
c0020fde:	84 c0                	test   al,al
c0020fe0:	0f 84 8b 01 00 00    	je     c0021171 <IDE::detect()+0x269>
c0020fe6:	31 ff                	xor    edi,edi
c0020fe8:	50                   	push   eax
c0020fe9:	6a 0c                	push   0xc
c0020feb:	56                   	push   esi
c0020fec:	53                   	push   ebx
c0020fed:	e8 a8 f8 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0020ff2:	83 c4 10             	add    esp,0x10
c0020ff5:	a8 01                	test   al,0x1
c0020ff7:	0f 85 8e 01 00 00    	jne    c002118b <IDE::detect()+0x283>
c0020ffd:	84 c0                	test   al,al
c0020fff:	78 04                	js     c0021005 <IDE::detect()+0xfd>
c0021001:	a8 08                	test   al,0x8
c0021003:	75 27                	jne    c002102c <IDE::detect()+0x124>
c0021005:	47                   	inc    edi
c0021006:	81 ff 17 01 00 00    	cmp    edi,0x117
c002100c:	7e da                	jle    c0020fe8 <IDE::detect()+0xe0>
c002100e:	50                   	push   eax
c002100f:	50                   	push   eax
c0021010:	6a 00                	push   0x0
c0021012:	68 40 4b 4c 00       	push   0x4c4b40
c0021017:	e8 72 ae ff ff       	call   c001be8e <nanoSleep(unsigned long long)>
c002101c:	83 c4 10             	add    esp,0x10
c002101f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021025:	75 c1                	jne    c0020fe8 <IDE::detect()+0xe0>
c0021027:	e9 5f 01 00 00       	jmp    c002118b <IDE::detect()+0x283>
c002102c:	31 c9                	xor    ecx,ecx
c002102e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0021032:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021036:	83 ec 0c             	sub    esp,0xc
c0021039:	68 80 00 00 00       	push   0x80
c002103e:	57                   	push   edi
c002103f:	6a 00                	push   0x0
c0021041:	56                   	push   esi
c0021042:	53                   	push   ebx
c0021043:	e8 f4 fd ff ff       	call   c0020e3c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021048:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002104d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021051:	89 d1                	mov    ecx,edx
c0021053:	c1 e0 06             	shl    eax,0x6
c0021056:	01 d8                	add    eax,ebx
c0021058:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002105f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021066:	89 f2                	mov    edx,esi
c0021068:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002106e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021072:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021078:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002107c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021083:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002108b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0021092:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002109a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00210a0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00210a7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00210ad:	8d 54 24 58          	lea    edx,[esp+0x58]
c00210b1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00210b5:	83 c4 20             	add    esp,0x20
c00210b8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00210bb:	83 c0 02             	add    eax,0x2
c00210be:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00210c4:	83 c7 02             	add    edi,0x2
c00210c7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00210ca:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00210d0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00210d4:	75 e2                	jne    c00210b8 <IDE::detect()+0x1b0>
c00210d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210da:	c1 e0 06             	shl    eax,0x6
c00210dd:	01 d8                	add    eax,ebx
c00210df:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00210e5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00210ec:	66 c1 ea 09          	shr    dx,0x9
c00210f0:	83 e2 01             	and    edx,0x1
c00210f3:	84 c9                	test   cl,cl
c00210f5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00210fb:	75 2f                	jne    c002112c <IDE::detect()+0x224>
c00210fd:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0021103:	85 c0                	test   eax,eax
c0021105:	74 66                	je     c002116d <IDE::detect()+0x265>
c0021107:	50                   	push   eax
c0021108:	55                   	push   ebp
c0021109:	56                   	push   esi
c002110a:	68 e3 8d 02 c0       	push   0xc0028de3
c002110f:	e8 43 11 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021114:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002111b:	e8 48 10 ff ff       	call   c0012168 <operator new(unsigned long)>
c0021120:	89 c7                	mov    edi,eax
c0021122:	89 04 24             	mov    DWORD PTR [esp],eax
c0021125:	e8 e8 02 00 00       	call   c0021412 <ATA::ATA()>
c002112a:	eb 28                	jmp    c0021154 <IDE::detect()+0x24c>
c002112c:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021132:	55                   	push   ebp
c0021133:	56                   	push   esi
c0021134:	68 12 8e 02 c0       	push   0xc0028e12
c0021139:	e8 19 11 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002113e:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021145:	e8 1e 10 ff ff       	call   c0012168 <operator new(unsigned long)>
c002114a:	89 c7                	mov    edi,eax
c002114c:	89 04 24             	mov    DWORD PTR [esp],eax
c002114f:	e8 ee 08 00 00       	call   c0021a42 <ATAPI::ATAPI()>
c0021154:	5a                   	pop    edx
c0021155:	59                   	pop    ecx
c0021156:	57                   	push   edi
c0021157:	53                   	push   ebx
c0021158:	e8 05 25 ff ff       	call   c0013662 <Device::addChild(Device*)>
c002115d:	8b 07                	mov    eax,DWORD PTR [edi]
c002115f:	53                   	push   ebx
c0021160:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021164:	6a 00                	push   0x0
c0021166:	57                   	push   edi
c0021167:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002116a:	83 c4 20             	add    esp,0x20
c002116d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021171:	4d                   	dec    ebp
c0021172:	74 0a                	je     c002117e <IDE::detect()+0x276>
c0021174:	bd 01 00 00 00       	mov    ebp,0x1
c0021179:	e9 bb fd ff ff       	jmp    c0020f39 <IDE::detect()+0x31>
c002117e:	4e                   	dec    esi
c002117f:	74 63                	je     c00211e4 <IDE::detect()+0x2dc>
c0021181:	be 01 00 00 00       	mov    esi,0x1
c0021186:	e9 ac fd ff ff       	jmp    c0020f37 <IDE::detect()+0x2f>
c002118b:	50                   	push   eax
c002118c:	6a 04                	push   0x4
c002118e:	56                   	push   esi
c002118f:	53                   	push   ebx
c0021190:	e8 05 f7 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0021195:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021199:	83 c4 0c             	add    esp,0xc
c002119c:	6a 05                	push   0x5
c002119e:	56                   	push   esi
c002119f:	53                   	push   ebx
c00211a0:	e8 f5 f6 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c00211a5:	83 c4 10             	add    esp,0x10
c00211a8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00211ac:	80 fa 14             	cmp    dl,0x14
c00211af:	75 04                	jne    c00211b5 <IDE::detect()+0x2ad>
c00211b1:	3c eb                	cmp    al,0xeb
c00211b3:	eb 07                	jmp    c00211bc <IDE::detect()+0x2b4>
c00211b5:	3c 96                	cmp    al,0x96
c00211b7:	75 b8                	jne    c0021171 <IDE::detect()+0x269>
c00211b9:	80 fa 69             	cmp    dl,0x69
c00211bc:	75 b3                	jne    c0021171 <IDE::detect()+0x269>
c00211be:	68 a1 00 00 00       	push   0xa1
c00211c3:	6a 07                	push   0x7
c00211c5:	56                   	push   esi
c00211c6:	53                   	push   ebx
c00211c7:	e8 0e f6 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00211cc:	5f                   	pop    edi
c00211cd:	58                   	pop    eax
c00211ce:	6a 00                	push   0x0
c00211d0:	68 40 42 0f 00       	push   0xf4240
c00211d5:	e8 b4 ac ff ff       	call   c001be8e <nanoSleep(unsigned long long)>
c00211da:	83 c4 10             	add    esp,0x10
c00211dd:	b1 01                	mov    cl,0x1
c00211df:	e9 4a fe ff ff       	jmp    c002102e <IDE::detect()+0x126>
c00211e4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00211ea:	5b                   	pop    ebx
c00211eb:	5e                   	pop    esi
c00211ec:	5f                   	pop    edi
c00211ed:	5d                   	pop    ebp
c00211ee:	c3                   	ret    
c00211ef:	90                   	nop

c00211f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00211f0:	55                   	push   ebp
c00211f1:	57                   	push   edi
c00211f2:	56                   	push   esi
c00211f3:	53                   	push   ebx
c00211f4:	83 ec 1c             	sub    esp,0x1c
c00211f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00211fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00211ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021203:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021207:	88 c3                	mov    bl,al
c0021209:	84 c0                	test   al,al
c002120b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002120f:	0f 84 67 01 00 00    	je     c002137c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0021215:	83 ec 0c             	sub    esp,0xc
c0021218:	68 43 8e 02 c0       	push   0xc0028e43
c002121d:	e8 35 10 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021222:	83 c4 10             	add    esp,0x10
c0021225:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021229:	3c 01                	cmp    al,0x1
c002122b:	75 17                	jne    c0021244 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002122d:	83 ec 0c             	sub    esp,0xc
c0021230:	b3 13                	mov    bl,0x13
c0021232:	68 4f 8e 02 c0       	push   0xc0028e4f
c0021237:	e8 1b 10 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002123c:	83 c4 10             	add    esp,0x10
c002123f:	e9 25 01 00 00       	jmp    c0021369 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021244:	3c 02                	cmp    al,0x2
c0021246:	0f 85 ef 00 00 00    	jne    c002133b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002124c:	d1 e6                	shl    esi,1
c002124e:	09 ee                	or     esi,ebp
c0021250:	52                   	push   edx
c0021251:	89 f0                	mov    eax,esi
c0021253:	6a 01                	push   0x1
c0021255:	0f b6 f0             	movzx  esi,al
c0021258:	c1 e6 06             	shl    esi,0x6
c002125b:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021263:	50                   	push   eax
c0021264:	57                   	push   edi
c0021265:	e8 30 f6 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c002126a:	83 c4 10             	add    esp,0x10
c002126d:	89 c6                	mov    esi,eax
c002126f:	a8 01                	test   al,0x1
c0021271:	74 12                	je     c0021285 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021273:	83 ec 0c             	sub    esp,0xc
c0021276:	b3 07                	mov    bl,0x7
c0021278:	68 64 8e 02 c0       	push   0xc0028e64
c002127d:	e8 d5 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021282:	83 c4 10             	add    esp,0x10
c0021285:	f7 c6 02 00 00 00    	test   esi,0x2
c002128b:	74 12                	je     c002129f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002128d:	83 ec 0c             	sub    esp,0xc
c0021290:	b3 03                	mov    bl,0x3
c0021292:	68 82 8e 02 c0       	push   0xc0028e82
c0021297:	e8 bb 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002129c:	83 c4 10             	add    esp,0x10
c002129f:	f7 c6 04 00 00 00    	test   esi,0x4
c00212a5:	74 12                	je     c00212b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00212a7:	83 ec 0c             	sub    esp,0xc
c00212aa:	b3 14                	mov    bl,0x14
c00212ac:	68 a2 8e 02 c0       	push   0xc0028ea2
c00212b1:	e8 a1 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00212b6:	83 c4 10             	add    esp,0x10
c00212b9:	f7 c6 08 00 00 00    	test   esi,0x8
c00212bf:	74 12                	je     c00212d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00212c1:	83 ec 0c             	sub    esp,0xc
c00212c4:	b3 03                	mov    bl,0x3
c00212c6:	68 82 8e 02 c0       	push   0xc0028e82
c00212cb:	e8 87 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00212d0:	83 c4 10             	add    esp,0x10
c00212d3:	f7 c6 10 00 00 00    	test   esi,0x10
c00212d9:	74 12                	je     c00212ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00212db:	83 ec 0c             	sub    esp,0xc
c00212de:	b3 15                	mov    bl,0x15
c00212e0:	68 ba 8e 02 c0       	push   0xc0028eba
c00212e5:	e8 6d 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00212ea:	83 c4 10             	add    esp,0x10
c00212ed:	f7 c6 20 00 00 00    	test   esi,0x20
c00212f3:	74 12                	je     c0021307 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00212f5:	83 ec 0c             	sub    esp,0xc
c00212f8:	b3 03                	mov    bl,0x3
c00212fa:	68 82 8e 02 c0       	push   0xc0028e82
c00212ff:	e8 53 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021304:	83 c4 10             	add    esp,0x10
c0021307:	f7 c6 40 00 00 00    	test   esi,0x40
c002130d:	74 12                	je     c0021321 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002130f:	83 ec 0c             	sub    esp,0xc
c0021312:	b3 16                	mov    bl,0x16
c0021314:	68 d4 8e 02 c0       	push   0xc0028ed4
c0021319:	e8 39 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002131e:	83 c4 10             	add    esp,0x10
c0021321:	89 f0                	mov    eax,esi
c0021323:	84 c0                	test   al,al
c0021325:	79 42                	jns    c0021369 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021327:	83 ec 0c             	sub    esp,0xc
c002132a:	b3 0d                	mov    bl,0xd
c002132c:	68 f5 8e 02 c0       	push   0xc0028ef5
c0021331:	e8 21 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021336:	83 c4 10             	add    esp,0x10
c0021339:	eb 2e                	jmp    c0021369 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002133b:	3c 03                	cmp    al,0x3
c002133d:	75 14                	jne    c0021353 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002133f:	83 ec 0c             	sub    esp,0xc
c0021342:	b3 17                	mov    bl,0x17
c0021344:	68 09 8f 02 c0       	push   0xc0028f09
c0021349:	e8 09 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002134e:	83 c4 10             	add    esp,0x10
c0021351:	eb 16                	jmp    c0021369 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021353:	3c 04                	cmp    al,0x4
c0021355:	75 12                	jne    c0021369 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021357:	83 ec 0c             	sub    esp,0xc
c002135a:	b3 08                	mov    bl,0x8
c002135c:	68 1f 8f 02 c0       	push   0xc0028f1f
c0021361:	e8 f1 0e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021366:	83 c4 10             	add    esp,0x10
c0021369:	50                   	push   eax
c002136a:	50                   	push   eax
c002136b:	0f b6 c3             	movzx  eax,bl
c002136e:	50                   	push   eax
c002136f:	68 37 8f 02 c0       	push   0xc0028f37
c0021374:	e8 de 0e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021379:	83 c4 10             	add    esp,0x10
c002137c:	83 c4 1c             	add    esp,0x1c
c002137f:	88 d8                	mov    al,bl
c0021381:	5b                   	pop    ebx
c0021382:	5e                   	pop    esi
c0021383:	5f                   	pop    edi
c0021384:	5d                   	pop    ebp
c0021385:	c3                   	ret    

c0021386 <IDE::polling(unsigned char, unsigned int)>:
c0021386:	57                   	push   edi
c0021387:	56                   	push   esi
c0021388:	53                   	push   ebx
c0021389:	bb 04 00 00 00       	mov    ebx,0x4
c002138e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021392:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021397:	52                   	push   edx
c0021398:	6a 0c                	push   0xc
c002139a:	56                   	push   esi
c002139b:	57                   	push   edi
c002139c:	e8 f9 f4 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c00213a1:	83 c4 10             	add    esp,0x10
c00213a4:	4b                   	dec    ebx
c00213a5:	75 f0                	jne    c0021397 <IDE::polling(unsigned char, unsigned int)+0x11>
c00213a7:	bb a0 86 01 00       	mov    ebx,0x186a0
c00213ac:	50                   	push   eax
c00213ad:	6a 0c                	push   0xc
c00213af:	56                   	push   esi
c00213b0:	57                   	push   edi
c00213b1:	e8 e4 f4 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c00213b6:	83 c4 10             	add    esp,0x10
c00213b9:	a8 01                	test   al,0x1
c00213bb:	74 12                	je     c00213cf <IDE::polling(unsigned char, unsigned int)+0x49>
c00213bd:	83 ec 0c             	sub    esp,0xc
c00213c0:	68 51 8f 02 c0       	push   0xc0028f51
c00213c5:	e8 8d 0e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00213ca:	83 c4 10             	add    esp,0x10
c00213cd:	eb 17                	jmp    c00213e6 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213cf:	a8 20                	test   al,0x20
c00213d1:	75 0f                	jne    c00213e2 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00213d3:	4b                   	dec    ebx
c00213d4:	74 10                	je     c00213e6 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213d6:	84 c0                	test   al,al
c00213d8:	78 d2                	js     c00213ac <IDE::polling(unsigned char, unsigned int)+0x26>
c00213da:	a8 08                	test   al,0x8
c00213dc:	74 ce                	je     c00213ac <IDE::polling(unsigned char, unsigned int)+0x26>
c00213de:	31 c0                	xor    eax,eax
c00213e0:	eb 06                	jmp    c00213e8 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213e2:	b0 01                	mov    al,0x1
c00213e4:	eb 02                	jmp    c00213e8 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213e6:	b0 02                	mov    al,0x2
c00213e8:	5b                   	pop    ebx
c00213e9:	5e                   	pop    esi
c00213ea:	5f                   	pop    edi
c00213eb:	c3                   	ret    

c00213ec <ATA::close(int, int, void*)>:
c00213ec:	83 ec 0c             	sub    esp,0xc
c00213ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00213f9:	85 c0                	test   eax,eax
c00213fb:	74 0c                	je     c0021409 <ATA::close(int, int, void*)+0x1d>
c00213fd:	83 ec 0c             	sub    esp,0xc
c0021400:	8b 10                	mov    edx,DWORD PTR [eax]
c0021402:	50                   	push   eax
c0021403:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021406:	83 c4 10             	add    esp,0x10
c0021409:	31 c0                	xor    eax,eax
c002140b:	83 c4 0c             	add    esp,0xc
c002140e:	c3                   	ret    
c002140f:	90                   	nop

c0021410 <ATA::powerSaving(PowerSavingLevel)>:
c0021410:	c3                   	ret    
c0021411:	90                   	nop

c0021412 <ATA::ATA()>:
c0021412:	83 ec 0c             	sub    esp,0xc
c0021415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021419:	83 ec 04             	sub    esp,0x4
c002141c:	68 00 02 00 00       	push   0x200
c0021421:	68 94 8f 02 c0       	push   0xc0028f94
c0021426:	50                   	push   eax
c0021427:	e8 3c 26 ff ff       	call   c0013a68 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002142c:	83 c4 10             	add    esp,0x10
c002142f:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c0021434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021438:	89 10                	mov    DWORD PTR [eax],edx
c002143a:	90                   	nop
c002143b:	83 c4 0c             	add    esp,0xc
c002143e:	c3                   	ret    
c002143f:	90                   	nop

c0021440 <ATA::flush(bool)>:
c0021440:	53                   	push   ebx
c0021441:	83 ec 08             	sub    esp,0x8
c0021444:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0021449:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002144d:	19 c0                	sbb    eax,eax
c002144f:	83 e0 fd             	and    eax,0xfffffffd
c0021452:	05 ea 00 00 00       	add    eax,0xea
c0021457:	50                   	push   eax
c0021458:	6a 07                	push   0x7
c002145a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021461:	50                   	push   eax
c0021462:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021468:	e8 6d f3 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002146d:	83 c4 0c             	add    esp,0xc
c0021470:	6a 00                	push   0x0
c0021472:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021479:	50                   	push   eax
c002147a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021480:	e8 01 ff ff ff       	call   c0021386 <IDE::polling(unsigned char, unsigned int)>
c0021485:	83 c4 18             	add    esp,0x18
c0021488:	5b                   	pop    ebx
c0021489:	c3                   	ret    

c002148a <ATA::readyForCommand()>:
c002148a:	56                   	push   esi
c002148b:	53                   	push   ebx
c002148c:	31 db                	xor    ebx,ebx
c002148e:	50                   	push   eax
c002148f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021493:	50                   	push   eax
c0021494:	6a 0c                	push   0xc
c0021496:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002149d:	50                   	push   eax
c002149e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00214a4:	e8 f1 f3 ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c00214a9:	83 c4 10             	add    esp,0x10
c00214ac:	a8 88                	test   al,0x88
c00214ae:	74 23                	je     c00214d3 <ATA::readyForCommand()+0x49>
c00214b0:	43                   	inc    ebx
c00214b1:	83 fb 63             	cmp    ebx,0x63
c00214b4:	7e dd                	jle    c0021493 <ATA::readyForCommand()+0x9>
c00214b6:	51                   	push   ecx
c00214b7:	51                   	push   ecx
c00214b8:	6a 00                	push   0x0
c00214ba:	68 40 42 0f 00       	push   0xf4240
c00214bf:	e8 ca a9 ff ff       	call   c001be8e <nanoSleep(unsigned long long)>
c00214c4:	83 c4 10             	add    esp,0x10
c00214c7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00214cd:	75 c4                	jne    c0021493 <ATA::readyForCommand()+0x9>
c00214cf:	31 c0                	xor    eax,eax
c00214d1:	eb 02                	jmp    c00214d5 <ATA::readyForCommand()+0x4b>
c00214d3:	b0 01                	mov    al,0x1
c00214d5:	5a                   	pop    edx
c00214d6:	5b                   	pop    ebx
c00214d7:	5e                   	pop    esi
c00214d8:	c3                   	ret    
c00214d9:	90                   	nop

c00214da <ATA::access(unsigned long long, int, void*, bool)>:
c00214da:	55                   	push   ebp
c00214db:	57                   	push   edi
c00214dc:	56                   	push   esi
c00214dd:	53                   	push   ebx
c00214de:	83 ec 2c             	sub    esp,0x2c
c00214e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00214e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00214e9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00214ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00214f1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00214f5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00214f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00214fd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021503:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021507:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002150d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021511:	c1 e0 06             	shl    eax,0x6
c0021514:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002151c:	74 5d                	je     c002157b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002151e:	89 fa                	mov    edx,edi
c0021520:	89 f0                	mov    eax,esi
c0021522:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0021526:	c1 ea 1c             	shr    edx,0x1c
c0021529:	89 d1                	mov    ecx,edx
c002152b:	09 c1                	or     ecx,eax
c002152d:	74 25                	je     c0021554 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002152f:	31 ed                	xor    ebp,ebp
c0021531:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0021538:	89 fa                	mov    edx,edi
c002153a:	89 f0                	mov    eax,esi
c002153c:	0f ad d0             	shrd   eax,edx,cl
c002153f:	d3 ea                	shr    edx,cl
c0021541:	f6 c1 20             	test   cl,0x20
c0021544:	74 02                	je     c0021548 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021546:	89 d0                	mov    eax,edx
c0021548:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002154c:	45                   	inc    ebp
c002154d:	83 fd 06             	cmp    ebp,0x6
c0021550:	75 df                	jne    c0021531 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021552:	eb 76                	jmp    c00215ca <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021554:	89 f0                	mov    eax,esi
c0021556:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002155b:	89 fa                	mov    edx,edi
c002155d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021564:	0f ac d0 10          	shrd   eax,edx,0x10
c0021568:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002156d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021571:	c1 ee 18             	shr    esi,0x18
c0021574:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0021579:	eb 56                	jmp    c00215d1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002157b:	6a 00                	push   0x0
c002157d:	6a 3f                	push   0x3f
c002157f:	57                   	push   edi
c0021580:	56                   	push   esi
c0021581:	e8 d6 1e 00 00       	call   c002345c <__umoddi3>
c0021586:	83 c4 10             	add    esp,0x10
c0021589:	40                   	inc    eax
c002158a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002158e:	6a 00                	push   0x0
c0021590:	68 f0 03 00 00       	push   0x3f0
c0021595:	57                   	push   edi
c0021596:	56                   	push   esi
c0021597:	e8 c0 1d 00 00       	call   c002335c <__udivdi3>
c002159c:	83 c4 10             	add    esp,0x10
c002159f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00215a4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00215ab:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00215b0:	6a 00                	push   0x0
c00215b2:	6a 3f                	push   0x3f
c00215b4:	57                   	push   edi
c00215b5:	56                   	push   esi
c00215b6:	e8 a1 1d 00 00       	call   c002335c <__udivdi3>
c00215bb:	83 c4 10             	add    esp,0x10
c00215be:	89 c6                	mov    esi,eax
c00215c0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00215c5:	83 e6 0f             	and    esi,0xf
c00215c8:	eb 07                	jmp    c00215d1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00215ca:	31 f6                	xor    esi,esi
c00215cc:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00215d1:	bf 01 00 00 00       	mov    edi,0x1
c00215d6:	50                   	push   eax
c00215d7:	6a 00                	push   0x0
c00215d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00215e0:	50                   	push   eax
c00215e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215e5:	e8 fc f3 ff ff       	call   c00209e6 <IDE::enableIRQs(unsigned char, bool)>
c00215ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00215ed:	e8 98 fe ff ff       	call   c002148a <ATA::readyForCommand()>
c00215f2:	83 c4 10             	add    esp,0x10
c00215f5:	84 c0                	test   al,al
c00215f7:	0f 84 50 02 00 00    	je     c002184d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00215fd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0021603:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021609:	c1 e0 04             	shl    eax,0x4
c002160c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0021613:	09 c6                	or     esi,eax
c0021615:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002161a:	75 05                	jne    c0021621 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002161c:	83 ce a0             	or     esi,0xffffffa0
c002161f:	eb 03                	jmp    c0021624 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0021621:	83 ce e0             	or     esi,0xffffffe0
c0021624:	89 f0                	mov    eax,esi
c0021626:	0f b6 f0             	movzx  esi,al
c0021629:	56                   	push   esi
c002162a:	6a 06                	push   0x6
c002162c:	51                   	push   ecx
c002162d:	52                   	push   edx
c002162e:	e8 a7 f1 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021633:	83 c4 10             	add    esp,0x10
c0021636:	6a 00                	push   0x0
c0021638:	6a 01                	push   0x1
c002163a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021641:	50                   	push   eax
c0021642:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021648:	e8 8d f1 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002164d:	83 c4 10             	add    esp,0x10
c0021650:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021655:	75 6e                	jne    c00216c5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0021657:	6a 00                	push   0x0
c0021659:	6a 08                	push   0x8
c002165b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021662:	50                   	push   eax
c0021663:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021669:	e8 6c f1 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002166e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021673:	50                   	push   eax
c0021674:	6a 09                	push   0x9
c0021676:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002167d:	50                   	push   eax
c002167e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021684:	e8 51 f1 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021689:	83 c4 20             	add    esp,0x20
c002168c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0021691:	50                   	push   eax
c0021692:	6a 0a                	push   0xa
c0021694:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002169b:	50                   	push   eax
c002169c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216a2:	e8 33 f1 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216a7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00216ac:	50                   	push   eax
c00216ad:	6a 0b                	push   0xb
c00216af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216b6:	50                   	push   eax
c00216b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216bd:	e8 18 f1 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216c2:	83 c4 20             	add    esp,0x20
c00216c5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00216ca:	50                   	push   eax
c00216cb:	6a 02                	push   0x2
c00216cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216d4:	50                   	push   eax
c00216d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216db:	e8 fa f0 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216e0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00216e5:	50                   	push   eax
c00216e6:	6a 03                	push   0x3
c00216e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216ef:	50                   	push   eax
c00216f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216f6:	e8 df f0 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216fb:	83 c4 20             	add    esp,0x20
c00216fe:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0021703:	50                   	push   eax
c0021704:	6a 04                	push   0x4
c0021706:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002170d:	50                   	push   eax
c002170e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021714:	e8 c1 f0 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021719:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002171e:	50                   	push   eax
c002171f:	6a 05                	push   0x5
c0021721:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021728:	50                   	push   eax
c0021729:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002172f:	e8 a6 f0 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021734:	83 c4 20             	add    esp,0x20
c0021737:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002173c:	0f 94 c0             	sete   al
c002173f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021744:	74 09                	je     c002174f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0021746:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002174d:	eb 07                	jmp    c0021756 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002174f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0021756:	0f b6 c0             	movzx  eax,al
c0021759:	50                   	push   eax
c002175a:	6a 07                	push   0x7
c002175c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021763:	50                   	push   eax
c0021764:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002176a:	e8 6b f0 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002176f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021773:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021777:	83 c4 10             	add    esp,0x10
c002177a:	85 f6                	test   esi,esi
c002177c:	0f 84 ac 00 00 00    	je     c002182e <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021782:	50                   	push   eax
c0021783:	6a 01                	push   0x1
c0021785:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002178c:	50                   	push   eax
c002178d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021793:	e8 ee fb ff ff       	call   c0021386 <IDE::polling(unsigned char, unsigned int)>
c0021798:	83 c4 10             	add    esp,0x10
c002179b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00217a1:	84 c0                	test   al,al
c00217a3:	74 20                	je     c00217c5 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00217a5:	0f b6 f8             	movzx  edi,al
c00217a8:	0f b6 d2             	movzx  edx,dl
c00217ab:	57                   	push   edi
c00217ac:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00217b3:	50                   	push   eax
c00217b4:	52                   	push   edx
c00217b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217bb:	e8 30 fa ff ff       	call   c00211f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00217c0:	e9 85 00 00 00       	jmp    c002184a <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00217c5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00217ca:	74 41                	je     c002180d <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00217cc:	31 c9                	xor    ecx,ecx
c00217ce:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00217d2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217d6:	50                   	push   eax
c00217d7:	50                   	push   eax
c00217d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217df:	50                   	push   eax
c00217e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217e6:	e8 dd ef ff ff       	call   c00207c8 <IDE::getBase(unsigned char)>
c00217eb:	89 c2                	mov    edx,eax
c00217ed:	89 e8                	mov    eax,ebp
c00217ef:	66 ef                	out    dx,ax
c00217f1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00217f5:	83 c4 10             	add    esp,0x10
c00217f8:	41                   	inc    ecx
c00217f9:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00217ff:	75 cd                	jne    c00217ce <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0021801:	4e                   	dec    esi
c0021802:	81 c7 00 02 00 00    	add    edi,0x200
c0021808:	e9 6d ff ff ff       	jmp    c002177a <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c002180d:	0f b6 d2             	movzx  edx,dl
c0021810:	51                   	push   ecx
c0021811:	51                   	push   ecx
c0021812:	52                   	push   edx
c0021813:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021819:	e8 aa ef ff ff       	call   c00207c8 <IDE::getBase(unsigned char)>
c002181e:	b9 00 01 00 00       	mov    ecx,0x100
c0021823:	89 c2                	mov    edx,eax
c0021825:	fc                   	cld    
c0021826:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0021829:	83 c4 10             	add    esp,0x10
c002182c:	eb d3                	jmp    c0021801 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002182e:	31 ff                	xor    edi,edi
c0021830:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021835:	74 16                	je     c002184d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021837:	50                   	push   eax
c0021838:	50                   	push   eax
c0021839:	31 c0                	xor    eax,eax
c002183b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0021840:	0f 94 c0             	sete   al
c0021843:	50                   	push   eax
c0021844:	53                   	push   ebx
c0021845:	e8 f6 fb ff ff       	call   c0021440 <ATA::flush(bool)>
c002184a:	83 c4 10             	add    esp,0x10
c002184d:	83 c4 2c             	add    esp,0x2c
c0021850:	89 f8                	mov    eax,edi
c0021852:	5b                   	pop    ebx
c0021853:	5e                   	pop    esi
c0021854:	5f                   	pop    edi
c0021855:	5d                   	pop    ebp
c0021856:	c3                   	ret    
c0021857:	90                   	nop

c0021858 <ATA::read(unsigned long long, int, void*)>:
c0021858:	57                   	push   edi
c0021859:	b8 04 00 00 00       	mov    eax,0x4
c002185e:	56                   	push   esi
c002185f:	53                   	push   ebx
c0021860:	83 ec 10             	sub    esp,0x10
c0021863:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021867:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002186b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002186e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021872:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021876:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002187c:	77 3b                	ja     c00218b9 <ATA::read(unsigned long long, int, void*)+0x61>
c002187e:	b8 06 00 00 00       	mov    eax,0x6
c0021883:	85 d2                	test   edx,edx
c0021885:	74 32                	je     c00218b9 <ATA::read(unsigned long long, int, void*)+0x61>
c0021887:	50                   	push   eax
c0021888:	50                   	push   eax
c0021889:	6a 00                	push   0x0
c002188b:	52                   	push   edx
c002188c:	53                   	push   ebx
c002188d:	57                   	push   edi
c002188e:	56                   	push   esi
c002188f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021893:	e8 42 fc ff ff       	call   c00214da <ATA::access(unsigned long long, int, void*, bool)>
c0021898:	83 c4 20             	add    esp,0x20
c002189b:	85 c0                	test   eax,eax
c002189d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218a1:	75 11                	jne    c00218b4 <ATA::read(unsigned long long, int, void*)+0x5c>
c00218a3:	01 1d 08 c6 02 c0    	add    DWORD PTR ds:0xc002c608,ebx
c00218a9:	e8 94 e8 fe ff       	call   c0010142 <VgaText::updateDiskUsage()>
c00218ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218b2:	eb 05                	jmp    c00218b9 <ATA::read(unsigned long long, int, void*)+0x61>
c00218b4:	b8 01 00 00 00       	mov    eax,0x1
c00218b9:	83 c4 10             	add    esp,0x10
c00218bc:	5b                   	pop    ebx
c00218bd:	5e                   	pop    esi
c00218be:	5f                   	pop    edi
c00218bf:	c3                   	ret    

c00218c0 <ATA::write(unsigned long long, int, void*)>:
c00218c0:	57                   	push   edi
c00218c1:	b8 04 00 00 00       	mov    eax,0x4
c00218c6:	56                   	push   esi
c00218c7:	53                   	push   ebx
c00218c8:	83 ec 10             	sub    esp,0x10
c00218cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00218cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218d3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00218d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00218de:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00218e4:	77 3b                	ja     c0021921 <ATA::write(unsigned long long, int, void*)+0x61>
c00218e6:	b8 06 00 00 00       	mov    eax,0x6
c00218eb:	85 d2                	test   edx,edx
c00218ed:	74 32                	je     c0021921 <ATA::write(unsigned long long, int, void*)+0x61>
c00218ef:	50                   	push   eax
c00218f0:	50                   	push   eax
c00218f1:	6a 01                	push   0x1
c00218f3:	52                   	push   edx
c00218f4:	53                   	push   ebx
c00218f5:	57                   	push   edi
c00218f6:	56                   	push   esi
c00218f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218fb:	e8 da fb ff ff       	call   c00214da <ATA::access(unsigned long long, int, void*, bool)>
c0021900:	83 c4 20             	add    esp,0x20
c0021903:	85 c0                	test   eax,eax
c0021905:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021909:	75 11                	jne    c002191c <ATA::write(unsigned long long, int, void*)+0x5c>
c002190b:	01 1d 04 c6 02 c0    	add    DWORD PTR ds:0xc002c604,ebx
c0021911:	e8 2c e8 fe ff       	call   c0010142 <VgaText::updateDiskUsage()>
c0021916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002191a:	eb 05                	jmp    c0021921 <ATA::write(unsigned long long, int, void*)+0x61>
c002191c:	b8 01 00 00 00       	mov    eax,0x1
c0021921:	83 c4 10             	add    esp,0x10
c0021924:	5b                   	pop    ebx
c0021925:	5e                   	pop    esi
c0021926:	5f                   	pop    edi
c0021927:	c3                   	ret    

c0021928 <ATA::detectCHS()>:
c0021928:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002192c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021932:	c1 e0 06             	shl    eax,0x6
c0021935:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002193b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021945:	c7 44 24 04 a3 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028fa3
c002194d:	e9 a1 70 ff ff       	jmp    c00189f3 <Krnl::panic(char const*)>

c0021952 <ATA::open(int, int, void*)>:
c0021952:	53                   	push   ebx
c0021953:	83 ec 08             	sub    esp,0x8
c0021956:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002195a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002195e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021962:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021968:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002196e:	c1 e0 06             	shl    eax,0x6
c0021971:	01 d0                	add    eax,edx
c0021973:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002197a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021980:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021987:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021991:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021997:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002199e:	75 0c                	jne    c00219ac <ATA::open(int, int, void*)+0x5a>
c00219a0:	83 ec 0c             	sub    esp,0xc
c00219a3:	53                   	push   ebx
c00219a4:	e8 7f ff ff ff       	call   c0021928 <ATA::detectCHS()>
c00219a9:	83 c4 10             	add    esp,0x10
c00219ac:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00219b2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00219b8:	c1 e0 06             	shl    eax,0x6
c00219bb:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00219c2:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00219cc:	d1 e8                	shr    eax,1
c00219ce:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00219d4:	6a 04                	push   0x4
c00219d6:	6a 0c                	push   0xc
c00219d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219df:	50                   	push   eax
c00219e0:	52                   	push   edx
c00219e1:	e8 f4 ed ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219e6:	90                   	nop
c00219e7:	90                   	nop
c00219e8:	6a 00                	push   0x0
c00219ea:	6a 0c                	push   0xc
c00219ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219f3:	50                   	push   eax
c00219f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00219fa:	e8 db ed ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219ff:	83 c4 14             	add    esp,0x14
c0021a02:	53                   	push   ebx
c0021a03:	e8 c8 20 ff ff       	call   c0013ad0 <PhysicalDisk::startCache()>
c0021a08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021a0b:	e8 76 40 ff ff       	call   c0015a86 <createPartitionsForDisk(PhysicalDisk*)>
c0021a10:	31 c0                	xor    eax,eax
c0021a12:	83 c4 18             	add    esp,0x18
c0021a15:	5b                   	pop    ebx
c0021a16:	c3                   	ret    
c0021a17:	90                   	nop

c0021a18 <ATAPI::write(unsigned long long, int, void*)>:
c0021a18:	b8 03 00 00 00       	mov    eax,0x3
c0021a1d:	c3                   	ret    

c0021a1e <ATAPI::close(int, int, void*)>:
c0021a1e:	83 ec 0c             	sub    esp,0xc
c0021a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a25:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021a2b:	85 c0                	test   eax,eax
c0021a2d:	74 0c                	je     c0021a3b <ATAPI::close(int, int, void*)+0x1d>
c0021a2f:	83 ec 0c             	sub    esp,0xc
c0021a32:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a34:	50                   	push   eax
c0021a35:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021a38:	83 c4 10             	add    esp,0x10
c0021a3b:	31 c0                	xor    eax,eax
c0021a3d:	83 c4 0c             	add    esp,0xc
c0021a40:	c3                   	ret    
c0021a41:	90                   	nop

c0021a42 <ATAPI::ATAPI()>:
c0021a42:	83 ec 0c             	sub    esp,0xc
c0021a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a49:	83 ec 04             	sub    esp,0x4
c0021a4c:	68 00 08 00 00       	push   0x800
c0021a51:	68 ec 8f 02 c0       	push   0xc0028fec
c0021a56:	50                   	push   eax
c0021a57:	e8 0c 20 ff ff       	call   c0013a68 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021a5c:	83 c4 10             	add    esp,0x10
c0021a5f:	ba 2c 90 02 c0       	mov    edx,0xc002902c
c0021a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a68:	89 10                	mov    DWORD PTR [eax],edx
c0021a6a:	90                   	nop
c0021a6b:	83 c4 0c             	add    esp,0xc
c0021a6e:	c3                   	ret    
c0021a6f:	90                   	nop

c0021a70 <ATAPI::readyForCommand()>:
c0021a70:	56                   	push   esi
c0021a71:	53                   	push   ebx
c0021a72:	31 db                	xor    ebx,ebx
c0021a74:	50                   	push   eax
c0021a75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a79:	50                   	push   eax
c0021a7a:	6a 0c                	push   0xc
c0021a7c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021a83:	50                   	push   eax
c0021a84:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021a8a:	e8 0b ee ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0021a8f:	83 c4 10             	add    esp,0x10
c0021a92:	a8 88                	test   al,0x88
c0021a94:	74 23                	je     c0021ab9 <ATAPI::readyForCommand()+0x49>
c0021a96:	43                   	inc    ebx
c0021a97:	83 fb 63             	cmp    ebx,0x63
c0021a9a:	7e dd                	jle    c0021a79 <ATAPI::readyForCommand()+0x9>
c0021a9c:	51                   	push   ecx
c0021a9d:	51                   	push   ecx
c0021a9e:	6a 00                	push   0x0
c0021aa0:	68 40 42 0f 00       	push   0xf4240
c0021aa5:	e8 e4 a3 ff ff       	call   c001be8e <nanoSleep(unsigned long long)>
c0021aaa:	83 c4 10             	add    esp,0x10
c0021aad:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021ab3:	75 c4                	jne    c0021a79 <ATAPI::readyForCommand()+0x9>
c0021ab5:	31 c0                	xor    eax,eax
c0021ab7:	eb 02                	jmp    c0021abb <ATAPI::readyForCommand()+0x4b>
c0021ab9:	b0 01                	mov    al,0x1
c0021abb:	5a                   	pop    edx
c0021abc:	5b                   	pop    ebx
c0021abd:	5e                   	pop    esi
c0021abe:	c3                   	ret    
c0021abf:	90                   	nop

c0021ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021ac0:	55                   	push   ebp
c0021ac1:	57                   	push   edi
c0021ac2:	56                   	push   esi
c0021ac3:	53                   	push   ebx
c0021ac4:	83 ec 20             	sub    esp,0x20
c0021ac7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021acb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021acf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021ad3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021ad7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021adb:	6a 01                	push   0x1
c0021add:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021ae4:	50                   	push   eax
c0021ae5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021aeb:	e8 f6 ee ff ff       	call   c00209e6 <IDE::enableIRQs(unsigned char, bool)>
c0021af0:	5e                   	pop    esi
c0021af1:	58                   	pop    eax
c0021af2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021af9:	50                   	push   eax
c0021afa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b00:	e8 af ec ff ff       	call   c00207b4 <IDE::prepareInterrupt(unsigned char)>
c0021b05:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021b08:	e8 63 ff ff ff       	call   c0021a70 <ATAPI::readyForCommand()>
c0021b0d:	83 c4 10             	add    esp,0x10
c0021b10:	84 c0                	test   al,al
c0021b12:	75 0a                	jne    c0021b1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021b14:	bb 01 00 00 00       	mov    ebx,0x1
c0021b19:	e9 57 02 00 00       	jmp    c0021d75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021b1e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021b24:	c1 e0 04             	shl    eax,0x4
c0021b27:	0f b6 c0             	movzx  eax,al
c0021b2a:	50                   	push   eax
c0021b2b:	6a 06                	push   0x6
c0021b2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b34:	50                   	push   eax
c0021b35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b3b:	e8 9a ec ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b40:	6a 00                	push   0x0
c0021b42:	6a 01                	push   0x1
c0021b44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b4b:	50                   	push   eax
c0021b4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b52:	e8 83 ec ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b57:	83 c4 20             	add    esp,0x20
c0021b5a:	0f b6 c3             	movzx  eax,bl
c0021b5d:	0f b6 df             	movzx  ebx,bh
c0021b60:	50                   	push   eax
c0021b61:	6a 04                	push   0x4
c0021b63:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b6a:	50                   	push   eax
c0021b6b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b71:	e8 64 ec ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b76:	53                   	push   ebx
c0021b77:	6a 05                	push   0x5
c0021b79:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b80:	50                   	push   eax
c0021b81:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b87:	e8 4e ec ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b8c:	83 c4 20             	add    esp,0x20
c0021b8f:	68 a0 00 00 00       	push   0xa0
c0021b94:	6a 07                	push   0x7
c0021b96:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b9d:	50                   	push   eax
c0021b9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021ba4:	e8 31 ec ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ba9:	83 c4 0c             	add    esp,0xc
c0021bac:	6a 01                	push   0x1
c0021bae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021bb5:	50                   	push   eax
c0021bb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bbc:	e8 c5 f7 ff ff       	call   c0021386 <IDE::polling(unsigned char, unsigned int)>
c0021bc1:	83 c4 10             	add    esp,0x10
c0021bc4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021bca:	84 c0                	test   al,al
c0021bcc:	74 23                	je     c0021bf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021bce:	0f b6 d8             	movzx  ebx,al
c0021bd1:	0f b6 d2             	movzx  edx,dl
c0021bd4:	53                   	push   ebx
c0021bd5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021bdc:	50                   	push   eax
c0021bdd:	52                   	push   edx
c0021bde:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021be4:	e8 07 f6 ff ff       	call   c00211f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021be9:	83 c4 10             	add    esp,0x10
c0021bec:	e9 84 01 00 00       	jmp    c0021d75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021bf1:	0f b6 d2             	movzx  edx,dl
c0021bf4:	53                   	push   ebx
c0021bf5:	53                   	push   ebx
c0021bf6:	52                   	push   edx
c0021bf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bfd:	e8 c6 eb ff ff       	call   c00207c8 <IDE::getBase(unsigned char)>
c0021c02:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021c06:	b9 06 00 00 00       	mov    ecx,0x6
c0021c0b:	89 c2                	mov    edx,eax
c0021c0d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021c10:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021c14:	83 c4 10             	add    esp,0x10
c0021c17:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021c1d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021c24:	85 db                	test   ebx,ebx
c0021c26:	0f 84 ec 00 00 00    	je     c0021d18 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021c2c:	51                   	push   ecx
c0021c2d:	51                   	push   ecx
c0021c2e:	52                   	push   edx
c0021c2f:	50                   	push   eax
c0021c30:	e8 13 ed ff ff       	call   c0020948 <IDE::waitInterrupt(unsigned char)>
c0021c35:	83 c4 10             	add    esp,0x10
c0021c38:	84 c0                	test   al,al
c0021c3a:	0f 84 d4 fe ff ff    	je     c0021b14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021c40:	56                   	push   esi
c0021c41:	56                   	push   esi
c0021c42:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c49:	50                   	push   eax
c0021c4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c50:	e8 5f eb ff ff       	call   c00207b4 <IDE::prepareInterrupt(unsigned char)>
c0021c55:	83 c4 0c             	add    esp,0xc
c0021c58:	6a 04                	push   0x4
c0021c5a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c61:	50                   	push   eax
c0021c62:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c68:	e8 2d ec ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0021c6d:	83 c4 0c             	add    esp,0xc
c0021c70:	89 c6                	mov    esi,eax
c0021c72:	6a 05                	push   0x5
c0021c74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c7b:	50                   	push   eax
c0021c7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c82:	e8 13 ec ff ff       	call   c002089a <IDE::read(unsigned char, unsigned char)>
c0021c87:	89 f1                	mov    ecx,esi
c0021c89:	0f b6 c0             	movzx  eax,al
c0021c8c:	0f b6 f1             	movzx  esi,cl
c0021c8f:	c1 e0 08             	shl    eax,0x8
c0021c92:	09 c6                	or     esi,eax
c0021c94:	d1 fe                	sar    esi,1
c0021c96:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021c9a:	83 c4 10             	add    esp,0x10
c0021c9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021ca2:	74 41                	je     c0021ce5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021ca4:	31 c9                	xor    ecx,ecx
c0021ca6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021cac:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021cb3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021cb7:	75 0a                	jne    c0021cc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021cb9:	01 c9                	add    ecx,ecx
c0021cbb:	01 cd                	add    ebp,ecx
c0021cbd:	4b                   	dec    ebx
c0021cbe:	e9 54 ff ff ff       	jmp    c0021c17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021cc3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021cc8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021ccc:	51                   	push   ecx
c0021ccd:	51                   	push   ecx
c0021cce:	52                   	push   edx
c0021ccf:	50                   	push   eax
c0021cd0:	e8 f3 ea ff ff       	call   c00207c8 <IDE::getBase(unsigned char)>
c0021cd5:	89 c2                	mov    edx,eax
c0021cd7:	89 f0                	mov    eax,esi
c0021cd9:	66 ef                	out    dx,ax
c0021cdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021cdf:	83 c4 10             	add    esp,0x10
c0021ce2:	41                   	inc    ecx
c0021ce3:	eb c1                	jmp    c0021ca6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021ce5:	31 f6                	xor    esi,esi
c0021ce7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021ced:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021cf4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021cf8:	75 06                	jne    c0021d00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021cfa:	01 f6                	add    esi,esi
c0021cfc:	01 f5                	add    ebp,esi
c0021cfe:	eb bd                	jmp    c0021cbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021d00:	51                   	push   ecx
c0021d01:	51                   	push   ecx
c0021d02:	52                   	push   edx
c0021d03:	50                   	push   eax
c0021d04:	e8 bf ea ff ff       	call   c00207c8 <IDE::getBase(unsigned char)>
c0021d09:	89 c2                	mov    edx,eax
c0021d0b:	66 ed                	in     ax,dx
c0021d0d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021d12:	83 c4 10             	add    esp,0x10
c0021d15:	46                   	inc    esi
c0021d16:	eb cf                	jmp    c0021ce7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021d18:	51                   	push   ecx
c0021d19:	51                   	push   ecx
c0021d1a:	52                   	push   edx
c0021d1b:	50                   	push   eax
c0021d1c:	e8 27 ec ff ff       	call   c0020948 <IDE::waitInterrupt(unsigned char)>
c0021d21:	83 c4 10             	add    esp,0x10
c0021d24:	84 c0                	test   al,al
c0021d26:	0f 84 e8 fd ff ff    	je     c0021b14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021d2c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021d31:	52                   	push   edx
c0021d32:	52                   	push   edx
c0021d33:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d3a:	50                   	push   eax
c0021d3b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d41:	e8 6e ea ff ff       	call   c00207b4 <IDE::prepareInterrupt(unsigned char)>
c0021d46:	83 c4 10             	add    esp,0x10
c0021d49:	50                   	push   eax
c0021d4a:	50                   	push   eax
c0021d4b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d52:	50                   	push   eax
c0021d53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d59:	e8 6a ea ff ff       	call   c00207c8 <IDE::getBase(unsigned char)>
c0021d5e:	8d 50 07             	lea    edx,[eax+0x7]
c0021d61:	ec                   	in     al,dx
c0021d62:	83 c4 10             	add    esp,0x10
c0021d65:	a8 88                	test   al,0x88
c0021d67:	74 0a                	je     c0021d73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021d69:	4b                   	dec    ebx
c0021d6a:	75 dd                	jne    c0021d49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021d6c:	bb 02 00 00 00       	mov    ebx,0x2
c0021d71:	eb 02                	jmp    c0021d75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021d73:	31 db                	xor    ebx,ebx
c0021d75:	83 c4 1c             	add    esp,0x1c
c0021d78:	89 d8                	mov    eax,ebx
c0021d7a:	5b                   	pop    ebx
c0021d7b:	5e                   	pop    esi
c0021d7c:	5f                   	pop    edi
c0021d7d:	5d                   	pop    ebp
c0021d7e:	c3                   	ret    
c0021d7f:	90                   	nop

c0021d80 <ATAPI::diskRemoved()>:
c0021d80:	83 ec 18             	sub    esp,0x18
c0021d83:	68 f7 8f 02 c0       	push   0xc0028ff7
c0021d88:	e8 ca 04 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d91:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021d98:	83 c4 1c             	add    esp,0x1c
c0021d9b:	c3                   	ret    

c0021d9c <ATAPI::eject()>:
c0021d9c:	57                   	push   edi
c0021d9d:	b9 03 00 00 00       	mov    ecx,0x3
c0021da2:	53                   	push   ebx
c0021da3:	83 ec 14             	sub    esp,0x14
c0021da6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021daa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021dae:	fc                   	cld    
c0021daf:	31 c0                	xor    eax,eax
c0021db1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021db3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021db8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021dbd:	50                   	push   eax
c0021dbe:	50                   	push   eax
c0021dbf:	6a 00                	push   0x0
c0021dc1:	6a 00                	push   0x0
c0021dc3:	6a 00                	push   0x0
c0021dc5:	6a 02                	push   0x2
c0021dc7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021dcb:	50                   	push   eax
c0021dcc:	53                   	push   ebx
c0021dcd:	e8 ee fc ff ff       	call   c0021ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021dd2:	83 c4 14             	add    esp,0x14
c0021dd5:	53                   	push   ebx
c0021dd6:	e8 a5 ff ff ff       	call   c0021d80 <ATAPI::diskRemoved()>
c0021ddb:	83 c4 24             	add    esp,0x24
c0021dde:	5b                   	pop    ebx
c0021ddf:	5f                   	pop    edi
c0021de0:	c3                   	ret    
c0021de1:	90                   	nop

c0021de2 <ATAPI::diskInserted()>:
c0021de2:	53                   	push   ebx
c0021de3:	83 ec 14             	sub    esp,0x14
c0021de6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021dea:	68 0d 90 02 c0       	push   0xc002900d
c0021def:	e8 63 04 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021df4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021dfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021dfe:	e8 cd 1c ff ff       	call   c0013ad0 <PhysicalDisk::startCache()>
c0021e03:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021e07:	83 c4 18             	add    esp,0x18
c0021e0a:	5b                   	pop    ebx
c0021e0b:	e9 76 3c ff ff       	jmp    c0015a86 <createPartitionsForDisk(PhysicalDisk*)>

c0021e10 <ATAPI::detectMedia()>:
c0021e10:	56                   	push   esi
c0021e11:	53                   	push   ebx
c0021e12:	83 ec 28             	sub    esp,0x28
c0021e15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021e19:	6a 0c                	push   0xc
c0021e1b:	6a 00                	push   0x0
c0021e1d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021e21:	56                   	push   esi
c0021e22:	e8 c5 e8 fd ff       	call   c00006ec <memset>
c0021e27:	58                   	pop    eax
c0021e28:	5a                   	pop    edx
c0021e29:	6a 00                	push   0x0
c0021e2b:	6a 00                	push   0x0
c0021e2d:	6a 00                	push   0x0
c0021e2f:	6a 00                	push   0x0
c0021e31:	56                   	push   esi
c0021e32:	53                   	push   ebx
c0021e33:	e8 88 fc ff ff       	call   c0021ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e38:	83 c4 1c             	add    esp,0x1c
c0021e3b:	6a 0c                	push   0xc
c0021e3d:	6a 00                	push   0x0
c0021e3f:	56                   	push   esi
c0021e40:	e8 a7 e8 fd ff       	call   c00006ec <memset>
c0021e45:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021e4a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021e4f:	59                   	pop    ecx
c0021e50:	58                   	pop    eax
c0021e51:	6a 01                	push   0x1
c0021e53:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021e57:	50                   	push   eax
c0021e58:	6a 00                	push   0x0
c0021e5a:	6a 12                	push   0x12
c0021e5c:	56                   	push   esi
c0021e5d:	53                   	push   ebx
c0021e5e:	e8 5d fc ff ff       	call   c0021ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e63:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021e67:	83 c4 20             	add    esp,0x20
c0021e6a:	83 e0 7f             	and    eax,0x7f
c0021e6d:	3c 70                	cmp    al,0x70
c0021e6f:	74 15                	je     c0021e86 <ATAPI::detectMedia()+0x76>
c0021e71:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e78:	75 0c                	jne    c0021e86 <ATAPI::detectMedia()+0x76>
c0021e7a:	83 ec 0c             	sub    esp,0xc
c0021e7d:	53                   	push   ebx
c0021e7e:	e8 5f ff ff ff       	call   c0021de2 <ATAPI::diskInserted()>
c0021e83:	83 c4 10             	add    esp,0x10
c0021e86:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021e8a:	83 e0 0f             	and    eax,0xf
c0021e8d:	3c 02                	cmp    al,0x2
c0021e8f:	75 1b                	jne    c0021eac <ATAPI::detectMedia()+0x9c>
c0021e91:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021e96:	75 2d                	jne    c0021ec5 <ATAPI::detectMedia()+0xb5>
c0021e98:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e9f:	74 24                	je     c0021ec5 <ATAPI::detectMedia()+0xb5>
c0021ea1:	83 ec 0c             	sub    esp,0xc
c0021ea4:	53                   	push   ebx
c0021ea5:	e8 d6 fe ff ff       	call   c0021d80 <ATAPI::diskRemoved()>
c0021eaa:	eb 16                	jmp    c0021ec2 <ATAPI::detectMedia()+0xb2>
c0021eac:	84 c0                	test   al,al
c0021eae:	75 15                	jne    c0021ec5 <ATAPI::detectMedia()+0xb5>
c0021eb0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021eb7:	75 0c                	jne    c0021ec5 <ATAPI::detectMedia()+0xb5>
c0021eb9:	83 ec 0c             	sub    esp,0xc
c0021ebc:	53                   	push   ebx
c0021ebd:	e8 20 ff ff ff       	call   c0021de2 <ATAPI::diskInserted()>
c0021ec2:	83 c4 10             	add    esp,0x10
c0021ec5:	83 c4 24             	add    esp,0x24
c0021ec8:	5b                   	pop    ebx
c0021ec9:	5e                   	pop    esi
c0021eca:	c3                   	ret    
c0021ecb:	90                   	nop

c0021ecc <ATAPI::open(int, int, void*)>:
c0021ecc:	53                   	push   ebx
c0021ecd:	83 ec 08             	sub    esp,0x8
c0021ed0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021ed4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ed8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021edc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021ee2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021ee8:	c1 e0 06             	shl    eax,0x6
c0021eeb:	01 d0                	add    eax,edx
c0021eed:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021ef4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021efa:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021f01:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021f0b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021f11:	6a 04                	push   0x4
c0021f13:	6a 0c                	push   0xc
c0021f15:	51                   	push   ecx
c0021f16:	52                   	push   edx
c0021f17:	e8 be e8 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f1c:	90                   	nop
c0021f1d:	90                   	nop
c0021f1e:	6a 00                	push   0x0
c0021f20:	6a 0c                	push   0xc
c0021f22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021f29:	50                   	push   eax
c0021f2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021f30:	e8 a5 e8 ff ff       	call   c00207da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f35:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021f3c:	83 c4 14             	add    esp,0x14
c0021f3f:	53                   	push   ebx
c0021f40:	e8 cb fe ff ff       	call   c0021e10 <ATAPI::detectMedia()>
c0021f45:	31 c0                	xor    eax,eax
c0021f47:	83 c4 18             	add    esp,0x18
c0021f4a:	5b                   	pop    ebx
c0021f4b:	c3                   	ret    

c0021f4c <ATAPI::read(unsigned long long, int, void*)>:
c0021f4c:	55                   	push   ebp
c0021f4d:	57                   	push   edi
c0021f4e:	56                   	push   esi
c0021f4f:	53                   	push   ebx
c0021f50:	83 ec 1c             	sub    esp,0x1c
c0021f53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f5b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021f5f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021f66:	74 41                	je     c0021fa9 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0021f68:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021f6c:	b9 03 00 00 00       	mov    ecx,0x3
c0021f71:	fc                   	cld    
c0021f72:	31 c0                	xor    eax,eax
c0021f74:	86 fb                	xchg   bl,bh
c0021f76:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021f78:	c1 c3 10             	rol    ebx,0x10
c0021f7b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021f80:	89 e8                	mov    eax,ebp
c0021f82:	86 fb                	xchg   bl,bh
c0021f84:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021f88:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0021f8c:	50                   	push   eax
c0021f8d:	50                   	push   eax
c0021f8e:	55                   	push   ebp
c0021f8f:	c1 e5 0b             	shl    ebp,0xb
c0021f92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f96:	6a 00                	push   0x0
c0021f98:	55                   	push   ebp
c0021f99:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f9d:	50                   	push   eax
c0021f9e:	56                   	push   esi
c0021f9f:	e8 1c fb ff ff       	call   c0021ac0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021fa4:	83 c4 20             	add    esp,0x20
c0021fa7:	eb 1a                	jmp    c0021fc3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0021fa9:	83 ec 0c             	sub    esp,0xc
c0021fac:	56                   	push   esi
c0021fad:	e8 5e fe ff ff       	call   c0021e10 <ATAPI::detectMedia()>
c0021fb2:	83 c4 10             	add    esp,0x10
c0021fb5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021fbc:	75 aa                	jne    c0021f68 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021fbe:	b8 02 00 00 00       	mov    eax,0x2
c0021fc3:	83 c4 1c             	add    esp,0x1c
c0021fc6:	5b                   	pop    ebx
c0021fc7:	5e                   	pop    esi
c0021fc8:	5f                   	pop    edi
c0021fc9:	5d                   	pop    ebp
c0021fca:	c3                   	ret    
c0021fcb:	90                   	nop

c0021fcc <AVX::open(int, int, void*)>:
c0021fcc:	83 ec 0c             	sub    esp,0xc
c0021fcf:	e8 04 10 00 00       	call   c0022fd8 <avxInit>
c0021fd4:	b8 00 00 00 00       	mov    eax,0x0
c0021fd9:	83 c4 0c             	add    esp,0xc
c0021fdc:	c3                   	ret    
c0021fdd:	90                   	nop

c0021fde <AVX::close(int, int, void*)>:
c0021fde:	83 ec 0c             	sub    esp,0xc
c0021fe1:	e8 f3 0f 00 00       	call   c0022fd9 <avxClose>
c0021fe6:	b8 00 00 00 00       	mov    eax,0x0
c0021feb:	83 c4 0c             	add    esp,0xc
c0021fee:	c3                   	ret    
c0021fef:	90                   	nop

c0021ff0 <AVX::available()>:
c0021ff0:	83 ec 0c             	sub    esp,0xc
c0021ff3:	e8 d8 0f 00 00       	call   c0022fd0 <avxDetect>
c0021ff8:	85 c0                	test   eax,eax
c0021ffa:	0f 95 c0             	setne  al
c0021ffd:	83 c4 0c             	add    esp,0xc
c0022000:	c3                   	ret    
c0022001:	90                   	nop

c0022002 <AVX::save(void*)>:
c0022002:	83 ec 0c             	sub    esp,0xc
c0022005:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022009:	83 ec 0c             	sub    esp,0xc
c002200c:	50                   	push   eax
c002200d:	e8 c4 0f 00 00       	call   c0022fd6 <avxSave>
c0022012:	83 c4 10             	add    esp,0x10
c0022015:	90                   	nop
c0022016:	83 c4 0c             	add    esp,0xc
c0022019:	c3                   	ret    

c002201a <AVX::load(void*)>:
c002201a:	83 ec 0c             	sub    esp,0xc
c002201d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022021:	83 ec 0c             	sub    esp,0xc
c0022024:	50                   	push   eax
c0022025:	e8 ad 0f 00 00       	call   c0022fd7 <avxLoad>
c002202a:	83 c4 10             	add    esp,0x10
c002202d:	90                   	nop
c002202e:	83 c4 0c             	add    esp,0xc
c0022031:	c3                   	ret    

c0022032 <AVX::AVX()>:
c0022032:	83 ec 0c             	sub    esp,0xc
c0022035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022039:	83 ec 08             	sub    esp,0x8
c002203c:	68 58 90 02 c0       	push   0xc0029058
c0022041:	50                   	push   eax
c0022042:	e8 ff 1a ff ff       	call   c0013b46 <FPU::FPU(char const*)>
c0022047:	83 c4 10             	add    esp,0x10
c002204a:	ba 68 90 02 c0       	mov    edx,0xc0029068
c002204f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022053:	89 10                	mov    DWORD PTR [eax],edx
c0022055:	90                   	nop
c0022056:	83 c4 0c             	add    esp,0xc
c0022059:	c3                   	ret    

c002205a <MMX::available()>:
c002205a:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c002205f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022065:	83 e0 20             	and    eax,0x20
c0022068:	84 c0                	test   al,al
c002206a:	0f 95 c0             	setne  al
c002206d:	c3                   	ret    

c002206e <MMX::open(int, int, void*)>:
c002206e:	83 ec 0c             	sub    esp,0xc
c0022071:	e8 d6 0f 00 00       	call   c002304c <x87Init>
c0022076:	b8 00 00 00 00       	mov    eax,0x0
c002207b:	83 c4 0c             	add    esp,0xc
c002207e:	c3                   	ret    
c002207f:	90                   	nop

c0022080 <MMX::close(int, int, void*)>:
c0022080:	83 ec 0c             	sub    esp,0xc
c0022083:	e8 de 0f 00 00       	call   c0023066 <x87Close>
c0022088:	b8 00 00 00 00       	mov    eax,0x0
c002208d:	83 c4 0c             	add    esp,0xc
c0022090:	c3                   	ret    
c0022091:	90                   	nop

c0022092 <MMX::save(void*)>:
c0022092:	83 ec 0c             	sub    esp,0xc
c0022095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022099:	83 ec 0c             	sub    esp,0xc
c002209c:	50                   	push   eax
c002209d:	e8 9f 0f 00 00       	call   c0023041 <x87Save>
c00220a2:	83 c4 10             	add    esp,0x10
c00220a5:	90                   	nop
c00220a6:	83 c4 0c             	add    esp,0xc
c00220a9:	c3                   	ret    

c00220aa <MMX::load(void*)>:
c00220aa:	83 ec 0c             	sub    esp,0xc
c00220ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220b1:	83 ec 0c             	sub    esp,0xc
c00220b4:	50                   	push   eax
c00220b5:	e8 8d 0f 00 00       	call   c0023047 <x87Load>
c00220ba:	83 c4 10             	add    esp,0x10
c00220bd:	90                   	nop
c00220be:	83 c4 0c             	add    esp,0xc
c00220c1:	c3                   	ret    

c00220c2 <MMX::MMX()>:
c00220c2:	83 ec 0c             	sub    esp,0xc
c00220c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c9:	83 ec 08             	sub    esp,0x8
c00220cc:	68 98 90 02 c0       	push   0xc0029098
c00220d1:	50                   	push   eax
c00220d2:	e8 6f 1a ff ff       	call   c0013b46 <FPU::FPU(char const*)>
c00220d7:	83 c4 10             	add    esp,0x10
c00220da:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c00220df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e3:	89 10                	mov    DWORD PTR [eax],edx
c00220e5:	90                   	nop
c00220e6:	83 c4 0c             	add    esp,0xc
c00220e9:	c3                   	ret    

c00220ea <SSE::open(int, int, void*)>:
c00220ea:	83 ec 0c             	sub    esp,0xc
c00220ed:	e8 15 0f 00 00       	call   c0023007 <sseInit>
c00220f2:	b8 00 00 00 00       	mov    eax,0x0
c00220f7:	83 c4 0c             	add    esp,0xc
c00220fa:	c3                   	ret    
c00220fb:	90                   	nop

c00220fc <SSE::close(int, int, void*)>:
c00220fc:	83 ec 0c             	sub    esp,0xc
c00220ff:	e8 13 0f 00 00       	call   c0023017 <sseClose>
c0022104:	b8 00 00 00 00       	mov    eax,0x0
c0022109:	83 c4 0c             	add    esp,0xc
c002210c:	c3                   	ret    
c002210d:	90                   	nop

c002210e <SSE::available()>:
c002210e:	83 ec 1c             	sub    esp,0x1c
c0022111:	e8 ca 0e 00 00       	call   c0022fe0 <sseDetect>
c0022116:	85 c0                	test   eax,eax
c0022118:	0f 95 c0             	setne  al
c002211b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002211f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022123:	83 c4 1c             	add    esp,0x1c
c0022126:	c3                   	ret    
c0022127:	90                   	nop

c0022128 <SSE::save(void*)>:
c0022128:	83 ec 0c             	sub    esp,0xc
c002212b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002212f:	83 ec 0c             	sub    esp,0xc
c0022132:	50                   	push   eax
c0022133:	e8 c3 0e 00 00       	call   c0022ffb <sseSave>
c0022138:	83 c4 10             	add    esp,0x10
c002213b:	90                   	nop
c002213c:	83 c4 0c             	add    esp,0xc
c002213f:	c3                   	ret    

c0022140 <SSE::load(void*)>:
c0022140:	83 ec 0c             	sub    esp,0xc
c0022143:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022147:	83 ec 0c             	sub    esp,0xc
c002214a:	50                   	push   eax
c002214b:	e8 b1 0e 00 00       	call   c0023001 <sseLoad>
c0022150:	83 c4 10             	add    esp,0x10
c0022153:	90                   	nop
c0022154:	83 c4 0c             	add    esp,0xc
c0022157:	c3                   	ret    

c0022158 <SSE::SSE()>:
c0022158:	83 ec 0c             	sub    esp,0xc
c002215b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215f:	83 ec 08             	sub    esp,0x8
c0022162:	68 d8 90 02 c0       	push   0xc00290d8
c0022167:	50                   	push   eax
c0022168:	e8 d9 19 ff ff       	call   c0013b46 <FPU::FPU(char const*)>
c002216d:	83 c4 10             	add    esp,0x10
c0022170:	ba e8 90 02 c0       	mov    edx,0xc00290e8
c0022175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022179:	89 10                	mov    DWORD PTR [eax],edx
c002217b:	90                   	nop
c002217c:	83 c4 0c             	add    esp,0xc
c002217f:	c3                   	ret    

c0022180 <x87::open(int, int, void*)>:
c0022180:	83 ec 0c             	sub    esp,0xc
c0022183:	e8 c4 0e 00 00       	call   c002304c <x87Init>
c0022188:	b8 00 00 00 00       	mov    eax,0x0
c002218d:	83 c4 0c             	add    esp,0xc
c0022190:	c3                   	ret    
c0022191:	90                   	nop

c0022192 <x87::close(int, int, void*)>:
c0022192:	83 ec 0c             	sub    esp,0xc
c0022195:	e8 cc 0e 00 00       	call   c0023066 <x87Close>
c002219a:	b8 00 00 00 00       	mov    eax,0x0
c002219f:	83 c4 0c             	add    esp,0xc
c00221a2:	c3                   	ret    
c00221a3:	90                   	nop

c00221a4 <x87::available()>:
c00221a4:	83 ec 0c             	sub    esp,0xc
c00221a7:	e8 7a 0e 00 00       	call   c0023026 <x87Detect>
c00221ac:	85 c0                	test   eax,eax
c00221ae:	0f 95 c0             	setne  al
c00221b1:	83 c4 0c             	add    esp,0xc
c00221b4:	c3                   	ret    
c00221b5:	90                   	nop

c00221b6 <x87::save(void*)>:
c00221b6:	83 ec 0c             	sub    esp,0xc
c00221b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221bd:	83 ec 0c             	sub    esp,0xc
c00221c0:	50                   	push   eax
c00221c1:	e8 7b 0e 00 00       	call   c0023041 <x87Save>
c00221c6:	83 c4 10             	add    esp,0x10
c00221c9:	90                   	nop
c00221ca:	83 c4 0c             	add    esp,0xc
c00221cd:	c3                   	ret    

c00221ce <x87::load(void*)>:
c00221ce:	83 ec 0c             	sub    esp,0xc
c00221d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221d5:	83 ec 0c             	sub    esp,0xc
c00221d8:	50                   	push   eax
c00221d9:	e8 69 0e 00 00       	call   c0023047 <x87Load>
c00221de:	83 c4 10             	add    esp,0x10
c00221e1:	90                   	nop
c00221e2:	83 c4 0c             	add    esp,0xc
c00221e5:	c3                   	ret    

c00221e6 <x87::x87()>:
c00221e6:	83 ec 0c             	sub    esp,0xc
c00221e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ed:	83 ec 08             	sub    esp,0x8
c00221f0:	68 18 91 02 c0       	push   0xc0029118
c00221f5:	50                   	push   eax
c00221f6:	e8 4b 19 ff ff       	call   c0013b46 <FPU::FPU(char const*)>
c00221fb:	83 c4 10             	add    esp,0x10
c00221fe:	ba 28 91 02 c0       	mov    edx,0xc0029128
c0022203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022207:	89 10                	mov    DWORD PTR [eax],edx
c0022209:	90                   	nop
c002220a:	83 c4 0c             	add    esp,0xc
c002220d:	c3                   	ret    

c002220e <APIC::disable()>:
c002220e:	90                   	nop
c002220f:	c3                   	ret    

c0022210 <APIC::close(int, int, void*)>:
c0022210:	55                   	push   ebp
c0022211:	89 e5                	mov    ebp,esp
c0022213:	83 ec 08             	sub    esp,0x8
c0022216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022219:	8b 00                	mov    eax,DWORD PTR [eax]
c002221b:	83 c0 3c             	add    eax,0x3c
c002221e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022220:	83 ec 0c             	sub    esp,0xc
c0022223:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022226:	ff d0                	call   eax
c0022228:	83 c4 10             	add    esp,0x10
c002222b:	b8 00 00 00 00       	mov    eax,0x0
c0022230:	c9                   	leave  
c0022231:	c3                   	ret    

c0022232 <IOAPIC::close(int, int, void*)>:
c0022232:	b8 00 00 00 00       	mov    eax,0x0
c0022237:	c3                   	ret    

c0022238 <APIC::io_wait()>:
c0022238:	eb 00                	jmp    c002223a <APIC::io_wait()+0x2>
c002223a:	eb 00                	jmp    c002223c <APIC::io_wait()+0x4>
c002223c:	90                   	nop
c002223d:	c3                   	ret    

c002223e <APIC::getBase()>:
c002223e:	55                   	push   ebp
c002223f:	89 e5                	mov    ebp,esp
c0022241:	83 ec 18             	sub    esp,0x18
c0022244:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022249:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002224f:	83 e0 08             	and    eax,0x8
c0022252:	84 c0                	test   al,al
c0022254:	75 07                	jne    c002225d <APIC::getBase()+0x1f>
c0022256:	b8 00 00 00 00       	mov    eax,0x0
c002225b:	eb 21                	jmp    c002227e <APIC::getBase()+0x40>
c002225d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022262:	83 ec 08             	sub    esp,0x8
c0022265:	6a 1b                	push   0x1b
c0022267:	50                   	push   eax
c0022268:	e8 99 c4 fe ff       	call   c000e706 <Computer::rdmsr(unsigned int)>
c002226d:	83 c4 10             	add    esp,0x10
c0022270:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022273:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022276:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022279:	25 00 f0 ff ff       	and    eax,0xfffff000
c002227e:	c9                   	leave  
c002227f:	c3                   	ret    

c0022280 <APIC::eoi(unsigned char)>:
c0022280:	55                   	push   ebp
c0022281:	89 e5                	mov    ebp,esp
c0022283:	83 ec 28             	sub    esp,0x28
c0022286:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022289:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002228c:	83 ec 0c             	sub    esp,0xc
c002228f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022292:	e8 a7 ff ff ff       	call   c002223e <APIC::getBase()>
c0022297:	83 c4 10             	add    esp,0x10
c002229a:	05 b0 00 00 00       	add    eax,0xb0
c002229f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00222a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00222a5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00222ab:	90                   	nop
c00222ac:	c9                   	leave  
c00222ad:	c3                   	ret    

c00222ae <APIC::open(int, int, void*)>:
c00222ae:	55                   	push   ebp
c00222af:	89 e5                	mov    ebp,esp
c00222b1:	57                   	push   edi
c00222b2:	56                   	push   esi
c00222b3:	53                   	push   ebx
c00222b4:	83 ec 1c             	sub    esp,0x1c
c00222b7:	83 ec 0c             	sub    esp,0xc
c00222ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222bd:	e8 7c ff ff ff       	call   c002223e <APIC::getBase()>
c00222c2:	83 c4 10             	add    esp,0x10
c00222c5:	05 f0 00 00 00       	add    eax,0xf0
c00222ca:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00222cd:	83 ec 0c             	sub    esp,0xc
c00222d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222d3:	e8 66 ff ff ff       	call   c002223e <APIC::getBase()>
c00222d8:	83 c4 10             	add    esp,0x10
c00222db:	89 c2                	mov    edx,eax
c00222dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222e0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00222e6:	0f b6 f8             	movzx  edi,al
c00222e9:	89 d0                	mov    eax,edx
c00222eb:	ba 00 00 00 00       	mov    edx,0x0
c00222f0:	89 c1                	mov    ecx,eax
c00222f2:	80 e5 ff             	and    ch,0xff
c00222f5:	89 cb                	mov    ebx,ecx
c00222f7:	0f b6 f2             	movzx  esi,dl
c00222fa:	89 d8                	mov    eax,ebx
c00222fc:	89 f2                	mov    edx,esi
c00222fe:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022301:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022304:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022308:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002230c:	83 e0 00             	and    eax,0x0
c002230f:	09 d0                	or     eax,edx
c0022311:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022318:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002231e:	8d 50 01             	lea    edx,[eax+0x1]
c0022321:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022324:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002232a:	0f b6 d0             	movzx  edx,al
c002232d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022330:	83 c2 08             	add    edx,0x8
c0022333:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022337:	0f b6 c9             	movzx  ecx,cl
c002233a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022340:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022344:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022347:	8b 00                	mov    eax,DWORD PTR [eax]
c0022349:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002234c:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c0022353:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022356:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022359:	89 10                	mov    DWORD PTR [eax],edx
c002235b:	b8 00 00 00 00       	mov    eax,0x0
c0022360:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022363:	5b                   	pop    ebx
c0022364:	5e                   	pop    esi
c0022365:	5f                   	pop    edi
c0022366:	5d                   	pop    ebp
c0022367:	c3                   	ret    

c0022368 <IOAPIC::IOAPIC()>:
c0022368:	83 ec 0c             	sub    esp,0xc
c002236b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236f:	83 ec 08             	sub    esp,0x8
c0022372:	68 58 91 02 c0       	push   0xc0029158
c0022377:	50                   	push   eax
c0022378:	e8 d5 14 ff ff       	call   c0013852 <Device::Device(char const*)>
c002237d:	83 c4 10             	add    esp,0x10
c0022380:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0022385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022389:	89 10                	mov    DWORD PTR [eax],edx
c002238b:	90                   	nop
c002238c:	83 c4 0c             	add    esp,0xc
c002238f:	c3                   	ret    

c0022390 <APIC::APIC()>:
c0022390:	53                   	push   ebx
c0022391:	83 ec 18             	sub    esp,0x18
c0022394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022398:	83 ec 08             	sub    esp,0x8
c002239b:	68 60 91 02 c0       	push   0xc0029160
c00223a0:	50                   	push   eax
c00223a1:	e8 04 1c ff ff       	call   c0013faa <InterruptController::InterruptController(char const*)>
c00223a6:	83 c4 10             	add    esp,0x10
c00223a9:	ba 38 92 02 c0       	mov    edx,0xc0029238
c00223ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b2:	89 10                	mov    DWORD PTR [eax],edx
c00223b4:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00223b9:	83 f0 01             	xor    eax,0x1
c00223bc:	84 c0                	test   al,al
c00223be:	0f 84 96 00 00 00    	je     c002245a <APIC::APIC()+0xca>
c00223c4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00223c9:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c00223ce:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00223d2:	73 7f                	jae    c0022453 <APIC::APIC()+0xc3>
c00223d4:	83 ec 0c             	sub    esp,0xc
c00223d7:	68 68 01 00 00       	push   0x168
c00223dc:	e8 87 fd fe ff       	call   c0012168 <operator new(unsigned long)>
c00223e1:	83 c4 10             	add    esp,0x10
c00223e4:	89 c3                	mov    ebx,eax
c00223e6:	83 ec 0c             	sub    esp,0xc
c00223e9:	53                   	push   ebx
c00223ea:	e8 79 ff ff ff       	call   c0022368 <IOAPIC::IOAPIC()>
c00223ef:	83 c4 10             	add    esp,0x10
c00223f2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00223f6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00223fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223ff:	89 14 85 40 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39c0],edx
c0022406:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c002240b:	40                   	inc    eax
c002240c:	a3 20 c6 02 c0       	mov    ds:0xc002c620,eax
c0022411:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022416:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002241c:	83 ec 08             	sub    esp,0x8
c002241f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022423:	50                   	push   eax
c0022424:	e8 39 12 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0022429:	83 c4 10             	add    esp,0x10
c002242c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022430:	8b 00                	mov    eax,DWORD PTR [eax]
c0022432:	83 c0 08             	add    eax,0x8
c0022435:	8b 00                	mov    eax,DWORD PTR [eax]
c0022437:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002243c:	6a 00                	push   0x0
c002243e:	6a 00                	push   0x0
c0022440:	52                   	push   edx
c0022441:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022445:	ff d0                	call   eax
c0022447:	83 c4 10             	add    esp,0x10
c002244a:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002244e:	e9 76 ff ff ff       	jmp    c00223c9 <APIC::APIC()+0x39>
c0022453:	c6 05 60 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c660,0x1
c002245a:	90                   	nop
c002245b:	83 c4 18             	add    esp,0x18
c002245e:	5b                   	pop    ebx
c002245f:	c3                   	ret    

c0022460 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0022460:	55                   	push   ebp
c0022461:	89 e5                	mov    ebp,esp
c0022463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022466:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002246c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002246f:	72 1d                	jb     c002248e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022474:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002247a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002247d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0022483:	01 d0                	add    eax,edx
c0022485:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022488:	73 04                	jae    c002248e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002248a:	b0 01                	mov    al,0x1
c002248c:	eb 02                	jmp    c0022490 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002248e:	b0 00                	mov    al,0x0
c0022490:	5d                   	pop    ebp
c0022491:	c3                   	ret    

c0022492 <IOAPIC::read(int)>:
c0022492:	55                   	push   ebp
c0022493:	89 e5                	mov    ebp,esp
c0022495:	83 ec 10             	sub    esp,0x10
c0022498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002249b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00224a1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00224a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00224a7:	0f b6 d0             	movzx  edx,al
c00224aa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224ad:	89 10                	mov    DWORD PTR [eax],edx
c00224af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224b2:	83 c0 10             	add    eax,0x10
c00224b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00224b7:	c9                   	leave  
c00224b8:	c3                   	ret    
c00224b9:	90                   	nop

c00224ba <IOAPIC::open(int, int, void*)>:
c00224ba:	55                   	push   ebp
c00224bb:	89 e5                	mov    ebp,esp
c00224bd:	57                   	push   edi
c00224be:	56                   	push   esi
c00224bf:	53                   	push   ebx
c00224c0:	83 ec 0c             	sub    esp,0xc
c00224c3:	83 ec 0c             	sub    esp,0xc
c00224c6:	68 8b 91 02 c0       	push   0xc002918b
c00224cb:	e8 87 fd fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00224d0:	83 c4 10             	add    esp,0x10
c00224d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00224d9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00224df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00224e8:	8b 14 85 e0 ac 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5320]
c00224ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00224f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022501:	8b 14 85 60 ad 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd52a0]
c0022508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002250b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022514:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002251a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002251d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022523:	0f b6 f8             	movzx  edi,al
c0022526:	89 d0                	mov    eax,edx
c0022528:	ba 00 00 00 00       	mov    edx,0x0
c002252d:	89 c1                	mov    ecx,eax
c002252f:	80 e5 ff             	and    ch,0xff
c0022532:	89 cb                	mov    ebx,ecx
c0022534:	0f b6 f2             	movzx  esi,dl
c0022537:	89 d8                	mov    eax,ebx
c0022539:	89 f2                	mov    edx,esi
c002253b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002253e:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022541:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022545:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022549:	83 e0 00             	and    eax,0x0
c002254c:	09 d0                	or     eax,edx
c002254e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022555:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002255b:	8d 50 01             	lea    edx,[eax+0x1]
c002255e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022561:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022567:	0f b6 d0             	movzx  edx,al
c002256a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002256d:	83 c2 08             	add    edx,0x8
c0022570:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022574:	0f b6 c9             	movzx  ecx,cl
c0022577:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002257d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022581:	83 ec 08             	sub    esp,0x8
c0022584:	6a 01                	push   0x1
c0022586:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022589:	e8 04 ff ff ff       	call   c0022492 <IOAPIC::read(int)>
c002258e:	83 c4 10             	add    esp,0x10
c0022591:	c1 f8 10             	sar    eax,0x10
c0022594:	0f b6 c0             	movzx  eax,al
c0022597:	8d 50 01             	lea    edx,[eax+0x1]
c002259a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002259d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00225a3:	b8 00 00 00 00       	mov    eax,0x0
c00225a8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00225ab:	5b                   	pop    ebx
c00225ac:	5e                   	pop    esi
c00225ad:	5f                   	pop    edi
c00225ae:	5d                   	pop    ebp
c00225af:	c3                   	ret    

c00225b0 <IOAPIC::write(int, int)>:
c00225b0:	55                   	push   ebp
c00225b1:	89 e5                	mov    ebp,esp
c00225b3:	83 ec 10             	sub    esp,0x10
c00225b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00225bf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00225c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225c5:	0f b6 d0             	movzx  edx,al
c00225c8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225cb:	89 10                	mov    DWORD PTR [eax],edx
c00225cd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225d0:	8d 50 10             	lea    edx,[eax+0x10]
c00225d3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225d6:	89 02                	mov    DWORD PTR [edx],eax
c00225d8:	90                   	nop
c00225d9:	c9                   	leave  
c00225da:	c3                   	ret    
c00225db:	90                   	nop

c00225dc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c00225dc:	55                   	push   ebp
c00225dd:	89 e5                	mov    ebp,esp
c00225df:	83 ec 20             	sub    esp,0x20
c00225e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225e5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00225e8:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00225eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225ee:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00225f1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00225f4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00225f7:	88 d0                	mov    al,dl
c00225f9:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c00225fc:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c0022600:	83 c0 08             	add    eax,0x8
c0022603:	01 c0                	add    eax,eax
c0022605:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022608:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c002260c:	83 c0 08             	add    eax,0x8
c002260f:	01 c0                	add    eax,eax
c0022611:	40                   	inc    eax
c0022612:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0022615:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0022618:	50                   	push   eax
c0022619:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002261c:	e8 71 fe ff ff       	call   c0022492 <IOAPIC::read(int)>
c0022621:	83 c4 08             	add    esp,0x8
c0022624:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022627:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c002262e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022631:	c1 e0 18             	shl    eax,0x18
c0022634:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022637:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002263a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c002263d:	52                   	push   edx
c002263e:	50                   	push   eax
c002263f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022642:	e8 69 ff ff ff       	call   c00225b0 <IOAPIC::write(int, int)>
c0022647:	83 c4 0c             	add    esp,0xc
c002264a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002264d:	50                   	push   eax
c002264e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022651:	e8 3c fe ff ff       	call   c0022492 <IOAPIC::read(int)>
c0022656:	83 c4 08             	add    esp,0x8
c0022659:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002265c:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c0022663:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c002266a:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c0022671:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c0022678:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c002267c:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c002267f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0022682:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022685:	52                   	push   edx
c0022686:	50                   	push   eax
c0022687:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002268a:	e8 21 ff ff ff       	call   c00225b0 <IOAPIC::write(int, int)>
c002268f:	83 c4 0c             	add    esp,0xc
c0022692:	90                   	nop
c0022693:	c9                   	leave  
c0022694:	c3                   	ret    
c0022695:	90                   	nop

c0022696 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022696:	55                   	push   ebp
c0022697:	89 e5                	mov    ebp,esp
c0022699:	56                   	push   esi
c002269a:	53                   	push   ebx
c002269b:	83 ec 20             	sub    esp,0x20
c002269e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00226a1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00226a4:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c00226a8:	74 28                	je     c00226d2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00226aa:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00226ae:	7f 12                	jg     c00226c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c00226b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00226b3:	05 e0 96 02 c0       	add    eax,0xc00296e0
c00226b8:	8a 00                	mov    al,BYTE PTR [eax]
c00226ba:	0f b6 c0             	movzx  eax,al
c00226bd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00226c0:	eb 10                	jmp    c00226d2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00226c2:	83 ec 0c             	sub    esp,0xc
c00226c5:	68 9c 91 02 c0       	push   0xc002919c
c00226ca:	e8 24 63 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c00226cf:	83 c4 10             	add    esp,0x10
c00226d2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00226d6:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00226db:	83 ec 08             	sub    esp,0x8
c00226de:	50                   	push   eax
c00226df:	68 d4 91 02 c0       	push   0xc00291d4
c00226e4:	e8 6e fb fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00226e9:	83 c4 10             	add    esp,0x10
c00226ec:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00226f3:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00226f8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00226fb:	7d 58                	jge    c0022755 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c00226fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022700:	8b 04 85 40 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd39c0]
c0022707:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002270a:	83 ec 08             	sub    esp,0x8
c002270d:	52                   	push   edx
c002270e:	50                   	push   eax
c002270f:	e8 4c fd ff ff       	call   c0022460 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0022714:	83 c4 10             	add    esp,0x10
c0022717:	84 c0                	test   al,al
c0022719:	74 35                	je     c0022750 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c002271b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002271e:	8b 1c 85 40 c6 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd39c0]
c0022725:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022728:	83 c0 20             	add    eax,0x20
c002272b:	0f b6 f0             	movzx  esi,al
c002272e:	e8 39 51 ff ff       	call   c001786c <CPU::getNumber()>
c0022733:	99                   	cdq    
c0022734:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022737:	0f b6 c9             	movzx  ecx,cl
c002273a:	83 ec 0c             	sub    esp,0xc
c002273d:	56                   	push   esi
c002273e:	52                   	push   edx
c002273f:	50                   	push   eax
c0022740:	51                   	push   ecx
c0022741:	53                   	push   ebx
c0022742:	e8 95 fe ff ff       	call   c00225dc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c0022747:	83 c4 20             	add    esp,0x20
c002274a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c002274e:	eb 05                	jmp    c0022755 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c0022750:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0022753:	eb 9e                	jmp    c00226f3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c0022755:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0022758:	83 f0 01             	xor    eax,0x1
c002275b:	84 c0                	test   al,al
c002275d:	74 10                	je     c002276f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c002275f:	83 ec 0c             	sub    esp,0xc
c0022762:	68 eb 91 02 c0       	push   0xc00291eb
c0022767:	e8 87 62 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c002276c:	83 c4 10             	add    esp,0x10
c002276f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022773:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002277a:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c002277e:	7f 65                	jg     c00227e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c0022780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022783:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022786:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002278d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022790:	01 ca                	add    edx,ecx
c0022792:	83 c2 54             	add    edx,0x54
c0022795:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022799:	85 c0                	test   eax,eax
c002279b:	75 43                	jne    c00227e0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c002279d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00227a3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227aa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227ad:	01 ca                	add    edx,ecx
c00227af:	8d 4a 54             	lea    ecx,[edx+0x54]
c00227b2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00227b5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00227bf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227c6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227c9:	01 ca                	add    edx,ecx
c00227cb:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00227d1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00227d4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00227db:	83 e8 20             	sub    eax,0x20
c00227de:	eb 1a                	jmp    c00227fa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c00227e0:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00227e3:	eb 95                	jmp    c002277a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c00227e5:	83 ec 0c             	sub    esp,0xc
c00227e8:	68 f8 91 02 c0       	push   0xc00291f8
c00227ed:	e8 01 62 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c00227f2:	83 c4 10             	add    esp,0x10
c00227f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00227fa:	8d 65 f8             	lea    esp,[ebp-0x8]
c00227fd:	5b                   	pop    ebx
c00227fe:	5e                   	pop    esi
c00227ff:	5d                   	pop    ebp
c0022800:	c3                   	ret    
c0022801:	90                   	nop

c0022802 <PIC::disable()>:
c0022802:	55                   	push   ebp
c0022803:	89 e5                	mov    ebp,esp
c0022805:	83 ec 10             	sub    esp,0x10
c0022808:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002280e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022812:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022815:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022819:	ee                   	out    dx,al
c002281a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022820:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022824:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022827:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002282b:	ee                   	out    dx,al
c002282c:	90                   	nop
c002282d:	c9                   	leave  
c002282e:	c3                   	ret    
c002282f:	90                   	nop

c0022830 <PIC::close(int, int, void*)>:
c0022830:	55                   	push   ebp
c0022831:	89 e5                	mov    ebp,esp
c0022833:	83 ec 08             	sub    esp,0x8
c0022836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022839:	8b 00                	mov    eax,DWORD PTR [eax]
c002283b:	83 c0 3c             	add    eax,0x3c
c002283e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022840:	83 ec 0c             	sub    esp,0xc
c0022843:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022846:	ff d0                	call   eax
c0022848:	83 c4 10             	add    esp,0x10
c002284b:	b8 00 00 00 00       	mov    eax,0x0
c0022850:	c9                   	leave  
c0022851:	c3                   	ret    

c0022852 <PIC::PIC()>:
c0022852:	83 ec 0c             	sub    esp,0xc
c0022855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022859:	83 ec 08             	sub    esp,0x8
c002285c:	68 a4 92 02 c0       	push   0xc00292a4
c0022861:	50                   	push   eax
c0022862:	e8 43 17 ff ff       	call   c0013faa <InterruptController::InterruptController(char const*)>
c0022867:	83 c4 10             	add    esp,0x10
c002286a:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c002286f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022873:	89 10                	mov    DWORD PTR [eax],edx
c0022875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022879:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002287f:	0f b6 d0             	movzx  edx,al
c0022882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022886:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002288d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022891:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022897:	0f b6 d0             	movzx  edx,al
c002289a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00228a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228ad:	8d 50 01             	lea    edx,[eax+0x1]
c00228b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228b4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00228ba:	0f b6 d0             	movzx  edx,al
c00228bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00228c5:	83 e1 3f             	and    ecx,0x3f
c00228c8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00228cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228d6:	0f b6 d0             	movzx  edx,al
c00228d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228dd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00228e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228ee:	0f b6 d0             	movzx  edx,al
c00228f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00228fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022904:	8d 50 01             	lea    edx,[eax+0x1]
c0022907:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002290b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022911:	0f b6 d0             	movzx  edx,al
c0022914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022918:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002291c:	83 e1 3f             	and    ecx,0x3f
c002291f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022923:	90                   	nop
c0022924:	83 c4 0c             	add    esp,0xc
c0022927:	c3                   	ret    

c0022928 <PIC::ioWait()>:
c0022928:	eb 00                	jmp    c002292a <PIC::ioWait()+0x2>
c002292a:	eb 00                	jmp    c002292c <PIC::ioWait()+0x4>
c002292c:	90                   	nop
c002292d:	c3                   	ret    

c002292e <PIC::getIRQReg(int)>:
c002292e:	55                   	push   ebp
c002292f:	89 e5                	mov    ebp,esp
c0022931:	83 ec 10             	sub    esp,0x10
c0022934:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022937:	0f b6 c0             	movzx  eax,al
c002293a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022940:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022943:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022946:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002294a:	ee                   	out    dx,al
c002294b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002294e:	0f b6 c0             	movzx  eax,al
c0022951:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022957:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002295a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002295d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022961:	ee                   	out    dx,al
c0022962:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022968:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002296c:	89 c2                	mov    edx,eax
c002296e:	ec                   	in     al,dx
c002296f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022972:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022975:	0f b6 c0             	movzx  eax,al
c0022978:	c1 e0 08             	shl    eax,0x8
c002297b:	89 c1                	mov    ecx,eax
c002297d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022983:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022987:	89 c2                	mov    edx,eax
c0022989:	ec                   	in     al,dx
c002298a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002298d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022990:	0f b6 c0             	movzx  eax,al
c0022993:	09 c8                	or     eax,ecx
c0022995:	c9                   	leave  
c0022996:	c3                   	ret    
c0022997:	90                   	nop

c0022998 <PIC::eoi(unsigned char)>:
c0022998:	55                   	push   ebp
c0022999:	89 e5                	mov    ebp,esp
c002299b:	83 ec 14             	sub    esp,0x14
c002299e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00229a1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00229a4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00229a8:	75 1e                	jne    c00229c8 <PIC::eoi(unsigned char)+0x30>
c00229aa:	6a 0b                	push   0xb
c00229ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229af:	e8 7a ff ff ff       	call   c002292e <PIC::getIRQReg(int)>
c00229b4:	83 c4 08             	add    esp,0x8
c00229b7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00229bb:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00229bf:	25 80 00 00 00       	and    eax,0x80
c00229c4:	85 c0                	test   eax,eax
c00229c6:	74 5f                	je     c0022a27 <PIC::eoi(unsigned char)+0x8f>
c00229c8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00229cc:	75 2d                	jne    c00229fb <PIC::eoi(unsigned char)+0x63>
c00229ce:	6a 0b                	push   0xb
c00229d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229d3:	e8 56 ff ff ff       	call   c002292e <PIC::getIRQReg(int)>
c00229d8:	83 c4 08             	add    esp,0x8
c00229db:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00229df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00229e2:	66 85 c0             	test   ax,ax
c00229e5:	78 14                	js     c00229fb <PIC::eoi(unsigned char)+0x63>
c00229e7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00229ed:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00229f1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00229f4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00229f8:	ee                   	out    dx,al
c00229f9:	eb 2d                	jmp    c0022a28 <PIC::eoi(unsigned char)+0x90>
c00229fb:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00229ff:	76 12                	jbe    c0022a13 <PIC::eoi(unsigned char)+0x7b>
c0022a01:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022a07:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022a0b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022a0e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022a12:	ee                   	out    dx,al
c0022a13:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022a19:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022a1d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022a20:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022a24:	ee                   	out    dx,al
c0022a25:	eb 01                	jmp    c0022a28 <PIC::eoi(unsigned char)+0x90>
c0022a27:	90                   	nop
c0022a28:	c9                   	leave  
c0022a29:	c3                   	ret    

c0022a2a <PIC::remap()>:
c0022a2a:	55                   	push   ebp
c0022a2b:	89 e5                	mov    ebp,esp
c0022a2d:	83 ec 48             	sub    esp,0x48
c0022a30:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022a37:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022a3e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022a44:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022a47:	89 c2                	mov    edx,eax
c0022a49:	ec                   	in     al,dx
c0022a4a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022a4d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022a50:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022a53:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022a59:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022a5c:	89 c2                	mov    edx,eax
c0022a5e:	ec                   	in     al,dx
c0022a5f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022a62:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022a65:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022a68:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022a6e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022a72:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022a75:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022a78:	ee                   	out    dx,al
c0022a79:	83 ec 0c             	sub    esp,0xc
c0022a7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a7f:	e8 a4 fe ff ff       	call   c0022928 <PIC::ioWait()>
c0022a84:	83 c4 10             	add    esp,0x10
c0022a87:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022a8d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022a91:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022a94:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022a97:	ee                   	out    dx,al
c0022a98:	83 ec 0c             	sub    esp,0xc
c0022a9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a9e:	e8 85 fe ff ff       	call   c0022928 <PIC::ioWait()>
c0022aa3:	83 c4 10             	add    esp,0x10
c0022aa6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022aa9:	0f b6 c0             	movzx  eax,al
c0022aac:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022ab2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022ab5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022ab8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022abb:	ee                   	out    dx,al
c0022abc:	83 ec 0c             	sub    esp,0xc
c0022abf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ac2:	e8 61 fe ff ff       	call   c0022928 <PIC::ioWait()>
c0022ac7:	83 c4 10             	add    esp,0x10
c0022aca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022acd:	0f b6 c0             	movzx  eax,al
c0022ad0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022ad6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022ad9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022adc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022adf:	ee                   	out    dx,al
c0022ae0:	83 ec 0c             	sub    esp,0xc
c0022ae3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ae6:	e8 3d fe ff ff       	call   c0022928 <PIC::ioWait()>
c0022aeb:	83 c4 10             	add    esp,0x10
c0022aee:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022af4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022af8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022afb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022afe:	ee                   	out    dx,al
c0022aff:	83 ec 0c             	sub    esp,0xc
c0022b02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b05:	e8 1e fe ff ff       	call   c0022928 <PIC::ioWait()>
c0022b0a:	83 c4 10             	add    esp,0x10
c0022b0d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022b13:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022b17:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022b1a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022b1d:	ee                   	out    dx,al
c0022b1e:	83 ec 0c             	sub    esp,0xc
c0022b21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b24:	e8 ff fd ff ff       	call   c0022928 <PIC::ioWait()>
c0022b29:	83 c4 10             	add    esp,0x10
c0022b2c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022b32:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022b36:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022b39:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022b3c:	ee                   	out    dx,al
c0022b3d:	83 ec 0c             	sub    esp,0xc
c0022b40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b43:	e8 e0 fd ff ff       	call   c0022928 <PIC::ioWait()>
c0022b48:	83 c4 10             	add    esp,0x10
c0022b4b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022b51:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022b55:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022b58:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022b5b:	ee                   	out    dx,al
c0022b5c:	83 ec 0c             	sub    esp,0xc
c0022b5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b62:	e8 c1 fd ff ff       	call   c0022928 <PIC::ioWait()>
c0022b67:	83 c4 10             	add    esp,0x10
c0022b6a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022b6e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022b74:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022b77:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022b7a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022b7d:	ee                   	out    dx,al
c0022b7e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022b82:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022b88:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022b8b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022b8e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022b91:	ee                   	out    dx,al
c0022b92:	90                   	nop
c0022b93:	c9                   	leave  
c0022b94:	c3                   	ret    
c0022b95:	90                   	nop

c0022b96 <PIC::open(int, int, void*)>:
c0022b96:	55                   	push   ebp
c0022b97:	89 e5                	mov    ebp,esp
c0022b99:	83 ec 18             	sub    esp,0x18
c0022b9c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022ba2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022ba6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022ba9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022bad:	ee                   	out    dx,al
c0022bae:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022bb4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022bb8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022bbb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022bbf:	ee                   	out    dx,al
c0022bc0:	83 ec 0c             	sub    esp,0xc
c0022bc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bc6:	e8 5f fe ff ff       	call   c0022a2a <PIC::remap()>
c0022bcb:	83 c4 10             	add    esp,0x10
c0022bce:	b8 00 00 00 00       	mov    eax,0x0
c0022bd3:	c9                   	leave  
c0022bd4:	c3                   	ret    
c0022bd5:	90                   	nop

c0022bd6 <APICTimer::close(int, int, void*)>:
c0022bd6:	b8 00 00 00 00       	mov    eax,0x0
c0022bdb:	c3                   	ret    

c0022bdc <apicTimerHandler(regs*, void*)>:
c0022bdc:	83 ec 0c             	sub    esp,0xc
c0022bdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0022be5:	99                   	cdq    
c0022be6:	52                   	push   edx
c0022be7:	50                   	push   eax
c0022be8:	6a 00                	push   0x0
c0022bea:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022bef:	e8 68 07 00 00       	call   c002335c <__udivdi3>
c0022bf4:	83 c4 10             	add    esp,0x10
c0022bf7:	83 ec 08             	sub    esp,0x8
c0022bfa:	52                   	push   edx
c0022bfb:	50                   	push   eax
c0022bfc:	e8 a6 31 ff ff       	call   c0015da7 <timerHandler(unsigned long long)>
c0022c01:	83 c4 10             	add    esp,0x10
c0022c04:	90                   	nop
c0022c05:	83 c4 0c             	add    esp,0xc
c0022c08:	c3                   	ret    
c0022c09:	90                   	nop

c0022c0a <APICTimer::write(int)>:
c0022c0a:	53                   	push   ebx
c0022c0b:	83 ec 28             	sub    esp,0x28
c0022c0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c12:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022c16:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c1c:	e8 4f 4c ff ff       	call   c0017870 <CPU::current()>
c0022c21:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022c27:	83 ec 0c             	sub    esp,0xc
c0022c2a:	50                   	push   eax
c0022c2b:	e8 0e f6 ff ff       	call   c002223e <APIC::getBase()>
c0022c30:	83 c4 10             	add    esp,0x10
c0022c33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c37:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c3c:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022c46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022c4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c4e:	05 e0 03 00 00       	add    eax,0x3e0
c0022c53:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022c59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c5d:	05 80 03 00 00       	add    eax,0x380
c0022c62:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022c68:	fb                   	sti    
c0022c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c71:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022c76:	83 d2 00             	adc    edx,0x0
c0022c79:	89 c1                	mov    ecx,eax
c0022c7b:	89 d3                	mov    ebx,edx
c0022c7d:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c82:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c88:	39 c8                	cmp    eax,ecx
c0022c8a:	89 d0                	mov    eax,edx
c0022c8c:	19 d8                	sbb    eax,ebx
c0022c8e:	73 02                	jae    c0022c92 <APICTimer::write(int)+0x88>
c0022c90:	eb d7                	jmp    c0022c69 <APICTimer::write(int)+0x5f>
c0022c92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c96:	05 20 03 00 00       	add    eax,0x320
c0022c9b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022ca1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ca5:	05 90 03 00 00       	add    eax,0x390
c0022caa:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cac:	f7 d0                	not    eax
c0022cae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022cb2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022cb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cba:	ba 00 00 00 00       	mov    edx,0x0
c0022cbf:	f7 f3                	div    ebx
c0022cc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022cc9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022ccf:	0d 00 00 02 00       	or     eax,0x20000
c0022cd4:	89 c2                	mov    edx,eax
c0022cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cda:	05 20 03 00 00       	add    eax,0x320
c0022cdf:	89 10                	mov    DWORD PTR [eax],edx
c0022ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ce5:	05 e0 03 00 00       	add    eax,0x3e0
c0022cea:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022cf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cf4:	05 80 03 00 00       	add    eax,0x380
c0022cf9:	89 c2                	mov    edx,eax
c0022cfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cff:	89 02                	mov    DWORD PTR [edx],eax
c0022d01:	90                   	nop
c0022d02:	83 c4 28             	add    esp,0x28
c0022d05:	5b                   	pop    ebx
c0022d06:	c3                   	ret    
c0022d07:	90                   	nop

c0022d08 <APICTimer::open(int, int, void*)>:
c0022d08:	57                   	push   edi
c0022d09:	56                   	push   esi
c0022d0a:	53                   	push   ebx
c0022d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d11:	83 c0 24             	add    eax,0x24
c0022d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d16:	83 ec 08             	sub    esp,0x8
c0022d19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d21:	ff d0                	call   eax
c0022d23:	83 c4 10             	add    esp,0x10
c0022d26:	e8 45 4b ff ff       	call   c0017870 <CPU::current()>
c0022d2b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022d31:	83 ec 0c             	sub    esp,0xc
c0022d34:	50                   	push   eax
c0022d35:	e8 04 f5 ff ff       	call   c002223e <APIC::getBase()>
c0022d3a:	83 c4 10             	add    esp,0x10
c0022d3d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d47:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d4d:	0f b6 f8             	movzx  edi,al
c0022d50:	89 d0                	mov    eax,edx
c0022d52:	ba 00 00 00 00       	mov    edx,0x0
c0022d57:	89 c1                	mov    ecx,eax
c0022d59:	80 e5 ff             	and    ch,0xff
c0022d5c:	89 cb                	mov    ebx,ecx
c0022d5e:	0f b6 f2             	movzx  esi,dl
c0022d61:	89 d8                	mov    eax,ebx
c0022d63:	89 f2                	mov    edx,esi
c0022d65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d69:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022d6c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022d70:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022d74:	83 e0 00             	and    eax,0x0
c0022d77:	09 d0                	or     eax,edx
c0022d79:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d81:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d87:	8d 50 01             	lea    edx,[eax+0x1]
c0022d8a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d8e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022d94:	0f b6 d0             	movzx  edx,al
c0022d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d9b:	83 c2 08             	add    edx,0x8
c0022d9e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022da2:	0f b6 c9             	movzx  ecx,cl
c0022da5:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022dab:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022db3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022db7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022dc5:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022dcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022dcf:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022dd5:	83 ec 0c             	sub    esp,0xc
c0022dd8:	51                   	push   ecx
c0022dd9:	6a 01                	push   0x1
c0022ddb:	68 dc 2b 02 c0       	push   0xc0022bdc
c0022de0:	52                   	push   edx
c0022de1:	50                   	push   eax
c0022de2:	e8 cf 07 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022de7:	83 c4 20             	add    esp,0x20
c0022dea:	89 c2                	mov    edx,eax
c0022dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022df6:	b8 00 00 00 00       	mov    eax,0x0
c0022dfb:	5b                   	pop    ebx
c0022dfc:	5e                   	pop    esi
c0022dfd:	5f                   	pop    edi
c0022dfe:	c3                   	ret    
c0022dff:	90                   	nop

c0022e00 <APICTimer::APICTimer()>:
c0022e00:	83 ec 0c             	sub    esp,0xc
c0022e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e07:	83 ec 08             	sub    esp,0x8
c0022e0a:	68 10 93 02 c0       	push   0xc0029310
c0022e0f:	50                   	push   eax
c0022e10:	e8 03 2f ff ff       	call   c0015d18 <Timer::Timer(char const*)>
c0022e15:	83 c4 10             	add    esp,0x10
c0022e18:	ba 24 93 02 c0       	mov    edx,0xc0029324
c0022e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e21:	89 10                	mov    DWORD PTR [eax],edx
c0022e23:	90                   	nop
c0022e24:	83 c4 0c             	add    esp,0xc
c0022e27:	c3                   	ret    

c0022e28 <PIT::write(int)>:
c0022e28:	83 ec 10             	sub    esp,0x10
c0022e2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e33:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022e39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e3d:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0022e42:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022e47:	99                   	cdq    
c0022e48:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022e4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e50:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022e57:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022e5c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022e60:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022e65:	ee                   	out    dx,al
c0022e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e6a:	0f b6 c0             	movzx  eax,al
c0022e6d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022e74:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022e78:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022e7c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022e81:	ee                   	out    dx,al
c0022e82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e86:	c1 f8 08             	sar    eax,0x8
c0022e89:	0f b6 c0             	movzx  eax,al
c0022e8c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022e93:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022e97:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022e9b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022ea0:	ee                   	out    dx,al
c0022ea1:	90                   	nop
c0022ea2:	83 c4 10             	add    esp,0x10
c0022ea5:	c3                   	ret    

c0022ea6 <pitHandler(regs*, void*)>:
c0022ea6:	83 ec 0c             	sub    esp,0xc
c0022ea9:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0022eae:	99                   	cdq    
c0022eaf:	52                   	push   edx
c0022eb0:	50                   	push   eax
c0022eb1:	6a 00                	push   0x0
c0022eb3:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022eb8:	e8 9f 04 00 00       	call   c002335c <__udivdi3>
c0022ebd:	83 c4 10             	add    esp,0x10
c0022ec0:	83 ec 08             	sub    esp,0x8
c0022ec3:	52                   	push   edx
c0022ec4:	50                   	push   eax
c0022ec5:	e8 dd 2e ff ff       	call   c0015da7 <timerHandler(unsigned long long)>
c0022eca:	83 c4 10             	add    esp,0x10
c0022ecd:	90                   	nop
c0022ece:	83 c4 0c             	add    esp,0xc
c0022ed1:	c3                   	ret    

c0022ed2 <PIT::open(int, int, void*)>:
c0022ed2:	83 ec 0c             	sub    esp,0xc
c0022ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022edb:	83 c0 24             	add    eax,0x24
c0022ede:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ee0:	83 ec 08             	sub    esp,0x8
c0022ee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022eeb:	ff d0                	call   eax
c0022eed:	83 c4 10             	add    esp,0x10
c0022ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef4:	83 ec 0c             	sub    esp,0xc
c0022ef7:	6a 00                	push   0x0
c0022ef9:	6a 01                	push   0x1
c0022efb:	68 a6 2e 02 c0       	push   0xc0022ea6
c0022f00:	6a 00                	push   0x0
c0022f02:	50                   	push   eax
c0022f03:	e8 ae 06 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022f08:	83 c4 20             	add    esp,0x20
c0022f0b:	89 c2                	mov    edx,eax
c0022f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f11:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022f17:	b8 00 00 00 00       	mov    eax,0x0
c0022f1c:	83 c4 0c             	add    esp,0xc
c0022f1f:	c3                   	ret    

c0022f20 <PIT::close(int, int, void*)>:
c0022f20:	83 ec 0c             	sub    esp,0xc
c0022f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f27:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f35:	6a 01                	push   0x1
c0022f37:	68 a6 2e 02 c0       	push   0xc0022ea6
c0022f3c:	6a 00                	push   0x0
c0022f3e:	50                   	push   eax
c0022f3f:	e8 d0 06 ff ff       	call   c0013614 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022f44:	83 c4 10             	add    esp,0x10
c0022f47:	b8 00 00 00 00       	mov    eax,0x0
c0022f4c:	83 c4 0c             	add    esp,0xc
c0022f4f:	c3                   	ret    

c0022f50 <PIT::PIT()>:
c0022f50:	83 ec 0c             	sub    esp,0xc
c0022f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f57:	83 ec 08             	sub    esp,0x8
c0022f5a:	68 4c 93 02 c0       	push   0xc002934c
c0022f5f:	50                   	push   eax
c0022f60:	e8 b3 2d ff ff       	call   c0015d18 <Timer::Timer(char const*)>
c0022f65:	83 c4 10             	add    esp,0x10
c0022f68:	ba 74 93 02 c0       	mov    edx,0xc0029374
c0022f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f71:	89 10                	mov    DWORD PTR [eax],edx
c0022f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f77:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f7d:	0f b6 d0             	movzx  edx,al
c0022f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f84:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f95:	0f b6 d0             	movzx  edx,al
c0022f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f9c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fab:	8d 50 01             	lea    edx,[eax+0x1]
c0022fae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fb2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022fb8:	0f b6 d0             	movzx  edx,al
c0022fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022fc3:	83 e1 3f             	and    ecx,0x3f
c0022fc6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022fca:	90                   	nop
c0022fcb:	83 c4 0c             	add    esp,0xc
c0022fce:	c3                   	ret    
c0022fcf:	90                   	nop

c0022fd0 <avxDetect>:
c0022fd0:	b8 00 00 00 00       	mov    eax,0x0
c0022fd5:	c3                   	ret    

c0022fd6 <avxSave>:
c0022fd6:	c3                   	ret    

c0022fd7 <avxLoad>:
c0022fd7:	c3                   	ret    

c0022fd8 <avxInit>:
c0022fd8:	c3                   	ret    

c0022fd9 <avxClose>:
c0022fd9:	c3                   	ret    
c0022fda:	66 90                	xchg   ax,ax
c0022fdc:	66 90                	xchg   ax,ax
c0022fde:	66 90                	xchg   ax,ax

c0022fe0 <sseDetect>:
c0022fe0:	b8 01 00 00 00       	mov    eax,0x1
c0022fe5:	0f a2                	cpuid  
c0022fe7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022fed:	74 06                	je     c0022ff5 <sseDetect.noSSE>
c0022fef:	b8 01 00 00 00       	mov    eax,0x1
c0022ff4:	c3                   	ret    

c0022ff5 <sseDetect.noSSE>:
c0022ff5:	b8 00 00 00 00       	mov    eax,0x0
c0022ffa:	c3                   	ret    

c0022ffb <sseSave>:
c0022ffb:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023000:	c3                   	ret    

c0023001 <sseLoad>:
c0023001:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023006:	c3                   	ret    

c0023007 <sseInit>:
c0023007:	e8 40 00 00 00       	call   c002304c <x87Init>
c002300c:	0f 20 e0             	mov    eax,cr4
c002300f:	66 0d 00 06          	or     ax,0x600
c0023013:	0f 22 e0             	mov    cr4,eax
c0023016:	c3                   	ret    

c0023017 <sseClose>:
c0023017:	c3                   	ret    
c0023018:	66 90                	xchg   ax,ax
c002301a:	66 90                	xchg   ax,ax
c002301c:	66 90                	xchg   ax,ax
c002301e:	66 90                	xchg   ax,ax

c0023020 <value_37F>:
c0023020:	7f 03                	jg     c0023025 <value_37A+0x1>

c0023022 <value_37E>:
c0023022:	7e 03                	jle    c0023027 <x87Detect+0x1>

c0023024 <value_37A>:
c0023024:	7a 03                	jp     c0023029 <x87Detect+0x3>

c0023026 <x87Detect>:
c0023026:	b8 01 00 00 00       	mov    eax,0x1
c002302b:	0f a2                	cpuid  
c002302d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023033:	74 06                	je     c002303b <x87Detect.nox87>
c0023035:	b8 01 00 00 00       	mov    eax,0x1
c002303a:	c3                   	ret    

c002303b <x87Detect.nox87>:
c002303b:	b8 00 00 00 00       	mov    eax,0x0
c0023040:	c3                   	ret    

c0023041 <x87Save>:
c0023041:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023046:	c3                   	ret    

c0023047 <x87Load>:
c0023047:	dd 64 24 08          	frstor [esp+0x8]
c002304b:	c3                   	ret    

c002304c <x87Init>:
c002304c:	9b db e3             	finit  
c002304f:	0f 20 c0             	mov    eax,cr0
c0023052:	66 25 fb ff          	and    ax,0xfffb
c0023056:	66 0d 22 00          	or     ax,0x22
c002305a:	0f 22 c0             	mov    cr0,eax
c002305d:	0f 06                	clts   
c002305f:	d9 2d 24 30 02 c0    	fldcw  WORD PTR ds:0xc0023024
c0023065:	c3                   	ret    

c0023066 <x87Close>:
c0023066:	c3                   	ret    
c0023067:	90                   	nop

c0023068 <__do_global_ctors_aux>:
c0023068:	a1 98 5b 02 c0       	mov    eax,ds:0xc0025b98
c002306d:	83 f8 ff             	cmp    eax,0xffffffff
c0023070:	74 1a                	je     c002308c <__do_global_ctors_aux+0x24>
c0023072:	55                   	push   ebp
c0023073:	89 e5                	mov    ebp,esp
c0023075:	53                   	push   ebx
c0023076:	52                   	push   edx
c0023077:	bb 98 5b 02 c0       	mov    ebx,0xc0025b98
c002307c:	ff d0                	call   eax
c002307e:	83 eb 04             	sub    ebx,0x4
c0023081:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023083:	83 f8 ff             	cmp    eax,0xffffffff
c0023086:	75 f4                	jne    c002307c <__do_global_ctors_aux+0x14>
c0023088:	58                   	pop    eax
c0023089:	5b                   	pop    ebx
c002308a:	5d                   	pop    ebp
c002308b:	c3                   	ret    
c002308c:	c3                   	ret    
c002308d:	66 90                	xchg   ax,ax
c002308f:	90                   	nop

c0023090 <__divdi3>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	83 ec 1c             	sub    esp,0x1c
c0023097:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002309b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002309f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00230a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00230a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00230aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00230ae:	85 db                	test   ebx,ebx
c00230b0:	0f 88 8e 00 00 00    	js     c0023144 <__divdi3+0xb4>
c00230b6:	89 dd                	mov    ebp,ebx
c00230b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00230c0:	89 d3                	mov    ebx,edx
c00230c2:	85 d2                	test   edx,edx
c00230c4:	79 0d                	jns    c00230d3 <__divdi3+0x43>
c00230c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00230ca:	f7 d8                	neg    eax
c00230cc:	83 d2 00             	adc    edx,0x0
c00230cf:	f7 da                	neg    edx
c00230d1:	89 d3                	mov    ebx,edx
c00230d3:	89 c7                	mov    edi,eax
c00230d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00230d8:	85 db                	test   ebx,ebx
c00230da:	75 48                	jne    c0023124 <__divdi3+0x94>
c00230dc:	39 ef                	cmp    edi,ebp
c00230de:	76 24                	jbe    c0023104 <__divdi3+0x74>
c00230e0:	89 ea                	mov    edx,ebp
c00230e2:	f7 f7                	div    edi
c00230e4:	89 c1                	mov    ecx,eax
c00230e6:	31 f6                	xor    esi,esi
c00230e8:	89 c8                	mov    eax,ecx
c00230ea:	89 f2                	mov    edx,esi
c00230ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00230f0:	85 c9                	test   ecx,ecx
c00230f2:	74 07                	je     c00230fb <__divdi3+0x6b>
c00230f4:	f7 d8                	neg    eax
c00230f6:	83 d2 00             	adc    edx,0x0
c00230f9:	f7 da                	neg    edx
c00230fb:	83 c4 1c             	add    esp,0x1c
c00230fe:	5b                   	pop    ebx
c00230ff:	5e                   	pop    esi
c0023100:	5f                   	pop    edi
c0023101:	5d                   	pop    ebp
c0023102:	c3                   	ret    
c0023103:	90                   	nop
c0023104:	85 ff                	test   edi,edi
c0023106:	75 0b                	jne    c0023113 <__divdi3+0x83>
c0023108:	b8 01 00 00 00       	mov    eax,0x1
c002310d:	31 d2                	xor    edx,edx
c002310f:	f7 f3                	div    ebx
c0023111:	89 c7                	mov    edi,eax
c0023113:	31 d2                	xor    edx,edx
c0023115:	89 e8                	mov    eax,ebp
c0023117:	f7 f7                	div    edi
c0023119:	89 c6                	mov    esi,eax
c002311b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002311e:	f7 f7                	div    edi
c0023120:	89 c1                	mov    ecx,eax
c0023122:	eb c4                	jmp    c00230e8 <__divdi3+0x58>
c0023124:	39 eb                	cmp    ebx,ebp
c0023126:	77 3c                	ja     c0023164 <__divdi3+0xd4>
c0023128:	0f bd f3             	bsr    esi,ebx
c002312b:	83 f6 1f             	xor    esi,0x1f
c002312e:	75 40                	jne    c0023170 <__divdi3+0xe0>
c0023130:	39 eb                	cmp    ebx,ebp
c0023132:	72 09                	jb     c002313d <__divdi3+0xad>
c0023134:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023137:	0f 87 97 00 00 00    	ja     c00231d4 <__divdi3+0x144>
c002313d:	b9 01 00 00 00       	mov    ecx,0x1
c0023142:	eb a4                	jmp    c00230e8 <__divdi3+0x58>
c0023144:	f7 d9                	neg    ecx
c0023146:	83 d3 00             	adc    ebx,0x0
c0023149:	f7 db                	neg    ebx
c002314b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002314e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023152:	89 dd                	mov    ebp,ebx
c0023154:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002315c:	e9 5f ff ff ff       	jmp    c00230c0 <__divdi3+0x30>
c0023161:	8d 76 00             	lea    esi,[esi+0x0]
c0023164:	31 f6                	xor    esi,esi
c0023166:	31 c9                	xor    ecx,ecx
c0023168:	e9 7b ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c002316d:	8d 76 00             	lea    esi,[esi+0x0]
c0023170:	b8 20 00 00 00       	mov    eax,0x20
c0023175:	29 f0                	sub    eax,esi
c0023177:	89 f1                	mov    ecx,esi
c0023179:	d3 e3                	shl    ebx,cl
c002317b:	89 fa                	mov    edx,edi
c002317d:	88 c1                	mov    cl,al
c002317f:	d3 ea                	shr    edx,cl
c0023181:	09 da                	or     edx,ebx
c0023183:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023187:	89 f1                	mov    ecx,esi
c0023189:	d3 e7                	shl    edi,cl
c002318b:	89 eb                	mov    ebx,ebp
c002318d:	88 c1                	mov    cl,al
c002318f:	d3 eb                	shr    ebx,cl
c0023191:	89 f1                	mov    ecx,esi
c0023193:	d3 e5                	shl    ebp,cl
c0023195:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023198:	88 c1                	mov    cl,al
c002319a:	d3 ea                	shr    edx,cl
c002319c:	09 d5                	or     ebp,edx
c002319e:	89 e8                	mov    eax,ebp
c00231a0:	89 da                	mov    edx,ebx
c00231a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00231a6:	89 d3                	mov    ebx,edx
c00231a8:	89 c5                	mov    ebp,eax
c00231aa:	f7 e7                	mul    edi
c00231ac:	39 d3                	cmp    ebx,edx
c00231ae:	72 18                	jb     c00231c8 <__divdi3+0x138>
c00231b0:	74 0a                	je     c00231bc <__divdi3+0x12c>
c00231b2:	89 e9                	mov    ecx,ebp
c00231b4:	31 f6                	xor    esi,esi
c00231b6:	e9 2d ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231bb:	90                   	nop
c00231bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00231bf:	89 f1                	mov    ecx,esi
c00231c1:	d3 e7                	shl    edi,cl
c00231c3:	39 c7                	cmp    edi,eax
c00231c5:	73 eb                	jae    c00231b2 <__divdi3+0x122>
c00231c7:	90                   	nop
c00231c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00231cb:	31 f6                	xor    esi,esi
c00231cd:	e9 16 ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231d2:	66 90                	xchg   ax,ax
c00231d4:	31 c9                	xor    ecx,ecx
c00231d6:	e9 0d ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231db:	90                   	nop

c00231dc <__moddi3>:
c00231dc:	55                   	push   ebp
c00231dd:	57                   	push   edi
c00231de:	56                   	push   esi
c00231df:	53                   	push   ebx
c00231e0:	83 ec 2c             	sub    esp,0x2c
c00231e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00231e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00231eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00231ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00231f3:	85 db                	test   ebx,ebx
c00231f5:	0f 88 85 00 00 00    	js     c0023280 <__moddi3+0xa4>
c00231fb:	89 de                	mov    esi,ebx
c00231fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023205:	89 d7                	mov    edi,edx
c0023207:	85 d2                	test   edx,edx
c0023209:	79 09                	jns    c0023214 <__moddi3+0x38>
c002320b:	f7 d8                	neg    eax
c002320d:	83 d2 00             	adc    edx,0x0
c0023210:	f7 da                	neg    edx
c0023212:	89 d7                	mov    edi,edx
c0023214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023218:	89 cd                	mov    ebp,ecx
c002321a:	85 ff                	test   edi,edi
c002321c:	75 52                	jne    c0023270 <__moddi3+0x94>
c002321e:	89 c3                	mov    ebx,eax
c0023220:	39 f0                	cmp    eax,esi
c0023222:	76 24                	jbe    c0023248 <__moddi3+0x6c>
c0023224:	89 c8                	mov    eax,ecx
c0023226:	89 f2                	mov    edx,esi
c0023228:	f7 f3                	div    ebx
c002322a:	89 d6                	mov    esi,edx
c002322c:	89 f0                	mov    eax,esi
c002322e:	31 d2                	xor    edx,edx
c0023230:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023234:	85 c9                	test   ecx,ecx
c0023236:	74 07                	je     c002323f <__moddi3+0x63>
c0023238:	f7 d8                	neg    eax
c002323a:	83 d2 00             	adc    edx,0x0
c002323d:	f7 da                	neg    edx
c002323f:	83 c4 2c             	add    esp,0x2c
c0023242:	5b                   	pop    ebx
c0023243:	5e                   	pop    esi
c0023244:	5f                   	pop    edi
c0023245:	5d                   	pop    ebp
c0023246:	c3                   	ret    
c0023247:	90                   	nop
c0023248:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002324c:	85 db                	test   ebx,ebx
c002324e:	75 0d                	jne    c002325d <__moddi3+0x81>
c0023250:	b8 01 00 00 00       	mov    eax,0x1
c0023255:	31 d2                	xor    edx,edx
c0023257:	f7 f7                	div    edi
c0023259:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002325d:	89 f0                	mov    eax,esi
c002325f:	31 d2                	xor    edx,edx
c0023261:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023265:	f7 f7                	div    edi
c0023267:	89 e8                	mov    eax,ebp
c0023269:	f7 f7                	div    edi
c002326b:	89 d6                	mov    esi,edx
c002326d:	eb bd                	jmp    c002322c <__moddi3+0x50>
c002326f:	90                   	nop
c0023270:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023274:	39 f7                	cmp    edi,esi
c0023276:	76 20                	jbe    c0023298 <__moddi3+0xbc>
c0023278:	89 c8                	mov    eax,ecx
c002327a:	89 f2                	mov    edx,esi
c002327c:	eb b2                	jmp    c0023230 <__moddi3+0x54>
c002327e:	66 90                	xchg   ax,ax
c0023280:	f7 d9                	neg    ecx
c0023282:	83 d3 00             	adc    ebx,0x0
c0023285:	f7 db                	neg    ebx
c0023287:	89 de                	mov    esi,ebx
c0023289:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023291:	e9 6f ff ff ff       	jmp    c0023205 <__moddi3+0x29>
c0023296:	66 90                	xchg   ax,ax
c0023298:	0f bd c7             	bsr    eax,edi
c002329b:	83 f0 1f             	xor    eax,0x1f
c002329e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00232a2:	75 24                	jne    c00232c8 <__moddi3+0xec>
c00232a4:	39 f7                	cmp    edi,esi
c00232a6:	72 06                	jb     c00232ae <__moddi3+0xd2>
c00232a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00232ac:	77 0c                	ja     c00232ba <__moddi3+0xde>
c00232ae:	89 e9                	mov    ecx,ebp
c00232b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00232b4:	19 fe                	sbb    esi,edi
c00232b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00232ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00232be:	89 f2                	mov    edx,esi
c00232c0:	e9 6b ff ff ff       	jmp    c0023230 <__moddi3+0x54>
c00232c5:	8d 76 00             	lea    esi,[esi+0x0]
c00232c8:	b8 20 00 00 00       	mov    eax,0x20
c00232cd:	89 c2                	mov    edx,eax
c00232cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00232d3:	29 da                	sub    edx,ebx
c00232d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00232d9:	88 d9                	mov    cl,bl
c00232db:	d3 e7                	shl    edi,cl
c00232dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232e1:	88 d1                	mov    cl,dl
c00232e3:	d3 e8                	shr    eax,cl
c00232e5:	09 c7                	or     edi,eax
c00232e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00232eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00232ef:	89 d8                	mov    eax,ebx
c00232f1:	88 d9                	mov    cl,bl
c00232f3:	d3 e7                	shl    edi,cl
c00232f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00232f9:	89 f3                	mov    ebx,esi
c00232fb:	88 d1                	mov    cl,dl
c00232fd:	d3 eb                	shr    ebx,cl
c00232ff:	89 c7                	mov    edi,eax
c0023301:	88 c1                	mov    cl,al
c0023303:	d3 e6                	shl    esi,cl
c0023305:	89 e8                	mov    eax,ebp
c0023307:	88 d1                	mov    cl,dl
c0023309:	d3 e8                	shr    eax,cl
c002330b:	09 f0                	or     eax,esi
c002330d:	89 f9                	mov    ecx,edi
c002330f:	d3 e5                	shl    ebp,cl
c0023311:	89 da                	mov    edx,ebx
c0023313:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023317:	89 d3                	mov    ebx,edx
c0023319:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002331d:	89 c6                	mov    esi,eax
c002331f:	89 d1                	mov    ecx,edx
c0023321:	39 d3                	cmp    ebx,edx
c0023323:	72 27                	jb     c002334c <__moddi3+0x170>
c0023325:	74 21                	je     c0023348 <__moddi3+0x16c>
c0023327:	29 f5                	sub    ebp,esi
c0023329:	19 cb                	sbb    ebx,ecx
c002332b:	89 de                	mov    esi,ebx
c002332d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023331:	d3 e6                	shl    esi,cl
c0023333:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023337:	89 f9                	mov    ecx,edi
c0023339:	d3 ed                	shr    ebp,cl
c002333b:	09 ee                	or     esi,ebp
c002333d:	89 f0                	mov    eax,esi
c002333f:	d3 eb                	shr    ebx,cl
c0023341:	89 da                	mov    edx,ebx
c0023343:	e9 e8 fe ff ff       	jmp    c0023230 <__moddi3+0x54>
c0023348:	39 c5                	cmp    ebp,eax
c002334a:	73 db                	jae    c0023327 <__moddi3+0x14b>
c002334c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023350:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023354:	89 d1                	mov    ecx,edx
c0023356:	89 c6                	mov    esi,eax
c0023358:	eb cd                	jmp    c0023327 <__moddi3+0x14b>
c002335a:	66 90                	xchg   ax,ax

c002335c <__udivdi3>:
c002335c:	55                   	push   ebp
c002335d:	57                   	push   edi
c002335e:	56                   	push   esi
c002335f:	53                   	push   ebx
c0023360:	83 ec 1c             	sub    esp,0x1c
c0023363:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023367:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002336b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002336f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023373:	85 d2                	test   edx,edx
c0023375:	75 41                	jne    c00233b8 <__udivdi3+0x5c>
c0023377:	39 f7                	cmp    edi,esi
c0023379:	76 15                	jbe    c0023390 <__udivdi3+0x34>
c002337b:	89 e8                	mov    eax,ebp
c002337d:	89 f2                	mov    edx,esi
c002337f:	f7 f7                	div    edi
c0023381:	31 db                	xor    ebx,ebx
c0023383:	89 da                	mov    edx,ebx
c0023385:	83 c4 1c             	add    esp,0x1c
c0023388:	5b                   	pop    ebx
c0023389:	5e                   	pop    esi
c002338a:	5f                   	pop    edi
c002338b:	5d                   	pop    ebp
c002338c:	c3                   	ret    
c002338d:	8d 76 00             	lea    esi,[esi+0x0]
c0023390:	89 f9                	mov    ecx,edi
c0023392:	85 ff                	test   edi,edi
c0023394:	75 0b                	jne    c00233a1 <__udivdi3+0x45>
c0023396:	b8 01 00 00 00       	mov    eax,0x1
c002339b:	31 d2                	xor    edx,edx
c002339d:	f7 f7                	div    edi
c002339f:	89 c1                	mov    ecx,eax
c00233a1:	31 d2                	xor    edx,edx
c00233a3:	89 f0                	mov    eax,esi
c00233a5:	f7 f1                	div    ecx
c00233a7:	89 c3                	mov    ebx,eax
c00233a9:	89 e8                	mov    eax,ebp
c00233ab:	f7 f1                	div    ecx
c00233ad:	89 da                	mov    edx,ebx
c00233af:	83 c4 1c             	add    esp,0x1c
c00233b2:	5b                   	pop    ebx
c00233b3:	5e                   	pop    esi
c00233b4:	5f                   	pop    edi
c00233b5:	5d                   	pop    ebp
c00233b6:	c3                   	ret    
c00233b7:	90                   	nop
c00233b8:	39 f2                	cmp    edx,esi
c00233ba:	77 1c                	ja     c00233d8 <__udivdi3+0x7c>
c00233bc:	0f bd da             	bsr    ebx,edx
c00233bf:	83 f3 1f             	xor    ebx,0x1f
c00233c2:	75 24                	jne    c00233e8 <__udivdi3+0x8c>
c00233c4:	39 f2                	cmp    edx,esi
c00233c6:	72 08                	jb     c00233d0 <__udivdi3+0x74>
c00233c8:	39 ef                	cmp    edi,ebp
c00233ca:	0f 87 84 00 00 00    	ja     c0023454 <__udivdi3+0xf8>
c00233d0:	b8 01 00 00 00       	mov    eax,0x1
c00233d5:	eb ac                	jmp    c0023383 <__udivdi3+0x27>
c00233d7:	90                   	nop
c00233d8:	31 db                	xor    ebx,ebx
c00233da:	31 c0                	xor    eax,eax
c00233dc:	89 da                	mov    edx,ebx
c00233de:	83 c4 1c             	add    esp,0x1c
c00233e1:	5b                   	pop    ebx
c00233e2:	5e                   	pop    esi
c00233e3:	5f                   	pop    edi
c00233e4:	5d                   	pop    ebp
c00233e5:	c3                   	ret    
c00233e6:	66 90                	xchg   ax,ax
c00233e8:	b8 20 00 00 00       	mov    eax,0x20
c00233ed:	29 d8                	sub    eax,ebx
c00233ef:	88 d9                	mov    cl,bl
c00233f1:	d3 e2                	shl    edx,cl
c00233f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00233f7:	89 fa                	mov    edx,edi
c00233f9:	88 c1                	mov    cl,al
c00233fb:	d3 ea                	shr    edx,cl
c00233fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023401:	09 d1                	or     ecx,edx
c0023403:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023407:	88 d9                	mov    cl,bl
c0023409:	d3 e7                	shl    edi,cl
c002340b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002340f:	89 f7                	mov    edi,esi
c0023411:	88 c1                	mov    cl,al
c0023413:	d3 ef                	shr    edi,cl
c0023415:	88 d9                	mov    cl,bl
c0023417:	d3 e6                	shl    esi,cl
c0023419:	89 ea                	mov    edx,ebp
c002341b:	88 c1                	mov    cl,al
c002341d:	d3 ea                	shr    edx,cl
c002341f:	09 d6                	or     esi,edx
c0023421:	89 f0                	mov    eax,esi
c0023423:	89 fa                	mov    edx,edi
c0023425:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023429:	89 d7                	mov    edi,edx
c002342b:	89 c6                	mov    esi,eax
c002342d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023431:	39 d7                	cmp    edi,edx
c0023433:	72 13                	jb     c0023448 <__udivdi3+0xec>
c0023435:	74 09                	je     c0023440 <__udivdi3+0xe4>
c0023437:	89 f0                	mov    eax,esi
c0023439:	31 db                	xor    ebx,ebx
c002343b:	e9 43 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c0023440:	88 d9                	mov    cl,bl
c0023442:	d3 e5                	shl    ebp,cl
c0023444:	39 c5                	cmp    ebp,eax
c0023446:	73 ef                	jae    c0023437 <__udivdi3+0xdb>
c0023448:	8d 46 ff             	lea    eax,[esi-0x1]
c002344b:	31 db                	xor    ebx,ebx
c002344d:	e9 31 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c0023452:	66 90                	xchg   ax,ax
c0023454:	31 c0                	xor    eax,eax
c0023456:	e9 28 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c002345b:	90                   	nop

c002345c <__umoddi3>:
c002345c:	55                   	push   ebp
c002345d:	57                   	push   edi
c002345e:	56                   	push   esi
c002345f:	53                   	push   ebx
c0023460:	83 ec 1c             	sub    esp,0x1c
c0023463:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023467:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002346b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002346f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023473:	89 da                	mov    edx,ebx
c0023475:	85 c0                	test   eax,eax
c0023477:	75 37                	jne    c00234b0 <__umoddi3+0x54>
c0023479:	39 df                	cmp    edi,ebx
c002347b:	76 13                	jbe    c0023490 <__umoddi3+0x34>
c002347d:	89 f0                	mov    eax,esi
c002347f:	f7 f7                	div    edi
c0023481:	89 d0                	mov    eax,edx
c0023483:	31 d2                	xor    edx,edx
c0023485:	83 c4 1c             	add    esp,0x1c
c0023488:	5b                   	pop    ebx
c0023489:	5e                   	pop    esi
c002348a:	5f                   	pop    edi
c002348b:	5d                   	pop    ebp
c002348c:	c3                   	ret    
c002348d:	8d 76 00             	lea    esi,[esi+0x0]
c0023490:	89 fd                	mov    ebp,edi
c0023492:	85 ff                	test   edi,edi
c0023494:	75 0b                	jne    c00234a1 <__umoddi3+0x45>
c0023496:	b8 01 00 00 00       	mov    eax,0x1
c002349b:	31 d2                	xor    edx,edx
c002349d:	f7 f7                	div    edi
c002349f:	89 c5                	mov    ebp,eax
c00234a1:	89 d8                	mov    eax,ebx
c00234a3:	31 d2                	xor    edx,edx
c00234a5:	f7 f5                	div    ebp
c00234a7:	89 f0                	mov    eax,esi
c00234a9:	f7 f5                	div    ebp
c00234ab:	89 d0                	mov    eax,edx
c00234ad:	eb d4                	jmp    c0023483 <__umoddi3+0x27>
c00234af:	90                   	nop
c00234b0:	89 f1                	mov    ecx,esi
c00234b2:	39 d8                	cmp    eax,ebx
c00234b4:	76 0a                	jbe    c00234c0 <__umoddi3+0x64>
c00234b6:	89 f0                	mov    eax,esi
c00234b8:	83 c4 1c             	add    esp,0x1c
c00234bb:	5b                   	pop    ebx
c00234bc:	5e                   	pop    esi
c00234bd:	5f                   	pop    edi
c00234be:	5d                   	pop    ebp
c00234bf:	c3                   	ret    
c00234c0:	0f bd e8             	bsr    ebp,eax
c00234c3:	83 f5 1f             	xor    ebp,0x1f
c00234c6:	75 1c                	jne    c00234e4 <__umoddi3+0x88>
c00234c8:	39 d8                	cmp    eax,ebx
c00234ca:	72 04                	jb     c00234d0 <__umoddi3+0x74>
c00234cc:	39 f7                	cmp    edi,esi
c00234ce:	77 08                	ja     c00234d8 <__umoddi3+0x7c>
c00234d0:	89 da                	mov    edx,ebx
c00234d2:	29 fe                	sub    esi,edi
c00234d4:	19 c2                	sbb    edx,eax
c00234d6:	89 f1                	mov    ecx,esi
c00234d8:	89 c8                	mov    eax,ecx
c00234da:	83 c4 1c             	add    esp,0x1c
c00234dd:	5b                   	pop    ebx
c00234de:	5e                   	pop    esi
c00234df:	5f                   	pop    edi
c00234e0:	5d                   	pop    ebp
c00234e1:	c3                   	ret    
c00234e2:	66 90                	xchg   ax,ax
c00234e4:	ba 20 00 00 00       	mov    edx,0x20
c00234e9:	29 ea                	sub    edx,ebp
c00234eb:	89 e9                	mov    ecx,ebp
c00234ed:	d3 e0                	shl    eax,cl
c00234ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234f3:	89 f8                	mov    eax,edi
c00234f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00234f9:	88 d1                	mov    cl,dl
c00234fb:	d3 e8                	shr    eax,cl
c00234fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023501:	09 c1                	or     ecx,eax
c0023503:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023507:	89 e9                	mov    ecx,ebp
c0023509:	d3 e7                	shl    edi,cl
c002350b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002350f:	89 d8                	mov    eax,ebx
c0023511:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023515:	88 d1                	mov    cl,dl
c0023517:	d3 e8                	shr    eax,cl
c0023519:	89 c7                	mov    edi,eax
c002351b:	89 e9                	mov    ecx,ebp
c002351d:	d3 e3                	shl    ebx,cl
c002351f:	89 f0                	mov    eax,esi
c0023521:	88 d1                	mov    cl,dl
c0023523:	d3 e8                	shr    eax,cl
c0023525:	09 d8                	or     eax,ebx
c0023527:	89 e9                	mov    ecx,ebp
c0023529:	d3 e6                	shl    esi,cl
c002352b:	89 f3                	mov    ebx,esi
c002352d:	89 fa                	mov    edx,edi
c002352f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023533:	89 d1                	mov    ecx,edx
c0023535:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023539:	89 c6                	mov    esi,eax
c002353b:	89 d7                	mov    edi,edx
c002353d:	39 d1                	cmp    ecx,edx
c002353f:	72 27                	jb     c0023568 <__umoddi3+0x10c>
c0023541:	74 21                	je     c0023564 <__umoddi3+0x108>
c0023543:	89 ca                	mov    edx,ecx
c0023545:	29 f3                	sub    ebx,esi
c0023547:	19 fa                	sbb    edx,edi
c0023549:	89 d0                	mov    eax,edx
c002354b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002354f:	d3 e0                	shl    eax,cl
c0023551:	89 e9                	mov    ecx,ebp
c0023553:	d3 eb                	shr    ebx,cl
c0023555:	09 d8                	or     eax,ebx
c0023557:	d3 ea                	shr    edx,cl
c0023559:	83 c4 1c             	add    esp,0x1c
c002355c:	5b                   	pop    ebx
c002355d:	5e                   	pop    esi
c002355e:	5f                   	pop    edi
c002355f:	5d                   	pop    ebp
c0023560:	c3                   	ret    
c0023561:	8d 76 00             	lea    esi,[esi+0x0]
c0023564:	39 c3                	cmp    ebx,eax
c0023566:	73 db                	jae    c0023543 <__umoddi3+0xe7>
c0023568:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002356c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023570:	89 d7                	mov    edi,edx
c0023572:	89 c6                	mov    esi,eax
c0023574:	eb cd                	jmp    c0023543 <__umoddi3+0xe7>

c0023576 <__addsf3>:
c0023576:	55                   	push   ebp
c0023577:	89 e5                	mov    ebp,esp
c0023579:	57                   	push   edi
c002357a:	56                   	push   esi
c002357b:	53                   	push   ebx
c002357c:	83 ec 08             	sub    esp,0x8
c002357f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023582:	89 fa                	mov    edx,edi
c0023584:	89 f8                	mov    eax,edi
c0023586:	c1 f8 17             	sar    eax,0x17
c0023589:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002358c:	c1 e2 08             	shl    edx,0x8
c002358f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023595:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023598:	89 de                	mov    esi,ebx
c002359a:	c1 fe 17             	sar    esi,0x17
c002359d:	c1 e3 08             	shl    ebx,0x8
c00235a0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00235a6:	31 f0                	xor    eax,esi
c00235a8:	0f 88 3b 01 00 00    	js     c00236e9 <__addsf3+0x173>
c00235ae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00235b1:	29 f1                	sub    ecx,esi
c00235b3:	85 c9                	test   ecx,ecx
c00235b5:	7e 54                	jle    c002360b <__addsf3+0x95>
c00235b7:	89 f0                	mov    eax,esi
c00235b9:	84 c0                	test   al,al
c00235bb:	75 10                	jne    c00235cd <__addsf3+0x57>
c00235bd:	85 db                	test   ebx,ebx
c00235bf:	0f 84 aa 02 00 00    	je     c002386f <__addsf3+0x2f9>
c00235c5:	49                   	dec    ecx
c00235c6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00235c9:	74 38                	je     c0023603 <__addsf3+0x8d>
c00235cb:	eb 13                	jmp    c00235e0 <__addsf3+0x6a>
c00235cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00235d0:	f7 d0                	not    eax
c00235d2:	84 c0                	test   al,al
c00235d4:	0f 84 95 02 00 00    	je     c002386f <__addsf3+0x2f9>
c00235da:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00235e0:	83 f9 1f             	cmp    ecx,0x1f
c00235e3:	0f 8f 86 02 00 00    	jg     c002386f <__addsf3+0x2f9>
c00235e9:	89 de                	mov    esi,ebx
c00235eb:	d3 ee                	shr    esi,cl
c00235ed:	b8 20 00 00 00       	mov    eax,0x20
c00235f2:	29 c8                	sub    eax,ecx
c00235f4:	89 c1                	mov    ecx,eax
c00235f6:	d3 e3                	shl    ebx,cl
c00235f8:	31 c0                	xor    eax,eax
c00235fa:	85 db                	test   ebx,ebx
c00235fc:	0f 95 c0             	setne  al
c00235ff:	09 f0                	or     eax,esi
c0023601:	01 d0                	add    eax,edx
c0023603:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023606:	e9 b6 00 00 00       	jmp    c00236c1 <__addsf3+0x14b>
c002360b:	74 5c                	je     c0023669 <__addsf3+0xf3>
c002360d:	89 f1                	mov    ecx,esi
c002360f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023612:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023615:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023619:	75 14                	jne    c002362f <__addsf3+0xb9>
c002361b:	85 d2                	test   edx,edx
c002361d:	0f 84 4c 02 00 00    	je     c002386f <__addsf3+0x2f9>
c0023623:	49                   	dec    ecx
c0023624:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023627:	0f 84 94 00 00 00    	je     c00236c1 <__addsf3+0x14b>
c002362d:	eb 12                	jmp    c0023641 <__addsf3+0xcb>
c002362f:	89 f0                	mov    eax,esi
c0023631:	f7 d0                	not    eax
c0023633:	84 c0                	test   al,al
c0023635:	0f 84 34 02 00 00    	je     c002386f <__addsf3+0x2f9>
c002363b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023641:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023644:	83 f9 1f             	cmp    ecx,0x1f
c0023647:	0f 8f 22 02 00 00    	jg     c002386f <__addsf3+0x2f9>
c002364d:	89 d7                	mov    edi,edx
c002364f:	d3 ef                	shr    edi,cl
c0023651:	b8 20 00 00 00       	mov    eax,0x20
c0023656:	29 c8                	sub    eax,ecx
c0023658:	89 c1                	mov    ecx,eax
c002365a:	d3 e2                	shl    edx,cl
c002365c:	31 c0                	xor    eax,eax
c002365e:	85 d2                	test   edx,edx
c0023660:	0f 95 c0             	setne  al
c0023663:	09 f8                	or     eax,edi
c0023665:	01 d8                	add    eax,ebx
c0023667:	eb 58                	jmp    c00236c1 <__addsf3+0x14b>
c0023669:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002366c:	8d 70 01             	lea    esi,[eax+0x1]
c002366f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023675:	75 32                	jne    c00236a9 <__addsf3+0x133>
c0023677:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002367b:	75 1f                	jne    c002369c <__addsf3+0x126>
c002367d:	85 d2                	test   edx,edx
c002367f:	0f 84 e0 01 00 00    	je     c0023865 <__addsf3+0x2ef>
c0023685:	85 db                	test   ebx,ebx
c0023687:	0f 84 e2 01 00 00    	je     c002386f <__addsf3+0x2f9>
c002368d:	89 d0                	mov    eax,edx
c002368f:	01 d8                	add    eax,ebx
c0023691:	0f 89 a9 01 00 00    	jns    c0023840 <__addsf3+0x2ca>
c0023697:	e9 9d 01 00 00       	jmp    c0023839 <__addsf3+0x2c3>
c002369c:	85 d2                	test   edx,edx
c002369e:	0f 85 cb 01 00 00    	jne    c002386f <__addsf3+0x2f9>
c00236a4:	e9 bc 01 00 00       	jmp    c0023865 <__addsf3+0x2ef>
c00236a9:	31 c0                	xor    eax,eax
c00236ab:	89 f1                	mov    ecx,esi
c00236ad:	f7 d1                	not    ecx
c00236af:	84 c9                	test   cl,cl
c00236b1:	0f 84 90 01 00 00    	je     c0023847 <__addsf3+0x2d1>
c00236b7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00236ba:	d1 e8                	shr    eax,1
c00236bc:	e9 86 01 00 00       	jmp    c0023847 <__addsf3+0x2d1>
c00236c1:	85 c0                	test   eax,eax
c00236c3:	0f 89 7e 01 00 00    	jns    c0023847 <__addsf3+0x2d1>
c00236c9:	46                   	inc    esi
c00236ca:	89 f2                	mov    edx,esi
c00236cc:	f7 d2                	not    edx
c00236ce:	84 d2                	test   dl,dl
c00236d0:	0f 84 6f 01 00 00    	je     c0023845 <__addsf3+0x2cf>
c00236d6:	89 c2                	mov    edx,eax
c00236d8:	83 e2 01             	and    edx,0x1
c00236db:	d1 e8                	shr    eax,1
c00236dd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00236e2:	09 d0                	or     eax,edx
c00236e4:	e9 5e 01 00 00       	jmp    c0023847 <__addsf3+0x2d1>
c00236e9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00236ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00236f0:	89 f0                	mov    eax,esi
c00236f2:	0f b6 c0             	movzx  eax,al
c00236f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00236f8:	29 c1                	sub    ecx,eax
c00236fa:	85 c9                	test   ecx,ecx
c00236fc:	7e 55                	jle    c0023753 <__addsf3+0x1dd>
c00236fe:	85 c0                	test   eax,eax
c0023700:	75 11                	jne    c0023713 <__addsf3+0x19d>
c0023702:	85 db                	test   ebx,ebx
c0023704:	0f 84 65 01 00 00    	je     c002386f <__addsf3+0x2f9>
c002370a:	49                   	dec    ecx
c002370b:	75 19                	jne    c0023726 <__addsf3+0x1b0>
c002370d:	89 d0                	mov    eax,edx
c002370f:	29 d8                	sub    eax,ebx
c0023711:	eb 38                	jmp    c002374b <__addsf3+0x1d5>
c0023713:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023716:	f7 d0                	not    eax
c0023718:	84 c0                	test   al,al
c002371a:	0f 84 4f 01 00 00    	je     c002386f <__addsf3+0x2f9>
c0023720:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023726:	83 f9 1f             	cmp    ecx,0x1f
c0023729:	0f 8f 40 01 00 00    	jg     c002386f <__addsf3+0x2f9>
c002372f:	89 de                	mov    esi,ebx
c0023731:	d3 ee                	shr    esi,cl
c0023733:	b8 20 00 00 00       	mov    eax,0x20
c0023738:	29 c8                	sub    eax,ecx
c002373a:	89 c1                	mov    ecx,eax
c002373c:	d3 e3                	shl    ebx,cl
c002373e:	31 c0                	xor    eax,eax
c0023740:	85 db                	test   ebx,ebx
c0023742:	0f 95 c0             	setne  al
c0023745:	09 f0                	or     eax,esi
c0023747:	29 c2                	sub    edx,eax
c0023749:	89 d0                	mov    eax,edx
c002374b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002374e:	e9 af 00 00 00       	jmp    c0023802 <__addsf3+0x28c>
c0023753:	74 5c                	je     c00237b1 <__addsf3+0x23b>
c0023755:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023758:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002375b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002375f:	75 14                	jne    c0023775 <__addsf3+0x1ff>
c0023761:	85 d2                	test   edx,edx
c0023763:	0f 84 06 01 00 00    	je     c002386f <__addsf3+0x2f9>
c0023769:	48                   	dec    eax
c002376a:	75 1b                	jne    c0023787 <__addsf3+0x211>
c002376c:	89 d8                	mov    eax,ebx
c002376e:	29 d0                	sub    eax,edx
c0023770:	e9 8d 00 00 00       	jmp    c0023802 <__addsf3+0x28c>
c0023775:	89 f1                	mov    ecx,esi
c0023777:	f7 d1                	not    ecx
c0023779:	84 c9                	test   cl,cl
c002377b:	0f 84 ee 00 00 00    	je     c002386f <__addsf3+0x2f9>
c0023781:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023787:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002378a:	83 f8 1f             	cmp    eax,0x1f
c002378d:	0f 8f dc 00 00 00    	jg     c002386f <__addsf3+0x2f9>
c0023793:	89 d7                	mov    edi,edx
c0023795:	88 c1                	mov    cl,al
c0023797:	d3 ef                	shr    edi,cl
c0023799:	b9 20 00 00 00       	mov    ecx,0x20
c002379e:	29 c1                	sub    ecx,eax
c00237a0:	d3 e2                	shl    edx,cl
c00237a2:	31 c0                	xor    eax,eax
c00237a4:	85 d2                	test   edx,edx
c00237a6:	0f 95 c0             	setne  al
c00237a9:	09 f8                	or     eax,edi
c00237ab:	29 c3                	sub    ebx,eax
c00237ad:	89 d8                	mov    eax,ebx
c00237af:	eb 51                	jmp    c0023802 <__addsf3+0x28c>
c00237b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00237b4:	40                   	inc    eax
c00237b5:	a8 fe                	test   al,0xfe
c00237b7:	75 3d                	jne    c00237f6 <__addsf3+0x280>
c00237b9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00237bd:	0f 85 a7 00 00 00    	jne    c002386a <__addsf3+0x2f4>
c00237c3:	85 d2                	test   edx,edx
c00237c5:	75 12                	jne    c00237d9 <__addsf3+0x263>
c00237c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00237ca:	85 db                	test   ebx,ebx
c00237cc:	0f 85 9d 00 00 00    	jne    c002386f <__addsf3+0x2f9>
c00237d2:	31 ff                	xor    edi,edi
c00237d4:	e9 96 00 00 00       	jmp    c002386f <__addsf3+0x2f9>
c00237d9:	85 db                	test   ebx,ebx
c00237db:	0f 84 8e 00 00 00    	je     c002386f <__addsf3+0x2f9>
c00237e1:	89 d0                	mov    eax,edx
c00237e3:	29 d8                	sub    eax,ebx
c00237e5:	79 06                	jns    c00237ed <__addsf3+0x277>
c00237e7:	89 d8                	mov    eax,ebx
c00237e9:	29 d0                	sub    eax,edx
c00237eb:	eb 5a                	jmp    c0023847 <__addsf3+0x2d1>
c00237ed:	bf 00 00 00 00       	mov    edi,0x0
c00237f2:	74 7b                	je     c002386f <__addsf3+0x2f9>
c00237f4:	eb 4a                	jmp    c0023840 <__addsf3+0x2ca>
c00237f6:	89 d0                	mov    eax,edx
c00237f8:	29 d8                	sub    eax,ebx
c00237fa:	79 12                	jns    c002380e <__addsf3+0x298>
c00237fc:	89 d8                	mov    eax,ebx
c00237fe:	29 d0                	sub    eax,edx
c0023800:	eb 09                	jmp    c002380b <__addsf3+0x295>
c0023802:	85 c0                	test   eax,eax
c0023804:	79 41                	jns    c0023847 <__addsf3+0x2d1>
c0023806:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002380b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002380e:	31 f6                	xor    esi,esi
c0023810:	85 c0                	test   eax,eax
c0023812:	74 33                	je     c0023847 <__addsf3+0x2d1>
c0023814:	0f bd c8             	bsr    ecx,eax
c0023817:	83 f1 1f             	xor    ecx,0x1f
c002381a:	d3 e0                	shl    eax,cl
c002381c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023820:	39 ca                	cmp    edx,ecx
c0023822:	7f 10                	jg     c0023834 <__addsf3+0x2be>
c0023824:	29 d1                	sub    ecx,edx
c0023826:	41                   	inc    ecx
c0023827:	d3 e8                	shr    eax,cl
c0023829:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002382c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023832:	eb 13                	jmp    c0023847 <__addsf3+0x2d1>
c0023834:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023837:	29 ce                	sub    esi,ecx
c0023839:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002383e:	eb 07                	jmp    c0023847 <__addsf3+0x2d1>
c0023840:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023843:	eb 02                	jmp    c0023847 <__addsf3+0x2d1>
c0023845:	31 c0                	xor    eax,eax
c0023847:	89 c2                	mov    edx,eax
c0023849:	c1 ea 08             	shr    edx,0x8
c002384c:	a8 7f                	test   al,0x7f
c002384e:	0f 95 c1             	setne  cl
c0023851:	09 d1                	or     ecx,edx
c0023853:	83 e1 01             	and    ecx,0x1
c0023856:	c1 e8 07             	shr    eax,0x7
c0023859:	21 c8                	and    eax,ecx
c002385b:	c1 e6 17             	shl    esi,0x17
c002385e:	09 d6                	or     esi,edx
c0023860:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023863:	eb 0a                	jmp    c002386f <__addsf3+0x2f9>
c0023865:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023868:	eb 05                	jmp    c002386f <__addsf3+0x2f9>
c002386a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002386f:	89 f8                	mov    eax,edi
c0023871:	5a                   	pop    edx
c0023872:	59                   	pop    ecx
c0023873:	5b                   	pop    ebx
c0023874:	5e                   	pop    esi
c0023875:	5f                   	pop    edi
c0023876:	5d                   	pop    ebp
c0023877:	c3                   	ret    

c0023878 <__subsf3>:
c0023878:	55                   	push   ebp
c0023879:	89 e5                	mov    ebp,esp
c002387b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002387e:	05 00 00 00 80       	add    eax,0x80000000
c0023883:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023886:	5d                   	pop    ebp
c0023887:	e9 ea fc ff ff       	jmp    c0023576 <__addsf3>

c002388c <__negsf2>:
c002388c:	55                   	push   ebp
c002388d:	89 e5                	mov    ebp,esp
c002388f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023892:	05 00 00 00 80       	add    eax,0x80000000
c0023897:	5d                   	pop    ebp
c0023898:	c3                   	ret    

c0023899 <__mulsf3>:
c0023899:	55                   	push   ebp
c002389a:	89 e5                	mov    ebp,esp
c002389c:	57                   	push   edi
c002389d:	56                   	push   esi
c002389e:	53                   	push   ebx
c002389f:	83 ec 1c             	sub    esp,0x1c
c00238a2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00238a5:	89 f0                	mov    eax,esi
c00238a7:	89 f1                	mov    ecx,esi
c00238a9:	c1 f9 17             	sar    ecx,0x17
c00238ac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00238af:	c1 e0 08             	shl    eax,0x8
c00238b2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00238b7:	89 c1                	mov    ecx,eax
c00238b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00238bc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00238bf:	89 c7                	mov    edi,eax
c00238c1:	c1 ff 17             	sar    edi,0x17
c00238c4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00238c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00238cb:	89 f8                	mov    eax,edi
c00238cd:	0f b6 c0             	movzx  eax,al
c00238d0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00238d3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00238d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00238da:	42                   	inc    edx
c00238db:	80 e2 fe             	and    dl,0xfe
c00238de:	75 7b                	jne    c002395b <__mulsf3+0xc2>
c00238e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00238e4:	74 54                	je     c002393a <__mulsf3+0xa1>
c00238e6:	85 c9                	test   ecx,ecx
c00238e8:	0f 85 64 01 00 00    	jne    c0023a52 <__mulsf3+0x1b9>
c00238ee:	8d 57 01             	lea    edx,[edi+0x1]
c00238f1:	80 e2 fe             	and    dl,0xfe
c00238f4:	75 1f                	jne    c0023915 <__mulsf3+0x7c>
c00238f6:	85 c0                	test   eax,eax
c00238f8:	b8 00 00 00 00       	mov    eax,0x0
c00238fd:	74 29                	je     c0023928 <__mulsf3+0x8f>
c00238ff:	53                   	push   ebx
c0023900:	53                   	push   ebx
c0023901:	50                   	push   eax
c0023902:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023905:	e8 96 05 00 00       	call   c0023ea0 <__nesf2>
c002390a:	83 c4 10             	add    esp,0x10
c002390d:	85 c0                	test   eax,eax
c002390f:	0f 85 3a 01 00 00    	jne    c0023a4f <__mulsf3+0x1b6>
c0023915:	85 ff                	test   edi,edi
c0023917:	0f 89 35 01 00 00    	jns    c0023a52 <__mulsf3+0x1b9>
c002391d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023923:	e9 2a 01 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c0023928:	51                   	push   ecx
c0023929:	51                   	push   ecx
c002392a:	50                   	push   eax
c002392b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002392e:	e8 6d 05 00 00       	call   c0023ea0 <__nesf2>
c0023933:	83 c4 10             	add    esp,0x10
c0023936:	85 c0                	test   eax,eax
c0023938:	eb 15                	jmp    c002394f <__mulsf3+0xb6>
c002393a:	85 c9                	test   ecx,ecx
c002393c:	74 0b                	je     c0023949 <__mulsf3+0xb0>
c002393e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023941:	01 c9                	add    ecx,ecx
c0023943:	78 16                	js     c002395b <__mulsf3+0xc2>
c0023945:	89 d3                	mov    ebx,edx
c0023947:	eb f5                	jmp    c002393e <__mulsf3+0xa5>
c0023949:	89 f8                	mov    eax,edi
c002394b:	f7 d0                	not    eax
c002394d:	84 c0                	test   al,al
c002394f:	75 c4                	jne    c0023915 <__mulsf3+0x7c>
c0023951:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023956:	e9 f7 00 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c002395b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002395e:	c1 e6 08             	shl    esi,0x8
c0023961:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023967:	8d 57 01             	lea    edx,[edi+0x1]
c002396a:	80 e2 fe             	and    dl,0xfe
c002396d:	75 63                	jne    c00239d2 <__mulsf3+0x139>
c002396f:	85 c0                	test   eax,eax
c0023971:	74 2f                	je     c00239a2 <__mulsf3+0x109>
c0023973:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023977:	0f 89 d2 00 00 00    	jns    c0023a4f <__mulsf3+0x1b6>
c002397d:	52                   	push   edx
c002397e:	52                   	push   edx
c002397f:	6a 00                	push   0x0
c0023981:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023984:	e8 dc 04 00 00       	call   c0023e65 <__eqsf2>
c0023989:	83 c4 10             	add    esp,0x10
c002398c:	85 c0                	test   eax,eax
c002398e:	0f 85 bb 00 00 00    	jne    c0023a4f <__mulsf3+0x1b6>
c0023994:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023997:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002399d:	e9 b0 00 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c00239a2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00239a5:	50                   	push   eax
c00239a6:	50                   	push   eax
c00239a7:	6a 00                	push   0x0
c00239a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00239ac:	e8 b4 04 00 00       	call   c0023e65 <__eqsf2>
c00239b1:	83 c4 10             	add    esp,0x10
c00239b4:	85 c0                	test   eax,eax
c00239b6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00239b9:	75 0c                	jne    c00239c7 <__mulsf3+0x12e>
c00239bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00239bf:	0f 89 8a 00 00 00    	jns    c0023a4f <__mulsf3+0x1b6>
c00239c5:	eb cd                	jmp    c0023994 <__mulsf3+0xfb>
c00239c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00239ca:	01 f6                	add    esi,esi
c00239cc:	78 04                	js     c00239d2 <__mulsf3+0x139>
c00239ce:	89 c3                	mov    ebx,eax
c00239d0:	eb f5                	jmp    c00239c7 <__mulsf3+0x12e>
c00239d2:	89 c8                	mov    eax,ecx
c00239d4:	0d 00 00 00 80       	or     eax,0x80000000
c00239d9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00239df:	f7 e6                	mul    esi
c00239e1:	85 c0                	test   eax,eax
c00239e3:	0f 95 c0             	setne  al
c00239e6:	0f b6 c0             	movzx  eax,al
c00239e9:	09 c2                	or     edx,eax
c00239eb:	78 03                	js     c00239f0 <__mulsf3+0x157>
c00239ed:	01 d2                	add    edx,edx
c00239ef:	4b                   	dec    ebx
c00239f0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00239f6:	7f 22                	jg     c0023a1a <__mulsf3+0x181>
c00239f8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00239fe:	85 db                	test   ebx,ebx
c0023a00:	7f 23                	jg     c0023a25 <__mulsf3+0x18c>
c0023a02:	83 fb e9             	cmp    ebx,0xffffffe9
c0023a05:	7c 1a                	jl     c0023a21 <__mulsf3+0x188>
c0023a07:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023a0d:	b9 01 00 00 00       	mov    ecx,0x1
c0023a12:	29 d9                	sub    ecx,ebx
c0023a14:	d3 ea                	shr    edx,cl
c0023a16:	31 db                	xor    ebx,ebx
c0023a18:	eb 0b                	jmp    c0023a25 <__mulsf3+0x18c>
c0023a1a:	bb ff 00 00 00       	mov    ebx,0xff
c0023a1f:	eb 02                	jmp    c0023a23 <__mulsf3+0x18a>
c0023a21:	31 db                	xor    ebx,ebx
c0023a23:	31 d2                	xor    edx,edx
c0023a25:	89 d0                	mov    eax,edx
c0023a27:	c1 e8 08             	shr    eax,0x8
c0023a2a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023a2d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023a33:	09 fb                	or     ebx,edi
c0023a35:	c1 e3 17             	shl    ebx,0x17
c0023a38:	09 c3                	or     ebx,eax
c0023a3a:	f6 c2 7f             	test   dl,0x7f
c0023a3d:	0f 95 c1             	setne  cl
c0023a40:	09 c8                	or     eax,ecx
c0023a42:	83 e0 01             	and    eax,0x1
c0023a45:	c1 ea 07             	shr    edx,0x7
c0023a48:	21 c2                	and    edx,eax
c0023a4a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023a4d:	eb 03                	jmp    c0023a52 <__mulsf3+0x1b9>
c0023a4f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023a52:	89 f0                	mov    eax,esi
c0023a54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023a57:	5b                   	pop    ebx
c0023a58:	5e                   	pop    esi
c0023a59:	5f                   	pop    edi
c0023a5a:	5d                   	pop    ebp
c0023a5b:	c3                   	ret    

c0023a5c <__divsf3>:
c0023a5c:	55                   	push   ebp
c0023a5d:	89 e5                	mov    ebp,esp
c0023a5f:	57                   	push   edi
c0023a60:	56                   	push   esi
c0023a61:	53                   	push   ebx
c0023a62:	83 ec 1c             	sub    esp,0x1c
c0023a65:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023a68:	89 d8                	mov    eax,ebx
c0023a6a:	89 d9                	mov    ecx,ebx
c0023a6c:	c1 f9 17             	sar    ecx,0x17
c0023a6f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023a72:	c1 e0 08             	shl    eax,0x8
c0023a75:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023a7a:	89 c1                	mov    ecx,eax
c0023a7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a7f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023a82:	89 c7                	mov    edi,eax
c0023a84:	c1 ff 17             	sar    edi,0x17
c0023a87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023a8b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023a8e:	89 f8                	mov    eax,edi
c0023a90:	0f b6 c0             	movzx  eax,al
c0023a93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023a96:	29 c6                	sub    esi,eax
c0023a98:	83 c6 7f             	add    esi,0x7f
c0023a9b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023a9e:	42                   	inc    edx
c0023a9f:	80 e2 fe             	and    dl,0xfe
c0023aa2:	0f 85 9c 00 00 00    	jne    c0023b44 <__divsf3+0xe8>
c0023aa8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023aac:	74 33                	je     c0023ae1 <__divsf3+0x85>
c0023aae:	85 c9                	test   ecx,ecx
c0023ab0:	0f 85 c7 01 00 00    	jne    c0023c7d <__divsf3+0x221>
c0023ab6:	8d 57 01             	lea    edx,[edi+0x1]
c0023ab9:	80 e2 fe             	and    dl,0xfe
c0023abc:	75 2f                	jne    c0023aed <__divsf3+0x91>
c0023abe:	85 c0                	test   eax,eax
c0023ac0:	74 2b                	je     c0023aed <__divsf3+0x91>
c0023ac2:	51                   	push   ecx
c0023ac3:	51                   	push   ecx
c0023ac4:	6a 00                	push   0x0
c0023ac6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ac9:	e8 d2 03 00 00       	call   c0023ea0 <__nesf2>
c0023ace:	83 c4 10             	add    esp,0x10
c0023ad1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023ad4:	85 c0                	test   eax,eax
c0023ad6:	0f 85 a1 01 00 00    	jne    c0023c7d <__divsf3+0x221>
c0023adc:	e9 92 01 00 00       	jmp    c0023c73 <__divsf3+0x217>
c0023ae1:	85 c9                	test   ecx,ecx
c0023ae3:	75 1b                	jne    c0023b00 <__divsf3+0xa4>
c0023ae5:	8d 57 01             	lea    edx,[edi+0x1]
c0023ae8:	80 e2 fe             	and    dl,0xfe
c0023aeb:	74 1e                	je     c0023b0b <__divsf3+0xaf>
c0023aed:	85 ff                	test   edi,edi
c0023aef:	0f 89 88 01 00 00    	jns    c0023c7d <__divsf3+0x221>
c0023af5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023afb:	e9 7d 01 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023b00:	8d 56 ff             	lea    edx,[esi-0x1]
c0023b03:	01 c9                	add    ecx,ecx
c0023b05:	78 3d                	js     c0023b44 <__divsf3+0xe8>
c0023b07:	89 d6                	mov    esi,edx
c0023b09:	eb f5                	jmp    c0023b00 <__divsf3+0xa4>
c0023b0b:	85 c0                	test   eax,eax
c0023b0d:	b8 00 00 00 00       	mov    eax,0x0
c0023b12:	74 18                	je     c0023b2c <__divsf3+0xd0>
c0023b14:	52                   	push   edx
c0023b15:	52                   	push   edx
c0023b16:	50                   	push   eax
c0023b17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b1a:	e8 81 03 00 00       	call   c0023ea0 <__nesf2>
c0023b1f:	83 c4 10             	add    esp,0x10
c0023b22:	85 c0                	test   eax,eax
c0023b24:	0f 85 50 01 00 00    	jne    c0023c7a <__divsf3+0x21e>
c0023b2a:	eb c1                	jmp    c0023aed <__divsf3+0x91>
c0023b2c:	56                   	push   esi
c0023b2d:	56                   	push   esi
c0023b2e:	50                   	push   eax
c0023b2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b32:	e8 69 03 00 00       	call   c0023ea0 <__nesf2>
c0023b37:	83 c4 10             	add    esp,0x10
c0023b3a:	85 c0                	test   eax,eax
c0023b3c:	0f 84 31 01 00 00    	je     c0023c73 <__divsf3+0x217>
c0023b42:	eb a9                	jmp    c0023aed <__divsf3+0x91>
c0023b44:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023b47:	c1 e3 08             	shl    ebx,0x8
c0023b4a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023b50:	8d 57 01             	lea    edx,[edi+0x1]
c0023b53:	80 e2 fe             	and    dl,0xfe
c0023b56:	75 71                	jne    c0023bc9 <__divsf3+0x16d>
c0023b58:	85 c0                	test   eax,eax
c0023b5a:	ba 00 00 00 00       	mov    edx,0x0
c0023b5f:	74 2f                	je     c0023b90 <__divsf3+0x134>
c0023b61:	51                   	push   ecx
c0023b62:	51                   	push   ecx
c0023b63:	52                   	push   edx
c0023b64:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b67:	e8 f9 02 00 00       	call   c0023e65 <__eqsf2>
c0023b6c:	83 c4 10             	add    esp,0x10
c0023b6f:	85 c0                	test   eax,eax
c0023b71:	0f 85 03 01 00 00    	jne    c0023c7a <__divsf3+0x21e>
c0023b77:	31 d2                	xor    edx,edx
c0023b79:	89 d3                	mov    ebx,edx
c0023b7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023b7e:	31 f8                	xor    eax,edi
c0023b80:	0f 89 f7 00 00 00    	jns    c0023c7d <__divsf3+0x221>
c0023b86:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023b8b:	e9 ed 00 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023b90:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023b93:	50                   	push   eax
c0023b94:	50                   	push   eax
c0023b95:	52                   	push   edx
c0023b96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b99:	e8 c7 02 00 00       	call   c0023e65 <__eqsf2>
c0023b9e:	83 c4 10             	add    esp,0x10
c0023ba1:	85 c0                	test   eax,eax
c0023ba3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023ba6:	75 16                	jne    c0023bbe <__divsf3+0x162>
c0023ba8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023bab:	31 fb                	xor    ebx,edi
c0023bad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023bb3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023bb9:	e9 bf 00 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023bbe:	8d 46 01             	lea    eax,[esi+0x1]
c0023bc1:	01 db                	add    ebx,ebx
c0023bc3:	78 04                	js     c0023bc9 <__divsf3+0x16d>
c0023bc5:	89 c6                	mov    esi,eax
c0023bc7:	eb f5                	jmp    c0023bbe <__divsf3+0x162>
c0023bc9:	89 c8                	mov    eax,ecx
c0023bcb:	0d 00 00 00 80       	or     eax,0x80000000
c0023bd0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023bd6:	31 d2                	xor    edx,edx
c0023bd8:	39 d8                	cmp    eax,ebx
c0023bda:	72 07                	jb     c0023be3 <__divsf3+0x187>
c0023bdc:	29 d8                	sub    eax,ebx
c0023bde:	ba 01 00 00 00       	mov    edx,0x1
c0023be3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023bea:	01 d2                	add    edx,edx
c0023bec:	89 c1                	mov    ecx,eax
c0023bee:	01 c0                	add    eax,eax
c0023bf0:	85 c9                	test   ecx,ecx
c0023bf2:	78 04                	js     c0023bf8 <__divsf3+0x19c>
c0023bf4:	39 c3                	cmp    ebx,eax
c0023bf6:	77 05                	ja     c0023bfd <__divsf3+0x1a1>
c0023bf8:	29 d8                	sub    eax,ebx
c0023bfa:	83 ca 01             	or     edx,0x1
c0023bfd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023c00:	75 e8                	jne    c0023bea <__divsf3+0x18e>
c0023c02:	85 c0                	test   eax,eax
c0023c04:	0f 95 c0             	setne  al
c0023c07:	0f b6 c0             	movzx  eax,al
c0023c0a:	c1 e2 06             	shl    edx,0x6
c0023c0d:	09 c2                	or     edx,eax
c0023c0f:	78 03                	js     c0023c14 <__divsf3+0x1b8>
c0023c11:	01 d2                	add    edx,edx
c0023c13:	4e                   	dec    esi
c0023c14:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023c1a:	7f 22                	jg     c0023c3e <__divsf3+0x1e2>
c0023c1c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023c22:	85 f6                	test   esi,esi
c0023c24:	7f 23                	jg     c0023c49 <__divsf3+0x1ed>
c0023c26:	83 fe e9             	cmp    esi,0xffffffe9
c0023c29:	7c 1a                	jl     c0023c45 <__divsf3+0x1e9>
c0023c2b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023c31:	b9 01 00 00 00       	mov    ecx,0x1
c0023c36:	29 f1                	sub    ecx,esi
c0023c38:	d3 ea                	shr    edx,cl
c0023c3a:	31 f6                	xor    esi,esi
c0023c3c:	eb 0b                	jmp    c0023c49 <__divsf3+0x1ed>
c0023c3e:	be ff 00 00 00       	mov    esi,0xff
c0023c43:	eb 02                	jmp    c0023c47 <__divsf3+0x1eb>
c0023c45:	31 f6                	xor    esi,esi
c0023c47:	31 d2                	xor    edx,edx
c0023c49:	89 d0                	mov    eax,edx
c0023c4b:	c1 e8 08             	shr    eax,0x8
c0023c4e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023c51:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023c57:	09 fe                	or     esi,edi
c0023c59:	c1 e6 17             	shl    esi,0x17
c0023c5c:	09 c6                	or     esi,eax
c0023c5e:	f6 c2 7f             	test   dl,0x7f
c0023c61:	0f 95 c1             	setne  cl
c0023c64:	09 c8                	or     eax,ecx
c0023c66:	83 e0 01             	and    eax,0x1
c0023c69:	c1 ea 07             	shr    edx,0x7
c0023c6c:	21 c2                	and    edx,eax
c0023c6e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023c71:	eb 0a                	jmp    c0023c7d <__divsf3+0x221>
c0023c73:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023c78:	eb 03                	jmp    c0023c7d <__divsf3+0x221>
c0023c7a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023c7d:	89 d8                	mov    eax,ebx
c0023c7f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023c82:	5b                   	pop    ebx
c0023c83:	5e                   	pop    esi
c0023c84:	5f                   	pop    edi
c0023c85:	5d                   	pop    ebp
c0023c86:	c3                   	ret    

c0023c87 <__floatsisf>:
c0023c87:	55                   	push   ebp
c0023c88:	89 e5                	mov    ebp,esp
c0023c8a:	53                   	push   ebx
c0023c8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023c8e:	85 d2                	test   edx,edx
c0023c90:	7e 2b                	jle    c0023cbd <__floatsisf+0x36>
c0023c92:	0f bd ca             	bsr    ecx,edx
c0023c95:	83 f1 1f             	xor    ecx,0x1f
c0023c98:	d3 e2                	shl    edx,cl
c0023c9a:	89 d0                	mov    eax,edx
c0023c9c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023ca1:	89 c3                	mov    ebx,eax
c0023ca3:	c1 eb 08             	shr    ebx,0x8
c0023ca6:	80 e2 7f             	and    dl,0x7f
c0023ca9:	0f 95 c2             	setne  dl
c0023cac:	09 da                	or     edx,ebx
c0023cae:	83 e2 01             	and    edx,0x1
c0023cb1:	c1 e8 07             	shr    eax,0x7
c0023cb4:	21 c2                	and    edx,eax
c0023cb6:	b8 9e 00 00 00       	mov    eax,0x9e
c0023cbb:	eb 32                	jmp    c0023cef <__floatsisf+0x68>
c0023cbd:	b8 00 00 00 00       	mov    eax,0x0
c0023cc2:	74 34                	je     c0023cf8 <__floatsisf+0x71>
c0023cc4:	f7 da                	neg    edx
c0023cc6:	0f bd ca             	bsr    ecx,edx
c0023cc9:	83 f1 1f             	xor    ecx,0x1f
c0023ccc:	d3 e2                	shl    edx,cl
c0023cce:	89 d0                	mov    eax,edx
c0023cd0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023cd5:	89 c3                	mov    ebx,eax
c0023cd7:	c1 eb 08             	shr    ebx,0x8
c0023cda:	80 e2 7f             	and    dl,0x7f
c0023cdd:	0f 95 c2             	setne  dl
c0023ce0:	09 da                	or     edx,ebx
c0023ce2:	83 e2 01             	and    edx,0x1
c0023ce5:	c1 e8 07             	shr    eax,0x7
c0023ce8:	21 c2                	and    edx,eax
c0023cea:	b8 9e 01 00 00       	mov    eax,0x19e
c0023cef:	29 c8                	sub    eax,ecx
c0023cf1:	c1 e0 17             	shl    eax,0x17
c0023cf4:	09 d8                	or     eax,ebx
c0023cf6:	01 d0                	add    eax,edx
c0023cf8:	5b                   	pop    ebx
c0023cf9:	5d                   	pop    ebp
c0023cfa:	c3                   	ret    

c0023cfb <__floatunsisf>:
c0023cfb:	55                   	push   ebp
c0023cfc:	89 e5                	mov    ebp,esp
c0023cfe:	53                   	push   ebx
c0023cff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d02:	31 c0                	xor    eax,eax
c0023d04:	85 d2                	test   edx,edx
c0023d06:	74 32                	je     c0023d3a <__floatunsisf+0x3f>
c0023d08:	0f bd ca             	bsr    ecx,edx
c0023d0b:	83 f1 1f             	xor    ecx,0x1f
c0023d0e:	d3 e2                	shl    edx,cl
c0023d10:	89 d0                	mov    eax,edx
c0023d12:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023d17:	89 c3                	mov    ebx,eax
c0023d19:	c1 eb 08             	shr    ebx,0x8
c0023d1c:	80 e2 7f             	and    dl,0x7f
c0023d1f:	0f 95 c2             	setne  dl
c0023d22:	09 da                	or     edx,ebx
c0023d24:	83 e2 01             	and    edx,0x1
c0023d27:	c1 e8 07             	shr    eax,0x7
c0023d2a:	21 c2                	and    edx,eax
c0023d2c:	b8 9e 00 00 00       	mov    eax,0x9e
c0023d31:	29 c8                	sub    eax,ecx
c0023d33:	c1 e0 17             	shl    eax,0x17
c0023d36:	09 d8                	or     eax,ebx
c0023d38:	01 d0                	add    eax,edx
c0023d3a:	5b                   	pop    ebx
c0023d3b:	5d                   	pop    ebp
c0023d3c:	c3                   	ret    

c0023d3d <__fixsfsi>:
c0023d3d:	55                   	push   ebp
c0023d3e:	89 e5                	mov    ebp,esp
c0023d40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d43:	89 d1                	mov    ecx,edx
c0023d45:	c1 e1 08             	shl    ecx,0x8
c0023d48:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023d4e:	c1 fa 17             	sar    edx,0x17
c0023d51:	78 1c                	js     c0023d6f <__fixsfsi+0x32>
c0023d53:	83 ea 7f             	sub    edx,0x7f
c0023d56:	31 c0                	xor    eax,eax
c0023d58:	83 fa 1e             	cmp    edx,0x1e
c0023d5b:	77 40                	ja     c0023d9d <__fixsfsi+0x60>
c0023d5d:	89 c8                	mov    eax,ecx
c0023d5f:	0d 00 00 00 80       	or     eax,0x80000000
c0023d64:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d69:	29 d1                	sub    ecx,edx
c0023d6b:	d3 e8                	shr    eax,cl
c0023d6d:	eb 2e                	jmp    c0023d9d <__fixsfsi+0x60>
c0023d6f:	31 c0                	xor    eax,eax
c0023d71:	81 c2 81 00 00 00    	add    edx,0x81
c0023d77:	78 24                	js     c0023d9d <__fixsfsi+0x60>
c0023d79:	83 fa 1e             	cmp    edx,0x1e
c0023d7c:	7e 09                	jle    c0023d87 <__fixsfsi+0x4a>
c0023d7e:	83 fa 1f             	cmp    edx,0x1f
c0023d81:	75 18                	jne    c0023d9b <__fixsfsi+0x5e>
c0023d83:	85 c9                	test   ecx,ecx
c0023d85:	75 14                	jne    c0023d9b <__fixsfsi+0x5e>
c0023d87:	89 c8                	mov    eax,ecx
c0023d89:	0d 00 00 00 80       	or     eax,0x80000000
c0023d8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d93:	29 d1                	sub    ecx,edx
c0023d95:	d3 e8                	shr    eax,cl
c0023d97:	f7 d8                	neg    eax
c0023d99:	eb 02                	jmp    c0023d9d <__fixsfsi+0x60>
c0023d9b:	31 c0                	xor    eax,eax
c0023d9d:	5d                   	pop    ebp
c0023d9e:	c3                   	ret    

c0023d9f <__fixunssfsi>:
c0023d9f:	55                   	push   ebp
c0023da0:	89 e5                	mov    ebp,esp
c0023da2:	53                   	push   ebx
c0023da3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023da6:	89 d3                	mov    ebx,edx
c0023da8:	c1 fb 17             	sar    ebx,0x17
c0023dab:	83 eb 7f             	sub    ebx,0x7f
c0023dae:	31 c0                	xor    eax,eax
c0023db0:	83 fb 1f             	cmp    ebx,0x1f
c0023db3:	77 18                	ja     c0023dcd <__fixunssfsi+0x2e>
c0023db5:	89 d0                	mov    eax,edx
c0023db7:	c1 e0 08             	shl    eax,0x8
c0023dba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023dbf:	0d 00 00 00 80       	or     eax,0x80000000
c0023dc4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023dc9:	29 d9                	sub    ecx,ebx
c0023dcb:	d3 e8                	shr    eax,cl
c0023dcd:	5b                   	pop    ebx
c0023dce:	5d                   	pop    ebp
c0023dcf:	c3                   	ret    

c0023dd0 <__cmpsf2>:
c0023dd0:	55                   	push   ebp
c0023dd1:	89 e5                	mov    ebp,esp
c0023dd3:	57                   	push   edi
c0023dd4:	56                   	push   esi
c0023dd5:	53                   	push   ebx
c0023dd6:	83 ec 24             	sub    esp,0x24
c0023dd9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ddc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ddf:	e8 4f 10 00 00       	call   c0024e33 <__truncdfsf2>
c0023de4:	5a                   	pop    edx
c0023de5:	59                   	pop    ecx
c0023de6:	89 c3                	mov    ebx,eax
c0023de8:	c1 e8 17             	shr    eax,0x17
c0023deb:	0f b6 f0             	movzx  esi,al
c0023dee:	89 d8                	mov    eax,ebx
c0023df0:	c1 e8 1f             	shr    eax,0x1f
c0023df3:	31 c6                	xor    esi,eax
c0023df5:	c1 e3 08             	shl    ebx,0x8
c0023df8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023dfb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023dfe:	e8 30 10 00 00       	call   c0024e33 <__truncdfsf2>
c0023e03:	83 c4 10             	add    esp,0x10
c0023e06:	89 c1                	mov    ecx,eax
c0023e08:	c1 e9 17             	shr    ecx,0x17
c0023e0b:	0f b6 c9             	movzx  ecx,cl
c0023e0e:	89 c7                	mov    edi,eax
c0023e10:	c1 ef 1f             	shr    edi,0x1f
c0023e13:	89 ca                	mov    edx,ecx
c0023e15:	31 fa                	xor    edx,edi
c0023e17:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023e1a:	c1 e0 08             	shl    eax,0x8
c0023e1d:	89 c2                	mov    edx,eax
c0023e1f:	89 d8                	mov    eax,ebx
c0023e21:	09 d0                	or     eax,edx
c0023e23:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023e28:	09 f0                	or     eax,esi
c0023e2a:	75 08                	jne    c0023e34 <__cmpsf2+0x64>
c0023e2c:	31 c0                	xor    eax,eax
c0023e2e:	39 f9                	cmp    ecx,edi
c0023e30:	75 0c                	jne    c0023e3e <__cmpsf2+0x6e>
c0023e32:	eb 29                	jmp    c0023e5d <__cmpsf2+0x8d>
c0023e34:	b8 01 00 00 00       	mov    eax,0x1
c0023e39:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e3c:	7f 1f                	jg     c0023e5d <__cmpsf2+0x8d>
c0023e3e:	83 c8 ff             	or     eax,0xffffffff
c0023e41:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e44:	7c 17                	jl     c0023e5d <__cmpsf2+0x8d>
c0023e46:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023e4c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023e52:	b8 01 00 00 00       	mov    eax,0x1
c0023e57:	39 d3                	cmp    ebx,edx
c0023e59:	77 02                	ja     c0023e5d <__cmpsf2+0x8d>
c0023e5b:	19 c0                	sbb    eax,eax
c0023e5d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023e60:	5b                   	pop    ebx
c0023e61:	5e                   	pop    esi
c0023e62:	5f                   	pop    edi
c0023e63:	5d                   	pop    ebp
c0023e64:	c3                   	ret    

c0023e65 <__eqsf2>:
c0023e65:	55                   	push   ebp
c0023e66:	89 e5                	mov    ebp,esp
c0023e68:	83 ec 24             	sub    esp,0x24
c0023e6b:	6a 01                	push   0x1
c0023e6d:	83 ec 0c             	sub    esp,0xc
c0023e70:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023e73:	e8 df 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023e78:	83 c4 10             	add    esp,0x10
c0023e7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e7e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e81:	52                   	push   edx
c0023e82:	50                   	push   eax
c0023e83:	50                   	push   eax
c0023e84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e87:	e8 cb 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023e8c:	59                   	pop    ecx
c0023e8d:	59                   	pop    ecx
c0023e8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e91:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e94:	52                   	push   edx
c0023e95:	50                   	push   eax
c0023e96:	e8 35 ff ff ff       	call   c0023dd0 <__cmpsf2>
c0023e9b:	83 c4 20             	add    esp,0x20
c0023e9e:	c9                   	leave  
c0023e9f:	c3                   	ret    

c0023ea0 <__nesf2>:
c0023ea0:	eb c3                	jmp    c0023e65 <__eqsf2>

c0023ea2 <__gtsf2>:
c0023ea2:	55                   	push   ebp
c0023ea3:	89 e5                	mov    ebp,esp
c0023ea5:	83 ec 24             	sub    esp,0x24
c0023ea8:	6a ff                	push   0xffffffff
c0023eaa:	83 ec 0c             	sub    esp,0xc
c0023ead:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023eb0:	e8 a2 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023eb5:	83 c4 10             	add    esp,0x10
c0023eb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023ebb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ebe:	52                   	push   edx
c0023ebf:	50                   	push   eax
c0023ec0:	50                   	push   eax
c0023ec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ec4:	e8 8e 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023ec9:	59                   	pop    ecx
c0023eca:	59                   	pop    ecx
c0023ecb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023ece:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ed1:	52                   	push   edx
c0023ed2:	50                   	push   eax
c0023ed3:	e8 f8 fe ff ff       	call   c0023dd0 <__cmpsf2>
c0023ed8:	83 c4 20             	add    esp,0x20
c0023edb:	c9                   	leave  
c0023edc:	c3                   	ret    

c0023edd <__gesf2>:
c0023edd:	eb c3                	jmp    c0023ea2 <__gtsf2>

c0023edf <__ltsf2>:
c0023edf:	eb 84                	jmp    c0023e65 <__eqsf2>

c0023ee1 <__lesf2>:
c0023ee1:	eb 82                	jmp    c0023e65 <__eqsf2>

c0023ee3 <__adddf3>:
c0023ee3:	55                   	push   ebp
c0023ee4:	89 e5                	mov    ebp,esp
c0023ee6:	57                   	push   edi
c0023ee7:	56                   	push   esi
c0023ee8:	53                   	push   ebx
c0023ee9:	83 ec 24             	sub    esp,0x24
c0023eec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023eef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023ef2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023ef5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023ef8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023efb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023efe:	89 c8                	mov    eax,ecx
c0023f00:	89 ce                	mov    esi,ecx
c0023f02:	c1 fe 14             	sar    esi,0x14
c0023f05:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0023f08:	89 fb                	mov    ebx,edi
c0023f0a:	89 fa                	mov    edx,edi
c0023f0c:	c1 e2 0b             	shl    edx,0xb
c0023f0f:	c1 e0 0b             	shl    eax,0xb
c0023f12:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0023f17:	c1 eb 15             	shr    ebx,0x15
c0023f1a:	09 d8                	or     eax,ebx
c0023f1c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0023f1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0023f22:	c1 fe 14             	sar    esi,0x14
c0023f25:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0023f28:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023f2b:	89 f3                	mov    ebx,esi
c0023f2d:	c1 e3 0b             	shl    ebx,0xb
c0023f30:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0023f33:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0023f36:	c1 e3 0b             	shl    ebx,0xb
c0023f39:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0023f3f:	c1 ee 15             	shr    esi,0x15
c0023f42:	09 f3                	or     ebx,esi
c0023f44:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0023f47:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023f4a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0023f4d:	0f 88 5f 02 00 00    	js     c00241b2 <__adddf3+0x2cf>
c0023f53:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023f56:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0023f59:	85 db                	test   ebx,ebx
c0023f5b:	0f 8e c7 00 00 00    	jle    c0024028 <__adddf3+0x145>
c0023f61:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0023f68:	75 1a                	jne    c0023f84 <__adddf3+0xa1>
c0023f6a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023f6d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0023f70:	0f 84 b2 05 00 00    	je     c0024528 <__adddf3+0x645>
c0023f76:	4b                   	dec    ebx
c0023f77:	75 23                	jne    c0023f9c <__adddf3+0xb9>
c0023f79:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0023f7c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0023f7f:	e9 99 00 00 00       	jmp    c002401d <__adddf3+0x13a>
c0023f84:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023f87:	f7 d6                	not    esi
c0023f89:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0023f8f:	0f 84 93 05 00 00    	je     c0024528 <__adddf3+0x645>
c0023f95:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0023f9c:	83 fb 1f             	cmp    ebx,0x1f
c0023f9f:	7e 42                	jle    c0023fe3 <__adddf3+0x100>
c0023fa1:	83 fb 3f             	cmp    ebx,0x3f
c0023fa4:	0f 8f 7e 05 00 00    	jg     c0024528 <__adddf3+0x645>
c0023faa:	83 e3 1f             	and    ebx,0x1f
c0023fad:	89 d9                	mov    ecx,ebx
c0023faf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023fb2:	d3 ef                	shr    edi,cl
c0023fb4:	31 db                	xor    ebx,ebx
c0023fb6:	85 c9                	test   ecx,ecx
c0023fb8:	74 15                	je     c0023fcf <__adddf3+0xec>
c0023fba:	be 20 00 00 00       	mov    esi,0x20
c0023fbf:	29 ce                	sub    esi,ecx
c0023fc1:	89 f1                	mov    ecx,esi
c0023fc3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023fc6:	d3 e6                	shl    esi,cl
c0023fc8:	31 db                	xor    ebx,ebx
c0023fca:	85 f6                	test   esi,esi
c0023fcc:	0f 95 c3             	setne  bl
c0023fcf:	31 c9                	xor    ecx,ecx
c0023fd1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023fd5:	0f 95 c1             	setne  cl
c0023fd8:	09 cf                	or     edi,ecx
c0023fda:	09 fb                	or     ebx,edi
c0023fdc:	01 da                	add    edx,ebx
c0023fde:	83 d0 00             	adc    eax,0x0
c0023fe1:	eb 3a                	jmp    c002401d <__adddf3+0x13a>
c0023fe3:	bf 20 00 00 00       	mov    edi,0x20
c0023fe8:	29 df                	sub    edi,ebx
c0023fea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0023fed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023ff0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0023ff3:	d3 e6                	shl    esi,cl
c0023ff5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0023ff8:	88 d9                	mov    cl,bl
c0023ffa:	d3 ef                	shr    edi,cl
c0023ffc:	09 fe                	or     esi,edi
c0023ffe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024001:	88 d9                	mov    cl,bl
c0024003:	d3 ef                	shr    edi,cl
c0024005:	89 fb                	mov    ebx,edi
c0024007:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002400a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002400d:	d3 e7                	shl    edi,cl
c002400f:	85 ff                	test   edi,edi
c0024011:	0f 95 c1             	setne  cl
c0024014:	0f b6 c9             	movzx  ecx,cl
c0024017:	09 ce                	or     esi,ecx
c0024019:	01 f2                	add    edx,esi
c002401b:	11 d8                	adc    eax,ebx
c002401d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024020:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024023:	e9 52 01 00 00       	jmp    c002417a <__adddf3+0x297>
c0024028:	0f 84 d5 00 00 00    	je     c0024103 <__adddf3+0x220>
c002402e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024031:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024034:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024037:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002403a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024041:	75 20                	jne    c0024063 <__adddf3+0x180>
c0024043:	89 d6                	mov    esi,edx
c0024045:	09 c6                	or     esi,eax
c0024047:	0f 84 db 04 00 00    	je     c0024528 <__adddf3+0x645>
c002404d:	4b                   	dec    ebx
c002404e:	75 29                	jne    c0024079 <__adddf3+0x196>
c0024050:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024053:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024056:	01 d1                	add    ecx,edx
c0024058:	11 c6                	adc    esi,eax
c002405a:	89 f0                	mov    eax,esi
c002405c:	89 ca                	mov    edx,ecx
c002405e:	e9 17 01 00 00       	jmp    c002417a <__adddf3+0x297>
c0024063:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024066:	f7 d6                	not    esi
c0024068:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002406e:	0f 84 b4 04 00 00    	je     c0024528 <__adddf3+0x645>
c0024074:	0d 00 00 00 80       	or     eax,0x80000000
c0024079:	83 fb 1f             	cmp    ebx,0x1f
c002407c:	7e 48                	jle    c00240c6 <__adddf3+0x1e3>
c002407e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024081:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024084:	83 fb 3f             	cmp    ebx,0x3f
c0024087:	0f 8f 9b 04 00 00    	jg     c0024528 <__adddf3+0x645>
c002408d:	83 e3 1f             	and    ebx,0x1f
c0024090:	89 d9                	mov    ecx,ebx
c0024092:	89 c7                	mov    edi,eax
c0024094:	d3 ef                	shr    edi,cl
c0024096:	31 db                	xor    ebx,ebx
c0024098:	85 c9                	test   ecx,ecx
c002409a:	74 12                	je     c00240ae <__adddf3+0x1cb>
c002409c:	be 20 00 00 00       	mov    esi,0x20
c00240a1:	29 ce                	sub    esi,ecx
c00240a3:	89 f1                	mov    ecx,esi
c00240a5:	d3 e0                	shl    eax,cl
c00240a7:	31 db                	xor    ebx,ebx
c00240a9:	85 c0                	test   eax,eax
c00240ab:	0f 95 c3             	setne  bl
c00240ae:	31 c0                	xor    eax,eax
c00240b0:	85 d2                	test   edx,edx
c00240b2:	0f 95 c0             	setne  al
c00240b5:	09 c7                	or     edi,eax
c00240b7:	09 fb                	or     ebx,edi
c00240b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00240bf:	01 da                	add    edx,ebx
c00240c1:	83 d6 00             	adc    esi,0x0
c00240c4:	eb 39                	jmp    c00240ff <__adddf3+0x21c>
c00240c6:	be 20 00 00 00       	mov    esi,0x20
c00240cb:	29 de                	sub    esi,ebx
c00240cd:	89 c7                	mov    edi,eax
c00240cf:	89 f1                	mov    ecx,esi
c00240d1:	d3 e7                	shl    edi,cl
c00240d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00240d6:	89 d7                	mov    edi,edx
c00240d8:	88 d9                	mov    cl,bl
c00240da:	d3 ef                	shr    edi,cl
c00240dc:	89 f9                	mov    ecx,edi
c00240de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00240e1:	09 cf                	or     edi,ecx
c00240e3:	88 d9                	mov    cl,bl
c00240e5:	d3 e8                	shr    eax,cl
c00240e7:	89 f1                	mov    ecx,esi
c00240e9:	d3 e2                	shl    edx,cl
c00240eb:	85 d2                	test   edx,edx
c00240ed:	0f 95 c2             	setne  dl
c00240f0:	0f b6 d2             	movzx  edx,dl
c00240f3:	09 d7                	or     edi,edx
c00240f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00240fb:	01 fa                	add    edx,edi
c00240fd:	11 c6                	adc    esi,eax
c00240ff:	89 f0                	mov    eax,esi
c0024101:	eb 77                	jmp    c002417a <__adddf3+0x297>
c0024103:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024106:	46                   	inc    esi
c0024107:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002410a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024110:	75 41                	jne    c0024153 <__adddf3+0x270>
c0024112:	89 d3                	mov    ebx,edx
c0024114:	09 c3                	or     ebx,eax
c0024116:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002411d:	75 27                	jne    c0024146 <__adddf3+0x263>
c002411f:	85 db                	test   ebx,ebx
c0024121:	0f 84 fb 03 00 00    	je     c0024522 <__adddf3+0x63f>
c0024127:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002412a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002412d:	0f 84 f5 03 00 00    	je     c0024528 <__adddf3+0x645>
c0024133:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024136:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024139:	85 c0                	test   eax,eax
c002413b:	0f 89 91 03 00 00    	jns    c00244d2 <__adddf3+0x5ef>
c0024141:	e9 85 03 00 00       	jmp    c00244cb <__adddf3+0x5e8>
c0024146:	85 db                	test   ebx,ebx
c0024148:	0f 85 da 03 00 00    	jne    c0024528 <__adddf3+0x645>
c002414e:	e9 cf 03 00 00       	jmp    c0024522 <__adddf3+0x63f>
c0024153:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024156:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024159:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002415c:	f7 d1                	not    ecx
c002415e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024164:	0f 84 70 03 00 00    	je     c00244da <__adddf3+0x5f7>
c002416a:	d1 ea                	shr    edx,1
c002416c:	89 c1                	mov    ecx,eax
c002416e:	c1 e1 1f             	shl    ecx,0x1f
c0024171:	09 ca                	or     edx,ecx
c0024173:	d1 e8                	shr    eax,1
c0024175:	e9 6f 03 00 00       	jmp    c00244e9 <__adddf3+0x606>
c002417a:	85 c0                	test   eax,eax
c002417c:	0f 89 67 03 00 00    	jns    c00244e9 <__adddf3+0x606>
c0024182:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024185:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024188:	f7 d1                	not    ecx
c002418a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024190:	0f 84 44 03 00 00    	je     c00244da <__adddf3+0x5f7>
c0024196:	89 d1                	mov    ecx,edx
c0024198:	d1 e9                	shr    ecx,1
c002419a:	83 e2 01             	and    edx,0x1
c002419d:	09 ca                	or     edx,ecx
c002419f:	89 c1                	mov    ecx,eax
c00241a1:	c1 e1 1f             	shl    ecx,0x1f
c00241a4:	09 ca                	or     edx,ecx
c00241a6:	d1 e8                	shr    eax,1
c00241a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00241ad:	e9 37 03 00 00       	jmp    c00244e9 <__adddf3+0x606>
c00241b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00241b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00241bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00241be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00241c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00241c7:	29 de                	sub    esi,ebx
c00241c9:	85 f6                	test   esi,esi
c00241cb:	0f 8e bd 00 00 00    	jle    c002428e <__adddf3+0x3ab>
c00241d1:	85 db                	test   ebx,ebx
c00241d3:	75 17                	jne    c00241ec <__adddf3+0x309>
c00241d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00241d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00241db:	0f 84 47 03 00 00    	je     c0024528 <__adddf3+0x645>
c00241e1:	4e                   	dec    esi
c00241e2:	75 20                	jne    c0024204 <__adddf3+0x321>
c00241e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00241e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00241ea:	eb 5b                	jmp    c0024247 <__adddf3+0x364>
c00241ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00241ef:	f7 d3                	not    ebx
c00241f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00241f7:	0f 84 2b 03 00 00    	je     c0024528 <__adddf3+0x645>
c00241fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024204:	83 fe 1f             	cmp    esi,0x1f
c0024207:	7e 49                	jle    c0024252 <__adddf3+0x36f>
c0024209:	83 fe 3f             	cmp    esi,0x3f
c002420c:	0f 8f 16 03 00 00    	jg     c0024528 <__adddf3+0x645>
c0024212:	83 e6 1f             	and    esi,0x1f
c0024215:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024218:	89 f1                	mov    ecx,esi
c002421a:	d3 ef                	shr    edi,cl
c002421c:	31 db                	xor    ebx,ebx
c002421e:	85 f6                	test   esi,esi
c0024220:	74 13                	je     c0024235 <__adddf3+0x352>
c0024222:	b9 20 00 00 00       	mov    ecx,0x20
c0024227:	29 f1                	sub    ecx,esi
c0024229:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002422c:	d3 e6                	shl    esi,cl
c002422e:	31 db                	xor    ebx,ebx
c0024230:	85 f6                	test   esi,esi
c0024232:	0f 95 c3             	setne  bl
c0024235:	31 c9                	xor    ecx,ecx
c0024237:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002423b:	0f 95 c1             	setne  cl
c002423e:	09 cf                	or     edi,ecx
c0024240:	09 fb                	or     ebx,edi
c0024242:	29 da                	sub    edx,ebx
c0024244:	83 d8 00             	sbb    eax,0x0
c0024247:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002424a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002424d:	e9 aa 01 00 00       	jmp    c00243fc <__adddf3+0x519>
c0024252:	bf 20 00 00 00       	mov    edi,0x20
c0024257:	29 f7                	sub    edi,esi
c0024259:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002425c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002425f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024262:	d3 e3                	shl    ebx,cl
c0024264:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024267:	89 f1                	mov    ecx,esi
c0024269:	d3 ef                	shr    edi,cl
c002426b:	09 fb                	or     ebx,edi
c002426d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024270:	89 f1                	mov    ecx,esi
c0024272:	d3 ef                	shr    edi,cl
c0024274:	89 fe                	mov    esi,edi
c0024276:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024279:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002427c:	d3 e7                	shl    edi,cl
c002427e:	85 ff                	test   edi,edi
c0024280:	0f 95 c1             	setne  cl
c0024283:	0f b6 c9             	movzx  ecx,cl
c0024286:	09 cb                	or     ebx,ecx
c0024288:	29 da                	sub    edx,ebx
c002428a:	19 f0                	sbb    eax,esi
c002428c:	eb b9                	jmp    c0024247 <__adddf3+0x364>
c002428e:	0f 84 cd 00 00 00    	je     c0024361 <__adddf3+0x47e>
c0024294:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0024297:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002429a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002429d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00242a1:	75 1b                	jne    c00242be <__adddf3+0x3db>
c00242a3:	89 d6                	mov    esi,edx
c00242a5:	09 c6                	or     esi,eax
c00242a7:	0f 84 7b 02 00 00    	je     c0024528 <__adddf3+0x645>
c00242ad:	4b                   	dec    ebx
c00242ae:	75 24                	jne    c00242d4 <__adddf3+0x3f1>
c00242b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00242b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00242b6:	29 d1                	sub    ecx,edx
c00242b8:	19 c6                	sbb    esi,eax
c00242ba:	89 ca                	mov    edx,ecx
c00242bc:	eb 61                	jmp    c002431f <__adddf3+0x43c>
c00242be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00242c1:	f7 d6                	not    esi
c00242c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00242c9:	0f 84 59 02 00 00    	je     c0024528 <__adddf3+0x645>
c00242cf:	0d 00 00 00 80       	or     eax,0x80000000
c00242d4:	83 fb 1f             	cmp    ebx,0x1f
c00242d7:	7e 4d                	jle    c0024326 <__adddf3+0x443>
c00242d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00242dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00242df:	83 fb 3f             	cmp    ebx,0x3f
c00242e2:	0f 8f 40 02 00 00    	jg     c0024528 <__adddf3+0x645>
c00242e8:	83 e3 1f             	and    ebx,0x1f
c00242eb:	89 d9                	mov    ecx,ebx
c00242ed:	89 c7                	mov    edi,eax
c00242ef:	d3 ef                	shr    edi,cl
c00242f1:	31 db                	xor    ebx,ebx
c00242f3:	85 c9                	test   ecx,ecx
c00242f5:	74 12                	je     c0024309 <__adddf3+0x426>
c00242f7:	be 20 00 00 00       	mov    esi,0x20
c00242fc:	29 ce                	sub    esi,ecx
c00242fe:	89 f1                	mov    ecx,esi
c0024300:	d3 e0                	shl    eax,cl
c0024302:	31 db                	xor    ebx,ebx
c0024304:	85 c0                	test   eax,eax
c0024306:	0f 95 c3             	setne  bl
c0024309:	31 c0                	xor    eax,eax
c002430b:	85 d2                	test   edx,edx
c002430d:	0f 95 c0             	setne  al
c0024310:	09 c7                	or     edi,eax
c0024312:	09 fb                	or     ebx,edi
c0024314:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024317:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002431a:	29 da                	sub    edx,ebx
c002431c:	83 de 00             	sbb    esi,0x0
c002431f:	89 f0                	mov    eax,esi
c0024321:	e9 d6 00 00 00       	jmp    c00243fc <__adddf3+0x519>
c0024326:	be 20 00 00 00       	mov    esi,0x20
c002432b:	29 de                	sub    esi,ebx
c002432d:	89 c7                	mov    edi,eax
c002432f:	89 f1                	mov    ecx,esi
c0024331:	d3 e7                	shl    edi,cl
c0024333:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024336:	89 d7                	mov    edi,edx
c0024338:	88 d9                	mov    cl,bl
c002433a:	d3 ef                	shr    edi,cl
c002433c:	89 f9                	mov    ecx,edi
c002433e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024341:	09 cf                	or     edi,ecx
c0024343:	88 d9                	mov    cl,bl
c0024345:	d3 e8                	shr    eax,cl
c0024347:	89 f1                	mov    ecx,esi
c0024349:	d3 e2                	shl    edx,cl
c002434b:	85 d2                	test   edx,edx
c002434d:	0f 95 c2             	setne  dl
c0024350:	0f b6 d2             	movzx  edx,dl
c0024353:	09 d7                	or     edi,edx
c0024355:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024358:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002435b:	29 fa                	sub    edx,edi
c002435d:	19 c6                	sbb    esi,eax
c002435f:	eb be                	jmp    c002431f <__adddf3+0x43c>
c0024361:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024364:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024367:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002436d:	75 6a                	jne    c00243d9 <__adddf3+0x4f6>
c002436f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024373:	75 58                	jne    c00243cd <__adddf3+0x4ea>
c0024375:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024378:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002437b:	89 d6                	mov    esi,edx
c002437d:	09 c6                	or     esi,eax
c002437f:	75 17                	jne    c0024398 <__adddf3+0x4b5>
c0024381:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024384:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024387:	85 db                	test   ebx,ebx
c0024389:	0f 85 99 01 00 00    	jne    c0024528 <__adddf3+0x645>
c002438f:	31 ff                	xor    edi,edi
c0024391:	31 c9                	xor    ecx,ecx
c0024393:	e9 90 01 00 00       	jmp    c0024528 <__adddf3+0x645>
c0024398:	85 db                	test   ebx,ebx
c002439a:	0f 84 88 01 00 00    	je     c0024528 <__adddf3+0x645>
c00243a0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00243a3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00243a6:	85 c0                	test   eax,eax
c00243a8:	79 10                	jns    c00243ba <__adddf3+0x4d7>
c00243aa:	31 c9                	xor    ecx,ecx
c00243ac:	f7 da                	neg    edx
c00243ae:	0f 95 c1             	setne  cl
c00243b1:	01 c8                	add    eax,ecx
c00243b3:	f7 d8                	neg    eax
c00243b5:	e9 2f 01 00 00       	jmp    c00244e9 <__adddf3+0x606>
c00243ba:	31 ff                	xor    edi,edi
c00243bc:	31 c9                	xor    ecx,ecx
c00243be:	89 c3                	mov    ebx,eax
c00243c0:	09 d3                	or     ebx,edx
c00243c2:	0f 84 60 01 00 00    	je     c0024528 <__adddf3+0x645>
c00243c8:	e9 05 01 00 00       	jmp    c00244d2 <__adddf3+0x5ef>
c00243cd:	31 ff                	xor    edi,edi
c00243cf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00243d4:	e9 4f 01 00 00       	jmp    c0024528 <__adddf3+0x645>
c00243d9:	89 c1                	mov    ecx,eax
c00243db:	89 d0                	mov    eax,edx
c00243dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00243e0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00243e3:	89 ca                	mov    edx,ecx
c00243e5:	85 c9                	test   ecx,ecx
c00243e7:	79 2c                	jns    c0024415 <__adddf3+0x532>
c00243e9:	31 c9                	xor    ecx,ecx
c00243eb:	f7 d8                	neg    eax
c00243ed:	0f 95 c1             	setne  cl
c00243f0:	01 ca                	add    edx,ecx
c00243f2:	f7 da                	neg    edx
c00243f4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00243f7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00243fa:	eb 19                	jmp    c0024415 <__adddf3+0x532>
c00243fc:	85 c0                	test   eax,eax
c00243fe:	0f 89 e5 00 00 00    	jns    c00244e9 <__adddf3+0x606>
c0024404:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024409:	89 c1                	mov    ecx,eax
c002440b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002440e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024411:	89 d0                	mov    eax,edx
c0024413:	89 ca                	mov    edx,ecx
c0024415:	85 d2                	test   edx,edx
c0024417:	74 59                	je     c0024472 <__adddf3+0x58f>
c0024419:	0f bd da             	bsr    ebx,edx
c002441c:	83 f3 1f             	xor    ebx,0x1f
c002441f:	88 d9                	mov    cl,bl
c0024421:	d3 e2                	shl    edx,cl
c0024423:	bf 20 00 00 00       	mov    edi,0x20
c0024428:	89 f9                	mov    ecx,edi
c002442a:	29 d9                	sub    ecx,ebx
c002442c:	89 c6                	mov    esi,eax
c002442e:	d3 ee                	shr    esi,cl
c0024430:	09 d6                	or     esi,edx
c0024432:	88 d9                	mov    cl,bl
c0024434:	d3 e0                	shl    eax,cl
c0024436:	89 c2                	mov    edx,eax
c0024438:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002443b:	25 ff 07 00 00       	and    eax,0x7ff
c0024440:	39 d8                	cmp    eax,ebx
c0024442:	7f 22                	jg     c0024466 <__adddf3+0x583>
c0024444:	29 c3                	sub    ebx,eax
c0024446:	43                   	inc    ebx
c0024447:	88 d9                	mov    cl,bl
c0024449:	d3 ea                	shr    edx,cl
c002444b:	29 df                	sub    edi,ebx
c002444d:	89 f9                	mov    ecx,edi
c002444f:	89 f0                	mov    eax,esi
c0024451:	d3 e0                	shl    eax,cl
c0024453:	09 c2                	or     edx,eax
c0024455:	89 f0                	mov    eax,esi
c0024457:	88 d9                	mov    cl,bl
c0024459:	d3 e8                	shr    eax,cl
c002445b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002445e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024464:	eb 6f                	jmp    c00244d5 <__adddf3+0x5f2>
c0024466:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024469:	29 d8                	sub    eax,ebx
c002446b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002446e:	89 f0                	mov    eax,esi
c0024470:	eb 59                	jmp    c00244cb <__adddf3+0x5e8>
c0024472:	85 c0                	test   eax,eax
c0024474:	74 6a                	je     c00244e0 <__adddf3+0x5fd>
c0024476:	0f bd c8             	bsr    ecx,eax
c0024479:	83 f1 1f             	xor    ecx,0x1f
c002447c:	d3 e0                	shl    eax,cl
c002447e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024481:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024487:	83 c1 20             	add    ecx,0x20
c002448a:	39 cb                	cmp    ebx,ecx
c002448c:	7f 35                	jg     c00244c3 <__adddf3+0x5e0>
c002448e:	29 d9                	sub    ecx,ebx
c0024490:	8d 71 01             	lea    esi,[ecx+0x1]
c0024493:	83 fe 1f             	cmp    esi,0x1f
c0024496:	7e 09                	jle    c00244a1 <__adddf3+0x5be>
c0024498:	83 e9 1f             	sub    ecx,0x1f
c002449b:	d3 e8                	shr    eax,cl
c002449d:	89 c3                	mov    ebx,eax
c002449f:	eb 11                	jmp    c00244b2 <__adddf3+0x5cf>
c00244a1:	b9 20 00 00 00       	mov    ecx,0x20
c00244a6:	29 f1                	sub    ecx,esi
c00244a8:	89 c3                	mov    ebx,eax
c00244aa:	d3 e3                	shl    ebx,cl
c00244ac:	89 f1                	mov    ecx,esi
c00244ae:	d3 e8                	shr    eax,cl
c00244b0:	89 c2                	mov    edx,eax
c00244b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00244b5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00244ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00244bd:	89 d0                	mov    eax,edx
c00244bf:	89 da                	mov    edx,ebx
c00244c1:	eb 26                	jmp    c00244e9 <__adddf3+0x606>
c00244c3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244c6:	29 cf                	sub    edi,ecx
c00244c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244cb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00244d0:	eb 17                	jmp    c00244e9 <__adddf3+0x606>
c00244d2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244d5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244d8:	eb 0f                	jmp    c00244e9 <__adddf3+0x606>
c00244da:	31 d2                	xor    edx,edx
c00244dc:	31 c0                	xor    eax,eax
c00244de:	eb 09                	jmp    c00244e9 <__adddf3+0x606>
c00244e0:	89 c2                	mov    edx,eax
c00244e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00244e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00244ec:	c1 e1 14             	shl    ecx,0x14
c00244ef:	89 c3                	mov    ebx,eax
c00244f1:	c1 eb 0b             	shr    ebx,0xb
c00244f4:	09 d9                	or     ecx,ebx
c00244f6:	89 d3                	mov    ebx,edx
c00244f8:	c1 eb 0b             	shr    ebx,0xb
c00244fb:	c1 e0 15             	shl    eax,0x15
c00244fe:	09 d8                	or     eax,ebx
c0024500:	89 c7                	mov    edi,eax
c0024502:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024508:	0f 95 c0             	setne  al
c002450b:	89 c6                	mov    esi,eax
c002450d:	09 f3                	or     ebx,esi
c002450f:	83 e3 01             	and    ebx,0x1
c0024512:	c1 ea 0a             	shr    edx,0xa
c0024515:	21 da                	and    edx,ebx
c0024517:	89 f8                	mov    eax,edi
c0024519:	01 d0                	add    eax,edx
c002451b:	83 d1 00             	adc    ecx,0x0
c002451e:	89 c7                	mov    edi,eax
c0024520:	eb 06                	jmp    c0024528 <__adddf3+0x645>
c0024522:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024525:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024528:	89 f8                	mov    eax,edi
c002452a:	89 ca                	mov    edx,ecx
c002452c:	83 c4 24             	add    esp,0x24
c002452f:	5b                   	pop    ebx
c0024530:	5e                   	pop    esi
c0024531:	5f                   	pop    edi
c0024532:	5d                   	pop    ebp
c0024533:	c3                   	ret    

c0024534 <__subdf3>:
c0024534:	55                   	push   ebp
c0024535:	89 e5                	mov    ebp,esp
c0024537:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002453a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002453d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024543:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024546:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024549:	5d                   	pop    ebp
c002454a:	e9 94 f9 ff ff       	jmp    c0023ee3 <__adddf3>

c002454f <__negdf2>:
c002454f:	55                   	push   ebp
c0024550:	89 e5                	mov    ebp,esp
c0024552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024555:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024558:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002455e:	5d                   	pop    ebp
c002455f:	c3                   	ret    

c0024560 <__muldf3>:
c0024560:	55                   	push   ebp
c0024561:	89 e5                	mov    ebp,esp
c0024563:	57                   	push   edi
c0024564:	56                   	push   esi
c0024565:	53                   	push   ebx
c0024566:	83 ec 24             	sub    esp,0x24
c0024569:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002456c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002456f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024572:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024575:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024578:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002457b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002457e:	89 c8                	mov    eax,ecx
c0024580:	c1 f8 14             	sar    eax,0x14
c0024583:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024586:	89 f8                	mov    eax,edi
c0024588:	89 fb                	mov    ebx,edi
c002458a:	c1 e3 0b             	shl    ebx,0xb
c002458d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024590:	c1 e1 0b             	shl    ecx,0xb
c0024593:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024599:	c1 e8 15             	shr    eax,0x15
c002459c:	09 c1                	or     ecx,eax
c002459e:	89 d6                	mov    esi,edx
c00245a0:	89 d0                	mov    eax,edx
c00245a2:	c1 f8 14             	sar    eax,0x14
c00245a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00245ab:	89 c3                	mov    ebx,eax
c00245ad:	c1 e3 0b             	shl    ebx,0xb
c00245b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00245b3:	c1 e6 0b             	shl    esi,0xb
c00245b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00245bc:	c1 e8 15             	shr    eax,0x15
c00245bf:	09 c6                	or     esi,eax
c00245c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00245c4:	25 ff 07 00 00       	and    eax,0x7ff
c00245c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00245cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00245cf:	25 ff 07 00 00       	and    eax,0x7ff
c00245d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00245d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00245da:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00245dd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00245e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00245e7:	40                   	inc    eax
c00245e8:	a9 fe 07 00 00       	test   eax,0x7fe
c00245ed:	0f 85 8d 00 00 00    	jne    c0024680 <__muldf3+0x120>
c00245f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245f6:	09 c8                	or     eax,ecx
c00245f8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00245fc:	74 44                	je     c0024642 <__muldf3+0xe2>
c00245fe:	85 c0                	test   eax,eax
c0024600:	0f 85 31 02 00 00    	jne    c0024837 <__muldf3+0x2d7>
c0024606:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024609:	40                   	inc    eax
c002460a:	a9 fe 07 00 00       	test   eax,0x7fe
c002460f:	75 13                	jne    c0024624 <__muldf3+0xc4>
c0024611:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024614:	09 f1                	or     ecx,esi
c0024616:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002461a:	74 22                	je     c002463e <__muldf3+0xde>
c002461c:	85 c9                	test   ecx,ecx
c002461e:	0f 85 0d 02 00 00    	jne    c0024831 <__muldf3+0x2d1>
c0024624:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024628:	0f 89 09 02 00 00    	jns    c0024837 <__muldf3+0x2d7>
c002462e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024631:	05 00 00 00 80       	add    eax,0x80000000
c0024636:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024639:	e9 f9 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c002463e:	85 c9                	test   ecx,ecx
c0024640:	eb 2e                	jmp    c0024670 <__muldf3+0x110>
c0024642:	85 c0                	test   eax,eax
c0024644:	74 20                	je     c0024666 <__muldf3+0x106>
c0024646:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024649:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002464c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002464f:	c1 ef 1f             	shr    edi,0x1f
c0024652:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024655:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024658:	8d 43 ff             	lea    eax,[ebx-0x1]
c002465b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002465e:	09 f9                	or     ecx,edi
c0024660:	78 1e                	js     c0024680 <__muldf3+0x120>
c0024662:	89 c3                	mov    ebx,eax
c0024664:	eb e0                	jmp    c0024646 <__muldf3+0xe6>
c0024666:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024669:	f7 d0                	not    eax
c002466b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024670:	75 b2                	jne    c0024624 <__muldf3+0xc4>
c0024672:	31 ff                	xor    edi,edi
c0024674:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002467b:	e9 b7 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c0024680:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024683:	40                   	inc    eax
c0024684:	a9 fe 07 00 00       	test   eax,0x7fe
c0024689:	75 57                	jne    c00246e2 <__muldf3+0x182>
c002468b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002468e:	09 f0                	or     eax,esi
c0024690:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024694:	74 23                	je     c00246b9 <__muldf3+0x159>
c0024696:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002469a:	0f 89 91 01 00 00    	jns    c0024831 <__muldf3+0x2d1>
c00246a0:	85 c0                	test   eax,eax
c00246a2:	0f 85 89 01 00 00    	jne    c0024831 <__muldf3+0x2d1>
c00246a8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00246ab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00246b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00246b4:	e9 7e 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c00246b9:	85 c0                	test   eax,eax
c00246bb:	75 0c                	jne    c00246c9 <__muldf3+0x169>
c00246bd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00246c1:	0f 89 6a 01 00 00    	jns    c0024831 <__muldf3+0x2d1>
c00246c7:	eb df                	jmp    c00246a8 <__muldf3+0x148>
c00246c9:	01 f6                	add    esi,esi
c00246cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00246ce:	c1 ea 1f             	shr    edx,0x1f
c00246d1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00246d4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00246d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00246da:	09 d6                	or     esi,edx
c00246dc:	78 04                	js     c00246e2 <__muldf3+0x182>
c00246de:	89 c3                	mov    ebx,eax
c00246e0:	eb e7                	jmp    c00246c9 <__muldf3+0x169>
c00246e2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00246e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00246ee:	89 c8                	mov    eax,ecx
c00246f0:	f7 e6                	mul    esi
c00246f2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00246f5:	89 c7                	mov    edi,eax
c00246f7:	89 c8                	mov    eax,ecx
c00246f9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00246fc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00246ff:	89 c1                	mov    ecx,eax
c0024701:	89 f0                	mov    eax,esi
c0024703:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024706:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024709:	89 c6                	mov    esi,eax
c002470b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002470e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024711:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024714:	31 c0                	xor    eax,eax
c0024716:	01 f1                	add    ecx,esi
c0024718:	0f 92 c0             	setb   al
c002471b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002471e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024721:	83 d6 00             	adc    esi,0x0
c0024724:	01 c7                	add    edi,eax
c0024726:	83 d6 00             	adc    esi,0x0
c0024729:	01 ca                	add    edx,ecx
c002472b:	0f 92 c1             	setb   cl
c002472e:	0f b6 c9             	movzx  ecx,cl
c0024731:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024734:	83 d6 00             	adc    esi,0x0
c0024737:	01 cf                	add    edi,ecx
c0024739:	83 d6 00             	adc    esi,0x0
c002473c:	31 c9                	xor    ecx,ecx
c002473e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024741:	0f 95 c1             	setne  cl
c0024744:	09 cf                	or     edi,ecx
c0024746:	85 f6                	test   esi,esi
c0024748:	78 0c                	js     c0024756 <__muldf3+0x1f6>
c002474a:	01 f6                	add    esi,esi
c002474c:	89 f8                	mov    eax,edi
c002474e:	c1 e8 1f             	shr    eax,0x1f
c0024751:	09 c6                	or     esi,eax
c0024753:	01 ff                	add    edi,edi
c0024755:	4b                   	dec    ebx
c0024756:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002475c:	0f 8f 85 00 00 00    	jg     c00247e7 <__muldf3+0x287>
c0024762:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024768:	85 db                	test   ebx,ebx
c002476a:	0f 8f 84 00 00 00    	jg     c00247f4 <__muldf3+0x294>
c0024770:	83 fb cc             	cmp    ebx,0xffffffcc
c0024773:	7c 79                	jl     c00247ee <__muldf3+0x28e>
c0024775:	ba 01 00 00 00       	mov    edx,0x1
c002477a:	29 da                	sub    edx,ebx
c002477c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024782:	83 fa 1f             	cmp    edx,0x1f
c0024785:	7e 30                	jle    c00247b7 <__muldf3+0x257>
c0024787:	83 fa 20             	cmp    edx,0x20
c002478a:	75 0b                	jne    c0024797 <__muldf3+0x237>
c002478c:	31 c0                	xor    eax,eax
c002478e:	85 ff                	test   edi,edi
c0024790:	0f 95 c0             	setne  al
c0024793:	89 c7                	mov    edi,eax
c0024795:	eb 1a                	jmp    c00247b1 <__muldf3+0x251>
c0024797:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002479a:	89 f0                	mov    eax,esi
c002479c:	d3 e0                	shl    eax,cl
c002479e:	09 f8                	or     eax,edi
c00247a0:	0f 95 c0             	setne  al
c00247a3:	0f b6 c0             	movzx  eax,al
c00247a6:	89 c7                	mov    edi,eax
c00247a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00247ad:	29 d9                	sub    ecx,ebx
c00247af:	d3 ee                	shr    esi,cl
c00247b1:	09 f7                	or     edi,esi
c00247b3:	31 db                	xor    ebx,ebx
c00247b5:	eb 3b                	jmp    c00247f2 <__muldf3+0x292>
c00247b7:	83 c3 1f             	add    ebx,0x1f
c00247ba:	89 f0                	mov    eax,esi
c00247bc:	88 d9                	mov    cl,bl
c00247be:	d3 e0                	shl    eax,cl
c00247c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247c3:	89 f8                	mov    eax,edi
c00247c5:	88 d1                	mov    cl,dl
c00247c7:	d3 e8                	shr    eax,cl
c00247c9:	89 c1                	mov    ecx,eax
c00247cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00247ce:	09 c8                	or     eax,ecx
c00247d0:	88 d9                	mov    cl,bl
c00247d2:	d3 e7                	shl    edi,cl
c00247d4:	31 db                	xor    ebx,ebx
c00247d6:	85 ff                	test   edi,edi
c00247d8:	0f 95 c3             	setne  bl
c00247db:	89 df                	mov    edi,ebx
c00247dd:	09 c7                	or     edi,eax
c00247df:	88 d1                	mov    cl,dl
c00247e1:	d3 ee                	shr    esi,cl
c00247e3:	31 db                	xor    ebx,ebx
c00247e5:	eb 0d                	jmp    c00247f4 <__muldf3+0x294>
c00247e7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00247ec:	eb 02                	jmp    c00247f0 <__muldf3+0x290>
c00247ee:	31 db                	xor    ebx,ebx
c00247f0:	31 ff                	xor    edi,edi
c00247f2:	31 f6                	xor    esi,esi
c00247f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00247f7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00247fa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00247ff:	09 c3                	or     ebx,eax
c0024801:	c1 e3 14             	shl    ebx,0x14
c0024804:	89 f0                	mov    eax,esi
c0024806:	c1 e8 0b             	shr    eax,0xb
c0024809:	09 c3                	or     ebx,eax
c002480b:	89 f8                	mov    eax,edi
c002480d:	c1 e8 0b             	shr    eax,0xb
c0024810:	c1 e6 15             	shl    esi,0x15
c0024813:	09 c6                	or     esi,eax
c0024815:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002481b:	0f 95 c1             	setne  cl
c002481e:	09 c8                	or     eax,ecx
c0024820:	83 e0 01             	and    eax,0x1
c0024823:	c1 ef 0a             	shr    edi,0xa
c0024826:	21 c7                	and    edi,eax
c0024828:	01 f7                	add    edi,esi
c002482a:	83 d3 00             	adc    ebx,0x0
c002482d:	89 da                	mov    edx,ebx
c002482f:	eb 03                	jmp    c0024834 <__muldf3+0x2d4>
c0024831:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024834:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024837:	89 f8                	mov    eax,edi
c0024839:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002483c:	83 c4 24             	add    esp,0x24
c002483f:	5b                   	pop    ebx
c0024840:	5e                   	pop    esi
c0024841:	5f                   	pop    edi
c0024842:	5d                   	pop    ebp
c0024843:	c3                   	ret    

c0024844 <__divdf3>:
c0024844:	55                   	push   ebp
c0024845:	89 e5                	mov    ebp,esp
c0024847:	57                   	push   edi
c0024848:	56                   	push   esi
c0024849:	53                   	push   ebx
c002484a:	83 ec 2c             	sub    esp,0x2c
c002484d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024850:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024853:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024856:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024859:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002485c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002485f:	89 ce                	mov    esi,ecx
c0024861:	89 c8                	mov    eax,ecx
c0024863:	c1 f8 14             	sar    eax,0x14
c0024866:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024869:	89 f8                	mov    eax,edi
c002486b:	89 fb                	mov    ebx,edi
c002486d:	c1 e3 0b             	shl    ebx,0xb
c0024870:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024873:	c1 e6 0b             	shl    esi,0xb
c0024876:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002487c:	c1 e8 15             	shr    eax,0x15
c002487f:	09 c6                	or     esi,eax
c0024881:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024884:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024887:	89 c2                	mov    edx,eax
c0024889:	c1 fa 14             	sar    edx,0x14
c002488c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002488f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024892:	89 de                	mov    esi,ebx
c0024894:	c1 e6 0b             	shl    esi,0xb
c0024897:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002489a:	c1 e0 0b             	shl    eax,0xb
c002489d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00248a2:	c1 eb 15             	shr    ebx,0x15
c00248a5:	09 d8                	or     eax,ebx
c00248a7:	89 c2                	mov    edx,eax
c00248a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00248ac:	25 ff 07 00 00       	and    eax,0x7ff
c00248b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00248b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00248b7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00248bd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00248c0:	29 d8                	sub    eax,ebx
c00248c2:	05 ff 03 00 00       	add    eax,0x3ff
c00248c7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00248ca:	46                   	inc    esi
c00248cb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00248d1:	0f 85 a5 00 00 00    	jne    c002497c <__divdf3+0x138>
c00248d7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00248da:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00248dd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00248e1:	74 2a                	je     c002490d <__divdf3+0xc9>
c00248e3:	85 f6                	test   esi,esi
c00248e5:	0f 85 cc 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c00248eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00248ee:	40                   	inc    eax
c00248ef:	a9 fe 07 00 00       	test   eax,0x7fe
c00248f4:	75 26                	jne    c002491c <__divdf3+0xd8>
c00248f6:	85 db                	test   ebx,ebx
c00248f8:	74 22                	je     c002491c <__divdf3+0xd8>
c00248fa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00248fd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024900:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024903:	09 d0                	or     eax,edx
c0024905:	0f 85 ac 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c002490b:	eb 63                	jmp    c0024970 <__divdf3+0x12c>
c002490d:	85 f6                	test   esi,esi
c002490f:	75 22                	jne    c0024933 <__divdf3+0xef>
c0024911:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024914:	40                   	inc    eax
c0024915:	a9 fe 07 00 00       	test   eax,0x7fe
c002491a:	74 36                	je     c0024952 <__divdf3+0x10e>
c002491c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024920:	0f 89 91 02 00 00    	jns    c0024bb7 <__divdf3+0x373>
c0024926:	89 f8                	mov    eax,edi
c0024928:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002492e:	e9 80 02 00 00       	jmp    c0024bb3 <__divdf3+0x36f>
c0024933:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024936:	01 f6                	add    esi,esi
c0024938:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002493b:	c1 ef 1f             	shr    edi,0x1f
c002493e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024941:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024944:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024947:	09 f7                	or     edi,esi
c0024949:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002494c:	78 2e                	js     c002497c <__divdf3+0x138>
c002494e:	89 c8                	mov    eax,ecx
c0024950:	eb e1                	jmp    c0024933 <__divdf3+0xef>
c0024952:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024955:	09 d0                	or     eax,edx
c0024957:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002495b:	74 0f                	je     c002496c <__divdf3+0x128>
c002495d:	85 c0                	test   eax,eax
c002495f:	74 bb                	je     c002491c <__divdf3+0xd8>
c0024961:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024964:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024967:	e9 4b 02 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c002496c:	85 c0                	test   eax,eax
c002496e:	75 ac                	jne    c002491c <__divdf3+0xd8>
c0024970:	31 ff                	xor    edi,edi
c0024972:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024977:	e9 3b 02 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c002497c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002497f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024982:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024988:	75 6b                	jne    c00249f5 <__divdf3+0x1b1>
c002498a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002498d:	09 d6                	or     esi,edx
c002498f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024993:	74 28                	je     c00249bd <__divdf3+0x179>
c0024995:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024998:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002499b:	85 f6                	test   esi,esi
c002499d:	0f 85 14 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c00249a3:	31 ff                	xor    edi,edi
c00249a5:	31 c9                	xor    ecx,ecx
c00249a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249aa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249ad:	0f 89 04 02 00 00    	jns    c0024bb7 <__divdf3+0x373>
c00249b3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00249b8:	e9 fa 01 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c00249bd:	85 f6                	test   esi,esi
c00249bf:	75 1b                	jne    c00249dc <__divdf3+0x198>
c00249c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249c4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249c7:	25 00 00 00 80       	and    eax,0x80000000
c00249cc:	31 c9                	xor    ecx,ecx
c00249ce:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00249d3:	89 cf                	mov    edi,ecx
c00249d5:	89 c1                	mov    ecx,eax
c00249d7:	e9 db 01 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c00249dc:	01 d2                	add    edx,edx
c00249de:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00249e1:	c1 eb 1f             	shr    ebx,0x1f
c00249e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00249e7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00249ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00249ed:	09 da                	or     edx,ebx
c00249ef:	78 04                	js     c00249f5 <__divdf3+0x1b1>
c00249f1:	89 c8                	mov    eax,ecx
c00249f3:	eb e7                	jmp    c00249dc <__divdf3+0x198>
c00249f5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00249f8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00249fe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024a04:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024a07:	39 d6                	cmp    esi,edx
c0024a09:	77 0d                	ja     c0024a18 <__divdf3+0x1d4>
c0024a0b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024a0e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024a11:	72 1b                	jb     c0024a2e <__divdf3+0x1ea>
c0024a13:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024a16:	75 16                	jne    c0024a2e <__divdf3+0x1ea>
c0024a18:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a1b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024a1e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024a21:	83 de 00             	sbb    esi,0x0
c0024a24:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024a27:	ba 01 00 00 00       	mov    edx,0x1
c0024a2c:	eb 02                	jmp    c0024a30 <__divdf3+0x1ec>
c0024a2e:	31 d2                	xor    edx,edx
c0024a30:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024a37:	31 ff                	xor    edi,edi
c0024a39:	01 ff                	add    edi,edi
c0024a3b:	89 d1                	mov    ecx,edx
c0024a3d:	c1 e9 1f             	shr    ecx,0x1f
c0024a40:	09 cf                	or     edi,ecx
c0024a42:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024a45:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024a48:	89 da                	mov    edx,ebx
c0024a4a:	89 f3                	mov    ebx,esi
c0024a4c:	8d 34 36             	lea    esi,[esi+esi*1]
c0024a4f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a52:	c1 e9 1f             	shr    ecx,0x1f
c0024a55:	09 ce                	or     esi,ecx
c0024a57:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a5a:	01 c9                	add    ecx,ecx
c0024a5c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024a5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024a62:	85 db                	test   ebx,ebx
c0024a64:	78 29                	js     c0024a8f <__divdf3+0x24b>
c0024a66:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024a69:	72 07                	jb     c0024a72 <__divdf3+0x22e>
c0024a6b:	75 3c                	jne    c0024aa9 <__divdf3+0x265>
c0024a6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a70:	77 37                	ja     c0024aa9 <__divdf3+0x265>
c0024a72:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a75:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024a78:	31 d2                	xor    edx,edx
c0024a7a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024a7d:	0f 97 c2             	seta   dl
c0024a80:	29 d6                	sub    esi,edx
c0024a82:	89 d9                	mov    ecx,ebx
c0024a84:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024a87:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024a8a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024a8d:	eb 17                	jmp    c0024aa6 <__divdf3+0x262>
c0024a8f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a92:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a95:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a98:	0f 97 c1             	seta   cl
c0024a9b:	0f b6 c9             	movzx  ecx,cl
c0024a9e:	29 ce                	sub    esi,ecx
c0024aa0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024aa3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024aa6:	83 ca 01             	or     edx,0x1
c0024aa9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024aac:	75 8b                	jne    c0024a39 <__divdf3+0x1f5>
c0024aae:	c1 e7 09             	shl    edi,0x9
c0024ab1:	89 d1                	mov    ecx,edx
c0024ab3:	c1 e9 17             	shr    ecx,0x17
c0024ab6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024ab9:	09 f3                	or     ebx,esi
c0024abb:	0f 95 c3             	setne  bl
c0024abe:	0f b6 db             	movzx  ebx,bl
c0024ac1:	c1 e2 09             	shl    edx,0x9
c0024ac4:	09 d3                	or     ebx,edx
c0024ac6:	89 ca                	mov    edx,ecx
c0024ac8:	09 fa                	or     edx,edi
c0024aca:	78 0c                	js     c0024ad8 <__divdf3+0x294>
c0024acc:	01 d2                	add    edx,edx
c0024ace:	89 d9                	mov    ecx,ebx
c0024ad0:	c1 e9 1f             	shr    ecx,0x1f
c0024ad3:	09 ca                	or     edx,ecx
c0024ad5:	01 db                	add    ebx,ebx
c0024ad7:	48                   	dec    eax
c0024ad8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024add:	0f 8f 83 00 00 00    	jg     c0024b66 <__divdf3+0x322>
c0024ae3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024ae9:	85 c0                	test   eax,eax
c0024aeb:	0f 8f 82 00 00 00    	jg     c0024b73 <__divdf3+0x32f>
c0024af1:	83 f8 cc             	cmp    eax,0xffffffcc
c0024af4:	7c 77                	jl     c0024b6d <__divdf3+0x329>
c0024af6:	be 01 00 00 00       	mov    esi,0x1
c0024afb:	29 c6                	sub    esi,eax
c0024afd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b03:	83 fe 1f             	cmp    esi,0x1f
c0024b06:	7e 2f                	jle    c0024b37 <__divdf3+0x2f3>
c0024b08:	83 fe 20             	cmp    esi,0x20
c0024b0b:	75 0a                	jne    c0024b17 <__divdf3+0x2d3>
c0024b0d:	85 db                	test   ebx,ebx
c0024b0f:	0f 95 c3             	setne  bl
c0024b12:	0f b6 db             	movzx  ebx,bl
c0024b15:	eb 1a                	jmp    c0024b31 <__divdf3+0x2ed>
c0024b17:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024b1a:	89 d7                	mov    edi,edx
c0024b1c:	d3 e7                	shl    edi,cl
c0024b1e:	89 f9                	mov    ecx,edi
c0024b20:	09 d9                	or     ecx,ebx
c0024b22:	0f 95 c3             	setne  bl
c0024b25:	0f b6 db             	movzx  ebx,bl
c0024b28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024b2d:	29 c1                	sub    ecx,eax
c0024b2f:	d3 ea                	shr    edx,cl
c0024b31:	09 d3                	or     ebx,edx
c0024b33:	31 c0                	xor    eax,eax
c0024b35:	eb 3a                	jmp    c0024b71 <__divdf3+0x32d>
c0024b37:	83 c0 1f             	add    eax,0x1f
c0024b3a:	89 d7                	mov    edi,edx
c0024b3c:	88 c1                	mov    cl,al
c0024b3e:	d3 e7                	shl    edi,cl
c0024b40:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024b43:	89 df                	mov    edi,ebx
c0024b45:	89 f1                	mov    ecx,esi
c0024b47:	d3 ef                	shr    edi,cl
c0024b49:	89 f9                	mov    ecx,edi
c0024b4b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024b4e:	09 cf                	or     edi,ecx
c0024b50:	88 c1                	mov    cl,al
c0024b52:	d3 e3                	shl    ebx,cl
c0024b54:	85 db                	test   ebx,ebx
c0024b56:	0f 95 c3             	setne  bl
c0024b59:	0f b6 db             	movzx  ebx,bl
c0024b5c:	09 fb                	or     ebx,edi
c0024b5e:	89 f1                	mov    ecx,esi
c0024b60:	d3 ea                	shr    edx,cl
c0024b62:	31 c0                	xor    eax,eax
c0024b64:	eb 0d                	jmp    c0024b73 <__divdf3+0x32f>
c0024b66:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024b6b:	eb 02                	jmp    c0024b6f <__divdf3+0x32b>
c0024b6d:	31 c0                	xor    eax,eax
c0024b6f:	31 db                	xor    ebx,ebx
c0024b71:	31 d2                	xor    edx,edx
c0024b73:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024b76:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024b79:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024b7f:	09 c8                	or     eax,ecx
c0024b81:	c1 e0 14             	shl    eax,0x14
c0024b84:	89 d1                	mov    ecx,edx
c0024b86:	c1 e9 0b             	shr    ecx,0xb
c0024b89:	09 c8                	or     eax,ecx
c0024b8b:	89 c6                	mov    esi,eax
c0024b8d:	89 d9                	mov    ecx,ebx
c0024b8f:	c1 e9 0b             	shr    ecx,0xb
c0024b92:	c1 e2 15             	shl    edx,0x15
c0024b95:	09 ca                	or     edx,ecx
c0024b97:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024b9d:	0f 95 c0             	setne  al
c0024ba0:	09 c1                	or     ecx,eax
c0024ba2:	83 e1 01             	and    ecx,0x1
c0024ba5:	c1 eb 0a             	shr    ebx,0xa
c0024ba8:	21 cb                	and    ebx,ecx
c0024baa:	01 d3                	add    ebx,edx
c0024bac:	89 d8                	mov    eax,ebx
c0024bae:	83 d6 00             	adc    esi,0x0
c0024bb1:	89 f2                	mov    edx,esi
c0024bb3:	89 c7                	mov    edi,eax
c0024bb5:	89 d1                	mov    ecx,edx
c0024bb7:	89 f8                	mov    eax,edi
c0024bb9:	89 ca                	mov    edx,ecx
c0024bbb:	83 c4 2c             	add    esp,0x2c
c0024bbe:	5b                   	pop    ebx
c0024bbf:	5e                   	pop    esi
c0024bc0:	5f                   	pop    edi
c0024bc1:	5d                   	pop    ebp
c0024bc2:	c3                   	ret    

c0024bc3 <__floatsidf>:
c0024bc3:	55                   	push   ebp
c0024bc4:	89 e5                	mov    ebp,esp
c0024bc6:	56                   	push   esi
c0024bc7:	53                   	push   ebx
c0024bc8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024bcb:	85 db                	test   ebx,ebx
c0024bcd:	7e 15                	jle    c0024be4 <__floatsidf+0x21>
c0024bcf:	0f bd cb             	bsr    ecx,ebx
c0024bd2:	83 f1 1f             	xor    ecx,0x1f
c0024bd5:	d3 e3                	shl    ebx,cl
c0024bd7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024bdd:	b8 1e 04 00 00       	mov    eax,0x41e
c0024be2:	eb 21                	jmp    c0024c05 <__floatsidf+0x42>
c0024be4:	b8 00 00 00 00       	mov    eax,0x0
c0024be9:	ba 00 00 00 00       	mov    edx,0x0
c0024bee:	74 2a                	je     c0024c1a <__floatsidf+0x57>
c0024bf0:	f7 db                	neg    ebx
c0024bf2:	0f bd cb             	bsr    ecx,ebx
c0024bf5:	83 f1 1f             	xor    ecx,0x1f
c0024bf8:	d3 e3                	shl    ebx,cl
c0024bfa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c00:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024c05:	29 c8                	sub    eax,ecx
c0024c07:	c1 e0 14             	shl    eax,0x14
c0024c0a:	89 c1                	mov    ecx,eax
c0024c0c:	89 de                	mov    esi,ebx
c0024c0e:	c1 ee 0b             	shr    esi,0xb
c0024c11:	09 f1                	or     ecx,esi
c0024c13:	89 ca                	mov    edx,ecx
c0024c15:	c1 e3 15             	shl    ebx,0x15
c0024c18:	89 d8                	mov    eax,ebx
c0024c1a:	5b                   	pop    ebx
c0024c1b:	5e                   	pop    esi
c0024c1c:	5d                   	pop    ebp
c0024c1d:	c3                   	ret    

c0024c1e <__floatunsidf>:
c0024c1e:	55                   	push   ebp
c0024c1f:	89 e5                	mov    ebp,esp
c0024c21:	56                   	push   esi
c0024c22:	53                   	push   ebx
c0024c23:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024c26:	85 db                	test   ebx,ebx
c0024c28:	74 2a                	je     c0024c54 <__floatunsidf+0x36>
c0024c2a:	0f bd cb             	bsr    ecx,ebx
c0024c2d:	83 f1 1f             	xor    ecx,0x1f
c0024c30:	d3 e3                	shl    ebx,cl
c0024c32:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c38:	b8 1e 04 00 00       	mov    eax,0x41e
c0024c3d:	29 c8                	sub    eax,ecx
c0024c3f:	c1 e0 14             	shl    eax,0x14
c0024c42:	89 c1                	mov    ecx,eax
c0024c44:	89 de                	mov    esi,ebx
c0024c46:	c1 ee 0b             	shr    esi,0xb
c0024c49:	09 f1                	or     ecx,esi
c0024c4b:	89 ca                	mov    edx,ecx
c0024c4d:	c1 e3 15             	shl    ebx,0x15
c0024c50:	89 d8                	mov    eax,ebx
c0024c52:	eb 04                	jmp    c0024c58 <__floatunsidf+0x3a>
c0024c54:	31 c0                	xor    eax,eax
c0024c56:	31 d2                	xor    edx,edx
c0024c58:	5b                   	pop    ebx
c0024c59:	5e                   	pop    esi
c0024c5a:	5d                   	pop    ebp
c0024c5b:	c3                   	ret    

c0024c5c <__fixdfsi>:
c0024c5c:	55                   	push   ebp
c0024c5d:	89 e5                	mov    ebp,esp
c0024c5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024c62:	89 d1                	mov    ecx,edx
c0024c64:	c1 e1 0b             	shl    ecx,0xb
c0024c67:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c70:	c1 e8 15             	shr    eax,0x15
c0024c73:	09 c1                	or     ecx,eax
c0024c75:	c1 fa 14             	sar    edx,0x14
c0024c78:	78 1f                	js     c0024c99 <__fixdfsi+0x3d>
c0024c7a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024c80:	31 c0                	xor    eax,eax
c0024c82:	83 fa 1e             	cmp    edx,0x1e
c0024c85:	77 40                	ja     c0024cc7 <__fixdfsi+0x6b>
c0024c87:	89 c8                	mov    eax,ecx
c0024c89:	0d 00 00 00 80       	or     eax,0x80000000
c0024c8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024c93:	29 d1                	sub    ecx,edx
c0024c95:	d3 e8                	shr    eax,cl
c0024c97:	eb 2e                	jmp    c0024cc7 <__fixdfsi+0x6b>
c0024c99:	31 c0                	xor    eax,eax
c0024c9b:	81 c2 01 04 00 00    	add    edx,0x401
c0024ca1:	78 24                	js     c0024cc7 <__fixdfsi+0x6b>
c0024ca3:	83 fa 1e             	cmp    edx,0x1e
c0024ca6:	7e 09                	jle    c0024cb1 <__fixdfsi+0x55>
c0024ca8:	83 fa 1f             	cmp    edx,0x1f
c0024cab:	75 18                	jne    c0024cc5 <__fixdfsi+0x69>
c0024cad:	85 c9                	test   ecx,ecx
c0024caf:	75 14                	jne    c0024cc5 <__fixdfsi+0x69>
c0024cb1:	89 c8                	mov    eax,ecx
c0024cb3:	0d 00 00 00 80       	or     eax,0x80000000
c0024cb8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cbd:	29 d1                	sub    ecx,edx
c0024cbf:	d3 e8                	shr    eax,cl
c0024cc1:	f7 d8                	neg    eax
c0024cc3:	eb 02                	jmp    c0024cc7 <__fixdfsi+0x6b>
c0024cc5:	31 c0                	xor    eax,eax
c0024cc7:	5d                   	pop    ebp
c0024cc8:	c3                   	ret    

c0024cc9 <__fixunsdfsi>:
c0024cc9:	55                   	push   ebp
c0024cca:	89 e5                	mov    ebp,esp
c0024ccc:	53                   	push   ebx
c0024ccd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024cd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024cd3:	89 d3                	mov    ebx,edx
c0024cd5:	c1 fb 14             	sar    ebx,0x14
c0024cd8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024cde:	31 c0                	xor    eax,eax
c0024ce0:	83 fb 1f             	cmp    ebx,0x1f
c0024ce3:	77 1d                	ja     c0024d02 <__fixunsdfsi+0x39>
c0024ce5:	89 d0                	mov    eax,edx
c0024ce7:	c1 e0 0b             	shl    eax,0xb
c0024cea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024cef:	c1 e9 15             	shr    ecx,0x15
c0024cf2:	09 c8                	or     eax,ecx
c0024cf4:	0d 00 00 00 80       	or     eax,0x80000000
c0024cf9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cfe:	29 d9                	sub    ecx,ebx
c0024d00:	d3 e8                	shr    eax,cl
c0024d02:	5b                   	pop    ebx
c0024d03:	5d                   	pop    ebp
c0024d04:	c3                   	ret    

c0024d05 <__cmpdf2>:
c0024d05:	55                   	push   ebp
c0024d06:	89 e5                	mov    ebp,esp
c0024d08:	57                   	push   edi
c0024d09:	56                   	push   esi
c0024d0a:	53                   	push   ebx
c0024d0b:	83 ec 0c             	sub    esp,0xc
c0024d0e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024d11:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024d14:	89 ca                	mov    edx,ecx
c0024d16:	c1 ea 14             	shr    edx,0x14
c0024d19:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024d1f:	89 cb                	mov    ebx,ecx
c0024d21:	c1 fb 1f             	sar    ebx,0x1f
c0024d24:	31 da                	xor    edx,ebx
c0024d26:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024d29:	89 df                	mov    edi,ebx
c0024d2b:	c1 e7 0b             	shl    edi,0xb
c0024d2e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024d31:	c1 e1 0b             	shl    ecx,0xb
c0024d34:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d3a:	c1 eb 15             	shr    ebx,0x15
c0024d3d:	09 d9                	or     ecx,ebx
c0024d3f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024d42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024d45:	89 ce                	mov    esi,ecx
c0024d47:	c1 ee 14             	shr    esi,0x14
c0024d4a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024d50:	89 cb                	mov    ebx,ecx
c0024d52:	c1 fb 1f             	sar    ebx,0x1f
c0024d55:	31 de                	xor    esi,ebx
c0024d57:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024d5a:	89 df                	mov    edi,ebx
c0024d5c:	c1 e7 0b             	shl    edi,0xb
c0024d5f:	c1 e1 0b             	shl    ecx,0xb
c0024d62:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d68:	c1 eb 15             	shr    ebx,0x15
c0024d6b:	09 d9                	or     ecx,ebx
c0024d6d:	89 d3                	mov    ebx,edx
c0024d6f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024d75:	43                   	inc    ebx
c0024d76:	83 fb 01             	cmp    ebx,0x1
c0024d79:	77 08                	ja     c0024d83 <__cmpdf2+0x7e>
c0024d7b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024d7e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024d81:	75 68                	jne    c0024deb <__cmpdf2+0xe6>
c0024d83:	89 f3                	mov    ebx,esi
c0024d85:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024d8b:	43                   	inc    ebx
c0024d8c:	83 fb 01             	cmp    ebx,0x1
c0024d8f:	77 06                	ja     c0024d97 <__cmpdf2+0x92>
c0024d91:	89 fb                	mov    ebx,edi
c0024d93:	09 cb                	or     ebx,ecx
c0024d95:	75 54                	jne    c0024deb <__cmpdf2+0xe6>
c0024d97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024d9a:	09 f8                	or     eax,edi
c0024d9c:	09 c8                	or     eax,ecx
c0024d9e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024da1:	75 12                	jne    c0024db5 <__cmpdf2+0xb0>
c0024da3:	8d 42 01             	lea    eax,[edx+0x1]
c0024da6:	83 f8 01             	cmp    eax,0x1
c0024da9:	77 0a                	ja     c0024db5 <__cmpdf2+0xb0>
c0024dab:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024dae:	31 c0                	xor    eax,eax
c0024db0:	83 fb 01             	cmp    ebx,0x1
c0024db3:	76 36                	jbe    c0024deb <__cmpdf2+0xe6>
c0024db5:	b8 01 00 00 00       	mov    eax,0x1
c0024dba:	39 f2                	cmp    edx,esi
c0024dbc:	7f 2d                	jg     c0024deb <__cmpdf2+0xe6>
c0024dbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024dc3:	7c 26                	jl     c0024deb <__cmpdf2+0xe6>
c0024dc5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024dc8:	77 07                	ja     c0024dd1 <__cmpdf2+0xcc>
c0024dca:	72 16                	jb     c0024de2 <__cmpdf2+0xdd>
c0024dcc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024dcf:	76 0a                	jbe    c0024ddb <__cmpdf2+0xd6>
c0024dd1:	89 d0                	mov    eax,edx
c0024dd3:	c1 f8 1f             	sar    eax,0x1f
c0024dd6:	83 c8 01             	or     eax,0x1
c0024dd9:	eb 10                	jmp    c0024deb <__cmpdf2+0xe6>
c0024ddb:	b8 00 00 00 00       	mov    eax,0x0
c0024de0:	73 09                	jae    c0024deb <__cmpdf2+0xe6>
c0024de2:	89 d0                	mov    eax,edx
c0024de4:	c1 f8 1f             	sar    eax,0x1f
c0024de7:	83 e0 02             	and    eax,0x2
c0024dea:	48                   	dec    eax
c0024deb:	83 c4 0c             	add    esp,0xc
c0024dee:	5b                   	pop    ebx
c0024def:	5e                   	pop    esi
c0024df0:	5f                   	pop    edi
c0024df1:	5d                   	pop    ebp
c0024df2:	c3                   	ret    

c0024df3 <__eqdf2>:
c0024df3:	55                   	push   ebp
c0024df4:	89 e5                	mov    ebp,esp
c0024df6:	50                   	push   eax
c0024df7:	6a 01                	push   0x1
c0024df9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024dfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024dff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e05:	e8 fb fe ff ff       	call   c0024d05 <__cmpdf2>
c0024e0a:	83 c4 18             	add    esp,0x18
c0024e0d:	c9                   	leave  
c0024e0e:	c3                   	ret    

c0024e0f <__nedf2>:
c0024e0f:	eb e2                	jmp    c0024df3 <__eqdf2>

c0024e11 <__gtdf2>:
c0024e11:	55                   	push   ebp
c0024e12:	89 e5                	mov    ebp,esp
c0024e14:	50                   	push   eax
c0024e15:	6a ff                	push   0xffffffff
c0024e17:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024e1a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024e1d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e23:	e8 dd fe ff ff       	call   c0024d05 <__cmpdf2>
c0024e28:	83 c4 18             	add    esp,0x18
c0024e2b:	c9                   	leave  
c0024e2c:	c3                   	ret    

c0024e2d <__gedf2>:
c0024e2d:	eb e2                	jmp    c0024e11 <__gtdf2>

c0024e2f <__ltdf2>:
c0024e2f:	eb c2                	jmp    c0024df3 <__eqdf2>

c0024e31 <__ledf2>:
c0024e31:	eb c0                	jmp    c0024df3 <__eqdf2>

c0024e33 <__truncdfsf2>:
c0024e33:	55                   	push   ebp
c0024e34:	89 e5                	mov    ebp,esp
c0024e36:	57                   	push   edi
c0024e37:	56                   	push   esi
c0024e38:	53                   	push   ebx
c0024e39:	83 ec 0c             	sub    esp,0xc
c0024e3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024e3f:	89 d1                	mov    ecx,edx
c0024e41:	c1 f9 14             	sar    ecx,0x14
c0024e44:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e47:	89 df                	mov    edi,ebx
c0024e49:	c1 e7 0b             	shl    edi,0xb
c0024e4c:	89 d0                	mov    eax,edx
c0024e4e:	c1 e0 0b             	shl    eax,0xb
c0024e51:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024e56:	c1 eb 15             	shr    ebx,0x15
c0024e59:	09 d8                	or     eax,ebx
c0024e5b:	89 cb                	mov    ebx,ecx
c0024e5d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024e63:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0024e69:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0024e6f:	0f 86 9e 00 00 00    	jbe    c0024f13 <__truncdfsf2+0xe0>
c0024e75:	85 db                	test   ebx,ebx
c0024e77:	75 0a                	jne    c0024e83 <__truncdfsf2+0x50>
c0024e79:	c1 fa 17             	sar    edx,0x17
c0024e7c:	30 d2                	xor    dl,dl
c0024e7e:	e9 84 00 00 00       	jmp    c0024f07 <__truncdfsf2+0xd4>
c0024e83:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0024e89:	83 fe 83             	cmp    esi,0xffffff83
c0024e8c:	7d 4b                	jge    c0024ed9 <__truncdfsf2+0xa6>
c0024e8e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0024e93:	29 f1                	sub    ecx,esi
c0024e95:	83 f9 1f             	cmp    ecx,0x1f
c0024e98:	7f 6b                	jg     c0024f05 <__truncdfsf2+0xd2>
c0024e9a:	0d 00 00 00 80       	or     eax,0x80000000
c0024e9f:	89 c3                	mov    ebx,eax
c0024ea1:	d3 eb                	shr    ebx,cl
c0024ea3:	be 01 00 00 00       	mov    esi,0x1
c0024ea8:	d3 e6                	shl    esi,cl
c0024eaa:	4e                   	dec    esi
c0024eab:	21 f0                	and    eax,esi
c0024ead:	09 f8                	or     eax,edi
c0024eaf:	0f 95 c0             	setne  al
c0024eb2:	0f b6 c0             	movzx  eax,al
c0024eb5:	09 c3                	or     ebx,eax
c0024eb7:	89 d9                	mov    ecx,ebx
c0024eb9:	c1 e9 08             	shr    ecx,0x8
c0024ebc:	f6 c3 7f             	test   bl,0x7f
c0024ebf:	0f 95 c0             	setne  al
c0024ec2:	09 c8                	or     eax,ecx
c0024ec4:	83 e0 01             	and    eax,0x1
c0024ec7:	c1 eb 07             	shr    ebx,0x7
c0024eca:	21 c3                	and    ebx,eax
c0024ecc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024ed2:	09 d1                	or     ecx,edx
c0024ed4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0024ed7:	eb 76                	jmp    c0024f4f <__truncdfsf2+0x11c>
c0024ed9:	83 c6 80             	add    esi,0xffffff80
c0024edc:	7e 1d                	jle    c0024efb <__truncdfsf2+0xc8>
c0024ede:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0024ee4:	75 0b                	jne    c0024ef1 <__truncdfsf2+0xbe>
c0024ee6:	09 f8                	or     eax,edi
c0024ee8:	74 09                	je     c0024ef3 <__truncdfsf2+0xc0>
c0024eea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0024eef:	eb 02                	jmp    c0024ef3 <__truncdfsf2+0xc0>
c0024ef1:	31 c0                	xor    eax,eax
c0024ef3:	c1 fa 17             	sar    edx,0x17
c0024ef6:	80 ca ff             	or     dl,0xff
c0024ef9:	eb 0e                	jmp    c0024f09 <__truncdfsf2+0xd6>
c0024efb:	c1 fa 1f             	sar    edx,0x1f
c0024efe:	c1 e2 08             	shl    edx,0x8
c0024f01:	09 ca                	or     edx,ecx
c0024f03:	eb 04                	jmp    c0024f09 <__truncdfsf2+0xd6>
c0024f05:	31 d2                	xor    edx,edx
c0024f07:	31 c0                	xor    eax,eax
c0024f09:	c1 e2 17             	shl    edx,0x17
c0024f0c:	c1 e8 08             	shr    eax,0x8
c0024f0f:	09 d0                	or     eax,edx
c0024f11:	eb 3c                	jmp    c0024f4f <__truncdfsf2+0x11c>
c0024f13:	81 e9 80 03 00 00    	sub    ecx,0x380
c0024f19:	89 ca                	mov    edx,ecx
c0024f1b:	c1 fa 0b             	sar    edx,0xb
c0024f1e:	c1 e2 08             	shl    edx,0x8
c0024f21:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024f24:	31 db                	xor    ebx,ebx
c0024f26:	85 ff                	test   edi,edi
c0024f28:	0f 95 c3             	setne  bl
c0024f2b:	09 d8                	or     eax,ebx
c0024f2d:	89 c3                	mov    ebx,eax
c0024f2f:	c1 eb 08             	shr    ebx,0x8
c0024f32:	a8 7f                	test   al,0x7f
c0024f34:	0f 95 c2             	setne  dl
c0024f37:	89 d6                	mov    esi,edx
c0024f39:	09 de                	or     esi,ebx
c0024f3b:	83 e6 01             	and    esi,0x1
c0024f3e:	c1 e8 07             	shr    eax,0x7
c0024f41:	21 f0                	and    eax,esi
c0024f43:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024f46:	09 ca                	or     edx,ecx
c0024f48:	c1 e2 17             	shl    edx,0x17
c0024f4b:	09 da                	or     edx,ebx
c0024f4d:	01 d0                	add    eax,edx
c0024f4f:	83 c4 0c             	add    esp,0xc
c0024f52:	5b                   	pop    ebx
c0024f53:	5e                   	pop    esi
c0024f54:	5f                   	pop    edi
c0024f55:	5d                   	pop    ebp
c0024f56:	c3                   	ret    

c0024f57 <__extendsfdf2>:
c0024f57:	55                   	push   ebp
c0024f58:	89 e5                	mov    ebp,esp
c0024f5a:	57                   	push   edi
c0024f5b:	56                   	push   esi
c0024f5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024f5f:	89 d1                	mov    ecx,edx
c0024f61:	c1 f9 17             	sar    ecx,0x17
c0024f64:	c1 e2 08             	shl    edx,0x8
c0024f67:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024f6d:	89 c8                	mov    eax,ecx
c0024f6f:	80 e4 f8             	and    ah,0xf8
c0024f72:	8d 71 01             	lea    esi,[ecx+0x1]
c0024f75:	81 e6 fe 00 00 00    	and    esi,0xfe
c0024f7b:	75 27                	jne    c0024fa4 <__extendsfdf2+0x4d>
c0024f7d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0024f83:	75 18                	jne    c0024f9d <__extendsfdf2+0x46>
c0024f85:	85 d2                	test   edx,edx
c0024f87:	74 20                	je     c0024fa9 <__extendsfdf2+0x52>
c0024f89:	41                   	inc    ecx
c0024f8a:	01 d2                	add    edx,edx
c0024f8c:	79 fb                	jns    c0024f89 <__extendsfdf2+0x32>
c0024f8e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024f94:	29 c8                	sub    eax,ecx
c0024f96:	05 81 03 00 00       	add    eax,0x381
c0024f9b:	eb 0c                	jmp    c0024fa9 <__extendsfdf2+0x52>
c0024f9d:	05 00 07 00 00       	add    eax,0x700
c0024fa2:	eb 05                	jmp    c0024fa9 <__extendsfdf2+0x52>
c0024fa4:	05 80 03 00 00       	add    eax,0x380
c0024fa9:	c1 e0 14             	shl    eax,0x14
c0024fac:	89 c1                	mov    ecx,eax
c0024fae:	89 d0                	mov    eax,edx
c0024fb0:	c1 e8 0b             	shr    eax,0xb
c0024fb3:	09 c1                	or     ecx,eax
c0024fb5:	c1 e2 15             	shl    edx,0x15
c0024fb8:	89 d0                	mov    eax,edx
c0024fba:	89 ca                	mov    edx,ecx
c0024fbc:	5e                   	pop    esi
c0024fbd:	5f                   	pop    edi
c0024fbe:	5d                   	pop    ebp
c0024fbf:	c3                   	ret    

c0024fc0 <fabs>:
c0024fc0:	83 ec 0c             	sub    esp,0xc
c0024fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0024fca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024fd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024fd7:	dd 04 24             	fld    QWORD PTR [esp]
c0024fda:	83 c4 0c             	add    esp,0xc
c0024fdd:	c3                   	ret    
c0024fde:	66 90                	xchg   ax,ax

c0024fe0 <lrint>:
c0024fe0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024fe4:	83 ec 04             	sub    esp,0x4
c0024fe7:	db 1c 24             	fistp  DWORD PTR [esp]
c0024fea:	58                   	pop    eax
c0024feb:	c3                   	ret    

c0024fec <lrintf>:
c0024fec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0024ff0:	83 ec 04             	sub    esp,0x4
c0024ff3:	db 1c 24             	fistp  DWORD PTR [esp]
c0024ff6:	58                   	pop    eax
c0024ff7:	c3                   	ret    

Disassembly of section .init:

c0024ff8 <_init>:
c0024ff8:	55                   	push   ebp
c0024ff9:	89 e5                	mov    ebp,esp
c0024ffb:	e8 18 b1 fd ff       	call   c0000118 <frame_dummy>
c0025000:	e8 63 e0 ff ff       	call   c0023068 <__do_global_ctors_aux>
c0025005:	5d                   	pop    ebp
c0025006:	c3                   	ret    

Disassembly of section .fini:

c0025007 <_fini>:
c0025007:	55                   	push   ebp
c0025008:	89 e5                	mov    ebp,esp
c002500a:	e8 99 b0 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002500f:	5d                   	pop    ebp
c0025010:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025012 <Computer::~Computer()>:
c0025012:	83 ec 0c             	sub    esp,0xc
c0025015:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c002501a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002501e:	89 10                	mov    DWORD PTR [eax],edx
c0025020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025024:	83 ec 0c             	sub    esp,0xc
c0025027:	50                   	push   eax
c0025028:	e8 d7 e4 fe ff       	call   c0013504 <Device::~Device()>
c002502d:	83 c4 10             	add    esp,0x10
c0025030:	90                   	nop
c0025031:	83 c4 0c             	add    esp,0xc
c0025034:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025036 <Computer::~Computer()>:
c0025036:	83 ec 0c             	sub    esp,0xc
c0025039:	83 ec 0c             	sub    esp,0xc
c002503c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025040:	e8 cd ff ff ff       	call   c0025012 <Computer::~Computer()>
c0025045:	83 c4 10             	add    esp,0x10
c0025048:	83 ec 08             	sub    esp,0x8
c002504b:	68 ec 01 00 00       	push   0x1ec
c0025050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025054:	e8 1e d1 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025059:	83 c4 10             	add    esp,0x10
c002505c:	83 c4 0c             	add    esp,0xc
c002505f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025060 <idleCommon()>:
c0025060:	83 ec 0c             	sub    esp,0xc
c0025063:	e8 de 68 ff ff       	call   c001b946 <lockScheduler()>
c0025068:	e8 0d 6c ff ff       	call   c001bc7a <schedule()>
c002506d:	83 c4 0c             	add    esp,0xc
c0025070:	e9 d3 68 ff ff       	jmp    c001b948 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c0025075 <CPU::readCR3()>:
c0025075:	83 ec 10             	sub    esp,0x10
c0025078:	0f 20 d8             	mov    eax,cr3
c002507b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002507f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025083:	83 c4 10             	add    esp,0x10
c0025086:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c0025087 <CPU::writeCR3(unsigned long)>:
c0025087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002508b:	0f 22 d8             	mov    cr3,eax
c002508e:	90                   	nop
c002508f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025090 <LinkedList<UnixFile>::~LinkedList()>:
c0025090:	90                   	nop
c0025091:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025092 <LinkedList<UnixFile>::LinkedList()>:
c0025092:	83 ec 0c             	sub    esp,0xc
c0025095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025099:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002509f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00250bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250d5:	83 ec 0c             	sub    esp,0xc
c00250d8:	68 66 6d 02 c0       	push   0xc0026d66
c00250dd:	e8 75 d1 fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	90                   	nop
c00250e6:	83 c4 0c             	add    esp,0xc
c00250e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00250ea:	83 ec 0c             	sub    esp,0xc
c00250ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00250f2:	75 10                	jne    c0025104 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00250f4:	83 ec 0c             	sub    esp,0xc
c00250f7:	68 80 6d 02 c0       	push   0xc0026d80
c00250fc:	e8 f2 38 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0025101:	83 c4 10             	add    esp,0x10
c0025104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025108:	8b 00                	mov    eax,DWORD PTR [eax]
c002510a:	85 c0                	test   eax,eax
c002510c:	74 34                	je     c0025142 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002510e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025112:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025115:	85 c0                	test   eax,eax
c0025117:	74 29                	je     c0025142 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002511d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025120:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025124:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002512f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025139:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025140:	eb 65                	jmp    c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025146:	8b 00                	mov    eax,DWORD PTR [eax]
c0025148:	85 c0                	test   eax,eax
c002514a:	75 4b                	jne    c0025197 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002514c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025153:	85 c0                	test   eax,eax
c0025155:	75 40                	jne    c0025197 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002515b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002515f:	89 10                	mov    DWORD PTR [eax],edx
c0025161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025165:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025169:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002516c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025173:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002517a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025181:	85 c0                	test   eax,eax
c0025183:	74 22                	je     c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025185:	83 ec 0c             	sub    esp,0xc
c0025188:	68 a2 6d 02 c0       	push   0xc0026da2
c002518d:	e8 61 38 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0025192:	83 c4 10             	add    esp,0x10
c0025195:	eb 10                	jmp    c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025197:	83 ec 0c             	sub    esp,0xc
c002519a:	68 ac 6d 02 c0       	push   0xc0026dac
c002519f:	e8 4f 38 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c00251a4:	83 c4 10             	add    esp,0x10
c00251a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ae:	8d 50 01             	lea    edx,[eax+0x1]
c00251b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00251b8:	90                   	nop
c00251b9:	83 c4 0c             	add    esp,0xc
c00251bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00251be <LinkedList<UnixFile>::getFirstElement()>:
c00251be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00251c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00251c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00251c6 <LinkedList<UnixFile>::removeFirst()>:
c00251c6:	83 ec 0c             	sub    esp,0xc
c00251c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00251cf:	85 c0                	test   eax,eax
c00251d1:	75 12                	jne    c00251e5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00251d3:	83 ec 0c             	sub    esp,0xc
c00251d6:	68 b8 6d 02 c0       	push   0xc0026db8
c00251db:	e8 13 38 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c00251e0:	83 c4 10             	add    esp,0x10
c00251e3:	eb 7e                	jmp    c0025263 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00251e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00251ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ef:	85 c0                	test   eax,eax
c00251f1:	74 10                	je     c0025203 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00251f3:	83 ec 0c             	sub    esp,0xc
c00251f6:	68 03 6e 02 c0       	push   0xc0026e03
c00251fb:	e8 f3 37 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0025200:	83 c4 10             	add    esp,0x10
c0025203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025207:	8b 00                	mov    eax,DWORD PTR [eax]
c0025209:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002520c:	85 c0                	test   eax,eax
c002520e:	75 33                	jne    c0025243 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002521a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002521e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025229:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002522c:	83 f8 01             	cmp    eax,0x1
c002522f:	74 21                	je     c0025252 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025231:	83 ec 0c             	sub    esp,0xc
c0025234:	68 dc 6d 02 c0       	push   0xc0026ddc
c0025239:	e8 b5 37 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c002523e:	83 c4 10             	add    esp,0x10
c0025241:	eb 0f                	jmp    c0025252 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025247:	8b 00                	mov    eax,DWORD PTR [eax]
c0025249:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002524c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025250:	89 10                	mov    DWORD PTR [eax],edx
c0025252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025256:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025259:	8d 50 ff             	lea    edx,[eax-0x1]
c002525c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025260:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025263:	83 c4 0c             	add    esp,0xc
c0025266:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0025268 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0025268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002526c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002526f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025270 <DriverlessDevice::~DriverlessDevice()>:
c0025270:	ba 84 74 02 c0       	mov    edx,0xc0027484
c0025275:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025279:	89 10                	mov    DWORD PTR [eax],edx
c002527b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002527f:	50                   	push   eax
c0025280:	e8 7f e2 fe ff       	call   c0013504 <Device::~Device()>
c0025285:	83 c4 04             	add    esp,0x4
c0025288:	90                   	nop
c0025289:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002528a <DriverlessDevice::~DriverlessDevice()>:
c002528a:	83 ec 0c             	sub    esp,0xc
c002528d:	83 ec 0c             	sub    esp,0xc
c0025290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025294:	e8 d7 ff ff ff       	call   c0025270 <DriverlessDevice::~DriverlessDevice()>
c0025299:	83 c4 10             	add    esp,0x10
c002529c:	83 ec 08             	sub    esp,0x8
c002529f:	68 58 01 00 00       	push   0x158
c00252a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00252a8:	e8 ca ce fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00252ad:	83 c4 10             	add    esp,0x10
c00252b0:	83 c4 0c             	add    esp,0xc
c00252b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00252b4 <LinkedList<Device>::addElement(Device*)>:
c00252b4:	83 ec 0c             	sub    esp,0xc
c00252b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00252bc:	75 10                	jne    c00252ce <LinkedList<Device>::addElement(Device*)+0x1a>
c00252be:	83 ec 0c             	sub    esp,0xc
c00252c1:	68 80 6d 02 c0       	push   0xc0026d80
c00252c6:	e8 28 37 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c00252cb:	83 c4 10             	add    esp,0x10
c00252ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00252d4:	85 c0                	test   eax,eax
c00252d6:	74 3a                	je     c0025312 <LinkedList<Device>::addElement(Device*)+0x5e>
c00252d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252df:	85 c0                	test   eax,eax
c00252e1:	74 2f                	je     c0025312 <LinkedList<Device>::addElement(Device*)+0x5e>
c00252e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252ee:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00252f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00252ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025306:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025310:	eb 68                	jmp    c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025316:	8b 00                	mov    eax,DWORD PTR [eax]
c0025318:	85 c0                	test   eax,eax
c002531a:	75 4e                	jne    c002536a <LinkedList<Device>::addElement(Device*)+0xb6>
c002531c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025323:	85 c0                	test   eax,eax
c0025325:	75 43                	jne    c002536a <LinkedList<Device>::addElement(Device*)+0xb6>
c0025327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002532f:	89 10                	mov    DWORD PTR [eax],edx
c0025331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025335:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025339:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002533c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025343:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002534d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025351:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025354:	85 c0                	test   eax,eax
c0025356:	74 22                	je     c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025358:	83 ec 0c             	sub    esp,0xc
c002535b:	68 a2 6d 02 c0       	push   0xc0026da2
c0025360:	e8 8e 36 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0025365:	83 c4 10             	add    esp,0x10
c0025368:	eb 10                	jmp    c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c002536a:	83 ec 0c             	sub    esp,0xc
c002536d:	68 ac 6d 02 c0       	push   0xc0026dac
c0025372:	e8 7c 36 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0025377:	83 c4 10             	add    esp,0x10
c002537a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025381:	8d 50 01             	lea    edx,[eax+0x1]
c0025384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025388:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002538b:	90                   	nop
c002538c:	83 c4 0c             	add    esp,0xc
c002538f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025390 <LinkedList<Device>::LinkedList()>:
c0025390:	83 ec 0c             	sub    esp,0xc
c0025393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025397:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002539d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00253bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253d3:	83 ec 0c             	sub    esp,0xc
c00253d6:	68 66 6d 02 c0       	push   0xc0026d66
c00253db:	e8 77 ce fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00253e0:	83 c4 10             	add    esp,0x10
c00253e3:	90                   	nop
c00253e4:	83 c4 0c             	add    esp,0xc
c00253e7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c00253e8 <CPU::readCR0()>:
c00253e8:	83 ec 10             	sub    esp,0x10
c00253eb:	0f 20 c0             	mov    eax,cr0
c00253ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00253f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253f6:	83 c4 10             	add    esp,0x10
c00253f9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c00253fa <CPU::writeCR0(unsigned long)>:
c00253fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00253fe:	0f 22 c0             	mov    cr0,eax
c0025401:	90                   	nop
c0025402:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c0025403 <CPU::readDR0()>:
c0025403:	83 ec 10             	sub    esp,0x10
c0025406:	0f 21 c0             	mov    eax,db0
c0025409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002540d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025411:	83 c4 10             	add    esp,0x10
c0025414:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0025415 <CPU::readDR1()>:
c0025415:	83 ec 10             	sub    esp,0x10
c0025418:	0f 21 c8             	mov    eax,db1
c002541b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002541f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025423:	83 c4 10             	add    esp,0x10
c0025426:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c0025427 <CPU::readDR2()>:
c0025427:	83 ec 10             	sub    esp,0x10
c002542a:	0f 21 d0             	mov    eax,db2
c002542d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025435:	83 c4 10             	add    esp,0x10
c0025438:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c0025439 <CPU::readDR3()>:
c0025439:	83 ec 10             	sub    esp,0x10
c002543c:	0f 21 d8             	mov    eax,db3
c002543f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025447:	83 c4 10             	add    esp,0x10
c002544a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c002544b <CPU::readDR6()>:
c002544b:	83 ec 10             	sub    esp,0x10
c002544e:	0f 21 f0             	mov    eax,db6
c0025451:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025455:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025459:	83 c4 10             	add    esp,0x10
c002545c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c002545d <CPU::readDR7()>:
c002545d:	83 ec 10             	sub    esp,0x10
c0025460:	0f 21 f8             	mov    eax,db7
c0025463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002546b:	83 c4 10             	add    esp,0x10
c002546e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025474:	8b 00                	mov    eax,DWORD PTR [eax]
c0025476:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002547c:	8b 00                	mov    eax,DWORD PTR [eax]
c002547e:	85 c0                	test   eax,eax
c0025480:	75 0e                	jne    c0025490 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025489:	85 c0                	test   eax,eax
c002548b:	75 03                	jne    c0025490 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002548d:	b0 01                	mov    al,0x1
c002548f:	c3                   	ret    
c0025490:	b0 00                	mov    al,0x0
c0025492:	90                   	nop
c0025493:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025494:	83 ec 0c             	sub    esp,0xc
c0025497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549b:	8b 00                	mov    eax,DWORD PTR [eax]
c002549d:	85 c0                	test   eax,eax
c002549f:	75 15                	jne    c00254b6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00254a1:	83 ec 0c             	sub    esp,0xc
c00254a4:	68 b8 6d 02 c0       	push   0xc0026db8
c00254a9:	e8 45 35 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c00254ae:	83 c4 10             	add    esp,0x10
c00254b1:	e9 88 00 00 00       	jmp    c002553e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00254b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00254c0:	85 c0                	test   eax,eax
c00254c2:	0f 95 c0             	setne  al
c00254c5:	84 c0                	test   al,al
c00254c7:	74 10                	je     c00254d9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00254c9:	83 ec 0c             	sub    esp,0xc
c00254cc:	68 03 6e 02 c0       	push   0xc0026e03
c00254d1:	e8 1d 35 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c00254d6:	83 c4 10             	add    esp,0x10
c00254d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00254df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00254e2:	85 c0                	test   eax,eax
c00254e4:	0f 94 c0             	sete   al
c00254e7:	84 c0                	test   al,al
c00254e9:	74 33                	je     c002551e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00254eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00254f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025504:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025507:	83 f8 01             	cmp    eax,0x1
c002550a:	74 21                	je     c002552d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002550c:	83 ec 0c             	sub    esp,0xc
c002550f:	68 dc 6d 02 c0       	push   0xc0026ddc
c0025514:	e8 da 34 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0025519:	83 c4 10             	add    esp,0x10
c002551c:	eb 0f                	jmp    c002552d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002551e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025522:	8b 00                	mov    eax,DWORD PTR [eax]
c0025524:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552b:	89 10                	mov    DWORD PTR [eax],edx
c002552d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025531:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025534:	8d 50 ff             	lea    edx,[eax-0x1]
c0025537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002553b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002553e:	83 c4 0c             	add    esp,0xc
c0025541:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025542:	83 ec 0c             	sub    esp,0xc
c0025545:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002554a:	75 10                	jne    c002555c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002554c:	83 ec 0c             	sub    esp,0xc
c002554f:	68 80 6d 02 c0       	push   0xc0026d80
c0025554:	e8 9a 34 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c0025559:	83 c4 10             	add    esp,0x10
c002555c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025560:	8b 00                	mov    eax,DWORD PTR [eax]
c0025562:	85 c0                	test   eax,eax
c0025564:	74 34                	je     c002559a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002556a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002556d:	85 c0                	test   eax,eax
c002556f:	74 29                	je     c002559a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025578:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002557c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025587:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002558a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025591:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025598:	eb 65                	jmp    c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002559a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559e:	8b 00                	mov    eax,DWORD PTR [eax]
c00255a0:	85 c0                	test   eax,eax
c00255a2:	75 4b                	jne    c00255ef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255ab:	85 c0                	test   eax,eax
c00255ad:	75 40                	jne    c00255ef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255b7:	89 10                	mov    DWORD PTR [eax],edx
c00255b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00255c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255cb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00255d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00255d9:	85 c0                	test   eax,eax
c00255db:	74 22                	je     c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255dd:	83 ec 0c             	sub    esp,0xc
c00255e0:	68 a2 6d 02 c0       	push   0xc0026da2
c00255e5:	e8 09 34 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c00255ea:	83 c4 10             	add    esp,0x10
c00255ed:	eb 10                	jmp    c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255ef:	83 ec 0c             	sub    esp,0xc
c00255f2:	68 ac 6d 02 c0       	push   0xc0026dac
c00255f7:	e8 f7 33 ff ff       	call   c00189f3 <Krnl::panic(char const*)>
c00255fc:	83 c4 10             	add    esp,0x10
c00255ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025603:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025606:	8d 50 01             	lea    edx,[eax+0x1]
c0025609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002560d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025610:	90                   	nop
c0025611:	83 c4 0c             	add    esp,0xc
c0025614:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025616 <ACPI::~ACPI()>:
c0025616:	83 ec 0c             	sub    esp,0xc
c0025619:	ba 14 7c 02 c0       	mov    edx,0xc0027c14
c002561e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025622:	89 10                	mov    DWORD PTR [eax],edx
c0025624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025628:	83 ec 0c             	sub    esp,0xc
c002562b:	50                   	push   eax
c002562c:	e8 d3 de fe ff       	call   c0013504 <Device::~Device()>
c0025631:	83 c4 10             	add    esp,0x10
c0025634:	90                   	nop
c0025635:	83 c4 0c             	add    esp,0xc
c0025638:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002563a <ACPI::~ACPI()>:
c002563a:	83 ec 0c             	sub    esp,0xc
c002563d:	83 ec 0c             	sub    esp,0xc
c0025640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025644:	e8 cd ff ff ff       	call   c0025616 <ACPI::~ACPI()>
c0025649:	83 c4 10             	add    esp,0x10
c002564c:	83 ec 08             	sub    esp,0x8
c002564f:	68 68 22 00 00       	push   0x2268
c0025654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025658:	e8 1a cb fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c002565d:	83 c4 10             	add    esp,0x10
c0025660:	83 c4 0c             	add    esp,0xc
c0025663:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025664 <CPU::~CPU()>:
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	ba 04 80 02 c0       	mov    edx,0xc0028004
c002566c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025670:	89 10                	mov    DWORD PTR [eax],edx
c0025672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025676:	83 ec 0c             	sub    esp,0xc
c0025679:	50                   	push   eax
c002567a:	e8 85 de fe ff       	call   c0013504 <Device::~Device()>
c002567f:	83 c4 10             	add    esp,0x10
c0025682:	90                   	nop
c0025683:	83 c4 0c             	add    esp,0xc
c0025686:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025688 <CPU::~CPU()>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	83 ec 0c             	sub    esp,0xc
c002568e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025692:	e8 cd ff ff ff       	call   c0025664 <CPU::~CPU()>
c0025697:	83 c4 10             	add    esp,0x10
c002569a:	83 ec 08             	sub    esp,0x8
c002569d:	68 98 11 00 00       	push   0x1198
c00256a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256a6:	e8 cc ca fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00256ab:	83 c4 10             	add    esp,0x10
c00256ae:	83 c4 0c             	add    esp,0xc
c00256b1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c00256b2 <CPU::readCR4()>:
c00256b2:	83 ec 10             	sub    esp,0x10
c00256b5:	0f 20 e0             	mov    eax,cr4
c00256b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256c0:	83 c4 10             	add    esp,0x10
c00256c3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c00256c4 <CPU::writeDR7(unsigned long)>:
c00256c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256c8:	0f 23 f8             	mov    db7,eax
c00256cb:	90                   	nop
c00256cc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c00256cd <CPU::writeCR4(unsigned long)>:
c00256cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256d1:	0f 22 e0             	mov    cr4,eax
c00256d4:	90                   	nop
c00256d5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c00256d6 <CPU::readCR2()>:
c00256d6:	83 ec 10             	sub    esp,0x10
c00256d9:	0f 20 d0             	mov    eax,cr2
c00256dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256e4:	83 c4 10             	add    esp,0x10
c00256e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00256e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00256e8:	90                   	nop
c00256e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00256ea <ThreadControlBlock::ThreadControlBlock()>:
c00256ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00256f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025704:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002570b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002570f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002571a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002571e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025722:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025726:	90                   	nop
c0025727:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025728:	83 ec 0c             	sub    esp,0xc
c002572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025744:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002574b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002574f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025759:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025764:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002576b:	83 ec 0c             	sub    esp,0xc
c002576e:	68 66 6d 02 c0       	push   0xc0026d66
c0025773:	e8 df ca fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0025778:	83 c4 10             	add    esp,0x10
c002577b:	90                   	nop
c002577c:	83 c4 0c             	add    esp,0xc
c002577f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025780 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025784:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025787:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0025788 <Vm::_FPUState::_FPUState()>:
c0025788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002578c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025793:	90                   	nop
c0025794:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025796 <PCI::~PCI()>:
c0025796:	83 ec 0c             	sub    esp,0xc
c0025799:	ba 0c 8d 02 c0       	mov    edx,0xc0028d0c
c002579e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a2:	89 10                	mov    DWORD PTR [eax],edx
c00257a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a8:	83 ec 0c             	sub    esp,0xc
c00257ab:	50                   	push   eax
c00257ac:	e8 63 d7 fe ff       	call   c0012f14 <Bus::~Bus()>
c00257b1:	83 c4 10             	add    esp,0x10
c00257b4:	90                   	nop
c00257b5:	83 c4 0c             	add    esp,0xc
c00257b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00257ba <PCI::~PCI()>:
c00257ba:	83 ec 0c             	sub    esp,0xc
c00257bd:	83 ec 0c             	sub    esp,0xc
c00257c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257c4:	e8 cd ff ff ff       	call   c0025796 <PCI::~PCI()>
c00257c9:	83 c4 10             	add    esp,0x10
c00257cc:	83 ec 08             	sub    esp,0x8
c00257cf:	68 58 01 00 00       	push   0x158
c00257d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257d8:	e8 9a c9 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00257dd:	83 c4 10             	add    esp,0x10
c00257e0:	83 c4 0c             	add    esp,0xc
c00257e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00257e4 <IDE::~IDE()>:
c00257e4:	83 ec 0c             	sub    esp,0xc
c00257e7:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c00257ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f0:	89 10                	mov    DWORD PTR [eax],edx
c00257f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f6:	83 ec 0c             	sub    esp,0xc
c00257f9:	50                   	push   eax
c00257fa:	e8 1b e2 fe ff       	call   c0013a1a <HardDiskController::~HardDiskController()>
c00257ff:	83 c4 10             	add    esp,0x10
c0025802:	90                   	nop
c0025803:	83 c4 0c             	add    esp,0xc
c0025806:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025808 <IDE::~IDE()>:
c0025808:	83 ec 0c             	sub    esp,0xc
c002580b:	83 ec 0c             	sub    esp,0xc
c002580e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025812:	e8 cd ff ff ff       	call   c00257e4 <IDE::~IDE()>
c0025817:	83 c4 10             	add    esp,0x10
c002581a:	83 ec 08             	sub    esp,0x8
c002581d:	68 70 02 00 00       	push   0x270
c0025822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025826:	e8 4c c9 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c002582b:	83 c4 10             	add    esp,0x10
c002582e:	83 c4 0c             	add    esp,0xc
c0025831:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025832 <ATA::~ATA()>:
c0025832:	83 ec 0c             	sub    esp,0xc
c0025835:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c002583a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002583e:	89 10                	mov    DWORD PTR [eax],edx
c0025840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025844:	83 ec 0c             	sub    esp,0xc
c0025847:	50                   	push   eax
c0025848:	e8 ab e2 fe ff       	call   c0013af8 <PhysicalDisk::~PhysicalDisk()>
c002584d:	83 c4 10             	add    esp,0x10
c0025850:	90                   	nop
c0025851:	83 c4 0c             	add    esp,0xc
c0025854:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025856 <ATA::~ATA()>:
c0025856:	83 ec 0c             	sub    esp,0xc
c0025859:	83 ec 0c             	sub    esp,0xc
c002585c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025860:	e8 cd ff ff ff       	call   c0025832 <ATA::~ATA()>
c0025865:	83 c4 10             	add    esp,0x10
c0025868:	83 ec 08             	sub    esp,0x8
c002586b:	68 7c 01 00 00       	push   0x17c
c0025870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025874:	e8 fe c8 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025879:	83 c4 10             	add    esp,0x10
c002587c:	83 c4 0c             	add    esp,0xc
c002587f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025880 <ATAPI::~ATAPI()>:
c0025880:	83 ec 0c             	sub    esp,0xc
c0025883:	ba 2c 90 02 c0       	mov    edx,0xc002902c
c0025888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002588c:	89 10                	mov    DWORD PTR [eax],edx
c002588e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025892:	83 ec 0c             	sub    esp,0xc
c0025895:	50                   	push   eax
c0025896:	e8 5d e2 fe ff       	call   c0013af8 <PhysicalDisk::~PhysicalDisk()>
c002589b:	83 c4 10             	add    esp,0x10
c002589e:	90                   	nop
c002589f:	83 c4 0c             	add    esp,0xc
c00258a2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00258a4 <ATAPI::~ATAPI()>:
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	83 ec 0c             	sub    esp,0xc
c00258aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ae:	e8 cd ff ff ff       	call   c0025880 <ATAPI::~ATAPI()>
c00258b3:	83 c4 10             	add    esp,0x10
c00258b6:	83 ec 08             	sub    esp,0x8
c00258b9:	68 80 01 00 00       	push   0x180
c00258be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258c2:	e8 b0 c8 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00258c7:	83 c4 10             	add    esp,0x10
c00258ca:	83 c4 0c             	add    esp,0xc
c00258cd:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00258ce <AVX::~AVX()>:
c00258ce:	83 ec 0c             	sub    esp,0xc
c00258d1:	ba 68 90 02 c0       	mov    edx,0xc0029068
c00258d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258da:	89 10                	mov    DWORD PTR [eax],edx
c00258dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e0:	83 ec 0c             	sub    esp,0xc
c00258e3:	50                   	push   eax
c00258e4:	e8 93 e2 fe ff       	call   c0013b7c <FPU::~FPU()>
c00258e9:	83 c4 10             	add    esp,0x10
c00258ec:	90                   	nop
c00258ed:	83 c4 0c             	add    esp,0xc
c00258f0:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00258f2 <AVX::~AVX()>:
c00258f2:	83 ec 0c             	sub    esp,0xc
c00258f5:	83 ec 0c             	sub    esp,0xc
c00258f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258fc:	e8 cd ff ff ff       	call   c00258ce <AVX::~AVX()>
c0025901:	83 c4 10             	add    esp,0x10
c0025904:	83 ec 08             	sub    esp,0x8
c0025907:	68 58 01 00 00       	push   0x158
c002590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025910:	e8 62 c8 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025915:	83 c4 10             	add    esp,0x10
c0025918:	83 c4 0c             	add    esp,0xc
c002591b:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002591c <MMX::~MMX()>:
c002591c:	83 ec 0c             	sub    esp,0xc
c002591f:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c0025924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025928:	89 10                	mov    DWORD PTR [eax],edx
c002592a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002592e:	83 ec 0c             	sub    esp,0xc
c0025931:	50                   	push   eax
c0025932:	e8 45 e2 fe ff       	call   c0013b7c <FPU::~FPU()>
c0025937:	83 c4 10             	add    esp,0x10
c002593a:	90                   	nop
c002593b:	83 c4 0c             	add    esp,0xc
c002593e:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025940 <MMX::~MMX()>:
c0025940:	83 ec 0c             	sub    esp,0xc
c0025943:	83 ec 0c             	sub    esp,0xc
c0025946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002594a:	e8 cd ff ff ff       	call   c002591c <MMX::~MMX()>
c002594f:	83 c4 10             	add    esp,0x10
c0025952:	83 ec 08             	sub    esp,0x8
c0025955:	68 58 01 00 00       	push   0x158
c002595a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002595e:	e8 14 c8 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025963:	83 c4 10             	add    esp,0x10
c0025966:	83 c4 0c             	add    esp,0xc
c0025969:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002596a <SSE::~SSE()>:
c002596a:	83 ec 0c             	sub    esp,0xc
c002596d:	ba e8 90 02 c0       	mov    edx,0xc00290e8
c0025972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025976:	89 10                	mov    DWORD PTR [eax],edx
c0025978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002597c:	83 ec 0c             	sub    esp,0xc
c002597f:	50                   	push   eax
c0025980:	e8 f7 e1 fe ff       	call   c0013b7c <FPU::~FPU()>
c0025985:	83 c4 10             	add    esp,0x10
c0025988:	90                   	nop
c0025989:	83 c4 0c             	add    esp,0xc
c002598c:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002598e <SSE::~SSE()>:
c002598e:	83 ec 0c             	sub    esp,0xc
c0025991:	83 ec 0c             	sub    esp,0xc
c0025994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025998:	e8 cd ff ff ff       	call   c002596a <SSE::~SSE()>
c002599d:	83 c4 10             	add    esp,0x10
c00259a0:	83 ec 08             	sub    esp,0x8
c00259a3:	68 58 01 00 00       	push   0x158
c00259a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259ac:	e8 c6 c7 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00259b1:	83 c4 10             	add    esp,0x10
c00259b4:	83 c4 0c             	add    esp,0xc
c00259b7:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00259b8 <x87::~x87()>:
c00259b8:	83 ec 0c             	sub    esp,0xc
c00259bb:	ba 28 91 02 c0       	mov    edx,0xc0029128
c00259c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c4:	89 10                	mov    DWORD PTR [eax],edx
c00259c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ca:	83 ec 0c             	sub    esp,0xc
c00259cd:	50                   	push   eax
c00259ce:	e8 a9 e1 fe ff       	call   c0013b7c <FPU::~FPU()>
c00259d3:	83 c4 10             	add    esp,0x10
c00259d6:	90                   	nop
c00259d7:	83 c4 0c             	add    esp,0xc
c00259da:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00259dc <x87::~x87()>:
c00259dc:	83 ec 0c             	sub    esp,0xc
c00259df:	83 ec 0c             	sub    esp,0xc
c00259e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259e6:	e8 cd ff ff ff       	call   c00259b8 <x87::~x87()>
c00259eb:	83 c4 10             	add    esp,0x10
c00259ee:	83 ec 08             	sub    esp,0x8
c00259f1:	68 58 01 00 00       	push   0x158
c00259f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259fa:	e8 78 c7 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00259ff:	83 c4 10             	add    esp,0x10
c0025a02:	83 c4 0c             	add    esp,0xc
c0025a05:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025a06 <IOAPIC::~IOAPIC()>:
c0025a06:	83 ec 0c             	sub    esp,0xc
c0025a09:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0025a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a12:	89 10                	mov    DWORD PTR [eax],edx
c0025a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a18:	83 ec 0c             	sub    esp,0xc
c0025a1b:	50                   	push   eax
c0025a1c:	e8 e3 da fe ff       	call   c0013504 <Device::~Device()>
c0025a21:	83 c4 10             	add    esp,0x10
c0025a24:	90                   	nop
c0025a25:	83 c4 0c             	add    esp,0xc
c0025a28:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025a2a <IOAPIC::~IOAPIC()>:
c0025a2a:	83 ec 0c             	sub    esp,0xc
c0025a2d:	83 ec 0c             	sub    esp,0xc
c0025a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a34:	e8 cd ff ff ff       	call   c0025a06 <IOAPIC::~IOAPIC()>
c0025a39:	83 c4 10             	add    esp,0x10
c0025a3c:	83 ec 08             	sub    esp,0x8
c0025a3f:	68 68 01 00 00       	push   0x168
c0025a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a48:	e8 2a c7 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025a4d:	83 c4 10             	add    esp,0x10
c0025a50:	83 c4 0c             	add    esp,0xc
c0025a53:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025a54 <APIC::~APIC()>:
c0025a54:	83 ec 0c             	sub    esp,0xc
c0025a57:	ba 38 92 02 c0       	mov    edx,0xc0029238
c0025a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a60:	89 10                	mov    DWORD PTR [eax],edx
c0025a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a66:	83 ec 0c             	sub    esp,0xc
c0025a69:	50                   	push   eax
c0025a6a:	e8 e1 e5 fe ff       	call   c0014050 <InterruptController::~InterruptController()>
c0025a6f:	83 c4 10             	add    esp,0x10
c0025a72:	90                   	nop
c0025a73:	83 c4 0c             	add    esp,0xc
c0025a76:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025a78 <APIC::~APIC()>:
c0025a78:	83 ec 0c             	sub    esp,0xc
c0025a7b:	83 ec 0c             	sub    esp,0xc
c0025a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a82:	e8 cd ff ff ff       	call   c0025a54 <APIC::~APIC()>
c0025a87:	83 c4 10             	add    esp,0x10
c0025a8a:	83 ec 08             	sub    esp,0x8
c0025a8d:	68 58 21 00 00       	push   0x2158
c0025a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a96:	e8 dc c6 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025a9b:	83 c4 10             	add    esp,0x10
c0025a9e:	83 c4 0c             	add    esp,0xc
c0025aa1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025aa2 <PIC::~PIC()>:
c0025aa2:	83 ec 0c             	sub    esp,0xc
c0025aa5:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0025aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aae:	89 10                	mov    DWORD PTR [eax],edx
c0025ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ab4:	83 ec 0c             	sub    esp,0xc
c0025ab7:	50                   	push   eax
c0025ab8:	e8 93 e5 fe ff       	call   c0014050 <InterruptController::~InterruptController()>
c0025abd:	83 c4 10             	add    esp,0x10
c0025ac0:	90                   	nop
c0025ac1:	83 c4 0c             	add    esp,0xc
c0025ac4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025ac6 <PIC::~PIC()>:
c0025ac6:	83 ec 0c             	sub    esp,0xc
c0025ac9:	83 ec 0c             	sub    esp,0xc
c0025acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ad0:	e8 cd ff ff ff       	call   c0025aa2 <PIC::~PIC()>
c0025ad5:	83 c4 10             	add    esp,0x10
c0025ad8:	83 ec 08             	sub    esp,0x8
c0025adb:	68 58 21 00 00       	push   0x2158
c0025ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ae4:	e8 8e c6 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025ae9:	83 c4 10             	add    esp,0x10
c0025aec:	83 c4 0c             	add    esp,0xc
c0025aef:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025af0 <APICTimer::~APICTimer()>:
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	ba 24 93 02 c0       	mov    edx,0xc0029324
c0025af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025afc:	89 10                	mov    DWORD PTR [eax],edx
c0025afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b02:	83 ec 0c             	sub    esp,0xc
c0025b05:	50                   	push   eax
c0025b06:	e8 43 02 ff ff       	call   c0015d4e <Timer::~Timer()>
c0025b0b:	83 c4 10             	add    esp,0x10
c0025b0e:	90                   	nop
c0025b0f:	83 c4 0c             	add    esp,0xc
c0025b12:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025b14 <APICTimer::~APICTimer()>:
c0025b14:	83 ec 0c             	sub    esp,0xc
c0025b17:	83 ec 0c             	sub    esp,0xc
c0025b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b1e:	e8 cd ff ff ff       	call   c0025af0 <APICTimer::~APICTimer()>
c0025b23:	83 c4 10             	add    esp,0x10
c0025b26:	83 ec 08             	sub    esp,0x8
c0025b29:	68 60 01 00 00       	push   0x160
c0025b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b32:	e8 40 c6 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025b37:	83 c4 10             	add    esp,0x10
c0025b3a:	83 c4 0c             	add    esp,0xc
c0025b3d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025b3e <PIT::~PIT()>:
c0025b3e:	83 ec 0c             	sub    esp,0xc
c0025b41:	ba 74 93 02 c0       	mov    edx,0xc0029374
c0025b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4a:	89 10                	mov    DWORD PTR [eax],edx
c0025b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b50:	83 ec 0c             	sub    esp,0xc
c0025b53:	50                   	push   eax
c0025b54:	e8 f5 01 ff ff       	call   c0015d4e <Timer::~Timer()>
c0025b59:	83 c4 10             	add    esp,0x10
c0025b5c:	90                   	nop
c0025b5d:	83 c4 0c             	add    esp,0xc
c0025b60:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025b62 <PIT::~PIT()>:
c0025b62:	83 ec 0c             	sub    esp,0xc
c0025b65:	83 ec 0c             	sub    esp,0xc
c0025b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b6c:	e8 cd ff ff ff       	call   c0025b3e <PIT::~PIT()>
c0025b71:	83 c4 10             	add    esp,0x10
c0025b74:	83 ec 08             	sub    esp,0x8
c0025b77:	68 5c 01 00 00       	push   0x15c
c0025b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b80:	e8 f2 c5 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025b85:	83 c4 10             	add    esp,0x10
c0025b88:	83 c4 0c             	add    esp,0xc
c0025b8b:	c3                   	ret    
