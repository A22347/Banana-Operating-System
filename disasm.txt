
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a9 10 02 00       	call   c00210ce <_init>
c0000025:	c3                   	ret    
c0000026:	bb 52 1d 02 c0       	mov    ebx,0xc0021d52
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 60 1d 02 c0    	cmp    ebx,0xc0021d60
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 5b 02 c0       	mov    eax,0xc0025bb8
c0000049:	3d b8 5b 02 c0       	cmp    eax,0xc0025bb8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 5b 02 c0       	push   0xc0025bb8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 5b 02 c0       	mov    eax,0xc0025bb8
c0000075:	2d b8 5b 02 c0       	sub    eax,0xc0025bb8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 5b 02 c0       	push   0xc0025bb8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 5d 02 c0 00 	cmp    BYTE PTR ds:0xc0025d40,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 68 1d 02 c0       	mov    ebx,0xc0021d68
c00000bb:	81 eb 64 1d 02 c0    	sub    ebx,0xc0021d64
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 64 1d 02 c0       	mov    esi,0xc0021d64
c00000ca:	a1 44 5d 02 c0       	mov    eax,ds:0xc0025d44
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 5d 02 c0       	mov    ds:0xc0025d44,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 5d 02 c0       	mov    eax,ds:0xc0025d44
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 5b 02 c0       	push   0xc0025bb8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 5d 02 c0 01 	mov    BYTE PTR ds:0xc0025d40,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 5d 02 c0       	push   0xc0025d48
c000012c:	68 b8 5b 02 c0       	push   0xc0025bb8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 b0 74 01 00       	call   c0017788 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 e8 c4 00 00       	call   c000c7d8 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 8e 74 01 00       	call   c0017788 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 57 79 01 00       	call   c0017c70 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 9a 7f 01 00       	call   c00182bc <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 90 61 02 c0 	lgdtd  ds:0xc0026190
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 76 e2 00 00       	call   c000e78d <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 60 5d 02 c0       	mov    ds:0xc0025d60,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 60 5d 02 c0    	mov    DWORD PTR ds:0xc0025d60,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 60 5d 02 c0    	mov    ebx,DWORD PTR ds:0xc0025d60
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 80 1d 02 c0 02 	test   BYTE PTR [edx-0x3ffde280],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 80 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde280],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 80 1d 02 c0 08 	test   BYTE PTR [edx-0x3ffde280],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 80 1d 02 c0 04 	test   BYTE PTR [ebx-0x3ffde280],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 80 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde280],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 80 5d 02 c0    	mov    ecx,DWORD PTR ds:0xc0025d80
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 80 5d 02 c0    	mov    DWORD PTR ds:0xc0025d80,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 84 5d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda27c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 84 5d 02 c0 	mov    DWORD PTR [eax*4-0x3ffda27c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 80 5d 02 c0    	mov    DWORD PTR ds:0xc0025d80,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 ac 5d 02 c0    	cmp    DWORD PTR ds:0xc0025dac,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d bc 5d 02 c0    	mov    ecx,DWORD PTR ds:0xc0025dbc
c0000d6c:	c7 42 0c b4 5d 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025db4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 bc 5d 02 c0    	mov    DWORD PTR ds:0xc0025dbc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 ac 5d 02 c0    	mov    DWORD PTR ds:0xc0025dac,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 80 5d 02 c0 02 	test   BYTE PTR ds:0xc0025d80,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 80 5d 02 c0    	mov    edi,DWORD PTR ds:0xc0025d80
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 84 5d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda27c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 84 5d 02 c0 	mov    DWORD PTR [edx*4-0x3ffda27c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 b4 5d 02 c0 	lea    edx,[eax*8-0x3ffda24c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d c0 5d 02 c0    	mov    ebx,DWORD PTR ds:0xc0025dc0
c00010ee:	81 fb b4 5d 02 c0    	cmp    ebx,0xc0025db4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d b4 5d 02 c0       	cmp    eax,0xc0025db4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d b0 5d 02 c0    	cmp    DWORD PTR ds:0xc0025db0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 bc 5d 02 c0       	mov    ds:0xc0025dbc,eax
c000112a:	a3 c0 5d 02 c0       	mov    ds:0xc0025dc0,eax
c000112f:	a3 b0 5d 02 c0       	mov    ds:0xc0025db0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 b4 5d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025db4
c000113d:	c7 40 0c b4 5d 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025db4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 c0 5d 02 c0       	mov    ds:0xc0025dc0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 b4 5d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025db4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 78 5d 02 c0 	lea    ebp,[edx*4-0x3ffda288]
c000118e:	8b 14 95 80 5d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda280]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 80 5d 02 c0 	lea    ecx,[edx*4-0x3ffda280]
c00011a9:	8b 14 95 80 5d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda280]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd b4 60 02 c0 	or     DWORD PTR [edi*4-0x3ffd9f4c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 b4 5d 02 c0 	lea    eax,[eax*8-0x3ffda24c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d bc 5d 02 c0    	mov    DWORD PTR ds:0xc0025dbc,ecx
c0001263:	89 0d c0 5d 02 c0    	mov    DWORD PTR ds:0xc0025dc0,ecx
c0001269:	c7 41 08 b4 5d 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025db4
c0001270:	c7 41 0c b4 5d 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025db4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd ac 5d 02 c0 	lea    edx,[ecx*8-0x3ffda254]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d b4 60 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9f4c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d b4 60 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9f4c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 ac 5d 02 c0 	lea    edx,[eax*4-0x3ffda254]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d b4 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f4c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d bc 5d 02 c0    	mov    DWORD PTR ds:0xc0025dbc,edi
c0001336:	89 3d c0 5d 02 c0    	mov    DWORD PTR ds:0xc0025dc0,edi
c000133c:	c7 47 08 b4 5d 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025db4
c0001343:	c7 47 0c b4 5d 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025db4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d b0 5d 02 c0    	mov    DWORD PTR ds:0xc0025db0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 ac 5d 02 c0       	mov    eax,ds:0xc0025dac
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d ac 5d 02 c0    	mov    DWORD PTR ds:0xc0025dac,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 80 5d 02 c0       	mov    edx,0xc0025d80
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 80 5d 02 c0 00 	cmp    DWORD PTR ds:0xc0025d80,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d d4 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260d4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 d4 60 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00260d4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d d4 60 02 c0    	mov    DWORD PTR ds:0xc00260d4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 ac 5d 02 c0    	cmp    DWORD PTR ds:0xc0025dac,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d ac 5d 02 c0    	mov    DWORD PTR ds:0xc0025dac,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 80 5d 02 c0 00 	cmp    DWORD PTR ds:0xc0025d80,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 dc 60 02 c0    	push   DWORD PTR ds:0xc00260dc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 80 5d 02 c0 00 	cmp    DWORD PTR ds:0xc0025d80,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 dc 60 02 c0       	mov    eax,ds:0xc00260dc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d ac 5d 02 c0 00 	cmp    DWORD PTR ds:0xc0025dac,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 ac 5d 02 c0       	mov    eax,ds:0xc0025dac
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 84 5d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda27c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 b4 5d 02 c0       	mov    eax,0xc0025db4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d ac 60 02 c0       	cmp    eax,0xc00260ac
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 e8 60 02 c0       	mov    eax,ds:0xc00260e8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 d0 60 02 c0    	mov    esi,DWORD PTR ds:0xc00260d0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 e4 60 02 c0    	mov    esi,DWORD PTR ds:0xc00260e4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 f4 60 02 c0    	mov    esi,DWORD PTR ds:0xc00260f4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 84 1e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde17c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 80 5d 02 c0       	mov    eax,ds:0xc0025d80
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 80 5d 02 c0       	mov    ds:0xc0025d80,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d c4 60 02 c0    	mov    DWORD PTR ds:0xc00260c4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d c8 60 02 c0    	mov    DWORD PTR ds:0xc00260c8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d cc 60 02 c0    	mov    DWORD PTR ds:0xc00260cc,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 d4 60 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00260d4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 e0 77 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8820]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 9a 94 01 00       	jmp    c001afc0 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 e0 77 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8820]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 cc 94 01 00       	jmp    c001b008 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 e0 77 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8820]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 f5 94 01 00       	jmp    c001b050 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 76 f0 01 00       	call   c0020eb4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 a0 1f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffde060]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 a0 1f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffde060]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba c0 1f 02 c0       	mov    edx,0xc0021fc0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 24 49 02 c0       	mov    edx,0xc0024924
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba cc 1f 02 c0       	mov    edx,0xc0021fcc
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba b0 1f 02 c0       	mov    edx,0xc0021fb0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 20 61 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9ee0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 00 61 02 c0    	mov    ax,ds:0xc0026100
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 00 61 02 c0    	mov    ds:0xc0026100,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 73 de 01 00       	call   c0020eb4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 d2 1f 02 c0       	mov    eax,0xc0021fd2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 20 1f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde0e0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 db 1f 02 c0       	mov    eax,0xc0021fdb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 a0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde060]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 3e c8 01 00       	call   c0020eb4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba b0 1f 02 c0       	mov    edx,0xc0021fb0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba b0 1e 02 c0       	mov    edx,0xc0021eb0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 20 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9ee0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 20 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9ee0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 05 b2 01 00       	call   c0020eb4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 eb b1 01 00       	call   c0020eb4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 f7 1e 02 c0       	mov    eax,0xc0021ef7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 f0 1e 02 c0       	mov    eax,0xc0021ef0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 84 9d 01 00       	call   c0020eb4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 20 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ee0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be e0 1e 02 c0       	mov    esi,0xc0021ee0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 f8 96 01 00       	call   c0020eb4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba c0 1f 02 c0       	mov    edx,0xc0021fc0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba c0 1e 02 c0       	mov    edx,0xc0021ec0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba e2 1f 02 c0       	mov    edx,0xc0021fe2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ee 1f 02 c0       	mov    edx,0xc0021fee
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 02 20 02 c0       	mov    edx,0xc0022002
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 20 23 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022320
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 20 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022320
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 20 21 02 c0       	mov    eax,0xc0022120
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 60 20 02 c0       	mov    eax,0xc0022060
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 20 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddfe0]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000888b:	48                   	dec    eax
c000888c:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00088a2:	48                   	dec    eax
c00088a3:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c00088b3:	ff 05 44 76 02 c0    	inc    DWORD PTR ds:0xc0027644
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c00088c2:	48                   	dec    eax
c00088c3:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 40 76 02 c0 00 	cmp    DWORD PTR ds:0xc0027640,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c00088dd:	e8 fa f5 00 00       	call   c0017edc <schedule()>
c00088e2:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00088e7:	48                   	dec    eax
c00088e8:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 b0 62 02 c0       	mov    eax,ds:0xc00262b0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 20 24 02 c0       	push   0xc0022420
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 88 61 02 c0       	mov    eax,0xc0026188
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 29 24 02 c0       	push   0xc0022429
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 b4 0e 02 c0       	mov    eax,0xc0020eb4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 33 24 02 c0       	push   0xc0022433
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 e8 0b 02 c0       	mov    eax,0xc0020be8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 3c 24 02 c0       	push   0xc002243c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 b4 0f 02 c0       	mov    eax,0xc0020fb4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 46 24 02 c0       	push   0xc0022446
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 34 0d 02 c0       	mov    eax,0xc0020d34
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 4f 24 02 c0       	push   0xc002244f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 8c 61 02 c0       	mov    eax,0xc002618c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 5c 24 02 c0       	push   0xc002245c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 8d 61 02 c0       	mov    eax,0xc002618d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 f7 55 00 00       	call   c000e03c <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 69 24 02 c0       	push   0xc0022469
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 80 24 02 c0 	mov    DWORD PTR [esp],0xc0022480
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c0008aa2:	68 99 24 02 c0       	push   0xc0022499
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 09 f0 00 00       	call   c0017ab8 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 fc f1 00 00       	call   c0017cc0 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 04 87 01 c0       	push   0xc0018704
c0008acd:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c0008ad3:	e8 e8 f1 00 00       	call   c0017cc0 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0008ae0:	68 40 26 02 c0       	push   0xc0022640
c0008ae5:	c6 05 8d 61 02 c0 01 	mov    BYTE PTR ds:0xc002618d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 e9 ff 00 00       	call   c0018adf <Vm::initialise8086()>
c0008af6:	e8 07 43 00 00       	call   c000ce02 <Fs::initVFS()>
c0008afb:	c7 04 24 a6 24 02 c0 	mov    DWORD PTR [esp],0xc00224a6
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 40 26 02 c0       	push   0xc0022640
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 f6 d7 00 00       	call   c0016326 <Sys::loadSyscalls()>
c0008b30:	e8 cd b6 00 00       	call   c0014202 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 c0 24 02 c0       	push   0xc00224c0
c0008b3f:	68 c9 24 02 c0       	push   0xc00224c9
c0008b44:	e8 a0 c5 00 00       	call   c00150e9 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 a3 4d 00 00       	call   c000d8f4 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 64 26 02 c0 	mov    DWORD PTR [esp],0xc0022664
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 8e 54 00 00       	call   c000dffc <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 d1 24 02 c0 	mov    DWORD PTR [esp],0xc00224d1
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 eb b1 00 00       	call   c0013d6a <Krnl::startCPUs()>
c0008b7f:	c7 04 24 eb 24 02 c0 	mov    DWORD PTR [esp],0xc00224eb
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 88 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026188
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 fc 24 02 c0       	push   0xc00224fc
c0008b9a:	e8 57 e9 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 7f eb 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 1f f5 00 00       	call   c00180d4 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 18 25 02 c0       	push   0xc0022518
c0008bc9:	50                   	push   eax
c0008bca:	e8 e7 54 00 00       	call   c000e0b6 <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 14 27 02 c0       	mov    edx,0xc0022714
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 a1 61 02 c0 04 	test   BYTE PTR ds:0xc00261a1,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 13 7e 01 00       	call   c0020b76 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 70 9e 00 00       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 49 9e 00 00       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 27 9e 00 00       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 05 9e 00 00       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 a0 61 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00261a0,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 13 9d 00 00       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 ee 9c 00 00       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 7d 7c 01 00       	call   c0020b30 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 3a 7c 01 00       	call   c0020b10 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 0a 9d 00 00       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 21 25 02 c0       	push   0xc0022521
c0008f46:	e8 c0 b3 00 00       	call   c001430b <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 27 25 02 c0       	push   0xc0022527
c0008f7e:	e8 88 b3 00 00       	call   c001430b <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 84 26 02 c0       	push   0xc0022684
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 a0 61 02 c0 04 	test   BYTE PTR ds:0xc00261a0,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 60 55 02 c0 	sete   BYTE PTR ds:0xc0025560
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 2d 25 02 c0       	push   0xc002252d
c0008ff3:	e8 73 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 43 25 02 c0       	push   0xc0022543
c0009004:	e8 62 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 57 25 02 c0       	push   0xc0022557
c0009012:	e8 54 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 6a 25 02 c0       	push   0xc002256a
c0009023:	e8 43 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 81 25 02 c0       	push   0xc0022581
c0009031:	e8 35 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 97 25 02 c0 	mov    DWORD PTR [esp],0xc0022597
c000903d:	e8 29 3a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 a9 25 02 c0 	mov    DWORD PTR [esp],0xc00225a9
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 1c 8d 00 00       	call   c0011d80 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 c3 25 02 c0 	mov    DWORD PTR [esp],0xc00225c3
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 2e 4e 00 00       	call   c000deb2 <Device::addChild(Device*)>
c0009084:	c7 04 24 a8 26 02 c0 	mov    DWORD PTR [esp],0xc00226a8
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 c8 26 02 c0 	mov    DWORD PTR [esp],0xc00226c8
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 dd 25 02 c0 	mov    DWORD PTR [esp],0xc00225dd
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 d1 24 02 c0 	mov    DWORD PTR [esp],0xc00224d1
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 ea 9b 00 00       	call   c0012cc6 <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 c7 4d 00 00       	call   c000deb2 <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 e8 26 02 c0       	push   0xc00226e8
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 3d 53 00 00       	call   c000e44e <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 8a 4d 00 00       	call   c000deb2 <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 ee 25 02 c0       	push   0xc00225ee
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 7e ec 00 00       	call   c0017dd4 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 09 26 02 c0       	push   0xc0022609
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 c6 38 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 1a 26 02 c0       	push   0xc002261a
c00091c2:	e8 44 b1 00 00       	call   c001430b <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 27 26 02 c0       	push   0xc0022627
c00091d7:	e8 2f b1 00 00       	call   c001430b <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 31 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022631
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 18 b1 00 00       	jmp    c001430b <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 92 61 02 c0       	mov    ds:0xc0026192,eax
c00092af:	66 89 15 90 61 02 c0 	mov    WORD PTR ds:0xc0026190,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00093c6:	48                   	dec    eax
c00093c7:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 88 61 02 c0    	push   DWORD PTR ds:0xc0026188
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 19 7d 01 00       	call   c0021136 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 10 7d 01 00       	call   c0021136 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 98 61 02 c0 ff 07 	mov    WORD PTR ds:0xc0026198,0x7ff
c0009519:	a3 9a 61 02 c0       	mov    ds:0xc002619a,eax
c000951e:	0f 01 1d 98 61 02 c0 	lidtd  ds:0xc0026198
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 b0 62 02 c0    	push   DWORD PTR ds:0xc00262b0
c0009810:	e8 d9 26 00 00       	call   c000beee <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 55 18 00 00       	call   c000b088 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 8a 18 00 00       	call   c000b0cc <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 38 27 02 c0       	push   0xc0022738
c000989d:	e8 c9 31 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 f8 53 02 c0       	mov    eax,ds:0xc00253f8
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 b0 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262b0
c00098cc:	8b 3d f8 53 02 c0    	mov    edi,DWORD PTR ds:0xc00253f8
c00098d2:	e8 59 05 00 00       	call   c0009e30 <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 08 25 00 00       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 f8 53 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00253f8,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 f8 53 02 c0       	mov    eax,ds:0xc00253f8
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 64 27 02 c0       	push   0xc0022764
c0009918:	e8 4e 31 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 56 27 02 c0       	push   0xc0022756
c0009937:	e8 cf a9 00 00       	call   c001430b <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 5b 27 02 c0       	push   0xc002275b
c000994d:	e8 b9 a9 00 00       	call   c001430b <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000996d:	48                   	dec    eax
c000996e:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 b0 62 02 c0    	push   DWORD PTR ds:0xc00262b0
c000998b:	e8 5e 25 00 00       	call   c000beee <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 b0 62 02 c0    	push   DWORD PTR ds:0xc00262b0
c00099a1:	e8 f2 21 00 00       	call   c000bb98 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	56                   	push   esi
c0009a8b:	53                   	push   ebx
c0009a8c:	83 ec 20             	sub    esp,0x20
c0009a8f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009a94:	a3 a0 61 02 c0       	mov    ds:0xc00261a0,eax
c0009a99:	f6 c4 08             	test   ah,0x8
c0009a9c:	0f 85 3d 01 00 00    	jne    c0009bdf <kernel_main+0x156>
c0009aa2:	31 f6                	xor    esi,esi
c0009aa4:	bf f9 03 00 00       	mov    edi,0x3f9
c0009aa9:	89 f0                	mov    eax,esi
c0009aab:	89 fa                	mov    edx,edi
c0009aad:	ee                   	out    dx,al
c0009aae:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009ab3:	b0 80                	mov    al,0x80
c0009ab5:	89 da                	mov    edx,ebx
c0009ab7:	ee                   	out    dx,al
c0009ab8:	b1 03                	mov    cl,0x3
c0009aba:	ba f8 03 00 00       	mov    edx,0x3f8
c0009abf:	88 c8                	mov    al,cl
c0009ac1:	ee                   	out    dx,al
c0009ac2:	89 f0                	mov    eax,esi
c0009ac4:	89 fa                	mov    edx,edi
c0009ac6:	ee                   	out    dx,al
c0009ac7:	88 c8                	mov    al,cl
c0009ac9:	89 da                	mov    edx,ebx
c0009acb:	ee                   	out    dx,al
c0009acc:	b0 c7                	mov    al,0xc7
c0009ace:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ad3:	ee                   	out    dx,al
c0009ad4:	b0 0b                	mov    al,0xb
c0009ad6:	ba fc 03 00 00       	mov    edx,0x3fc
c0009adb:	ee                   	out    dx,al
c0009adc:	83 ec 0c             	sub    esp,0xc
c0009adf:	68 d3 27 02 c0       	push   0xc00227d3
c0009ae4:	e8 82 2f 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009ae9:	e8 98 0a 00 00       	call   c000a586 <installVgaTextImplementation()>
c0009aee:	0f b6 05 00 54 02 c0 	movzx  eax,BYTE PTR ds:0xc0025400
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	84 c0                	test   al,al
c0009afa:	74 6c                	je     c0009b68 <kernel_main+0xdf>
c0009afc:	31 db                	xor    ebx,ebx
c0009afe:	bf 0a 00 00 00       	mov    edi,0xa
c0009b03:	be 05 00 00 00       	mov    esi,0x5
c0009b08:	31 c9                	xor    ecx,ecx
c0009b0a:	eb 2a                	jmp    c0009b36 <kernel_main+0xad>
c0009b0c:	3c 0d                	cmp    al,0xd
c0009b0e:	74 1a                	je     c0009b2a <kernel_main+0xa1>
c0009b10:	3c 0a                	cmp    al,0xa
c0009b12:	74 40                	je     c0009b54 <kernel_main+0xcb>
c0009b14:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b17:	80 cc 0e             	or     ah,0xe
c0009b1a:	c1 e2 04             	shl    edx,0x4
c0009b1d:	01 ca                	add    edx,ecx
c0009b1f:	41                   	inc    ecx
c0009b20:	01 fa                	add    edx,edi
c0009b22:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b2a:	43                   	inc    ebx
c0009b2b:	0f b6 83 00 54 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdac00]
c0009b32:	84 c0                	test   al,al
c0009b34:	74 32                	je     c0009b68 <kernel_main+0xdf>
c0009b36:	80 b9 36 54 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffdabca],0xdb
c0009b3d:	75 cd                	jne    c0009b0c <kernel_main+0x83>
c0009b3f:	0f b6 91 35 54 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffdabcb]
c0009b46:	83 e2 fe             	and    edx,0xfffffffe
c0009b49:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b4f:	75 bb                	jne    c0009b0c <kernel_main+0x83>
c0009b51:	47                   	inc    edi
c0009b52:	eb b8                	jmp    c0009b0c <kernel_main+0x83>
c0009b54:	43                   	inc    ebx
c0009b55:	46                   	inc    esi
c0009b56:	31 c9                	xor    ecx,ecx
c0009b58:	0f b6 83 00 54 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdac00]
c0009b5f:	bf 0a 00 00 00       	mov    edi,0xa
c0009b64:	84 c0                	test   al,al
c0009b66:	75 ce                	jne    c0009b36 <kernel_main+0xad>
c0009b68:	83 ec 0c             	sub    esp,0xc
c0009b6b:	68 b4 27 02 c0       	push   0xc00227b4
c0009b70:	e8 a8 fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b75:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b7a:	05 ff 0f 00 00       	add    eax,0xfff
c0009b7f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b84:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b87:	e8 23 04 00 00       	call   c0009faf <Phys::physicalMemorySetup(unsigned int)>
c0009b8c:	e8 73 1d 00 00       	call   c000b904 <Virt::virtualMemorySetup()>
c0009b91:	58                   	pop    eax
c0009b92:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b96:	53                   	push   ebx
c0009b97:	e8 24 1e 00 00       	call   c000b9c0 <VAS::VAS()>
c0009b9c:	89 1d b0 62 02 c0    	mov    DWORD PTR ds:0xc00262b0,ebx
c0009ba2:	e8 79 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009ba7:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009bae:	e8 10 fe ff ff       	call   c00099c3 <malloc>
c0009bb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bb6:	89 c6                	mov    esi,eax
c0009bb8:	e8 fd ef ff ff       	call   c0008bba <Computer::Computer()>
c0009bbd:	6a 00                	push   0x0
c0009bbf:	89 35 88 61 02 c0    	mov    DWORD PTR ds:0xc0026188,esi
c0009bc5:	6a 00                	push   0x0
c0009bc7:	6a 00                	push   0x0
c0009bc9:	56                   	push   esi
c0009bca:	e8 f7 f3 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bcf:	83 c4 14             	add    esp,0x14
c0009bd2:	53                   	push   ebx
c0009bd3:	e8 98 20 00 00       	call   c000bc70 <VAS::~VAS()>
c0009bd8:	83 c4 30             	add    esp,0x30
c0009bdb:	5b                   	pop    ebx
c0009bdc:	5e                   	pop    esi
c0009bdd:	5f                   	pop    edi
c0009bde:	c3                   	ret    
c0009bdf:	83 ec 0c             	sub    esp,0xc
c0009be2:	68 94 27 02 c0       	push   0xc0022794
c0009be7:	e8 31 fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009bec:	83 c4 10             	add    esp,0x10
c0009bef:	eb 04                	jmp    c0009bf5 <kernel_main+0x16c>
c0009bf1:	3c 1c                	cmp    al,0x1c
c0009bf3:	74 06                	je     c0009bfb <kernel_main+0x172>
c0009bf5:	e4 60                	in     al,0x60
c0009bf7:	3c 5a                	cmp    al,0x5a
c0009bf9:	75 f6                	jne    c0009bf1 <kernel_main+0x168>
c0009bfb:	e4 60                	in     al,0x60
c0009bfd:	3c 5a                	cmp    al,0x5a
c0009bff:	74 fa                	je     c0009bfb <kernel_main+0x172>
c0009c01:	3c 1c                	cmp    al,0x1c
c0009c03:	74 f6                	je     c0009bfb <kernel_main+0x172>
c0009c05:	e9 98 fe ff ff       	jmp    c0009aa2 <kernel_main+0x19>

c0009c0a <Phys::allocateDMA(unsigned long)>:
c0009c0a:	55                   	push   ebp
c0009c0b:	31 ed                	xor    ebp,ebp
c0009c0d:	57                   	push   edi
c0009c0e:	56                   	push   esi
c0009c0f:	53                   	push   ebx
c0009c10:	31 db                	xor    ebx,ebx
c0009c12:	83 ec 28             	sub    esp,0x28
c0009c15:	68 ea 27 02 c0       	push   0xc00227ea
c0009c1a:	e8 4c 2e 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009c1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009c2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009c34:	c1 ef 0c             	shr    edi,0xc
c0009c37:	31 c0                	xor    eax,eax
c0009c39:	eb 19                	jmp    c0009c54 <Phys::allocateDMA(unsigned long)+0x4a>
c0009c3b:	85 c0                	test   eax,eax
c0009c3d:	75 06                	jne    c0009c45 <Phys::allocateDMA(unsigned long)+0x3b>
c0009c3f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009c43:	89 dd                	mov    ebp,ebx
c0009c45:	8d 70 01             	lea    esi,[eax+0x1]
c0009c48:	39 f7                	cmp    edi,esi
c0009c4a:	74 3f                	je     c0009c8b <Phys::allocateDMA(unsigned long)+0x81>
c0009c4c:	89 f0                	mov    eax,esi
c0009c4e:	43                   	inc    ebx
c0009c4f:	83 fb 0f             	cmp    ebx,0xf
c0009c52:	7f 11                	jg     c0009c65 <Phys::allocateDMA(unsigned long)+0x5b>
c0009c54:	80 bb bc 61 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9e44],0x0
c0009c5b:	74 de                	je     c0009c3b <Phys::allocateDMA(unsigned long)+0x31>
c0009c5d:	31 c0                	xor    eax,eax
c0009c5f:	43                   	inc    ebx
c0009c60:	83 fb 0f             	cmp    ebx,0xf
c0009c63:	7e ef                	jle    c0009c54 <Phys::allocateDMA(unsigned long)+0x4a>
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	68 1e 28 02 c0       	push   0xc002281e
c0009c6d:	e8 f9 2d 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009c72:	c7 04 24 d8 28 02 c0 	mov    DWORD PTR [esp],0xc00228d8
c0009c79:	e8 8d a6 00 00       	call   c001430b <Krnl::panic(char const*)>
c0009c7e:	83 c4 10             	add    esp,0x10
c0009c81:	31 c0                	xor    eax,eax
c0009c83:	83 c4 1c             	add    esp,0x1c
c0009c86:	5b                   	pop    ebx
c0009c87:	5e                   	pop    esi
c0009c88:	5f                   	pop    edi
c0009c89:	5d                   	pop    ebp
c0009c8a:	c3                   	ret    
c0009c8b:	89 e9                	mov    ecx,ebp
c0009c8d:	c1 f9 04             	sar    ecx,0x4
c0009c90:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009c94:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009c98:	89 ca                	mov    edx,ecx
c0009c9a:	4a                   	dec    edx
c0009c9b:	79 03                	jns    c0009ca0 <Phys::allocateDMA(unsigned long)+0x96>
c0009c9d:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009ca0:	c1 fa 04             	sar    edx,0x4
c0009ca3:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009ca7:	74 08                	je     c0009cb1 <Phys::allocateDMA(unsigned long)+0xa7>
c0009ca9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009cad:	31 c0                	xor    eax,eax
c0009caf:	eb ae                	jmp    c0009c5f <Phys::allocateDMA(unsigned long)+0x55>
c0009cb1:	85 f6                	test   esi,esi
c0009cb3:	74 15                	je     c0009cca <Phys::allocateDMA(unsigned long)+0xc0>
c0009cb5:	8d 95 bc 61 02 c0    	lea    edx,[ebp-0x3ffd9e44]
c0009cbb:	8d 84 05 bd 61 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9e43]
c0009cc2:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009cc5:	42                   	inc    edx
c0009cc6:	39 d0                	cmp    eax,edx
c0009cc8:	75 f8                	jne    c0009cc2 <Phys::allocateDMA(unsigned long)+0xb8>
c0009cca:	83 ec 0c             	sub    esp,0xc
c0009ccd:	01 3d b4 61 02 c0    	add    DWORD PTR ds:0xc00261b4,edi
c0009cd3:	68 03 28 02 c0       	push   0xc0022803
c0009cd8:	e8 8e 2d 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009cdd:	83 c4 10             	add    esp,0x10
c0009ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ce4:	85 c0                	test   eax,eax
c0009ce6:	74 23                	je     c0009d0b <Phys::allocateDMA(unsigned long)+0x101>
c0009ce8:	83 ec 0c             	sub    esp,0xc
c0009ceb:	68 1a 28 02 c0       	push   0xc002281a
c0009cf0:	e8 76 2d 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009cf5:	c7 04 24 d8 28 02 c0 	mov    DWORD PTR [esp],0xc00228d8
c0009cfc:	e8 0a a6 00 00       	call   c001430b <Krnl::panic(char const*)>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 f0                	mov    eax,esi
c0009d06:	e9 43 ff ff ff       	jmp    c0009c4e <Phys::allocateDMA(unsigned long)+0x44>
c0009d0b:	c1 e5 0c             	shl    ebp,0xc
c0009d0e:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009d14:	e9 6a ff ff ff       	jmp    c0009c83 <Phys::allocateDMA(unsigned long)+0x79>

c0009d19 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009d19:	83 ec 18             	sub    esp,0x18
c0009d1c:	68 22 28 02 c0       	push   0xc0022822
c0009d21:	e8 45 2d 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009d26:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009d2a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d34:	c1 ea 0c             	shr    edx,0xc
c0009d37:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009d3c:	29 15 b4 61 02 c0    	sub    DWORD PTR ds:0xc00261b4,edx
c0009d42:	c1 e8 0c             	shr    eax,0xc
c0009d45:	83 c4 10             	add    esp,0x10
c0009d48:	85 d2                	test   edx,edx
c0009d4a:	74 0f                	je     c0009d5b <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009d4c:	05 bc 61 02 c0       	add    eax,0xc00261bc
c0009d51:	01 c2                	add    edx,eax
c0009d53:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009d56:	40                   	inc    eax
c0009d57:	39 d0                	cmp    eax,edx
c0009d59:	75 f8                	jne    c0009d53 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009d5b:	83 c4 0c             	add    esp,0xc
c0009d5e:	c3                   	ret    

c0009d5f <Phys::setPageState(unsigned long, bool)>:
c0009d5f:	56                   	push   esi
c0009d60:	ba 01 00 00 00       	mov    edx,0x1
c0009d65:	53                   	push   ebx
c0009d66:	8b 35 44 55 02 c0    	mov    esi,DWORD PTR ds:0xc0025544
c0009d6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d74:	89 c8                	mov    eax,ecx
c0009d76:	83 e1 07             	and    ecx,0x7
c0009d79:	c1 e8 03             	shr    eax,0x3
c0009d7c:	d3 e3                	shl    ebx,cl
c0009d7e:	01 c6                	add    esi,eax
c0009d80:	d3 e2                	shl    edx,cl
c0009d82:	f7 d2                	not    edx
c0009d84:	20 16                	and    BYTE PTR [esi],dl
c0009d86:	03 05 44 55 02 c0    	add    eax,DWORD PTR ds:0xc0025544
c0009d8c:	08 18                	or     BYTE PTR [eax],bl
c0009d8e:	5b                   	pop    ebx
c0009d8f:	5e                   	pop    esi
c0009d90:	c3                   	ret    

c0009d91 <Phys::getPageState(unsigned long)>:
c0009d91:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d95:	8b 15 44 55 02 c0    	mov    edx,DWORD PTR ds:0xc0025544
c0009d9b:	89 c8                	mov    eax,ecx
c0009d9d:	83 e1 07             	and    ecx,0x7
c0009da0:	c1 e8 03             	shr    eax,0x3
c0009da3:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009da7:	d3 f8                	sar    eax,cl
c0009da9:	83 e0 01             	and    eax,0x1
c0009dac:	c3                   	ret    

c0009dad <Phys::freePage(unsigned long)>:
c0009dad:	53                   	push   ebx
c0009dae:	83 ec 10             	sub    esp,0x10
c0009db1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009db5:	53                   	push   ebx
c0009db6:	68 38 28 02 c0       	push   0xc0022838
c0009dbb:	e8 ab 2c 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009dc0:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009dc6:	83 c4 10             	add    esp,0x10
c0009dc9:	3d ff ff 00 00       	cmp    eax,0xffff
c0009dce:	76 3d                	jbe    c0009e0d <Phys::freePage(unsigned long)+0x60>
c0009dd0:	83 ec 0c             	sub    esp,0xc
c0009dd3:	c1 eb 0c             	shr    ebx,0xc
c0009dd6:	53                   	push   ebx
c0009dd7:	e8 b5 ff ff ff       	call   c0009d91 <Phys::getPageState(unsigned long)>
c0009ddc:	83 c4 10             	add    esp,0x10
c0009ddf:	84 c0                	test   al,al
c0009de1:	74 19                	je     c0009dfc <Phys::freePage(unsigned long)+0x4f>
c0009de3:	83 ec 08             	sub    esp,0x8
c0009de6:	ff 0d b4 61 02 c0    	dec    DWORD PTR ds:0xc00261b4
c0009dec:	6a 00                	push   0x0
c0009dee:	53                   	push   ebx
c0009def:	e8 6b ff ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c0009df4:	83 c4 10             	add    esp,0x10
c0009df7:	83 c4 08             	add    esp,0x8
c0009dfa:	5b                   	pop    ebx
c0009dfb:	c3                   	ret    
c0009dfc:	c7 44 24 10 62 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022862
c0009e04:	83 c4 08             	add    esp,0x8
c0009e07:	5b                   	pop    ebx
c0009e08:	e9 fe a4 00 00       	jmp    c001430b <Krnl::panic(char const*)>
c0009e0d:	83 ec 08             	sub    esp,0x8
c0009e10:	53                   	push   ebx
c0009e11:	68 4b 28 02 c0       	push   0xc002284b
c0009e16:	e8 50 2c 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009e1b:	58                   	pop    eax
c0009e1c:	5a                   	pop    edx
c0009e1d:	68 00 10 00 00       	push   0x1000
c0009e22:	53                   	push   ebx
c0009e23:	e8 f1 fe ff ff       	call   c0009d19 <Phys::freeDMA(unsigned long, unsigned long)>
c0009e28:	83 c4 10             	add    esp,0x10
c0009e2b:	83 c4 08             	add    esp,0x8
c0009e2e:	5b                   	pop    ebx
c0009e2f:	c3                   	ret    

c0009e30 <Phys::allocatePage()>:
c0009e30:	56                   	push   esi
c0009e31:	53                   	push   ebx
c0009e32:	83 ec 14             	sub    esp,0x14
c0009e35:	8b 35 a8 61 02 c0    	mov    esi,DWORD PTR ds:0xc00261a8
c0009e3b:	89 f3                	mov    ebx,esi
c0009e3d:	eb 0a                	jmp    c0009e49 <Phys::allocatePage()+0x19>
c0009e3f:	89 1d a8 61 02 c0    	mov    DWORD PTR ds:0xc00261a8,ebx
c0009e45:	39 de                	cmp    esi,ebx
c0009e47:	74 24                	je     c0009e6d <Phys::allocatePage()+0x3d>
c0009e49:	53                   	push   ebx
c0009e4a:	e8 42 ff ff ff       	call   c0009d91 <Phys::getPageState(unsigned long)>
c0009e4f:	5a                   	pop    edx
c0009e50:	84 c0                	test   al,al
c0009e52:	74 69                	je     c0009ebd <Phys::allocatePage()+0x8d>
c0009e54:	43                   	inc    ebx
c0009e55:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009e5b:	75 e2                	jne    c0009e3f <Phys::allocatePage()+0xf>
c0009e5d:	31 db                	xor    ebx,ebx
c0009e5f:	c7 05 a8 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261a8,0x0
c0009e69:	39 de                	cmp    esi,ebx
c0009e6b:	75 dc                	jne    c0009e49 <Phys::allocatePage()+0x19>
c0009e6d:	83 ec 0c             	sub    esp,0xc
c0009e70:	80 35 cc 61 02 c0 01 	xor    BYTE PTR ds:0xc00261cc,0x1
c0009e77:	68 00 29 02 c0       	push   0xc0022900
c0009e7c:	e8 ea 2b 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009e81:	58                   	pop    eax
c0009e82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e8a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e90:	e8 65 28 00 00       	call   c000c6fa <VAS::scanForEviction()>
c0009e95:	83 c4 10             	add    esp,0x10
c0009e98:	85 c0                	test   eax,eax
c0009e9a:	75 62                	jne    c0009efe <Phys::allocatePage()+0xce>
c0009e9c:	83 ec 0c             	sub    esp,0xc
c0009e9f:	68 24 29 02 c0       	push   0xc0022924
c0009ea4:	e8 62 a4 00 00       	call   c001430b <Krnl::panic(char const*)>
c0009ea9:	83 c4 10             	add    esp,0x10
c0009eac:	8b 1d a8 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261a8
c0009eb2:	53                   	push   ebx
c0009eb3:	e8 d9 fe ff ff       	call   c0009d91 <Phys::getPageState(unsigned long)>
c0009eb8:	5a                   	pop    edx
c0009eb9:	84 c0                	test   al,al
c0009ebb:	75 97                	jne    c0009e54 <Phys::allocatePage()+0x24>
c0009ebd:	6a 01                	push   0x1
c0009ebf:	53                   	push   ebx
c0009ec0:	e8 9a fe ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c0009ec5:	5a                   	pop    edx
c0009ec6:	a1 b4 61 02 c0       	mov    eax,ds:0xc00261b4
c0009ecb:	59                   	pop    ecx
c0009ecc:	40                   	inc    eax
c0009ecd:	8b 15 a8 61 02 c0    	mov    edx,DWORD PTR ds:0xc00261a8
c0009ed3:	a3 b4 61 02 c0       	mov    ds:0xc00261b4,eax
c0009ed8:	c1 e2 0c             	shl    edx,0xc
c0009edb:	52                   	push   edx
c0009edc:	ff 35 b8 61 02 c0    	push   DWORD PTR ds:0xc00261b8
c0009ee2:	50                   	push   eax
c0009ee3:	68 78 28 02 c0       	push   0xc0022878
c0009ee8:	e8 7e 2b 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009eed:	a1 a8 61 02 c0       	mov    eax,ds:0xc00261a8
c0009ef2:	83 c4 10             	add    esp,0x10
c0009ef5:	c1 e0 0c             	shl    eax,0xc
c0009ef8:	83 c4 14             	add    esp,0x14
c0009efb:	5b                   	pop    ebx
c0009efc:	5e                   	pop    esi
c0009efd:	c3                   	ret    
c0009efe:	83 ec 08             	sub    esp,0x8
c0009f01:	89 c2                	mov    edx,eax
c0009f03:	6a 01                	push   0x1
c0009f05:	c1 ea 0c             	shr    edx,0xc
c0009f08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f0c:	52                   	push   edx
c0009f0d:	e8 4d fe ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c0009f12:	83 c4 10             	add    esp,0x10
c0009f15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f19:	eb dd                	jmp    c0009ef8 <Phys::allocatePage()+0xc8>

c0009f1b <Phys::allocateContiguousPages(int)>:
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009f22:	fa                   	cli    
c0009f23:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0009f29:	31 db                	xor    ebx,ebx
c0009f2b:	85 db                	test   ebx,ebx
c0009f2d:	75 11                	jne    c0009f40 <Phys::allocateContiguousPages(int)+0x25>
c0009f2f:	e8 fc fe ff ff       	call   c0009e30 <Phys::allocatePage()>
c0009f34:	83 fe 01             	cmp    esi,0x1
c0009f37:	89 c7                	mov    edi,eax
c0009f39:	74 21                	je     c0009f5c <Phys::allocateContiguousPages(int)+0x41>
c0009f3b:	bb 01 00 00 00       	mov    ebx,0x1
c0009f40:	e8 eb fe ff ff       	call   c0009e30 <Phys::allocatePage()>
c0009f45:	89 da                	mov    edx,ebx
c0009f47:	c1 e2 0c             	shl    edx,0xc
c0009f4a:	01 fa                	add    edx,edi
c0009f4c:	39 c2                	cmp    edx,eax
c0009f4e:	74 20                	je     c0009f70 <Phys::allocateContiguousPages(int)+0x55>
c0009f50:	bb 01 00 00 00       	mov    ebx,0x1
c0009f55:	89 c7                	mov    edi,eax
c0009f57:	83 fe 01             	cmp    esi,0x1
c0009f5a:	75 e4                	jne    c0009f40 <Phys::allocateContiguousPages(int)+0x25>
c0009f5c:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0009f61:	48                   	dec    eax
c0009f62:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0009f67:	75 01                	jne    c0009f6a <Phys::allocateContiguousPages(int)+0x4f>
c0009f69:	fb                   	sti    
c0009f6a:	89 f8                	mov    eax,edi
c0009f6c:	5b                   	pop    ebx
c0009f6d:	5e                   	pop    esi
c0009f6e:	5f                   	pop    edi
c0009f6f:	c3                   	ret    
c0009f70:	43                   	inc    ebx
c0009f71:	39 f3                	cmp    ebx,esi
c0009f73:	75 b6                	jne    c0009f2b <Phys::allocateContiguousPages(int)+0x10>
c0009f75:	eb e5                	jmp    c0009f5c <Phys::allocateContiguousPages(int)+0x41>

c0009f77 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f77:	56                   	push   esi
c0009f78:	53                   	push   ebx
c0009f79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f7d:	39 1d ac 61 02 c0    	cmp    DWORD PTR ds:0xc00261ac,ebx
c0009f83:	73 06                	jae    c0009f8b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f85:	89 1d ac 61 02 c0    	mov    DWORD PTR ds:0xc00261ac,ebx
c0009f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f8f:	c1 eb 0c             	shr    ebx,0xc
c0009f92:	c1 e8 0c             	shr    eax,0xc
c0009f95:	39 d8                	cmp    eax,ebx
c0009f97:	73 13                	jae    c0009fac <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f99:	6a 00                	push   0x0
c0009f9b:	8d 70 01             	lea    esi,[eax+0x1]
c0009f9e:	50                   	push   eax
c0009f9f:	e8 bb fd ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c0009fa4:	5a                   	pop    edx
c0009fa5:	89 f0                	mov    eax,esi
c0009fa7:	59                   	pop    ecx
c0009fa8:	39 f3                	cmp    ebx,esi
c0009faa:	75 ed                	jne    c0009f99 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009fac:	5b                   	pop    ebx
c0009fad:	5e                   	pop    esi
c0009fae:	c3                   	ret    

c0009faf <Phys::physicalMemorySetup(unsigned int)>:
c0009faf:	55                   	push   ebp
c0009fb0:	57                   	push   edi
c0009fb1:	56                   	push   esi
c0009fb2:	53                   	push   ebx
c0009fb3:	31 db                	xor    ebx,ebx
c0009fb5:	83 ec 40             	sub    esp,0x40
c0009fb8:	6a 10                	push   0x10
c0009fba:	6a 00                	push   0x0
c0009fbc:	68 bc 61 02 c0       	push   0xc00261bc
c0009fc1:	e8 be 66 ff ff       	call   c0000684 <memset>
c0009fc6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009fca:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fcf:	05 00 10 00 00       	add    eax,0x1000
c0009fd4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009fd8:	5a                   	pop    edx
c0009fd9:	59                   	pop    ecx
c0009fda:	50                   	push   eax
c0009fdb:	68 96 28 02 c0       	push   0xc0022896
c0009fe0:	e8 86 2a 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0009fe5:	83 c4 10             	add    esp,0x10
c0009fe8:	83 ec 08             	sub    esp,0x8
c0009feb:	6a 01                	push   0x1
c0009fed:	53                   	push   ebx
c0009fee:	43                   	inc    ebx
c0009fef:	e8 6b fd ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c0009ff4:	83 c4 10             	add    esp,0x10
c0009ff7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009ffd:	75 e9                	jne    c0009fe8 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009fff:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a006:	66 85 c0             	test   ax,ax
c000a009:	0f 84 8e 01 00 00    	je     c000a19d <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a00f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a013:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a01b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a01f:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a024:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a028:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a030:	eb 15                	jmp    c000a047 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a032:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a036:	83 c3 18             	add    ebx,0x18
c000a039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a03d:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a041:	0f 84 66 01 00 00    	je     c000a1ad <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a047:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a04a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a04d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a050:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a054:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a058:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a05a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a05d:	01 f0                	add    eax,esi
c000a05f:	55                   	push   ebp
c000a060:	11 fa                	adc    edx,edi
c000a062:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a066:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a06e:	56                   	push   esi
c000a06f:	68 54 29 02 c0       	push   0xc0022954
c000a074:	e8 f2 29 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000a079:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a07d:	83 c4 10             	add    esp,0x10
c000a080:	09 f8                	or     eax,edi
c000a082:	0f 85 25 01 00 00    	jne    c000a1ad <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a088:	4d                   	dec    ebp
c000a089:	75 a7                	jne    c000a032 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a08b:	ba 00 00 08 00       	mov    edx,0x80000
c000a090:	89 c1                	mov    ecx,eax
c000a092:	39 f2                	cmp    edx,esi
c000a094:	19 f9                	sbb    ecx,edi
c000a096:	0f 82 a7 00 00 00    	jb     c000a143 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a09c:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a0a0:	89 c1                	mov    ecx,eax
c000a0a2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a0a6:	0f 83 97 00 00 00    	jae    c000a143 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a0ac:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a0b1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a0b5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a0b9:	39 fa                	cmp    edx,edi
c000a0bb:	19 e8                	sbb    eax,ebp
c000a0bd:	0f 82 a5 01 00 00    	jb     c000a268 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a0c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a0c7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a0cb:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a0d1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a0d6:	83 d5 ff             	adc    ebp,0xffffffff
c000a0d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a0dd:	31 c0                	xor    eax,eax
c000a0df:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a0e3:	39 fa                	cmp    edx,edi
c000a0e5:	89 c1                	mov    ecx,eax
c000a0e7:	19 e9                	sbb    ecx,ebp
c000a0e9:	0f 83 43 ff ff ff    	jae    c000a032 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0ef:	be 00 00 08 00       	mov    esi,0x80000
c000a0f4:	57                   	push   edi
c000a0f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a0f9:	57                   	push   edi
c000a0fa:	56                   	push   esi
c000a0fb:	68 78 29 02 c0       	push   0xc0022978
c000a100:	e8 66 29 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000a105:	5d                   	pop    ebp
c000a106:	58                   	pop    eax
c000a107:	57                   	push   edi
c000a108:	56                   	push   esi
c000a109:	e8 69 fe ff ff       	call   c0009f77 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a10e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a112:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a116:	83 c4 0c             	add    esp,0xc
c000a119:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a11d:	03 05 b8 61 02 c0    	add    eax,DWORD PTR ds:0xc00261b8
c000a123:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a12a:	a3 b8 61 02 c0       	mov    ds:0xc00261b8,eax
c000a12f:	52                   	push   edx
c000a130:	50                   	push   eax
c000a131:	68 bc 28 02 c0       	push   0xc00228bc
c000a136:	e8 30 29 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000a13b:	83 c4 10             	add    esp,0x10
c000a13e:	e9 ef fe ff ff       	jmp    c000a032 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a143:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a147:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a14b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a14f:	39 ea                	cmp    edx,ebp
c000a151:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a155:	0f 82 d7 fe ff ff    	jb     c000a032 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a15b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a160:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a164:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a168:	0f 83 c4 fe ff ff    	jae    c000a032 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a16e:	39 ee                	cmp    esi,ebp
c000a170:	89 f8                	mov    eax,edi
c000a172:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a176:	0f 83 78 ff ff ff    	jae    c000a0f4 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a17c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a180:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a184:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a188:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a18c:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a198:	e9 57 ff ff ff       	jmp    c000a0f4 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a19d:	83 ec 0c             	sub    esp,0xc
c000a1a0:	68 ae 28 02 c0       	push   0xc00228ae
c000a1a5:	e8 61 a1 00 00       	call   c001430b <Krnl::panic(char const*)>
c000a1aa:	83 c4 10             	add    esp,0x10
c000a1ad:	83 ec 08             	sub    esp,0x8
c000a1b0:	6a 00                	push   0x0
c000a1b2:	6a 05                	push   0x5
c000a1b4:	e8 a6 fb ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c000a1b9:	58                   	pop    eax
c000a1ba:	5a                   	pop    edx
c000a1bb:	6a 00                	push   0x0
c000a1bd:	6a 06                	push   0x6
c000a1bf:	e8 9b fb ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c000a1c4:	59                   	pop    ecx
c000a1c5:	5b                   	pop    ebx
c000a1c6:	bb 60 00 00 00       	mov    ebx,0x60
c000a1cb:	6a 00                	push   0x0
c000a1cd:	6a 07                	push   0x7
c000a1cf:	e8 8b fb ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c000a1d4:	83 05 b8 61 02 c0 03 	add    DWORD PTR ds:0xc00261b8,0x3
c000a1db:	83 c4 10             	add    esp,0x10
c000a1de:	83 ec 08             	sub    esp,0x8
c000a1e1:	6a 00                	push   0x0
c000a1e3:	53                   	push   ebx
c000a1e4:	43                   	inc    ebx
c000a1e5:	e8 75 fb ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c000a1ea:	83 c4 10             	add    esp,0x10
c000a1ed:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a1f3:	75 e9                	jne    c000a1de <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a1f5:	a1 b8 61 02 c0       	mov    eax,ds:0xc00261b8
c000a1fa:	bb 40 01 00 00       	mov    ebx,0x140
c000a1ff:	83 c0 20             	add    eax,0x20
c000a202:	a3 b8 61 02 c0       	mov    ds:0xc00261b8,eax
c000a207:	eb 22                	jmp    c000a22b <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a209:	83 ec 08             	sub    esp,0x8
c000a20c:	6a 00                	push   0x0
c000a20e:	53                   	push   ebx
c000a20f:	43                   	inc    ebx
c000a210:	e8 4a fb ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c000a215:	a1 b8 61 02 c0       	mov    eax,ds:0xc00261b8
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	40                   	inc    eax
c000a21e:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a224:	a3 b8 61 02 c0       	mov    ds:0xc00261b8,eax
c000a229:	74 07                	je     c000a232 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a22b:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a230:	7e d7                	jle    c000a209 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a232:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a237:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a23c:	7f 22                	jg     c000a260 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a23e:	83 ec 08             	sub    esp,0x8
c000a241:	6a 00                	push   0x0
c000a243:	53                   	push   ebx
c000a244:	43                   	inc    ebx
c000a245:	e8 15 fb ff ff       	call   c0009d5f <Phys::setPageState(unsigned long, bool)>
c000a24a:	a1 b8 61 02 c0       	mov    eax,ds:0xc00261b8
c000a24f:	83 c4 10             	add    esp,0x10
c000a252:	40                   	inc    eax
c000a253:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a259:	a3 b8 61 02 c0       	mov    ds:0xc00261b8,eax
c000a25e:	75 d7                	jne    c000a237 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a260:	83 c4 3c             	add    esp,0x3c
c000a263:	5b                   	pop    ebx
c000a264:	5e                   	pop    esi
c000a265:	5f                   	pop    edi
c000a266:	5d                   	pop    ebp
c000a267:	c3                   	ret    
c000a268:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a270:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a278:	e9 46 fe ff ff       	jmp    c000a0c3 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a27d:	90                   	nop

c000a27e <Pipe::isAtty()>:
c000a27e:	31 c0                	xor    eax,eax
c000a280:	c3                   	ret    
c000a281:	90                   	nop

c000a282 <Pipe::~Pipe()>:
c000a282:	83 ec 0c             	sub    esp,0xc
c000a285:	ba e4 29 02 c0       	mov    edx,0xc00229e4
c000a28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a28e:	89 10                	mov    DWORD PTR [eax],edx
c000a290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a294:	83 ec 0c             	sub    esp,0xc
c000a297:	50                   	push   eax
c000a298:	e8 47 12 00 00       	call   c000b4e4 <UnixFile::~UnixFile()>
c000a29d:	83 c4 10             	add    esp,0x10
c000a2a0:	90                   	nop
c000a2a1:	83 c4 0c             	add    esp,0xc
c000a2a4:	c3                   	ret    
c000a2a5:	90                   	nop

c000a2a6 <Pipe::~Pipe()>:
c000a2a6:	83 ec 0c             	sub    esp,0xc
c000a2a9:	83 ec 0c             	sub    esp,0xc
c000a2ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b0:	e8 cd ff ff ff       	call   c000a282 <Pipe::~Pipe()>
c000a2b5:	83 c4 10             	add    esp,0x10
c000a2b8:	83 ec 08             	sub    esp,0x8
c000a2bb:	6a 20                	push   0x20
c000a2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2c1:	e8 c4 26 00 00       	call   c000c98a <operator delete(void*, unsigned long)>
c000a2c6:	83 c4 10             	add    esp,0x10
c000a2c9:	83 c4 0c             	add    esp,0xc
c000a2cc:	c3                   	ret    
c000a2cd:	90                   	nop

c000a2ce <Pipe::read(unsigned long long, void*, int*)>:
c000a2ce:	55                   	push   ebp
c000a2cf:	57                   	push   edi
c000a2d0:	56                   	push   esi
c000a2d1:	53                   	push   ebx
c000a2d2:	83 ec 1c             	sub    esp,0x1c
c000a2d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a2d9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a2dd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a2e1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a2e4:	89 c8                	mov    eax,ecx
c000a2e6:	99                   	cdq    
c000a2e7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a2eb:	74 24                	je     c000a311 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a2ed:	39 f9                	cmp    ecx,edi
c000a2ef:	89 d1                	mov    ecx,edx
c000a2f1:	19 f1                	sbb    ecx,esi
c000a2f3:	73 1c                	jae    c000a311 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a2f5:	fa                   	cli    
c000a2f6:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c000a2fc:	e8 db db 00 00       	call   c0017edc <schedule()>
c000a301:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000a306:	48                   	dec    eax
c000a307:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000a30c:	75 d3                	jne    c000a2e1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a30e:	fb                   	sti    
c000a30f:	eb d0                	jmp    c000a2e1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a311:	39 f8                	cmp    eax,edi
c000a313:	89 d1                	mov    ecx,edx
c000a315:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a318:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a31c:	19 f1                	sbb    ecx,esi
c000a31e:	73 07                	jae    c000a327 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a320:	89 04 24             	mov    DWORD PTR [esp],eax
c000a323:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a327:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a32a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a32d:	29 f7                	sub    edi,esi
c000a32f:	89 f8                	mov    eax,edi
c000a331:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a335:	99                   	cdq    
c000a336:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a33d:	19 d0                	sbb    eax,edx
c000a33f:	73 07                	jae    c000a348 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a341:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a344:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a348:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a34b:	89 ea                	mov    edx,ebp
c000a34d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a351:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a356:	74 0d                	je     c000a365 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a358:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a35b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a35f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a363:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a365:	85 d2                	test   edx,edx
c000a367:	74 11                	je     c000a37a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a369:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a36d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a370:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a374:	89 d1                	mov    ecx,edx
c000a376:	89 c7                	mov    edi,eax
c000a378:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a37a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a37d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a380:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a383:	99                   	cdq    
c000a384:	89 f7                	mov    edi,esi
c000a386:	03 04 24             	add    eax,DWORD PTR [esp]
c000a389:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a38d:	c1 ff 1f             	sar    edi,0x1f
c000a390:	57                   	push   edi
c000a391:	56                   	push   esi
c000a392:	52                   	push   edx
c000a393:	50                   	push   eax
c000a394:	e8 1b 6c 01 00       	call   c0020fb4 <__umoddi3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a39f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a3a4:	75 10                	jne    c000a3b6 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a3a6:	83 ec 0c             	sub    esp,0xc
c000a3a9:	68 a1 29 02 c0       	push   0xc00229a1
c000a3ae:	e8 58 9f 00 00       	call   c001430b <Krnl::panic(char const*)>
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3ba:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a3bd:	89 10                	mov    DWORD PTR [eax],edx
c000a3bf:	83 c4 1c             	add    esp,0x1c
c000a3c2:	31 c0                	xor    eax,eax
c000a3c4:	5b                   	pop    ebx
c000a3c5:	5e                   	pop    esi
c000a3c6:	5f                   	pop    edi
c000a3c7:	5d                   	pop    ebp
c000a3c8:	c3                   	ret    
c000a3c9:	90                   	nop

c000a3ca <Pipe::write(unsigned long long, void*, int*)>:
c000a3ca:	55                   	push   ebp
c000a3cb:	57                   	push   edi
c000a3cc:	56                   	push   esi
c000a3cd:	53                   	push   ebx
c000a3ce:	83 ec 1c             	sub    esp,0x1c
c000a3d1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a3d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a3d9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a3dc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a3e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a3e7:	89 d8                	mov    eax,ebx
c000a3e9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a3ec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a3f0:	89 d6                	mov    esi,edx
c000a3f2:	89 d7                	mov    edi,edx
c000a3f4:	c1 ff 1f             	sar    edi,0x1f
c000a3f7:	03 34 24             	add    esi,DWORD PTR [esp]
c000a3fa:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a3fe:	c1 f8 1f             	sar    eax,0x1f
c000a401:	39 f3                	cmp    ebx,esi
c000a403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a407:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a40b:	19 f8                	sbb    eax,edi
c000a40d:	b8 01 00 00 00       	mov    eax,0x1
c000a412:	72 6e                	jb     c000a482 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a414:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a417:	01 d0                	add    eax,edx
c000a419:	99                   	cdq    
c000a41a:	f7 fb                	idiv   ebx
c000a41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a420:	29 d3                	sub    ebx,edx
c000a422:	89 d7                	mov    edi,edx
c000a424:	89 de                	mov    esi,ebx
c000a426:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a429:	c1 fb 1f             	sar    ebx,0x1f
c000a42c:	39 f2                	cmp    edx,esi
c000a42e:	19 d8                	sbb    eax,ebx
c000a430:	b8 00 00 00 00       	mov    eax,0x0
c000a435:	72 04                	jb     c000a43b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a437:	89 d0                	mov    eax,edx
c000a439:	29 f0                	sub    eax,esi
c000a43b:	89 d3                	mov    ebx,edx
c000a43d:	29 c3                	sub    ebx,eax
c000a43f:	74 0b                	je     c000a44c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a441:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a444:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a448:	89 d9                	mov    ecx,ebx
c000a44a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a44c:	85 c0                	test   eax,eax
c000a44e:	74 0d                	je     c000a45d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a450:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a454:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a457:	89 de                	mov    esi,ebx
c000a459:	89 c1                	mov    ecx,eax
c000a45b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a45d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a460:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a465:	75 10                	jne    c000a477 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a467:	83 ec 0c             	sub    esp,0xc
c000a46a:	68 bd 29 02 c0       	push   0xc00229bd
c000a46f:	e8 97 9e 00 00       	call   c001430b <Krnl::panic(char const*)>
c000a474:	83 c4 10             	add    esp,0x10
c000a477:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a47b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a47e:	89 08                	mov    DWORD PTR [eax],ecx
c000a480:	31 c0                	xor    eax,eax
c000a482:	83 c4 1c             	add    esp,0x1c
c000a485:	5b                   	pop    ebx
c000a486:	5e                   	pop    esi
c000a487:	5f                   	pop    edi
c000a488:	5d                   	pop    ebp
c000a489:	c3                   	ret    

c000a48a <Pipe::Pipe(int)>:
c000a48a:	83 ec 0c             	sub    esp,0xc
c000a48d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a491:	83 ec 08             	sub    esp,0x8
c000a494:	6a 00                	push   0x0
c000a496:	50                   	push   eax
c000a497:	e8 66 0e 00 00       	call   c000b302 <UnixFile::UnixFile(int)>
c000a49c:	83 c4 10             	add    esp,0x10
c000a49f:	ba e4 29 02 c0       	mov    edx,0xc00229e4
c000a4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4a8:	89 10                	mov    DWORD PTR [eax],edx
c000a4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a4b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a4b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4b9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4c4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a4cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a4cf:	83 ec 0c             	sub    esp,0xc
c000a4d2:	50                   	push   eax
c000a4d3:	e8 eb f4 ff ff       	call   c00099c3 <malloc>
c000a4d8:	83 c4 10             	add    esp,0x10
c000a4db:	89 c2                	mov    edx,eax
c000a4dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4e8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a4ec:	90                   	nop
c000a4ed:	83 c4 0c             	add    esp,0xc
c000a4f0:	c3                   	ret    
c000a4f1:	90                   	nop

c000a4f2 <VgaText::isAtty()>:
c000a4f2:	b0 01                	mov    al,0x1
c000a4f4:	c3                   	ret    
c000a4f5:	90                   	nop

c000a4f6 <VgaText::~VgaText()>:
c000a4f6:	83 ec 0c             	sub    esp,0xc
c000a4f9:	ba 6c 2a 02 c0       	mov    edx,0xc0022a6c
c000a4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a502:	89 10                	mov    DWORD PTR [eax],edx
c000a504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a508:	83 ec 0c             	sub    esp,0xc
c000a50b:	50                   	push   eax
c000a50c:	e8 d3 0f 00 00       	call   c000b4e4 <UnixFile::~UnixFile()>
c000a511:	83 c4 10             	add    esp,0x10
c000a514:	90                   	nop
c000a515:	83 c4 0c             	add    esp,0xc
c000a518:	c3                   	ret    
c000a519:	90                   	nop

c000a51a <VgaText::~VgaText()>:
c000a51a:	83 ec 0c             	sub    esp,0xc
c000a51d:	83 ec 0c             	sub    esp,0xc
c000a520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a524:	e8 cd ff ff ff       	call   c000a4f6 <VgaText::~VgaText()>
c000a529:	83 c4 10             	add    esp,0x10
c000a52c:	83 ec 08             	sub    esp,0x8
c000a52f:	68 c4 02 00 00       	push   0x2c4
c000a534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a538:	e8 4d 24 00 00       	call   c000c98a <operator delete(void*, unsigned long)>
c000a53d:	83 c4 10             	add    esp,0x10
c000a540:	83 c4 0c             	add    esp,0xc
c000a543:	c3                   	ret    

c000a544 <VgaText::read(unsigned long long, void*, int*)>:
c000a544:	83 ec 10             	sub    esp,0x10
c000a547:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a54b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a54f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a553:	e8 a2 57 00 00       	call   c000fcfa <readKeyboard(VgaText*, char*, unsigned long)>
c000a558:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a55c:	89 02                	mov    DWORD PTR [edx],eax
c000a55e:	31 c0                	xor    eax,eax
c000a560:	83 c4 1c             	add    esp,0x1c
c000a563:	c3                   	ret    

c000a564 <setTerminalScrollLock(bool)>:
c000a564:	c3                   	ret    

c000a565 <addToTerminalCycle(VgaText*)>:
c000a565:	8b 15 00 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026200
c000a56b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a56f:	85 d2                	test   edx,edx
c000a571:	75 09                	jne    c000a57c <addToTerminalCycle(VgaText*)+0x17>
c000a573:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a576:	a3 00 62 02 c0       	mov    ds:0xc0026200,eax
c000a57b:	c3                   	ret    
c000a57c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a57f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a582:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a585:	c3                   	ret    

c000a586 <installVgaTextImplementation()>:
c000a586:	83 ec 10             	sub    esp,0x10
c000a589:	6a 20                	push   0x20
c000a58b:	6a 00                	push   0x0
c000a58d:	68 e0 61 02 c0       	push   0xc00261e0
c000a592:	e8 ed 60 ff ff       	call   c0000684 <memset>
c000a597:	83 c4 1c             	add    esp,0x1c
c000a59a:	c3                   	ret    

c000a59b <scrollTerminalScrollLock(int)>:
c000a59b:	c3                   	ret    

c000a59c <VgaText::updateTitle()>:
c000a59c:	53                   	push   ebx
c000a59d:	31 c0                	xor    eax,eax
c000a59f:	83 ec 58             	sub    esp,0x58
c000a5a2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a5a6:	89 e1                	mov    ecx,esp
c000a5a8:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a5ac:	40                   	inc    eax
c000a5ad:	83 f8 50             	cmp    eax,0x50
c000a5b0:	75 f6                	jne    c000a5a8 <VgaText::updateTitle()+0xc>
c000a5b2:	31 c0                	xor    eax,eax
c000a5b4:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a5bb:	84 db                	test   bl,bl
c000a5bd:	74 06                	je     c000a5c5 <VgaText::updateTitle()+0x29>
c000a5bf:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a5c2:	40                   	inc    eax
c000a5c3:	eb ef                	jmp    c000a5b4 <VgaText::updateTitle()+0x18>
c000a5c5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a5c8:	85 c0                	test   eax,eax
c000a5ca:	74 09                	je     c000a5d5 <VgaText::updateTitle()+0x39>
c000a5cc:	53                   	push   ebx
c000a5cd:	53                   	push   ebx
c000a5ce:	51                   	push   ecx
c000a5cf:	52                   	push   edx
c000a5d0:	ff d0                	call   eax
c000a5d2:	83 c4 10             	add    esp,0x10
c000a5d5:	83 c4 58             	add    esp,0x58
c000a5d8:	5b                   	pop    ebx
c000a5d9:	c3                   	ret    

c000a5da <VgaText::load()>:
c000a5da:	53                   	push   ebx
c000a5db:	31 c0                	xor    eax,eax
c000a5dd:	83 ec 58             	sub    esp,0x58
c000a5e0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a5e4:	89 e2                	mov    edx,esp
c000a5e6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a5ea:	40                   	inc    eax
c000a5eb:	83 f8 50             	cmp    eax,0x50
c000a5ee:	75 f6                	jne    c000a5e6 <VgaText::load()+0xc>
c000a5f0:	31 c0                	xor    eax,eax
c000a5f2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a5f9:	84 c9                	test   cl,cl
c000a5fb:	74 06                	je     c000a603 <VgaText::load()+0x29>
c000a5fd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a600:	40                   	inc    eax
c000a601:	eb ef                	jmp    c000a5f2 <VgaText::load()+0x18>
c000a603:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a606:	85 c0                	test   eax,eax
c000a608:	74 09                	je     c000a613 <VgaText::load()+0x39>
c000a60a:	51                   	push   ecx
c000a60b:	51                   	push   ecx
c000a60c:	52                   	push   edx
c000a60d:	53                   	push   ebx
c000a60e:	ff d0                	call   eax
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a616:	85 c0                	test   eax,eax
c000a618:	74 09                	je     c000a623 <VgaText::load()+0x49>
c000a61a:	83 ec 0c             	sub    esp,0xc
c000a61d:	53                   	push   ebx
c000a61e:	ff d0                	call   eax
c000a620:	83 c4 10             	add    esp,0x10
c000a623:	83 c4 58             	add    esp,0x58
c000a626:	5b                   	pop    ebx
c000a627:	c3                   	ret    

c000a628 <VgaText::updateCursor()>:
c000a628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a62c:	39 05 04 62 02 c0    	cmp    DWORD PTR ds:0xc0026204,eax
c000a632:	75 09                	jne    c000a63d <VgaText::updateCursor()+0x15>
c000a634:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a637:	85 c0                	test   eax,eax
c000a639:	74 02                	je     c000a63d <VgaText::updateCursor()+0x15>
c000a63b:	ff e0                	jmp    eax
c000a63d:	c3                   	ret    

c000a63e <VgaText::doANSI_SGR(int)>:
c000a63e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a646:	85 d2                	test   edx,edx
c000a648:	75 0b                	jne    c000a655 <VgaText::doANSI_SGR(int)+0x17>
c000a64a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a64d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a650:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a653:	eb 59                	jmp    c000a6ae <VgaText::doANSI_SGR(int)+0x70>
c000a655:	83 fa 07             	cmp    edx,0x7
c000a658:	75 0b                	jne    c000a665 <VgaText::doANSI_SGR(int)+0x27>
c000a65a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a65d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a660:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a663:	eb 49                	jmp    c000a6ae <VgaText::doANSI_SGR(int)+0x70>
c000a665:	83 fa 1b             	cmp    edx,0x1b
c000a668:	74 e0                	je     c000a64a <VgaText::doANSI_SGR(int)+0xc>
c000a66a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a66d:	83 f9 07             	cmp    ecx,0x7
c000a670:	77 09                	ja     c000a67b <VgaText::doANSI_SGR(int)+0x3d>
c000a672:	8b 14 8d 80 55 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaa80]
c000a679:	eb 20                	jmp    c000a69b <VgaText::doANSI_SGR(int)+0x5d>
c000a67b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a67e:	83 f9 07             	cmp    ecx,0x7
c000a681:	77 09                	ja     c000a68c <VgaText::doANSI_SGR(int)+0x4e>
c000a683:	8b 14 8d 80 55 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaa80]
c000a68a:	eb 22                	jmp    c000a6ae <VgaText::doANSI_SGR(int)+0x70>
c000a68c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a68f:	83 f9 07             	cmp    ecx,0x7
c000a692:	77 0b                	ja     c000a69f <VgaText::doANSI_SGR(int)+0x61>
c000a694:	8b 14 95 38 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabc8]
c000a69b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a69e:	c3                   	ret    
c000a69f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a6a2:	83 f9 07             	cmp    ecx,0x7
c000a6a5:	77 0a                	ja     c000a6b1 <VgaText::doANSI_SGR(int)+0x73>
c000a6a7:	8b 14 95 10 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabf0]
c000a6ae:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a6b1:	c3                   	ret    

c000a6b2 <VgaText::setDefaultBgColour(VgaColour)>:
c000a6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a6bd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a6c0:	c3                   	ret    
c000a6c1:	90                   	nop

c000a6c2 <VgaText::setDefaultFgColour(VgaColour)>:
c000a6c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6ca:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a6cd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a6d0:	c3                   	ret    
c000a6d1:	90                   	nop

c000a6d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a6d2:	53                   	push   ebx
c000a6d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a6d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a6df:	51                   	push   ecx
c000a6e0:	e8 cd ff ff ff       	call   c000a6b2 <VgaText::setDefaultBgColour(VgaColour)>
c000a6e5:	58                   	pop    eax
c000a6e6:	5a                   	pop    edx
c000a6e7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a6eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a6ef:	5b                   	pop    ebx
c000a6f0:	eb d0                	jmp    c000a6c2 <VgaText::setDefaultFgColour(VgaColour)>

c000a6f2 <VgaText::setTitleTextColour(VgaColour)>:
c000a6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6fa:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a6fd:	e9 9a fe ff ff       	jmp    c000a59c <VgaText::updateTitle()>

c000a702 <VgaText::setTitleColour(VgaColour)>:
c000a702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a70a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a70d:	e9 8a fe ff ff       	jmp    c000a59c <VgaText::updateTitle()>

c000a712 <VgaText::setTitle(char*)>:
c000a712:	53                   	push   ebx
c000a713:	83 ec 10             	sub    esp,0x10
c000a716:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a71e:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a724:	50                   	push   eax
c000a725:	e8 16 60 ff ff       	call   c0000740 <strcpy>
c000a72a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a72e:	83 c4 18             	add    esp,0x18
c000a731:	5b                   	pop    ebx
c000a732:	e9 65 fe ff ff       	jmp    c000a59c <VgaText::updateTitle()>
c000a737:	90                   	nop

c000a738 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a738:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a73c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a741:	83 e0 0f             	and    eax,0xf
c000a744:	c1 e2 04             	shl    edx,0x4
c000a747:	09 d0                	or     eax,edx
c000a749:	c3                   	ret    

c000a74a <VgaText::scrollScreen()>:
c000a74a:	55                   	push   ebp
c000a74b:	b9 01 00 00 00       	mov    ecx,0x1
c000a750:	57                   	push   edi
c000a751:	56                   	push   esi
c000a752:	53                   	push   ebx
c000a753:	83 ec 0c             	sub    esp,0xc
c000a756:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a75a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a760:	31 ff                	xor    edi,edi
c000a762:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a765:	83 f9 17             	cmp    ecx,0x17
c000a768:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a76b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a772:	75 27                	jne    c000a79b <VgaText::scrollScreen()+0x51>
c000a774:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a777:	01 f5                	add    ebp,esi
c000a779:	f7 c7 01 00 00 00    	test   edi,0x1
c000a77f:	74 16                	je     c000a797 <VgaText::scrollScreen()+0x4d>
c000a781:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a785:	50                   	push   eax
c000a786:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a78a:	50                   	push   eax
c000a78b:	e8 a8 ff ff ff       	call   c000a738 <VgaText::combineColours(unsigned char, unsigned char)>
c000a790:	5a                   	pop    edx
c000a791:	5a                   	pop    edx
c000a792:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a795:	eb 04                	jmp    c000a79b <VgaText::scrollScreen()+0x51>
c000a797:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a79b:	47                   	inc    edi
c000a79c:	46                   	inc    esi
c000a79d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a7a3:	75 bd                	jne    c000a762 <VgaText::scrollScreen()+0x18>
c000a7a5:	41                   	inc    ecx
c000a7a6:	83 f9 18             	cmp    ecx,0x18
c000a7a9:	75 af                	jne    c000a75a <VgaText::scrollScreen()+0x10>
c000a7ab:	39 1d 04 62 02 c0    	cmp    DWORD PTR ds:0xc0026204,ebx
c000a7b1:	75 1b                	jne    c000a7ce <VgaText::scrollScreen()+0x84>
c000a7b3:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a7b7:	74 05                	je     c000a7be <VgaText::scrollScreen()+0x74>
c000a7b9:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a7bc:	eb 10                	jmp    c000a7ce <VgaText::scrollScreen()+0x84>
c000a7be:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a7c1:	85 c0                	test   eax,eax
c000a7c3:	74 09                	je     c000a7ce <VgaText::scrollScreen()+0x84>
c000a7c5:	83 ec 0c             	sub    esp,0xc
c000a7c8:	53                   	push   ebx
c000a7c9:	ff d0                	call   eax
c000a7cb:	83 c4 10             	add    esp,0x10
c000a7ce:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a7d2:	83 c4 0c             	add    esp,0xc
c000a7d5:	5b                   	pop    ebx
c000a7d6:	5e                   	pop    esi
c000a7d7:	5f                   	pop    edi
c000a7d8:	5d                   	pop    ebp
c000a7d9:	e9 4a fe ff ff       	jmp    c000a628 <VgaText::updateCursor()>

c000a7de <VgaText::combineCharAndColour(char, unsigned char)>:
c000a7de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a7e3:	c1 e0 08             	shl    eax,0x8
c000a7e6:	89 c2                	mov    edx,eax
c000a7e8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a7ed:	09 d0                	or     eax,edx
c000a7ef:	c3                   	ret    

c000a7f0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a7f0:	56                   	push   esi
c000a7f1:	53                   	push   ebx
c000a7f2:	51                   	push   ecx
c000a7f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7f7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7fc:	50                   	push   eax
c000a7fd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a802:	50                   	push   eax
c000a803:	e8 30 ff ff ff       	call   c000a738 <VgaText::combineColours(unsigned char, unsigned char)>
c000a808:	5b                   	pop    ebx
c000a809:	0f b6 c0             	movzx  eax,al
c000a80c:	5e                   	pop    esi
c000a80d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a812:	50                   	push   eax
c000a813:	53                   	push   ebx
c000a814:	e8 c5 ff ff ff       	call   c000a7de <VgaText::combineCharAndColour(char, unsigned char)>
c000a819:	5a                   	pop    edx
c000a81a:	5e                   	pop    esi
c000a81b:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a81e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a824:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a828:	0f b7 d2             	movzx  edx,dx
c000a82b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a82f:	39 0d 04 62 02 c0    	cmp    DWORD PTR ds:0xc0026204,ecx
c000a835:	75 10                	jne    c000a847 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a837:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a83a:	85 c0                	test   eax,eax
c000a83c:	74 09                	je     c000a847 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a83e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a842:	5a                   	pop    edx
c000a843:	5b                   	pop    ebx
c000a844:	5e                   	pop    esi
c000a845:	ff e0                	jmp    eax
c000a847:	58                   	pop    eax
c000a848:	5b                   	pop    ebx
c000a849:	5e                   	pop    esi
c000a84a:	c3                   	ret    
c000a84b:	90                   	nop

c000a84c <VgaText::getCursorX()>:
c000a84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a850:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a853:	c3                   	ret    

c000a854 <VgaText::getCursorY()>:
c000a854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a858:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a85b:	c3                   	ret    

c000a85c <VgaText::setCursor(int, int)>:
c000a85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a860:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a864:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a86b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a86e:	e9 b5 fd ff ff       	jmp    c000a628 <VgaText::updateCursor()>

c000a873 <setActiveTerminal(VgaText*)>:
c000a873:	53                   	push   ebx
c000a874:	83 ec 08             	sub    esp,0x8
c000a877:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a87b:	85 db                	test   ebx,ebx
c000a87d:	75 11                	jne    c000a890 <setActiveTerminal(VgaText*)+0x1d>
c000a87f:	c7 44 24 10 f8 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc00229f8
c000a887:	83 c4 08             	add    esp,0x8
c000a88a:	5b                   	pop    ebx
c000a88b:	e9 7b 9a 00 00       	jmp    c001430b <Krnl::panic(char const*)>
c000a890:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c000a895:	85 c0                	test   eax,eax
c000a897:	74 0c                	je     c000a8a5 <setActiveTerminal(VgaText*)+0x32>
c000a899:	83 ec 0c             	sub    esp,0xc
c000a89c:	50                   	push   eax
c000a89d:	e8 86 fd ff ff       	call   c000a628 <VgaText::updateCursor()>
c000a8a2:	83 c4 10             	add    esp,0x10
c000a8a5:	89 1d 04 62 02 c0    	mov    DWORD PTR ds:0xc0026204,ebx
c000a8ab:	51                   	push   ecx
c000a8ac:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a8af:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a8b2:	53                   	push   ebx
c000a8b3:	e8 a4 ff ff ff       	call   c000a85c <VgaText::setCursor(int, int)>
c000a8b8:	83 c4 10             	add    esp,0x10
c000a8bb:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a8bf:	75 07                	jne    c000a8c8 <setActiveTerminal(VgaText*)+0x55>
c000a8c1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a8c8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8cc:	83 c4 08             	add    esp,0x8
c000a8cf:	5b                   	pop    ebx
c000a8d0:	e9 05 fd ff ff       	jmp    c000a5da <VgaText::load()>

c000a8d5 <doTerminalCycle()>:
c000a8d5:	83 ec 18             	sub    esp,0x18
c000a8d8:	a1 00 62 02 c0       	mov    eax,ds:0xc0026200
c000a8dd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a8e0:	50                   	push   eax
c000a8e1:	a3 00 62 02 c0       	mov    ds:0xc0026200,eax
c000a8e6:	e8 88 ff ff ff       	call   c000a873 <setActiveTerminal(VgaText*)>
c000a8eb:	83 c4 1c             	add    esp,0x1c
c000a8ee:	c3                   	ret    
c000a8ef:	90                   	nop

c000a8f0 <VgaText::setCursorX(int)>:
c000a8f0:	83 ec 10             	sub    esp,0x10
c000a8f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8f7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8fe:	50                   	push   eax
c000a8ff:	e8 58 ff ff ff       	call   c000a85c <VgaText::setCursor(int, int)>
c000a904:	83 c4 1c             	add    esp,0x1c
c000a907:	c3                   	ret    

c000a908 <VgaText::setCursorY(int)>:
c000a908:	83 ec 10             	sub    esp,0x10
c000a90b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a90f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a913:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a916:	50                   	push   eax
c000a917:	e8 40 ff ff ff       	call   c000a85c <VgaText::setCursor(int, int)>
c000a91c:	83 c4 1c             	add    esp,0x1c
c000a91f:	c3                   	ret    

c000a920 <VgaText::incrementCursor(bool)>:
c000a920:	56                   	push   esi
c000a921:	53                   	push   ebx
c000a922:	51                   	push   ecx
c000a923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a927:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a92b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a92e:	40                   	inc    eax
c000a92f:	83 f8 50             	cmp    eax,0x50
c000a932:	74 05                	je     c000a939 <VgaText::incrementCursor(bool)+0x19>
c000a934:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a937:	eb 24                	jmp    c000a95d <VgaText::incrementCursor(bool)+0x3d>
c000a939:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a93c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a943:	8d 50 01             	lea    edx,[eax+0x1]
c000a946:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a949:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a94c:	75 0f                	jne    c000a95d <VgaText::incrementCursor(bool)+0x3d>
c000a94e:	83 ec 0c             	sub    esp,0xc
c000a951:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a954:	53                   	push   ebx
c000a955:	e8 f0 fd ff ff       	call   c000a74a <VgaText::scrollScreen()>
c000a95a:	83 c4 10             	add    esp,0x10
c000a95d:	89 f0                	mov    eax,esi
c000a95f:	84 c0                	test   al,al
c000a961:	74 0c                	je     c000a96f <VgaText::incrementCursor(bool)+0x4f>
c000a963:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a967:	5a                   	pop    edx
c000a968:	5b                   	pop    ebx
c000a969:	5e                   	pop    esi
c000a96a:	e9 b9 fc ff ff       	jmp    c000a628 <VgaText::updateCursor()>
c000a96f:	58                   	pop    eax
c000a970:	5b                   	pop    ebx
c000a971:	5e                   	pop    esi
c000a972:	c3                   	ret    
c000a973:	90                   	nop

c000a974 <VgaText::decrementCursor(bool)>:
c000a974:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a978:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a97c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a97f:	85 c0                	test   eax,eax
c000a981:	74 04                	je     c000a987 <VgaText::decrementCursor(bool)+0x13>
c000a983:	48                   	dec    eax
c000a984:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a987:	84 c9                	test   cl,cl
c000a989:	74 09                	je     c000a994 <VgaText::decrementCursor(bool)+0x20>
c000a98b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a98f:	e9 94 fc ff ff       	jmp    c000a628 <VgaText::updateCursor()>
c000a994:	c3                   	ret    
c000a995:	90                   	nop

c000a996 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a996:	53                   	push   ebx
c000a997:	83 ec 08             	sub    esp,0x8
c000a99a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a99e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a9a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a9a6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a9aa:	3c 07                	cmp    al,0x7
c000a9ac:	75 2a                	jne    c000a9d8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a9ae:	a1 b8 62 02 c0       	mov    eax,ds:0xc00262b8
c000a9b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a9bb:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a9c3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a9cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a9cf:	83 c4 08             	add    esp,0x8
c000a9d2:	5b                   	pop    ebx
c000a9d3:	e9 ae 2e 00 00       	jmp    c000d886 <Buzzer::beep(int, int, bool)>
c000a9d8:	3c 0d                	cmp    al,0xd
c000a9da:	75 09                	jne    c000a9e5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a9dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9e3:	eb 2c                	jmp    c000aa11 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a9e5:	3c 0a                	cmp    al,0xa
c000a9e7:	75 31                	jne    c000aa1a <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a9e9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a9ec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9f3:	8d 50 01             	lea    edx,[eax+0x1]
c000a9f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a9f9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a9fc:	75 0f                	jne    c000aa0d <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a9fe:	83 ec 0c             	sub    esp,0xc
c000aa01:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aa04:	53                   	push   ebx
c000aa05:	e8 40 fd ff ff       	call   c000a74a <VgaText::scrollScreen()>
c000aa0a:	83 c4 10             	add    esp,0x10
c000aa0d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aa11:	83 c4 08             	add    esp,0x8
c000aa14:	5b                   	pop    ebx
c000aa15:	e9 0e fc ff ff       	jmp    c000a628 <VgaText::updateCursor()>
c000aa1a:	3c 08                	cmp    al,0x8
c000aa1c:	75 25                	jne    c000aa43 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000aa1e:	50                   	push   eax
c000aa1f:	50                   	push   eax
c000aa20:	6a 01                	push   0x1
c000aa22:	53                   	push   ebx
c000aa23:	e8 4c ff ff ff       	call   c000a974 <VgaText::decrementCursor(bool)>
c000aa28:	5a                   	pop    edx
c000aa29:	59                   	pop    ecx
c000aa2a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa2d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa30:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa33:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa36:	6a 20                	push   0x20
c000aa38:	53                   	push   ebx
c000aa39:	e8 b2 fd ff ff       	call   c000a7f0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa3e:	83 c4 28             	add    esp,0x28
c000aa41:	5b                   	pop    ebx
c000aa42:	c3                   	ret    
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	0f be c0             	movsx  eax,al
c000aa49:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa4c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa4f:	51                   	push   ecx
c000aa50:	52                   	push   edx
c000aa51:	50                   	push   eax
c000aa52:	53                   	push   ebx
c000aa53:	e8 98 fd ff ff       	call   c000a7f0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa58:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000aa5c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000aa64:	83 c4 28             	add    esp,0x28
c000aa67:	5b                   	pop    ebx
c000aa68:	e9 b3 fe ff ff       	jmp    c000a920 <VgaText::incrementCursor(bool)>
c000aa6d:	90                   	nop

c000aa6e <VgaText::doUpdate()>:
c000aa6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa72:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000aa75:	85 c0                	test   eax,eax
c000aa77:	74 02                	je     c000aa7b <VgaText::doUpdate()+0xd>
c000aa79:	ff e0                	jmp    eax
c000aa7b:	c3                   	ret    

c000aa7c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000aa7c:	55                   	push   ebp
c000aa7d:	31 ed                	xor    ebp,ebp
c000aa7f:	57                   	push   edi
c000aa80:	56                   	push   esi
c000aa81:	53                   	push   ebx
c000aa82:	83 ec 1c             	sub    esp,0x1c
c000aa85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aa89:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa8e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aa95:	50                   	push   eax
c000aa96:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa9b:	50                   	push   eax
c000aa9c:	e8 97 fc ff ff       	call   c000a738 <VgaText::combineColours(unsigned char, unsigned char)>
c000aaa1:	59                   	pop    ecx
c000aaa2:	0f b6 c0             	movzx  eax,al
c000aaa5:	5e                   	pop    esi
c000aaa6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aaab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aaaf:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aab6:	0f b7 f6             	movzx  esi,si
c000aab9:	01 f6                	add    esi,esi
c000aabb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aabe:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aac1:	84 c0                	test   al,al
c000aac3:	0f 84 fd 00 00 00    	je     c000abc6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aac9:	3c 0d                	cmp    al,0xd
c000aacb:	75 0c                	jne    c000aad9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aacd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aad4:	e9 e7 00 00 00       	jmp    c000abc0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aad9:	3c 0a                	cmp    al,0xa
c000aadb:	75 47                	jne    c000ab24 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aadd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aae0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aae7:	8d 48 01             	lea    ecx,[eax+0x1]
c000aaea:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aaed:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aaf0:	75 0f                	jne    c000ab01 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aaf2:	83 ec 0c             	sub    esp,0xc
c000aaf5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aaf8:	53                   	push   ebx
c000aaf9:	e8 4c fc ff ff       	call   c000a74a <VgaText::scrollScreen()>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	83 ec 0c             	sub    esp,0xc
c000ab04:	31 ed                	xor    ebp,ebp
c000ab06:	53                   	push   ebx
c000ab07:	e8 1c fb ff ff       	call   c000a628 <VgaText::updateCursor()>
c000ab0c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ab17:	0f b7 f6             	movzx  esi,si
c000ab1a:	01 f6                	add    esi,esi
c000ab1c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab1f:	e9 9c 00 00 00       	jmp    c000abc0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab24:	3c 08                	cmp    al,0x8
c000ab26:	75 35                	jne    c000ab5d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000ab28:	56                   	push   esi
c000ab29:	56                   	push   esi
c000ab2a:	6a 01                	push   0x1
c000ab2c:	53                   	push   ebx
c000ab2d:	e8 42 fe ff ff       	call   c000a974 <VgaText::decrementCursor(bool)>
c000ab32:	58                   	pop    eax
c000ab33:	5a                   	pop    edx
c000ab34:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab37:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab3a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab3d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab40:	6a 20                	push   0x20
c000ab42:	53                   	push   ebx
c000ab43:	e8 a8 fc ff ff       	call   c000a7f0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab48:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab4d:	83 c4 20             	add    esp,0x20
c000ab50:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ab53:	0f b7 f6             	movzx  esi,si
c000ab56:	01 f6                	add    esi,esi
c000ab58:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab5b:	eb 63                	jmp    c000abc0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab5d:	51                   	push   ecx
c000ab5e:	51                   	push   ecx
c000ab5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab63:	50                   	push   eax
c000ab64:	e8 75 fc ff ff       	call   c000a7de <VgaText::combineCharAndColour(char, unsigned char)>
c000ab69:	83 c4 10             	add    esp,0x10
c000ab6c:	66 89 06             	mov    WORD PTR [esi],ax
c000ab6f:	39 1d 04 62 02 c0    	cmp    DWORD PTR ds:0xc0026204,ebx
c000ab75:	75 21                	jne    c000ab98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab77:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ab7a:	85 c0                	test   eax,eax
c000ab7c:	74 1a                	je     c000ab98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab7e:	52                   	push   edx
c000ab7f:	52                   	push   edx
c000ab80:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab83:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab8e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ab91:	51                   	push   ecx
c000ab92:	53                   	push   ebx
c000ab93:	ff d0                	call   eax
c000ab95:	83 c4 20             	add    esp,0x20
c000ab98:	83 c6 02             	add    esi,0x2
c000ab9b:	50                   	push   eax
c000ab9c:	50                   	push   eax
c000ab9d:	6a 00                	push   0x0
c000ab9f:	53                   	push   ebx
c000aba0:	e8 7b fd ff ff       	call   c000a920 <VgaText::incrementCursor(bool)>
c000aba5:	83 c4 10             	add    esp,0x10
c000aba8:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000abac:	75 0d                	jne    c000abbb <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000abae:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000abb3:	0f b7 f6             	movzx  esi,si
c000abb6:	01 f6                	add    esi,esi
c000abb8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000abbb:	bd 01 00 00 00       	mov    ebp,0x1
c000abc0:	47                   	inc    edi
c000abc1:	e9 f8 fe ff ff       	jmp    c000aabe <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000abc6:	83 ec 0c             	sub    esp,0xc
c000abc9:	53                   	push   ebx
c000abca:	e8 59 fa ff ff       	call   c000a628 <VgaText::updateCursor()>
c000abcf:	83 c4 10             	add    esp,0x10
c000abd2:	89 e8                	mov    eax,ebp
c000abd4:	84 c0                	test   al,al
c000abd6:	74 0c                	je     c000abe4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000abd8:	83 ec 0c             	sub    esp,0xc
c000abdb:	53                   	push   ebx
c000abdc:	e8 8d fe ff ff       	call   c000aa6e <VgaText::doUpdate()>
c000abe1:	83 c4 10             	add    esp,0x10
c000abe4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000abeb:	83 c4 1c             	add    esp,0x1c
c000abee:	5b                   	pop    ebx
c000abef:	5e                   	pop    esi
c000abf0:	5f                   	pop    edi
c000abf1:	5d                   	pop    ebp
c000abf2:	c3                   	ret    
c000abf3:	90                   	nop

c000abf4 <VgaText::clearScreen()>:
c000abf4:	57                   	push   edi
c000abf5:	56                   	push   esi
c000abf6:	31 f6                	xor    esi,esi
c000abf8:	53                   	push   ebx
c000abf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abfd:	52                   	push   edx
c000abfe:	6a 00                	push   0x0
c000ac00:	6a 00                	push   0x0
c000ac02:	53                   	push   ebx
c000ac03:	e8 54 fc ff ff       	call   c000a85c <VgaText::setCursor(int, int)>
c000ac08:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ac0f:	83 c4 10             	add    esp,0x10
c000ac12:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ac15:	7e 20                	jle    c000ac37 <VgaText::clearScreen()+0x43>
c000ac17:	31 ff                	xor    edi,edi
c000ac19:	50                   	push   eax
c000ac1a:	50                   	push   eax
c000ac1b:	56                   	push   esi
c000ac1c:	57                   	push   edi
c000ac1d:	47                   	inc    edi
c000ac1e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac21:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac24:	6a 20                	push   0x20
c000ac26:	53                   	push   ebx
c000ac27:	e8 c4 fb ff ff       	call   c000a7f0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ac2c:	83 c4 20             	add    esp,0x20
c000ac2f:	83 ff 50             	cmp    edi,0x50
c000ac32:	75 e5                	jne    c000ac19 <VgaText::clearScreen()+0x25>
c000ac34:	46                   	inc    esi
c000ac35:	eb db                	jmp    c000ac12 <VgaText::clearScreen()+0x1e>
c000ac37:	83 ec 0c             	sub    esp,0xc
c000ac3a:	53                   	push   ebx
c000ac3b:	e8 2e fe ff ff       	call   c000aa6e <VgaText::doUpdate()>
c000ac40:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ac47:	83 c4 10             	add    esp,0x10
c000ac4a:	5b                   	pop    ebx
c000ac4b:	5e                   	pop    esi
c000ac4c:	5f                   	pop    edi
c000ac4d:	c3                   	ret    

c000ac4e <VgaText::putchar(char)>:
c000ac4e:	56                   	push   esi
c000ac4f:	53                   	push   ebx
c000ac50:	83 ec 14             	sub    esp,0x14
c000ac53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac57:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac5b:	3c 5b                	cmp    al,0x5b
c000ac5d:	75 18                	jne    c000ac77 <VgaText::putchar(char)+0x29>
c000ac5f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ac63:	74 1f                	je     c000ac84 <VgaText::putchar(char)+0x36>
c000ac65:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ac6b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ac72:	e9 bd 00 00 00       	jmp    c000ad34 <VgaText::putchar(char)+0xe6>
c000ac77:	3c 1b                	cmp    al,0x1b
c000ac79:	75 09                	jne    c000ac84 <VgaText::putchar(char)+0x36>
c000ac7b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ac7f:	e9 b0 00 00 00       	jmp    c000ad34 <VgaText::putchar(char)+0xe6>
c000ac84:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ac87:	84 c9                	test   cl,cl
c000ac89:	0f 84 92 00 00 00    	je     c000ad21 <VgaText::putchar(char)+0xd3>
c000ac8f:	8d 50 c0             	lea    edx,[eax-0x40]
c000ac92:	80 fa 3e             	cmp    dl,0x3e
c000ac95:	77 76                	ja     c000ad0d <VgaText::putchar(char)+0xbf>
c000ac97:	3c 6d                	cmp    al,0x6d
c000ac99:	75 47                	jne    c000ace2 <VgaText::putchar(char)+0x94>
c000ac9b:	31 f6                	xor    esi,esi
c000ac9d:	31 d2                	xor    edx,edx
c000ac9f:	31 c0                	xor    eax,eax
c000aca1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000aca4:	7e 2d                	jle    c000acd3 <VgaText::putchar(char)+0x85>
c000aca6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000acab:	80 fa 3b             	cmp    dl,0x3b
c000acae:	75 17                	jne    c000acc7 <VgaText::putchar(char)+0x79>
c000acb0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000acb4:	50                   	push   eax
c000acb5:	53                   	push   ebx
c000acb6:	e8 83 f9 ff ff       	call   c000a63e <VgaText::doANSI_SGR(int)>
c000acbb:	59                   	pop    ecx
c000acbc:	31 d2                	xor    edx,edx
c000acbe:	58                   	pop    eax
c000acbf:	31 c0                	xor    eax,eax
c000acc1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000acc5:	eb 09                	jmp    c000acd0 <VgaText::putchar(char)+0x82>
c000acc7:	6b c0 0a             	imul   eax,eax,0xa
c000acca:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000acce:	88 ca                	mov    dl,cl
c000acd0:	46                   	inc    esi
c000acd1:	eb ce                	jmp    c000aca1 <VgaText::putchar(char)+0x53>
c000acd3:	84 d2                	test   dl,dl
c000acd5:	74 2e                	je     c000ad05 <VgaText::putchar(char)+0xb7>
c000acd7:	50                   	push   eax
c000acd8:	53                   	push   ebx
c000acd9:	e8 60 f9 ff ff       	call   c000a63e <VgaText::doANSI_SGR(int)>
c000acde:	58                   	pop    eax
c000acdf:	5a                   	pop    edx
c000ace0:	eb 23                	jmp    c000ad05 <VgaText::putchar(char)+0xb7>
c000ace2:	3c 4a                	cmp    al,0x4a
c000ace4:	75 1f                	jne    c000ad05 <VgaText::putchar(char)+0xb7>
c000ace6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000acea:	75 19                	jne    c000ad05 <VgaText::putchar(char)+0xb7>
c000acec:	83 ec 0c             	sub    esp,0xc
c000acef:	53                   	push   ebx
c000acf0:	e8 ff fe ff ff       	call   c000abf4 <VgaText::clearScreen()>
c000acf5:	83 c4 0c             	add    esp,0xc
c000acf8:	6a 00                	push   0x0
c000acfa:	6a 00                	push   0x0
c000acfc:	53                   	push   ebx
c000acfd:	e8 5a fb ff ff       	call   c000a85c <VgaText::setCursor(int, int)>
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000ad0b:	eb 27                	jmp    c000ad34 <VgaText::putchar(char)+0xe6>
c000ad0d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000ad10:	83 fa 0e             	cmp    edx,0xe
c000ad13:	7f 1f                	jg     c000ad34 <VgaText::putchar(char)+0xe6>
c000ad15:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ad18:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ad1b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ad1f:	eb 13                	jmp    c000ad34 <VgaText::putchar(char)+0xe6>
c000ad21:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ad24:	0f be c0             	movsx  eax,al
c000ad27:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ad2a:	50                   	push   eax
c000ad2b:	53                   	push   ebx
c000ad2c:	e8 65 fc ff ff       	call   c000a996 <VgaText::putchar(char, VgaColour, VgaColour)>
c000ad31:	83 c4 10             	add    esp,0x10
c000ad34:	83 c4 14             	add    esp,0x14
c000ad37:	5b                   	pop    ebx
c000ad38:	5e                   	pop    esi
c000ad39:	c3                   	ret    

c000ad3a <VgaText::putx(unsigned int)>:
c000ad3a:	57                   	push   edi
c000ad3b:	b9 11 00 00 00       	mov    ecx,0x11
c000ad40:	56                   	push   esi
c000ad41:	be 06 2a 02 c0       	mov    esi,0xc0022a06
c000ad46:	53                   	push   ebx
c000ad47:	83 ec 20             	sub    esp,0x20
c000ad4a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ad4e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ad52:	fc                   	cld    
c000ad53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ad55:	be 08 00 00 00       	mov    esi,0x8
c000ad5a:	50                   	push   eax
c000ad5b:	50                   	push   eax
c000ad5c:	89 d8                	mov    eax,ebx
c000ad5e:	c1 e3 04             	shl    ebx,0x4
c000ad61:	c1 e8 1c             	shr    eax,0x1c
c000ad64:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ad69:	50                   	push   eax
c000ad6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad6e:	e8 db fe ff ff       	call   c000ac4e <VgaText::putchar(char)>
c000ad73:	83 c4 10             	add    esp,0x10
c000ad76:	4e                   	dec    esi
c000ad77:	75 e1                	jne    c000ad5a <VgaText::putx(unsigned int)+0x20>
c000ad79:	83 c4 20             	add    esp,0x20
c000ad7c:	5b                   	pop    ebx
c000ad7d:	5e                   	pop    esi
c000ad7e:	5f                   	pop    edi
c000ad7f:	c3                   	ret    

c000ad80 <VgaText::puts(char const*)>:
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 08             	sub    esp,0x8
c000ad84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad88:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ad8b:	84 c0                	test   al,al
c000ad8d:	74 12                	je     c000ada1 <VgaText::puts(char const*)+0x21>
c000ad8f:	43                   	inc    ebx
c000ad90:	51                   	push   ecx
c000ad91:	51                   	push   ecx
c000ad92:	50                   	push   eax
c000ad93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad97:	e8 b2 fe ff ff       	call   c000ac4e <VgaText::putchar(char)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	eb e7                	jmp    c000ad88 <VgaText::puts(char const*)+0x8>
c000ada1:	83 c4 08             	add    esp,0x8
c000ada4:	5b                   	pop    ebx
c000ada5:	c3                   	ret    

c000ada6 <VgaText::VgaText(char const*)>:
c000ada6:	57                   	push   edi
c000ada7:	56                   	push   esi
c000ada8:	53                   	push   ebx
c000ada9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adad:	83 ec 08             	sub    esp,0x8
c000adb0:	6a 00                	push   0x0
c000adb2:	50                   	push   eax
c000adb3:	e8 4a 05 00 00       	call   c000b302 <UnixFile::UnixFile(int)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	ba 6c 2a 02 c0       	mov    edx,0xc0022a6c
c000adc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc4:	89 10                	mov    DWORD PTR [eax],edx
c000adc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adca:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000add1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000addc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000ade4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000adec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000adf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adfb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ae02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae06:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ae0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae11:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ae18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1c:	8d 50 60             	lea    edx,[eax+0x60]
c000ae1f:	bb e0 61 02 c0       	mov    ebx,0xc00261e0
c000ae24:	b8 08 00 00 00       	mov    eax,0x8
c000ae29:	fc                   	cld    
c000ae2a:	89 d7                	mov    edi,edx
c000ae2c:	89 de                	mov    esi,ebx
c000ae2e:	89 c1                	mov    ecx,eax
c000ae30:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ae32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae36:	05 82 00 00 00       	add    eax,0x82
c000ae3b:	83 ec 08             	sub    esp,0x8
c000ae3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae42:	50                   	push   eax
c000ae43:	e8 f8 58 ff ff       	call   c0000740 <strcpy>
c000ae48:	83 c4 10             	add    esp,0x10
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ae56:	83 ec 0c             	sub    esp,0xc
c000ae59:	6a 01                	push   0x1
c000ae5b:	e8 e5 08 00 00       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	89 c2                	mov    edx,eax
c000ae65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae69:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae6c:	8b 1d b0 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262b0
c000ae72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae79:	89 c6                	mov    esi,eax
c000ae7b:	e8 b0 ef ff ff       	call   c0009e30 <Phys::allocatePage()>
c000ae80:	68 05 0c 00 00       	push   0xc05
c000ae85:	56                   	push   esi
c000ae86:	50                   	push   eax
c000ae87:	53                   	push   ebx
c000ae88:	e8 5f 0f 00 00       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c000ae8d:	83 c4 10             	add    esp,0x10
c000ae90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae94:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae97:	83 ec 04             	sub    esp,0x4
c000ae9a:	68 00 0f 00 00       	push   0xf00
c000ae9f:	6a 00                	push   0x0
c000aea1:	50                   	push   eax
c000aea2:	e8 dd 57 ff ff       	call   c0000684 <memset>
c000aea7:	83 c4 10             	add    esp,0x10
c000aeaa:	83 ec 04             	sub    esp,0x4
c000aead:	6a 00                	push   0x0
c000aeaf:	6a 07                	push   0x7
c000aeb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb5:	e8 18 f8 ff ff       	call   c000a6d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000aeba:	83 c4 10             	add    esp,0x10
c000aebd:	83 ec 04             	sub    esp,0x4
c000aec0:	6a 00                	push   0x0
c000aec2:	6a 00                	push   0x0
c000aec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aec8:	e8 8f f9 ff ff       	call   c000a85c <VgaText::setCursor(int, int)>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	83 ec 0c             	sub    esp,0xc
c000aed3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aed7:	e8 18 fd ff ff       	call   c000abf4 <VgaText::clearScreen()>
c000aedc:	83 c4 10             	add    esp,0x10
c000aedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee3:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000aee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeeb:	05 02 01 00 00       	add    eax,0x102
c000aef0:	83 ec 04             	sub    esp,0x4
c000aef3:	68 96 00 00 00       	push   0x96
c000aef8:	6a 00                	push   0x0
c000aefa:	50                   	push   eax
c000aefb:	e8 84 57 ff ff       	call   c0000684 <memset>
c000af00:	83 c4 10             	add    esp,0x10
c000af03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af07:	05 98 01 00 00       	add    eax,0x198
c000af0c:	83 ec 04             	sub    esp,0x4
c000af0f:	68 2c 01 00 00       	push   0x12c
c000af14:	6a 00                	push   0x0
c000af16:	50                   	push   eax
c000af17:	e8 68 57 ff ff       	call   c0000684 <memset>
c000af1c:	83 c4 10             	add    esp,0x10
c000af1f:	90                   	nop
c000af20:	5b                   	pop    ebx
c000af21:	5e                   	pop    esi
c000af22:	5f                   	pop    edi
c000af23:	c3                   	ret    

c000af24 <VgaText::receiveKey(unsigned char)>:
c000af24:	55                   	push   ebp
c000af25:	57                   	push   edi
c000af26:	56                   	push   esi
c000af27:	53                   	push   ebx
c000af28:	83 ec 1c             	sub    esp,0x1c
c000af2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000af2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000af33:	84 db                	test   bl,bl
c000af35:	0f 84 c9 00 00 00    	je     c000b004 <VgaText::receiveKey(unsigned char)+0xe0>
c000af3b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000af41:	80 fb 08             	cmp    bl,0x8
c000af44:	75 2c                	jne    c000af72 <VgaText::receiveKey(unsigned char)+0x4e>
c000af46:	83 ec 0c             	sub    esp,0xc
c000af49:	57                   	push   edi
c000af4a:	e8 51 57 ff ff       	call   c00006a0 <strlen>
c000af4f:	83 c4 10             	add    esp,0x10
c000af52:	85 c0                	test   eax,eax
c000af54:	74 41                	je     c000af97 <VgaText::receiveKey(unsigned char)+0x73>
c000af56:	50                   	push   eax
c000af57:	50                   	push   eax
c000af58:	6a 08                	push   0x8
c000af5a:	56                   	push   esi
c000af5b:	e8 ee fc ff ff       	call   c000ac4e <VgaText::putchar(char)>
c000af60:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af63:	e8 38 57 ff ff       	call   c00006a0 <strlen>
c000af68:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000af70:	eb 22                	jmp    c000af94 <VgaText::receiveKey(unsigned char)+0x70>
c000af72:	0f be c3             	movsx  eax,bl
c000af75:	52                   	push   edx
c000af76:	52                   	push   edx
c000af77:	50                   	push   eax
c000af78:	56                   	push   esi
c000af79:	e8 d0 fc ff ff       	call   c000ac4e <VgaText::putchar(char)>
c000af7e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000af82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af87:	59                   	pop    ecx
c000af88:	5d                   	pop    ebp
c000af89:	8d 44 24 16          	lea    eax,[esp+0x16]
c000af8d:	50                   	push   eax
c000af8e:	57                   	push   edi
c000af8f:	e8 ec 58 ff ff       	call   c0000880 <strcat>
c000af94:	83 c4 10             	add    esp,0x10
c000af97:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000af9e:	75 05                	jne    c000afa5 <VgaText::receiveKey(unsigned char)+0x81>
c000afa0:	80 fb 0a             	cmp    bl,0xa
c000afa3:	75 53                	jne    c000aff8 <VgaText::receiveKey(unsigned char)+0xd4>
c000afa5:	83 ec 0c             	sub    esp,0xc
c000afa8:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000afae:	53                   	push   ebx
c000afaf:	e8 ec 56 ff ff       	call   c00006a0 <strlen>
c000afb4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000afb7:	89 c5                	mov    ebp,eax
c000afb9:	e8 e2 56 ff ff       	call   c00006a0 <strlen>
c000afbe:	83 c4 10             	add    esp,0x10
c000afc1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000afc5:	3d 2c 01 00 00       	cmp    eax,0x12c
c000afca:	76 10                	jbe    c000afdc <VgaText::receiveKey(unsigned char)+0xb8>
c000afcc:	83 ec 0c             	sub    esp,0xc
c000afcf:	68 17 2a 02 c0       	push   0xc0022a17
c000afd4:	e8 32 93 00 00       	call   c001430b <Krnl::panic(char const*)>
c000afd9:	83 c4 10             	add    esp,0x10
c000afdc:	50                   	push   eax
c000afdd:	50                   	push   eax
c000afde:	57                   	push   edi
c000afdf:	53                   	push   ebx
c000afe0:	e8 9b 58 ff ff       	call   c0000880 <strcat>
c000afe5:	83 c4 0c             	add    esp,0xc
c000afe8:	68 96 00 00 00       	push   0x96
c000afed:	6a 00                	push   0x0
c000afef:	57                   	push   edi
c000aff0:	e8 8f 56 ff ff       	call   c0000684 <memset>
c000aff5:	83 c4 10             	add    esp,0x10
c000aff8:	83 ec 0c             	sub    esp,0xc
c000affb:	56                   	push   esi
c000affc:	e8 6d fa ff ff       	call   c000aa6e <VgaText::doUpdate()>
c000b001:	83 c4 10             	add    esp,0x10
c000b004:	83 c4 1c             	add    esp,0x1c
c000b007:	5b                   	pop    ebx
c000b008:	5e                   	pop    esi
c000b009:	5f                   	pop    edi
c000b00a:	5d                   	pop    ebp
c000b00b:	c3                   	ret    

c000b00c <VgaText::write(unsigned long long, void*, int*)>:
c000b00c:	55                   	push   ebp
c000b00d:	57                   	push   edi
c000b00e:	56                   	push   esi
c000b00f:	53                   	push   ebx
c000b010:	83 ec 0c             	sub    esp,0xc
c000b013:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b017:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b01b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b01f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b026:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b029:	39 eb                	cmp    ebx,ebp
c000b02b:	74 13                	je     c000b040 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b02d:	43                   	inc    ebx
c000b02e:	50                   	push   eax
c000b02f:	50                   	push   eax
c000b030:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b034:	50                   	push   eax
c000b035:	56                   	push   esi
c000b036:	e8 13 fc ff ff       	call   c000ac4e <VgaText::putchar(char)>
c000b03b:	83 c4 10             	add    esp,0x10
c000b03e:	eb e9                	jmp    c000b029 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b040:	83 ec 0c             	sub    esp,0xc
c000b043:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b04a:	56                   	push   esi
c000b04b:	e8 1e fa ff ff       	call   c000aa6e <VgaText::doUpdate()>
c000b050:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b054:	89 38                	mov    DWORD PTR [eax],edi
c000b056:	83 c4 1c             	add    esp,0x1c
c000b059:	31 c0                	xor    eax,eax
c000b05b:	5b                   	pop    ebx
c000b05c:	5e                   	pop    esi
c000b05d:	5f                   	pop    edi
c000b05e:	5d                   	pop    ebp
c000b05f:	c3                   	ret    

c000b060 <newTerminal(char*)>:
c000b060:	83 ec 28             	sub    esp,0x28
c000b063:	68 c4 02 00 00       	push   0x2c4
c000b068:	e8 56 e9 ff ff       	call   c00099c3 <malloc>
c000b06d:	5a                   	pop    edx
c000b06e:	59                   	pop    ecx
c000b06f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b073:	50                   	push   eax
c000b074:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b078:	e8 29 fd ff ff       	call   c000ada6 <VgaText::VgaText(char const*)>
c000b07d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b081:	83 c4 2c             	add    esp,0x2c
c000b084:	c3                   	ret    
c000b085:	66 90                	xchg   ax,ax
c000b087:	90                   	nop

c000b088 <TSS::TSS()>:
c000b088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b093:	90                   	nop
c000b094:	c3                   	ret    
c000b095:	90                   	nop
c000b096:	66 90                	xchg   ax,ax

c000b098 <TSS::setESP(unsigned long)>:
c000b098:	55                   	push   ebp
c000b099:	89 e5                	mov    ebp,esp
c000b09b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b09e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b0a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0a7:	90                   	nop
c000b0a8:	5d                   	pop    ebp
c000b0a9:	c3                   	ret    
c000b0aa:	66 90                	xchg   ax,ax

c000b0ac <TSS::flush()>:
c000b0ac:	55                   	push   ebp
c000b0ad:	89 e5                	mov    ebp,esp
c000b0af:	83 ec 10             	sub    esp,0x10
c000b0b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b0b7:	83 c8 03             	or     eax,0x3
c000b0ba:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b0be:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b0c2:	66 89 d0             	mov    ax,dx
c000b0c5:	0f 00 d8             	ltr    ax
c000b0c8:	90                   	nop
c000b0c9:	c9                   	leave  
c000b0ca:	c3                   	ret    
c000b0cb:	90                   	nop

c000b0cc <TSS::setup(unsigned long, unsigned long)>:
c000b0cc:	55                   	push   ebp
c000b0cd:	89 e5                	mov    ebp,esp
c000b0cf:	83 ec 18             	sub    esp,0x18
c000b0d2:	83 ec 0c             	sub    esp,0xc
c000b0d5:	6a 68                	push   0x68
c000b0d7:	e8 e7 e8 ff ff       	call   c00099c3 <malloc>
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	89 c2                	mov    edx,eax
c000b0e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ed:	83 ec 04             	sub    esp,0x4
c000b0f0:	6a 68                	push   0x68
c000b0f2:	6a 00                	push   0x0
c000b0f4:	50                   	push   eax
c000b0f5:	e8 8a 55 ff ff       	call   c0000684 <memset>
c000b0fa:	83 c4 10             	add    esp,0x10
c000b0fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b100:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b103:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b10f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b11b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b11e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b124:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b127:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b12d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b130:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b133:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b13c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b13f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b14b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b157:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b15d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b163:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b16c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b16f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b172:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b178:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b17b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b17e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b184:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b187:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b18e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b191:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b194:	0f 20 da             	mov    edx,cr3
c000b197:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b19a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b19d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b1a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1a6:	83 ec 08             	sub    esp,0x8
c000b1a9:	50                   	push   eax
c000b1aa:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b1ad:	50                   	push   eax
c000b1ae:	e8 6d e0 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b1b3:	83 c4 10             	add    esp,0x10
c000b1b6:	83 ec 08             	sub    esp,0x8
c000b1b9:	6a 68                	push   0x68
c000b1bb:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b1be:	50                   	push   eax
c000b1bf:	e8 78 e0 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b1c4:	83 c4 10             	add    esp,0x10
c000b1c7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b1cb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b1ce:	83 e0 0f             	and    eax,0xf
c000b1d1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b1d4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b1d7:	83 c8 40             	or     eax,0x40
c000b1da:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b1dd:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000b1e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b1e8:	05 78 01 00 00       	add    eax,0x178
c000b1ed:	83 ec 04             	sub    esp,0x4
c000b1f0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b1f3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b1f6:	50                   	push   eax
c000b1f7:	e8 74 e0 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	89 c2                	mov    edx,eax
c000b201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b204:	89 10                	mov    DWORD PTR [eax],edx
c000b206:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000b20b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b211:	05 78 01 00 00       	add    eax,0x178
c000b216:	83 ec 0c             	sub    esp,0xc
c000b219:	50                   	push   eax
c000b21a:	e8 7b e0 ff ff       	call   c000929a <GDT::flush()>
c000b21f:	83 c4 10             	add    esp,0x10
c000b222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b225:	8b 00                	mov    eax,DWORD PTR [eax]
c000b227:	c9                   	leave  
c000b228:	c3                   	ret    
c000b229:	90                   	nop

c000b22a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b232:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b235:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b23a:	75 08                	jne    c000b244 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b23c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b242:	eb 38                	jmp    c000b27c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b244:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b249:	75 17                	jne    c000b262 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b24b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b250:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b253:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b259:	8b 10                	mov    edx,DWORD PTR [eax]
c000b25b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b25f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b262:	89 c1                	mov    ecx,eax
c000b264:	83 e1 fd             	and    ecx,0xfffffffd
c000b267:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b26d:	74 cd                	je     c000b23c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b26f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b274:	83 e0 ef             	and    eax,0xffffffef
c000b277:	83 f8 08             	cmp    eax,0x8
c000b27a:	76 c0                	jbe    c000b23c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b27c:	31 c0                	xor    eax,eax
c000b27e:	c3                   	ret    
c000b27f:	90                   	nop

c000b280 <ReservedFilename::isAtty()>:
c000b280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b284:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b287:	31 c0                	xor    eax,eax
c000b289:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b28f:	74 09                	je     c000b29a <ReservedFilename::isAtty()+0x1a>
c000b291:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b297:	0f 94 c0             	sete   al
c000b29a:	c3                   	ret    
c000b29b:	90                   	nop

c000b29c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b29c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b2a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b2ab:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b2b0:	75 08                	jne    c000b2ba <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b2b2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b2b8:	eb 3d                	jmp    c000b2f7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b2ba:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b2bf:	75 17                	jne    c000b2d8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b2c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b2c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b2c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b2cf:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2d5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b2d8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b2dd:	75 04                	jne    c000b2e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b2df:	89 0a                	mov    DWORD PTR [edx],ecx
c000b2e1:	eb 14                	jmp    c000b2f7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b2e3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b2e8:	74 c8                	je     c000b2b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b2ea:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b2ef:	83 e0 ef             	and    eax,0xffffffef
c000b2f2:	83 f8 08             	cmp    eax,0x8
c000b2f5:	76 bb                	jbe    c000b2b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b2f7:	31 c0                	xor    eax,eax
c000b2f9:	c3                   	ret    

c000b2fa <UnixFile::getFileDescriptor()>:
c000b2fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b301:	c3                   	ret    

c000b302 <UnixFile::UnixFile(int)>:
c000b302:	53                   	push   ebx
c000b303:	83 ec 28             	sub    esp,0x28
c000b306:	ba 34 2b 02 c0       	mov    edx,0xc0022b34
c000b30b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b30f:	89 10                	mov    DWORD PTR [eax],edx
c000b311:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b319:	0f 8f 8c 01 00 00    	jg     c000b4ab <UnixFile::UnixFile(int)+0x1a9>
c000b31f:	a1 c0 55 02 c0       	mov    eax,ds:0xc00255c0
c000b324:	8d 50 01             	lea    edx,[eax+0x1]
c000b327:	89 15 c0 55 02 c0    	mov    DWORD PTR ds:0xc00255c0,edx
c000b32d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b331:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b334:	83 ec 08             	sub    esp,0x8
c000b337:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b33b:	68 98 62 02 c0       	push   0xc0026298
c000b340:	e8 57 5e 01 00       	call   c002119c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b345:	83 c4 10             	add    esp,0x10
c000b348:	a0 94 62 02 c0       	mov    al,ds:0xc0026294
c000b34d:	83 f0 01             	xor    eax,0x1
c000b350:	84 c0                	test   al,al
c000b352:	0f 84 54 01 00 00    	je     c000b4ac <UnixFile::UnixFile(int)+0x1aa>
c000b358:	c6 05 94 62 02 c0 01 	mov    BYTE PTR ds:0xc0026294,0x1
c000b35f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b367:	83 ec 0c             	sub    esp,0xc
c000b36a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b36e:	e8 50 e6 ff ff       	call   c00099c3 <malloc>
c000b373:	83 c4 10             	add    esp,0x10
c000b376:	89 c3                	mov    ebx,eax
c000b378:	83 ec 08             	sub    esp,0x8
c000b37b:	68 03 ff ff 0f       	push   0xfffff03
c000b380:	53                   	push   ebx
c000b381:	e8 2c 01 00 00       	call   c000b4b2 <ReservedFilename::ReservedFilename(int)>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 1d 8c 62 02 c0    	mov    DWORD PTR ds:0xc002628c,ebx
c000b38f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b397:	83 ec 0c             	sub    esp,0xc
c000b39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b39e:	e8 20 e6 ff ff       	call   c00099c3 <malloc>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 c3                	mov    ebx,eax
c000b3a8:	83 ec 08             	sub    esp,0x8
c000b3ab:	68 01 ff ff 0f       	push   0xfffff01
c000b3b0:	53                   	push   ebx
c000b3b1:	e8 fc 00 00 00       	call   c000b4b2 <ReservedFilename::ReservedFilename(int)>
c000b3b6:	83 c4 10             	add    esp,0x10
c000b3b9:	89 1d 90 62 02 c0    	mov    DWORD PTR ds:0xc0026290,ebx
c000b3bf:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b3c7:	83 ec 0c             	sub    esp,0xc
c000b3ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b3ce:	e8 f0 e5 ff ff       	call   c00099c3 <malloc>
c000b3d3:	83 c4 10             	add    esp,0x10
c000b3d6:	89 c3                	mov    ebx,eax
c000b3d8:	83 ec 08             	sub    esp,0x8
c000b3db:	68 00 ff ff 0f       	push   0xfffff00
c000b3e0:	53                   	push   ebx
c000b3e1:	e8 cc 00 00 00       	call   c000b4b2 <ReservedFilename::ReservedFilename(int)>
c000b3e6:	83 c4 10             	add    esp,0x10
c000b3e9:	89 1d 84 62 02 c0    	mov    DWORD PTR ds:0xc0026284,ebx
c000b3ef:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b3f7:	83 ec 0c             	sub    esp,0xc
c000b3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b3fe:	e8 c0 e5 ff ff       	call   c00099c3 <malloc>
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	89 c3                	mov    ebx,eax
c000b408:	83 ec 08             	sub    esp,0x8
c000b40b:	68 02 ff ff 0f       	push   0xfffff02
c000b410:	53                   	push   ebx
c000b411:	e8 9c 00 00 00       	call   c000b4b2 <ReservedFilename::ReservedFilename(int)>
c000b416:	83 c4 10             	add    esp,0x10
c000b419:	89 1d 88 62 02 c0    	mov    DWORD PTR ds:0xc0026288,ebx
c000b41f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b427:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b42c:	7f 7e                	jg     c000b4ac <UnixFile::UnixFile(int)+0x1aa>
c000b42e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b436:	83 ec 0c             	sub    esp,0xc
c000b439:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b43d:	e8 81 e5 ff ff       	call   c00099c3 <malloc>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	89 c3                	mov    ebx,eax
c000b447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b44b:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b450:	83 ec 08             	sub    esp,0x8
c000b453:	50                   	push   eax
c000b454:	53                   	push   ebx
c000b455:	e8 58 00 00 00       	call   c000b4b2 <ReservedFilename::ReservedFilename(int)>
c000b45a:	83 c4 10             	add    esp,0x10
c000b45d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b461:	89 1c 85 60 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9da0],ebx
c000b468:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b470:	83 ec 0c             	sub    esp,0xc
c000b473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b477:	e8 47 e5 ff ff       	call   c00099c3 <malloc>
c000b47c:	83 c4 10             	add    esp,0x10
c000b47f:	89 c3                	mov    ebx,eax
c000b481:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b485:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b48a:	83 ec 08             	sub    esp,0x8
c000b48d:	50                   	push   eax
c000b48e:	53                   	push   ebx
c000b48f:	e8 1e 00 00 00       	call   c000b4b2 <ReservedFilename::ReservedFilename(int)>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b49b:	89 1c 85 20 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9de0],ebx
c000b4a2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b4a6:	e9 7c ff ff ff       	jmp    c000b427 <UnixFile::UnixFile(int)+0x125>
c000b4ab:	90                   	nop
c000b4ac:	83 c4 28             	add    esp,0x28
c000b4af:	5b                   	pop    ebx
c000b4b0:	c3                   	ret    
c000b4b1:	90                   	nop

c000b4b2 <ReservedFilename::ReservedFilename(int)>:
c000b4b2:	83 ec 0c             	sub    esp,0xc
c000b4b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b9:	83 ec 08             	sub    esp,0x8
c000b4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c0:	50                   	push   eax
c000b4c1:	e8 3c fe ff ff       	call   c000b302 <UnixFile::UnixFile(int)>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	ba 50 2b 02 c0       	mov    edx,0xc0022b50
c000b4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d2:	89 10                	mov    DWORD PTR [eax],edx
c000b4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4df:	90                   	nop
c000b4e0:	83 c4 0c             	add    esp,0xc
c000b4e3:	c3                   	ret    

c000b4e4 <UnixFile::~UnixFile()>:
c000b4e4:	83 ec 1c             	sub    esp,0x1c
c000b4e7:	ba 34 2b 02 c0       	mov    edx,0xc0022b34
c000b4ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4f0:	89 10                	mov    DWORD PTR [eax],edx
c000b4f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4f9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b4fe:	7f 73                	jg     c000b573 <UnixFile::~UnixFile()+0x8f>
c000b500:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b508:	83 ec 0c             	sub    esp,0xc
c000b50b:	68 98 62 02 c0       	push   0xc0026298
c000b510:	e8 5b 5d 01 00       	call   c0021270 <LinkedList<UnixFile>::getFirstElement()>
c000b515:	83 c4 10             	add    esp,0x10
c000b518:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51c:	83 ec 0c             	sub    esp,0xc
c000b51f:	68 98 62 02 c0       	push   0xc0026298
c000b524:	e8 4f 5d 01 00       	call   c0021278 <LinkedList<UnixFile>::removeFirst()>
c000b529:	83 c4 10             	add    esp,0x10
c000b52c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b530:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b534:	74 40                	je     c000b576 <UnixFile::~UnixFile()+0x92>
c000b536:	83 ec 08             	sub    esp,0x8
c000b539:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b53d:	68 98 62 02 c0       	push   0xc0026298
c000b542:	e8 55 5c 01 00       	call   c002119c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b547:	83 c4 10             	add    esp,0x10
c000b54a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b54e:	8d 50 01             	lea    edx,[eax+0x1]
c000b551:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b555:	3d 88 13 00 00       	cmp    eax,0x1388
c000b55a:	0f 94 c0             	sete   al
c000b55d:	84 c0                	test   al,al
c000b55f:	74 a7                	je     c000b508 <UnixFile::~UnixFile()+0x24>
c000b561:	83 ec 0c             	sub    esp,0xc
c000b564:	68 0c 2b 02 c0       	push   0xc0022b0c
c000b569:	e8 9d 8d 00 00       	call   c001430b <Krnl::panic(char const*)>
c000b56e:	83 c4 10             	add    esp,0x10
c000b571:	eb 95                	jmp    c000b508 <UnixFile::~UnixFile()+0x24>
c000b573:	90                   	nop
c000b574:	eb 01                	jmp    c000b577 <UnixFile::~UnixFile()+0x93>
c000b576:	90                   	nop
c000b577:	90                   	nop
c000b578:	83 c4 1c             	add    esp,0x1c
c000b57b:	c3                   	ret    

c000b57c <UnixFile::~UnixFile()>:
c000b57c:	83 ec 0c             	sub    esp,0xc
c000b57f:	83 ec 0c             	sub    esp,0xc
c000b582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b586:	e8 59 ff ff ff       	call   c000b4e4 <UnixFile::~UnixFile()>
c000b58b:	83 c4 10             	add    esp,0x10
c000b58e:	83 ec 08             	sub    esp,0x8
c000b591:	6a 0c                	push   0xc
c000b593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b597:	e8 ee 13 00 00       	call   c000c98a <operator delete(void*, unsigned long)>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	83 c4 0c             	add    esp,0xc
c000b5a2:	c3                   	ret    
c000b5a3:	90                   	nop

c000b5a4 <ReservedFilename::~ReservedFilename()>:
c000b5a4:	83 ec 0c             	sub    esp,0xc
c000b5a7:	ba 50 2b 02 c0       	mov    edx,0xc0022b50
c000b5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5b0:	89 10                	mov    DWORD PTR [eax],edx
c000b5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5b6:	83 ec 0c             	sub    esp,0xc
c000b5b9:	50                   	push   eax
c000b5ba:	e8 25 ff ff ff       	call   c000b4e4 <UnixFile::~UnixFile()>
c000b5bf:	83 c4 10             	add    esp,0x10
c000b5c2:	90                   	nop
c000b5c3:	83 c4 0c             	add    esp,0xc
c000b5c6:	c3                   	ret    
c000b5c7:	90                   	nop

c000b5c8 <ReservedFilename::~ReservedFilename()>:
c000b5c8:	83 ec 0c             	sub    esp,0xc
c000b5cb:	83 ec 0c             	sub    esp,0xc
c000b5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d2:	e8 cd ff ff ff       	call   c000b5a4 <ReservedFilename::~ReservedFilename()>
c000b5d7:	83 c4 10             	add    esp,0x10
c000b5da:	83 ec 08             	sub    esp,0x8
c000b5dd:	6a 0c                	push   0xc
c000b5df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e3:	e8 a2 13 00 00       	call   c000c98a <operator delete(void*, unsigned long)>
c000b5e8:	83 c4 10             	add    esp,0x10
c000b5eb:	83 c4 0c             	add    esp,0xc
c000b5ee:	c3                   	ret    

c000b5ef <getFromFileDescriptor(int)>:
c000b5ef:	53                   	push   ebx
c000b5f0:	83 ec 08             	sub    esp,0x8
c000b5f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5f7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b5fd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b603:	7f 2c                	jg     c000b631 <getFromFileDescriptor(int)+0x42>
c000b605:	83 ec 0c             	sub    esp,0xc
c000b608:	68 98 62 02 c0       	push   0xc0026298
c000b60d:	e8 5e 5c 01 00       	call   c0021270 <LinkedList<UnixFile>::getFirstElement()>
c000b612:	83 c4 10             	add    esp,0x10
c000b615:	85 c0                	test   eax,eax
c000b617:	75 04                	jne    c000b61d <getFromFileDescriptor(int)+0x2e>
c000b619:	31 c0                	xor    eax,eax
c000b61b:	eb 6e                	jmp    c000b68b <getFromFileDescriptor(int)+0x9c>
c000b61d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b620:	74 69                	je     c000b68b <getFromFileDescriptor(int)+0x9c>
c000b622:	52                   	push   edx
c000b623:	52                   	push   edx
c000b624:	50                   	push   eax
c000b625:	68 98 62 02 c0       	push   0xc0026298
c000b62a:	e8 eb 5c 01 00       	call   c002131a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b62f:	eb e1                	jmp    c000b612 <getFromFileDescriptor(int)+0x23>
c000b631:	a1 8c 62 02 c0       	mov    eax,ds:0xc002628c
c000b636:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b63c:	74 4d                	je     c000b68b <getFromFileDescriptor(int)+0x9c>
c000b63e:	a1 90 62 02 c0       	mov    eax,ds:0xc0026290
c000b643:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b649:	74 40                	je     c000b68b <getFromFileDescriptor(int)+0x9c>
c000b64b:	a1 88 62 02 c0       	mov    eax,ds:0xc0026288
c000b650:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b656:	74 33                	je     c000b68b <getFromFileDescriptor(int)+0x9c>
c000b658:	a1 84 62 02 c0       	mov    eax,ds:0xc0026284
c000b65d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b663:	74 26                	je     c000b68b <getFromFileDescriptor(int)+0x9c>
c000b665:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b66b:	83 f8 08             	cmp    eax,0x8
c000b66e:	77 09                	ja     c000b679 <getFromFileDescriptor(int)+0x8a>
c000b670:	8b 04 85 60 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9da0]
c000b677:	eb 12                	jmp    c000b68b <getFromFileDescriptor(int)+0x9c>
c000b679:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b67f:	83 fb 08             	cmp    ebx,0x8
c000b682:	77 95                	ja     c000b619 <getFromFileDescriptor(int)+0x2a>
c000b684:	8b 04 9d 20 62 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9de0]
c000b68b:	83 c4 08             	add    esp,0x8
c000b68e:	5b                   	pop    ebx
c000b68f:	c3                   	ret    

c000b690 <__static_initialization_and_destruction_0(int, int)>:
c000b690:	83 ec 0c             	sub    esp,0xc
c000b693:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b698:	75 34                	jne    c000b6ce <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b69a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b6a2:	75 2a                	jne    c000b6ce <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b6a4:	83 ec 0c             	sub    esp,0xc
c000b6a7:	68 98 62 02 c0       	push   0xc0026298
c000b6ac:	e8 a9 5a 01 00       	call   c002115a <LinkedList<UnixFile>::LinkedList()>
c000b6b1:	83 c4 10             	add    esp,0x10
c000b6b4:	83 ec 04             	sub    esp,0x4
c000b6b7:	68 f4 53 02 c0       	push   0xc00253f4
c000b6bc:	68 98 62 02 c0       	push   0xc0026298
c000b6c1:	68 58 11 02 c0       	push   0xc0021158
c000b6c6:	e8 39 12 00 00       	call   c000c904 <__cxa_atexit>
c000b6cb:	83 c4 10             	add    esp,0x10
c000b6ce:	90                   	nop
c000b6cf:	83 c4 0c             	add    esp,0xc
c000b6d2:	c3                   	ret    

c000b6d3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b6d3:	83 ec 0c             	sub    esp,0xc
c000b6d6:	83 ec 08             	sub    esp,0x8
c000b6d9:	68 ff ff 00 00       	push   0xffff
c000b6de:	6a 01                	push   0x1
c000b6e0:	e8 ab ff ff ff       	call   c000b690 <__static_initialization_and_destruction_0(int, int)>
c000b6e5:	83 c4 10             	add    esp,0x10
c000b6e8:	83 c4 0c             	add    esp,0xc
c000b6eb:	c3                   	ret    

c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b6ec:	53                   	push   ebx
c000b6ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6f5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b6fb:	89 c8                	mov    eax,ecx
c000b6fd:	d1 e8                	shr    eax,1
c000b6ff:	03 05 c8 55 02 c0    	add    eax,DWORD PTR ds:0xc00255c8
c000b705:	83 e1 01             	and    ecx,0x1
c000b708:	8a 10                	mov    dl,BYTE PTR [eax]
c000b70a:	75 09                	jne    c000b715 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b70c:	83 e2 f0             	and    edx,0xfffffff0
c000b70f:	09 da                	or     edx,ebx
c000b711:	88 10                	mov    BYTE PTR [eax],dl
c000b713:	5b                   	pop    ebx
c000b714:	c3                   	ret    
c000b715:	c1 e3 04             	shl    ebx,0x4
c000b718:	83 e2 0f             	and    edx,0xf
c000b71b:	09 da                	or     edx,ebx
c000b71d:	88 10                	mov    BYTE PTR [eax],dl
c000b71f:	5b                   	pop    ebx
c000b720:	c3                   	ret    

c000b721 <Virt::getPageState(unsigned long)>:
c000b721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b725:	8b 0d c8 55 02 c0    	mov    ecx,DWORD PTR ds:0xc00255c8
c000b72b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b731:	89 d0                	mov    eax,edx
c000b733:	d1 e8                	shr    eax,1
c000b735:	83 e2 01             	and    edx,0x1
c000b738:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b73b:	75 04                	jne    c000b741 <Virt::getPageState(unsigned long)+0x20>
c000b73d:	83 e0 0f             	and    eax,0xf
c000b740:	c3                   	ret    
c000b741:	c0 e8 04             	shr    al,0x4
c000b744:	c3                   	ret    

c000b745 <Virt::allocateKernelVirtualPages(int)>:
c000b745:	55                   	push   ebp
c000b746:	31 ed                	xor    ebp,ebp
c000b748:	57                   	push   edi
c000b749:	56                   	push   esi
c000b74a:	53                   	push   ebx
c000b74b:	31 db                	xor    ebx,ebx
c000b74d:	83 ec 1c             	sub    esp,0x1c
c000b750:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b754:	8b 3d c4 55 02 c0    	mov    edi,DWORD PTR ds:0xc00255c4
c000b75a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b75f:	57                   	push   edi
c000b760:	e8 bc ff ff ff       	call   c000b721 <Virt::getPageState(unsigned long)>
c000b765:	5a                   	pop    edx
c000b766:	84 c0                	test   al,al
c000b768:	75 3a                	jne    c000b7a4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b76a:	85 db                	test   ebx,ebx
c000b76c:	75 02                	jne    c000b770 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b76e:	89 fd                	mov    ebp,edi
c000b770:	43                   	inc    ebx
c000b771:	39 f3                	cmp    ebx,esi
c000b773:	74 5a                	je     c000b7cf <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b775:	47                   	inc    edi
c000b776:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b77c:	76 31                	jbe    c000b7af <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b77e:	c7 05 c4 55 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00255c4,0xc8000
c000b788:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b78d:	75 28                	jne    c000b7b7 <Virt::allocateKernelVirtualPages(int)+0x72>
c000b78f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b794:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b799:	57                   	push   edi
c000b79a:	e8 82 ff ff ff       	call   c000b721 <Virt::getPageState(unsigned long)>
c000b79f:	5a                   	pop    edx
c000b7a0:	84 c0                	test   al,al
c000b7a2:	74 c6                	je     c000b76a <Virt::allocateKernelVirtualPages(int)+0x25>
c000b7a4:	31 db                	xor    ebx,ebx
c000b7a6:	47                   	inc    edi
c000b7a7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b7ad:	77 cf                	ja     c000b77e <Virt::allocateKernelVirtualPages(int)+0x39>
c000b7af:	89 3d c4 55 02 c0    	mov    DWORD PTR ds:0xc00255c4,edi
c000b7b5:	eb a8                	jmp    c000b75f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b7b7:	83 ec 0c             	sub    esp,0xc
c000b7ba:	68 64 2b 02 c0       	push   0xc0022b64
c000b7bf:	e8 47 8b 00 00       	call   c001430b <Krnl::panic(char const*)>
c000b7c4:	8b 3d c4 55 02 c0    	mov    edi,DWORD PTR ds:0xc00255c4
c000b7ca:	83 c4 10             	add    esp,0x10
c000b7cd:	eb 90                	jmp    c000b75f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b7cf:	89 2d c4 55 02 c0    	mov    DWORD PTR ds:0xc00255c4,ebp
c000b7d5:	4b                   	dec    ebx
c000b7d6:	74 5f                	je     c000b837 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b7d8:	85 f6                	test   esi,esi
c000b7da:	74 3d                	je     c000b819 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b7dc:	89 e8                	mov    eax,ebp
c000b7de:	31 db                	xor    ebx,ebx
c000b7e0:	8d 7e ff             	lea    edi,[esi-0x1]
c000b7e3:	eb 14                	jmp    c000b7f9 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b7e5:	6a 01                	push   0x1
c000b7e7:	43                   	inc    ebx
c000b7e8:	50                   	push   eax
c000b7e9:	e8 fe fe ff ff       	call   c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7ee:	58                   	pop    eax
c000b7ef:	39 f3                	cmp    ebx,esi
c000b7f1:	5a                   	pop    edx
c000b7f2:	74 25                	je     c000b819 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b7f4:	a1 c4 55 02 c0       	mov    eax,ds:0xc00255c4
c000b7f9:	8d 50 01             	lea    edx,[eax+0x1]
c000b7fc:	85 db                	test   ebx,ebx
c000b7fe:	89 15 c4 55 02 c0    	mov    DWORD PTR ds:0xc00255c4,edx
c000b804:	74 20                	je     c000b826 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b806:	39 df                	cmp    edi,ebx
c000b808:	75 db                	jne    c000b7e5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b80a:	6a 03                	push   0x3
c000b80c:	43                   	inc    ebx
c000b80d:	50                   	push   eax
c000b80e:	e8 d9 fe ff ff       	call   c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b813:	59                   	pop    ecx
c000b814:	39 f3                	cmp    ebx,esi
c000b816:	58                   	pop    eax
c000b817:	75 db                	jne    c000b7f4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b819:	83 c4 1c             	add    esp,0x1c
c000b81c:	89 e8                	mov    eax,ebp
c000b81e:	5b                   	pop    ebx
c000b81f:	c1 e0 0c             	shl    eax,0xc
c000b822:	5e                   	pop    esi
c000b823:	5f                   	pop    edi
c000b824:	5d                   	pop    ebp
c000b825:	c3                   	ret    
c000b826:	6a 02                	push   0x2
c000b828:	bb 01 00 00 00       	mov    ebx,0x1
c000b82d:	50                   	push   eax
c000b82e:	e8 b9 fe ff ff       	call   c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b833:	58                   	pop    eax
c000b834:	5a                   	pop    edx
c000b835:	eb bd                	jmp    c000b7f4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b837:	6a 04                	push   0x4
c000b839:	8d 45 01             	lea    eax,[ebp+0x1]
c000b83c:	55                   	push   ebp
c000b83d:	a3 c4 55 02 c0       	mov    ds:0xc00255c4,eax
c000b842:	e8 a5 fe ff ff       	call   c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b847:	59                   	pop    ecx
c000b848:	89 e8                	mov    eax,ebp
c000b84a:	5b                   	pop    ebx
c000b84b:	c1 e0 0c             	shl    eax,0xc
c000b84e:	83 c4 1c             	add    esp,0x1c
c000b851:	5b                   	pop    ebx
c000b852:	5e                   	pop    esi
c000b853:	5f                   	pop    edi
c000b854:	5d                   	pop    ebp
c000b855:	c3                   	ret    

c000b856 <Virt::freeSwapfilePage(unsigned long)>:
c000b856:	53                   	push   ebx
c000b857:	8b 15 ac 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262ac
c000b85d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b861:	b8 01 00 00 00       	mov    eax,0x1
c000b866:	89 cb                	mov    ebx,ecx
c000b868:	d3 e0                	shl    eax,cl
c000b86a:	c1 eb 05             	shr    ebx,0x5
c000b86d:	f7 d0                	not    eax
c000b86f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b872:	5b                   	pop    ebx
c000b873:	c3                   	ret    

c000b874 <Virt::swapIDToSector(unsigned long)>:
c000b874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b878:	0f af 05 cc 55 02 c0 	imul   eax,DWORD PTR ds:0xc00255cc
c000b87f:	03 05 d4 55 02 c0    	add    eax,DWORD PTR ds:0xc00255d4
c000b885:	c3                   	ret    

c000b886 <Virt::allocateSwapfilePage()>:
c000b886:	55                   	push   ebp
c000b887:	31 d2                	xor    edx,edx
c000b889:	57                   	push   edi
c000b88a:	56                   	push   esi
c000b88b:	53                   	push   ebx
c000b88c:	83 ec 0c             	sub    esp,0xc
c000b88f:	8b 0d cc 55 02 c0    	mov    ecx,DWORD PTR ds:0xc00255cc
c000b895:	a1 d0 55 02 c0       	mov    eax,ds:0xc00255d0
c000b89a:	f7 f1                	div    ecx
c000b89c:	39 0d d0 55 02 c0    	cmp    DWORD PTR ds:0xc00255d0,ecx
c000b8a2:	72 2d                	jb     c000b8d1 <Virt::allocateSwapfilePage()+0x4b>
c000b8a4:	8b 35 ac 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262ac
c000b8aa:	8b 16                	mov    edx,DWORD PTR [esi]
c000b8ac:	f6 c2 01             	test   dl,0x1
c000b8af:	74 3c                	je     c000b8ed <Virt::allocateSwapfilePage()+0x67>
c000b8b1:	31 c9                	xor    ecx,ecx
c000b8b3:	bf 01 00 00 00       	mov    edi,0x1
c000b8b8:	eb 12                	jmp    c000b8cc <Virt::allocateSwapfilePage()+0x46>
c000b8ba:	89 fd                	mov    ebp,edi
c000b8bc:	89 ca                	mov    edx,ecx
c000b8be:	d3 e5                	shl    ebp,cl
c000b8c0:	c1 ea 05             	shr    edx,0x5
c000b8c3:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b8c6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b8c8:	85 ea                	test   edx,ebp
c000b8ca:	74 2a                	je     c000b8f6 <Virt::allocateSwapfilePage()+0x70>
c000b8cc:	41                   	inc    ecx
c000b8cd:	39 c8                	cmp    eax,ecx
c000b8cf:	77 e9                	ja     c000b8ba <Virt::allocateSwapfilePage()+0x34>
c000b8d1:	83 ec 0c             	sub    esp,0xc
c000b8d4:	68 1c 2d 02 c0       	push   0xc0022d1c
c000b8d9:	e8 2d 8a 00 00       	call   c001430b <Krnl::panic(char const*)>
c000b8de:	83 c4 10             	add    esp,0x10
c000b8e1:	31 c9                	xor    ecx,ecx
c000b8e3:	83 c4 0c             	add    esp,0xc
c000b8e6:	89 c8                	mov    eax,ecx
c000b8e8:	5b                   	pop    ebx
c000b8e9:	5e                   	pop    esi
c000b8ea:	5f                   	pop    edi
c000b8eb:	5d                   	pop    ebp
c000b8ec:	c3                   	ret    
c000b8ed:	89 f3                	mov    ebx,esi
c000b8ef:	bd 01 00 00 00       	mov    ebp,0x1
c000b8f4:	31 c9                	xor    ecx,ecx
c000b8f6:	09 ea                	or     edx,ebp
c000b8f8:	89 c8                	mov    eax,ecx
c000b8fa:	89 13                	mov    DWORD PTR [ebx],edx
c000b8fc:	83 c4 0c             	add    esp,0xc
c000b8ff:	5b                   	pop    ebx
c000b900:	5e                   	pop    esi
c000b901:	5f                   	pop    edi
c000b902:	5d                   	pop    ebp
c000b903:	c3                   	ret    

c000b904 <Virt::virtualMemorySetup()>:
c000b904:	53                   	push   ebx
c000b905:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b90a:	6a 0f                	push   0xf
c000b90c:	53                   	push   ebx
c000b90d:	43                   	inc    ebx
c000b90e:	e8 d9 fd ff ff       	call   c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b913:	58                   	pop    eax
c000b914:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b91a:	5a                   	pop    edx
c000b91b:	75 ed                	jne    c000b90a <Virt::virtualMemorySetup()+0x6>
c000b91d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b922:	6a 00                	push   0x0
c000b924:	53                   	push   ebx
c000b925:	43                   	inc    ebx
c000b926:	e8 c1 fd ff ff       	call   c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b92b:	59                   	pop    ecx
c000b92c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b932:	58                   	pop    eax
c000b933:	75 ed                	jne    c000b922 <Virt::virtualMemorySetup()+0x1e>
c000b935:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b93a:	6a 0f                	push   0xf
c000b93c:	53                   	push   ebx
c000b93d:	43                   	inc    ebx
c000b93e:	e8 a9 fd ff ff       	call   c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b943:	58                   	pop    eax
c000b944:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b94a:	5a                   	pop    edx
c000b94b:	75 ed                	jne    c000b93a <Virt::virtualMemorySetup()+0x36>
c000b94d:	5b                   	pop    ebx
c000b94e:	c3                   	ret    

c000b94f <Virt::setupPageSwapping(int)>:
c000b94f:	53                   	push   ebx
c000b950:	83 ec 0c             	sub    esp,0xc
c000b953:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b957:	a1 48 67 02 c0       	mov    eax,ds:0xc0026748
c000b95c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b962:	8b 10                	mov    edx,DWORD PTR [eax]
c000b964:	53                   	push   ebx
c000b965:	c1 e3 0b             	shl    ebx,0xb
c000b968:	68 33 2d 02 c0       	push   0xc0022d33
c000b96d:	50                   	push   eax
c000b96e:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b971:	89 1d d0 55 02 c0    	mov    DWORD PTR ds:0xc00255d0,ebx
c000b977:	c6 05 d8 55 02 c0 43 	mov    BYTE PTR ds:0xc00255d8,0x43
c000b97e:	c1 eb 08             	shr    ebx,0x8
c000b981:	a3 d4 55 02 c0       	mov    ds:0xc00255d4,eax
c000b986:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b989:	c7 05 cc 55 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00255cc,0x8
c000b993:	e8 2b e0 ff ff       	call   c00099c3 <malloc>
c000b998:	83 c4 0c             	add    esp,0xc
c000b99b:	89 c1                	mov    ecx,eax
c000b99d:	a3 ac 62 02 c0       	mov    ds:0xc00262ac,eax
c000b9a2:	31 d2                	xor    edx,edx
c000b9a4:	a1 d0 55 02 c0       	mov    eax,ds:0xc00255d0
c000b9a9:	f7 35 cc 55 02 c0    	div    DWORD PTR ds:0xc00255cc
c000b9af:	c1 e8 05             	shr    eax,0x5
c000b9b2:	50                   	push   eax
c000b9b3:	6a 00                	push   0x0
c000b9b5:	51                   	push   ecx
c000b9b6:	e8 c9 4c ff ff       	call   c0000684 <memset>
c000b9bb:	83 c4 18             	add    esp,0x18
c000b9be:	5b                   	pop    ebx
c000b9bf:	c3                   	ret    

c000b9c0 <VAS::VAS()>:
c000b9c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9da:	a3 b0 62 02 c0       	mov    ds:0xc00262b0,eax
c000b9df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9e3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b9e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9eb:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b9ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9f2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b9f9:	90                   	nop
c000b9fa:	c3                   	ret    
c000b9fb:	90                   	nop

c000b9fc <VAS::VAS(VAS*)>:
c000b9fc:	83 ec 0c             	sub    esp,0xc
c000b9ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba0e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000ba15:	83 ec 0c             	sub    esp,0xc
c000ba18:	68 84 2b 02 c0       	push   0xc0022b84
c000ba1d:	e8 e9 88 00 00       	call   c001430b <Krnl::panic(char const*)>
c000ba22:	83 c4 10             	add    esp,0x10
c000ba25:	90                   	nop
c000ba26:	83 c4 0c             	add    esp,0xc
c000ba29:	c3                   	ret    

c000ba2a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000ba2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba2e:	89 c2                	mov    edx,eax
c000ba30:	c1 e8 0a             	shr    eax,0xa
c000ba33:	c1 ea 16             	shr    edx,0x16
c000ba36:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000ba3b:	19 c9                	sbb    ecx,ecx
c000ba3d:	c1 e2 0c             	shl    edx,0xc
c000ba40:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000ba46:	25 fc 0f 00 00       	and    eax,0xffc
c000ba4b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000ba52:	01 d0                	add    eax,edx
c000ba54:	c3                   	ret    
c000ba55:	90                   	nop

c000ba56 <VAS::getPageTableEntry(unsigned long)>:
c000ba56:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba5a:	89 ca                	mov    edx,ecx
c000ba5c:	c1 e9 0a             	shr    ecx,0xa
c000ba5f:	c1 ea 16             	shr    edx,0x16
c000ba62:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000ba68:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000ba6e:	c1 e0 0c             	shl    eax,0xc
c000ba71:	8d 04 08             	lea    eax,[eax+ecx*1]
c000ba74:	c3                   	ret    

c000ba75 <Virt::freeKernelVirtualPages(unsigned long)>:
c000ba75:	57                   	push   edi
c000ba76:	56                   	push   esi
c000ba77:	be 01 00 00 00       	mov    esi,0x1
c000ba7c:	53                   	push   ebx
c000ba7d:	83 ec 10             	sub    esp,0x10
c000ba80:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba84:	c1 eb 0c             	shr    ebx,0xc
c000ba87:	eb 3f                	jmp    c000bac8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000ba89:	83 ec 08             	sub    esp,0x8
c000ba8c:	57                   	push   edi
c000ba8d:	ff 35 b0 62 02 c0    	push   DWORD PTR ds:0xc00262b0
c000ba93:	e8 be ff ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c000ba98:	83 c4 10             	add    esp,0x10
c000ba9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba9d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000baa1:	f6 c4 04             	test   ah,0x4
c000baa4:	75 5f                	jne    c000bb05 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000baa6:	80 fa 04             	cmp    dl,0x4
c000baa9:	74 78                	je     c000bb23 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000baab:	80 fa 02             	cmp    dl,0x2
c000baae:	0f 84 88 00 00 00    	je     c000bb3c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bab4:	80 fa 03             	cmp    dl,0x3
c000bab7:	0f 84 ad 00 00 00    	je     c000bb6a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000babd:	fe ca                	dec    dl
c000babf:	0f 84 92 00 00 00    	je     c000bb57 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bac5:	43                   	inc    ebx
c000bac6:	31 f6                	xor    esi,esi
c000bac8:	53                   	push   ebx
c000bac9:	89 df                	mov    edi,ebx
c000bacb:	e8 51 fc ff ff       	call   c000b721 <Virt::getPageState(unsigned long)>
c000bad0:	c1 e7 0c             	shl    edi,0xc
c000bad3:	59                   	pop    ecx
c000bad4:	84 c0                	test   al,al
c000bad6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bada:	75 ad                	jne    c000ba89 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000badc:	83 ec 0c             	sub    esp,0xc
c000badf:	68 4a 2d 02 c0       	push   0xc0022d4a
c000bae4:	e8 22 88 00 00       	call   c001430b <Krnl::panic(char const*)>
c000bae9:	58                   	pop    eax
c000baea:	5a                   	pop    edx
c000baeb:	57                   	push   edi
c000baec:	ff 35 b0 62 02 c0    	push   DWORD PTR ds:0xc00262b0
c000baf2:	e8 5f ff ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	8b 00                	mov    eax,DWORD PTR [eax]
c000bafc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bb00:	f6 c4 04             	test   ah,0x4
c000bb03:	74 c0                	je     c000bac5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb05:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bb09:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb0e:	83 ec 0c             	sub    esp,0xc
c000bb11:	50                   	push   eax
c000bb12:	e8 96 e2 ff ff       	call   c0009dad <Phys::freePage(unsigned long)>
c000bb17:	83 c4 10             	add    esp,0x10
c000bb1a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bb1e:	80 fa 04             	cmp    dl,0x4
c000bb21:	75 88                	jne    c000baab <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bb23:	89 f0                	mov    eax,esi
c000bb25:	84 c0                	test   al,al
c000bb27:	75 47                	jne    c000bb70 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bb29:	c7 44 24 20 a8 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022ba8
c000bb31:	83 c4 10             	add    esp,0x10
c000bb34:	5b                   	pop    ebx
c000bb35:	5e                   	pop    esi
c000bb36:	5f                   	pop    edi
c000bb37:	e9 cf 87 00 00       	jmp    c001430b <Krnl::panic(char const*)>
c000bb3c:	89 f0                	mov    eax,esi
c000bb3e:	84 c0                	test   al,al
c000bb40:	75 15                	jne    c000bb57 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bb42:	83 ec 0c             	sub    esp,0xc
c000bb45:	68 66 2d 02 c0       	push   0xc0022d66
c000bb4a:	e8 bc 87 00 00       	call   c001430b <Krnl::panic(char const*)>
c000bb4f:	83 c4 10             	add    esp,0x10
c000bb52:	e9 6e ff ff ff       	jmp    c000bac5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb57:	83 ec 08             	sub    esp,0x8
c000bb5a:	6a 00                	push   0x0
c000bb5c:	53                   	push   ebx
c000bb5d:	e8 8a fb ff ff       	call   c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb62:	83 c4 10             	add    esp,0x10
c000bb65:	e9 5b ff ff ff       	jmp    c000bac5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb6a:	89 f0                	mov    eax,esi
c000bb6c:	84 c0                	test   al,al
c000bb6e:	75 15                	jne    c000bb85 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bb70:	83 ec 08             	sub    esp,0x8
c000bb73:	6a 00                	push   0x0
c000bb75:	53                   	push   ebx
c000bb76:	e8 71 fb ff ff       	call   c000b6ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb7b:	83 c4 10             	add    esp,0x10
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	5b                   	pop    ebx
c000bb82:	5e                   	pop    esi
c000bb83:	5f                   	pop    edi
c000bb84:	c3                   	ret    
c000bb85:	c7 44 24 20 82 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022d82
c000bb8d:	83 c4 10             	add    esp,0x10
c000bb90:	5b                   	pop    ebx
c000bb91:	5e                   	pop    esi
c000bb92:	5f                   	pop    edi
c000bb93:	e9 73 87 00 00       	jmp    c001430b <Krnl::panic(char const*)>

c000bb98 <VAS::freeAllocatedPages(unsigned long)>:
c000bb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bba0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bba4:	74 09                	je     c000bbaf <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bba6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bbaa:	e9 c6 fe ff ff       	jmp    c000ba75 <Virt::freeKernelVirtualPages(unsigned long)>
c000bbaf:	c7 44 24 04 cc 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bcc
c000bbb7:	e9 af 0e 00 00       	jmp    c000ca6b <Dbg::kprintf(char const*, ...)>

c000bbbc <VAS::virtualToPhysical(unsigned long)>:
c000bbbc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bbc0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bbc4:	e8 8d fe ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c000bbc9:	5a                   	pop    edx
c000bbca:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbcc:	59                   	pop    ecx
c000bbcd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bbd2:	c3                   	ret    
c000bbd3:	90                   	nop

c000bbd4 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bbd4:	55                   	push   ebp
c000bbd5:	57                   	push   edi
c000bbd6:	56                   	push   esi
c000bbd7:	53                   	push   ebx
c000bbd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbdc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bbe0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bbe4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bbe8:	85 db                	test   ebx,ebx
c000bbea:	7e 22                	jle    c000bc0e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bbec:	c1 e3 0c             	shl    ebx,0xc
c000bbef:	01 f3                	add    ebx,esi
c000bbf1:	56                   	push   esi
c000bbf2:	81 c6 00 10 00 00    	add    esi,0x1000
c000bbf8:	55                   	push   ebp
c000bbf9:	e8 58 fe ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c000bbfe:	5a                   	pop    edx
c000bbff:	59                   	pop    ecx
c000bc00:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc02:	21 f9                	and    ecx,edi
c000bc04:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bc08:	39 f3                	cmp    ebx,esi
c000bc0a:	89 08                	mov    DWORD PTR [eax],ecx
c000bc0c:	75 e3                	jne    c000bbf1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bc0e:	5b                   	pop    ebx
c000bc0f:	5e                   	pop    esi
c000bc10:	5f                   	pop    edi
c000bc11:	5d                   	pop    ebp
c000bc12:	c3                   	ret    
c000bc13:	90                   	nop

c000bc14 <VAS::setToWriteCombining(unsigned long, int)>:
c000bc14:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000bc19:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bc1f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bc26:	75 01                	jne    c000bc29 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bc28:	c3                   	ret    
c000bc29:	68 80 00 00 00       	push   0x80
c000bc2e:	6a ff                	push   0xffffffff
c000bc30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc3c:	e8 93 ff ff ff       	call   c000bbd4 <VAS::reflagRange(unsigned long, int, int, int)>
c000bc41:	83 c4 14             	add    esp,0x14
c000bc44:	c3                   	ret    
c000bc45:	90                   	nop

c000bc46 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bc46:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bc4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc4f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bc52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc56:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bc59:	19 c0                	sbb    eax,eax
c000bc5b:	83 ca 03             	or     edx,0x3
c000bc5e:	83 e0 fc             	and    eax,0xfffffffc
c000bc61:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bc68:	0f 20 d8             	mov    eax,cr3
c000bc6b:	0f 22 d8             	mov    cr3,eax
c000bc6e:	c3                   	ret    
c000bc6f:	90                   	nop

c000bc70 <VAS::~VAS()>:
c000bc70:	83 ec 2c             	sub    esp,0x2c
c000bc73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bc7b:	fa                   	cli    
c000bc7c:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000bc81:	40                   	inc    eax
c000bc82:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000bc87:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc91:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bc9b:	6a 01                	push   0x1
c000bc9d:	50                   	push   eax
c000bc9e:	e8 a3 ff ff ff       	call   c000bc46 <VAS::mapOtherVASIn(bool, VAS*)>
c000bca3:	83 c4 0c             	add    esp,0xc
c000bca6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcae:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bcb6:	0f 8f d4 00 00 00    	jg     c000bd90 <VAS::~VAS()+0x120>
c000bcbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bcc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcc7:	c1 e2 02             	shl    edx,0x2
c000bcca:	01 d0                	add    eax,edx
c000bccc:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd6:	83 e0 01             	and    eax,0x1
c000bcd9:	0f 84 a8 00 00 00    	je     c000bd87 <VAS::~VAS()+0x117>
c000bcdf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bce7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bcef:	7f 72                	jg     c000bd63 <VAS::~VAS()+0xf3>
c000bcf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bcf5:	c1 e0 0a             	shl    eax,0xa
c000bcf8:	89 c2                	mov    edx,eax
c000bcfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bcfe:	01 d0                	add    eax,edx
c000bd00:	c1 e0 0c             	shl    eax,0xc
c000bd03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd07:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bd0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd11:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bd17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd1b:	6a 01                	push   0x1
c000bd1d:	50                   	push   eax
c000bd1e:	e8 07 fd ff ff       	call   c000ba2a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bd23:	83 c4 0c             	add    esp,0xc
c000bd26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd38:	25 01 04 00 00       	and    eax,0x401
c000bd3d:	3d 01 04 00 00       	cmp    eax,0x401
c000bd42:	75 19                	jne    c000bd5d <VAS::~VAS()+0xed>
c000bd44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd48:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd4d:	83 ec 0c             	sub    esp,0xc
c000bd50:	50                   	push   eax
c000bd51:	e8 57 e0 ff ff       	call   c0009dad <Phys::freePage(unsigned long)>
c000bd56:	83 c4 10             	add    esp,0x10
c000bd59:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd5d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd61:	eb 84                	jmp    c000bce7 <VAS::~VAS()+0x77>
c000bd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd67:	25 00 04 00 00       	and    eax,0x400
c000bd6c:	74 19                	je     c000bd87 <VAS::~VAS()+0x117>
c000bd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd72:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd77:	83 ec 0c             	sub    esp,0xc
c000bd7a:	50                   	push   eax
c000bd7b:	e8 2d e0 ff ff       	call   c0009dad <Phys::freePage(unsigned long)>
c000bd80:	83 c4 10             	add    esp,0x10
c000bd83:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd87:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bd8b:	e9 1e ff ff ff       	jmp    c000bcae <VAS::~VAS()+0x3e>
c000bd90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd94:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bd97:	83 ec 0c             	sub    esp,0xc
c000bd9a:	50                   	push   eax
c000bd9b:	e8 d5 fc ff ff       	call   c000ba75 <Virt::freeKernelVirtualPages(unsigned long)>
c000bda0:	83 c4 10             	add    esp,0x10
c000bda3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bda7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bdaa:	83 ec 0c             	sub    esp,0xc
c000bdad:	50                   	push   eax
c000bdae:	e8 fa df ff ff       	call   c0009dad <Phys::freePage(unsigned long)>
c000bdb3:	83 c4 10             	add    esp,0x10
c000bdb6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bdba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bdbe:	c1 e0 02             	shl    eax,0x2
c000bdc1:	83 ec 08             	sub    esp,0x8
c000bdc4:	50                   	push   eax
c000bdc5:	68 f0 2b 02 c0       	push   0xc0022bf0
c000bdca:	e8 9c 0c 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000bdcf:	83 c4 10             	add    esp,0x10
c000bdd2:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000bdd7:	48                   	dec    eax
c000bdd8:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000bddd:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000bde2:	85 c0                	test   eax,eax
c000bde4:	75 01                	jne    c000bde7 <VAS::~VAS()+0x177>
c000bde6:	fb                   	sti    
c000bde7:	90                   	nop
c000bde8:	83 c4 2c             	add    esp,0x2c
c000bdeb:	c3                   	ret    

c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bdec:	55                   	push   ebp
c000bded:	57                   	push   edi
c000bdee:	56                   	push   esi
c000bdef:	53                   	push   ebx
c000bdf0:	83 ec 1c             	sub    esp,0x1c
c000bdf3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bdf7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bdfb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000be01:	77 08                	ja     c000be0b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000be03:	0f 20 d8             	mov    eax,cr3
c000be06:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000be09:	75 47                	jne    c000be52 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000be0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be0f:	09 d8                	or     eax,ebx
c000be11:	a9 ff 0f 00 00       	test   eax,0xfff
c000be16:	75 57                	jne    c000be6f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000be18:	89 de                	mov    esi,ebx
c000be1a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be1d:	c1 ee 16             	shr    esi,0x16
c000be20:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000be27:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000be2b:	74 54                	je     c000be81 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000be2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be31:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000be37:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000be3b:	c1 e6 0c             	shl    esi,0xc
c000be3e:	c1 eb 0a             	shr    ebx,0xa
c000be41:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000be47:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000be4a:	83 c4 1c             	add    esp,0x1c
c000be4d:	5b                   	pop    ebx
c000be4e:	5e                   	pop    esi
c000be4f:	5f                   	pop    edi
c000be50:	5d                   	pop    ebp
c000be51:	c3                   	ret    
c000be52:	83 ec 0c             	sub    esp,0xc
c000be55:	68 10 2c 02 c0       	push   0xc0022c10
c000be5a:	e8 0c 0c 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000be5f:	83 c4 10             	add    esp,0x10
c000be62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be66:	09 d8                	or     eax,ebx
c000be68:	a9 ff 0f 00 00       	test   eax,0xfff
c000be6d:	74 a9                	je     c000be18 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be6f:	83 ec 0c             	sub    esp,0xc
c000be72:	68 78 2c 02 c0       	push   0xc0022c78
c000be77:	e8 8f 84 00 00       	call   c001430b <Krnl::panic(char const*)>
c000be7c:	83 c4 10             	add    esp,0x10
c000be7f:	eb 97                	jmp    c000be18 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be85:	e8 a6 df ff ff       	call   c0009e30 <Phys::allocatePage()>
c000be8a:	83 ec 0c             	sub    esp,0xc
c000be8d:	89 c5                	mov    ebp,eax
c000be8f:	8b 0d b0 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262b0
c000be95:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be99:	6a 01                	push   0x1
c000be9b:	e8 a5 f8 ff ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c000bea0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bea7:	6a 01                	push   0x1
c000bea9:	50                   	push   eax
c000beaa:	55                   	push   ebp
c000beab:	81 cd 07 04 00 00    	or     ebp,0x407
c000beb1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000beb5:	51                   	push   ecx
c000beb6:	e8 27 02 00 00       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bebb:	83 c4 1c             	add    esp,0x1c
c000bebe:	68 00 10 00 00       	push   0x1000
c000bec3:	6a 00                	push   0x0
c000bec5:	50                   	push   eax
c000bec6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000beca:	e8 b5 47 ff ff       	call   c0000684 <memset>
c000becf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bed3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bed6:	e8 9a fb ff ff       	call   c000ba75 <Virt::freeKernelVirtualPages(unsigned long)>
c000bedb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bedf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bee2:	83 c4 10             	add    esp,0x10
c000bee5:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000bee8:	e9 40 ff ff ff       	jmp    c000be2d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000beed:	90                   	nop

c000beee <VAS::allocatePages(int, int)>:
c000beee:	55                   	push   ebp
c000beef:	57                   	push   edi
c000bef0:	56                   	push   esi
c000bef1:	53                   	push   ebx
c000bef2:	83 ec 1c             	sub    esp,0x1c
c000bef5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bef9:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000befe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bf04:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bf0a:	83 e0 01             	and    eax,0x1
c000bf0d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000bf11:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bf15:	0f 85 cc 00 00 00    	jne    c000bfe7 <VAS::allocatePages(int, int)+0xf9>
c000bf1b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf22:	85 c0                	test   eax,eax
c000bf24:	0f 84 a1 00 00 00    	je     c000bfcb <VAS::allocatePages(int, int)+0xdd>
c000bf2a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bf2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf32:	c1 e6 0c             	shl    esi,0xc
c000bf35:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bf39:	85 c0                	test   eax,eax
c000bf3b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bf3e:	7e 33                	jle    c000bf73 <VAS::allocatePages(int, int)+0x85>
c000bf40:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bf44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf48:	81 cd 00 04 00 00    	or     ebp,0x400
c000bf4e:	e8 dd de ff ff       	call   c0009e30 <Phys::allocatePage()>
c000bf53:	55                   	push   ebp
c000bf54:	53                   	push   ebx
c000bf55:	50                   	push   eax
c000bf56:	57                   	push   edi
c000bf57:	e8 90 fe ff ff       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf5c:	83 c4 10             	add    esp,0x10
c000bf5f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf64:	74 03                	je     c000bf69 <VAS::allocatePages(int, int)+0x7b>
c000bf66:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf69:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf6f:	39 de                	cmp    esi,ebx
c000bf71:	75 db                	jne    c000bf4e <VAS::allocatePages(int, int)+0x60>
c000bf73:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf78:	75 12                	jne    c000bf8c <VAS::allocatePages(int, int)+0x9e>
c000bf7a:	0f 20 d8             	mov    eax,cr3
c000bf7d:	0f 22 d8             	mov    cr3,eax
c000bf80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf84:	83 c4 1c             	add    esp,0x1c
c000bf87:	5b                   	pop    ebx
c000bf88:	5e                   	pop    esi
c000bf89:	5f                   	pop    edi
c000bf8a:	5d                   	pop    ebp
c000bf8b:	c3                   	ret    
c000bf8c:	c1 ee 0a             	shr    esi,0xa
c000bf8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf93:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bf99:	c1 eb 0a             	shr    ebx,0xa
c000bf9c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bfa2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bfa8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bfae:	39 c3                	cmp    ebx,eax
c000bfb0:	77 ce                	ja     c000bf80 <VAS::allocatePages(int, int)+0x92>
c000bfb2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bfb5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bfbb:	39 d8                	cmp    eax,ebx
c000bfbd:	73 f3                	jae    c000bfb2 <VAS::allocatePages(int, int)+0xc4>
c000bfbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfc3:	83 c4 1c             	add    esp,0x1c
c000bfc6:	5b                   	pop    ebx
c000bfc7:	5e                   	pop    esi
c000bfc8:	5f                   	pop    edi
c000bfc9:	5d                   	pop    ebp
c000bfca:	c3                   	ret    
c000bfcb:	83 ec 0c             	sub    esp,0xc
c000bfce:	68 9c 2c 02 c0       	push   0xc0022c9c
c000bfd3:	e8 33 83 00 00       	call   c001430b <Krnl::panic(char const*)>
c000bfd8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfdf:	83 c4 10             	add    esp,0x10
c000bfe2:	e9 43 ff ff ff       	jmp    c000bf2a <VAS::allocatePages(int, int)+0x3c>
c000bfe7:	83 ec 0c             	sub    esp,0xc
c000bfea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bfee:	e8 52 f7 ff ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c000bff3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bff7:	83 c4 10             	add    esp,0x10
c000bffa:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bfff:	0f 87 9b 00 00 00    	ja     c000c0a0 <VAS::allocatePages(int, int)+0x1b2>
c000c005:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c009:	85 d2                	test   edx,edx
c000c00b:	7e 3c                	jle    c000c049 <VAS::allocatePages(int, int)+0x15b>
c000c00d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c011:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c015:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c019:	c1 e5 0c             	shl    ebp,0xc
c000c01c:	81 ce 00 04 00 00    	or     esi,0x400
c000c022:	01 dd                	add    ebp,ebx
c000c024:	e8 07 de ff ff       	call   c0009e30 <Phys::allocatePage()>
c000c029:	56                   	push   esi
c000c02a:	53                   	push   ebx
c000c02b:	50                   	push   eax
c000c02c:	57                   	push   edi
c000c02d:	e8 ba fd ff ff       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c000c032:	83 c4 10             	add    esp,0x10
c000c035:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c03a:	74 03                	je     c000c03f <VAS::allocatePages(int, int)+0x151>
c000c03c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c03f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c045:	39 dd                	cmp    ebp,ebx
c000c047:	75 db                	jne    c000c024 <VAS::allocatePages(int, int)+0x136>
c000c049:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c04e:	0f 84 26 ff ff ff    	je     c000bf7a <VAS::allocatePages(int, int)+0x8c>
c000c054:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c058:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c05c:	89 d3                	mov    ebx,edx
c000c05e:	c1 e0 0c             	shl    eax,0xc
c000c061:	c1 eb 0a             	shr    ebx,0xa
c000c064:	01 d0                	add    eax,edx
c000c066:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c06c:	c1 e8 0a             	shr    eax,0xa
c000c06f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c075:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c07a:	2d 00 00 40 00       	sub    eax,0x400000
c000c07f:	39 c3                	cmp    ebx,eax
c000c081:	0f 87 f9 fe ff ff    	ja     c000bf80 <VAS::allocatePages(int, int)+0x92>
c000c087:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c08a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c090:	39 d8                	cmp    eax,ebx
c000c092:	73 f3                	jae    c000c087 <VAS::allocatePages(int, int)+0x199>
c000c094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c098:	83 c4 1c             	add    esp,0x1c
c000c09b:	5b                   	pop    ebx
c000c09c:	5e                   	pop    esi
c000c09d:	5f                   	pop    edi
c000c09e:	5d                   	pop    ebp
c000c09f:	c3                   	ret    
c000c0a0:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000c0a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0ab:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c0b2:	0f 84 4d ff ff ff    	je     c000c005 <VAS::allocatePages(int, int)+0x117>
c000c0b8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c0c0:	e9 40 ff ff ff       	jmp    c000c005 <VAS::allocatePages(int, int)+0x117>
c000c0c5:	90                   	nop

c000c0c6 <VAS::setCPUSpecific(unsigned long)>:
c000c0c6:	83 ec 0c             	sub    esp,0xc
c000c0c9:	6a 05                	push   0x5
c000c0cb:	68 00 00 40 c2       	push   0xc2400000
c000c0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d8:	e8 0f fd ff ff       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0dd:	83 c4 1c             	add    esp,0x1c
c000c0e0:	c3                   	ret    
c000c0e1:	90                   	nop

c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c0e2:	55                   	push   ebp
c000c0e3:	57                   	push   edi
c000c0e4:	56                   	push   esi
c000c0e5:	53                   	push   ebx
c000c0e6:	83 ec 1c             	sub    esp,0x1c
c000c0e9:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000c0ee:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c0f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0f8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c0fc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c102:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c106:	83 e0 01             	and    eax,0x1
c000c109:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c10d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c111:	85 c0                	test   eax,eax
c000c113:	7e 39                	jle    c000c14e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c115:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c119:	89 f3                	mov    ebx,esi
c000c11b:	c1 e0 0c             	shl    eax,0xc
c000c11e:	01 f0                	add    eax,esi
c000c120:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c124:	55                   	push   ebp
c000c125:	53                   	push   ebx
c000c126:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c12a:	29 f0                	sub    eax,esi
c000c12c:	01 d8                	add    eax,ebx
c000c12e:	50                   	push   eax
c000c12f:	57                   	push   edi
c000c130:	e8 b7 fc ff ff       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c13d:	74 03                	je     c000c142 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c13f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c142:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c148:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c14c:	75 d6                	jne    c000c124 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c14e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c153:	75 10                	jne    c000c165 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c155:	0f 20 d8             	mov    eax,cr3
c000c158:	0f 22 d8             	mov    cr3,eax
c000c15b:	83 c4 1c             	add    esp,0x1c
c000c15e:	89 f0                	mov    eax,esi
c000c160:	5b                   	pop    ebx
c000c161:	5e                   	pop    esi
c000c162:	5f                   	pop    edi
c000c163:	5d                   	pop    ebp
c000c164:	c3                   	ret    
c000c165:	89 f3                	mov    ebx,esi
c000c167:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c16b:	c1 eb 0a             	shr    ebx,0xa
c000c16e:	c1 e0 0c             	shl    eax,0xc
c000c171:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c177:	01 f0                	add    eax,esi
c000c179:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c17f:	c1 e8 0a             	shr    eax,0xa
c000c182:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c187:	2d 00 00 40 00       	sub    eax,0x400000
c000c18c:	39 c3                	cmp    ebx,eax
c000c18e:	77 cb                	ja     c000c15b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c190:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c193:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c199:	39 d8                	cmp    eax,ebx
c000c19b:	73 f3                	jae    c000c190 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c19d:	83 c4 1c             	add    esp,0x1c
c000c1a0:	89 f0                	mov    eax,esi
c000c1a2:	5b                   	pop    ebx
c000c1a3:	5e                   	pop    esi
c000c1a4:	5f                   	pop    edi
c000c1a5:	5d                   	pop    ebp
c000c1a6:	c3                   	ret    
c000c1a7:	90                   	nop

c000c1a8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c1a8:	55                   	push   ebp
c000c1a9:	57                   	push   edi
c000c1aa:	56                   	push   esi
c000c1ab:	53                   	push   ebx
c000c1ac:	83 ec 1c             	sub    esp,0x1c
c000c1af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c1b7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c1bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c1bf:	a9 ff 0f 00 00       	test   eax,0xfff
c000c1c4:	75 4a                	jne    c000c210 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c1c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c1ca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c1cd:	c1 eb 16             	shr    ebx,0x16
c000c1d0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c1d7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c1db:	74 4d                	je     c000c22a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c1dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1e1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c1e5:	c1 e8 0a             	shr    eax,0xa
c000c1e8:	80 fa 01             	cmp    dl,0x1
c000c1eb:	19 d2                	sbb    edx,edx
c000c1ed:	c1 e3 0c             	shl    ebx,0xc
c000c1f0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c1f4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c1fa:	25 fc 0f 00 00       	and    eax,0xffc
c000c1ff:	01 d8                	add    eax,ebx
c000c201:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c208:	83 c4 1c             	add    esp,0x1c
c000c20b:	5b                   	pop    ebx
c000c20c:	5e                   	pop    esi
c000c20d:	5f                   	pop    edi
c000c20e:	5d                   	pop    ebp
c000c20f:	c3                   	ret    
c000c210:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c214:	83 ec 0c             	sub    esp,0xc
c000c217:	68 c8 2c 02 c0       	push   0xc0022cc8
c000c21c:	e8 ea 80 00 00       	call   c001430b <Krnl::panic(char const*)>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c228:	eb 9c                	jmp    c000c1c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c22a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c22e:	e8 fd db ff ff       	call   c0009e30 <Phys::allocatePage()>
c000c233:	83 ec 0c             	sub    esp,0xc
c000c236:	89 c5                	mov    ebp,eax
c000c238:	8b 0d b0 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262b0
c000c23e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c242:	6a 01                	push   0x1
c000c244:	e8 fc f4 ff ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c000c249:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c250:	6a 01                	push   0x1
c000c252:	50                   	push   eax
c000c253:	55                   	push   ebp
c000c254:	81 cd 07 04 00 00    	or     ebp,0x407
c000c25a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c25e:	51                   	push   ecx
c000c25f:	e8 7e fe ff ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c264:	83 c4 1c             	add    esp,0x1c
c000c267:	68 00 10 00 00       	push   0x1000
c000c26c:	6a 00                	push   0x0
c000c26e:	50                   	push   eax
c000c26f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c273:	e8 0c 44 ff ff       	call   c0000684 <memset>
c000c278:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c27c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c27f:	e8 f1 f7 ff ff       	call   c000ba75 <Virt::freeKernelVirtualPages(unsigned long)>
c000c284:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c28d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c291:	e9 47 ff ff ff       	jmp    c000c1dd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c296 <VAS::VAS(bool)>:
c000c296:	53                   	push   ebx
c000c297:	83 ec 28             	sub    esp,0x28
c000c29a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c29e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c2a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c2ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c2b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2bc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c2c0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c2c3:	e8 68 db ff ff       	call   c0009e30 <Phys::allocatePage()>
c000c2c8:	89 c2                	mov    edx,eax
c000c2ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2ce:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c2d1:	8b 1d b0 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262b0
c000c2d7:	83 ec 0c             	sub    esp,0xc
c000c2da:	6a 01                	push   0x1
c000c2dc:	e8 64 f4 ff ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c000c2e1:	83 c4 10             	add    esp,0x10
c000c2e4:	89 c2                	mov    edx,eax
c000c2e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c2ed:	83 ec 0c             	sub    esp,0xc
c000c2f0:	6a 03                	push   0x3
c000c2f2:	6a 01                	push   0x1
c000c2f4:	52                   	push   edx
c000c2f5:	50                   	push   eax
c000c2f6:	53                   	push   ebx
c000c2f7:	e8 e6 fd ff ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2fc:	83 c4 20             	add    esp,0x20
c000c2ff:	89 c2                	mov    edx,eax
c000c301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c305:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c308:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c310:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c318:	7f 1c                	jg     c000c336 <VAS::VAS(bool)+0xa0>
c000c31a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c31e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c321:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c325:	c1 e2 02             	shl    edx,0x2
c000c328:	01 d0                	add    eax,edx
c000c32a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c330:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c334:	eb da                	jmp    c000c310 <VAS::VAS(bool)+0x7a>
c000c336:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c33e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c346:	7f 7a                	jg     c000c3c2 <VAS::VAS(bool)+0x12c>
c000c348:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c34c:	2d 00 02 00 00       	sub    eax,0x200
c000c351:	c1 e0 0c             	shl    eax,0xc
c000c354:	83 c8 03             	or     eax,0x3
c000c357:	89 c2                	mov    edx,eax
c000c359:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000c35e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c364:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c36a:	83 e0 10             	and    eax,0x10
c000c36d:	84 c0                	test   al,al
c000c36f:	74 07                	je     c000c378 <VAS::VAS(bool)+0xe2>
c000c371:	b8 00 01 00 00       	mov    eax,0x100
c000c376:	eb 05                	jmp    c000c37d <VAS::VAS(bool)+0xe7>
c000c378:	b8 00 00 00 00       	mov    eax,0x0
c000c37d:	09 d0                	or     eax,edx
c000c37f:	89 c1                	mov    ecx,eax
c000c381:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c385:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c388:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c38c:	c1 e2 02             	shl    edx,0x2
c000c38f:	01 d0                	add    eax,edx
c000c391:	89 ca                	mov    edx,ecx
c000c393:	89 10                	mov    DWORD PTR [eax],edx
c000c395:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c399:	2d 40 03 00 00       	sub    eax,0x340
c000c39e:	83 f8 7f             	cmp    eax,0x7f
c000c3a1:	77 16                	ja     c000c3b9 <VAS::VAS(bool)+0x123>
c000c3a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c3ae:	c1 e2 02             	shl    edx,0x2
c000c3b1:	01 d0                	add    eax,edx
c000c3b3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c3b9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c3bd:	e9 7c ff ff ff       	jmp    c000c33e <VAS::VAS(bool)+0xa8>
c000c3c2:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000c3c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3cd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c3d3:	83 e0 10             	and    eax,0x10
c000c3d6:	84 c0                	test   al,al
c000c3d8:	74 07                	je     c000c3e1 <VAS::VAS(bool)+0x14b>
c000c3da:	b8 03 41 00 00       	mov    eax,0x4103
c000c3df:	eb 05                	jmp    c000c3e6 <VAS::VAS(bool)+0x150>
c000c3e1:	b8 03 40 00 00       	mov    eax,0x4003
c000c3e6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c3ea:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c3ed:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c3f3:	89 02                	mov    DWORD PTR [edx],eax
c000c3f5:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000c3fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c400:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c406:	83 ec 08             	sub    esp,0x8
c000c409:	50                   	push   eax
c000c40a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c40e:	e8 b3 fc ff ff       	call   c000c0c6 <VAS::setCPUSpecific(unsigned long)>
c000c413:	83 c4 10             	add    esp,0x10
c000c416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c41a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c41d:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000c422:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c428:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c42e:	83 e0 10             	and    eax,0x10
c000c431:	84 c0                	test   al,al
c000c433:	74 07                	je     c000c43c <VAS::VAS(bool)+0x1a6>
c000c435:	b8 00 01 00 00       	mov    eax,0x100
c000c43a:	eb 05                	jmp    c000c441 <VAS::VAS(bool)+0x1ab>
c000c43c:	b8 00 00 00 00       	mov    eax,0x0
c000c441:	09 c2                	or     edx,eax
c000c443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c447:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c44a:	05 fc 0f 00 00       	add    eax,0xffc
c000c44f:	83 ca 03             	or     edx,0x3
c000c452:	89 10                	mov    DWORD PTR [eax],edx
c000c454:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000c459:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c45f:	83 ec 0c             	sub    esp,0xc
c000c462:	50                   	push   eax
c000c463:	e8 4a 1d 00 00       	call   c000e1b2 <Device::getName()>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	83 ec 08             	sub    esp,0x8
c000c46e:	68 9c 2d 02 c0       	push   0xc0022d9c
c000c473:	50                   	push   eax
c000c474:	e8 53 43 ff ff       	call   c00007cc <strcmp>
c000c479:	83 c4 10             	add    esp,0x10
c000c47c:	85 c0                	test   eax,eax
c000c47e:	0f 94 c0             	sete   al
c000c481:	84 c0                	test   al,al
c000c483:	0f 84 87 00 00 00    	je     c000c510 <VAS::VAS(bool)+0x27a>
c000c489:	fa                   	cli    
c000c48a:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000c48f:	40                   	inc    eax
c000c490:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000c495:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000c49a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4a0:	05 7c 09 00 00       	add    eax,0x97c
c000c4a5:	83 ec 0c             	sub    esp,0xc
c000c4a8:	50                   	push   eax
c000c4a9:	e8 04 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c4b6:	89 c3                	mov    ebx,eax
c000c4b8:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000c4bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4c3:	05 7c 09 00 00       	add    eax,0x97c
c000c4c8:	83 ec 0c             	sub    esp,0xc
c000c4cb:	50                   	push   eax
c000c4cc:	e8 e1 cf ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c4d1:	83 c4 10             	add    esp,0x10
c000c4d4:	83 ec 08             	sub    esp,0x8
c000c4d7:	50                   	push   eax
c000c4d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4dc:	e8 75 f5 ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c000c4e1:	83 c4 10             	add    esp,0x10
c000c4e4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c4eb:	6a 11                	push   0x11
c000c4ed:	53                   	push   ebx
c000c4ee:	50                   	push   eax
c000c4ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4f3:	e8 f4 f8 ff ff       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000c500:	48                   	dec    eax
c000c501:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000c506:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000c50b:	85 c0                	test   eax,eax
c000c50d:	75 01                	jne    c000c510 <VAS::VAS(bool)+0x27a>
c000c50f:	fb                   	sti    
c000c510:	90                   	nop
c000c511:	83 c4 28             	add    esp,0x28
c000c514:	5b                   	pop    ebx
c000c515:	c3                   	ret    

c000c516 <VAS::evict(unsigned long)>:
c000c516:	55                   	push   ebp
c000c517:	57                   	push   edi
c000c518:	56                   	push   esi
c000c519:	53                   	push   ebx
c000c51a:	83 ec 1c             	sub    esp,0x1c
c000c51d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c521:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c525:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c529:	e8 58 f3 ff ff       	call   c000b886 <Virt::allocateSwapfilePage()>
c000c52e:	89 c7                	mov    edi,eax
c000c530:	a1 cc 55 02 c0       	mov    eax,ds:0xc00255cc
c000c535:	85 c0                	test   eax,eax
c000c537:	7e 3d                	jle    c000c576 <VAS::evict(unsigned long)+0x60>
c000c539:	89 ee                	mov    esi,ebp
c000c53b:	31 db                	xor    ebx,ebx
c000c53d:	83 ec 0c             	sub    esp,0xc
c000c540:	57                   	push   edi
c000c541:	e8 2e f3 ff ff       	call   c000b874 <Virt::swapIDToSector(unsigned long)>
c000c546:	89 34 24             	mov    DWORD PTR [esp],esi
c000c549:	01 d8                	add    eax,ebx
c000c54b:	6a 01                	push   0x1
c000c54d:	31 d2                	xor    edx,edx
c000c54f:	43                   	inc    ebx
c000c550:	52                   	push   edx
c000c551:	81 c6 00 02 00 00    	add    esi,0x200
c000c557:	50                   	push   eax
c000c558:	0f be 05 d8 55 02 c0 	movsx  eax,BYTE PTR ds:0xc00255d8
c000c55f:	ff 34 85 3c 66 02 c0 	push   DWORD PTR [eax*4-0x3ffd99c4]
c000c566:	e8 89 3c 00 00       	call   c00101f4 <LogicalDisk::write(unsigned long long, int, void*)>
c000c56b:	83 c4 20             	add    esp,0x20
c000c56e:	39 1d cc 55 02 c0    	cmp    DWORD PTR ds:0xc00255cc,ebx
c000c574:	7f c7                	jg     c000c53d <VAS::evict(unsigned long)+0x27>
c000c576:	83 ec 08             	sub    esp,0x8
c000c579:	c1 e7 0b             	shl    edi,0xb
c000c57c:	55                   	push   ebp
c000c57d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c581:	e8 d0 f4 ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c000c586:	8b 10                	mov    edx,DWORD PTR [eax]
c000c588:	89 d3                	mov    ebx,edx
c000c58a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c590:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c596:	09 d7                	or     edi,edx
c000c598:	89 38                	mov    DWORD PTR [eax],edi
c000c59a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c59d:	ff 05 a8 62 02 c0    	inc    DWORD PTR ds:0xc00262a8
c000c5a3:	e8 05 d8 ff ff       	call   c0009dad <Phys::freePage(unsigned long)>
c000c5a8:	0f 20 d8             	mov    eax,cr3
c000c5ab:	0f 22 d8             	mov    cr3,eax
c000c5ae:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c000c5b4:	55                   	push   ebp
c000c5b5:	53                   	push   ebx
c000c5b6:	68 ec 2c 02 c0       	push   0xc0022cec
c000c5bb:	e8 ab 04 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c5c0:	a1 a4 62 02 c0       	mov    eax,ds:0xc00262a4
c000c5c5:	c7 44 24 50 aa 2d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022daa
c000c5cd:	8d 50 01             	lea    edx,[eax+0x1]
c000c5d0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c5d4:	89 15 a4 62 02 c0    	mov    DWORD PTR ds:0xc00262a4,edx
c000c5da:	83 c4 3c             	add    esp,0x3c
c000c5dd:	5b                   	pop    ebx
c000c5de:	5e                   	pop    esi
c000c5df:	5f                   	pop    edi
c000c5e0:	5d                   	pop    ebp
c000c5e1:	e9 85 04 00 00       	jmp    c000ca6b <Dbg::kprintf(char const*, ...)>

c000c5e6 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c5e6:	55                   	push   ebp
c000c5e7:	57                   	push   edi
c000c5e8:	56                   	push   esi
c000c5e9:	53                   	push   ebx
c000c5ea:	83 ec 14             	sub    esp,0x14
c000c5ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5f1:	68 bb 2d 02 c0       	push   0xc0022dbb
c000c5f6:	e8 70 04 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c5fb:	83 c4 10             	add    esp,0x10
c000c5fe:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c602:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c608:	74 20                	je     c000c62a <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c60a:	83 ec 08             	sub    esp,0x8
c000c60d:	55                   	push   ebp
c000c60e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c612:	e8 3f f4 ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	89 c3                	mov    ebx,eax
c000c61c:	85 c0                	test   eax,eax
c000c61e:	74 0a                	je     c000c62a <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c620:	8b 38                	mov    edi,DWORD PTR [eax]
c000c622:	f7 c7 01 00 00 00    	test   edi,0x1
c000c628:	74 0a                	je     c000c634 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c62a:	31 c0                	xor    eax,eax
c000c62c:	83 c4 0c             	add    esp,0xc
c000c62f:	5b                   	pop    ebx
c000c630:	5e                   	pop    esi
c000c631:	5f                   	pop    edi
c000c632:	5d                   	pop    ebp
c000c633:	c3                   	ret    
c000c634:	e8 f7 d7 ff ff       	call   c0009e30 <Phys::allocatePage()>
c000c639:	c1 ef 0b             	shr    edi,0xb
c000c63c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c63e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c644:	09 c2                	or     edx,eax
c000c646:	81 ca 01 08 00 00    	or     edx,0x801
c000c64c:	89 13                	mov    DWORD PTR [ebx],edx
c000c64e:	8b 0d cc 55 02 c0    	mov    ecx,DWORD PTR ds:0xc00255cc
c000c654:	85 c9                	test   ecx,ecx
c000c656:	7e 3d                	jle    c000c695 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c658:	89 ee                	mov    esi,ebp
c000c65a:	31 db                	xor    ebx,ebx
c000c65c:	83 ec 0c             	sub    esp,0xc
c000c65f:	57                   	push   edi
c000c660:	e8 0f f2 ff ff       	call   c000b874 <Virt::swapIDToSector(unsigned long)>
c000c665:	89 34 24             	mov    DWORD PTR [esp],esi
c000c668:	01 d8                	add    eax,ebx
c000c66a:	6a 01                	push   0x1
c000c66c:	31 d2                	xor    edx,edx
c000c66e:	43                   	inc    ebx
c000c66f:	52                   	push   edx
c000c670:	81 c6 00 02 00 00    	add    esi,0x200
c000c676:	50                   	push   eax
c000c677:	0f be 05 d8 55 02 c0 	movsx  eax,BYTE PTR ds:0xc00255d8
c000c67e:	ff 34 85 3c 66 02 c0 	push   DWORD PTR [eax*4-0x3ffd99c4]
c000c685:	e8 fe 3a 00 00       	call   c0010188 <LogicalDisk::read(unsigned long long, int, void*)>
c000c68a:	83 c4 20             	add    esp,0x20
c000c68d:	39 1d cc 55 02 c0    	cmp    DWORD PTR ds:0xc00255cc,ebx
c000c693:	7f c7                	jg     c000c65c <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c695:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c69a:	48                   	dec    eax
c000c69b:	52                   	push   edx
c000c69c:	a3 a8 62 02 c0       	mov    ds:0xc00262a8,eax
c000c6a1:	50                   	push   eax
c000c6a2:	55                   	push   ebp
c000c6a3:	68 ce 2d 02 c0       	push   0xc0022dce
c000c6a8:	e8 be 03 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c6ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6b0:	e8 a1 f1 ff ff       	call   c000b856 <Virt::freeSwapfilePage(unsigned long)>
c000c6b5:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000c6ba:	83 c4 10             	add    esp,0x10
c000c6bd:	48                   	dec    eax
c000c6be:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000c6c3:	85 c0                	test   eax,eax
c000c6c5:	74 1d                	je     c000c6e4 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c6c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c6cb:	25 ff 0f 00 00       	and    eax,0xfff
c000c6d0:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c6d5:	77 10                	ja     c000c6e7 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c6d7:	0f 20 d8             	mov    eax,cr3
c000c6da:	0f 22 d8             	mov    cr3,eax
c000c6dd:	b0 01                	mov    al,0x1
c000c6df:	e9 48 ff ff ff       	jmp    c000c62c <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c6e4:	fb                   	sti    
c000c6e5:	eb e0                	jmp    c000c6c7 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c6e7:	83 ec 0c             	sub    esp,0xc
c000c6ea:	68 e3 2d 02 c0       	push   0xc0022de3
c000c6ef:	e8 77 03 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c6f4:	83 c4 10             	add    esp,0x10
c000c6f7:	eb de                	jmp    c000c6d7 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c6f9:	90                   	nop

c000c6fa <VAS::scanForEviction()>:
c000c6fa:	57                   	push   edi
c000c6fb:	31 ff                	xor    edi,edi
c000c6fd:	56                   	push   esi
c000c6fe:	53                   	push   ebx
c000c6ff:	83 ec 10             	sub    esp,0x10
c000c702:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c706:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c709:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c70f:	75 0e                	jne    c000c71f <VAS::scanForEviction()+0x25>
c000c711:	89 da                	mov    edx,ebx
c000c713:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c716:	c1 ea 16             	shr    edx,0x16
c000c719:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c71d:	74 4e                	je     c000c76d <VAS::scanForEviction()+0x73>
c000c71f:	53                   	push   ebx
c000c720:	56                   	push   esi
c000c721:	e8 30 f3 ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c000c726:	5a                   	pop    edx
c000c727:	8b 10                	mov    edx,DWORD PTR [eax]
c000c729:	59                   	pop    ecx
c000c72a:	89 d1                	mov    ecx,edx
c000c72c:	81 e1 01 08 00 00    	and    ecx,0x801
c000c732:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c738:	74 3e                	je     c000c778 <VAS::scanForEviction()+0x7e>
c000c73a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c740:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c746:	76 2b                	jbe    c000c773 <VAS::scanForEviction()+0x79>
c000c748:	47                   	inc    edi
c000c749:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c750:	83 ff 03             	cmp    edi,0x3
c000c753:	74 32                	je     c000c787 <VAS::scanForEviction()+0x8d>
c000c755:	31 db                	xor    ebx,ebx
c000c757:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c75d:	75 c0                	jne    c000c71f <VAS::scanForEviction()+0x25>
c000c75f:	89 da                	mov    edx,ebx
c000c761:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c764:	c1 ea 16             	shr    edx,0x16
c000c767:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c76b:	75 b2                	jne    c000c71f <VAS::scanForEviction()+0x25>
c000c76d:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c773:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c776:	eb 91                	jmp    c000c709 <VAS::scanForEviction()+0xf>
c000c778:	f6 c2 20             	test   dl,0x20
c000c77b:	74 13                	je     c000c790 <VAS::scanForEviction()+0x96>
c000c77d:	83 e2 df             	and    edx,0xffffffdf
c000c780:	89 10                	mov    DWORD PTR [eax],edx
c000c782:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c785:	eb b3                	jmp    c000c73a <VAS::scanForEviction()+0x40>
c000c787:	83 c4 10             	add    esp,0x10
c000c78a:	31 c0                	xor    eax,eax
c000c78c:	5b                   	pop    ebx
c000c78d:	5e                   	pop    esi
c000c78e:	5f                   	pop    edi
c000c78f:	c3                   	ret    
c000c790:	83 ec 08             	sub    esp,0x8
c000c793:	89 d0                	mov    eax,edx
c000c795:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c79a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c79e:	53                   	push   ebx
c000c79f:	68 f3 2d 02 c0       	push   0xc0022df3
c000c7a4:	e8 c2 02 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c7a9:	58                   	pop    eax
c000c7aa:	5a                   	pop    edx
c000c7ab:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7ae:	56                   	push   esi
c000c7af:	e8 62 fd ff ff       	call   c000c516 <VAS::evict(unsigned long)>
c000c7b4:	59                   	pop    ecx
c000c7b5:	5b                   	pop    ebx
c000c7b6:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7b9:	68 07 2e 02 c0       	push   0xc0022e07
c000c7be:	e8 a8 02 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c7c3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c7ca:	83 c4 10             	add    esp,0x10
c000c7cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	5b                   	pop    ebx
c000c7d5:	5e                   	pop    esi
c000c7d6:	5f                   	pop    edi
c000c7d7:	c3                   	ret    

c000c7d8 <mapVASFirstTime>:
c000c7d8:	55                   	push   ebp
c000c7d9:	57                   	push   edi
c000c7da:	56                   	push   esi
c000c7db:	53                   	push   ebx
c000c7dc:	83 ec 0c             	sub    esp,0xc
c000c7df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c7e7:	4a                   	dec    edx
c000c7e8:	0f 84 fe 00 00 00    	je     c000c8ec <mapVASFirstTime+0x114>
c000c7ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c7f1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c7f4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c7f9:	c1 e5 15             	shl    ebp,0x15
c000c7fc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c801:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c807:	29 eb                	sub    ebx,ebp
c000c809:	29 ef                	sub    edi,ebp
c000c80b:	83 ec 08             	sub    esp,0x8
c000c80e:	53                   	push   ebx
c000c80f:	68 33 2e 02 c0       	push   0xc0022e33
c000c814:	e8 52 02 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c819:	e8 12 d6 ff ff       	call   c0009e30 <Phys::allocatePage()>
c000c81e:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c825:	6a 01                	push   0x1
c000c827:	53                   	push   ebx
c000c828:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c82e:	50                   	push   eax
c000c82f:	56                   	push   esi
c000c830:	e8 ad f8 ff ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c835:	83 c4 20             	add    esp,0x20
c000c838:	39 fb                	cmp    ebx,edi
c000c83a:	75 cf                	jne    c000c80b <mapVASFirstTime+0x33>
c000c83c:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c841:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c846:	29 eb                	sub    ebx,ebp
c000c848:	29 ef                	sub    edi,ebp
c000c84a:	83 ec 08             	sub    esp,0x8
c000c84d:	53                   	push   ebx
c000c84e:	68 4f 2e 02 c0       	push   0xc0022e4f
c000c853:	e8 13 02 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c858:	58                   	pop    eax
c000c859:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c85d:	5a                   	pop    edx
c000c85e:	19 c0                	sbb    eax,eax
c000c860:	83 e0 04             	and    eax,0x4
c000c863:	05 03 04 00 00       	add    eax,0x403
c000c868:	50                   	push   eax
c000c869:	68 63 2e 02 c0       	push   0xc0022e63
c000c86e:	e8 f8 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c873:	e8 b8 d5 ff ff       	call   c0009e30 <Phys::allocatePage()>
c000c878:	59                   	pop    ecx
c000c879:	89 c5                	mov    ebp,eax
c000c87b:	58                   	pop    eax
c000c87c:	55                   	push   ebp
c000c87d:	68 71 2e 02 c0       	push   0xc0022e71
c000c882:	e8 e4 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c887:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c88b:	19 d2                	sbb    edx,edx
c000c88d:	83 e2 04             	and    edx,0x4
c000c890:	81 c2 03 04 00 00    	add    edx,0x403
c000c896:	89 14 24             	mov    DWORD PTR [esp],edx
c000c899:	6a 01                	push   0x1
c000c89b:	53                   	push   ebx
c000c89c:	55                   	push   ebp
c000c89d:	56                   	push   esi
c000c89e:	e8 3f f8 ff ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8a3:	83 c4 18             	add    esp,0x18
c000c8a6:	53                   	push   ebx
c000c8a7:	56                   	push   esi
c000c8a8:	e8 a9 f1 ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c000c8ad:	5a                   	pop    edx
c000c8ae:	59                   	pop    ecx
c000c8af:	ff 30                	push   DWORD PTR [eax]
c000c8b1:	68 8d 2e 02 c0       	push   0xc0022e8d
c000c8b6:	e8 b0 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c8bb:	0f 20 d8             	mov    eax,cr3
c000c8be:	83 c4 0c             	add    esp,0xc
c000c8c1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c8c7:	56                   	push   esi
c000c8c8:	50                   	push   eax
c000c8c9:	68 98 2e 02 c0       	push   0xc0022e98
c000c8ce:	e8 98 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c8d3:	83 c4 10             	add    esp,0x10
c000c8d6:	39 df                	cmp    edi,ebx
c000c8d8:	0f 85 6c ff ff ff    	jne    c000c84a <mapVASFirstTime+0x72>
c000c8de:	0f 20 d8             	mov    eax,cr3
c000c8e1:	0f 22 d8             	mov    cr3,eax
c000c8e4:	83 c4 0c             	add    esp,0xc
c000c8e7:	5b                   	pop    ebx
c000c8e8:	5e                   	pop    esi
c000c8e9:	5f                   	pop    edi
c000c8ea:	5d                   	pop    ebp
c000c8eb:	c3                   	ret    
c000c8ec:	83 ec 0c             	sub    esp,0xc
c000c8ef:	68 1a 2e 02 c0       	push   0xc0022e1a
c000c8f4:	e8 72 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	83 c4 0c             	add    esp,0xc
c000c8ff:	5b                   	pop    ebx
c000c900:	5e                   	pop    esi
c000c901:	5f                   	pop    edi
c000c902:	5d                   	pop    ebp
c000c903:	c3                   	ret    

c000c904 <__cxa_atexit>:
c000c904:	31 c0                	xor    eax,eax
c000c906:	c3                   	ret    

c000c907 <__cxa_finalize>:
c000c907:	c3                   	ret    

c000c908 <__stack_chk_fail>:
c000c908:	55                   	push   ebp
c000c909:	89 e5                	mov    ebp,esp
c000c90b:	83 ec 14             	sub    esp,0x14
c000c90e:	68 b0 2e 02 c0       	push   0xc0022eb0
c000c913:	e8 53 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c918:	58                   	pop    eax
c000c919:	5a                   	pop    edx
c000c91a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c91d:	68 00 2f 02 c0       	push   0xc0022f00
c000c922:	e8 44 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c927:	59                   	pop    ecx
c000c928:	58                   	pop    eax
c000c929:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c92c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c92f:	68 00 2f 02 c0       	push   0xc0022f00
c000c934:	e8 32 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c939:	5a                   	pop    edx
c000c93a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c93d:	59                   	pop    ecx
c000c93e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c940:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c943:	68 00 2f 02 c0       	push   0xc0022f00
c000c948:	e8 1e 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c94d:	5a                   	pop    edx
c000c94e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c951:	59                   	pop    ecx
c000c952:	8b 00                	mov    eax,DWORD PTR [eax]
c000c954:	8b 00                	mov    eax,DWORD PTR [eax]
c000c956:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c959:	68 00 2f 02 c0       	push   0xc0022f00
c000c95e:	e8 08 01 00 00       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000c963:	c7 04 24 08 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f08
c000c96a:	e8 9c 79 00 00       	call   c001430b <Krnl::panic(char const*)>
c000c96f:	83 c4 10             	add    esp,0x10
c000c972:	c9                   	leave  
c000c973:	c3                   	ret    

c000c974 <__cxa_pure_virtual>:
c000c974:	83 ec 18             	sub    esp,0x18
c000c977:	68 20 2f 02 c0       	push   0xc0022f20
c000c97c:	e8 8a 79 00 00       	call   c001430b <Krnl::panic(char const*)>
c000c981:	83 c4 1c             	add    esp,0x1c
c000c984:	c3                   	ret    

c000c985 <operator new[](unsigned long)>:
c000c985:	e9 39 d0 ff ff       	jmp    c00099c3 <malloc>

c000c98a <operator delete(void*, unsigned long)>:
c000c98a:	e9 54 d0 ff ff       	jmp    c00099e3 <rfree>

c000c98f <operator delete[](void*)>:
c000c98f:	e9 4f d0 ff ff       	jmp    c00099e3 <rfree>

c000c994 <operator delete[](void*, unsigned long)>:
c000c994:	e9 4a d0 ff ff       	jmp    c00099e3 <rfree>

c000c999 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c999:	55                   	push   ebp
c000c99a:	b9 11 00 00 00       	mov    ecx,0x11
c000c99f:	57                   	push   edi
c000c9a0:	56                   	push   esi
c000c9a1:	be 06 2a 02 c0       	mov    esi,0xc0022a06
c000c9a6:	53                   	push   ebx
c000c9a7:	83 ec 20             	sub    esp,0x20
c000c9aa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c9ae:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c9b2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c9b6:	fc                   	cld    
c000c9b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9b9:	89 ee                	mov    esi,ebp
c000c9bb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c9bf:	eb 02                	jmp    c000c9c3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c9c1:	89 c6                	mov    esi,eax
c000c9c3:	31 d2                	xor    edx,edx
c000c9c5:	41                   	inc    ecx
c000c9c6:	89 f0                	mov    eax,esi
c000c9c8:	f7 f3                	div    ebx
c000c9ca:	39 de                	cmp    esi,ebx
c000c9cc:	73 f3                	jae    c000c9c1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c9ce:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c9d1:	eb 02                	jmp    c000c9d5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c9d3:	89 c5                	mov    ebp,eax
c000c9d5:	31 d2                	xor    edx,edx
c000c9d7:	49                   	dec    ecx
c000c9d8:	89 e8                	mov    eax,ebp
c000c9da:	f7 f3                	div    ebx
c000c9dc:	39 dd                	cmp    ebp,ebx
c000c9de:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c9e2:	88 11                	mov    BYTE PTR [ecx],dl
c000c9e4:	73 ed                	jae    c000c9d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c9e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	5b                   	pop    ebx
c000c9ee:	5e                   	pop    esi
c000c9ef:	5f                   	pop    edi
c000c9f0:	5d                   	pop    ebp
c000c9f1:	c3                   	ret    

c000c9f2 <Dbg::logc(char)>:
c000c9f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c9f6:	f6 05 a0 61 02 c0 10 	test   BYTE PTR ds:0xc00261a0,0x10
c000c9fd:	75 12                	jne    c000ca11 <Dbg::logc(char)+0x1f>
c000c9ff:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca04:	ec                   	in     al,dx
c000ca05:	a8 20                	test   al,0x20
c000ca07:	74 fb                	je     c000ca04 <Dbg::logc(char)+0x12>
c000ca09:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca0e:	88 c8                	mov    al,cl
c000ca10:	ee                   	out    dx,al
c000ca11:	c3                   	ret    

c000ca12 <Dbg::logs(char*)>:
c000ca12:	53                   	push   ebx
c000ca13:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca17:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca1a:	84 c0                	test   al,al
c000ca1c:	74 0f                	je     c000ca2d <Dbg::logs(char*)+0x1b>
c000ca1e:	50                   	push   eax
c000ca1f:	43                   	inc    ebx
c000ca20:	e8 cd ff ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000ca25:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca28:	5a                   	pop    edx
c000ca29:	84 c0                	test   al,al
c000ca2b:	75 f1                	jne    c000ca1e <Dbg::logs(char*)+0xc>
c000ca2d:	5b                   	pop    ebx
c000ca2e:	c3                   	ret    

c000ca2f <Dbg::logWriteInt(unsigned int)>:
c000ca2f:	83 ec 10             	sub    esp,0x10
c000ca32:	6a 0a                	push   0xa
c000ca34:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca38:	50                   	push   eax
c000ca39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3d:	e8 57 ff ff ff       	call   c000c999 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca42:	50                   	push   eax
c000ca43:	e8 ca ff ff ff       	call   c000ca12 <Dbg::logs(char*)>
c000ca48:	83 c4 20             	add    esp,0x20
c000ca4b:	c3                   	ret    

c000ca4c <Dbg::logWriteIntBase(unsigned int, int)>:
c000ca4c:	83 ec 10             	sub    esp,0x10
c000ca4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca53:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca57:	50                   	push   eax
c000ca58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca5c:	e8 38 ff ff ff       	call   c000c999 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca61:	50                   	push   eax
c000ca62:	e8 ab ff ff ff       	call   c000ca12 <Dbg::logs(char*)>
c000ca67:	83 c4 20             	add    esp,0x20
c000ca6a:	c3                   	ret    

c000ca6b <Dbg::kprintf(char const*, ...)>:
c000ca6b:	55                   	push   ebp
c000ca6c:	57                   	push   edi
c000ca6d:	56                   	push   esi
c000ca6e:	53                   	push   ebx
c000ca6f:	83 ec 0c             	sub    esp,0xc
c000ca72:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ca76:	f6 05 a0 61 02 c0 10 	test   BYTE PTR ds:0xc00261a0,0x10
c000ca7d:	74 08                	je     c000ca87 <Dbg::kprintf(char const*, ...)+0x1c>
c000ca7f:	83 c4 0c             	add    esp,0xc
c000ca82:	5b                   	pop    ebx
c000ca83:	5e                   	pop    esi
c000ca84:	5f                   	pop    edi
c000ca85:	5d                   	pop    ebp
c000ca86:	c3                   	ret    
c000ca87:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ca8b:	31 db                	xor    ebx,ebx
c000ca8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca91:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ca94:	84 c0                	test   al,al
c000ca96:	74 e7                	je     c000ca7f <Dbg::kprintf(char const*, ...)+0x14>
c000ca98:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca9b:	3c 25                	cmp    al,0x25
c000ca9d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caa0:	75 44                	jne    c000cae6 <Dbg::kprintf(char const*, ...)+0x7b>
c000caa2:	83 c3 02             	add    ebx,0x2
c000caa5:	8a 07                	mov    al,BYTE PTR [edi]
c000caa7:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000caaa:	83 e8 25             	sub    eax,0x25
c000caad:	3c 53                	cmp    al,0x53
c000caaf:	0f 87 c9 00 00 00    	ja     c000cb7e <Dbg::kprintf(char const*, ...)+0x113>
c000cab5:	0f b6 c0             	movzx  eax,al
c000cab8:	ff 24 85 34 2f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd0cc]
c000cabf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cac3:	89 c8                	mov    eax,ecx
c000cac5:	83 c1 04             	add    ecx,0x4
c000cac8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cacc:	ff 30                	push   DWORD PTR [eax]
c000cace:	e8 5c ff ff ff       	call   c000ca2f <Dbg::logWriteInt(unsigned int)>
c000cad3:	5f                   	pop    edi
c000cad4:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cad8:	84 c0                	test   al,al
c000cada:	74 a3                	je     c000ca7f <Dbg::kprintf(char const*, ...)+0x14>
c000cadc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cadf:	3c 25                	cmp    al,0x25
c000cae1:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cae4:	74 bc                	je     c000caa2 <Dbg::kprintf(char const*, ...)+0x37>
c000cae6:	50                   	push   eax
c000cae7:	89 eb                	mov    ebx,ebp
c000cae9:	e8 04 ff ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000caee:	89 fd                	mov    ebp,edi
c000caf0:	58                   	pop    eax
c000caf1:	eb e1                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000caf3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000caf7:	89 c8                	mov    eax,ecx
c000caf9:	83 c1 04             	add    ecx,0x4
c000cafc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb00:	ff 30                	push   DWORD PTR [eax]
c000cb02:	e8 0b ff ff ff       	call   c000ca12 <Dbg::logs(char*)>
c000cb07:	58                   	pop    eax
c000cb08:	eb ca                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb0e:	89 d0                	mov    eax,edx
c000cb10:	83 c2 04             	add    edx,0x4
c000cb13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb17:	ff 30                	push   DWORD PTR [eax]
c000cb19:	e8 11 ff ff ff       	call   c000ca2f <Dbg::logWriteInt(unsigned int)>
c000cb1e:	58                   	pop    eax
c000cb1f:	eb b3                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb25:	89 d0                	mov    eax,edx
c000cb27:	83 c2 04             	add    edx,0x4
c000cb2a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb31:	50                   	push   eax
c000cb32:	e8 bb fe ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000cb37:	58                   	pop    eax
c000cb38:	eb 9a                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb3e:	89 c8                	mov    eax,ecx
c000cb40:	83 c1 04             	add    ecx,0x4
c000cb43:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb47:	6a 10                	push   0x10
c000cb49:	ff 30                	push   DWORD PTR [eax]
c000cb4b:	e8 fc fe ff ff       	call   c000ca4c <Dbg::logWriteIntBase(unsigned int, int)>
c000cb50:	59                   	pop    ecx
c000cb51:	5f                   	pop    edi
c000cb52:	eb 80                	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb58:	89 d0                	mov    eax,edx
c000cb5a:	83 c2 08             	add    edx,0x8
c000cb5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb61:	6a 10                	push   0x10
c000cb63:	ff 30                	push   DWORD PTR [eax]
c000cb65:	e8 e2 fe ff ff       	call   c000ca4c <Dbg::logWriteIntBase(unsigned int, int)>
c000cb6a:	58                   	pop    eax
c000cb6b:	5a                   	pop    edx
c000cb6c:	e9 63 ff ff ff       	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb71:	6a 25                	push   0x25
c000cb73:	e8 7a fe ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000cb78:	58                   	pop    eax
c000cb79:	e9 56 ff ff ff       	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb7e:	6a 25                	push   0x25
c000cb80:	e8 6d fe ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000cb85:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cb88:	50                   	push   eax
c000cb89:	e8 64 fe ff ff       	call   c000c9f2 <Dbg::logc(char)>
c000cb8e:	5a                   	pop    edx
c000cb8f:	59                   	pop    ecx
c000cb90:	e9 3f ff ff ff       	jmp    c000cad4 <Dbg::kprintf(char const*, ...)+0x69>
c000cb95:	90                   	nop

c000cb96 <File::read(unsigned long long, void*, int*)>:
c000cb96:	53                   	push   ebx
c000cb97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cb9f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cba6:	3c 19                	cmp    al,0x19
c000cba8:	77 35                	ja     c000cbdf <File::read(unsigned long long, void*, int*)+0x49>
c000cbaa:	8b 04 85 40 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98c0]
c000cbb1:	85 c0                	test   eax,eax
c000cbb3:	74 2a                	je     c000cbdf <File::read(unsigned long long, void*, int*)+0x49>
c000cbb5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbbb:	85 c0                	test   eax,eax
c000cbbd:	74 20                	je     c000cbdf <File::read(unsigned long long, void*, int*)+0x49>
c000cbbf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cbc3:	74 21                	je     c000cbe6 <File::read(unsigned long long, void*, int*)+0x50>
c000cbc5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cbc7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cbcb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cbd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbd5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cbd9:	5b                   	pop    ebx
c000cbda:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cbdd:	ff e0                	jmp    eax
c000cbdf:	b8 0b 00 00 00       	mov    eax,0xb
c000cbe4:	eb 05                	jmp    c000cbeb <File::read(unsigned long long, void*, int*)+0x55>
c000cbe6:	b8 05 00 00 00       	mov    eax,0x5
c000cbeb:	5b                   	pop    ebx
c000cbec:	c3                   	ret    
c000cbed:	90                   	nop

c000cbee <File::write(unsigned long long, void*, int*)>:
c000cbee:	53                   	push   ebx
c000cbef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbf3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbf7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbfe:	3c 19                	cmp    al,0x19
c000cc00:	77 35                	ja     c000cc37 <File::write(unsigned long long, void*, int*)+0x49>
c000cc02:	8b 04 85 40 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98c0]
c000cc09:	85 c0                	test   eax,eax
c000cc0b:	74 2a                	je     c000cc37 <File::write(unsigned long long, void*, int*)+0x49>
c000cc0d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc13:	85 c0                	test   eax,eax
c000cc15:	74 20                	je     c000cc37 <File::write(unsigned long long, void*, int*)+0x49>
c000cc17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc1b:	74 21                	je     c000cc3e <File::write(unsigned long long, void*, int*)+0x50>
c000cc1d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc23:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc31:	5b                   	pop    ebx
c000cc32:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cc35:	ff e0                	jmp    eax
c000cc37:	b8 0b 00 00 00       	mov    eax,0xb
c000cc3c:	eb 05                	jmp    c000cc43 <File::write(unsigned long long, void*, int*)+0x55>
c000cc3e:	b8 05 00 00 00       	mov    eax,0x5
c000cc43:	5b                   	pop    ebx
c000cc44:	c3                   	ret    
c000cc45:	90                   	nop

c000cc46 <Directory::read(unsigned long long, void*, int*)>:
c000cc46:	53                   	push   ebx
c000cc47:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc4f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc56:	3c 19                	cmp    al,0x19
c000cc58:	77 35                	ja     c000cc8f <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc5a:	8b 04 85 40 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98c0]
c000cc61:	85 c0                	test   eax,eax
c000cc63:	74 2a                	je     c000cc8f <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc65:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc6b:	85 c0                	test   eax,eax
c000cc6d:	74 20                	je     c000cc8f <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc6f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc73:	74 21                	je     c000cc96 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cc75:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc7b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc89:	5b                   	pop    ebx
c000cc8a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cc8d:	ff e0                	jmp    eax
c000cc8f:	b8 0b 00 00 00       	mov    eax,0xb
c000cc94:	eb 05                	jmp    c000cc9b <Directory::read(unsigned long long, void*, int*)+0x55>
c000cc96:	b8 05 00 00 00       	mov    eax,0x5
c000cc9b:	5b                   	pop    ebx
c000cc9c:	c3                   	ret    
c000cc9d:	90                   	nop

c000cc9e <Directory::write(unsigned long long, void*, int*)>:
c000cc9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cca2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cca9:	b8 0b 00 00 00       	mov    eax,0xb
c000ccae:	80 fa 19             	cmp    dl,0x19
c000ccb1:	77 18                	ja     c000cccb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccb3:	8b 14 95 40 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98c0]
c000ccba:	85 d2                	test   edx,edx
c000ccbc:	74 0d                	je     c000cccb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccbe:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ccc5:	19 c0                	sbb    eax,eax
c000ccc7:	83 e0 0a             	and    eax,0xa
c000ccca:	40                   	inc    eax
c000cccb:	c3                   	ret    

c000cccc <File::isAtty()>:
c000cccc:	31 c0                	xor    eax,eax
c000ccce:	c3                   	ret    
c000cccf:	90                   	nop

c000ccd0 <Directory::isAtty()>:
c000ccd0:	31 c0                	xor    eax,eax
c000ccd2:	c3                   	ret    
c000ccd3:	90                   	nop

c000ccd4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ccd4:	b8 0a 00 00 00       	mov    eax,0xa
c000ccd9:	c3                   	ret    

c000ccda <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ccda:	b8 0a 00 00 00       	mov    eax,0xa
c000ccdf:	c3                   	ret    

c000cce0 <Filesystem::allocateSwapfile(char const*, int)>:
c000cce0:	31 c0                	xor    eax,eax
c000cce2:	31 d2                	xor    edx,edx
c000cce4:	c3                   	ret    
c000cce5:	90                   	nop

c000cce6 <File::~File()>:
c000cce6:	83 ec 0c             	sub    esp,0xc
c000cce9:	ba f4 30 02 c0       	mov    edx,0xc00230f4
c000ccee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf2:	89 10                	mov    DWORD PTR [eax],edx
c000ccf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf8:	83 ec 0c             	sub    esp,0xc
c000ccfb:	50                   	push   eax
c000ccfc:	e8 e3 e7 ff ff       	call   c000b4e4 <UnixFile::~UnixFile()>
c000cd01:	83 c4 10             	add    esp,0x10
c000cd04:	90                   	nop
c000cd05:	83 c4 0c             	add    esp,0xc
c000cd08:	c3                   	ret    
c000cd09:	90                   	nop

c000cd0a <File::~File()>:
c000cd0a:	83 ec 0c             	sub    esp,0xc
c000cd0d:	83 ec 0c             	sub    esp,0xc
c000cd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd14:	e8 cd ff ff ff       	call   c000cce6 <File::~File()>
c000cd19:	83 c4 10             	add    esp,0x10
c000cd1c:	83 ec 08             	sub    esp,0x8
c000cd1f:	68 14 01 00 00       	push   0x114
c000cd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd28:	e8 5d fc ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000cd2d:	83 c4 10             	add    esp,0x10
c000cd30:	83 c4 0c             	add    esp,0xc
c000cd33:	c3                   	ret    

c000cd34 <Directory::~Directory()>:
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	ba 10 31 02 c0       	mov    edx,0xc0023110
c000cd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd40:	89 10                	mov    DWORD PTR [eax],edx
c000cd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd46:	83 ec 0c             	sub    esp,0xc
c000cd49:	50                   	push   eax
c000cd4a:	e8 95 e7 ff ff       	call   c000b4e4 <UnixFile::~UnixFile()>
c000cd4f:	83 c4 10             	add    esp,0x10
c000cd52:	90                   	nop
c000cd53:	83 c4 0c             	add    esp,0xc
c000cd56:	c3                   	ret    
c000cd57:	90                   	nop

c000cd58 <Directory::~Directory()>:
c000cd58:	83 ec 0c             	sub    esp,0xc
c000cd5b:	83 ec 0c             	sub    esp,0xc
c000cd5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd62:	e8 cd ff ff ff       	call   c000cd34 <Directory::~Directory()>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	83 ec 08             	sub    esp,0x8
c000cd6d:	68 14 01 00 00       	push   0x114
c000cd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd76:	e8 0f fc ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	83 c4 0c             	add    esp,0xc
c000cd81:	c3                   	ret    

c000cd82 <Filesystem::Filesystem()>:
c000cd82:	ba 8c 30 02 c0       	mov    edx,0xc002308c
c000cd87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd8b:	89 10                	mov    DWORD PTR [eax],edx
c000cd8d:	8b 15 b4 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262b4
c000cd93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd9e:	a3 b4 62 02 c0       	mov    ds:0xc00262b4,eax
c000cda3:	90                   	nop
c000cda4:	c3                   	ret    
c000cda5:	90                   	nop

c000cda6 <Filesystem::~Filesystem()>:
c000cda6:	ba 8c 30 02 c0       	mov    edx,0xc002308c
c000cdab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdaf:	89 10                	mov    DWORD PTR [eax],edx
c000cdb1:	90                   	nop
c000cdb2:	c3                   	ret    
c000cdb3:	90                   	nop

c000cdb4 <Filesystem::~Filesystem()>:
c000cdb4:	83 ec 0c             	sub    esp,0xc
c000cdb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cdbb:	e8 e6 ff ff ff       	call   c000cda6 <Filesystem::~Filesystem()>
c000cdc0:	83 c4 04             	add    esp,0x4
c000cdc3:	83 ec 08             	sub    esp,0x8
c000cdc6:	6a 08                	push   0x8
c000cdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdcc:	e8 b9 fb ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	83 c4 0c             	add    esp,0xc
c000cdd7:	c3                   	ret    

c000cdd8 <Fs::getcwd(Process*, char*, int)>:
c000cdd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cddc:	31 c0                	xor    eax,eax
c000cdde:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cde1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cde5:	7d 15                	jge    c000cdfc <Fs::getcwd(Process*, char*, int)+0x24>
c000cde7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdeb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cdf2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cdf5:	84 c9                	test   cl,cl
c000cdf7:	74 06                	je     c000cdff <Fs::getcwd(Process*, char*, int)+0x27>
c000cdf9:	40                   	inc    eax
c000cdfa:	eb e2                	jmp    c000cdde <Fs::getcwd(Process*, char*, int)+0x6>
c000cdfc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cdff:	31 c0                	xor    eax,eax
c000ce01:	c3                   	ret    

c000ce02 <Fs::initVFS()>:
c000ce02:	83 ec 18             	sub    esp,0x18
c000ce05:	6a 08                	push   0x8
c000ce07:	e8 b7 cb ff ff       	call   c00099c3 <malloc>
c000ce0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce0f:	e8 4c e3 00 00       	call   c001b160 <FAT::FAT()>
c000ce14:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce1b:	e8 a3 cb ff ff       	call   c00099c3 <malloc>
c000ce20:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce23:	e8 96 f5 00 00       	call   c001c3be <ISO9660::ISO9660()>
c000ce28:	83 c4 1c             	add    esp,0x1c
c000ce2b:	c3                   	ret    

c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ce2c:	55                   	push   ebp
c000ce2d:	57                   	push   edi
c000ce2e:	56                   	push   esi
c000ce2f:	53                   	push   ebx
c000ce30:	81 ec 10 04 00 00    	sub    esp,0x410
c000ce36:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ce3d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce44:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce4b:	68 00 04 00 00       	push   0x400
c000ce50:	6a 00                	push   0x0
c000ce52:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ce56:	56                   	push   esi
c000ce57:	e8 28 38 ff ff       	call   c0000684 <memset>
c000ce5c:	83 c4 10             	add    esp,0x10
c000ce5f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ce63:	75 0b                	jne    c000ce70 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ce65:	50                   	push   eax
c000ce66:	50                   	push   eax
c000ce67:	57                   	push   edi
c000ce68:	56                   	push   esi
c000ce69:	e8 d2 38 ff ff       	call   c0000740 <strcpy>
c000ce6e:	eb 41                	jmp    c000ceb1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ce70:	8a 07                	mov    al,BYTE PTR [edi]
c000ce72:	3c 5c                	cmp    al,0x5c
c000ce74:	74 04                	je     c000ce7a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ce76:	3c 2f                	cmp    al,0x2f
c000ce78:	75 18                	jne    c000ce92 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ce7a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ce7d:	3c 60                	cmp    al,0x60
c000ce7f:	7e 03                	jle    c000ce84 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ce81:	83 e8 20             	sub    eax,0x20
c000ce84:	88 04 24             	mov    BYTE PTR [esp],al
c000ce87:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce8e:	50                   	push   eax
c000ce8f:	50                   	push   eax
c000ce90:	eb 18                	jmp    c000ceaa <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ce92:	50                   	push   eax
c000ce93:	50                   	push   eax
c000ce94:	55                   	push   ebp
c000ce95:	56                   	push   esi
c000ce96:	e8 a5 38 ff ff       	call   c0000740 <strcpy>
c000ce9b:	5a                   	pop    edx
c000ce9c:	59                   	pop    ecx
c000ce9d:	68 3a 46 02 c0       	push   0xc002463a
c000cea2:	56                   	push   esi
c000cea3:	e8 d8 39 ff ff       	call   c0000880 <strcat>
c000cea8:	5d                   	pop    ebp
c000cea9:	58                   	pop    eax
c000ceaa:	57                   	push   edi
c000ceab:	56                   	push   esi
c000ceac:	e8 cf 39 ff ff       	call   c0000880 <strcat>
c000ceb1:	83 c4 10             	add    esp,0x10
c000ceb4:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ceb7:	3c 60                	cmp    al,0x60
c000ceb9:	7e 03                	jle    c000cebe <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cebb:	83 e8 20             	sub    eax,0x20
c000cebe:	88 04 24             	mov    BYTE PTR [esp],al
c000cec1:	88 03                	mov    BYTE PTR [ebx],al
c000cec3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ceca:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ced0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ced4:	bf 03 00 00 00       	mov    edi,0x3
c000ced9:	b8 03 00 00 00       	mov    eax,0x3
c000cede:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cee1:	84 d2                	test   dl,dl
c000cee3:	0f 84 91 00 00 00    	je     c000cf7a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cee9:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ceec:	80 fa 5c             	cmp    dl,0x5c
c000ceef:	74 05                	je     c000cef6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cef1:	80 fa 2f             	cmp    dl,0x2f
c000cef4:	75 12                	jne    c000cf08 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cef6:	89 c5                	mov    ebp,eax
c000cef8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cefd:	74 09                	je     c000cf08 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ceff:	40                   	inc    eax
c000cf00:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cf04:	89 cf                	mov    edi,ecx
c000cf06:	eb d6                	jmp    c000cede <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf08:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf0d:	75 5b                	jne    c000cf6a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf0f:	80 fa 2e             	cmp    dl,0x2e
c000cf12:	75 56                	jne    c000cf6a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf14:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf18:	74 19                	je     c000cf33 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf1a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf1f:	74 53                	je     c000cf74 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf21:	89 f9                	mov    ecx,edi
c000cf23:	41                   	inc    ecx
c000cf24:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf27:	80 fa 2f             	cmp    dl,0x2f
c000cf2a:	74 f7                	je     c000cf23 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf2c:	80 fa 5c             	cmp    dl,0x5c
c000cf2f:	74 f2                	je     c000cf23 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf31:	eb d1                	jmp    c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf33:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf38:	74 3a                	je     c000cf74 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf3a:	83 f8 03             	cmp    eax,0x3
c000cf3d:	74 c5                	je     c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf3f:	41                   	inc    ecx
c000cf40:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf43:	80 fa 2f             	cmp    dl,0x2f
c000cf46:	74 f7                	je     c000cf3f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf48:	80 fa 5c             	cmp    dl,0x5c
c000cf4b:	74 f2                	je     c000cf3f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf4d:	48                   	dec    eax
c000cf4e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf52:	75 06                	jne    c000cf5a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf54:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf58:	eb f3                	jmp    c000cf4d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cf5a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf5e:	74 07                	je     c000cf67 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cf60:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf64:	48                   	dec    eax
c000cf65:	eb f3                	jmp    c000cf5a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf67:	40                   	inc    eax
c000cf68:	eb 9a                	jmp    c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf6a:	80 fa 2f             	cmp    dl,0x2f
c000cf6d:	74 95                	je     c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf6f:	80 fa 5c             	cmp    dl,0x5c
c000cf72:	74 90                	je     c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf74:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cf77:	40                   	inc    eax
c000cf78:	eb 8a                	jmp    c000cf04 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf7a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf7e:	83 ec 0c             	sub    esp,0xc
c000cf81:	53                   	push   ebx
c000cf82:	e8 19 37 ff ff       	call   c00006a0 <strlen>
c000cf87:	83 c4 10             	add    esp,0x10
c000cf8a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cf8f:	75 26                	jne    c000cfb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cf91:	83 ec 0c             	sub    esp,0xc
c000cf94:	53                   	push   ebx
c000cf95:	e8 06 37 ff ff       	call   c00006a0 <strlen>
c000cf9a:	83 c4 10             	add    esp,0x10
c000cf9d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cfa2:	74 26                	je     c000cfca <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cfa4:	83 ec 0c             	sub    esp,0xc
c000cfa7:	53                   	push   ebx
c000cfa8:	e8 f3 36 ff ff       	call   c00006a0 <strlen>
c000cfad:	83 c4 10             	add    esp,0x10
c000cfb0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cfb5:	eb c7                	jmp    c000cf7e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cfb7:	83 ec 0c             	sub    esp,0xc
c000cfba:	53                   	push   ebx
c000cfbb:	e8 e0 36 ff ff       	call   c00006a0 <strlen>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cfc8:	74 c7                	je     c000cf91 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cfca:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cfd0:	5b                   	pop    ebx
c000cfd1:	5e                   	pop    esi
c000cfd2:	5f                   	pop    edi
c000cfd3:	5d                   	pop    ebp
c000cfd4:	c3                   	ret    
c000cfd5:	90                   	nop

c000cfd6 <File::File(char const*, Process*)>:
c000cfd6:	83 ec 0c             	sub    esp,0xc
c000cfd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfdd:	83 ec 08             	sub    esp,0x8
c000cfe0:	6a 00                	push   0x0
c000cfe2:	50                   	push   eax
c000cfe3:	e8 1a e3 ff ff       	call   c000b302 <UnixFile::UnixFile(int)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	ba f4 30 02 c0       	mov    edx,0xc00230f4
c000cff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff4:	89 10                	mov    DWORD PTR [eax],edx
c000cff6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cffa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d004:	83 c0 0d             	add    eax,0xd
c000d007:	83 ec 04             	sub    esp,0x4
c000d00a:	52                   	push   edx
c000d00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00f:	50                   	push   eax
c000d010:	e8 17 fe ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c000d015:	83 c4 10             	add    esp,0x10
c000d018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d01c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d01f:	8d 50 bf             	lea    edx,[eax-0x41]
c000d022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d026:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d030:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d034:	90                   	nop
c000d035:	83 c4 0c             	add    esp,0xc
c000d038:	c3                   	ret    
c000d039:	90                   	nop

c000d03a <File::open(FileOpenMode)>:
c000d03a:	53                   	push   ebx
c000d03b:	b8 0b 00 00 00       	mov    eax,0xb
c000d040:	83 ec 08             	sub    esp,0x8
c000d043:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d047:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d04e:	80 fa 19             	cmp    dl,0x19
c000d051:	77 40                	ja     c000d093 <File::open(FileOpenMode)+0x59>
c000d053:	8b 14 95 40 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98c0]
c000d05a:	85 d2                	test   edx,edx
c000d05c:	74 35                	je     c000d093 <File::open(FileOpenMode)+0x59>
c000d05e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d064:	85 d2                	test   edx,edx
c000d066:	74 2b                	je     c000d093 <File::open(FileOpenMode)+0x59>
c000d068:	b8 06 00 00 00       	mov    eax,0x6
c000d06d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d071:	75 20                	jne    c000d093 <File::open(FileOpenMode)+0x59>
c000d073:	8b 02                	mov    eax,DWORD PTR [edx]
c000d075:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07f:	51                   	push   ecx
c000d080:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d083:	51                   	push   ecx
c000d084:	52                   	push   edx
c000d085:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d088:	83 c4 10             	add    esp,0x10
c000d08b:	85 c0                	test   eax,eax
c000d08d:	75 04                	jne    c000d093 <File::open(FileOpenMode)+0x59>
c000d08f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d093:	83 c4 08             	add    esp,0x8
c000d096:	5b                   	pop    ebx
c000d097:	c3                   	ret    

c000d098 <File::close()>:
c000d098:	53                   	push   ebx
c000d099:	b8 0b 00 00 00       	mov    eax,0xb
c000d09e:	83 ec 08             	sub    esp,0x8
c000d0a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d0a5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d0ac:	80 fa 19             	cmp    dl,0x19
c000d0af:	77 41                	ja     c000d0f2 <File::close()+0x5a>
c000d0b1:	8b 1c 95 40 67 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd98c0]
c000d0b8:	85 db                	test   ebx,ebx
c000d0ba:	74 36                	je     c000d0f2 <File::close()+0x5a>
c000d0bc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d0c3:	74 2d                	je     c000d0f2 <File::close()+0x5a>
c000d0c5:	b8 05 00 00 00       	mov    eax,0x5
c000d0ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d0ce:	74 22                	je     c000d0f2 <File::close()+0x5a>
c000d0d0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d0d4:	8b 04 95 40 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd98c0]
c000d0db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d0e1:	53                   	push   ebx
c000d0e2:	53                   	push   ebx
c000d0e3:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d0eb:	50                   	push   eax
c000d0ec:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d0ef:	83 c4 10             	add    esp,0x10
c000d0f2:	83 c4 08             	add    esp,0x8
c000d0f5:	5b                   	pop    ebx
c000d0f6:	c3                   	ret    
c000d0f7:	90                   	nop

c000d0f8 <File::seek(unsigned long long)>:
c000d0f8:	56                   	push   esi
c000d0f9:	53                   	push   ebx
c000d0fa:	b8 0b 00 00 00       	mov    eax,0xb
c000d0ff:	51                   	push   ecx
c000d100:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d104:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d108:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d10f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d113:	80 fa 19             	cmp    dl,0x19
c000d116:	77 31                	ja     c000d149 <File::seek(unsigned long long)+0x51>
c000d118:	8b 14 95 40 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98c0]
c000d11f:	85 d2                	test   edx,edx
c000d121:	74 26                	je     c000d149 <File::seek(unsigned long long)+0x51>
c000d123:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d129:	85 d2                	test   edx,edx
c000d12b:	74 1c                	je     c000d149 <File::seek(unsigned long long)+0x51>
c000d12d:	b8 05 00 00 00       	mov    eax,0x5
c000d132:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d136:	74 11                	je     c000d149 <File::seek(unsigned long long)+0x51>
c000d138:	8b 02                	mov    eax,DWORD PTR [edx]
c000d13a:	53                   	push   ebx
c000d13b:	51                   	push   ecx
c000d13c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d142:	52                   	push   edx
c000d143:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d146:	83 c4 10             	add    esp,0x10
c000d149:	5a                   	pop    edx
c000d14a:	5b                   	pop    ebx
c000d14b:	5e                   	pop    esi
c000d14c:	c3                   	ret    
c000d14d:	90                   	nop

c000d14e <File::tell(unsigned long long*)>:
c000d14e:	83 ec 0c             	sub    esp,0xc
c000d151:	b8 0b 00 00 00       	mov    eax,0xb
c000d156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d15a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d161:	80 fa 19             	cmp    dl,0x19
c000d164:	77 34                	ja     c000d19a <File::tell(unsigned long long*)+0x4c>
c000d166:	8b 14 95 40 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98c0]
c000d16d:	85 d2                	test   edx,edx
c000d16f:	74 29                	je     c000d19a <File::tell(unsigned long long*)+0x4c>
c000d171:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d177:	85 d2                	test   edx,edx
c000d179:	74 1f                	je     c000d19a <File::tell(unsigned long long*)+0x4c>
c000d17b:	b8 05 00 00 00       	mov    eax,0x5
c000d180:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d184:	74 14                	je     c000d19a <File::tell(unsigned long long*)+0x4c>
c000d186:	50                   	push   eax
c000d187:	8b 02                	mov    eax,DWORD PTR [edx]
c000d189:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d18d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d193:	52                   	push   edx
c000d194:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d197:	83 c4 10             	add    esp,0x10
c000d19a:	83 c4 0c             	add    esp,0xc
c000d19d:	c3                   	ret    

c000d19e <File::rewind()>:
c000d19e:	83 ec 10             	sub    esp,0x10
c000d1a1:	6a 00                	push   0x0
c000d1a3:	6a 00                	push   0x0
c000d1a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a9:	e8 4a ff ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c000d1ae:	83 c4 1c             	add    esp,0x1c
c000d1b1:	c3                   	ret    

c000d1b2 <File::unlink()>:
c000d1b2:	83 ec 0c             	sub    esp,0xc
c000d1b5:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1c5:	80 f9 19             	cmp    cl,0x19
c000d1c8:	77 2f                	ja     c000d1f9 <File::unlink()+0x47>
c000d1ca:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c000d1d1:	85 c9                	test   ecx,ecx
c000d1d3:	74 24                	je     c000d1f9 <File::unlink()+0x47>
c000d1d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1db:	85 c9                	test   ecx,ecx
c000d1dd:	74 1a                	je     c000d1f9 <File::unlink()+0x47>
c000d1df:	b8 06 00 00 00       	mov    eax,0x6
c000d1e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1e8:	75 0f                	jne    c000d1f9 <File::unlink()+0x47>
c000d1ea:	83 c2 0d             	add    edx,0xd
c000d1ed:	50                   	push   eax
c000d1ee:	50                   	push   eax
c000d1ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1f1:	52                   	push   edx
c000d1f2:	51                   	push   ecx
c000d1f3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	83 c4 0c             	add    esp,0xc
c000d1fc:	c3                   	ret    
c000d1fd:	90                   	nop

c000d1fe <File::rename(char const*)>:
c000d1fe:	83 ec 0c             	sub    esp,0xc
c000d201:	b8 0b 00 00 00       	mov    eax,0xb
c000d206:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d20a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d211:	80 f9 19             	cmp    cl,0x19
c000d214:	77 32                	ja     c000d248 <File::rename(char const*)+0x4a>
c000d216:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c000d21d:	85 c9                	test   ecx,ecx
c000d21f:	74 27                	je     c000d248 <File::rename(char const*)+0x4a>
c000d221:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d227:	85 c9                	test   ecx,ecx
c000d229:	74 1d                	je     c000d248 <File::rename(char const*)+0x4a>
c000d22b:	b8 06 00 00 00       	mov    eax,0x6
c000d230:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d234:	75 12                	jne    c000d248 <File::rename(char const*)+0x4a>
c000d236:	83 c2 0d             	add    edx,0xd
c000d239:	50                   	push   eax
c000d23a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d23c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d240:	52                   	push   edx
c000d241:	51                   	push   ecx
c000d242:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d245:	83 c4 10             	add    esp,0x10
c000d248:	83 c4 0c             	add    esp,0xc
c000d24b:	c3                   	ret    

c000d24c <File::chfatattr(unsigned char, unsigned char)>:
c000d24c:	57                   	push   edi
c000d24d:	b8 0b 00 00 00       	mov    eax,0xb
c000d252:	56                   	push   esi
c000d253:	53                   	push   ebx
c000d254:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d258:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d25c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d263:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d267:	80 f9 19             	cmp    cl,0x19
c000d26a:	77 37                	ja     c000d2a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d26c:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c000d273:	85 c9                	test   ecx,ecx
c000d275:	74 2c                	je     c000d2a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d277:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d27d:	85 c9                	test   ecx,ecx
c000d27f:	74 22                	je     c000d2a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d281:	b8 06 00 00 00       	mov    eax,0x6
c000d286:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d28a:	75 17                	jne    c000d2a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d28c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d28e:	89 f0                	mov    eax,esi
c000d290:	83 c2 0d             	add    edx,0xd
c000d293:	0f b6 f0             	movzx  esi,al
c000d296:	0f b6 db             	movzx  ebx,bl
c000d299:	56                   	push   esi
c000d29a:	53                   	push   ebx
c000d29b:	52                   	push   edx
c000d29c:	51                   	push   ecx
c000d29d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d2a0:	83 c4 10             	add    esp,0x10
c000d2a3:	5b                   	pop    ebx
c000d2a4:	5e                   	pop    esi
c000d2a5:	5f                   	pop    edi
c000d2a6:	c3                   	ret    
c000d2a7:	90                   	nop

c000d2a8 <File::exists()>:
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	31 c0                	xor    eax,eax
c000d2ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2b1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2b8:	80 f9 19             	cmp    cl,0x19
c000d2bb:	77 24                	ja     c000d2e1 <File::exists()+0x39>
c000d2bd:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c000d2c4:	85 c9                	test   ecx,ecx
c000d2c6:	74 19                	je     c000d2e1 <File::exists()+0x39>
c000d2c8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2ce:	85 c9                	test   ecx,ecx
c000d2d0:	74 0f                	je     c000d2e1 <File::exists()+0x39>
c000d2d2:	83 c2 0d             	add    edx,0xd
c000d2d5:	50                   	push   eax
c000d2d6:	50                   	push   eax
c000d2d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2d9:	52                   	push   edx
c000d2da:	51                   	push   ecx
c000d2db:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d2de:	83 c4 10             	add    esp,0x10
c000d2e1:	83 c4 0c             	add    esp,0xc
c000d2e4:	c3                   	ret    
c000d2e5:	90                   	nop

c000d2e6 <File::stat(unsigned long long*, bool*)>:
c000d2e6:	56                   	push   esi
c000d2e7:	53                   	push   ebx
c000d2e8:	50                   	push   eax
c000d2e9:	b8 0b 00 00 00       	mov    eax,0xb
c000d2ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d2f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d301:	80 f9 19             	cmp    cl,0x19
c000d304:	77 3d                	ja     c000d343 <File::stat(unsigned long long*, bool*)+0x5d>
c000d306:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c000d30d:	85 c9                	test   ecx,ecx
c000d30f:	74 32                	je     c000d343 <File::stat(unsigned long long*, bool*)+0x5d>
c000d311:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d317:	85 c9                	test   ecx,ecx
c000d319:	74 28                	je     c000d343 <File::stat(unsigned long long*, bool*)+0x5d>
c000d31b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d31d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d321:	74 13                	je     c000d336 <File::stat(unsigned long long*, bool*)+0x50>
c000d323:	83 ec 04             	sub    esp,0x4
c000d326:	56                   	push   esi
c000d327:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d32d:	51                   	push   ecx
c000d32e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d331:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d334:	eb 0a                	jmp    c000d340 <File::stat(unsigned long long*, bool*)+0x5a>
c000d336:	53                   	push   ebx
c000d337:	83 c2 0d             	add    edx,0xd
c000d33a:	56                   	push   esi
c000d33b:	52                   	push   edx
c000d33c:	51                   	push   ecx
c000d33d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d340:	83 c4 10             	add    esp,0x10
c000d343:	5a                   	pop    edx
c000d344:	5b                   	pop    ebx
c000d345:	5e                   	pop    esi
c000d346:	c3                   	ret    

c000d347 <Fs::setcwd(Process*, char*)>:
c000d347:	55                   	push   ebp
c000d348:	57                   	push   edi
c000d349:	56                   	push   esi
c000d34a:	53                   	push   ebx
c000d34b:	81 ec 20 02 00 00    	sub    esp,0x220
c000d351:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d358:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d35e:	57                   	push   edi
c000d35f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d366:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d36a:	56                   	push   esi
c000d36b:	e8 bc fa ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c000d370:	89 34 24             	mov    DWORD PTR [esp],esi
c000d373:	e8 28 33 ff ff       	call   c00006a0 <strlen>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	83 f8 02             	cmp    eax,0x2
c000d37e:	77 17                	ja     c000d397 <Fs::setcwd(Process*, char*)+0x50>
c000d380:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d385:	83 e8 41             	sub    eax,0x41
c000d388:	83 f8 19             	cmp    eax,0x19
c000d38b:	76 24                	jbe    c000d3b1 <Fs::setcwd(Process*, char*)+0x6a>
c000d38d:	b8 03 00 00 00       	mov    eax,0x3
c000d392:	e9 e0 00 00 00       	jmp    c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d397:	83 ec 0c             	sub    esp,0xc
c000d39a:	56                   	push   esi
c000d39b:	e8 00 33 ff ff       	call   c00006a0 <strlen>
c000d3a0:	83 c4 10             	add    esp,0x10
c000d3a3:	83 f8 03             	cmp    eax,0x3
c000d3a6:	75 34                	jne    c000d3dc <Fs::setcwd(Process*, char*)+0x95>
c000d3a8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d3ad:	75 2d                	jne    c000d3dc <Fs::setcwd(Process*, char*)+0x95>
c000d3af:	eb cf                	jmp    c000d380 <Fs::setcwd(Process*, char*)+0x39>
c000d3b1:	8b 14 85 40 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd98c0]
c000d3b8:	b8 05 00 00 00       	mov    eax,0x5
c000d3bd:	85 d2                	test   edx,edx
c000d3bf:	0f 84 b2 00 00 00    	je     c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d3c5:	b8 06 00 00 00       	mov    eax,0x6
c000d3ca:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d3d1:	0f 85 92 00 00 00    	jne    c000d469 <Fs::setcwd(Process*, char*)+0x122>
c000d3d7:	e9 9b 00 00 00       	jmp    c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d3dc:	83 ec 0c             	sub    esp,0xc
c000d3df:	68 14 01 00 00       	push   0x114
c000d3e4:	e8 da c5 ff ff       	call   c00099c3 <malloc>
c000d3e9:	83 c4 0c             	add    esp,0xc
c000d3ec:	89 c3                	mov    ebx,eax
c000d3ee:	55                   	push   ebp
c000d3ef:	56                   	push   esi
c000d3f0:	50                   	push   eax
c000d3f1:	e8 e0 fb ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c000d3f6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d3fb:	83 c4 0c             	add    esp,0xc
c000d3fe:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d402:	50                   	push   eax
c000d403:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d407:	50                   	push   eax
c000d408:	53                   	push   ebx
c000d409:	e8 d8 fe ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c000d40e:	83 c4 10             	add    esp,0x10
c000d411:	83 f8 02             	cmp    eax,0x2
c000d414:	74 04                	je     c000d41a <Fs::setcwd(Process*, char*)+0xd3>
c000d416:	85 c0                	test   eax,eax
c000d418:	74 1c                	je     c000d436 <Fs::setcwd(Process*, char*)+0xef>
c000d41a:	b8 01 00 00 00       	mov    eax,0x1
c000d41f:	85 db                	test   ebx,ebx
c000d421:	74 54                	je     c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d423:	83 ec 0c             	sub    esp,0xc
c000d426:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d428:	53                   	push   ebx
c000d429:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	b8 01 00 00 00       	mov    eax,0x1
c000d434:	eb 41                	jmp    c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d436:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d43b:	75 1c                	jne    c000d459 <Fs::setcwd(Process*, char*)+0x112>
c000d43d:	b8 02 00 00 00       	mov    eax,0x2
c000d442:	85 db                	test   ebx,ebx
c000d444:	74 31                	je     c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d446:	83 ec 0c             	sub    esp,0xc
c000d449:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d44b:	53                   	push   ebx
c000d44c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d44f:	83 c4 10             	add    esp,0x10
c000d452:	b8 02 00 00 00       	mov    eax,0x2
c000d457:	eb 1e                	jmp    c000d477 <Fs::setcwd(Process*, char*)+0x130>
c000d459:	85 db                	test   ebx,ebx
c000d45b:	74 0c                	je     c000d469 <Fs::setcwd(Process*, char*)+0x122>
c000d45d:	83 ec 0c             	sub    esp,0xc
c000d460:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d462:	53                   	push   ebx
c000d463:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	50                   	push   eax
c000d46a:	50                   	push   eax
c000d46b:	56                   	push   esi
c000d46c:	57                   	push   edi
c000d46d:	e8 ce 32 ff ff       	call   c0000740 <strcpy>
c000d472:	83 c4 10             	add    esp,0x10
c000d475:	31 c0                	xor    eax,eax
c000d477:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d47d:	5b                   	pop    ebx
c000d47e:	5e                   	pop    esi
c000d47f:	5f                   	pop    edi
c000d480:	5d                   	pop    ebp
c000d481:	c3                   	ret    

c000d482 <Directory::Directory(char const*, Process*)>:
c000d482:	83 ec 0c             	sub    esp,0xc
c000d485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d489:	83 ec 08             	sub    esp,0x8
c000d48c:	6a 00                	push   0x0
c000d48e:	50                   	push   eax
c000d48f:	e8 6e de ff ff       	call   c000b302 <UnixFile::UnixFile(int)>
c000d494:	83 c4 10             	add    esp,0x10
c000d497:	ba 10 31 02 c0       	mov    edx,0xc0023110
c000d49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a0:	89 10                	mov    DWORD PTR [eax],edx
c000d4a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d4a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b0:	83 c0 0d             	add    eax,0xd
c000d4b3:	83 ec 04             	sub    esp,0x4
c000d4b6:	52                   	push   edx
c000d4b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4bb:	50                   	push   eax
c000d4bc:	e8 6b f9 ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c000d4c1:	83 c4 10             	add    esp,0x10
c000d4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4c8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d4cb:	8d 50 bf             	lea    edx,[eax-0x41]
c000d4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4d2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4dc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d4e0:	90                   	nop
c000d4e1:	83 c4 0c             	add    esp,0xc
c000d4e4:	c3                   	ret    
c000d4e5:	90                   	nop

c000d4e6 <Directory::open()>:
c000d4e6:	53                   	push   ebx
c000d4e7:	b8 0b 00 00 00       	mov    eax,0xb
c000d4ec:	83 ec 08             	sub    esp,0x8
c000d4ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4f3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d4fa:	80 fa 19             	cmp    dl,0x19
c000d4fd:	77 3d                	ja     c000d53c <Directory::open()+0x56>
c000d4ff:	8b 14 95 40 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98c0]
c000d506:	85 d2                	test   edx,edx
c000d508:	74 32                	je     c000d53c <Directory::open()+0x56>
c000d50a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d510:	85 d2                	test   edx,edx
c000d512:	74 28                	je     c000d53c <Directory::open()+0x56>
c000d514:	b8 06 00 00 00       	mov    eax,0x6
c000d519:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d51d:	75 1d                	jne    c000d53c <Directory::open()+0x56>
c000d51f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d525:	50                   	push   eax
c000d526:	8b 02                	mov    eax,DWORD PTR [edx]
c000d528:	51                   	push   ecx
c000d529:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d52c:	51                   	push   ecx
c000d52d:	52                   	push   edx
c000d52e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d531:	83 c4 10             	add    esp,0x10
c000d534:	85 c0                	test   eax,eax
c000d536:	75 04                	jne    c000d53c <Directory::open()+0x56>
c000d538:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d53c:	83 c4 08             	add    esp,0x8
c000d53f:	5b                   	pop    ebx
c000d540:	c3                   	ret    
c000d541:	90                   	nop

c000d542 <Directory::close()>:
c000d542:	53                   	push   ebx
c000d543:	b8 0b 00 00 00       	mov    eax,0xb
c000d548:	83 ec 08             	sub    esp,0x8
c000d54b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d54f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d556:	80 fa 19             	cmp    dl,0x19
c000d559:	77 41                	ja     c000d59c <Directory::close()+0x5a>
c000d55b:	8b 1c 95 40 67 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd98c0]
c000d562:	85 db                	test   ebx,ebx
c000d564:	74 36                	je     c000d59c <Directory::close()+0x5a>
c000d566:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d56d:	74 2d                	je     c000d59c <Directory::close()+0x5a>
c000d56f:	b8 05 00 00 00       	mov    eax,0x5
c000d574:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d578:	74 22                	je     c000d59c <Directory::close()+0x5a>
c000d57a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d57e:	8b 04 95 40 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd98c0]
c000d585:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d58b:	53                   	push   ebx
c000d58c:	53                   	push   ebx
c000d58d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d58f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d595:	50                   	push   eax
c000d596:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d599:	83 c4 10             	add    esp,0x10
c000d59c:	83 c4 08             	add    esp,0x8
c000d59f:	5b                   	pop    ebx
c000d5a0:	c3                   	ret    
c000d5a1:	90                   	nop

c000d5a2 <Directory::unlink()>:
c000d5a2:	83 ec 0c             	sub    esp,0xc
c000d5a5:	b8 0b 00 00 00       	mov    eax,0xb
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5b5:	80 f9 19             	cmp    cl,0x19
c000d5b8:	77 2f                	ja     c000d5e9 <Directory::unlink()+0x47>
c000d5ba:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c000d5c1:	85 c9                	test   ecx,ecx
c000d5c3:	74 24                	je     c000d5e9 <Directory::unlink()+0x47>
c000d5c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5cb:	85 c9                	test   ecx,ecx
c000d5cd:	74 1a                	je     c000d5e9 <Directory::unlink()+0x47>
c000d5cf:	b8 06 00 00 00       	mov    eax,0x6
c000d5d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5d8:	75 0f                	jne    c000d5e9 <Directory::unlink()+0x47>
c000d5da:	83 c2 0d             	add    edx,0xd
c000d5dd:	50                   	push   eax
c000d5de:	50                   	push   eax
c000d5df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5e1:	52                   	push   edx
c000d5e2:	51                   	push   ecx
c000d5e3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d5e6:	83 c4 10             	add    esp,0x10
c000d5e9:	83 c4 0c             	add    esp,0xc
c000d5ec:	c3                   	ret    
c000d5ed:	90                   	nop

c000d5ee <Directory::rename(char const*)>:
c000d5ee:	83 ec 0c             	sub    esp,0xc
c000d5f1:	b8 0b 00 00 00       	mov    eax,0xb
c000d5f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d601:	80 f9 19             	cmp    cl,0x19
c000d604:	77 32                	ja     c000d638 <Directory::rename(char const*)+0x4a>
c000d606:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c000d60d:	85 c9                	test   ecx,ecx
c000d60f:	74 27                	je     c000d638 <Directory::rename(char const*)+0x4a>
c000d611:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d617:	85 c9                	test   ecx,ecx
c000d619:	74 1d                	je     c000d638 <Directory::rename(char const*)+0x4a>
c000d61b:	b8 06 00 00 00       	mov    eax,0x6
c000d620:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d624:	75 12                	jne    c000d638 <Directory::rename(char const*)+0x4a>
c000d626:	83 c2 0d             	add    edx,0xd
c000d629:	50                   	push   eax
c000d62a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d62c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d630:	52                   	push   edx
c000d631:	51                   	push   ecx
c000d632:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d635:	83 c4 10             	add    esp,0x10
c000d638:	83 c4 0c             	add    esp,0xc
c000d63b:	c3                   	ret    

c000d63c <Directory::exists()>:
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	31 c0                	xor    eax,eax
c000d641:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d645:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d64c:	80 f9 19             	cmp    cl,0x19
c000d64f:	77 24                	ja     c000d675 <Directory::exists()+0x39>
c000d651:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c000d658:	85 c9                	test   ecx,ecx
c000d65a:	74 19                	je     c000d675 <Directory::exists()+0x39>
c000d65c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d662:	85 c9                	test   ecx,ecx
c000d664:	74 0f                	je     c000d675 <Directory::exists()+0x39>
c000d666:	83 c2 0d             	add    edx,0xd
c000d669:	50                   	push   eax
c000d66a:	50                   	push   eax
c000d66b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d66d:	52                   	push   edx
c000d66e:	51                   	push   ecx
c000d66f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d672:	83 c4 10             	add    esp,0x10
c000d675:	83 c4 0c             	add    esp,0xc
c000d678:	c3                   	ret    
c000d679:	90                   	nop

c000d67a <Directory::read(dirent*)>:
c000d67a:	83 ec 1c             	sub    esp,0x1c
c000d67d:	b8 0b 00 00 00       	mov    eax,0xb
c000d682:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d686:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d68d:	80 fa 19             	cmp    dl,0x19
c000d690:	77 30                	ja     c000d6c2 <Directory::read(dirent*)+0x48>
c000d692:	8b 14 95 40 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98c0]
c000d699:	85 d2                	test   edx,edx
c000d69b:	74 25                	je     c000d6c2 <Directory::read(dirent*)+0x48>
c000d69d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6a4:	74 1c                	je     c000d6c2 <Directory::read(dirent*)+0x48>
c000d6a6:	83 ec 0c             	sub    esp,0xc
c000d6a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6ab:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d6af:	52                   	push   edx
c000d6b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6b4:	6a 00                	push   0x0
c000d6b6:	68 10 01 00 00       	push   0x110
c000d6bb:	51                   	push   ecx
c000d6bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d6bf:	83 c4 20             	add    esp,0x20
c000d6c2:	83 c4 1c             	add    esp,0x1c
c000d6c5:	c3                   	ret    

c000d6c6 <Directory::create()>:
c000d6c6:	83 ec 0c             	sub    esp,0xc
c000d6c9:	b8 0b 00 00 00       	mov    eax,0xb
c000d6ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d6d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6d9:	80 f9 19             	cmp    cl,0x19
c000d6dc:	77 2f                	ja     c000d70d <Directory::create()+0x47>
c000d6de:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c000d6e5:	85 c9                	test   ecx,ecx
c000d6e7:	74 24                	je     c000d70d <Directory::create()+0x47>
c000d6e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6ef:	85 c9                	test   ecx,ecx
c000d6f1:	74 1a                	je     c000d70d <Directory::create()+0x47>
c000d6f3:	b8 06 00 00 00       	mov    eax,0x6
c000d6f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d6fc:	75 0f                	jne    c000d70d <Directory::create()+0x47>
c000d6fe:	83 c2 0d             	add    edx,0xd
c000d701:	50                   	push   eax
c000d702:	50                   	push   eax
c000d703:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d705:	52                   	push   edx
c000d706:	51                   	push   ecx
c000d707:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d70a:	83 c4 10             	add    esp,0x10
c000d70d:	83 c4 0c             	add    esp,0xc
c000d710:	c3                   	ret    
c000d711:	90                   	nop

c000d712 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d712:	b8 0a 00 00 00       	mov    eax,0xa
c000d717:	c3                   	ret    

c000d718 <Bus::Bus(char const*)>:
c000d718:	83 ec 0c             	sub    esp,0xc
c000d71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71f:	83 ec 08             	sub    esp,0x8
c000d722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d726:	50                   	push   eax
c000d727:	e8 8a 09 00 00       	call   c000e0b6 <Device::Device(char const*)>
c000d72c:	83 c4 10             	add    esp,0x10
c000d72f:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c000d734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d738:	89 10                	mov    DWORD PTR [eax],edx
c000d73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d748:	90                   	nop
c000d749:	83 c4 0c             	add    esp,0xc
c000d74c:	c3                   	ret    
c000d74d:	90                   	nop
c000d74e:	66 90                	xchg   ax,ax

c000d750 <Bus::~Bus()>:
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c000d758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75c:	89 10                	mov    DWORD PTR [eax],edx
c000d75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d762:	83 ec 0c             	sub    esp,0xc
c000d765:	50                   	push   eax
c000d766:	e8 15 06 00 00       	call   c000dd80 <Device::~Device()>
c000d76b:	83 c4 10             	add    esp,0x10
c000d76e:	90                   	nop
c000d76f:	83 c4 0c             	add    esp,0xc
c000d772:	c3                   	ret    
c000d773:	90                   	nop

c000d774 <Bus::~Bus()>:
c000d774:	83 ec 0c             	sub    esp,0xc
c000d777:	83 ec 0c             	sub    esp,0xc
c000d77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77e:	e8 cd ff ff ff       	call   c000d750 <Bus::~Bus()>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	83 ec 08             	sub    esp,0x8
c000d789:	68 58 01 00 00       	push   0x158
c000d78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d792:	e8 f3 f1 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000d797:	83 c4 10             	add    esp,0x10
c000d79a:	83 c4 0c             	add    esp,0xc
c000d79d:	c3                   	ret    
c000d79e:	66 90                	xchg   ax,ax

c000d7a0 <Buzzer::Buzzer(char const*)>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a7:	83 ec 08             	sub    esp,0x8
c000d7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ae:	50                   	push   eax
c000d7af:	e8 02 09 00 00       	call   c000e0b6 <Device::Device(char const*)>
c000d7b4:	83 c4 10             	add    esp,0x10
c000d7b7:	ba 58 31 02 c0       	mov    edx,0xc0023158
c000d7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c0:	89 10                	mov    DWORD PTR [eax],edx
c000d7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d7de:	90                   	nop
c000d7df:	83 c4 0c             	add    esp,0xc
c000d7e2:	c3                   	ret    
c000d7e3:	90                   	nop

c000d7e4 <Buzzer::~Buzzer()>:
c000d7e4:	83 ec 0c             	sub    esp,0xc
c000d7e7:	ba 58 31 02 c0       	mov    edx,0xc0023158
c000d7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f0:	89 10                	mov    DWORD PTR [eax],edx
c000d7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f6:	83 ec 0c             	sub    esp,0xc
c000d7f9:	50                   	push   eax
c000d7fa:	e8 81 05 00 00       	call   c000dd80 <Device::~Device()>
c000d7ff:	83 c4 10             	add    esp,0x10
c000d802:	90                   	nop
c000d803:	83 c4 0c             	add    esp,0xc
c000d806:	c3                   	ret    
c000d807:	90                   	nop

c000d808 <Buzzer::~Buzzer()>:
c000d808:	83 ec 0c             	sub    esp,0xc
c000d80b:	83 ec 0c             	sub    esp,0xc
c000d80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d812:	e8 cd ff ff ff       	call   c000d7e4 <Buzzer::~Buzzer()>
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	83 ec 08             	sub    esp,0x8
c000d81d:	68 5c 01 00 00       	push   0x15c
c000d822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d826:	e8 5f f1 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000d82b:	83 c4 10             	add    esp,0x10
c000d82e:	83 c4 0c             	add    esp,0xc
c000d831:	c3                   	ret    

c000d832 <Buzzer::stop()>:
c000d832:	83 ec 14             	sub    esp,0x14
c000d835:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d839:	8b 10                	mov    edx,DWORD PTR [eax]
c000d83b:	6a 00                	push   0x0
c000d83d:	50                   	push   eax
c000d83e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d841:	83 c4 1c             	add    esp,0x1c
c000d844:	c3                   	ret    

c000d845 <beepThread(void*)>:
c000d845:	53                   	push   ebx
c000d846:	83 ec 08             	sub    esp,0x8
c000d849:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000d84e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d852:	48                   	dec    eax
c000d853:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000d858:	75 02                	jne    c000d85c <beepThread(void*)+0x17>
c000d85a:	fb                   	sti    
c000d85b:	90                   	nop
c000d85c:	83 ec 0c             	sub    esp,0xc
c000d85f:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d866:	50                   	push   eax
c000d867:	e8 68 a9 00 00       	call   c00181d4 <milliTenthSleep(unsigned int)>
c000d86c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d86f:	e8 be ff ff ff       	call   c000d832 <Buzzer::stop()>
c000d874:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d87c:	83 c4 18             	add    esp,0x18
c000d87f:	5b                   	pop    ebx
c000d880:	e9 4f a8 00 00       	jmp    c00180d4 <blockTask(TaskState)>
c000d885:	90                   	nop

c000d886 <Buzzer::beep(int, int, bool)>:
c000d886:	57                   	push   edi
c000d887:	56                   	push   esi
c000d888:	53                   	push   ebx
c000d889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d88d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d891:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d895:	50                   	push   eax
c000d896:	50                   	push   eax
c000d897:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d89d:	53                   	push   ebx
c000d89e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8a1:	83 c4 10             	add    esp,0x10
c000d8a4:	89 f8                	mov    eax,edi
c000d8a6:	84 c0                	test   al,al
c000d8a8:	74 1e                	je     c000d8c8 <Buzzer::beep(int, int, bool)+0x42>
c000d8aa:	83 ec 0c             	sub    esp,0xc
c000d8ad:	6b f6 0a             	imul   esi,esi,0xa
c000d8b0:	56                   	push   esi
c000d8b1:	e8 1e a9 00 00       	call   c00181d4 <milliTenthSleep(unsigned int)>
c000d8b6:	83 c4 10             	add    esp,0x10
c000d8b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d8bd:	5b                   	pop    ebx
c000d8be:	5e                   	pop    esi
c000d8bf:	5f                   	pop    edi
c000d8c0:	e9 6d ff ff ff       	jmp    c000d832 <Buzzer::stop()>
c000d8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c8:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d8ce:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000d8d3:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d8db:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d8df:	c7 44 24 14 45 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d845
c000d8e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8eb:	5b                   	pop    ebx
c000d8ec:	5e                   	pop    esi
c000d8ed:	5f                   	pop    edi
c000d8ee:	e9 cd a3 00 00       	jmp    c0017cc0 <Process::createThread(void (*)(void*), void*, int)>
c000d8f3:	90                   	nop

c000d8f4 <User::loadClockSettings(int)>:
c000d8f4:	53                   	push   ebx
c000d8f5:	83 ec 14             	sub    esp,0x14
c000d8f8:	68 14 01 00 00       	push   0x114
c000d8fd:	e8 c1 c0 ff ff       	call   c00099c3 <malloc>
c000d902:	83 c4 0c             	add    esp,0xc
c000d905:	89 c3                	mov    ebx,eax
c000d907:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c000d90d:	68 80 31 02 c0       	push   0xc0023180
c000d912:	50                   	push   eax
c000d913:	e8 be f6 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c000d918:	58                   	pop    eax
c000d919:	5a                   	pop    edx
c000d91a:	6a 01                	push   0x1
c000d91c:	53                   	push   ebx
c000d91d:	e8 18 f7 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c000d922:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d925:	e8 6e f7 ff ff       	call   c000d098 <File::close()>
c000d92a:	83 c4 10             	add    esp,0x10
c000d92d:	85 db                	test   ebx,ebx
c000d92f:	74 0f                	je     c000d940 <User::loadClockSettings(int)+0x4c>
c000d931:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d933:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d937:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d93a:	83 c4 08             	add    esp,0x8
c000d93d:	5b                   	pop    ebx
c000d93e:	ff e0                	jmp    eax
c000d940:	83 c4 08             	add    esp,0x8
c000d943:	5b                   	pop    ebx
c000d944:	c3                   	ret    
c000d945:	90                   	nop

c000d946 <Clock::Clock(char const*)>:
c000d946:	83 ec 0c             	sub    esp,0xc
c000d949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d94d:	83 ec 08             	sub    esp,0x8
c000d950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d954:	50                   	push   eax
c000d955:	e8 5c 07 00 00       	call   c000e0b6 <Device::Device(char const*)>
c000d95a:	83 c4 10             	add    esp,0x10
c000d95d:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c000d962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d966:	89 10                	mov    DWORD PTR [eax],edx
c000d968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d976:	90                   	nop
c000d977:	83 c4 0c             	add    esp,0xc
c000d97a:	c3                   	ret    
c000d97b:	90                   	nop

c000d97c <Clock::~Clock()>:
c000d97c:	83 ec 0c             	sub    esp,0xc
c000d97f:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c000d984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d988:	89 10                	mov    DWORD PTR [eax],edx
c000d98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d98e:	83 ec 0c             	sub    esp,0xc
c000d991:	50                   	push   eax
c000d992:	e8 e9 03 00 00       	call   c000dd80 <Device::~Device()>
c000d997:	83 c4 10             	add    esp,0x10
c000d99a:	90                   	nop
c000d99b:	83 c4 0c             	add    esp,0xc
c000d99e:	c3                   	ret    
c000d99f:	90                   	nop

c000d9a0 <Clock::~Clock()>:
c000d9a0:	83 ec 0c             	sub    esp,0xc
c000d9a3:	83 ec 0c             	sub    esp,0xc
c000d9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9aa:	e8 cd ff ff ff       	call   c000d97c <Clock::~Clock()>
c000d9af:	83 c4 10             	add    esp,0x10
c000d9b2:	83 ec 08             	sub    esp,0x8
c000d9b5:	68 58 01 00 00       	push   0x158
c000d9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9be:	e8 c7 ef ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	83 c4 0c             	add    esp,0xc
c000d9c9:	c3                   	ret    

c000d9ca <Clock::timeInSecondsLocal()>:
c000d9ca:	53                   	push   ebx
c000d9cb:	83 ec 14             	sub    esp,0x14
c000d9ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9d4:	50                   	push   eax
c000d9d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9d8:	0f b6 0d bc 62 02 c0 	movzx  ecx,BYTE PTR ds:0xc00262bc
c000d9df:	03 0d c0 62 02 c0    	add    ecx,DWORD PTR ds:0xc00262c0
c000d9e5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d9eb:	89 cb                	mov    ebx,ecx
c000d9ed:	c1 fb 1f             	sar    ebx,0x1f
c000d9f0:	01 c8                	add    eax,ecx
c000d9f2:	11 da                	adc    edx,ebx
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	31 c9                	xor    ecx,ecx
c000d9f9:	80 3d bd 62 02 c0 00 	cmp    BYTE PTR ds:0xc00262bd,0x0
c000da00:	74 05                	je     c000da07 <Clock::timeInSecondsLocal()+0x3d>
c000da02:	b9 08 07 00 00       	mov    ecx,0x708
c000da07:	31 db                	xor    ebx,ebx
c000da09:	01 c8                	add    eax,ecx
c000da0b:	11 da                	adc    edx,ebx
c000da0d:	83 c4 08             	add    esp,0x8
c000da10:	5b                   	pop    ebx
c000da11:	c3                   	ret    

c000da12 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da12:	57                   	push   edi
c000da13:	56                   	push   esi
c000da14:	53                   	push   ebx
c000da15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da19:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da23:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da26:	0f b6 05 bc 62 02 c0 	movzx  eax,BYTE PTR ds:0xc00262bc
c000da2d:	03 05 c0 62 02 c0    	add    eax,DWORD PTR ds:0xc00262c0
c000da33:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000da39:	99                   	cdq    
c000da3a:	29 c6                	sub    esi,eax
c000da3c:	19 d7                	sbb    edi,edx
c000da3e:	89 f0                	mov    eax,esi
c000da40:	89 fa                	mov    edx,edi
c000da42:	31 f6                	xor    esi,esi
c000da44:	80 3d bd 62 02 c0 00 	cmp    BYTE PTR ds:0xc00262bd,0x0
c000da4b:	74 05                	je     c000da52 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000da4d:	be 08 07 00 00       	mov    esi,0x708
c000da52:	31 ff                	xor    edi,edi
c000da54:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000da58:	29 f0                	sub    eax,esi
c000da5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da5e:	19 fa                	sbb    edx,edi
c000da60:	89 d8                	mov    eax,ebx
c000da62:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da66:	5b                   	pop    ebx
c000da67:	5e                   	pop    esi
c000da68:	5f                   	pop    edi
c000da69:	ff e0                	jmp    eax

c000da6b <datetimeToSeconds(datetime_t)>:
c000da6b:	55                   	push   ebp
c000da6c:	57                   	push   edi
c000da6d:	56                   	push   esi
c000da6e:	53                   	push   ebx
c000da6f:	83 ec 14             	sub    esp,0x14
c000da72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da76:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da7a:	89 d3                	mov    ebx,edx
c000da7c:	0f b6 c6             	movzx  eax,dh
c000da7f:	c1 eb 10             	shr    ebx,0x10
c000da82:	48                   	dec    eax
c000da83:	66 81 eb 6c 07       	sub    bx,0x76c
c000da88:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000da8c:	0f b6 f5             	movzx  esi,ch
c000da8f:	89 cf                	mov    edi,ecx
c000da91:	6b f6 3c             	imul   esi,esi,0x3c
c000da94:	c1 ef 10             	shr    edi,0x10
c000da97:	0f b6 c9             	movzx  ecx,cl
c000da9a:	89 f8                	mov    eax,edi
c000da9c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000daa2:	0f b6 f8             	movzx  edi,al
c000daa5:	0f b6 d2             	movzx  edx,dl
c000daa8:	01 fe                	add    esi,edi
c000daaa:	01 f1                	add    ecx,esi
c000daac:	0f b7 f3             	movzx  esi,bx
c000daaf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dab3:	c1 f9 1f             	sar    ecx,0x1f
c000dab6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dabb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dabf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dac4:	8b 0c 8d e0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce20]
c000dacb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dacf:	76 29                	jbe    c000dafa <datetimeToSeconds(datetime_t)+0x8f>
c000dad1:	f6 c3 03             	test   bl,0x3
c000dad4:	75 24                	jne    c000dafa <datetimeToSeconds(datetime_t)+0x8f>
c000dad6:	31 d2                	xor    edx,edx
c000dad8:	bf 64 00 00 00       	mov    edi,0x64
c000dadd:	89 d8                	mov    eax,ebx
c000dadf:	66 f7 f7             	div    di
c000dae2:	66 85 d2             	test   dx,dx
c000dae5:	75 12                	jne    c000daf9 <datetimeToSeconds(datetime_t)+0x8e>
c000dae7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000daed:	bf 90 01 00 00       	mov    edi,0x190
c000daf2:	99                   	cdq    
c000daf3:	f7 ff                	idiv   edi
c000daf5:	85 d2                	test   edx,edx
c000daf7:	75 01                	jne    c000dafa <datetimeToSeconds(datetime_t)+0x8f>
c000daf9:	41                   	inc    ecx
c000dafa:	66 83 fb 46          	cmp    bx,0x46
c000dafe:	76 45                	jbe    c000db45 <datetimeToSeconds(datetime_t)+0xda>
c000db00:	bb 46 00 00 00       	mov    ebx,0x46
c000db05:	bf 64 00 00 00       	mov    edi,0x64
c000db0a:	bd 90 01 00 00       	mov    ebp,0x190
c000db0f:	b8 6d 01 00 00       	mov    eax,0x16d
c000db14:	f6 c3 03             	test   bl,0x3
c000db17:	75 23                	jne    c000db3c <datetimeToSeconds(datetime_t)+0xd1>
c000db19:	89 d8                	mov    eax,ebx
c000db1b:	99                   	cdq    
c000db1c:	f7 ff                	idiv   edi
c000db1e:	b8 6e 01 00 00       	mov    eax,0x16e
c000db23:	85 d2                	test   edx,edx
c000db25:	75 15                	jne    c000db3c <datetimeToSeconds(datetime_t)+0xd1>
c000db27:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000db2d:	99                   	cdq    
c000db2e:	f7 fd                	idiv   ebp
c000db30:	83 fa 01             	cmp    edx,0x1
c000db33:	19 c0                	sbb    eax,eax
c000db35:	f7 d0                	not    eax
c000db37:	05 6e 01 00 00       	add    eax,0x16e
c000db3c:	01 c1                	add    ecx,eax
c000db3e:	43                   	inc    ebx
c000db3f:	39 f3                	cmp    ebx,esi
c000db41:	7c cc                	jl     c000db0f <datetimeToSeconds(datetime_t)+0xa4>
c000db43:	eb 35                	jmp    c000db7a <datetimeToSeconds(datetime_t)+0x10f>
c000db45:	74 33                	je     c000db7a <datetimeToSeconds(datetime_t)+0x10f>
c000db47:	b8 45 00 00 00       	mov    eax,0x45
c000db4c:	89 c2                	mov    edx,eax
c000db4e:	83 e2 03             	and    edx,0x3
c000db51:	39 f0                	cmp    eax,esi
c000db53:	7e 0f                	jle    c000db64 <datetimeToSeconds(datetime_t)+0xf9>
c000db55:	83 fa 01             	cmp    edx,0x1
c000db58:	19 d2                	sbb    edx,edx
c000db5a:	48                   	dec    eax
c000db5b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000db62:	eb e8                	jmp    c000db4c <datetimeToSeconds(datetime_t)+0xe1>
c000db64:	b8 6d 01 00 00       	mov    eax,0x16d
c000db69:	85 d2                	test   edx,edx
c000db6b:	75 0b                	jne    c000db78 <datetimeToSeconds(datetime_t)+0x10d>
c000db6d:	66 83 fb 01          	cmp    bx,0x1
c000db71:	19 c0                	sbb    eax,eax
c000db73:	05 6e 01 00 00       	add    eax,0x16e
c000db78:	29 c1                	sub    ecx,eax
c000db7a:	b8 80 51 01 00       	mov    eax,0x15180
c000db7f:	f7 e9                	imul   ecx
c000db81:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db85:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db89:	83 c4 14             	add    esp,0x14
c000db8c:	5b                   	pop    ebx
c000db8d:	5e                   	pop    esi
c000db8e:	5f                   	pop    edi
c000db8f:	5d                   	pop    ebp
c000db90:	c3                   	ret    
c000db91:	90                   	nop

c000db92 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000db92:	57                   	push   edi
c000db93:	56                   	push   esi
c000db94:	53                   	push   ebx
c000db95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db99:	8b 06                	mov    eax,DWORD PTR [esi]
c000db9b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000db9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dba2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dba6:	e8 c0 fe ff ff       	call   c000da6b <datetimeToSeconds(datetime_t)>
c000dbab:	59                   	pop    ecx
c000dbac:	0f b6 0d bc 62 02 c0 	movzx  ecx,BYTE PTR ds:0xc00262bc
c000dbb3:	5b                   	pop    ebx
c000dbb4:	03 0d c0 62 02 c0    	add    ecx,DWORD PTR ds:0xc00262c0
c000dbba:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dbc0:	89 cb                	mov    ebx,ecx
c000dbc2:	c1 fb 1f             	sar    ebx,0x1f
c000dbc5:	29 c8                	sub    eax,ecx
c000dbc7:	19 da                	sbb    edx,ebx
c000dbc9:	31 c9                	xor    ecx,ecx
c000dbcb:	80 3d bd 62 02 c0 00 	cmp    BYTE PTR ds:0xc00262bd,0x0
c000dbd2:	74 05                	je     c000dbd9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dbd4:	b9 08 07 00 00       	mov    ecx,0x708
c000dbd9:	31 db                	xor    ebx,ebx
c000dbdb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dbdf:	29 c8                	sub    eax,ecx
c000dbe1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbe5:	19 da                	sbb    edx,ebx
c000dbe7:	89 f8                	mov    eax,edi
c000dbe9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbed:	5b                   	pop    ebx
c000dbee:	5e                   	pop    esi
c000dbef:	5f                   	pop    edi
c000dbf0:	ff e0                	jmp    eax

c000dbf2 <secondsToDatetime(unsigned long long)>:
c000dbf2:	55                   	push   ebp
c000dbf3:	57                   	push   edi
c000dbf4:	56                   	push   esi
c000dbf5:	53                   	push   ebx
c000dbf6:	83 ec 1c             	sub    esp,0x1c
c000dbf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dbfd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc01:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc05:	6a 00                	push   0x0
c000dc07:	68 80 51 01 00       	push   0x15180
c000dc0c:	55                   	push   ebp
c000dc0d:	57                   	push   edi
c000dc0e:	e8 a1 32 01 00       	call   c0020eb4 <__udivdi3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc20:	6a 00                	push   0x0
c000dc22:	68 80 51 01 00       	push   0x15180
c000dc27:	55                   	push   ebp
c000dc28:	57                   	push   edi
c000dc29:	bf 10 0e 00 00       	mov    edi,0xe10
c000dc2e:	e8 81 33 01 00       	call   c0020fb4 <__umoddi3>
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	99                   	cdq    
c000dc37:	f7 ff                	idiv   edi
c000dc39:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc3e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc41:	89 d0                	mov    eax,edx
c000dc43:	99                   	cdq    
c000dc44:	f7 ff                	idiv   edi
c000dc46:	85 db                	test   ebx,ebx
c000dc48:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc4b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dc4e:	79 11                	jns    c000dc61 <secondsToDatetime(unsigned long long)+0x6f>
c000dc50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc54:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dc5a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc5f:	eb 07                	jmp    c000dc68 <secondsToDatetime(unsigned long long)+0x76>
c000dc61:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc66:	89 d8                	mov    eax,ebx
c000dc68:	bf b4 05 00 00       	mov    edi,0x5b4
c000dc6d:	99                   	cdq    
c000dc6e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dc73:	f7 f9                	idiv   ecx
c000dc75:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dc7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc7e:	31 d2                	xor    edx,edx
c000dc80:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dc88:	01 c3                	add    ebx,eax
c000dc8a:	89 d8                	mov    eax,ebx
c000dc8c:	f7 f1                	div    ecx
c000dc8e:	31 d2                	xor    edx,edx
c000dc90:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dc93:	89 d8                	mov    eax,ebx
c000dc95:	f7 f7                	div    edi
c000dc97:	31 d2                	xor    edx,edx
c000dc99:	29 c1                	sub    ecx,eax
c000dc9b:	89 d8                	mov    eax,ebx
c000dc9d:	f7 f5                	div    ebp
c000dc9f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dca4:	29 c1                	sub    ecx,eax
c000dca6:	31 d2                	xor    edx,edx
c000dca8:	89 c8                	mov    eax,ecx
c000dcaa:	f7 f5                	div    ebp
c000dcac:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dcb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcb5:	31 d2                	xor    edx,edx
c000dcb7:	89 c8                	mov    eax,ecx
c000dcb9:	f7 f5                	div    ebp
c000dcbb:	31 d2                	xor    edx,edx
c000dcbd:	01 c3                	add    ebx,eax
c000dcbf:	89 c8                	mov    eax,ecx
c000dcc1:	f7 f7                	div    edi
c000dcc3:	bf 99 00 00 00       	mov    edi,0x99
c000dcc8:	29 c3                	sub    ebx,eax
c000dcca:	31 d2                	xor    edx,edx
c000dccc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dcd4:	29 c3                	sub    ebx,eax
c000dcd6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dcd9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dcdc:	bb 05 00 00 00       	mov    ebx,0x5
c000dce1:	83 c1 02             	add    ecx,0x2
c000dce4:	89 c8                	mov    eax,ecx
c000dce6:	f7 f7                	div    edi
c000dce8:	31 d2                	xor    edx,edx
c000dcea:	89 c7                	mov    edi,eax
c000dcec:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dcf2:	83 c0 02             	add    eax,0x2
c000dcf5:	f7 f3                	div    ebx
c000dcf7:	89 eb                	mov    ebx,ebp
c000dcf9:	29 c3                	sub    ebx,eax
c000dcfb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dd01:	88 1e                	mov    BYTE PTR [esi],bl
c000dd03:	19 c0                	sbb    eax,eax
c000dd05:	31 d2                	xor    edx,edx
c000dd07:	83 e0 0c             	and    eax,0xc
c000dd0a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd0e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd16:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd1a:	83 f9 01             	cmp    ecx,0x1
c000dd1d:	0f 96 c2             	setbe  dl
c000dd20:	41                   	inc    ecx
c000dd21:	01 d0                	add    eax,edx
c000dd23:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd26:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd2a:	83 c4 1c             	add    esp,0x1c
c000dd2d:	89 f0                	mov    eax,esi
c000dd2f:	5b                   	pop    ebx
c000dd30:	5e                   	pop    esi
c000dd31:	5f                   	pop    edi
c000dd32:	5d                   	pop    ebp
c000dd33:	c2 04 00             	ret    0x4

c000dd36 <Clock::timeInDatetimeLocal()>:
c000dd36:	53                   	push   ebx
c000dd37:	83 ec 14             	sub    esp,0x14
c000dd3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd3e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd42:	e8 83 fc ff ff       	call   c000d9ca <Clock::timeInSecondsLocal()>
c000dd47:	83 c4 0c             	add    esp,0xc
c000dd4a:	52                   	push   edx
c000dd4b:	50                   	push   eax
c000dd4c:	53                   	push   ebx
c000dd4d:	e8 a0 fe ff ff       	call   c000dbf2 <secondsToDatetime(unsigned long long)>
c000dd52:	89 d8                	mov    eax,ebx
c000dd54:	83 c4 14             	add    esp,0x14
c000dd57:	5b                   	pop    ebx
c000dd58:	c2 04 00             	ret    0x4
c000dd5b:	90                   	nop

c000dd5c <Device::hibernate()>:
c000dd5c:	c3                   	ret    
c000dd5d:	90                   	nop

c000dd5e <Device::wake()>:
c000dd5e:	c3                   	ret    
c000dd5f:	90                   	nop

c000dd60 <Device::detect()>:
c000dd60:	c3                   	ret    
c000dd61:	90                   	nop

c000dd62 <Device::disableLegacy()>:
c000dd62:	c3                   	ret    
c000dd63:	90                   	nop

c000dd64 <Device::powerSaving(PowerSavingLevel)>:
c000dd64:	c3                   	ret    
c000dd65:	90                   	nop

c000dd66 <DriverlessDevice::close(int, int, void*)>:
c000dd66:	31 c0                	xor    eax,eax
c000dd68:	c3                   	ret    
c000dd69:	90                   	nop

c000dd6a <DriverlessDevice::detect()>:
c000dd6a:	c3                   	ret    
c000dd6b:	90                   	nop

c000dd6c <DriverlessDevice::open(int, int, void*)>:
c000dd6c:	83 ec 18             	sub    esp,0x18
c000dd6f:	68 10 32 02 c0       	push   0xc0023210
c000dd74:	e8 92 65 00 00       	call   c001430b <Krnl::panic(char const*)>
c000dd79:	83 c8 ff             	or     eax,0xffffffff
c000dd7c:	83 c4 1c             	add    esp,0x1c
c000dd7f:	c3                   	ret    

c000dd80 <Device::~Device()>:
c000dd80:	ba 70 32 02 c0       	mov    edx,0xc0023270
c000dd85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd89:	89 10                	mov    DWORD PTR [eax],edx
c000dd8b:	90                   	nop
c000dd8c:	c3                   	ret    
c000dd8d:	90                   	nop

c000dd8e <Device::~Device()>:
c000dd8e:	83 ec 0c             	sub    esp,0xc
c000dd91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd95:	e8 e6 ff ff ff       	call   c000dd80 <Device::~Device()>
c000dd9a:	83 c4 04             	add    esp,0x4
c000dd9d:	83 ec 08             	sub    esp,0x8
c000dda0:	68 58 01 00 00       	push   0x158
c000dda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda9:	e8 dc eb ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000ddae:	83 c4 10             	add    esp,0x10
c000ddb1:	83 c4 0c             	add    esp,0xc
c000ddb4:	c3                   	ret    
c000ddb5:	90                   	nop

c000ddb6 <Device::findAndLoadDriver()>:
c000ddb6:	c7 44 24 04 2e 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc002322e
c000ddbe:	e9 a8 ec ff ff       	jmp    c000ca6b <Dbg::kprintf(char const*, ...)>
c000ddc3:	90                   	nop

c000ddc4 <Device::preOpenPCI(PCIDeviceInfo)>:
c000ddc4:	57                   	push   edi
c000ddc5:	b9 09 00 00 00       	mov    ecx,0x9
c000ddca:	56                   	push   esi
c000ddcb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ddcf:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ddd3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000dddd:	81 c7 18 01 00 00    	add    edi,0x118
c000dde3:	fc                   	cld    
c000dde4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000dde6:	5e                   	pop    esi
c000dde7:	5f                   	pop    edi
c000dde8:	c3                   	ret    
c000dde9:	90                   	nop

c000ddea <Device::preOpenACPI(void*, char*, char*)>:
c000ddea:	57                   	push   edi
c000ddeb:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ddf0:	56                   	push   esi
c000ddf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddf5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddf9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000de03:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de09:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de15:	b9 0e 00 00 00       	mov    ecx,0xe
c000de1a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de20:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de26:	5e                   	pop    esi
c000de27:	5f                   	pop    edi
c000de28:	c3                   	ret    
c000de29:	90                   	nop

c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de2e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de33:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de3a:	75 0b                	jne    c000de47 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000de3e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de42:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de45:	eb 1e                	jmp    c000de65 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de47:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000de4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de52:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de58:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de5a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de62:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000de65:	ff e0                	jmp    eax
c000de67:	90                   	nop

c000de68 <Device::getParent()>:
c000de68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de6c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000de72:	c3                   	ret    
c000de73:	90                   	nop

c000de74 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000de74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de78:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de7d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de84:	75 0b                	jne    c000de91 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000de86:	8b 00                	mov    eax,DWORD PTR [eax]
c000de88:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de8f:	eb 1e                	jmp    c000deaf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000de91:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000de96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de9c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000dea2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dea4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dea8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000deac:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000deaf:	ff e0                	jmp    eax
c000deb1:	90                   	nop

c000deb2 <Device::addChild(Device*)>:
c000deb2:	53                   	push   ebx
c000deb3:	83 ec 08             	sub    esp,0x8
c000deb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000debe:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000dec4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000deca:	8b 13                	mov    edx,DWORD PTR [ebx]
c000decc:	85 d2                	test   edx,edx
c000dece:	74 04                	je     c000ded4 <Device::addChild(Device*)+0x22>
c000ded0:	89 d3                	mov    ebx,edx
c000ded2:	eb f6                	jmp    c000deca <Device::addChild(Device*)+0x18>
c000ded4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ded7:	83 ec 0c             	sub    esp,0xc
c000deda:	6a 08                	push   0x8
c000dedc:	e8 e2 ba ff ff       	call   c00099c3 <malloc>
c000dee1:	89 03                	mov    DWORD PTR [ebx],eax
c000dee3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dee9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000def0:	83 c4 18             	add    esp,0x18
c000def3:	5b                   	pop    ebx
c000def4:	c3                   	ret    
c000def5:	90                   	nop

c000def6 <Device::removeAllChildren()>:
c000def6:	56                   	push   esi
c000def7:	53                   	push   ebx
c000def8:	52                   	push   edx
c000def9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000defd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000df03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df06:	74 17                	je     c000df1f <Device::removeAllChildren()+0x29>
c000df08:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df0b:	85 c0                	test   eax,eax
c000df0d:	74 0c                	je     c000df1b <Device::removeAllChildren()+0x25>
c000df0f:	83 ec 0c             	sub    esp,0xc
c000df12:	8b 10                	mov    edx,DWORD PTR [eax]
c000df14:	50                   	push   eax
c000df15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df18:	83 c4 10             	add    esp,0x10
c000df1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df1d:	eb e4                	jmp    c000df03 <Device::removeAllChildren()+0xd>
c000df1f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df25:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df2b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df38:	58                   	pop    eax
c000df39:	5b                   	pop    ebx
c000df3a:	5e                   	pop    esi
c000df3b:	c3                   	ret    

c000df3c <Device::hibernateAll()>:
c000df3c:	53                   	push   ebx
c000df3d:	83 ec 14             	sub    esp,0x14
c000df40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df44:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df46:	53                   	push   ebx
c000df47:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df4a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df50:	83 c4 10             	add    esp,0x10
c000df53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df56:	74 0f                	je     c000df67 <Device::hibernateAll()+0x2b>
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df5e:	e8 d9 ff ff ff       	call   c000df3c <Device::hibernateAll()>
c000df63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df65:	eb e9                	jmp    c000df50 <Device::hibernateAll()+0x14>
c000df67:	83 c4 08             	add    esp,0x8
c000df6a:	5b                   	pop    ebx
c000df6b:	c3                   	ret    

c000df6c <Device::wakeAll()>:
c000df6c:	53                   	push   ebx
c000df6d:	83 ec 14             	sub    esp,0x14
c000df70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df74:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df76:	53                   	push   ebx
c000df77:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000df7a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df80:	83 c4 10             	add    esp,0x10
c000df83:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df86:	74 0f                	je     c000df97 <Device::wakeAll()+0x2b>
c000df88:	83 ec 0c             	sub    esp,0xc
c000df8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df8e:	e8 d9 ff ff ff       	call   c000df6c <Device::wakeAll()>
c000df93:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df95:	eb e9                	jmp    c000df80 <Device::wakeAll()+0x14>
c000df97:	83 c4 08             	add    esp,0x8
c000df9a:	5b                   	pop    ebx
c000df9b:	c3                   	ret    

c000df9c <Device::detectAll()>:
c000df9c:	53                   	push   ebx
c000df9d:	83 ec 14             	sub    esp,0x14
c000dfa0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfa6:	53                   	push   ebx
c000dfa7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dfaa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfb0:	83 c4 10             	add    esp,0x10
c000dfb3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfb6:	74 0f                	je     c000dfc7 <Device::detectAll()+0x2b>
c000dfb8:	83 ec 0c             	sub    esp,0xc
c000dfbb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfbe:	e8 d9 ff ff ff       	call   c000df9c <Device::detectAll()>
c000dfc3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfc5:	eb e9                	jmp    c000dfb0 <Device::detectAll()+0x14>
c000dfc7:	83 c4 08             	add    esp,0x8
c000dfca:	5b                   	pop    ebx
c000dfcb:	c3                   	ret    

c000dfcc <Device::disableLegacyAll()>:
c000dfcc:	53                   	push   ebx
c000dfcd:	83 ec 14             	sub    esp,0x14
c000dfd0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfd6:	53                   	push   ebx
c000dfd7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dfda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfe0:	83 c4 10             	add    esp,0x10
c000dfe3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfe6:	74 0f                	je     c000dff7 <Device::disableLegacyAll()+0x2b>
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfee:	e8 d9 ff ff ff       	call   c000dfcc <Device::disableLegacyAll()>
c000dff3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dff5:	eb e9                	jmp    c000dfe0 <Device::disableLegacyAll()+0x14>
c000dff7:	83 c4 08             	add    esp,0x8
c000dffa:	5b                   	pop    ebx
c000dffb:	c3                   	ret    

c000dffc <Device::loadDriversForAll()>:
c000dffc:	53                   	push   ebx
c000dffd:	83 ec 08             	sub    esp,0x8
c000e000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e004:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e00b:	75 0c                	jne    c000e019 <Device::loadDriversForAll()+0x1d>
c000e00d:	83 ec 0c             	sub    esp,0xc
c000e010:	53                   	push   ebx
c000e011:	e8 a0 fd ff ff       	call   c000ddb6 <Device::findAndLoadDriver()>
c000e016:	83 c4 10             	add    esp,0x10
c000e019:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e01f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e022:	74 12                	je     c000e036 <Device::loadDriversForAll()+0x3a>
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e02a:	e8 cd ff ff ff       	call   c000dffc <Device::loadDriversForAll()>
c000e02f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	eb e9                	jmp    c000e01f <Device::loadDriversForAll()+0x23>
c000e036:	83 c4 08             	add    esp,0x8
c000e039:	5b                   	pop    ebx
c000e03a:	c3                   	ret    
c000e03b:	90                   	nop

c000e03c <Device::closeAll()>:
c000e03c:	53                   	push   ebx
c000e03d:	83 ec 08             	sub    esp,0x8
c000e040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e044:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e046:	6a 00                	push   0x0
c000e048:	6a 00                	push   0x0
c000e04a:	6a 00                	push   0x0
c000e04c:	53                   	push   ebx
c000e04d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e050:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e05c:	74 0f                	je     c000e06d <Device::closeAll()+0x31>
c000e05e:	83 ec 0c             	sub    esp,0xc
c000e061:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e064:	e8 d3 ff ff ff       	call   c000e03c <Device::closeAll()>
c000e069:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e06b:	eb e9                	jmp    c000e056 <Device::closeAll()+0x1a>
c000e06d:	83 c4 08             	add    esp,0x8
c000e070:	5b                   	pop    ebx
c000e071:	c3                   	ret    

c000e072 <Device::powerSavingAll(PowerSavingLevel)>:
c000e072:	56                   	push   esi
c000e073:	53                   	push   ebx
c000e074:	83 ec 0c             	sub    esp,0xc
c000e077:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e07b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e07f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e081:	56                   	push   esi
c000e082:	53                   	push   ebx
c000e083:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e086:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e08c:	83 c4 10             	add    esp,0x10
c000e08f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e092:	74 0f                	je     c000e0a3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e094:	52                   	push   edx
c000e095:	52                   	push   edx
c000e096:	56                   	push   esi
c000e097:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e09a:	e8 d3 ff ff ff       	call   c000e072 <Device::powerSavingAll(PowerSavingLevel)>
c000e09f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0a1:	eb e9                	jmp    c000e08c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e0a3:	58                   	pop    eax
c000e0a4:	5b                   	pop    ebx
c000e0a5:	5e                   	pop    esi
c000e0a6:	c3                   	ret    
c000e0a7:	90                   	nop

c000e0a8 <Device::setName(char const*)>:
c000e0a8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e0b0:	e9 8b 26 ff ff       	jmp    c0000740 <strcpy>
c000e0b5:	90                   	nop

c000e0b6 <Device::Device(char const*)>:
c000e0b6:	83 ec 1c             	sub    esp,0x1c
c000e0b9:	ba 70 32 02 c0       	mov    edx,0xc0023270
c000e0be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c2:	89 10                	mov    DWORD PTR [eax],edx
c000e0c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e0d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0d6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e0e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0e4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e0ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0f2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e0fc:	83 ec 08             	sub    esp,0x8
c000e0ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e103:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e107:	e8 9c ff ff ff       	call   c000e0a8 <Device::setName(char const*)>
c000e10c:	83 c4 10             	add    esp,0x10
c000e10f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e117:	83 ec 0c             	sub    esp,0xc
c000e11a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e11e:	e8 a0 b8 ff ff       	call   c00099c3 <malloc>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e12c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e133:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e137:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e13d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e141:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e147:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e14d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e151:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e157:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e15e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e162:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e16d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e178:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e186:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e194:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e19e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e1ac:	90                   	nop
c000e1ad:	83 c4 1c             	add    esp,0x1c
c000e1b0:	c3                   	ret    
c000e1b1:	90                   	nop

c000e1b2 <Device::getName()>:
c000e1b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1b6:	05 d0 00 00 00       	add    eax,0xd0
c000e1bb:	c3                   	ret    

c000e1bc <DriverlessDevice::DriverlessDevice(char const*)>:
c000e1bc:	83 ec 0c             	sub    esp,0xc
c000e1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1c3:	83 ec 08             	sub    esp,0x8
c000e1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ca:	50                   	push   eax
c000e1cb:	e8 e6 fe ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e1d0:	83 c4 10             	add    esp,0x10
c000e1d3:	ba 9c 32 02 c0       	mov    edx,0xc002329c
c000e1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1dc:	89 10                	mov    DWORD PTR [eax],edx
c000e1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1e2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e1ec:	90                   	nop
c000e1ed:	83 c4 0c             	add    esp,0xc
c000e1f0:	c3                   	ret    
c000e1f1:	90                   	nop

c000e1f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e1f2:	57                   	push   edi
c000e1f3:	56                   	push   esi
c000e1f4:	53                   	push   ebx
c000e1f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e201:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e207:	75 0c                	jne    c000e215 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e209:	52                   	push   edx
c000e20a:	52                   	push   edx
c000e20b:	53                   	push   ebx
c000e20c:	56                   	push   esi
c000e20d:	e8 54 31 01 00       	call   c0021366 <LinkedList<Device>::addElement(Device*)>
c000e212:	83 c4 10             	add    esp,0x10
c000e215:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e21b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e21e:	74 12                	je     c000e232 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e220:	50                   	push   eax
c000e221:	57                   	push   edi
c000e222:	56                   	push   esi
c000e223:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e226:	e8 c7 ff ff ff       	call   c000e1f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e22b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e22d:	83 c4 10             	add    esp,0x10
c000e230:	eb e9                	jmp    c000e21b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e232:	5b                   	pop    ebx
c000e233:	5e                   	pop    esi
c000e234:	5f                   	pop    edi
c000e235:	c3                   	ret    

c000e236 <getDevicesOfType(DeviceType)>:
c000e236:	53                   	push   ebx
c000e237:	83 ec 14             	sub    esp,0x14
c000e23a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e23e:	53                   	push   ebx
c000e23f:	e8 fe 31 01 00       	call   c0021442 <LinkedList<Device>::LinkedList()>
c000e244:	83 c4 0c             	add    esp,0xc
c000e247:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e24b:	53                   	push   ebx
c000e24c:	ff 35 88 61 02 c0    	push   DWORD PTR ds:0xc0026188
c000e252:	e8 9b ff ff ff       	call   c000e1f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e257:	89 d8                	mov    eax,ebx
c000e259:	83 c4 18             	add    esp,0x18
c000e25c:	5b                   	pop    ebx
c000e25d:	c2 04 00             	ret    0x4

c000e260 <HardDiskController::HardDiskController(char const*)>:
c000e260:	83 ec 0c             	sub    esp,0xc
c000e263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e267:	83 ec 08             	sub    esp,0x8
c000e26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e26e:	50                   	push   eax
c000e26f:	e8 42 fe ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e274:	83 c4 10             	add    esp,0x10
c000e277:	ba c8 32 02 c0       	mov    edx,0xc00232c8
c000e27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e280:	89 10                	mov    DWORD PTR [eax],edx
c000e282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e286:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e290:	90                   	nop
c000e291:	83 c4 0c             	add    esp,0xc
c000e294:	c3                   	ret    
c000e295:	90                   	nop
c000e296:	66 90                	xchg   ax,ax

c000e298 <HardDiskController::~HardDiskController()>:
c000e298:	83 ec 0c             	sub    esp,0xc
c000e29b:	ba c8 32 02 c0       	mov    edx,0xc00232c8
c000e2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a4:	89 10                	mov    DWORD PTR [eax],edx
c000e2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2aa:	83 ec 0c             	sub    esp,0xc
c000e2ad:	50                   	push   eax
c000e2ae:	e8 cd fa ff ff       	call   c000dd80 <Device::~Device()>
c000e2b3:	83 c4 10             	add    esp,0x10
c000e2b6:	90                   	nop
c000e2b7:	83 c4 0c             	add    esp,0xc
c000e2ba:	c3                   	ret    
c000e2bb:	90                   	nop

c000e2bc <HardDiskController::~HardDiskController()>:
c000e2bc:	83 ec 0c             	sub    esp,0xc
c000e2bf:	83 ec 0c             	sub    esp,0xc
c000e2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c6:	e8 cd ff ff ff       	call   c000e298 <HardDiskController::~HardDiskController()>
c000e2cb:	83 c4 10             	add    esp,0x10
c000e2ce:	83 ec 08             	sub    esp,0x8
c000e2d1:	68 58 01 00 00       	push   0x158
c000e2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2da:	e8 ab e6 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	83 c4 0c             	add    esp,0xc
c000e2e5:	c3                   	ret    

c000e2e6 <PhysicalDisk::eject()>:
c000e2e6:	83 c8 ff             	or     eax,0xffffffff
c000e2e9:	c3                   	ret    

c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f8:	50                   	push   eax
c000e2f9:	e8 b8 fd ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e2fe:	83 c4 10             	add    esp,0x10
c000e301:	ba f4 32 02 c0       	mov    edx,0xc00232f4
c000e306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30a:	89 10                	mov    DWORD PTR [eax],edx
c000e30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e310:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e326:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e334:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e338:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e342:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e34c:	90                   	nop
c000e34d:	83 c4 0c             	add    esp,0xc
c000e350:	c3                   	ret    
c000e351:	90                   	nop

c000e352 <PhysicalDisk::startCache()>:
c000e352:	56                   	push   esi
c000e353:	53                   	push   ebx
c000e354:	83 ec 10             	sub    esp,0x10
c000e357:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e35b:	6a 44                	push   0x44
c000e35d:	e8 61 b6 ff ff       	call   c00099c3 <malloc>
c000e362:	89 c6                	mov    esi,eax
c000e364:	58                   	pop    eax
c000e365:	5a                   	pop    edx
c000e366:	53                   	push   ebx
c000e367:	56                   	push   esi
c000e368:	e8 2f 26 00 00       	call   c001099c <VCache::VCache(PhysicalDisk*)>
c000e36d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e373:	83 c4 14             	add    esp,0x14
c000e376:	5b                   	pop    ebx
c000e377:	5e                   	pop    esi
c000e378:	c3                   	ret    
c000e379:	90                   	nop

c000e37a <PhysicalDisk::~PhysicalDisk()>:
c000e37a:	83 ec 0c             	sub    esp,0xc
c000e37d:	ba f4 32 02 c0       	mov    edx,0xc00232f4
c000e382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e386:	89 10                	mov    DWORD PTR [eax],edx
c000e388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38c:	83 ec 0c             	sub    esp,0xc
c000e38f:	50                   	push   eax
c000e390:	e8 eb f9 ff ff       	call   c000dd80 <Device::~Device()>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	90                   	nop
c000e399:	83 c4 0c             	add    esp,0xc
c000e39c:	c3                   	ret    
c000e39d:	90                   	nop

c000e39e <PhysicalDisk::~PhysicalDisk()>:
c000e39e:	83 ec 0c             	sub    esp,0xc
c000e3a1:	83 ec 0c             	sub    esp,0xc
c000e3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a8:	e8 cd ff ff ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c000e3ad:	83 c4 10             	add    esp,0x10
c000e3b0:	83 ec 08             	sub    esp,0x8
c000e3b3:	68 6c 01 00 00       	push   0x16c
c000e3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3bc:	e8 c9 e5 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	83 c4 0c             	add    esp,0xc
c000e3c7:	c3                   	ret    

c000e3c8 <FPU::FPU(char const*)>:
c000e3c8:	83 ec 0c             	sub    esp,0xc
c000e3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cf:	83 ec 08             	sub    esp,0x8
c000e3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d6:	50                   	push   eax
c000e3d7:	e8 da fc ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e3dc:	83 c4 10             	add    esp,0x10
c000e3df:	ba 38 33 02 c0       	mov    edx,0xc0023338
c000e3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e8:	89 10                	mov    DWORD PTR [eax],edx
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3f8:	90                   	nop
c000e3f9:	83 c4 0c             	add    esp,0xc
c000e3fc:	c3                   	ret    
c000e3fd:	90                   	nop
c000e3fe:	66 90                	xchg   ax,ax

c000e400 <FPU::~FPU()>:
c000e400:	83 ec 0c             	sub    esp,0xc
c000e403:	ba 38 33 02 c0       	mov    edx,0xc0023338
c000e408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40c:	89 10                	mov    DWORD PTR [eax],edx
c000e40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e412:	83 ec 0c             	sub    esp,0xc
c000e415:	50                   	push   eax
c000e416:	e8 65 f9 ff ff       	call   c000dd80 <Device::~Device()>
c000e41b:	83 c4 10             	add    esp,0x10
c000e41e:	90                   	nop
c000e41f:	83 c4 0c             	add    esp,0xc
c000e422:	c3                   	ret    
c000e423:	90                   	nop

c000e424 <FPU::~FPU()>:
c000e424:	83 ec 0c             	sub    esp,0xc
c000e427:	83 ec 0c             	sub    esp,0xc
c000e42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42e:	e8 cd ff ff ff       	call   c000e400 <FPU::~FPU()>
c000e433:	83 c4 10             	add    esp,0x10
c000e436:	83 ec 08             	sub    esp,0x8
c000e439:	68 58 01 00 00       	push   0x158
c000e43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e442:	e8 43 e5 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000e447:	83 c4 10             	add    esp,0x10
c000e44a:	83 c4 0c             	add    esp,0xc
c000e44d:	c3                   	ret    

c000e44e <setupFPU()>:
c000e44e:	53                   	push   ebx
c000e44f:	83 ec 08             	sub    esp,0x8
c000e452:	8b 15 88 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026188
c000e458:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e45f:	74 1b                	je     c000e47c <setupFPU()+0x2e>
c000e461:	83 ec 0c             	sub    esp,0xc
c000e464:	68 58 01 00 00       	push   0x158
c000e469:	e8 55 b5 ff ff       	call   c00099c3 <malloc>
c000e46e:	89 c3                	mov    ebx,eax
c000e470:	89 04 24             	mov    DWORD PTR [esp],eax
c000e473:	e8 cc 15 01 00       	call   c001fa44 <AVX::AVX()>
c000e478:	eb 62                	jmp    c000e4dc <setupFPU()+0x8e>
c000e47a:	66 90                	xchg   ax,ax
c000e47c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e482:	84 c0                	test   al,al
c000e484:	79 1a                	jns    c000e4a0 <setupFPU()+0x52>
c000e486:	83 ec 0c             	sub    esp,0xc
c000e489:	68 58 01 00 00       	push   0x158
c000e48e:	e8 30 b5 ff ff       	call   c00099c3 <malloc>
c000e493:	89 c3                	mov    ebx,eax
c000e495:	89 04 24             	mov    DWORD PTR [esp],eax
c000e498:	e8 d7 16 01 00       	call   c001fb74 <SSE::SSE()>
c000e49d:	eb 3d                	jmp    c000e4dc <setupFPU()+0x8e>
c000e49f:	90                   	nop
c000e4a0:	a8 20                	test   al,0x20
c000e4a2:	74 1c                	je     c000e4c0 <setupFPU()+0x72>
c000e4a4:	83 ec 0c             	sub    esp,0xc
c000e4a7:	68 58 01 00 00       	push   0x158
c000e4ac:	e8 12 b5 ff ff       	call   c00099c3 <malloc>
c000e4b1:	89 c3                	mov    ebx,eax
c000e4b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4b6:	e8 1d 16 01 00       	call   c001fad8 <MMX::MMX()>
c000e4bb:	eb 1f                	jmp    c000e4dc <setupFPU()+0x8e>
c000e4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c0:	a8 10                	test   al,0x10
c000e4c2:	74 20                	je     c000e4e4 <setupFPU()+0x96>
c000e4c4:	83 ec 0c             	sub    esp,0xc
c000e4c7:	68 58 01 00 00       	push   0x158
c000e4cc:	e8 f2 b4 ff ff       	call   c00099c3 <malloc>
c000e4d1:	89 c3                	mov    ebx,eax
c000e4d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d6:	e8 2d 17 01 00       	call   c001fc08 <x87::x87()>
c000e4db:	90                   	nop
c000e4dc:	83 c4 10             	add    esp,0x10
c000e4df:	eb 27                	jmp    c000e508 <setupFPU()+0xba>
c000e4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e4:	83 e0 ef             	and    eax,0xffffffef
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e4f0:	68 24 33 02 c0       	push   0xc0023324
c000e4f5:	e8 71 e5 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e4fa:	0f 20 c0             	mov    eax,cr0
c000e4fd:	83 c8 04             	or     eax,0x4
c000e500:	0f 22 c0             	mov    cr0,eax
c000e503:	31 db                	xor    ebx,ebx
c000e505:	83 c4 10             	add    esp,0x10
c000e508:	89 d8                	mov    eax,ebx
c000e50a:	83 c4 08             	add    esp,0x8
c000e50d:	5b                   	pop    ebx
c000e50e:	c3                   	ret    
c000e50f:	90                   	nop

c000e510 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e518:	c1 e0 04             	shl    eax,0x4
c000e51b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e51f:	8d 50 10             	lea    edx,[eax+0x10]
c000e522:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e528:	74 08                	je     c000e532 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e52a:	83 c0 04             	add    eax,0x4
c000e52d:	39 d0                	cmp    eax,edx
c000e52f:	75 f1                	jne    c000e522 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e531:	c3                   	ret    
c000e532:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e53c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e546:	eb e2                	jmp    c000e52a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e548 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e548:	57                   	push   edi
c000e549:	31 c0                	xor    eax,eax
c000e54b:	56                   	push   esi
c000e54c:	53                   	push   ebx
c000e54d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e551:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e555:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e559:	89 da                	mov    edx,ebx
c000e55b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e55f:	c1 e2 04             	shl    edx,0x4
c000e562:	01 ca                	add    edx,ecx
c000e564:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e56c:	74 16                	je     c000e584 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e56e:	40                   	inc    eax
c000e56f:	83 f8 04             	cmp    eax,0x4
c000e572:	75 f0                	jne    c000e564 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e574:	c7 44 24 10 68 33 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023368
c000e57c:	5b                   	pop    ebx
c000e57d:	5e                   	pop    esi
c000e57e:	5f                   	pop    edi
c000e57f:	e9 87 5d 00 00       	jmp    c001430b <Krnl::panic(char const*)>
c000e584:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e587:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e58a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e590:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e596:	5b                   	pop    ebx
c000e597:	5e                   	pop    esi
c000e598:	5f                   	pop    edi
c000e599:	c3                   	ret    

c000e59a <doubleFault(regs*, void*)>:
c000e59a:	55                   	push   ebp
c000e59b:	89 e5                	mov    ebp,esp
c000e59d:	83 ec 08             	sub    esp,0x8
c000e5a0:	83 ec 0c             	sub    esp,0xc
c000e5a3:	68 75 33 02 c0       	push   0xc0023375
c000e5a8:	e8 5e 5d 00 00       	call   c001430b <Krnl::panic(char const*)>
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	90                   	nop
c000e5b1:	c9                   	leave  
c000e5b2:	c3                   	ret    
c000e5b3:	90                   	nop

c000e5b4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5b4:	56                   	push   esi
c000e5b5:	53                   	push   ebx
c000e5b6:	50                   	push   eax
c000e5b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5bf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e5c4:	75 35                	jne    c000e5fb <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e5c6:	8d 43 20             	lea    eax,[ebx+0x20]
c000e5c9:	31 d2                	xor    edx,edx
c000e5cb:	89 c1                	mov    ecx,eax
c000e5cd:	c1 e1 04             	shl    ecx,0x4
c000e5d0:	01 f1                	add    ecx,esi
c000e5d2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e5da:	74 3e                	je     c000e61a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e5dc:	42                   	inc    edx
c000e5dd:	83 fa 04             	cmp    edx,0x4
c000e5e0:	75 f0                	jne    c000e5d2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e5e2:	83 ec 0c             	sub    esp,0xc
c000e5e5:	68 8f 33 02 c0       	push   0xc002338f
c000e5ea:	e8 1c 5d 00 00       	call   c001430b <Krnl::panic(char const*)>
c000e5ef:	83 c4 10             	add    esp,0x10
c000e5f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5f7:	5a                   	pop    edx
c000e5f8:	5b                   	pop    ebx
c000e5f9:	5e                   	pop    esi
c000e5fa:	c3                   	ret    
c000e5fb:	83 ec 0c             	sub    esp,0xc
c000e5fe:	56                   	push   esi
c000e5ff:	e8 ae fb ff ff       	call   c000e1b2 <Device::getName()>
c000e604:	83 c4 10             	add    esp,0x10
c000e607:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e60a:	75 ba                	jne    c000e5c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e60c:	83 fb 0f             	cmp    ebx,0xf
c000e60f:	7f 29                	jg     c000e63a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e611:	0f b6 9b 80 58 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda780]
c000e618:	eb ac                	jmp    c000e5c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e61a:	8d 04 82             	lea    eax,[edx+eax*4]
c000e61d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e621:	8d 04 86             	lea    eax,[esi+eax*4]
c000e624:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e62a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e62e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e634:	89 d8                	mov    eax,ebx
c000e636:	5a                   	pop    edx
c000e637:	5b                   	pop    ebx
c000e638:	5e                   	pop    esi
c000e639:	c3                   	ret    
c000e63a:	83 ec 0c             	sub    esp,0xc
c000e63d:	68 82 33 02 c0       	push   0xc0023382
c000e642:	e8 c4 5c 00 00       	call   c001430b <Krnl::panic(char const*)>
c000e647:	83 c4 10             	add    esp,0x10
c000e64a:	e9 77 ff ff ff       	jmp    c000e5c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e64f:	90                   	nop

c000e650 <InterruptController::clearAllHandlers(int, bool)>:
c000e650:	56                   	push   esi
c000e651:	53                   	push   ebx
c000e652:	52                   	push   edx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e660:	75 61                	jne    c000e6c3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e662:	8d 46 20             	lea    eax,[esi+0x20]
c000e665:	c1 e6 04             	shl    esi,0x4
c000e668:	c1 e0 04             	shl    eax,0x4
c000e66b:	01 de                	add    esi,ebx
c000e66d:	01 d8                	add    eax,ebx
c000e66f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e679:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e683:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e68d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e697:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e6a1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e6ab:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e6b5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e6bf:	58                   	pop    eax
c000e6c0:	5b                   	pop    ebx
c000e6c1:	5e                   	pop    esi
c000e6c2:	c3                   	ret    
c000e6c3:	83 ec 0c             	sub    esp,0xc
c000e6c6:	53                   	push   ebx
c000e6c7:	e8 e6 fa ff ff       	call   c000e1b2 <Device::getName()>
c000e6cc:	83 c4 10             	add    esp,0x10
c000e6cf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e6d2:	75 8e                	jne    c000e662 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6d4:	83 fe 0f             	cmp    esi,0xf
c000e6d7:	7f 09                	jg     c000e6e2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e6d9:	0f b6 b6 80 58 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda780]
c000e6e0:	eb 80                	jmp    c000e662 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6e2:	83 ec 0c             	sub    esp,0xc
c000e6e5:	68 9c 33 02 c0       	push   0xc002339c
c000e6ea:	e8 1c 5c 00 00       	call   c001430b <Krnl::panic(char const*)>
c000e6ef:	83 c4 10             	add    esp,0x10
c000e6f2:	e9 6b ff ff ff       	jmp    c000e662 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6f7:	90                   	nop

c000e6f8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e6f8:	56                   	push   esi
c000e6f9:	53                   	push   ebx
c000e6fa:	52                   	push   edx
c000e6fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e703:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e708:	75 3a                	jne    c000e744 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e70a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e70e:	8d 50 20             	lea    edx,[eax+0x20]
c000e711:	c1 e2 04             	shl    edx,0x4
c000e714:	8d 04 16             	lea    eax,[esi+edx*1]
c000e717:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e71b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e721:	74 0b                	je     c000e72e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e723:	83 c0 04             	add    eax,0x4
c000e726:	39 d0                	cmp    eax,edx
c000e728:	75 f1                	jne    c000e71b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e72a:	58                   	pop    eax
c000e72b:	5b                   	pop    ebx
c000e72c:	5e                   	pop    esi
c000e72d:	c3                   	ret    
c000e72e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e738:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e742:	eb df                	jmp    c000e723 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e744:	83 ec 0c             	sub    esp,0xc
c000e747:	56                   	push   esi
c000e748:	e8 65 fa ff ff       	call   c000e1b2 <Device::getName()>
c000e74d:	83 c4 10             	add    esp,0x10
c000e750:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e753:	75 b5                	jne    c000e70a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e755:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e75a:	7f 11                	jg     c000e76d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e75c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e760:	0f b6 80 80 58 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda780]
c000e767:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e76b:	eb 9d                	jmp    c000e70a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e76d:	83 ec 0c             	sub    esp,0xc
c000e770:	68 a9 33 02 c0       	push   0xc00233a9
c000e775:	e8 91 5b 00 00       	call   c001430b <Krnl::panic(char const*)>
c000e77a:	83 c4 10             	add    esp,0x10
c000e77d:	eb 8b                	jmp    c000e70a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e77f <nmiHandler(regs*, void*)>:
c000e77f:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000e784:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e788:	e9 01 aa ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e78d <int_handler>:
c000e78d:	55                   	push   ebp
c000e78e:	57                   	push   edi
c000e78f:	56                   	push   esi
c000e790:	53                   	push   ebx
c000e791:	83 ec 0c             	sub    esp,0xc
c000e794:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e798:	80 3d 64 6c 02 c0 00 	cmp    BYTE PTR ds:0xc0026c64,0x0
c000e79f:	74 0b                	je     c000e7ac <int_handler+0x1f>
c000e7a1:	fa                   	cli    
c000e7a2:	f4                   	hlt    
c000e7a3:	80 3d 64 6c 02 c0 00 	cmp    BYTE PTR ds:0xc0026c64,0x0
c000e7aa:	75 f5                	jne    c000e7a1 <int_handler+0x14>
c000e7ac:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000e7b1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e7b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e7ba:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e7c0:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7c3:	83 f8 17             	cmp    eax,0x17
c000e7c6:	77 13                	ja     c000e7db <int_handler+0x4e>
c000e7c8:	83 ec 08             	sub    esp,0x8
c000e7cb:	8b 17                	mov    edx,DWORD PTR [edi]
c000e7cd:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7d0:	0f b6 c0             	movzx  eax,al
c000e7d3:	50                   	push   eax
c000e7d4:	57                   	push   edi
c000e7d5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e7d8:	83 c4 10             	add    esp,0x10
c000e7db:	83 c3 15             	add    ebx,0x15
c000e7de:	c1 e3 04             	shl    ebx,0x4
c000e7e1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e7e5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e7ec:	31 db                	xor    ebx,ebx
c000e7ee:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e7f2:	85 c0                	test   eax,eax
c000e7f4:	74 13                	je     c000e809 <int_handler+0x7c>
c000e7f6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e7f9:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e7fd:	74 1c                	je     c000e81b <int_handler+0x8e>
c000e7ff:	83 ec 08             	sub    esp,0x8
c000e802:	52                   	push   edx
c000e803:	56                   	push   esi
c000e804:	ff d0                	call   eax
c000e806:	83 c4 10             	add    esp,0x10
c000e809:	43                   	inc    ebx
c000e80a:	83 fb 04             	cmp    ebx,0x4
c000e80d:	75 df                	jne    c000e7ee <int_handler+0x61>
c000e80f:	83 c4 0c             	add    esp,0xc
c000e812:	31 c0                	xor    eax,eax
c000e814:	5b                   	pop    ebx
c000e815:	31 d2                	xor    edx,edx
c000e817:	5e                   	pop    esi
c000e818:	5f                   	pop    edi
c000e819:	5d                   	pop    ebp
c000e81a:	c3                   	ret    
c000e81b:	83 ec 08             	sub    esp,0x8
c000e81e:	52                   	push   edx
c000e81f:	56                   	push   esi
c000e820:	ff d0                	call   eax
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	83 c4 0c             	add    esp,0xc
c000e828:	5b                   	pop    ebx
c000e829:	5e                   	pop    esi
c000e82a:	5f                   	pop    edi
c000e82b:	5d                   	pop    ebp
c000e82c:	c3                   	ret    
c000e82d:	90                   	nop

c000e82e <InterruptController::InterruptController(char const*)>:
c000e82e:	83 ec 1c             	sub    esp,0x1c
c000e831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e83c:	50                   	push   eax
c000e83d:	e8 74 f8 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000e842:	83 c4 10             	add    esp,0x10
c000e845:	ba 60 36 02 c0       	mov    edx,0xc0023660
c000e84a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e84e:	89 10                	mov    DWORD PTR [eax],edx
c000e850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e854:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e85e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e866:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e86e:	7f 5e                	jg     c000e8ce <InterruptController::InterruptController(char const*)+0xa0>
c000e870:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e878:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e87d:	7f 49                	jg     c000e8c8 <InterruptController::InterruptController(char const*)+0x9a>
c000e87f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e883:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e887:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e88e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e892:	01 ca                	add    edx,ecx
c000e894:	83 c2 54             	add    edx,0x54
c000e897:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e89f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8a7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8b2:	01 ca                	add    edx,ecx
c000e8b4:	81 c2 54 04 00 00    	add    edx,0x454
c000e8ba:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8c2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e8c6:	eb b0                	jmp    c000e878 <InterruptController::InterruptController(char const*)+0x4a>
c000e8c8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e8cc:	eb 98                	jmp    c000e866 <InterruptController::InterruptController(char const*)+0x38>
c000e8ce:	90                   	nop
c000e8cf:	83 c4 1c             	add    esp,0x1c
c000e8d2:	c3                   	ret    
c000e8d3:	90                   	nop

c000e8d4 <InterruptController::~InterruptController()>:
c000e8d4:	83 ec 0c             	sub    esp,0xc
c000e8d7:	ba 60 36 02 c0       	mov    edx,0xc0023660
c000e8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e0:	89 10                	mov    DWORD PTR [eax],edx
c000e8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e6:	83 ec 0c             	sub    esp,0xc
c000e8e9:	50                   	push   eax
c000e8ea:	e8 91 f4 ff ff       	call   c000dd80 <Device::~Device()>
c000e8ef:	83 c4 10             	add    esp,0x10
c000e8f2:	90                   	nop
c000e8f3:	83 c4 0c             	add    esp,0xc
c000e8f6:	c3                   	ret    
c000e8f7:	90                   	nop

c000e8f8 <InterruptController::~InterruptController()>:
c000e8f8:	83 ec 0c             	sub    esp,0xc
c000e8fb:	83 ec 0c             	sub    esp,0xc
c000e8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e902:	e8 cd ff ff ff       	call   c000e8d4 <InterruptController::~InterruptController()>
c000e907:	83 c4 10             	add    esp,0x10
c000e90a:	83 ec 08             	sub    esp,0x8
c000e90d:	68 58 21 00 00       	push   0x2158
c000e912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e916:	e8 6f e0 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000e91b:	83 c4 10             	add    esp,0x10
c000e91e:	83 c4 0c             	add    esp,0xc
c000e921:	c3                   	ret    

c000e922 <displayDebugInfo(regs*)>:
c000e922:	55                   	push   ebp
c000e923:	57                   	push   edi
c000e924:	56                   	push   esi
c000e925:	53                   	push   ebx
c000e926:	83 ec 24             	sub    esp,0x24
c000e929:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e92d:	0f 20 c2             	mov    edx,cr0
c000e930:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e934:	0f 20 d7             	mov    edi,cr2
c000e937:	0f 20 de             	mov    esi,cr3
c000e93a:	0f 20 e5             	mov    ebp,cr4
c000e93d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e940:	68 b6 33 02 c0       	push   0xc00233b6
c000e945:	e8 21 e1 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e94a:	59                   	pop    ecx
c000e94b:	58                   	pop    eax
c000e94c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e94f:	68 c1 33 02 c0       	push   0xc00233c1
c000e954:	e8 12 e1 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e959:	58                   	pop    eax
c000e95a:	5a                   	pop    edx
c000e95b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e95e:	68 cc 33 02 c0       	push   0xc00233cc
c000e963:	e8 03 e1 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e968:	59                   	pop    ecx
c000e969:	58                   	pop    eax
c000e96a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e96d:	68 d7 33 02 c0       	push   0xc00233d7
c000e972:	e8 f4 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e977:	58                   	pop    eax
c000e978:	5a                   	pop    edx
c000e979:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e97c:	68 e2 33 02 c0       	push   0xc00233e2
c000e981:	e8 e5 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e986:	59                   	pop    ecx
c000e987:	58                   	pop    eax
c000e988:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e98b:	68 ed 33 02 c0       	push   0xc00233ed
c000e990:	e8 d6 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e995:	58                   	pop    eax
c000e996:	5a                   	pop    edx
c000e997:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e99a:	68 f8 33 02 c0       	push   0xc00233f8
c000e99f:	e8 c7 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9a4:	59                   	pop    ecx
c000e9a5:	58                   	pop    eax
c000e9a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e9a9:	68 03 34 02 c0       	push   0xc0023403
c000e9ae:	e8 b8 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9b3:	58                   	pop    eax
c000e9b4:	5a                   	pop    edx
c000e9b5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e9b8:	68 0e 34 02 c0       	push   0xc002340e
c000e9bd:	e8 a9 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9c2:	59                   	pop    ecx
c000e9c3:	58                   	pop    eax
c000e9c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e9c7:	68 1d 34 02 c0       	push   0xc002341d
c000e9cc:	e8 9a e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9d1:	58                   	pop    eax
c000e9d2:	5a                   	pop    edx
c000e9d3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000e9d6:	68 28 34 02 c0       	push   0xc0023428
c000e9db:	e8 8b e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9e0:	59                   	pop    ecx
c000e9e1:	58                   	pop    eax
c000e9e2:	57                   	push   edi
c000e9e3:	68 33 34 02 c0       	push   0xc0023433
c000e9e8:	e8 7e e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9ed:	58                   	pop    eax
c000e9ee:	5a                   	pop    edx
c000e9ef:	56                   	push   esi
c000e9f0:	68 3e 34 02 c0       	push   0xc002343e
c000e9f5:	e8 71 e0 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000e9fa:	59                   	pop    ecx
c000e9fb:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ea00:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea06:	e8 68 be ff ff       	call   c000a873 <setActiveTerminal(VgaText*)>
c000ea0b:	58                   	pop    eax
c000ea0c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea0f:	5a                   	pop    edx
c000ea10:	c1 e0 05             	shl    eax,0x5
c000ea13:	05 e0 55 02 c0       	add    eax,0xc00255e0
c000ea18:	50                   	push   eax
c000ea19:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ea1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea24:	e8 57 c3 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ea29:	59                   	pop    ecx
c000ea2a:	58                   	pop    eax
c000ea2b:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ea30:	68 49 34 02 c0       	push   0xc0023449
c000ea35:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea3b:	e8 40 c3 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ea40:	58                   	pop    eax
c000ea41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea46:	5a                   	pop    edx
c000ea47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea4a:	83 c0 0c             	add    eax,0xc
c000ea4d:	50                   	push   eax
c000ea4e:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ea53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea59:	e8 22 c3 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ea5e:	59                   	pop    ecx
c000ea5f:	58                   	pop    eax
c000ea60:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ea65:	68 52 34 02 c0       	push   0xc0023452
c000ea6a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea70:	e8 0b c3 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ea75:	58                   	pop    eax
c000ea76:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ea7b:	5a                   	pop    edx
c000ea7c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea7f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea85:	e8 b0 c2 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ea8a:	59                   	pop    ecx
c000ea8b:	58                   	pop    eax
c000ea8c:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ea91:	68 5a 34 02 c0       	push   0xc002345a
c000ea96:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea9c:	e8 df c2 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000eaa1:	58                   	pop    eax
c000eaa2:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eaa7:	5a                   	pop    edx
c000eaa8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eaab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eab1:	e8 84 c2 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000eab6:	59                   	pop    ecx
c000eab7:	58                   	pop    eax
c000eab8:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eabd:	68 62 34 02 c0       	push   0xc0023462
c000eac2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eac8:	e8 b3 c2 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000eacd:	58                   	pop    eax
c000eace:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ead3:	5a                   	pop    edx
c000ead4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ead7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eadd:	e8 58 c2 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000eae2:	59                   	pop    ecx
c000eae3:	58                   	pop    eax
c000eae4:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eae9:	68 6a 34 02 c0       	push   0xc002346a
c000eaee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaf4:	e8 87 c2 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000eaf9:	58                   	pop    eax
c000eafa:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eaff:	5a                   	pop    edx
c000eb00:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eb03:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb09:	e8 2c c2 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000eb0e:	59                   	pop    ecx
c000eb0f:	58                   	pop    eax
c000eb10:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eb15:	68 72 34 02 c0       	push   0xc0023472
c000eb1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb20:	e8 5b c2 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000eb25:	58                   	pop    eax
c000eb26:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eb2b:	5a                   	pop    edx
c000eb2c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eb2f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb35:	e8 00 c2 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000eb3a:	59                   	pop    ecx
c000eb3b:	58                   	pop    eax
c000eb3c:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eb41:	68 7a 34 02 c0       	push   0xc002347a
c000eb46:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb4c:	e8 2f c2 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000eb51:	58                   	pop    eax
c000eb52:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eb57:	5a                   	pop    edx
c000eb58:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eb5b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb61:	e8 d4 c1 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000eb66:	59                   	pop    ecx
c000eb67:	58                   	pop    eax
c000eb68:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eb6d:	68 82 34 02 c0       	push   0xc0023482
c000eb72:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb78:	e8 03 c2 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000eb7d:	58                   	pop    eax
c000eb7e:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eb83:	5a                   	pop    edx
c000eb84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb88:	52                   	push   edx
c000eb89:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb8f:	e8 a6 c1 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000eb94:	59                   	pop    ecx
c000eb95:	58                   	pop    eax
c000eb96:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eb9b:	68 8b 34 02 c0       	push   0xc002348b
c000eba0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eba6:	e8 d5 c1 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ebab:	58                   	pop    eax
c000ebac:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ebb1:	5a                   	pop    edx
c000ebb2:	57                   	push   edi
c000ebb3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebb9:	e8 7c c1 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ebbe:	59                   	pop    ecx
c000ebbf:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ebc4:	5f                   	pop    edi
c000ebc5:	68 93 34 02 c0       	push   0xc0023493
c000ebca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebd0:	e8 ab c1 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ebd5:	58                   	pop    eax
c000ebd6:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ebdb:	5a                   	pop    edx
c000ebdc:	56                   	push   esi
c000ebdd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebe3:	e8 52 c1 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ebe8:	59                   	pop    ecx
c000ebe9:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ebee:	5e                   	pop    esi
c000ebef:	68 9b 34 02 c0       	push   0xc002349b
c000ebf4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebfa:	e8 81 c1 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ebff:	5f                   	pop    edi
c000ec00:	58                   	pop    eax
c000ec01:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ec06:	55                   	push   ebp
c000ec07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec0d:	e8 28 c1 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ec12:	58                   	pop    eax
c000ec13:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ec18:	5a                   	pop    edx
c000ec19:	68 a3 34 02 c0       	push   0xc00234a3
c000ec1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec24:	e8 57 c1 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ec29:	0f 21 c0             	mov    eax,db0
c000ec2c:	59                   	pop    ecx
c000ec2d:	5e                   	pop    esi
c000ec2e:	50                   	push   eax
c000ec2f:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ec34:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec3a:	e8 fb c0 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ec3f:	5f                   	pop    edi
c000ec40:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ec45:	5d                   	pop    ebp
c000ec46:	68 ac 34 02 c0       	push   0xc00234ac
c000ec4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec51:	e8 2a c1 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ec56:	0f 21 c8             	mov    eax,db1
c000ec59:	5a                   	pop    edx
c000ec5a:	59                   	pop    ecx
c000ec5b:	50                   	push   eax
c000ec5c:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ec61:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec67:	e8 ce c0 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ec6c:	5e                   	pop    esi
c000ec6d:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ec72:	5f                   	pop    edi
c000ec73:	68 b4 34 02 c0       	push   0xc00234b4
c000ec78:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec7e:	e8 fd c0 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ec83:	0f 21 d0             	mov    eax,db2
c000ec86:	5d                   	pop    ebp
c000ec87:	5a                   	pop    edx
c000ec88:	50                   	push   eax
c000ec89:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ec8e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec94:	e8 a1 c0 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ec99:	59                   	pop    ecx
c000ec9a:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ec9f:	5e                   	pop    esi
c000eca0:	68 bc 34 02 c0       	push   0xc00234bc
c000eca5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecab:	e8 d0 c0 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ecb0:	0f 21 d8             	mov    eax,db3
c000ecb3:	5f                   	pop    edi
c000ecb4:	5d                   	pop    ebp
c000ecb5:	50                   	push   eax
c000ecb6:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ecbb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecc1:	e8 74 c0 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ecc6:	58                   	pop    eax
c000ecc7:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000eccc:	5a                   	pop    edx
c000eccd:	68 c4 34 02 c0       	push   0xc00234c4
c000ecd2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecd8:	e8 a3 c0 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ecdd:	0f 21 f0             	mov    eax,db6
c000ece0:	59                   	pop    ecx
c000ece1:	5e                   	pop    esi
c000ece2:	50                   	push   eax
c000ece3:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ece8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecee:	e8 47 c0 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ecf3:	5f                   	pop    edi
c000ecf4:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ecf9:	5d                   	pop    ebp
c000ecfa:	68 cc 34 02 c0       	push   0xc00234cc
c000ecff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed05:	e8 76 c0 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ed0a:	0f 21 f8             	mov    eax,db7
c000ed0d:	5a                   	pop    edx
c000ed0e:	59                   	pop    ecx
c000ed0f:	50                   	push   eax
c000ed10:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ed15:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed1b:	e8 1a c0 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ed20:	5e                   	pop    esi
c000ed21:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed24:	e8 7c 87 00 00       	call   c00174a5 <Thr::getDriverNameFromAddress(unsigned long)>
c000ed29:	83 c4 10             	add    esp,0x10
c000ed2c:	85 c0                	test   eax,eax
c000ed2e:	74 7d                	je     c000edad <displayDebugInfo(regs*)+0x48b>
c000ed30:	89 c6                	mov    esi,eax
c000ed32:	50                   	push   eax
c000ed33:	50                   	push   eax
c000ed34:	56                   	push   esi
c000ed35:	68 d4 34 02 c0       	push   0xc00234d4
c000ed3a:	e8 2c dd ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000ed3f:	5a                   	pop    edx
c000ed40:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ed45:	59                   	pop    ecx
c000ed46:	68 e2 34 02 c0       	push   0xc00234e2
c000ed4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed51:	e8 2a c0 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ed56:	5f                   	pop    edi
c000ed57:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ed5c:	5d                   	pop    ebp
c000ed5d:	56                   	push   esi
c000ed5e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed64:	e8 17 c0 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ed69:	58                   	pop    eax
c000ed6a:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ed6f:	5a                   	pop    edx
c000ed70:	68 ee 34 02 c0       	push   0xc00234ee
c000ed75:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed7b:	e8 00 c0 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c000ed80:	59                   	pop    ecx
c000ed81:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000ed86:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ed8c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed8f:	e8 48 87 00 00       	call   c00174dc <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ed94:	5b                   	pop    ebx
c000ed95:	5d                   	pop    ebp
c000ed96:	50                   	push   eax
c000ed97:	57                   	push   edi
c000ed98:	e8 9d bf ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c000ed9d:	58                   	pop    eax
c000ed9e:	5a                   	pop    edx
c000ed9f:	56                   	push   esi
c000eda0:	68 fa 34 02 c0       	push   0xc00234fa
c000eda5:	e8 c1 dc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000edaa:	83 c4 10             	add    esp,0x10
c000edad:	fa                   	cli    
c000edae:	f4                   	hlt    
c000edaf:	eb fe                	jmp    c000edaf <displayDebugInfo(regs*)+0x48d>

c000edb1 <x87EmulHandler(regs*, void*)>:
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	0f 20 c2             	mov    edx,cr0
c000edb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edbc:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000edc0:	75 4b                	jne    c000ee0d <x87EmulHandler(regs*, void*)+0x5c>
c000edc2:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000edc7:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000edcd:	85 c0                	test   eax,eax
c000edcf:	74 05                	je     c000edd6 <x87EmulHandler(regs*, void*)+0x25>
c000edd1:	83 e2 08             	and    edx,0x8
c000edd4:	75 17                	jne    c000eded <x87EmulHandler(regs*, void*)+0x3c>
c000edd6:	83 ec 0c             	sub    esp,0xc
c000edd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eddd:	e8 70 ab 00 00       	call   c0019952 <Vm::x87Handler(regs*)>
c000ede2:	83 c4 10             	add    esp,0x10
c000ede5:	84 c0                	test   al,al
c000ede7:	74 24                	je     c000ee0d <x87EmulHandler(regs*, void*)+0x5c>
c000ede9:	83 c4 0c             	add    esp,0xc
c000edec:	c3                   	ret    
c000eded:	83 ec 0c             	sub    esp,0xc
c000edf0:	68 20 35 02 c0       	push   0xc0023520
c000edf5:	e8 71 dc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000edfa:	0f 06                	clts   
c000edfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee01:	83 c4 10             	add    esp,0x10
c000ee04:	a3 c8 62 02 c0       	mov    ds:0xc00262c8,eax
c000ee09:	83 c4 0c             	add    esp,0xc
c000ee0c:	c3                   	ret    
c000ee0d:	83 ec 0c             	sub    esp,0xc
c000ee10:	68 0a 35 02 c0       	push   0xc002350a
c000ee15:	e8 51 dc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000ee1a:	5a                   	pop    edx
c000ee1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee1f:	e8 fe fa ff ff       	call   c000e922 <displayDebugInfo(regs*)>

c000ee24 <gpFault(regs*, void*)>:
c000ee24:	53                   	push   ebx
c000ee25:	83 ec 14             	sub    esp,0x14
c000ee28:	c7 05 c4 62 02 c0 0e 8e 01 c0 	mov    DWORD PTR ds:0xc00262c4,0xc0018e0e
c000ee32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee36:	53                   	push   ebx
c000ee37:	e8 d2 9f 00 00       	call   c0018e0e <Vm::faultHandler(regs*)>
c000ee3c:	83 c4 10             	add    esp,0x10
c000ee3f:	84 c0                	test   al,al
c000ee41:	74 05                	je     c000ee48 <gpFault(regs*, void*)+0x24>
c000ee43:	83 c4 08             	add    esp,0x8
c000ee46:	5b                   	pop    ebx
c000ee47:	c3                   	ret    
c000ee48:	83 ec 0c             	sub    esp,0xc
c000ee4b:	68 2d 35 02 c0       	push   0xc002352d
c000ee50:	e8 16 dc ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000ee55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee58:	e8 c5 fa ff ff       	call   c000e922 <displayDebugInfo(regs*)>

c000ee5d <pgFault(regs*, void*)>:
c000ee5d:	53                   	push   ebx
c000ee5e:	83 ec 10             	sub    esp,0x10
c000ee61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee65:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee68:	68 48 35 02 c0       	push   0xc0023548
c000ee6d:	e8 f9 db ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000ee72:	0f 20 d0             	mov    eax,cr2
c000ee75:	5a                   	pop    edx
c000ee76:	59                   	pop    ecx
c000ee77:	50                   	push   eax
c000ee78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee7d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee80:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000ee86:	e8 5b d7 ff ff       	call   c000c5e6 <VAS::tryLoadBackOffDisk(unsigned long)>
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	84 c0                	test   al,al
c000ee90:	74 05                	je     c000ee97 <pgFault(regs*, void*)+0x3a>
c000ee92:	83 c4 08             	add    esp,0x8
c000ee95:	5b                   	pop    ebx
c000ee96:	c3                   	ret    
c000ee97:	83 ec 0c             	sub    esp,0xc
c000ee9a:	68 5d 35 02 c0       	push   0xc002355d
c000ee9f:	e8 c7 db ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000eea4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eea7:	e8 76 fa ff ff       	call   c000e922 <displayDebugInfo(regs*)>

c000eeac <otherISRHandler(regs*, void*)>:
c000eeac:	53                   	push   ebx
c000eead:	83 ec 0c             	sub    esp,0xc
c000eeb0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eeb4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000eeb7:	50                   	push   eax
c000eeb8:	50                   	push   eax
c000eeb9:	68 6a 35 02 c0       	push   0xc002356a
c000eebe:	e8 a8 db ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000eec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec6:	e8 57 fa ff ff       	call   c000e922 <displayDebugInfo(regs*)>

c000eecb <opcodeFault(regs*, void*)>:
c000eecb:	55                   	push   ebp
c000eecc:	89 e5                	mov    ebp,esp
c000eece:	56                   	push   esi
c000eecf:	53                   	push   ebx
c000eed0:	83 ec 30             	sub    esp,0x30
c000eed3:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000eed8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eede:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000eee4:	84 c0                	test   al,al
c000eee6:	74 24                	je     c000ef0c <opcodeFault(regs*, void*)+0x41>
c000eee8:	83 ec 0c             	sub    esp,0xc
c000eeeb:	68 88 35 02 c0       	push   0xc0023588
c000eef0:	e8 76 db ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000eef5:	83 c4 10             	add    esp,0x10
c000eef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eefb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eefe:	8d 50 19             	lea    edx,[eax+0x19]
c000ef01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef04:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef07:	e9 7b 03 00 00       	jmp    c000f287 <opcodeFault(regs*, void*)+0x3bc>
c000ef0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef0f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef12:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef15:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef1c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef1f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ef22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef25:	8a 00                	mov    al,BYTE PTR [eax]
c000ef27:	3c f0                	cmp    al,0xf0
c000ef29:	75 17                	jne    c000ef42 <opcodeFault(regs*, void*)+0x77>
c000ef2b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef31:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef34:	8d 50 01             	lea    edx,[eax+0x1]
c000ef37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef3d:	e9 d6 00 00 00       	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000ef42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef45:	8a 00                	mov    al,BYTE PTR [eax]
c000ef47:	3c f2                	cmp    al,0xf2
c000ef49:	74 09                	je     c000ef54 <opcodeFault(regs*, void*)+0x89>
c000ef4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef4e:	8a 00                	mov    al,BYTE PTR [eax]
c000ef50:	3c f3                	cmp    al,0xf3
c000ef52:	75 1b                	jne    c000ef6f <opcodeFault(regs*, void*)+0xa4>
c000ef54:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef58:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef5e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef61:	8d 50 01             	lea    edx,[eax+0x1]
c000ef64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef67:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef6a:	e9 a9 00 00 00       	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000ef6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef72:	8a 00                	mov    al,BYTE PTR [eax]
c000ef74:	3c 66                	cmp    al,0x66
c000ef76:	75 1b                	jne    c000ef93 <opcodeFault(regs*, void*)+0xc8>
c000ef78:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef7c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef82:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef85:	8d 50 01             	lea    edx,[eax+0x1]
c000ef88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef8b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef8e:	e9 85 00 00 00       	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000ef93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef96:	8a 00                	mov    al,BYTE PTR [eax]
c000ef98:	3c 67                	cmp    al,0x67
c000ef9a:	75 18                	jne    c000efb4 <opcodeFault(regs*, void*)+0xe9>
c000ef9c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efa0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efa9:	8d 50 01             	lea    edx,[eax+0x1]
c000efac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efaf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efb2:	eb 64                	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000efb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb7:	8a 00                	mov    al,BYTE PTR [eax]
c000efb9:	3c 2e                	cmp    al,0x2e
c000efbb:	74 09                	je     c000efc6 <opcodeFault(regs*, void*)+0xfb>
c000efbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efc0:	8a 00                	mov    al,BYTE PTR [eax]
c000efc2:	3c 3e                	cmp    al,0x3e
c000efc4:	75 18                	jne    c000efde <opcodeFault(regs*, void*)+0x113>
c000efc6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efd3:	8d 50 01             	lea    edx,[eax+0x1]
c000efd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efdc:	eb 3a                	jmp    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000efde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efe1:	8a 00                	mov    al,BYTE PTR [eax]
c000efe3:	3c 36                	cmp    al,0x36
c000efe5:	74 1b                	je     c000f002 <opcodeFault(regs*, void*)+0x137>
c000efe7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efea:	8a 00                	mov    al,BYTE PTR [eax]
c000efec:	3c 26                	cmp    al,0x26
c000efee:	74 12                	je     c000f002 <opcodeFault(regs*, void*)+0x137>
c000eff0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eff3:	8a 00                	mov    al,BYTE PTR [eax]
c000eff5:	3c 64                	cmp    al,0x64
c000eff7:	74 09                	je     c000f002 <opcodeFault(regs*, void*)+0x137>
c000eff9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000effc:	8a 00                	mov    al,BYTE PTR [eax]
c000effe:	3c 65                	cmp    al,0x65
c000f000:	75 16                	jne    c000f018 <opcodeFault(regs*, void*)+0x14d>
c000f002:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f006:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f00c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f00f:	8d 50 01             	lea    edx,[eax+0x1]
c000f012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f015:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f018:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f01b:	8a 00                	mov    al,BYTE PTR [eax]
c000f01d:	3c 0f                	cmp    al,0xf
c000f01f:	0f 85 8d 01 00 00    	jne    c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f025:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f028:	40                   	inc    eax
c000f029:	8a 00                	mov    al,BYTE PTR [eax]
c000f02b:	3c c7                	cmp    al,0xc7
c000f02d:	0f 85 7f 01 00 00    	jne    c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f033:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f039:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f03c:	8d 50 01             	lea    edx,[eax+0x1]
c000f03f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f042:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f045:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f048:	50                   	push   eax
c000f049:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f04c:	50                   	push   eax
c000f04d:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f050:	50                   	push   eax
c000f051:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f054:	e8 cb 49 00 00       	call   c0013a24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f059:	83 c4 10             	add    esp,0x10
c000f05c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f05f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f062:	83 f0 01             	xor    eax,0x1
c000f065:	84 c0                	test   al,al
c000f067:	0f 84 45 01 00 00    	je     c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f06d:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f070:	3c 01                	cmp    al,0x1
c000f072:	0f 85 3a 01 00 00    	jne    c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f078:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f07b:	83 f0 01             	xor    eax,0x1
c000f07e:	84 c0                	test   al,al
c000f080:	0f 84 2c 01 00 00    	je     c000f1b2 <opcodeFault(regs*, void*)+0x2e7>
c000f086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f089:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f08c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f08f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f096:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f099:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f09c:	89 c2                	mov    edx,eax
c000f09e:	b8 00 00 00 00       	mov    eax,0x0
c000f0a3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0a6:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0ac:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f0af:	ba 00 00 00 00       	mov    edx,0x0
c000f0b4:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f0b7:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f0ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0bd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f0c0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0c3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f0ca:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f0cd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f0d0:	89 c2                	mov    edx,eax
c000f0d2:	b8 00 00 00 00       	mov    eax,0x0
c000f0d7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0da:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0e3:	ba 00 00 00 00       	mov    edx,0x0
c000f0e8:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f0eb:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f0ee:	fa                   	cli    
c000f0ef:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f0f4:	40                   	inc    eax
c000f0f5:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000f0fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f0fd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f100:	8b 00                	mov    eax,DWORD PTR [eax]
c000f102:	89 c1                	mov    ecx,eax
c000f104:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f107:	89 cb                	mov    ebx,ecx
c000f109:	89 d0                	mov    eax,edx
c000f10b:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f10e:	89 c6                	mov    esi,eax
c000f110:	89 f0                	mov    eax,esi
c000f112:	09 d8                	or     eax,ebx
c000f114:	85 c0                	test   eax,eax
c000f116:	75 21                	jne    c000f139 <opcodeFault(regs*, void*)+0x26e>
c000f118:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f11b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f11e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f121:	89 01                	mov    DWORD PTR [ecx],eax
c000f123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f129:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f12c:	83 c8 40             	or     eax,0x40
c000f12f:	89 c2                	mov    edx,eax
c000f131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f134:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f137:	eb 3e                	jmp    c000f177 <opcodeFault(regs*, void*)+0x2ac>
c000f139:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f13c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f13f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f141:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f144:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f147:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f14a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f14d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f150:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f153:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f156:	89 d0                	mov    eax,edx
c000f158:	31 d2                	xor    edx,edx
c000f15a:	89 c3                	mov    ebx,eax
c000f15c:	89 d6                	mov    esi,edx
c000f15e:	89 da                	mov    edx,ebx
c000f160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f163:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f169:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f16c:	83 e0 bf             	and    eax,0xffffffbf
c000f16f:	89 c2                	mov    edx,eax
c000f171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f174:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f177:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f17c:	48                   	dec    eax
c000f17d:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000f182:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f187:	85 c0                	test   eax,eax
c000f189:	75 01                	jne    c000f18c <opcodeFault(regs*, void*)+0x2c1>
c000f18b:	fb                   	sti    
c000f18c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f18f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f192:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f195:	01 c2                	add    edx,eax
c000f197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f19a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f19d:	83 ec 0c             	sub    esp,0xc
c000f1a0:	68 ab 35 02 c0       	push   0xc00235ab
c000f1a5:	e8 c1 d8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000f1aa:	83 c4 10             	add    esp,0x10
c000f1ad:	e9 d5 00 00 00       	jmp    c000f287 <opcodeFault(regs*, void*)+0x3bc>
c000f1b2:	83 ec 0c             	sub    esp,0xc
c000f1b5:	68 be 35 02 c0       	push   0xc00235be
c000f1ba:	e8 ac d8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000f1bf:	83 c4 10             	add    esp,0x10
c000f1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1ce:	c1 e0 04             	shl    eax,0x4
c000f1d1:	01 d0                	add    eax,edx
c000f1d3:	83 c0 03             	add    eax,0x3
c000f1d6:	8a 00                	mov    al,BYTE PTR [eax]
c000f1d8:	0f b6 d8             	movzx  ebx,al
c000f1db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1de:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1e7:	c1 e0 04             	shl    eax,0x4
c000f1ea:	01 d0                	add    eax,edx
c000f1ec:	83 c0 02             	add    eax,0x2
c000f1ef:	8a 00                	mov    al,BYTE PTR [eax]
c000f1f1:	0f b6 c8             	movzx  ecx,al
c000f1f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f200:	c1 e0 04             	shl    eax,0x4
c000f203:	01 d0                	add    eax,edx
c000f205:	40                   	inc    eax
c000f206:	8a 00                	mov    al,BYTE PTR [eax]
c000f208:	0f b6 d0             	movzx  edx,al
c000f20b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f20e:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f214:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f217:	c1 e0 04             	shl    eax,0x4
c000f21a:	01 f0                	add    eax,esi
c000f21c:	8a 00                	mov    al,BYTE PTR [eax]
c000f21e:	0f b6 c0             	movzx  eax,al
c000f221:	83 ec 0c             	sub    esp,0xc
c000f224:	53                   	push   ebx
c000f225:	51                   	push   ecx
c000f226:	52                   	push   edx
c000f227:	50                   	push   eax
c000f228:	68 d0 35 02 c0       	push   0xc00235d0
c000f22d:	e8 39 d8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000f232:	83 c4 20             	add    esp,0x20
c000f235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f238:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f23b:	83 c0 03             	add    eax,0x3
c000f23e:	8a 00                	mov    al,BYTE PTR [eax]
c000f240:	0f b6 d8             	movzx  ebx,al
c000f243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f246:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f249:	83 c0 02             	add    eax,0x2
c000f24c:	8a 00                	mov    al,BYTE PTR [eax]
c000f24e:	0f b6 c8             	movzx  ecx,al
c000f251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f254:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f257:	40                   	inc    eax
c000f258:	8a 00                	mov    al,BYTE PTR [eax]
c000f25a:	0f b6 d0             	movzx  edx,al
c000f25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f260:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f263:	8a 00                	mov    al,BYTE PTR [eax]
c000f265:	0f b6 c0             	movzx  eax,al
c000f268:	83 ec 0c             	sub    esp,0xc
c000f26b:	53                   	push   ebx
c000f26c:	51                   	push   ecx
c000f26d:	52                   	push   edx
c000f26e:	50                   	push   eax
c000f26f:	68 f8 35 02 c0       	push   0xc00235f8
c000f274:	e8 f2 d7 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c000f279:	83 c4 20             	add    esp,0x20
c000f27c:	83 ec 0c             	sub    esp,0xc
c000f27f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f282:	e8 9b f6 ff ff       	call   c000e922 <displayDebugInfo(regs*)>
c000f287:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f28a:	5b                   	pop    ebx
c000f28b:	5e                   	pop    esi
c000f28c:	5d                   	pop    ebp
c000f28d:	c3                   	ret    

c000f28e <displayProgramFault(char const*)>:
c000f28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f293:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f296:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f29c:	85 c0                	test   eax,eax
c000f29e:	74 15                	je     c000f2b5 <displayProgramFault(char const*)+0x27>
c000f2a0:	83 ec 0c             	sub    esp,0xc
c000f2a3:	6a 04                	push   0x4
c000f2a5:	6a 0f                	push   0xf
c000f2a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2ab:	50                   	push   eax
c000f2ac:	e8 cb b7 ff ff       	call   c000aa7c <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f2b1:	83 c4 1c             	add    esp,0x1c
c000f2b4:	c3                   	ret    
c000f2b5:	c3                   	ret    

c000f2b6 <setupInterruptController()>:
c000f2b6:	55                   	push   ebp
c000f2b7:	89 e5                	mov    ebp,esp
c000f2b9:	53                   	push   ebx
c000f2ba:	83 ec 24             	sub    esp,0x24
c000f2bd:	b8 00 00 00 00       	mov    eax,0x0
c000f2c2:	85 c0                	test   eax,eax
c000f2c4:	0f 95 c0             	setne  al
c000f2c7:	84 c0                	test   al,al
c000f2c9:	74 5b                	je     c000f326 <setupInterruptController()+0x70>
c000f2cb:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f2d2:	83 ec 0c             	sub    esp,0xc
c000f2d5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f2d8:	e8 e6 a6 ff ff       	call   c00099c3 <malloc>
c000f2dd:	83 c4 10             	add    esp,0x10
c000f2e0:	89 c3                	mov    ebx,eax
c000f2e2:	83 ec 0c             	sub    esp,0xc
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 5b 0b 01 00       	call   c001fe46 <APIC::APIC()>
c000f2eb:	83 c4 10             	add    esp,0x10
c000f2ee:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f2f4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f9:	83 c0 08             	add    eax,0x8
c000f2fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2fe:	6a 00                	push   0x0
c000f300:	6a 00                	push   0x0
c000f302:	6a 00                	push   0x0
c000f304:	52                   	push   edx
c000f305:	ff d0                	call   eax
c000f307:	83 c4 10             	add    esp,0x10
c000f30a:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000f30f:	83 ec 08             	sub    esp,0x8
c000f312:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f315:	50                   	push   eax
c000f316:	e8 97 eb ff ff       	call   c000deb2 <Device::addChild(Device*)>
c000f31b:	83 c4 10             	add    esp,0x10
c000f31e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f321:	e9 79 03 00 00       	jmp    c000f69f <setupInterruptController()+0x3e9>
c000f326:	a0 a0 6a 02 c0       	mov    al,ds:0xc0026aa0
c000f32b:	84 c0                	test   al,al
c000f32d:	75 14                	jne    c000f343 <setupInterruptController()+0x8d>
c000f32f:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000f334:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f33a:	83 e2 fe             	and    edx,0xfffffffe
c000f33d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f343:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000f348:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f34e:	83 e0 01             	and    eax,0x1
c000f351:	84 c0                	test   al,al
c000f353:	0f 95 c0             	setne  al
c000f356:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f359:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f360:	83 ec 0c             	sub    esp,0xc
c000f363:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f366:	e8 58 a6 ff ff       	call   c00099c3 <malloc>
c000f36b:	83 c4 10             	add    esp,0x10
c000f36e:	89 c3                	mov    ebx,eax
c000f370:	83 ec 0c             	sub    esp,0xc
c000f373:	53                   	push   ebx
c000f374:	e8 25 10 01 00       	call   c002039e <PIC::PIC()>
c000f379:	83 c4 10             	add    esp,0x10
c000f37c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f37f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f382:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f385:	8b 00                	mov    eax,DWORD PTR [eax]
c000f387:	83 c0 08             	add    eax,0x8
c000f38a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f38c:	6a 00                	push   0x0
c000f38e:	6a 00                	push   0x0
c000f390:	6a 00                	push   0x0
c000f392:	52                   	push   edx
c000f393:	ff d0                	call   eax
c000f395:	83 c4 10             	add    esp,0x10
c000f398:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f39c:	74 73                	je     c000f411 <setupInterruptController()+0x15b>
c000f39e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3a6:	83 c0 0c             	add    eax,0xc
c000f3a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3ab:	6a 00                	push   0x0
c000f3ad:	6a 00                	push   0x0
c000f3af:	6a 00                	push   0x0
c000f3b1:	52                   	push   edx
c000f3b2:	ff d0                	call   eax
c000f3b4:	83 c4 10             	add    esp,0x10
c000f3b7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f3bb:	74 15                	je     c000f3d2 <setupInterruptController()+0x11c>
c000f3bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c2:	83 c0 04             	add    eax,0x4
c000f3c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c7:	83 ec 0c             	sub    esp,0xc
c000f3ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3cd:	ff d0                	call   eax
c000f3cf:	83 c4 10             	add    esp,0x10
c000f3d2:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f3d9:	83 ec 0c             	sub    esp,0xc
c000f3dc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f3df:	e8 df a5 ff ff       	call   c00099c3 <malloc>
c000f3e4:	83 c4 10             	add    esp,0x10
c000f3e7:	89 c3                	mov    ebx,eax
c000f3e9:	83 ec 0c             	sub    esp,0xc
c000f3ec:	53                   	push   ebx
c000f3ed:	e8 54 0a 01 00       	call   c001fe46 <APIC::APIC()>
c000f3f2:	83 c4 10             	add    esp,0x10
c000f3f5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3f8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f400:	83 c0 08             	add    eax,0x8
c000f403:	8b 00                	mov    eax,DWORD PTR [eax]
c000f405:	6a 00                	push   0x0
c000f407:	6a 00                	push   0x0
c000f409:	6a 00                	push   0x0
c000f40b:	52                   	push   edx
c000f40c:	ff d0                	call   eax
c000f40e:	83 c4 10             	add    esp,0x10
c000f411:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c000f416:	83 ec 08             	sub    esp,0x8
c000f419:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f41c:	50                   	push   eax
c000f41d:	e8 90 ea ff ff       	call   c000deb2 <Device::addChild(Device*)>
c000f422:	83 c4 10             	add    esp,0x10
c000f425:	c7 05 c8 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00262c8,0x0
c000f42f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f432:	8b 00                	mov    eax,DWORD PTR [eax]
c000f434:	83 c0 24             	add    eax,0x24
c000f437:	8b 00                	mov    eax,DWORD PTR [eax]
c000f439:	6a 00                	push   0x0
c000f43b:	68 ac ee 00 c0       	push   0xc000eeac
c000f440:	6a 00                	push   0x0
c000f442:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f445:	ff d0                	call   eax
c000f447:	83 c4 10             	add    esp,0x10
c000f44a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f44d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f44f:	83 c0 24             	add    eax,0x24
c000f452:	8b 00                	mov    eax,DWORD PTR [eax]
c000f454:	6a 00                	push   0x0
c000f456:	68 ac ee 00 c0       	push   0xc000eeac
c000f45b:	6a 01                	push   0x1
c000f45d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f460:	ff d0                	call   eax
c000f462:	83 c4 10             	add    esp,0x10
c000f465:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f468:	8b 00                	mov    eax,DWORD PTR [eax]
c000f46a:	83 c0 24             	add    eax,0x24
c000f46d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f46f:	6a 00                	push   0x0
c000f471:	68 7f e7 00 c0       	push   0xc000e77f
c000f476:	6a 02                	push   0x2
c000f478:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f47b:	ff d0                	call   eax
c000f47d:	83 c4 10             	add    esp,0x10
c000f480:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f483:	8b 00                	mov    eax,DWORD PTR [eax]
c000f485:	83 c0 24             	add    eax,0x24
c000f488:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48a:	6a 00                	push   0x0
c000f48c:	68 ac ee 00 c0       	push   0xc000eeac
c000f491:	6a 03                	push   0x3
c000f493:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f496:	ff d0                	call   eax
c000f498:	83 c4 10             	add    esp,0x10
c000f49b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f49e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a0:	83 c0 24             	add    eax,0x24
c000f4a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 ac ee 00 c0       	push   0xc000eeac
c000f4ac:	6a 04                	push   0x4
c000f4ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4b1:	ff d0                	call   eax
c000f4b3:	83 c4 10             	add    esp,0x10
c000f4b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4bb:	83 c0 24             	add    eax,0x24
c000f4be:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c0:	6a 00                	push   0x0
c000f4c2:	68 ac ee 00 c0       	push   0xc000eeac
c000f4c7:	6a 05                	push   0x5
c000f4c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4cc:	ff d0                	call   eax
c000f4ce:	83 c4 10             	add    esp,0x10
c000f4d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d6:	83 c0 24             	add    eax,0x24
c000f4d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4db:	6a 00                	push   0x0
c000f4dd:	68 cb ee 00 c0       	push   0xc000eecb
c000f4e2:	6a 06                	push   0x6
c000f4e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4e7:	ff d0                	call   eax
c000f4e9:	83 c4 10             	add    esp,0x10
c000f4ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f1:	83 c0 24             	add    eax,0x24
c000f4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 b1 ed 00 c0       	push   0xc000edb1
c000f4fd:	6a 07                	push   0x7
c000f4ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f502:	ff d0                	call   eax
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f50a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f50c:	83 c0 24             	add    eax,0x24
c000f50f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f511:	6a 00                	push   0x0
c000f513:	68 9a e5 00 c0       	push   0xc000e59a
c000f518:	6a 08                	push   0x8
c000f51a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f51d:	ff d0                	call   eax
c000f51f:	83 c4 10             	add    esp,0x10
c000f522:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f525:	8b 00                	mov    eax,DWORD PTR [eax]
c000f527:	83 c0 24             	add    eax,0x24
c000f52a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f52c:	6a 00                	push   0x0
c000f52e:	68 ac ee 00 c0       	push   0xc000eeac
c000f533:	6a 09                	push   0x9
c000f535:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f538:	ff d0                	call   eax
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f540:	8b 00                	mov    eax,DWORD PTR [eax]
c000f542:	83 c0 24             	add    eax,0x24
c000f545:	8b 00                	mov    eax,DWORD PTR [eax]
c000f547:	6a 00                	push   0x0
c000f549:	68 ac ee 00 c0       	push   0xc000eeac
c000f54e:	6a 0a                	push   0xa
c000f550:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f553:	ff d0                	call   eax
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f55b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55d:	83 c0 24             	add    eax,0x24
c000f560:	8b 00                	mov    eax,DWORD PTR [eax]
c000f562:	6a 00                	push   0x0
c000f564:	68 ac ee 00 c0       	push   0xc000eeac
c000f569:	6a 0b                	push   0xb
c000f56b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f56e:	ff d0                	call   eax
c000f570:	83 c4 10             	add    esp,0x10
c000f573:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f576:	8b 00                	mov    eax,DWORD PTR [eax]
c000f578:	83 c0 24             	add    eax,0x24
c000f57b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f57d:	6a 00                	push   0x0
c000f57f:	68 ac ee 00 c0       	push   0xc000eeac
c000f584:	6a 0c                	push   0xc
c000f586:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f589:	ff d0                	call   eax
c000f58b:	83 c4 10             	add    esp,0x10
c000f58e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f591:	8b 00                	mov    eax,DWORD PTR [eax]
c000f593:	83 c0 24             	add    eax,0x24
c000f596:	8b 00                	mov    eax,DWORD PTR [eax]
c000f598:	6a 00                	push   0x0
c000f59a:	68 24 ee 00 c0       	push   0xc000ee24
c000f59f:	6a 0d                	push   0xd
c000f5a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5a4:	ff d0                	call   eax
c000f5a6:	83 c4 10             	add    esp,0x10
c000f5a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ae:	83 c0 24             	add    eax,0x24
c000f5b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b3:	6a 00                	push   0x0
c000f5b5:	68 5d ee 00 c0       	push   0xc000ee5d
c000f5ba:	6a 0e                	push   0xe
c000f5bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5bf:	ff d0                	call   eax
c000f5c1:	83 c4 10             	add    esp,0x10
c000f5c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c9:	83 c0 24             	add    eax,0x24
c000f5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 ac ee 00 c0       	push   0xc000eeac
c000f5d5:	6a 0f                	push   0xf
c000f5d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5da:	ff d0                	call   eax
c000f5dc:	83 c4 10             	add    esp,0x10
c000f5df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5e4:	83 c0 24             	add    eax,0x24
c000f5e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5e9:	6a 00                	push   0x0
c000f5eb:	68 ac ee 00 c0       	push   0xc000eeac
c000f5f0:	6a 10                	push   0x10
c000f5f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5f5:	ff d0                	call   eax
c000f5f7:	83 c4 10             	add    esp,0x10
c000f5fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ff:	83 c0 24             	add    eax,0x24
c000f602:	8b 00                	mov    eax,DWORD PTR [eax]
c000f604:	6a 00                	push   0x0
c000f606:	68 ac ee 00 c0       	push   0xc000eeac
c000f60b:	6a 11                	push   0x11
c000f60d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f610:	ff d0                	call   eax
c000f612:	83 c4 10             	add    esp,0x10
c000f615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f618:	8b 00                	mov    eax,DWORD PTR [eax]
c000f61a:	83 c0 24             	add    eax,0x24
c000f61d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f61f:	6a 00                	push   0x0
c000f621:	68 ac ee 00 c0       	push   0xc000eeac
c000f626:	6a 12                	push   0x12
c000f628:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f62b:	ff d0                	call   eax
c000f62d:	83 c4 10             	add    esp,0x10
c000f630:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f633:	8b 00                	mov    eax,DWORD PTR [eax]
c000f635:	83 c0 24             	add    eax,0x24
c000f638:	8b 00                	mov    eax,DWORD PTR [eax]
c000f63a:	6a 00                	push   0x0
c000f63c:	68 ac ee 00 c0       	push   0xc000eeac
c000f641:	6a 13                	push   0x13
c000f643:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f646:	ff d0                	call   eax
c000f648:	83 c4 10             	add    esp,0x10
c000f64b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f64e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f650:	83 c0 24             	add    eax,0x24
c000f653:	8b 00                	mov    eax,DWORD PTR [eax]
c000f655:	6a 00                	push   0x0
c000f657:	68 ac ee 00 c0       	push   0xc000eeac
c000f65c:	6a 14                	push   0x14
c000f65e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f661:	ff d0                	call   eax
c000f663:	83 c4 10             	add    esp,0x10
c000f666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f669:	8b 00                	mov    eax,DWORD PTR [eax]
c000f66b:	83 c0 24             	add    eax,0x24
c000f66e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f670:	6a 00                	push   0x0
c000f672:	68 ac ee 00 c0       	push   0xc000eeac
c000f677:	6a 1e                	push   0x1e
c000f679:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f67c:	ff d0                	call   eax
c000f67e:	83 c4 10             	add    esp,0x10
c000f681:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f684:	8b 00                	mov    eax,DWORD PTR [eax]
c000f686:	83 c0 24             	add    eax,0x24
c000f689:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68b:	6a 00                	push   0x0
c000f68d:	68 1b 65 01 c0       	push   0xc001651b
c000f692:	6a 60                	push   0x60
c000f694:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f697:	ff d0                	call   eax
c000f699:	83 c4 10             	add    esp,0x10
c000f69c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f69f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f6a2:	c9                   	leave  
c000f6a3:	c3                   	ret    

c000f6a4 <InterruptController::convertLegacyIRQNumber(int)>:
c000f6a4:	55                   	push   ebp
c000f6a5:	89 e5                	mov    ebp,esp
c000f6a7:	83 ec 08             	sub    esp,0x8
c000f6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6ad:	83 ec 0c             	sub    esp,0xc
c000f6b0:	50                   	push   eax
c000f6b1:	e8 fc ea ff ff       	call   c000e1b2 <Device::getName()>
c000f6b6:	83 c4 10             	add    esp,0x10
c000f6b9:	8a 00                	mov    al,BYTE PTR [eax]
c000f6bb:	3c 41                	cmp    al,0x41
c000f6bd:	0f 94 c0             	sete   al
c000f6c0:	84 c0                	test   al,al
c000f6c2:	74 28                	je     c000f6ec <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6c4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f6c8:	7f 12                	jg     c000f6dc <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f6ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6cd:	05 80 58 02 c0       	add    eax,0xc0025880
c000f6d2:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d4:	0f b6 c0             	movzx  eax,al
c000f6d7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f6da:	eb 10                	jmp    c000f6ec <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6dc:	83 ec 0c             	sub    esp,0xc
c000f6df:	68 20 36 02 c0       	push   0xc0023620
c000f6e4:	e8 22 4c 00 00       	call   c001430b <Krnl::panic(char const*)>
c000f6e9:	83 c4 10             	add    esp,0x10
c000f6ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6ef:	c9                   	leave  
c000f6f0:	c3                   	ret    
c000f6f1:	90                   	nop

c000f6f2 <startGUI(void*)>:
c000f6f2:	55                   	push   ebp
c000f6f3:	89 e5                	mov    ebp,esp
c000f6f5:	53                   	push   ebx
c000f6f6:	83 ec 04             	sub    esp,0x4
c000f6f9:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f6fe:	48                   	dec    eax
c000f6ff:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000f704:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f709:	85 c0                	test   eax,eax
c000f70b:	75 01                	jne    c000f70e <startGUI(void*)+0x1c>
c000f70d:	fb                   	sti    
c000f70e:	8b 1d 88 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026188
c000f714:	83 ec 08             	sub    esp,0x8
c000f717:	6a 01                	push   0x1
c000f719:	68 a0 36 02 c0       	push   0xc00236a0
c000f71e:	e8 d3 7d 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c000f723:	83 c4 10             	add    esp,0x10
c000f726:	83 ec 08             	sub    esp,0x8
c000f729:	53                   	push   ebx
c000f72a:	50                   	push   eax
c000f72b:	e8 f7 7f 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c000f730:	83 c4 10             	add    esp,0x10
c000f733:	8b 1d 88 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026188
c000f739:	83 ec 08             	sub    esp,0x8
c000f73c:	6a 01                	push   0x1
c000f73e:	68 ba 36 02 c0       	push   0xc00236ba
c000f743:	e8 ae 7d 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c000f748:	83 c4 10             	add    esp,0x10
c000f74b:	83 ec 08             	sub    esp,0x8
c000f74e:	53                   	push   ebx
c000f74f:	50                   	push   eax
c000f750:	e8 d2 7f 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c000f755:	83 c4 10             	add    esp,0x10
c000f758:	90                   	nop
c000f759:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f75c:	c9                   	leave  
c000f75d:	c3                   	ret    

c000f75e <startGUIVESA(void*)>:
c000f75e:	55                   	push   ebp
c000f75f:	89 e5                	mov    ebp,esp
c000f761:	53                   	push   ebx
c000f762:	83 ec 04             	sub    esp,0x4
c000f765:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f76a:	48                   	dec    eax
c000f76b:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000f770:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f775:	85 c0                	test   eax,eax
c000f777:	75 01                	jne    c000f77a <startGUIVESA(void*)+0x1c>
c000f779:	fb                   	sti    
c000f77a:	8b 1d 88 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026188
c000f780:	83 ec 08             	sub    esp,0x8
c000f783:	6a 01                	push   0x1
c000f785:	68 d4 36 02 c0       	push   0xc00236d4
c000f78a:	e8 67 7d 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c000f78f:	83 c4 10             	add    esp,0x10
c000f792:	83 ec 08             	sub    esp,0x8
c000f795:	53                   	push   ebx
c000f796:	50                   	push   eax
c000f797:	e8 8b 7f 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c000f79c:	83 c4 10             	add    esp,0x10
c000f79f:	8b 1d 88 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026188
c000f7a5:	83 ec 08             	sub    esp,0x8
c000f7a8:	6a 01                	push   0x1
c000f7aa:	68 ba 36 02 c0       	push   0xc00236ba
c000f7af:	e8 42 7d 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c000f7b4:	83 c4 10             	add    esp,0x10
c000f7b7:	83 ec 08             	sub    esp,0x8
c000f7ba:	53                   	push   ebx
c000f7bb:	50                   	push   eax
c000f7bc:	e8 66 7f 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c000f7c1:	83 c4 10             	add    esp,0x10
c000f7c4:	90                   	nop
c000f7c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7c8:	c9                   	leave  
c000f7c9:	c3                   	ret    

c000f7ca <sendKeyToTerminal(unsigned char)>:
c000f7ca:	55                   	push   ebp
c000f7cb:	89 e5                	mov    ebp,esp
c000f7cd:	83 ec 28             	sub    esp,0x28
c000f7d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f7d6:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c000f7db:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f7df:	83 ec 08             	sub    esp,0x8
c000f7e2:	52                   	push   edx
c000f7e3:	50                   	push   eax
c000f7e4:	e8 3b b7 ff ff       	call   c000af24 <VgaText::receiveKey(unsigned char)>
c000f7e9:	83 c4 10             	add    esp,0x10
c000f7ec:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f7f0:	0f 85 8f 00 00 00    	jne    c000f885 <sendKeyToTerminal(unsigned char)+0xbb>
c000f7f6:	fa                   	cli    
c000f7f7:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f7fc:	40                   	inc    eax
c000f7fd:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000f802:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c000f807:	40                   	inc    eax
c000f808:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c000f80d:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c000f812:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f815:	c7 05 e0 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00262e0,0x0
c000f81f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f823:	74 1f                	je     c000f844 <sendKeyToTerminal(unsigned char)+0x7a>
c000f825:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f828:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f82b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f82e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f831:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f834:	83 ec 0c             	sub    esp,0xc
c000f837:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f83a:	e8 59 8b 00 00       	call   c0018398 <unblockTask(ThreadControlBlock*)>
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	eb db                	jmp    c000f81f <sendKeyToTerminal(unsigned char)+0x55>
c000f844:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c000f849:	48                   	dec    eax
c000f84a:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c000f84f:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c000f854:	85 c0                	test   eax,eax
c000f856:	75 18                	jne    c000f870 <sendKeyToTerminal(unsigned char)+0xa6>
c000f858:	a1 40 76 02 c0       	mov    eax,ds:0xc0027640
c000f85d:	85 c0                	test   eax,eax
c000f85f:	74 0f                	je     c000f870 <sendKeyToTerminal(unsigned char)+0xa6>
c000f861:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c000f86b:	e8 6c 86 00 00       	call   c0017edc <schedule()>
c000f870:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f875:	48                   	dec    eax
c000f876:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000f87b:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000f880:	85 c0                	test   eax,eax
c000f882:	75 01                	jne    c000f885 <sendKeyToTerminal(unsigned char)+0xbb>
c000f884:	fb                   	sti    
c000f885:	90                   	nop
c000f886:	c9                   	leave  
c000f887:	c3                   	ret    

c000f888 <sendKeyboardToken(KeyboardToken)>:
c000f888:	55                   	push   ebp
c000f889:	89 e5                	mov    ebp,esp
c000f88b:	83 ec 18             	sub    esp,0x18
c000f88e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f894:	0f b7 c0             	movzx  eax,ax
c000f897:	83 f2 01             	xor    edx,0x1
c000f89a:	88 90 00 63 02 c0    	mov    BYTE PTR [eax-0x3ffd9d00],dl
c000f8a0:	a1 e8 62 02 c0       	mov    eax,ds:0xc00262e8
c000f8a5:	85 c0                	test   eax,eax
c000f8a7:	74 24                	je     c000f8cd <sendKeyboardToken(KeyboardToken)+0x45>
c000f8a9:	8b 0d e8 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262e8
c000f8af:	83 ec 04             	sub    esp,0x4
c000f8b2:	68 00 63 02 c0       	push   0xc0026300
c000f8b7:	83 ec 08             	sub    esp,0x8
c000f8ba:	89 e2                	mov    edx,esp
c000f8bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8bf:	89 02                	mov    DWORD PTR [edx],eax
c000f8c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f8c4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f8c8:	ff d1                	call   ecx
c000f8ca:	83 c4 10             	add    esp,0x10
c000f8cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d0:	66 3d 03 02          	cmp    ax,0x203
c000f8d4:	75 07                	jne    c000f8dd <sendKeyboardToken(KeyboardToken)+0x55>
c000f8d6:	a0 00 64 02 c0       	mov    al,ds:0xc0026400
c000f8db:	84 c0                	test   al,al
c000f8dd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f8e1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f8e4:	a0 08 67 02 c0       	mov    al,ds:0xc0026708
c000f8e9:	38 c2                	cmp    dl,al
c000f8eb:	74 1c                	je     c000f909 <sendKeyboardToken(KeyboardToken)+0x81>
c000f8ed:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f8f0:	a2 08 67 02 c0       	mov    ds:0xc0026708,al
c000f8f5:	a0 08 67 02 c0       	mov    al,ds:0xc0026708
c000f8fa:	0f b6 c0             	movzx  eax,al
c000f8fd:	83 ec 0c             	sub    esp,0xc
c000f900:	50                   	push   eax
c000f901:	e8 5e ac ff ff       	call   c000a564 <setTerminalScrollLock(bool)>
c000f906:	83 c4 10             	add    esp,0x10
c000f909:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f90c:	84 c0                	test   al,al
c000f90e:	0f 84 ae 00 00 00    	je     c000f9c2 <sendKeyboardToken(KeyboardToken)+0x13a>
c000f914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f917:	66 3d 10 03          	cmp    ax,0x310
c000f91b:	75 06                	jne    c000f923 <sendKeyboardToken(KeyboardToken)+0x9b>
c000f91d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f926:	66 3d 11 03          	cmp    ax,0x311
c000f92a:	75 06                	jne    c000f932 <sendKeyboardToken(KeyboardToken)+0xaa>
c000f92c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f935:	66 3d 12 03          	cmp    ax,0x312
c000f939:	75 06                	jne    c000f941 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f93b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f944:	66 3d 13 03          	cmp    ax,0x313
c000f948:	75 06                	jne    c000f950 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f94a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f953:	66 3d 14 03          	cmp    ax,0x314
c000f957:	75 06                	jne    c000f95f <sendKeyboardToken(KeyboardToken)+0xd7>
c000f959:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f95f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f962:	66 3d 15 03          	cmp    ax,0x315
c000f966:	75 06                	jne    c000f96e <sendKeyboardToken(KeyboardToken)+0xe6>
c000f968:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f96e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f971:	66 3d 16 03          	cmp    ax,0x316
c000f975:	75 06                	jne    c000f97d <sendKeyboardToken(KeyboardToken)+0xf5>
c000f977:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f97d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f980:	66 3d 17 03          	cmp    ax,0x317
c000f984:	75 06                	jne    c000f98c <sendKeyboardToken(KeyboardToken)+0x104>
c000f986:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f98c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f98f:	66 3d 18 03          	cmp    ax,0x318
c000f993:	75 06                	jne    c000f99b <sendKeyboardToken(KeyboardToken)+0x113>
c000f995:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f99b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f99e:	66 3d 19 03          	cmp    ax,0x319
c000f9a2:	75 06                	jne    c000f9aa <sendKeyboardToken(KeyboardToken)+0x122>
c000f9a4:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f9aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ad:	66 3d 1a 03          	cmp    ax,0x31a
c000f9b1:	0f 85 c9 00 00 00    	jne    c000fa80 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9b7:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f9bd:	e9 be 00 00 00       	jmp    c000fa80 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c5:	66 3d 10 03          	cmp    ax,0x310
c000f9c9:	75 0a                	jne    c000f9d5 <sendKeyboardToken(KeyboardToken)+0x14d>
c000f9cb:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f9d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d8:	66 3d 11 03          	cmp    ax,0x311
c000f9dc:	75 0a                	jne    c000f9e8 <sendKeyboardToken(KeyboardToken)+0x160>
c000f9de:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f9e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9eb:	66 3d 12 03          	cmp    ax,0x312
c000f9ef:	75 0a                	jne    c000f9fb <sendKeyboardToken(KeyboardToken)+0x173>
c000f9f1:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f9f7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9fe:	66 3d 13 03          	cmp    ax,0x313
c000fa02:	75 0a                	jne    c000fa0e <sendKeyboardToken(KeyboardToken)+0x186>
c000fa04:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fa0a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa11:	66 3d 14 03          	cmp    ax,0x314
c000fa15:	75 0a                	jne    c000fa21 <sendKeyboardToken(KeyboardToken)+0x199>
c000fa17:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fa1d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa24:	66 3d 15 03          	cmp    ax,0x315
c000fa28:	75 0a                	jne    c000fa34 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fa2a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fa30:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa37:	66 3d 16 03          	cmp    ax,0x316
c000fa3b:	75 0a                	jne    c000fa47 <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fa3d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fa43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa4a:	66 3d 17 03          	cmp    ax,0x317
c000fa4e:	75 0a                	jne    c000fa5a <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fa50:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fa56:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa5d:	66 3d 18 03          	cmp    ax,0x318
c000fa61:	75 0a                	jne    c000fa6d <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fa63:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fa69:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa70:	66 3d 19 03          	cmp    ax,0x319
c000fa74:	75 0a                	jne    c000fa80 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa76:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fa7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa83:	66 3d 00 02          	cmp    ax,0x200
c000fa87:	75 2c                	jne    c000fab5 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa89:	a0 00 67 02 c0       	mov    al,ds:0xc0026700
c000fa8e:	83 f0 01             	xor    eax,0x1
c000fa91:	84 c0                	test   al,al
c000fa93:	74 20                	je     c000fab5 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa95:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000fa9a:	6a 01                	push   0x1
c000fa9c:	6a 00                	push   0x0
c000fa9e:	68 f2 f6 00 c0       	push   0xc000f6f2
c000faa3:	50                   	push   eax
c000faa4:	e8 17 82 00 00       	call   c0017cc0 <Process::createThread(void (*)(void*), void*, int)>
c000faa9:	83 c4 10             	add    esp,0x10
c000faac:	c6 05 00 67 02 c0 01 	mov    BYTE PTR ds:0xc0026700,0x1
c000fab3:	eb 33                	jmp    c000fae8 <sendKeyboardToken(KeyboardToken)+0x260>
c000fab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab8:	66 3d 01 02          	cmp    ax,0x201
c000fabc:	75 2a                	jne    c000fae8 <sendKeyboardToken(KeyboardToken)+0x260>
c000fabe:	a0 00 67 02 c0       	mov    al,ds:0xc0026700
c000fac3:	83 f0 01             	xor    eax,0x1
c000fac6:	84 c0                	test   al,al
c000fac8:	74 1e                	je     c000fae8 <sendKeyboardToken(KeyboardToken)+0x260>
c000faca:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c000facf:	6a 01                	push   0x1
c000fad1:	6a 00                	push   0x0
c000fad3:	68 5e f7 00 c0       	push   0xc000f75e
c000fad8:	50                   	push   eax
c000fad9:	e8 e2 81 00 00       	call   c0017cc0 <Process::createThread(void (*)(void*), void*, int)>
c000fade:	83 c4 10             	add    esp,0x10
c000fae1:	c6 05 00 67 02 c0 01 	mov    BYTE PTR ds:0xc0026700,0x1
c000fae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faeb:	66 3d 1d 03          	cmp    ax,0x31d
c000faef:	75 06                	jne    c000faf7 <sendKeyboardToken(KeyboardToken)+0x26f>
c000faf1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000faf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fafa:	66 3d 1c 03          	cmp    ax,0x31c
c000fafe:	75 06                	jne    c000fb06 <sendKeyboardToken(KeyboardToken)+0x27e>
c000fb00:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fb06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb09:	66 3d 1b 03          	cmp    ax,0x31b
c000fb0d:	75 06                	jne    c000fb15 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb0f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fb15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb18:	66 3d 1e 03          	cmp    ax,0x31e
c000fb1c:	75 06                	jne    c000fb24 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fb1e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fb24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb27:	66 3d 1f 03          	cmp    ax,0x31f
c000fb2b:	75 06                	jne    c000fb33 <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fb2d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fb33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb36:	66 3d 1a 03          	cmp    ax,0x31a
c000fb3a:	75 06                	jne    c000fb42 <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fb3c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fb42:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb46:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb49:	83 f0 01             	xor    eax,0x1
c000fb4c:	84 c0                	test   al,al
c000fb4e:	74 77                	je     c000fbc7 <sendKeyboardToken(KeyboardToken)+0x33f>
c000fb50:	a0 01 64 02 c0       	mov    al,ds:0xc0026401
c000fb55:	84 c0                	test   al,al
c000fb57:	74 41                	je     c000fb9a <sendKeyboardToken(KeyboardToken)+0x312>
c000fb59:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb5d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fb61:	74 2b                	je     c000fb8e <sendKeyboardToken(KeyboardToken)+0x306>
c000fb63:	8b 15 04 67 02 c0    	mov    edx,DWORD PTR ds:0xc0026704
c000fb69:	89 d0                	mov    eax,edx
c000fb6b:	c1 e0 02             	shl    eax,0x2
c000fb6e:	01 d0                	add    eax,edx
c000fb70:	01 c0                	add    eax,eax
c000fb72:	a3 04 67 02 c0       	mov    ds:0xc0026704,eax
c000fb77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb7a:	0f b7 c0             	movzx  eax,ax
c000fb7d:	8d 50 d0             	lea    edx,[eax-0x30]
c000fb80:	a1 04 67 02 c0       	mov    eax,ds:0xc0026704
c000fb85:	01 d0                	add    eax,edx
c000fb87:	a3 04 67 02 c0       	mov    ds:0xc0026704,eax
c000fb8c:	eb 6d                	jmp    c000fbfb <sendKeyboardToken(KeyboardToken)+0x373>
c000fb8e:	c7 05 04 67 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026704,0x0
c000fb98:	eb 61                	jmp    c000fbfb <sendKeyboardToken(KeyboardToken)+0x373>
c000fb9a:	a1 04 67 02 c0       	mov    eax,ds:0xc0026704
c000fb9f:	85 c0                	test   eax,eax
c000fba1:	74 18                	je     c000fbbb <sendKeyboardToken(KeyboardToken)+0x333>
c000fba3:	a1 04 67 02 c0       	mov    eax,ds:0xc0026704
c000fba8:	0f b6 c0             	movzx  eax,al
c000fbab:	83 ec 0c             	sub    esp,0xc
c000fbae:	50                   	push   eax
c000fbaf:	e8 16 fc ff ff       	call   c000f7ca <sendKeyToTerminal(unsigned char)>
c000fbb4:	83 c4 10             	add    esp,0x10
c000fbb7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbbb:	c7 05 04 67 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026704,0x0
c000fbc5:	eb 34                	jmp    c000fbfb <sendKeyboardToken(KeyboardToken)+0x373>
c000fbc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbca:	66 3d 01 01          	cmp    ax,0x101
c000fbce:	75 2b                	jne    c000fbfb <sendKeyboardToken(KeyboardToken)+0x373>
c000fbd0:	a1 04 67 02 c0       	mov    eax,ds:0xc0026704
c000fbd5:	85 c0                	test   eax,eax
c000fbd7:	74 18                	je     c000fbf1 <sendKeyboardToken(KeyboardToken)+0x369>
c000fbd9:	a1 04 67 02 c0       	mov    eax,ds:0xc0026704
c000fbde:	0f b6 c0             	movzx  eax,al
c000fbe1:	83 ec 0c             	sub    esp,0xc
c000fbe4:	50                   	push   eax
c000fbe5:	e8 e0 fb ff ff       	call   c000f7ca <sendKeyToTerminal(unsigned char)>
c000fbea:	83 c4 10             	add    esp,0x10
c000fbed:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbf1:	c7 05 04 67 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026704,0x0
c000fbfb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fbfe:	83 f0 01             	xor    eax,0x1
c000fc01:	84 c0                	test   al,al
c000fc03:	74 4c                	je     c000fc51 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc05:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc08:	83 f0 01             	xor    eax,0x1
c000fc0b:	84 c0                	test   al,al
c000fc0d:	74 42                	je     c000fc51 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc0f:	a0 00 64 02 c0       	mov    al,ds:0xc0026400
c000fc14:	83 f0 01             	xor    eax,0x1
c000fc17:	84 c0                	test   al,al
c000fc19:	74 36                	je     c000fc51 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1e:	66 83 f8 1f          	cmp    ax,0x1f
c000fc22:	76 09                	jbe    c000fc2d <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fc24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc27:	66 83 f8 7e          	cmp    ax,0x7e
c000fc2b:	76 12                	jbe    c000fc3f <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc30:	66 83 f8 0a          	cmp    ax,0xa
c000fc34:	74 09                	je     c000fc3f <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc39:	66 83 f8 08          	cmp    ax,0x8
c000fc3d:	75 12                	jne    c000fc51 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc42:	0f b6 c0             	movzx  eax,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	50                   	push   eax
c000fc49:	e8 7c fb ff ff       	call   c000f7ca <sendKeyToTerminal(unsigned char)>
c000fc4e:	83 c4 10             	add    esp,0x10
c000fc51:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc54:	83 f0 01             	xor    eax,0x1
c000fc57:	84 c0                	test   al,al
c000fc59:	74 4f                	je     c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc5b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc5e:	83 f0 01             	xor    eax,0x1
c000fc61:	84 c0                	test   al,al
c000fc63:	74 45                	je     c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc65:	a0 00 64 02 c0       	mov    al,ds:0xc0026400
c000fc6a:	84 c0                	test   al,al
c000fc6c:	74 3c                	je     c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc71:	66 83 f8 3f          	cmp    ax,0x3f
c000fc75:	76 33                	jbe    c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc7a:	66 83 f8 7f          	cmp    ax,0x7f
c000fc7e:	77 2a                	ja     c000fcaa <sendKeyboardToken(KeyboardToken)+0x422>
c000fc80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc83:	88 c2                	mov    dl,al
c000fc85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc88:	66 83 f8 5f          	cmp    ax,0x5f
c000fc8c:	76 04                	jbe    c000fc92 <sendKeyboardToken(KeyboardToken)+0x40a>
c000fc8e:	b0 20                	mov    al,0x20
c000fc90:	eb 02                	jmp    c000fc94 <sendKeyboardToken(KeyboardToken)+0x40c>
c000fc92:	b0 00                	mov    al,0x0
c000fc94:	29 c2                	sub    edx,eax
c000fc96:	88 d0                	mov    al,dl
c000fc98:	83 e8 40             	sub    eax,0x40
c000fc9b:	0f b6 c0             	movzx  eax,al
c000fc9e:	83 ec 0c             	sub    esp,0xc
c000fca1:	50                   	push   eax
c000fca2:	e8 23 fb ff ff       	call   c000f7ca <sendKeyToTerminal(unsigned char)>
c000fca7:	83 c4 10             	add    esp,0x10
c000fcaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcad:	66 3d 00 03          	cmp    ax,0x300
c000fcb1:	75 0f                	jne    c000fcc2 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcb3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcb6:	83 f0 01             	xor    eax,0x1
c000fcb9:	84 c0                	test   al,al
c000fcbb:	74 05                	je     c000fcc2 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcbd:	e8 13 ac ff ff       	call   c000a8d5 <doTerminalCycle()>
c000fcc2:	90                   	nop
c000fcc3:	c9                   	leave  
c000fcc4:	c3                   	ret    

c000fcc5 <clearInternalKeybuffer(VgaText*)>:
c000fcc5:	55                   	push   ebp
c000fcc6:	89 e5                	mov    ebp,esp
c000fcc8:	83 ec 08             	sub    esp,0x8
c000fccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcce:	05 98 01 00 00       	add    eax,0x198
c000fcd3:	83 ec 0c             	sub    esp,0xc
c000fcd6:	50                   	push   eax
c000fcd7:	e8 c4 09 ff ff       	call   c00006a0 <strlen>
c000fcdc:	83 c4 10             	add    esp,0x10
c000fcdf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fce2:	81 c2 98 01 00 00    	add    edx,0x198
c000fce8:	83 ec 04             	sub    esp,0x4
c000fceb:	50                   	push   eax
c000fcec:	6a 00                	push   0x0
c000fcee:	52                   	push   edx
c000fcef:	e8 90 09 ff ff       	call   c0000684 <memset>
c000fcf4:	83 c4 10             	add    esp,0x10
c000fcf7:	90                   	nop
c000fcf8:	c9                   	leave  
c000fcf9:	c3                   	ret    

c000fcfa <readKeyboard(VgaText*, char*, unsigned long)>:
c000fcfa:	55                   	push   ebp
c000fcfb:	89 e5                	mov    ebp,esp
c000fcfd:	83 ec 18             	sub    esp,0x18
c000fd00:	a1 e8 62 02 c0       	mov    eax,ds:0xc00262e8
c000fd05:	85 c0                	test   eax,eax
c000fd07:	74 2a                	je     c000fd33 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fd09:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd0f:	8b 0d e8 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262e8
c000fd15:	83 ec 04             	sub    esp,0x4
c000fd18:	68 00 63 02 c0       	push   0xc0026300
c000fd1d:	83 ec 08             	sub    esp,0x8
c000fd20:	89 e2                	mov    edx,esp
c000fd22:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fd25:	89 02                	mov    DWORD PTR [edx],eax
c000fd27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fd2a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fd2e:	ff d1                	call   ecx
c000fd30:	83 c4 10             	add    esp,0x10
c000fd33:	fb                   	sti    
c000fd34:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fd3b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fd3f:	0f 84 a1 00 00 00    	je     c000fde6 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd48:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd4e:	84 c0                	test   al,al
c000fd50:	75 28                	jne    c000fd7a <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fd52:	fa                   	cli    
c000fd53:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000fd58:	40                   	inc    eax
c000fd59:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000fd5e:	e8 79 81 00 00       	call   c0017edc <schedule()>
c000fd63:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000fd68:	48                   	dec    eax
c000fd69:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c000fd6e:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c000fd73:	85 c0                	test   eax,eax
c000fd75:	75 ce                	jne    c000fd45 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd77:	fb                   	sti    
c000fd78:	eb cb                	jmp    c000fd45 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd7d:	8d 50 01             	lea    edx,[eax+0x1]
c000fd80:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fd83:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd86:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fd8c:	88 10                	mov    BYTE PTR [eax],dl
c000fd8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd91:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd97:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fd9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd9d:	05 98 01 00 00       	add    eax,0x198
c000fda2:	83 ec 0c             	sub    esp,0xc
c000fda5:	50                   	push   eax
c000fda6:	e8 f5 08 ff ff       	call   c00006a0 <strlen>
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdb1:	81 c2 98 01 00 00    	add    edx,0x198
c000fdb7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fdba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdbd:	81 c2 98 01 00 00    	add    edx,0x198
c000fdc3:	83 ec 04             	sub    esp,0x4
c000fdc6:	50                   	push   eax
c000fdc7:	51                   	push   ecx
c000fdc8:	52                   	push   edx
c000fdc9:	e8 ee 07 ff ff       	call   c00005bc <memmove>
c000fdce:	83 c4 10             	add    esp,0x10
c000fdd1:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fdd4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fdd7:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fddb:	0f 85 5a ff ff ff    	jne    c000fd3b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fde1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde4:	eb 03                	jmp    c000fde9 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fde6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde9:	c9                   	leave  
c000fdea:	c3                   	ret    
c000fdeb:	90                   	nop

c000fdec <Keyboard::Keyboard(char const*)>:
c000fdec:	83 ec 0c             	sub    esp,0xc
c000fdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf3:	83 ec 08             	sub    esp,0x8
c000fdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdfa:	50                   	push   eax
c000fdfb:	e8 b6 e2 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000fe00:	83 c4 10             	add    esp,0x10
c000fe03:	ba f8 36 02 c0       	mov    edx,0xc00236f8
c000fe08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0c:	89 10                	mov    DWORD PTR [eax],edx
c000fe0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe12:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fe1c:	c6 05 e4 62 02 c0 01 	mov    BYTE PTR ds:0xc00262e4,0x1
c000fe23:	90                   	nop
c000fe24:	83 c4 0c             	add    esp,0xc
c000fe27:	c3                   	ret    

c000fe28 <Keyboard::~Keyboard()>:
c000fe28:	83 ec 0c             	sub    esp,0xc
c000fe2b:	ba f8 36 02 c0       	mov    edx,0xc00236f8
c000fe30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe34:	89 10                	mov    DWORD PTR [eax],edx
c000fe36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe3a:	83 ec 0c             	sub    esp,0xc
c000fe3d:	50                   	push   eax
c000fe3e:	e8 3d df ff ff       	call   c000dd80 <Device::~Device()>
c000fe43:	83 c4 10             	add    esp,0x10
c000fe46:	90                   	nop
c000fe47:	83 c4 0c             	add    esp,0xc
c000fe4a:	c3                   	ret    
c000fe4b:	90                   	nop

c000fe4c <Keyboard::~Keyboard()>:
c000fe4c:	83 ec 0c             	sub    esp,0xc
c000fe4f:	83 ec 0c             	sub    esp,0xc
c000fe52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe56:	e8 cd ff ff ff       	call   c000fe28 <Keyboard::~Keyboard()>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	83 ec 08             	sub    esp,0x8
c000fe61:	68 5c 01 00 00       	push   0x15c
c000fe66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe6a:	e8 1b cb ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	83 c4 0c             	add    esp,0xc
c000fe75:	c3                   	ret    

c000fe76 <LogicalDisk::close(int, int, void*)>:
c000fe76:	83 c8 ff             	or     eax,0xffffffff
c000fe79:	c3                   	ret    

c000fe7a <LogicalDisk::~LogicalDisk()>:
c000fe7a:	83 ec 0c             	sub    esp,0xc
c000fe7d:	ba 70 37 02 c0       	mov    edx,0xc0023770
c000fe82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe86:	89 10                	mov    DWORD PTR [eax],edx
c000fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8c:	83 ec 0c             	sub    esp,0xc
c000fe8f:	50                   	push   eax
c000fe90:	e8 eb de ff ff       	call   c000dd80 <Device::~Device()>
c000fe95:	83 c4 10             	add    esp,0x10
c000fe98:	90                   	nop
c000fe99:	83 c4 0c             	add    esp,0xc
c000fe9c:	c3                   	ret    
c000fe9d:	90                   	nop

c000fe9e <LogicalDisk::~LogicalDisk()>:
c000fe9e:	83 ec 0c             	sub    esp,0xc
c000fea1:	83 ec 0c             	sub    esp,0xc
c000fea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fea8:	e8 cd ff ff ff       	call   c000fe7a <LogicalDisk::~LogicalDisk()>
c000fead:	83 c4 10             	add    esp,0x10
c000feb0:	83 ec 08             	sub    esp,0x8
c000feb3:	68 74 01 00 00       	push   0x174
c000feb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000febc:	e8 c9 ca ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c000fec1:	83 c4 10             	add    esp,0x10
c000fec4:	83 c4 0c             	add    esp,0xc
c000fec7:	c3                   	ret    

c000fec8 <LogicalDisk::open(int, int, void*)>:
c000fec8:	83 ec 18             	sub    esp,0x18
c000fecb:	68 24 37 02 c0       	push   0xc0023724
c000fed0:	e8 36 44 00 00       	call   c001430b <Krnl::panic(char const*)>
c000fed5:	83 c8 ff             	or     eax,0xffffffff
c000fed8:	83 c4 1c             	add    esp,0x1c
c000fedb:	c3                   	ret    

c000fedc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000fedc:	53                   	push   ebx
c000fedd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fee9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000feef:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000fef5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000fefb:	77 10                	ja     c000ff0d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000fefd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ff03:	89 d3                	mov    ebx,edx
c000ff05:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ff0b:	72 05                	jb     c000ff12 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff0d:	83 c8 ff             	or     eax,0xffffffff
c000ff10:	89 c2                	mov    edx,eax
c000ff12:	5b                   	pop    ebx
c000ff13:	c3                   	ret    

c000ff14 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ff14:	56                   	push   esi
c000ff15:	83 c8 ff             	or     eax,0xffffffff
c000ff18:	53                   	push   ebx
c000ff19:	89 c2                	mov    edx,eax
c000ff1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff1f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ff23:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ff2d:	77 27                	ja     c000ff56 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff2f:	89 d8                	mov    eax,ebx
c000ff31:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ff37:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ff3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff42:	89 c2                	mov    edx,eax
c000ff44:	73 10                	jae    c000ff56 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff46:	89 c8                	mov    eax,ecx
c000ff48:	89 da                	mov    edx,ebx
c000ff4a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ff50:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ff56:	5b                   	pop    ebx
c000ff57:	5e                   	pop    esi
c000ff58:	c3                   	ret    
c000ff59:	90                   	nop

c000ff5a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ff5a:	83 ec 1c             	sub    esp,0x1c
c000ff5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff71:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ff78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff80:	83 ec 08             	sub    esp,0x8
c000ff83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff87:	50                   	push   eax
c000ff88:	e8 29 e1 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	ba 70 37 02 c0       	mov    edx,0xc0023770
c000ff95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff99:	89 10                	mov    DWORD PTR [eax],edx
c000ff9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff9f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffaa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffb5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ffbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffcb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ffd1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ffd7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ffe2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ffe8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ffee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fff6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000fffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010000:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001000a:	90                   	nop
c001000b:	83 c4 1c             	add    esp,0x1c
c001000e:	c3                   	ret    
c001000f:	90                   	nop

c0010010 <LogicalDisk::assignDriveLetter()>:
c0010010:	55                   	push   ebp
c0010011:	57                   	push   edi
c0010012:	56                   	push   esi
c0010013:	53                   	push   ebx
c0010014:	83 ec 14             	sub    esp,0x14
c0010017:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001001b:	8b 3d 20 67 02 c0    	mov    edi,DWORD PTR ds:0xc0026720
c0010021:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010027:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001002b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010031:	8b 3d 24 67 02 c0    	mov    edi,DWORD PTR ds:0xc0026724
c0010037:	3c 01                	cmp    al,0x1
c0010039:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001003d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010041:	19 c0                	sbb    eax,eax
c0010043:	83 e0 02             	and    eax,0x2
c0010046:	83 c0 41             	add    eax,0x41
c0010049:	0f be e8             	movsx  ebp,al
c001004c:	3c 43                	cmp    al,0x43
c001004e:	75 10                	jne    c0010060 <LogicalDisk::assignDriveLetter()+0x50>
c0010050:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010057:	75 5d                	jne    c00100b6 <LogicalDisk::assignDriveLetter()+0xa6>
c0010059:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001005e:	75 56                	jne    c00100b6 <LogicalDisk::assignDriveLetter()+0xa6>
c0010060:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010063:	ba 01 00 00 00       	mov    edx,0x1
c0010068:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001006c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010070:	d3 e2                	shl    edx,cl
c0010072:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010076:	89 d7                	mov    edi,edx
c0010078:	89 d6                	mov    esi,edx
c001007a:	c1 ff 1f             	sar    edi,0x1f
c001007d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010081:	21 f9                	and    ecx,edi
c0010083:	09 d1                	or     ecx,edx
c0010085:	75 2f                	jne    c00100b6 <LogicalDisk::assignDriveLetter()+0xa6>
c0010087:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001008b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001008f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010095:	09 f2                	or     edx,esi
c0010097:	89 15 20 67 02 c0    	mov    DWORD PTR ds:0xc0026720,edx
c001009d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100a1:	09 fa                	or     edx,edi
c00100a3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00100a7:	89 15 24 67 02 c0    	mov    DWORD PTR ds:0xc0026724,edx
c00100ad:	89 1c bd 40 67 02 c0 	mov    DWORD PTR [edi*4-0x3ffd98c0],ebx
c00100b4:	eb 08                	jmp    c00100be <LogicalDisk::assignDriveLetter()+0xae>
c00100b6:	45                   	inc    ebp
c00100b7:	40                   	inc    eax
c00100b8:	3c 5b                	cmp    al,0x5b
c00100ba:	75 90                	jne    c001004c <LogicalDisk::assignDriveLetter()+0x3c>
c00100bc:	31 c0                	xor    eax,eax
c00100be:	83 c4 14             	add    esp,0x14
c00100c1:	5b                   	pop    ebx
c00100c2:	5e                   	pop    esi
c00100c3:	5f                   	pop    edi
c00100c4:	5d                   	pop    ebp
c00100c5:	c3                   	ret    

c00100c6 <LogicalDisk::mount()>:
c00100c6:	56                   	push   esi
c00100c7:	53                   	push   ebx
c00100c8:	53                   	push   ebx
c00100c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100cd:	8b 1d b4 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262b4
c00100d3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00100dd:	85 db                	test   ebx,ebx
c00100df:	74 27                	je     c0010108 <LogicalDisk::mount()+0x42>
c00100e1:	51                   	push   ecx
c00100e2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00100e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00100eb:	83 e8 41             	sub    eax,0x41
c00100ee:	50                   	push   eax
c00100ef:	56                   	push   esi
c00100f0:	53                   	push   ebx
c00100f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00100f4:	83 c4 10             	add    esp,0x10
c00100f7:	84 c0                	test   al,al
c00100f9:	74 08                	je     c0010103 <LogicalDisk::mount()+0x3d>
c00100fb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010101:	eb 07                	jmp    c001010a <LogicalDisk::mount()+0x44>
c0010103:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010106:	eb d5                	jmp    c00100dd <LogicalDisk::mount()+0x17>
c0010108:	31 c0                	xor    eax,eax
c001010a:	5a                   	pop    edx
c001010b:	5b                   	pop    ebx
c001010c:	5e                   	pop    esi
c001010d:	c3                   	ret    

c001010e <LogicalDisk::unmount()>:
c001010e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010112:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001011c:	c3                   	ret    
c001011d:	90                   	nop

c001011e <LogicalDisk::eject()>:
c001011e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010122:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010128:	8b 10                	mov    edx,DWORD PTR [eax]
c001012a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001012e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010131:	90                   	nop

c0010132 <LogicalDisk::unassignDriveLetter()>:
c0010132:	57                   	push   edi
c0010133:	56                   	push   esi
c0010134:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010138:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001013f:	84 c9                	test   cl,cl
c0010141:	75 0f                	jne    c0010152 <LogicalDisk::unassignDriveLetter()+0x20>
c0010143:	c7 44 24 0c 48 37 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023748
c001014b:	5e                   	pop    esi
c001014c:	5f                   	pop    edi
c001014d:	e9 b9 41 00 00       	jmp    c001430b <Krnl::panic(char const*)>
c0010152:	83 e9 41             	sub    ecx,0x41
c0010155:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001015c:	b8 01 00 00 00       	mov    eax,0x1
c0010161:	c7 04 8d 40 67 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd98c0],0x0
c001016c:	d3 e0                	shl    eax,cl
c001016e:	89 c7                	mov    edi,eax
c0010170:	f7 d0                	not    eax
c0010172:	c1 ff 1f             	sar    edi,0x1f
c0010175:	21 05 20 67 02 c0    	and    DWORD PTR ds:0xc0026720,eax
c001017b:	89 fe                	mov    esi,edi
c001017d:	f7 d6                	not    esi
c001017f:	21 35 24 67 02 c0    	and    DWORD PTR ds:0xc0026724,esi
c0010185:	5e                   	pop    esi
c0010186:	5f                   	pop    edi
c0010187:	c3                   	ret    

c0010188 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010188:	57                   	push   edi
c0010189:	56                   	push   esi
c001018a:	53                   	push   ebx
c001018b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001018f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010193:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010197:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001019b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101a1:	77 41                	ja     c00101e4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00101a3:	99                   	cdq    
c00101a4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00101aa:	01 c8                	add    eax,ecx
c00101ac:	11 da                	adc    edx,ebx
c00101ae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00101b4:	19 d7                	sbb    edi,edx
c00101b6:	72 33                	jb     c00101eb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00101b8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00101be:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00101c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101c8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00101cc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00101d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00101d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101dc:	5b                   	pop    ebx
c00101dd:	5e                   	pop    esi
c00101de:	5f                   	pop    edi
c00101df:	e9 e2 0a 00 00       	jmp    c0010cc6 <VCache::read(unsigned long long, int, void*)>
c00101e4:	b8 05 00 00 00       	mov    eax,0x5
c00101e9:	eb 05                	jmp    c00101f0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00101eb:	b8 07 00 00 00       	mov    eax,0x7
c00101f0:	5b                   	pop    ebx
c00101f1:	5e                   	pop    esi
c00101f2:	5f                   	pop    edi
c00101f3:	c3                   	ret    

c00101f4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00101f4:	57                   	push   edi
c00101f5:	56                   	push   esi
c00101f6:	53                   	push   ebx
c00101f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101ff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010207:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001020d:	77 41                	ja     c0010250 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001020f:	99                   	cdq    
c0010210:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010216:	01 c8                	add    eax,ecx
c0010218:	11 da                	adc    edx,ebx
c001021a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010220:	19 d7                	sbb    edi,edx
c0010222:	72 33                	jb     c0010257 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010224:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001022a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010230:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010234:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010238:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001023e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010244:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010248:	5b                   	pop    ebx
c0010249:	5e                   	pop    esi
c001024a:	5f                   	pop    edi
c001024b:	e9 7c 09 00 00       	jmp    c0010bcc <VCache::write(unsigned long long, int, void*)>
c0010250:	b8 05 00 00 00       	mov    eax,0x5
c0010255:	eb 05                	jmp    c001025c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010257:	b8 07 00 00 00       	mov    eax,0x7
c001025c:	5b                   	pop    ebx
c001025d:	5e                   	pop    esi
c001025e:	5f                   	pop    edi
c001025f:	c3                   	ret    

c0010260 <Mouse::Mouse(char const*)>:
c0010260:	83 ec 0c             	sub    esp,0xc
c0010263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010267:	83 ec 08             	sub    esp,0x8
c001026a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001026e:	50                   	push   eax
c001026f:	e8 42 de ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0010274:	83 c4 10             	add    esp,0x10
c0010277:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c001027c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010280:	89 10                	mov    DWORD PTR [eax],edx
c0010282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010286:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010290:	90                   	nop
c0010291:	83 c4 0c             	add    esp,0xc
c0010294:	c3                   	ret    
c0010295:	90                   	nop
c0010296:	66 90                	xchg   ax,ax

c0010298 <Mouse::~Mouse()>:
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c00102a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a4:	89 10                	mov    DWORD PTR [eax],edx
c00102a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	50                   	push   eax
c00102ae:	e8 cd da ff ff       	call   c000dd80 <Device::~Device()>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	90                   	nop
c00102b7:	83 c4 0c             	add    esp,0xc
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <Mouse::~Mouse()>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c6:	e8 cd ff ff ff       	call   c0010298 <Mouse::~Mouse()>
c00102cb:	83 c4 10             	add    esp,0x10
c00102ce:	83 ec 08             	sub    esp,0x8
c00102d1:	68 58 01 00 00       	push   0x158
c00102d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102da:	e8 ab c6 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	83 c4 0c             	add    esp,0xc
c00102e5:	c3                   	ret    

c00102e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102e6:	55                   	push   ebp
c00102e7:	57                   	push   edi
c00102e8:	56                   	push   esi
c00102e9:	53                   	push   ebx
c00102ea:	81 ec 28 01 00 00    	sub    esp,0x128
c00102f0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00102f7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00102fe:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010305:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001030c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010310:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010314:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001031b:	e8 92 de ff ff       	call   c000e1b2 <Device::getName()>
c0010320:	5a                   	pop    edx
c0010321:	59                   	pop    ecx
c0010322:	50                   	push   eax
c0010323:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010327:	55                   	push   ebp
c0010328:	e8 13 04 ff ff       	call   c0000740 <strcpy>
c001032d:	5b                   	pop    ebx
c001032e:	58                   	pop    eax
c001032f:	68 c0 37 02 c0       	push   0xc00237c0
c0010334:	55                   	push   ebp
c0010335:	e8 46 05 ff ff       	call   c0000880 <strcat>
c001033a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010341:	e8 7d 96 ff ff       	call   c00099c3 <malloc>
c0010346:	83 c4 0c             	add    esp,0xc
c0010349:	89 c3                	mov    ebx,eax
c001034b:	57                   	push   edi
c001034c:	56                   	push   esi
c001034d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010355:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001035c:	55                   	push   ebp
c001035d:	50                   	push   eax
c001035e:	e8 f7 fb ff ff       	call   c000ff5a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010363:	83 c4 14             	add    esp,0x14
c0010366:	53                   	push   ebx
c0010367:	e8 a4 fc ff ff       	call   c0010010 <LogicalDisk::assignDriveLetter()>
c001036c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001036f:	e8 52 fd ff ff       	call   c00100c6 <LogicalDisk::mount()>
c0010374:	58                   	pop    eax
c0010375:	5a                   	pop    edx
c0010376:	53                   	push   ebx
c0010377:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001037e:	e8 2f db ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0010383:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010389:	5b                   	pop    ebx
c001038a:	5e                   	pop    esi
c001038b:	5f                   	pop    edi
c001038c:	5d                   	pop    ebp
c001038d:	c3                   	ret    

c001038e <createPartitionsForDisk(PhysicalDisk*)>:
c001038e:	55                   	push   ebp
c001038f:	57                   	push   edi
c0010390:	56                   	push   esi
c0010391:	53                   	push   ebx
c0010392:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010398:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001039f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00103a5:	3d 00 02 00 00       	cmp    eax,0x200
c00103aa:	74 27                	je     c00103d3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00103ac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00103b2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00103b8:	83 ec 10             	sub    esp,0x10
c00103bb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00103bf:	99                   	cdq    
c00103c0:	c1 e6 0a             	shl    esi,0xa
c00103c3:	52                   	push   edx
c00103c4:	89 fd                	mov    ebp,edi
c00103c6:	50                   	push   eax
c00103c7:	55                   	push   ebp
c00103c8:	56                   	push   esi
c00103c9:	e8 e6 0a 01 00       	call   c0020eb4 <__udivdi3>
c00103ce:	e9 b1 00 00 00       	jmp    c0010484 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00103d3:	83 ec 0c             	sub    esp,0xc
c00103d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103d8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00103dc:	56                   	push   esi
c00103dd:	6a 01                	push   0x1
c00103df:	6a 00                	push   0x0
c00103e1:	6a 00                	push   0x0
c00103e3:	53                   	push   ebx
c00103e4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00103e7:	83 c4 20             	add    esp,0x20
c00103ea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00103f2:	75 0a                	jne    c00103fe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00103f4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00103fc:	74 2c                	je     c001042a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00103fe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010404:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001040a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010410:	83 ec 10             	sub    esp,0x10
c0010413:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010417:	89 f7                	mov    edi,esi
c0010419:	c1 e0 0a             	shl    eax,0xa
c001041c:	c1 ff 1f             	sar    edi,0x1f
c001041f:	57                   	push   edi
c0010420:	56                   	push   esi
c0010421:	52                   	push   edx
c0010422:	50                   	push   eax
c0010423:	e8 8c 0a 01 00       	call   c0020eb4 <__udivdi3>
c0010428:	eb 5a                	jmp    c0010484 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001042a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010431:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010438:	83 e1 7f             	and    ecx,0x7f
c001043b:	83 e0 7f             	and    eax,0x7f
c001043e:	01 c1                	add    ecx,eax
c0010440:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010447:	83 e0 7f             	and    eax,0x7f
c001044a:	01 c1                	add    ecx,eax
c001044c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010453:	83 e0 7f             	and    eax,0x7f
c0010456:	00 c1                	add    cl,al
c0010458:	74 41                	je     c001049b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001045a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010460:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010466:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001046c:	83 ec 10             	sub    esp,0x10
c001046f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010473:	89 f7                	mov    edi,esi
c0010475:	c1 e0 0a             	shl    eax,0xa
c0010478:	c1 ff 1f             	sar    edi,0x1f
c001047b:	57                   	push   edi
c001047c:	56                   	push   esi
c001047d:	52                   	push   edx
c001047e:	50                   	push   eax
c001047f:	e8 30 0a 01 00       	call   c0020eb4 <__udivdi3>
c0010484:	83 c4 14             	add    esp,0x14
c0010487:	52                   	push   edx
c0010488:	50                   	push   eax
c0010489:	6a 00                	push   0x0
c001048b:	6a 00                	push   0x0
c001048d:	53                   	push   ebx
c001048e:	e8 53 fe ff ff       	call   c00102e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010493:	83 c4 20             	add    esp,0x20
c0010496:	e9 79 01 00 00       	jmp    c0010614 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001049b:	89 f0                	mov    eax,esi
c001049d:	31 f6                	xor    esi,esi
c001049f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00104a6:	75 02                	jne    c00104aa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00104a8:	89 f1                	mov    ecx,esi
c00104aa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00104b1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00104b8:	c1 e2 08             	shl    edx,0x8
c00104bb:	c1 e7 10             	shl    edi,0x10
c00104be:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00104c6:	09 fa                	or     edx,edi
c00104c8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00104d0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00104d7:	83 c0 10             	add    eax,0x10
c00104da:	09 fa                	or     edx,edi
c00104dc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00104e3:	c1 e7 18             	shl    edi,0x18
c00104e6:	09 fa                	or     edx,edi
c00104e8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00104ef:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00104f3:	c1 e7 10             	shl    edi,0x10
c00104f6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00104fd:	c1 e2 08             	shl    edx,0x8
c0010500:	09 fa                	or     edx,edi
c0010502:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010509:	09 fa                	or     edx,edi
c001050b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010512:	c1 e7 18             	shl    edi,0x18
c0010515:	09 fa                	or     edx,edi
c0010517:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001051b:	46                   	inc    esi
c001051c:	83 fe 04             	cmp    esi,0x4
c001051f:	0f 85 7a ff ff ff    	jne    c001049f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010529:	83 f0 01             	xor    eax,0x1
c001052c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010530:	75 57                	jne    c0010589 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010536:	83 f0 01             	xor    eax,0x1
c0010539:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001053d:	75 4a                	jne    c0010589 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001053f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010543:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001054b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010553:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010559:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001055f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010565:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010569:	89 f7                	mov    edi,esi
c001056b:	c1 e0 0a             	shl    eax,0xa
c001056e:	c1 ff 1f             	sar    edi,0x1f
c0010571:	57                   	push   edi
c0010572:	56                   	push   esi
c0010573:	52                   	push   edx
c0010574:	50                   	push   eax
c0010575:	e8 3a 09 01 00       	call   c0020eb4 <__udivdi3>
c001057a:	83 c4 10             	add    esp,0x10
c001057d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010581:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010585:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010589:	84 c9                	test   cl,cl
c001058b:	74 53                	je     c00105e0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001058d:	0f b6 c9             	movzx  ecx,cl
c0010590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010594:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010598:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001059c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00105a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105a8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00105ac:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00105b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00105b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105c0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00105c4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00105c8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00105cc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00105d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00105d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00105d8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00105dc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00105e0:	31 ed                	xor    ebp,ebp
c00105e2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00105e6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00105ea:	89 f8                	mov    eax,edi
c00105ec:	09 f0                	or     eax,esi
c00105ee:	74 1e                	je     c001060e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105f0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00105f4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00105f8:	89 d1                	mov    ecx,edx
c00105fa:	09 c1                	or     ecx,eax
c00105fc:	74 10                	je     c001060e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105fe:	83 ec 0c             	sub    esp,0xc
c0010601:	57                   	push   edi
c0010602:	56                   	push   esi
c0010603:	52                   	push   edx
c0010604:	50                   	push   eax
c0010605:	53                   	push   ebx
c0010606:	e8 db fc ff ff       	call   c00102e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001060b:	83 c4 20             	add    esp,0x20
c001060e:	45                   	inc    ebp
c001060f:	83 fd 04             	cmp    ebp,0x4
c0010612:	75 ce                	jne    c00105e2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010614:	81 c4 5c 02 00 00    	add    esp,0x25c
c001061a:	5b                   	pop    ebx
c001061b:	5e                   	pop    esi
c001061c:	5f                   	pop    edi
c001061d:	5d                   	pop    ebp
c001061e:	c3                   	ret    
c001061f:	90                   	nop

c0010620 <Serial::Serial(char const*)>:
c0010620:	83 ec 0c             	sub    esp,0xc
c0010623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010627:	83 ec 08             	sub    esp,0x8
c001062a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001062e:	50                   	push   eax
c001062f:	e8 82 da ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0010634:	83 c4 10             	add    esp,0x10
c0010637:	ba d4 37 02 c0       	mov    edx,0xc00237d4
c001063c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010640:	89 10                	mov    DWORD PTR [eax],edx
c0010642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010646:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010650:	90                   	nop
c0010651:	83 c4 0c             	add    esp,0xc
c0010654:	c3                   	ret    
c0010655:	90                   	nop
c0010656:	66 90                	xchg   ax,ax

c0010658 <Serial::~Serial()>:
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	ba d4 37 02 c0       	mov    edx,0xc00237d4
c0010660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010664:	89 10                	mov    DWORD PTR [eax],edx
c0010666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066a:	83 ec 0c             	sub    esp,0xc
c001066d:	50                   	push   eax
c001066e:	e8 0d d7 ff ff       	call   c000dd80 <Device::~Device()>
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	90                   	nop
c0010677:	83 c4 0c             	add    esp,0xc
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <Serial::~Serial()>:
c001067c:	83 ec 0c             	sub    esp,0xc
c001067f:	83 ec 0c             	sub    esp,0xc
c0010682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010686:	e8 cd ff ff ff       	call   c0010658 <Serial::~Serial()>
c001068b:	83 c4 10             	add    esp,0x10
c001068e:	83 ec 08             	sub    esp,0x8
c0010691:	68 58 01 00 00       	push   0x158
c0010696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001069a:	e8 eb c2 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c001069f:	83 c4 10             	add    esp,0x10
c00106a2:	83 c4 0c             	add    esp,0xc
c00106a5:	c3                   	ret    
c00106a6:	66 90                	xchg   ax,ax

c00106a8 <Timer::Timer(char const*)>:
c00106a8:	83 ec 0c             	sub    esp,0xc
c00106ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106af:	83 ec 08             	sub    esp,0x8
c00106b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b6:	50                   	push   eax
c00106b7:	e8 fa d9 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c00106bc:	83 c4 10             	add    esp,0x10
c00106bf:	ba 18 38 02 c0       	mov    edx,0xc0023818
c00106c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c8:	89 10                	mov    DWORD PTR [eax],edx
c00106ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ce:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00106d8:	90                   	nop
c00106d9:	83 c4 0c             	add    esp,0xc
c00106dc:	c3                   	ret    
c00106dd:	90                   	nop
c00106de:	66 90                	xchg   ax,ax

c00106e0 <Timer::~Timer()>:
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	ba 18 38 02 c0       	mov    edx,0xc0023818
c00106e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ec:	89 10                	mov    DWORD PTR [eax],edx
c00106ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f2:	83 ec 0c             	sub    esp,0xc
c00106f5:	50                   	push   eax
c00106f6:	e8 85 d6 ff ff       	call   c000dd80 <Device::~Device()>
c00106fb:	83 c4 10             	add    esp,0x10
c00106fe:	90                   	nop
c00106ff:	83 c4 0c             	add    esp,0xc
c0010702:	c3                   	ret    
c0010703:	90                   	nop

c0010704 <Timer::~Timer()>:
c0010704:	83 ec 0c             	sub    esp,0xc
c0010707:	83 ec 0c             	sub    esp,0xc
c001070a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001070e:	e8 cd ff ff ff       	call   c00106e0 <Timer::~Timer()>
c0010713:	83 c4 10             	add    esp,0x10
c0010716:	83 ec 08             	sub    esp,0x8
c0010719:	68 5c 01 00 00       	push   0x15c
c001071e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010722:	e8 63 c2 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	83 c4 0c             	add    esp,0xc
c001072d:	c3                   	ret    

c001072e <Timer::read()>:
c001072e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010732:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010738:	c3                   	ret    

c0010739 <timerHandler(unsigned int)>:
c0010739:	56                   	push   esi
c001073a:	53                   	push   ebx
c001073b:	51                   	push   ecx
c001073c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010740:	01 05 ac 67 02 c0    	add    DWORD PTR ds:0xc00267ac,eax
c0010746:	80 3d 8d 61 02 c0 00 	cmp    BYTE PTR ds:0xc002618d,0x0
c001074d:	0f 84 49 01 00 00    	je     c001089c <timerHandler(unsigned int)+0x163>
c0010753:	fa                   	cli    
c0010754:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c001075a:	83 ec 0c             	sub    esp,0xc
c001075d:	ff 05 44 76 02 c0    	inc    DWORD PTR ds:0xc0027644
c0010763:	68 58 76 02 c0       	push   0xc0027658
c0010768:	e8 17 0d 01 00       	call   c0021484 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001076d:	83 c4 10             	add    esp,0x10
c0010770:	84 c0                	test   al,al
c0010772:	0f 85 a0 00 00 00    	jne    c0010818 <timerHandler(unsigned int)+0xdf>
c0010778:	83 ec 0c             	sub    esp,0xc
c001077b:	68 58 76 02 c0       	push   0xc0027658
c0010780:	e8 1b 0d 01 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010785:	83 c4 10             	add    esp,0x10
c0010788:	89 c6                	mov    esi,eax
c001078a:	66 90                	xchg   ax,ax
c001078c:	83 ec 0c             	sub    esp,0xc
c001078f:	68 58 76 02 c0       	push   0xc0027658
c0010794:	e8 07 0d 01 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010799:	c7 04 24 58 76 02 c0 	mov    DWORD PTR [esp],0xc0027658
c00107a0:	89 c3                	mov    ebx,eax
c00107a2:	e8 01 0d 01 00       	call   c00214a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00107a7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00107aa:	83 c4 10             	add    esp,0x10
c00107ad:	3b 05 ac 67 02 c0    	cmp    eax,DWORD PTR ds:0xc00267ac
c00107b3:	77 23                	ja     c00107d8 <timerHandler(unsigned int)+0x9f>
c00107b5:	83 ec 0c             	sub    esp,0xc
c00107b8:	53                   	push   ebx
c00107b9:	e8 da 7b 00 00       	call   c0018398 <unblockTask(ThreadControlBlock*)>
c00107be:	83 c4 10             	add    esp,0x10
c00107c1:	39 de                	cmp    esi,ebx
c00107c3:	75 27                	jne    c00107ec <timerHandler(unsigned int)+0xb3>
c00107c5:	83 ec 0c             	sub    esp,0xc
c00107c8:	68 58 76 02 c0       	push   0xc0027658
c00107cd:	e8 ce 0c 01 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107d2:	89 c6                	mov    esi,eax
c00107d4:	eb 12                	jmp    c00107e8 <timerHandler(unsigned int)+0xaf>
c00107d6:	66 90                	xchg   ax,ax
c00107d8:	52                   	push   edx
c00107d9:	52                   	push   edx
c00107da:	53                   	push   ebx
c00107db:	68 58 76 02 c0       	push   0xc0027658
c00107e0:	e8 7b 0d 01 00       	call   c0021560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00107e5:	8d 76 00             	lea    esi,[esi+0x0]
c00107e8:	83 c4 10             	add    esp,0x10
c00107eb:	90                   	nop
c00107ec:	83 ec 0c             	sub    esp,0xc
c00107ef:	68 58 76 02 c0       	push   0xc0027658
c00107f4:	e8 8b 0c 01 00       	call   c0021484 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107f9:	83 c4 10             	add    esp,0x10
c00107fc:	84 c0                	test   al,al
c00107fe:	75 18                	jne    c0010818 <timerHandler(unsigned int)+0xdf>
c0010800:	83 ec 0c             	sub    esp,0xc
c0010803:	68 58 76 02 c0       	push   0xc0027658
c0010808:	e8 93 0c 01 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001080d:	83 c4 10             	add    esp,0x10
c0010810:	39 f0                	cmp    eax,esi
c0010812:	0f 85 74 ff ff ff    	jne    c001078c <timerHandler(unsigned int)+0x53>
c0010818:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001081d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010821:	74 41                	je     c0010864 <timerHandler(unsigned int)+0x12b>
c0010823:	80 3d 8c 61 02 c0 00 	cmp    BYTE PTR ds:0xc002618c,0x0
c001082a:	74 38                	je     c0010864 <timerHandler(unsigned int)+0x12b>
c001082c:	fa                   	cli    
c001082d:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0010833:	a1 ac 67 02 c0       	mov    eax,ds:0xc00267ac
c0010838:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001083e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010841:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010847:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001084a:	72 08                	jb     c0010854 <timerHandler(unsigned int)+0x11b>
c001084c:	e8 8b 76 00 00       	call   c0017edc <schedule()>
c0010851:	8d 76 00             	lea    esi,[esi+0x0]
c0010854:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0010859:	48                   	dec    eax
c001085a:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c001085f:	75 03                	jne    c0010864 <timerHandler(unsigned int)+0x12b>
c0010861:	fb                   	sti    
c0010862:	66 90                	xchg   ax,ax
c0010864:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c0010869:	48                   	dec    eax
c001086a:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c001086f:	75 1b                	jne    c001088c <timerHandler(unsigned int)+0x153>
c0010871:	83 3d 40 76 02 c0 00 	cmp    DWORD PTR ds:0xc0027640,0x0
c0010878:	74 12                	je     c001088c <timerHandler(unsigned int)+0x153>
c001087a:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c0010884:	e8 53 76 00 00       	call   c0017edc <schedule()>
c0010889:	8d 76 00             	lea    esi,[esi+0x0]
c001088c:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0010891:	48                   	dec    eax
c0010892:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0010897:	75 03                	jne    c001089c <timerHandler(unsigned int)+0x163>
c0010899:	fb                   	sti    
c001089a:	66 90                	xchg   ax,ax
c001089c:	58                   	pop    eax
c001089d:	5b                   	pop    ebx
c001089e:	5e                   	pop    esi
c001089f:	c3                   	ret    

c00108a0 <setupTimer(int)>:
c00108a0:	57                   	push   edi
c00108a1:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00108a6:	56                   	push   esi
c00108a7:	53                   	push   ebx
c00108a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00108b2:	83 ec 0c             	sub    esp,0xc
c00108b5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00108bb:	e8 f2 d8 ff ff       	call   c000e1b2 <Device::getName()>
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00108c6:	0f 85 94 00 00 00    	jne    c0010960 <setupTimer(int)+0xc0>
c00108cc:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00108d1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00108d8:	0f 84 82 00 00 00    	je     c0010960 <setupTimer(int)+0xc0>
c00108de:	83 ec 0c             	sub    esp,0xc
c00108e1:	68 5c 01 00 00       	push   0x15c
c00108e6:	e8 d8 90 ff ff       	call   c00099c3 <malloc>
c00108eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00108ee:	89 c3                	mov    ebx,eax
c00108f0:	e8 93 01 01 00       	call   c0020a88 <PIT::PIT()>
c00108f5:	59                   	pop    ecx
c00108f6:	5f                   	pop    edi
c00108f7:	53                   	push   ebx
c00108f8:	ff 35 88 61 02 c0    	push   DWORD PTR ds:0xc0026188
c00108fe:	e8 af d5 ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0010903:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010905:	6a 00                	push   0x0
c0010907:	6a 00                	push   0x0
c0010909:	56                   	push   esi
c001090a:	53                   	push   ebx
c001090b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001090e:	83 c4 14             	add    esp,0x14
c0010911:	68 60 01 00 00       	push   0x160
c0010916:	e8 a8 90 ff ff       	call   c00099c3 <malloc>
c001091b:	89 04 24             	mov    DWORD PTR [esp],eax
c001091e:	89 c7                	mov    edi,eax
c0010920:	e8 17 00 01 00       	call   c002093c <APICTimer::APICTimer()>
c0010925:	6a 00                	push   0x0
c0010927:	6a 00                	push   0x0
c0010929:	56                   	push   esi
c001092a:	57                   	push   edi
c001092b:	e8 0c ff 00 00       	call   c002083c <APICTimer::open(int, int, void*)>
c0010930:	83 c4 20             	add    esp,0x20
c0010933:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010935:	6a 00                	push   0x0
c0010937:	6a 00                	push   0x0
c0010939:	6a 00                	push   0x0
c001093b:	53                   	push   ebx
c001093c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001093f:	58                   	pop    eax
c0010940:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0010945:	5a                   	pop    edx
c0010946:	57                   	push   edi
c0010947:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001094d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010953:	e8 5a d5 ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0010958:	83 c4 10             	add    esp,0x10
c001095b:	eb 37                	jmp    c0010994 <setupTimer(int)+0xf4>
c001095d:	8d 76 00             	lea    esi,[esi+0x0]
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	68 5c 01 00 00       	push   0x15c
c0010968:	e8 56 90 ff ff       	call   c00099c3 <malloc>
c001096d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010970:	89 c3                	mov    ebx,eax
c0010972:	e8 11 01 01 00       	call   c0020a88 <PIT::PIT()>
c0010977:	58                   	pop    eax
c0010978:	5a                   	pop    edx
c0010979:	53                   	push   ebx
c001097a:	ff 35 88 61 02 c0    	push   DWORD PTR ds:0xc0026188
c0010980:	e8 2d d5 ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0010985:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010987:	6a 00                	push   0x0
c0010989:	6a 00                	push   0x0
c001098b:	56                   	push   esi
c001098c:	53                   	push   ebx
c001098d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010990:	83 c4 20             	add    esp,0x20
c0010993:	90                   	nop
c0010994:	89 d8                	mov    eax,ebx
c0010996:	5b                   	pop    ebx
c0010997:	5e                   	pop    esi
c0010998:	5f                   	pop    edi
c0010999:	c3                   	ret    
c001099a:	66 90                	xchg   ax,ax

c001099c <VCache::VCache(PhysicalDisk*)>:
c001099c:	53                   	push   ebx
c001099d:	83 ec 18             	sub    esp,0x18
c00109a0:	ba 48 38 02 c0       	mov    edx,0xc0023848
c00109a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109a9:	89 10                	mov    DWORD PTR [eax],edx
c00109ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109af:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00109b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109ba:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00109c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109c5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00109cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00109d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109d7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00109de:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00109e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109e9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00109f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00109f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109fc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010a03:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a0e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a16:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a1e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a26:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a2d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010a35:	83 ec 0c             	sub    esp,0xc
c0010a38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a3c:	e8 82 8f ff ff       	call   c00099c3 <malloc>
c0010a41:	83 c4 10             	add    esp,0x10
c0010a44:	89 c3                	mov    ebx,eax
c0010a46:	83 ec 0c             	sub    esp,0xc
c0010a49:	53                   	push   ebx
c0010a4a:	e8 5d 72 00 00       	call   c0017cac <Mutex::Mutex()>
c0010a4f:	83 c4 10             	add    esp,0x10
c0010a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a56:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a5d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a61:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a68:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010a6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a73:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a7d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a84:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010a8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a90:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a94:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010a97:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a9e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010aa2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010aa6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010aac:	05 00 01 00 00       	add    eax,0x100
c0010ab1:	c1 e0 04             	shl    eax,0x4
c0010ab4:	83 ec 0c             	sub    esp,0xc
c0010ab7:	50                   	push   eax
c0010ab8:	e8 06 8f ff ff       	call   c00099c3 <malloc>
c0010abd:	83 c4 10             	add    esp,0x10
c0010ac0:	89 c2                	mov    edx,eax
c0010ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ac6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010acd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010adc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ae0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ae6:	c1 e0 06             	shl    eax,0x6
c0010ae9:	83 ec 0c             	sub    esp,0xc
c0010aec:	50                   	push   eax
c0010aed:	e8 d1 8e ff ff       	call   c00099c3 <malloc>
c0010af2:	83 c4 10             	add    esp,0x10
c0010af5:	89 c2                	mov    edx,eax
c0010af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010afb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010afe:	90                   	nop
c0010aff:	83 c4 18             	add    esp,0x18
c0010b02:	5b                   	pop    ebx
c0010b03:	c3                   	ret    

c0010b04 <VCache::invalidateReadBuffer()>:
c0010b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b08:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b0e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010b12:	c3                   	ret    
c0010b13:	90                   	nop

c0010b14 <VCache::writeWriteBuffer()>:
c0010b14:	53                   	push   ebx
c0010b15:	83 ec 14             	sub    esp,0x14
c0010b18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010b1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b21:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b24:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b27:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b2a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b2d:	50                   	push   eax
c0010b2e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010b31:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010b38:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010b3f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010b43:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010b4a:	83 c4 28             	add    esp,0x28
c0010b4d:	5b                   	pop    ebx
c0010b4e:	c3                   	ret    
c0010b4f:	90                   	nop

c0010b50 <VCache::~VCache()>:
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	ba 48 38 02 c0       	mov    edx,0xc0023848
c0010b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5c:	89 10                	mov    DWORD PTR [eax],edx
c0010b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b62:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010b65:	84 c0                	test   al,al
c0010b67:	74 0f                	je     c0010b78 <VCache::~VCache()+0x28>
c0010b69:	83 ec 0c             	sub    esp,0xc
c0010b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b70:	e8 9f ff ff ff       	call   c0010b14 <VCache::writeWriteBuffer()>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010b7f:	83 ec 0c             	sub    esp,0xc
c0010b82:	50                   	push   eax
c0010b83:	e8 4b 8e ff ff       	call   c00099d3 <free>
c0010b88:	83 c4 10             	add    esp,0x10
c0010b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b8f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010b92:	83 ec 0c             	sub    esp,0xc
c0010b95:	50                   	push   eax
c0010b96:	e8 38 8e ff ff       	call   c00099d3 <free>
c0010b9b:	83 c4 10             	add    esp,0x10
c0010b9e:	90                   	nop
c0010b9f:	83 c4 0c             	add    esp,0xc
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <VCache::~VCache()>:
c0010ba4:	83 ec 0c             	sub    esp,0xc
c0010ba7:	83 ec 0c             	sub    esp,0xc
c0010baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bae:	e8 9d ff ff ff       	call   c0010b50 <VCache::~VCache()>
c0010bb3:	83 c4 10             	add    esp,0x10
c0010bb6:	83 ec 08             	sub    esp,0x8
c0010bb9:	6a 44                	push   0x44
c0010bbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbf:	e8 c6 bd ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0010bc4:	83 c4 10             	add    esp,0x10
c0010bc7:	83 c4 0c             	add    esp,0xc
c0010bca:	c3                   	ret    
c0010bcb:	90                   	nop

c0010bcc <VCache::write(unsigned long long, int, void*)>:
c0010bcc:	55                   	push   ebp
c0010bcd:	31 c0                	xor    eax,eax
c0010bcf:	57                   	push   edi
c0010bd0:	56                   	push   esi
c0010bd1:	53                   	push   ebx
c0010bd2:	83 ec 0c             	sub    esp,0xc
c0010bd5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bd9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010bdd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010be1:	8d 76 00             	lea    esi,[esi+0x0]
c0010be4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010be8:	7d 1a                	jge    c0010c04 <VCache::write(unsigned long long, int, void*)+0x38>
c0010bea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010bed:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010bf3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010bf7:	0f af c8             	imul   ecx,eax
c0010bfa:	01 ca                	add    edx,ecx
c0010bfc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010bfe:	40                   	inc    eax
c0010bff:	eb e3                	jmp    c0010be4 <VCache::write(unsigned long long, int, void*)+0x18>
c0010c01:	8d 76 00             	lea    esi,[esi+0x0]
c0010c04:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010c08:	74 0a                	je     c0010c14 <VCache::write(unsigned long long, int, void*)+0x48>
c0010c0a:	53                   	push   ebx
c0010c0b:	e8 f4 fe ff ff       	call   c0010b04 <VCache::invalidateReadBuffer()>
c0010c10:	58                   	pop    eax
c0010c11:	8d 76 00             	lea    esi,[esi+0x0]
c0010c14:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010c18:	74 5e                	je     c0010c78 <VCache::write(unsigned long long, int, void*)+0xac>
c0010c1a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010c1d:	89 e8                	mov    eax,ebp
c0010c1f:	99                   	cdq    
c0010c20:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c23:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010c26:	89 c1                	mov    ecx,eax
c0010c28:	89 d0                	mov    eax,edx
c0010c2a:	31 f1                	xor    ecx,esi
c0010c2c:	31 f8                	xor    eax,edi
c0010c2e:	09 c1                	or     ecx,eax
c0010c30:	75 3a                	jne    c0010c6c <VCache::write(unsigned long long, int, void*)+0xa0>
c0010c32:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010c37:	75 33                	jne    c0010c6c <VCache::write(unsigned long long, int, void*)+0xa0>
c0010c39:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c3c:	89 ef                	mov    edi,ebp
c0010c3e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c44:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c48:	0f af f9             	imul   edi,ecx
c0010c4b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010c4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c50:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c53:	40                   	inc    eax
c0010c54:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c57:	83 f8 40             	cmp    eax,0x40
c0010c5a:	75 60                	jne    c0010cbc <VCache::write(unsigned long long, int, void*)+0xf0>
c0010c5c:	83 ec 0c             	sub    esp,0xc
c0010c5f:	53                   	push   ebx
c0010c60:	e8 af fe ff ff       	call   c0010b14 <VCache::writeWriteBuffer()>
c0010c65:	83 c4 10             	add    esp,0x10
c0010c68:	eb 52                	jmp    c0010cbc <VCache::write(unsigned long long, int, void*)+0xf0>
c0010c6a:	66 90                	xchg   ax,ax
c0010c6c:	83 ec 0c             	sub    esp,0xc
c0010c6f:	53                   	push   ebx
c0010c70:	e8 9f fe ff ff       	call   c0010b14 <VCache::writeWriteBuffer()>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c7b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010c80:	7f 22                	jg     c0010ca4 <VCache::write(unsigned long long, int, void*)+0xd8>
c0010c82:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0010c85:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0010c88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010c8c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010c90:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0010c93:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c96:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c9c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ca0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ca2:	eb 18                	jmp    c0010cbc <VCache::write(unsigned long long, int, void*)+0xf0>
c0010ca4:	83 ec 0c             	sub    esp,0xc
c0010ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ca9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cb1:	57                   	push   edi
c0010cb2:	56                   	push   esi
c0010cb3:	50                   	push   eax
c0010cb4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010cb7:	83 c4 20             	add    esp,0x20
c0010cba:	66 90                	xchg   ax,ax
c0010cbc:	83 c4 0c             	add    esp,0xc
c0010cbf:	31 c0                	xor    eax,eax
c0010cc1:	5b                   	pop    ebx
c0010cc2:	5e                   	pop    esi
c0010cc3:	5f                   	pop    edi
c0010cc4:	5d                   	pop    ebp
c0010cc5:	c3                   	ret    

c0010cc6 <VCache::read(unsigned long long, int, void*)>:
c0010cc6:	55                   	push   ebp
c0010cc7:	31 c0                	xor    eax,eax
c0010cc9:	57                   	push   edi
c0010cca:	56                   	push   esi
c0010ccb:	53                   	push   ebx
c0010ccc:	83 ec 1c             	sub    esp,0x1c
c0010ccf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010cd3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010cd7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010cdb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010cdf:	90                   	nop
c0010ce0:	39 e8                	cmp    eax,ebp
c0010ce2:	7d 18                	jge    c0010cfc <VCache::read(unsigned long long, int, void*)+0x36>
c0010ce4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010ce7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010ced:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010cf1:	0f af c8             	imul   ecx,eax
c0010cf4:	01 ca                	add    edx,ecx
c0010cf6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010cf8:	40                   	inc    eax
c0010cf9:	eb e5                	jmp    c0010ce0 <VCache::read(unsigned long long, int, void*)+0x1a>
c0010cfb:	90                   	nop
c0010cfc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010d00:	74 0e                	je     c0010d10 <VCache::read(unsigned long long, int, void*)+0x4a>
c0010d02:	83 ec 0c             	sub    esp,0xc
c0010d05:	53                   	push   ebx
c0010d06:	e8 09 fe ff ff       	call   c0010b14 <VCache::writeWriteBuffer()>
c0010d0b:	83 c4 10             	add    esp,0x10
c0010d0e:	66 90                	xchg   ax,ax
c0010d10:	83 fd 01             	cmp    ebp,0x1
c0010d13:	0f 85 87 00 00 00    	jne    c0010da0 <VCache::read(unsigned long long, int, void*)+0xda>
c0010d19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d20:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010d27:	75 77                	jne    c0010da0 <VCache::read(unsigned long long, int, void*)+0xda>
c0010d29:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0010d2c:	89 e9                	mov    ecx,ebp
c0010d2e:	f7 d9                	neg    ecx
c0010d30:	89 c8                	mov    eax,ecx
c0010d32:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010d36:	c1 f8 1f             	sar    eax,0x1f
c0010d39:	21 f1                	and    ecx,esi
c0010d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d3f:	89 c8                	mov    eax,ecx
c0010d41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d45:	21 f9                	and    ecx,edi
c0010d47:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010d4b:	89 ca                	mov    edx,ecx
c0010d4d:	74 0d                	je     c0010d5c <VCache::read(unsigned long long, int, void*)+0x96>
c0010d4f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010d52:	75 08                	jne    c0010d5c <VCache::read(unsigned long long, int, void*)+0x96>
c0010d54:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0010d57:	74 27                	je     c0010d80 <VCache::read(unsigned long long, int, void*)+0xba>
c0010d59:	8d 76 00             	lea    esi,[esi+0x0]
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010d63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010d67:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0010d6a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0010d6d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0010d6f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010d72:	55                   	push   ebp
c0010d73:	52                   	push   edx
c0010d74:	50                   	push   eax
c0010d75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d79:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010d7c:	83 c4 20             	add    esp,0x20
c0010d7f:	90                   	nop
c0010d80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d83:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010d87:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010d8d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010d90:	48                   	dec    eax
c0010d91:	21 c6                	and    esi,eax
c0010d93:	0f af f1             	imul   esi,ecx
c0010d96:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010d99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d9b:	eb 23                	jmp    c0010dc0 <VCache::read(unsigned long long, int, void*)+0xfa>
c0010d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010da0:	83 ec 0c             	sub    esp,0xc
c0010da3:	53                   	push   ebx
c0010da4:	e8 5b fd ff ff       	call   c0010b04 <VCache::invalidateReadBuffer()>
c0010da9:	5a                   	pop    edx
c0010daa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010dad:	8b 10                	mov    edx,DWORD PTR [eax]
c0010daf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010db3:	55                   	push   ebp
c0010db4:	57                   	push   edi
c0010db5:	56                   	push   esi
c0010db6:	50                   	push   eax
c0010db7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010dba:	83 c4 20             	add    esp,0x20
c0010dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010dc0:	83 c4 1c             	add    esp,0x1c
c0010dc3:	31 c0                	xor    eax,eax
c0010dc5:	5b                   	pop    ebx
c0010dc6:	5e                   	pop    esi
c0010dc7:	5f                   	pop    edi
c0010dc8:	5d                   	pop    ebp
c0010dc9:	c3                   	ret    

c0010dca <Video::putrect(int, int, int, int, unsigned int)>:
c0010dca:	55                   	push   ebp
c0010dcb:	57                   	push   edi
c0010dcc:	56                   	push   esi
c0010dcd:	53                   	push   ebx
c0010dce:	83 ec 1c             	sub    esp,0x1c
c0010dd1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010dd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010dd9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010ddd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010de1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010de5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010de9:	01 df                	add    edi,ebx
c0010deb:	39 fb                	cmp    ebx,edi
c0010ded:	7d 1f                	jge    c0010e0e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010def:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010df3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010df7:	7d 12                	jge    c0010e0b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010df9:	8b 16                	mov    edx,DWORD PTR [esi]
c0010dfb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010dff:	53                   	push   ebx
c0010e00:	55                   	push   ebp
c0010e01:	45                   	inc    ebp
c0010e02:	56                   	push   esi
c0010e03:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010e06:	83 c4 10             	add    esp,0x10
c0010e09:	eb e8                	jmp    c0010df3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010e0b:	43                   	inc    ebx
c0010e0c:	eb dd                	jmp    c0010deb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010e0e:	83 c4 1c             	add    esp,0x1c
c0010e11:	5b                   	pop    ebx
c0010e12:	5e                   	pop    esi
c0010e13:	5f                   	pop    edi
c0010e14:	5d                   	pop    ebp
c0010e15:	c3                   	ret    

c0010e16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010e16:	55                   	push   ebp
c0010e17:	57                   	push   edi
c0010e18:	31 ff                	xor    edi,edi
c0010e1a:	56                   	push   esi
c0010e1b:	53                   	push   ebx
c0010e1c:	83 ec 1c             	sub    esp,0x1c
c0010e1f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010e23:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e27:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010e2e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010e33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e37:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010e3b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010e3f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010e42:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010e46:	01 f9                	add    ecx,edi
c0010e48:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010e4c:	7d 2f                	jge    c0010e7d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010e4e:	31 f6                	xor    esi,esi
c0010e50:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010e54:	01 f2                	add    edx,esi
c0010e56:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010e5a:	7d 1a                	jge    c0010e76 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010e5c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e5f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010e62:	46                   	inc    esi
c0010e63:	51                   	push   ecx
c0010e64:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010e68:	52                   	push   edx
c0010e69:	55                   	push   ebp
c0010e6a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010e6d:	83 c4 10             	add    esp,0x10
c0010e70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e74:	eb da                	jmp    c0010e50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010e76:	47                   	inc    edi
c0010e77:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010e7b:	eb c5                	jmp    c0010e42 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010e7d:	83 c4 1c             	add    esp,0x1c
c0010e80:	5b                   	pop    ebx
c0010e81:	5e                   	pop    esi
c0010e82:	5f                   	pop    edi
c0010e83:	5d                   	pop    ebp
c0010e84:	c3                   	ret    
c0010e85:	90                   	nop

c0010e86 <Video::blit(unsigned int*, int, int, int, int)>:
c0010e86:	55                   	push   ebp
c0010e87:	57                   	push   edi
c0010e88:	56                   	push   esi
c0010e89:	53                   	push   ebx
c0010e8a:	83 ec 1c             	sub    esp,0x1c
c0010e8d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010e91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e95:	85 c0                	test   eax,eax
c0010e97:	79 02                	jns    c0010e9b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010e99:	31 c0                	xor    eax,eax
c0010e9b:	c1 e0 02             	shl    eax,0x2
c0010e9e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010ea2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ea6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010eaa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010eae:	39 d8                	cmp    eax,ebx
c0010eb0:	7e 49                	jle    c0010efb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010eb2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010eb8:	7c 41                	jl     c0010efb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010eba:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010ebe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010ec2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010ec6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010eca:	39 f9                	cmp    ecx,edi
c0010ecc:	7e 22                	jle    c0010ef0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010ece:	83 c5 04             	add    ebp,0x4
c0010ed1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010ed7:	7c 14                	jl     c0010eed <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010ed9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010edb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010ede:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010ee2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010ee6:	56                   	push   esi
c0010ee7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010eea:	83 c4 10             	add    esp,0x10
c0010eed:	47                   	inc    edi
c0010eee:	eb d2                	jmp    c0010ec2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010ef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ef4:	43                   	inc    ebx
c0010ef5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010ef9:	eb ab                	jmp    c0010ea6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010efb:	83 c4 1c             	add    esp,0x1c
c0010efe:	5b                   	pop    ebx
c0010eff:	5e                   	pop    esi
c0010f00:	5f                   	pop    edi
c0010f01:	5d                   	pop    ebp
c0010f02:	c3                   	ret    
c0010f03:	90                   	nop

c0010f04 <Video::clearScreen(unsigned int)>:
c0010f04:	57                   	push   edi
c0010f05:	56                   	push   esi
c0010f06:	53                   	push   ebx
c0010f07:	31 db                	xor    ebx,ebx
c0010f09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f0d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f13:	7e 1f                	jle    c0010f34 <Video::clearScreen(unsigned int)+0x30>
c0010f15:	31 ff                	xor    edi,edi
c0010f17:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f1d:	7e 12                	jle    c0010f31 <Video::clearScreen(unsigned int)+0x2d>
c0010f1f:	8b 06                	mov    eax,DWORD PTR [esi]
c0010f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f25:	53                   	push   ebx
c0010f26:	57                   	push   edi
c0010f27:	47                   	inc    edi
c0010f28:	56                   	push   esi
c0010f29:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010f2c:	83 c4 10             	add    esp,0x10
c0010f2f:	eb e6                	jmp    c0010f17 <Video::clearScreen(unsigned int)+0x13>
c0010f31:	43                   	inc    ebx
c0010f32:	eb d9                	jmp    c0010f0d <Video::clearScreen(unsigned int)+0x9>
c0010f34:	5b                   	pop    ebx
c0010f35:	5e                   	pop    esi
c0010f36:	5f                   	pop    edi
c0010f37:	c3                   	ret    

c0010f38 <Video::putpixel(int, int, unsigned int)>:
c0010f38:	c7 44 24 04 50 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023850
c0010f40:	e9 c6 33 00 00       	jmp    c001430b <Krnl::panic(char const*)>
c0010f45:	90                   	nop

c0010f46 <Video::Video(char const*)>:
c0010f46:	83 ec 0c             	sub    esp,0xc
c0010f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4d:	83 ec 08             	sub    esp,0x8
c0010f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f54:	50                   	push   eax
c0010f55:	e8 5c d1 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0010f5a:	83 c4 10             	add    esp,0x10
c0010f5d:	ba c0 38 02 c0       	mov    edx,0xc00238c0
c0010f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f66:	89 10                	mov    DWORD PTR [eax],edx
c0010f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010f76:	90                   	nop
c0010f77:	83 c4 0c             	add    esp,0xc
c0010f7a:	c3                   	ret    
c0010f7b:	90                   	nop

c0010f7c <Video::~Video()>:
c0010f7c:	83 ec 0c             	sub    esp,0xc
c0010f7f:	ba c0 38 02 c0       	mov    edx,0xc00238c0
c0010f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f88:	89 10                	mov    DWORD PTR [eax],edx
c0010f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8e:	83 ec 0c             	sub    esp,0xc
c0010f91:	50                   	push   eax
c0010f92:	e8 e9 cd ff ff       	call   c000dd80 <Device::~Device()>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	90                   	nop
c0010f9b:	83 c4 0c             	add    esp,0xc
c0010f9e:	c3                   	ret    
c0010f9f:	90                   	nop

c0010fa0 <Video::~Video()>:
c0010fa0:	83 ec 0c             	sub    esp,0xc
c0010fa3:	83 ec 0c             	sub    esp,0xc
c0010fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010faa:	e8 cd ff ff ff       	call   c0010f7c <Video::~Video()>
c0010faf:	83 c4 10             	add    esp,0x10
c0010fb2:	83 ec 08             	sub    esp,0x8
c0010fb5:	68 64 01 00 00       	push   0x164
c0010fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fbe:	e8 c7 b9 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0010fc3:	83 c4 10             	add    esp,0x10
c0010fc6:	83 c4 0c             	add    esp,0xc
c0010fc9:	c3                   	ret    

c0010fca <Video::isMonochrome()>:
c0010fca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fce:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop

c0010fd6 <Video::getWidth()>:
c0010fd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fda:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010fe0:	c3                   	ret    
c0010fe1:	90                   	nop

c0010fe2 <Video::getHeight()>:
c0010fe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010fec:	c3                   	ret    
c0010fed:	90                   	nop

c0010fee <Video::drawCursor(int, int, unsigned char*, int)>:
c0010fee:	55                   	push   ebp
c0010fef:	57                   	push   edi
c0010ff0:	56                   	push   esi
c0010ff1:	53                   	push   ebx
c0010ff2:	83 ec 2c             	sub    esp,0x2c
c0010ff5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010ff9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010ffd:	83 f8 01             	cmp    eax,0x1
c0011000:	19 c9                	sbb    ecx,ecx
c0011002:	31 db                	xor    ebx,ebx
c0011004:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011008:	89 cd                	mov    ebp,ecx
c001100a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011012:	f7 d5                	not    ebp
c0011014:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001101a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001101e:	01 d8                	add    eax,ebx
c0011020:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011024:	56                   	push   esi
c0011025:	e8 b8 ff ff ff       	call   c0010fe2 <Video::getHeight()>
c001102a:	59                   	pop    ecx
c001102b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001102f:	7e 70                	jle    c00110a1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011031:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011035:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011039:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001103c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011040:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011044:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001104b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001104f:	89 f8                	mov    eax,edi
c0011051:	83 c0 20             	add    eax,0x20
c0011054:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011058:	56                   	push   esi
c0011059:	e8 78 ff ff ff       	call   c0010fd6 <Video::getWidth()>
c001105e:	5a                   	pop    edx
c001105f:	39 c7                	cmp    edi,eax
c0011061:	7d 34                	jge    c0011097 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011063:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011068:	74 05                	je     c001106f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001106a:	8b 06                	mov    eax,DWORD PTR [esi]
c001106c:	55                   	push   ebp
c001106d:	eb 0d                	jmp    c001107c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001106f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011074:	74 12                	je     c0011088 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011076:	8b 06                	mov    eax,DWORD PTR [esi]
c0011078:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001107c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011080:	57                   	push   edi
c0011081:	56                   	push   esi
c0011082:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011085:	83 c4 10             	add    esp,0x10
c0011088:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001108c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011090:	47                   	inc    edi
c0011091:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011095:	75 c1                	jne    c0011058 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011097:	43                   	inc    ebx
c0011098:	83 fb 20             	cmp    ebx,0x20
c001109b:	0f 85 79 ff ff ff    	jne    c001101a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00110a1:	83 c4 2c             	add    esp,0x2c
c00110a4:	5b                   	pop    ebx
c00110a5:	5e                   	pop    esi
c00110a6:	5f                   	pop    edi
c00110a7:	5d                   	pop    ebp
c00110a8:	c3                   	ret    
c00110a9:	90                   	nop

c00110aa <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00110aa:	55                   	push   ebp
c00110ab:	57                   	push   edi
c00110ac:	56                   	push   esi
c00110ad:	53                   	push   ebx
c00110ae:	83 ec 28             	sub    esp,0x28
c00110b1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00110b5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00110b9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00110bd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00110c1:	c1 e6 08             	shl    esi,0x8
c00110c4:	01 c6                	add    esi,eax
c00110c6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00110ca:	c1 e0 08             	shl    eax,0x8
c00110cd:	01 d0                	add    eax,edx
c00110cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110d7:	0f af c6             	imul   eax,esi
c00110da:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00110e1:	50                   	push   eax
c00110e2:	e8 dc 88 ff ff       	call   c00099c3 <malloc>
c00110e7:	83 c4 10             	add    esp,0x10
c00110ea:	89 c7                	mov    edi,eax
c00110ec:	85 c0                	test   eax,eax
c00110ee:	75 10                	jne    c0011100 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00110f0:	83 ec 0c             	sub    esp,0xc
c00110f3:	68 71 38 02 c0       	push   0xc0023871
c00110f8:	e8 0e 32 00 00       	call   c001430b <Krnl::panic(char const*)>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011103:	ba 12 00 00 00       	mov    edx,0x12
c0011108:	84 c0                	test   al,al
c001110a:	74 11                	je     c001111d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001110c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011110:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011114:	c1 fa 03             	sar    edx,0x3
c0011117:	0f af d1             	imul   edx,ecx
c001111a:	83 c2 12             	add    edx,0x12
c001111d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011121:	74 04                	je     c0011127 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011123:	85 f6                	test   esi,esi
c0011125:	75 12                	jne    c0011139 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011127:	83 ec 0c             	sub    esp,0xc
c001112a:	68 81 38 02 c0       	push   0xc0023881
c001112f:	e8 37 b9 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0011134:	e9 b8 00 00 00       	jmp    c00111f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011139:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001113d:	80 f9 02             	cmp    cl,0x2
c0011140:	0f 85 96 00 00 00    	jne    c00111dc <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011146:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001114b:	75 0e                	jne    c001115b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001114d:	84 c0                	test   al,al
c001114f:	75 0a                	jne    c001115b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011151:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011154:	83 e8 18             	sub    eax,0x18
c0011157:	a8 f7                	test   al,0xf7
c0011159:	74 0a                	je     c0011165 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001115b:	83 ec 0c             	sub    esp,0xc
c001115e:	68 96 38 02 c0       	push   0xc0023896
c0011163:	eb 7f                	jmp    c00111e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011165:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001116d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011175:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011179:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011181:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011185:	75 0c                	jne    c0011193 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011187:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001118c:	c1 e0 18             	shl    eax,0x18
c001118f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011193:	45                   	inc    ebp
c0011194:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011199:	c1 e1 10             	shl    ecx,0x10
c001119c:	89 c8                	mov    eax,ecx
c001119e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00111a3:	c1 e1 08             	shl    ecx,0x8
c00111a6:	09 c1                	or     ecx,eax
c00111a8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00111ac:	09 c1                	or     ecx,eax
c00111ae:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00111b2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00111b6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00111ba:	c1 f8 03             	sar    eax,0x3
c00111bd:	01 c2                	add    edx,eax
c00111bf:	89 e8                	mov    eax,ebp
c00111c1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00111c5:	39 c6                	cmp    esi,eax
c00111c7:	7f b0                	jg     c0011179 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00111c9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00111cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00111d1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00111d4:	7e 22                	jle    c00111f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00111d6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00111da:	eb 99                	jmp    c0011175 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00111dc:	50                   	push   eax
c00111dd:	50                   	push   eax
c00111de:	51                   	push   ecx
c00111df:	68 a4 38 02 c0       	push   0xc00238a4
c00111e4:	e8 82 b8 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00111e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111ec:	e8 e2 87 ff ff       	call   c00099d3 <free>
c00111f1:	83 c4 10             	add    esp,0x10
c00111f4:	31 ff                	xor    edi,edi
c00111f6:	eb 0f                	jmp    c0011207 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00111f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00111fc:	89 30                	mov    DWORD PTR [eax],esi
c00111fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011202:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011205:	89 30                	mov    DWORD PTR [eax],esi
c0011207:	83 c4 1c             	add    esp,0x1c
c001120a:	89 f8                	mov    eax,edi
c001120c:	5b                   	pop    ebx
c001120d:	5e                   	pop    esi
c001120e:	5f                   	pop    edi
c001120f:	5d                   	pop    ebp
c0011210:	c3                   	ret    
c0011211:	90                   	nop

c0011212 <Video::putTGA(int, int, unsigned char*, int)>:
c0011212:	55                   	push   ebp
c0011213:	57                   	push   edi
c0011214:	56                   	push   esi
c0011215:	53                   	push   ebx
c0011216:	83 ec 28             	sub    esp,0x28
c0011219:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001121d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011221:	50                   	push   eax
c0011222:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011226:	50                   	push   eax
c0011227:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001122b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001122f:	56                   	push   esi
c0011230:	e8 75 fe ff ff       	call   c00110aa <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011235:	83 c4 20             	add    esp,0x20
c0011238:	85 c0                	test   eax,eax
c001123a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001123e:	74 35                	je     c0011275 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011240:	89 c7                	mov    edi,eax
c0011242:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011246:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001124a:	39 d8                	cmp    eax,ebx
c001124c:	7e 27                	jle    c0011275 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001124e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011252:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011256:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001125a:	39 e8                	cmp    eax,ebp
c001125c:	7e 14                	jle    c0011272 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001125e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011260:	83 c7 04             	add    edi,0x4
c0011263:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011266:	53                   	push   ebx
c0011267:	55                   	push   ebp
c0011268:	45                   	inc    ebp
c0011269:	56                   	push   esi
c001126a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001126d:	83 c4 10             	add    esp,0x10
c0011270:	eb e0                	jmp    c0011252 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011272:	43                   	inc    ebx
c0011273:	eb cd                	jmp    c0011242 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011275:	83 c4 1c             	add    esp,0x1c
c0011278:	5b                   	pop    ebx
c0011279:	5e                   	pop    esi
c001127a:	5f                   	pop    edi
c001127b:	5d                   	pop    ebp
c001127c:	c3                   	ret    
c001127d:	66 90                	xchg   ax,ax
c001127f:	90                   	nop

c0011280 <ACPI::close(int, int, void*)>:
c0011280:	83 ec 1c             	sub    esp,0x1c
c0011283:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001128b:	74 0b                	je     c0011298 <ACPI::close(int, int, void*)+0x18>
c001128d:	b8 00 00 00 00       	mov    eax,0x0
c0011292:	e9 99 00 00 00       	jmp    c0011330 <ACPI::close(int, int, void*)+0xb0>
c0011297:	90                   	nop
c0011298:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001129d:	75 29                	jne    c00112c8 <ACPI::close(int, int, void*)+0x48>
c001129f:	a1 c8 67 02 c0       	mov    eax,ds:0xc00267c8
c00112a4:	85 c0                	test   eax,eax
c00112a6:	74 08                	je     c00112b0 <ACPI::close(int, int, void*)+0x30>
c00112a8:	a1 c8 67 02 c0       	mov    eax,ds:0xc00267c8
c00112ad:	ff d0                	call   eax
c00112af:	90                   	nop
c00112b0:	83 ec 0c             	sub    esp,0xc
c00112b3:	68 00 39 02 c0       	push   0xc0023900
c00112b8:	e8 4e 30 00 00       	call   c001430b <Krnl::panic(char const*)>
c00112bd:	83 c4 10             	add    esp,0x10
c00112c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112c5:	eb 69                	jmp    c0011330 <ACPI::close(int, int, void*)+0xb0>
c00112c7:	90                   	nop
c00112c8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00112cd:	75 59                	jne    c0011328 <ACPI::close(int, int, void*)+0xa8>
c00112cf:	a1 c4 67 02 c0       	mov    eax,ds:0xc00267c4
c00112d4:	85 c0                	test   eax,eax
c00112d6:	74 08                	je     c00112e0 <ACPI::close(int, int, void*)+0x60>
c00112d8:	a1 c4 67 02 c0       	mov    eax,ds:0xc00267c4
c00112dd:	ff d0                	call   eax
c00112df:	90                   	nop
c00112e0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00112e5:	8d 76 00             	lea    esi,[esi+0x0]
c00112e8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00112ed:	83 e0 02             	and    eax,0x2
c00112f0:	74 1e                	je     c0011310 <ACPI::close(int, int, void*)+0x90>
c00112f2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00112f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112fd:	89 c2                	mov    edx,eax
c00112ff:	ec                   	in     al,dx
c0011300:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011304:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011308:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001130c:	eb da                	jmp    c00112e8 <ACPI::close(int, int, void*)+0x68>
c001130e:	66 90                	xchg   ax,ax
c0011310:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011317:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001131c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011320:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011324:	ee                   	out    dx,al
c0011325:	8d 76 00             	lea    esi,[esi+0x0]
c0011328:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001132d:	8d 76 00             	lea    esi,[esi+0x0]
c0011330:	83 c4 1c             	add    esp,0x1c
c0011333:	c3                   	ret    

c0011334 <findRSDP()>:
c0011334:	83 ec 1c             	sub    esp,0x1c
c0011337:	83 ec 0c             	sub    esp,0xc
c001133a:	68 db 39 02 c0       	push   0xc00239db
c001133f:	e8 d9 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011344:	83 c4 10             	add    esp,0x10
c0011347:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c001134c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011352:	83 e0 04             	and    eax,0x4
c0011355:	84 c0                	test   al,al
c0011357:	75 0b                	jne    c0011364 <findRSDP()+0x30>
c0011359:	b8 00 00 00 00       	mov    eax,0x0
c001135e:	e9 a1 00 00 00       	jmp    c0011404 <findRSDP()+0xd0>
c0011363:	90                   	nop
c0011364:	a1 b8 61 02 c0       	mov    eax,ds:0xc00261b8
c0011369:	3d ff 07 00 00       	cmp    eax,0x7ff
c001136e:	7f 1c                	jg     c001138c <findRSDP()+0x58>
c0011370:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0011375:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001137b:	83 e2 fb             	and    edx,0xfffffffb
c001137e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011384:	b8 00 00 00 00       	mov    eax,0x0
c0011389:	eb 79                	jmp    c0011404 <findRSDP()+0xd0>
c001138b:	90                   	nop
c001138c:	83 ec 0c             	sub    esp,0xc
c001138f:	68 eb 39 02 c0       	push   0xc00239eb
c0011394:	e8 84 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011399:	83 c4 10             	add    esp,0x10
c001139c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00113a4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00113ac:	77 3e                	ja     c00113ec <findRSDP()+0xb8>
c00113ae:	83 ec 04             	sub    esp,0x4
c00113b1:	6a 08                	push   0x8
c00113b3:	68 04 3a 02 c0       	push   0xc0023a04
c00113b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113bc:	e8 bf f1 fe ff       	call   c0000580 <memcmp>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	85 c0                	test   eax,eax
c00113c6:	0f 94 c0             	sete   al
c00113c9:	84 c0                	test   al,al
c00113cb:	74 17                	je     c00113e4 <findRSDP()+0xb0>
c00113cd:	83 ec 0c             	sub    esp,0xc
c00113d0:	68 0d 3a 02 c0       	push   0xc0023a0d
c00113d5:	e8 43 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113e1:	eb 21                	jmp    c0011404 <findRSDP()+0xd0>
c00113e3:	90                   	nop
c00113e4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00113e9:	eb b9                	jmp    c00113a4 <findRSDP()+0x70>
c00113eb:	90                   	nop
c00113ec:	83 ec 0c             	sub    esp,0xc
c00113ef:	68 1b 3a 02 c0       	push   0xc0023a1b
c00113f4:	e8 24 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113f9:	83 c4 10             	add    esp,0x10
c00113fc:	b8 00 00 00 00       	mov    eax,0x0
c0011401:	8d 76 00             	lea    esi,[esi+0x0]
c0011404:	83 c4 1c             	add    esp,0x1c
c0011407:	c3                   	ret    

c0011408 <loadACPITables(unsigned char*)>:
c0011408:	57                   	push   edi
c0011409:	56                   	push   esi
c001140a:	53                   	push   ebx
c001140b:	83 ec 60             	sub    esp,0x60
c001140e:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0011413:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011419:	83 e0 04             	and    eax,0x4
c001141c:	84 c0                	test   al,al
c001141e:	0f 84 3c 02 00 00    	je     c0011660 <loadACPITables(unsigned char*)+0x258>
c0011424:	a0 e0 69 02 c0       	mov    al,ds:0xc00269e0
c0011429:	84 c0                	test   al,al
c001142b:	74 77                	je     c00114a4 <loadACPITables(unsigned char*)+0x9c>
c001142d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011431:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011435:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011439:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143c:	83 e8 24             	sub    eax,0x24
c001143f:	c1 e8 03             	shr    eax,0x3
c0011442:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011446:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001144e:	66 90                	xchg   ax,ax
c0011450:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011454:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011458:	0f 8d b6 00 00 00    	jge    c0011514 <loadACPITables(unsigned char*)+0x10c>
c001145e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011462:	83 c0 24             	add    eax,0x24
c0011465:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011469:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001146d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011471:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011475:	c1 e0 03             	shl    eax,0x3
c0011478:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001147c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011480:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011483:	8b 00                	mov    eax,DWORD PTR [eax]
c0011485:	89 c1                	mov    ecx,eax
c0011487:	a1 cc 67 02 c0       	mov    eax,ds:0xc00267cc
c001148c:	8d 50 01             	lea    edx,[eax+0x1]
c001148f:	89 15 cc 67 02 c0    	mov    DWORD PTR ds:0xc00267cc,edx
c0011495:	89 ca                	mov    edx,ecx
c0011497:	89 14 c5 e4 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd981c],edx
c001149e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00114a2:	eb ac                	jmp    c0011450 <loadACPITables(unsigned char*)+0x48>
c00114a4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00114ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b3:	83 e8 24             	sub    eax,0x24
c00114b6:	c1 e8 02             	shr    eax,0x2
c00114b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00114bd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00114c5:	8d 76 00             	lea    esi,[esi+0x0]
c00114c8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00114cc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00114d0:	7d 42                	jge    c0011514 <loadACPITables(unsigned char*)+0x10c>
c00114d2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114d6:	83 c0 24             	add    eax,0x24
c00114d9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00114dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00114e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00114e5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00114e9:	c1 e0 02             	shl    eax,0x2
c00114ec:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00114f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00114f6:	a1 cc 67 02 c0       	mov    eax,ds:0xc00267cc
c00114fb:	8d 50 01             	lea    edx,[eax+0x1]
c00114fe:	89 15 cc 67 02 c0    	mov    DWORD PTR ds:0xc00267cc,edx
c0011504:	89 ca                	mov    edx,ecx
c0011506:	89 14 c5 e4 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd981c],edx
c001150d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011511:	eb b5                	jmp    c00114c8 <loadACPITables(unsigned char*)+0xc0>
c0011513:	90                   	nop
c0011514:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001151c:	a1 cc 67 02 c0       	mov    eax,ds:0xc00267cc
c0011521:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011525:	0f 8d 39 01 00 00    	jge    c0011664 <loadACPITables(unsigned char*)+0x25c>
c001152b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001152f:	8b 04 c5 e4 67 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd981c]
c0011536:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001153a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001153e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011546:	25 ff 0f 00 00       	and    eax,0xfff
c001154b:	89 c6                	mov    esi,eax
c001154d:	8b 1d b0 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262b0
c0011553:	83 ec 0c             	sub    esp,0xc
c0011556:	6a 01                	push   0x1
c0011558:	e8 e8 a1 ff ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c001155d:	83 c4 10             	add    esp,0x10
c0011560:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011564:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001156a:	83 ec 0c             	sub    esp,0xc
c001156d:	6a 01                	push   0x1
c001156f:	6a 01                	push   0x1
c0011571:	50                   	push   eax
c0011572:	52                   	push   edx
c0011573:	53                   	push   ebx
c0011574:	e8 69 ab ff ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011579:	83 c4 20             	add    esp,0x20
c001157c:	09 f0                	or     eax,esi
c001157e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011582:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011586:	c1 e0 03             	shl    eax,0x3
c0011589:	05 e0 67 02 c0       	add    eax,0xc00267e0
c001158e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011592:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011596:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001159a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00115a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00115aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00115b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115b6:	89 c6                	mov    esi,eax
c00115b8:	89 d7                	mov    edi,edx
c00115ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115bc:	89 c8                	mov    eax,ecx
c00115be:	89 fa                	mov    edx,edi
c00115c0:	89 f3                	mov    ebx,esi
c00115c2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00115c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00115ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00115d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00115dd:	05 00 10 00 00       	add    eax,0x1000
c00115e2:	c1 e8 0c             	shr    eax,0xc
c00115e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00115e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00115f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115f5:	25 ff 0f 00 00       	and    eax,0xfff
c00115fa:	89 c6                	mov    esi,eax
c00115fc:	8b 1d b0 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262b0
c0011602:	83 ec 0c             	sub    esp,0xc
c0011605:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011609:	e8 37 a1 ff ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c001160e:	83 c4 10             	add    esp,0x10
c0011611:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011615:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001161b:	83 ec 0c             	sub    esp,0xc
c001161e:	6a 01                	push   0x1
c0011620:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011624:	50                   	push   eax
c0011625:	52                   	push   edx
c0011626:	53                   	push   ebx
c0011627:	e8 b6 aa ff ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001162c:	83 c4 20             	add    esp,0x20
c001162f:	09 f0                	or     eax,esi
c0011631:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011639:	83 ec 0c             	sub    esp,0xc
c001163c:	50                   	push   eax
c001163d:	e8 33 a4 ff ff       	call   c000ba75 <Virt::freeKernelVirtualPages(unsigned long)>
c0011642:	83 c4 10             	add    esp,0x10
c0011645:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011649:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001164d:	89 14 c5 e4 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd981c],edx
c0011654:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011658:	e9 bf fe ff ff       	jmp    c001151c <loadACPITables(unsigned char*)+0x114>
c001165d:	8d 76 00             	lea    esi,[esi+0x0]
c0011660:	90                   	nop
c0011661:	8d 76 00             	lea    esi,[esi+0x0]
c0011664:	83 c4 60             	add    esp,0x60
c0011667:	5b                   	pop    ebx
c0011668:	5e                   	pop    esi
c0011669:	5f                   	pop    edi
c001166a:	c3                   	ret    
c001166b:	90                   	nop

c001166c <findRSDT(unsigned char*)>:
c001166c:	57                   	push   edi
c001166d:	56                   	push   esi
c001166e:	53                   	push   ebx
c001166f:	83 ec 50             	sub    esp,0x50
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	68 2f 3a 02 c0       	push   0xc0023a2f
c001167a:	e8 9e 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001167f:	83 c4 10             	add    esp,0x10
c0011682:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0011687:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001168d:	83 e0 04             	and    eax,0x4
c0011690:	84 c0                	test   al,al
c0011692:	75 0c                	jne    c00116a0 <findRSDT(unsigned char*)+0x34>
c0011694:	b8 00 00 00 00       	mov    eax,0x0
c0011699:	e9 86 01 00 00       	jmp    c0011824 <findRSDT(unsigned char*)+0x1b8>
c001169e:	66 90                	xchg   ax,ax
c00116a0:	83 ec 0c             	sub    esp,0xc
c00116a3:	68 41 3a 02 c0       	push   0xc0023a41
c00116a8:	e8 70 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	89 e0                	mov    eax,esp
c00116b2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00116b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00116ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00116be:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00116c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00116ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00116ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00116d6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00116da:	89 c6                	mov    esi,eax
c00116dc:	89 d7                	mov    edi,edx
c00116de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116e0:	89 c8                	mov    eax,ecx
c00116e2:	89 fa                	mov    edx,edi
c00116e4:	89 f3                	mov    ebx,esi
c00116e6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00116ea:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00116ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00116f2:	83 ec 0c             	sub    esp,0xc
c00116f5:	68 53 3a 02 c0       	push   0xc0023a53
c00116fa:	e8 1e 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011706:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001170a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011712:	83 ec 0c             	sub    esp,0xc
c0011715:	68 65 3a 02 c0       	push   0xc0023a65
c001171a:	e8 fe 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001172a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001172e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011732:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011736:	83 ec 04             	sub    esp,0x4
c0011739:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001173d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011741:	68 24 39 02 c0       	push   0xc0023924
c0011746:	e8 20 b3 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011752:	25 ff 0f 00 00       	and    eax,0xfff
c0011757:	89 c6                	mov    esi,eax
c0011759:	8b 1d b0 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262b0
c001175f:	83 ec 0c             	sub    esp,0xc
c0011762:	6a 02                	push   0x2
c0011764:	e8 dc 9f ff ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011770:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011776:	83 ec 0c             	sub    esp,0xc
c0011779:	6a 01                	push   0x1
c001177b:	6a 02                	push   0x2
c001177d:	50                   	push   eax
c001177e:	52                   	push   edx
c001177f:	53                   	push   ebx
c0011780:	e8 5d a9 ff ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011785:	83 c4 20             	add    esp,0x20
c0011788:	09 f0                	or     eax,esi
c001178a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001178e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011792:	25 ff 0f 00 00       	and    eax,0xfff
c0011797:	89 c6                	mov    esi,eax
c0011799:	8b 1d b0 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262b0
c001179f:	83 ec 0c             	sub    esp,0xc
c00117a2:	6a 02                	push   0x2
c00117a4:	e8 9c 9f ff ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00117b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117b6:	83 ec 0c             	sub    esp,0xc
c00117b9:	6a 01                	push   0x1
c00117bb:	6a 02                	push   0x2
c00117bd:	50                   	push   eax
c00117be:	52                   	push   edx
c00117bf:	53                   	push   ebx
c00117c0:	e8 1d a9 ff ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00117c5:	83 c4 20             	add    esp,0x20
c00117c8:	09 f0                	or     eax,esi
c00117ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00117ce:	83 ec 04             	sub    esp,0x4
c00117d1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117d5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117d9:	68 44 39 02 c0       	push   0xc0023944
c00117de:	e8 88 b2 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00117eb:	75 13                	jne    c0011800 <findRSDT(unsigned char*)+0x194>
c00117ed:	c6 05 e0 69 02 c0 00 	mov    BYTE PTR ds:0xc00269e0,0x0
c00117f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00117f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00117fc:	eb 22                	jmp    c0011820 <findRSDT(unsigned char*)+0x1b4>
c00117fe:	66 90                	xchg   ax,ax
c0011800:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011805:	75 11                	jne    c0011818 <findRSDT(unsigned char*)+0x1ac>
c0011807:	c6 05 e0 69 02 c0 01 	mov    BYTE PTR ds:0xc00269e0,0x1
c001180e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011812:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011816:	eb 08                	jmp    c0011820 <findRSDT(unsigned char*)+0x1b4>
c0011818:	b8 00 00 00 00       	mov    eax,0x0
c001181d:	eb 05                	jmp    c0011824 <findRSDT(unsigned char*)+0x1b8>
c001181f:	90                   	nop
c0011820:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011824:	83 c4 50             	add    esp,0x50
c0011827:	5b                   	pop    ebx
c0011828:	5e                   	pop    esi
c0011829:	5f                   	pop    edi
c001182a:	c3                   	ret    
c001182b:	90                   	nop

c001182c <findDataTable(unsigned char*, char*)>:
c001182c:	83 ec 1c             	sub    esp,0x1c
c001182f:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0011834:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001183a:	83 e0 04             	and    eax,0x4
c001183d:	84 c0                	test   al,al
c001183f:	75 07                	jne    c0011848 <findDataTable(unsigned char*, char*)+0x1c>
c0011841:	b8 00 00 00 00       	mov    eax,0x0
c0011846:	eb 58                	jmp    c00118a0 <findDataTable(unsigned char*, char*)+0x74>
c0011848:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011850:	a1 cc 67 02 c0       	mov    eax,ds:0xc00267cc
c0011855:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011859:	7d 3d                	jge    c0011898 <findDataTable(unsigned char*, char*)+0x6c>
c001185b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001185f:	c1 e0 03             	shl    eax,0x3
c0011862:	05 e0 67 02 c0       	add    eax,0xc00267e0
c0011867:	83 ec 04             	sub    esp,0x4
c001186a:	6a 04                	push   0x4
c001186c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011870:	50                   	push   eax
c0011871:	e8 0a ed fe ff       	call   c0000580 <memcmp>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	85 c0                	test   eax,eax
c001187b:	0f 94 c0             	sete   al
c001187e:	84 c0                	test   al,al
c0011880:	74 0e                	je     c0011890 <findDataTable(unsigned char*, char*)+0x64>
c0011882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011886:	8b 04 c5 e4 67 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd981c]
c001188d:	eb 11                	jmp    c00118a0 <findDataTable(unsigned char*, char*)+0x74>
c001188f:	90                   	nop
c0011890:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011894:	eb ba                	jmp    c0011850 <findDataTable(unsigned char*, char*)+0x24>
c0011896:	66 90                	xchg   ax,ax
c0011898:	b8 00 00 00 00       	mov    eax,0x0
c001189d:	8d 76 00             	lea    esi,[esi+0x0]
c00118a0:	83 c4 1c             	add    esp,0x1c
c00118a3:	c3                   	ret    

c00118a4 <scanMADT()>:
c00118a4:	53                   	push   ebx
c00118a5:	83 ec 38             	sub    esp,0x38
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	68 77 3a 02 c0       	push   0xc0023a77
c00118b0:	e8 68 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00118b5:	83 c4 10             	add    esp,0x10
c00118b8:	a1 a0 61 02 c0       	mov    eax,ds:0xc00261a0
c00118bd:	25 00 04 00 00       	and    eax,0x400
c00118c2:	74 14                	je     c00118d8 <scanMADT()+0x34>
c00118c4:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00118c9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00118cf:	83 e2 fb             	and    edx,0xfffffffb
c00118d2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00118d8:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00118dd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00118e3:	83 e0 04             	and    eax,0x4
c00118e6:	84 c0                	test   al,al
c00118e8:	0f 84 82 04 00 00    	je     c0011d70 <scanMADT()+0x4cc>
c00118ee:	83 ec 0c             	sub    esp,0xc
c00118f1:	68 84 3a 02 c0       	push   0xc0023a84
c00118f6:	e8 22 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00118fb:	83 c4 10             	add    esp,0x10
c00118fe:	e8 31 fa ff ff       	call   c0011334 <findRSDP()>
c0011903:	a3 ec 69 02 c0       	mov    ds:0xc00269ec,eax
c0011908:	a1 ec 69 02 c0       	mov    eax,ds:0xc00269ec
c001190d:	85 c0                	test   eax,eax
c001190f:	75 1b                	jne    c001192c <scanMADT()+0x88>
c0011911:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0011916:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001191c:	83 e2 fb             	and    edx,0xfffffffb
c001191f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011925:	e9 4e 04 00 00       	jmp    c0011d78 <scanMADT()+0x4d4>
c001192a:	66 90                	xchg   ax,ax
c001192c:	83 ec 0c             	sub    esp,0xc
c001192f:	68 96 3a 02 c0       	push   0xc0023a96
c0011934:	e8 e4 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011939:	83 c4 10             	add    esp,0x10
c001193c:	a1 ec 69 02 c0       	mov    eax,ds:0xc00269ec
c0011941:	83 ec 0c             	sub    esp,0xc
c0011944:	50                   	push   eax
c0011945:	e8 22 fd ff ff       	call   c001166c <findRSDT(unsigned char*)>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	a3 e8 69 02 c0       	mov    ds:0xc00269e8,eax
c0011952:	a1 e8 69 02 c0       	mov    eax,ds:0xc00269e8
c0011957:	85 c0                	test   eax,eax
c0011959:	75 19                	jne    c0011974 <scanMADT()+0xd0>
c001195b:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0011960:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011966:	83 e2 fb             	and    edx,0xfffffffb
c0011969:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001196f:	e9 04 04 00 00       	jmp    c0011d78 <scanMADT()+0x4d4>
c0011974:	83 ec 0c             	sub    esp,0xc
c0011977:	68 a6 3a 02 c0       	push   0xc0023aa6
c001197c:	e8 9c 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011981:	83 c4 10             	add    esp,0x10
c0011984:	a1 e8 69 02 c0       	mov    eax,ds:0xc00269e8
c0011989:	83 ec 0c             	sub    esp,0xc
c001198c:	50                   	push   eax
c001198d:	e8 76 fa ff ff       	call   c0011408 <loadACPITables(unsigned char*)>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	a1 e8 69 02 c0       	mov    eax,ds:0xc00269e8
c001199a:	83 ec 08             	sub    esp,0x8
c001199d:	68 be 3a 02 c0       	push   0xc0023abe
c00119a2:	50                   	push   eax
c00119a3:	e8 84 fe ff ff       	call   c001182c <findDataTable(unsigned char*, char*)>
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00119af:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00119b4:	75 1a                	jne    c00119d0 <scanMADT()+0x12c>
c00119b6:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00119bb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119c1:	83 e2 fe             	and    edx,0xfffffffe
c00119c4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119ca:	e9 a9 03 00 00       	jmp    c0011d78 <scanMADT()+0x4d4>
c00119cf:	90                   	nop
c00119d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00119d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00119dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119df:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00119e3:	0f 87 8f 03 00 00    	ja     c0011d78 <scanMADT()+0x4d4>
c00119e9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00119f1:	0f 87 81 03 00 00    	ja     c0011d78 <scanMADT()+0x4d4>
c00119f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119fb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a03:	8d 50 01             	lea    edx,[eax+0x1]
c0011a06:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a0e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a12:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011a16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a1a:	8d 50 01             	lea    edx,[eax+0x1]
c0011a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a25:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a29:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011a2d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011a32:	0f 86 3c 03 00 00    	jbe    c0011d74 <scanMADT()+0x4d0>
c0011a38:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011a3d:	75 59                	jne    c0011a98 <scanMADT()+0x1f4>
c0011a3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a43:	8d 50 01             	lea    edx,[eax+0x1]
c0011a46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a4a:	8a 15 e0 6b 02 c0    	mov    dl,BYTE PTR ds:0xc0026be0
c0011a50:	0f b6 d2             	movzx  edx,dl
c0011a53:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011a57:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011a5b:	88 82 20 6c 02 c0    	mov    BYTE PTR [edx-0x3ffd93e0],al
c0011a61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a65:	8d 50 01             	lea    edx,[eax+0x1]
c0011a68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a6c:	8a 15 e0 6b 02 c0    	mov    dl,BYTE PTR ds:0xc0026be0
c0011a72:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011a75:	88 0d e0 6b 02 c0    	mov    BYTE PTR ds:0xc0026be0,cl
c0011a7b:	0f b6 d2             	movzx  edx,dl
c0011a7e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011a82:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011a86:	88 82 00 6c 02 c0    	mov    BYTE PTR [edx-0x3ffd9400],al
c0011a8c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011a91:	e9 c6 02 00 00       	jmp    c0011d5c <scanMADT()+0x4b8>
c0011a96:	66 90                	xchg   ax,ax
c0011a98:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011a9d:	0f 85 15 01 00 00    	jne    c0011bb8 <scanMADT()+0x314>
c0011aa3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0011aaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011aae:	8a 15 a0 6a 02 c0    	mov    dl,BYTE PTR ds:0xc0026aa0
c0011ab4:	0f b6 d2             	movzx  edx,dl
c0011ab7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011abb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011abf:	88 82 c0 6a 02 c0    	mov    BYTE PTR [edx-0x3ffd9540],al
c0011ac5:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011ac9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011acd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ad1:	01 d0                	add    eax,edx
c0011ad3:	83 c0 2c             	add    eax,0x2c
c0011ad6:	8a 00                	mov    al,BYTE PTR [eax]
c0011ad8:	0f b6 d0             	movzx  edx,al
c0011adb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011adf:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ae2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ae6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011aea:	0f b6 c0             	movzx  eax,al
c0011aed:	c1 e0 08             	shl    eax,0x8
c0011af0:	89 d1                	mov    ecx,edx
c0011af2:	09 c1                	or     ecx,eax
c0011af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011af8:	8d 50 02             	lea    edx,[eax+0x2]
c0011afb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011aff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b03:	0f b6 c0             	movzx  eax,al
c0011b06:	c1 e0 10             	shl    eax,0x10
c0011b09:	09 c1                	or     ecx,eax
c0011b0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b0f:	8d 50 03             	lea    edx,[eax+0x3]
c0011b12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b16:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b1a:	0f b6 c0             	movzx  eax,al
c0011b1d:	c1 e0 18             	shl    eax,0x18
c0011b20:	09 c1                	or     ecx,eax
c0011b22:	89 ca                	mov    edx,ecx
c0011b24:	a0 a0 6a 02 c0       	mov    al,ds:0xc0026aa0
c0011b29:	0f b6 c0             	movzx  eax,al
c0011b2c:	89 14 85 e0 6a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9520],edx
c0011b33:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b40:	01 d0                	add    eax,edx
c0011b42:	83 c0 2c             	add    eax,0x2c
c0011b45:	8a 00                	mov    al,BYTE PTR [eax]
c0011b47:	0f b6 d0             	movzx  edx,al
c0011b4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b4e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b55:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b59:	0f b6 c0             	movzx  eax,al
c0011b5c:	c1 e0 08             	shl    eax,0x8
c0011b5f:	89 d1                	mov    ecx,edx
c0011b61:	09 c1                	or     ecx,eax
c0011b63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b67:	8d 50 02             	lea    edx,[eax+0x2]
c0011b6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b6e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b72:	0f b6 c0             	movzx  eax,al
c0011b75:	c1 e0 10             	shl    eax,0x10
c0011b78:	09 c1                	or     ecx,eax
c0011b7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b7e:	8d 50 03             	lea    edx,[eax+0x3]
c0011b81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b85:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b89:	0f b6 c0             	movzx  eax,al
c0011b8c:	c1 e0 18             	shl    eax,0x18
c0011b8f:	09 c1                	or     ecx,eax
c0011b91:	89 ca                	mov    edx,ecx
c0011b93:	a0 a0 6a 02 c0       	mov    al,ds:0xc0026aa0
c0011b98:	0f b6 c0             	movzx  eax,al
c0011b9b:	89 14 85 60 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd94a0],edx
c0011ba2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011ba7:	a0 a0 6a 02 c0       	mov    al,ds:0xc0026aa0
c0011bac:	40                   	inc    eax
c0011bad:	a2 a0 6a 02 c0       	mov    ds:0xc0026aa0,al
c0011bb2:	e9 a5 01 00 00       	jmp    c0011d5c <scanMADT()+0x4b8>
c0011bb7:	90                   	nop
c0011bb8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011bbd:	0f 85 e9 00 00 00    	jne    c0011cac <scanMADT()+0x408>
c0011bc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bc7:	8d 50 01             	lea    edx,[eax+0x1]
c0011bca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011bce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bd2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011bd6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011bda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bde:	8d 50 01             	lea    edx,[eax+0x1]
c0011be1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011be5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011be9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011bed:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011bf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bf9:	01 d0                	add    eax,edx
c0011bfb:	83 c0 2c             	add    eax,0x2c
c0011bfe:	8a 00                	mov    al,BYTE PTR [eax]
c0011c00:	0f b6 d0             	movzx  edx,al
c0011c03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c07:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c0e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c12:	0f b6 c0             	movzx  eax,al
c0011c15:	c1 e0 08             	shl    eax,0x8
c0011c18:	89 d1                	mov    ecx,edx
c0011c1a:	09 c1                	or     ecx,eax
c0011c1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c20:	8d 50 02             	lea    edx,[eax+0x2]
c0011c23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c27:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c2b:	0f b6 c0             	movzx  eax,al
c0011c2e:	c1 e0 10             	shl    eax,0x10
c0011c31:	09 c1                	or     ecx,eax
c0011c33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c37:	8d 50 03             	lea    edx,[eax+0x3]
c0011c3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c42:	0f b6 c0             	movzx  eax,al
c0011c45:	c1 e0 18             	shl    eax,0x18
c0011c48:	09 c8                	or     eax,ecx
c0011c4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c4e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c5b:	01 d0                	add    eax,edx
c0011c5d:	83 c0 2c             	add    eax,0x2c
c0011c60:	8a 00                	mov    al,BYTE PTR [eax]
c0011c62:	0f b6 c0             	movzx  eax,al
c0011c65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011c69:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011c6c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c70:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011c74:	0f b6 d2             	movzx  edx,dl
c0011c77:	c1 e2 08             	shl    edx,0x8
c0011c7a:	09 d0                	or     eax,edx
c0011c7c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011c81:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011c86:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011c8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c8f:	88 90 80 58 02 c0    	mov    BYTE PTR [eax-0x3ffda780],dl
c0011c95:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011c9a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011c9f:	66 89 84 12 80 6a 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9580],ax
c0011ca7:	e9 b0 00 00 00       	jmp    c0011d5c <scanMADT()+0x4b8>
c0011cac:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011cb1:	0f 85 99 00 00 00    	jne    c0011d50 <scanMADT()+0x4ac>
c0011cb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cbb:	8d 50 01             	lea    edx,[eax+0x1]
c0011cbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cc6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cca:	0f b6 c0             	movzx  eax,al
c0011ccd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011cd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cd9:	01 d0                	add    eax,edx
c0011cdb:	83 c0 2c             	add    eax,0x2c
c0011cde:	8a 00                	mov    al,BYTE PTR [eax]
c0011ce0:	0f b6 d0             	movzx  edx,al
c0011ce3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ce7:	8d 48 01             	lea    ecx,[eax+0x1]
c0011cea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011cf2:	0f b6 c0             	movzx  eax,al
c0011cf5:	c1 e0 08             	shl    eax,0x8
c0011cf8:	09 d0                	or     eax,edx
c0011cfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011cfe:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d07:	8d 50 01             	lea    edx,[eax+0x1]
c0011d0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d12:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d16:	0f b6 c0             	movzx  eax,al
c0011d19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d21:	c1 e0 08             	shl    eax,0x8
c0011d24:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011d28:	89 c1                	mov    ecx,eax
c0011d2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d2e:	c1 e0 18             	shl    eax,0x18
c0011d31:	89 c3                	mov    ebx,eax
c0011d33:	a1 f0 69 02 c0       	mov    eax,ds:0xc00269f0
c0011d38:	8d 50 01             	lea    edx,[eax+0x1]
c0011d3b:	89 15 f0 69 02 c0    	mov    DWORD PTR ds:0xc00269f0,edx
c0011d41:	09 d9                	or     ecx,ebx
c0011d43:	89 ca                	mov    edx,ecx
c0011d45:	89 14 85 00 6a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9600],edx
c0011d4c:	eb 0e                	jmp    c0011d5c <scanMADT()+0x4b8>
c0011d4e:	66 90                	xchg   ax,ax
c0011d50:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011d55:	75 05                	jne    c0011d5c <scanMADT()+0x4b8>
c0011d57:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011d5c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011d61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011d65:	01 d0                	add    eax,edx
c0011d67:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d6b:	e9 68 fc ff ff       	jmp    c00119d8 <scanMADT()+0x134>
c0011d70:	90                   	nop
c0011d71:	eb 05                	jmp    c0011d78 <scanMADT()+0x4d4>
c0011d73:	90                   	nop
c0011d74:	90                   	nop
c0011d75:	8d 76 00             	lea    esi,[esi+0x0]
c0011d78:	83 c4 38             	add    esp,0x38
c0011d7b:	5b                   	pop    ebx
c0011d7c:	c3                   	ret    
c0011d7d:	90                   	nop
c0011d7e:	66 90                	xchg   ax,ax

c0011d80 <ACPI::ACPI()>:
c0011d80:	83 ec 0c             	sub    esp,0xc
c0011d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d87:	83 ec 08             	sub    esp,0x8
c0011d8a:	68 c3 3a 02 c0       	push   0xc0023ac3
c0011d8f:	50                   	push   eax
c0011d90:	e8 21 c3 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0011d95:	83 c4 10             	add    esp,0x10
c0011d98:	ba 4c 3c 02 c0       	mov    edx,0xc0023c4c
c0011d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011da1:	89 10                	mov    DWORD PTR [eax],edx
c0011da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011da7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dc0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011dca:	83 ec 0c             	sub    esp,0xc
c0011dcd:	68 c8 3a 02 c0       	push   0xc0023ac8
c0011dd2:	e8 46 7c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011dd7:	83 c4 10             	add    esp,0x10
c0011dda:	e8 c5 fa ff ff       	call   c00118a4 <scanMADT()>
c0011ddf:	90                   	nop
c0011de0:	83 c4 0c             	add    esp,0xc
c0011de3:	c3                   	ret    

c0011de4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011de4:	83 ec 2c             	sub    esp,0x2c
c0011de7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011deb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011def:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011df3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011df7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011dfc:	88 d0                	mov    al,dl
c0011dfe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011e02:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011e07:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e0f:	90                   	nop
c0011e10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e14:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011e1a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011e1e:	0f 8d 9c 00 00 00    	jge    c0011ec0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011e24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e2c:	83 c2 2a             	add    edx,0x2a
c0011e2f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011e33:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011e38:	75 7a                	jne    c0011eb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011e3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e42:	83 c2 2a             	add    edx,0x2a
c0011e45:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011e49:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011e4d:	75 65                	jne    c0011eb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011e4f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e54:	74 3a                	je     c0011e90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011e56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e5e:	83 c2 2a             	add    edx,0x2a
c0011e61:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011e65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e6c:	39 c2                	cmp    edx,eax
c0011e6e:	74 10                	je     c0011e80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011e70:	83 ec 0c             	sub    esp,0xc
c0011e73:	68 64 39 02 c0       	push   0xc0023964
c0011e78:	e8 8e 24 00 00       	call   c001430b <Krnl::panic(char const*)>
c0011e7d:	83 c4 10             	add    esp,0x10
c0011e80:	83 ec 0c             	sub    esp,0xc
c0011e83:	68 d6 3a 02 c0       	push   0xc0023ad6
c0011e88:	e8 7e 24 00 00       	call   c001430b <Krnl::panic(char const*)>
c0011e8d:	83 c4 10             	add    esp,0x10
c0011e90:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011e94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e9c:	83 c2 2a             	add    edx,0x2a
c0011e9f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011ea3:	8b 02                	mov    eax,DWORD PTR [edx]
c0011ea5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011ea8:	89 01                	mov    DWORD PTR [ecx],eax
c0011eaa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011ead:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011eb2:	66 90                	xchg   ax,ax
c0011eb4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011eb8:	e9 53 ff ff ff       	jmp    c0011e10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0011ec0:	90                   	nop
c0011ec1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ec5:	83 c4 2c             	add    esp,0x2c
c0011ec8:	c2 04 00             	ret    0x4
c0011ecb:	90                   	nop

c0011ecc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011ecc:	83 ec 1c             	sub    esp,0x1c
c0011ecf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ed3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011ed7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011edb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011ee0:	88 c8                	mov    al,cl
c0011ee2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011ee6:	88 d0                	mov    al,dl
c0011ee8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011efa:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011efd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011f01:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f09:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011f13:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011f16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f1a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f23:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f29:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011f2d:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f34:	83 c2 2a             	add    edx,0x2a
c0011f37:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f3f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f49:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f50:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f58:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f5e:	8d 50 01             	lea    edx,[eax+0x1]
c0011f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f65:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f6f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f75:	3d 00 02 00 00       	cmp    eax,0x200
c0011f7a:	75 10                	jne    c0011f8c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011f7c:	83 ec 0c             	sub    esp,0xc
c0011f7f:	68 e5 3a 02 c0       	push   0xc0023ae5
c0011f84:	e8 82 23 00 00       	call   c001430b <Krnl::panic(char const*)>
c0011f89:	83 c4 10             	add    esp,0x10
c0011f8c:	90                   	nop
c0011f8d:	83 c4 1c             	add    esp,0x1c
c0011f90:	c3                   	ret    
c0011f91:	90                   	nop
c0011f92:	66 90                	xchg   ax,ax

c0011f94 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0011f94:	b8 00 00 00 00       	mov    eax,0x0
c0011f99:	c3                   	ret    
c0011f9a:	66 90                	xchg   ax,ax

c0011f9c <ACPI::detectPCI()>:
c0011f9c:	53                   	push   ebx
c0011f9d:	83 ec 28             	sub    esp,0x28
c0011fa0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011fa5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0011faa:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0011faf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011fb5:	83 e0 04             	and    eax,0x4
c0011fb8:	84 c0                	test   al,al
c0011fba:	74 2c                	je     c0011fe8 <ACPI::detectPCI()+0x4c>
c0011fbc:	a1 e8 69 02 c0       	mov    eax,ds:0xc00269e8
c0011fc1:	83 ec 08             	sub    esp,0x8
c0011fc4:	68 02 3b 02 c0       	push   0xc0023b02
c0011fc9:	50                   	push   eax
c0011fca:	e8 5d f8 ff ff       	call   c001182c <findDataTable(unsigned char*, char*)>
c0011fcf:	83 c4 10             	add    esp,0x10
c0011fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fd6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011fdb:	74 0b                	je     c0011fe8 <ACPI::detectPCI()+0x4c>
c0011fdd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011fe2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0011fe7:	90                   	nop
c0011fe8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0011ff0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ff4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ff6:	3c 01                	cmp    al,0x1
c0011ff8:	75 0e                	jne    c0012008 <ACPI::detectPCI()+0x6c>
c0011ffa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011fff:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012004:	eb 2a                	jmp    c0012030 <ACPI::detectPCI()+0x94>
c0012006:	66 90                	xchg   ax,ax
c0012008:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001200c:	8a 00                	mov    al,BYTE PTR [eax]
c001200e:	3c 02                	cmp    al,0x2
c0012010:	75 1e                	jne    c0012030 <ACPI::detectPCI()+0x94>
c0012012:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012017:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001201c:	74 12                	je     c0012030 <ACPI::detectPCI()+0x94>
c001201e:	83 ec 0c             	sub    esp,0xc
c0012021:	68 94 39 02 c0       	push   0xc0023994
c0012026:	e8 e0 22 00 00       	call   c001430b <Krnl::panic(char const*)>
c001202b:	83 c4 10             	add    esp,0x10
c001202e:	66 90                	xchg   ax,ax
c0012030:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012034:	83 f0 01             	xor    eax,0x1
c0012037:	84 c0                	test   al,al
c0012039:	74 41                	je     c001207c <ACPI::detectPCI()+0xe0>
c001203b:	e8 10 e1 fe ff       	call   c0000150 <manualPCIProbe>
c0012040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012044:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0012049:	75 0d                	jne    c0012058 <ACPI::detectPCI()+0xbc>
c001204b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012050:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012055:	eb 25                	jmp    c001207c <ACPI::detectPCI()+0xe0>
c0012057:	90                   	nop
c0012058:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001205d:	75 1d                	jne    c001207c <ACPI::detectPCI()+0xe0>
c001205f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012064:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012069:	74 11                	je     c001207c <ACPI::detectPCI()+0xe0>
c001206b:	83 ec 0c             	sub    esp,0xc
c001206e:	68 94 39 02 c0       	push   0xc0023994
c0012073:	e8 93 22 00 00       	call   c001430b <Krnl::panic(char const*)>
c0012078:	83 c4 10             	add    esp,0x10
c001207b:	90                   	nop
c001207c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012081:	0f 84 85 00 00 00    	je     c001210c <ACPI::detectPCI()+0x170>
c0012087:	83 ec 0c             	sub    esp,0xc
c001208a:	68 07 3b 02 c0       	push   0xc0023b07
c001208f:	e8 89 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012094:	83 c4 10             	add    esp,0x10
c0012097:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001209f:	83 ec 0c             	sub    esp,0xc
c00120a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00120a6:	e8 18 79 ff ff       	call   c00099c3 <malloc>
c00120ab:	83 c4 10             	add    esp,0x10
c00120ae:	89 c3                	mov    ebx,eax
c00120b0:	83 ec 0c             	sub    esp,0xc
c00120b3:	53                   	push   ebx
c00120b4:	e8 e1 a9 00 00       	call   c001ca9a <PCI::PCI()>
c00120b9:	83 c4 10             	add    esp,0x10
c00120bc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00120c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120c4:	83 ec 08             	sub    esp,0x8
c00120c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120cb:	50                   	push   eax
c00120cc:	e8 e1 bd ff ff       	call   c000deb2 <Device::addChild(Device*)>
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00120da:	83 c0 08             	add    eax,0x8
c00120dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00120df:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120e4:	74 0a                	je     c00120f0 <ACPI::detectPCI()+0x154>
c00120e6:	ba 01 00 00 00       	mov    edx,0x1
c00120eb:	eb 0b                	jmp    c00120f8 <ACPI::detectPCI()+0x15c>
c00120ed:	8d 76 00             	lea    esi,[esi+0x0]
c00120f0:	ba 02 00 00 00       	mov    edx,0x2
c00120f5:	8d 76 00             	lea    esi,[esi+0x0]
c00120f8:	6a 00                	push   0x0
c00120fa:	6a 00                	push   0x0
c00120fc:	52                   	push   edx
c00120fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012101:	ff d0                	call   eax
c0012103:	83 c4 10             	add    esp,0x10
c0012106:	e9 a1 00 00 00       	jmp    c00121ac <ACPI::detectPCI()+0x210>
c001210b:	90                   	nop
c001210c:	83 ec 0c             	sub    esp,0xc
c001210f:	68 1f 3b 02 c0       	push   0xc0023b1f
c0012114:	e8 52 a9 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0012119:	83 c4 10             	add    esp,0x10
c001211c:	83 ec 0c             	sub    esp,0xc
c001211f:	68 2a 3b 02 c0       	push   0xc0023b2a
c0012124:	e8 f4 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012129:	83 c4 10             	add    esp,0x10
c001212c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0012133:	83 ec 0c             	sub    esp,0xc
c0012136:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001213a:	e8 84 78 ff ff       	call   c00099c3 <malloc>
c001213f:	83 c4 10             	add    esp,0x10
c0012142:	89 c3                	mov    ebx,eax
c0012144:	83 ec 0c             	sub    esp,0xc
c0012147:	53                   	push   ebx
c0012148:	e8 b7 b4 00 00       	call   c001d604 <IDE::IDE()>
c001214d:	83 c4 10             	add    esp,0x10
c0012150:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0012154:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012158:	83 ec 08             	sub    esp,0x8
c001215b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001215f:	50                   	push   eax
c0012160:	e8 4d bd ff ff       	call   c000deb2 <Device::addChild(Device*)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001216c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012176:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001217a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012183:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012187:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012194:	8b 00                	mov    eax,DWORD PTR [eax]
c0012196:	83 c0 08             	add    eax,0x8
c0012199:	8b 00                	mov    eax,DWORD PTR [eax]
c001219b:	6a 00                	push   0x0
c001219d:	6a 00                	push   0x0
c001219f:	6a 00                	push   0x0
c00121a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121a5:	ff d0                	call   eax
c00121a7:	83 c4 10             	add    esp,0x10
c00121aa:	66 90                	xchg   ax,ax
c00121ac:	90                   	nop
c00121ad:	83 c4 28             	add    esp,0x28
c00121b0:	5b                   	pop    ebx
c00121b1:	c3                   	ret    
c00121b2:	66 90                	xchg   ax,ax

c00121b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00121b4:	83 ec 1c             	sub    esp,0x1c
c00121b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00121bb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00121be:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00121c2:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00121c7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00121cc:	83 ec 08             	sub    esp,0x8
c00121cf:	52                   	push   edx
c00121d0:	50                   	push   eax
c00121d1:	e8 be 6d ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c00121d6:	83 c4 10             	add    esp,0x10
c00121d9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00121dd:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00121e2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00121e7:	83 ec 04             	sub    esp,0x4
c00121ea:	6a 01                	push   0x1
c00121ec:	52                   	push   edx
c00121ed:	50                   	push   eax
c00121ee:	e8 7d 6f ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c00121f3:	83 c4 10             	add    esp,0x10
c00121f6:	90                   	nop
c00121f7:	83 c4 1c             	add    esp,0x1c
c00121fa:	c3                   	ret    
c00121fb:	90                   	nop

c00121fc <ACPI::sleep()>:
c00121fc:	83 ec 0c             	sub    esp,0xc
c00121ff:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c0012204:	85 c0                	test   eax,eax
c0012206:	74 08                	je     c0012210 <ACPI::sleep()+0x14>
c0012208:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c001220d:	ff d0                	call   eax
c001220f:	90                   	nop
c0012210:	90                   	nop
c0012211:	83 c4 0c             	add    esp,0xc
c0012214:	c3                   	ret    
c0012215:	90                   	nop
c0012216:	66 90                	xchg   ax,ax

c0012218 <ACPI::open(int, int, void*)>:
c0012218:	57                   	push   edi
c0012219:	56                   	push   esi
c001221a:	53                   	push   ebx
c001221b:	81 ec 70 01 00 00    	sub    esp,0x170
c0012221:	83 ec 0c             	sub    esp,0xc
c0012224:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001222b:	e8 6c fd ff ff       	call   c0011f9c <ACPI::detectPCI()>
c0012230:	83 c4 10             	add    esp,0x10
c0012233:	83 ec 0c             	sub    esp,0xc
c0012236:	68 bc 39 02 c0       	push   0xc00239bc
c001223b:	e8 dd 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012240:	83 c4 10             	add    esp,0x10
c0012243:	83 ec 0c             	sub    esp,0xc
c0012246:	68 3f 3b 02 c0       	push   0xc0023b3f
c001224b:	e8 2f 48 00 00       	call   c0016a7f <Thr::loadKernelSymbolTable(char const*)>
c0012250:	83 c4 10             	add    esp,0x10
c0012253:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001225b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012266:	83 ec 0c             	sub    esp,0xc
c0012269:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012270:	e8 4e 77 ff ff       	call   c00099c3 <malloc>
c0012275:	83 c4 10             	add    esp,0x10
c0012278:	89 c3                	mov    ebx,eax
c001227a:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001227f:	83 ec 04             	sub    esp,0x4
c0012282:	50                   	push   eax
c0012283:	68 5d 3b 02 c0       	push   0xc0023b5d
c0012288:	53                   	push   ebx
c0012289:	e8 48 ad ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001228e:	83 c4 10             	add    esp,0x10
c0012291:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012298:	83 ec 08             	sub    esp,0x8
c001229b:	6a 01                	push   0x1
c001229d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00122a4:	e8 91 ad ff ff       	call   c000d03a <File::open(FileOpenMode)>
c00122a9:	83 c4 10             	add    esp,0x10
c00122ac:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00122b3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00122bb:	75 17                	jne    c00122d4 <ACPI::open(int, int, void*)+0xbc>
c00122bd:	83 ec 0c             	sub    esp,0xc
c00122c0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00122c7:	e8 cc ad ff ff       	call   c000d098 <File::close()>
c00122cc:	83 c4 10             	add    esp,0x10
c00122cf:	eb 0b                	jmp    c00122dc <ACPI::open(int, int, void*)+0xc4>
c00122d1:	8d 76 00             	lea    esi,[esi+0x0]
c00122d4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00122dc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00122e4:	74 1e                	je     c0012304 <ACPI::open(int, int, void*)+0xec>
c00122e6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00122ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00122ef:	83 c0 08             	add    eax,0x8
c00122f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00122f4:	83 ec 0c             	sub    esp,0xc
c00122f7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00122fe:	ff d0                	call   eax
c0012300:	83 c4 10             	add    esp,0x10
c0012303:	90                   	nop
c0012304:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001230b:	83 f0 01             	xor    eax,0x1
c001230e:	84 c0                	test   al,al
c0012310:	74 42                	je     c0012354 <ACPI::open(int, int, void*)+0x13c>
c0012312:	83 ec 0c             	sub    esp,0xc
c0012315:	68 7b 3b 02 c0       	push   0xc0023b7b
c001231a:	e8 fe 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001231f:	83 c4 10             	add    esp,0x10
c0012322:	83 ec 04             	sub    esp,0x4
c0012325:	6a 0c                	push   0xc
c0012327:	68 96 3b 02 c0       	push   0xc0023b96
c001232c:	68 a7 3b 02 c0       	push   0xc0023ba7
c0012331:	e8 b3 2d 00 00       	call   c00150e9 <Reg::readIntWithDefault(char*, char*, int)>
c0012336:	83 c4 10             	add    esp,0x10
c0012339:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012340:	83 ec 0c             	sub    esp,0xc
c0012343:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001234a:	e8 00 96 ff ff       	call   c000b94f <Virt::setupPageSwapping(int)>
c001234f:	83 c4 10             	add    esp,0x10
c0012352:	66 90                	xchg   ax,ax
c0012354:	83 ec 0c             	sub    esp,0xc
c0012357:	68 a6 24 02 c0       	push   0xc00224a6
c001235c:	e8 bc 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	8b 1d 88 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026188
c001236a:	83 ec 08             	sub    esp,0x8
c001236d:	6a 01                	push   0x1
c001236f:	68 ae 3b 02 c0       	push   0xc0023bae
c0012374:	e8 7d 51 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c0012379:	83 c4 10             	add    esp,0x10
c001237c:	83 ec 08             	sub    esp,0x8
c001237f:	53                   	push   ebx
c0012380:	50                   	push   eax
c0012381:	e8 a1 53 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c0012386:	83 c4 10             	add    esp,0x10
c0012389:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012390:	83 ec 08             	sub    esp,0x8
c0012393:	6a 12                	push   0x12
c0012395:	50                   	push   eax
c0012396:	e8 9b be ff ff       	call   c000e236 <getDevicesOfType(DeviceType)>
c001239b:	83 c4 0c             	add    esp,0xc
c001239e:	66 90                	xchg   ax,ax
c00123a0:	83 ec 0c             	sub    esp,0xc
c00123a3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00123aa:	50                   	push   eax
c00123ab:	e8 e0 f2 00 00       	call   c0021690 <LinkedList<Device>::isEmpty()>
c00123b0:	83 c4 10             	add    esp,0x10
c00123b3:	83 f0 01             	xor    eax,0x1
c00123b6:	84 c0                	test   al,al
c00123b8:	0f 84 46 01 00 00    	je     c0012504 <ACPI::open(int, int, void*)+0x2ec>
c00123be:	83 ec 0c             	sub    esp,0xc
c00123c1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00123c8:	50                   	push   eax
c00123c9:	e8 de f2 00 00       	call   c00216ac <LinkedList<Device>::getFirstElement()>
c00123ce:	83 c4 10             	add    esp,0x10
c00123d1:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00123d8:	83 ec 0c             	sub    esp,0xc
c00123db:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00123e2:	50                   	push   eax
c00123e3:	e8 cc f2 00 00       	call   c00216b4 <LinkedList<Device>::removeFirst()>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c00123f2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00123f9:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012400:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012404:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001240a:	ba 09 00 00 00       	mov    edx,0x9
c001240f:	fc                   	cld    
c0012410:	89 c7                	mov    edi,eax
c0012412:	89 de                	mov    esi,ebx
c0012414:	89 d1                	mov    ecx,edx
c0012416:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012418:	83 ec 08             	sub    esp,0x8
c001241b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001241f:	50                   	push   eax
c0012420:	83 ec 24             	sub    esp,0x24
c0012423:	89 e0                	mov    eax,esp
c0012425:	89 c3                	mov    ebx,eax
c0012427:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001242b:	ba 09 00 00 00       	mov    edx,0x9
c0012430:	89 df                	mov    edi,ebx
c0012432:	89 c6                	mov    esi,eax
c0012434:	89 d1                	mov    ecx,edx
c0012436:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012438:	e8 3b ab 00 00       	call   c001cf78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001243d:	83 c4 30             	add    esp,0x30
c0012440:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012447:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001244f:	0f 84 4b ff ff ff    	je     c00123a0 <ACPI::open(int, int, void*)+0x188>
c0012455:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012460:	83 ec 0c             	sub    esp,0xc
c0012463:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001246a:	e8 54 75 ff ff       	call   c00099c3 <malloc>
c001246f:	83 c4 10             	add    esp,0x10
c0012472:	89 c3                	mov    ebx,eax
c0012474:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0012479:	83 ec 04             	sub    esp,0x4
c001247c:	50                   	push   eax
c001247d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012484:	53                   	push   ebx
c0012485:	e8 4c ab ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012494:	83 ec 0c             	sub    esp,0xc
c0012497:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001249e:	e8 05 ae ff ff       	call   c000d2a8 <File::exists()>
c00124a3:	83 c4 10             	add    esp,0x10
c00124a6:	84 c0                	test   al,al
c00124a8:	74 2a                	je     c00124d4 <ACPI::open(int, int, void*)+0x2bc>
c00124aa:	83 ec 08             	sub    esp,0x8
c00124ad:	6a 01                	push   0x1
c00124af:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00124b6:	e8 3b 50 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c00124bb:	83 c4 10             	add    esp,0x10
c00124be:	83 ec 08             	sub    esp,0x8
c00124c1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00124c8:	50                   	push   eax
c00124c9:	e8 59 52 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	8d 76 00             	lea    esi,[esi+0x0]
c00124d4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00124dc:	0f 84 be fe ff ff    	je     c00123a0 <ACPI::open(int, int, void*)+0x188>
c00124e2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00124e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00124eb:	83 c0 08             	add    eax,0x8
c00124ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00124fa:	ff d0                	call   eax
c00124fc:	83 c4 10             	add    esp,0x10
c00124ff:	e9 9c fe ff ff       	jmp    c00123a0 <ACPI::open(int, int, void*)+0x188>
c0012504:	83 ec 0c             	sub    esp,0xc
c0012507:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001250e:	50                   	push   eax
c001250f:	e8 78 f1 00 00       	call   c002168c <LinkedList<Device>::~LinkedList()>
c0012514:	83 c4 10             	add    esp,0x10
c0012517:	8b 1d 88 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026188
c001251d:	83 ec 08             	sub    esp,0x8
c0012520:	6a 01                	push   0x1
c0012522:	68 c9 3b 02 c0       	push   0xc0023bc9
c0012527:	e8 ca 4f 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c001252c:	83 c4 10             	add    esp,0x10
c001252f:	83 ec 08             	sub    esp,0x8
c0012532:	53                   	push   ebx
c0012533:	50                   	push   eax
c0012534:	e8 ee 51 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	8b 1d 88 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026188
c0012542:	83 ec 08             	sub    esp,0x8
c0012545:	6a 01                	push   0x1
c0012547:	68 e6 3b 02 c0       	push   0xc0023be6
c001254c:	e8 a5 4f 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c0012551:	83 c4 10             	add    esp,0x10
c0012554:	83 ec 08             	sub    esp,0x8
c0012557:	53                   	push   ebx
c0012558:	50                   	push   eax
c0012559:	e8 c9 51 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c001255e:	83 c4 10             	add    esp,0x10
c0012561:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0012566:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001256c:	83 e0 04             	and    eax,0x4
c001256f:	84 c0                	test   al,al
c0012571:	0f 84 15 01 00 00    	je     c001268c <ACPI::open(int, int, void*)+0x474>
c0012577:	83 ec 0c             	sub    esp,0xc
c001257a:	68 03 3c 02 c0       	push   0xc0023c03
c001257f:	e8 99 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012592:	83 ec 0c             	sub    esp,0xc
c0012595:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001259c:	e8 22 74 ff ff       	call   c00099c3 <malloc>
c00125a1:	83 c4 10             	add    esp,0x10
c00125a4:	89 c3                	mov    ebx,eax
c00125a6:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00125ab:	83 ec 04             	sub    esp,0x4
c00125ae:	50                   	push   eax
c00125af:	68 20 3c 02 c0       	push   0xc0023c20
c00125b4:	53                   	push   ebx
c00125b5:	e8 1c aa ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00125c4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00125cc:	74 1a                	je     c00125e8 <ACPI::open(int, int, void*)+0x3d0>
c00125ce:	83 ec 0c             	sub    esp,0xc
c00125d1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00125d8:	e8 cb ac ff ff       	call   c000d2a8 <File::exists()>
c00125dd:	83 c4 10             	add    esp,0x10
c00125e0:	84 c0                	test   al,al
c00125e2:	74 04                	je     c00125e8 <ACPI::open(int, int, void*)+0x3d0>
c00125e4:	b0 01                	mov    al,0x1
c00125e6:	eb 04                	jmp    c00125ec <ACPI::open(int, int, void*)+0x3d4>
c00125e8:	b0 00                	mov    al,0x0
c00125ea:	66 90                	xchg   ax,ax
c00125ec:	84 c0                	test   al,al
c00125ee:	74 28                	je     c0012618 <ACPI::open(int, int, void*)+0x400>
c00125f0:	83 ec 08             	sub    esp,0x8
c00125f3:	6a 01                	push   0x1
c00125f5:	68 20 3c 02 c0       	push   0xc0023c20
c00125fa:	e8 f7 4e 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c00125ff:	83 c4 10             	add    esp,0x10
c0012602:	83 ec 08             	sub    esp,0x8
c0012605:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001260c:	50                   	push   eax
c001260d:	e8 15 51 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c0012612:	83 c4 10             	add    esp,0x10
c0012615:	8d 76 00             	lea    esi,[esi+0x0]
c0012618:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012620:	74 2a                	je     c001264c <ACPI::open(int, int, void*)+0x434>
c0012622:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001262a:	74 20                	je     c001264c <ACPI::open(int, int, void*)+0x434>
c001262c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012633:	8b 00                	mov    eax,DWORD PTR [eax]
c0012635:	83 c0 08             	add    eax,0x8
c0012638:	8b 00                	mov    eax,DWORD PTR [eax]
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012644:	ff d0                	call   eax
c0012646:	83 c4 10             	add    esp,0x10
c0012649:	8d 76 00             	lea    esi,[esi+0x0]
c001264c:	a1 e8 69 02 c0       	mov    eax,ds:0xc00269e8
c0012651:	83 ec 08             	sub    esp,0x8
c0012654:	68 3d 3c 02 c0       	push   0xc0023c3d
c0012659:	50                   	push   eax
c001265a:	e8 cd f1 ff ff       	call   c001182c <findDataTable(unsigned char*, char*)>
c001265f:	83 c4 10             	add    esp,0x10
c0012662:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012669:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012671:	74 19                	je     c001268c <ACPI::open(int, int, void*)+0x474>
c0012673:	83 ec 08             	sub    esp,0x8
c0012676:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001267d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012684:	e8 2b fb ff ff       	call   c00121b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012689:	83 c4 10             	add    esp,0x10
c001268c:	b8 00 00 00 00       	mov    eax,0x0
c0012691:	81 c4 70 01 00 00    	add    esp,0x170
c0012697:	5b                   	pop    ebx
c0012698:	5e                   	pop    esi
c0012699:	5f                   	pop    edi
c001269a:	c3                   	ret    
c001269b:	90                   	nop

c001269c <CPU::close(int, int, void*)>:
c001269c:	31 c0                	xor    eax,eax
c001269e:	c3                   	ret    
c001269f:	90                   	nop

c00126a0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00126a0:	55                   	push   ebp
c00126a1:	57                   	push   edi
c00126a2:	56                   	push   esi
c00126a3:	53                   	push   ebx
c00126a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00126a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126ac:	89 ce                	mov    esi,ecx
c00126ae:	89 d5                	mov    ebp,edx
c00126b0:	80 f9 04             	cmp    cl,0x4
c00126b3:	75 28                	jne    c00126dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00126b5:	8d 42 f9             	lea    eax,[edx-0x7]
c00126b8:	3c 03                	cmp    al,0x3
c00126ba:	0f 86 63 01 00 00    	jbe    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00126c0:	80 fa 03             	cmp    dl,0x3
c00126c3:	0f 84 5a 01 00 00    	je     c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00126c9:	8d 7a f2             	lea    edi,[edx-0xe]
c00126cc:	b8 50 5a 02 c0       	mov    eax,0xc0025a50
c00126d1:	89 fb                	mov    ebx,edi
c00126d3:	80 fb 01             	cmp    bl,0x1
c00126d6:	77 4e                	ja     c0012726 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00126d8:	e9 52 01 00 00       	jmp    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00126dd:	80 f9 05             	cmp    cl,0x5
c00126e0:	75 4d                	jne    c001272f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00126e2:	b8 60 5a 02 c0       	mov    eax,0xc0025a60
c00126e7:	80 fa 03             	cmp    dl,0x3
c00126ea:	0f 86 3f 01 00 00    	jbe    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00126f0:	8d 7a fa             	lea    edi,[edx-0x6]
c00126f3:	b8 70 5a 02 c0       	mov    eax,0xc0025a70
c00126f8:	89 fb                	mov    ebx,edi
c00126fa:	80 fb 01             	cmp    bl,0x1
c00126fd:	0f 86 2c 01 00 00    	jbe    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012703:	b8 80 5a 02 c0       	mov    eax,0xc0025a80
c0012708:	80 fa 08             	cmp    dl,0x8
c001270b:	0f 84 1e 01 00 00    	je     c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012711:	89 d7                	mov    edi,edx
c0012713:	b8 90 5a 02 c0       	mov    eax,0xc0025a90
c0012718:	83 e7 fb             	and    edi,0xfffffffb
c001271b:	89 fb                	mov    ebx,edi
c001271d:	80 fb 09             	cmp    bl,0x9
c0012720:	0f 84 09 01 00 00    	je     c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012726:	31 c0                	xor    eax,eax
c0012728:	89 eb                	mov    ebx,ebp
c001272a:	0f b6 fb             	movzx  edi,bl
c001272d:	eb 30                	jmp    c001275f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001272f:	31 c0                	xor    eax,eax
c0012731:	80 f9 06             	cmp    cl,0x6
c0012734:	75 f2                	jne    c0012728 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012736:	80 fa 0a             	cmp    dl,0xa
c0012739:	77 ed                	ja     c0012728 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001273b:	bf de 05 00 00       	mov    edi,0x5de
c0012740:	0f a3 d7             	bt     edi,edx
c0012743:	73 e3                	jae    c0012728 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012745:	b8 a0 5a 02 c0       	mov    eax,0xc0025aa0
c001274a:	e9 e0 00 00 00       	jmp    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001274f:	39 c7                	cmp    edi,eax
c0012751:	0f 84 d3 00 00 00    	je     c001282a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012757:	40                   	inc    eax
c0012758:	3d d0 00 00 00       	cmp    eax,0xd0
c001275d:	74 09                	je     c0012768 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001275f:	89 f3                	mov    ebx,esi
c0012761:	80 fb 0f             	cmp    bl,0xf
c0012764:	75 f1                	jne    c0012757 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012766:	eb e7                	jmp    c001274f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012768:	80 f9 10             	cmp    cl,0x10
c001276b:	75 14                	jne    c0012781 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001276d:	8d 42 fc             	lea    eax,[edx-0x4]
c0012770:	83 e0 fb             	and    eax,0xfffffffb
c0012773:	3c 02                	cmp    al,0x2
c0012775:	76 34                	jbe    c00127ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012777:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c001277c:	80 fa 02             	cmp    dl,0x2
c001277f:	eb 24                	jmp    c00127a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012781:	80 f9 11             	cmp    cl,0x11
c0012784:	75 13                	jne    c0012799 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012786:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c001278b:	80 fa 03             	cmp    dl,0x3
c001278e:	0f 85 9b 00 00 00    	jne    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012794:	e9 91 00 00 00       	jmp    c001282a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012799:	80 f9 12             	cmp    cl,0x12
c001279c:	75 14                	jne    c00127b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001279e:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c00127a3:	fe ca                	dec    dl
c00127a5:	0f 85 84 00 00 00    	jne    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127ab:	b8 c0 5a 02 c0       	mov    eax,0xc0025ac0
c00127b0:	eb 7d                	jmp    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127b2:	80 f9 14             	cmp    cl,0x14
c00127b5:	75 12                	jne    c00127c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00127b7:	4a                   	dec    edx
c00127b8:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c00127bd:	80 fa 01             	cmp    dl,0x1
c00127c0:	77 6d                	ja     c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127c2:	b8 d0 5a 02 c0       	mov    eax,0xc0025ad0
c00127c7:	eb 66                	jmp    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127c9:	80 f9 15             	cmp    cl,0x15
c00127cc:	75 31                	jne    c00127ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00127ce:	b8 e0 5a 02 c0       	mov    eax,0xc0025ae0
c00127d3:	80 fa 01             	cmp    dl,0x1
c00127d6:	74 57                	je     c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127d8:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c00127dd:	80 fa 13             	cmp    dl,0x13
c00127e0:	76 0c                	jbe    c00127ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00127e2:	80 fa 30             	cmp    dl,0x30
c00127e5:	75 48                	jne    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127e7:	b8 00 5b 02 c0       	mov    eax,0xc0025b00
c00127ec:	eb 41                	jmp    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127ee:	b9 04 00 09 00       	mov    ecx,0x90004
c00127f3:	0f a3 d1             	bt     ecx,edx
c00127f6:	73 37                	jae    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127f8:	b8 f0 5a 02 c0       	mov    eax,0xc0025af0
c00127fd:	eb 30                	jmp    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127ff:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c0012804:	80 f9 16             	cmp    cl,0x16
c0012807:	75 26                	jne    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012809:	b8 10 5b 02 c0       	mov    eax,0xc0025b10
c001280e:	84 d2                	test   dl,dl
c0012810:	74 1d                	je     c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012812:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c0012817:	80 fa 30             	cmp    dl,0x30
c001281a:	75 13                	jne    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001281c:	b8 20 5b 02 c0       	mov    eax,0xc0025b20
c0012821:	eb 0c                	jmp    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012823:	b8 40 5a 02 c0       	mov    eax,0xc0025a40
c0012828:	eb 05                	jmp    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001282a:	b8 b0 5a 02 c0       	mov    eax,0xc0025ab0
c001282f:	5b                   	pop    ebx
c0012830:	5e                   	pop    esi
c0012831:	5f                   	pop    edi
c0012832:	5d                   	pop    ebp
c0012833:	c3                   	ret    

c0012834 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012834:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012838:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001283c:	80 f9 04             	cmp    cl,0x4
c001283f:	75 6b                	jne    c00128ac <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012841:	b8 a0 58 02 c0       	mov    eax,0xc00258a0
c0012846:	80 fa 01             	cmp    dl,0x1
c0012849:	0f 86 92 02 00 00    	jbe    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001284f:	b8 b0 58 02 c0       	mov    eax,0xc00258b0
c0012854:	80 fa 02             	cmp    dl,0x2
c0012857:	0f 84 84 02 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001285d:	b8 c0 58 02 c0       	mov    eax,0xc00258c0
c0012862:	80 fa 03             	cmp    dl,0x3
c0012865:	0f 84 76 02 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001286b:	b8 d0 58 02 c0       	mov    eax,0xc00258d0
c0012870:	80 fa 04             	cmp    dl,0x4
c0012873:	0f 84 68 02 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012879:	b8 e0 58 02 c0       	mov    eax,0xc00258e0
c001287e:	80 fa 05             	cmp    dl,0x5
c0012881:	0f 84 5a 02 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012887:	b8 c0 58 02 c0       	mov    eax,0xc00258c0
c001288c:	80 fa 07             	cmp    dl,0x7
c001288f:	0f 84 4c 02 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012895:	83 ea 08             	sub    edx,0x8
c0012898:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c001289d:	80 fa 01             	cmp    dl,0x1
c00128a0:	0f 87 3b 02 00 00    	ja     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128a6:	b8 f0 58 02 c0       	mov    eax,0xc00258f0
c00128ab:	c3                   	ret    
c00128ac:	80 f9 05             	cmp    cl,0x5
c00128af:	75 45                	jne    c00128f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00128b1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00128b4:	b8 00 59 02 c0       	mov    eax,0xc0025900
c00128b9:	80 f9 02             	cmp    cl,0x2
c00128bc:	0f 86 1f 02 00 00    	jbe    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128c2:	80 fa 04             	cmp    dl,0x4
c00128c5:	0f 84 f3 01 00 00    	je     c0012abe <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00128cb:	80 fa 07             	cmp    dl,0x7
c00128ce:	0f 84 0d 02 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128d4:	b8 10 59 02 c0       	mov    eax,0xc0025910
c00128d9:	80 fa 08             	cmp    dl,0x8
c00128dc:	0f 84 ff 01 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128e2:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c00128e7:	80 fa 09             	cmp    dl,0x9
c00128ea:	0f 85 f1 01 00 00    	jne    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128f0:	b8 20 59 02 c0       	mov    eax,0xc0025920
c00128f5:	c3                   	ret    
c00128f6:	80 f9 06             	cmp    cl,0x6
c00128f9:	0f 85 85 01 00 00    	jne    c0012a84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00128ff:	b8 30 59 02 c0       	mov    eax,0xc0025930
c0012904:	80 fa 01             	cmp    dl,0x1
c0012907:	0f 84 d4 01 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001290d:	8d 42 fb             	lea    eax,[edx-0x5]
c0012910:	3c 01                	cmp    al,0x1
c0012912:	0f 86 ac 01 00 00    	jbe    c0012ac4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012918:	80 fa 03             	cmp    dl,0x3
c001291b:	0f 84 a3 01 00 00    	je     c0012ac4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012921:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012924:	b8 50 59 02 c0       	mov    eax,0xc0025950
c0012929:	80 f9 01             	cmp    cl,0x1
c001292c:	0f 86 af 01 00 00    	jbe    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012932:	80 fa 09             	cmp    dl,0x9
c0012935:	0f 84 8f 01 00 00    	je     c0012aca <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001293b:	8d 4a f6             	lea    ecx,[edx-0xa]
c001293e:	80 f9 01             	cmp    cl,0x1
c0012941:	0f 86 9a 01 00 00    	jbe    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012947:	b8 60 59 02 c0       	mov    eax,0xc0025960
c001294c:	80 fa 0d             	cmp    dl,0xd
c001294f:	0f 84 8c 01 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012955:	b8 70 59 02 c0       	mov    eax,0xc0025970
c001295a:	80 fa 0e             	cmp    dl,0xe
c001295d:	0f 84 7e 01 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012963:	b8 80 59 02 c0       	mov    eax,0xc0025980
c0012968:	80 fa 0f             	cmp    dl,0xf
c001296b:	0f 84 70 01 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012971:	b8 60 59 02 c0       	mov    eax,0xc0025960
c0012976:	80 fa 15             	cmp    dl,0x15
c0012979:	0f 84 62 01 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001297f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012982:	b8 80 59 02 c0       	mov    eax,0xc0025980
c0012987:	80 f9 01             	cmp    cl,0x1
c001298a:	0f 86 51 01 00 00    	jbe    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012990:	80 fa 1a             	cmp    dl,0x1a
c0012993:	0f 84 37 01 00 00    	je     c0012ad0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012999:	80 fa 1c             	cmp    dl,0x1c
c001299c:	0f 84 34 01 00 00    	je     c0012ad6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00129a2:	80 fa 1d             	cmp    dl,0x1d
c00129a5:	0f 84 36 01 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ab:	b8 b0 59 02 c0       	mov    eax,0xc00259b0
c00129b0:	80 fa 25             	cmp    dl,0x25
c00129b3:	0f 84 28 01 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129b9:	8d 4a da             	lea    ecx,[edx-0x26]
c00129bc:	b8 a0 59 02 c0       	mov    eax,0xc00259a0
c00129c1:	80 f9 01             	cmp    cl,0x1
c00129c4:	0f 86 17 01 00 00    	jbe    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ca:	b8 c0 59 02 c0       	mov    eax,0xc00259c0
c00129cf:	80 fa 2a             	cmp    dl,0x2a
c00129d2:	0f 84 09 01 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129d8:	b8 b0 59 02 c0       	mov    eax,0xc00259b0
c00129dd:	80 fa 2c             	cmp    dl,0x2c
c00129e0:	0f 84 fb 00 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e6:	b8 c0 59 02 c0       	mov    eax,0xc00259c0
c00129eb:	80 fa 2d             	cmp    dl,0x2d
c00129ee:	0f 84 ed 00 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129f4:	b8 90 59 02 c0       	mov    eax,0xc0025990
c00129f9:	80 fa 2e             	cmp    dl,0x2e
c00129fc:	0f 84 df 00 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a02:	b8 b0 59 02 c0       	mov    eax,0xc00259b0
c0012a07:	80 fa 2f             	cmp    dl,0x2f
c0012a0a:	0f 84 d1 00 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a10:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012a13:	b8 a0 59 02 c0       	mov    eax,0xc00259a0
c0012a18:	80 f9 01             	cmp    cl,0x1
c0012a1b:	0f 86 c0 00 00 00    	jbe    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a21:	b8 d0 59 02 c0       	mov    eax,0xc00259d0
c0012a26:	80 fa 37             	cmp    dl,0x37
c0012a29:	0f 84 b2 00 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a2f:	b8 e0 59 02 c0       	mov    eax,0xc00259e0
c0012a34:	80 fa 3a             	cmp    dl,0x3a
c0012a37:	0f 84 a4 00 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a3d:	b8 f0 59 02 c0       	mov    eax,0xc00259f0
c0012a42:	80 fa 3c             	cmp    dl,0x3c
c0012a45:	0f 84 96 00 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a4b:	b8 00 5a 02 c0       	mov    eax,0xc0025a00
c0012a50:	80 fa 3d             	cmp    dl,0x3d
c0012a53:	0f 84 88 00 00 00    	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a59:	b8 e0 59 02 c0       	mov    eax,0xc00259e0
c0012a5e:	80 fa 3e             	cmp    dl,0x3e
c0012a61:	74 7e                	je     c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a63:	8d 42 bb             	lea    eax,[edx-0x45]
c0012a66:	3c 01                	cmp    al,0x1
c0012a68:	76 72                	jbe    c0012adc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012a6a:	80 fa 3f             	cmp    dl,0x3f
c0012a6d:	74 6d                	je     c0012adc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012a6f:	80 fa 4a             	cmp    dl,0x4a
c0012a72:	74 0a                	je     c0012a7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012a74:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c0012a79:	80 fa 4d             	cmp    dl,0x4d
c0012a7c:	75 63                	jne    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a7e:	b8 d0 59 02 c0       	mov    eax,0xc00259d0
c0012a83:	c3                   	ret    
c0012a84:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c0012a89:	80 f9 0b             	cmp    cl,0xb
c0012a8c:	75 0a                	jne    c0012a98 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012a8e:	fe ca                	dec    dl
c0012a90:	75 4f                	jne    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a92:	b8 10 5a 02 c0       	mov    eax,0xc0025a10
c0012a97:	c3                   	ret    
c0012a98:	80 f9 0f             	cmp    cl,0xf
c0012a9b:	75 44                	jne    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a9d:	b8 20 5a 02 c0       	mov    eax,0xc0025a20
c0012aa2:	80 fa 02             	cmp    dl,0x2
c0012aa5:	76 3a                	jbe    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aa7:	8d 42 fd             	lea    eax,[edx-0x3]
c0012aaa:	3c 01                	cmp    al,0x1
c0012aac:	76 0a                	jbe    c0012ab8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012aae:	b8 c5 3d 02 c0       	mov    eax,0xc0023dc5
c0012ab3:	80 fa 06             	cmp    dl,0x6
c0012ab6:	75 29                	jne    c0012ae1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ab8:	b8 30 5a 02 c0       	mov    eax,0xc0025a30
c0012abd:	c3                   	ret    
c0012abe:	b8 10 59 02 c0       	mov    eax,0xc0025910
c0012ac3:	c3                   	ret    
c0012ac4:	b8 40 59 02 c0       	mov    eax,0xc0025940
c0012ac9:	c3                   	ret    
c0012aca:	b8 60 59 02 c0       	mov    eax,0xc0025960
c0012acf:	c3                   	ret    
c0012ad0:	b8 90 59 02 c0       	mov    eax,0xc0025990
c0012ad5:	c3                   	ret    
c0012ad6:	b8 a0 59 02 c0       	mov    eax,0xc00259a0
c0012adb:	c3                   	ret    
c0012adc:	b8 f0 59 02 c0       	mov    eax,0xc00259f0
c0012ae1:	c3                   	ret    

c0012ae2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012ae2:	60                   	pusha  
c0012ae3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ae7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012aeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012aef:	9c                   	pushf  
c0012af0:	fa                   	cli    
c0012af1:	0f 09                	wbinvd 
c0012af3:	0f 30                	wrmsr  
c0012af5:	9d                   	popf   
c0012af6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012afa:	89 02                	mov    DWORD PTR [edx],eax
c0012afc:	61                   	popa   
c0012afd:	c3                   	ret    

c0012afe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012afe:	60                   	pusha  
c0012aff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b03:	9c                   	pushf  
c0012b04:	fa                   	cli    
c0012b05:	0f 09                	wbinvd 
c0012b07:	31 c0                	xor    eax,eax
c0012b09:	31 d2                	xor    edx,edx
c0012b0b:	0f 32                	rdmsr  
c0012b0d:	9d                   	popf   
c0012b0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b12:	89 02                	mov    DWORD PTR [edx],eax
c0012b14:	61                   	popa   
c0012b15:	c3                   	ret    

c0012b16 <CPU::AMD_K6_writeback(int, int, int)>:
c0012b16:	56                   	push   esi
c0012b17:	53                   	push   ebx
c0012b18:	83 ec 10             	sub    esp,0x10
c0012b1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b1f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012b24:	75 5d                	jne    c0012b83 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b26:	83 f8 08             	cmp    eax,0x8
c0012b29:	75 09                	jne    c0012b34 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012b2b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012b30:	7e 13                	jle    c0012b45 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012b32:	eb 30                	jmp    c0012b64 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012b34:	83 f8 06             	cmp    eax,0x6
c0012b37:	7c 4a                	jl     c0012b83 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b39:	83 f8 07             	cmp    eax,0x7
c0012b3c:	7e 07                	jle    c0012b45 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012b3e:	83 f8 09             	cmp    eax,0x9
c0012b41:	74 21                	je     c0012b64 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012b43:	eb 3e                	jmp    c0012b83 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b45:	89 e6                	mov    esi,esp
c0012b47:	8b 1d ac 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261ac
c0012b4d:	56                   	push   esi
c0012b4e:	c1 eb 15             	shr    ebx,0x15
c0012b51:	68 82 00 00 c0       	push   0xc0000082
c0012b56:	83 e3 7e             	and    ebx,0x7e
c0012b59:	e8 a0 ff ff ff       	call   c0012afe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012b5e:	56                   	push   esi
c0012b5f:	6a 00                	push   0x0
c0012b61:	53                   	push   ebx
c0012b62:	eb 12                	jmp    c0012b76 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012b64:	89 e3                	mov    ebx,esp
c0012b66:	53                   	push   ebx
c0012b67:	68 82 00 00 c0       	push   0xc0000082
c0012b6c:	e8 8d ff ff ff       	call   c0012afe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012b71:	53                   	push   ebx
c0012b72:	6a 00                	push   0x0
c0012b74:	6a 00                	push   0x0
c0012b76:	68 82 00 00 c0       	push   0xc0000082
c0012b7b:	e8 62 ff ff ff       	call   c0012ae2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012b80:	83 c4 18             	add    esp,0x18
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	5b                   	pop    ebx
c0012b87:	5e                   	pop    esi
c0012b88:	c3                   	ret    
c0012b89:	90                   	nop

c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012b8a:	55                   	push   ebp
c0012b8b:	57                   	push   edi
c0012b8c:	56                   	push   esi
c0012b8d:	53                   	push   ebx
c0012b8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b92:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012b96:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012b9a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012b9e:	39 05 40 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b40,eax
c0012ba4:	75 23                	jne    c0012bc9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012ba6:	a1 4c 6c 02 c0       	mov    eax,ds:0xc0026c4c
c0012bab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012baf:	89 06                	mov    DWORD PTR [esi],eax
c0012bb1:	a1 48 6c 02 c0       	mov    eax,ds:0xc0026c48
c0012bb6:	89 07                	mov    DWORD PTR [edi],eax
c0012bb8:	a1 44 6c 02 c0       	mov    eax,ds:0xc0026c44
c0012bbd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012bc0:	a1 40 6c 02 c0       	mov    eax,ds:0xc0026c40
c0012bc5:	89 02                	mov    DWORD PTR [edx],eax
c0012bc7:	eb 3f                	jmp    c0012c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012bc9:	31 c9                	xor    ecx,ecx
c0012bcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bcf:	0f a2                	cpuid  
c0012bd1:	89 06                	mov    DWORD PTR [esi],eax
c0012bd3:	89 1f                	mov    DWORD PTR [edi],ebx
c0012bd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bd9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012bdc:	89 10                	mov    DWORD PTR [eax],edx
c0012bde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012be2:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c0012be7:	8b 06                	mov    eax,DWORD PTR [esi]
c0012be9:	a3 4c 6c 02 c0       	mov    ds:0xc0026c4c,eax
c0012bee:	8b 07                	mov    eax,DWORD PTR [edi]
c0012bf0:	a3 48 6c 02 c0       	mov    ds:0xc0026c48,eax
c0012bf5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012bf8:	a3 44 6c 02 c0       	mov    ds:0xc0026c44,eax
c0012bfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c03:	a3 40 6c 02 c0       	mov    ds:0xc0026c40,eax
c0012c08:	5b                   	pop    ebx
c0012c09:	5e                   	pop    esi
c0012c0a:	5f                   	pop    edi
c0012c0b:	5d                   	pop    ebp
c0012c0c:	c3                   	ret    
c0012c0d:	90                   	nop

c0012c0e <CPU::cpuidCheckEDX(unsigned int)>:
c0012c0e:	83 ec 10             	sub    esp,0x10
c0012c11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c15:	50                   	push   eax
c0012c16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c1a:	50                   	push   eax
c0012c1b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c1f:	50                   	push   eax
c0012c20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c24:	50                   	push   eax
c0012c25:	6a 01                	push   0x1
c0012c27:	e8 5e ff ff ff       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c30:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012c34:	0f 95 c0             	setne  al
c0012c37:	83 c4 24             	add    esp,0x24
c0012c3a:	c3                   	ret    
c0012c3b:	90                   	nop

c0012c3c <CPU::cpuidCheckECX(unsigned int)>:
c0012c3c:	83 ec 10             	sub    esp,0x10
c0012c3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c43:	50                   	push   eax
c0012c44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c48:	50                   	push   eax
c0012c49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c4d:	50                   	push   eax
c0012c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c52:	50                   	push   eax
c0012c53:	6a 01                	push   0x1
c0012c55:	e8 30 ff ff ff       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c5e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012c62:	0f 95 c0             	setne  al
c0012c65:	83 c4 24             	add    esp,0x24
c0012c68:	c3                   	ret    
c0012c69:	90                   	nop

c0012c6a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012c6a:	83 ec 10             	sub    esp,0x10
c0012c6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c71:	50                   	push   eax
c0012c72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c76:	50                   	push   eax
c0012c77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c7b:	50                   	push   eax
c0012c7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c80:	50                   	push   eax
c0012c81:	6a 07                	push   0x7
c0012c83:	e8 02 ff ff ff       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c8c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012c90:	0f 95 c0             	setne  al
c0012c93:	83 c4 24             	add    esp,0x24
c0012c96:	c3                   	ret    
c0012c97:	90                   	nop

c0012c98 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012c98:	83 ec 10             	sub    esp,0x10
c0012c9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c9f:	50                   	push   eax
c0012ca0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ca4:	50                   	push   eax
c0012ca5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ca9:	50                   	push   eax
c0012caa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cae:	50                   	push   eax
c0012caf:	6a 07                	push   0x7
c0012cb1:	e8 d4 fe ff ff       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cba:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012cbe:	0f 95 c0             	setne  al
c0012cc1:	83 c4 24             	add    esp,0x24
c0012cc4:	c3                   	ret    
c0012cc5:	90                   	nop

c0012cc6 <CPU::CPU()>:
c0012cc6:	83 ec 0c             	sub    esp,0xc
c0012cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ccd:	83 ec 08             	sub    esp,0x8
c0012cd0:	68 c5 3d 02 c0       	push   0xc0023dc5
c0012cd5:	50                   	push   eax
c0012cd6:	e8 db b3 ff ff       	call   c000e0b6 <Device::Device(char const*)>
c0012cdb:	83 c4 10             	add    esp,0x10
c0012cde:	ba 28 40 02 c0       	mov    edx,0xc0024028
c0012ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce7:	89 10                	mov    DWORD PTR [eax],edx
c0012ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ced:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cfb:	05 78 01 00 00       	add    eax,0x178
c0012d00:	83 ec 0c             	sub    esp,0xc
c0012d03:	50                   	push   eax
c0012d04:	e8 51 65 ff ff       	call   c000925a <GDT::GDT()>
c0012d09:	83 c4 10             	add    esp,0x10
c0012d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d10:	05 7c 09 00 00       	add    eax,0x97c
c0012d15:	83 ec 0c             	sub    esp,0xc
c0012d18:	50                   	push   eax
c0012d19:	e8 92 67 ff ff       	call   c00094b0 <IDT::IDT()>
c0012d1e:	83 c4 10             	add    esp,0x10
c0012d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d25:	05 7c 11 00 00       	add    eax,0x117c
c0012d2a:	83 ec 0c             	sub    esp,0xc
c0012d2d:	50                   	push   eax
c0012d2e:	e8 55 83 ff ff       	call   c000b088 <TSS::TSS()>
c0012d33:	83 c4 10             	add    esp,0x10
c0012d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d3a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d45:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012d4f:	90                   	nop
c0012d50:	83 c4 0c             	add    esp,0xc
c0012d53:	c3                   	ret    

c0012d54 <CPU::displayFeatures()>:
c0012d54:	c3                   	ret    
c0012d55:	90                   	nop

c0012d56 <CPU::detectFeatures()>:
c0012d56:	55                   	push   ebp
c0012d57:	57                   	push   edi
c0012d58:	56                   	push   esi
c0012d59:	53                   	push   ebx
c0012d5a:	83 ec 50             	sub    esp,0x50
c0012d5d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012d61:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012d6b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012d72:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012d78:	6a 0d                	push   0xd
c0012d7a:	6a 00                	push   0x0
c0012d7c:	55                   	push   ebp
c0012d7d:	e8 02 d9 fe ff       	call   c0000684 <memset>
c0012d82:	83 c4 10             	add    esp,0x10
c0012d85:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0012d8a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012d91:	0f 84 22 09 00 00    	je     c00136b9 <CPU::detectFeatures()+0x963>
c0012d97:	83 ec 0c             	sub    esp,0xc
c0012d9a:	89 ef                	mov    edi,ebp
c0012d9c:	6a 10                	push   0x10
c0012d9e:	e8 6b fe ff ff       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0012da3:	83 e0 01             	and    eax,0x1
c0012da6:	8d 14 00             	lea    edx,[eax+eax*1]
c0012da9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012daf:	83 e0 fd             	and    eax,0xfffffffd
c0012db2:	09 d0                	or     eax,edx
c0012db4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012dba:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012dc1:	e8 48 fe ff ff       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0012dc6:	83 e0 01             	and    eax,0x1
c0012dc9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012dd0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012dd6:	83 e0 fb             	and    eax,0xfffffffb
c0012dd9:	09 d0                	or     eax,edx
c0012ddb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012de1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012de8:	e8 21 fe ff ff       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0012ded:	83 e0 01             	and    eax,0x1
c0012df0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012df7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012dfd:	83 e0 f7             	and    eax,0xfffffff7
c0012e00:	09 d0                	or     eax,edx
c0012e02:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e08:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012e0f:	e8 fa fd ff ff       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0012e14:	83 e0 01             	and    eax,0x1
c0012e17:	c1 e0 04             	shl    eax,0x4
c0012e1a:	88 c2                	mov    dl,al
c0012e1c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e22:	83 e0 ef             	and    eax,0xffffffef
c0012e25:	09 d0                	or     eax,edx
c0012e27:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e2d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012e34:	e8 d5 fd ff ff       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0012e39:	83 e0 01             	and    eax,0x1
c0012e3c:	c1 e0 05             	shl    eax,0x5
c0012e3f:	88 c2                	mov    dl,al
c0012e41:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e47:	83 e0 df             	and    eax,0xffffffdf
c0012e4a:	09 d0                	or     eax,edx
c0012e4c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e52:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012e59:	e8 b0 fd ff ff       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0012e5e:	83 e0 01             	and    eax,0x1
c0012e61:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e64:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012e6a:	83 e0 fd             	and    eax,0xfffffffd
c0012e6d:	09 d0                	or     eax,edx
c0012e6f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012e75:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012e7c:	e8 8d fd ff ff       	call   c0012c0e <CPU::cpuidCheckEDX(unsigned int)>
c0012e81:	83 e0 01             	and    eax,0x1
c0012e84:	c1 e0 06             	shl    eax,0x6
c0012e87:	88 c2                	mov    dl,al
c0012e89:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012e8f:	83 e0 bf             	and    eax,0xffffffbf
c0012e92:	09 d0                	or     eax,edx
c0012e94:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012e9a:	58                   	pop    eax
c0012e9b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e9f:	50                   	push   eax
c0012ea0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012ea4:	50                   	push   eax
c0012ea5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012ea9:	56                   	push   esi
c0012eaa:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012eae:	50                   	push   eax
c0012eaf:	6a 00                	push   0x0
c0012eb1:	e8 d4 fc ff ff       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012eb6:	b8 04 00 00 00       	mov    eax,0x4
c0012ebb:	89 c1                	mov    ecx,eax
c0012ebd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ebf:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012ec5:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012ec9:	89 c1                	mov    ecx,eax
c0012ecb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ecd:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012ed3:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012ed7:	89 c1                	mov    ecx,eax
c0012ed9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012edb:	83 c4 18             	add    esp,0x18
c0012ede:	68 70 3c 02 c0       	push   0xc0023c70
c0012ee3:	55                   	push   ebp
c0012ee4:	e8 e3 d8 fe ff       	call   c00007cc <strcmp>
c0012ee9:	83 c4 10             	add    esp,0x10
c0012eec:	85 c0                	test   eax,eax
c0012eee:	75 0f                	jne    c0012eff <CPU::detectFeatures()+0x1a9>
c0012ef0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012efa:	e9 22 02 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c0012eff:	50                   	push   eax
c0012f00:	50                   	push   eax
c0012f01:	68 7d 3c 02 c0       	push   0xc0023c7d
c0012f06:	55                   	push   ebp
c0012f07:	e8 c0 d8 fe ff       	call   c00007cc <strcmp>
c0012f0c:	83 c4 10             	add    esp,0x10
c0012f0f:	85 c0                	test   eax,eax
c0012f11:	74 dd                	je     c0012ef0 <CPU::detectFeatures()+0x19a>
c0012f13:	50                   	push   eax
c0012f14:	50                   	push   eax
c0012f15:	68 8a 3c 02 c0       	push   0xc0023c8a
c0012f1a:	55                   	push   ebp
c0012f1b:	e8 ac d8 fe ff       	call   c00007cc <strcmp>
c0012f20:	83 c4 10             	add    esp,0x10
c0012f23:	85 c0                	test   eax,eax
c0012f25:	74 2a                	je     c0012f51 <CPU::detectFeatures()+0x1fb>
c0012f27:	50                   	push   eax
c0012f28:	50                   	push   eax
c0012f29:	68 97 3c 02 c0       	push   0xc0023c97
c0012f2e:	55                   	push   ebp
c0012f2f:	e8 98 d8 fe ff       	call   c00007cc <strcmp>
c0012f34:	83 c4 10             	add    esp,0x10
c0012f37:	85 c0                	test   eax,eax
c0012f39:	74 16                	je     c0012f51 <CPU::detectFeatures()+0x1fb>
c0012f3b:	50                   	push   eax
c0012f3c:	50                   	push   eax
c0012f3d:	68 a4 3c 02 c0       	push   0xc0023ca4
c0012f42:	55                   	push   ebp
c0012f43:	e8 84 d8 fe ff       	call   c00007cc <strcmp>
c0012f48:	83 c4 10             	add    esp,0x10
c0012f4b:	85 c0                	test   eax,eax
c0012f4d:	74 48                	je     c0012f97 <CPU::detectFeatures()+0x241>
c0012f4f:	eb 0f                	jmp    c0012f60 <CPU::detectFeatures()+0x20a>
c0012f51:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012f5b:	e9 c1 01 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c0012f60:	50                   	push   eax
c0012f61:	50                   	push   eax
c0012f62:	68 b1 3c 02 c0       	push   0xc0023cb1
c0012f67:	55                   	push   ebp
c0012f68:	e8 5f d8 fe ff       	call   c00007cc <strcmp>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	85 c0                	test   eax,eax
c0012f72:	74 23                	je     c0012f97 <CPU::detectFeatures()+0x241>
c0012f74:	57                   	push   edi
c0012f75:	57                   	push   edi
c0012f76:	68 be 3c 02 c0       	push   0xc0023cbe
c0012f7b:	55                   	push   ebp
c0012f7c:	e8 4b d8 fe ff       	call   c00007cc <strcmp>
c0012f81:	83 c4 10             	add    esp,0x10
c0012f84:	85 c0                	test   eax,eax
c0012f86:	75 1e                	jne    c0012fa6 <CPU::detectFeatures()+0x250>
c0012f88:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012f92:	e9 8a 01 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c0012f97:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0012fa1:	e9 7b 01 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c0012fa6:	56                   	push   esi
c0012fa7:	56                   	push   esi
c0012fa8:	68 cb 3c 02 c0       	push   0xc0023ccb
c0012fad:	55                   	push   ebp
c0012fae:	e8 19 d8 fe ff       	call   c00007cc <strcmp>
c0012fb3:	83 c4 10             	add    esp,0x10
c0012fb6:	85 c0                	test   eax,eax
c0012fb8:	75 0f                	jne    c0012fc9 <CPU::detectFeatures()+0x273>
c0012fba:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0012fc4:	e9 58 01 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c0012fc9:	51                   	push   ecx
c0012fca:	51                   	push   ecx
c0012fcb:	68 8a 3c 02 c0       	push   0xc0023c8a
c0012fd0:	55                   	push   ebp
c0012fd1:	e8 f6 d7 fe ff       	call   c00007cc <strcmp>
c0012fd6:	83 c4 10             	add    esp,0x10
c0012fd9:	85 c0                	test   eax,eax
c0012fdb:	75 0f                	jne    c0012fec <CPU::detectFeatures()+0x296>
c0012fdd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0012fe7:	e9 35 01 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c0012fec:	52                   	push   edx
c0012fed:	52                   	push   edx
c0012fee:	68 d8 3c 02 c0       	push   0xc0023cd8
c0012ff3:	55                   	push   ebp
c0012ff4:	e8 d3 d7 fe ff       	call   c00007cc <strcmp>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	85 c0                	test   eax,eax
c0012ffe:	75 0f                	jne    c001300f <CPU::detectFeatures()+0x2b9>
c0013000:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001300a:	e9 12 01 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c001300f:	50                   	push   eax
c0013010:	50                   	push   eax
c0013011:	68 e5 3c 02 c0       	push   0xc0023ce5
c0013016:	55                   	push   ebp
c0013017:	e8 b0 d7 fe ff       	call   c00007cc <strcmp>
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	85 c0                	test   eax,eax
c0013021:	75 0f                	jne    c0013032 <CPU::detectFeatures()+0x2dc>
c0013023:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001302d:	e9 ef 00 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c0013032:	50                   	push   eax
c0013033:	50                   	push   eax
c0013034:	68 f2 3c 02 c0       	push   0xc0023cf2
c0013039:	55                   	push   ebp
c001303a:	e8 8d d7 fe ff       	call   c00007cc <strcmp>
c001303f:	83 c4 10             	add    esp,0x10
c0013042:	85 c0                	test   eax,eax
c0013044:	75 0f                	jne    c0013055 <CPU::detectFeatures()+0x2ff>
c0013046:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013050:	e9 cc 00 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c0013055:	50                   	push   eax
c0013056:	50                   	push   eax
c0013057:	68 ff 3c 02 c0       	push   0xc0023cff
c001305c:	55                   	push   ebp
c001305d:	e8 6a d7 fe ff       	call   c00007cc <strcmp>
c0013062:	83 c4 10             	add    esp,0x10
c0013065:	85 c0                	test   eax,eax
c0013067:	75 0f                	jne    c0013078 <CPU::detectFeatures()+0x322>
c0013069:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013073:	e9 a9 00 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c0013078:	50                   	push   eax
c0013079:	50                   	push   eax
c001307a:	68 0c 3d 02 c0       	push   0xc0023d0c
c001307f:	55                   	push   ebp
c0013080:	e8 47 d7 fe ff       	call   c00007cc <strcmp>
c0013085:	83 c4 10             	add    esp,0x10
c0013088:	85 c0                	test   eax,eax
c001308a:	75 0f                	jne    c001309b <CPU::detectFeatures()+0x345>
c001308c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013096:	e9 86 00 00 00       	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c001309b:	50                   	push   eax
c001309c:	50                   	push   eax
c001309d:	68 19 3d 02 c0       	push   0xc0023d19
c00130a2:	55                   	push   ebp
c00130a3:	e8 24 d7 fe ff       	call   c00007cc <strcmp>
c00130a8:	83 c4 10             	add    esp,0x10
c00130ab:	85 c0                	test   eax,eax
c00130ad:	75 0c                	jne    c00130bb <CPU::detectFeatures()+0x365>
c00130af:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00130b9:	eb 66                	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c00130bb:	50                   	push   eax
c00130bc:	50                   	push   eax
c00130bd:	68 26 3d 02 c0       	push   0xc0023d26
c00130c2:	55                   	push   ebp
c00130c3:	e8 04 d7 fe ff       	call   c00007cc <strcmp>
c00130c8:	83 c4 10             	add    esp,0x10
c00130cb:	85 c0                	test   eax,eax
c00130cd:	75 0c                	jne    c00130db <CPU::detectFeatures()+0x385>
c00130cf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00130d9:	eb 46                	jmp    c0013121 <CPU::detectFeatures()+0x3cb>
c00130db:	57                   	push   edi
c00130dc:	57                   	push   edi
c00130dd:	68 33 3d 02 c0       	push   0xc0023d33
c00130e2:	55                   	push   ebp
c00130e3:	e8 e4 d6 fe ff       	call   c00007cc <strcmp>
c00130e8:	83 c4 10             	add    esp,0x10
c00130eb:	85 c0                	test   eax,eax
c00130ed:	74 e0                	je     c00130cf <CPU::detectFeatures()+0x379>
c00130ef:	56                   	push   esi
c00130f0:	56                   	push   esi
c00130f1:	68 40 3d 02 c0       	push   0xc0023d40
c00130f6:	55                   	push   ebp
c00130f7:	e8 d0 d6 fe ff       	call   c00007cc <strcmp>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	85 c0                	test   eax,eax
c0013101:	74 cc                	je     c00130cf <CPU::detectFeatures()+0x379>
c0013103:	51                   	push   ecx
c0013104:	51                   	push   ecx
c0013105:	68 4d 3d 02 c0       	push   0xc0023d4d
c001310a:	55                   	push   ebp
c001310b:	e8 bc d6 fe ff       	call   c00007cc <strcmp>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	85 c0                	test   eax,eax
c0013115:	74 b8                	je     c00130cf <CPU::detectFeatures()+0x379>
c0013117:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013121:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013126:	0f 86 be 00 00 00    	jbe    c00131ea <CPU::detectFeatures()+0x494>
c001312c:	83 ec 0c             	sub    esp,0xc
c001312f:	68 80 00 00 00       	push   0x80
c0013134:	e8 31 fb ff ff       	call   c0012c6a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013139:	83 e0 01             	and    eax,0x1
c001313c:	c1 e0 06             	shl    eax,0x6
c001313f:	88 c2                	mov    dl,al
c0013141:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013147:	83 e0 bf             	and    eax,0xffffffbf
c001314a:	09 d0                	or     eax,edx
c001314c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013152:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013159:	e8 0c fb ff ff       	call   c0012c6a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001315e:	83 e0 01             	and    eax,0x1
c0013161:	c1 e0 04             	shl    eax,0x4
c0013164:	88 c2                	mov    dl,al
c0013166:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001316c:	83 e0 ef             	and    eax,0xffffffef
c001316f:	09 d0                	or     eax,edx
c0013171:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013177:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001317e:	e8 e7 fa ff ff       	call   c0012c6a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013183:	c1 e0 07             	shl    eax,0x7
c0013186:	88 c2                	mov    dl,al
c0013188:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001318e:	83 e0 7f             	and    eax,0x7f
c0013191:	09 d0                	or     eax,edx
c0013193:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013199:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00131a0:	e8 f3 fa ff ff       	call   c0012c98 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00131a5:	83 e0 01             	and    eax,0x1
c00131a8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00131af:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00131b5:	83 e0 f7             	and    eax,0xfffffff7
c00131b8:	09 d0                	or     eax,edx
c00131ba:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00131c0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00131c7:	e8 cc fa ff ff       	call   c0012c98 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00131cc:	83 c4 10             	add    esp,0x10
c00131cf:	83 e0 01             	and    eax,0x1
c00131d2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00131d9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00131df:	83 e0 fb             	and    eax,0xfffffffb
c00131e2:	09 d0                	or     eax,edx
c00131e4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00131ea:	83 ec 0c             	sub    esp,0xc
c00131ed:	8d 44 24 28          	lea    eax,[esp+0x28]
c00131f1:	50                   	push   eax
c00131f2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00131f6:	50                   	push   eax
c00131f7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00131fb:	56                   	push   esi
c00131fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013200:	50                   	push   eax
c0013201:	6a 01                	push   0x1
c0013203:	e8 82 f9 ff ff       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013208:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001320c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013212:	88 ca                	mov    dl,cl
c0013214:	83 e0 f0             	and    eax,0xfffffff0
c0013217:	83 e2 0f             	and    edx,0xf
c001321a:	09 d0                	or     eax,edx
c001321c:	88 ca                	mov    dl,cl
c001321e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013224:	c0 ea 04             	shr    dl,0x4
c0013227:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001322b:	0f b6 c2             	movzx  eax,dl
c001322e:	83 c4 20             	add    esp,0x20
c0013231:	c1 e0 06             	shl    eax,0x6
c0013234:	89 c7                	mov    edi,eax
c0013236:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001323c:	66 25 3f c0          	and    ax,0xc03f
c0013240:	09 f8                	or     eax,edi
c0013242:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013249:	89 c8                	mov    eax,ecx
c001324b:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013252:	c1 e8 08             	shr    eax,0x8
c0013255:	83 e5 3f             	and    ebp,0x3f
c0013258:	83 e0 0f             	and    eax,0xf
c001325b:	89 c7                	mov    edi,eax
c001325d:	c1 e7 06             	shl    edi,0x6
c0013260:	09 ef                	or     edi,ebp
c0013262:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013269:	89 fa                	mov    edx,edi
c001326b:	83 e5 c0             	and    ebp,0xffffffc0
c001326e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013274:	88 c2                	mov    dl,al
c0013276:	c0 ea 02             	shr    dl,0x2
c0013279:	89 d7                	mov    edi,edx
c001327b:	09 ef                	or     edi,ebp
c001327d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013283:	89 fa                	mov    edx,edi
c0013285:	83 e5 cf             	and    ebp,0xffffffcf
c0013288:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001328e:	89 cf                	mov    edi,ecx
c0013290:	c1 ef 0c             	shr    edi,0xc
c0013293:	83 e7 03             	and    edi,0x3
c0013296:	c1 e7 04             	shl    edi,0x4
c0013299:	09 ef                	or     edi,ebp
c001329b:	3c 06                	cmp    al,0x6
c001329d:	89 fa                	mov    edx,edi
c001329f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00132a5:	74 04                	je     c00132ab <CPU::detectFeatures()+0x555>
c00132a7:	3c 0f                	cmp    al,0xf
c00132a9:	75 5c                	jne    c0013307 <CPU::detectFeatures()+0x5b1>
c00132ab:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00132af:	89 cf                	mov    edi,ecx
c00132b1:	c1 ef 10             	shr    edi,0x10
c00132b4:	c1 e7 04             	shl    edi,0x4
c00132b7:	09 fa                	or     edx,edi
c00132b9:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00132bf:	0f b6 d2             	movzx  edx,dl
c00132c2:	66 81 e7 3f c0       	and    di,0xc03f
c00132c7:	c1 e2 06             	shl    edx,0x6
c00132ca:	09 fa                	or     edx,edi
c00132cc:	3c 0f                	cmp    al,0xf
c00132ce:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00132d5:	75 30                	jne    c0013307 <CPU::detectFeatures()+0x5b1>
c00132d7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00132dd:	c1 e9 14             	shr    ecx,0x14
c00132e0:	83 e0 3f             	and    eax,0x3f
c00132e3:	83 c1 0f             	add    ecx,0xf
c00132e6:	88 ca                	mov    dl,cl
c00132e8:	c0 e9 02             	shr    cl,0x2
c00132eb:	c1 e2 06             	shl    edx,0x6
c00132ee:	09 d0                	or     eax,edx
c00132f0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00132f6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00132fc:	83 e0 c0             	and    eax,0xffffffc0
c00132ff:	09 c1                	or     ecx,eax
c0013301:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013307:	83 ec 0c             	sub    esp,0xc
c001330a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013311:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013315:	50                   	push   eax
c0013316:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001331a:	55                   	push   ebp
c001331b:	56                   	push   esi
c001331c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013320:	57                   	push   edi
c0013321:	68 00 00 00 80       	push   0x80000000
c0013326:	e8 5f f8 ff ff       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001332b:	83 c4 20             	add    esp,0x20
c001332e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013336:	76 22                	jbe    c001335a <CPU::detectFeatures()+0x604>
c0013338:	83 ec 0c             	sub    esp,0xc
c001333b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001333f:	50                   	push   eax
c0013340:	55                   	push   ebp
c0013341:	56                   	push   esi
c0013342:	57                   	push   edi
c0013343:	68 01 00 00 80       	push   0x80000001
c0013348:	e8 3d f8 ff ff       	call   c0012b8a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001334d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013357:	83 c4 20             	add    esp,0x20
c001335a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013360:	83 f8 01             	cmp    eax,0x1
c0013363:	75 6f                	jne    c00133d4 <CPU::detectFeatures()+0x67e>
c0013365:	51                   	push   ecx
c0013366:	51                   	push   ecx
c0013367:	68 59 3d 02 c0       	push   0xc0023d59
c001336c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013370:	56                   	push   esi
c0013371:	e8 ca d3 fe ff       	call   c0000740 <strcpy>
c0013376:	5f                   	pop    edi
c0013377:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001337d:	5d                   	pop    ebp
c001337e:	66 c1 e8 06          	shr    ax,0x6
c0013382:	0f b6 c0             	movzx  eax,al
c0013385:	50                   	push   eax
c0013386:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001338c:	c1 e8 0e             	shr    eax,0xe
c001338f:	0f b6 c0             	movzx  eax,al
c0013392:	50                   	push   eax
c0013393:	e8 9c f4 ff ff       	call   c0012834 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013398:	5a                   	pop    edx
c0013399:	59                   	pop    ecx
c001339a:	50                   	push   eax
c001339b:	56                   	push   esi
c001339c:	e8 df d4 fe ff       	call   c0000880 <strcat>
c00133a1:	5f                   	pop    edi
c00133a2:	5d                   	pop    ebp
c00133a3:	56                   	push   esi
c00133a4:	53                   	push   ebx
c00133a5:	e8 fe ac ff ff       	call   c000e0a8 <Device::setName(char const*)>
c00133aa:	58                   	pop    eax
c00133ab:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00133b1:	5a                   	pop    edx
c00133b2:	68 60 3d 02 c0       	push   0xc0023d60
c00133b7:	50                   	push   eax
c00133b8:	e8 0f d4 fe ff       	call   c00007cc <strcmp>
c00133bd:	83 c4 10             	add    esp,0x10
c00133c0:	85 c0                	test   eax,eax
c00133c2:	0f 85 71 03 00 00    	jne    c0013739 <CPU::detectFeatures()+0x9e3>
c00133c8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00133cf:	e9 65 03 00 00       	jmp    c0013739 <CPU::detectFeatures()+0x9e3>
c00133d4:	83 f8 02             	cmp    eax,0x2
c00133d7:	0f 85 b5 00 00 00    	jne    c0013492 <CPU::detectFeatures()+0x73c>
c00133dd:	57                   	push   edi
c00133de:	57                   	push   edi
c00133df:	68 72 3d 02 c0       	push   0xc0023d72
c00133e4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00133e8:	56                   	push   esi
c00133e9:	e8 52 d3 fe ff       	call   c0000740 <strcpy>
c00133ee:	5d                   	pop    ebp
c00133ef:	58                   	pop    eax
c00133f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133f6:	66 c1 e8 06          	shr    ax,0x6
c00133fa:	0f b6 c0             	movzx  eax,al
c00133fd:	50                   	push   eax
c00133fe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013404:	c1 e8 0e             	shr    eax,0xe
c0013407:	0f b6 c0             	movzx  eax,al
c001340a:	50                   	push   eax
c001340b:	e8 90 f2 ff ff       	call   c00126a0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013410:	5a                   	pop    edx
c0013411:	59                   	pop    ecx
c0013412:	50                   	push   eax
c0013413:	56                   	push   esi
c0013414:	e8 67 d4 fe ff       	call   c0000880 <strcat>
c0013419:	5f                   	pop    edi
c001341a:	5d                   	pop    ebp
c001341b:	56                   	push   esi
c001341c:	53                   	push   ebx
c001341d:	e8 86 ac ff ff       	call   c000e0a8 <Device::setName(char const*)>
c0013422:	58                   	pop    eax
c0013423:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013429:	5a                   	pop    edx
c001342a:	68 77 3d 02 c0       	push   0xc0023d77
c001342f:	50                   	push   eax
c0013430:	e8 97 d3 fe ff       	call   c00007cc <strcmp>
c0013435:	83 c4 10             	add    esp,0x10
c0013438:	85 c0                	test   eax,eax
c001343a:	75 20                	jne    c001345c <CPU::detectFeatures()+0x706>
c001343c:	8b 15 88 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026188
c0013442:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013448:	a8 01                	test   al,0x1
c001344a:	74 10                	je     c001345c <CPU::detectFeatures()+0x706>
c001344c:	83 e0 fe             	and    eax,0xfffffffe
c001344f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013455:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001345c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013462:	c1 e8 0e             	shr    eax,0xe
c0013465:	3c 05                	cmp    al,0x5
c0013467:	0f 85 cc 02 00 00    	jne    c0013739 <CPU::detectFeatures()+0x9e3>
c001346d:	56                   	push   esi
c001346e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013474:	83 e0 0f             	and    eax,0xf
c0013477:	50                   	push   eax
c0013478:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001347e:	66 c1 e8 06          	shr    ax,0x6
c0013482:	0f b6 c0             	movzx  eax,al
c0013485:	50                   	push   eax
c0013486:	6a 05                	push   0x5
c0013488:	e8 89 f6 ff ff       	call   c0012b16 <CPU::AMD_K6_writeback(int, int, int)>
c001348d:	e9 1f 02 00 00       	jmp    c00136b1 <CPU::detectFeatures()+0x95b>
c0013492:	8d 50 fd             	lea    edx,[eax-0x3]
c0013495:	83 fa 01             	cmp    edx,0x1
c0013498:	76 09                	jbe    c00134a3 <CPU::detectFeatures()+0x74d>
c001349a:	83 f8 06             	cmp    eax,0x6
c001349d:	0f 85 91 01 00 00    	jne    c0013634 <CPU::detectFeatures()+0x8de>
c00134a3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00134a9:	c1 ea 0e             	shr    edx,0xe
c00134ac:	80 fa 05             	cmp    dl,0x5
c00134af:	75 7b                	jne    c001352c <CPU::detectFeatures()+0x7d6>
c00134b1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00134b7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00134bc:	66 81 fa 00 01       	cmp    dx,0x100
c00134c1:	75 0c                	jne    c00134cf <CPU::detectFeatures()+0x779>
c00134c3:	51                   	push   ecx
c00134c4:	51                   	push   ecx
c00134c5:	68 7e 3d 02 c0       	push   0xc0023d7e
c00134ca:	e9 dc 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c00134cf:	66 81 fa 00 02       	cmp    dx,0x200
c00134d4:	75 0c                	jne    c00134e2 <CPU::detectFeatures()+0x78c>
c00134d6:	52                   	push   edx
c00134d7:	52                   	push   edx
c00134d8:	68 91 3d 02 c0       	push   0xc0023d91
c00134dd:	e9 c9 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c00134e2:	66 81 fa 40 02       	cmp    dx,0x240
c00134e7:	75 0c                	jne    c00134f5 <CPU::detectFeatures()+0x79f>
c00134e9:	50                   	push   eax
c00134ea:	50                   	push   eax
c00134eb:	68 a3 3d 02 c0       	push   0xc0023da3
c00134f0:	e9 b6 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c00134f5:	83 f8 06             	cmp    eax,0x6
c00134f8:	75 0c                	jne    c0013506 <CPU::detectFeatures()+0x7b0>
c00134fa:	50                   	push   eax
c00134fb:	50                   	push   eax
c00134fc:	68 b5 3d 02 c0       	push   0xc0023db5
c0013501:	e9 a5 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c0013506:	83 f8 04             	cmp    eax,0x4
c0013509:	75 0c                	jne    c0013517 <CPU::detectFeatures()+0x7c1>
c001350b:	50                   	push   eax
c001350c:	50                   	push   eax
c001350d:	68 c1 3d 02 c0       	push   0xc0023dc1
c0013512:	e9 94 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c0013517:	83 f8 03             	cmp    eax,0x3
c001351a:	0f 85 19 02 00 00    	jne    c0013739 <CPU::detectFeatures()+0x9e3>
c0013520:	50                   	push   eax
c0013521:	50                   	push   eax
c0013522:	68 c9 3d 02 c0       	push   0xc0023dc9
c0013527:	e9 7f 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c001352c:	80 fa 06             	cmp    dl,0x6
c001352f:	0f 85 db 00 00 00    	jne    c0013610 <CPU::detectFeatures()+0x8ba>
c0013535:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001353b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013540:	66 81 fa 80 01       	cmp    dx,0x180
c0013545:	75 0c                	jne    c0013553 <CPU::detectFeatures()+0x7fd>
c0013547:	50                   	push   eax
c0013548:	50                   	push   eax
c0013549:	68 d4 3d 02 c0       	push   0xc0023dd4
c001354e:	e9 58 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c0013553:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013559:	66 f7 c1 80 ff       	test   cx,0xff80
c001355e:	75 0c                	jne    c001356c <CPU::detectFeatures()+0x816>
c0013560:	50                   	push   eax
c0013561:	50                   	push   eax
c0013562:	68 e4 3d 02 c0       	push   0xc0023de4
c0013567:	e9 3f 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c001356c:	66 81 fa 40 02       	cmp    dx,0x240
c0013571:	75 0c                	jne    c001357f <CPU::detectFeatures()+0x829>
c0013573:	55                   	push   ebp
c0013574:	55                   	push   ebp
c0013575:	68 eb 3d 02 c0       	push   0xc0023deb
c001357a:	e9 2c 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c001357f:	66 81 fa 80 02       	cmp    dx,0x280
c0013584:	75 0c                	jne    c0013592 <CPU::detectFeatures()+0x83c>
c0013586:	57                   	push   edi
c0013587:	57                   	push   edi
c0013588:	68 f4 3d 02 c0       	push   0xc0023df4
c001358d:	e9 19 01 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c0013592:	66 81 fa 40 03       	cmp    dx,0x340
c0013597:	74 ed                	je     c0013586 <CPU::detectFeatures()+0x830>
c0013599:	66 81 fa c0 03       	cmp    dx,0x3c0
c001359e:	75 0c                	jne    c00135ac <CPU::detectFeatures()+0x856>
c00135a0:	56                   	push   esi
c00135a1:	56                   	push   esi
c00135a2:	68 fb 3d 02 c0       	push   0xc0023dfb
c00135a7:	e9 ff 00 00 00       	jmp    c00136ab <CPU::detectFeatures()+0x955>
c00135ac:	83 f8 06             	cmp    eax,0x6
c00135af:	0f 84 45 ff ff ff    	je     c00134fa <CPU::detectFeatures()+0x7a4>
c00135b5:	83 f8 04             	cmp    eax,0x4
c00135b8:	0f 84 4d ff ff ff    	je     c001350b <CPU::detectFeatures()+0x7b5>
c00135be:	83 f8 03             	cmp    eax,0x3
c00135c1:	0f 85 72 01 00 00    	jne    c0013739 <CPU::detectFeatures()+0x9e3>
c00135c7:	51                   	push   ecx
c00135c8:	51                   	push   ecx
c00135c9:	68 04 3e 02 c0       	push   0xc0023e04
c00135ce:	53                   	push   ebx
c00135cf:	e8 d4 aa ff ff       	call   c000e0a8 <Device::setName(char const*)>
c00135d4:	b1 c1                	mov    cl,0xc1
c00135d6:	88 c8                	mov    al,cl
c00135d8:	e6 22                	out    0x22,al
c00135da:	e4 23                	in     al,0x23
c00135dc:	88 c2                	mov    dl,al
c00135de:	88 c8                	mov    al,cl
c00135e0:	e6 22                	out    0x22,al
c00135e2:	88 d0                	mov    al,dl
c00135e4:	83 c8 10             	or     eax,0x10
c00135e7:	e6 23                	out    0x23,al
c00135e9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00135f0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00135f3:	89 d0                	mov    eax,edx
c00135f5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00135fb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00135ff:	40                   	inc    eax
c0013600:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013606:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001360b:	e9 a1 00 00 00       	jmp    c00136b1 <CPU::detectFeatures()+0x95b>
c0013610:	83 f8 06             	cmp    eax,0x6
c0013613:	0f 84 e1 fe ff ff    	je     c00134fa <CPU::detectFeatures()+0x7a4>
c0013619:	83 f8 04             	cmp    eax,0x4
c001361c:	0f 84 e9 fe ff ff    	je     c001350b <CPU::detectFeatures()+0x7b5>
c0013622:	83 f8 03             	cmp    eax,0x3
c0013625:	0f 85 0e 01 00 00    	jne    c0013739 <CPU::detectFeatures()+0x9e3>
c001362b:	52                   	push   edx
c001362c:	52                   	push   edx
c001362d:	68 0f 3e 02 c0       	push   0xc0023e0f
c0013632:	eb 77                	jmp    c00136ab <CPU::detectFeatures()+0x955>
c0013634:	83 f8 07             	cmp    eax,0x7
c0013637:	75 09                	jne    c0013642 <CPU::detectFeatures()+0x8ec>
c0013639:	50                   	push   eax
c001363a:	50                   	push   eax
c001363b:	68 19 3e 02 c0       	push   0xc0023e19
c0013640:	eb 69                	jmp    c00136ab <CPU::detectFeatures()+0x955>
c0013642:	83 f8 0a             	cmp    eax,0xa
c0013645:	75 09                	jne    c0013650 <CPU::detectFeatures()+0x8fa>
c0013647:	50                   	push   eax
c0013648:	50                   	push   eax
c0013649:	68 24 3e 02 c0       	push   0xc0023e24
c001364e:	eb 5b                	jmp    c00136ab <CPU::detectFeatures()+0x955>
c0013650:	83 f8 0b             	cmp    eax,0xb
c0013653:	75 09                	jne    c001365e <CPU::detectFeatures()+0x908>
c0013655:	50                   	push   eax
c0013656:	50                   	push   eax
c0013657:	68 2c 3e 02 c0       	push   0xc0023e2c
c001365c:	eb 4d                	jmp    c00136ab <CPU::detectFeatures()+0x955>
c001365e:	83 f8 08             	cmp    eax,0x8
c0013661:	75 09                	jne    c001366c <CPU::detectFeatures()+0x916>
c0013663:	50                   	push   eax
c0013664:	50                   	push   eax
c0013665:	68 35 3e 02 c0       	push   0xc0023e35
c001366a:	eb 3f                	jmp    c00136ab <CPU::detectFeatures()+0x955>
c001366c:	83 f8 09             	cmp    eax,0x9
c001366f:	75 09                	jne    c001367a <CPU::detectFeatures()+0x924>
c0013671:	50                   	push   eax
c0013672:	50                   	push   eax
c0013673:	68 3d 3e 02 c0       	push   0xc0023e3d
c0013678:	eb 31                	jmp    c00136ab <CPU::detectFeatures()+0x955>
c001367a:	83 f8 05             	cmp    eax,0x5
c001367d:	75 09                	jne    c0013688 <CPU::detectFeatures()+0x932>
c001367f:	50                   	push   eax
c0013680:	50                   	push   eax
c0013681:	68 45 3e 02 c0       	push   0xc0023e45
c0013686:	eb 23                	jmp    c00136ab <CPU::detectFeatures()+0x955>
c0013688:	83 f8 0c             	cmp    eax,0xc
c001368b:	75 09                	jne    c0013696 <CPU::detectFeatures()+0x940>
c001368d:	55                   	push   ebp
c001368e:	55                   	push   ebp
c001368f:	68 53 3e 02 c0       	push   0xc0023e53
c0013694:	eb 15                	jmp    c00136ab <CPU::detectFeatures()+0x955>
c0013696:	83 f8 0d             	cmp    eax,0xd
c0013699:	75 09                	jne    c00136a4 <CPU::detectFeatures()+0x94e>
c001369b:	57                   	push   edi
c001369c:	57                   	push   edi
c001369d:	68 5e 3e 02 c0       	push   0xc0023e5e
c00136a2:	eb 07                	jmp    c00136ab <CPU::detectFeatures()+0x955>
c00136a4:	56                   	push   esi
c00136a5:	56                   	push   esi
c00136a6:	68 72 3e 02 c0       	push   0xc0023e72
c00136ab:	53                   	push   ebx
c00136ac:	e8 f7 a9 ff ff       	call   c000e0a8 <Device::setName(char const*)>
c00136b1:	83 c4 10             	add    esp,0x10
c00136b4:	e9 80 00 00 00       	jmp    c0013739 <CPU::detectFeatures()+0x9e3>
c00136b9:	51                   	push   ecx
c00136ba:	51                   	push   ecx
c00136bb:	68 be 3c 02 c0       	push   0xc0023cbe
c00136c0:	55                   	push   ebp
c00136c1:	e8 7a d0 fe ff       	call   c0000740 <strcpy>
c00136c6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00136d0:	e8 0e cb fe ff       	call   c00001e3 <is486>
c00136d5:	83 c4 10             	add    esp,0x10
c00136d8:	85 c0                	test   eax,eax
c00136da:	74 2b                	je     c0013707 <CPU::detectFeatures()+0x9b1>
c00136dc:	52                   	push   edx
c00136dd:	52                   	push   edx
c00136de:	68 7e 3e 02 c0       	push   0xc0023e7e
c00136e3:	53                   	push   ebx
c00136e4:	e8 bf a9 ff ff       	call   c000e0a8 <Device::setName(char const*)>
c00136e9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00136f0:	0f 20 c0             	mov    eax,cr0
c00136f3:	83 e0 14             	and    eax,0x14
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	83 f8 04             	cmp    eax,0x4
c00136fc:	75 1f                	jne    c001371d <CPU::detectFeatures()+0x9c7>
c00136fe:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013705:	eb 32                	jmp    c0013739 <CPU::detectFeatures()+0x9e3>
c0013707:	50                   	push   eax
c0013708:	50                   	push   eax
c0013709:	68 89 3e 02 c0       	push   0xc0023e89
c001370e:	53                   	push   ebx
c001370f:	e8 94 a9 ff ff       	call   c000e0a8 <Device::setName(char const*)>
c0013714:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001371b:	eb d3                	jmp    c00136f0 <CPU::detectFeatures()+0x99a>
c001371d:	e8 9c ca fe ff       	call   c00001be <hasLegacyFPU>
c0013722:	83 e0 01             	and    eax,0x1
c0013725:	8d 14 00             	lea    edx,[eax+eax*1]
c0013728:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001372e:	83 e0 fd             	and    eax,0xfffffffd
c0013731:	09 d0                	or     eax,edx
c0013733:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013739:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013740:	83 c4 4c             	add    esp,0x4c
c0013743:	5b                   	pop    ebx
c0013744:	5e                   	pop    esi
c0013745:	5f                   	pop    edi
c0013746:	5d                   	pop    ebp
c0013747:	c3                   	ret    

c0013748 <CPU::setupSMEP()>:
c0013748:	0f 20 e0             	mov    eax,cr4
c001374b:	0d 00 00 10 00       	or     eax,0x100000
c0013750:	0f 22 e0             	mov    cr4,eax
c0013753:	c3                   	ret    

c0013754 <CPU::setupUMIP()>:
c0013754:	0f 20 e0             	mov    eax,cr4
c0013757:	80 cc 08             	or     ah,0x8
c001375a:	0f 22 e0             	mov    cr4,eax
c001375d:	c3                   	ret    

c001375e <CPU::setupTSC()>:
c001375e:	0f 20 e0             	mov    eax,cr4
c0013761:	83 c8 04             	or     eax,0x4
c0013764:	0f 22 e0             	mov    cr4,eax
c0013767:	c3                   	ret    

c0013768 <CPU::setupLargePages()>:
c0013768:	0f 20 e0             	mov    eax,cr4
c001376b:	83 c8 10             	or     eax,0x10
c001376e:	0f 22 e0             	mov    cr4,eax
c0013771:	c3                   	ret    

c0013772 <CPU::setupPAT()>:
c0013772:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0013777:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001377e:	74 2c                	je     c00137ac <CPU::setupPAT()+0x3a>
c0013780:	53                   	push   ebx
c0013781:	83 ec 10             	sub    esp,0x10
c0013784:	68 77 02 00 00       	push   0x277
c0013789:	50                   	push   eax
c001378a:	e8 95 57 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001378f:	83 e2 f8             	and    edx,0xfffffff8
c0013792:	83 ca 01             	or     edx,0x1
c0013795:	52                   	push   edx
c0013796:	50                   	push   eax
c0013797:	68 77 02 00 00       	push   0x277
c001379c:	ff 35 88 61 02 c0    	push   DWORD PTR ds:0xc0026188
c00137a2:	e8 a9 57 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c00137a7:	83 c4 28             	add    esp,0x28
c00137aa:	5b                   	pop    ebx
c00137ab:	c3                   	ret    
c00137ac:	c3                   	ret    
c00137ad:	90                   	nop

c00137ae <CPU::setupMTRR()>:
c00137ae:	c3                   	ret    
c00137af:	90                   	nop

c00137b0 <CPU::setupGlobalPages()>:
c00137b0:	0f 20 e0             	mov    eax,cr4
c00137b3:	0c 80                	or     al,0x80
c00137b5:	0f 22 e0             	mov    cr4,eax
c00137b8:	c3                   	ret    
c00137b9:	90                   	nop

c00137ba <CPU::allowUsermodeDataAccess()>:
c00137ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137be:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00137c5:	74 03                	je     c00137ca <CPU::allowUsermodeDataAccess()+0x10>
c00137c7:	0f 01 cb             	stac   
c00137ca:	c3                   	ret    
c00137cb:	90                   	nop

c00137cc <CPU::prohibitUsermodeDataAccess()>:
c00137cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137d0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00137d7:	74 03                	je     c00137dc <CPU::prohibitUsermodeDataAccess()+0x10>
c00137d9:	0f 01 ca             	clac   
c00137dc:	c3                   	ret    
c00137dd:	90                   	nop

c00137de <CPU::setupSMAP()>:
c00137de:	0f 20 e0             	mov    eax,cr4
c00137e1:	0d 00 00 20 00       	or     eax,0x200000
c00137e6:	0f 22 e0             	mov    cr4,eax
c00137e9:	eb e1                	jmp    c00137cc <CPU::prohibitUsermodeDataAccess()>
c00137eb:	90                   	nop

c00137ec <CPU::setupFeatures()>:
c00137ec:	53                   	push   ebx
c00137ed:	83 ec 08             	sub    esp,0x8
c00137f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137f4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00137fb:	74 18                	je     c0013815 <CPU::setupFeatures()+0x29>
c00137fd:	83 ec 0c             	sub    esp,0xc
c0013800:	68 94 3e 02 c0       	push   0xc0023e94
c0013805:	e8 61 92 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001380a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001380d:	e8 42 ff ff ff       	call   c0013754 <CPU::setupUMIP()>
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001381c:	74 18                	je     c0013836 <CPU::setupFeatures()+0x4a>
c001381e:	83 ec 0c             	sub    esp,0xc
c0013821:	68 9e 3e 02 c0       	push   0xc0023e9e
c0013826:	e8 40 92 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001382b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001382e:	e8 2b ff ff ff       	call   c001375e <CPU::setupTSC()>
c0013833:	83 c4 10             	add    esp,0x10
c0013836:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001383d:	74 18                	je     c0013857 <CPU::setupFeatures()+0x6b>
c001383f:	83 ec 0c             	sub    esp,0xc
c0013842:	68 a7 3e 02 c0       	push   0xc0023ea7
c0013847:	e8 1f 92 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001384c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001384f:	e8 14 ff ff ff       	call   c0013768 <CPU::setupLargePages()>
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001385e:	74 18                	je     c0013878 <CPU::setupFeatures()+0x8c>
c0013860:	83 ec 0c             	sub    esp,0xc
c0013863:	68 b0 3e 02 c0       	push   0xc0023eb0
c0013868:	e8 fe 91 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001386d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013870:	e8 3b ff ff ff       	call   c00137b0 <CPU::setupGlobalPages()>
c0013875:	83 c4 10             	add    esp,0x10
c0013878:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001387f:	74 18                	je     c0013899 <CPU::setupFeatures()+0xad>
c0013881:	83 ec 0c             	sub    esp,0xc
c0013884:	68 c2 3e 02 c0       	push   0xc0023ec2
c0013889:	e8 dd 91 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001388e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013891:	e8 dc fe ff ff       	call   c0013772 <CPU::setupPAT()>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00138a0:	74 11                	je     c00138b3 <CPU::setupFeatures()+0xc7>
c00138a2:	c7 44 24 10 cb 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023ecb
c00138aa:	83 c4 08             	add    esp,0x8
c00138ad:	5b                   	pop    ebx
c00138ae:	e9 b8 91 ff ff       	jmp    c000ca6b <Dbg::kprintf(char const*, ...)>
c00138b3:	83 c4 08             	add    esp,0x8
c00138b6:	5b                   	pop    ebx
c00138b7:	c3                   	ret    

c00138b8 <CPU::open(int, int, void*)>:
c00138b8:	57                   	push   edi
c00138b9:	56                   	push   esi
c00138ba:	53                   	push   ebx
c00138bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138c3:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00138c9:	83 ec 0c             	sub    esp,0xc
c00138cc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00138d2:	68 d5 3e 02 c0       	push   0xc0023ed5
c00138d7:	e8 41 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00138dc:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00138e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00138e5:	e8 d2 59 ff ff       	call   c00092bc <GDT::setup()>
c00138ea:	c7 04 24 e7 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ee7
c00138f1:	e8 27 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00138f6:	83 c4 0c             	add    esp,0xc
c00138f9:	6a 00                	push   0x0
c00138fb:	68 ef be ad de       	push   0xdeadbeef
c0013900:	57                   	push   edi
c0013901:	e8 c6 77 ff ff       	call   c000b0cc <TSS::setup(unsigned long, unsigned long)>
c0013906:	c7 04 24 f9 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ef9
c001390d:	e8 0b 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013912:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013915:	e8 92 77 ff ff       	call   c000b0ac <TSS::flush()>
c001391a:	c7 04 24 0d 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f0d
c0013921:	e8 f7 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013926:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001392c:	89 04 24             	mov    DWORD PTR [esp],eax
c001392f:	e8 f2 5b ff ff       	call   c0009526 <IDT::setup()>
c0013934:	c7 04 24 1f 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f1f
c001393b:	e8 dd 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013940:	b8 00 04 00 00       	mov    eax,0x400
c0013945:	0f 23 f8             	mov    db7,eax
c0013948:	c7 04 24 3d 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f3d
c001394f:	e8 c9 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013954:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001395e:	e8 cd 64 ff ff       	call   c0009e30 <Phys::allocatePage()>
c0013963:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013969:	89 30                	mov    DWORD PTR [eax],esi
c001396b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013971:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013974:	c7 04 24 5f 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f5f
c001397b:	e8 9d 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013980:	58                   	pop    eax
c0013981:	5a                   	pop    edx
c0013982:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013988:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001398c:	e8 35 87 ff ff       	call   c000c0c6 <VAS::setCPUSpecific(unsigned long)>
c0013991:	c7 04 24 87 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f87
c0013998:	e8 80 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001399d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139a0:	e8 b1 f3 ff ff       	call   c0012d56 <CPU::detectFeatures()>
c00139a5:	c7 04 24 aa 3f 02 c0 	mov    DWORD PTR [esp],0xc0023faa
c00139ac:	e8 6c 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139b1:	e8 00 b9 ff ff       	call   c000f2b6 <setupInterruptController()>
c00139b6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00139bc:	c7 04 24 ce 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fce
c00139c3:	e8 55 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139c8:	a1 a0 61 02 c0       	mov    eax,ds:0xc00261a0
c00139cd:	83 e0 10             	and    eax,0x10
c00139d0:	83 f8 01             	cmp    eax,0x1
c00139d3:	19 c0                	sbb    eax,eax
c00139d5:	83 e0 46             	and    eax,0x46
c00139d8:	83 c0 1e             	add    eax,0x1e
c00139db:	89 04 24             	mov    DWORD PTR [esp],eax
c00139de:	e8 bd ce ff ff       	call   c00108a0 <setupTimer(int)>
c00139e3:	83 c4 10             	add    esp,0x10
c00139e6:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00139ec:	f6 05 a0 61 02 c0 20 	test   BYTE PTR ds:0xc00261a0,0x20
c00139f3:	74 18                	je     c0013a0d <CPU::open(int, int, void*)+0x155>
c00139f5:	83 ec 0c             	sub    esp,0xc
c00139f8:	68 e9 3f 02 c0       	push   0xc0023fe9
c00139fd:	e8 1b 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a05:	e8 e2 fd ff ff       	call   c00137ec <CPU::setupFeatures()>
c0013a0a:	83 c4 10             	add    esp,0x10
c0013a0d:	83 ec 0c             	sub    esp,0xc
c0013a10:	68 04 40 02 c0       	push   0xc0024004
c0013a15:	e8 03 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a1a:	83 c4 10             	add    esp,0x10
c0013a1d:	31 c0                	xor    eax,eax
c0013a1f:	5b                   	pop    ebx
c0013a20:	5e                   	pop    esi
c0013a21:	5f                   	pop    edi
c0013a22:	c3                   	ret    
c0013a23:	90                   	nop

c0013a24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a24:	57                   	push   edi
c0013a25:	56                   	push   esi
c0013a26:	53                   	push   ebx
c0013a27:	51                   	push   ecx
c0013a28:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a2c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013a2f:	0f 02 c0             	lar    eax,ax
c0013a32:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013a35:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a39:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013a3c:	88 ca                	mov    dl,cl
c0013a3e:	c0 ea 06             	shr    dl,0x6
c0013a41:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013a45:	89 ca                	mov    edx,ecx
c0013a47:	66 c1 ea 03          	shr    dx,0x3
c0013a4b:	83 e2 07             	and    edx,0x7
c0013a4e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013a53:	88 17                	mov    BYTE PTR [edi],dl
c0013a55:	0f 84 a6 01 00 00    	je     c0013c01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013a5b:	83 e1 07             	and    ecx,0x7
c0013a5e:	80 f9 04             	cmp    cl,0x4
c0013a61:	0f 84 98 00 00 00    	je     c0013aff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013a67:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013a6c:	0f 95 c0             	setne  al
c0013a6f:	80 f9 05             	cmp    cl,0x5
c0013a72:	0f 95 c2             	setne  dl
c0013a75:	08 c2                	or     dl,al
c0013a77:	74 79                	je     c0013af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013a79:	84 c9                	test   cl,cl
c0013a7b:	75 05                	jne    c0013a82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013a7d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013a80:	eb 3c                	jmp    c0013abe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a82:	80 f9 01             	cmp    cl,0x1
c0013a85:	75 05                	jne    c0013a8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013a87:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013a8a:	eb 32                	jmp    c0013abe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a8c:	80 f9 02             	cmp    cl,0x2
c0013a8f:	75 05                	jne    c0013a96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013a91:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013a94:	eb 28                	jmp    c0013abe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a96:	31 c0                	xor    eax,eax
c0013a98:	80 f9 03             	cmp    cl,0x3
c0013a9b:	75 05                	jne    c0013aa2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013a9d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013aa0:	eb 1c                	jmp    c0013abe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aa2:	80 f9 05             	cmp    cl,0x5
c0013aa5:	75 05                	jne    c0013aac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013aa7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013aaa:	eb 12                	jmp    c0013abe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aac:	80 f9 06             	cmp    cl,0x6
c0013aaf:	75 05                	jne    c0013ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013ab1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ab4:	eb 08                	jmp    c0013abe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ab6:	80 f9 07             	cmp    cl,0x7
c0013ab9:	75 03                	jne    c0013abe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013abb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013abe:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013ac3:	75 10                	jne    c0013ad5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013ac5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013ac9:	b9 03 00 00 00       	mov    ecx,0x3
c0013ace:	01 d0                	add    eax,edx
c0013ad0:	e9 37 01 00 00       	jmp    c0013c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ad5:	b9 02 00 00 00       	mov    ecx,0x2
c0013ada:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013adf:	0f 85 27 01 00 00    	jne    c0013c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ae5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013ae8:	b9 06 00 00 00       	mov    ecx,0x6
c0013aed:	e9 1a 01 00 00       	jmp    c0013c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013af2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013af5:	b9 06 00 00 00       	mov    ecx,0x6
c0013afa:	e9 0f 01 00 00       	jmp    c0013c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013aff:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013b02:	88 ca                	mov    dl,cl
c0013b04:	c0 ea 06             	shr    dl,0x6
c0013b07:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013b0b:	89 ca                	mov    edx,ecx
c0013b0d:	66 c1 ea 03          	shr    dx,0x3
c0013b11:	83 e2 07             	and    edx,0x7
c0013b14:	80 e1 07             	and    cl,0x7
c0013b17:	75 05                	jne    c0013b1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013b19:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013b1c:	eb 4c                	jmp    c0013b6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b1e:	80 f9 01             	cmp    cl,0x1
c0013b21:	75 05                	jne    c0013b28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b23:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b26:	eb 42                	jmp    c0013b6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b28:	80 f9 02             	cmp    cl,0x2
c0013b2b:	75 05                	jne    c0013b32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013b2d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013b30:	eb 38                	jmp    c0013b6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b32:	80 f9 03             	cmp    cl,0x3
c0013b35:	75 05                	jne    c0013b3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013b37:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013b3a:	eb 2e                	jmp    c0013b6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b3c:	80 f9 04             	cmp    cl,0x4
c0013b3f:	75 12                	jne    c0013b53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013b41:	f6 c4 60             	test   ah,0x60
c0013b44:	75 08                	jne    c0013b4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013b46:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013b49:	8d 78 14             	lea    edi,[eax+0x14]
c0013b4c:	eb 1c                	jmp    c0013b6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b4e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013b51:	eb 17                	jmp    c0013b6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b53:	80 f9 05             	cmp    cl,0x5
c0013b56:	75 05                	jne    c0013b5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013b58:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013b5b:	eb 0d                	jmp    c0013b6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b5d:	80 f9 06             	cmp    cl,0x6
c0013b60:	75 05                	jne    c0013b67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013b62:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013b65:	eb 03                	jmp    c0013b6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b67:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013b6a:	84 d2                	test   dl,dl
c0013b6c:	75 05                	jne    c0013b73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013b6e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b71:	eb 3c                	jmp    c0013baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b73:	80 fa 01             	cmp    dl,0x1
c0013b76:	75 05                	jne    c0013b7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013b78:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b7b:	eb 32                	jmp    c0013baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b7d:	80 fa 02             	cmp    dl,0x2
c0013b80:	75 05                	jne    c0013b87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013b82:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013b85:	eb 28                	jmp    c0013baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b87:	80 fa 03             	cmp    dl,0x3
c0013b8a:	75 05                	jne    c0013b91 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013b8c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013b8f:	eb 1e                	jmp    c0013baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b91:	31 c0                	xor    eax,eax
c0013b93:	80 fa 04             	cmp    dl,0x4
c0013b96:	74 17                	je     c0013baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b98:	80 fa 05             	cmp    dl,0x5
c0013b9b:	75 05                	jne    c0013ba2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013b9d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013ba0:	eb 0d                	jmp    c0013baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ba2:	80 fa 06             	cmp    dl,0x6
c0013ba5:	75 05                	jne    c0013bac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013ba7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013baa:	eb 03                	jmp    c0013baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bac:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013baf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bb4:	0f 94 c2             	sete   dl
c0013bb7:	80 f9 05             	cmp    cl,0x5
c0013bba:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013bbe:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013bc3:	d3 e0                	shl    eax,cl
c0013bc5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013bc9:	74 0a                	je     c0013bd5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013bcb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bce:	b9 07 00 00 00       	mov    ecx,0x7
c0013bd3:	eb 37                	jmp    c0013c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013bd5:	01 f8                	add    eax,edi
c0013bd7:	b9 03 00 00 00       	mov    ecx,0x3
c0013bdc:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013be1:	74 2b                	je     c0013c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013be3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013be8:	75 0d                	jne    c0013bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013bea:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013bee:	01 c8                	add    eax,ecx
c0013bf0:	b9 04 00 00 00       	mov    ecx,0x4
c0013bf5:	eb 17                	jmp    c0013c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bf7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bfa:	b9 07 00 00 00       	mov    ecx,0x7
c0013bff:	eb 0d                	jmp    c0013c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c01:	b9 02 00 00 00       	mov    ecx,0x2
c0013c06:	b2 01                	mov    dl,0x1
c0013c08:	31 c0                	xor    eax,eax
c0013c0a:	eb 02                	jmp    c0013c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c0c:	31 d2                	xor    edx,edx
c0013c0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c12:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013c14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c18:	88 11                	mov    BYTE PTR [ecx],dl
c0013c1a:	5a                   	pop    edx
c0013c1b:	5b                   	pop    ebx
c0013c1c:	5e                   	pop    esi
c0013c1d:	5f                   	pop    edi
c0013c1e:	c3                   	ret    

c0013c1f <Krnl::smpEntry()>:
c0013c1f:	eb fe                	jmp    c0013c1f <Krnl::smpEntry()>

c0013c21 <Krnl::startCPU(int)>:
c0013c21:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0013c26:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013c2d:	0f 84 36 01 00 00    	je     c0013d69 <Krnl::startCPU(int)+0x148>
c0013c33:	53                   	push   ebx
c0013c34:	83 ec 10             	sub    esp,0x10
c0013c37:	fa                   	cli    
c0013c38:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0013c3e:	6a 1b                	push   0x1b
c0013c40:	ff 35 88 61 02 c0    	push   DWORD PTR ds:0xc0026188
c0013c46:	e8 d9 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013c4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c50:	89 c3                	mov    ebx,eax
c0013c52:	58                   	pop    eax
c0013c53:	5a                   	pop    edx
c0013c54:	53                   	push   ebx
c0013c55:	68 4c 40 02 c0       	push   0xc002404c
c0013c5a:	e8 0c 8e ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0013c5f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c6d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c77:	c1 e0 18             	shl    eax,0x18
c0013c7a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013c80:	83 c4 10             	add    esp,0x10
c0013c83:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013c89:	09 c2                	or     edx,eax
c0013c8b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013c91:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013c97:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013c9d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013ca3:	80 cd c5             	or     ch,0xc5
c0013ca6:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cac:	f3 90                	pause  
c0013cae:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013cb0:	0f ba e1 0c          	bt     ecx,0xc
c0013cb4:	72 f6                	jb     c0013cac <Krnl::startCPU(int)+0x8b>
c0013cb6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013cbc:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013cc2:	09 c1                	or     ecx,eax
c0013cc4:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013cca:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cd0:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cd6:	80 cd 85             	or     ch,0x85
c0013cd9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cdf:	f3 90                	pause  
c0013ce1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013ce3:	0f ba e1 0c          	bt     ecx,0xc
c0013ce7:	72 f6                	jb     c0013cdf <Krnl::startCPU(int)+0xbe>
c0013ce9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013cf3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013cf9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013cff:	09 c1                	or     ecx,eax
c0013d01:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d07:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d0d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013d13:	81 c9 02 06 00 00    	or     ecx,0x602
c0013d19:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d1f:	f3 90                	pause  
c0013d21:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d23:	0f ba e1 0c          	bt     ecx,0xc
c0013d27:	72 f6                	jb     c0013d1f <Krnl::startCPU(int)+0xfe>
c0013d29:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d33:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d39:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d3f:	09 c8                	or     eax,ecx
c0013d41:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013d47:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013d4d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013d52:	0d 02 06 00 00       	or     eax,0x602
c0013d57:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013d5d:	f3 90                	pause  
c0013d5f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013d61:	0f ba e0 0c          	bt     eax,0xc
c0013d65:	72 f6                	jb     c0013d5d <Krnl::startCPU(int)+0x13c>
c0013d67:	eb fe                	jmp    c0013d67 <Krnl::startCPU(int)+0x146>
c0013d69:	c3                   	ret    

c0013d6a <Krnl::startCPUs()>:
c0013d6a:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0013d6f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d75:	88 c2                	mov    dl,al
c0013d77:	83 e2 0a             	and    edx,0xa
c0013d7a:	80 fa 0a             	cmp    dl,0xa
c0013d7d:	75 09                	jne    c0013d88 <Krnl::startCPUs()+0x1e>
c0013d7f:	a8 01                	test   al,0x1
c0013d81:	74 05                	je     c0013d88 <Krnl::startCPUs()+0x1e>
c0013d83:	e9 13 c4 fe ff       	jmp    c000019b <prepareTramp>
c0013d88:	c3                   	ret    
c0013d89:	90                   	nop

c0013d8a <EnvVarContainer::getEnv(char const*)>:
c0013d8a:	57                   	push   edi
c0013d8b:	56                   	push   esi
c0013d8c:	53                   	push   ebx
c0013d8d:	31 db                	xor    ebx,ebx
c0013d8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d93:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013d95:	7e 2b                	jle    c0013dc2 <EnvVarContainer::getEnv(char const*)+0x38>
c0013d97:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013d9e:	50                   	push   eax
c0013d9f:	50                   	push   eax
c0013da0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013da3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013da6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013daa:	e8 1d ca fe ff       	call   c00007cc <strcmp>
c0013daf:	83 c4 10             	add    esp,0x10
c0013db2:	85 c0                	test   eax,eax
c0013db4:	75 09                	jne    c0013dbf <EnvVarContainer::getEnv(char const*)+0x35>
c0013db6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013db9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013dbd:	eb 05                	jmp    c0013dc4 <EnvVarContainer::getEnv(char const*)+0x3a>
c0013dbf:	43                   	inc    ebx
c0013dc0:	eb d1                	jmp    c0013d93 <EnvVarContainer::getEnv(char const*)+0x9>
c0013dc2:	31 c0                	xor    eax,eax
c0013dc4:	5b                   	pop    ebx
c0013dc5:	5e                   	pop    esi
c0013dc6:	5f                   	pop    edi
c0013dc7:	c3                   	ret    

c0013dc8 <EnvVarContainer::setEnv(char const*, char const*)>:
c0013dc8:	55                   	push   ebp
c0013dc9:	57                   	push   edi
c0013dca:	56                   	push   esi
c0013dcb:	53                   	push   ebx
c0013dcc:	83 ec 28             	sub    esp,0x28
c0013dcf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013dd3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013dd7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013ddb:	56                   	push   esi
c0013ddc:	e8 bf c8 fe ff       	call   c00006a0 <strlen>
c0013de1:	40                   	inc    eax
c0013de2:	89 04 24             	mov    DWORD PTR [esp],eax
c0013de5:	e8 d9 5b ff ff       	call   c00099c3 <malloc>
c0013dea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013df1:	e8 aa c8 fe ff       	call   c00006a0 <strlen>
c0013df6:	40                   	inc    eax
c0013df7:	89 04 24             	mov    DWORD PTR [esp],eax
c0013dfa:	e8 c4 5b ff ff       	call   c00099c3 <malloc>
c0013dff:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e06:	e8 95 c8 fe ff       	call   c00006a0 <strlen>
c0013e0b:	83 c4 0c             	add    esp,0xc
c0013e0e:	40                   	inc    eax
c0013e0f:	50                   	push   eax
c0013e10:	6a 00                	push   0x0
c0013e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e16:	e8 69 c8 fe ff       	call   c0000684 <memset>
c0013e1b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e1e:	e8 7d c8 fe ff       	call   c00006a0 <strlen>
c0013e23:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e27:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e2f:	89 de                	mov    esi,ebx
c0013e31:	e8 6a c8 fe ff       	call   c00006a0 <strlen>
c0013e36:	83 c4 0c             	add    esp,0xc
c0013e39:	40                   	inc    eax
c0013e3a:	50                   	push   eax
c0013e3b:	6a 00                	push   0x0
c0013e3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e41:	e8 3e c8 fe ff       	call   c0000684 <memset>
c0013e46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e49:	e8 52 c8 fe ff       	call   c00006a0 <strlen>
c0013e4e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e52:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e5a:	40                   	inc    eax
c0013e5b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e5e:	c1 e0 03             	shl    eax,0x3
c0013e61:	5a                   	pop    edx
c0013e62:	59                   	pop    ecx
c0013e63:	50                   	push   eax
c0013e64:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013e67:	e8 43 5b ff ff       	call   c00099af <realloc>
c0013e6c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013e70:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013e73:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013e76:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013e7a:	b9 08 00 00 00       	mov    ecx,0x8
c0013e7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e81:	83 c4 2c             	add    esp,0x2c
c0013e84:	5b                   	pop    ebx
c0013e85:	5e                   	pop    esi
c0013e86:	5f                   	pop    edi
c0013e87:	5d                   	pop    ebp
c0013e88:	c3                   	ret    
c0013e89:	90                   	nop

c0013e8a <EnvVarContainer::deleteEnv(char const*)>:
c0013e8a:	c3                   	ret    
c0013e8b:	90                   	nop

c0013e8c <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013e8c:	55                   	push   ebp
c0013e8d:	57                   	push   edi
c0013e8e:	56                   	push   esi
c0013e8f:	53                   	push   ebx
c0013e90:	81 ec 38 01 00 00    	sub    esp,0x138
c0013e96:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013e9d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013ea4:	68 14 01 00 00       	push   0x114
c0013ea9:	e8 15 5b ff ff       	call   c00099c3 <malloc>
c0013eae:	83 c4 0c             	add    esp,0xc
c0013eb1:	89 c3                	mov    ebx,eax
c0013eb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013eb6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013ebd:	50                   	push   eax
c0013ebe:	e8 13 91 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0013ec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ec6:	e8 dd 93 ff ff       	call   c000d2a8 <File::exists()>
c0013ecb:	83 c4 10             	add    esp,0x10
c0013ece:	84 c0                	test   al,al
c0013ed0:	75 31                	jne    c0013f03 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013ed2:	50                   	push   eax
c0013ed3:	50                   	push   eax
c0013ed4:	6a 12                	push   0x12
c0013ed6:	53                   	push   ebx
c0013ed7:	e8 5e 91 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0013edc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ede:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013ee1:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ee4:	e8 b7 c7 fe ff       	call   c00006a0 <strlen>
c0013ee9:	5a                   	pop    edx
c0013eea:	31 d2                	xor    edx,edx
c0013eec:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013ef0:	51                   	push   ecx
c0013ef1:	56                   	push   esi
c0013ef2:	52                   	push   edx
c0013ef3:	50                   	push   eax
c0013ef4:	53                   	push   ebx
c0013ef5:	ff d7                	call   edi
c0013ef7:	83 c4 14             	add    esp,0x14
c0013efa:	53                   	push   ebx
c0013efb:	e8 98 91 ff ff       	call   c000d098 <File::close()>
c0013f00:	83 c4 10             	add    esp,0x10
c0013f03:	56                   	push   esi
c0013f04:	31 f6                	xor    esi,esi
c0013f06:	68 00 01 00 00       	push   0x100
c0013f0b:	6a 00                	push   0x0
c0013f0d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f11:	50                   	push   eax
c0013f12:	e8 6d c7 fe ff       	call   c0000684 <memset>
c0013f17:	5f                   	pop    edi
c0013f18:	58                   	pop    eax
c0013f19:	6a 01                	push   0x1
c0013f1b:	53                   	push   ebx
c0013f1c:	e8 19 91 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0013f21:	83 c4 10             	add    esp,0x10
c0013f24:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f2c:	83 ec 0c             	sub    esp,0xc
c0013f2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f31:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f35:	51                   	push   ecx
c0013f36:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013f3a:	52                   	push   edx
c0013f3b:	6a 00                	push   0x0
c0013f3d:	6a 01                	push   0x1
c0013f3f:	53                   	push   ebx
c0013f40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f43:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013f47:	83 c4 20             	add    esp,0x20
c0013f4a:	3c 0d                	cmp    al,0xd
c0013f4c:	0f 84 09 01 00 00    	je     c001405b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f52:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013f57:	0f 84 ef 00 00 00    	je     c001404c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f5d:	3c 0a                	cmp    al,0xa
c0013f5f:	74 13                	je     c0013f74 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f61:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f66:	74 0c                	je     c0013f74 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f68:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013f6e:	0f 8e d8 00 00 00    	jle    c001404c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f78:	83 ec 0c             	sub    esp,0xc
c0013f7b:	8d 78 01             	lea    edi,[eax+0x1]
c0013f7e:	57                   	push   edi
c0013f7f:	e8 3f 5a ff ff       	call   c00099c3 <malloc>
c0013f84:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013f88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013f8c:	8d 56 04             	lea    edx,[esi+0x4]
c0013f8f:	89 14 24             	mov    DWORD PTR [esp],edx
c0013f92:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013f96:	e8 28 5a ff ff       	call   c00099c3 <malloc>
c0013f9b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013f9f:	83 c4 0c             	add    esp,0xc
c0013fa2:	57                   	push   edi
c0013fa3:	6a 00                	push   0x0
c0013fa5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013fa9:	e8 d6 c6 fe ff       	call   c0000684 <memset>
c0013fae:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fb2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013fb6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013fba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fbc:	83 c4 0c             	add    esp,0xc
c0013fbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fc3:	52                   	push   edx
c0013fc4:	6a 00                	push   0x0
c0013fc6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013fca:	e8 b5 c6 fe ff       	call   c0000684 <memset>
c0013fcf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fd3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013fd7:	89 34 24             	mov    DWORD PTR [esp],esi
c0013fda:	e8 c1 c6 fe ff       	call   c00006a0 <strlen>
c0013fdf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0013fe3:	89 c1                	mov    ecx,eax
c0013fe5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fe7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013fea:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0013fed:	40                   	inc    eax
c0013fee:	83 c4 10             	add    esp,0x10
c0013ff1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013ff4:	85 d2                	test   edx,edx
c0013ff6:	75 0c                	jne    c0014004 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0013ff8:	83 ec 0c             	sub    esp,0xc
c0013ffb:	6a 08                	push   0x8
c0013ffd:	e8 c1 59 ff ff       	call   c00099c3 <malloc>
c0014002:	eb 0c                	jmp    c0014010 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014004:	c1 e0 03             	shl    eax,0x3
c0014007:	51                   	push   ecx
c0014008:	51                   	push   ecx
c0014009:	50                   	push   eax
c001400a:	52                   	push   edx
c001400b:	e8 9f 59 ff ff       	call   c00099af <realloc>
c0014010:	83 c4 10             	add    esp,0x10
c0014013:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014016:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014019:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001401c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014020:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014024:	b9 08 00 00 00       	mov    ecx,0x8
c0014029:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001402b:	31 f6                	xor    esi,esi
c001402d:	50                   	push   eax
c001402e:	68 00 01 00 00       	push   0x100
c0014033:	6a 00                	push   0x0
c0014035:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014039:	50                   	push   eax
c001403a:	e8 45 c6 fe ff       	call   c0000684 <memset>
c001403f:	83 c4 10             	add    esp,0x10
c0014042:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001404a:	eb 0f                	jmp    c001405b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001404c:	3c 3d                	cmp    al,0x3d
c001404e:	74 07                	je     c0014057 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014050:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014054:	46                   	inc    esi
c0014055:	eb 04                	jmp    c001405b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014057:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001405b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014060:	0f 85 c6 fe ff ff    	jne    c0013f2c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014066:	81 c4 2c 01 00 00    	add    esp,0x12c
c001406c:	5b                   	pop    ebx
c001406d:	5e                   	pop    esi
c001406e:	5f                   	pop    edi
c001406f:	5d                   	pop    ebp
c0014070:	c3                   	ret    
c0014071:	90                   	nop

c0014072 <EnvVarContainer::__loadSystem()>:
c0014072:	83 ec 10             	sub    esp,0x10
c0014075:	68 60 5b 02 c0       	push   0xc0025b60
c001407a:	68 5d 40 02 c0       	push   0xc002405d
c001407f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014083:	e8 04 fe ff ff       	call   c0013e8c <EnvVarContainer::loadFrom(char const*, char const*)>
c0014088:	83 c4 1c             	add    esp,0x1c
c001408b:	c3                   	ret    

c001408c <EnvVarContainer::__loadUser()>:
c001408c:	c3                   	ret    
c001408d:	90                   	nop

c001408e <EnvVarContainer::EnvVarContainer(Process*)>:
c001408e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014092:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001409c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00140a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140ae:	90                   	nop
c00140af:	c3                   	ret    

c00140b0 <EnvVarContainer::~EnvVarContainer()>:
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140ba:	85 c0                	test   eax,eax
c00140bc:	74 1d                	je     c00140db <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00140c4:	85 c0                	test   eax,eax
c00140c6:	74 13                	je     c00140db <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140cf:	83 ec 0c             	sub    esp,0xc
c00140d2:	50                   	push   eax
c00140d3:	e8 fb 58 ff ff       	call   c00099d3 <free>
c00140d8:	83 c4 10             	add    esp,0x10
c00140db:	90                   	nop
c00140dc:	83 c4 0c             	add    esp,0xc
c00140df:	c3                   	ret    

c00140e0 <Krnl::getEnv(Process*, char const*)>:
c00140e0:	53                   	push   ebx
c00140e1:	83 ec 08             	sub    esp,0x8
c00140e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140ec:	39 05 70 76 02 c0    	cmp    DWORD PTR ds:0xc0027670,eax
c00140f2:	74 04                	je     c00140f8 <Krnl::getEnv(Process*, char const*)+0x18>
c00140f4:	85 c0                	test   eax,eax
c00140f6:	75 0b                	jne    c0014103 <Krnl::getEnv(Process*, char const*)+0x23>
c00140f8:	a1 54 6c 02 c0       	mov    eax,ds:0xc0026c54
c00140fd:	85 c0                	test   eax,eax
c00140ff:	75 19                	jne    c001411a <Krnl::getEnv(Process*, char const*)+0x3a>
c0014101:	eb 27                	jmp    c001412a <Krnl::getEnv(Process*, char const*)+0x4a>
c0014103:	52                   	push   edx
c0014104:	52                   	push   edx
c0014105:	53                   	push   ebx
c0014106:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001410c:	e8 79 fc ff ff       	call   c0013d8a <EnvVarContainer::getEnv(char const*)>
c0014111:	83 c4 10             	add    esp,0x10
c0014114:	85 c0                	test   eax,eax
c0014116:	75 28                	jne    c0014140 <Krnl::getEnv(Process*, char const*)+0x60>
c0014118:	eb de                	jmp    c00140f8 <Krnl::getEnv(Process*, char const*)+0x18>
c001411a:	52                   	push   edx
c001411b:	52                   	push   edx
c001411c:	53                   	push   ebx
c001411d:	50                   	push   eax
c001411e:	e8 67 fc ff ff       	call   c0013d8a <EnvVarContainer::getEnv(char const*)>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	85 c0                	test   eax,eax
c0014128:	75 16                	jne    c0014140 <Krnl::getEnv(Process*, char const*)+0x60>
c001412a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001412e:	a1 58 6c 02 c0       	mov    eax,ds:0xc0026c58
c0014133:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014137:	83 c4 08             	add    esp,0x8
c001413a:	5b                   	pop    ebx
c001413b:	e9 4a fc ff ff       	jmp    c0013d8a <EnvVarContainer::getEnv(char const*)>
c0014140:	83 c4 08             	add    esp,0x8
c0014143:	5b                   	pop    ebx
c0014144:	c3                   	ret    

c0014145 <Krnl::setEnvSystem(char const*, char const*)>:
c0014145:	83 ec 10             	sub    esp,0x10
c0014148:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001414c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014150:	ff 35 58 6c 02 c0    	push   DWORD PTR ds:0xc0026c58
c0014156:	e8 6d fc ff ff       	call   c0013dc8 <EnvVarContainer::setEnv(char const*, char const*)>
c001415b:	83 c4 1c             	add    esp,0x1c
c001415e:	c3                   	ret    

c001415f <Krnl::setEnvUser(char const*, char const*)>:
c001415f:	a1 54 6c 02 c0       	mov    eax,ds:0xc0026c54
c0014164:	85 c0                	test   eax,eax
c0014166:	74 15                	je     c001417d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014168:	83 ec 10             	sub    esp,0x10
c001416b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001416f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014173:	50                   	push   eax
c0014174:	e8 4f fc ff ff       	call   c0013dc8 <EnvVarContainer::setEnv(char const*, char const*)>
c0014179:	83 c4 1c             	add    esp,0x1c
c001417c:	c3                   	ret    
c001417d:	c3                   	ret    

c001417e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001417e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014182:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014188:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001418c:	e9 37 fc ff ff       	jmp    c0013dc8 <EnvVarContainer::setEnv(char const*, char const*)>

c0014191 <Krnl::deleteEnvSystem(char const*)>:
c0014191:	c3                   	ret    

c0014192 <Krnl::deleteEnvUser(char const*)>:
c0014192:	c3                   	ret    

c0014193 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014193:	c3                   	ret    

c0014194 <Krnl::newProcessEnv(Process*)>:
c0014194:	83 ec 28             	sub    esp,0x28
c0014197:	6a 0c                	push   0xc
c0014199:	e8 25 58 ff ff       	call   c00099c3 <malloc>
c001419e:	5a                   	pop    edx
c001419f:	59                   	pop    ecx
c00141a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00141a4:	50                   	push   eax
c00141a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141a9:	e8 e0 fe ff ff       	call   c001408e <EnvVarContainer::EnvVarContainer(Process*)>
c00141ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141b2:	83 c4 2c             	add    esp,0x2c
c00141b5:	c3                   	ret    

c00141b6 <Krnl::copyProcessEnv(Process*, Process*)>:
c00141b6:	57                   	push   edi
c00141b7:	56                   	push   esi
c00141b8:	53                   	push   ebx
c00141b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141bd:	83 ec 0c             	sub    esp,0xc
c00141c0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00141c6:	6a 0c                	push   0xc
c00141c8:	e8 f6 57 ff ff       	call   c00099c3 <malloc>
c00141cd:	89 c3                	mov    ebx,eax
c00141cf:	58                   	pop    eax
c00141d0:	5a                   	pop    edx
c00141d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141d5:	53                   	push   ebx
c00141d6:	e8 b3 fe ff ff       	call   c001408e <EnvVarContainer::EnvVarContainer(Process*)>
c00141db:	8b 07                	mov    eax,DWORD PTR [edi]
c00141dd:	89 03                	mov    DWORD PTR [ebx],eax
c00141df:	c1 e0 03             	shl    eax,0x3
c00141e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00141e5:	e8 d9 57 ff ff       	call   c00099c3 <malloc>
c00141ea:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00141ed:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00141ef:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00141f2:	c1 e1 03             	shl    ecx,0x3
c00141f5:	89 c7                	mov    edi,eax
c00141f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141f9:	83 c4 10             	add    esp,0x10
c00141fc:	89 d8                	mov    eax,ebx
c00141fe:	5b                   	pop    ebx
c00141ff:	5e                   	pop    esi
c0014200:	5f                   	pop    edi
c0014201:	c3                   	ret    

c0014202 <Krnl::loadSystemEnv()>:
c0014202:	53                   	push   ebx
c0014203:	83 ec 14             	sub    esp,0x14
c0014206:	6a 0c                	push   0xc
c0014208:	e8 b6 57 ff ff       	call   c00099c3 <malloc>
c001420d:	89 c3                	mov    ebx,eax
c001420f:	58                   	pop    eax
c0014210:	5a                   	pop    edx
c0014211:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c0014217:	53                   	push   ebx
c0014218:	e8 71 fe ff ff       	call   c001408e <EnvVarContainer::EnvVarContainer(Process*)>
c001421d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014220:	89 1d 58 6c 02 c0    	mov    DWORD PTR ds:0xc0026c58,ebx
c0014226:	e8 47 fe ff ff       	call   c0014072 <EnvVarContainer::__loadSystem()>
c001422b:	83 c4 18             	add    esp,0x18
c001422e:	5b                   	pop    ebx
c001422f:	c3                   	ret    

c0014230 <Krnl::loadUserEnv()>:
c0014230:	53                   	push   ebx
c0014231:	83 ec 14             	sub    esp,0x14
c0014234:	6a 0c                	push   0xc
c0014236:	e8 88 57 ff ff       	call   c00099c3 <malloc>
c001423b:	89 c3                	mov    ebx,eax
c001423d:	58                   	pop    eax
c001423e:	5a                   	pop    edx
c001423f:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c0014245:	53                   	push   ebx
c0014246:	e8 43 fe ff ff       	call   c001408e <EnvVarContainer::EnvVarContainer(Process*)>
c001424b:	89 1d 54 6c 02 c0    	mov    DWORD PTR ds:0xc0026c54,ebx
c0014251:	83 c4 18             	add    esp,0x18
c0014254:	5b                   	pop    ebx
c0014255:	c3                   	ret    

c0014256 <Krnl::flushEnv()>:
c0014256:	c3                   	ret    

c0014257 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014257:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001425b:	8b 15 54 6c 02 c0    	mov    edx,DWORD PTR ds:0xc0026c54
c0014261:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014267:	a1 58 6c 02 c0       	mov    eax,ds:0xc0026c58
c001426c:	8b 00                	mov    eax,DWORD PTR [eax]
c001426e:	03 01                	add    eax,DWORD PTR [ecx]
c0014270:	85 d2                	test   edx,edx
c0014272:	74 02                	je     c0014276 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014274:	03 02                	add    eax,DWORD PTR [edx]
c0014276:	c3                   	ret    

c0014277 <Krnl::getProcessEnvPair(Process*, int)>:
c0014277:	57                   	push   edi
c0014278:	56                   	push   esi
c0014279:	8b 35 54 6c 02 c0    	mov    esi,DWORD PTR ds:0xc0026c54
c001427f:	53                   	push   ebx
c0014280:	85 f6                	test   esi,esi
c0014282:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014286:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001428a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014290:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014294:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014296:	75 16                	jne    c00142ae <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014298:	39 c2                	cmp    edx,eax
c001429a:	7c 16                	jl     c00142b2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001429c:	8b 0d 58 6c 02 c0    	mov    ecx,DWORD PTR ds:0xc0026c58
c00142a2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00142a4:	01 c6                	add    esi,eax
c00142a6:	39 d6                	cmp    esi,edx
c00142a8:	7e 3c                	jle    c00142e6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142aa:	29 c2                	sub    edx,eax
c00142ac:	eb 04                	jmp    c00142b2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142ae:	39 c2                	cmp    edx,eax
c00142b0:	7d 05                	jge    c00142b7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00142b2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00142b5:	eb 20                	jmp    c00142d7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00142b7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00142b9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00142bc:	39 d1                	cmp    ecx,edx
c00142be:	7e 04                	jle    c00142c4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00142c0:	29 c2                	sub    edx,eax
c00142c2:	eb 10                	jmp    c00142d4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00142c4:	8b 35 58 6c 02 c0    	mov    esi,DWORD PTR ds:0xc0026c58
c00142ca:	03 0e                	add    ecx,DWORD PTR [esi]
c00142cc:	39 d1                	cmp    ecx,edx
c00142ce:	7e 16                	jle    c00142e6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142d0:	29 c2                	sub    edx,eax
c00142d2:	29 fa                	sub    edx,edi
c00142d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142d7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00142da:	8b 02                	mov    eax,DWORD PTR [edx]
c00142dc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00142df:	89 03                	mov    DWORD PTR [ebx],eax
c00142e1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00142e4:	eb 1d                	jmp    c0014303 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00142e6:	83 ec 0c             	sub    esp,0xc
c00142e9:	68 7f 40 02 c0       	push   0xc002407f
c00142ee:	e8 18 00 00 00       	call   c001430b <Krnl::panic(char const*)>
c00142f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00142f9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014300:	83 c4 10             	add    esp,0x10
c0014303:	89 d8                	mov    eax,ebx
c0014305:	5b                   	pop    ebx
c0014306:	5e                   	pop    esi
c0014307:	5f                   	pop    edi
c0014308:	c2 04 00             	ret    0x4

c001430b <Krnl::panic(char const*)>:
c001430b:	55                   	push   ebp
c001430c:	89 e5                	mov    ebp,esp
c001430e:	53                   	push   ebx
c001430f:	83 ec 10             	sub    esp,0x10
c0014312:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014315:	fa                   	cli    
c0014316:	c6 05 64 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026c64,0x1
c001431d:	53                   	push   ebx
c001431e:	e8 fa 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0014323:	58                   	pop    eax
c0014324:	c6 05 60 55 02 c0 00 	mov    BYTE PTR ds:0xc0025560,0x0
c001432b:	5a                   	pop    edx
c001432c:	53                   	push   ebx
c001432d:	68 99 40 02 c0       	push   0xc0024099
c0014332:	e8 34 87 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0014337:	59                   	pop    ecx
c0014338:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001433d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014343:	e8 2b 65 ff ff       	call   c000a873 <setActiveTerminal(VgaText*)>
c0014348:	83 c4 0c             	add    esp,0xc
c001434b:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014350:	6a 01                	push   0x1
c0014352:	6a 0f                	push   0xf
c0014354:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001435a:	e8 73 63 ff ff       	call   c000a6d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001435f:	58                   	pop    eax
c0014360:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014365:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001436b:	e8 84 68 ff ff       	call   c000abf4 <VgaText::clearScreen()>
c0014370:	58                   	pop    eax
c0014371:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014376:	5a                   	pop    edx
c0014377:	68 b2 40 02 c0       	push   0xc00240b2
c001437c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014382:	e8 f9 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014387:	59                   	pop    ecx
c0014388:	58                   	pop    eax
c0014389:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001438e:	68 58 41 02 c0       	push   0xc0024158
c0014393:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014399:	e8 e2 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c001439e:	58                   	pop    eax
c001439f:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00143a4:	5a                   	pop    edx
c00143a5:	68 ce 40 02 c0       	push   0xc00240ce
c00143aa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143b0:	e8 cb 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c00143b5:	59                   	pop    ecx
c00143b6:	58                   	pop    eax
c00143b7:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00143bc:	53                   	push   ebx
c00143bd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143c3:	e8 b8 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c00143c8:	58                   	pop    eax
c00143c9:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00143ce:	5a                   	pop    edx
c00143cf:	68 ee 40 02 c0       	push   0xc00240ee
c00143d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143da:	e8 a1 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c00143df:	a1 60 6c 02 c0       	mov    eax,ds:0xc0026c60
c00143e4:	83 c4 10             	add    esp,0x10
c00143e7:	85 c0                	test   eax,eax
c00143e9:	74 02                	je     c00143ed <Krnl::panic(char const*)+0xe2>
c00143eb:	ff d0                	call   eax
c00143ed:	83 ec 0c             	sub    esp,0xc
c00143f0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00143f3:	e8 ad 30 00 00       	call   c00174a5 <Thr::getDriverNameFromAddress(unsigned long)>
c00143f8:	83 c4 10             	add    esp,0x10
c00143fb:	89 c3                	mov    ebx,eax
c00143fd:	85 c0                	test   eax,eax
c00143ff:	0f 84 4e 02 00 00    	je     c0014653 <Krnl::panic(char const*)+0x348>
c0014405:	83 ec 08             	sub    esp,0x8
c0014408:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001440d:	68 94 41 02 c0       	push   0xc0024194
c0014412:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014418:	e8 63 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c001441d:	58                   	pop    eax
c001441e:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014423:	5a                   	pop    edx
c0014424:	68 ce 40 02 c0       	push   0xc00240ce
c0014429:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001442f:	e8 4c 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014434:	59                   	pop    ecx
c0014435:	58                   	pop    eax
c0014436:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001443b:	53                   	push   ebx
c001443c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014442:	e8 39 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014447:	83 c4 10             	add    esp,0x10
c001444a:	83 ec 08             	sub    esp,0x8
c001444d:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014452:	68 ed 40 02 c0       	push   0xc00240ed
c0014457:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001445d:	e8 1e 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014462:	58                   	pop    eax
c0014463:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014468:	5a                   	pop    edx
c0014469:	68 ec 41 02 c0       	push   0xc00241ec
c001446e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014474:	e8 07 69 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014479:	59                   	pop    ecx
c001447a:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001447f:	5b                   	pop    ebx
c0014480:	68 2c 42 02 c0       	push   0xc002422c
c0014485:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001448b:	e8 f0 68 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014490:	58                   	pop    eax
c0014491:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014496:	5a                   	pop    edx
c0014497:	68 d9 40 02 c0       	push   0xc00240d9
c001449c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144a2:	e8 d9 68 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c00144a7:	59                   	pop    ecx
c00144a8:	5b                   	pop    ebx
c00144a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00144ac:	68 f1 40 02 c0       	push   0xc00240f1
c00144b1:	e8 b5 85 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00144b6:	58                   	pop    eax
c00144b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144ba:	5a                   	pop    edx
c00144bb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144be:	68 fa 40 02 c0       	push   0xc00240fa
c00144c3:	e8 a3 85 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00144c8:	59                   	pop    ecx
c00144c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144cc:	5b                   	pop    ebx
c00144cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00144cf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144d2:	68 03 41 02 c0       	push   0xc0024103
c00144d7:	e8 8f 85 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00144dc:	58                   	pop    eax
c00144dd:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00144e2:	5a                   	pop    edx
c00144e3:	68 70 42 02 c0       	push   0xc0024270
c00144e8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144ee:	e8 8d 68 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c00144f3:	59                   	pop    ecx
c00144f4:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00144f9:	5b                   	pop    ebx
c00144fa:	68 0c 41 02 c0       	push   0xc002410c
c00144ff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014505:	e8 76 68 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c001450a:	0f 20 c0             	mov    eax,cr0
c001450d:	5a                   	pop    edx
c001450e:	59                   	pop    ecx
c001450f:	50                   	push   eax
c0014510:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014515:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001451b:	e8 1a 68 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c0014520:	5b                   	pop    ebx
c0014521:	58                   	pop    eax
c0014522:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014527:	68 16 41 02 c0       	push   0xc0024116
c001452c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014532:	e8 49 68 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014537:	0f 20 d0             	mov    eax,cr2
c001453a:	5a                   	pop    edx
c001453b:	59                   	pop    ecx
c001453c:	50                   	push   eax
c001453d:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014542:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014548:	e8 ed 67 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c001454d:	5b                   	pop    ebx
c001454e:	58                   	pop    eax
c001454f:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014554:	68 20 41 02 c0       	push   0xc0024120
c0014559:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001455f:	e8 1c 68 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014564:	0f 20 d8             	mov    eax,cr3
c0014567:	5a                   	pop    edx
c0014568:	59                   	pop    ecx
c0014569:	50                   	push   eax
c001456a:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001456f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014575:	e8 c0 67 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c001457a:	5b                   	pop    ebx
c001457b:	58                   	pop    eax
c001457c:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014581:	68 33 41 02 c0       	push   0xc0024133
c0014586:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001458c:	e8 ef 67 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014591:	0f 20 e0             	mov    eax,cr4
c0014594:	5a                   	pop    edx
c0014595:	59                   	pop    ecx
c0014596:	50                   	push   eax
c0014597:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001459c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145a2:	e8 93 67 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c00145a7:	5b                   	pop    ebx
c00145a8:	58                   	pop    eax
c00145a9:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00145ae:	68 3d 41 02 c0       	push   0xc002413d
c00145b3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145b9:	e8 c2 67 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c00145be:	5a                   	pop    edx
c00145bf:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00145c4:	59                   	pop    ecx
c00145c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145cb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00145ce:	50                   	push   eax
c00145cf:	e8 66 67 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c00145d4:	5b                   	pop    ebx
c00145d5:	58                   	pop    eax
c00145d6:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00145db:	68 54 41 02 c0       	push   0xc0024154
c00145e0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145e6:	e8 95 67 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c00145eb:	5a                   	pop    edx
c00145ec:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c00145f1:	59                   	pop    ecx
c00145f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145f8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00145fb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00145fe:	50                   	push   eax
c00145ff:	e8 36 67 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c0014604:	5b                   	pop    ebx
c0014605:	58                   	pop    eax
c0014606:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001460b:	68 54 41 02 c0       	push   0xc0024154
c0014610:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014616:	e8 65 67 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c001461b:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014620:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014623:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014629:	8b 12                	mov    edx,DWORD PTR [edx]
c001462b:	59                   	pop    ecx
c001462c:	5b                   	pop    ebx
c001462d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014630:	50                   	push   eax
c0014631:	e8 04 67 ff ff       	call   c000ad3a <VgaText::putx(unsigned int)>
c0014636:	83 c4 10             	add    esp,0x10
c0014639:	b2 fe                	mov    dl,0xfe
c001463b:	e4 60                	in     al,0x60
c001463d:	3c 1c                	cmp    al,0x1c
c001463f:	74 04                	je     c0014645 <Krnl::panic(char const*)+0x33a>
c0014641:	3c 5a                	cmp    al,0x5a
c0014643:	75 f6                	jne    c001463b <Krnl::panic(char const*)+0x330>
c0014645:	e4 64                	in     al,0x64
c0014647:	a8 02                	test   al,0x2
c0014649:	75 fa                	jne    c0014645 <Krnl::panic(char const*)+0x33a>
c001464b:	88 d0                	mov    al,dl
c001464d:	e6 64                	out    0x64,al
c001464f:	fa                   	cli    
c0014650:	f4                   	hlt    
c0014651:	eb e8                	jmp    c001463b <Krnl::panic(char const*)+0x330>
c0014653:	50                   	push   eax
c0014654:	50                   	push   eax
c0014655:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001465a:	68 c0 41 02 c0       	push   0xc00241c0
c001465f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014665:	e8 16 67 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c001466a:	58                   	pop    eax
c001466b:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014670:	5a                   	pop    edx
c0014671:	68 ce 40 02 c0       	push   0xc00240ce
c0014676:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001467c:	e8 ff 66 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c0014681:	59                   	pop    ecx
c0014682:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014687:	5b                   	pop    ebx
c0014688:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001468b:	83 c0 0c             	add    eax,0xc
c001468e:	50                   	push   eax
c001468f:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0014694:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001469a:	e8 e1 66 ff ff       	call   c000ad80 <VgaText::puts(char const*)>
c001469f:	83 c4 10             	add    esp,0x10
c00146a2:	e9 a3 fd ff ff       	jmp    c001444a <Krnl::panic(char const*)+0x13f>
c00146a7:	90                   	nop

c00146a8 <Net::switchEndian16(unsigned short)>:
c00146a8:	83 ec 04             	sub    esp,0x4
c00146ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146af:	66 89 04 24          	mov    WORD PTR [esp],ax
c00146b3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146b7:	c1 f8 08             	sar    eax,0x8
c00146ba:	89 c2                	mov    edx,eax
c00146bc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146c0:	c1 e0 08             	shl    eax,0x8
c00146c3:	09 d0                	or     eax,edx
c00146c5:	83 c4 04             	add    esp,0x4
c00146c8:	c3                   	ret    
c00146c9:	8d 76 00             	lea    esi,[esi+0x0]

c00146cc <Net::switchEndian32(unsigned int)>:
c00146cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146d0:	c1 e8 18             	shr    eax,0x18
c00146d3:	89 c2                	mov    edx,eax
c00146d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146d9:	c1 e0 08             	shl    eax,0x8
c00146dc:	25 00 00 ff 00       	and    eax,0xff0000
c00146e1:	09 c2                	or     edx,eax
c00146e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146e7:	c1 e8 08             	shr    eax,0x8
c00146ea:	25 00 ff 00 00       	and    eax,0xff00
c00146ef:	09 c2                	or     edx,eax
c00146f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146f5:	c1 e0 18             	shl    eax,0x18
c00146f8:	09 d0                	or     eax,edx
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop

c00146fc <Net::crc32Calc(unsigned char*, int)>:
c00146fc:	83 ec 10             	sub    esp,0x10
c00146ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014704:	75 0a                	jne    c0014710 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014706:	b8 00 00 00 00       	mov    eax,0x0
c001470b:	e9 8c 00 00 00       	jmp    c001479c <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014710:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014715:	7f 09                	jg     c0014720 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014717:	b8 00 00 00 00       	mov    eax,0x0
c001471c:	eb 7e                	jmp    c001479c <Net::crc32Calc(unsigned char*, int)+0xa0>
c001471e:	66 90                	xchg   ax,ax
c0014720:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014728:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014734:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014738:	7d 5a                	jge    c0014794 <Net::crc32Calc(unsigned char*, int)+0x98>
c001473a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001473e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014742:	01 d0                	add    eax,edx
c0014744:	8a 00                	mov    al,BYTE PTR [eax]
c0014746:	0f b6 c0             	movzx  eax,al
c0014749:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001474d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014755:	8d 76 00             	lea    esi,[esi+0x0]
c0014758:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001475d:	7f 2d                	jg     c001478c <Net::crc32Calc(unsigned char*, int)+0x90>
c001475f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014763:	83 e0 01             	and    eax,0x1
c0014766:	74 10                	je     c0014778 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001476c:	d1 e8                	shr    eax,1
c001476e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014773:	eb 0b                	jmp    c0014780 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014775:	8d 76 00             	lea    esi,[esi+0x0]
c0014778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001477c:	d1 e8                	shr    eax,1
c001477e:	66 90                	xchg   ax,ax
c0014780:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014784:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014788:	eb ce                	jmp    c0014758 <Net::crc32Calc(unsigned char*, int)+0x5c>
c001478a:	66 90                	xchg   ax,ax
c001478c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014790:	eb 9e                	jmp    c0014730 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014792:	66 90                	xchg   ax,ax
c0014794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014798:	f7 d0                	not    eax
c001479a:	66 90                	xchg   ax,ax
c001479c:	83 c4 10             	add    esp,0x10
c001479f:	c3                   	ret    

c00147a0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00147a0:	57                   	push   edi
c00147a1:	56                   	push   esi
c00147a2:	53                   	push   ebx
c00147a3:	83 ec 60             	sub    esp,0x60
c00147a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147ad:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00147b1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00147b9:	8d 76 00             	lea    esi,[esi+0x0]
c00147bc:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00147c1:	7f 1d                	jg     c00147e0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00147c3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147ca:	8d 50 01             	lea    edx,[eax+0x1]
c00147cd:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147d4:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00147d7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00147db:	eb df                	jmp    c00147bc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00147dd:	8d 76 00             	lea    esi,[esi+0x0]
c00147e0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147e7:	8d 50 01             	lea    edx,[eax+0x1]
c00147ea:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147f1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c00147f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147ff:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014803:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014807:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001480f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014813:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014817:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001481b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001481f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014823:	89 c6                	mov    esi,eax
c0014825:	89 d7                	mov    edi,edx
c0014827:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014829:	89 c8                	mov    eax,ecx
c001482b:	89 fa                	mov    edx,edi
c001482d:	89 f3                	mov    ebx,esi
c001482f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014833:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014837:	89 04 24             	mov    DWORD PTR [esp],eax
c001483a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014842:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014849:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001484d:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014851:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014855:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001485d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014861:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014869:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001486d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014871:	89 c6                	mov    esi,eax
c0014873:	89 d7                	mov    edi,edx
c0014875:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014877:	89 c8                	mov    eax,ecx
c0014879:	89 fa                	mov    edx,edi
c001487b:	89 f3                	mov    ebx,esi
c001487d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014881:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014885:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014889:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014891:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014898:	0f b7 c0             	movzx  eax,ax
c001489b:	c1 f8 08             	sar    eax,0x8
c001489e:	89 c1                	mov    ecx,eax
c00148a0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148a7:	8d 50 01             	lea    edx,[eax+0x1]
c00148aa:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148b1:	88 ca                	mov    dl,cl
c00148b3:	88 10                	mov    BYTE PTR [eax],dl
c00148b5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00148bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148c3:	8d 48 01             	lea    ecx,[eax+0x1]
c00148c6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00148cd:	88 10                	mov    BYTE PTR [eax],dl
c00148cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148d3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00148d7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00148de:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c00148e2:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00148e6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00148ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00148ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00148f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00148f6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00148fa:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00148fe:	89 c6                	mov    esi,eax
c0014900:	89 d7                	mov    edi,edx
c0014902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014904:	89 c8                	mov    eax,ecx
c0014906:	89 fa                	mov    edx,edi
c0014908:	89 f3                	mov    ebx,esi
c001490a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001490e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014912:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014916:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001491a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014921:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014928:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001492c:	50                   	push   eax
c001492d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014931:	e8 c6 fd ff ff       	call   c00146fc <Net::crc32Calc(unsigned char*, int)>
c0014936:	83 c4 08             	add    esp,0x8
c0014939:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001493d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014941:	c1 e8 18             	shr    eax,0x18
c0014944:	89 c1                	mov    ecx,eax
c0014946:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001494d:	8d 50 01             	lea    edx,[eax+0x1]
c0014950:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014957:	88 ca                	mov    dl,cl
c0014959:	88 10                	mov    BYTE PTR [eax],dl
c001495b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001495f:	c1 e8 10             	shr    eax,0x10
c0014962:	89 c1                	mov    ecx,eax
c0014964:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001496b:	8d 50 01             	lea    edx,[eax+0x1]
c001496e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014975:	88 ca                	mov    dl,cl
c0014977:	88 10                	mov    BYTE PTR [eax],dl
c0014979:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001497d:	c1 e8 08             	shr    eax,0x8
c0014980:	89 c1                	mov    ecx,eax
c0014982:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014989:	8d 50 01             	lea    edx,[eax+0x1]
c001498c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014993:	88 ca                	mov    dl,cl
c0014995:	88 10                	mov    BYTE PTR [eax],dl
c0014997:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001499e:	8d 50 01             	lea    edx,[eax+0x1]
c00149a1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149a8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00149ac:	88 10                	mov    BYTE PTR [eax],dl
c00149ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00149b2:	83 c4 60             	add    esp,0x60
c00149b5:	5b                   	pop    ebx
c00149b6:	5e                   	pop    esi
c00149b7:	5f                   	pop    edi
c00149b8:	c3                   	ret    
c00149b9:	8d 76 00             	lea    esi,[esi+0x0]

c00149bc <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00149bc:	57                   	push   edi
c00149bd:	56                   	push   esi
c00149be:	53                   	push   ebx
c00149bf:	83 ec 70             	sub    esp,0x70
c00149c2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149c9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00149cd:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00149d5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00149dc:	83 c0 0e             	add    eax,0xe
c00149df:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00149e3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00149ee:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00149f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00149fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a02:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014a0a:	89 c6                	mov    esi,eax
c0014a0c:	89 d7                	mov    edi,edx
c0014a0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a10:	89 c8                	mov    eax,ecx
c0014a12:	89 fa                	mov    edx,edi
c0014a14:	89 f3                	mov    ebx,esi
c0014a16:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014a1a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014a1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a22:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a2a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a31:	83 c0 08             	add    eax,0x8
c0014a34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014a38:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a3f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014a43:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014a4b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014a4f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014a53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a57:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a5b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014a5f:	89 c6                	mov    esi,eax
c0014a61:	89 d7                	mov    edi,edx
c0014a63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a65:	89 c8                	mov    eax,ecx
c0014a67:	89 fa                	mov    edx,edi
c0014a69:	89 f3                	mov    ebx,esi
c0014a6b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014a6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014a73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014a77:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a7f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a86:	8d 50 01             	lea    edx,[eax+0x1]
c0014a89:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014a90:	8a 00                	mov    al,BYTE PTR [eax]
c0014a92:	0f b6 c0             	movzx  eax,al
c0014a95:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014a9a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014aa1:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014aab:	8a 00                	mov    al,BYTE PTR [eax]
c0014aad:	0f b6 c0             	movzx  eax,al
c0014ab0:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014ab5:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014aba:	c1 e0 08             	shl    eax,0x8
c0014abd:	89 c2                	mov    edx,eax
c0014abf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014ac3:	09 d0                	or     eax,edx
c0014ac5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014acc:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014ad0:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014ad8:	75 46                	jne    c0014b20 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014ada:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ae1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ae4:	66 3d dc 05          	cmp    ax,0x5dc
c0014ae8:	77 16                	ja     c0014b00 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014aea:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014af1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014af4:	0f b7 c0             	movzx  eax,ax
c0014af7:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014afe:	eb 20                	jmp    c0014b20 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b00:	83 ec 0c             	sub    esp,0xc
c0014b03:	68 98 42 02 c0       	push   0xc0024298
c0014b08:	e8 5e 7f ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0014b0d:	83 c4 10             	add    esp,0x10
c0014b10:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b17:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014b1b:	e9 18 01 00 00       	jmp    c0014c38 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b20:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b27:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b2e:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b30:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b34:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014b3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b57:	89 c6                	mov    esi,eax
c0014b59:	89 d7                	mov    edi,edx
c0014b5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b5d:	89 c8                	mov    eax,ecx
c0014b5f:	89 fa                	mov    edx,edi
c0014b61:	89 f3                	mov    ebx,esi
c0014b63:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014b67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b6e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b75:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014b7c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b83:	8d 50 01             	lea    edx,[eax+0x1]
c0014b86:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b8d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8f:	0f b6 c0             	movzx  eax,al
c0014b92:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014b96:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b9d:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ba7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba9:	0f b6 c0             	movzx  eax,al
c0014bac:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014bb0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0014bba:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bc1:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc3:	0f b6 c0             	movzx  eax,al
c0014bc6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014bca:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bd1:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bdb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdd:	0f b6 c0             	movzx  eax,al
c0014be0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014be4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014be8:	c1 e0 18             	shl    eax,0x18
c0014beb:	89 c2                	mov    edx,eax
c0014bed:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014bf1:	c1 e0 10             	shl    eax,0x10
c0014bf4:	09 c2                	or     edx,eax
c0014bf6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014bfa:	c1 e0 08             	shl    eax,0x8
c0014bfd:	09 d0                	or     eax,edx
c0014bff:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014c03:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014c07:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c0e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014c12:	83 e8 04             	sub    eax,0x4
c0014c15:	83 ec 08             	sub    esp,0x8
c0014c18:	50                   	push   eax
c0014c19:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c1d:	e8 da fa ff ff       	call   c00146fc <Net::crc32Calc(unsigned char*, int)>
c0014c22:	83 c4 10             	add    esp,0x10
c0014c25:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014c29:	0f 94 c2             	sete   dl
c0014c2c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c33:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014c36:	90                   	nop
c0014c37:	90                   	nop
c0014c38:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c3f:	83 c4 70             	add    esp,0x70
c0014c42:	5b                   	pop    ebx
c0014c43:	5e                   	pop    esi
c0014c44:	5f                   	pop    edi
c0014c45:	c2 04 00             	ret    0x4

c0014c48 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c48:	55                   	push   ebp
c0014c49:	57                   	push   edi
c0014c4a:	56                   	push   esi
c0014c4b:	53                   	push   ebx
c0014c4c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c52:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c59:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c5b:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c5e:	80 fb 40             	cmp    bl,0x40
c0014c61:	75 1b                	jne    c0014c7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c63:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c65:	84 d2                	test   dl,dl
c0014c67:	0f 84 f1 00 00 00    	je     c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c6d:	8d 46 01             	lea    eax,[esi+0x1]
c0014c70:	80 fa 3a             	cmp    dl,0x3a
c0014c73:	74 04                	je     c0014c79 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014c75:	89 c6                	mov    esi,eax
c0014c77:	eb ea                	jmp    c0014c63 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014c79:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014c7c:	89 c6                	mov    esi,eax
c0014c7e:	50                   	push   eax
c0014c7f:	6a 40                	push   0x40
c0014c81:	6a 00                	push   0x0
c0014c83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014c87:	50                   	push   eax
c0014c88:	e8 f7 b9 fe ff       	call   c0000684 <memset>
c0014c8d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014c94:	31 c0                	xor    eax,eax
c0014c96:	83 c4 10             	add    esp,0x10
c0014c99:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014c9b:	84 c9                	test   cl,cl
c0014c9d:	0f 84 bb 00 00 00    	je     c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ca3:	3d c7 00 00 00       	cmp    eax,0xc7
c0014ca8:	0f 8f b0 00 00 00    	jg     c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cae:	80 f9 0a             	cmp    cl,0xa
c0014cb1:	0f 85 98 00 00 00    	jne    c0014d4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014cb7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014cbc:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014cc0:	a8 df                	test   al,0xdf
c0014cc2:	0f 94 c1             	sete   cl
c0014cc5:	3c 23                	cmp    al,0x23
c0014cc7:	0f 94 c2             	sete   dl
c0014cca:	08 d1                	or     cl,dl
c0014ccc:	75 4a                	jne    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cce:	8d 50 f7             	lea    edx,[eax-0x9]
c0014cd1:	80 fa 01             	cmp    dl,0x1
c0014cd4:	76 42                	jbe    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cd6:	3c 5b                	cmp    al,0x5b
c0014cd8:	75 42                	jne    c0014d1c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014cda:	80 fb 40             	cmp    bl,0x40
c0014cdd:	75 39                	jne    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cdf:	83 ec 0c             	sub    esp,0xc
c0014ce2:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014ce6:	52                   	push   edx
c0014ce7:	e8 b4 b9 fe ff       	call   c00006a0 <strlen>
c0014cec:	83 c4 10             	add    esp,0x10
c0014cef:	83 f8 3f             	cmp    eax,0x3f
c0014cf2:	77 6a                	ja     c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cf4:	50                   	push   eax
c0014cf5:	50                   	push   eax
c0014cf6:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014cfa:	52                   	push   edx
c0014cfb:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014cff:	52                   	push   edx
c0014d00:	e8 3b ba fe ff       	call   c0000740 <strcpy>
c0014d05:	58                   	pop    eax
c0014d06:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d0a:	52                   	push   edx
c0014d0b:	e8 90 b9 fe ff       	call   c00006a0 <strlen>
c0014d10:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d15:	83 c4 10             	add    esp,0x10
c0014d18:	31 d2                	xor    edx,edx
c0014d1a:	eb 3a                	jmp    c0014d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d1c:	80 fb 40             	cmp    bl,0x40
c0014d1f:	74 06                	je     c0014d27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d21:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d25:	eb 20                	jmp    c0014d47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d27:	50                   	push   eax
c0014d28:	50                   	push   eax
c0014d29:	55                   	push   ebp
c0014d2a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d2e:	50                   	push   eax
c0014d2f:	e8 98 ba fe ff       	call   c00007cc <strcmp>
c0014d34:	83 c4 10             	add    esp,0x10
c0014d37:	85 c0                	test   eax,eax
c0014d39:	75 dd                	jne    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d3b:	eb e4                	jmp    c0014d21 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d3d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d40:	80 f9 3d             	cmp    cl,0x3d
c0014d43:	74 1d                	je     c0014d62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d45:	89 d0                	mov    eax,edx
c0014d47:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d49:	84 c9                	test   cl,cl
c0014d4b:	75 f0                	jne    c0014d3d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d4d:	eb 0f                	jmp    c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d4f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d52:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d56:	47                   	inc    edi
c0014d57:	89 d0                	mov    eax,edx
c0014d59:	e9 3b ff ff ff       	jmp    c0014c99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d5e:	31 c0                	xor    eax,eax
c0014d60:	eb 33                	jmp    c0014d95 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d69:	50                   	push   eax
c0014d6a:	50                   	push   eax
c0014d6b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d6f:	50                   	push   eax
c0014d70:	56                   	push   esi
c0014d71:	e8 56 ba fe ff       	call   c00007cc <strcmp>
c0014d76:	83 c4 10             	add    esp,0x10
c0014d79:	85 c0                	test   eax,eax
c0014d7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d7f:	75 97                	jne    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d81:	51                   	push   ecx
c0014d82:	51                   	push   ecx
c0014d83:	52                   	push   edx
c0014d84:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014d8b:	e8 b0 b9 fe ff       	call   c0000740 <strcpy>
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	b0 01                	mov    al,0x1
c0014d95:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014d9b:	5b                   	pop    ebx
c0014d9c:	5e                   	pop    esi
c0014d9d:	5f                   	pop    edi
c0014d9e:	5d                   	pop    ebp
c0014d9f:	c3                   	ret    

c0014da0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014da0:	57                   	push   edi
c0014da1:	56                   	push   esi
c0014da2:	53                   	push   ebx
c0014da3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014da9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014db0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014db7:	53                   	push   ebx
c0014db8:	e8 e3 b8 fe ff       	call   c00006a0 <strlen>
c0014dbd:	89 34 24             	mov    DWORD PTR [esp],esi
c0014dc0:	89 c7                	mov    edi,eax
c0014dc2:	e8 d9 b8 fe ff       	call   c00006a0 <strlen>
c0014dc7:	83 c4 10             	add    esp,0x10
c0014dca:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014dce:	3d ff 00 00 00       	cmp    eax,0xff
c0014dd3:	0f 87 d3 00 00 00    	ja     c0014eac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014dd9:	57                   	push   edi
c0014dda:	57                   	push   edi
c0014ddb:	56                   	push   esi
c0014ddc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014de0:	56                   	push   esi
c0014de1:	e8 5a b9 fe ff       	call   c0000740 <strcpy>
c0014de6:	58                   	pop    eax
c0014de7:	5a                   	pop    edx
c0014de8:	68 3a 46 02 c0       	push   0xc002463a
c0014ded:	56                   	push   esi
c0014dee:	e8 8d ba fe ff       	call   c0000880 <strcat>
c0014df3:	59                   	pop    ecx
c0014df4:	5f                   	pop    edi
c0014df5:	53                   	push   ebx
c0014df6:	56                   	push   esi
c0014df7:	e8 84 ba fe ff       	call   c0000880 <strcat>
c0014dfc:	58                   	pop    eax
c0014dfd:	5a                   	pop    edx
c0014dfe:	68 e4 42 02 c0       	push   0xc00242e4
c0014e03:	56                   	push   esi
c0014e04:	e8 77 ba fe ff       	call   c0000880 <strcat>
c0014e09:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e10:	e8 ae 4b ff ff       	call   c00099c3 <malloc>
c0014e15:	83 c4 0c             	add    esp,0xc
c0014e18:	89 c3                	mov    ebx,eax
c0014e1a:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c0014e20:	56                   	push   esi
c0014e21:	50                   	push   eax
c0014e22:	e8 af 81 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	85 db                	test   ebx,ebx
c0014e2c:	74 7e                	je     c0014eac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e2e:	51                   	push   ecx
c0014e2f:	51                   	push   ecx
c0014e30:	6a 01                	push   0x1
c0014e32:	53                   	push   ebx
c0014e33:	e8 02 82 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0014e38:	83 c4 10             	add    esp,0x10
c0014e3b:	85 c0                	test   eax,eax
c0014e3d:	74 08                	je     c0014e47 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014e3f:	83 ec 0c             	sub    esp,0xc
c0014e42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e44:	53                   	push   ebx
c0014e45:	eb 5f                	jmp    c0014ea6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014e47:	52                   	push   edx
c0014e48:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014e4c:	50                   	push   eax
c0014e4d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014e51:	50                   	push   eax
c0014e52:	53                   	push   ebx
c0014e53:	e8 8e 84 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c0014e58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	89 c1                	mov    ecx,eax
c0014e61:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014e65:	74 31                	je     c0014e98 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e67:	83 ec 0c             	sub    esp,0xc
c0014e6a:	50                   	push   eax
c0014e6b:	e8 53 4b ff ff       	call   c00099c3 <malloc>
c0014e70:	89 c6                	mov    esi,eax
c0014e72:	58                   	pop    eax
c0014e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e75:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014e79:	52                   	push   edx
c0014e7a:	56                   	push   esi
c0014e7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e7f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e83:	53                   	push   ebx
c0014e84:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e87:	83 c4 20             	add    esp,0x20
c0014e8a:	85 c0                	test   eax,eax
c0014e8c:	75 0a                	jne    c0014e98 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e92:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014e96:	74 18                	je     c0014eb0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014e98:	83 ec 0c             	sub    esp,0xc
c0014e9b:	53                   	push   ebx
c0014e9c:	e8 f7 81 ff ff       	call   c000d098 <File::close()>
c0014ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ea3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ea6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ea9:	83 c4 10             	add    esp,0x10
c0014eac:	31 c0                	xor    eax,eax
c0014eae:	eb 3b                	jmp    c0014eeb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014eb0:	83 ec 0c             	sub    esp,0xc
c0014eb3:	53                   	push   ebx
c0014eb4:	e8 df 81 ff ff       	call   c000d098 <File::close()>
c0014eb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ebb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ebe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ec1:	83 c4 0c             	add    esp,0xc
c0014ec4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ecb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ed2:	56                   	push   esi
c0014ed3:	e8 70 fd ff ff       	call   c0014c48 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014ed8:	89 34 24             	mov    DWORD PTR [esp],esi
c0014edb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014edf:	e8 ef 4a ff ff       	call   c00099d3 <free>
c0014ee4:	83 c4 10             	add    esp,0x10
c0014ee7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014eeb:	81 c4 20 01 00 00    	add    esp,0x120
c0014ef1:	5b                   	pop    ebx
c0014ef2:	5e                   	pop    esi
c0014ef3:	5f                   	pop    edi
c0014ef4:	c3                   	ret    

c0014ef5 <Reg::getLine(char*, char*, char*)>:
c0014ef5:	57                   	push   edi
c0014ef6:	56                   	push   esi
c0014ef7:	53                   	push   ebx
c0014ef8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014efc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f00:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f04:	57                   	push   edi
c0014f05:	56                   	push   esi
c0014f06:	53                   	push   ebx
c0014f07:	68 e9 42 02 c0       	push   0xc00242e9
c0014f0c:	e8 8f fe ff ff       	call   c0014da0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f11:	83 c4 10             	add    esp,0x10
c0014f14:	84 c0                	test   al,al
c0014f16:	75 10                	jne    c0014f28 <Reg::getLine(char*, char*, char*)+0x33>
c0014f18:	57                   	push   edi
c0014f19:	56                   	push   esi
c0014f1a:	53                   	push   ebx
c0014f1b:	68 0e 43 02 c0       	push   0xc002430e
c0014f20:	e8 7b fe ff ff       	call   c0014da0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f25:	83 c4 10             	add    esp,0x10
c0014f28:	5b                   	pop    ebx
c0014f29:	5e                   	pop    esi
c0014f2a:	5f                   	pop    edi
c0014f2b:	c3                   	ret    

c0014f2c <Reg::readInt(char*, char*, int*)>:
c0014f2c:	55                   	push   ebp
c0014f2d:	57                   	push   edi
c0014f2e:	56                   	push   esi
c0014f2f:	53                   	push   ebx
c0014f30:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f36:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f3a:	57                   	push   edi
c0014f3b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f42:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f49:	e8 a7 ff ff ff       	call   c0014ef5 <Reg::getLine(char*, char*, char*)>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	84 c0                	test   al,al
c0014f53:	0f 84 b3 00 00 00    	je     c001500c <Reg::readInt(char*, char*, int*)+0xe0>
c0014f59:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f5d:	80 fa 2b             	cmp    dl,0x2b
c0014f60:	74 0c                	je     c0014f6e <Reg::readInt(char*, char*, int*)+0x42>
c0014f62:	80 fa 2d             	cmp    dl,0x2d
c0014f65:	75 0e                	jne    c0014f75 <Reg::readInt(char*, char*, int*)+0x49>
c0014f67:	ba 01 00 00 00       	mov    edx,0x1
c0014f6c:	eb 0b                	jmp    c0014f79 <Reg::readInt(char*, char*, int*)+0x4d>
c0014f6e:	ba 01 00 00 00       	mov    edx,0x1
c0014f73:	eb 02                	jmp    c0014f77 <Reg::readInt(char*, char*, int*)+0x4b>
c0014f75:	31 d2                	xor    edx,edx
c0014f77:	31 c0                	xor    eax,eax
c0014f79:	be 0a 00 00 00       	mov    esi,0xa
c0014f7e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014f83:	75 20                	jne    c0014fa5 <Reg::readInt(char*, char*, int*)+0x79>
c0014f85:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014f89:	80 f9 78             	cmp    cl,0x78
c0014f8c:	75 0a                	jne    c0014f98 <Reg::readInt(char*, char*, int*)+0x6c>
c0014f8e:	83 c2 02             	add    edx,0x2
c0014f91:	be 10 00 00 00       	mov    esi,0x10
c0014f96:	eb 0d                	jmp    c0014fa5 <Reg::readInt(char*, char*, int*)+0x79>
c0014f98:	80 f9 62             	cmp    cl,0x62
c0014f9b:	75 08                	jne    c0014fa5 <Reg::readInt(char*, char*, int*)+0x79>
c0014f9d:	83 c2 02             	add    edx,0x2
c0014fa0:	be 02 00 00 00       	mov    esi,0x2
c0014fa5:	01 d7                	add    edi,edx
c0014fa7:	31 d2                	xor    edx,edx
c0014fa9:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014fab:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014faf:	80 fb 0d             	cmp    bl,0xd
c0014fb2:	0f 94 c3             	sete   bl
c0014fb5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014fba:	0f 94 c1             	sete   cl
c0014fbd:	08 cb                	or     bl,cl
c0014fbf:	75 3a                	jne    c0014ffb <Reg::readInt(char*, char*, int*)+0xcf>
c0014fc1:	0f af d6             	imul   edx,esi
c0014fc4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014fc9:	83 fe 10             	cmp    esi,0x10
c0014fcc:	75 26                	jne    c0014ff4 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014fd2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0014fd5:	89 e9                	mov    ecx,ebp
c0014fd7:	80 f9 05             	cmp    cl,0x5
c0014fda:	77 06                	ja     c0014fe2 <Reg::readInt(char*, char*, int*)+0xb6>
c0014fdc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0014fe0:	eb 16                	jmp    c0014ff8 <Reg::readInt(char*, char*, int*)+0xcc>
c0014fe2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014fe6:	83 e9 61             	sub    ecx,0x61
c0014fe9:	80 f9 05             	cmp    cl,0x5
c0014fec:	77 06                	ja     c0014ff4 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fee:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0014ff2:	eb 04                	jmp    c0014ff8 <Reg::readInt(char*, char*, int*)+0xcc>
c0014ff4:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0014ff8:	47                   	inc    edi
c0014ff9:	eb ae                	jmp    c0014fa9 <Reg::readInt(char*, char*, int*)+0x7d>
c0014ffb:	84 c0                	test   al,al
c0014ffd:	74 02                	je     c0015001 <Reg::readInt(char*, char*, int*)+0xd5>
c0014fff:	f7 da                	neg    edx
c0015001:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015008:	89 10                	mov    DWORD PTR [eax],edx
c001500a:	88 d8                	mov    al,bl
c001500c:	81 c4 ec 00 00 00    	add    esp,0xec
c0015012:	5b                   	pop    ebx
c0015013:	5e                   	pop    esi
c0015014:	5f                   	pop    edi
c0015015:	5d                   	pop    ebp
c0015016:	c3                   	ret    

c0015017 <Reg::readString(char*, char*, char*, int)>:
c0015017:	57                   	push   edi
c0015018:	56                   	push   esi
c0015019:	53                   	push   ebx
c001501a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015020:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015027:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001502b:	57                   	push   edi
c001502c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015033:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001503a:	e8 b6 fe ff ff       	call   c0014ef5 <Reg::getLine(char*, char*, char*)>
c001503f:	83 c4 10             	add    esp,0x10
c0015042:	89 c6                	mov    esi,eax
c0015044:	84 c0                	test   al,al
c0015046:	74 44                	je     c001508c <Reg::readString(char*, char*, char*, int)+0x75>
c0015048:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001504f:	31 c0                	xor    eax,eax
c0015051:	4a                   	dec    edx
c0015052:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015055:	84 c9                	test   cl,cl
c0015057:	74 0f                	je     c0015068 <Reg::readString(char*, char*, char*, int)+0x51>
c0015059:	39 c2                	cmp    edx,eax
c001505b:	7e 0b                	jle    c0015068 <Reg::readString(char*, char*, char*, int)+0x51>
c001505d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015060:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015065:	40                   	inc    eax
c0015066:	eb ea                	jmp    c0015052 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015068:	83 ec 0c             	sub    esp,0xc
c001506b:	53                   	push   ebx
c001506c:	e8 2f b6 fe ff       	call   c00006a0 <strlen>
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015079:	75 11                	jne    c001508c <Reg::readString(char*, char*, char*, int)+0x75>
c001507b:	83 ec 0c             	sub    esp,0xc
c001507e:	53                   	push   ebx
c001507f:	e8 1c b6 fe ff       	call   c00006a0 <strlen>
c0015084:	83 c4 10             	add    esp,0x10
c0015087:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001508c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015092:	89 f0                	mov    eax,esi
c0015094:	5b                   	pop    ebx
c0015095:	5e                   	pop    esi
c0015096:	5f                   	pop    edi
c0015097:	c3                   	ret    

c0015098 <Reg::readBool(char*, char*, bool*)>:
c0015098:	83 ec 20             	sub    esp,0x20
c001509b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001509f:	50                   	push   eax
c00150a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150a8:	e8 7f fe ff ff       	call   c0014f2c <Reg::readInt(char*, char*, int*)>
c00150ad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150b2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150b6:	0f 95 02             	setne  BYTE PTR [edx]
c00150b9:	83 c4 2c             	add    esp,0x2c
c00150bc:	c3                   	ret    

c00150bd <Reg::readBoolWithDefault(char*, char*, bool)>:
c00150bd:	53                   	push   ebx
c00150be:	83 ec 1c             	sub    esp,0x1c
c00150c1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150c5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150c9:	50                   	push   eax
c00150ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150d2:	e8 c1 ff ff ff       	call   c0015098 <Reg::readBool(char*, char*, bool*)>
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	84 c0                	test   al,al
c00150dc:	74 04                	je     c00150e2 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00150de:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00150e2:	88 d8                	mov    al,bl
c00150e4:	83 c4 18             	add    esp,0x18
c00150e7:	5b                   	pop    ebx
c00150e8:	c3                   	ret    

c00150e9 <Reg::readIntWithDefault(char*, char*, int)>:
c00150e9:	53                   	push   ebx
c00150ea:	83 ec 1c             	sub    esp,0x1c
c00150ed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00150f1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150f5:	50                   	push   eax
c00150f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150fe:	e8 29 fe ff ff       	call   c0014f2c <Reg::readInt(char*, char*, int*)>
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	84 c0                	test   al,al
c0015108:	74 04                	je     c001510e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001510a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001510e:	89 d8                	mov    eax,ebx
c0015110:	83 c4 18             	add    esp,0x18
c0015113:	5b                   	pop    ebx
c0015114:	c3                   	ret    

c0015115 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015115:	57                   	push   edi
c0015116:	56                   	push   esi
c0015117:	56                   	push   esi
c0015118:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001511c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015120:	56                   	push   esi
c0015121:	57                   	push   edi
c0015122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001512a:	e8 e8 fe ff ff       	call   c0015017 <Reg::readString(char*, char*, char*, int)>
c001512f:	83 c4 10             	add    esp,0x10
c0015132:	84 c0                	test   al,al
c0015134:	75 1a                	jne    c0015150 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015136:	51                   	push   ecx
c0015137:	56                   	push   esi
c0015138:	6a 00                	push   0x0
c001513a:	57                   	push   edi
c001513b:	e8 44 b5 fe ff       	call   c0000684 <memset>
c0015140:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015143:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015147:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015149:	83 c4 10             	add    esp,0x10
c001514c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015150:	89 f8                	mov    eax,edi
c0015152:	5a                   	pop    edx
c0015153:	5e                   	pop    esi
c0015154:	5f                   	pop    edi
c0015155:	c3                   	ret    

c0015156 <Sys::eject(regs*)>:
c0015156:	83 ec 0c             	sub    esp,0xc
c0015159:	83 ca ff             	or     edx,0xffffffff
c001515c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015160:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015163:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015168:	83 e9 41             	sub    ecx,0x41
c001516b:	83 f9 19             	cmp    ecx,0x19
c001516e:	77 18                	ja     c0015188 <Sys::eject(regs*)+0x32>
c0015170:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c0015177:	85 c9                	test   ecx,ecx
c0015179:	74 0d                	je     c0015188 <Sys::eject(regs*)+0x32>
c001517b:	83 ec 0c             	sub    esp,0xc
c001517e:	51                   	push   ecx
c001517f:	e8 9a af ff ff       	call   c001011e <LogicalDisk::eject()>
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	99                   	cdq    
c0015188:	83 c4 0c             	add    esp,0xc
c001518b:	c3                   	ret    

c001518c <Sys::exit(regs*)>:
c001518c:	83 ec 18             	sub    esp,0x18
c001518f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015193:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015196:	e8 59 36 00 00       	call   c00187f4 <terminateTask(int)>
c001519b:	83 c8 ff             	or     eax,0xffffffff
c001519e:	83 c4 1c             	add    esp,0x1c
c00151a1:	89 c2                	mov    edx,eax
c00151a3:	c3                   	ret    

c00151a4 <Sys::getCwd(regs*)>:
c00151a4:	83 ec 10             	sub    esp,0x10
c00151a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151ab:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00151ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00151b9:	e8 1a 7c ff ff       	call   c000cdd8 <Fs::getcwd(Process*, char*, int)>
c00151be:	83 c4 1c             	add    esp,0x1c
c00151c1:	99                   	cdq    
c00151c2:	c3                   	ret    

c00151c3 <Sys::getPID(regs*)>:
c00151c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cd:	99                   	cdq    
c00151ce:	c3                   	ret    

c00151cf <Sys::getRAMData(regs*)>:
c00151cf:	8b 0d b8 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261b8
c00151d5:	69 05 b4 61 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00261b4,0xc8
c00151df:	99                   	cdq    
c00151e0:	f7 f9                	idiv   ecx
c00151e2:	c1 e0 18             	shl    eax,0x18
c00151e5:	09 c8                	or     eax,ecx
c00151e7:	99                   	cdq    
c00151e8:	c3                   	ret    

c00151e9 <Sys::getVGAPtr(regs*)>:
c00151e9:	55                   	push   ebp
c00151ea:	57                   	push   edi
c00151eb:	56                   	push   esi
c00151ec:	53                   	push   ebx
c00151ed:	83 ec 18             	sub    esp,0x18
c00151f0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00151f4:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00151f7:	e8 fc 30 00 00       	call   c00182f8 <Thr::processFromPID(int)>
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	89 c1                	mov    ecx,eax
c0015201:	b8 01 00 00 00       	mov    eax,0x1
c0015206:	85 c9                	test   ecx,ecx
c0015208:	74 59                	je     c0015263 <Sys::getVGAPtr(regs*)+0x7a>
c001520a:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015210:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015214:	74 0c                	je     c0015222 <Sys::getVGAPtr(regs*)+0x39>
c0015216:	83 ec 0c             	sub    esp,0xc
c0015219:	53                   	push   ebx
c001521a:	e8 54 56 ff ff       	call   c000a873 <setActiveTerminal(VgaText*)>
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015225:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015228:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001522d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001522f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015232:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015235:	81 c3 82 00 00 00    	add    ebx,0x82
c001523b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015241:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015244:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015247:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001524d:	50                   	push   eax
c001524e:	50                   	push   eax
c001524f:	53                   	push   ebx
c0015250:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015253:	05 a8 0f 00 00       	add    eax,0xfa8
c0015258:	50                   	push   eax
c0015259:	e8 e2 b4 fe ff       	call   c0000740 <strcpy>
c001525e:	83 c4 10             	add    esp,0x10
c0015261:	31 c0                	xor    eax,eax
c0015263:	83 c4 0c             	add    esp,0xc
c0015266:	31 d2                	xor    edx,edx
c0015268:	5b                   	pop    ebx
c0015269:	5e                   	pop    esi
c001526a:	5f                   	pop    edi
c001526b:	5d                   	pop    ebp
c001526c:	c3                   	ret    

c001526d <Sys::loadDLL(regs*)>:
c001526d:	56                   	push   esi
c001526e:	53                   	push   ebx
c001526f:	31 d2                	xor    edx,edx
c0015271:	51                   	push   ecx
c0015272:	b8 01 00 00 00       	mov    eax,0x1
c0015277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001527b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001527f:	0f 84 8c 00 00 00    	je     c0015311 <Sys::loadDLL(regs*)+0xa4>
c0015285:	83 ec 0c             	sub    esp,0xc
c0015288:	68 14 01 00 00       	push   0x114
c001528d:	e8 31 47 ff ff       	call   c00099c3 <malloc>
c0015292:	83 c4 0c             	add    esp,0xc
c0015295:	89 c3                	mov    ebx,eax
c0015297:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001529c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001529f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152a2:	53                   	push   ebx
c00152a3:	e8 2e 7d ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c00152a8:	83 c4 10             	add    esp,0x10
c00152ab:	31 d2                	xor    edx,edx
c00152ad:	b8 02 00 00 00       	mov    eax,0x2
c00152b2:	85 db                	test   ebx,ebx
c00152b4:	74 5b                	je     c0015311 <Sys::loadDLL(regs*)+0xa4>
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	53                   	push   ebx
c00152ba:	e8 e9 7f ff ff       	call   c000d2a8 <File::exists()>
c00152bf:	83 c4 10             	add    esp,0x10
c00152c2:	84 c0                	test   al,al
c00152c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152c6:	75 11                	jne    c00152d9 <Sys::loadDLL(regs*)+0x6c>
c00152c8:	83 ec 0c             	sub    esp,0xc
c00152cb:	53                   	push   ebx
c00152cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152cf:	83 c4 10             	add    esp,0x10
c00152d2:	b8 03 00 00 00       	mov    eax,0x3
c00152d7:	eb 36                	jmp    c001530f <Sys::loadDLL(regs*)+0xa2>
c00152d9:	83 ec 0c             	sub    esp,0xc
c00152dc:	53                   	push   ebx
c00152dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152e0:	58                   	pop    eax
c00152e1:	5a                   	pop    edx
c00152e2:	6a 00                	push   0x0
c00152e4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152e7:	e8 0a 22 00 00       	call   c00174f6 <Thr::loadDLL(char const*, bool)>
c00152ec:	83 c4 10             	add    esp,0x10
c00152ef:	89 c1                	mov    ecx,eax
c00152f1:	31 d2                	xor    edx,edx
c00152f3:	b8 04 00 00 00       	mov    eax,0x4
c00152f8:	85 c9                	test   ecx,ecx
c00152fa:	74 15                	je     c0015311 <Sys::loadDLL(regs*)+0xa4>
c00152fc:	53                   	push   ebx
c00152fd:	53                   	push   ebx
c00152fe:	ff 35 88 61 02 c0    	push   DWORD PTR ds:0xc0026188
c0015304:	51                   	push   ecx
c0015305:	e8 1d 24 00 00       	call   c0017727 <Thr::executeDLL(unsigned long, void*)>
c001530a:	83 c4 10             	add    esp,0x10
c001530d:	31 c0                	xor    eax,eax
c001530f:	31 d2                	xor    edx,edx
c0015311:	59                   	pop    ecx
c0015312:	5b                   	pop    ebx
c0015313:	5e                   	pop    esi
c0015314:	c3                   	ret    

c0015315 <Sys::read(regs*)>:
c0015315:	57                   	push   edi
c0015316:	56                   	push   esi
c0015317:	53                   	push   ebx
c0015318:	83 ec 10             	sub    esp,0x10
c001531b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001531f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015322:	83 f8 02             	cmp    eax,0x2
c0015325:	77 10                	ja     c0015337 <Sys::read(regs*)+0x22>
c0015327:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001532c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001532f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015335:	eb 0e                	jmp    c0015345 <Sys::read(regs*)+0x30>
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	50                   	push   eax
c001533b:	e8 af 62 ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	89 c1                	mov    ecx,eax
c0015345:	83 c8 ff             	or     eax,0xffffffff
c0015348:	85 c9                	test   ecx,ecx
c001534a:	89 c2                	mov    edx,eax
c001534c:	74 28                	je     c0015376 <Sys::read(regs*)+0x61>
c001534e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015356:	31 ff                	xor    edi,edi
c0015358:	83 ec 0c             	sub    esp,0xc
c001535b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001535d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015361:	52                   	push   edx
c0015362:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015365:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015368:	57                   	push   edi
c0015369:	56                   	push   esi
c001536a:	51                   	push   ecx
c001536b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001536e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015372:	83 c4 20             	add    esp,0x20
c0015375:	99                   	cdq    
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	5b                   	pop    ebx
c001537a:	5e                   	pop    esi
c001537b:	5f                   	pop    edi
c001537c:	c3                   	ret    

c001537d <Sys::sbrk(regs*)>:
c001537d:	56                   	push   esi
c001537e:	53                   	push   ebx
c001537f:	50                   	push   eax
c0015380:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015385:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015389:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001538c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001538f:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015395:	85 db                	test   ebx,ebx
c0015397:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001539a:	74 02                	je     c001539e <Sys::sbrk(regs*)+0x21>
c001539c:	79 06                	jns    c00153a4 <Sys::sbrk(regs*)+0x27>
c001539e:	89 f0                	mov    eax,esi
c00153a0:	31 d2                	xor    edx,edx
c00153a2:	eb 2a                	jmp    c00153ce <Sys::sbrk(regs*)+0x51>
c00153a4:	83 c8 ff             	or     eax,0xffffffff
c00153a7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00153ad:	89 c2                	mov    edx,eax
c00153af:	77 1d                	ja     c00153ce <Sys::sbrk(regs*)+0x51>
c00153b1:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00153b7:	50                   	push   eax
c00153b8:	c1 ea 0c             	shr    edx,0xc
c00153bb:	68 07 0c 00 00       	push   0xc07
c00153c0:	52                   	push   edx
c00153c1:	51                   	push   ecx
c00153c2:	e8 27 6b ff ff       	call   c000beee <VAS::allocatePages(int, int)>
c00153c7:	89 f0                	mov    eax,esi
c00153c9:	31 d2                	xor    edx,edx
c00153cb:	83 c4 10             	add    esp,0x10
c00153ce:	59                   	pop    ecx
c00153cf:	5b                   	pop    ebx
c00153d0:	5e                   	pop    esi
c00153d1:	c3                   	ret    

c00153d2 <Sys::setCwd(regs*)>:
c00153d2:	83 ec 14             	sub    esp,0x14
c00153d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153d9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00153dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00153e4:	e8 5e 7f ff ff       	call   c000d347 <Fs::setcwd(Process*, char*)>
c00153e9:	83 c4 1c             	add    esp,0x1c
c00153ec:	99                   	cdq    
c00153ed:	c3                   	ret    

c00153ee <Sys::setTime(regs*)>:
c00153ee:	55                   	push   ebp
c00153ef:	31 c9                	xor    ecx,ecx
c00153f1:	57                   	push   edi
c00153f2:	bd 0c 00 00 00       	mov    ebp,0xc
c00153f7:	56                   	push   esi
c00153f8:	53                   	push   ebx
c00153f9:	31 db                	xor    ebx,ebx
c00153fb:	83 ec 10             	sub    esp,0x10
c00153fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015402:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015405:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015408:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001540b:	89 c2                	mov    edx,eax
c001540d:	66 81 ef 6c 07       	sub    di,0x76c
c0015412:	83 e2 1f             	and    edx,0x1f
c0015415:	c1 e7 10             	shl    edi,0x10
c0015418:	42                   	inc    edx
c0015419:	c1 e8 05             	shr    eax,0x5
c001541c:	88 d1                	mov    cl,dl
c001541e:	31 d2                	xor    edx,edx
c0015420:	f7 f5                	div    ebp
c0015422:	89 dd                	mov    ebp,ebx
c0015424:	88 d5                	mov    ch,dl
c0015426:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001542c:	0f b7 c1             	movzx  eax,cx
c001542f:	31 d2                	xor    edx,edx
c0015431:	09 f8                	or     eax,edi
c0015433:	bf 3c 00 00 00       	mov    edi,0x3c
c0015438:	89 c1                	mov    ecx,eax
c001543a:	89 f0                	mov    eax,esi
c001543c:	f7 f7                	div    edi
c001543e:	c1 e2 10             	shl    edx,0x10
c0015441:	09 d5                	or     ebp,edx
c0015443:	31 d2                	xor    edx,edx
c0015445:	89 eb                	mov    ebx,ebp
c0015447:	f7 f7                	div    edi
c0015449:	bf 10 0e 00 00       	mov    edi,0xe10
c001544e:	88 d7                	mov    bh,dl
c0015450:	89 f0                	mov    eax,esi
c0015452:	31 d2                	xor    edx,edx
c0015454:	f7 f7                	div    edi
c0015456:	bf 18 00 00 00       	mov    edi,0x18
c001545b:	31 d2                	xor    edx,edx
c001545d:	f7 f7                	div    edi
c001545f:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0015464:	88 d3                	mov    bl,dl
c0015466:	53                   	push   ebx
c0015467:	51                   	push   ecx
c0015468:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001546e:	e8 1f 87 ff ff       	call   c000db92 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015473:	83 c4 1c             	add    esp,0x1c
c0015476:	83 f0 01             	xor    eax,0x1
c0015479:	5b                   	pop    ebx
c001547a:	0f b6 c0             	movzx  eax,al
c001547d:	5e                   	pop    esi
c001547e:	31 d2                	xor    edx,edx
c0015480:	5f                   	pop    edi
c0015481:	5d                   	pop    ebp
c0015482:	c3                   	ret    

c0015483 <Sys::timezone(regs*)>:
c0015483:	53                   	push   ebx
c0015484:	83 ec 08             	sub    esp,0x8
c0015487:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001548b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001548f:	75 17                	jne    c00154a8 <Sys::timezone(regs*)+0x25>
c0015491:	83 ec 0c             	sub    esp,0xc
c0015494:	68 29 43 02 c0       	push   0xc0024329
c0015499:	e8 cd 75 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001549e:	83 c8 ff             	or     eax,0xffffffff
c00154a1:	83 c4 10             	add    esp,0x10
c00154a4:	89 c2                	mov    edx,eax
c00154a6:	eb 20                	jmp    c00154c8 <Sys::timezone(regs*)+0x45>
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	68 3e 43 02 c0       	push   0xc002433e
c00154b0:	e8 b6 75 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00154b5:	58                   	pop    eax
c00154b6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154b9:	e8 36 84 ff ff       	call   c000d8f4 <User::loadClockSettings(int)>
c00154be:	83 c4 10             	add    esp,0x10
c00154c1:	b8 01 00 00 00       	mov    eax,0x1
c00154c6:	31 d2                	xor    edx,edx
c00154c8:	83 c4 08             	add    esp,0x8
c00154cb:	5b                   	pop    ebx
c00154cc:	c3                   	ret    

c00154cd <Sys::write(regs*)>:
c00154cd:	57                   	push   edi
c00154ce:	56                   	push   esi
c00154cf:	53                   	push   ebx
c00154d0:	83 ec 10             	sub    esp,0x10
c00154d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00154da:	83 f8 02             	cmp    eax,0x2
c00154dd:	77 10                	ja     c00154ef <Sys::write(regs*)+0x22>
c00154df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154e7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00154ed:	eb 0e                	jmp    c00154fd <Sys::write(regs*)+0x30>
c00154ef:	83 ec 0c             	sub    esp,0xc
c00154f2:	50                   	push   eax
c00154f3:	e8 f7 60 ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c00154f8:	83 c4 10             	add    esp,0x10
c00154fb:	89 c1                	mov    ecx,eax
c00154fd:	83 c8 ff             	or     eax,0xffffffff
c0015500:	85 c9                	test   ecx,ecx
c0015502:	89 c2                	mov    edx,eax
c0015504:	74 28                	je     c001552e <Sys::write(regs*)+0x61>
c0015506:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001550e:	31 ff                	xor    edi,edi
c0015510:	83 ec 0c             	sub    esp,0xc
c0015513:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015515:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015519:	52                   	push   edx
c001551a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001551d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015520:	57                   	push   edi
c0015521:	56                   	push   esi
c0015522:	51                   	push   ecx
c0015523:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001552a:	83 c4 20             	add    esp,0x20
c001552d:	99                   	cdq    
c001552e:	83 c4 10             	add    esp,0x10
c0015531:	5b                   	pop    ebx
c0015532:	5e                   	pop    esi
c0015533:	5f                   	pop    edi
c0015534:	c3                   	ret    

c0015535 <Sys::wsbe(regs*)>:
c0015535:	57                   	push   edi
c0015536:	b9 0b 00 00 00       	mov    ecx,0xb
c001553b:	56                   	push   esi
c001553c:	be 7d 43 02 c0       	mov    esi,0xc002437d
c0015541:	53                   	push   ebx
c0015542:	83 ec 30             	sub    esp,0x30
c0015545:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015549:	fc                   	cld    
c001554a:	83 ec 0c             	sub    esp,0xc
c001554d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001554f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015553:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015558:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001555b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015561:	8b 06                	mov    eax,DWORD PTR [esi]
c0015563:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015566:	57                   	push   edi
c0015567:	e8 34 b1 fe ff       	call   c00006a0 <strlen>
c001556c:	5a                   	pop    edx
c001556d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015571:	52                   	push   edx
c0015572:	31 d2                	xor    edx,edx
c0015574:	57                   	push   edi
c0015575:	52                   	push   edx
c0015576:	50                   	push   eax
c0015577:	56                   	push   esi
c0015578:	ff d3                	call   ebx
c001557a:	83 c4 14             	add    esp,0x14
c001557d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015581:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015584:	e8 6b 32 00 00       	call   c00187f4 <terminateTask(int)>
c0015589:	83 c4 40             	add    esp,0x40
c001558c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015591:	5b                   	pop    ebx
c0015592:	31 d2                	xor    edx,edx
c0015594:	5e                   	pop    esi
c0015595:	5f                   	pop    edi
c0015596:	c3                   	ret    

c0015597 <Sys::yield(regs*)>:
c0015597:	83 ec 0c             	sub    esp,0xc
c001559a:	fa                   	cli    
c001559b:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c00155a1:	e8 36 29 00 00       	call   c0017edc <schedule()>
c00155a6:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00155ab:	48                   	dec    eax
c00155ac:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00155b1:	75 01                	jne    c00155b4 <Sys::yield(regs*)+0x1d>
c00155b3:	fb                   	sti    
c00155b4:	8b 15 ac 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267ac
c00155ba:	83 c4 0c             	add    esp,0xc
c00155bd:	89 d0                	mov    eax,edx
c00155bf:	c1 ea 11             	shr    edx,0x11
c00155c2:	c1 e0 07             	shl    eax,0x7
c00155c5:	25 80 30 0f 00       	and    eax,0xf3080
c00155ca:	31 d0                	xor    eax,edx
c00155cc:	31 d2                	xor    edx,edx
c00155ce:	c3                   	ret    

c00155cf <sysCallSeekDir(regs*)>:
c00155cf:	31 c0                	xor    eax,eax
c00155d1:	31 d2                	xor    edx,edx
c00155d3:	c3                   	ret    

c00155d4 <sysCallTellDir(regs*)>:
c00155d4:	31 c0                	xor    eax,eax
c00155d6:	31 d2                	xor    edx,edx
c00155d8:	c3                   	ret    

c00155d9 <sysCallVerify(regs*)>:
c00155d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155dd:	31 d2                	xor    edx,edx
c00155df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155e2:	c3                   	ret    

c00155e3 <sysCallGetArgc(regs*)>:
c00155e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155eb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00155f1:	99                   	cdq    
c00155f2:	c3                   	ret    

c00155f3 <sysFormatDisk(regs*)>:
c00155f3:	56                   	push   esi
c00155f4:	53                   	push   ebx
c00155f5:	53                   	push   ebx
c00155f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00155fa:	8b 1d b4 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262b4
c0015600:	eb 25                	jmp    c0015627 <sysFormatDisk(regs*)+0x34>
c0015602:	83 ec 0c             	sub    esp,0xc
c0015605:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015608:	8b 13                	mov    edx,DWORD PTR [ebx]
c001560a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001560d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015610:	50                   	push   eax
c0015611:	ff 34 85 40 67 02 c0 	push   DWORD PTR [eax*4-0x3ffd98c0]
c0015618:	53                   	push   ebx
c0015619:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001561c:	83 c4 20             	add    esp,0x20
c001561f:	83 f8 08             	cmp    eax,0x8
c0015622:	75 12                	jne    c0015636 <sysFormatDisk(regs*)+0x43>
c0015624:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015627:	85 db                	test   ebx,ebx
c0015629:	75 d7                	jne    c0015602 <sysFormatDisk(regs*)+0xf>
c001562b:	59                   	pop    ecx
c001562c:	b8 03 00 00 00       	mov    eax,0x3
c0015631:	31 d2                	xor    edx,edx
c0015633:	5b                   	pop    ebx
c0015634:	5e                   	pop    esi
c0015635:	c3                   	ret    
c0015636:	85 c0                	test   eax,eax
c0015638:	74 1b                	je     c0015655 <sysFormatDisk(regs*)+0x62>
c001563a:	83 f8 09             	cmp    eax,0x9
c001563d:	74 0b                	je     c001564a <sysFormatDisk(regs*)+0x57>
c001563f:	59                   	pop    ecx
c0015640:	b8 02 00 00 00       	mov    eax,0x2
c0015645:	31 d2                	xor    edx,edx
c0015647:	5b                   	pop    ebx
c0015648:	5e                   	pop    esi
c0015649:	c3                   	ret    
c001564a:	59                   	pop    ecx
c001564b:	b8 01 00 00 00       	mov    eax,0x1
c0015650:	31 d2                	xor    edx,edx
c0015652:	5b                   	pop    ebx
c0015653:	5e                   	pop    esi
c0015654:	c3                   	ret    
c0015655:	59                   	pop    ecx
c0015656:	31 c0                	xor    eax,eax
c0015658:	31 d2                	xor    edx,edx
c001565a:	5b                   	pop    ebx
c001565b:	5e                   	pop    esi
c001565c:	c3                   	ret    

c001565d <sysSetDiskVolumeLabel(regs*)>:
c001565d:	56                   	push   esi
c001565e:	53                   	push   ebx
c001565f:	53                   	push   ebx
c0015660:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015664:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015667:	83 f8 19             	cmp    eax,0x19
c001566a:	77 2d                	ja     c0015699 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001566c:	8b 0c 85 40 67 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd98c0]
c0015673:	85 c9                	test   ecx,ecx
c0015675:	74 22                	je     c0015699 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015677:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001567a:	85 db                	test   ebx,ebx
c001567c:	74 1b                	je     c0015699 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001567e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015684:	85 d2                	test   edx,edx
c0015686:	74 11                	je     c0015699 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015688:	8b 32                	mov    esi,DWORD PTR [edx]
c001568a:	53                   	push   ebx
c001568b:	50                   	push   eax
c001568c:	51                   	push   ecx
c001568d:	52                   	push   edx
c001568e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015691:	83 c4 10             	add    esp,0x10
c0015694:	99                   	cdq    
c0015695:	59                   	pop    ecx
c0015696:	5b                   	pop    ebx
c0015697:	5e                   	pop    esi
c0015698:	c3                   	ret    
c0015699:	59                   	pop    ecx
c001569a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001569f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156a4:	5b                   	pop    ebx
c00156a5:	5e                   	pop    esi
c00156a6:	c3                   	ret    

c00156a7 <sysGetDiskVolumeLabel(regs*)>:
c00156a7:	57                   	push   edi
c00156a8:	56                   	push   esi
c00156a9:	53                   	push   ebx
c00156aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00156b1:	83 fa 19             	cmp    edx,0x19
c00156b4:	77 38                	ja     c00156ee <sysGetDiskVolumeLabel(regs*)+0x47>
c00156b6:	8b 0c 95 40 67 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd98c0]
c00156bd:	85 c9                	test   ecx,ecx
c00156bf:	74 2d                	je     c00156ee <sysGetDiskVolumeLabel(regs*)+0x47>
c00156c1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00156c4:	85 db                	test   ebx,ebx
c00156c6:	74 26                	je     c00156ee <sysGetDiskVolumeLabel(regs*)+0x47>
c00156c8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00156cb:	85 f6                	test   esi,esi
c00156cd:	74 1f                	je     c00156ee <sysGetDiskVolumeLabel(regs*)+0x47>
c00156cf:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00156d5:	85 c0                	test   eax,eax
c00156d7:	74 15                	je     c00156ee <sysGetDiskVolumeLabel(regs*)+0x47>
c00156d9:	83 ec 0c             	sub    esp,0xc
c00156dc:	8b 38                	mov    edi,DWORD PTR [eax]
c00156de:	56                   	push   esi
c00156df:	53                   	push   ebx
c00156e0:	52                   	push   edx
c00156e1:	51                   	push   ecx
c00156e2:	50                   	push   eax
c00156e3:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00156e6:	83 c4 20             	add    esp,0x20
c00156e9:	99                   	cdq    
c00156ea:	5b                   	pop    ebx
c00156eb:	5e                   	pop    esi
c00156ec:	5f                   	pop    edi
c00156ed:	c3                   	ret    
c00156ee:	5b                   	pop    ebx
c00156ef:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156f9:	5e                   	pop    esi
c00156fa:	5f                   	pop    edi
c00156fb:	c3                   	ret    

c00156fc <sysShutdown(regs*)>:
c00156fc:	83 ec 0c             	sub    esp,0xc
c00156ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015703:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015706:	85 c0                	test   eax,eax
c0015708:	74 18                	je     c0015722 <sysShutdown(regs*)+0x26>
c001570a:	83 f8 01             	cmp    eax,0x1
c001570d:	74 38                	je     c0015747 <sysShutdown(regs*)+0x4b>
c001570f:	83 f8 02             	cmp    eax,0x2
c0015712:	74 24                	je     c0015738 <sysShutdown(regs*)+0x3c>
c0015714:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015719:	ba ff ff ff ff       	mov    edx,0xffffffff
c001571e:	83 c4 0c             	add    esp,0xc
c0015721:	c3                   	ret    
c0015722:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0015727:	8b 10                	mov    edx,DWORD PTR [eax]
c0015729:	6a 00                	push   0x0
c001572b:	6a 00                	push   0x0
c001572d:	6a 00                	push   0x0
c001572f:	50                   	push   eax
c0015730:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	eb dc                	jmp    c0015714 <sysShutdown(regs*)+0x18>
c0015738:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c001573d:	8b 10                	mov    edx,DWORD PTR [eax]
c001573f:	6a 00                	push   0x0
c0015741:	6a 00                	push   0x0
c0015743:	6a 01                	push   0x1
c0015745:	eb e8                	jmp    c001572f <sysShutdown(regs*)+0x33>
c0015747:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c001574c:	85 c0                	test   eax,eax
c001574e:	74 02                	je     c0015752 <sysShutdown(regs*)+0x56>
c0015750:	ff d0                	call   eax
c0015752:	31 c0                	xor    eax,eax
c0015754:	31 d2                	xor    edx,edx
c0015756:	83 c4 0c             	add    esp,0xc
c0015759:	c3                   	ret    

c001575a <sysCallRealpath(regs*)>:
c001575a:	83 ec 0c             	sub    esp,0xc
c001575d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015761:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015764:	85 d2                	test   edx,edx
c0015766:	74 07                	je     c001576f <sysCallRealpath(regs*)+0x15>
c0015768:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001576b:	85 c0                	test   eax,eax
c001576d:	75 0b                	jne    c001577a <sysCallRealpath(regs*)+0x20>
c001576f:	b8 01 00 00 00       	mov    eax,0x1
c0015774:	31 d2                	xor    edx,edx
c0015776:	83 c4 0c             	add    esp,0xc
c0015779:	c3                   	ret    
c001577a:	51                   	push   ecx
c001577b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015781:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015784:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001578a:	51                   	push   ecx
c001578b:	52                   	push   edx
c001578c:	50                   	push   eax
c001578d:	e8 9a 76 ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c0015792:	83 c4 10             	add    esp,0x10
c0015795:	31 c0                	xor    eax,eax
c0015797:	31 d2                	xor    edx,edx
c0015799:	83 c4 0c             	add    esp,0xc
c001579c:	c3                   	ret    

c001579d <sysCallReadDir(regs*)>:
c001579d:	53                   	push   ebx
c001579e:	83 ec 18             	sub    esp,0x18
c00157a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157a5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00157a8:	83 f8 02             	cmp    eax,0x2
c00157ab:	76 60                	jbe    c001580d <sysCallReadDir(regs*)+0x70>
c00157ad:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00157b4:	77 48                	ja     c00157fe <sysCallReadDir(regs*)+0x61>
c00157b6:	83 ec 0c             	sub    esp,0xc
c00157b9:	50                   	push   eax
c00157ba:	e8 30 5e ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c00157bf:	83 c4 10             	add    esp,0x10
c00157c2:	85 c0                	test   eax,eax
c00157c4:	74 38                	je     c00157fe <sysCallReadDir(regs*)+0x61>
c00157c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157ce:	83 ec 0c             	sub    esp,0xc
c00157d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00157d3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00157d7:	51                   	push   ecx
c00157d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157db:	6a 00                	push   0x0
c00157dd:	68 10 01 00 00       	push   0x110
c00157e2:	50                   	push   eax
c00157e3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157e6:	83 c4 20             	add    esp,0x20
c00157e9:	85 c0                	test   eax,eax
c00157eb:	74 29                	je     c0015816 <sysCallReadDir(regs*)+0x79>
c00157ed:	83 f8 07             	cmp    eax,0x7
c00157f0:	74 1b                	je     c001580d <sysCallReadDir(regs*)+0x70>
c00157f2:	b8 02 00 00 00       	mov    eax,0x2
c00157f7:	31 d2                	xor    edx,edx
c00157f9:	83 c4 18             	add    esp,0x18
c00157fc:	5b                   	pop    ebx
c00157fd:	c3                   	ret    
c00157fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015803:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015808:	83 c4 18             	add    esp,0x18
c001580b:	5b                   	pop    ebx
c001580c:	c3                   	ret    
c001580d:	b8 01 00 00 00       	mov    eax,0x1
c0015812:	31 d2                	xor    edx,edx
c0015814:	eb e3                	jmp    c00157f9 <sysCallReadDir(regs*)+0x5c>
c0015816:	31 c0                	xor    eax,eax
c0015818:	31 d2                	xor    edx,edx
c001581a:	eb dd                	jmp    c00157f9 <sysCallReadDir(regs*)+0x5c>

c001581c <sysCallIsATTY(regs*)>:
c001581c:	83 ec 0c             	sub    esp,0xc
c001581f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015823:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015826:	83 f8 02             	cmp    eax,0x2
c0015829:	76 07                	jbe    c0015832 <sysCallIsATTY(regs*)+0x16>
c001582b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015830:	75 26                	jne    c0015858 <sysCallIsATTY(regs*)+0x3c>
c0015832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015837:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001583a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015840:	85 c0                	test   eax,eax
c0015842:	74 24                	je     c0015868 <sysCallIsATTY(regs*)+0x4c>
c0015844:	83 ec 0c             	sub    esp,0xc
c0015847:	8b 10                	mov    edx,DWORD PTR [eax]
c0015849:	50                   	push   eax
c001584a:	ff 12                	call   DWORD PTR [edx]
c001584c:	31 d2                	xor    edx,edx
c001584e:	0f b6 c0             	movzx  eax,al
c0015851:	83 c4 10             	add    esp,0x10
c0015854:	83 c4 0c             	add    esp,0xc
c0015857:	c3                   	ret    
c0015858:	83 ec 0c             	sub    esp,0xc
c001585b:	50                   	push   eax
c001585c:	e8 8e 5d ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c0015861:	83 c4 10             	add    esp,0x10
c0015864:	85 c0                	test   eax,eax
c0015866:	75 dc                	jne    c0015844 <sysCallIsATTY(regs*)+0x28>
c0015868:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001586d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015872:	83 c4 0c             	add    esp,0xc
c0015875:	c3                   	ret    

c0015876 <sysCallSeek(regs*)>:
c0015876:	53                   	push   ebx
c0015877:	83 ec 08             	sub    esp,0x8
c001587a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001587e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015881:	8d 50 fd             	lea    edx,[eax-0x3]
c0015884:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001588a:	77 32                	ja     c00158be <sysCallSeek(regs*)+0x48>
c001588c:	83 ec 0c             	sub    esp,0xc
c001588f:	50                   	push   eax
c0015890:	e8 5a 5d ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c0015895:	83 c4 0c             	add    esp,0xc
c0015898:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001589b:	31 db                	xor    ebx,ebx
c001589d:	53                   	push   ebx
c001589e:	51                   	push   ecx
c001589f:	50                   	push   eax
c00158a0:	e8 53 78 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c00158a5:	83 c4 10             	add    esp,0x10
c00158a8:	85 c0                	test   eax,eax
c00158aa:	0f 95 c0             	setne  al
c00158ad:	31 d2                	xor    edx,edx
c00158af:	0f b6 c0             	movzx  eax,al
c00158b2:	f7 d8                	neg    eax
c00158b4:	83 d2 00             	adc    edx,0x0
c00158b7:	83 c4 08             	add    esp,0x8
c00158ba:	f7 da                	neg    edx
c00158bc:	5b                   	pop    ebx
c00158bd:	c3                   	ret    
c00158be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158c8:	83 c4 08             	add    esp,0x8
c00158cb:	5b                   	pop    ebx
c00158cc:	c3                   	ret    

c00158cd <sysCallTell(regs*)>:
c00158cd:	53                   	push   ebx
c00158ce:	83 ec 08             	sub    esp,0x8
c00158d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158d8:	83 f8 02             	cmp    eax,0x2
c00158db:	76 4d                	jbe    c001592a <sysCallTell(regs*)+0x5d>
c00158dd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00158e2:	76 19                	jbe    c00158fd <sysCallTell(regs*)+0x30>
c00158e4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00158e7:	31 d2                	xor    edx,edx
c00158e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00158ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158f6:	31 c0                	xor    eax,eax
c00158f8:	83 c4 08             	add    esp,0x8
c00158fb:	5b                   	pop    ebx
c00158fc:	c3                   	ret    
c00158fd:	83 ec 0c             	sub    esp,0xc
c0015900:	50                   	push   eax
c0015901:	e8 e9 5c ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c0015906:	5a                   	pop    edx
c0015907:	59                   	pop    ecx
c0015908:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001590b:	50                   	push   eax
c001590c:	e8 3d 78 ff ff       	call   c000d14e <File::tell(unsigned long long*)>
c0015911:	83 c4 10             	add    esp,0x10
c0015914:	85 c0                	test   eax,eax
c0015916:	0f 95 c0             	setne  al
c0015919:	31 d2                	xor    edx,edx
c001591b:	0f b6 c0             	movzx  eax,al
c001591e:	f7 d8                	neg    eax
c0015920:	83 d2 00             	adc    edx,0x0
c0015923:	83 c4 08             	add    esp,0x8
c0015926:	f7 da                	neg    edx
c0015928:	5b                   	pop    ebx
c0015929:	c3                   	ret    
c001592a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001592f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015934:	83 c4 08             	add    esp,0x8
c0015937:	5b                   	pop    ebx
c0015938:	c3                   	ret    

c0015939 <sysCallSize(regs*)>:
c0015939:	53                   	push   ebx
c001593a:	83 ec 18             	sub    esp,0x18
c001593d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015941:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015944:	83 f8 02             	cmp    eax,0x2
c0015947:	76 53                	jbe    c001599c <sysCallSize(regs*)+0x63>
c0015949:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001594e:	76 19                	jbe    c0015969 <sysCallSize(regs*)+0x30>
c0015950:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015953:	31 d2                	xor    edx,edx
c0015955:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001595b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015962:	31 c0                	xor    eax,eax
c0015964:	83 c4 18             	add    esp,0x18
c0015967:	5b                   	pop    ebx
c0015968:	c3                   	ret    
c0015969:	83 ec 0c             	sub    esp,0xc
c001596c:	50                   	push   eax
c001596d:	e8 7d 5c ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c0015972:	83 c4 0c             	add    esp,0xc
c0015975:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015979:	52                   	push   edx
c001597a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001597d:	50                   	push   eax
c001597e:	e8 63 79 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c0015983:	83 c4 10             	add    esp,0x10
c0015986:	85 c0                	test   eax,eax
c0015988:	0f 95 c0             	setne  al
c001598b:	31 d2                	xor    edx,edx
c001598d:	0f b6 c0             	movzx  eax,al
c0015990:	f7 d8                	neg    eax
c0015992:	83 d2 00             	adc    edx,0x0
c0015995:	83 c4 18             	add    esp,0x18
c0015998:	f7 da                	neg    edx
c001599a:	5b                   	pop    ebx
c001599b:	c3                   	ret    
c001599c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159a6:	83 c4 18             	add    esp,0x18
c00159a9:	5b                   	pop    ebx
c00159aa:	c3                   	ret    

c00159ab <sysCallSizeFromFilename(regs*)>:
c00159ab:	57                   	push   edi
c00159ac:	56                   	push   esi
c00159ad:	53                   	push   ebx
c00159ae:	83 ec 20             	sub    esp,0x20
c00159b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159b5:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00159b8:	83 fb 02             	cmp    ebx,0x2
c00159bb:	0f 86 88 00 00 00    	jbe    c0015a49 <sysCallSizeFromFilename(regs*)+0x9e>
c00159c1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00159c7:	76 1b                	jbe    c00159e4 <sysCallSizeFromFilename(regs*)+0x39>
c00159c9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00159cc:	31 d2                	xor    edx,edx
c00159ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159db:	83 c4 20             	add    esp,0x20
c00159de:	31 c0                	xor    eax,eax
c00159e0:	5b                   	pop    ebx
c00159e1:	5e                   	pop    esi
c00159e2:	5f                   	pop    edi
c00159e3:	c3                   	ret    
c00159e4:	83 ec 0c             	sub    esp,0xc
c00159e7:	68 14 01 00 00       	push   0x114
c00159ec:	e8 d2 3f ff ff       	call   c00099c3 <malloc>
c00159f1:	83 c4 0c             	add    esp,0xc
c00159f4:	89 c7                	mov    edi,eax
c00159f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159fb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00159fe:	53                   	push   ebx
c00159ff:	57                   	push   edi
c0015a00:	e8 d1 75 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0015a05:	83 c4 0c             	add    esp,0xc
c0015a08:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015a0c:	50                   	push   eax
c0015a0d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a10:	57                   	push   edi
c0015a11:	e8 d0 78 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c0015a16:	83 c4 10             	add    esp,0x10
c0015a19:	85 ff                	test   edi,edi
c0015a1b:	74 14                	je     c0015a31 <sysCallSizeFromFilename(regs*)+0x86>
c0015a1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a21:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a23:	83 ec 0c             	sub    esp,0xc
c0015a26:	57                   	push   edi
c0015a27:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a2a:	83 c4 10             	add    esp,0x10
c0015a2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a31:	85 c0                	test   eax,eax
c0015a33:	0f 95 c0             	setne  al
c0015a36:	31 d2                	xor    edx,edx
c0015a38:	0f b6 c0             	movzx  eax,al
c0015a3b:	f7 d8                	neg    eax
c0015a3d:	83 d2 00             	adc    edx,0x0
c0015a40:	83 c4 20             	add    esp,0x20
c0015a43:	f7 da                	neg    edx
c0015a45:	5b                   	pop    ebx
c0015a46:	5e                   	pop    esi
c0015a47:	5f                   	pop    edi
c0015a48:	c3                   	ret    
c0015a49:	83 c4 20             	add    esp,0x20
c0015a4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a51:	5b                   	pop    ebx
c0015a52:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a57:	5e                   	pop    esi
c0015a58:	5f                   	pop    edi
c0015a59:	c3                   	ret    

c0015a5a <sysCallClose(regs*)>:
c0015a5a:	53                   	push   ebx
c0015a5b:	83 ec 08             	sub    esp,0x8
c0015a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a62:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a65:	83 f8 02             	cmp    eax,0x2
c0015a68:	76 41                	jbe    c0015aab <sysCallClose(regs*)+0x51>
c0015a6a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015a70:	83 fa 01             	cmp    edx,0x1
c0015a73:	76 2d                	jbe    c0015aa2 <sysCallClose(regs*)+0x48>
c0015a75:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a7a:	77 2f                	ja     c0015aab <sysCallClose(regs*)+0x51>
c0015a7c:	83 ec 0c             	sub    esp,0xc
c0015a7f:	50                   	push   eax
c0015a80:	e8 6a 5b ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c0015a85:	89 c3                	mov    ebx,eax
c0015a87:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a8a:	e8 09 76 ff ff       	call   c000d098 <File::close()>
c0015a8f:	83 c4 10             	add    esp,0x10
c0015a92:	85 db                	test   ebx,ebx
c0015a94:	74 0c                	je     c0015aa2 <sysCallClose(regs*)+0x48>
c0015a96:	83 ec 0c             	sub    esp,0xc
c0015a99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a9b:	53                   	push   ebx
c0015a9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a9f:	83 c4 10             	add    esp,0x10
c0015aa2:	31 c0                	xor    eax,eax
c0015aa4:	31 d2                	xor    edx,edx
c0015aa6:	83 c4 08             	add    esp,0x8
c0015aa9:	5b                   	pop    ebx
c0015aaa:	c3                   	ret    
c0015aab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ab0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ab5:	83 c4 08             	add    esp,0x8
c0015ab8:	5b                   	pop    ebx
c0015ab9:	c3                   	ret    

c0015aba <sysCallOpenDir(regs*)>:
c0015aba:	56                   	push   esi
c0015abb:	53                   	push   ebx
c0015abc:	53                   	push   ebx
c0015abd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ac1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015ac4:	85 f6                	test   esi,esi
c0015ac6:	74 59                	je     c0015b21 <sysCallOpenDir(regs*)+0x67>
c0015ac8:	83 ec 0c             	sub    esp,0xc
c0015acb:	68 14 01 00 00       	push   0x114
c0015ad0:	e8 ee 3e ff ff       	call   c00099c3 <malloc>
c0015ad5:	83 c4 0c             	add    esp,0xc
c0015ad8:	89 c6                	mov    esi,eax
c0015ada:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015adf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ae2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ae5:	56                   	push   esi
c0015ae6:	e8 97 79 ff ff       	call   c000d482 <Directory::Directory(char const*, Process*)>
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	85 f6                	test   esi,esi
c0015af0:	74 2f                	je     c0015b21 <sysCallOpenDir(regs*)+0x67>
c0015af2:	83 ec 0c             	sub    esp,0xc
c0015af5:	56                   	push   esi
c0015af6:	e8 eb 79 ff ff       	call   c000d4e6 <Directory::open()>
c0015afb:	83 c4 10             	add    esp,0x10
c0015afe:	85 c0                	test   eax,eax
c0015b00:	75 1f                	jne    c0015b21 <sysCallOpenDir(regs*)+0x67>
c0015b02:	83 ec 0c             	sub    esp,0xc
c0015b05:	56                   	push   esi
c0015b06:	e8 ef 57 ff ff       	call   c000b2fa <UnixFile::getFileDescriptor()>
c0015b0b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b0e:	83 c4 10             	add    esp,0x10
c0015b11:	89 02                	mov    DWORD PTR [edx],eax
c0015b13:	c1 f8 1f             	sar    eax,0x1f
c0015b16:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b19:	31 c0                	xor    eax,eax
c0015b1b:	59                   	pop    ecx
c0015b1c:	31 d2                	xor    edx,edx
c0015b1e:	5b                   	pop    ebx
c0015b1f:	5e                   	pop    esi
c0015b20:	c3                   	ret    
c0015b21:	59                   	pop    ecx
c0015b22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b2c:	5b                   	pop    ebx
c0015b2d:	5e                   	pop    esi
c0015b2e:	c3                   	ret    

c0015b2f <sysCallCloseDir(regs*)>:
c0015b2f:	53                   	push   ebx
c0015b30:	83 ec 08             	sub    esp,0x8
c0015b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b37:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b3a:	8d 50 fd             	lea    edx,[eax-0x3]
c0015b3d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015b43:	77 2f                	ja     c0015b74 <sysCallCloseDir(regs*)+0x45>
c0015b45:	83 ec 0c             	sub    esp,0xc
c0015b48:	50                   	push   eax
c0015b49:	e8 a1 5a ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c0015b4e:	89 c3                	mov    ebx,eax
c0015b50:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b53:	e8 ea 79 ff ff       	call   c000d542 <Directory::close()>
c0015b58:	83 c4 10             	add    esp,0x10
c0015b5b:	85 db                	test   ebx,ebx
c0015b5d:	74 0c                	je     c0015b6b <sysCallCloseDir(regs*)+0x3c>
c0015b5f:	83 ec 0c             	sub    esp,0xc
c0015b62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b64:	53                   	push   ebx
c0015b65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b68:	83 c4 10             	add    esp,0x10
c0015b6b:	31 c0                	xor    eax,eax
c0015b6d:	31 d2                	xor    edx,edx
c0015b6f:	83 c4 08             	add    esp,0x8
c0015b72:	5b                   	pop    ebx
c0015b73:	c3                   	ret    
c0015b74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b79:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b7e:	83 c4 08             	add    esp,0x8
c0015b81:	5b                   	pop    ebx
c0015b82:	c3                   	ret    

c0015b83 <sysCallMakeDir(regs*)>:
c0015b83:	56                   	push   esi
c0015b84:	53                   	push   ebx
c0015b85:	83 ec 10             	sub    esp,0x10
c0015b88:	68 14 01 00 00       	push   0x114
c0015b8d:	e8 31 3e ff ff       	call   c00099c3 <malloc>
c0015b92:	83 c4 0c             	add    esp,0xc
c0015b95:	89 c3                	mov    ebx,eax
c0015b97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b9c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ba3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015ba6:	53                   	push   ebx
c0015ba7:	e8 d6 78 ff ff       	call   c000d482 <Directory::Directory(char const*, Process*)>
c0015bac:	83 c4 10             	add    esp,0x10
c0015baf:	85 db                	test   ebx,ebx
c0015bb1:	74 32                	je     c0015be5 <sysCallMakeDir(regs*)+0x62>
c0015bb3:	83 ec 0c             	sub    esp,0xc
c0015bb6:	53                   	push   ebx
c0015bb7:	e8 0a 7b ff ff       	call   c000d6c6 <Directory::create()>
c0015bbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bbf:	89 c6                	mov    esi,eax
c0015bc1:	e8 7c 79 ff ff       	call   c000d542 <Directory::close()>
c0015bc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bcb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bce:	83 c4 10             	add    esp,0x10
c0015bd1:	31 c0                	xor    eax,eax
c0015bd3:	59                   	pop    ecx
c0015bd4:	85 f6                	test   esi,esi
c0015bd6:	5b                   	pop    ebx
c0015bd7:	0f 95 c0             	setne  al
c0015bda:	5e                   	pop    esi
c0015bdb:	31 d2                	xor    edx,edx
c0015bdd:	f7 d8                	neg    eax
c0015bdf:	83 d2 00             	adc    edx,0x0
c0015be2:	f7 da                	neg    edx
c0015be4:	c3                   	ret    
c0015be5:	59                   	pop    ecx
c0015be6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015beb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bf0:	5b                   	pop    ebx
c0015bf1:	5e                   	pop    esi
c0015bf2:	c3                   	ret    

c0015bf3 <sysCallWait(regs*)>:
c0015bf3:	83 ec 10             	sub    esp,0x10
c0015bf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bfa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015bfd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c00:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c03:	e8 fc 24 00 00       	call   c0018104 <waitTask(int, int*, int)>
c0015c08:	83 c4 1c             	add    esp,0x1c
c0015c0b:	99                   	cdq    
c0015c0c:	c3                   	ret    

c0015c0d <sysCallNotImpl(regs*)>:
c0015c0d:	83 ec 18             	sub    esp,0x18
c0015c10:	68 a9 43 02 c0       	push   0xc00243a9
c0015c15:	e8 f1 e6 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0015c1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c1f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c24:	83 c4 1c             	add    esp,0x1c
c0015c27:	c3                   	ret    

c0015c28 <sysPanic(regs*)>:
c0015c28:	83 ec 18             	sub    esp,0x18
c0015c2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c2f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c32:	e8 d4 e6 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0015c37:	b8 01 00 00 00       	mov    eax,0x1
c0015c3c:	31 d2                	xor    edx,edx
c0015c3e:	83 c4 1c             	add    esp,0x1c
c0015c41:	c3                   	ret    

c0015c42 <sysCallRmdir(regs*)>:
c0015c42:	56                   	push   esi
c0015c43:	53                   	push   ebx
c0015c44:	83 ec 20             	sub    esp,0x20
c0015c47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c4b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c4e:	68 14 01 00 00       	push   0x114
c0015c53:	e8 6b 3d ff ff       	call   c00099c3 <malloc>
c0015c58:	83 c4 0c             	add    esp,0xc
c0015c5b:	89 c3                	mov    ebx,eax
c0015c5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c62:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c65:	56                   	push   esi
c0015c66:	53                   	push   ebx
c0015c67:	e8 6a 73 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0015c6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c6f:	e8 3e 75 ff ff       	call   c000d1b2 <File::unlink()>
c0015c74:	83 c4 10             	add    esp,0x10
c0015c77:	85 db                	test   ebx,ebx
c0015c79:	74 14                	je     c0015c8f <sysCallRmdir(regs*)+0x4d>
c0015c7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c7f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c81:	83 ec 0c             	sub    esp,0xc
c0015c84:	53                   	push   ebx
c0015c85:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015c88:	83 c4 10             	add    esp,0x10
c0015c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c8f:	85 c0                	test   eax,eax
c0015c91:	0f 95 c0             	setne  al
c0015c94:	31 d2                	xor    edx,edx
c0015c96:	0f b6 c0             	movzx  eax,al
c0015c99:	f7 d8                	neg    eax
c0015c9b:	83 d2 00             	adc    edx,0x0
c0015c9e:	83 c4 14             	add    esp,0x14
c0015ca1:	f7 da                	neg    edx
c0015ca3:	5b                   	pop    ebx
c0015ca4:	5e                   	pop    esi
c0015ca5:	c3                   	ret    

c0015ca6 <sysCallUnlink(regs*)>:
c0015ca6:	56                   	push   esi
c0015ca7:	53                   	push   ebx
c0015ca8:	83 ec 20             	sub    esp,0x20
c0015cab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015caf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015cb2:	68 14 01 00 00       	push   0x114
c0015cb7:	e8 07 3d ff ff       	call   c00099c3 <malloc>
c0015cbc:	83 c4 0c             	add    esp,0xc
c0015cbf:	89 c3                	mov    ebx,eax
c0015cc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cc6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015cc9:	56                   	push   esi
c0015cca:	53                   	push   ebx
c0015ccb:	e8 06 73 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0015cd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cd3:	e8 da 74 ff ff       	call   c000d1b2 <File::unlink()>
c0015cd8:	83 c4 10             	add    esp,0x10
c0015cdb:	85 db                	test   ebx,ebx
c0015cdd:	74 14                	je     c0015cf3 <sysCallUnlink(regs*)+0x4d>
c0015cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ce3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ce5:	83 ec 0c             	sub    esp,0xc
c0015ce8:	53                   	push   ebx
c0015ce9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015cec:	83 c4 10             	add    esp,0x10
c0015cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cf3:	85 c0                	test   eax,eax
c0015cf5:	0f 95 c0             	setne  al
c0015cf8:	31 d2                	xor    edx,edx
c0015cfa:	0f b6 c0             	movzx  eax,al
c0015cfd:	f7 d8                	neg    eax
c0015cff:	83 d2 00             	adc    edx,0x0
c0015d02:	83 c4 14             	add    esp,0x14
c0015d05:	f7 da                	neg    edx
c0015d07:	5b                   	pop    ebx
c0015d08:	5e                   	pop    esi
c0015d09:	c3                   	ret    

c0015d0a <sysCallGetArgv(regs*)>:
c0015d0a:	83 ec 0c             	sub    esp,0xc
c0015d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d11:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d14:	85 c0                	test   eax,eax
c0015d16:	78 2b                	js     c0015d43 <sysCallGetArgv(regs*)+0x39>
c0015d18:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d1e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d21:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015d27:	7d 1a                	jge    c0015d43 <sysCallGetArgv(regs*)+0x39>
c0015d29:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015d30:	85 c0                	test   eax,eax
c0015d32:	74 17                	je     c0015d4b <sysCallGetArgv(regs*)+0x41>
c0015d34:	83 ec 08             	sub    esp,0x8
c0015d37:	50                   	push   eax
c0015d38:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015d3b:	e8 00 aa fe ff       	call   c0000740 <strcpy>
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	31 c0                	xor    eax,eax
c0015d45:	31 d2                	xor    edx,edx
c0015d47:	83 c4 0c             	add    esp,0xc
c0015d4a:	c3                   	ret    
c0015d4b:	b8 01 00 00 00       	mov    eax,0x1
c0015d50:	31 d2                	xor    edx,edx
c0015d52:	83 c4 0c             	add    esp,0xc
c0015d55:	c3                   	ret    

c0015d56 <sysCallTTYName(regs*)>:
c0015d56:	56                   	push   esi
c0015d57:	53                   	push   ebx
c0015d58:	53                   	push   ebx
c0015d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d5d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015d60:	85 c0                	test   eax,eax
c0015d62:	74 5f                	je     c0015dc3 <sysCallTTYName(regs*)+0x6d>
c0015d64:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d67:	83 f8 02             	cmp    eax,0x2
c0015d6a:	77 3e                	ja     c0015daa <sysCallTTYName(regs*)+0x54>
c0015d6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d74:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015d7a:	85 db                	test   ebx,ebx
c0015d7c:	74 45                	je     c0015dc3 <sysCallTTYName(regs*)+0x6d>
c0015d7e:	83 ec 0c             	sub    esp,0xc
c0015d81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d83:	53                   	push   ebx
c0015d84:	ff 10                	call   DWORD PTR [eax]
c0015d86:	83 c4 10             	add    esp,0x10
c0015d89:	84 c0                	test   al,al
c0015d8b:	74 41                	je     c0015dce <sysCallTTYName(regs*)+0x78>
c0015d8d:	83 ec 08             	sub    esp,0x8
c0015d90:	81 c3 82 00 00 00    	add    ebx,0x82
c0015d96:	53                   	push   ebx
c0015d97:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015d9a:	e8 a1 a9 fe ff       	call   c0000740 <strcpy>
c0015d9f:	83 c4 10             	add    esp,0x10
c0015da2:	31 c0                	xor    eax,eax
c0015da4:	59                   	pop    ecx
c0015da5:	31 d2                	xor    edx,edx
c0015da7:	5b                   	pop    ebx
c0015da8:	5e                   	pop    esi
c0015da9:	c3                   	ret    
c0015daa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015daf:	74 bb                	je     c0015d6c <sysCallTTYName(regs*)+0x16>
c0015db1:	83 ec 0c             	sub    esp,0xc
c0015db4:	50                   	push   eax
c0015db5:	e8 35 58 ff ff       	call   c000b5ef <getFromFileDescriptor(int)>
c0015dba:	83 c4 10             	add    esp,0x10
c0015dbd:	89 c3                	mov    ebx,eax
c0015dbf:	85 db                	test   ebx,ebx
c0015dc1:	75 bb                	jne    c0015d7e <sysCallTTYName(regs*)+0x28>
c0015dc3:	59                   	pop    ecx
c0015dc4:	b8 01 00 00 00       	mov    eax,0x1
c0015dc9:	31 d2                	xor    edx,edx
c0015dcb:	5b                   	pop    ebx
c0015dcc:	5e                   	pop    esi
c0015dcd:	c3                   	ret    
c0015dce:	59                   	pop    ecx
c0015dcf:	b8 02 00 00 00       	mov    eax,0x2
c0015dd4:	31 d2                	xor    edx,edx
c0015dd6:	5b                   	pop    ebx
c0015dd7:	5e                   	pop    esi
c0015dd8:	c3                   	ret    

c0015dd9 <sysCallUSleep(regs*)>:
c0015dd9:	83 ec 1c             	sub    esp,0x1c
c0015ddc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015de0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015de3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015de6:	6a 00                	push   0x0
c0015de8:	6a 64                	push   0x64
c0015dea:	52                   	push   edx
c0015deb:	50                   	push   eax
c0015dec:	e8 c3 b0 00 00       	call   c0020eb4 <__udivdi3>
c0015df1:	83 c4 14             	add    esp,0x14
c0015df4:	50                   	push   eax
c0015df5:	e8 da 23 00 00       	call   c00181d4 <milliTenthSleep(unsigned int)>
c0015dfa:	31 c0                	xor    eax,eax
c0015dfc:	31 d2                	xor    edx,edx
c0015dfe:	83 c4 1c             	add    esp,0x1c
c0015e01:	c3                   	ret    

c0015e02 <sysCallSpawn(regs*)>:
c0015e02:	56                   	push   esi
c0015e03:	53                   	push   ebx
c0015e04:	50                   	push   eax
c0015e05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e09:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015e0c:	85 c0                	test   eax,eax
c0015e0e:	75 08                	jne    c0015e18 <sysCallSpawn(regs*)+0x16>
c0015e10:	59                   	pop    ecx
c0015e11:	31 c0                	xor    eax,eax
c0015e13:	31 d2                	xor    edx,edx
c0015e15:	5b                   	pop    ebx
c0015e16:	5e                   	pop    esi
c0015e17:	c3                   	ret    
c0015e18:	83 ec 0c             	sub    esp,0xc
c0015e1b:	68 1f 07 00 00       	push   0x71f
c0015e20:	e8 9e 3b ff ff       	call   c00099c3 <malloc>
c0015e25:	83 c4 10             	add    esp,0x10
c0015e28:	89 c6                	mov    esi,eax
c0015e2a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015e2d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e30:	85 c0                	test   eax,eax
c0015e32:	75 32                	jne    c0015e66 <sysCallSpawn(regs*)+0x64>
c0015e34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e3c:	52                   	push   edx
c0015e3d:	50                   	push   eax
c0015e3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e41:	56                   	push   esi
c0015e42:	e8 85 1a 00 00       	call   c00178cc <Process::Process(char const*, Process*, char**)>
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015e51:	75 bd                	jne    c0015e10 <sysCallSpawn(regs*)+0xe>
c0015e53:	83 ec 0c             	sub    esp,0xc
c0015e56:	56                   	push   esi
c0015e57:	e8 5c 1f 00 00       	call   c0017db8 <Process::createUserThread()>
c0015e5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e5e:	83 c4 10             	add    esp,0x10
c0015e61:	99                   	cdq    
c0015e62:	59                   	pop    ecx
c0015e63:	5b                   	pop    ebx
c0015e64:	5e                   	pop    esi
c0015e65:	c3                   	ret    
c0015e66:	31 c0                	xor    eax,eax
c0015e68:	eb d2                	jmp    c0015e3c <sysCallSpawn(regs*)+0x3a>

c0015e6a <sysCallGetEnv(regs*)>:
c0015e6a:	57                   	push   edi
c0015e6b:	56                   	push   esi
c0015e6c:	53                   	push   ebx
c0015e6d:	83 ec 1c             	sub    esp,0x1c
c0015e70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e79:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015e7c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015e7f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015e82:	e8 d0 e3 ff ff       	call   c0014257 <Krnl::getProcessTotalEnvCount(Process*)>
c0015e87:	83 c4 10             	add    esp,0x10
c0015e8a:	39 c7                	cmp    edi,eax
c0015e8c:	7c 14                	jl     c0015ea2 <sysCallGetEnv(regs*)+0x38>
c0015e8e:	85 f6                	test   esi,esi
c0015e90:	75 0b                	jne    c0015e9d <sysCallGetEnv(regs*)+0x33>
c0015e92:	83 c4 10             	add    esp,0x10
c0015e95:	31 c0                	xor    eax,eax
c0015e97:	5b                   	pop    ebx
c0015e98:	31 d2                	xor    edx,edx
c0015e9a:	5e                   	pop    esi
c0015e9b:	5f                   	pop    edi
c0015e9c:	c3                   	ret    
c0015e9d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ea0:	eb f0                	jmp    c0015e92 <sysCallGetEnv(regs*)+0x28>
c0015ea2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015ea6:	52                   	push   edx
c0015ea7:	57                   	push   edi
c0015ea8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015eae:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015eb1:	50                   	push   eax
c0015eb2:	e8 c0 e3 ff ff       	call   c0014277 <Krnl::getProcessEnvPair(Process*, int)>
c0015eb7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015eba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ebe:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015ec2:	83 c4 0c             	add    esp,0xc
c0015ec5:	85 c9                	test   ecx,ecx
c0015ec7:	75 23                	jne    c0015eec <sysCallGetEnv(regs*)+0x82>
c0015ec9:	83 ec 0c             	sub    esp,0xc
c0015ecc:	50                   	push   eax
c0015ecd:	e8 ce a7 fe ff       	call   c00006a0 <strlen>
c0015ed2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ed5:	89 c3                	mov    ebx,eax
c0015ed7:	e8 c4 a7 fe ff       	call   c00006a0 <strlen>
c0015edc:	83 c4 10             	add    esp,0x10
c0015edf:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015ee3:	83 c4 10             	add    esp,0x10
c0015ee6:	31 d2                	xor    edx,edx
c0015ee8:	5b                   	pop    ebx
c0015ee9:	5e                   	pop    esi
c0015eea:	5f                   	pop    edi
c0015eeb:	c3                   	ret    
c0015eec:	83 ec 08             	sub    esp,0x8
c0015eef:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ef2:	50                   	push   eax
c0015ef3:	56                   	push   esi
c0015ef4:	e8 47 a8 fe ff       	call   c0000740 <strcpy>
c0015ef9:	58                   	pop    eax
c0015efa:	5a                   	pop    edx
c0015efb:	68 c3 43 02 c0       	push   0xc00243c3
c0015f00:	56                   	push   esi
c0015f01:	e8 7a a9 fe ff       	call   c0000880 <strcat>
c0015f06:	59                   	pop    ecx
c0015f07:	5b                   	pop    ebx
c0015f08:	57                   	push   edi
c0015f09:	56                   	push   esi
c0015f0a:	e8 71 a9 fe ff       	call   c0000880 <strcat>
c0015f0f:	83 c4 10             	add    esp,0x10
c0015f12:	e9 7b ff ff ff       	jmp    c0015e92 <sysCallGetEnv(regs*)+0x28>

c0015f17 <sysAppSettings(regs*)>:
c0015f17:	57                   	push   edi
c0015f18:	56                   	push   esi
c0015f19:	56                   	push   esi
c0015f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f1e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f21:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015f27:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015f2c:	66 3d c0 09          	cmp    ax,0x9c0
c0015f30:	75 2e                	jne    c0015f60 <sysAppSettings(regs*)+0x49>
c0015f32:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015f38:	83 e0 1f             	and    eax,0x1f
c0015f3b:	3c 01                	cmp    al,0x1
c0015f3d:	74 2c                	je     c0015f6b <sysAppSettings(regs*)+0x54>
c0015f3f:	3c 07                	cmp    al,0x7
c0015f41:	0f 84 b3 00 00 00    	je     c0015ffa <sysAppSettings(regs*)+0xe3>
c0015f47:	84 c0                	test   al,al
c0015f49:	0f 84 d2 00 00 00    	je     c0016021 <sysAppSettings(regs*)+0x10a>
c0015f4f:	3c 08                	cmp    al,0x8
c0015f51:	74 63                	je     c0015fb6 <sysAppSettings(regs*)+0x9f>
c0015f53:	59                   	pop    ecx
c0015f54:	0f b6 c0             	movzx  eax,al
c0015f57:	5e                   	pop    esi
c0015f58:	05 e8 03 00 00       	add    eax,0x3e8
c0015f5d:	5f                   	pop    edi
c0015f5e:	99                   	cdq    
c0015f5f:	c3                   	ret    
c0015f60:	b8 01 00 00 00       	mov    eax,0x1
c0015f65:	59                   	pop    ecx
c0015f66:	31 d2                	xor    edx,edx
c0015f68:	5e                   	pop    esi
c0015f69:	5f                   	pop    edi
c0015f6a:	c3                   	ret    
c0015f6b:	50                   	push   eax
c0015f6c:	68 00 01 00 00       	push   0x100
c0015f71:	6a 00                	push   0x0
c0015f73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f7b:	83 c0 0c             	add    eax,0xc
c0015f7e:	50                   	push   eax
c0015f7f:	e8 00 a7 fe ff       	call   c0000684 <memset>
c0015f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f89:	b9 ff 00 00 00       	mov    ecx,0xff
c0015f8e:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0015f91:	83 c7 0c             	add    edi,0xc
c0015f94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f9b:	5a                   	pop    edx
c0015f9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f9f:	59                   	pop    ecx
c0015fa0:	8d 50 0c             	lea    edx,[eax+0xc]
c0015fa3:	52                   	push   edx
c0015fa4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015faa:	e8 63 47 ff ff       	call   c000a712 <VgaText::setTitle(char*)>
c0015faf:	83 c4 10             	add    esp,0x10
c0015fb2:	31 c0                	xor    eax,eax
c0015fb4:	eb af                	jmp    c0015f65 <sysAppSettings(regs*)+0x4e>
c0015fb6:	83 ec 08             	sub    esp,0x8
c0015fb9:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fbf:	83 e0 0f             	and    eax,0xf
c0015fc2:	50                   	push   eax
c0015fc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fcb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fd1:	e8 2c 47 ff ff       	call   c000a702 <VgaText::setTitleColour(VgaColour)>
c0015fd6:	5f                   	pop    edi
c0015fd7:	58                   	pop    eax
c0015fd8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fde:	c1 e8 04             	shr    eax,0x4
c0015fe1:	83 e0 0f             	and    eax,0xf
c0015fe4:	50                   	push   eax
c0015fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015ff3:	e8 fa 46 ff ff       	call   c000a6f2 <VgaText::setTitleTextColour(VgaColour)>
c0015ff8:	eb b5                	jmp    c0015faf <sysAppSettings(regs*)+0x98>
c0015ffa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016002:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016008:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001600e:	c0 e8 06             	shr    al,0x6
c0016011:	83 e0 01             	and    eax,0x1
c0016014:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001601a:	31 c0                	xor    eax,eax
c001601c:	e9 44 ff ff ff       	jmp    c0015f65 <sysAppSettings(regs*)+0x4e>
c0016021:	b8 02 00 00 00       	mov    eax,0x2
c0016026:	e9 3a ff ff ff       	jmp    c0015f65 <sysAppSettings(regs*)+0x4e>

c001602b <sysSetFatAttrib(regs*)>:
c001602b:	57                   	push   edi
c001602c:	56                   	push   esi
c001602d:	53                   	push   ebx
c001602e:	83 ec 1c             	sub    esp,0x1c
c0016031:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016035:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016038:	68 14 01 00 00       	push   0x114
c001603d:	e8 81 39 ff ff       	call   c00099c3 <malloc>
c0016042:	83 c4 0c             	add    esp,0xc
c0016045:	89 c3                	mov    ebx,eax
c0016047:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001604c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001604f:	57                   	push   edi
c0016050:	53                   	push   ebx
c0016051:	e8 80 6f ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0016056:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016059:	83 c4 0c             	add    esp,0xc
c001605c:	0f b6 d4             	movzx  edx,ah
c001605f:	0f b6 c0             	movzx  eax,al
c0016062:	52                   	push   edx
c0016063:	50                   	push   eax
c0016064:	53                   	push   ebx
c0016065:	e8 e2 71 ff ff       	call   c000d24c <File::chfatattr(unsigned char, unsigned char)>
c001606a:	83 c4 10             	add    esp,0x10
c001606d:	85 db                	test   ebx,ebx
c001606f:	74 14                	je     c0016085 <sysSetFatAttrib(regs*)+0x5a>
c0016071:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016075:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016077:	83 ec 0c             	sub    esp,0xc
c001607a:	53                   	push   ebx
c001607b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001607e:	83 c4 10             	add    esp,0x10
c0016081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016085:	85 c0                	test   eax,eax
c0016087:	0f 95 c0             	setne  al
c001608a:	31 d2                	xor    edx,edx
c001608c:	0f b6 c0             	movzx  eax,al
c001608f:	f7 d8                	neg    eax
c0016091:	83 d2 00             	adc    edx,0x0
c0016094:	83 c4 10             	add    esp,0x10
c0016097:	f7 da                	neg    edx
c0016099:	5b                   	pop    ebx
c001609a:	5e                   	pop    esi
c001609b:	5f                   	pop    edi
c001609c:	c3                   	ret    

c001609d <sysPipe(regs*)>:
c001609d:	57                   	push   edi
c001609e:	56                   	push   esi
c001609f:	53                   	push   ebx
c00160a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00160aa:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00160ad:	6a 20                	push   0x20
c00160af:	e8 0f 39 ff ff       	call   c00099c3 <malloc>
c00160b4:	89 c3                	mov    ebx,eax
c00160b6:	58                   	pop    eax
c00160b7:	5a                   	pop    edx
c00160b8:	68 00 50 00 00       	push   0x5000
c00160bd:	53                   	push   ebx
c00160be:	e8 c7 43 ff ff       	call   c000a48a <Pipe::Pipe(int)>
c00160c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160c6:	e8 2f 52 ff ff       	call   c000b2fa <UnixFile::getFileDescriptor()>
c00160cb:	89 07                	mov    DWORD PTR [edi],eax
c00160cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160d0:	e8 25 52 ff ff       	call   c000b2fa <UnixFile::getFileDescriptor()>
c00160d5:	83 c4 10             	add    esp,0x10
c00160d8:	89 06                	mov    DWORD PTR [esi],eax
c00160da:	31 d2                	xor    edx,edx
c00160dc:	5b                   	pop    ebx
c00160dd:	31 c0                	xor    eax,eax
c00160df:	5e                   	pop    esi
c00160e0:	5f                   	pop    edi
c00160e1:	c3                   	ret    

c00160e2 <sysGetUnixTime(regs*)>:
c00160e2:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00160e7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160f1:	e9 d4 78 ff ff       	jmp    c000d9ca <Clock::timeInSecondsLocal()>

c00160f6 <string_ends_with(char const*, char const*)>:
c00160f6:	57                   	push   edi
c00160f7:	56                   	push   esi
c00160f8:	53                   	push   ebx
c00160f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160fd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016101:	83 ec 0c             	sub    esp,0xc
c0016104:	53                   	push   ebx
c0016105:	e8 96 a5 fe ff       	call   c00006a0 <strlen>
c001610a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001610d:	89 c6                	mov    esi,eax
c001610f:	e8 8c a5 fe ff       	call   c00006a0 <strlen>
c0016114:	83 c4 10             	add    esp,0x10
c0016117:	39 c6                	cmp    esi,eax
c0016119:	7d 06                	jge    c0016121 <string_ends_with(char const*, char const*)+0x2b>
c001611b:	5b                   	pop    ebx
c001611c:	31 c0                	xor    eax,eax
c001611e:	5e                   	pop    esi
c001611f:	5f                   	pop    edi
c0016120:	c3                   	ret    
c0016121:	83 ec 08             	sub    esp,0x8
c0016124:	29 c6                	sub    esi,eax
c0016126:	57                   	push   edi
c0016127:	01 f3                	add    ebx,esi
c0016129:	53                   	push   ebx
c001612a:	e8 9d a6 fe ff       	call   c00007cc <strcmp>
c001612f:	83 c4 10             	add    esp,0x10
c0016132:	85 c0                	test   eax,eax
c0016134:	5b                   	pop    ebx
c0016135:	0f 94 c0             	sete   al
c0016138:	5e                   	pop    esi
c0016139:	0f b6 c0             	movzx  eax,al
c001613c:	5f                   	pop    edi
c001613d:	c3                   	ret    

c001613e <sysCallOpen(regs*)>:
c001613e:	56                   	push   esi
c001613f:	53                   	push   ebx
c0016140:	81 ec 04 01 00 00    	sub    esp,0x104
c0016146:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001614d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016150:	85 c9                	test   ecx,ecx
c0016152:	0f 84 ad 01 00 00    	je     c0016305 <sysCallOpen(regs*)+0x1c7>
c0016158:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001615b:	85 c0                	test   eax,eax
c001615d:	0f 84 a2 01 00 00    	je     c0016305 <sysCallOpen(regs*)+0x1c7>
c0016163:	52                   	push   edx
c0016164:	68 c5 43 02 c0       	push   0xc00243c5
c0016169:	50                   	push   eax
c001616a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001616e:	56                   	push   esi
c001616f:	e8 b8 6c ff ff       	call   c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)>
c0016174:	89 34 24             	mov    DWORD PTR [esp],esi
c0016177:	e8 24 a5 fe ff       	call   c00006a0 <strlen>
c001617c:	83 c4 10             	add    esp,0x10
c001617f:	48                   	dec    eax
c0016180:	74 1d                	je     c001619f <sysCallOpen(regs*)+0x61>
c0016182:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016185:	eb 0f                	jmp    c0016196 <sysCallOpen(regs*)+0x58>
c0016187:	80 fa 3a             	cmp    dl,0x3a
c001618a:	74 0f                	je     c001619b <sysCallOpen(regs*)+0x5d>
c001618c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016190:	48                   	dec    eax
c0016191:	74 0c                	je     c001619f <sysCallOpen(regs*)+0x61>
c0016193:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016196:	80 fa 2e             	cmp    dl,0x2e
c0016199:	75 ec                	jne    c0016187 <sysCallOpen(regs*)+0x49>
c001619b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001619f:	83 ec 08             	sub    esp,0x8
c00161a2:	68 c9 43 02 c0       	push   0xc00243c9
c00161a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161aa:	e8 47 ff ff ff       	call   c00160f6 <string_ends_with(char const*, char const*)>
c00161af:	83 c4 10             	add    esp,0x10
c00161b2:	85 c0                	test   eax,eax
c00161b4:	74 1d                	je     c00161d3 <sysCallOpen(regs*)+0x95>
c00161b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161b9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00161bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161c6:	81 c4 04 01 00 00    	add    esp,0x104
c00161cc:	31 c0                	xor    eax,eax
c00161ce:	31 d2                	xor    edx,edx
c00161d0:	5b                   	pop    ebx
c00161d1:	5e                   	pop    esi
c00161d2:	c3                   	ret    
c00161d3:	83 ec 08             	sub    esp,0x8
c00161d6:	68 ce 43 02 c0       	push   0xc00243ce
c00161db:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161de:	e8 13 ff ff ff       	call   c00160f6 <string_ends_with(char const*, char const*)>
c00161e3:	83 c4 10             	add    esp,0x10
c00161e6:	85 c0                	test   eax,eax
c00161e8:	75 cc                	jne    c00161b6 <sysCallOpen(regs*)+0x78>
c00161ea:	83 ec 08             	sub    esp,0x8
c00161ed:	68 ca 43 02 c0       	push   0xc00243ca
c00161f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161f5:	e8 d2 a5 fe ff       	call   c00007cc <strcmp>
c00161fa:	83 c4 10             	add    esp,0x10
c00161fd:	85 c0                	test   eax,eax
c00161ff:	74 b5                	je     c00161b6 <sysCallOpen(regs*)+0x78>
c0016201:	83 ec 08             	sub    esp,0x8
c0016204:	68 c9 43 02 c0       	push   0xc00243c9
c0016209:	56                   	push   esi
c001620a:	e8 e7 fe ff ff       	call   c00160f6 <string_ends_with(char const*, char const*)>
c001620f:	83 c4 10             	add    esp,0x10
c0016212:	85 c0                	test   eax,eax
c0016214:	75 a0                	jne    c00161b6 <sysCallOpen(regs*)+0x78>
c0016216:	83 ec 08             	sub    esp,0x8
c0016219:	68 d3 43 02 c0       	push   0xc00243d3
c001621e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016221:	e8 d0 fe ff ff       	call   c00160f6 <string_ends_with(char const*, char const*)>
c0016226:	83 c4 10             	add    esp,0x10
c0016229:	85 c0                	test   eax,eax
c001622b:	0f 85 e7 00 00 00    	jne    c0016318 <sysCallOpen(regs*)+0x1da>
c0016231:	83 ec 08             	sub    esp,0x8
c0016234:	68 d8 43 02 c0       	push   0xc00243d8
c0016239:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001623c:	e8 b5 fe ff ff       	call   c00160f6 <string_ends_with(char const*, char const*)>
c0016241:	83 c4 10             	add    esp,0x10
c0016244:	85 c0                	test   eax,eax
c0016246:	0f 85 cc 00 00 00    	jne    c0016318 <sysCallOpen(regs*)+0x1da>
c001624c:	83 ec 08             	sub    esp,0x8
c001624f:	68 d4 43 02 c0       	push   0xc00243d4
c0016254:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016257:	e8 70 a5 fe ff       	call   c00007cc <strcmp>
c001625c:	83 c4 10             	add    esp,0x10
c001625f:	85 c0                	test   eax,eax
c0016261:	0f 84 b1 00 00 00    	je     c0016318 <sysCallOpen(regs*)+0x1da>
c0016267:	83 ec 08             	sub    esp,0x8
c001626a:	68 d3 43 02 c0       	push   0xc00243d3
c001626f:	56                   	push   esi
c0016270:	e8 81 fe ff ff       	call   c00160f6 <string_ends_with(char const*, char const*)>
c0016275:	83 c4 10             	add    esp,0x10
c0016278:	85 c0                	test   eax,eax
c001627a:	0f 85 98 00 00 00    	jne    c0016318 <sysCallOpen(regs*)+0x1da>
c0016280:	83 ec 0c             	sub    esp,0xc
c0016283:	68 14 01 00 00       	push   0x114
c0016288:	e8 36 37 ff ff       	call   c00099c3 <malloc>
c001628d:	83 c4 0c             	add    esp,0xc
c0016290:	89 c6                	mov    esi,eax
c0016292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016297:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001629a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001629d:	56                   	push   esi
c001629e:	e8 33 6d ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c00162a3:	83 c4 10             	add    esp,0x10
c00162a6:	85 f6                	test   esi,esi
c00162a8:	74 5b                	je     c0016305 <sysCallOpen(regs*)+0x1c7>
c00162aa:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162ad:	0f b6 c2             	movzx  eax,dl
c00162b0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00162b3:	89 d0                	mov    eax,edx
c00162b5:	83 e0 01             	and    eax,0x1
c00162b8:	f6 c2 02             	test   dl,0x2
c00162bb:	74 03                	je     c00162c0 <sysCallOpen(regs*)+0x182>
c00162bd:	83 c8 02             	or     eax,0x2
c00162c0:	f6 c2 04             	test   dl,0x4
c00162c3:	74 03                	je     c00162c8 <sysCallOpen(regs*)+0x18a>
c00162c5:	83 c8 04             	or     eax,0x4
c00162c8:	f6 c2 08             	test   dl,0x8
c00162cb:	74 03                	je     c00162d0 <sysCallOpen(regs*)+0x192>
c00162cd:	83 c8 0a             	or     eax,0xa
c00162d0:	83 e2 10             	and    edx,0x10
c00162d3:	74 03                	je     c00162d8 <sysCallOpen(regs*)+0x19a>
c00162d5:	83 c8 12             	or     eax,0x12
c00162d8:	83 ec 08             	sub    esp,0x8
c00162db:	50                   	push   eax
c00162dc:	56                   	push   esi
c00162dd:	e8 58 6d ff ff       	call   c000d03a <File::open(FileOpenMode)>
c00162e2:	83 c4 10             	add    esp,0x10
c00162e5:	85 c0                	test   eax,eax
c00162e7:	75 1c                	jne    c0016305 <sysCallOpen(regs*)+0x1c7>
c00162e9:	83 ec 0c             	sub    esp,0xc
c00162ec:	56                   	push   esi
c00162ed:	e8 08 50 ff ff       	call   c000b2fa <UnixFile::getFileDescriptor()>
c00162f2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00162f5:	83 c4 10             	add    esp,0x10
c00162f8:	89 02                	mov    DWORD PTR [edx],eax
c00162fa:	c1 f8 1f             	sar    eax,0x1f
c00162fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016300:	e9 c1 fe ff ff       	jmp    c00161c6 <sysCallOpen(regs*)+0x88>
c0016305:	81 c4 04 01 00 00    	add    esp,0x104
c001630b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016310:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016315:	5b                   	pop    ebx
c0016316:	5e                   	pop    esi
c0016317:	c3                   	ret    
c0016318:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001631b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016321:	e9 99 fe ff ff       	jmp    c00161bf <sysCallOpen(regs*)+0x81>

c0016326 <Sys::loadSyscalls()>:
c0016326:	c7 05 80 6c 02 c0 97 55 01 c0 	mov    DWORD PTR ds:0xc0026c80,0xc0015597
c0016330:	c7 05 84 6c 02 c0 8c 51 01 c0 	mov    DWORD PTR ds:0xc0026c84,0xc001518c
c001633a:	c7 05 88 6c 02 c0 7d 53 01 c0 	mov    DWORD PTR ds:0xc0026c88,0xc001537d
c0016344:	c7 05 8c 6c 02 c0 cd 54 01 c0 	mov    DWORD PTR ds:0xc0026c8c,0xc00154cd
c001634e:	c7 05 90 6c 02 c0 15 53 01 c0 	mov    DWORD PTR ds:0xc0026c90,0xc0015315
c0016358:	c7 05 94 6c 02 c0 c3 51 01 c0 	mov    DWORD PTR ds:0xc0026c94,0xc00151c3
c0016362:	c7 05 98 6c 02 c0 a4 51 01 c0 	mov    DWORD PTR ds:0xc0026c98,0xc00151a4
c001636c:	c7 05 9c 6c 02 c0 d2 53 01 c0 	mov    DWORD PTR ds:0xc0026c9c,0xc00153d2
c0016376:	c7 05 a4 6c 02 c0 5a 5a 01 c0 	mov    DWORD PTR ds:0xc0026ca4,0xc0015a5a
c0016380:	c7 05 a0 6c 02 c0 3e 61 01 c0 	mov    DWORD PTR ds:0xc0026ca0,0xc001613e
c001638a:	c7 05 a8 6c 02 c0 ba 5a 01 c0 	mov    DWORD PTR ds:0xc0026ca8,0xc0015aba
c0016394:	c7 05 ac 6c 02 c0 9d 57 01 c0 	mov    DWORD PTR ds:0xc0026cac,0xc001579d
c001639e:	c7 05 b0 6c 02 c0 cf 55 01 c0 	mov    DWORD PTR ds:0xc0026cb0,0xc00155cf
c00163a8:	c7 05 b4 6c 02 c0 d4 55 01 c0 	mov    DWORD PTR ds:0xc0026cb4,0xc00155d4
c00163b2:	c7 05 b8 6c 02 c0 83 5b 01 c0 	mov    DWORD PTR ds:0xc0026cb8,0xc0015b83
c00163bc:	c7 05 bc 6c 02 c0 2f 5b 01 c0 	mov    DWORD PTR ds:0xc0026cbc,0xc0015b2f
c00163c6:	c7 05 c0 6c 02 c0 76 58 01 c0 	mov    DWORD PTR ds:0xc0026cc0,0xc0015876
c00163d0:	c7 05 c4 6c 02 c0 cd 58 01 c0 	mov    DWORD PTR ds:0xc0026cc4,0xc00158cd
c00163da:	c7 05 c8 6c 02 c0 39 59 01 c0 	mov    DWORD PTR ds:0xc0026cc8,0xc0015939
c00163e4:	c7 05 cc 6c 02 c0 d9 55 01 c0 	mov    DWORD PTR ds:0xc0026ccc,0xc00155d9
c00163ee:	c7 05 d0 6c 02 c0 f3 5b 01 c0 	mov    DWORD PTR ds:0xc0026cd0,0xc0015bf3
c00163f8:	c7 05 d4 6c 02 c0 0d 5c 01 c0 	mov    DWORD PTR ds:0xc0026cd4,0xc0015c0d
c0016402:	c7 05 d8 6c 02 c0 0d 5c 01 c0 	mov    DWORD PTR ds:0xc0026cd8,0xc0015c0d
c001640c:	c7 05 dc 6c 02 c0 42 5c 01 c0 	mov    DWORD PTR ds:0xc0026cdc,0xc0015c42
c0016416:	c7 05 e0 6c 02 c0 a6 5c 01 c0 	mov    DWORD PTR ds:0xc0026ce0,0xc0015ca6
c0016420:	c7 05 e4 6c 02 c0 e3 55 01 c0 	mov    DWORD PTR ds:0xc0026ce4,0xc00155e3
c001642a:	c7 05 e8 6c 02 c0 0a 5d 01 c0 	mov    DWORD PTR ds:0xc0026ce8,0xc0015d0a
c0016434:	c7 05 ec 6c 02 c0 5a 57 01 c0 	mov    DWORD PTR ds:0xc0026cec,0xc001575a
c001643e:	c7 05 f0 6c 02 c0 56 5d 01 c0 	mov    DWORD PTR ds:0xc0026cf0,0xc0015d56
c0016448:	c7 05 f4 6c 02 c0 1c 58 01 c0 	mov    DWORD PTR ds:0xc0026cf4,0xc001581c
c0016452:	c7 05 f8 6c 02 c0 d9 5d 01 c0 	mov    DWORD PTR ds:0xc0026cf8,0xc0015dd9
c001645c:	c7 05 fc 6c 02 c0 ab 59 01 c0 	mov    DWORD PTR ds:0xc0026cfc,0xc00159ab
c0016466:	c7 05 00 6d 02 c0 02 5e 01 c0 	mov    DWORD PTR ds:0xc0026d00,0xc0015e02
c0016470:	c7 05 04 6d 02 c0 6a 5e 01 c0 	mov    DWORD PTR ds:0xc0026d04,0xc0015e6a
c001647a:	c7 05 08 6d 02 c0 17 5f 01 c0 	mov    DWORD PTR ds:0xc0026d08,0xc0015f17
c0016484:	c7 05 0c 6d 02 c0 f3 55 01 c0 	mov    DWORD PTR ds:0xc0026d0c,0xc00155f3
c001648e:	c7 05 10 6d 02 c0 5d 56 01 c0 	mov    DWORD PTR ds:0xc0026d10,0xc001565d
c0016498:	c7 05 14 6d 02 c0 a7 56 01 c0 	mov    DWORD PTR ds:0xc0026d14,0xc00156a7
c00164a2:	c7 05 18 6d 02 c0 2b 60 01 c0 	mov    DWORD PTR ds:0xc0026d18,0xc001602b
c00164ac:	c7 05 1c 6d 02 c0 28 5c 01 c0 	mov    DWORD PTR ds:0xc0026d1c,0xc0015c28
c00164b6:	c7 05 20 6d 02 c0 fc 56 01 c0 	mov    DWORD PTR ds:0xc0026d20,0xc00156fc
c00164c0:	c7 05 24 6d 02 c0 9d 60 01 c0 	mov    DWORD PTR ds:0xc0026d24,0xc001609d
c00164ca:	c7 05 28 6d 02 c0 e2 60 01 c0 	mov    DWORD PTR ds:0xc0026d28,0xc00160e2
c00164d4:	c7 05 2c 6d 02 c0 6d 52 01 c0 	mov    DWORD PTR ds:0xc0026d2c,0xc001526d
c00164de:	c7 05 30 6d 02 c0 ee 53 01 c0 	mov    DWORD PTR ds:0xc0026d30,0xc00153ee
c00164e8:	c7 05 34 6d 02 c0 83 54 01 c0 	mov    DWORD PTR ds:0xc0026d34,0xc0015483
c00164f2:	c7 05 38 6d 02 c0 56 51 01 c0 	mov    DWORD PTR ds:0xc0026d38,0xc0015156
c00164fc:	c7 05 3c 6d 02 c0 35 55 01 c0 	mov    DWORD PTR ds:0xc0026d3c,0xc0015535
c0016506:	c7 05 40 6d 02 c0 cf 51 01 c0 	mov    DWORD PTR ds:0xc0026d40,0xc00151cf
c0016510:	c7 05 44 6d 02 c0 e9 51 01 c0 	mov    DWORD PTR ds:0xc0026d44,0xc00151e9
c001651a:	c3                   	ret    

c001651b <Sys::systemCall(regs*, void*)>:
c001651b:	53                   	push   ebx
c001651c:	83 ec 08             	sub    esp,0x8
c001651f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016523:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016526:	83 f8 7f             	cmp    eax,0x7f
c0016529:	77 16                	ja     c0016541 <Sys::systemCall(regs*, void*)+0x26>
c001652b:	8b 14 85 80 6c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9380]
c0016532:	85 d2                	test   edx,edx
c0016534:	74 0b                	je     c0016541 <Sys::systemCall(regs*, void*)+0x26>
c0016536:	83 ec 0c             	sub    esp,0xc
c0016539:	53                   	push   ebx
c001653a:	ff d2                	call   edx
c001653c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001653f:	eb 0d                	jmp    c001654e <Sys::systemCall(regs*, void*)+0x33>
c0016541:	52                   	push   edx
c0016542:	52                   	push   edx
c0016543:	50                   	push   eax
c0016544:	68 dd 43 02 c0       	push   0xc00243dd
c0016549:	e8 1d 65 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001654e:	83 c4 10             	add    esp,0x10
c0016551:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016556:	31 d2                	xor    edx,edx
c0016558:	83 c4 08             	add    esp,0x8
c001655b:	5b                   	pop    ebx
c001655c:	c3                   	ret    

c001655d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001655d:	55                   	push   ebp
c001655e:	57                   	push   edi
c001655f:	56                   	push   esi
c0016560:	53                   	push   ebx
c0016561:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016567:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001656e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016575:	85 c0                	test   eax,eax
c0016577:	0f 95 c1             	setne  cl
c001657a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016582:	0f 94 c2             	sete   dl
c0016585:	84 d1                	test   cl,dl
c0016587:	74 23                	je     c00165ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016589:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001658f:	74 1b                	je     c00165ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016591:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016597:	89 da                	mov    edx,ebx
c0016599:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001659f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00165a5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00165ac:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00165b3:	05 ff 0f 00 00       	add    eax,0xfff
c00165b8:	83 ec 0c             	sub    esp,0xc
c00165bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165bf:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00165c5:	c1 e8 0c             	shr    eax,0xc
c00165c8:	89 fe                	mov    esi,edi
c00165ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00165ce:	c1 ee 0c             	shr    esi,0xc
c00165d1:	6a 01                	push   0x1
c00165d3:	e8 6d 51 ff ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c00165d8:	89 c5                	mov    ebp,eax
c00165da:	58                   	pop    eax
c00165db:	5a                   	pop    edx
c00165dc:	56                   	push   esi
c00165dd:	68 f1 43 02 c0       	push   0xc00243f1
c00165e2:	e8 84 64 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00165e7:	59                   	pop    ecx
c00165e8:	58                   	pop    eax
c00165e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00165ed:	68 03 44 02 c0       	push   0xc0024403
c00165f2:	e8 74 64 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00165f7:	83 c4 10             	add    esp,0x10
c00165fa:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016600:	0f 86 31 01 00 00    	jbe    c0016737 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016606:	c1 e6 0c             	shl    esi,0xc
c0016609:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001660c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001660f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016613:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001661a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001661d:	01 df                	add    edi,ebx
c001661f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016622:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016626:	0f 84 08 01 00 00    	je     c0016734 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001662c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016632:	76 05                	jbe    c0016639 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016634:	bf 00 10 00 00       	mov    edi,0x1000
c0016639:	83 ec 0c             	sub    esp,0xc
c001663c:	31 d2                	xor    edx,edx
c001663e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016645:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016647:	8d 44 24 28          	lea    eax,[esp+0x28]
c001664b:	50                   	push   eax
c001664c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016650:	56                   	push   esi
c0016651:	52                   	push   edx
c0016652:	57                   	push   edi
c0016653:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001665a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001665d:	83 c4 20             	add    esp,0x20
c0016660:	85 c0                	test   eax,eax
c0016662:	74 0a                	je     c001666e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016664:	53                   	push   ebx
c0016665:	53                   	push   ebx
c0016666:	50                   	push   eax
c0016667:	68 15 44 02 c0       	push   0xc0024415
c001666c:	eb 0f                	jmp    c001667d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001666e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016672:	74 20                	je     c0016694 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016674:	51                   	push   ecx
c0016675:	51                   	push   ecx
c0016676:	6a 00                	push   0x0
c0016678:	68 40 44 02 c0       	push   0xc0024440
c001667d:	e8 e9 63 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0016682:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016685:	e8 eb 53 ff ff       	call   c000ba75 <Virt::freeKernelVirtualPages(unsigned long)>
c001668a:	83 c4 10             	add    esp,0x10
c001668d:	31 c0                	xor    eax,eax
c001668f:	e9 68 01 00 00       	jmp    c00167fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016694:	fa                   	cli    
c0016695:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c001669b:	e8 90 37 ff ff       	call   c0009e30 <Phys::allocatePage()>
c00166a0:	6a 07                	push   0x7
c00166a2:	89 c7                	mov    edi,eax
c00166a4:	55                   	push   ebp
c00166a5:	50                   	push   eax
c00166a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166ae:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166b4:	e8 33 57 ff ff       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c00166b9:	83 c4 0c             	add    esp,0xc
c00166bc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00166c3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166c9:	6a 00                	push   0x0
c00166cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166d3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166d9:	e8 68 55 ff ff       	call   c000bc46 <VAS::mapOtherVASIn(bool, VAS*)>
c00166de:	58                   	pop    eax
c00166df:	5a                   	pop    edx
c00166e0:	68 07 0c 00 00       	push   0xc07
c00166e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00166e9:	57                   	push   edi
c00166ea:	89 ef                	mov    edi,ebp
c00166ec:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00166f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166f9:	6a 00                	push   0x0
c00166fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016700:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016703:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016709:	e8 9a 5a ff ff       	call   c000c1a8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001670e:	b9 00 10 00 00       	mov    ecx,0x1000
c0016713:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016715:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c001671a:	83 c4 20             	add    esp,0x20
c001671d:	48                   	dec    eax
c001671e:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0016723:	85 c0                	test   eax,eax
c0016725:	75 01                	jne    c0016728 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016727:	fb                   	sti    
c0016728:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001672f:	e9 df fe ff ff       	jmp    c0016613 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016734:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016737:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001673f:	0f 86 a9 00 00 00    	jbe    c00167ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016745:	fa                   	cli    
c0016746:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c001674c:	51                   	push   ecx
c001674d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016754:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001675a:	6a 00                	push   0x0
c001675c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016761:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016764:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001676a:	e8 d7 54 ff ff       	call   c000bc46 <VAS::mapOtherVASIn(bool, VAS*)>
c001676f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016773:	c1 e6 0c             	shl    esi,0xc
c0016776:	01 de                	add    esi,ebx
c0016778:	83 c4 10             	add    esp,0x10
c001677b:	39 de                	cmp    esi,ebx
c001677d:	74 61                	je     c00167e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001677f:	e8 ac 36 ff ff       	call   c0009e30 <Phys::allocatePage()>
c0016784:	6a 07                	push   0x7
c0016786:	89 c7                	mov    edi,eax
c0016788:	55                   	push   ebp
c0016789:	50                   	push   eax
c001678a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001678f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016792:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016798:	e8 4f 56 ff ff       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c001679d:	58                   	pop    eax
c001679e:	5a                   	pop    edx
c001679f:	68 07 0c 00 00       	push   0xc07
c00167a4:	53                   	push   ebx
c00167a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00167ab:	57                   	push   edi
c00167ac:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00167b3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167b9:	6a 00                	push   0x0
c00167bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167c3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167c9:	e8 da 59 ff ff       	call   c000c1a8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167ce:	83 c4 1c             	add    esp,0x1c
c00167d1:	68 00 10 00 00       	push   0x1000
c00167d6:	6a 00                	push   0x0
c00167d8:	55                   	push   ebp
c00167d9:	e8 a6 9e fe ff       	call   c0000684 <memset>
c00167de:	eb 98                	jmp    c0016778 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00167e0:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00167e5:	48                   	dec    eax
c00167e6:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00167eb:	75 01                	jne    c00167ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00167ed:	fb                   	sti    
c00167ee:	83 ec 0c             	sub    esp,0xc
c00167f1:	55                   	push   ebp
c00167f2:	e8 7e 52 ff ff       	call   c000ba75 <Virt::freeKernelVirtualPages(unsigned long)>
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	b0 01                	mov    al,0x1
c00167fc:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016802:	5b                   	pop    ebx
c0016803:	5e                   	pop    esi
c0016804:	5f                   	pop    edi
c0016805:	5d                   	pop    ebp
c0016806:	c3                   	ret    

c0016807 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016807:	55                   	push   ebp
c0016808:	57                   	push   edi
c0016809:	56                   	push   esi
c001680a:	53                   	push   ebx
c001680b:	83 ec 48             	sub    esp,0x48
c001680e:	68 14 01 00 00       	push   0x114
c0016813:	e8 ab 31 ff ff       	call   c00099c3 <malloc>
c0016818:	83 c4 0c             	add    esp,0xc
c001681b:	89 c6                	mov    esi,eax
c001681d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016821:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016825:	50                   	push   eax
c0016826:	e8 ab 67 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001682b:	58                   	pop    eax
c001682c:	5a                   	pop    edx
c001682d:	6a 01                	push   0x1
c001682f:	56                   	push   esi
c0016830:	e8 05 68 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0016835:	83 c4 10             	add    esp,0x10
c0016838:	85 c0                	test   eax,eax
c001683a:	0f 85 47 01 00 00    	jne    c0016987 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016840:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016848:	83 ec 0c             	sub    esp,0xc
c001684b:	6a 34                	push   0x34
c001684d:	e8 71 31 ff ff       	call   c00099c3 <malloc>
c0016852:	89 c3                	mov    ebx,eax
c0016854:	58                   	pop    eax
c0016855:	8b 06                	mov    eax,DWORD PTR [esi]
c0016857:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001685b:	57                   	push   edi
c001685c:	53                   	push   ebx
c001685d:	6a 00                	push   0x0
c001685f:	6a 34                	push   0x34
c0016861:	56                   	push   esi
c0016862:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016865:	83 c4 20             	add    esp,0x20
c0016868:	85 c0                	test   eax,eax
c001686a:	0f 85 17 01 00 00    	jne    c0016987 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016870:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016876:	0f 85 0b 01 00 00    	jne    c0016987 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001687c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001687f:	85 c0                	test   eax,eax
c0016881:	0f 84 00 01 00 00    	je     c0016987 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016887:	31 d2                	xor    edx,edx
c0016889:	55                   	push   ebp
c001688a:	52                   	push   edx
c001688b:	50                   	push   eax
c001688c:	56                   	push   esi
c001688d:	e8 66 68 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016892:	83 c4 10             	add    esp,0x10
c0016895:	85 c0                	test   eax,eax
c0016897:	0f 85 ea 00 00 00    	jne    c0016987 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001689d:	83 ec 0c             	sub    esp,0xc
c00168a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00168a3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00168ab:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168af:	0f af c2             	imul   eax,edx
c00168b2:	50                   	push   eax
c00168b3:	e8 0b 31 ff ff       	call   c00099c3 <malloc>
c00168b8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00168be:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00168c5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168c9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168cd:	0f af c2             	imul   eax,edx
c00168d0:	99                   	cdq    
c00168d1:	52                   	push   edx
c00168d2:	50                   	push   eax
c00168d3:	56                   	push   esi
c00168d4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00168d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00168da:	83 c4 20             	add    esp,0x20
c00168dd:	85 c0                	test   eax,eax
c00168df:	0f 84 a2 00 00 00    	je     c0016987 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168e5:	31 d2                	xor    edx,edx
c00168e7:	51                   	push   ecx
c00168e8:	52                   	push   edx
c00168e9:	50                   	push   eax
c00168ea:	56                   	push   esi
c00168eb:	e8 08 68 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c00168f0:	83 c4 10             	add    esp,0x10
c00168f3:	85 c0                	test   eax,eax
c00168f5:	0f 85 8c 00 00 00    	jne    c0016987 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168fb:	83 ec 0c             	sub    esp,0xc
c00168fe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016902:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016906:	31 ed                	xor    ebp,ebp
c0016908:	0f af c2             	imul   eax,edx
c001690b:	50                   	push   eax
c001690c:	e8 b2 30 ff ff       	call   c00099c3 <malloc>
c0016911:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016913:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016917:	89 3c 24             	mov    DWORD PTR [esp],edi
c001691a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001691e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016922:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016926:	0f af c2             	imul   eax,edx
c0016929:	99                   	cdq    
c001692a:	52                   	push   edx
c001692b:	50                   	push   eax
c001692c:	56                   	push   esi
c001692d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016930:	83 c4 20             	add    esp,0x20
c0016933:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001693b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001693f:	0f 86 80 00 00 00    	jbe    c00169c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016945:	0f b7 fd             	movzx  edi,bp
c0016948:	c1 e7 05             	shl    edi,0x5
c001694b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001694f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016952:	75 6b                	jne    c00169bf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016954:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016957:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001695b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001695e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016962:	52                   	push   edx
c0016963:	31 d2                	xor    edx,edx
c0016965:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016968:	52                   	push   edx
c0016969:	50                   	push   eax
c001696a:	56                   	push   esi
c001696b:	e8 88 67 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016970:	83 c4 10             	add    esp,0x10
c0016973:	85 c0                	test   eax,eax
c0016975:	74 17                	je     c001698e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016977:	83 ec 0c             	sub    esp,0xc
c001697a:	68 6c 44 02 c0       	push   0xc002446c
c001697f:	e8 e7 60 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0016984:	83 c4 10             	add    esp,0x10
c0016987:	31 c0                	xor    eax,eax
c0016989:	e9 87 00 00 00       	jmp    c0016a15 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001698e:	83 ec 0c             	sub    esp,0xc
c0016991:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016994:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016997:	50                   	push   eax
c0016998:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001699c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169a0:	56                   	push   esi
c00169a1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00169a5:	e8 b3 fb ff ff       	call   c001655d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00169aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169ae:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00169b2:	83 c4 20             	add    esp,0x20
c00169b5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00169b9:	73 04                	jae    c00169bf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169bf:	45                   	inc    ebp
c00169c0:	e9 76 ff ff ff       	jmp    c001693b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00169c5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00169c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00169cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169d1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00169d7:	83 ec 0c             	sub    esp,0xc
c00169da:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00169e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00169e5:	05 00 10 00 00       	add    eax,0x1000
c00169ea:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169f1:	e8 dd 2f ff ff       	call   c00099d3 <free>
c00169f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169f9:	e8 d5 2f ff ff       	call   c00099d3 <free>
c00169fe:	58                   	pop    eax
c00169ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a03:	e8 cb 2f ff ff       	call   c00099d3 <free>
c0016a08:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a0b:	e8 88 66 ff ff       	call   c000d098 <File::close()>
c0016a10:	83 c4 10             	add    esp,0x10
c0016a13:	b0 01                	mov    al,0x1
c0016a15:	83 c4 3c             	add    esp,0x3c
c0016a18:	5b                   	pop    ebx
c0016a19:	5e                   	pop    esi
c0016a1a:	5f                   	pop    edi
c0016a1b:	5d                   	pop    ebp
c0016a1c:	c3                   	ret    

c0016a1d <Thr::runtimeReferenceHelper()>:
c0016a1d:	83 ec 18             	sub    esp,0x18
c0016a20:	68 74 44 02 c0       	push   0xc0024474
c0016a25:	e8 41 60 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0016a2a:	fa                   	cli    
c0016a2b:	83 c4 10             	add    esp,0x10
c0016a2e:	eb fe                	jmp    c0016a2e <Thr::runtimeReferenceHelper()+0x11>

c0016a30 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016a30:	57                   	push   edi
c0016a31:	56                   	push   esi
c0016a32:	53                   	push   ebx
c0016a33:	31 db                	xor    ebx,ebx
c0016a35:	39 1d 20 76 02 c0    	cmp    DWORD PTR ds:0xc0027620,ebx
c0016a3b:	7e 3c                	jle    c0016a79 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016a3d:	8b 34 9d a0 75 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8a60]
c0016a44:	31 ff                	xor    edi,edi
c0016a46:	39 3c 9d a0 74 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8b60],edi
c0016a4d:	7e 27                	jle    c0016a76 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016a4f:	50                   	push   eax
c0016a50:	50                   	push   eax
c0016a51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a55:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a57:	03 04 9d 20 75 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8ae0]
c0016a5e:	50                   	push   eax
c0016a5f:	e8 68 9d fe ff       	call   c00007cc <strcmp>
c0016a64:	83 c4 10             	add    esp,0x10
c0016a67:	85 c0                	test   eax,eax
c0016a69:	75 05                	jne    c0016a70 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016a6b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016a6e:	eb 0b                	jmp    c0016a7b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016a70:	83 c6 10             	add    esi,0x10
c0016a73:	47                   	inc    edi
c0016a74:	eb d0                	jmp    c0016a46 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016a76:	43                   	inc    ebx
c0016a77:	eb bc                	jmp    c0016a35 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016a79:	31 c0                	xor    eax,eax
c0016a7b:	5b                   	pop    ebx
c0016a7c:	5e                   	pop    esi
c0016a7d:	5f                   	pop    edi
c0016a7e:	c3                   	ret    

c0016a7f <Thr::loadKernelSymbolTable(char const*)>:
c0016a7f:	55                   	push   ebp
c0016a80:	57                   	push   edi
c0016a81:	56                   	push   esi
c0016a82:	53                   	push   ebx
c0016a83:	83 ec 68             	sub    esp,0x68
c0016a86:	8b 35 70 76 02 c0    	mov    esi,DWORD PTR ds:0xc0027670
c0016a8c:	68 14 01 00 00       	push   0x114
c0016a91:	e8 2d 2f ff ff       	call   c00099c3 <malloc>
c0016a96:	83 c4 0c             	add    esp,0xc
c0016a99:	89 c3                	mov    ebx,eax
c0016a9b:	56                   	push   esi
c0016a9c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016aa0:	50                   	push   eax
c0016aa1:	e8 30 65 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0016aa6:	5e                   	pop    esi
c0016aa7:	5f                   	pop    edi
c0016aa8:	6a 01                	push   0x1
c0016aaa:	53                   	push   ebx
c0016aab:	e8 8a 65 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0016ab0:	83 c4 10             	add    esp,0x10
c0016ab3:	85 c0                	test   eax,eax
c0016ab5:	74 0a                	je     c0016ac1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016ab7:	83 ec 0c             	sub    esp,0xc
c0016aba:	68 96 44 02 c0       	push   0xc0024496
c0016abf:	eb 34                	jmp    c0016af5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016ac1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016ac9:	83 ec 0c             	sub    esp,0xc
c0016acc:	6a 34                	push   0x34
c0016ace:	e8 f0 2e ff ff       	call   c00099c3 <malloc>
c0016ad3:	59                   	pop    ecx
c0016ad4:	89 c7                	mov    edi,eax
c0016ad6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016ada:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016adc:	56                   	push   esi
c0016add:	57                   	push   edi
c0016ade:	6a 00                	push   0x0
c0016ae0:	6a 34                	push   0x34
c0016ae2:	53                   	push   ebx
c0016ae3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ae6:	83 c4 20             	add    esp,0x20
c0016ae9:	85 c0                	test   eax,eax
c0016aeb:	74 17                	je     c0016b04 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016aed:	83 ec 0c             	sub    esp,0xc
c0016af0:	68 ad 44 02 c0       	push   0xc00244ad
c0016af5:	e8 11 d8 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0016afa:	83 c4 10             	add    esp,0x10
c0016afd:	31 c0                	xor    eax,eax
c0016aff:	e9 31 02 00 00       	jmp    c0016d35 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016b04:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016b0a:	75 e1                	jne    c0016aed <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b0c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b0f:	85 c0                	test   eax,eax
c0016b11:	74 da                	je     c0016aed <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b13:	52                   	push   edx
c0016b14:	31 d2                	xor    edx,edx
c0016b16:	52                   	push   edx
c0016b17:	50                   	push   eax
c0016b18:	53                   	push   ebx
c0016b19:	e8 da 65 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016b1e:	83 c4 10             	add    esp,0x10
c0016b21:	85 c0                	test   eax,eax
c0016b23:	75 c8                	jne    c0016aed <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b25:	83 ec 0c             	sub    esp,0xc
c0016b28:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b30:	31 ed                	xor    ebp,ebp
c0016b32:	0f af c2             	imul   eax,edx
c0016b35:	50                   	push   eax
c0016b36:	e8 88 2e ff ff       	call   c00099c3 <malloc>
c0016b3b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016b3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b41:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b48:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b4c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b50:	0f af c2             	imul   eax,edx
c0016b53:	99                   	cdq    
c0016b54:	52                   	push   edx
c0016b55:	50                   	push   eax
c0016b56:	53                   	push   ebx
c0016b57:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b5a:	83 c4 20             	add    esp,0x20
c0016b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b65:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b6d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b75:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b7d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016b81:	0f 86 aa 00 00 00    	jbe    c0016c31 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016b87:	0f b7 f5             	movzx  esi,bp
c0016b8a:	6b f6 28             	imul   esi,esi,0x28
c0016b8d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016b91:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016b94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b98:	50                   	push   eax
c0016b99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b9d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016ba1:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ba3:	6b c0 28             	imul   eax,eax,0x28
c0016ba6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016baa:	89 d0                	mov    eax,edx
c0016bac:	31 d2                	xor    edx,edx
c0016bae:	52                   	push   edx
c0016baf:	50                   	push   eax
c0016bb0:	53                   	push   ebx
c0016bb1:	e8 42 65 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016bb6:	83 c4 0c             	add    esp,0xc
c0016bb9:	6a 20                	push   0x20
c0016bbb:	6a 00                	push   0x0
c0016bbd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016bc1:	52                   	push   edx
c0016bc2:	e8 bd 9a fe ff       	call   c0000684 <memset>
c0016bc7:	58                   	pop    eax
c0016bc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bca:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016bce:	51                   	push   ecx
c0016bcf:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016bd3:	52                   	push   edx
c0016bd4:	6a 00                	push   0x0
c0016bd6:	6a 1f                	push   0x1f
c0016bd8:	53                   	push   ebx
c0016bd9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bdc:	83 c4 18             	add    esp,0x18
c0016bdf:	68 c4 44 02 c0       	push   0xc00244c4
c0016be4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016be8:	52                   	push   edx
c0016be9:	e8 de 9b fe ff       	call   c00007cc <strcmp>
c0016bee:	83 c4 10             	add    esp,0x10
c0016bf1:	85 c0                	test   eax,eax
c0016bf3:	75 0f                	jne    c0016c04 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016bf5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016bf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c04:	50                   	push   eax
c0016c05:	50                   	push   eax
c0016c06:	68 cc 44 02 c0       	push   0xc00244cc
c0016c0b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016c0f:	50                   	push   eax
c0016c10:	e8 b7 9b fe ff       	call   c00007cc <strcmp>
c0016c15:	83 c4 10             	add    esp,0x10
c0016c18:	85 c0                	test   eax,eax
c0016c1a:	75 0f                	jne    c0016c2b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016c1c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c2b:	45                   	inc    ebp
c0016c2c:	e9 4c ff ff ff       	jmp    c0016b7d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016c31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016c36:	75 10                	jne    c0016c48 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	68 d4 44 02 c0       	push   0xc00244d4
c0016c40:	e8 c6 d6 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016c4d:	75 10                	jne    c0016c5f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016c4f:	83 ec 0c             	sub    esp,0xc
c0016c52:	68 d4 44 02 c0       	push   0xc00244d4
c0016c57:	e8 af d6 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0016c5c:	83 c4 10             	add    esp,0x10
c0016c5f:	31 d2                	xor    edx,edx
c0016c61:	50                   	push   eax
c0016c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c66:	52                   	push   edx
c0016c67:	50                   	push   eax
c0016c68:	53                   	push   ebx
c0016c69:	e8 8a 64 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016c6e:	5a                   	pop    edx
c0016c6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c73:	e8 4b 2d ff ff       	call   c00099c3 <malloc>
c0016c78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c80:	31 c9                	xor    ecx,ecx
c0016c82:	5e                   	pop    esi
c0016c83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c85:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016c89:	55                   	push   ebp
c0016c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8e:	51                   	push   ecx
c0016c8f:	52                   	push   edx
c0016c90:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c94:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016c98:	53                   	push   ebx
c0016c99:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c9c:	83 c4 14             	add    esp,0x14
c0016c9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ca3:	e8 1b 2d ff ff       	call   c00099c3 <malloc>
c0016ca8:	89 c6                	mov    esi,eax
c0016caa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016caf:	56                   	push   esi
c0016cb0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016cb4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016cb8:	51                   	push   ecx
c0016cb9:	52                   	push   edx
c0016cba:	53                   	push   ebx
c0016cbb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cc2:	8b 15 20 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027620
c0016cc8:	83 c4 1c             	add    esp,0x1c
c0016ccb:	c1 e8 04             	shr    eax,0x4
c0016cce:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0016cd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cd9:	31 d2                	xor    edx,edx
c0016cdb:	52                   	push   edx
c0016cdc:	50                   	push   eax
c0016cdd:	53                   	push   ebx
c0016cde:	e8 15 64 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016ce3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016ce5:	31 d2                	xor    edx,edx
c0016ce7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cea:	56                   	push   esi
c0016ceb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cef:	52                   	push   edx
c0016cf0:	50                   	push   eax
c0016cf1:	53                   	push   ebx
c0016cf2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cf5:	83 c4 14             	add    esp,0x14
c0016cf8:	53                   	push   ebx
c0016cf9:	e8 9a 63 ff ff       	call   c000d098 <File::close()>
c0016cfe:	5d                   	pop    ebp
c0016cff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d03:	e8 cb 2c ff ff       	call   c00099d3 <free>
c0016d08:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d0b:	e8 c3 2c ff ff       	call   c00099d3 <free>
c0016d10:	a1 20 76 02 c0       	mov    eax,ds:0xc0027620
c0016d15:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d19:	8d 50 01             	lea    edx,[eax+0x1]
c0016d1c:	89 0c 85 a0 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8a60],ecx
c0016d23:	89 34 85 20 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ae0],esi
c0016d2a:	89 15 20 76 02 c0    	mov    DWORD PTR ds:0xc0027620,edx
c0016d30:	83 c4 10             	add    esp,0x10
c0016d33:	b0 01                	mov    al,0x1
c0016d35:	83 c4 5c             	add    esp,0x5c
c0016d38:	5b                   	pop    ebx
c0016d39:	5e                   	pop    esi
c0016d3a:	5f                   	pop    edi
c0016d3b:	5d                   	pop    ebp
c0016d3c:	c3                   	ret    

c0016d3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016d3d:	55                   	push   ebp
c0016d3e:	57                   	push   edi
c0016d3f:	56                   	push   esi
c0016d40:	53                   	push   ebx
c0016d41:	81 ec 68 03 00 00    	sub    esp,0x368
c0016d47:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016d4e:	8b 1d 70 76 02 c0    	mov    ebx,DWORD PTR ds:0xc0027670
c0016d54:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d58:	68 14 01 00 00       	push   0x114
c0016d5d:	e8 61 2c ff ff       	call   c00099c3 <malloc>
c0016d62:	83 c4 0c             	add    esp,0xc
c0016d65:	89 c5                	mov    ebp,eax
c0016d67:	53                   	push   ebx
c0016d68:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016d6f:	50                   	push   eax
c0016d70:	e8 61 62 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0016d75:	5e                   	pop    esi
c0016d76:	5f                   	pop    edi
c0016d77:	6a 01                	push   0x1
c0016d79:	55                   	push   ebp
c0016d7a:	e8 bb 62 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0016d7f:	83 c4 10             	add    esp,0x10
c0016d82:	85 c0                	test   eax,eax
c0016d84:	0f 85 a7 06 00 00    	jne    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016d8a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016d92:	83 ec 0c             	sub    esp,0xc
c0016d95:	6a 34                	push   0x34
c0016d97:	e8 27 2c ff ff       	call   c00099c3 <malloc>
c0016d9c:	5b                   	pop    ebx
c0016d9d:	89 c7                	mov    edi,eax
c0016d9f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016da3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016da6:	53                   	push   ebx
c0016da7:	57                   	push   edi
c0016da8:	6a 00                	push   0x0
c0016daa:	6a 34                	push   0x34
c0016dac:	55                   	push   ebp
c0016dad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016db0:	83 c4 20             	add    esp,0x20
c0016db3:	85 c0                	test   eax,eax
c0016db5:	0f 85 76 06 00 00    	jne    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dbb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016dc1:	0f 85 6a 06 00 00    	jne    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dc7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016dca:	85 c0                	test   eax,eax
c0016dcc:	0f 84 5f 06 00 00    	je     c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dd2:	31 d2                	xor    edx,edx
c0016dd4:	51                   	push   ecx
c0016dd5:	52                   	push   edx
c0016dd6:	50                   	push   eax
c0016dd7:	55                   	push   ebp
c0016dd8:	e8 1b 63 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016ddd:	83 c4 10             	add    esp,0x10
c0016de0:	85 c0                	test   eax,eax
c0016de2:	0f 85 49 06 00 00    	jne    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016dee:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016df2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016df6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016dfa:	0f af c2             	imul   eax,edx
c0016dfd:	50                   	push   eax
c0016dfe:	e8 c0 2b ff ff       	call   c00099c3 <malloc>
c0016e03:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e11:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e15:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e19:	0f af c2             	imul   eax,edx
c0016e1c:	99                   	cdq    
c0016e1d:	52                   	push   edx
c0016e1e:	50                   	push   eax
c0016e1f:	55                   	push   ebp
c0016e20:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e23:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016e26:	83 c4 20             	add    esp,0x20
c0016e29:	85 c0                	test   eax,eax
c0016e2b:	0f 84 00 06 00 00    	je     c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e31:	52                   	push   edx
c0016e32:	31 d2                	xor    edx,edx
c0016e34:	52                   	push   edx
c0016e35:	50                   	push   eax
c0016e36:	55                   	push   ebp
c0016e37:	e8 bc 62 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016e3c:	83 c4 10             	add    esp,0x10
c0016e3f:	85 c0                	test   eax,eax
c0016e41:	0f 85 ea 05 00 00    	jne    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e47:	83 ec 0c             	sub    esp,0xc
c0016e4a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e4e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e52:	31 f6                	xor    esi,esi
c0016e54:	0f af c2             	imul   eax,edx
c0016e57:	50                   	push   eax
c0016e58:	e8 66 2b ff ff       	call   c00099c3 <malloc>
c0016e5d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e60:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e67:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e6b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e6f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e73:	0f af c2             	imul   eax,edx
c0016e76:	99                   	cdq    
c0016e77:	52                   	push   edx
c0016e78:	50                   	push   eax
c0016e79:	55                   	push   ebp
c0016e7a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e7d:	83 c4 20             	add    esp,0x20
c0016e80:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016e84:	0f 86 8a 00 00 00    	jbe    c0016f14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016e8a:	0f b7 de             	movzx  ebx,si
c0016e8d:	c1 e3 05             	shl    ebx,0x5
c0016e90:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016e94:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016e97:	75 75                	jne    c0016f0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016e99:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e9c:	31 d2                	xor    edx,edx
c0016e9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ea2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ea9:	50                   	push   eax
c0016eaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016ead:	52                   	push   edx
c0016eae:	50                   	push   eax
c0016eaf:	55                   	push   ebp
c0016eb0:	e8 43 62 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016eb5:	83 c4 10             	add    esp,0x10
c0016eb8:	85 c0                	test   eax,eax
c0016eba:	0f 85 71 05 00 00    	jne    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ec0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016ec7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016eca:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016ece:	31 d2                	xor    edx,edx
c0016ed0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016ed4:	83 ec 0c             	sub    esp,0xc
c0016ed7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016edb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016ee2:	50                   	push   eax
c0016ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eeb:	52                   	push   edx
c0016eec:	50                   	push   eax
c0016eed:	55                   	push   ebp
c0016eee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ef1:	83 c4 1c             	add    esp,0x1c
c0016ef4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016ef7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016efa:	50                   	push   eax
c0016efb:	6a 00                	push   0x0
c0016efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f01:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016f05:	50                   	push   eax
c0016f06:	e8 79 97 fe ff       	call   c0000684 <memset>
c0016f0b:	83 c4 10             	add    esp,0x10
c0016f0e:	46                   	inc    esi
c0016f0f:	e9 6c ff ff ff       	jmp    c0016e80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016f14:	53                   	push   ebx
c0016f15:	31 db                	xor    ebx,ebx
c0016f17:	68 00 01 00 00       	push   0x100
c0016f1c:	6a 00                	push   0x0
c0016f1e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f22:	50                   	push   eax
c0016f23:	e8 5c 97 fe ff       	call   c0000684 <memset>
c0016f28:	83 c4 0c             	add    esp,0xc
c0016f2b:	68 00 01 00 00       	push   0x100
c0016f30:	6a 00                	push   0x0
c0016f32:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016f39:	50                   	push   eax
c0016f3a:	e8 45 97 fe ff       	call   c0000684 <memset>
c0016f3f:	83 c4 10             	add    esp,0x10
c0016f42:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f4a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f52:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016f5a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016f62:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f6a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016f6e:	0f 86 30 01 00 00    	jbe    c00170a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016f74:	0f b7 f3             	movzx  esi,bx
c0016f77:	6b f6 28             	imul   esi,esi,0x28
c0016f7a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016f7e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016f81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f85:	52                   	push   edx
c0016f86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f8a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016f8e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f90:	6b d2 28             	imul   edx,edx,0x28
c0016f93:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016f97:	31 d2                	xor    edx,edx
c0016f99:	52                   	push   edx
c0016f9a:	50                   	push   eax
c0016f9b:	55                   	push   ebp
c0016f9c:	e8 57 61 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c0016fa1:	83 c4 0c             	add    esp,0xc
c0016fa4:	6a 20                	push   0x20
c0016fa6:	6a 00                	push   0x0
c0016fa8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016faf:	51                   	push   ecx
c0016fb0:	e8 cf 96 fe ff       	call   c0000684 <memset>
c0016fb5:	59                   	pop    ecx
c0016fb6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016fb9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016fbd:	52                   	push   edx
c0016fbe:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016fc5:	51                   	push   ecx
c0016fc6:	6a 00                	push   0x0
c0016fc8:	6a 1f                	push   0x1f
c0016fca:	55                   	push   ebp
c0016fcb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fce:	83 c4 1c             	add    esp,0x1c
c0016fd1:	6a 09                	push   0x9
c0016fd3:	68 ee 44 02 c0       	push   0xc00244ee
c0016fd8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fdf:	51                   	push   ecx
c0016fe0:	e8 9b 95 fe ff       	call   c0000580 <memcmp>
c0016fe5:	83 c4 10             	add    esp,0x10
c0016fe8:	85 c0                	test   eax,eax
c0016fea:	75 21                	jne    c001700d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016fec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ff0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ff4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016ff8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ffc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016fff:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017006:	89 d0                	mov    eax,edx
c0017008:	40                   	inc    eax
c0017009:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001700d:	50                   	push   eax
c001700e:	6a 09                	push   0x9
c0017010:	68 f8 44 02 c0       	push   0xc00244f8
c0017015:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001701c:	50                   	push   eax
c001701d:	e8 5e 95 fe ff       	call   c0000580 <memcmp>
c0017022:	83 c4 10             	add    esp,0x10
c0017025:	85 c0                	test   eax,eax
c0017027:	75 21                	jne    c001704a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001702d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017031:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017035:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017039:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001703c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017043:	89 d0                	mov    eax,edx
c0017045:	40                   	inc    eax
c0017046:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001704a:	50                   	push   eax
c001704b:	50                   	push   eax
c001704c:	68 c4 44 02 c0       	push   0xc00244c4
c0017051:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017058:	50                   	push   eax
c0017059:	e8 6e 97 fe ff       	call   c00007cc <strcmp>
c001705e:	83 c4 10             	add    esp,0x10
c0017061:	85 c0                	test   eax,eax
c0017063:	75 0f                	jne    c0017074 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017065:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017068:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001706c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017070:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017074:	50                   	push   eax
c0017075:	50                   	push   eax
c0017076:	68 cc 44 02 c0       	push   0xc00244cc
c001707b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017082:	50                   	push   eax
c0017083:	e8 44 97 fe ff       	call   c00007cc <strcmp>
c0017088:	83 c4 10             	add    esp,0x10
c001708b:	85 c0                	test   eax,eax
c001708d:	75 0f                	jne    c001709e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001708f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017092:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001709a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001709e:	43                   	inc    ebx
c001709f:	e9 c6 fe ff ff       	jmp    c0016f6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00170a4:	31 d2                	xor    edx,edx
c00170a6:	50                   	push   eax
c00170a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170ab:	52                   	push   edx
c00170ac:	50                   	push   eax
c00170ad:	55                   	push   ebp
c00170ae:	e8 45 60 ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c00170b3:	58                   	pop    eax
c00170b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170b8:	e8 06 29 ff ff       	call   c00099c3 <malloc>
c00170bd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170c0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170c4:	31 d2                	xor    edx,edx
c00170c6:	58                   	pop    eax
c00170c7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00170cb:	53                   	push   ebx
c00170cc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00170d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170d4:	52                   	push   edx
c00170d5:	50                   	push   eax
c00170d6:	55                   	push   ebp
c00170d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170da:	83 c4 14             	add    esp,0x14
c00170dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170e1:	e8 dd 28 ff ff       	call   c00099c3 <malloc>
c00170e6:	31 d2                	xor    edx,edx
c00170e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170ec:	83 c4 0c             	add    esp,0xc
c00170ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170f3:	52                   	push   edx
c00170f4:	50                   	push   eax
c00170f5:	55                   	push   ebp
c00170f6:	e8 fd 5f ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c00170fb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170fe:	31 d2                	xor    edx,edx
c0017100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017103:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017107:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001710b:	52                   	push   edx
c001710c:	50                   	push   eax
c001710d:	55                   	push   ebp
c001710e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017111:	83 c4 20             	add    esp,0x20
c0017114:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001711c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017120:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017124:	0f 84 0b 03 00 00    	je     c0017435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001712a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017131:	31 d2                	xor    edx,edx
c0017133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017137:	c1 e8 03             	shr    eax,0x3
c001713a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001713e:	51                   	push   ecx
c001713f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017143:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017147:	52                   	push   edx
c0017148:	50                   	push   eax
c0017149:	55                   	push   ebp
c001714a:	e8 a9 5f ff ff       	call   c000d0f8 <File::seek(unsigned long long)>
c001714f:	5b                   	pop    ebx
c0017150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017154:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001715b:	e8 63 28 ff ff       	call   c00099c3 <malloc>
c0017160:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017163:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017167:	31 d2                	xor    edx,edx
c0017169:	5e                   	pop    esi
c001716a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001716e:	50                   	push   eax
c001716f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017173:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017177:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001717e:	52                   	push   edx
c001717f:	50                   	push   eax
c0017180:	55                   	push   ebp
c0017181:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017184:	83 c4 20             	add    esp,0x20
c0017187:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001718f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017193:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017197:	0f 8d 7c 02 00 00    	jge    c0017419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001719d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171a5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00171aa:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00171ad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00171b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171b5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00171b9:	89 d8                	mov    eax,ebx
c00171bb:	c1 e8 08             	shr    eax,0x8
c00171be:	89 c6                	mov    esi,eax
c00171c0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171c4:	c1 e6 04             	shl    esi,0x4
c00171c7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00171cb:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00171ce:	85 d2                	test   edx,edx
c00171d0:	0f 85 bf 00 00 00    	jne    c0017295 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171d6:	83 ec 0c             	sub    esp,0xc
c00171d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171dd:	03 06                	add    eax,DWORD PTR [esi]
c00171df:	50                   	push   eax
c00171e0:	e8 4b f8 ff ff       	call   c0016a30 <Thr::getAddressOfKernelSymbol(char const*)>
c00171e5:	83 c4 10             	add    esp,0x10
c00171e8:	89 c2                	mov    edx,eax
c00171ea:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00171ef:	85 c0                	test   eax,eax
c00171f1:	0f 85 9e 00 00 00    	jne    c0017295 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171f7:	83 ec 0c             	sub    esp,0xc
c00171fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171fe:	03 06                	add    eax,DWORD PTR [esi]
c0017200:	50                   	push   eax
c0017201:	e8 0a 17 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017206:	83 c4 10             	add    esp,0x10
c0017209:	89 c2                	mov    edx,eax
c001720b:	85 c0                	test   eax,eax
c001720d:	0f 85 82 00 00 00    	jne    c0017295 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017213:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017217:	50                   	push   eax
c0017218:	50                   	push   eax
c0017219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001721d:	03 06                	add    eax,DWORD PTR [esi]
c001721f:	50                   	push   eax
c0017220:	68 02 45 02 c0       	push   0xc0024502
c0017225:	e8 41 58 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001722a:	58                   	pop    eax
c001722b:	5a                   	pop    edx
c001722c:	68 1c 45 02 c0       	push   0xc002451c
c0017231:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017238:	50                   	push   eax
c0017239:	e8 02 95 fe ff       	call   c0000740 <strcpy>
c001723e:	59                   	pop    ecx
c001723f:	58                   	pop    eax
c0017240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017244:	03 06                	add    eax,DWORD PTR [esi]
c0017246:	50                   	push   eax
c0017247:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001724e:	50                   	push   eax
c001724f:	e8 2c 96 fe ff       	call   c0000880 <strcat>
c0017254:	58                   	pop    eax
c0017255:	5a                   	pop    edx
c0017256:	68 b2 45 02 c0       	push   0xc00245b2
c001725b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017262:	50                   	push   eax
c0017263:	e8 18 96 fe ff       	call   c0000880 <strcat>
c0017268:	83 c4 10             	add    esp,0x10
c001726b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017270:	0f 84 5d 01 00 00    	je     c00173d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017276:	83 ec 0c             	sub    esp,0xc
c0017279:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017280:	50                   	push   eax
c0017281:	e8 85 d0 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0017286:	83 c4 10             	add    esp,0x10
c0017289:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001728d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017291:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017295:	80 fb 01             	cmp    bl,0x1
c0017298:	0f 85 88 00 00 00    	jne    c0017326 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001729e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00172a5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00172a9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00172ad:	01 ce                	add    esi,ecx
c00172af:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00172b5:	0f 94 c0             	sete   al
c00172b8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00172be:	0f 94 c3             	sete   bl
c00172c1:	09 c3                	or     ebx,eax
c00172c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00172c5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00172ca:	74 41                	je     c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00172cc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172cf:	84 db                	test   bl,bl
c00172d1:	75 15                	jne    c00172e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00172d3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172d7:	66 83 f8 0c          	cmp    ax,0xc
c00172db:	76 05                	jbe    c00172e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00172dd:	b8 0c 00 00 00       	mov    eax,0xc
c00172e2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00172e6:	76 37                	jbe    c001731f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00172e8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00172ec:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00172f1:	0f 84 dc 00 00 00    	je     c00173d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00172f7:	83 ec 0c             	sub    esp,0xc
c00172fa:	68 33 45 02 c0       	push   0xc0024533
c00172ff:	e8 07 d0 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001730b:	eb 12                	jmp    c001731f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001730d:	01 c1                	add    ecx,eax
c001730f:	84 db                	test   bl,bl
c0017311:	75 0c                	jne    c001731f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017313:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017317:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001731b:	77 02                	ja     c001731f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001731d:	01 d1                	add    ecx,edx
c001731f:	89 0e                	mov    DWORD PTR [esi],ecx
c0017321:	e9 ea 00 00 00       	jmp    c0017410 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017326:	80 fb 02             	cmp    bl,0x2
c0017329:	75 7c                	jne    c00173a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001732b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017332:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017336:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001733a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017340:	74 20                	je     c0017362 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017342:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017348:	74 18                	je     c0017362 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001734a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001734e:	b9 0a 00 00 00       	mov    ecx,0xa
c0017353:	66 83 f8 0e          	cmp    ax,0xe
c0017357:	77 03                	ja     c001735c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017359:	8d 48 fc             	lea    ecx,[eax-0x4]
c001735c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017360:	76 1f                	jbe    c0017381 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017362:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017366:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001736b:	74 66                	je     c00173d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001736d:	83 ec 0c             	sub    esp,0xc
c0017370:	68 4f 45 02 c0       	push   0xc002454f
c0017375:	e8 91 cf ff ff       	call   c001430b <Krnl::panic(char const*)>
c001737a:	83 c4 10             	add    esp,0x10
c001737d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017381:	8b 06                	mov    eax,DWORD PTR [esi]
c0017383:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017388:	74 13                	je     c001739d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001738a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001738e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017395:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017399:	01 c8                	add    eax,ecx
c001739b:	eb 04                	jmp    c00173a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001739d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00173a1:	01 c2                	add    edx,eax
c00173a3:	89 16                	mov    DWORD PTR [esi],edx
c00173a5:	eb 69                	jmp    c0017410 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173a7:	0f b6 db             	movzx  ebx,bl
c00173aa:	50                   	push   eax
c00173ab:	50                   	push   eax
c00173ac:	53                   	push   ebx
c00173ad:	68 6b 45 02 c0       	push   0xc002456b
c00173b2:	e8 b4 56 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00173b7:	83 c4 10             	add    esp,0x10
c00173ba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173bf:	74 12                	je     c00173d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173c1:	83 ec 0c             	sub    esp,0xc
c00173c4:	68 76 45 02 c0       	push   0xc0024576
c00173c9:	e8 3d cf ff ff       	call   c001430b <Krnl::panic(char const*)>
c00173ce:	83 c4 10             	add    esp,0x10
c00173d1:	eb 3d                	jmp    c0017410 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173d3:	83 ec 0c             	sub    esp,0xc
c00173d6:	55                   	push   ebp
c00173d7:	e8 bc 5c ff ff       	call   c000d098 <File::close()>
c00173dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00173e5:	59                   	pop    ecx
c00173e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173ea:	e8 e4 25 ff ff       	call   c00099d3 <free>
c00173ef:	5b                   	pop    ebx
c00173f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173f4:	e8 da 25 ff ff       	call   c00099d3 <free>
c00173f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00173fc:	e8 d2 25 ff ff       	call   c00099d3 <free>
c0017401:	5e                   	pop    esi
c0017402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017406:	e8 c8 25 ff ff       	call   c00099d3 <free>
c001740b:	83 c4 10             	add    esp,0x10
c001740e:	eb 21                	jmp    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017410:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017414:	e9 76 fd ff ff       	jmp    c001718f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017419:	83 ec 0c             	sub    esp,0xc
c001741c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017420:	e8 ae 25 ff ff       	call   c00099d3 <free>
c0017425:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017429:	83 c4 10             	add    esp,0x10
c001742c:	e9 eb fc ff ff       	jmp    c001711c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017431:	31 c0                	xor    eax,eax
c0017433:	eb 33                	jmp    c0017468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017435:	83 ec 0c             	sub    esp,0xc
c0017438:	55                   	push   ebp
c0017439:	e8 5a 5c ff ff       	call   c000d098 <File::close()>
c001743e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017441:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017444:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017447:	58                   	pop    eax
c0017448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001744c:	e8 82 25 ff ff       	call   c00099d3 <free>
c0017451:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017454:	e8 7a 25 ff ff       	call   c00099d3 <free>
c0017459:	5a                   	pop    edx
c001745a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001745e:	e8 70 25 ff ff       	call   c00099d3 <free>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	b0 01                	mov    al,0x1
c0017468:	81 c4 5c 03 00 00    	add    esp,0x35c
c001746e:	5b                   	pop    ebx
c001746f:	5e                   	pop    esi
c0017470:	5f                   	pop    edi
c0017471:	5d                   	pop    ebp
c0017472:	c3                   	ret    

c0017473 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017473:	56                   	push   esi
c0017474:	31 d2                	xor    edx,edx
c0017476:	53                   	push   ebx
c0017477:	8b 1d 80 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026e80
c001747d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017481:	39 d3                	cmp    ebx,edx
c0017483:	7e 1b                	jle    c00174a0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017485:	8b 04 95 a0 70 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8f60]
c001748c:	39 c8                	cmp    eax,ecx
c001748e:	77 0d                	ja     c001749d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017490:	8b 34 95 a0 6e 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9160]
c0017497:	01 c6                	add    esi,eax
c0017499:	39 ce                	cmp    esi,ecx
c001749b:	77 05                	ja     c00174a2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001749d:	42                   	inc    edx
c001749e:	eb e1                	jmp    c0017481 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00174a0:	31 c0                	xor    eax,eax
c00174a2:	5b                   	pop    ebx
c00174a3:	5e                   	pop    esi
c00174a4:	c3                   	ret    

c00174a5 <Thr::getDriverNameFromAddress(unsigned long)>:
c00174a5:	53                   	push   ebx
c00174a6:	31 c0                	xor    eax,eax
c00174a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00174ac:	8b 1d 80 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026e80
c00174b2:	39 c3                	cmp    ebx,eax
c00174b4:	7e 22                	jle    c00174d8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00174b6:	8b 14 85 a0 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f60]
c00174bd:	39 ca                	cmp    edx,ecx
c00174bf:	77 14                	ja     c00174d5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174c1:	03 14 85 a0 6e 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9160]
c00174c8:	39 ca                	cmp    edx,ecx
c00174ca:	76 09                	jbe    c00174d5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174cc:	8b 04 85 a0 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8d60]
c00174d3:	eb 05                	jmp    c00174da <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00174d5:	40                   	inc    eax
c00174d6:	eb da                	jmp    c00174b2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00174d8:	31 c0                	xor    eax,eax
c00174da:	5b                   	pop    ebx
c00174db:	c3                   	ret    

c00174dc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00174dc:	53                   	push   ebx
c00174dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00174e1:	53                   	push   ebx
c00174e2:	e8 8c ff ff ff       	call   c0017473 <Thr::getDriverBaseFromAddress(unsigned long)>
c00174e7:	5a                   	pop    edx
c00174e8:	31 d2                	xor    edx,edx
c00174ea:	85 c0                	test   eax,eax
c00174ec:	74 04                	je     c00174f2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00174ee:	89 da                	mov    edx,ebx
c00174f0:	29 c2                	sub    edx,eax
c00174f2:	89 d0                	mov    eax,edx
c00174f4:	5b                   	pop    ebx
c00174f5:	c3                   	ret    

c00174f6 <Thr::loadDLL(char const*, bool)>:
c00174f6:	55                   	push   ebp
c00174f7:	57                   	push   edi
c00174f8:	56                   	push   esi
c00174f9:	53                   	push   ebx
c00174fa:	81 ec 34 01 00 00    	sub    esp,0x134
c0017500:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017507:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001750e:	56                   	push   esi
c001750f:	68 8e 45 02 c0       	push   0xc002458e
c0017514:	e8 52 55 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0017519:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017520:	e8 9e 24 ff ff       	call   c00099c3 <malloc>
c0017525:	83 c4 0c             	add    esp,0xc
c0017528:	89 c3                	mov    ebx,eax
c001752a:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c0017530:	56                   	push   esi
c0017531:	50                   	push   eax
c0017532:	e8 9f 5a ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0017537:	83 c4 10             	add    esp,0x10
c001753a:	85 db                	test   ebx,ebx
c001753c:	75 3c                	jne    c001757a <Thr::loadDLL(char const*, bool)+0x84>
c001753e:	89 f8                	mov    eax,edi
c0017540:	84 c0                	test   al,al
c0017542:	0f 84 d2 01 00 00    	je     c001771a <Thr::loadDLL(char const*, bool)+0x224>
c0017548:	55                   	push   ebp
c0017549:	55                   	push   ebp
c001754a:	68 9f 45 02 c0       	push   0xc002459f
c001754f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017553:	55                   	push   ebp
c0017554:	e8 e7 91 fe ff       	call   c0000740 <strcpy>
c0017559:	58                   	pop    eax
c001755a:	5a                   	pop    edx
c001755b:	56                   	push   esi
c001755c:	55                   	push   ebp
c001755d:	e8 1e 93 fe ff       	call   c0000880 <strcat>
c0017562:	59                   	pop    ecx
c0017563:	58                   	pop    eax
c0017564:	68 b2 45 02 c0       	push   0xc00245b2
c0017569:	55                   	push   ebp
c001756a:	e8 11 93 fe ff       	call   c0000880 <strcat>
c001756f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017572:	e8 94 cd ff ff       	call   c001430b <Krnl::panic(char const*)>
c0017577:	83 c4 10             	add    esp,0x10
c001757a:	51                   	push   ecx
c001757b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001757f:	50                   	push   eax
c0017580:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017584:	50                   	push   eax
c0017585:	53                   	push   ebx
c0017586:	e8 5b 5d ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c001758b:	83 c4 10             	add    esp,0x10
c001758e:	85 db                	test   ebx,ebx
c0017590:	74 0c                	je     c001759e <Thr::loadDLL(char const*, bool)+0xa8>
c0017592:	83 ec 0c             	sub    esp,0xc
c0017595:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017597:	53                   	push   ebx
c0017598:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001759b:	83 c4 10             	add    esp,0x10
c001759e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00175a3:	75 0a                	jne    c00175af <Thr::loadDLL(char const*, bool)+0xb9>
c00175a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175a9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00175ad:	75 3c                	jne    c00175eb <Thr::loadDLL(char const*, bool)+0xf5>
c00175af:	89 f8                	mov    eax,edi
c00175b1:	84 c0                	test   al,al
c00175b3:	0f 84 49 01 00 00    	je     c0017702 <Thr::loadDLL(char const*, bool)+0x20c>
c00175b9:	51                   	push   ecx
c00175ba:	51                   	push   ecx
c00175bb:	68 9f 45 02 c0       	push   0xc002459f
c00175c0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00175c4:	53                   	push   ebx
c00175c5:	e8 76 91 fe ff       	call   c0000740 <strcpy>
c00175ca:	5d                   	pop    ebp
c00175cb:	58                   	pop    eax
c00175cc:	56                   	push   esi
c00175cd:	53                   	push   ebx
c00175ce:	e8 ad 92 fe ff       	call   c0000880 <strcat>
c00175d3:	58                   	pop    eax
c00175d4:	5a                   	pop    edx
c00175d5:	68 b2 45 02 c0       	push   0xc00245b2
c00175da:	53                   	push   ebx
c00175db:	e8 a0 92 fe ff       	call   c0000880 <strcat>
c00175e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175e3:	e8 23 cd ff ff       	call   c001430b <Krnl::panic(char const*)>
c00175e8:	83 c4 10             	add    esp,0x10
c00175eb:	52                   	push   edx
c00175ec:	6a 03                	push   0x3
c00175ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00175f6:	05 ff 0f 00 00       	add    eax,0xfff
c00175fb:	83 d2 00             	adc    edx,0x0
c00175fe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017602:	50                   	push   eax
c0017603:	ff 35 b0 62 02 c0    	push   DWORD PTR ds:0xc00262b0
c0017609:	e8 e0 48 ff ff       	call   c000beee <VAS::allocatePages(int, int)>
c001760e:	59                   	pop    ecx
c001760f:	89 c3                	mov    ebx,eax
c0017611:	5d                   	pop    ebp
c0017612:	50                   	push   eax
c0017613:	68 a1 28 02 c0       	push   0xc00228a1
c0017618:	e8 4e 54 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001761d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017620:	e8 7b 90 fe ff       	call   c00006a0 <strlen>
c0017625:	8b 2d 80 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026e80
c001762b:	40                   	inc    eax
c001762c:	89 04 24             	mov    DWORD PTR [esp],eax
c001762f:	e8 8f 23 ff ff       	call   c00099c3 <malloc>
c0017634:	89 04 ad a0 72 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8d60],eax
c001763b:	58                   	pop    eax
c001763c:	a1 80 6e 02 c0       	mov    eax,ds:0xc0026e80
c0017641:	5a                   	pop    edx
c0017642:	56                   	push   esi
c0017643:	ff 34 85 a0 72 02 c0 	push   DWORD PTR [eax*4-0x3ffd8d60]
c001764a:	e8 f1 90 fe ff       	call   c0000740 <strcpy>
c001764f:	a1 80 6e 02 c0       	mov    eax,ds:0xc0026e80
c0017654:	8d 50 01             	lea    edx,[eax+0x1]
c0017657:	89 1c 85 a0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f60],ebx
c001765e:	89 15 80 6e 02 c0    	mov    DWORD PTR ds:0xc0026e80,edx
c0017664:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017668:	83 c4 0c             	add    esp,0xc
c001766b:	89 14 85 a0 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9160],edx
c0017672:	6a 01                	push   0x1
c0017674:	53                   	push   ebx
c0017675:	56                   	push   esi
c0017676:	e8 c2 f6 ff ff       	call   c0016d3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001767b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001767f:	83 c4 10             	add    esp,0x10
c0017682:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017687:	0f 85 89 00 00 00    	jne    c0017716 <Thr::loadDLL(char const*, bool)+0x220>
c001768d:	89 f8                	mov    eax,edi
c001768f:	84 c0                	test   al,al
c0017691:	74 73                	je     c0017706 <Thr::loadDLL(char const*, bool)+0x210>
c0017693:	83 ec 0c             	sub    esp,0xc
c0017696:	68 b4 45 02 c0       	push   0xc00245b4
c001769b:	e8 6b cc ff ff       	call   c001430b <Krnl::panic(char const*)>
c00176a0:	83 c4 10             	add    esp,0x10
c00176a3:	eb 61                	jmp    c0017706 <Thr::loadDLL(char const*, bool)+0x210>
c00176a5:	50                   	push   eax
c00176a6:	50                   	push   eax
c00176a7:	89 e8                	mov    eax,ebp
c00176a9:	c1 e0 0c             	shl    eax,0xc
c00176ac:	01 d8                	add    eax,ebx
c00176ae:	50                   	push   eax
c00176af:	ff 35 b0 62 02 c0    	push   DWORD PTR ds:0xc00262b0
c00176b5:	e8 9c 43 ff ff       	call   c000ba56 <VAS::getPageTableEntry(unsigned long)>
c00176ba:	83 c4 10             	add    esp,0x10
c00176bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00176bf:	a8 60                	test   al,0x60
c00176c1:	75 11                	jne    c00176d4 <Thr::loadDLL(char const*, bool)+0x1de>
c00176c3:	83 ec 0c             	sub    esp,0xc
c00176c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176cb:	50                   	push   eax
c00176cc:	e8 dc 26 ff ff       	call   c0009dad <Phys::freePage(unsigned long)>
c00176d1:	83 c4 10             	add    esp,0x10
c00176d4:	45                   	inc    ebp
c00176d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176dd:	05 ff 0f 00 00       	add    eax,0xfff
c00176e2:	bf 00 00 00 00       	mov    edi,0x0
c00176e7:	83 d2 00             	adc    edx,0x0
c00176ea:	0f ac d0 0c          	shrd   eax,edx,0xc
c00176ee:	c1 ea 0c             	shr    edx,0xc
c00176f1:	39 c5                	cmp    ebp,eax
c00176f3:	89 d1                	mov    ecx,edx
c00176f5:	89 f8                	mov    eax,edi
c00176f7:	19 c8                	sbb    eax,ecx
c00176f9:	72 aa                	jb     c00176a5 <Thr::loadDLL(char const*, bool)+0x1af>
c00176fb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017700:	75 18                	jne    c001771a <Thr::loadDLL(char const*, bool)+0x224>
c0017702:	31 db                	xor    ebx,ebx
c0017704:	eb 14                	jmp    c001771a <Thr::loadDLL(char const*, bool)+0x224>
c0017706:	83 ec 0c             	sub    esp,0xc
c0017709:	68 d3 45 02 c0       	push   0xc00245d3
c001770e:	e8 f8 cb ff ff       	call   c001430b <Krnl::panic(char const*)>
c0017713:	83 c4 10             	add    esp,0x10
c0017716:	31 ed                	xor    ebp,ebp
c0017718:	eb bb                	jmp    c00176d5 <Thr::loadDLL(char const*, bool)+0x1df>
c001771a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017720:	89 d8                	mov    eax,ebx
c0017722:	5b                   	pop    ebx
c0017723:	5e                   	pop    esi
c0017724:	5f                   	pop    edi
c0017725:	5d                   	pop    ebp
c0017726:	c3                   	ret    

c0017727 <Thr::executeDLL(unsigned long, void*)>:
c0017727:	56                   	push   esi
c0017728:	53                   	push   ebx
c0017729:	52                   	push   edx
c001772a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001772e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017732:	85 db                	test   ebx,ebx
c0017734:	75 10                	jne    c0017746 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017736:	83 ec 0c             	sub    esp,0xc
c0017739:	68 ef 45 02 c0       	push   0xc00245ef
c001773e:	e8 c8 cb ff ff       	call   c001430b <Krnl::panic(char const*)>
c0017743:	83 c4 10             	add    esp,0x10
c0017746:	50                   	push   eax
c0017747:	50                   	push   eax
c0017748:	53                   	push   ebx
c0017749:	68 19 46 02 c0       	push   0xc0024619
c001774e:	e8 18 53 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0017753:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017757:	89 d8                	mov    eax,ebx
c0017759:	83 c4 14             	add    esp,0x14
c001775c:	5b                   	pop    ebx
c001775d:	5e                   	pop    esi
c001775e:	ff e0                	jmp    eax

c0017760 <userModeEntryPoint(void*)>:
c0017760:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0017765:	48                   	dec    eax
c0017766:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c001776b:	75 03                	jne    c0017770 <userModeEntryPoint(void*)+0x10>
c001776d:	fb                   	sti    
c001776e:	66 90                	xchg   ax,ax
c0017770:	fb                   	sti    
c0017771:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017776:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017779:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001777f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017783:	e9 d7 8a fe ff       	jmp    c000025f <goToUsermode>

c0017788 <changeTSS>:
c0017788:	83 ec 14             	sub    esp,0x14
c001778b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017790:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017793:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017798:	c1 e2 15             	shl    edx,0x15
c001779b:	29 d0                	sub    eax,edx
c001779d:	50                   	push   eax
c001779e:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00177a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177a9:	05 7c 11 00 00       	add    eax,0x117c
c00177ae:	50                   	push   eax
c00177af:	e8 e4 38 ff ff       	call   c000b098 <TSS::setESP(unsigned long)>
c00177b4:	83 c4 1c             	add    esp,0x1c
c00177b7:	c3                   	ret    

c00177b8 <switchToThread(ThreadControlBlock*)>:
c00177b8:	57                   	push   edi
c00177b9:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c00177be:	56                   	push   esi
c00177bf:	85 c0                	test   eax,eax
c00177c1:	53                   	push   ebx
c00177c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00177c6:	0f 85 90 00 00 00    	jne    c001785c <switchToThread(ThreadControlBlock*)+0xa4>
c00177cc:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00177cf:	3c ff                	cmp    al,0xff
c00177d1:	0f 84 81 00 00 00    	je     c0017858 <switchToThread(ThreadControlBlock*)+0xa0>
c00177d7:	0f b6 d0             	movzx  edx,al
c00177da:	b8 00 04 00 00       	mov    eax,0x400
c00177df:	29 d0                	sub    eax,edx
c00177e1:	d1 f8                	sar    eax,1
c00177e3:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c00177e6:	66 90                	xchg   ax,ax
c00177e8:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c00177eb:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c00177f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177f6:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00177fd:	74 4d                	je     c001784c <switchToThread(ThreadControlBlock*)+0x94>
c00177ff:	0f 31                	rdtsc  
c0017801:	a3 88 76 02 c0       	mov    ds:0xc0027688,eax
c0017806:	89 c6                	mov    esi,eax
c0017808:	89 d7                	mov    edi,edx
c001780a:	2b 35 78 76 02 c0    	sub    esi,DWORD PTR ds:0xc0027678
c0017810:	89 15 8c 76 02 c0    	mov    DWORD PTR ds:0xc002768c,edx
c0017816:	1b 3d 7c 76 02 c0    	sbb    edi,DWORD PTR ds:0xc002767c
c001781c:	89 35 80 76 02 c0    	mov    DWORD PTR ds:0xc0027680,esi
c0017822:	a3 78 76 02 c0       	mov    ds:0xc0027678,eax
c0017827:	89 3d 84 76 02 c0    	mov    DWORD PTR ds:0xc0027684,edi
c001782d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017833:	89 15 7c 76 02 c0    	mov    DWORD PTR ds:0xc002767c,edx
c0017839:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001783c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001783f:	01 c6                	add    esi,eax
c0017841:	11 d7                	adc    edi,edx
c0017843:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017846:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017849:	8d 76 00             	lea    esi,[esi+0x0]
c001784c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017850:	5b                   	pop    ebx
c0017851:	5e                   	pop    esi
c0017852:	5f                   	pop    edi
c0017853:	e9 3f 8a fe ff       	jmp    c0000297 <switchToThreadASM>
c0017858:	31 c0                	xor    eax,eax
c001785a:	eb 8c                	jmp    c00177e8 <switchToThread(ThreadControlBlock*)+0x30>
c001785c:	5b                   	pop    ebx
c001785d:	c7 05 40 76 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x1
c0017867:	5e                   	pop    esi
c0017868:	5f                   	pop    edi
c0017869:	c3                   	ret    
c001786a:	66 90                	xchg   ax,ax

c001786c <Process::addArgs(char**)>:
c001786c:	57                   	push   edi
c001786d:	56                   	push   esi
c001786e:	53                   	push   ebx
c001786f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017873:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017877:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017881:	85 ff                	test   edi,edi
c0017883:	74 43                	je     c00178c8 <Process::addArgs(char**)+0x5c>
c0017885:	8b 07                	mov    eax,DWORD PTR [edi]
c0017887:	85 c0                	test   eax,eax
c0017889:	74 3d                	je     c00178c8 <Process::addArgs(char**)+0x5c>
c001788b:	31 db                	xor    ebx,ebx
c001788d:	8d 76 00             	lea    esi,[esi+0x0]
c0017890:	83 ec 0c             	sub    esp,0xc
c0017893:	50                   	push   eax
c0017894:	e8 07 8e fe ff       	call   c00006a0 <strlen>
c0017899:	40                   	inc    eax
c001789a:	89 04 24             	mov    DWORD PTR [esp],eax
c001789d:	e8 21 21 ff ff       	call   c00099c3 <malloc>
c00178a2:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00178a9:	5a                   	pop    edx
c00178aa:	59                   	pop    ecx
c00178ab:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00178ae:	43                   	inc    ebx
c00178af:	50                   	push   eax
c00178b0:	e8 8b 8e fe ff       	call   c0000740 <strcpy>
c00178b5:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00178bb:	83 c4 10             	add    esp,0x10
c00178be:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178c1:	85 c0                	test   eax,eax
c00178c3:	75 cb                	jne    c0017890 <Process::addArgs(char**)+0x24>
c00178c5:	8d 76 00             	lea    esi,[esi+0x0]
c00178c8:	5b                   	pop    ebx
c00178c9:	5e                   	pop    esi
c00178ca:	5f                   	pop    edi
c00178cb:	c3                   	ret    

c00178cc <Process::Process(char const*, Process*, char**)>:
c00178cc:	56                   	push   esi
c00178cd:	53                   	push   ebx
c00178ce:	83 ec 14             	sub    esp,0x14
c00178d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d5:	05 0c 02 00 00       	add    eax,0x20c
c00178da:	bb 07 00 00 00       	mov    ebx,0x7
c00178df:	89 c6                	mov    esi,eax
c00178e1:	8d 76 00             	lea    esi,[esi+0x0]
c00178e4:	85 db                	test   ebx,ebx
c00178e6:	78 14                	js     c00178fc <Process::Process(char const*, Process*, char**)+0x30>
c00178e8:	83 ec 0c             	sub    esp,0xc
c00178eb:	56                   	push   esi
c00178ec:	e8 cf 9e 00 00       	call   c00217c0 <ThreadControlBlock::ThreadControlBlock()>
c00178f1:	83 c4 10             	add    esp,0x10
c00178f4:	83 c6 5f             	add    esi,0x5f
c00178f7:	4b                   	dec    ebx
c00178f8:	eb ea                	jmp    c00178e4 <Process::Process(char const*, Process*, char**)+0x18>
c00178fa:	66 90                	xchg   ax,ax
c00178fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017900:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017907:	83 ec 0c             	sub    esp,0xc
c001790a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001790e:	e8 81 c8 ff ff       	call   c0014194 <Krnl::newProcessEnv(Process*)>
c0017913:	83 c4 10             	add    esp,0x10
c0017916:	89 c2                	mov    edx,eax
c0017918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017926:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001792f:	a1 b0 5b 02 c0       	mov    eax,ds:0xc0025bb0
c0017934:	8d 50 01             	lea    edx,[eax+0x1]
c0017937:	89 15 b0 5b 02 c0    	mov    DWORD PTR ds:0xc0025bb0,edx
c001793d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017941:	89 02                	mov    DWORD PTR [edx],eax
c0017943:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001794b:	83 ec 0c             	sub    esp,0xc
c001794e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017952:	e8 6c 20 ff ff       	call   c00099c3 <malloc>
c0017957:	83 c4 10             	add    esp,0x10
c001795a:	89 c3                	mov    ebx,eax
c001795c:	83 ec 08             	sub    esp,0x8
c001795f:	6a 00                	push   0x0
c0017961:	53                   	push   ebx
c0017962:	e8 2f 49 ff ff       	call   c000c296 <VAS::VAS(bool)>
c0017967:	83 c4 10             	add    esp,0x10
c001796a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001796e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017978:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017986:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001798a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017994:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001799a:	85 c0                	test   eax,eax
c001799c:	74 42                	je     c00179e0 <Process::Process(char const*, Process*, char**)+0x114>
c001799e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179a8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00179ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00179b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00179c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179cc:	05 0c 01 00 00       	add    eax,0x10c
c00179d1:	83 ec 08             	sub    esp,0x8
c00179d4:	52                   	push   edx
c00179d5:	50                   	push   eax
c00179d6:	e8 65 8d fe ff       	call   c0000740 <strcpy>
c00179db:	83 c4 10             	add    esp,0x10
c00179de:	eb 64                	jmp    c0017a44 <Process::Process(char const*, Process*, char**)+0x178>
c00179e0:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c00179e8:	83 ec 0c             	sub    esp,0xc
c00179eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179ef:	e8 cf 1f ff ff       	call   c00099c3 <malloc>
c00179f4:	83 c4 10             	add    esp,0x10
c00179f7:	89 c3                	mov    ebx,eax
c00179f9:	83 ec 08             	sub    esp,0x8
c00179fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a00:	53                   	push   ebx
c0017a01:	e8 a0 33 ff ff       	call   c000ada6 <VgaText::VgaText(char const*)>
c0017a06:	83 c4 10             	add    esp,0x10
c0017a09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a1d:	83 ec 0c             	sub    esp,0xc
c0017a20:	50                   	push   eax
c0017a21:	e8 3f 2b ff ff       	call   c000a565 <addToTerminalCycle(VgaText*)>
c0017a26:	83 c4 10             	add    esp,0x10
c0017a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2d:	05 0c 01 00 00       	add    eax,0x10c
c0017a32:	83 ec 08             	sub    esp,0x8
c0017a35:	68 38 46 02 c0       	push   0xc0024638
c0017a3a:	50                   	push   eax
c0017a3b:	e8 00 8d fe ff       	call   c0000740 <strcpy>
c0017a40:	83 c4 10             	add    esp,0x10
c0017a43:	90                   	nop
c0017a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a48:	83 c0 0c             	add    eax,0xc
c0017a4b:	83 ec 08             	sub    esp,0x8
c0017a4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a52:	50                   	push   eax
c0017a53:	e8 e8 8c fe ff       	call   c0000740 <strcpy>
c0017a58:	83 c4 10             	add    esp,0x10
c0017a5b:	83 ec 08             	sub    esp,0x8
c0017a5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a66:	e8 01 fe ff ff       	call   c001786c <Process::addArgs(char**)>
c0017a6b:	83 c4 10             	add    esp,0x10
c0017a6e:	83 ec 08             	sub    esp,0x8
c0017a71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a79:	e8 89 ed ff ff       	call   c0016807 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017a7e:	83 c4 10             	add    esp,0x10
c0017a81:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a85:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017a89:	83 f0 01             	xor    eax,0x1
c0017a8c:	88 c2                	mov    dl,al
c0017a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a92:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017a98:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a9d:	83 ec 08             	sub    esp,0x8
c0017aa0:	50                   	push   eax
c0017aa1:	68 90 46 02 c0       	push   0xc0024690
c0017aa6:	e8 c0 4f ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0017aab:	83 c4 10             	add    esp,0x10
c0017aae:	90                   	nop
c0017aaf:	83 c4 14             	add    esp,0x14
c0017ab2:	5b                   	pop    ebx
c0017ab3:	5e                   	pop    esi
c0017ab4:	c3                   	ret    
c0017ab5:	90                   	nop
c0017ab6:	66 90                	xchg   ax,ax

c0017ab8 <Process::Process(bool, char const*, Process*, char**)>:
c0017ab8:	56                   	push   esi
c0017ab9:	53                   	push   ebx
c0017aba:	83 ec 24             	sub    esp,0x24
c0017abd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ac1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017ac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ac9:	05 0c 02 00 00       	add    eax,0x20c
c0017ace:	bb 07 00 00 00       	mov    ebx,0x7
c0017ad3:	89 c6                	mov    esi,eax
c0017ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ad8:	85 db                	test   ebx,ebx
c0017ada:	78 14                	js     c0017af0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017adc:	83 ec 0c             	sub    esp,0xc
c0017adf:	56                   	push   esi
c0017ae0:	e8 db 9c 00 00       	call   c00217c0 <ThreadControlBlock::ThreadControlBlock()>
c0017ae5:	83 c4 10             	add    esp,0x10
c0017ae8:	83 c6 5f             	add    esi,0x5f
c0017aeb:	4b                   	dec    ebx
c0017aec:	eb ea                	jmp    c0017ad8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017aee:	66 90                	xchg   ax,ax
c0017af0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017af4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017afb:	83 ec 0c             	sub    esp,0xc
c0017afe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b02:	e8 8d c6 ff ff       	call   c0014194 <Krnl::newProcessEnv(Process*)>
c0017b07:	83 c4 10             	add    esp,0x10
c0017b0a:	89 c2                	mov    edx,eax
c0017b0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b10:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017b16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b1a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017b23:	a1 b0 5b 02 c0       	mov    eax,ds:0xc0025bb0
c0017b28:	8d 50 01             	lea    edx,[eax+0x1]
c0017b2b:	89 15 b0 5b 02 c0    	mov    DWORD PTR ds:0xc0025bb0,edx
c0017b31:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b35:	89 02                	mov    DWORD PTR [edx],eax
c0017b37:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017b3f:	83 ec 0c             	sub    esp,0xc
c0017b42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b46:	e8 78 1e ff ff       	call   c00099c3 <malloc>
c0017b4b:	83 c4 10             	add    esp,0x10
c0017b4e:	89 c3                	mov    ebx,eax
c0017b50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b55:	83 ec 08             	sub    esp,0x8
c0017b58:	50                   	push   eax
c0017b59:	53                   	push   ebx
c0017b5a:	e8 37 47 ff ff       	call   c000c296 <VAS::VAS(bool)>
c0017b5f:	83 c4 10             	add    esp,0x10
c0017b62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b66:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b70:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017b7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b7e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017b82:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017b88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017b92:	85 c0                	test   eax,eax
c0017b94:	74 42                	je     c0017bd8 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b9a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017ba0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017ba6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017baa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017bb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017bc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc4:	05 0c 01 00 00       	add    eax,0x10c
c0017bc9:	83 ec 08             	sub    esp,0x8
c0017bcc:	52                   	push   edx
c0017bcd:	50                   	push   eax
c0017bce:	e8 6d 8b fe ff       	call   c0000740 <strcpy>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	eb 64                	jmp    c0017c3c <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017bd8:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017be0:	83 ec 0c             	sub    esp,0xc
c0017be3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017be7:	e8 d7 1d ff ff       	call   c00099c3 <malloc>
c0017bec:	83 c4 10             	add    esp,0x10
c0017bef:	89 c3                	mov    ebx,eax
c0017bf1:	83 ec 08             	sub    esp,0x8
c0017bf4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017bf8:	53                   	push   ebx
c0017bf9:	e8 a8 31 ff ff       	call   c000ada6 <VgaText::VgaText(char const*)>
c0017bfe:	83 c4 10             	add    esp,0x10
c0017c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c05:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017c0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c15:	83 ec 0c             	sub    esp,0xc
c0017c18:	50                   	push   eax
c0017c19:	e8 47 29 ff ff       	call   c000a565 <addToTerminalCycle(VgaText*)>
c0017c1e:	83 c4 10             	add    esp,0x10
c0017c21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c25:	05 0c 01 00 00       	add    eax,0x10c
c0017c2a:	83 ec 08             	sub    esp,0x8
c0017c2d:	68 38 46 02 c0       	push   0xc0024638
c0017c32:	50                   	push   eax
c0017c33:	e8 08 8b fe ff       	call   c0000740 <strcpy>
c0017c38:	83 c4 10             	add    esp,0x10
c0017c3b:	90                   	nop
c0017c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c40:	83 c0 0c             	add    eax,0xc
c0017c43:	83 ec 08             	sub    esp,0x8
c0017c46:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c4a:	50                   	push   eax
c0017c4b:	e8 f0 8a fe ff       	call   c0000740 <strcpy>
c0017c50:	83 c4 10             	add    esp,0x10
c0017c53:	83 ec 08             	sub    esp,0x8
c0017c56:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c5e:	e8 09 fc ff ff       	call   c001786c <Process::addArgs(char**)>
c0017c63:	83 c4 10             	add    esp,0x10
c0017c66:	90                   	nop
c0017c67:	83 c4 24             	add    esp,0x24
c0017c6a:	5b                   	pop    ebx
c0017c6b:	5e                   	pop    esi
c0017c6c:	c3                   	ret    
c0017c6d:	8d 76 00             	lea    esi,[esi+0x0]

c0017c70 <taskStartupFunction>:
c0017c70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c75:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017c78:	c3                   	ret    
c0017c79:	90                   	nop
c0017c7a:	66 90                	xchg   ax,ax

c0017c7c <Semaphore::Semaphore(int)>:
c0017c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c84:	89 10                	mov    DWORD PTR [eax],edx
c0017c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c8a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017ca7:	90                   	nop
c0017ca8:	c3                   	ret    
c0017ca9:	90                   	nop
c0017caa:	66 90                	xchg   ax,ax

c0017cac <Mutex::Mutex()>:
c0017cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb0:	6a 01                	push   0x1
c0017cb2:	50                   	push   eax
c0017cb3:	e8 c4 ff ff ff       	call   c0017c7c <Semaphore::Semaphore(int)>
c0017cb8:	83 c4 08             	add    esp,0x8
c0017cbb:	90                   	nop
c0017cbc:	c3                   	ret    
c0017cbd:	90                   	nop
c0017cbe:	66 90                	xchg   ax,ax

c0017cc0 <Process::createThread(void (*)(void*), void*, int)>:
c0017cc0:	57                   	push   edi
c0017cc1:	31 c9                	xor    ecx,ecx
c0017cc3:	56                   	push   esi
c0017cc4:	53                   	push   ebx
c0017cc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017cc9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017cd0:	89 f2                	mov    edx,esi
c0017cd2:	66 90                	xchg   ax,ax
c0017cd4:	0f b7 c2             	movzx  eax,dx
c0017cd7:	83 e2 01             	and    edx,0x1
c0017cda:	74 14                	je     c0017cf0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017cdc:	d1 f8                	sar    eax,1
c0017cde:	41                   	inc    ecx
c0017cdf:	89 c2                	mov    edx,eax
c0017ce1:	83 f9 10             	cmp    ecx,0x10
c0017ce4:	75 ee                	jne    c0017cd4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017ce6:	31 db                	xor    ebx,ebx
c0017ce8:	89 d8                	mov    eax,ebx
c0017cea:	5b                   	pop    ebx
c0017ceb:	5e                   	pop    esi
c0017cec:	5f                   	pop    edi
c0017ced:	c3                   	ret    
c0017cee:	66 90                	xchg   ax,ax
c0017cf0:	b8 01 00 00 00       	mov    eax,0x1
c0017cf5:	d3 e0                	shl    eax,cl
c0017cf7:	09 c6                	or     esi,eax
c0017cf9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017cfc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017d03:	01 c0                	add    eax,eax
c0017d05:	01 c8                	add    eax,ecx
c0017d07:	8d 04 80             	lea    eax,[eax+eax*4]
c0017d0a:	01 d8                	add    eax,ebx
c0017d0c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017d13:	75 0b                	jne    c0017d20 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017d15:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017d1f:	90                   	nop
c0017d20:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017d26:	83 ec 08             	sub    esp,0x8
c0017d29:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017d2c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d2f:	01 c0                	add    eax,eax
c0017d31:	01 c8                	add    eax,ecx
c0017d33:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017d36:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017d39:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d3f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017d45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d49:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017d4f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017d55:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017d5c:	89 ca                	mov    edx,ecx
c0017d5e:	f7 da                	neg    edx
c0017d60:	c1 e2 15             	shl    edx,0x15
c0017d63:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d69:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d73:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017d7d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017d83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d87:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017d8d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017d97:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017da1:	53                   	push   ebx
c0017da2:	68 64 76 02 c0       	push   0xc0027664
c0017da7:	e8 b4 97 00 00       	call   c0021560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	89 d8                	mov    eax,ebx
c0017db1:	5b                   	pop    ebx
c0017db2:	5e                   	pop    esi
c0017db3:	5f                   	pop    edi
c0017db4:	c3                   	ret    
c0017db5:	90                   	nop
c0017db6:	66 90                	xchg   ax,ax

c0017db8 <Process::createUserThread()>:
c0017db8:	83 ec 0c             	sub    esp,0xc
c0017dbb:	68 80 00 00 00       	push   0x80
c0017dc0:	6a 00                	push   0x0
c0017dc2:	68 60 77 01 c0       	push   0xc0017760
c0017dc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dcb:	e8 f0 fe ff ff       	call   c0017cc0 <Process::createThread(void (*)(void*), void*, int)>
c0017dd0:	83 c4 1c             	add    esp,0x1c
c0017dd3:	c3                   	ret    

c0017dd4 <setupMultitasking(void (*)())>:
c0017dd4:	56                   	push   esi
c0017dd5:	53                   	push   ebx
c0017dd6:	51                   	push   ecx
c0017dd7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017ddb:	eb 13                	jmp    c0017df0 <setupMultitasking(void (*)())+0x1c>
c0017ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0017de0:	83 ec 0c             	sub    esp,0xc
c0017de3:	68 64 76 02 c0       	push   0xc0027664
c0017de8:	e8 bb 96 00 00       	call   c00214a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017ded:	83 c4 10             	add    esp,0x10
c0017df0:	83 ec 0c             	sub    esp,0xc
c0017df3:	68 64 76 02 c0       	push   0xc0027664
c0017df8:	e8 87 96 00 00       	call   c0021484 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017dfd:	83 c4 10             	add    esp,0x10
c0017e00:	84 c0                	test   al,al
c0017e02:	74 dc                	je     c0017de0 <setupMultitasking(void (*)())+0xc>
c0017e04:	83 ec 0c             	sub    esp,0xc
c0017e07:	68 1f 07 00 00       	push   0x71f
c0017e0c:	e8 b2 1b ff ff       	call   c00099c3 <malloc>
c0017e11:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e18:	89 c3                	mov    ebx,eax
c0017e1a:	6a 00                	push   0x0
c0017e1c:	68 3c 46 02 c0       	push   0xc002463c
c0017e21:	6a 01                	push   0x1
c0017e23:	50                   	push   eax
c0017e24:	e8 8f fc ff ff       	call   c0017ab8 <Process::Process(bool, char const*, Process*, char**)>
c0017e29:	83 c4 14             	add    esp,0x14
c0017e2c:	89 1d 70 76 02 c0    	mov    DWORD PTR ds:0xc0027670,ebx
c0017e32:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017e38:	e8 36 2a ff ff       	call   c000a873 <setActiveTerminal(VgaText*)>
c0017e3d:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017e45:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017e4f:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017e55:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017e58:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017e62:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e68:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017e6e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e78:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017e82:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017e8c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017e92:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017e9c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017ea2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017eac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017eb2:	58                   	pop    eax
c0017eb3:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017eb9:	5a                   	pop    edx
c0017eba:	68 38 46 02 c0       	push   0xc0024638
c0017ebf:	50                   	push   eax
c0017ec0:	e8 7b 88 fe ff       	call   c0000740 <strcpy>
c0017ec5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017ecc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017ed0:	83 c4 14             	add    esp,0x14
c0017ed3:	5b                   	pop    ebx
c0017ed4:	5e                   	pop    esi
c0017ed5:	e9 af 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017eda:	66 90                	xchg   ax,ax

c0017edc <schedule()>:
c0017edc:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c0017ee1:	85 c0                	test   eax,eax
c0017ee3:	74 0b                	je     c0017ef0 <schedule()+0x14>
c0017ee5:	c7 05 40 76 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x1
c0017eef:	c3                   	ret    
c0017ef0:	53                   	push   ebx
c0017ef1:	83 ec 14             	sub    esp,0x14
c0017ef4:	68 64 76 02 c0       	push   0xc0027664
c0017ef9:	e8 86 95 00 00       	call   c0021484 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017efe:	83 c4 10             	add    esp,0x10
c0017f01:	84 c0                	test   al,al
c0017f03:	75 3b                	jne    c0017f40 <schedule()+0x64>
c0017f05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f0d:	4a                   	dec    edx
c0017f0e:	74 38                	je     c0017f48 <schedule()+0x6c>
c0017f10:	83 ec 0c             	sub    esp,0xc
c0017f13:	68 64 76 02 c0       	push   0xc0027664
c0017f18:	e8 83 95 00 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f1d:	c7 04 24 64 76 02 c0 	mov    DWORD PTR [esp],0xc0027664
c0017f24:	89 c3                	mov    ebx,eax
c0017f26:	e8 7d 95 00 00       	call   c00214a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f2b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f35:	e8 7e f8 ff ff       	call   c00177b8 <switchToThread(ThreadControlBlock*)>
c0017f3a:	83 c4 10             	add    esp,0x10
c0017f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f40:	83 c4 08             	add    esp,0x8
c0017f43:	5b                   	pop    ebx
c0017f44:	c3                   	ret    
c0017f45:	8d 76 00             	lea    esi,[esi+0x0]
c0017f48:	83 ec 08             	sub    esp,0x8
c0017f4b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f52:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f58:	68 64 76 02 c0       	push   0xc0027664
c0017f5d:	e8 fe 95 00 00       	call   c0021560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f62:	83 c4 10             	add    esp,0x10
c0017f65:	eb a9                	jmp    c0017f10 <schedule()+0x34>
c0017f67:	90                   	nop

c0017f68 <Semaphore::tryAcquire()>:
c0017f68:	53                   	push   ebx
c0017f69:	83 ec 08             	sub    esp,0x8
c0017f6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f70:	fa                   	cli    
c0017f71:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0017f76:	8d 50 01             	lea    edx,[eax+0x1]
c0017f79:	89 15 48 76 02 c0    	mov    DWORD PTR ds:0xc0027648,edx
c0017f7f:	8b 15 44 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027644
c0017f85:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017f88:	89 1d 44 76 02 c0    	mov    DWORD PTR ds:0xc0027644,ebx
c0017f8e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017f91:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017f93:	7c 33                	jl     c0017fc8 <Semaphore::tryAcquire()+0x60>
c0017f95:	89 15 44 76 02 c0    	mov    DWORD PTR ds:0xc0027644,edx
c0017f9b:	85 d2                	test   edx,edx
c0017f9d:	75 0d                	jne    c0017fac <Semaphore::tryAcquire()+0x44>
c0017f9f:	8b 15 40 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027640
c0017fa5:	85 d2                	test   edx,edx
c0017fa7:	75 6b                	jne    c0018014 <Semaphore::tryAcquire()+0xac>
c0017fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fac:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0017fb1:	85 c0                	test   eax,eax
c0017fb3:	74 0b                	je     c0017fc0 <Semaphore::tryAcquire()+0x58>
c0017fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fb8:	31 c0                	xor    eax,eax
c0017fba:	83 c4 08             	add    esp,0x8
c0017fbd:	5b                   	pop    ebx
c0017fbe:	c3                   	ret    
c0017fbf:	90                   	nop
c0017fc0:	fb                   	sti    
c0017fc1:	83 c4 08             	add    esp,0x8
c0017fc4:	5b                   	pop    ebx
c0017fc5:	c3                   	ret    
c0017fc6:	66 90                	xchg   ax,ax
c0017fc8:	43                   	inc    ebx
c0017fc9:	89 15 44 76 02 c0    	mov    DWORD PTR ds:0xc0027644,edx
c0017fcf:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017fd2:	85 d2                	test   edx,edx
c0017fd4:	75 22                	jne    c0017ff8 <Semaphore::tryAcquire()+0x90>
c0017fd6:	8b 0d 40 76 02 c0    	mov    ecx,DWORD PTR ds:0xc0027640
c0017fdc:	85 c9                	test   ecx,ecx
c0017fde:	74 18                	je     c0017ff8 <Semaphore::tryAcquire()+0x90>
c0017fe0:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c0017fea:	e8 ed fe ff ff       	call   c0017edc <schedule()>
c0017fef:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0017ff4:	48                   	dec    eax
c0017ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ff8:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0017ffd:	85 c0                	test   eax,eax
c0017fff:	75 0b                	jne    c001800c <Semaphore::tryAcquire()+0xa4>
c0018001:	fb                   	sti    
c0018002:	b0 01                	mov    al,0x1
c0018004:	83 c4 08             	add    esp,0x8
c0018007:	5b                   	pop    ebx
c0018008:	c3                   	ret    
c0018009:	8d 76 00             	lea    esi,[esi+0x0]
c001800c:	b0 01                	mov    al,0x1
c001800e:	83 c4 08             	add    esp,0x8
c0018011:	5b                   	pop    ebx
c0018012:	c3                   	ret    
c0018013:	90                   	nop
c0018014:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c001801e:	e8 b9 fe ff ff       	call   c0017edc <schedule()>
c0018023:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018028:	48                   	dec    eax
c0018029:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c001802e:	85 c0                	test   eax,eax
c0018030:	75 86                	jne    c0017fb8 <Semaphore::tryAcquire()+0x50>
c0018032:	eb 8c                	jmp    c0017fc0 <Semaphore::tryAcquire()+0x58>

c0018034 <Semaphore::assertLocked(char const*)>:
c0018034:	83 ec 0c             	sub    esp,0xc
c0018037:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001803b:	fa                   	cli    
c001803c:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0018042:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c0018047:	8d 48 01             	lea    ecx,[eax+0x1]
c001804a:	89 0d 44 76 02 c0    	mov    DWORD PTR ds:0xc0027644,ecx
c0018050:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018052:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018055:	7c 29                	jl     c0018080 <Semaphore::assertLocked(char const*)+0x4c>
c0018057:	90                   	nop
c0018058:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c001805d:	85 c0                	test   eax,eax
c001805f:	75 0b                	jne    c001806c <Semaphore::assertLocked(char const*)+0x38>
c0018061:	a1 40 76 02 c0       	mov    eax,ds:0xc0027640
c0018066:	85 c0                	test   eax,eax
c0018068:	75 2e                	jne    c0018098 <Semaphore::assertLocked(char const*)+0x64>
c001806a:	66 90                	xchg   ax,ax
c001806c:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018071:	48                   	dec    eax
c0018072:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018077:	75 03                	jne    c001807c <Semaphore::assertLocked(char const*)+0x48>
c0018079:	fb                   	sti    
c001807a:	66 90                	xchg   ax,ax
c001807c:	83 c4 0c             	add    esp,0xc
c001807f:	c3                   	ret    
c0018080:	83 ec 0c             	sub    esp,0xc
c0018083:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018087:	e8 7f c2 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001808c:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	48                   	dec    eax
c0018095:	eb c1                	jmp    c0018058 <Semaphore::assertLocked(char const*)+0x24>
c0018097:	90                   	nop
c0018098:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c00180a2:	e8 35 fe ff ff       	call   c0017edc <schedule()>
c00180a7:	eb c3                	jmp    c001806c <Semaphore::assertLocked(char const*)+0x38>
c00180a9:	8d 76 00             	lea    esi,[esi+0x0]

c00180ac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00180ac:	83 ec 0c             	sub    esp,0xc
c00180af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180bb:	e8 1c fe ff ff       	call   c0017edc <schedule()>
c00180c0:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00180c5:	48                   	dec    eax
c00180c6:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00180cb:	75 03                	jne    c00180d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00180cd:	fb                   	sti    
c00180ce:	66 90                	xchg   ax,ax
c00180d0:	83 c4 0c             	add    esp,0xc
c00180d3:	c3                   	ret    

c00180d4 <blockTask(TaskState)>:
c00180d4:	83 ec 0c             	sub    esp,0xc
c00180d7:	fa                   	cli    
c00180d8:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c00180de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180e7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180ea:	e8 ed fd ff ff       	call   c0017edc <schedule()>
c00180ef:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00180f4:	48                   	dec    eax
c00180f5:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00180fa:	75 04                	jne    c0018100 <blockTask(TaskState)+0x2c>
c00180fc:	fb                   	sti    
c00180fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018100:	83 c4 0c             	add    esp,0xc
c0018103:	c3                   	ret    

c0018104 <waitTask(int, int*, int)>:
c0018104:	83 ec 18             	sub    esp,0x18
c0018107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001810c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018110:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018113:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001811c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001811f:	6a 07                	push   0x7
c0018121:	e8 ae ff ff ff       	call   c00180d4 <blockTask(TaskState)>
c0018126:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001812b:	83 c4 10             	add    esp,0x10
c001812e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018131:	85 d2                	test   edx,edx
c0018133:	74 0b                	je     c0018140 <waitTask(int, int*, int)+0x3c>
c0018135:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018138:	89 02                	mov    DWORD PTR [edx],eax
c001813a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001813f:	90                   	nop
c0018140:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018143:	83 c4 0c             	add    esp,0xc
c0018146:	c3                   	ret    
c0018147:	90                   	nop

c0018148 <milliTenthSleepUntil(unsigned int)>:
c0018148:	83 ec 0c             	sub    esp,0xc
c001814b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001814f:	39 05 ac 67 02 c0    	cmp    DWORD PTR ds:0xc00267ac,eax
c0018155:	76 05                	jbe    c001815c <milliTenthSleepUntil(unsigned int)+0x14>
c0018157:	90                   	nop
c0018158:	83 c4 0c             	add    esp,0xc
c001815b:	c3                   	ret    
c001815c:	fa                   	cli    
c001815d:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0018163:	83 ec 08             	sub    esp,0x8
c0018166:	ff 05 44 76 02 c0    	inc    DWORD PTR ds:0xc0027644
c001816c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018172:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018175:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001817b:	68 58 76 02 c0       	push   0xc0027658
c0018180:	e8 db 93 00 00       	call   c0021560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018185:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001818c:	e8 43 ff ff ff       	call   c00180d4 <blockTask(TaskState)>
c0018191:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c0018196:	83 c4 10             	add    esp,0x10
c0018199:	48                   	dec    eax
c001819a:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c001819f:	85 c0                	test   eax,eax
c00181a1:	75 09                	jne    c00181ac <milliTenthSleepUntil(unsigned int)+0x64>
c00181a3:	a1 40 76 02 c0       	mov    eax,ds:0xc0027640
c00181a8:	85 c0                	test   eax,eax
c00181aa:	75 14                	jne    c00181c0 <milliTenthSleepUntil(unsigned int)+0x78>
c00181ac:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00181b1:	48                   	dec    eax
c00181b2:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00181b7:	75 9f                	jne    c0018158 <milliTenthSleepUntil(unsigned int)+0x10>
c00181b9:	fb                   	sti    
c00181ba:	83 c4 0c             	add    esp,0xc
c00181bd:	c3                   	ret    
c00181be:	66 90                	xchg   ax,ax
c00181c0:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c00181ca:	e8 0d fd ff ff       	call   c0017edc <schedule()>
c00181cf:	eb db                	jmp    c00181ac <milliTenthSleepUntil(unsigned int)+0x64>
c00181d1:	8d 76 00             	lea    esi,[esi+0x0]

c00181d4 <milliTenthSleep(unsigned int)>:
c00181d4:	a1 ac 67 02 c0       	mov    eax,ds:0xc00267ac
c00181d9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00181dd:	e9 66 ff ff ff       	jmp    c0018148 <milliTenthSleepUntil(unsigned int)>
c00181e2:	66 90                	xchg   ax,ax

c00181e4 <sleep(unsigned int)>:
c00181e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181e8:	8d 04 80             	lea    eax,[eax+eax*4]
c00181eb:	8d 04 80             	lea    eax,[eax+eax*4]
c00181ee:	8d 04 80             	lea    eax,[eax+eax*4]
c00181f1:	8d 04 80             	lea    eax,[eax+eax*4]
c00181f4:	c1 e0 04             	shl    eax,0x4
c00181f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181fb:	eb d7                	jmp    c00181d4 <milliTenthSleep(unsigned int)>
c00181fd:	90                   	nop
c00181fe:	66 90                	xchg   ax,ax

c0018200 <Semaphore::acquire()>:
c0018200:	83 ec 0c             	sub    esp,0xc
c0018203:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018207:	fa                   	cli    
c0018208:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c001820d:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0018213:	8d 48 01             	lea    ecx,[eax+0x1]
c0018216:	89 0d 44 76 02 c0    	mov    DWORD PTR ds:0xc0027644,ecx
c001821c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001821f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018221:	7d 2d                	jge    c0018250 <Semaphore::acquire()+0x50>
c0018223:	41                   	inc    ecx
c0018224:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018227:	90                   	nop
c0018228:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c001822d:	85 c0                	test   eax,eax
c001822f:	75 0b                	jne    c001823c <Semaphore::acquire()+0x3c>
c0018231:	a1 40 76 02 c0       	mov    eax,ds:0xc0027640
c0018236:	85 c0                	test   eax,eax
c0018238:	75 62                	jne    c001829c <Semaphore::acquire()+0x9c>
c001823a:	66 90                	xchg   ax,ax
c001823c:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018241:	48                   	dec    eax
c0018242:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018247:	75 03                	jne    c001824c <Semaphore::acquire()+0x4c>
c0018249:	fb                   	sti    
c001824a:	66 90                	xchg   ax,ax
c001824c:	83 c4 0c             	add    esp,0xc
c001824f:	c3                   	ret    
c0018250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018255:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001825c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001825f:	85 c9                	test   ecx,ecx
c0018261:	74 4d                	je     c00182b0 <Semaphore::acquire()+0xb0>
c0018263:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018266:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001826c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001826f:	90                   	nop
c0018270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018275:	83 ec 0c             	sub    esp,0xc
c0018278:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001827b:	68 b8 46 02 c0       	push   0xc00246b8
c0018280:	e8 e6 47 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0018285:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001828c:	e8 43 fe ff ff       	call   c00180d4 <blockTask(TaskState)>
c0018291:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c0018296:	83 c4 10             	add    esp,0x10
c0018299:	48                   	dec    eax
c001829a:	eb 8c                	jmp    c0018228 <Semaphore::acquire()+0x28>
c001829c:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c00182a6:	e8 31 fc ff ff       	call   c0017edc <schedule()>
c00182ab:	eb 8f                	jmp    c001823c <Semaphore::acquire()+0x3c>
c00182ad:	8d 76 00             	lea    esi,[esi+0x0]
c00182b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182b5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00182b8:	eb b6                	jmp    c0018270 <Semaphore::acquire()+0x70>
c00182ba:	66 90                	xchg   ax,ax

c00182bc <taskReturned>:
c00182bc:	83 ec 18             	sub    esp,0x18
c00182bf:	68 d8 46 02 c0       	push   0xc00246d8
c00182c4:	e8 42 c0 ff ff       	call   c001430b <Krnl::panic(char const*)>
c00182c9:	83 c4 10             	add    esp,0x10
c00182cc:	83 ec 0c             	sub    esp,0xc
c00182cf:	6a 02                	push   0x2
c00182d1:	e8 fe fd ff ff       	call   c00180d4 <blockTask(TaskState)>
c00182d6:	fa                   	cli    
c00182d7:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c00182dd:	e8 fa fb ff ff       	call   c0017edc <schedule()>
c00182e2:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00182e7:	83 c4 10             	add    esp,0x10
c00182ea:	48                   	dec    eax
c00182eb:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00182f0:	85 c0                	test   eax,eax
c00182f2:	75 d8                	jne    c00182cc <taskReturned+0x10>
c00182f4:	fb                   	sti    
c00182f5:	eb d5                	jmp    c00182cc <taskReturned+0x10>
c00182f7:	90                   	nop

c00182f8 <Thr::processFromPID(int)>:
c00182f8:	57                   	push   edi
c00182f9:	56                   	push   esi
c00182fa:	53                   	push   ebx
c00182fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00182ff:	fa                   	cli    
c0018300:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0018306:	83 ec 0c             	sub    esp,0xc
c0018309:	68 64 76 02 c0       	push   0xc0027664
c001830e:	e8 8d 91 00 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018313:	83 c4 10             	add    esp,0x10
c0018316:	89 c7                	mov    edi,eax
c0018318:	eb 16                	jmp    c0018330 <Thr::processFromPID(int)+0x38>
c001831a:	66 90                	xchg   ax,ax
c001831c:	83 ec 0c             	sub    esp,0xc
c001831f:	68 64 76 02 c0       	push   0xc0027664
c0018324:	e8 77 91 00 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018329:	83 c4 10             	add    esp,0x10
c001832c:	39 f8                	cmp    eax,edi
c001832e:	74 4c                	je     c001837c <Thr::processFromPID(int)+0x84>
c0018330:	83 ec 0c             	sub    esp,0xc
c0018333:	68 64 76 02 c0       	push   0xc0027664
c0018338:	e8 63 91 00 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001833d:	c7 04 24 64 76 02 c0 	mov    DWORD PTR [esp],0xc0027664
c0018344:	89 c3                	mov    ebx,eax
c0018346:	e8 5d 91 00 00       	call   c00214a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001834b:	58                   	pop    eax
c001834c:	5a                   	pop    edx
c001834d:	53                   	push   ebx
c001834e:	68 64 76 02 c0       	push   0xc0027664
c0018353:	e8 08 92 00 00       	call   c0021560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018358:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001835b:	83 c4 10             	add    esp,0x10
c001835e:	39 30                	cmp    DWORD PTR [eax],esi
c0018360:	75 ba                	jne    c001831c <Thr::processFromPID(int)+0x24>
c0018362:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018367:	48                   	dec    eax
c0018368:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c001836d:	74 09                	je     c0018378 <Thr::processFromPID(int)+0x80>
c001836f:	90                   	nop
c0018370:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018373:	5b                   	pop    ebx
c0018374:	5e                   	pop    esi
c0018375:	5f                   	pop    edi
c0018376:	c3                   	ret    
c0018377:	90                   	nop
c0018378:	fb                   	sti    
c0018379:	eb f5                	jmp    c0018370 <Thr::processFromPID(int)+0x78>
c001837b:	90                   	nop
c001837c:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018381:	48                   	dec    eax
c0018382:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018387:	75 07                	jne    c0018390 <Thr::processFromPID(int)+0x98>
c0018389:	fb                   	sti    
c001838a:	5b                   	pop    ebx
c001838b:	5e                   	pop    esi
c001838c:	5f                   	pop    edi
c001838d:	c3                   	ret    
c001838e:	66 90                	xchg   ax,ax
c0018390:	5b                   	pop    ebx
c0018391:	31 c0                	xor    eax,eax
c0018393:	5e                   	pop    esi
c0018394:	5f                   	pop    edi
c0018395:	c3                   	ret    
c0018396:	66 90                	xchg   ax,ax

c0018398 <unblockTask(ThreadControlBlock*)>:
c0018398:	53                   	push   ebx
c0018399:	83 ec 08             	sub    esp,0x8
c001839c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183a0:	fa                   	cli    
c00183a1:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c00183a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183aa:	85 c0                	test   eax,eax
c00183ac:	74 66                	je     c0018414 <unblockTask(ThreadControlBlock*)+0x7c>
c00183ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183b1:	48                   	dec    eax
c00183b2:	74 38                	je     c00183ec <unblockTask(ThreadControlBlock*)+0x54>
c00183b4:	83 ec 0c             	sub    esp,0xc
c00183b7:	68 64 76 02 c0       	push   0xc0027664
c00183bc:	e8 df 90 00 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183c1:	83 c4 10             	add    esp,0x10
c00183c4:	85 c0                	test   eax,eax
c00183c6:	75 1c                	jne    c00183e4 <unblockTask(ThreadControlBlock*)+0x4c>
c00183c8:	eb 5e                	jmp    c0018428 <unblockTask(ThreadControlBlock*)+0x90>
c00183ca:	66 90                	xchg   ax,ax
c00183cc:	83 ec 08             	sub    esp,0x8
c00183cf:	50                   	push   eax
c00183d0:	68 64 76 02 c0       	push   0xc0027664
c00183d5:	e8 76 94 00 00       	call   c0021850 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00183da:	83 c4 10             	add    esp,0x10
c00183dd:	85 c0                	test   eax,eax
c00183df:	74 47                	je     c0018428 <unblockTask(ThreadControlBlock*)+0x90>
c00183e1:	8d 76 00             	lea    esi,[esi+0x0]
c00183e4:	39 c3                	cmp    ebx,eax
c00183e6:	75 e4                	jne    c00183cc <unblockTask(ThreadControlBlock*)+0x34>
c00183e8:	eb 12                	jmp    c00183fc <unblockTask(ThreadControlBlock*)+0x64>
c00183ea:	66 90                	xchg   ax,ax
c00183ec:	83 ec 0c             	sub    esp,0xc
c00183ef:	68 5a 46 02 c0       	push   0xc002465a
c00183f4:	e8 72 46 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00183f9:	83 c4 10             	add    esp,0x10
c00183fc:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018401:	48                   	dec    eax
c0018402:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018407:	75 03                	jne    c001840c <unblockTask(ThreadControlBlock*)+0x74>
c0018409:	fb                   	sti    
c001840a:	66 90                	xchg   ax,ax
c001840c:	83 c4 08             	add    esp,0x8
c001840f:	5b                   	pop    ebx
c0018410:	c3                   	ret    
c0018411:	8d 76 00             	lea    esi,[esi+0x0]
c0018414:	83 ec 0c             	sub    esp,0xc
c0018417:	68 43 46 02 c0       	push   0xc0024643
c001841c:	e8 4a 46 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0018421:	83 c4 10             	add    esp,0x10
c0018424:	eb d6                	jmp    c00183fc <unblockTask(ThreadControlBlock*)+0x64>
c0018426:	66 90                	xchg   ax,ax
c0018428:	83 ec 08             	sub    esp,0x8
c001842b:	53                   	push   ebx
c001842c:	68 64 76 02 c0       	push   0xc0027664
c0018431:	e8 2a 91 00 00       	call   c0021560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018436:	83 c4 10             	add    esp,0x10
c0018439:	eb c1                	jmp    c00183fc <unblockTask(ThreadControlBlock*)+0x64>
c001843b:	90                   	nop

c001843c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001843c:	55                   	push   ebp
c001843d:	57                   	push   edi
c001843e:	56                   	push   esi
c001843f:	53                   	push   ebx
c0018440:	83 ec 1c             	sub    esp,0x1c
c0018443:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018447:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001844a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018450:	85 ff                	test   edi,edi
c0018452:	7e 24                	jle    c0018478 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018454:	31 f6                	xor    esi,esi
c0018456:	66 90                	xchg   ax,ax
c0018458:	83 ec 0c             	sub    esp,0xc
c001845b:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018462:	46                   	inc    esi
c0018463:	e8 6b 15 ff ff       	call   c00099d3 <free>
c0018468:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001846b:	83 c4 10             	add    esp,0x10
c001846e:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018474:	7f e2                	jg     c0018458 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018476:	66 90                	xchg   ax,ax
c0018478:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018482:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018487:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001848a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001848d:	d3 c0                	rol    eax,cl
c001848f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018496:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018499:	89 f7                	mov    edi,esi
c001849b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00184a3:	0f 85 73 01 00 00    	jne    c001861c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00184a9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00184af:	85 ed                	test   ebp,ebp
c00184b1:	74 1d                	je     c00184d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00184b3:	83 ec 0c             	sub    esp,0xc
c00184b6:	55                   	push   ebp
c00184b7:	e8 f4 bb ff ff       	call   c00140b0 <EnvVarContainer::~EnvVarContainer()>
c00184bc:	59                   	pop    ecx
c00184bd:	5e                   	pop    esi
c00184be:	6a 0c                	push   0xc
c00184c0:	55                   	push   ebp
c00184c1:	e8 c4 44 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00184c6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184c9:	83 c4 10             	add    esp,0x10
c00184cc:	89 f7                	mov    edi,esi
c00184ce:	66 90                	xchg   ax,ax
c00184d0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00184d6:	85 c0                	test   eax,eax
c00184d8:	0f 84 b2 00 00 00    	je     c0018590 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00184de:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00184e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00184e5:	31 c9                	xor    ecx,ecx
c00184e7:	eb 17                	jmp    c0018500 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00184e9:	8d 76 00             	lea    esi,[esi+0x0]
c00184ec:	41                   	inc    ecx
c00184ed:	83 f9 10             	cmp    ecx,0x10
c00184f0:	0f 84 9a 00 00 00    	je     c0018590 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00184f6:	66 90                	xchg   ax,ax
c00184f8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00184fe:	66 90                	xchg   ax,ax
c0018500:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018507:	d3 fa                	sar    edx,cl
c0018509:	83 e2 01             	and    edx,0x1
c001850c:	74 de                	je     c00184ec <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001850e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018511:	01 d2                	add    edx,edx
c0018513:	01 ca                	add    edx,ecx
c0018515:	8d 14 92             	lea    edx,[edx+edx*4]
c0018518:	01 d0                	add    eax,edx
c001851a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018520:	83 fd 07             	cmp    ebp,0x7
c0018523:	75 c7                	jne    c00184ec <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018525:	05 40 02 00 00       	add    eax,0x240
c001852a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001852d:	83 fd ff             	cmp    ebp,0xffffffff
c0018530:	0f 8c ee 00 00 00    	jl     c0018624 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018536:	0f 84 ac 01 00 00    	je     c00186e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c001853c:	85 ed                	test   ebp,ebp
c001853e:	0f 84 90 01 00 00    	je     c00186d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018544:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018546:	75 a4                	jne    c00184ec <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018548:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001854e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018552:	01 d0                	add    eax,edx
c0018554:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018558:	83 ec 0c             	sub    esp,0xc
c001855b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018561:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018564:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001856a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018571:	50                   	push   eax
c0018572:	e8 21 fe ff ff       	call   c0018398 <unblockTask(ThreadControlBlock*)>
c0018577:	83 c4 10             	add    esp,0x10
c001857a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001857d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018581:	89 f7                	mov    edi,esi
c0018583:	41                   	inc    ecx
c0018584:	83 f9 10             	cmp    ecx,0x10
c0018587:	0f 85 6b ff ff ff    	jne    c00184f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001858d:	8d 76 00             	lea    esi,[esi+0x0]
c0018590:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018596:	85 c0                	test   eax,eax
c0018598:	74 62                	je     c00185fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001859a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00185a0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00185a6:	74 54                	je     c00185fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00185a8:	83 ec 0c             	sub    esp,0xc
c00185ab:	68 64 76 02 c0       	push   0xc0027664
c00185b0:	e8 eb 8e 00 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185b5:	c7 04 24 64 76 02 c0 	mov    DWORD PTR [esp],0xc0027664
c00185bc:	89 c7                	mov    edi,eax
c00185be:	e8 c1 8e 00 00       	call   c0021484 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185c3:	83 c4 10             	add    esp,0x10
c00185c6:	84 c0                	test   al,al
c00185c8:	0f 84 ce 00 00 00    	je     c001869c <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00185ce:	66 90                	xchg   ax,ax
c00185d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185d3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00185d9:	85 d2                	test   edx,edx
c00185db:	74 0f                	je     c00185ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00185dd:	83 ec 0c             	sub    esp,0xc
c00185e0:	8b 02                	mov    eax,DWORD PTR [edx]
c00185e2:	52                   	push   edx
c00185e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185e6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185e9:	83 c4 10             	add    esp,0x10
c00185ec:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00185f6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00185f9:	8d 76 00             	lea    esi,[esi+0x0]
c00185fc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018602:	85 db                	test   ebx,ebx
c0018604:	74 16                	je     c001861c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018606:	83 ec 0c             	sub    esp,0xc
c0018609:	53                   	push   ebx
c001860a:	e8 61 36 ff ff       	call   c000bc70 <VAS::~VAS()>
c001860f:	58                   	pop    eax
c0018610:	5a                   	pop    edx
c0018611:	6a 14                	push   0x14
c0018613:	53                   	push   ebx
c0018614:	e8 71 43 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0018619:	83 c4 10             	add    esp,0x10
c001861c:	83 c4 1c             	add    esp,0x1c
c001861f:	5b                   	pop    ebx
c0018620:	5e                   	pop    esi
c0018621:	5f                   	pop    edi
c0018622:	5d                   	pop    ebp
c0018623:	c3                   	ret    
c0018624:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018628:	83 ec 0c             	sub    esp,0xc
c001862b:	68 0c 47 02 c0       	push   0xc002470c
c0018630:	e8 d6 bc ff ff       	call   c001430b <Krnl::panic(char const*)>
c0018635:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018638:	83 c4 10             	add    esp,0x10
c001863b:	89 f7                	mov    edi,esi
c001863d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018641:	e9 a6 fe ff ff       	jmp    c00184ec <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018646:	66 90                	xchg   ax,ax
c0018648:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001864e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018654:	75 1e                	jne    c0018674 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018656:	83 ec 0c             	sub    esp,0xc
c0018659:	68 74 47 02 c0       	push   0xc0024774
c001865e:	e8 08 44 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0018663:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001866a:	e8 65 fa ff ff       	call   c00180d4 <blockTask(TaskState)>
c001866f:	83 c4 10             	add    esp,0x10
c0018672:	66 90                	xchg   ax,ax
c0018674:	83 ec 08             	sub    esp,0x8
c0018677:	56                   	push   esi
c0018678:	68 64 76 02 c0       	push   0xc0027664
c001867d:	e8 de 8e 00 00       	call   c0021560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018682:	c7 04 24 64 76 02 c0 	mov    DWORD PTR [esp],0xc0027664
c0018689:	e8 12 8e 00 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	39 f8                	cmp    eax,edi
c0018693:	0f 84 37 ff ff ff    	je     c00185d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018699:	8d 76 00             	lea    esi,[esi+0x0]
c001869c:	83 ec 0c             	sub    esp,0xc
c001869f:	68 64 76 02 c0       	push   0xc0027664
c00186a4:	e8 f7 8d 00 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186a9:	c7 04 24 64 76 02 c0 	mov    DWORD PTR [esp],0xc0027664
c00186b0:	89 c6                	mov    esi,eax
c00186b2:	e8 f1 8d 00 00       	call   c00214a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186b7:	83 c4 10             	add    esp,0x10
c00186ba:	39 f3                	cmp    ebx,esi
c00186bc:	74 b6                	je     c0018674 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186be:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00186c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186c4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00186ca:	75 a8                	jne    c0018674 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186cc:	e9 77 ff ff ff       	jmp    c0018648 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00186d1:	8d 76 00             	lea    esi,[esi+0x0]
c00186d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186d8:	83 ec 0c             	sub    esp,0xc
c00186db:	68 40 47 02 c0       	push   0xc0024740
c00186e0:	e9 4b ff ff ff       	jmp    c0018630 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00186e5:	8d 76 00             	lea    esi,[esi+0x0]
c00186e8:	8b 36                	mov    esi,DWORD PTR [esi]
c00186ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186ee:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00186f1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186f4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00186fa:	01 d7                	add    edi,edx
c00186fc:	89 f8                	mov    eax,edi
c00186fe:	e9 51 fe ff ff       	jmp    c0018554 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018703:	90                   	nop

c0018704 <cleanerTaskFunction(void*)>:
c0018704:	53                   	push   ebx
c0018705:	83 ec 08             	sub    esp,0x8
c0018708:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c001870d:	48                   	dec    eax
c001870e:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018713:	75 03                	jne    c0018718 <cleanerTaskFunction(void*)+0x14>
c0018715:	fb                   	sti    
c0018716:	66 90                	xchg   ax,ax
c0018718:	fa                   	cli    
c0018719:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c001871e:	80 3d 2c 76 02 c0 00 	cmp    BYTE PTR ds:0xc002762c,0x0
c0018725:	8d 50 01             	lea    edx,[eax+0x1]
c0018728:	89 15 48 76 02 c0    	mov    DWORD PTR ds:0xc0027648,edx
c001872e:	0f 84 ac 00 00 00    	je     c00187e0 <cleanerTaskFunction(void*)+0xdc>
c0018734:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018739:	85 c0                	test   eax,eax
c001873b:	75 03                	jne    c0018740 <cleanerTaskFunction(void*)+0x3c>
c001873d:	fb                   	sti    
c001873e:	66 90                	xchg   ax,ax
c0018740:	c6 05 2c 76 02 c0 00 	mov    BYTE PTR ds:0xc002762c,0x0
c0018747:	fa                   	cli    
c0018748:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c001874e:	ff 05 44 76 02 c0    	inc    DWORD PTR ds:0xc0027644
c0018754:	fa                   	cli    
c0018755:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c001875b:	eb 2b                	jmp    c0018788 <cleanerTaskFunction(void*)+0x84>
c001875d:	8d 76 00             	lea    esi,[esi+0x0]
c0018760:	83 ec 0c             	sub    esp,0xc
c0018763:	68 4c 76 02 c0       	push   0xc002764c
c0018768:	e8 33 8d 00 00       	call   c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001876d:	c7 04 24 4c 76 02 c0 	mov    DWORD PTR [esp],0xc002764c
c0018774:	89 c3                	mov    ebx,eax
c0018776:	e8 2d 8d 00 00       	call   c00214a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001877b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001877e:	e8 b9 fc ff ff       	call   c001843c <cleanupTerminatedTask(ThreadControlBlock*)>
c0018783:	83 c4 10             	add    esp,0x10
c0018786:	66 90                	xchg   ax,ax
c0018788:	83 ec 0c             	sub    esp,0xc
c001878b:	68 4c 76 02 c0       	push   0xc002764c
c0018790:	e8 ef 8c 00 00       	call   c0021484 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018795:	83 c4 10             	add    esp,0x10
c0018798:	84 c0                	test   al,al
c001879a:	74 c4                	je     c0018760 <cleanerTaskFunction(void*)+0x5c>
c001879c:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c00187a1:	48                   	dec    eax
c00187a2:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c00187a7:	75 03                	jne    c00187ac <cleanerTaskFunction(void*)+0xa8>
c00187a9:	fb                   	sti    
c00187aa:	66 90                	xchg   ax,ax
c00187ac:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c00187b1:	48                   	dec    eax
c00187b2:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c00187b7:	0f 85 4b ff ff ff    	jne    c0018708 <cleanerTaskFunction(void*)+0x4>
c00187bd:	a1 40 76 02 c0       	mov    eax,ds:0xc0027640
c00187c2:	85 c0                	test   eax,eax
c00187c4:	0f 84 3e ff ff ff    	je     c0018708 <cleanerTaskFunction(void*)+0x4>
c00187ca:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c00187d4:	e8 03 f7 ff ff       	call   c0017edc <schedule()>
c00187d9:	e9 2a ff ff ff       	jmp    c0018708 <cleanerTaskFunction(void*)+0x4>
c00187de:	66 90                	xchg   ax,ax
c00187e0:	83 ec 0c             	sub    esp,0xc
c00187e3:	6a 02                	push   0x2
c00187e5:	e8 c2 f8 ff ff       	call   c00180ac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00187ea:	83 c4 10             	add    esp,0x10
c00187ed:	e9 4e ff ff ff       	jmp    c0018740 <cleanerTaskFunction(void*)+0x3c>
c00187f2:	66 90                	xchg   ax,ax

c00187f4 <terminateTask(int)>:
c00187f4:	83 ec 14             	sub    esp,0x14
c00187f7:	fa                   	cli    
c00187f8:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c00187fe:	ff 05 44 76 02 c0    	inc    DWORD PTR ds:0xc0027644
c0018804:	fa                   	cli    
c0018805:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c001880b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001880f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018814:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018817:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001881c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001881f:	50                   	push   eax
c0018820:	68 4c 76 02 c0       	push   0xc002764c
c0018825:	e8 36 8d 00 00       	call   c0021560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001882a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001882f:	83 c4 10             	add    esp,0x10
c0018832:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018839:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c001883e:	85 c0                	test   eax,eax
c0018840:	74 5e                	je     c00188a0 <terminateTask(int)+0xac>
c0018842:	83 ec 0c             	sub    esp,0xc
c0018845:	c6 05 2c 76 02 c0 01 	mov    BYTE PTR ds:0xc002762c,0x1
c001884c:	50                   	push   eax
c001884d:	e8 46 fb ff ff       	call   c0018398 <unblockTask(ThreadControlBlock*)>
c0018852:	83 c4 10             	add    esp,0x10
c0018855:	8d 76 00             	lea    esi,[esi+0x0]
c0018858:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c001885d:	48                   	dec    eax
c001885e:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018863:	75 03                	jne    c0018868 <terminateTask(int)+0x74>
c0018865:	fb                   	sti    
c0018866:	66 90                	xchg   ax,ax
c0018868:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c001886d:	48                   	dec    eax
c001886e:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c0018873:	75 0b                	jne    c0018880 <terminateTask(int)+0x8c>
c0018875:	83 3d 40 76 02 c0 00 	cmp    DWORD PTR ds:0xc0027640,0x0
c001887c:	75 36                	jne    c00188b4 <terminateTask(int)+0xc0>
c001887e:	66 90                	xchg   ax,ax
c0018880:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018885:	48                   	dec    eax
c0018886:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c001888b:	75 03                	jne    c0018890 <terminateTask(int)+0x9c>
c001888d:	fb                   	sti    
c001888e:	66 90                	xchg   ax,ax
c0018890:	fa                   	cli    
c0018891:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0018897:	90                   	nop
c0018898:	e8 3f f6 ff ff       	call   c0017edc <schedule()>
c001889d:	eb e1                	jmp    c0018880 <terminateTask(int)+0x8c>
c001889f:	90                   	nop
c00188a0:	83 ec 0c             	sub    esp,0xc
c00188a3:	68 71 46 02 c0       	push   0xc0024671
c00188a8:	e8 be 41 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00188ad:	83 c4 10             	add    esp,0x10
c00188b0:	eb a6                	jmp    c0018858 <terminateTask(int)+0x64>
c00188b2:	66 90                	xchg   ax,ax
c00188b4:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c00188be:	eb d8                	jmp    c0018898 <terminateTask(int)+0xa4>

c00188c0 <Thr::terminateFromIRQ(int)>:
c00188c0:	83 ec 18             	sub    esp,0x18
c00188c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188c7:	e8 28 ff ff ff       	call   c00187f4 <terminateTask(int)>

c00188cc <Semaphore::release()>:
c00188cc:	83 ec 0c             	sub    esp,0xc
c00188cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188d3:	fa                   	cli    
c00188d4:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c00188d9:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c00188df:	8d 48 01             	lea    ecx,[eax+0x1]
c00188e2:	89 0d 44 76 02 c0    	mov    DWORD PTR ds:0xc0027644,ecx
c00188e8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00188eb:	85 c9                	test   ecx,ecx
c00188ed:	74 41                	je     c0018930 <Semaphore::release()+0x64>
c00188ef:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00188f2:	83 ec 0c             	sub    esp,0xc
c00188f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00188f8:	51                   	push   ecx
c00188f9:	e8 9a fa ff ff       	call   c0018398 <unblockTask(ThreadControlBlock*)>
c00188fe:	a1 44 76 02 c0       	mov    eax,ds:0xc0027644
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	48                   	dec    eax
c0018907:	90                   	nop
c0018908:	a3 44 76 02 c0       	mov    ds:0xc0027644,eax
c001890d:	85 c0                	test   eax,eax
c001890f:	75 0b                	jne    c001891c <Semaphore::release()+0x50>
c0018911:	a1 40 76 02 c0       	mov    eax,ds:0xc0027640
c0018916:	85 c0                	test   eax,eax
c0018918:	75 1e                	jne    c0018938 <Semaphore::release()+0x6c>
c001891a:	66 90                	xchg   ax,ax
c001891c:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018921:	48                   	dec    eax
c0018922:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018927:	75 03                	jne    c001892c <Semaphore::release()+0x60>
c0018929:	fb                   	sti    
c001892a:	66 90                	xchg   ax,ax
c001892c:	83 c4 0c             	add    esp,0xc
c001892f:	c3                   	ret    
c0018930:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018933:	eb d3                	jmp    c0018908 <Semaphore::release()+0x3c>
c0018935:	8d 76 00             	lea    esi,[esi+0x0]
c0018938:	c7 05 40 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027640,0x0
c0018942:	e8 95 f5 ff ff       	call   c0017edc <schedule()>
c0018947:	eb d3                	jmp    c001891c <Semaphore::release()+0x50>
c0018949:	8d 76 00             	lea    esi,[esi+0x0]

c001894c <__static_initialization_and_destruction_0(int, int)>:
c001894c:	83 ec 0c             	sub    esp,0xc
c001894f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018954:	0f 85 8e 00 00 00    	jne    c00189e8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001895a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018962:	0f 85 80 00 00 00    	jne    c00189e8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018968:	83 ec 0c             	sub    esp,0xc
c001896b:	68 64 76 02 c0       	push   0xc0027664
c0018970:	e8 97 8e 00 00       	call   c002180c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018975:	83 c4 10             	add    esp,0x10
c0018978:	83 ec 04             	sub    esp,0x4
c001897b:	68 f4 53 02 c0       	push   0xc00253f4
c0018980:	68 64 76 02 c0       	push   0xc0027664
c0018985:	68 bc 17 02 c0       	push   0xc00217bc
c001898a:	e8 75 3f ff ff       	call   c000c904 <__cxa_atexit>
c001898f:	83 c4 10             	add    esp,0x10
c0018992:	83 ec 0c             	sub    esp,0xc
c0018995:	68 58 76 02 c0       	push   0xc0027658
c001899a:	e8 6d 8e 00 00       	call   c002180c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	83 ec 04             	sub    esp,0x4
c00189a5:	68 f4 53 02 c0       	push   0xc00253f4
c00189aa:	68 58 76 02 c0       	push   0xc0027658
c00189af:	68 bc 17 02 c0       	push   0xc00217bc
c00189b4:	e8 4b 3f ff ff       	call   c000c904 <__cxa_atexit>
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	83 ec 0c             	sub    esp,0xc
c00189bf:	68 4c 76 02 c0       	push   0xc002764c
c00189c4:	e8 43 8e 00 00       	call   c002180c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189c9:	83 c4 10             	add    esp,0x10
c00189cc:	83 ec 04             	sub    esp,0x4
c00189cf:	68 f4 53 02 c0       	push   0xc00253f4
c00189d4:	68 4c 76 02 c0       	push   0xc002764c
c00189d9:	68 bc 17 02 c0       	push   0xc00217bc
c00189de:	e8 21 3f ff ff       	call   c000c904 <__cxa_atexit>
c00189e3:	83 c4 10             	add    esp,0x10
c00189e6:	66 90                	xchg   ax,ax
c00189e8:	90                   	nop
c00189e9:	83 c4 0c             	add    esp,0xc
c00189ec:	c3                   	ret    
c00189ed:	8d 76 00             	lea    esi,[esi+0x0]

c00189f0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00189f0:	83 ec 0c             	sub    esp,0xc
c00189f3:	83 ec 08             	sub    esp,0x8
c00189f6:	68 ff ff 00 00       	push   0xffff
c00189fb:	6a 01                	push   0x1
c00189fd:	e8 4a ff ff ff       	call   c001894c <__static_initialization_and_destruction_0(int, int)>
c0018a02:	83 c4 10             	add    esp,0x10
c0018a05:	83 c4 0c             	add    esp,0xc
c0018a08:	c3                   	ret    

c0018a09 <Vm::inbv(unsigned short)>:
c0018a09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a0d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a12:	75 06                	jne    c0018a1a <Vm::inbv(unsigned short)+0x11>
c0018a14:	a0 ac 76 02 c0       	mov    al,ds:0xc00276ac
c0018a19:	c3                   	ret    
c0018a1a:	ec                   	in     al,dx
c0018a1b:	c3                   	ret    

c0018a1c <Vm::outbv(unsigned short, unsigned char)>:
c0018a1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a24:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a29:	75 25                	jne    c0018a50 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018a2b:	8b 0d ac 76 02 c0    	mov    ecx,DWORD PTR ds:0xc00276ac
c0018a31:	8d 51 01             	lea    edx,[ecx+0x1]
c0018a34:	88 81 c0 76 02 c0    	mov    BYTE PTR [ecx-0x3ffd8940],al
c0018a3a:	89 15 ac 76 02 c0    	mov    DWORD PTR ds:0xc00276ac,edx
c0018a40:	83 fa 20             	cmp    edx,0x20
c0018a43:	75 0c                	jne    c0018a51 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018a45:	c7 05 ac 76 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00276ac,0x1f
c0018a4f:	c3                   	ret    
c0018a50:	ee                   	out    dx,al
c0018a51:	c3                   	ret    

c0018a52 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a52:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a57:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a5c:	c1 e0 04             	shl    eax,0x4
c0018a5f:	01 d0                	add    eax,edx
c0018a61:	c3                   	ret    

c0018a62 <Vm::getSegment(unsigned int)>:
c0018a62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a66:	c1 e8 10             	shr    eax,0x10
c0018a69:	c3                   	ret    

c0018a6a <Vm::getOffset(unsigned int)>:
c0018a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a6e:	c3                   	ret    

c0018a6f <Vm::mainloop2()>:
c0018a6f:	83 ec 18             	sub    esp,0x18
c0018a72:	fa                   	cli    
c0018a73:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0018a79:	6a 02                	push   0x2
c0018a7b:	c6 05 a5 76 02 c0 01 	mov    BYTE PTR ds:0xc00276a5,0x1
c0018a82:	e8 25 f6 ff ff       	call   c00180ac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018a87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a8c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018a90:	52                   	push   edx
c0018a91:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018a95:	52                   	push   edx
c0018a96:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018a9a:	52                   	push   edx
c0018a9b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018a9f:	50                   	push   eax
c0018aa0:	e8 8a 77 fe ff       	call   c000022f <goToVM86>
c0018aa5:	83 c4 2c             	add    esp,0x2c
c0018aa8:	c3                   	ret    

c0018aa9 <Vm::mainVm8086Loop(void*)>:
c0018aa9:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018aae:	48                   	dec    eax
c0018aaf:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018ab4:	75 01                	jne    c0018ab7 <Vm::mainVm8086Loop(void*)+0xe>
c0018ab6:	fb                   	sti    
c0018ab7:	eb b6                	jmp    c0018a6f <Vm::mainloop2()>

c0018ab9 <Vm::mainloop3(unsigned long)>:
c0018ab9:	83 ec 18             	sub    esp,0x18
c0018abc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ac0:	fa                   	cli    
c0018ac1:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0018ac7:	6a 02                	push   0x2
c0018ac9:	c6 05 a4 76 02 c0 01 	mov    BYTE PTR ds:0xc00276a4,0x1
c0018ad0:	a3 a0 76 02 c0       	mov    ds:0xc00276a0,eax
c0018ad5:	e8 d2 f5 ff ff       	call   c00180ac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018ada:	83 c4 1c             	add    esp,0x1c
c0018add:	eb 90                	jmp    c0018a6f <Vm::mainloop2()>

c0018adf <Vm::initialise8086()>:
c0018adf:	83 ec 0c             	sub    esp,0xc
c0018ae2:	68 80 00 00 00       	push   0x80
c0018ae7:	6a 00                	push   0x0
c0018ae9:	68 a9 8a 01 c0       	push   0xc0018aa9
c0018aee:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c0018af4:	e8 c7 f1 ff ff       	call   c0017cc0 <Process::createThread(void (*)(void*), void*, int)>
c0018af9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018b00:	a3 a8 76 02 c0       	mov    ds:0xc00276a8,eax
c0018b05:	68 00 01 00 00       	push   0x100
c0018b0a:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c0018b0f:	6a 00                	push   0x0
c0018b11:	6a 00                	push   0x0
c0018b13:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018b19:	e8 c4 35 ff ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b1e:	83 c4 2c             	add    esp,0x2c
c0018b21:	c3                   	ret    

c0018b22 <Vm::finish8086()>:
c0018b22:	53                   	push   ebx
c0018b23:	83 ec 08             	sub    esp,0x8
c0018b26:	fa                   	cli    
c0018b27:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0018b2d:	80 3d a4 76 02 c0 00 	cmp    BYTE PTR ds:0xc00276a4,0x0
c0018b34:	75 15                	jne    c0018b4b <Vm::finish8086()+0x29>
c0018b36:	e8 a1 f3 ff ff       	call   c0017edc <schedule()>
c0018b3b:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018b40:	48                   	dec    eax
c0018b41:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018b46:	75 de                	jne    c0018b26 <Vm::finish8086()+0x4>
c0018b48:	fb                   	sti    
c0018b49:	eb db                	jmp    c0018b26 <Vm::finish8086()+0x4>
c0018b4b:	83 ec 0c             	sub    esp,0xc
c0018b4e:	8b 1d a0 76 02 c0    	mov    ebx,DWORD PTR ds:0xc00276a0
c0018b54:	ff 35 a8 76 02 c0    	push   DWORD PTR ds:0xc00276a8
c0018b5a:	c6 05 a4 76 02 c0 00 	mov    BYTE PTR ds:0xc00276a4,0x0
c0018b61:	e8 32 f8 ff ff       	call   c0018398 <unblockTask(ThreadControlBlock*)>
c0018b66:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	8d 50 ff             	lea    edx,[eax-0x1]
c0018b71:	89 15 48 76 02 c0    	mov    DWORD PTR ds:0xc0027648,edx
c0018b77:	85 d2                	test   edx,edx
c0018b79:	75 01                	jne    c0018b7c <Vm::finish8086()+0x5a>
c0018b7b:	fb                   	sti    
c0018b7c:	89 d8                	mov    eax,ebx
c0018b7e:	83 c4 08             	add    esp,0x8
c0018b81:	5b                   	pop    ebx
c0018b82:	c3                   	ret    

c0018b83 <Vm::getOutput8086(unsigned char*)>:
c0018b83:	57                   	push   edi
c0018b84:	8b 0d ac 76 02 c0    	mov    ecx,DWORD PTR ds:0xc00276ac
c0018b8a:	56                   	push   esi
c0018b8b:	be c0 76 02 c0       	mov    esi,0xc00276c0
c0018b90:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018b94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b96:	a1 ac 76 02 c0       	mov    eax,ds:0xc00276ac
c0018b9b:	5e                   	pop    esi
c0018b9c:	c7 05 ac 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00276ac,0x0
c0018ba6:	5f                   	pop    edi
c0018ba7:	c3                   	ret    

c0018ba8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018ba8:	55                   	push   ebp
c0018ba9:	57                   	push   edi
c0018baa:	56                   	push   esi
c0018bab:	53                   	push   ebx
c0018bac:	83 ec 2c             	sub    esp,0x2c
c0018baf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018bb3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018bb7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018bbb:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018bbf:	fa                   	cli    
c0018bc0:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0018bc6:	0f b6 35 a5 76 02 c0 	movzx  esi,BYTE PTR ds:0xc00276a5
c0018bcd:	89 f0                	mov    eax,esi
c0018bcf:	84 c0                	test   al,al
c0018bd1:	75 1d                	jne    c0018bf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018bd3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018bd7:	e8 00 f3 ff ff       	call   c0017edc <schedule()>
c0018bdc:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018be1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018be5:	48                   	dec    eax
c0018be6:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018beb:	75 d2                	jne    c0018bbf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018bed:	fb                   	sti    
c0018bee:	eb cf                	jmp    c0018bbf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018bf0:	a1 a8 76 02 c0       	mov    eax,ds:0xc00276a8
c0018bf5:	c7 05 ac 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00276ac,0x0
c0018bff:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018c03:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018c07:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018c0b:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018c0f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018c13:	50                   	push   eax
c0018c14:	6a 20                	push   0x20
c0018c16:	6a 00                	push   0x0
c0018c18:	68 c0 76 02 c0       	push   0xc00276c0
c0018c1d:	e8 62 7a fe ff       	call   c0000684 <memset>
c0018c22:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018c29:	e8 95 0d ff ff       	call   c00099c3 <malloc>
c0018c2e:	83 c4 0c             	add    esp,0xc
c0018c31:	89 c3                	mov    ebx,eax
c0018c33:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c0018c39:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c3d:	50                   	push   eax
c0018c3e:	e8 93 43 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c0018c43:	83 c4 10             	add    esp,0x10
c0018c46:	85 db                	test   ebx,ebx
c0018c48:	75 0a                	jne    c0018c54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018c4a:	83 ec 0c             	sub    esp,0xc
c0018c4d:	68 9c 47 02 c0       	push   0xc002479c
c0018c52:	eb 3e                	jmp    c0018c92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c54:	50                   	push   eax
c0018c55:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018c59:	50                   	push   eax
c0018c5a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018c5e:	50                   	push   eax
c0018c5f:	53                   	push   ebx
c0018c60:	e8 81 46 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c0018c65:	83 c4 10             	add    esp,0x10
c0018c68:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018c6d:	74 0a                	je     c0018c79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018c6f:	83 ec 0c             	sub    esp,0xc
c0018c72:	68 b0 47 02 c0       	push   0xc00247b0
c0018c77:	eb 19                	jmp    c0018c92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c79:	51                   	push   ecx
c0018c7a:	51                   	push   ecx
c0018c7b:	6a 01                	push   0x1
c0018c7d:	53                   	push   ebx
c0018c7e:	e8 b7 43 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	85 c0                	test   eax,eax
c0018c88:	74 24                	je     c0018cae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018c8a:	83 ec 0c             	sub    esp,0xc
c0018c8d:	68 c9 47 02 c0       	push   0xc00247c9
c0018c92:	e8 74 b6 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0018c97:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018c9c:	83 c4 10             	add    esp,0x10
c0018c9f:	48                   	dec    eax
c0018ca0:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018ca5:	85 c0                	test   eax,eax
c0018ca7:	75 01                	jne    c0018caa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018ca9:	fb                   	sti    
c0018caa:	31 f6                	xor    esi,esi
c0018cac:	eb 58                	jmp    c0018d06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018cae:	0f b7 ed             	movzx  ebp,bp
c0018cb1:	50                   	push   eax
c0018cb2:	0f b7 ff             	movzx  edi,di
c0018cb5:	50                   	push   eax
c0018cb6:	55                   	push   ebp
c0018cb7:	57                   	push   edi
c0018cb8:	e8 95 fd ff ff       	call   c0018a52 <Vm::realToLinear(unsigned short, unsigned short)>
c0018cbd:	5a                   	pop    edx
c0018cbe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018cc0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018cc4:	51                   	push   ecx
c0018cc5:	50                   	push   eax
c0018cc6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cce:	53                   	push   ebx
c0018ccf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018cd2:	83 c4 14             	add    esp,0x14
c0018cd5:	53                   	push   ebx
c0018cd6:	e8 bd 43 ff ff       	call   c000d098 <File::close()>
c0018cdb:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c0018ce0:	83 c4 10             	add    esp,0x10
c0018ce3:	48                   	dec    eax
c0018ce4:	c6 05 a5 76 02 c0 00 	mov    BYTE PTR ds:0xc00276a5,0x0
c0018ceb:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0018cf0:	85 c0                	test   eax,eax
c0018cf2:	75 01                	jne    c0018cf5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018cf4:	fb                   	sti    
c0018cf5:	83 ec 0c             	sub    esp,0xc
c0018cf8:	ff 35 a8 76 02 c0    	push   DWORD PTR ds:0xc00276a8
c0018cfe:	e8 95 f6 ff ff       	call   c0018398 <unblockTask(ThreadControlBlock*)>
c0018d03:	83 c4 10             	add    esp,0x10
c0018d06:	83 c4 2c             	add    esp,0x2c
c0018d09:	89 f0                	mov    eax,esi
c0018d0b:	5b                   	pop    ebx
c0018d0c:	5e                   	pop    esi
c0018d0d:	5f                   	pop    edi
c0018d0e:	5d                   	pop    ebp
c0018d0f:	c3                   	ret    

c0018d10 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018d10:	57                   	push   edi
c0018d11:	56                   	push   esi
c0018d12:	53                   	push   ebx
c0018d13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d1f:	83 e8 06             	sub    eax,0x6
c0018d22:	0f b7 c0             	movzx  eax,ax
c0018d25:	50                   	push   eax
c0018d26:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018d2b:	50                   	push   eax
c0018d2c:	e8 21 fd ff ff       	call   c0018a52 <Vm::realToLinear(unsigned short, unsigned short)>
c0018d31:	5a                   	pop    edx
c0018d32:	5e                   	pop    esi
c0018d33:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018d36:	8d 56 fa             	lea    edx,[esi-0x6]
c0018d39:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018d3f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018d42:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018d45:	83 c2 02             	add    edx,0x2
c0018d48:	66 89 10             	mov    WORD PTR [eax],dx
c0018d4b:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018d4e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018d52:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018d55:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018d59:	89 d6                	mov    esi,edx
c0018d5b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018d61:	66 81 e6 ff fd       	and    si,0xfdff
c0018d66:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018d6a:	74 07                	je     c0018d73 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018d6c:	89 d6                	mov    esi,edx
c0018d6e:	66 81 ce 00 02       	or     si,0x200
c0018d73:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018d77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d7c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018d80:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018d88:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018d8b:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018d93:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018d96:	5b                   	pop    ebx
c0018d97:	5e                   	pop    esi
c0018d98:	5f                   	pop    edi
c0018d99:	c3                   	ret    

c0018d9a <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018d9a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018d9f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018da4:	c1 e0 04             	shl    eax,0x4
c0018da7:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018daa:	c3                   	ret    

c0018dab <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018dab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018db0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018db5:	c1 e0 04             	shl    eax,0x4
c0018db8:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018dbc:	c3                   	ret    

c0018dbd <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018dbd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dc2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dc7:	c1 e0 04             	shl    eax,0x4
c0018dca:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018dcd:	c3                   	ret    

c0018dce <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018dce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dd3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dd8:	c1 e0 04             	shl    eax,0x4
c0018ddb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ddf:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018de2:	c3                   	ret    

c0018de3 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018de3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018de8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018ded:	c1 e0 04             	shl    eax,0x4
c0018df0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018df4:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018df8:	c3                   	ret    

c0018df9 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018df9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dfe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e03:	c1 e0 04             	shl    eax,0x4
c0018e06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e0a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018e0d:	c3                   	ret    

c0018e0e <Vm::faultHandler(regs*)>:
c0018e0e:	55                   	push   ebp
c0018e0f:	57                   	push   edi
c0018e10:	56                   	push   esi
c0018e11:	53                   	push   ebx
c0018e12:	83 ec 1c             	sub    esp,0x1c
c0018e15:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e19:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e1c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e20:	0f b7 f8             	movzx  edi,ax
c0018e23:	52                   	push   edx
c0018e24:	0f b7 c0             	movzx  eax,ax
c0018e27:	50                   	push   eax
c0018e28:	e8 25 fc ff ff       	call   c0018a52 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e2d:	5a                   	pop    edx
c0018e2e:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018e31:	59                   	pop    ecx
c0018e32:	89 c1                	mov    ecx,eax
c0018e34:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e3b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018e44:	0f b7 c5             	movzx  eax,bp
c0018e47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e4b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018e4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018e53:	e8 fa fb ff ff       	call   c0018a52 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e58:	5e                   	pop    esi
c0018e59:	be 06 00 00 00       	mov    esi,0x6
c0018e5e:	5a                   	pop    edx
c0018e5f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018e64:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018e69:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018e6c:	80 fa 9d             	cmp    dl,0x9d
c0018e6f:	0f 84 2c 02 00 00    	je     c00190a1 <Vm::faultHandler(regs*)+0x293>
c0018e75:	0f 87 91 00 00 00    	ja     c0018f0c <Vm::faultHandler(regs*)+0xfe>
c0018e7b:	80 fa 66             	cmp    dl,0x66
c0018e7e:	0f 84 98 01 00 00    	je     c001901c <Vm::faultHandler(regs*)+0x20e>
c0018e84:	77 47                	ja     c0018ecd <Vm::faultHandler(regs*)+0xbf>
c0018e86:	80 fa 36             	cmp    dl,0x36
c0018e89:	0f 84 80 01 00 00    	je     c001900f <Vm::faultHandler(regs*)+0x201>
c0018e8f:	77 1a                	ja     c0018eab <Vm::faultHandler(regs*)+0x9d>
c0018e91:	80 fa 26             	cmp    dl,0x26
c0018e94:	0f 84 4e 01 00 00    	je     c0018fe8 <Vm::faultHandler(regs*)+0x1da>
c0018e9a:	80 fa 2e             	cmp    dl,0x2e
c0018e9d:	0f 85 e2 05 00 00    	jne    c0019485 <Vm::faultHandler(regs*)+0x677>
c0018ea3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ea6:	31 f6                	xor    esi,esi
c0018ea8:	41                   	inc    ecx
c0018ea9:	eb be                	jmp    c0018e69 <Vm::faultHandler(regs*)+0x5b>
c0018eab:	80 fa 64             	cmp    dl,0x64
c0018eae:	0f 84 41 01 00 00    	je     c0018ff5 <Vm::faultHandler(regs*)+0x1e7>
c0018eb4:	0f 87 48 01 00 00    	ja     c0019002 <Vm::faultHandler(regs*)+0x1f4>
c0018eba:	80 fa 3e             	cmp    dl,0x3e
c0018ebd:	0f 85 c2 05 00 00    	jne    c0019485 <Vm::faultHandler(regs*)+0x677>
c0018ec3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ec6:	be 01 00 00 00       	mov    esi,0x1
c0018ecb:	eb db                	jmp    c0018ea8 <Vm::faultHandler(regs*)+0x9a>
c0018ecd:	80 fa 6d             	cmp    dl,0x6d
c0018ed0:	0f 84 ec 02 00 00    	je     c00191c2 <Vm::faultHandler(regs*)+0x3b4>
c0018ed6:	77 17                	ja     c0018eef <Vm::faultHandler(regs*)+0xe1>
c0018ed8:	80 fa 67             	cmp    dl,0x67
c0018edb:	0f 84 48 01 00 00    	je     c0019029 <Vm::faultHandler(regs*)+0x21b>
c0018ee1:	80 fa 6c             	cmp    dl,0x6c
c0018ee4:	0f 84 69 02 00 00    	je     c0019153 <Vm::faultHandler(regs*)+0x345>
c0018eea:	e9 96 05 00 00       	jmp    c0019485 <Vm::faultHandler(regs*)+0x677>
c0018eef:	80 fa 6f             	cmp    dl,0x6f
c0018ef2:	0f 84 f4 03 00 00    	je     c00192ec <Vm::faultHandler(regs*)+0x4de>
c0018ef8:	0f 82 59 03 00 00    	jb     c0019257 <Vm::faultHandler(regs*)+0x449>
c0018efe:	80 fa 9c             	cmp    dl,0x9c
c0018f01:	0f 84 2f 01 00 00    	je     c0019036 <Vm::faultHandler(regs*)+0x228>
c0018f07:	e9 79 05 00 00       	jmp    c0019485 <Vm::faultHandler(regs*)+0x677>
c0018f0c:	80 fa ec             	cmp    dl,0xec
c0018f0f:	0f 84 14 05 00 00    	je     c0019429 <Vm::faultHandler(regs*)+0x61b>
c0018f15:	77 7b                	ja     c0018f92 <Vm::faultHandler(regs*)+0x184>
c0018f17:	80 fa e4             	cmp    dl,0xe4
c0018f1a:	0f 84 93 04 00 00    	je     c00193b3 <Vm::faultHandler(regs*)+0x5a5>
c0018f20:	77 53                	ja     c0018f75 <Vm::faultHandler(regs*)+0x167>
c0018f22:	80 fa cd             	cmp    dl,0xcd
c0018f25:	0f 84 d9 01 00 00    	je     c0019104 <Vm::faultHandler(regs*)+0x2f6>
c0018f2b:	80 fa cf             	cmp    dl,0xcf
c0018f2e:	0f 85 51 05 00 00    	jne    c0019485 <Vm::faultHandler(regs*)+0x677>
c0018f34:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f37:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018f3a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018f3e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018f41:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018f45:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f4b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f4e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018f52:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f58:	66 c1 e8 09          	shr    ax,0x9
c0018f5c:	83 e0 01             	and    eax,0x1
c0018f5f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018f62:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f65:	83 c0 06             	add    eax,0x6
c0018f68:	25 ff ff 00 00       	and    eax,0xffff
c0018f6d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f70:	e9 0c 05 00 00       	jmp    c0019481 <Vm::faultHandler(regs*)+0x673>
c0018f75:	80 fa e6             	cmp    dl,0xe6
c0018f78:	0f 84 7f 04 00 00    	je     c00193fd <Vm::faultHandler(regs*)+0x5ef>
c0018f7e:	0f 82 4b 04 00 00    	jb     c00193cf <Vm::faultHandler(regs*)+0x5c1>
c0018f84:	80 fa e7             	cmp    dl,0xe7
c0018f87:	0f 84 87 04 00 00    	je     c0019414 <Vm::faultHandler(regs*)+0x606>
c0018f8d:	e9 f3 04 00 00       	jmp    c0019485 <Vm::faultHandler(regs*)+0x677>
c0018f92:	80 fa ef             	cmp    dl,0xef
c0018f95:	0f 84 d1 04 00 00    	je     c001946c <Vm::faultHandler(regs*)+0x65e>
c0018f9b:	77 28                	ja     c0018fc5 <Vm::faultHandler(regs*)+0x1b7>
c0018f9d:	80 fa ed             	cmp    dl,0xed
c0018fa0:	0f 84 9f 04 00 00    	je     c0019445 <Vm::faultHandler(regs*)+0x637>
c0018fa6:	80 fa ee             	cmp    dl,0xee
c0018fa9:	0f 85 d6 04 00 00    	jne    c0019485 <Vm::faultHandler(regs*)+0x677>
c0018faf:	50                   	push   eax
c0018fb0:	50                   	push   eax
c0018fb1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018fb5:	50                   	push   eax
c0018fb6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018fba:	50                   	push   eax
c0018fbb:	e8 5c fa ff ff       	call   c0018a1c <Vm::outbv(unsigned short, unsigned char)>
c0018fc0:	e9 9f 04 00 00       	jmp    c0019464 <Vm::faultHandler(regs*)+0x656>
c0018fc5:	80 fa fa             	cmp    dl,0xfa
c0018fc8:	0f 84 69 01 00 00    	je     c0019137 <Vm::faultHandler(regs*)+0x329>
c0018fce:	80 fa fb             	cmp    dl,0xfb
c0018fd1:	0f 84 6e 01 00 00    	je     c0019145 <Vm::faultHandler(regs*)+0x337>
c0018fd7:	80 fa f3             	cmp    dl,0xf3
c0018fda:	0f 85 a5 04 00 00    	jne    c0019485 <Vm::faultHandler(regs*)+0x677>
c0018fe0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fe3:	e9 c0 fe ff ff       	jmp    c0018ea8 <Vm::faultHandler(regs*)+0x9a>
c0018fe8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018feb:	be 02 00 00 00       	mov    esi,0x2
c0018ff0:	e9 b3 fe ff ff       	jmp    c0018ea8 <Vm::faultHandler(regs*)+0x9a>
c0018ff5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ff8:	be 03 00 00 00       	mov    esi,0x3
c0018ffd:	e9 a6 fe ff ff       	jmp    c0018ea8 <Vm::faultHandler(regs*)+0x9a>
c0019002:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019005:	be 04 00 00 00       	mov    esi,0x4
c001900a:	e9 99 fe ff ff       	jmp    c0018ea8 <Vm::faultHandler(regs*)+0x9a>
c001900f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019012:	be 05 00 00 00       	mov    esi,0x5
c0019017:	e9 8c fe ff ff       	jmp    c0018ea8 <Vm::faultHandler(regs*)+0x9a>
c001901c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001901f:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019024:	e9 7f fe ff ff       	jmp    c0018ea8 <Vm::faultHandler(regs*)+0x9a>
c0019029:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001902c:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019031:	e9 72 fe ff ff       	jmp    c0018ea8 <Vm::faultHandler(regs*)+0x9a>
c0019036:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001903d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019042:	74 30                	je     c0019074 <Vm::faultHandler(regs*)+0x266>
c0019044:	83 e9 04             	sub    ecx,0x4
c0019047:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001904d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019053:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019056:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019059:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001905f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019063:	0f 84 15 04 00 00    	je     c001947e <Vm::faultHandler(regs*)+0x670>
c0019069:	80 ce 02             	or     dh,0x2
c001906c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001906f:	e9 0a 04 00 00       	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c0019074:	83 e9 02             	sub    ecx,0x2
c0019077:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001907d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019080:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019084:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001908a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001908e:	74 05                	je     c0019095 <Vm::faultHandler(regs*)+0x287>
c0019090:	80 ce 02             	or     dh,0x2
c0019093:	eb 03                	jmp    c0019098 <Vm::faultHandler(regs*)+0x28a>
c0019095:	80 e6 fd             	and    dh,0xfd
c0019098:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001909c:	e9 dd 03 00 00       	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c00190a1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190a6:	74 2a                	je     c00190d2 <Vm::faultHandler(regs*)+0x2c4>
c00190a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00190aa:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190b0:	81 ca 00 02 02 00    	or     edx,0x20200
c00190b6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00190bb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190c1:	c1 e8 09             	shr    eax,0x9
c00190c4:	83 e0 01             	and    eax,0x1
c00190c7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190ca:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190cd:	83 c0 04             	add    eax,0x4
c00190d0:	eb 25                	jmp    c00190f7 <Vm::faultHandler(regs*)+0x2e9>
c00190d2:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00190d5:	81 ca 00 02 02 00    	or     edx,0x20200
c00190db:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190de:	66 8b 00             	mov    ax,WORD PTR [eax]
c00190e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190e7:	66 c1 e8 09          	shr    ax,0x9
c00190eb:	83 e0 01             	and    eax,0x1
c00190ee:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190f1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190f4:	83 c0 02             	add    eax,0x2
c00190f7:	25 ff ff 00 00       	and    eax,0xffff
c00190fc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00190ff:	e9 7a 03 00 00       	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c0019104:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019108:	3c ee                	cmp    al,0xee
c001910a:	75 10                	jne    c001911c <Vm::faultHandler(regs*)+0x30e>
c001910c:	83 ec 0c             	sub    esp,0xc
c001910f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019112:	e8 a2 f9 ff ff       	call   c0018ab9 <Vm::mainloop3(unsigned long)>
c0019117:	e9 4b 03 00 00       	jmp    c0019467 <Vm::faultHandler(regs*)+0x659>
c001911c:	83 ec 0c             	sub    esp,0xc
c001911f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019123:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019127:	51                   	push   ecx
c0019128:	50                   	push   eax
c0019129:	53                   	push   ebx
c001912a:	e8 e1 fb ff ff       	call   c0018d10 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001912f:	83 c4 20             	add    esp,0x20
c0019132:	e9 4a 03 00 00       	jmp    c0019481 <Vm::faultHandler(regs*)+0x673>
c0019137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001913c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019140:	e9 39 03 00 00       	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c0019145:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001914a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001914e:	e9 2b 03 00 00       	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c0019153:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019156:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001915b:	74 2b                	je     c0019188 <Vm::faultHandler(regs*)+0x37a>
c001915d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019164:	76 22                	jbe    c0019188 <Vm::faultHandler(regs*)+0x37a>
c0019166:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001916a:	50                   	push   eax
c001916b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001916f:	50                   	push   eax
c0019170:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019174:	50                   	push   eax
c0019175:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019179:	50                   	push   eax
c001917a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001917e:	50                   	push   eax
c001917f:	6a 6c                	push   0x6c
c0019181:	6a 6c                	push   0x6c
c0019183:	e9 b9 01 00 00       	jmp    c0019341 <Vm::faultHandler(regs*)+0x533>
c0019188:	83 ec 0c             	sub    esp,0xc
c001918b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001918f:	0f b7 f6             	movzx  esi,si
c0019192:	50                   	push   eax
c0019193:	e8 71 f8 ff ff       	call   c0018a09 <Vm::inbv(unsigned short)>
c0019198:	83 c4 0c             	add    esp,0xc
c001919b:	0f b6 c0             	movzx  eax,al
c001919e:	50                   	push   eax
c001919f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00191a3:	50                   	push   eax
c00191a4:	56                   	push   esi
c00191a5:	e8 24 fc ff ff       	call   c0018dce <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00191aa:	83 c4 10             	add    esp,0x10
c00191ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191b0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00191b4:	74 03                	je     c00191b9 <Vm::faultHandler(regs*)+0x3ab>
c00191b6:	48                   	dec    eax
c00191b7:	eb 01                	jmp    c00191ba <Vm::faultHandler(regs*)+0x3ac>
c00191b9:	40                   	inc    eax
c00191ba:	0f b7 c0             	movzx  eax,ax
c00191bd:	e9 8d 00 00 00       	jmp    c001924f <Vm::faultHandler(regs*)+0x441>
c00191c2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191c8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191cd:	74 29                	je     c00191f8 <Vm::faultHandler(regs*)+0x3ea>
c00191cf:	3d ff ff 00 00       	cmp    eax,0xffff
c00191d4:	76 22                	jbe    c00191f8 <Vm::faultHandler(regs*)+0x3ea>
c00191d6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00191da:	50                   	push   eax
c00191db:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00191df:	50                   	push   eax
c00191e0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00191e4:	50                   	push   eax
c00191e5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00191e9:	50                   	push   eax
c00191ea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191ee:	50                   	push   eax
c00191ef:	6a 6d                	push   0x6d
c00191f1:	6a 6d                	push   0x6d
c00191f3:	e9 49 01 00 00       	jmp    c0019341 <Vm::faultHandler(regs*)+0x533>
c00191f8:	0f b7 c8             	movzx  ecx,ax
c00191fb:	0f b7 f6             	movzx  esi,si
c00191fe:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019201:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019206:	74 20                	je     c0019228 <Vm::faultHandler(regs*)+0x41a>
c0019208:	ed                   	in     eax,dx
c0019209:	55                   	push   ebp
c001920a:	50                   	push   eax
c001920b:	51                   	push   ecx
c001920c:	56                   	push   esi
c001920d:	e8 e7 fb ff ff       	call   c0018df9 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019212:	83 c4 10             	add    esp,0x10
c0019215:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019218:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001921c:	74 05                	je     c0019223 <Vm::faultHandler(regs*)+0x415>
c001921e:	83 e8 04             	sub    eax,0x4
c0019221:	eb 27                	jmp    c001924a <Vm::faultHandler(regs*)+0x43c>
c0019223:	83 c0 04             	add    eax,0x4
c0019226:	eb 22                	jmp    c001924a <Vm::faultHandler(regs*)+0x43c>
c0019228:	66 ed                	in     ax,dx
c001922a:	0f b7 c0             	movzx  eax,ax
c001922d:	57                   	push   edi
c001922e:	50                   	push   eax
c001922f:	51                   	push   ecx
c0019230:	56                   	push   esi
c0019231:	e8 ad fb ff ff       	call   c0018de3 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019236:	83 c4 10             	add    esp,0x10
c0019239:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001923c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019240:	74 05                	je     c0019247 <Vm::faultHandler(regs*)+0x439>
c0019242:	83 e8 02             	sub    eax,0x2
c0019245:	eb 03                	jmp    c001924a <Vm::faultHandler(regs*)+0x43c>
c0019247:	83 c0 02             	add    eax,0x2
c001924a:	25 ff ff 00 00       	and    eax,0xffff
c001924f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019252:	e9 27 02 00 00       	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c0019257:	8d 46 ff             	lea    eax,[esi-0x1]
c001925a:	3c 05                	cmp    al,0x5
c001925c:	77 24                	ja     c0019282 <Vm::faultHandler(regs*)+0x474>
c001925e:	0f b6 c0             	movzx  eax,al
c0019261:	ff 24 85 3c 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb7c4]
c0019268:	0f b7 fd             	movzx  edi,bp
c001926b:	eb 15                	jmp    c0019282 <Vm::faultHandler(regs*)+0x474>
c001926d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019271:	eb 0f                	jmp    c0019282 <Vm::faultHandler(regs*)+0x474>
c0019273:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019277:	eb 09                	jmp    c0019282 <Vm::faultHandler(regs*)+0x474>
c0019279:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001927d:	eb 03                	jmp    c0019282 <Vm::faultHandler(regs*)+0x474>
c001927f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019282:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019285:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001928a:	74 29                	je     c00192b5 <Vm::faultHandler(regs*)+0x4a7>
c001928c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019291:	76 22                	jbe    c00192b5 <Vm::faultHandler(regs*)+0x4a7>
c0019293:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019297:	50                   	push   eax
c0019298:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001929c:	50                   	push   eax
c001929d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00192a1:	50                   	push   eax
c00192a2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00192a6:	50                   	push   eax
c00192a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00192ab:	50                   	push   eax
c00192ac:	6a 6e                	push   0x6e
c00192ae:	6a 6e                	push   0x6e
c00192b0:	e9 8c 00 00 00       	jmp    c0019341 <Vm::faultHandler(regs*)+0x533>
c00192b5:	0f b7 c0             	movzx  eax,ax
c00192b8:	52                   	push   edx
c00192b9:	52                   	push   edx
c00192ba:	50                   	push   eax
c00192bb:	57                   	push   edi
c00192bc:	e8 d9 fa ff ff       	call   c0018d9a <Vm::readByteFromReal(unsigned short, unsigned short)>
c00192c1:	59                   	pop    ecx
c00192c2:	0f b6 c0             	movzx  eax,al
c00192c5:	5e                   	pop    esi
c00192c6:	50                   	push   eax
c00192c7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00192cb:	50                   	push   eax
c00192cc:	e8 4b f7 ff ff       	call   c0018a1c <Vm::outbv(unsigned short, unsigned char)>
c00192d1:	83 c4 10             	add    esp,0x10
c00192d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192d7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192db:	74 03                	je     c00192e0 <Vm::faultHandler(regs*)+0x4d2>
c00192dd:	48                   	dec    eax
c00192de:	eb 01                	jmp    c00192e1 <Vm::faultHandler(regs*)+0x4d3>
c00192e0:	40                   	inc    eax
c00192e1:	0f b7 c0             	movzx  eax,ax
c00192e4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00192e7:	e9 92 01 00 00       	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c00192ec:	8d 46 ff             	lea    eax,[esi-0x1]
c00192ef:	3c 05                	cmp    al,0x5
c00192f1:	77 1f                	ja     c0019312 <Vm::faultHandler(regs*)+0x504>
c00192f3:	0f b6 c0             	movzx  eax,al
c00192f6:	ff 24 85 54 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb7ac]
c00192fd:	89 ef                	mov    edi,ebp
c00192ff:	eb 11                	jmp    c0019312 <Vm::faultHandler(regs*)+0x504>
c0019301:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019304:	eb 0c                	jmp    c0019312 <Vm::faultHandler(regs*)+0x504>
c0019306:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019309:	eb 07                	jmp    c0019312 <Vm::faultHandler(regs*)+0x504>
c001930b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001930e:	eb 02                	jmp    c0019312 <Vm::faultHandler(regs*)+0x504>
c0019310:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019312:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019315:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001931a:	74 37                	je     c0019353 <Vm::faultHandler(regs*)+0x545>
c001931c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019322:	76 2f                	jbe    c0019353 <Vm::faultHandler(regs*)+0x545>
c0019324:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019328:	50                   	push   eax
c0019329:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001932d:	50                   	push   eax
c001932e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019332:	50                   	push   eax
c0019333:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019337:	50                   	push   eax
c0019338:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001933c:	50                   	push   eax
c001933d:	6a 6f                	push   0x6f
c001933f:	6a 6f                	push   0x6f
c0019341:	68 e2 47 02 c0       	push   0xc00247e2
c0019346:	e8 20 37 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001934b:	83 c4 20             	add    esp,0x20
c001934e:	e9 86 01 00 00       	jmp    c00194d9 <Vm::faultHandler(regs*)+0x6cb>
c0019353:	0f b7 d7             	movzx  edx,di
c0019356:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019359:	0f b7 c6             	movzx  eax,si
c001935c:	81 e1 00 04 00 00    	and    ecx,0x400
c0019362:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019365:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001936a:	74 1d                	je     c0019389 <Vm::faultHandler(regs*)+0x57b>
c001936c:	55                   	push   ebp
c001936d:	55                   	push   ebp
c001936e:	50                   	push   eax
c001936f:	52                   	push   edx
c0019370:	e8 48 fa ff ff       	call   c0018dbd <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019375:	83 c4 10             	add    esp,0x10
c0019378:	89 fa                	mov    edx,edi
c001937a:	ef                   	out    dx,eax
c001937b:	85 c9                	test   ecx,ecx
c001937d:	74 05                	je     c0019384 <Vm::faultHandler(regs*)+0x576>
c001937f:	83 ee 04             	sub    esi,0x4
c0019382:	eb 21                	jmp    c00193a5 <Vm::faultHandler(regs*)+0x597>
c0019384:	83 c6 04             	add    esi,0x4
c0019387:	eb 1c                	jmp    c00193a5 <Vm::faultHandler(regs*)+0x597>
c0019389:	55                   	push   ebp
c001938a:	55                   	push   ebp
c001938b:	50                   	push   eax
c001938c:	52                   	push   edx
c001938d:	e8 19 fa ff ff       	call   c0018dab <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019392:	83 c4 10             	add    esp,0x10
c0019395:	89 fa                	mov    edx,edi
c0019397:	66 ef                	out    dx,ax
c0019399:	85 c9                	test   ecx,ecx
c001939b:	74 05                	je     c00193a2 <Vm::faultHandler(regs*)+0x594>
c001939d:	83 ee 02             	sub    esi,0x2
c00193a0:	eb 03                	jmp    c00193a5 <Vm::faultHandler(regs*)+0x597>
c00193a2:	83 c6 02             	add    esi,0x2
c00193a5:	81 e6 ff ff 00 00    	and    esi,0xffff
c00193ab:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00193ae:	e9 cb 00 00 00       	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c00193b3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00193ba:	83 ec 0c             	sub    esp,0xc
c00193bd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193c1:	50                   	push   eax
c00193c2:	e8 42 f6 ff ff       	call   c0018a09 <Vm::inbv(unsigned short)>
c00193c7:	0f b6 c0             	movzx  eax,al
c00193ca:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00193cd:	eb 3f                	jmp    c001940e <Vm::faultHandler(regs*)+0x600>
c00193cf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193d4:	74 07                	je     c00193dd <Vm::faultHandler(regs*)+0x5cf>
c00193d6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193da:	ed                   	in     eax,dx
c00193db:	eb 14                	jmp    c00193f1 <Vm::faultHandler(regs*)+0x5e3>
c00193dd:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00193e0:	66 31 f6             	xor    si,si
c00193e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00193e6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193ea:	66 ed                	in     ax,dx
c00193ec:	0f b7 c0             	movzx  eax,ax
c00193ef:	09 f0                	or     eax,esi
c00193f1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00193f4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00193f8:	e9 84 00 00 00       	jmp    c0019481 <Vm::faultHandler(regs*)+0x673>
c00193fd:	52                   	push   edx
c00193fe:	52                   	push   edx
c00193ff:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019403:	50                   	push   eax
c0019404:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019408:	50                   	push   eax
c0019409:	e8 0e f6 ff ff       	call   c0018a1c <Vm::outbv(unsigned short, unsigned char)>
c001940e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019412:	eb 53                	jmp    c0019467 <Vm::faultHandler(regs*)+0x659>
c0019414:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019417:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001941b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019420:	74 03                	je     c0019425 <Vm::faultHandler(regs*)+0x617>
c0019422:	ef                   	out    dx,eax
c0019423:	eb cf                	jmp    c00193f4 <Vm::faultHandler(regs*)+0x5e6>
c0019425:	66 ef                	out    dx,ax
c0019427:	eb cb                	jmp    c00193f4 <Vm::faultHandler(regs*)+0x5e6>
c0019429:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019430:	83 ec 0c             	sub    esp,0xc
c0019433:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019437:	50                   	push   eax
c0019438:	e8 cc f5 ff ff       	call   c0018a09 <Vm::inbv(unsigned short)>
c001943d:	0f b6 c0             	movzx  eax,al
c0019440:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019443:	eb 1f                	jmp    c0019464 <Vm::faultHandler(regs*)+0x656>
c0019445:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019448:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001944d:	74 03                	je     c0019452 <Vm::faultHandler(regs*)+0x644>
c001944f:	ed                   	in     eax,dx
c0019450:	eb 0d                	jmp    c001945f <Vm::faultHandler(regs*)+0x651>
c0019452:	66 ed                	in     ax,dx
c0019454:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019457:	0f b7 c0             	movzx  eax,ax
c001945a:	66 31 d2             	xor    dx,dx
c001945d:	09 d0                	or     eax,edx
c001945f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019462:	eb 1a                	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c0019464:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019467:	83 c4 10             	add    esp,0x10
c001946a:	eb 15                	jmp    c0019481 <Vm::faultHandler(regs*)+0x673>
c001946c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001946f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019472:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019477:	74 03                	je     c001947c <Vm::faultHandler(regs*)+0x66e>
c0019479:	ef                   	out    dx,eax
c001947a:	eb 02                	jmp    c001947e <Vm::faultHandler(regs*)+0x670>
c001947c:	66 ef                	out    dx,ax
c001947e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019481:	b0 01                	mov    al,0x1
c0019483:	eb 56                	jmp    c00194db <Vm::faultHandler(regs*)+0x6cd>
c0019485:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019489:	50                   	push   eax
c001948a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001948e:	50                   	push   eax
c001948f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019493:	50                   	push   eax
c0019494:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019498:	50                   	push   eax
c0019499:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001949d:	50                   	push   eax
c001949e:	52                   	push   edx
c001949f:	52                   	push   edx
c00194a0:	68 0f 48 02 c0       	push   0xc002480f
c00194a5:	e8 c1 35 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c00194aa:	83 c4 20             	add    esp,0x20
c00194ad:	83 ec 0c             	sub    esp,0xc
c00194b0:	6a 60                	push   0x60
c00194b2:	e8 52 f5 ff ff       	call   c0018a09 <Vm::inbv(unsigned short)>
c00194b7:	83 c4 10             	add    esp,0x10
c00194ba:	3c 1c                	cmp    al,0x1c
c00194bc:	74 04                	je     c00194c2 <Vm::faultHandler(regs*)+0x6b4>
c00194be:	3c 5a                	cmp    al,0x5a
c00194c0:	75 eb                	jne    c00194ad <Vm::faultHandler(regs*)+0x69f>
c00194c2:	3c 5a                	cmp    al,0x5a
c00194c4:	74 04                	je     c00194ca <Vm::faultHandler(regs*)+0x6bc>
c00194c6:	3c 1c                	cmp    al,0x1c
c00194c8:	75 0f                	jne    c00194d9 <Vm::faultHandler(regs*)+0x6cb>
c00194ca:	83 ec 0c             	sub    esp,0xc
c00194cd:	6a 60                	push   0x60
c00194cf:	e8 35 f5 ff ff       	call   c0018a09 <Vm::inbv(unsigned short)>
c00194d4:	83 c4 10             	add    esp,0x10
c00194d7:	eb e9                	jmp    c00194c2 <Vm::faultHandler(regs*)+0x6b4>
c00194d9:	31 c0                	xor    eax,eax
c00194db:	83 c4 1c             	add    esp,0x1c
c00194de:	5b                   	pop    ebx
c00194df:	5e                   	pop    esi
c00194e0:	5f                   	pop    edi
c00194e1:	5d                   	pop    ebp
c00194e2:	c3                   	ret    
c00194e3:	90                   	nop

c00194e4 <Vm::fpuInternalTo32(unsigned long long)>:
c00194e4:	57                   	push   edi
c00194e5:	56                   	push   esi
c00194e6:	53                   	push   ebx
c00194e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194ef:	89 d6                	mov    esi,edx
c00194f1:	89 d7                	mov    edi,edx
c00194f3:	89 c1                	mov    ecx,eax
c00194f5:	c1 ef 14             	shr    edi,0x14
c00194f8:	89 d3                	mov    ebx,edx
c00194fa:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019500:	31 d2                	xor    edx,edx
c0019502:	89 f8                	mov    eax,edi
c0019504:	81 e6 00 00 00 80    	and    esi,0x80000000
c001950a:	bf ff 00 00 00       	mov    edi,0xff
c001950f:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019514:	83 d2 ff             	adc    edx,0xffffffff
c0019517:	39 c7                	cmp    edi,eax
c0019519:	bf 00 00 00 00       	mov    edi,0x0
c001951e:	19 d7                	sbb    edi,edx
c0019520:	72 16                	jb     c0019538 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019522:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019526:	c1 e0 17             	shl    eax,0x17
c0019529:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001952f:	09 f1                	or     ecx,esi
c0019531:	09 c1                	or     ecx,eax
c0019533:	89 cf                	mov    edi,ecx
c0019535:	eb 05                	jmp    c001953c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019537:	90                   	nop
c0019538:	31 ff                	xor    edi,edi
c001953a:	66 90                	xchg   ax,ax
c001953c:	89 f8                	mov    eax,edi
c001953e:	5b                   	pop    ebx
c001953f:	5e                   	pop    esi
c0019540:	5f                   	pop    edi
c0019541:	c3                   	ret    

c0019542 <Vm::fpuInternalTo64(unsigned long long)>:
c0019542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001954a:	c3                   	ret    

c001954b <Vm::fpu32ToInternal(unsigned int)>:
c001954b:	57                   	push   edi
c001954c:	31 ff                	xor    edi,edi
c001954e:	56                   	push   esi
c001954f:	53                   	push   ebx
c0019550:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019554:	89 cb                	mov    ebx,ecx
c0019556:	89 ce                	mov    esi,ecx
c0019558:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001955e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019564:	c1 e9 17             	shr    ecx,0x17
c0019567:	89 f0                	mov    eax,esi
c0019569:	0f b6 d1             	movzx  edx,cl
c001956c:	81 c2 80 03 00 00    	add    edx,0x380
c0019572:	89 d1                	mov    ecx,edx
c0019574:	89 fa                	mov    edx,edi
c0019576:	c1 e1 14             	shl    ecx,0x14
c0019579:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001957d:	c1 e0 1d             	shl    eax,0x1d
c0019580:	89 d7                	mov    edi,edx
c0019582:	89 c6                	mov    esi,eax
c0019584:	89 ca                	mov    edx,ecx
c0019586:	89 f0                	mov    eax,esi
c0019588:	09 fa                	or     edx,edi
c001958a:	09 da                	or     edx,ebx
c001958c:	5b                   	pop    ebx
c001958d:	5e                   	pop    esi
c001958e:	5f                   	pop    edi
c001958f:	c3                   	ret    

c0019590 <Vm::fpu64ToInternal(unsigned long long)>:
c0019590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019598:	c3                   	ret    

c0019599 <Vm::fpuFloatToLong(unsigned long long)>:
c0019599:	57                   	push   edi
c001959a:	31 c0                	xor    eax,eax
c001959c:	56                   	push   esi
c001959d:	31 d2                	xor    edx,edx
c001959f:	53                   	push   ebx
c00195a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195a8:	89 d9                	mov    ecx,ebx
c00195aa:	c1 e9 14             	shr    ecx,0x14
c00195ad:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00195b3:	89 cf                	mov    edi,ecx
c00195b5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00195bb:	78 37                	js     c00195f4 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195bd:	89 d9                	mov    ecx,ebx
c00195bf:	89 f0                	mov    eax,esi
c00195c1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00195c7:	81 c9 00 00 10 00    	or     ecx,0x100000
c00195cd:	89 ca                	mov    edx,ecx
c00195cf:	b9 34 00 00 00       	mov    ecx,0x34
c00195d4:	29 f9                	sub    ecx,edi
c00195d6:	0f ad d0             	shrd   eax,edx,cl
c00195d9:	d3 fa                	sar    edx,cl
c00195db:	f6 c1 20             	test   cl,0x20
c00195de:	74 08                	je     c00195e8 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c00195e0:	89 d0                	mov    eax,edx
c00195e2:	c1 fa 1f             	sar    edx,0x1f
c00195e5:	8d 76 00             	lea    esi,[esi+0x0]
c00195e8:	85 db                	test   ebx,ebx
c00195ea:	79 08                	jns    c00195f4 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195ec:	f7 d8                	neg    eax
c00195ee:	83 d2 00             	adc    edx,0x0
c00195f1:	f7 da                	neg    edx
c00195f3:	90                   	nop
c00195f4:	5b                   	pop    ebx
c00195f5:	5e                   	pop    esi
c00195f6:	5f                   	pop    edi
c00195f7:	c3                   	ret    

c00195f8 <Vm::fpuULongToFloat(unsigned long long)>:
c00195f8:	57                   	push   edi
c00195f9:	31 c9                	xor    ecx,ecx
c00195fb:	56                   	push   esi
c00195fc:	53                   	push   ebx
c00195fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019601:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019605:	8d 76 00             	lea    esi,[esi+0x0]
c0019608:	0f ba e7 14          	bt     edi,0x14
c001960c:	72 0a                	jb     c0019618 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001960e:	01 f6                	add    esi,esi
c0019610:	11 ff                	adc    edi,edi
c0019612:	41                   	inc    ecx
c0019613:	eb f3                	jmp    c0019608 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019615:	8d 76 00             	lea    esi,[esi+0x0]
c0019618:	89 fa                	mov    edx,edi
c001961a:	89 f0                	mov    eax,esi
c001961c:	bb 33 04 00 00       	mov    ebx,0x433
c0019621:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019627:	29 cb                	sub    ebx,ecx
c0019629:	89 d9                	mov    ecx,ebx
c001962b:	5b                   	pop    ebx
c001962c:	c1 e1 14             	shl    ecx,0x14
c001962f:	5e                   	pop    esi
c0019630:	09 ca                	or     edx,ecx
c0019632:	5f                   	pop    edi
c0019633:	c3                   	ret    

c0019634 <Vm::fpuLongToFloat(long long)>:
c0019634:	56                   	push   esi
c0019635:	31 c0                	xor    eax,eax
c0019637:	53                   	push   ebx
c0019638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001963c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019640:	39 c8                	cmp    eax,ecx
c0019642:	19 d8                	sbb    eax,ebx
c0019644:	7d 06                	jge    c001964c <Vm::fpuLongToFloat(long long)+0x18>
c0019646:	31 f6                	xor    esi,esi
c0019648:	eb 0e                	jmp    c0019658 <Vm::fpuLongToFloat(long long)+0x24>
c001964a:	66 90                	xchg   ax,ax
c001964c:	f7 d9                	neg    ecx
c001964e:	be 01 00 00 00       	mov    esi,0x1
c0019653:	83 d3 00             	adc    ebx,0x0
c0019656:	f7 db                	neg    ebx
c0019658:	31 c0                	xor    eax,eax
c001965a:	66 90                	xchg   ax,ax
c001965c:	0f ba e3 14          	bt     ebx,0x14
c0019660:	72 0a                	jb     c001966c <Vm::fpuLongToFloat(long long)+0x38>
c0019662:	01 c9                	add    ecx,ecx
c0019664:	11 db                	adc    ebx,ebx
c0019666:	40                   	inc    eax
c0019667:	eb f3                	jmp    c001965c <Vm::fpuLongToFloat(long long)+0x28>
c0019669:	8d 76 00             	lea    esi,[esi+0x0]
c001966c:	ba 33 04 00 00       	mov    edx,0x433
c0019671:	29 c2                	sub    edx,eax
c0019673:	89 c8                	mov    eax,ecx
c0019675:	c1 e2 14             	shl    edx,0x14
c0019678:	89 d9                	mov    ecx,ebx
c001967a:	89 f3                	mov    ebx,esi
c001967c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019682:	09 ca                	or     edx,ecx
c0019684:	84 db                	test   bl,bl
c0019686:	74 08                	je     c0019690 <Vm::fpuLongToFloat(long long)+0x5c>
c0019688:	81 ca 00 00 00 80    	or     edx,0x80000000
c001968e:	66 90                	xchg   ax,ax
c0019690:	5b                   	pop    ebx
c0019691:	5e                   	pop    esi
c0019692:	c3                   	ret    

c0019693 <Vm::fpuGet0()>:
c0019693:	31 c0                	xor    eax,eax
c0019695:	31 d2                	xor    edx,edx
c0019697:	c3                   	ret    

c0019698 <Vm::fpuGet1()>:
c0019698:	b8 01 00 00 00       	mov    eax,0x1
c001969d:	31 d2                	xor    edx,edx
c001969f:	c3                   	ret    

c00196a0 <Vm::fpuGetPi()>:
c00196a0:	b8 03 00 00 00       	mov    eax,0x3
c00196a5:	31 d2                	xor    edx,edx
c00196a7:	c3                   	ret    

c00196a8 <Vm::fpuGetLog2E()>:
c00196a8:	83 ec 18             	sub    esp,0x18
c00196ab:	68 6c 48 02 c0       	push   0xc002486c
c00196b0:	e8 56 ac ff ff       	call   c001430b <Krnl::panic(char const*)>
c00196b5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196ba:	31 d2                	xor    edx,edx
c00196bc:	83 c4 1c             	add    esp,0x1c
c00196bf:	c3                   	ret    

c00196c0 <Vm::fpuGetLogE2()>:
c00196c0:	83 ec 18             	sub    esp,0x18
c00196c3:	68 78 48 02 c0       	push   0xc0024878
c00196c8:	e8 3e ac ff ff       	call   c001430b <Krnl::panic(char const*)>
c00196cd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196d2:	31 d2                	xor    edx,edx
c00196d4:	83 c4 1c             	add    esp,0x1c
c00196d7:	c3                   	ret    

c00196d8 <Vm::fpuGetLog210()>:
c00196d8:	83 ec 18             	sub    esp,0x18
c00196db:	68 84 48 02 c0       	push   0xc0024884
c00196e0:	e8 26 ac ff ff       	call   c001430b <Krnl::panic(char const*)>
c00196e5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196ea:	31 d2                	xor    edx,edx
c00196ec:	83 c4 1c             	add    esp,0x1c
c00196ef:	c3                   	ret    

c00196f0 <Vm::fpuGetLog102()>:
c00196f0:	83 ec 18             	sub    esp,0x18
c00196f3:	68 91 48 02 c0       	push   0xc0024891
c00196f8:	e8 0e ac ff ff       	call   c001430b <Krnl::panic(char const*)>
c00196fd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019702:	31 d2                	xor    edx,edx
c0019704:	83 c4 1c             	add    esp,0x1c
c0019707:	c3                   	ret    

c0019708 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019708:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001970c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019710:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019714:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019718:	0f 92 c0             	setb   al
c001971b:	c3                   	ret    

c001971c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001971c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019724:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019728:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001972c:	09 c2                	or     edx,eax
c001972e:	0f 94 c0             	sete   al
c0019731:	c3                   	ret    

c0019732 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019732:	57                   	push   edi
c0019733:	56                   	push   esi
c0019734:	53                   	push   ebx
c0019735:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019739:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001973d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019741:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019745:	57                   	push   edi
c0019746:	56                   	push   esi
c0019747:	53                   	push   ebx
c0019748:	51                   	push   ecx
c0019749:	e8 ce ff ff ff       	call   c001971c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001974e:	83 c4 10             	add    esp,0x10
c0019751:	88 c2                	mov    dl,al
c0019753:	31 c0                	xor    eax,eax
c0019755:	84 d2                	test   dl,dl
c0019757:	75 0f                	jne    c0019768 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019759:	57                   	push   edi
c001975a:	56                   	push   esi
c001975b:	53                   	push   ebx
c001975c:	51                   	push   ecx
c001975d:	e8 a6 ff ff ff       	call   c0019708 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019762:	83 c4 10             	add    esp,0x10
c0019765:	8d 76 00             	lea    esi,[esi+0x0]
c0019768:	83 e0 01             	and    eax,0x1
c001976b:	5b                   	pop    ebx
c001976c:	88 c1                	mov    cl,al
c001976e:	83 e2 01             	and    edx,0x1
c0019771:	a0 e1 76 02 c0       	mov    al,ds:0xc00276e1
c0019776:	c1 e2 06             	shl    edx,0x6
c0019779:	83 e0 ba             	and    eax,0xffffffba
c001977c:	5e                   	pop    esi
c001977d:	09 c8                	or     eax,ecx
c001977f:	5f                   	pop    edi
c0019780:	09 d0                	or     eax,edx
c0019782:	a2 e1 76 02 c0       	mov    ds:0xc00276e1,al
c0019787:	c3                   	ret    

c0019788 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019788:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001978c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019790:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019794:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019798:	c3                   	ret    

c0019799 <Vm::fpuAbs(unsigned long long)>:
c0019799:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001979d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197a1:	c3                   	ret    

c00197a2 <Vm::fpuChs(unsigned long long)>:
c00197a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197aa:	f7 d8                	neg    eax
c00197ac:	83 d2 00             	adc    edx,0x0
c00197af:	f7 da                	neg    edx
c00197b1:	c3                   	ret    

c00197b2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00197b2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00197b6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00197bb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00197bf:	eb c7                	jmp    c0019788 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00197c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00197c1:	53                   	push   ebx
c00197c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197d2:	0f af ca             	imul   ecx,edx
c00197d5:	0f af d8             	imul   ebx,eax
c00197d8:	f7 e2                	mul    edx
c00197da:	01 d9                	add    ecx,ebx
c00197dc:	5b                   	pop    ebx
c00197dd:	01 ca                	add    edx,ecx
c00197df:	c3                   	ret    

c00197e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c00197e0:	83 ec 0c             	sub    esp,0xc
c00197e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197f3:	e8 bc 76 00 00       	call   c0020eb4 <__udivdi3>
c00197f8:	83 c4 1c             	add    esp,0x1c
c00197fb:	c3                   	ret    

c00197fc <Vm::fpuSquare(unsigned long long)>:
c00197fc:	50                   	push   eax
c00197fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019801:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019805:	52                   	push   edx
c0019806:	50                   	push   eax
c0019807:	52                   	push   edx
c0019808:	50                   	push   eax
c0019809:	e8 b3 ff ff ff       	call   c00197c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001980e:	83 c4 14             	add    esp,0x14
c0019811:	c3                   	ret    

c0019812 <Vm::fpuGetReg(int)>:
c0019812:	83 ec 0c             	sub    esp,0xc
c0019815:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001981a:	76 10                	jbe    c001982c <Vm::fpuGetReg(int)+0x1a>
c001981c:	83 ec 0c             	sub    esp,0xc
c001981f:	68 9e 48 02 c0       	push   0xc002489e
c0019824:	e8 e2 aa ff ff       	call   c001430b <Krnl::panic(char const*)>
c0019829:	83 c4 10             	add    esp,0x10
c001982c:	a0 e1 76 02 c0       	mov    al,ds:0xc00276e1
c0019831:	b9 08 00 00 00       	mov    ecx,0x8
c0019836:	c0 e8 03             	shr    al,0x3
c0019839:	83 e0 07             	and    eax,0x7
c001983c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019840:	99                   	cdq    
c0019841:	f7 f9                	idiv   ecx
c0019843:	8b 04 d5 e4 76 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd891c]
c001984a:	8b 14 d5 e8 76 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8918]
c0019851:	83 c4 0c             	add    esp,0xc
c0019854:	c3                   	ret    

c0019855 <Vm::fpuSetReg(int, unsigned long long)>:
c0019855:	57                   	push   edi
c0019856:	56                   	push   esi
c0019857:	52                   	push   edx
c0019858:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001985c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019860:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019865:	76 11                	jbe    c0019878 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019867:	83 ec 0c             	sub    esp,0xc
c001986a:	68 b1 48 02 c0       	push   0xc00248b1
c001986f:	e8 97 aa ff ff       	call   c001430b <Krnl::panic(char const*)>
c0019874:	83 c4 10             	add    esp,0x10
c0019877:	90                   	nop
c0019878:	a0 e1 76 02 c0       	mov    al,ds:0xc00276e1
c001987d:	b9 08 00 00 00       	mov    ecx,0x8
c0019882:	c0 e8 03             	shr    al,0x3
c0019885:	83 e0 07             	and    eax,0x7
c0019888:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001988c:	99                   	cdq    
c001988d:	f7 f9                	idiv   ecx
c001988f:	89 34 d5 e4 76 02 c0 	mov    DWORD PTR [edx*8-0x3ffd891c],esi
c0019896:	89 3c d5 e8 76 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8918],edi
c001989d:	58                   	pop    eax
c001989e:	5e                   	pop    esi
c001989f:	5f                   	pop    edi
c00198a0:	c3                   	ret    

c00198a1 <Vm::fpuPush(unsigned long long)>:
c00198a1:	a0 e1 76 02 c0       	mov    al,ds:0xc00276e1
c00198a6:	c0 e8 03             	shr    al,0x3
c00198a9:	83 e0 07             	and    eax,0x7
c00198ac:	83 c0 07             	add    eax,0x7
c00198af:	88 c2                	mov    dl,al
c00198b1:	83 e0 07             	and    eax,0x7
c00198b4:	83 e2 07             	and    edx,0x7
c00198b7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00198be:	8a 15 e1 76 02 c0    	mov    dl,BYTE PTR ds:0xc00276e1
c00198c4:	83 e2 c7             	and    edx,0xffffffc7
c00198c7:	09 ca                	or     edx,ecx
c00198c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00198cd:	88 15 e1 76 02 c0    	mov    BYTE PTR ds:0xc00276e1,dl
c00198d3:	89 0c c5 e8 76 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8918],ecx
c00198da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00198de:	89 14 c5 e4 76 02 c0 	mov    DWORD PTR [eax*8-0x3ffd891c],edx
c00198e5:	a1 24 77 02 c0       	mov    eax,ds:0xc0027724
c00198ea:	83 f8 08             	cmp    eax,0x8
c00198ed:	75 09                	jne    c00198f8 <Vm::fpuPush(unsigned long long)+0x57>
c00198ef:	80 0d e0 76 02 c0 40 	or     BYTE PTR ds:0xc00276e0,0x40
c00198f6:	c3                   	ret    
c00198f7:	90                   	nop
c00198f8:	40                   	inc    eax
c00198f9:	a3 24 77 02 c0       	mov    ds:0xc0027724,eax
c00198fe:	c3                   	ret    

c00198ff <Vm::fpuPop()>:
c00198ff:	8a 0d e1 76 02 c0    	mov    cl,BYTE PTR ds:0xc00276e1
c0019905:	53                   	push   ebx
c0019906:	c0 e9 03             	shr    cl,0x3
c0019909:	8a 1d e1 76 02 c0    	mov    bl,BYTE PTR ds:0xc00276e1
c001990f:	83 e1 07             	and    ecx,0x7
c0019912:	83 e3 c7             	and    ebx,0xffffffc7
c0019915:	8b 04 cd e4 76 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd891c]
c001991c:	8b 14 cd e8 76 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8918]
c0019923:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001992a:	83 e1 38             	and    ecx,0x38
c001992d:	09 d9                	or     ecx,ebx
c001992f:	88 0d e1 76 02 c0    	mov    BYTE PTR ds:0xc00276e1,cl
c0019935:	8b 0d 24 77 02 c0    	mov    ecx,DWORD PTR ds:0xc0027724
c001993b:	85 c9                	test   ecx,ecx
c001993d:	74 09                	je     c0019948 <Vm::fpuPop()+0x49>
c001993f:	49                   	dec    ecx
c0019940:	89 0d 24 77 02 c0    	mov    DWORD PTR ds:0xc0027724,ecx
c0019946:	eb 08                	jmp    c0019950 <Vm::fpuPop()+0x51>
c0019948:	80 0d e0 76 02 c0 40 	or     BYTE PTR ds:0xc00276e0,0x40
c001994f:	90                   	nop
c0019950:	5b                   	pop    ebx
c0019951:	c3                   	ret    

c0019952 <Vm::x87Handler(regs*)>:
c0019952:	55                   	push   ebp
c0019953:	57                   	push   edi
c0019954:	56                   	push   esi
c0019955:	53                   	push   ebx
c0019956:	83 ec 1c             	sub    esp,0x1c
c0019959:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001995d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019962:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019965:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001996d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019971:	50                   	push   eax
c0019972:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019976:	50                   	push   eax
c0019977:	8d 44 24 14          	lea    eax,[esp+0x14]
c001997b:	50                   	push   eax
c001997c:	53                   	push   ebx
c001997d:	e8 a2 a0 ff ff       	call   c0013a24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019982:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019985:	83 c4 10             	add    esp,0x10
c0019988:	89 c6                	mov    esi,eax
c001998a:	80 fa d9             	cmp    dl,0xd9
c001998d:	0f 85 79 01 00 00    	jne    c0019b0c <Vm::x87Handler(regs*)+0x1ba>
c0019993:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019997:	8d 50 20             	lea    edx,[eax+0x20]
c001999a:	80 fa 0e             	cmp    dl,0xe
c001999d:	0f 87 a5 00 00 00    	ja     c0019a48 <Vm::x87Handler(regs*)+0xf6>
c00199a3:	0f b6 d2             	movzx  edx,dl
c00199a6:	ff 24 95 c4 48 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb73c]
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	e8 de fc ff ff       	call   c0019693 <Vm::fpuGet0()>
c00199b5:	eb 09                	jmp    c00199c0 <Vm::x87Handler(regs*)+0x6e>
c00199b7:	90                   	nop
c00199b8:	e8 db fc ff ff       	call   c0019698 <Vm::fpuGet1()>
c00199bd:	8d 76 00             	lea    esi,[esi+0x0]
c00199c0:	57                   	push   edi
c00199c1:	57                   	push   edi
c00199c2:	66 90                	xchg   ax,ax
c00199c4:	52                   	push   edx
c00199c5:	50                   	push   eax
c00199c6:	e8 d6 fe ff ff       	call   c00198a1 <Vm::fpuPush(unsigned long long)>
c00199cb:	90                   	nop
c00199cc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199d0:	83 c4 10             	add    esp,0x10
c00199d3:	90                   	nop
c00199d4:	b0 01                	mov    al,0x1
c00199d6:	e9 89 0a 00 00       	jmp    c001a464 <Vm::x87Handler(regs*)+0xb12>
c00199db:	90                   	nop
c00199dc:	83 ec 0c             	sub    esp,0xc
c00199df:	6a 00                	push   0x0
c00199e1:	e8 2c fe ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c00199e6:	59                   	pop    ecx
c00199e7:	5e                   	pop    esi
c00199e8:	52                   	push   edx
c00199e9:	50                   	push   eax
c00199ea:	e8 b3 fd ff ff       	call   c00197a2 <Vm::fpuChs(unsigned long long)>
c00199ef:	eb 17                	jmp    c0019a08 <Vm::x87Handler(regs*)+0xb6>
c00199f1:	8d 76 00             	lea    esi,[esi+0x0]
c00199f4:	83 ec 0c             	sub    esp,0xc
c00199f7:	6a 00                	push   0x0
c00199f9:	e8 14 fe ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c00199fe:	5f                   	pop    edi
c00199ff:	5d                   	pop    ebp
c0019a00:	52                   	push   edx
c0019a01:	50                   	push   eax
c0019a02:	e8 92 fd ff ff       	call   c0019799 <Vm::fpuAbs(unsigned long long)>
c0019a07:	90                   	nop
c0019a08:	83 c4 0c             	add    esp,0xc
c0019a0b:	90                   	nop
c0019a0c:	52                   	push   edx
c0019a0d:	50                   	push   eax
c0019a0e:	66 90                	xchg   ax,ax
c0019a10:	6a 00                	push   0x0
c0019a12:	66 90                	xchg   ax,ax
c0019a14:	e8 3c fe ff ff       	call   c0019855 <Vm::fpuSetReg(int, unsigned long long)>
c0019a19:	eb b1                	jmp    c00199cc <Vm::x87Handler(regs*)+0x7a>
c0019a1b:	90                   	nop
c0019a1c:	e8 b7 fc ff ff       	call   c00196d8 <Vm::fpuGetLog210()>
c0019a21:	eb 9d                	jmp    c00199c0 <Vm::x87Handler(regs*)+0x6e>
c0019a23:	90                   	nop
c0019a24:	e8 7f fc ff ff       	call   c00196a8 <Vm::fpuGetLog2E()>
c0019a29:	eb 95                	jmp    c00199c0 <Vm::x87Handler(regs*)+0x6e>
c0019a2b:	90                   	nop
c0019a2c:	e8 6f fc ff ff       	call   c00196a0 <Vm::fpuGetPi()>
c0019a31:	eb 8d                	jmp    c00199c0 <Vm::x87Handler(regs*)+0x6e>
c0019a33:	90                   	nop
c0019a34:	e8 b7 fc ff ff       	call   c00196f0 <Vm::fpuGetLog102()>
c0019a39:	eb 85                	jmp    c00199c0 <Vm::x87Handler(regs*)+0x6e>
c0019a3b:	90                   	nop
c0019a3c:	e8 7f fc ff ff       	call   c00196c0 <Vm::fpuGetLogE2()>
c0019a41:	e9 7a ff ff ff       	jmp    c00199c0 <Vm::x87Handler(regs*)+0x6e>
c0019a46:	66 90                	xchg   ax,ax
c0019a48:	8d 50 40             	lea    edx,[eax+0x40]
c0019a4b:	80 fa 07             	cmp    dl,0x7
c0019a4e:	77 18                	ja     c0019a68 <Vm::x87Handler(regs*)+0x116>
c0019a50:	83 ec 0c             	sub    esp,0xc
c0019a53:	2d c0 00 00 00       	sub    eax,0xc0
c0019a58:	50                   	push   eax
c0019a59:	e8 b4 fd ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019a5e:	59                   	pop    ecx
c0019a5f:	5e                   	pop    esi
c0019a60:	e9 5f ff ff ff       	jmp    c00199c4 <Vm::x87Handler(regs*)+0x72>
c0019a65:	8d 76 00             	lea    esi,[esi+0x0]
c0019a68:	8d 50 38             	lea    edx,[eax+0x38]
c0019a6b:	80 fa 07             	cmp    dl,0x7
c0019a6e:	77 3c                	ja     c0019aac <Vm::x87Handler(regs*)+0x15a>
c0019a70:	83 ec 0c             	sub    esp,0xc
c0019a73:	2d c8 00 00 00       	sub    eax,0xc8
c0019a78:	50                   	push   eax
c0019a79:	e8 94 fd ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019a7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019a85:	89 c6                	mov    esi,eax
c0019a87:	89 d7                	mov    edi,edx
c0019a89:	e8 84 fd ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019a8e:	83 c4 0c             	add    esp,0xc
c0019a91:	52                   	push   edx
c0019a92:	50                   	push   eax
c0019a93:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019a97:	2d c8 00 00 00       	sub    eax,0xc8
c0019a9c:	50                   	push   eax
c0019a9d:	e8 b3 fd ff ff       	call   c0019855 <Vm::fpuSetReg(int, unsigned long long)>
c0019aa2:	83 c4 0c             	add    esp,0xc
c0019aa5:	57                   	push   edi
c0019aa6:	56                   	push   esi
c0019aa7:	e9 64 ff ff ff       	jmp    c0019a10 <Vm::x87Handler(regs*)+0xbe>
c0019aac:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019ab0:	84 d2                	test   dl,dl
c0019ab2:	75 10                	jne    c0019ac4 <Vm::x87Handler(regs*)+0x172>
c0019ab4:	83 ec 0c             	sub    esp,0xc
c0019ab7:	ff 36                	push   DWORD PTR [esi]
c0019ab9:	e8 8d fa ff ff       	call   c001954b <Vm::fpu32ToInternal(unsigned int)>
c0019abe:	e9 c9 00 00 00       	jmp    c0019b8c <Vm::x87Handler(regs*)+0x23a>
c0019ac3:	90                   	nop
c0019ac4:	80 fa 03             	cmp    dl,0x3
c0019ac7:	75 13                	jne    c0019adc <Vm::x87Handler(regs*)+0x18a>
c0019ac9:	e8 31 fe ff ff       	call   c00198ff <Vm::fpuPop()>
c0019ace:	55                   	push   ebp
c0019acf:	55                   	push   ebp
c0019ad0:	52                   	push   edx
c0019ad1:	50                   	push   eax
c0019ad2:	e8 0d fa ff ff       	call   c00194e4 <Vm::fpuInternalTo32(unsigned long long)>
c0019ad7:	e9 90 00 00 00       	jmp    c0019b6c <Vm::x87Handler(regs*)+0x21a>
c0019adc:	80 fa 05             	cmp    dl,0x5
c0019adf:	75 0f                	jne    c0019af0 <Vm::x87Handler(regs*)+0x19e>
c0019ae1:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019ae4:	66 a3 e2 76 02 c0    	mov    ds:0xc00276e2,ax
c0019aea:	e9 ed 00 00 00       	jmp    c0019bdc <Vm::x87Handler(regs*)+0x28a>
c0019aef:	90                   	nop
c0019af0:	31 c0                	xor    eax,eax
c0019af2:	80 fa 07             	cmp    dl,0x7
c0019af5:	0f 85 69 09 00 00    	jne    c001a464 <Vm::x87Handler(regs*)+0xb12>
c0019afb:	66 a1 e2 76 02 c0    	mov    ax,ds:0xc00276e2
c0019b01:	66 89 06             	mov    WORD PTR [esi],ax
c0019b04:	e9 d3 00 00 00       	jmp    c0019bdc <Vm::x87Handler(regs*)+0x28a>
c0019b09:	8d 76 00             	lea    esi,[esi+0x0]
c0019b0c:	80 fa d8             	cmp    dl,0xd8
c0019b0f:	0f 84 d3 00 00 00    	je     c0019be8 <Vm::x87Handler(regs*)+0x296>
c0019b15:	80 fa dc             	cmp    dl,0xdc
c0019b18:	0f 84 2a 02 00 00    	je     c0019d48 <Vm::x87Handler(regs*)+0x3f6>
c0019b1e:	80 fa de             	cmp    dl,0xde
c0019b21:	0f 84 f1 02 00 00    	je     c0019e18 <Vm::x87Handler(regs*)+0x4c6>
c0019b27:	80 fa dd             	cmp    dl,0xdd
c0019b2a:	0f 84 94 04 00 00    	je     c0019fc4 <Vm::x87Handler(regs*)+0x672>
c0019b30:	80 fa da             	cmp    dl,0xda
c0019b33:	0f 84 5f 05 00 00    	je     c001a098 <Vm::x87Handler(regs*)+0x746>
c0019b39:	80 fa df             	cmp    dl,0xdf
c0019b3c:	0f 84 aa 05 00 00    	je     c001a0ec <Vm::x87Handler(regs*)+0x79a>
c0019b42:	31 c0                	xor    eax,eax
c0019b44:	80 fa db             	cmp    dl,0xdb
c0019b47:	0f 85 17 09 00 00    	jne    c001a464 <Vm::x87Handler(regs*)+0xb12>
c0019b4d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b51:	80 fa 03             	cmp    dl,0x3
c0019b54:	0f 85 c2 06 00 00    	jne    c001a21c <Vm::x87Handler(regs*)+0x8ca>
c0019b5a:	e8 a0 fd ff ff       	call   c00198ff <Vm::fpuPop()>
c0019b5f:	55                   	push   ebp
c0019b60:	55                   	push   ebp
c0019b61:	8d 76 00             	lea    esi,[esi+0x0]
c0019b64:	52                   	push   edx
c0019b65:	50                   	push   eax
c0019b66:	e8 2e fa ff ff       	call   c0019599 <Vm::fpuFloatToLong(unsigned long long)>
c0019b6b:	90                   	nop
c0019b6c:	83 c4 10             	add    esp,0x10
c0019b6f:	89 06                	mov    DWORD PTR [esi],eax
c0019b71:	eb 69                	jmp    c0019bdc <Vm::x87Handler(regs*)+0x28a>
c0019b73:	90                   	nop
c0019b74:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b78:	84 d2                	test   dl,dl
c0019b7a:	0f 85 2c 06 00 00    	jne    c001a1ac <Vm::x87Handler(regs*)+0x85a>
c0019b80:	57                   	push   edi
c0019b81:	57                   	push   edi
c0019b82:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019b85:	ff 36                	push   DWORD PTR [esi]
c0019b87:	e8 04 fa ff ff       	call   c0019590 <Vm::fpu64ToInternal(unsigned long long)>
c0019b8c:	5e                   	pop    esi
c0019b8d:	5f                   	pop    edi
c0019b8e:	52                   	push   edx
c0019b8f:	50                   	push   eax
c0019b90:	e8 0c fd ff ff       	call   c00198a1 <Vm::fpuPush(unsigned long long)>
c0019b95:	8d 76 00             	lea    esi,[esi+0x0]
c0019b98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b9c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019b9f:	e9 2c fe ff ff       	jmp    c00199d0 <Vm::x87Handler(regs*)+0x7e>
c0019ba4:	80 fa 03             	cmp    dl,0x3
c0019ba7:	0f 85 2b 07 00 00    	jne    c001a2d8 <Vm::x87Handler(regs*)+0x986>
c0019bad:	57                   	push   edi
c0019bae:	57                   	push   edi
c0019baf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019bb2:	ff 36                	push   DWORD PTR [esi]
c0019bb4:	e8 d7 f9 ff ff       	call   c0019590 <Vm::fpu64ToInternal(unsigned long long)>
c0019bb9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019bc0:	89 c6                	mov    esi,eax
c0019bc2:	89 d7                	mov    edi,edx
c0019bc4:	e8 49 fc ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019bc9:	57                   	push   edi
c0019bca:	56                   	push   esi
c0019bcb:	52                   	push   edx
c0019bcc:	50                   	push   eax
c0019bcd:	e8 60 fb ff ff       	call   c0019732 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019bd2:	83 c4 20             	add    esp,0x20
c0019bd5:	e8 25 fd ff ff       	call   c00198ff <Vm::fpuPop()>
c0019bda:	66 90                	xchg   ax,ax
c0019bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019be0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019be3:	e9 ec fd ff ff       	jmp    c00199d4 <Vm::x87Handler(regs*)+0x82>
c0019be8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019bec:	8d 50 40             	lea    edx,[eax+0x40]
c0019bef:	80 fa 07             	cmp    dl,0x7
c0019bf2:	77 2c                	ja     c0019c20 <Vm::x87Handler(regs*)+0x2ce>
c0019bf4:	83 ec 0c             	sub    esp,0xc
c0019bf7:	2d c0 00 00 00       	sub    eax,0xc0
c0019bfc:	50                   	push   eax
c0019bfd:	e8 10 fc ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019c02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c09:	89 c6                	mov    esi,eax
c0019c0b:	89 d7                	mov    edi,edx
c0019c0d:	e8 00 fc ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019c12:	57                   	push   edi
c0019c13:	56                   	push   esi
c0019c14:	52                   	push   edx
c0019c15:	50                   	push   eax
c0019c16:	e8 6d fb ff ff       	call   c0019788 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c1b:	eb 33                	jmp    c0019c50 <Vm::x87Handler(regs*)+0x2fe>
c0019c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c20:	8d 50 38             	lea    edx,[eax+0x38]
c0019c23:	80 fa 07             	cmp    dl,0x7
c0019c26:	77 30                	ja     c0019c58 <Vm::x87Handler(regs*)+0x306>
c0019c28:	83 ec 0c             	sub    esp,0xc
c0019c2b:	2d c8 00 00 00       	sub    eax,0xc8
c0019c30:	50                   	push   eax
c0019c31:	e8 dc fb ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019c36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c3d:	89 c6                	mov    esi,eax
c0019c3f:	89 d7                	mov    edi,edx
c0019c41:	e8 cc fb ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019c46:	57                   	push   edi
c0019c47:	56                   	push   esi
c0019c48:	52                   	push   edx
c0019c49:	50                   	push   eax
c0019c4a:	e8 72 fb ff ff       	call   c00197c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c4f:	90                   	nop
c0019c50:	83 c4 1c             	add    esp,0x1c
c0019c53:	e9 b4 fd ff ff       	jmp    c0019a0c <Vm::x87Handler(regs*)+0xba>
c0019c58:	8d 50 30             	lea    edx,[eax+0x30]
c0019c5b:	80 fa 07             	cmp    dl,0x7
c0019c5e:	77 10                	ja     c0019c70 <Vm::x87Handler(regs*)+0x31e>
c0019c60:	83 ec 0c             	sub    esp,0xc
c0019c63:	2d d0 00 00 00       	sub    eax,0xd0
c0019c68:	e9 c3 03 00 00       	jmp    c001a030 <Vm::x87Handler(regs*)+0x6de>
c0019c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c70:	8d 50 28             	lea    edx,[eax+0x28]
c0019c73:	80 fa 07             	cmp    dl,0x7
c0019c76:	77 10                	ja     c0019c88 <Vm::x87Handler(regs*)+0x336>
c0019c78:	83 ec 0c             	sub    esp,0xc
c0019c7b:	2d d8 00 00 00       	sub    eax,0xd8
c0019c80:	e9 e7 03 00 00       	jmp    c001a06c <Vm::x87Handler(regs*)+0x71a>
c0019c85:	8d 76 00             	lea    esi,[esi+0x0]
c0019c88:	8d 50 20             	lea    edx,[eax+0x20]
c0019c8b:	80 fa 07             	cmp    dl,0x7
c0019c8e:	77 1c                	ja     c0019cac <Vm::x87Handler(regs*)+0x35a>
c0019c90:	83 ec 0c             	sub    esp,0xc
c0019c93:	2d e0 00 00 00       	sub    eax,0xe0
c0019c98:	50                   	push   eax
c0019c99:	e8 74 fb ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019c9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ca5:	89 c6                	mov    esi,eax
c0019ca7:	89 d7                	mov    edi,edx
c0019ca9:	eb 25                	jmp    c0019cd0 <Vm::x87Handler(regs*)+0x37e>
c0019cab:	90                   	nop
c0019cac:	8d 50 18             	lea    edx,[eax+0x18]
c0019caf:	80 fa 07             	cmp    dl,0x7
c0019cb2:	77 30                	ja     c0019ce4 <Vm::x87Handler(regs*)+0x392>
c0019cb4:	83 ec 0c             	sub    esp,0xc
c0019cb7:	6a 00                	push   0x0
c0019cb9:	e8 54 fb ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019cbe:	89 c6                	mov    esi,eax
c0019cc0:	89 d7                	mov    edi,edx
c0019cc2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019cc6:	2d e8 00 00 00       	sub    eax,0xe8
c0019ccb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cce:	66 90                	xchg   ax,ax
c0019cd0:	e8 3d fb ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019cd5:	57                   	push   edi
c0019cd6:	56                   	push   esi
c0019cd7:	52                   	push   edx
c0019cd8:	50                   	push   eax
c0019cd9:	e8 d4 fa ff ff       	call   c00197b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019cde:	e9 6d ff ff ff       	jmp    c0019c50 <Vm::x87Handler(regs*)+0x2fe>
c0019ce3:	90                   	nop
c0019ce4:	8d 50 10             	lea    edx,[eax+0x10]
c0019ce7:	80 fa 07             	cmp    dl,0x7
c0019cea:	77 1c                	ja     c0019d08 <Vm::x87Handler(regs*)+0x3b6>
c0019cec:	83 ec 0c             	sub    esp,0xc
c0019cef:	2d f0 00 00 00       	sub    eax,0xf0
c0019cf4:	50                   	push   eax
c0019cf5:	e8 18 fb ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019cfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d01:	89 c6                	mov    esi,eax
c0019d03:	89 d7                	mov    edi,edx
c0019d05:	eb 25                	jmp    c0019d2c <Vm::x87Handler(regs*)+0x3da>
c0019d07:	90                   	nop
c0019d08:	3c f7                	cmp    al,0xf7
c0019d0a:	0f 86 00 04 00 00    	jbe    c001a110 <Vm::x87Handler(regs*)+0x7be>
c0019d10:	83 ec 0c             	sub    esp,0xc
c0019d13:	6a 00                	push   0x0
c0019d15:	e8 f8 fa ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019d1a:	89 c6                	mov    esi,eax
c0019d1c:	89 d7                	mov    edi,edx
c0019d1e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d22:	2d f8 00 00 00       	sub    eax,0xf8
c0019d27:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d2a:	66 90                	xchg   ax,ax
c0019d2c:	e8 e1 fa ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019d31:	57                   	push   edi
c0019d32:	56                   	push   esi
c0019d33:	52                   	push   edx
c0019d34:	50                   	push   eax
c0019d35:	e8 a6 fa ff ff       	call   c00197e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d3a:	83 c4 1c             	add    esp,0x1c
c0019d3d:	52                   	push   edx
c0019d3e:	50                   	push   eax
c0019d3f:	6a 00                	push   0x0
c0019d41:	e9 6a 02 00 00       	jmp    c0019fb0 <Vm::x87Handler(regs*)+0x65e>
c0019d46:	66 90                	xchg   ax,ax
c0019d48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d4c:	8d 50 40             	lea    edx,[eax+0x40]
c0019d4f:	80 fa 07             	cmp    dl,0x7
c0019d52:	77 38                	ja     c0019d8c <Vm::x87Handler(regs*)+0x43a>
c0019d54:	83 ec 0c             	sub    esp,0xc
c0019d57:	2d c0 00 00 00       	sub    eax,0xc0
c0019d5c:	50                   	push   eax
c0019d5d:	e8 b0 fa ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019d62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d69:	89 c6                	mov    esi,eax
c0019d6b:	89 d7                	mov    edi,edx
c0019d6d:	e8 a0 fa ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019d72:	57                   	push   edi
c0019d73:	56                   	push   esi
c0019d74:	52                   	push   edx
c0019d75:	50                   	push   eax
c0019d76:	e8 0d fa ff ff       	call   c0019788 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019d7b:	83 c4 1c             	add    esp,0x1c
c0019d7e:	52                   	push   edx
c0019d7f:	50                   	push   eax
c0019d80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d84:	2d c0 00 00 00       	sub    eax,0xc0
c0019d89:	eb 41                	jmp    c0019dcc <Vm::x87Handler(regs*)+0x47a>
c0019d8b:	90                   	nop
c0019d8c:	8d 50 38             	lea    edx,[eax+0x38]
c0019d8f:	80 fa 07             	cmp    dl,0x7
c0019d92:	77 40                	ja     c0019dd4 <Vm::x87Handler(regs*)+0x482>
c0019d94:	83 ec 0c             	sub    esp,0xc
c0019d97:	2d c8 00 00 00       	sub    eax,0xc8
c0019d9c:	50                   	push   eax
c0019d9d:	e8 70 fa ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019da2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019da9:	89 c6                	mov    esi,eax
c0019dab:	89 d7                	mov    edi,edx
c0019dad:	e8 60 fa ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019db2:	57                   	push   edi
c0019db3:	56                   	push   esi
c0019db4:	52                   	push   edx
c0019db5:	50                   	push   eax
c0019db6:	e8 06 fa ff ff       	call   c00197c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019dbb:	83 c4 1c             	add    esp,0x1c
c0019dbe:	52                   	push   edx
c0019dbf:	50                   	push   eax
c0019dc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dc4:	2d c8 00 00 00       	sub    eax,0xc8
c0019dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dcc:	50                   	push   eax
c0019dcd:	e9 42 fc ff ff       	jmp    c0019a14 <Vm::x87Handler(regs*)+0xc2>
c0019dd2:	66 90                	xchg   ax,ax
c0019dd4:	83 c0 18             	add    eax,0x18
c0019dd7:	3c 07                	cmp    al,0x7
c0019dd9:	0f 87 6d 04 00 00    	ja     c001a24c <Vm::x87Handler(regs*)+0x8fa>
c0019ddf:	83 ec 0c             	sub    esp,0xc
c0019de2:	6a 00                	push   0x0
c0019de4:	e8 29 fa ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019de9:	89 c6                	mov    esi,eax
c0019deb:	89 d7                	mov    edi,edx
c0019ded:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019df1:	2d e8 00 00 00       	sub    eax,0xe8
c0019df6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019df9:	e8 14 fa ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019dfe:	57                   	push   edi
c0019dff:	56                   	push   esi
c0019e00:	52                   	push   edx
c0019e01:	50                   	push   eax
c0019e02:	e8 ab f9 ff ff       	call   c00197b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e07:	83 c4 1c             	add    esp,0x1c
c0019e0a:	52                   	push   edx
c0019e0b:	50                   	push   eax
c0019e0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e10:	2d e8 00 00 00       	sub    eax,0xe8
c0019e15:	eb b5                	jmp    c0019dcc <Vm::x87Handler(regs*)+0x47a>
c0019e17:	90                   	nop
c0019e18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e1c:	8d 50 40             	lea    edx,[eax+0x40]
c0019e1f:	80 fa 07             	cmp    dl,0x7
c0019e22:	77 3c                	ja     c0019e60 <Vm::x87Handler(regs*)+0x50e>
c0019e24:	83 ec 0c             	sub    esp,0xc
c0019e27:	2d c0 00 00 00       	sub    eax,0xc0
c0019e2c:	50                   	push   eax
c0019e2d:	e8 e0 f9 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019e32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e39:	89 c6                	mov    esi,eax
c0019e3b:	89 d7                	mov    edi,edx
c0019e3d:	e8 d0 f9 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019e42:	57                   	push   edi
c0019e43:	56                   	push   esi
c0019e44:	52                   	push   edx
c0019e45:	50                   	push   eax
c0019e46:	e8 3d f9 ff ff       	call   c0019788 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e4b:	83 c4 1c             	add    esp,0x1c
c0019e4e:	52                   	push   edx
c0019e4f:	50                   	push   eax
c0019e50:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e54:	2d c0 00 00 00       	sub    eax,0xc0
c0019e59:	e9 b2 01 00 00       	jmp    c001a010 <Vm::x87Handler(regs*)+0x6be>
c0019e5e:	66 90                	xchg   ax,ax
c0019e60:	8d 50 20             	lea    edx,[eax+0x20]
c0019e63:	80 fa 07             	cmp    dl,0x7
c0019e66:	77 3c                	ja     c0019ea4 <Vm::x87Handler(regs*)+0x552>
c0019e68:	83 ec 0c             	sub    esp,0xc
c0019e6b:	2d e0 00 00 00       	sub    eax,0xe0
c0019e70:	50                   	push   eax
c0019e71:	e8 9c f9 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019e76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e7d:	89 c6                	mov    esi,eax
c0019e7f:	89 d7                	mov    edi,edx
c0019e81:	e8 8c f9 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019e86:	57                   	push   edi
c0019e87:	56                   	push   esi
c0019e88:	52                   	push   edx
c0019e89:	50                   	push   eax
c0019e8a:	e8 23 f9 ff ff       	call   c00197b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e8f:	83 c4 1c             	add    esp,0x1c
c0019e92:	52                   	push   edx
c0019e93:	50                   	push   eax
c0019e94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e98:	2d e0 00 00 00       	sub    eax,0xe0
c0019e9d:	e9 6e 01 00 00       	jmp    c001a010 <Vm::x87Handler(regs*)+0x6be>
c0019ea2:	66 90                	xchg   ax,ax
c0019ea4:	8d 50 18             	lea    edx,[eax+0x18]
c0019ea7:	80 fa 07             	cmp    dl,0x7
c0019eaa:	77 3c                	ja     c0019ee8 <Vm::x87Handler(regs*)+0x596>
c0019eac:	83 ec 0c             	sub    esp,0xc
c0019eaf:	6a 00                	push   0x0
c0019eb1:	e8 5c f9 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019eb6:	89 c6                	mov    esi,eax
c0019eb8:	89 d7                	mov    edi,edx
c0019eba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ebe:	2d e8 00 00 00       	sub    eax,0xe8
c0019ec3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ec6:	e8 47 f9 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019ecb:	57                   	push   edi
c0019ecc:	56                   	push   esi
c0019ecd:	52                   	push   edx
c0019ece:	50                   	push   eax
c0019ecf:	e8 de f8 ff ff       	call   c00197b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019ed4:	83 c4 1c             	add    esp,0x1c
c0019ed7:	52                   	push   edx
c0019ed8:	50                   	push   eax
c0019ed9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019edd:	2d e8 00 00 00       	sub    eax,0xe8
c0019ee2:	e9 29 01 00 00       	jmp    c001a010 <Vm::x87Handler(regs*)+0x6be>
c0019ee7:	90                   	nop
c0019ee8:	8d 50 38             	lea    edx,[eax+0x38]
c0019eeb:	80 fa 07             	cmp    dl,0x7
c0019eee:	77 3c                	ja     c0019f2c <Vm::x87Handler(regs*)+0x5da>
c0019ef0:	83 ec 0c             	sub    esp,0xc
c0019ef3:	2d c8 00 00 00       	sub    eax,0xc8
c0019ef8:	50                   	push   eax
c0019ef9:	e8 14 f9 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019efe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f05:	89 c6                	mov    esi,eax
c0019f07:	89 d7                	mov    edi,edx
c0019f09:	e8 04 f9 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019f0e:	57                   	push   edi
c0019f0f:	56                   	push   esi
c0019f10:	52                   	push   edx
c0019f11:	50                   	push   eax
c0019f12:	e8 aa f8 ff ff       	call   c00197c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f17:	83 c4 1c             	add    esp,0x1c
c0019f1a:	52                   	push   edx
c0019f1b:	50                   	push   eax
c0019f1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f20:	2d c8 00 00 00       	sub    eax,0xc8
c0019f25:	e9 82 00 00 00       	jmp    c0019fac <Vm::x87Handler(regs*)+0x65a>
c0019f2a:	66 90                	xchg   ax,ax
c0019f2c:	3c f7                	cmp    al,0xf7
c0019f2e:	76 38                	jbe    c0019f68 <Vm::x87Handler(regs*)+0x616>
c0019f30:	83 ec 0c             	sub    esp,0xc
c0019f33:	6a 00                	push   0x0
c0019f35:	e8 d8 f8 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019f3a:	89 c6                	mov    esi,eax
c0019f3c:	89 d7                	mov    edi,edx
c0019f3e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f42:	2d f8 00 00 00       	sub    eax,0xf8
c0019f47:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f4a:	e8 c3 f8 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019f4f:	57                   	push   edi
c0019f50:	56                   	push   esi
c0019f51:	52                   	push   edx
c0019f52:	50                   	push   eax
c0019f53:	e8 88 f8 ff ff       	call   c00197e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f58:	83 c4 1c             	add    esp,0x1c
c0019f5b:	52                   	push   edx
c0019f5c:	50                   	push   eax
c0019f5d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f61:	2d f8 00 00 00       	sub    eax,0xf8
c0019f66:	eb 44                	jmp    c0019fac <Vm::x87Handler(regs*)+0x65a>
c0019f68:	8d 50 10             	lea    edx,[eax+0x10]
c0019f6b:	80 fa 07             	cmp    dl,0x7
c0019f6e:	0f 87 6c 01 00 00    	ja     c001a0e0 <Vm::x87Handler(regs*)+0x78e>
c0019f74:	83 ec 0c             	sub    esp,0xc
c0019f77:	2d f0 00 00 00       	sub    eax,0xf0
c0019f7c:	50                   	push   eax
c0019f7d:	e8 90 f8 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019f82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f89:	89 c6                	mov    esi,eax
c0019f8b:	89 d7                	mov    edi,edx
c0019f8d:	e8 80 f8 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019f92:	57                   	push   edi
c0019f93:	56                   	push   esi
c0019f94:	52                   	push   edx
c0019f95:	50                   	push   eax
c0019f96:	e8 45 f8 ff ff       	call   c00197e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f9b:	83 c4 1c             	add    esp,0x1c
c0019f9e:	52                   	push   edx
c0019f9f:	50                   	push   eax
c0019fa0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fa4:	2d f0 00 00 00       	sub    eax,0xf0
c0019fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fac:	50                   	push   eax
c0019fad:	8d 76 00             	lea    esi,[esi+0x0]
c0019fb0:	e8 a0 f8 ff ff       	call   c0019855 <Vm::fpuSetReg(int, unsigned long long)>
c0019fb5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019fb9:	e8 41 f9 ff ff       	call   c00198ff <Vm::fpuPop()>
c0019fbe:	e9 0d fa ff ff       	jmp    c00199d0 <Vm::x87Handler(regs*)+0x7e>
c0019fc3:	90                   	nop
c0019fc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fc8:	8d 50 30             	lea    edx,[eax+0x30]
c0019fcb:	80 fa 07             	cmp    dl,0x7
c0019fce:	77 20                	ja     c0019ff0 <Vm::x87Handler(regs*)+0x69e>
c0019fd0:	83 ec 0c             	sub    esp,0xc
c0019fd3:	6a 00                	push   0x0
c0019fd5:	e8 38 f8 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c0019fda:	83 c4 0c             	add    esp,0xc
c0019fdd:	52                   	push   edx
c0019fde:	50                   	push   eax
c0019fdf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fe3:	2d d0 00 00 00       	sub    eax,0xd0
c0019fe8:	e9 df fd ff ff       	jmp    c0019dcc <Vm::x87Handler(regs*)+0x47a>
c0019fed:	8d 76 00             	lea    esi,[esi+0x0]
c0019ff0:	8d 50 28             	lea    edx,[eax+0x28]
c0019ff3:	80 fa 07             	cmp    dl,0x7
c0019ff6:	77 28                	ja     c001a020 <Vm::x87Handler(regs*)+0x6ce>
c0019ff8:	83 ec 0c             	sub    esp,0xc
c0019ffb:	6a 00                	push   0x0
c0019ffd:	e8 10 f8 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a002:	83 c4 0c             	add    esp,0xc
c001a005:	52                   	push   edx
c001a006:	50                   	push   eax
c001a007:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a00b:	2d d8 00 00 00       	sub    eax,0xd8
c001a010:	50                   	push   eax
c001a011:	e8 3f f8 ff ff       	call   c0019855 <Vm::fpuSetReg(int, unsigned long long)>
c001a016:	e8 e4 f8 ff ff       	call   c00198ff <Vm::fpuPop()>
c001a01b:	e9 ac f9 ff ff       	jmp    c00199cc <Vm::x87Handler(regs*)+0x7a>
c001a020:	8d 50 20             	lea    edx,[eax+0x20]
c001a023:	80 fa 07             	cmp    dl,0x7
c001a026:	77 30                	ja     c001a058 <Vm::x87Handler(regs*)+0x706>
c001a028:	83 ec 0c             	sub    esp,0xc
c001a02b:	2d e0 00 00 00       	sub    eax,0xe0
c001a030:	50                   	push   eax
c001a031:	e8 dc f7 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a036:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a03d:	89 c6                	mov    esi,eax
c001a03f:	89 d7                	mov    edi,edx
c001a041:	e8 cc f7 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a046:	57                   	push   edi
c001a047:	56                   	push   esi
c001a048:	52                   	push   edx
c001a049:	50                   	push   eax
c001a04a:	e8 e3 f6 ff ff       	call   c0019732 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a04f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a053:	e9 78 02 00 00       	jmp    c001a2d0 <Vm::x87Handler(regs*)+0x97e>
c001a058:	8d 50 18             	lea    edx,[eax+0x18]
c001a05b:	80 fa 07             	cmp    dl,0x7
c001a05e:	0f 87 10 fb ff ff    	ja     c0019b74 <Vm::x87Handler(regs*)+0x222>
c001a064:	83 ec 0c             	sub    esp,0xc
c001a067:	2d e8 00 00 00       	sub    eax,0xe8
c001a06c:	50                   	push   eax
c001a06d:	e8 a0 f7 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a079:	89 c6                	mov    esi,eax
c001a07b:	89 d7                	mov    edi,edx
c001a07d:	e8 90 f7 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a082:	57                   	push   edi
c001a083:	56                   	push   esi
c001a084:	52                   	push   edx
c001a085:	50                   	push   eax
c001a086:	e8 a7 f6 ff ff       	call   c0019732 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a08b:	83 c4 20             	add    esp,0x20
c001a08e:	e8 6c f8 ff ff       	call   c00198ff <Vm::fpuPop()>
c001a093:	eb 6f                	jmp    c001a104 <Vm::x87Handler(regs*)+0x7b2>
c001a095:	8d 76 00             	lea    esi,[esi+0x0]
c001a098:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a09c:	0f 85 22 01 00 00    	jne    c001a1c4 <Vm::x87Handler(regs*)+0x872>
c001a0a2:	66 90                	xchg   ax,ax
c001a0a4:	83 ec 0c             	sub    esp,0xc
c001a0a7:	6a 01                	push   0x1
c001a0a9:	e8 64 f7 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a0ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0b5:	89 c6                	mov    esi,eax
c001a0b7:	89 d7                	mov    edi,edx
c001a0b9:	e8 54 f7 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a0be:	57                   	push   edi
c001a0bf:	56                   	push   esi
c001a0c0:	52                   	push   edx
c001a0c1:	50                   	push   eax
c001a0c2:	e8 6b f6 ff ff       	call   c0019732 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0c7:	83 c4 20             	add    esp,0x20
c001a0ca:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0ce:	e8 2c f8 ff ff       	call   c00198ff <Vm::fpuPop()>
c001a0d3:	e8 27 f8 ff ff       	call   c00198ff <Vm::fpuPop()>
c001a0d8:	e9 f7 f8 ff ff       	jmp    c00199d4 <Vm::x87Handler(regs*)+0x82>
c001a0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e0:	3c d9                	cmp    al,0xd9
c001a0e2:	0f 85 e8 02 00 00    	jne    c001a3d0 <Vm::x87Handler(regs*)+0xa7e>
c001a0e8:	eb ba                	jmp    c001a0a4 <Vm::x87Handler(regs*)+0x752>
c001a0ea:	66 90                	xchg   ax,ax
c001a0ec:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a0f0:	0f 85 2a 03 00 00    	jne    c001a420 <Vm::x87Handler(regs*)+0xace>
c001a0f6:	0f b7 05 e0 76 02 c0 	movzx  eax,WORD PTR ds:0xc00276e0
c001a0fd:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a101:	8d 76 00             	lea    esi,[esi+0x0]
c001a104:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a108:	e9 c7 f8 ff ff       	jmp    c00199d4 <Vm::x87Handler(regs*)+0x82>
c001a10d:	8d 76 00             	lea    esi,[esi+0x0]
c001a110:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a114:	84 d2                	test   dl,dl
c001a116:	75 10                	jne    c001a128 <Vm::x87Handler(regs*)+0x7d6>
c001a118:	83 ec 0c             	sub    esp,0xc
c001a11b:	ff 36                	push   DWORD PTR [esi]
c001a11d:	e8 29 f4 ff ff       	call   c001954b <Vm::fpu32ToInternal(unsigned int)>
c001a122:	e9 39 01 00 00       	jmp    c001a260 <Vm::x87Handler(regs*)+0x90e>
c001a127:	90                   	nop
c001a128:	80 fa 01             	cmp    dl,0x1
c001a12b:	75 0f                	jne    c001a13c <Vm::x87Handler(regs*)+0x7ea>
c001a12d:	83 ec 0c             	sub    esp,0xc
c001a130:	ff 36                	push   DWORD PTR [esi]
c001a132:	e8 14 f4 ff ff       	call   c001954b <Vm::fpu32ToInternal(unsigned int)>
c001a137:	e9 b4 02 00 00       	jmp    c001a3f0 <Vm::x87Handler(regs*)+0xa9e>
c001a13c:	80 fa 04             	cmp    dl,0x4
c001a13f:	75 0f                	jne    c001a150 <Vm::x87Handler(regs*)+0x7fe>
c001a141:	83 ec 0c             	sub    esp,0xc
c001a144:	ff 36                	push   DWORD PTR [esi]
c001a146:	e8 00 f4 ff ff       	call   c001954b <Vm::fpu32ToInternal(unsigned int)>
c001a14b:	e9 9c 01 00 00       	jmp    c001a2ec <Vm::x87Handler(regs*)+0x99a>
c001a150:	80 fa 05             	cmp    dl,0x5
c001a153:	75 1b                	jne    c001a170 <Vm::x87Handler(regs*)+0x81e>
c001a155:	83 ec 0c             	sub    esp,0xc
c001a158:	6a 00                	push   0x0
c001a15a:	e8 b3 f6 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a15f:	89 c7                	mov    edi,eax
c001a161:	89 d5                	mov    ebp,edx
c001a163:	58                   	pop    eax
c001a164:	ff 36                	push   DWORD PTR [esi]
c001a166:	e8 e0 f3 ff ff       	call   c001954b <Vm::fpu32ToInternal(unsigned int)>
c001a16b:	e9 bc 01 00 00       	jmp    c001a32c <Vm::x87Handler(regs*)+0x9da>
c001a170:	80 fa 06             	cmp    dl,0x6
c001a173:	75 0f                	jne    c001a184 <Vm::x87Handler(regs*)+0x832>
c001a175:	83 ec 0c             	sub    esp,0xc
c001a178:	ff 36                	push   DWORD PTR [esi]
c001a17a:	e8 cc f3 ff ff       	call   c001954b <Vm::fpu32ToInternal(unsigned int)>
c001a17f:	e9 cc 01 00 00       	jmp    c001a350 <Vm::x87Handler(regs*)+0x9fe>
c001a184:	31 c0                	xor    eax,eax
c001a186:	80 fa 07             	cmp    dl,0x7
c001a189:	0f 85 d5 02 00 00    	jne    c001a464 <Vm::x87Handler(regs*)+0xb12>
c001a18f:	83 ec 0c             	sub    esp,0xc
c001a192:	6a 00                	push   0x0
c001a194:	e8 79 f6 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a199:	89 c7                	mov    edi,eax
c001a19b:	89 d5                	mov    ebp,edx
c001a19d:	58                   	pop    eax
c001a19e:	ff 36                	push   DWORD PTR [esi]
c001a1a0:	e8 a6 f3 ff ff       	call   c001954b <Vm::fpu32ToInternal(unsigned int)>
c001a1a5:	e9 ee 01 00 00       	jmp    c001a398 <Vm::x87Handler(regs*)+0xa46>
c001a1aa:	66 90                	xchg   ax,ax
c001a1ac:	80 fa 03             	cmp    dl,0x3
c001a1af:	0f 85 f7 01 00 00    	jne    c001a3ac <Vm::x87Handler(regs*)+0xa5a>
c001a1b5:	e8 45 f7 ff ff       	call   c00198ff <Vm::fpuPop()>
c001a1ba:	51                   	push   ecx
c001a1bb:	51                   	push   ecx
c001a1bc:	e9 03 02 00 00       	jmp    c001a3c4 <Vm::x87Handler(regs*)+0xa72>
c001a1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1c8:	80 fa 01             	cmp    dl,0x1
c001a1cb:	75 0b                	jne    c001a1d8 <Vm::x87Handler(regs*)+0x886>
c001a1cd:	57                   	push   edi
c001a1ce:	57                   	push   edi
c001a1cf:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1d1:	e9 0e 02 00 00       	jmp    c001a3e4 <Vm::x87Handler(regs*)+0xa92>
c001a1d6:	66 90                	xchg   ax,ax
c001a1d8:	80 fa 04             	cmp    dl,0x4
c001a1db:	75 13                	jne    c001a1f0 <Vm::x87Handler(regs*)+0x89e>
c001a1dd:	31 d2                	xor    edx,edx
c001a1df:	51                   	push   ecx
c001a1e0:	51                   	push   ecx
c001a1e1:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1e3:	52                   	push   edx
c001a1e4:	50                   	push   eax
c001a1e5:	e8 4a f4 ff ff       	call   c0019634 <Vm::fpuLongToFloat(long long)>
c001a1ea:	e9 fd 00 00 00       	jmp    c001a2ec <Vm::x87Handler(regs*)+0x99a>
c001a1ef:	90                   	nop
c001a1f0:	31 c0                	xor    eax,eax
c001a1f2:	80 fa 07             	cmp    dl,0x7
c001a1f5:	0f 85 69 02 00 00    	jne    c001a464 <Vm::x87Handler(regs*)+0xb12>
c001a1fb:	83 ec 0c             	sub    esp,0xc
c001a1fe:	6a 00                	push   0x0
c001a200:	e8 0d f6 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a205:	89 c7                	mov    edi,eax
c001a207:	89 d5                	mov    ebp,edx
c001a209:	58                   	pop    eax
c001a20a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a20c:	5a                   	pop    edx
c001a20d:	31 d2                	xor    edx,edx
c001a20f:	52                   	push   edx
c001a210:	50                   	push   eax
c001a211:	e8 1e f4 ff ff       	call   c0019634 <Vm::fpuLongToFloat(long long)>
c001a216:	e9 7d 01 00 00       	jmp    c001a398 <Vm::x87Handler(regs*)+0xa46>
c001a21b:	90                   	nop
c001a21c:	84 d2                	test   dl,dl
c001a21e:	75 10                	jne    c001a230 <Vm::x87Handler(regs*)+0x8de>
c001a220:	31 d2                	xor    edx,edx
c001a222:	55                   	push   ebp
c001a223:	55                   	push   ebp
c001a224:	8b 06                	mov    eax,DWORD PTR [esi]
c001a226:	52                   	push   edx
c001a227:	50                   	push   eax
c001a228:	e9 03 02 00 00       	jmp    c001a430 <Vm::x87Handler(regs*)+0xade>
c001a22d:	8d 76 00             	lea    esi,[esi+0x0]
c001a230:	31 c0                	xor    eax,eax
c001a232:	80 fa 02             	cmp    dl,0x2
c001a235:	0f 85 29 02 00 00    	jne    c001a464 <Vm::x87Handler(regs*)+0xb12>
c001a23b:	83 ec 0c             	sub    esp,0xc
c001a23e:	6a 00                	push   0x0
c001a240:	e8 cd f5 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a245:	59                   	pop    ecx
c001a246:	5f                   	pop    edi
c001a247:	e9 18 f9 ff ff       	jmp    c0019b64 <Vm::x87Handler(regs*)+0x212>
c001a24c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a250:	84 d2                	test   dl,dl
c001a252:	75 2c                	jne    c001a280 <Vm::x87Handler(regs*)+0x92e>
c001a254:	50                   	push   eax
c001a255:	50                   	push   eax
c001a256:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a259:	ff 36                	push   DWORD PTR [esi]
c001a25b:	e8 30 f3 ff ff       	call   c0019590 <Vm::fpu64ToInternal(unsigned long long)>
c001a260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a267:	89 c6                	mov    esi,eax
c001a269:	89 d7                	mov    edi,edx
c001a26b:	e8 a2 f5 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a270:	57                   	push   edi
c001a271:	56                   	push   esi
c001a272:	52                   	push   edx
c001a273:	50                   	push   eax
c001a274:	e8 0f f5 ff ff       	call   c0019788 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a279:	e9 8e 01 00 00       	jmp    c001a40c <Vm::x87Handler(regs*)+0xaba>
c001a27e:	66 90                	xchg   ax,ax
c001a280:	80 fa 01             	cmp    dl,0x1
c001a283:	75 13                	jne    c001a298 <Vm::x87Handler(regs*)+0x946>
c001a285:	50                   	push   eax
c001a286:	50                   	push   eax
c001a287:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a28a:	ff 36                	push   DWORD PTR [esi]
c001a28c:	e8 ff f2 ff ff       	call   c0019590 <Vm::fpu64ToInternal(unsigned long long)>
c001a291:	e9 5a 01 00 00       	jmp    c001a3f0 <Vm::x87Handler(regs*)+0xa9e>
c001a296:	66 90                	xchg   ax,ax
c001a298:	80 fa 02             	cmp    dl,0x2
c001a29b:	0f 85 03 f9 ff ff    	jne    c0019ba4 <Vm::x87Handler(regs*)+0x252>
c001a2a1:	55                   	push   ebp
c001a2a2:	55                   	push   ebp
c001a2a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2a6:	ff 36                	push   DWORD PTR [esi]
c001a2a8:	e8 e3 f2 ff ff       	call   c0019590 <Vm::fpu64ToInternal(unsigned long long)>
c001a2ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2b4:	89 c6                	mov    esi,eax
c001a2b6:	89 d7                	mov    edi,edx
c001a2b8:	e8 55 f5 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a2bd:	57                   	push   edi
c001a2be:	56                   	push   esi
c001a2bf:	52                   	push   edx
c001a2c0:	50                   	push   eax
c001a2c1:	e8 6c f4 ff ff       	call   c0019732 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a2c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2ca:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a2d0:	83 c4 20             	add    esp,0x20
c001a2d3:	e9 fc f6 ff ff       	jmp    c00199d4 <Vm::x87Handler(regs*)+0x82>
c001a2d8:	80 fa 04             	cmp    dl,0x4
c001a2db:	75 2f                	jne    c001a30c <Vm::x87Handler(regs*)+0x9ba>
c001a2dd:	51                   	push   ecx
c001a2de:	51                   	push   ecx
c001a2df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2e2:	ff 36                	push   DWORD PTR [esi]
c001a2e4:	e8 a7 f2 ff ff       	call   c0019590 <Vm::fpu64ToInternal(unsigned long long)>
c001a2e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2f3:	89 c6                	mov    esi,eax
c001a2f5:	89 d7                	mov    edi,edx
c001a2f7:	e8 16 f5 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a2fc:	57                   	push   edi
c001a2fd:	56                   	push   esi
c001a2fe:	52                   	push   edx
c001a2ff:	50                   	push   eax
c001a300:	e8 ad f4 ff ff       	call   c00197b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a305:	e9 02 01 00 00       	jmp    c001a40c <Vm::x87Handler(regs*)+0xaba>
c001a30a:	66 90                	xchg   ax,ax
c001a30c:	80 fa 05             	cmp    dl,0x5
c001a30f:	75 2b                	jne    c001a33c <Vm::x87Handler(regs*)+0x9ea>
c001a311:	83 ec 0c             	sub    esp,0xc
c001a314:	6a 00                	push   0x0
c001a316:	e8 f7 f4 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a31b:	89 c7                	mov    edi,eax
c001a31d:	89 d5                	mov    ebp,edx
c001a31f:	58                   	pop    eax
c001a320:	5a                   	pop    edx
c001a321:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a324:	ff 36                	push   DWORD PTR [esi]
c001a326:	e8 65 f2 ff ff       	call   c0019590 <Vm::fpu64ToInternal(unsigned long long)>
c001a32b:	90                   	nop
c001a32c:	83 c4 10             	add    esp,0x10
c001a32f:	55                   	push   ebp
c001a330:	57                   	push   edi
c001a331:	52                   	push   edx
c001a332:	50                   	push   eax
c001a333:	e8 7a f4 ff ff       	call   c00197b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a338:	eb 6a                	jmp    c001a3a4 <Vm::x87Handler(regs*)+0xa52>
c001a33a:	66 90                	xchg   ax,ax
c001a33c:	80 fa 06             	cmp    dl,0x6
c001a33f:	75 2f                	jne    c001a370 <Vm::x87Handler(regs*)+0xa1e>
c001a341:	51                   	push   ecx
c001a342:	51                   	push   ecx
c001a343:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a346:	ff 36                	push   DWORD PTR [esi]
c001a348:	e8 43 f2 ff ff       	call   c0019590 <Vm::fpu64ToInternal(unsigned long long)>
c001a34d:	8d 76 00             	lea    esi,[esi+0x0]
c001a350:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a357:	89 c6                	mov    esi,eax
c001a359:	89 d7                	mov    edi,edx
c001a35b:	e8 b2 f4 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a360:	57                   	push   edi
c001a361:	56                   	push   esi
c001a362:	52                   	push   edx
c001a363:	50                   	push   eax
c001a364:	e8 77 f4 ff ff       	call   c00197e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a369:	e9 9e 00 00 00       	jmp    c001a40c <Vm::x87Handler(regs*)+0xaba>
c001a36e:	66 90                	xchg   ax,ax
c001a370:	31 c0                	xor    eax,eax
c001a372:	80 fa 07             	cmp    dl,0x7
c001a375:	0f 85 e9 00 00 00    	jne    c001a464 <Vm::x87Handler(regs*)+0xb12>
c001a37b:	83 ec 0c             	sub    esp,0xc
c001a37e:	6a 00                	push   0x0
c001a380:	e8 8d f4 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a385:	89 c7                	mov    edi,eax
c001a387:	89 d5                	mov    ebp,edx
c001a389:	58                   	pop    eax
c001a38a:	5a                   	pop    edx
c001a38b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a38e:	ff 36                	push   DWORD PTR [esi]
c001a390:	e8 fb f1 ff ff       	call   c0019590 <Vm::fpu64ToInternal(unsigned long long)>
c001a395:	8d 76 00             	lea    esi,[esi+0x0]
c001a398:	83 c4 10             	add    esp,0x10
c001a39b:	55                   	push   ebp
c001a39c:	57                   	push   edi
c001a39d:	52                   	push   edx
c001a39e:	50                   	push   eax
c001a39f:	e8 3c f4 ff ff       	call   c00197e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3a4:	83 c4 0c             	add    esp,0xc
c001a3a7:	eb 67                	jmp    c001a410 <Vm::x87Handler(regs*)+0xabe>
c001a3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3ac:	31 c0                	xor    eax,eax
c001a3ae:	80 fa 02             	cmp    dl,0x2
c001a3b1:	0f 85 ad 00 00 00    	jne    c001a464 <Vm::x87Handler(regs*)+0xb12>
c001a3b7:	83 ec 0c             	sub    esp,0xc
c001a3ba:	6a 00                	push   0x0
c001a3bc:	e8 51 f4 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a3c1:	59                   	pop    ecx
c001a3c2:	5f                   	pop    edi
c001a3c3:	90                   	nop
c001a3c4:	52                   	push   edx
c001a3c5:	50                   	push   eax
c001a3c6:	e8 77 f1 ff ff       	call   c0019542 <Vm::fpuInternalTo64(unsigned long long)>
c001a3cb:	e9 84 00 00 00       	jmp    c001a454 <Vm::x87Handler(regs*)+0xb02>
c001a3d0:	31 c0                	xor    eax,eax
c001a3d2:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a3d7:	0f 85 87 00 00 00    	jne    c001a464 <Vm::x87Handler(regs*)+0xb12>
c001a3dd:	50                   	push   eax
c001a3de:	50                   	push   eax
c001a3df:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a3e2:	66 90                	xchg   ax,ax
c001a3e4:	31 d2                	xor    edx,edx
c001a3e6:	52                   	push   edx
c001a3e7:	50                   	push   eax
c001a3e8:	e8 47 f2 ff ff       	call   c0019634 <Vm::fpuLongToFloat(long long)>
c001a3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3f7:	89 c6                	mov    esi,eax
c001a3f9:	89 d7                	mov    edi,edx
c001a3fb:	e8 12 f4 ff ff       	call   c0019812 <Vm::fpuGetReg(int)>
c001a400:	57                   	push   edi
c001a401:	56                   	push   esi
c001a402:	52                   	push   edx
c001a403:	50                   	push   eax
c001a404:	e8 b8 f3 ff ff       	call   c00197c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a409:	8d 76 00             	lea    esi,[esi+0x0]
c001a40c:	83 c4 1c             	add    esp,0x1c
c001a40f:	90                   	nop
c001a410:	52                   	push   edx
c001a411:	50                   	push   eax
c001a412:	6a 00                	push   0x0
c001a414:	e8 3c f4 ff ff       	call   c0019855 <Vm::fpuSetReg(int, unsigned long long)>
c001a419:	e9 7a f7 ff ff       	jmp    c0019b98 <Vm::x87Handler(regs*)+0x246>
c001a41e:	66 90                	xchg   ax,ax
c001a420:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a424:	80 fa 05             	cmp    dl,0x5
c001a427:	75 13                	jne    c001a43c <Vm::x87Handler(regs*)+0xaea>
c001a429:	55                   	push   ebp
c001a42a:	55                   	push   ebp
c001a42b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a42e:	ff 36                	push   DWORD PTR [esi]
c001a430:	e8 c3 f1 ff ff       	call   c00195f8 <Vm::fpuULongToFloat(unsigned long long)>
c001a435:	e9 52 f7 ff ff       	jmp    c0019b8c <Vm::x87Handler(regs*)+0x23a>
c001a43a:	66 90                	xchg   ax,ax
c001a43c:	31 c0                	xor    eax,eax
c001a43e:	80 fa 07             	cmp    dl,0x7
c001a441:	75 21                	jne    c001a464 <Vm::x87Handler(regs*)+0xb12>
c001a443:	e8 b7 f4 ff ff       	call   c00198ff <Vm::fpuPop()>
c001a448:	51                   	push   ecx
c001a449:	51                   	push   ecx
c001a44a:	52                   	push   edx
c001a44b:	50                   	push   eax
c001a44c:	e8 48 f1 ff ff       	call   c0019599 <Vm::fpuFloatToLong(unsigned long long)>
c001a451:	8d 76 00             	lea    esi,[esi+0x0]
c001a454:	83 c4 10             	add    esp,0x10
c001a457:	89 06                	mov    DWORD PTR [esi],eax
c001a459:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a45c:	e9 7b f7 ff ff       	jmp    c0019bdc <Vm::x87Handler(regs*)+0x28a>
c001a461:	8d 76 00             	lea    esi,[esi+0x0]
c001a464:	83 c4 1c             	add    esp,0x1c
c001a467:	5b                   	pop    ebx
c001a468:	5e                   	pop    esi
c001a469:	5f                   	pop    edi
c001a46a:	5d                   	pop    ebp
c001a46b:	c3                   	ret    

c001a46c <__static_initialization_and_destruction_0(int, int)>:
c001a46c:	83 ec 0c             	sub    esp,0xc
c001a46f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a474:	75 1a                	jne    c001a490 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a476:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a47e:	75 10                	jne    c001a490 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a480:	83 ec 0c             	sub    esp,0xc
c001a483:	68 e0 76 02 c0       	push   0xc00276e0
c001a488:	e8 cb 73 00 00       	call   c0021858 <Vm::_FPUState::_FPUState()>
c001a48d:	83 c4 10             	add    esp,0x10
c001a490:	90                   	nop
c001a491:	83 c4 0c             	add    esp,0xc
c001a494:	c3                   	ret    
c001a495:	8d 76 00             	lea    esi,[esi+0x0]

c001a498 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a498:	83 ec 0c             	sub    esp,0xc
c001a49b:	83 ec 08             	sub    esp,0x8
c001a49e:	68 ff ff 00 00       	push   0xffff
c001a4a3:	6a 01                	push   0x1
c001a4a5:	e8 c2 ff ff ff       	call   c001a46c <__static_initialization_and_destruction_0(int, int)>
c001a4aa:	83 c4 10             	add    esp,0x10
c001a4ad:	83 c4 0c             	add    esp,0xc
c001a4b0:	c3                   	ret    
c001a4b1:	66 90                	xchg   ax,ax
c001a4b3:	90                   	nop

c001a4b4 <FAT::getName()>:
c001a4b4:	b8 00 49 02 c0       	mov    eax,0xc0024900
c001a4b9:	c3                   	ret    
c001a4ba:	66 90                	xchg   ax,ax

c001a4bc <FAT::tell(void*, unsigned long long*)>:
c001a4bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4c1:	75 09                	jne    c001a4cc <FAT::tell(void*, unsigned long long*)+0x10>
c001a4c3:	b8 04 00 00 00       	mov    eax,0x4
c001a4c8:	c3                   	ret    
c001a4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4d1:	75 09                	jne    c001a4dc <FAT::tell(void*, unsigned long long*)+0x20>
c001a4d3:	b8 04 00 00 00       	mov    eax,0x4
c001a4d8:	c3                   	ret    
c001a4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4e0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a4e3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a4e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a4ea:	89 01                	mov    DWORD PTR [ecx],eax
c001a4ec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a4ef:	b8 00 00 00 00       	mov    eax,0x0
c001a4f4:	c3                   	ret    
c001a4f5:	90                   	nop
c001a4f6:	66 90                	xchg   ax,ax

c001a4f8 <FAT::stat(void*, unsigned long long*)>:
c001a4f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4fd:	75 09                	jne    c001a508 <FAT::stat(void*, unsigned long long*)+0x10>
c001a4ff:	b8 04 00 00 00       	mov    eax,0x4
c001a504:	c3                   	ret    
c001a505:	8d 76 00             	lea    esi,[esi+0x0]
c001a508:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a50d:	75 09                	jne    c001a518 <FAT::stat(void*, unsigned long long*)+0x20>
c001a50f:	b8 04 00 00 00       	mov    eax,0x4
c001a514:	c3                   	ret    
c001a515:	8d 76 00             	lea    esi,[esi+0x0]
c001a518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a51c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a51f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a522:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a526:	89 01                	mov    DWORD PTR [ecx],eax
c001a528:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a52b:	b8 00 00 00 00       	mov    eax,0x0
c001a530:	c3                   	ret    
c001a531:	90                   	nop
c001a532:	66 90                	xchg   ax,ax

c001a534 <FAT::~FAT()>:
c001a534:	83 ec 0c             	sub    esp,0xc
c001a537:	ba 4c 49 02 c0       	mov    edx,0xc002494c
c001a53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a540:	89 10                	mov    DWORD PTR [eax],edx
c001a542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a546:	83 ec 0c             	sub    esp,0xc
c001a549:	50                   	push   eax
c001a54a:	e8 57 28 ff ff       	call   c000cda6 <Filesystem::~Filesystem()>
c001a54f:	83 c4 10             	add    esp,0x10
c001a552:	90                   	nop
c001a553:	83 c4 0c             	add    esp,0xc
c001a556:	c3                   	ret    
c001a557:	90                   	nop

c001a558 <FAT::~FAT()>:
c001a558:	83 ec 0c             	sub    esp,0xc
c001a55b:	83 ec 0c             	sub    esp,0xc
c001a55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a562:	e8 cd ff ff ff       	call   c001a534 <FAT::~FAT()>
c001a567:	83 c4 10             	add    esp,0x10
c001a56a:	83 ec 08             	sub    esp,0x8
c001a56d:	6a 08                	push   0x8
c001a56f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a573:	e8 12 24 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	83 c4 0c             	add    esp,0xc
c001a57e:	c3                   	ret    
c001a57f:	90                   	nop

c001a580 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a580:	83 ec 1c             	sub    esp,0x1c
c001a583:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a58a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a58f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a593:	8b 04 85 60 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88a0]
c001a59a:	83 f8 ff             	cmp    eax,0xffffffff
c001a59d:	75 35                	jne    c001a5d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a59f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5a3:	88 c2                	mov    dl,al
c001a5a5:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001a5aa:	01 d0                	add    eax,edx
c001a5ac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5b0:	8b 15 40 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027740
c001a5b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5ba:	89 14 85 60 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88a0],edx
c001a5c1:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001a5c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5ca:	89 14 85 e0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8820],edx
c001a5d1:	eb 19                	jmp    c001a5ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a5d3:	90                   	nop
c001a5d4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5d8:	88 c2                	mov    dl,al
c001a5da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5de:	8b 04 85 60 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88a0]
c001a5e5:	01 d0                	add    eax,edx
c001a5e7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5eb:	90                   	nop
c001a5ec:	83 ec 04             	sub    esp,0x4
c001a5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5f7:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a5fb:	50                   	push   eax
c001a5fc:	e8 31 c6 fe ff       	call   c0006c32 <f_getlabel>
c001a601:	83 c4 10             	add    esp,0x10
c001a604:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a608:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a60d:	75 09                	jne    c001a618 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a60f:	b8 00 00 00 00       	mov    eax,0x0
c001a614:	eb 0a                	jmp    c001a620 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a616:	66 90                	xchg   ax,ax
c001a618:	b8 01 00 00 00       	mov    eax,0x1
c001a61d:	8d 76 00             	lea    esi,[esi+0x0]
c001a620:	83 c4 1c             	add    esp,0x1c
c001a623:	c3                   	ret    

c001a624 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a624:	57                   	push   edi
c001a625:	83 ec 58             	sub    esp,0x58
c001a628:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a630:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a634:	b9 0f 00 00 00       	mov    ecx,0xf
c001a639:	b8 00 00 00 00       	mov    eax,0x0
c001a63e:	fc                   	cld    
c001a63f:	89 d7                	mov    edi,edx
c001a641:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a643:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a647:	8b 04 85 60 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88a0]
c001a64e:	83 f8 ff             	cmp    eax,0xffffffff
c001a651:	75 35                	jne    c001a688 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a653:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a657:	88 c2                	mov    dl,al
c001a659:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001a65e:	01 d0                	add    eax,edx
c001a660:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a664:	8b 15 40 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027740
c001a66a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a66e:	89 14 85 60 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88a0],edx
c001a675:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001a67a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a67e:	89 14 85 e0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8820],edx
c001a685:	eb 19                	jmp    c001a6a0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a687:	90                   	nop
c001a688:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a68c:	88 c2                	mov    dl,al
c001a68e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a692:	8b 04 85 60 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88a0]
c001a699:	01 d0                	add    eax,edx
c001a69b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a69f:	90                   	nop
c001a6a0:	83 ec 08             	sub    esp,0x8
c001a6a3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a6a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6ab:	50                   	push   eax
c001a6ac:	e8 cf 61 fe ff       	call   c0000880 <strcat>
c001a6b1:	83 c4 10             	add    esp,0x10
c001a6b4:	83 ec 0c             	sub    esp,0xc
c001a6b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6bb:	50                   	push   eax
c001a6bc:	e8 5f c7 fe ff       	call   c0006e20 <f_setlabel>
c001a6c1:	83 c4 10             	add    esp,0x10
c001a6c4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6c8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a6cd:	75 09                	jne    c001a6d8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a6cf:	b8 00 00 00 00       	mov    eax,0x0
c001a6d4:	eb 0a                	jmp    c001a6e0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a6d6:	66 90                	xchg   ax,ax
c001a6d8:	b8 01 00 00 00       	mov    eax,0x1
c001a6dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a6e0:	83 c4 58             	add    esp,0x58
c001a6e3:	5f                   	pop    edi
c001a6e4:	c3                   	ret    
c001a6e5:	90                   	nop
c001a6e6:	66 90                	xchg   ax,ax

c001a6e8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a6e8:	83 ec 2c             	sub    esp,0x2c
c001a6eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a6f3:	83 ec 08             	sub    esp,0x8
c001a6f6:	68 24 49 02 c0       	push   0xc0024924
c001a6fb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a6ff:	e8 c8 60 fe ff       	call   c00007cc <strcmp>
c001a704:	83 c4 10             	add    esp,0x10
c001a707:	85 c0                	test   eax,eax
c001a709:	0f 94 c0             	sete   al
c001a70c:	84 c0                	test   al,al
c001a70e:	74 10                	je     c001a720 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a710:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a718:	e9 b3 00 00 00       	jmp    c001a7d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a71d:	8d 76 00             	lea    esi,[esi+0x0]
c001a720:	83 ec 08             	sub    esp,0x8
c001a723:	68 16 49 02 c0       	push   0xc0024916
c001a728:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a72c:	e8 9b 60 fe ff       	call   c00007cc <strcmp>
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	85 c0                	test   eax,eax
c001a736:	0f 94 c0             	sete   al
c001a739:	84 c0                	test   al,al
c001a73b:	74 0f                	je     c001a74c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a73d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a745:	e9 86 00 00 00       	jmp    c001a7d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a74a:	66 90                	xchg   ax,ax
c001a74c:	83 ec 08             	sub    esp,0x8
c001a74f:	68 1c 49 02 c0       	push   0xc002491c
c001a754:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a758:	e8 6f 60 fe ff       	call   c00007cc <strcmp>
c001a75d:	83 c4 10             	add    esp,0x10
c001a760:	85 c0                	test   eax,eax
c001a762:	0f 94 c0             	sete   al
c001a765:	84 c0                	test   al,al
c001a767:	74 0b                	je     c001a774 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a769:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a771:	eb 5d                	jmp    c001a7d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a773:	90                   	nop
c001a774:	83 ec 08             	sub    esp,0x8
c001a777:	68 cc 1f 02 c0       	push   0xc0021fcc
c001a77c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a780:	e8 47 60 fe ff       	call   c00007cc <strcmp>
c001a785:	83 c4 10             	add    esp,0x10
c001a788:	85 c0                	test   eax,eax
c001a78a:	0f 94 c0             	sete   al
c001a78d:	84 c0                	test   al,al
c001a78f:	74 0b                	je     c001a79c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a791:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a799:	eb 35                	jmp    c001a7d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a79b:	90                   	nop
c001a79c:	83 ec 08             	sub    esp,0x8
c001a79f:	68 22 49 02 c0       	push   0xc0024922
c001a7a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7a8:	e8 1f 60 fe ff       	call   c00007cc <strcmp>
c001a7ad:	83 c4 10             	add    esp,0x10
c001a7b0:	85 c0                	test   eax,eax
c001a7b2:	0f 94 c0             	sete   al
c001a7b5:	84 c0                	test   al,al
c001a7b7:	74 0b                	je     c001a7c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a7b9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a7c1:	eb 0d                	jmp    c001a7d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7c3:	90                   	nop
c001a7c4:	b8 08 00 00 00       	mov    eax,0x8
c001a7c9:	e9 ea 00 00 00       	jmp    c001a8b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a7ce:	66 90                	xchg   ax,ax
c001a7d0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a7d7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a7dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7e0:	8b 04 85 60 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88a0]
c001a7e7:	83 f8 ff             	cmp    eax,0xffffffff
c001a7ea:	75 34                	jne    c001a820 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a7ec:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a7f0:	88 c2                	mov    dl,al
c001a7f2:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001a7f7:	01 d0                	add    eax,edx
c001a7f9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a7fd:	8b 15 40 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027740
c001a803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a807:	89 14 85 60 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88a0],edx
c001a80e:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001a813:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a817:	89 14 85 e0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8820],edx
c001a81e:	eb 18                	jmp    c001a838 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a820:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a824:	88 c2                	mov    dl,al
c001a826:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a82a:	8b 04 85 60 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88a0]
c001a831:	01 d0                	add    eax,edx
c001a833:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a837:	90                   	nop
c001a838:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a83c:	88 04 24             	mov    BYTE PTR [esp],al
c001a83f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a843:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a847:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a84f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a854:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a85c:	83 ec 0c             	sub    esp,0xc
c001a85f:	68 00 20 00 00       	push   0x2000
c001a864:	e8 5a f1 fe ff       	call   c00099c3 <malloc>
c001a869:	83 c4 10             	add    esp,0x10
c001a86c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a870:	68 00 20 00 00       	push   0x2000
c001a875:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a879:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a87d:	50                   	push   eax
c001a87e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a882:	50                   	push   eax
c001a883:	e8 19 cc fe ff       	call   c00074a1 <f_mkfs>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a88f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a894:	75 0a                	jne    c001a8a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a896:	b8 00 00 00 00       	mov    eax,0x0
c001a89b:	eb 1b                	jmp    c001a8b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a89d:	8d 76 00             	lea    esi,[esi+0x0]
c001a8a0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a8a5:	75 09                	jne    c001a8b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a8a7:	b8 09 00 00 00       	mov    eax,0x9
c001a8ac:	eb 0a                	jmp    c001a8b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8ae:	66 90                	xchg   ax,ax
c001a8b0:	b8 01 00 00 00       	mov    eax,0x1
c001a8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8b8:	83 c4 2c             	add    esp,0x2c
c001a8bb:	c3                   	ret    

c001a8bc <FAT::tryMount(LogicalDisk*, int)>:
c001a8bc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a8c2:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001a8c7:	83 f8 14             	cmp    eax,0x14
c001a8ca:	75 18                	jne    c001a8e4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a8cc:	83 ec 0c             	sub    esp,0xc
c001a8cf:	68 28 49 02 c0       	push   0xc0024928
c001a8d4:	e8 32 9a ff ff       	call   c001430b <Krnl::panic(char const*)>
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	b0 00                	mov    al,0x0
c001a8de:	e9 e9 01 00 00       	jmp    c001aacc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a8e3:	90                   	nop
c001a8e4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a8eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a8f7:	3d 00 02 00 00       	cmp    eax,0x200
c001a8fc:	74 0a                	je     c001a908 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a8fe:	b0 00                	mov    al,0x0
c001a900:	e9 c7 01 00 00       	jmp    c001aacc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a905:	8d 76 00             	lea    esi,[esi+0x0]
c001a908:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a910:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a917:	8b 04 85 60 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88a0]
c001a91e:	83 f8 ff             	cmp    eax,0xffffffff
c001a921:	74 09                	je     c001a92c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a923:	b0 01                	mov    al,0x1
c001a925:	e9 a2 01 00 00       	jmp    c001aacc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a92a:	66 90                	xchg   ax,ax
c001a92c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a936:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a93e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a945:	88 c2                	mov    dl,al
c001a947:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001a94c:	01 d0                	add    eax,edx
c001a94e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a955:	8b 15 40 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027740
c001a95b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a962:	89 14 85 60 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88a0],edx
c001a969:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001a96e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a975:	89 14 85 e0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8820],edx
c001a97c:	83 ec 0c             	sub    esp,0xc
c001a97f:	68 54 02 00 00       	push   0x254
c001a984:	e8 3a f0 fe ff       	call   c00099c3 <malloc>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a993:	83 ec 04             	sub    esp,0x4
c001a996:	6a 00                	push   0x0
c001a998:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a99f:	50                   	push   eax
c001a9a0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9a7:	e8 7d a4 fe ff       	call   c0004e29 <f_mount>
c001a9ac:	83 c4 10             	add    esp,0x10
c001a9af:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a9b6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a9be:	74 1c                	je     c001a9dc <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a9c0:	83 ec 0c             	sub    esp,0xc
c001a9c3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9ca:	e8 14 f0 fe ff       	call   c00099e3 <rfree>
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	b0 00                	mov    al,0x0
c001a9d4:	e9 f3 00 00 00       	jmp    c001aacc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9dc:	83 ec 04             	sub    esp,0x4
c001a9df:	68 00 01 00 00       	push   0x100
c001a9e4:	6a 00                	push   0x0
c001a9e6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a9ed:	50                   	push   eax
c001a9ee:	e8 91 5c fe ff       	call   c0000684 <memset>
c001a9f3:	83 c4 10             	add    esp,0x10
c001a9f6:	83 ec 08             	sub    esp,0x8
c001a9f9:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa00:	50                   	push   eax
c001aa01:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa08:	50                   	push   eax
c001aa09:	e8 72 5e fe ff       	call   c0000880 <strcat>
c001aa0e:	83 c4 10             	add    esp,0x10
c001aa11:	83 ec 08             	sub    esp,0x8
c001aa14:	68 36 49 02 c0       	push   0xc0024936
c001aa19:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa20:	50                   	push   eax
c001aa21:	e8 5a 5e fe ff       	call   c0000880 <strcat>
c001aa26:	83 c4 10             	add    esp,0x10
c001aa29:	83 ec 04             	sub    esp,0x4
c001aa2c:	6a 01                	push   0x1
c001aa2e:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aa35:	50                   	push   eax
c001aa36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa3a:	50                   	push   eax
c001aa3b:	e8 4b a4 fe ff       	call   c0004e8b <f_open>
c001aa40:	83 c4 10             	add    esp,0x10
c001aa43:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa4a:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aa51:	85 c0                	test   eax,eax
c001aa53:	74 0b                	je     c001aa60 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aa55:	78 31                	js     c001aa88 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa57:	83 e8 04             	sub    eax,0x4
c001aa5a:	83 f8 01             	cmp    eax,0x1
c001aa5d:	77 29                	ja     c001aa88 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa5f:	90                   	nop
c001aa60:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aa68:	83 ec 0c             	sub    esp,0xc
c001aa6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa6f:	50                   	push   eax
c001aa70:	e8 68 af fe ff       	call   c00059dd <f_close>
c001aa75:	83 c4 10             	add    esp,0x10
c001aa78:	90                   	nop
c001aa79:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aa81:	74 41                	je     c001aac4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aa83:	eb 33                	jmp    c001aab8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aa85:	8d 76 00             	lea    esi,[esi+0x0]
c001aa88:	83 ec 0c             	sub    esp,0xc
c001aa8b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa92:	e8 4c ef fe ff       	call   c00099e3 <rfree>
c001aa97:	83 c4 10             	add    esp,0x10
c001aa9a:	83 ec 04             	sub    esp,0x4
c001aa9d:	6a 00                	push   0x0
c001aa9f:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aaa6:	50                   	push   eax
c001aaa7:	6a 00                	push   0x0
c001aaa9:	e8 7b a3 fe ff       	call   c0004e29 <f_mount>
c001aaae:	83 c4 10             	add    esp,0x10
c001aab1:	b0 00                	mov    al,0x0
c001aab3:	eb 17                	jmp    c001aacc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aab5:	8d 76 00             	lea    esi,[esi+0x0]
c001aab8:	a1 40 77 02 c0       	mov    eax,ds:0xc0027740
c001aabd:	40                   	inc    eax
c001aabe:	a3 40 77 02 c0       	mov    ds:0xc0027740,eax
c001aac3:	90                   	nop
c001aac4:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001aacb:	90                   	nop
c001aacc:	81 c4 6c 03 00 00    	add    esp,0x36c
c001aad2:	c3                   	ret    
c001aad3:	90                   	nop

c001aad4 <FAT::allocateSwapfile(char const*, int)>:
c001aad4:	55                   	push   ebp
c001aad5:	57                   	push   edi
c001aad6:	56                   	push   esi
c001aad7:	53                   	push   ebx
c001aad8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001aade:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001aae9:	83 ec 0c             	sub    esp,0xc
c001aaec:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001aaf3:	e8 cb ee fe ff       	call   c00099c3 <malloc>
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	89 c7                	mov    edi,eax
c001aafd:	a1 70 76 02 c0       	mov    eax,ds:0xc0027670
c001ab02:	83 ec 04             	sub    esp,0x4
c001ab05:	50                   	push   eax
c001ab06:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab0d:	57                   	push   edi
c001ab0e:	e8 c3 24 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001ab13:	83 c4 10             	add    esp,0x10
c001ab16:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ab1d:	83 ec 04             	sub    esp,0x4
c001ab20:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab24:	50                   	push   eax
c001ab25:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab29:	50                   	push   eax
c001ab2a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab31:	e8 b0 27 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c001ab36:	83 c4 10             	add    esp,0x10
c001ab39:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab40:	c1 e0 14             	shl    eax,0x14
c001ab43:	89 c7                	mov    edi,eax
c001ab45:	89 c5                	mov    ebp,eax
c001ab47:	c1 fd 1f             	sar    ebp,0x1f
c001ab4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab52:	89 f9                	mov    ecx,edi
c001ab54:	31 c1                	xor    ecx,eax
c001ab56:	89 cb                	mov    ebx,ecx
c001ab58:	89 e9                	mov    ecx,ebp
c001ab5a:	31 d1                	xor    ecx,edx
c001ab5c:	89 ce                	mov    esi,ecx
c001ab5e:	89 f0                	mov    eax,esi
c001ab60:	09 d8                	or     eax,ebx
c001ab62:	0f 84 98 00 00 00    	je     c001ac00 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ab68:	83 ec 0c             	sub    esp,0xc
c001ab6b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab72:	e8 3b 26 ff ff       	call   c000d1b2 <File::unlink()>
c001ab77:	83 c4 10             	add    esp,0x10
c001ab7a:	83 ec 08             	sub    esp,0x8
c001ab7d:	6a 12                	push   0x12
c001ab7f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab86:	e8 af 24 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c001ab8b:	83 c4 10             	add    esp,0x10
c001ab8e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab95:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ab9b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001aba2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001aba9:	c1 e0 14             	shl    eax,0x14
c001abac:	99                   	cdq    
c001abad:	6a 01                	push   0x1
c001abaf:	52                   	push   edx
c001abb0:	50                   	push   eax
c001abb1:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001abb8:	e8 d0 c4 fe ff       	call   c000708d <f_expand>
c001abbd:	83 c4 10             	add    esp,0x10
c001abc0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abc7:	8b 00                	mov    eax,DWORD PTR [eax]
c001abc9:	83 c0 10             	add    eax,0x10
c001abcc:	8b 00                	mov    eax,DWORD PTR [eax]
c001abce:	83 ec 0c             	sub    esp,0xc
c001abd1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abd5:	52                   	push   edx
c001abd6:	8d 54 24 30          	lea    edx,[esp+0x30]
c001abda:	52                   	push   edx
c001abdb:	6a 00                	push   0x0
c001abdd:	68 00 04 00 00       	push   0x400
c001abe2:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001abe9:	ff d0                	call   eax
c001abeb:	83 c4 20             	add    esp,0x20
c001abee:	83 ec 0c             	sub    esp,0xc
c001abf1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abf8:	e8 9b 24 ff ff       	call   c000d098 <File::close()>
c001abfd:	83 c4 10             	add    esp,0x10
c001ac00:	83 ec 08             	sub    esp,0x8
c001ac03:	6a 01                	push   0x1
c001ac05:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac0c:	e8 29 24 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac1d:	83 c0 0c             	add    eax,0xc
c001ac20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac22:	83 ec 0c             	sub    esp,0xc
c001ac25:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac29:	52                   	push   edx
c001ac2a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ac2e:	52                   	push   edx
c001ac2f:	6a 00                	push   0x0
c001ac31:	6a 04                	push   0x4
c001ac33:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac3a:	ff d0                	call   eax
c001ac3c:	83 c4 20             	add    esp,0x20
c001ac3f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac46:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac4c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac53:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ac5a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ac5d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ac60:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ac67:	83 ec 0c             	sub    esp,0xc
c001ac6a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac71:	e8 22 24 ff ff       	call   c000d098 <File::close()>
c001ac76:	83 c4 10             	add    esp,0x10
c001ac79:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ac80:	ba 00 00 00 00       	mov    edx,0x0
c001ac85:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ac8b:	5b                   	pop    ebx
c001ac8c:	5e                   	pop    esi
c001ac8d:	5f                   	pop    edi
c001ac8e:	5d                   	pop    ebp
c001ac8f:	c3                   	ret    

c001ac90 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ac90:	57                   	push   edi
c001ac91:	56                   	push   esi
c001ac92:	53                   	push   ebx
c001ac93:	81 ec 50 02 00 00    	sub    esp,0x250
c001ac99:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001aca1:	74 0d                	je     c001acb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001aca3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001acab:	75 0f                	jne    c001acbc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001acad:	8d 76 00             	lea    esi,[esi+0x0]
c001acb0:	b8 04 00 00 00       	mov    eax,0x4
c001acb5:	e9 36 01 00 00       	jmp    c001adf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001acba:	66 90                	xchg   ax,ax
c001acbc:	83 ec 08             	sub    esp,0x8
c001acbf:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001acc6:	50                   	push   eax
c001acc7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001acce:	e8 14 b3 fe ff       	call   c0005fe7 <f_readdir>
c001acd3:	83 c4 10             	add    esp,0x10
c001acd6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001acdd:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001acee:	83 c0 1a             	add    eax,0x1a
c001acf1:	50                   	push   eax
c001acf2:	e8 a9 59 fe ff       	call   c00006a0 <strlen>
c001acf7:	83 c4 10             	add    esp,0x10
c001acfa:	ba 00 00 00 00       	mov    edx,0x0
c001acff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad07:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ad0e:	0f b6 c0             	movzx  eax,al
c001ad11:	83 e0 10             	and    eax,0x10
c001ad14:	74 0a                	je     c001ad20 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ad16:	b8 02 00 00 00       	mov    eax,0x2
c001ad1b:	eb 0b                	jmp    c001ad28 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ad1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad20:	b8 01 00 00 00       	mov    eax,0x1
c001ad25:	8d 76 00             	lea    esi,[esi+0x0]
c001ad28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad2c:	83 ec 08             	sub    esp,0x8
c001ad2f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad36:	83 c0 1a             	add    eax,0x1a
c001ad39:	50                   	push   eax
c001ad3a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad3e:	83 c0 10             	add    eax,0x10
c001ad41:	50                   	push   eax
c001ad42:	e8 f9 59 fe ff       	call   c0000740 <strcpy>
c001ad47:	83 c4 10             	add    esp,0x10
c001ad4a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ad51:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ad58:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ad5c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ad63:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ad6a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ad71:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ad78:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ad7f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ad86:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ad8d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ad94:	89 c6                	mov    esi,eax
c001ad96:	89 d7                	mov    edi,edx
c001ad98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad9a:	89 c8                	mov    eax,ecx
c001ad9c:	89 fa                	mov    edx,edi
c001ad9e:	89 f3                	mov    ebx,esi
c001ada0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ada7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001adae:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001adb5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001adbc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001adc2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001adc9:	84 c0                	test   al,al
c001adcb:	75 07                	jne    c001add4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001adcd:	b8 07 00 00 00       	mov    eax,0x7
c001add2:	eb 1c                	jmp    c001adf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001add4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001addb:	85 c0                	test   eax,eax
c001addd:	75 09                	jne    c001ade8 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001addf:	b8 00 00 00 00       	mov    eax,0x0
c001ade4:	eb 0a                	jmp    c001adf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ade6:	66 90                	xchg   ax,ax
c001ade8:	b8 01 00 00 00       	mov    eax,0x1
c001aded:	8d 76 00             	lea    esi,[esi+0x0]
c001adf0:	81 c4 50 02 00 00    	add    esp,0x250
c001adf6:	5b                   	pop    ebx
c001adf7:	5e                   	pop    esi
c001adf8:	5f                   	pop    edi
c001adf9:	c3                   	ret    
c001adfa:	66 90                	xchg   ax,ax

c001adfc <FAT::read(void*, unsigned long, void*, int*)>:
c001adfc:	83 ec 1c             	sub    esp,0x1c
c001adff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae04:	74 0a                	je     c001ae10 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae0b:	75 0b                	jne    c001ae18 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ae0d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae10:	b8 04 00 00 00       	mov    eax,0x4
c001ae15:	eb 41                	jmp    c001ae58 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae17:	90                   	nop
c001ae18:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae1c:	50                   	push   eax
c001ae1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae29:	e8 99 a4 fe ff       	call   c00052c7 <f_read>
c001ae2e:	83 c4 10             	add    esp,0x10
c001ae31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae39:	89 c2                	mov    edx,eax
c001ae3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae3f:	89 10                	mov    DWORD PTR [eax],edx
c001ae41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae45:	85 c0                	test   eax,eax
c001ae47:	75 07                	jne    c001ae50 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ae49:	b8 00 00 00 00       	mov    eax,0x0
c001ae4e:	eb 08                	jmp    c001ae58 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae50:	b8 01 00 00 00       	mov    eax,0x1
c001ae55:	8d 76 00             	lea    esi,[esi+0x0]
c001ae58:	83 c4 1c             	add    esp,0x1c
c001ae5b:	c3                   	ret    

c001ae5c <FAT::write(void*, unsigned long, void*, int*)>:
c001ae5c:	83 ec 1c             	sub    esp,0x1c
c001ae5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae64:	74 0a                	je     c001ae70 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ae66:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae6b:	75 0b                	jne    c001ae78 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ae6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae70:	b8 04 00 00 00       	mov    eax,0x4
c001ae75:	eb 41                	jmp    c001aeb8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ae77:	90                   	nop
c001ae78:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae7c:	50                   	push   eax
c001ae7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae89:	e8 b9 a6 fe ff       	call   c0005547 <f_write>
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae99:	89 c2                	mov    edx,eax
c001ae9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae9f:	89 10                	mov    DWORD PTR [eax],edx
c001aea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aea5:	85 c0                	test   eax,eax
c001aea7:	75 07                	jne    c001aeb0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001aea9:	b8 00 00 00 00       	mov    eax,0x0
c001aeae:	eb 08                	jmp    c001aeb8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aeb0:	b8 01 00 00 00       	mov    eax,0x1
c001aeb5:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb8:	83 c4 1c             	add    esp,0x1c
c001aebb:	c3                   	ret    

c001aebc <FAT::close(void*)>:
c001aebc:	83 ec 1c             	sub    esp,0x1c
c001aebf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aec4:	75 0a                	jne    c001aed0 <FAT::close(void*)+0x14>
c001aec6:	b8 04 00 00 00       	mov    eax,0x4
c001aecb:	eb 3f                	jmp    c001af0c <FAT::close(void*)+0x50>
c001aecd:	8d 76 00             	lea    esi,[esi+0x0]
c001aed0:	83 ec 0c             	sub    esp,0xc
c001aed3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aed7:	e8 01 ab fe ff       	call   c00059dd <f_close>
c001aedc:	83 c4 10             	add    esp,0x10
c001aedf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aee3:	83 ec 0c             	sub    esp,0xc
c001aee6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeea:	e8 e4 ea fe ff       	call   c00099d3 <free>
c001aeef:	83 c4 10             	add    esp,0x10
c001aef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aef6:	85 c0                	test   eax,eax
c001aef8:	75 0a                	jne    c001af04 <FAT::close(void*)+0x48>
c001aefa:	b8 00 00 00 00       	mov    eax,0x0
c001aeff:	eb 0b                	jmp    c001af0c <FAT::close(void*)+0x50>
c001af01:	8d 76 00             	lea    esi,[esi+0x0]
c001af04:	b8 01 00 00 00       	mov    eax,0x1
c001af09:	8d 76 00             	lea    esi,[esi+0x0]
c001af0c:	83 c4 1c             	add    esp,0x1c
c001af0f:	c3                   	ret    

c001af10 <FAT::closeDir(void*)>:
c001af10:	83 ec 1c             	sub    esp,0x1c
c001af13:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af18:	75 0a                	jne    c001af24 <FAT::closeDir(void*)+0x14>
c001af1a:	b8 04 00 00 00       	mov    eax,0x4
c001af1f:	eb 3f                	jmp    c001af60 <FAT::closeDir(void*)+0x50>
c001af21:	8d 76 00             	lea    esi,[esi+0x0]
c001af24:	83 ec 0c             	sub    esp,0xc
c001af27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af2b:	e8 95 b0 fe ff       	call   c0005fc5 <f_closedir>
c001af30:	83 c4 10             	add    esp,0x10
c001af33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af37:	83 ec 0c             	sub    esp,0xc
c001af3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af3e:	e8 90 ea fe ff       	call   c00099d3 <free>
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af4a:	85 c0                	test   eax,eax
c001af4c:	75 0a                	jne    c001af58 <FAT::closeDir(void*)+0x48>
c001af4e:	b8 00 00 00 00       	mov    eax,0x0
c001af53:	eb 0b                	jmp    c001af60 <FAT::closeDir(void*)+0x50>
c001af55:	8d 76 00             	lea    esi,[esi+0x0]
c001af58:	b8 01 00 00 00       	mov    eax,0x1
c001af5d:	8d 76 00             	lea    esi,[esi+0x0]
c001af60:	83 c4 1c             	add    esp,0x1c
c001af63:	c3                   	ret    

c001af64 <FAT::seek(void*, unsigned long long)>:
c001af64:	83 ec 2c             	sub    esp,0x2c
c001af67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af77:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001af7c:	75 0a                	jne    c001af88 <FAT::seek(void*, unsigned long long)+0x24>
c001af7e:	b8 04 00 00 00       	mov    eax,0x4
c001af83:	eb 37                	jmp    c001afbc <FAT::seek(void*, unsigned long long)+0x58>
c001af85:	8d 76 00             	lea    esi,[esi+0x0]
c001af88:	83 ec 04             	sub    esp,0x4
c001af8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001af8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001af93:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001af97:	e8 70 aa fe ff       	call   c0005a0c <f_lseek>
c001af9c:	83 c4 10             	add    esp,0x10
c001af9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afa7:	85 c0                	test   eax,eax
c001afa9:	75 09                	jne    c001afb4 <FAT::seek(void*, unsigned long long)+0x50>
c001afab:	b8 00 00 00 00       	mov    eax,0x0
c001afb0:	eb 0a                	jmp    c001afbc <FAT::seek(void*, unsigned long long)+0x58>
c001afb2:	66 90                	xchg   ax,ax
c001afb4:	b8 01 00 00 00       	mov    eax,0x1
c001afb9:	8d 76 00             	lea    esi,[esi+0x0]
c001afbc:	83 c4 2c             	add    esp,0x2c
c001afbf:	c3                   	ret    

c001afc0 <fatWrapperReadDisk>:
c001afc0:	83 ec 1c             	sub    esp,0x1c
c001afc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afc7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afcf:	89 04 24             	mov    DWORD PTR [esp],eax
c001afd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001afdf:	8b 04 85 40 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98c0]
c001afe6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001afea:	83 ec 0c             	sub    esp,0xc
c001afed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aff1:	52                   	push   edx
c001aff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001affa:	50                   	push   eax
c001affb:	e8 88 51 ff ff       	call   c0010188 <LogicalDisk::read(unsigned long long, int, void*)>
c001b000:	83 c4 20             	add    esp,0x20
c001b003:	83 c4 1c             	add    esp,0x1c
c001b006:	c3                   	ret    
c001b007:	90                   	nop

c001b008 <fatWrapperWriteDisk>:
c001b008:	83 ec 1c             	sub    esp,0x1c
c001b00b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b00f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b013:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b017:	89 04 24             	mov    DWORD PTR [esp],eax
c001b01a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b01e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b022:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b027:	8b 04 85 40 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98c0]
c001b02e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b032:	83 ec 0c             	sub    esp,0xc
c001b035:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b039:	52                   	push   edx
c001b03a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b03e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b042:	50                   	push   eax
c001b043:	e8 ac 51 ff ff       	call   c00101f4 <LogicalDisk::write(unsigned long long, int, void*)>
c001b048:	83 c4 20             	add    esp,0x20
c001b04b:	83 c4 1c             	add    esp,0x1c
c001b04e:	c3                   	ret    
c001b04f:	90                   	nop

c001b050 <fatWrapperIoctl>:
c001b050:	53                   	push   ebx
c001b051:	83 ec 28             	sub    esp,0x28
c001b054:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b058:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b05c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b060:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b064:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b069:	75 31                	jne    c001b09c <fatWrapperIoctl+0x4c>
c001b06b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b06f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b073:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b078:	8b 04 85 40 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98c0]
c001b07f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b085:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b08b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b08f:	66 89 02             	mov    WORD PTR [edx],ax
c001b092:	b8 00 00 00 00       	mov    eax,0x0
c001b097:	e9 bc 00 00 00       	jmp    c001b158 <fatWrapperIoctl+0x108>
c001b09c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b0a1:	75 6d                	jne    c001b110 <fatWrapperIoctl+0xc0>
c001b0a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0ab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0b0:	8b 04 85 40 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98c0]
c001b0b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0bd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b0c3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b0c9:	89 c8                	mov    eax,ecx
c001b0cb:	89 da                	mov    edx,ebx
c001b0cd:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b0d1:	c1 e0 0a             	shl    eax,0xa
c001b0d4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b0d9:	8b 0c 8d 40 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98c0]
c001b0e0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b0e6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b0ec:	89 cb                	mov    ebx,ecx
c001b0ee:	c1 fb 1f             	sar    ebx,0x1f
c001b0f1:	53                   	push   ebx
c001b0f2:	51                   	push   ecx
c001b0f3:	52                   	push   edx
c001b0f4:	50                   	push   eax
c001b0f5:	e8 ba 5d 00 00       	call   c0020eb4 <__udivdi3>
c001b0fa:	83 c4 10             	add    esp,0x10
c001b0fd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b101:	89 01                	mov    DWORD PTR [ecx],eax
c001b103:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b106:	b8 00 00 00 00       	mov    eax,0x0
c001b10b:	eb 4b                	jmp    c001b158 <fatWrapperIoctl+0x108>
c001b10d:	8d 76 00             	lea    esi,[esi+0x0]
c001b110:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b115:	75 09                	jne    c001b120 <fatWrapperIoctl+0xd0>
c001b117:	b8 00 00 00 00       	mov    eax,0x0
c001b11c:	eb 3a                	jmp    c001b158 <fatWrapperIoctl+0x108>
c001b11e:	66 90                	xchg   ax,ax
c001b120:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b125:	75 19                	jne    c001b140 <fatWrapperIoctl+0xf0>
c001b127:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b12b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b12f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b133:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b139:	b8 00 00 00 00       	mov    eax,0x0
c001b13e:	eb 18                	jmp    c001b158 <fatWrapperIoctl+0x108>
c001b140:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b145:	75 09                	jne    c001b150 <fatWrapperIoctl+0x100>
c001b147:	b8 00 00 00 00       	mov    eax,0x0
c001b14c:	eb 0a                	jmp    c001b158 <fatWrapperIoctl+0x108>
c001b14e:	66 90                	xchg   ax,ax
c001b150:	b8 04 00 00 00       	mov    eax,0x4
c001b155:	8d 76 00             	lea    esi,[esi+0x0]
c001b158:	83 c4 28             	add    esp,0x28
c001b15b:	5b                   	pop    ebx
c001b15c:	c3                   	ret    
c001b15d:	90                   	nop
c001b15e:	66 90                	xchg   ax,ax

c001b160 <FAT::FAT()>:
c001b160:	83 ec 1c             	sub    esp,0x1c
c001b163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b167:	83 ec 0c             	sub    esp,0xc
c001b16a:	50                   	push   eax
c001b16b:	e8 12 1c ff ff       	call   c000cd82 <Filesystem::Filesystem()>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	ba 4c 49 02 c0       	mov    edx,0xc002494c
c001b178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b17c:	89 10                	mov    DWORD PTR [eax],edx
c001b17e:	c7 05 40 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027740,0x0
c001b188:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b190:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b195:	7f 15                	jg     c001b1ac <FAT::FAT()+0x4c>
c001b197:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b19b:	c7 04 85 60 77 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd88a0],0xffffffff
c001b1a6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b1aa:	eb e4                	jmp    c001b190 <FAT::FAT()+0x30>
c001b1ac:	90                   	nop
c001b1ad:	83 c4 1c             	add    esp,0x1c
c001b1b0:	c3                   	ret    
c001b1b1:	90                   	nop
c001b1b2:	66 90                	xchg   ax,ax

c001b1b4 <FAT::fixFilepath(char*)>:
c001b1b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1b8:	8a 00                	mov    al,BYTE PTR [eax]
c001b1ba:	3c 40                	cmp    al,0x40
c001b1bc:	7e 2e                	jle    c001b1ec <FAT::fixFilepath(char*)+0x38>
c001b1be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1c2:	8a 00                	mov    al,BYTE PTR [eax]
c001b1c4:	83 e8 41             	sub    eax,0x41
c001b1c7:	88 c2                	mov    dl,al
c001b1c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1cd:	88 10                	mov    BYTE PTR [eax],dl
c001b1cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1d3:	8a 00                	mov    al,BYTE PTR [eax]
c001b1d5:	0f be c0             	movsx  eax,al
c001b1d8:	8b 04 85 60 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88a0]
c001b1df:	83 c0 30             	add    eax,0x30
c001b1e2:	88 c2                	mov    dl,al
c001b1e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1e8:	88 10                	mov    BYTE PTR [eax],dl
c001b1ea:	66 90                	xchg   ax,ax
c001b1ec:	90                   	nop
c001b1ed:	c3                   	ret    
c001b1ee:	66 90                	xchg   ax,ax

c001b1f0 <FAT::open(char const*, void**, FileOpenMode)>:
c001b1f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b1f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b1fe:	74 0c                	je     c001b20c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b200:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b208:	75 0e                	jne    c001b218 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b20a:	66 90                	xchg   ax,ax
c001b20c:	b8 04 00 00 00       	mov    eax,0x4
c001b211:	e9 06 01 00 00       	jmp    c001b31c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b216:	66 90                	xchg   ax,ax
c001b218:	83 ec 08             	sub    esp,0x8
c001b21b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b222:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b226:	50                   	push   eax
c001b227:	e8 14 55 fe ff       	call   c0000740 <strcpy>
c001b22c:	83 c4 10             	add    esp,0x10
c001b22f:	83 ec 08             	sub    esp,0x8
c001b232:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b236:	50                   	push   eax
c001b237:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b23e:	e8 71 ff ff ff       	call   c001b1b4 <FAT::fixFilepath(char*)>
c001b243:	83 c4 10             	add    esp,0x10
c001b246:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b24e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b255:	83 e0 01             	and    eax,0x1
c001b258:	74 0a                	je     c001b264 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b25a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b262:	66 90                	xchg   ax,ax
c001b264:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b26b:	83 e0 04             	and    eax,0x4
c001b26e:	74 10                	je     c001b280 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b270:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b278:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b280:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b287:	83 e0 02             	and    eax,0x2
c001b28a:	74 08                	je     c001b294 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b28c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b294:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b29b:	83 e0 08             	and    eax,0x8
c001b29e:	74 08                	je     c001b2a8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b2a0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b2a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2af:	83 e0 10             	and    eax,0x10
c001b2b2:	74 08                	je     c001b2bc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b2b4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b2bc:	83 ec 0c             	sub    esp,0xc
c001b2bf:	68 50 02 00 00       	push   0x250
c001b2c4:	e8 fa e6 fe ff       	call   c00099c3 <malloc>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	89 c2                	mov    edx,eax
c001b2ce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2d5:	89 10                	mov    DWORD PTR [eax],edx
c001b2d7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b2df:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2e8:	83 ec 04             	sub    esp,0x4
c001b2eb:	52                   	push   edx
c001b2ec:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b2f0:	52                   	push   edx
c001b2f1:	50                   	push   eax
c001b2f2:	e8 94 9b fe ff       	call   c0004e8b <f_open>
c001b2f7:	83 c4 10             	add    esp,0x10
c001b2fa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b301:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b309:	74 09                	je     c001b314 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b30b:	b8 01 00 00 00       	mov    eax,0x1
c001b310:	eb 0a                	jmp    c001b31c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b312:	66 90                	xchg   ax,ax
c001b314:	b8 00 00 00 00       	mov    eax,0x0
c001b319:	8d 76 00             	lea    esi,[esi+0x0]
c001b31c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b322:	c3                   	ret    
c001b323:	90                   	nop

c001b324 <FAT::openDir(char const*, void**)>:
c001b324:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b32a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b332:	74 0c                	je     c001b340 <FAT::openDir(char const*, void**)+0x1c>
c001b334:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b33c:	75 0e                	jne    c001b34c <FAT::openDir(char const*, void**)+0x28>
c001b33e:	66 90                	xchg   ax,ax
c001b340:	b8 04 00 00 00       	mov    eax,0x4
c001b345:	e9 82 00 00 00       	jmp    c001b3cc <FAT::openDir(char const*, void**)+0xa8>
c001b34a:	66 90                	xchg   ax,ax
c001b34c:	83 ec 08             	sub    esp,0x8
c001b34f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b356:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b35a:	50                   	push   eax
c001b35b:	e8 e0 53 fe ff       	call   c0000740 <strcpy>
c001b360:	83 c4 10             	add    esp,0x10
c001b363:	83 ec 08             	sub    esp,0x8
c001b366:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b36a:	50                   	push   eax
c001b36b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b372:	e8 3d fe ff ff       	call   c001b1b4 <FAT::fixFilepath(char*)>
c001b377:	83 c4 10             	add    esp,0x10
c001b37a:	83 ec 0c             	sub    esp,0xc
c001b37d:	6a 4c                	push   0x4c
c001b37f:	e8 3f e6 fe ff       	call   c00099c3 <malloc>
c001b384:	83 c4 10             	add    esp,0x10
c001b387:	89 c2                	mov    edx,eax
c001b389:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b390:	89 10                	mov    DWORD PTR [eax],edx
c001b392:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b399:	8b 00                	mov    eax,DWORD PTR [eax]
c001b39b:	83 ec 08             	sub    esp,0x8
c001b39e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b3a2:	52                   	push   edx
c001b3a3:	50                   	push   eax
c001b3a4:	e8 1a ab fe ff       	call   c0005ec3 <f_opendir>
c001b3a9:	83 c4 10             	add    esp,0x10
c001b3ac:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b3b3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b3bb:	74 07                	je     c001b3c4 <FAT::openDir(char const*, void**)+0xa0>
c001b3bd:	b8 01 00 00 00       	mov    eax,0x1
c001b3c2:	eb 08                	jmp    c001b3cc <FAT::openDir(char const*, void**)+0xa8>
c001b3c4:	b8 00 00 00 00       	mov    eax,0x0
c001b3c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3d2:	c3                   	ret    
c001b3d3:	90                   	nop

c001b3d4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b3d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b3da:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b3e2:	75 0c                	jne    c001b3f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b3e4:	b8 04 00 00 00       	mov    eax,0x4
c001b3e9:	e9 d2 00 00 00       	jmp    c001b4c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b3ee:	66 90                	xchg   ax,ax
c001b3f0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b3f8:	75 0a                	jne    c001b404 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b3fa:	b8 04 00 00 00       	mov    eax,0x4
c001b3ff:	e9 bc 00 00 00       	jmp    c001b4c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b404:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b40c:	75 0a                	jne    c001b418 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b40e:	b8 04 00 00 00       	mov    eax,0x4
c001b413:	e9 a8 00 00 00       	jmp    c001b4c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b418:	83 ec 08             	sub    esp,0x8
c001b41b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b422:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b429:	50                   	push   eax
c001b42a:	e8 11 53 fe ff       	call   c0000740 <strcpy>
c001b42f:	83 c4 10             	add    esp,0x10
c001b432:	83 ec 08             	sub    esp,0x8
c001b435:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b43c:	50                   	push   eax
c001b43d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b444:	e8 6b fd ff ff       	call   c001b1b4 <FAT::fixFilepath(char*)>
c001b449:	83 c4 10             	add    esp,0x10
c001b44c:	83 ec 08             	sub    esp,0x8
c001b44f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b453:	50                   	push   eax
c001b454:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b45b:	50                   	push   eax
c001b45c:	e8 21 ac fe ff       	call   c0006082 <f_stat>
c001b461:	83 c4 10             	add    esp,0x10
c001b464:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b46b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b472:	85 c0                	test   eax,eax
c001b474:	74 0a                	je     c001b480 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b476:	83 f8 04             	cmp    eax,0x4
c001b479:	74 35                	je     c001b4b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b47b:	eb 3b                	jmp    c001b4b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b47d:	8d 76 00             	lea    esi,[esi+0x0]
c001b480:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b484:	0f b6 c0             	movzx  eax,al
c001b487:	83 e0 10             	and    eax,0x10
c001b48a:	0f 95 c2             	setne  dl
c001b48d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b494:	88 10                	mov    BYTE PTR [eax],dl
c001b496:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b499:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b49d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b4a4:	89 01                	mov    DWORD PTR [ecx],eax
c001b4a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b4a9:	b8 00 00 00 00       	mov    eax,0x0
c001b4ae:	eb 10                	jmp    c001b4c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4b0:	b8 02 00 00 00       	mov    eax,0x2
c001b4b5:	eb 09                	jmp    c001b4c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4b7:	90                   	nop
c001b4b8:	b8 01 00 00 00       	mov    eax,0x1
c001b4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b4c0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b4c6:	c3                   	ret    
c001b4c7:	90                   	nop

c001b4c8 <FAT::unlink(char const*)>:
c001b4c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b4d6:	75 08                	jne    c001b4e0 <FAT::unlink(char const*)+0x18>
c001b4d8:	b8 04 00 00 00       	mov    eax,0x4
c001b4dd:	eb 61                	jmp    c001b540 <FAT::unlink(char const*)+0x78>
c001b4df:	90                   	nop
c001b4e0:	83 ec 08             	sub    esp,0x8
c001b4e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b4ee:	50                   	push   eax
c001b4ef:	e8 4c 52 fe ff       	call   c0000740 <strcpy>
c001b4f4:	83 c4 10             	add    esp,0x10
c001b4f7:	83 ec 08             	sub    esp,0x8
c001b4fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b4fe:	50                   	push   eax
c001b4ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b506:	e8 a9 fc ff ff       	call   c001b1b4 <FAT::fixFilepath(char*)>
c001b50b:	83 c4 10             	add    esp,0x10
c001b50e:	83 ec 0c             	sub    esp,0xc
c001b511:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b515:	50                   	push   eax
c001b516:	e8 b9 ae fe ff       	call   c00063d4 <f_unlink>
c001b51b:	83 c4 10             	add    esp,0x10
c001b51e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b525:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b52c:	85 c0                	test   eax,eax
c001b52e:	75 08                	jne    c001b538 <FAT::unlink(char const*)+0x70>
c001b530:	b8 00 00 00 00       	mov    eax,0x0
c001b535:	eb 09                	jmp    c001b540 <FAT::unlink(char const*)+0x78>
c001b537:	90                   	nop
c001b538:	b8 01 00 00 00       	mov    eax,0x1
c001b53d:	8d 76 00             	lea    esi,[esi+0x0]
c001b540:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b546:	c3                   	ret    
c001b547:	90                   	nop

c001b548 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b548:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b54e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b555:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b55c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b560:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b564:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b56c:	75 0a                	jne    c001b578 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b56e:	b8 04 00 00 00       	mov    eax,0x4
c001b573:	e9 30 01 00 00       	jmp    c001b6a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b578:	83 ec 08             	sub    esp,0x8
c001b57b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b582:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b586:	50                   	push   eax
c001b587:	e8 b4 51 fe ff       	call   c0000740 <strcpy>
c001b58c:	83 c4 10             	add    esp,0x10
c001b58f:	83 ec 08             	sub    esp,0x8
c001b592:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b596:	50                   	push   eax
c001b597:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b59e:	e8 11 fc ff ff       	call   c001b1b4 <FAT::fixFilepath(char*)>
c001b5a3:	83 c4 10             	add    esp,0x10
c001b5a6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b5ae:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b5b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5bb:	83 e0 01             	and    eax,0x1
c001b5be:	74 08                	je     c001b5c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b5c0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b5c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5cd:	83 e0 02             	and    eax,0x2
c001b5d0:	74 0a                	je     c001b5dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b5d2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b5da:	66 90                	xchg   ax,ax
c001b5dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5e1:	83 e0 04             	and    eax,0x4
c001b5e4:	74 0a                	je     c001b5f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b5e6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b5ee:	66 90                	xchg   ax,ax
c001b5f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5f5:	83 e0 08             	and    eax,0x8
c001b5f8:	74 0a                	je     c001b604 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b5fa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b602:	66 90                	xchg   ax,ax
c001b604:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b609:	83 e0 01             	and    eax,0x1
c001b60c:	74 0a                	je     c001b618 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b60e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b616:	66 90                	xchg   ax,ax
c001b618:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b61d:	83 e0 02             	and    eax,0x2
c001b620:	74 0a                	je     c001b62c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b622:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b62a:	66 90                	xchg   ax,ax
c001b62c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b631:	83 e0 04             	and    eax,0x4
c001b634:	74 0a                	je     c001b640 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b636:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b63e:	66 90                	xchg   ax,ax
c001b640:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b645:	83 e0 08             	and    eax,0x8
c001b648:	74 0a                	je     c001b654 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b64a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b652:	66 90                	xchg   ax,ax
c001b654:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b65b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b662:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b66a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b672:	83 ec 04             	sub    esp,0x4
c001b675:	52                   	push   edx
c001b676:	50                   	push   eax
c001b677:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b67b:	50                   	push   eax
c001b67c:	e8 f5 b3 fe ff       	call   c0006a76 <f_chmod>
c001b681:	83 c4 10             	add    esp,0x10
c001b684:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b68b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b692:	85 c0                	test   eax,eax
c001b694:	75 0a                	jne    c001b6a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b696:	b8 00 00 00 00       	mov    eax,0x0
c001b69b:	eb 0b                	jmp    c001b6a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b69d:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a0:	b8 01 00 00 00       	mov    eax,0x1
c001b6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b6ae:	c3                   	ret    
c001b6af:	90                   	nop

c001b6b0 <FAT::rename(char const*, char const*)>:
c001b6b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b6b6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b6be:	74 0c                	je     c001b6cc <FAT::rename(char const*, char const*)+0x1c>
c001b6c0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b6c8:	75 0e                	jne    c001b6d8 <FAT::rename(char const*, char const*)+0x28>
c001b6ca:	66 90                	xchg   ax,ax
c001b6cc:	b8 04 00 00 00       	mov    eax,0x4
c001b6d1:	e9 9e 00 00 00       	jmp    c001b774 <FAT::rename(char const*, char const*)+0xc4>
c001b6d6:	66 90                	xchg   ax,ax
c001b6d8:	83 ec 08             	sub    esp,0x8
c001b6db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b6e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b6e9:	50                   	push   eax
c001b6ea:	e8 51 50 fe ff       	call   c0000740 <strcpy>
c001b6ef:	83 c4 10             	add    esp,0x10
c001b6f2:	83 ec 08             	sub    esp,0x8
c001b6f5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b6fc:	50                   	push   eax
c001b6fd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b704:	e8 ab fa ff ff       	call   c001b1b4 <FAT::fixFilepath(char*)>
c001b709:	83 c4 10             	add    esp,0x10
c001b70c:	83 ec 08             	sub    esp,0x8
c001b70f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b716:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b71a:	50                   	push   eax
c001b71b:	e8 20 50 fe ff       	call   c0000740 <strcpy>
c001b720:	83 c4 10             	add    esp,0x10
c001b723:	83 ec 08             	sub    esp,0x8
c001b726:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b72a:	50                   	push   eax
c001b72b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b732:	e8 7d fa ff ff       	call   c001b1b4 <FAT::fixFilepath(char*)>
c001b737:	83 c4 10             	add    esp,0x10
c001b73a:	83 ec 08             	sub    esp,0x8
c001b73d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b741:	50                   	push   eax
c001b742:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b749:	50                   	push   eax
c001b74a:	e8 34 b0 fe ff       	call   c0006783 <f_rename>
c001b74f:	83 c4 10             	add    esp,0x10
c001b752:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b759:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b760:	85 c0                	test   eax,eax
c001b762:	75 08                	jne    c001b76c <FAT::rename(char const*, char const*)+0xbc>
c001b764:	b8 00 00 00 00       	mov    eax,0x0
c001b769:	eb 09                	jmp    c001b774 <FAT::rename(char const*, char const*)+0xc4>
c001b76b:	90                   	nop
c001b76c:	b8 01 00 00 00       	mov    eax,0x1
c001b771:	8d 76 00             	lea    esi,[esi+0x0]
c001b774:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b77a:	c3                   	ret    
c001b77b:	90                   	nop

c001b77c <FAT::mkdir(char const*)>:
c001b77c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b782:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b78a:	75 08                	jne    c001b794 <FAT::mkdir(char const*)+0x18>
c001b78c:	b8 04 00 00 00       	mov    eax,0x4
c001b791:	eb 61                	jmp    c001b7f4 <FAT::mkdir(char const*)+0x78>
c001b793:	90                   	nop
c001b794:	83 ec 08             	sub    esp,0x8
c001b797:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b79e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7a2:	50                   	push   eax
c001b7a3:	e8 98 4f fe ff       	call   c0000740 <strcpy>
c001b7a8:	83 c4 10             	add    esp,0x10
c001b7ab:	83 ec 08             	sub    esp,0x8
c001b7ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7b2:	50                   	push   eax
c001b7b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7ba:	e8 f5 f9 ff ff       	call   c001b1b4 <FAT::fixFilepath(char*)>
c001b7bf:	83 c4 10             	add    esp,0x10
c001b7c2:	83 ec 0c             	sub    esp,0xc
c001b7c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7c9:	50                   	push   eax
c001b7ca:	e8 88 ad fe ff       	call   c0006557 <f_mkdir>
c001b7cf:	83 c4 10             	add    esp,0x10
c001b7d2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b7d9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b7e0:	85 c0                	test   eax,eax
c001b7e2:	75 08                	jne    c001b7ec <FAT::mkdir(char const*)+0x70>
c001b7e4:	b8 00 00 00 00       	mov    eax,0x0
c001b7e9:	eb 09                	jmp    c001b7f4 <FAT::mkdir(char const*)+0x78>
c001b7eb:	90                   	nop
c001b7ec:	b8 01 00 00 00       	mov    eax,0x1
c001b7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b7fa:	c3                   	ret    
c001b7fb:	90                   	nop

c001b7fc <FAT::exists(char const*)>:
c001b7fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b802:	83 ec 08             	sub    esp,0x8
c001b805:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b80c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b810:	50                   	push   eax
c001b811:	e8 2a 4f fe ff       	call   c0000740 <strcpy>
c001b816:	83 c4 10             	add    esp,0x10
c001b819:	83 ec 08             	sub    esp,0x8
c001b81c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b820:	50                   	push   eax
c001b821:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b828:	e8 87 f9 ff ff       	call   c001b1b4 <FAT::fixFilepath(char*)>
c001b82d:	83 c4 10             	add    esp,0x10
c001b830:	83 ec 08             	sub    esp,0x8
c001b833:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b83a:	50                   	push   eax
c001b83b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b83f:	50                   	push   eax
c001b840:	e8 3d a8 fe ff       	call   c0006082 <f_stat>
c001b845:	83 c4 10             	add    esp,0x10
c001b848:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b84f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b856:	85 c0                	test   eax,eax
c001b858:	75 06                	jne    c001b860 <FAT::exists(char const*)+0x64>
c001b85a:	b0 01                	mov    al,0x1
c001b85c:	eb 06                	jmp    c001b864 <FAT::exists(char const*)+0x68>
c001b85e:	66 90                	xchg   ax,ax
c001b860:	b0 00                	mov    al,0x0
c001b862:	66 90                	xchg   ax,ax
c001b864:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b86a:	c3                   	ret    
c001b86b:	90                   	nop

c001b86c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b86c:	b8 08 00 00 00       	mov    eax,0x8
c001b871:	c3                   	ret    

c001b872 <ISO9660::seek(void*, unsigned long long)>:
c001b872:	53                   	push   ebx
c001b873:	b8 04 00 00 00       	mov    eax,0x4
c001b878:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b87c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b880:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b884:	85 d2                	test   edx,edx
c001b886:	74 17                	je     c001b89f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b888:	89 c8                	mov    eax,ecx
c001b88a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b88d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b890:	b8 01 00 00 00       	mov    eax,0x1
c001b895:	73 08                	jae    c001b89f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b897:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b89a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b89d:	31 c0                	xor    eax,eax
c001b89f:	5b                   	pop    ebx
c001b8a0:	c3                   	ret    
c001b8a1:	90                   	nop

c001b8a2 <ISO9660::tell(void*, unsigned long long*)>:
c001b8a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8aa:	85 d2                	test   edx,edx
c001b8ac:	74 12                	je     c001b8c0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8ae:	85 c0                	test   eax,eax
c001b8b0:	74 0e                	je     c001b8c0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8b2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b8b5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b8b8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8bb:	89 10                	mov    DWORD PTR [eax],edx
c001b8bd:	31 c0                	xor    eax,eax
c001b8bf:	c3                   	ret    
c001b8c0:	b8 04 00 00 00       	mov    eax,0x4
c001b8c5:	c3                   	ret    

c001b8c6 <ISO9660::getName()>:
c001b8c6:	b8 ac 49 02 c0       	mov    eax,0xc00249ac
c001b8cb:	c3                   	ret    

c001b8cc <ISO9660::stat(void*, unsigned long long*)>:
c001b8cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8d4:	85 d2                	test   edx,edx
c001b8d6:	74 12                	je     c001b8ea <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8d8:	85 c0                	test   eax,eax
c001b8da:	74 0e                	je     c001b8ea <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b8df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b8e2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8e5:	89 10                	mov    DWORD PTR [eax],edx
c001b8e7:	31 c0                	xor    eax,eax
c001b8e9:	c3                   	ret    
c001b8ea:	b8 04 00 00 00       	mov    eax,0x4
c001b8ef:	c3                   	ret    

c001b8f0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b8f0:	b8 01 00 00 00       	mov    eax,0x1
c001b8f5:	c3                   	ret    

c001b8f6 <ISO9660::unlink(char const*)>:
c001b8f6:	b8 01 00 00 00       	mov    eax,0x1
c001b8fb:	c3                   	ret    

c001b8fc <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b8fc:	b8 01 00 00 00       	mov    eax,0x1
c001b901:	c3                   	ret    

c001b902 <ISO9660::rename(char const*, char const*)>:
c001b902:	b8 01 00 00 00       	mov    eax,0x1
c001b907:	c3                   	ret    

c001b908 <ISO9660::mkdir(char const*)>:
c001b908:	b8 01 00 00 00       	mov    eax,0x1
c001b90d:	c3                   	ret    

c001b90e <ISO9660::close(void*)>:
c001b90e:	83 ec 0c             	sub    esp,0xc
c001b911:	b8 04 00 00 00       	mov    eax,0x4
c001b916:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b91a:	85 d2                	test   edx,edx
c001b91c:	74 0e                	je     c001b92c <ISO9660::close(void*)+0x1e>
c001b91e:	83 ec 0c             	sub    esp,0xc
c001b921:	52                   	push   edx
c001b922:	e8 ac e0 fe ff       	call   c00099d3 <free>
c001b927:	83 c4 10             	add    esp,0x10
c001b92a:	31 c0                	xor    eax,eax
c001b92c:	83 c4 0c             	add    esp,0xc
c001b92f:	c3                   	ret    

c001b930 <ISO9660::closeDir(void*)>:
c001b930:	83 ec 0c             	sub    esp,0xc
c001b933:	b8 04 00 00 00       	mov    eax,0x4
c001b938:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b93c:	85 d2                	test   edx,edx
c001b93e:	74 0e                	je     c001b94e <ISO9660::closeDir(void*)+0x1e>
c001b940:	83 ec 0c             	sub    esp,0xc
c001b943:	52                   	push   edx
c001b944:	e8 8a e0 fe ff       	call   c00099d3 <free>
c001b949:	83 c4 10             	add    esp,0x10
c001b94c:	31 c0                	xor    eax,eax
c001b94e:	83 c4 0c             	add    esp,0xc
c001b951:	c3                   	ret    

c001b952 <ISO9660::~ISO9660()>:
c001b952:	83 ec 0c             	sub    esp,0xc
c001b955:	ba d0 49 02 c0       	mov    edx,0xc00249d0
c001b95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95e:	89 10                	mov    DWORD PTR [eax],edx
c001b960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	50                   	push   eax
c001b968:	e8 39 14 ff ff       	call   c000cda6 <Filesystem::~Filesystem()>
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	90                   	nop
c001b971:	83 c4 0c             	add    esp,0xc
c001b974:	c3                   	ret    
c001b975:	90                   	nop

c001b976 <ISO9660::~ISO9660()>:
c001b976:	83 ec 0c             	sub    esp,0xc
c001b979:	83 ec 0c             	sub    esp,0xc
c001b97c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b980:	e8 cd ff ff ff       	call   c001b952 <ISO9660::~ISO9660()>
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	83 ec 08             	sub    esp,0x8
c001b98b:	6a 08                	push   0x8
c001b98d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b991:	e8 f4 0f ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c001b996:	83 c4 10             	add    esp,0x10
c001b999:	83 c4 0c             	add    esp,0xc
c001b99c:	c3                   	ret    

c001b99d <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b99d:	55                   	push   ebp
c001b99e:	31 c9                	xor    ecx,ecx
c001b9a0:	57                   	push   edi
c001b9a1:	56                   	push   esi
c001b9a2:	53                   	push   ebx
c001b9a3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b9a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b9ab:	89 eb                	mov    ebx,ebp
c001b9ad:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b9b1:	39 ce                	cmp    esi,ecx
c001b9b3:	7e 17                	jle    c001b9cc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b9b5:	31 d2                	xor    edx,edx
c001b9b7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b9bb:	7d 13                	jge    c001b9d0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b9bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9c1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b9c4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b9c7:	75 0d                	jne    c001b9d6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b9c9:	42                   	inc    edx
c001b9ca:	eb eb                	jmp    c001b9b7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b9cc:	31 c0                	xor    eax,eax
c001b9ce:	eb 0a                	jmp    c001b9da <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9d0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b9d4:	eb 04                	jmp    c001b9da <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9d6:	41                   	inc    ecx
c001b9d7:	43                   	inc    ebx
c001b9d8:	eb d7                	jmp    c001b9b1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b9da:	5b                   	pop    ebx
c001b9db:	5e                   	pop    esi
c001b9dc:	5f                   	pop    edi
c001b9dd:	5d                   	pop    ebp
c001b9de:	c3                   	ret    

c001b9df <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b9df:	57                   	push   edi
c001b9e0:	56                   	push   esi
c001b9e1:	53                   	push   ebx
c001b9e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9ea:	39 0d 40 78 02 c0    	cmp    DWORD PTR ds:0xc0027840,ecx
c001b9f0:	75 08                	jne    c001b9fa <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001b9f2:	38 05 b4 5b 02 c0    	cmp    BYTE PTR ds:0xc0025bb4,al
c001b9f8:	74 2b                	je     c001ba25 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001b9fa:	83 ec 0c             	sub    esp,0xc
c001b9fd:	a2 b4 5b 02 c0       	mov    ds:0xc0025bb4,al
c001ba02:	68 60 78 02 c0       	push   0xc0027860
c001ba07:	0f be c0             	movsx  eax,al
c001ba0a:	6a 01                	push   0x1
c001ba0c:	89 0d 40 78 02 c0    	mov    DWORD PTR ds:0xc0027840,ecx
c001ba12:	31 db                	xor    ebx,ebx
c001ba14:	53                   	push   ebx
c001ba15:	51                   	push   ecx
c001ba16:	ff 34 85 3c 66 02 c0 	push   DWORD PTR [eax*4-0x3ffd99c4]
c001ba1d:	e8 66 47 ff ff       	call   c0010188 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba22:	83 c4 20             	add    esp,0x20
c001ba25:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba29:	be 60 78 02 c0       	mov    esi,0xc0027860
c001ba2e:	b9 00 08 00 00       	mov    ecx,0x800
c001ba33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba35:	5b                   	pop    ebx
c001ba36:	5e                   	pop    esi
c001ba37:	5f                   	pop    edi
c001ba38:	c3                   	ret    
c001ba39:	90                   	nop

c001ba3a <ISO9660::tryMount(LogicalDisk*, int)>:
c001ba3a:	81 ec 10 08 00 00    	sub    esp,0x810
c001ba40:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ba47:	83 c0 41             	add    eax,0x41
c001ba4a:	0f be c0             	movsx  eax,al
c001ba4d:	50                   	push   eax
c001ba4e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba52:	50                   	push   eax
c001ba53:	6a 10                	push   0x10
c001ba55:	e8 85 ff ff ff       	call   c001b9df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba5a:	83 c4 10             	add    esp,0x10
c001ba5d:	31 c0                	xor    eax,eax
c001ba5f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ba64:	75 1d                	jne    c001ba83 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba66:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ba6b:	75 16                	jne    c001ba83 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba6d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ba72:	75 0f                	jne    c001ba83 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba74:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ba79:	75 08                	jne    c001ba83 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba7b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ba80:	0f 94 c0             	sete   al
c001ba83:	81 c4 0c 08 00 00    	add    esp,0x80c
c001ba89:	c3                   	ret    

c001ba8a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ba8a:	55                   	push   ebp
c001ba8b:	57                   	push   edi
c001ba8c:	56                   	push   esi
c001ba8d:	53                   	push   ebx
c001ba8e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001ba94:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001ba9b:	85 ed                	test   ebp,ebp
c001ba9d:	0f 84 da 01 00 00    	je     c001bc7d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001baa3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001baab:	0f 84 cc 01 00 00    	je     c001bc7d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bab1:	b8 01 00 00 00       	mov    eax,0x1
c001bab6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001baba:	0f 85 c2 01 00 00    	jne    c001bc82 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bac0:	31 d2                	xor    edx,edx
c001bac2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bac9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bacc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bacf:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bad2:	89 04 24             	mov    DWORD PTR [esp],eax
c001bad5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bad9:	01 c8                	add    eax,ecx
c001badb:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bade:	11 da                	adc    edx,ebx
c001bae0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bae4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bae8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001baec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001baf0:	19 d7                	sbb    edi,edx
c001baf2:	72 11                	jb     c001bb05 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001baf4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001baf7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bafb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001baff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb03:	eb 0c                	jmp    c001bb11 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bb05:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bb09:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb0d:	29 ce                	sub    esi,ecx
c001bb0f:	19 df                	sbb    edi,ebx
c001bb11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb14:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bb17:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bb1b:	c1 e0 0b             	shl    eax,0xb
c001bb1e:	01 c8                	add    eax,ecx
c001bb20:	11 da                	adc    edx,ebx
c001bb22:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb29:	51                   	push   ecx
c001bb2a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb2e:	50                   	push   eax
c001bb2f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bb33:	53                   	push   ebx
c001bb34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb3c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bb40:	50                   	push   eax
c001bb41:	e8 99 fe ff ff       	call   c001b9df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb46:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bb49:	b8 00 08 00 00       	mov    eax,0x800
c001bb4e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bb54:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bb58:	29 d0                	sub    eax,edx
c001bb5a:	83 c4 10             	add    esp,0x10
c001bb5d:	89 f9                	mov    ecx,edi
c001bb5f:	39 c6                	cmp    esi,eax
c001bb61:	83 d9 00             	sbb    ecx,0x0
c001bb64:	7d 1b                	jge    c001bb81 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bb66:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bb6b:	75 12                	jne    c001bb7f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bb6d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bb74:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb7a:	e9 fa 00 00 00       	jmp    c001bc79 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bb7f:	89 f0                	mov    eax,esi
c001bb81:	01 d3                	add    ebx,edx
c001bb83:	31 d2                	xor    edx,edx
c001bb85:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bb89:	39 c2                	cmp    edx,eax
c001bb8b:	7d 14                	jge    c001bba1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bb8d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bb94:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bb98:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bb9b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bb9e:	42                   	inc    edx
c001bb9f:	eb e8                	jmp    c001bb89 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bba1:	89 c2                	mov    edx,eax
c001bba3:	85 c0                	test   eax,eax
c001bba5:	79 02                	jns    c001bba9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bba7:	31 d2                	xor    edx,edx
c001bba9:	01 c2                	add    edx,eax
c001bbab:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bbae:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bbb5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bbb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bbbd:	99                   	cdq    
c001bbbe:	01 c1                	add    ecx,eax
c001bbc0:	11 d3                	adc    ebx,edx
c001bbc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bbc6:	29 c6                	sub    esi,eax
c001bbc8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bbcc:	19 d7                	sbb    edi,edx
c001bbce:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbd1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bbd5:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bbda:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bbdd:	b8 00 00 00 00       	mov    eax,0x0
c001bbe2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bbe6:	7d 43                	jge    c001bc2b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bbe8:	52                   	push   edx
c001bbe9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbed:	50                   	push   eax
c001bbee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bbf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbf6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bbfa:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bbfe:	50                   	push   eax
c001bbff:	e8 db fd ff ff       	call   c001b9df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc04:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bc0c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bc11:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bc19:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc21:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bc26:	83 c4 10             	add    esp,0x10
c001bc29:	eb aa                	jmp    c001bbd5 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bc2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc2f:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bc32:	74 2a                	je     c001bc5e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bc34:	50                   	push   eax
c001bc35:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc39:	50                   	push   eax
c001bc3a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bc3e:	56                   	push   esi
c001bc3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bc43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc47:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bc4b:	51                   	push   ecx
c001bc4c:	e8 8e fd ff ff       	call   c001b9df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc51:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bc55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc5b:	83 c4 10             	add    esp,0x10
c001bc5e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc65:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc6d:	89 18                	mov    DWORD PTR [eax],ebx
c001bc6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc73:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bc76:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bc79:	31 c0                	xor    eax,eax
c001bc7b:	eb 05                	jmp    c001bc82 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bc7d:	b8 04 00 00 00       	mov    eax,0x4
c001bc82:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bc88:	5b                   	pop    ebx
c001bc89:	5e                   	pop    esi
c001bc8a:	5f                   	pop    edi
c001bc8b:	5d                   	pop    ebp
c001bc8c:	c3                   	ret    
c001bc8d:	90                   	nop

c001bc8e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bc8e:	55                   	push   ebp
c001bc8f:	57                   	push   edi
c001bc90:	56                   	push   esi
c001bc91:	53                   	push   ebx
c001bc92:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bc98:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bc9f:	85 ed                	test   ebp,ebp
c001bca1:	0f 84 51 02 00 00    	je     c001bef8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bca7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bcaf:	0f 84 43 02 00 00    	je     c001bef8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bcb5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcb8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bcbb:	75 0a                	jne    c001bcc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bcbd:	b8 07 00 00 00       	mov    eax,0x7
c001bcc2:	e9 36 02 00 00       	jmp    c001befd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bcc7:	50                   	push   eax
c001bcc8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bccc:	50                   	push   eax
c001bccd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bcd4:	53                   	push   ebx
c001bcd5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bcd8:	c1 e0 0b             	shl    eax,0xb
c001bcdb:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bcde:	c1 e8 0b             	shr    eax,0xb
c001bce1:	50                   	push   eax
c001bce2:	e8 f8 fc ff ff       	call   c001b9df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bce7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bcea:	83 c4 10             	add    esp,0x10
c001bced:	89 c1                	mov    ecx,eax
c001bcef:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bcf2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bcf8:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bcfb:	84 db                	test   bl,bl
c001bcfd:	0f 85 8b 00 00 00    	jne    c001bd8e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bd03:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bd09:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bd0c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bd12:	29 c6                	sub    esi,eax
c001bd14:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bd18:	89 f3                	mov    ebx,esi
c001bd1a:	89 f1                	mov    ecx,esi
c001bd1c:	c1 fb 1f             	sar    ebx,0x1f
c001bd1f:	01 f0                	add    eax,esi
c001bd21:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bd24:	11 da                	adc    edx,ebx
c001bd26:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd2d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd30:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd33:	89 d8                	mov    eax,ebx
c001bd35:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bd39:	ba 00 00 00 00       	mov    edx,0x0
c001bd3e:	19 f8                	sbb    eax,edi
c001bd40:	b8 00 00 00 00       	mov    eax,0x0
c001bd45:	73 08                	jae    c001bd4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bd47:	89 f0                	mov    eax,esi
c001bd49:	89 fa                	mov    edx,edi
c001bd4b:	29 c8                	sub    eax,ecx
c001bd4d:	19 da                	sbb    edx,ebx
c001bd4f:	89 d7                	mov    edi,edx
c001bd51:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd54:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd57:	09 c7                	or     edi,eax
c001bd59:	0f 84 5e ff ff ff    	je     c001bcbd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bd5f:	57                   	push   edi
c001bd60:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd64:	50                   	push   eax
c001bd65:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd6c:	53                   	push   ebx
c001bd6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd70:	c1 e0 0b             	shl    eax,0xb
c001bd73:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bd77:	c1 e8 0b             	shr    eax,0xb
c001bd7a:	50                   	push   eax
c001bd7b:	e8 5f fc ff ff       	call   c001b9df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd80:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd83:	83 c4 10             	add    esp,0x10
c001bd86:	25 ff 07 00 00       	and    eax,0x7ff
c001bd8b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bd8e:	31 ff                	xor    edi,edi
c001bd90:	56                   	push   esi
c001bd91:	6a 28                	push   0x28
c001bd93:	6a 00                	push   0x0
c001bd95:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bd99:	50                   	push   eax
c001bd9a:	e8 e5 48 fe ff       	call   c0000684 <memset>
c001bd9f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bda2:	25 ff 07 00 00       	and    eax,0x7ff
c001bda7:	89 c6                	mov    esi,eax
c001bda9:	83 c6 21             	add    esi,0x21
c001bdac:	83 d7 00             	adc    edi,0x0
c001bdaf:	83 c4 10             	add    esp,0x10
c001bdb2:	31 c9                	xor    ecx,ecx
c001bdb4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bdbb:	83 f9 28             	cmp    ecx,0x28
c001bdbe:	88 04 24             	mov    BYTE PTR [esp],al
c001bdc1:	0f 94 c2             	sete   dl
c001bdc4:	88 d0                	mov    al,dl
c001bdc6:	ba ff 07 00 00       	mov    edx,0x7ff
c001bdcb:	39 f2                	cmp    edx,esi
c001bdcd:	ba 00 00 00 00       	mov    edx,0x0
c001bdd2:	19 fa                	sbb    edx,edi
c001bdd4:	0f 92 c2             	setb   dl
c001bdd7:	09 c2                	or     edx,eax
c001bdd9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bddd:	0f 94 c0             	sete   al
c001bde0:	08 d0                	or     al,dl
c001bde2:	75 16                	jne    c001bdfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bde4:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001bde8:	74 10                	je     c001bdfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bdea:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bded:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bdf1:	41                   	inc    ecx
c001bdf2:	83 c6 01             	add    esi,0x1
c001bdf5:	83 d7 00             	adc    edi,0x0
c001bdf8:	eb ba                	jmp    c001bdb4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001bdfa:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001be01:	83 ec 0c             	sub    esp,0xc
c001be04:	8d 74 24 24          	lea    esi,[esp+0x24]
c001be08:	56                   	push   esi
c001be09:	e8 92 48 fe ff       	call   c00006a0 <strlen>
c001be0e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001be15:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be19:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be21:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be24:	5a                   	pop    edx
c001be25:	25 ff 07 00 00       	and    eax,0x7ff
c001be2a:	59                   	pop    ecx
c001be2b:	01 f8                	add    eax,edi
c001be2d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001be33:	83 e0 02             	and    eax,0x2
c001be36:	3c 01                	cmp    al,0x1
c001be38:	19 c0                	sbb    eax,eax
c001be3a:	83 c0 02             	add    eax,0x2
c001be3d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be41:	56                   	push   esi
c001be42:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001be46:	50                   	push   eax
c001be47:	e8 f4 48 fe ff       	call   c0000740 <strcpy>
c001be4c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001be50:	83 c4 10             	add    esp,0x10
c001be53:	84 c0                	test   al,al
c001be55:	75 21                	jne    c001be78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001be57:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001be5f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be67:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be6f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001be76:	eb 28                	jmp    c001bea0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be78:	fe c8                	dec    al
c001be7a:	75 24                	jne    c001bea0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be7c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001be84:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be8c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be94:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001be9b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bea0:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bea4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001beab:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001beb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001beb4:	0f b6 f3             	movzx  esi,bl
c001beb7:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bebe:	31 db                	xor    ebx,ebx
c001bec0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bec6:	89 df                	mov    edi,ebx
c001bec8:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001becb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bece:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bed1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bed4:	39 c6                	cmp    esi,eax
c001bed6:	19 d7                	sbb    edi,edx
c001bed8:	72 10                	jb     c001beea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001beda:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bee1:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bee8:	eb 0a                	jmp    c001bef4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001beea:	29 f0                	sub    eax,esi
c001beec:	19 da                	sbb    edx,ebx
c001beee:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bef1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bef4:	31 c0                	xor    eax,eax
c001bef6:	eb 05                	jmp    c001befd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bef8:	b8 04 00 00 00       	mov    eax,0x4
c001befd:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bf03:	5b                   	pop    ebx
c001bf04:	5e                   	pop    esi
c001bf05:	5f                   	pop    edi
c001bf06:	5d                   	pop    ebp
c001bf07:	c3                   	ret    

c001bf08 <readRoot(unsigned int*, unsigned int*, char)>:
c001bf08:	57                   	push   edi
c001bf09:	56                   	push   esi
c001bf0a:	81 ec 38 08 00 00    	sub    esp,0x838
c001bf10:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bf18:	50                   	push   eax
c001bf19:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bf1d:	50                   	push   eax
c001bf1e:	6a 10                	push   0x10
c001bf20:	e8 ba fa ff ff       	call   c001b9df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf25:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bf2c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bf30:	b9 22 00 00 00       	mov    ecx,0x22
c001bf35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf37:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bf3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf42:	89 10                	mov    DWORD PTR [eax],edx
c001bf44:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bf4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf4f:	89 10                	mov    DWORD PTR [eax],edx
c001bf51:	81 c4 44 08 00 00    	add    esp,0x844
c001bf57:	b0 01                	mov    al,0x1
c001bf59:	5e                   	pop    esi
c001bf5a:	5f                   	pop    edi
c001bf5b:	c3                   	ret    

c001bf5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bf5c:	55                   	push   ebp
c001bf5d:	57                   	push   edi
c001bf5e:	56                   	push   esi
c001bf5f:	53                   	push   ebx
c001bf60:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf66:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bf6d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bf74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf78:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bf7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf84:	75 03                	jne    c001bf89 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bf86:	83 c3 02             	add    ebx,0x2
c001bf89:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bf8c:	75 03                	jne    c001bf91 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bf8e:	43                   	inc    ebx
c001bf8f:	eb f8                	jmp    c001bf89 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bf91:	51                   	push   ecx
c001bf92:	68 00 01 00 00       	push   0x100
c001bf97:	6a 00                	push   0x0
c001bf99:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bf9d:	50                   	push   eax
c001bf9e:	e8 e1 46 fe ff       	call   c0000684 <memset>
c001bfa3:	83 c4 10             	add    esp,0x10
c001bfa6:	31 d2                	xor    edx,edx
c001bfa8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bfab:	84 c0                	test   al,al
c001bfad:	74 21                	je     c001bfd0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bfaf:	3c 2f                	cmp    al,0x2f
c001bfb1:	75 0b                	jne    c001bfbe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bfb3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bfb7:	bd 01 00 00 00       	mov    ebp,0x1
c001bfbc:	eb 14                	jmp    c001bfd2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bfbe:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bfc1:	80 f9 19             	cmp    cl,0x19
c001bfc4:	77 03                	ja     c001bfc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bfc6:	83 e8 20             	sub    eax,0x20
c001bfc9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bfcd:	42                   	inc    edx
c001bfce:	eb d8                	jmp    c001bfa8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bfd0:	31 ed                	xor    ebp,ebp
c001bfd2:	83 ec 0c             	sub    esp,0xc
c001bfd5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bfdc:	e8 e2 d9 fe ff       	call   c00099c3 <malloc>
c001bfe1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001bfe8:	89 c6                	mov    esi,eax
c001bfea:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001bff0:	c1 ef 0b             	shr    edi,0xb
c001bff3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001bffa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001bffe:	83 c4 10             	add    esp,0x10
c001c001:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c006:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c00a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c011:	74 28                	je     c001c03b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c013:	52                   	push   edx
c001c014:	57                   	push   edi
c001c015:	50                   	push   eax
c001c016:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c01a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c021:	e8 b9 f9 ff ff       	call   c001b9df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c02a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c031:	05 00 08 00 00       	add    eax,0x800
c001c036:	83 c4 10             	add    esp,0x10
c001c039:	eb cb                	jmp    c001c006 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c03b:	83 ec 0c             	sub    esp,0xc
c001c03e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c042:	57                   	push   edi
c001c043:	e8 58 46 fe ff       	call   c00006a0 <strlen>
c001c048:	50                   	push   eax
c001c049:	57                   	push   edi
c001c04a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c051:	56                   	push   esi
c001c052:	e8 46 f9 ff ff       	call   c001b99d <__memmem(unsigned char*, int, unsigned char*, int)>
c001c057:	83 c4 20             	add    esp,0x20
c001c05a:	85 c0                	test   eax,eax
c001c05c:	75 13                	jne    c001c071 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c05e:	83 ec 0c             	sub    esp,0xc
c001c061:	56                   	push   esi
c001c062:	e8 6c d9 fe ff       	call   c00099d3 <free>
c001c067:	83 c4 10             	add    esp,0x10
c001c06a:	31 c0                	xor    eax,eax
c001c06c:	e9 b3 00 00 00       	jmp    c001c124 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c071:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c075:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c079:	c1 e7 08             	shl    edi,0x8
c001c07c:	c1 e2 10             	shl    edx,0x10
c001c07f:	09 d7                	or     edi,edx
c001c081:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c085:	09 d7                	or     edi,edx
c001c087:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c08b:	c1 e2 18             	shl    edx,0x18
c001c08e:	09 d7                	or     edi,edx
c001c090:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c094:	89 d1                	mov    ecx,edx
c001c096:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c09a:	c1 e1 08             	shl    ecx,0x8
c001c09d:	c1 e2 10             	shl    edx,0x10
c001c0a0:	09 ca                	or     edx,ecx
c001c0a2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c0a6:	09 ca                	or     edx,ecx
c001c0a8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c0ac:	c1 e1 18             	shl    ecx,0x18
c001c0af:	09 ca                	or     edx,ecx
c001c0b1:	89 e9                	mov    ecx,ebp
c001c0b3:	84 c9                	test   cl,cl
c001c0b5:	74 3c                	je     c001c0f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c0b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0bb:	83 ec 0c             	sub    esp,0xc
c001c0be:	56                   	push   esi
c001c0bf:	e8 0f d9 fe ff       	call   c00099d3 <free>
c001c0c4:	83 c4 0c             	add    esp,0xc
c001c0c7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0ce:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c0d3:	50                   	push   eax
c001c0d4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0db:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c0e6:	52                   	push   edx
c001c0e7:	57                   	push   edi
c001c0e8:	53                   	push   ebx
c001c0e9:	e8 6e fe ff ff       	call   c001bf5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c0ee:	83 c4 20             	add    esp,0x20
c001c0f1:	eb 31                	jmp    c001c124 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c0f3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c0f6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c0fd:	d0 e8                	shr    al,1
c001c0ff:	89 3b                	mov    DWORD PTR [ebx],edi
c001c101:	83 e0 01             	and    eax,0x1
c001c104:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c10b:	83 ec 0c             	sub    esp,0xc
c001c10e:	89 13                	mov    DWORD PTR [ebx],edx
c001c110:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c117:	89 03                	mov    DWORD PTR [ebx],eax
c001c119:	56                   	push   esi
c001c11a:	e8 b4 d8 fe ff       	call   c00099d3 <free>
c001c11f:	83 c4 10             	add    esp,0x10
c001c122:	b0 01                	mov    al,0x1
c001c124:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c12a:	5b                   	pop    ebx
c001c12b:	5e                   	pop    esi
c001c12c:	5f                   	pop    edi
c001c12d:	5d                   	pop    ebp
c001c12e:	c3                   	ret    

c001c12f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c12f:	55                   	push   ebp
c001c130:	57                   	push   edi
c001c131:	56                   	push   esi
c001c132:	53                   	push   ebx
c001c133:	83 ec 20             	sub    esp,0x20
c001c136:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c13a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c13e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c142:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c14a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c152:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c157:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c15d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c163:	57                   	push   edi
c001c164:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c168:	50                   	push   eax
c001c169:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c16d:	50                   	push   eax
c001c16e:	e8 95 fd ff ff       	call   c001bf08 <readRoot(unsigned int*, unsigned int*, char)>
c001c173:	5a                   	pop    edx
c001c174:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c178:	e8 23 45 fe ff       	call   c00006a0 <strlen>
c001c17d:	83 c4 10             	add    esp,0x10
c001c180:	83 f8 03             	cmp    eax,0x3
c001c183:	77 17                	ja     c001c19c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c185:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c189:	89 03                	mov    DWORD PTR [ebx],eax
c001c18b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c18f:	89 06                	mov    DWORD PTR [esi],eax
c001c191:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c198:	b0 01                	mov    al,0x1
c001c19a:	eb 19                	jmp    c001c1b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c19c:	50                   	push   eax
c001c19d:	55                   	push   ebp
c001c19e:	57                   	push   edi
c001c19f:	56                   	push   esi
c001c1a0:	53                   	push   ebx
c001c1a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c1ad:	e8 aa fd ff ff       	call   c001bf5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c1b2:	83 c4 20             	add    esp,0x20
c001c1b5:	83 c4 1c             	add    esp,0x1c
c001c1b8:	5b                   	pop    ebx
c001c1b9:	5e                   	pop    esi
c001c1ba:	5f                   	pop    edi
c001c1bb:	5d                   	pop    ebp
c001c1bc:	c3                   	ret    
c001c1bd:	90                   	nop

c001c1be <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c1be:	57                   	push   edi
c001c1bf:	56                   	push   esi
c001c1c0:	53                   	push   ebx
c001c1c1:	83 ec 10             	sub    esp,0x10
c001c1c4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1c8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c1cc:	85 ff                	test   edi,edi
c001c1ce:	0f 84 8b 00 00 00    	je     c001c25f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1d4:	85 f6                	test   esi,esi
c001c1d6:	0f 84 83 00 00 00    	je     c001c25f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1dc:	b8 03 00 00 00       	mov    eax,0x3
c001c1e1:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c1e6:	75 7c                	jne    c001c264 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c1e8:	83 ec 0c             	sub    esp,0xc
c001c1eb:	6a 1c                	push   0x1c
c001c1ed:	e8 d1 d7 fe ff       	call   c00099c3 <malloc>
c001c1f2:	89 07                	mov    DWORD PTR [edi],eax
c001c1f4:	89 c3                	mov    ebx,eax
c001c1f6:	58                   	pop    eax
c001c1f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1fb:	50                   	push   eax
c001c1fc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c1ff:	50                   	push   eax
c001c200:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c204:	50                   	push   eax
c001c205:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c209:	50                   	push   eax
c001c20a:	56                   	push   esi
c001c20b:	e8 1f ff ff ff       	call   c001c12f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c210:	83 c4 20             	add    esp,0x20
c001c213:	84 c0                	test   al,al
c001c215:	74 07                	je     c001c21e <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c217:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c21c:	74 0b                	je     c001c229 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c21e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c222:	b8 01 00 00 00       	mov    eax,0x1
c001c227:	eb 3b                	jmp    c001c264 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c229:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c22d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c231:	89 03                	mov    DWORD PTR [ebx],eax
c001c233:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c23a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c23e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c245:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c24c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c24f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c256:	8a 06                	mov    al,BYTE PTR [esi]
c001c258:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c25b:	31 c0                	xor    eax,eax
c001c25d:	eb 05                	jmp    c001c264 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c25f:	b8 04 00 00 00       	mov    eax,0x4
c001c264:	83 c4 10             	add    esp,0x10
c001c267:	5b                   	pop    ebx
c001c268:	5e                   	pop    esi
c001c269:	5f                   	pop    edi
c001c26a:	c3                   	ret    
c001c26b:	90                   	nop

c001c26c <ISO9660::exists(char const*)>:
c001c26c:	83 ec 28             	sub    esp,0x28
c001c26f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c273:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c277:	52                   	push   edx
c001c278:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c27b:	52                   	push   edx
c001c27c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c280:	52                   	push   edx
c001c281:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c285:	52                   	push   edx
c001c286:	50                   	push   eax
c001c287:	e8 a3 fe ff ff       	call   c001c12f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c28c:	83 c4 3c             	add    esp,0x3c
c001c28f:	c3                   	ret    

c001c290 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c290:	56                   	push   esi
c001c291:	53                   	push   ebx
c001c292:	83 ec 14             	sub    esp,0x14
c001c295:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c299:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c29d:	85 db                	test   ebx,ebx
c001c29f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c2a3:	0f 94 c2             	sete   dl
c001c2a6:	85 f6                	test   esi,esi
c001c2a8:	0f 94 c0             	sete   al
c001c2ab:	08 c2                	or     dl,al
c001c2ad:	75 68                	jne    c001c317 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2af:	85 c9                	test   ecx,ecx
c001c2b1:	74 64                	je     c001c317 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2b3:	83 ec 0c             	sub    esp,0xc
c001c2b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c2b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c2c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2ca:	50                   	push   eax
c001c2cb:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c2ce:	50                   	push   eax
c001c2cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2d3:	50                   	push   eax
c001c2d4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2d8:	50                   	push   eax
c001c2d9:	51                   	push   ecx
c001c2da:	e8 50 fe ff ff       	call   c001c12f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2df:	83 c4 20             	add    esp,0x20
c001c2e2:	ba 01 00 00 00       	mov    edx,0x1
c001c2e7:	84 c0                	test   al,al
c001c2e9:	74 31                	je     c001c31c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c2eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2ef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2f6:	89 03                	mov    DWORD PTR [ebx],eax
c001c2f8:	ba 00 00 00 00       	mov    edx,0x0
c001c2fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c301:	85 c0                	test   eax,eax
c001c303:	0f 95 06             	setne  BYTE PTR [esi]
c001c306:	74 14                	je     c001c31c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c308:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c30e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c315:	eb 05                	jmp    c001c31c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c317:	ba 04 00 00 00       	mov    edx,0x4
c001c31c:	83 c4 14             	add    esp,0x14
c001c31f:	89 d0                	mov    eax,edx
c001c321:	5b                   	pop    ebx
c001c322:	5e                   	pop    esi
c001c323:	c3                   	ret    

c001c324 <ISO9660::openDir(char const*, void**)>:
c001c324:	57                   	push   edi
c001c325:	56                   	push   esi
c001c326:	53                   	push   ebx
c001c327:	83 ec 10             	sub    esp,0x10
c001c32a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c32e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c332:	85 ff                	test   edi,edi
c001c334:	74 7b                	je     c001c3b1 <ISO9660::openDir(char const*, void**)+0x8d>
c001c336:	85 f6                	test   esi,esi
c001c338:	74 77                	je     c001c3b1 <ISO9660::openDir(char const*, void**)+0x8d>
c001c33a:	83 ec 0c             	sub    esp,0xc
c001c33d:	6a 1c                	push   0x1c
c001c33f:	e8 7f d6 fe ff       	call   c00099c3 <malloc>
c001c344:	89 07                	mov    DWORD PTR [edi],eax
c001c346:	89 c3                	mov    ebx,eax
c001c348:	58                   	pop    eax
c001c349:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c34d:	50                   	push   eax
c001c34e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c351:	50                   	push   eax
c001c352:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c356:	50                   	push   eax
c001c357:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c35b:	50                   	push   eax
c001c35c:	56                   	push   esi
c001c35d:	e8 cd fd ff ff       	call   c001c12f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c362:	83 c4 20             	add    esp,0x20
c001c365:	84 c0                	test   al,al
c001c367:	74 07                	je     c001c370 <ISO9660::openDir(char const*, void**)+0x4c>
c001c369:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c36e:	75 0b                	jne    c001c37b <ISO9660::openDir(char const*, void**)+0x57>
c001c370:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c374:	b8 01 00 00 00       	mov    eax,0x1
c001c379:	eb 3b                	jmp    c001c3b6 <ISO9660::openDir(char const*, void**)+0x92>
c001c37b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c37f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c383:	89 03                	mov    DWORD PTR [ebx],eax
c001c385:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c38c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c390:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c397:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c39e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c3a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c3a8:	8a 06                	mov    al,BYTE PTR [esi]
c001c3aa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c3ad:	31 c0                	xor    eax,eax
c001c3af:	eb 05                	jmp    c001c3b6 <ISO9660::openDir(char const*, void**)+0x92>
c001c3b1:	b8 04 00 00 00       	mov    eax,0x4
c001c3b6:	83 c4 10             	add    esp,0x10
c001c3b9:	5b                   	pop    ebx
c001c3ba:	5e                   	pop    esi
c001c3bb:	5f                   	pop    edi
c001c3bc:	c3                   	ret    
c001c3bd:	90                   	nop

c001c3be <ISO9660::ISO9660()>:
c001c3be:	83 ec 0c             	sub    esp,0xc
c001c3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c5:	83 ec 0c             	sub    esp,0xc
c001c3c8:	50                   	push   eax
c001c3c9:	e8 b4 09 ff ff       	call   c000cd82 <Filesystem::Filesystem()>
c001c3ce:	83 c4 10             	add    esp,0x10
c001c3d1:	ba d0 49 02 c0       	mov    edx,0xc00249d0
c001c3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3da:	89 10                	mov    DWORD PTR [eax],edx
c001c3dc:	90                   	nop
c001c3dd:	83 c4 0c             	add    esp,0xc
c001c3e0:	c3                   	ret    
c001c3e1:	90                   	nop

c001c3e2 <SoundCard::beginPlayback()>:
c001c3e2:	c7 44 24 04 30 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a30
c001c3ea:	e9 1c 7f ff ff       	jmp    c001430b <Krnl::panic(char const*)>
c001c3ef:	90                   	nop

c001c3f0 <SoundCard::stopPlayback()>:
c001c3f0:	c7 44 24 04 64 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a64
c001c3f8:	e9 0e 7f ff ff       	jmp    c001430b <Krnl::panic(char const*)>
c001c3fd:	90                   	nop

c001c3fe <SoundCard::SoundCard(char const*)>:
c001c3fe:	83 ec 1c             	sub    esp,0x1c
c001c401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c405:	83 ec 08             	sub    esp,0x8
c001c408:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c40c:	50                   	push   eax
c001c40d:	e8 a4 1c ff ff       	call   c000e0b6 <Device::Device(char const*)>
c001c412:	83 c4 10             	add    esp,0x10
c001c415:	ba fc 4a 02 c0       	mov    edx,0xc0024afc
c001c41a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c41e:	89 10                	mov    DWORD PTR [eax],edx
c001c420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c424:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c42b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c42f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c43d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c44b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c459:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c463:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c46b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c470:	7f 19                	jg     c001c48b <SoundCard::SoundCard(char const*)+0x8d>
c001c472:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c476:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c47a:	83 c2 54             	add    edx,0x54
c001c47d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c485:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c489:	eb e0                	jmp    c001c46b <SoundCard::SoundCard(char const*)+0x6d>
c001c48b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c48f:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c496:	90                   	nop
c001c497:	83 c4 1c             	add    esp,0x1c
c001c49a:	c3                   	ret    
c001c49b:	90                   	nop

c001c49c <SoundCard::~SoundCard()>:
c001c49c:	83 ec 0c             	sub    esp,0xc
c001c49f:	ba fc 4a 02 c0       	mov    edx,0xc0024afc
c001c4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a8:	89 10                	mov    DWORD PTR [eax],edx
c001c4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ae:	83 ec 0c             	sub    esp,0xc
c001c4b1:	50                   	push   eax
c001c4b2:	e8 c9 18 ff ff       	call   c000dd80 <Device::~Device()>
c001c4b7:	83 c4 10             	add    esp,0x10
c001c4ba:	90                   	nop
c001c4bb:	83 c4 0c             	add    esp,0xc
c001c4be:	c3                   	ret    
c001c4bf:	90                   	nop

c001c4c0 <SoundCard::~SoundCard()>:
c001c4c0:	83 ec 0c             	sub    esp,0xc
c001c4c3:	83 ec 0c             	sub    esp,0xc
c001c4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4ca:	e8 cd ff ff ff       	call   c001c49c <SoundCard::~SoundCard()>
c001c4cf:	83 c4 10             	add    esp,0x10
c001c4d2:	83 ec 08             	sub    esp,0x8
c001c4d5:	68 e8 01 00 00       	push   0x1e8
c001c4da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4de:	e8 a7 04 ff ff       	call   c000c98a <operator delete(void*, unsigned long)>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	83 c4 0c             	add    esp,0xc
c001c4e9:	c3                   	ret    

c001c4ea <SoundCard::configureRates(int, int, int)>:
c001c4ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c4ee:	31 c0                	xor    eax,eax
c001c4f0:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c4f7:	75 20                	jne    c001c519 <SoundCard::configureRates(int, int, int)+0x2f>
c001c4f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4fd:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c503:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c507:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c511:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c517:	b0 01                	mov    al,0x1
c001c519:	c3                   	ret    

c001c51a <SoundCard::getSamples16(int, short*)>:
c001c51a:	55                   	push   ebp
c001c51b:	57                   	push   edi
c001c51c:	31 ff                	xor    edi,edi
c001c51e:	56                   	push   esi
c001c51f:	53                   	push   ebx
c001c520:	31 db                	xor    ebx,ebx
c001c522:	83 ec 18             	sub    esp,0x18
c001c525:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c529:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c52d:	68 97 4a 02 c0       	push   0xc0024a97
c001c532:	e8 34 05 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c537:	83 c4 0c             	add    esp,0xc
c001c53a:	8d 04 36             	lea    eax,[esi+esi*1]
c001c53d:	50                   	push   eax
c001c53e:	6a 00                	push   0x0
c001c540:	55                   	push   ebp
c001c541:	e8 3e 41 fe ff       	call   c0000684 <memset>
c001c546:	83 c4 10             	add    esp,0x10
c001c549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c54d:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c554:	85 c0                	test   eax,eax
c001c556:	74 1b                	je     c001c573 <SoundCard::getSamples16(int, short*)+0x59>
c001c558:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c55c:	75 15                	jne    c001c573 <SoundCard::getSamples16(int, short*)+0x59>
c001c55e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c562:	55                   	push   ebp
c001c563:	56                   	push   esi
c001c564:	50                   	push   eax
c001c565:	e8 5a 03 00 00       	call   c001c8c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c56a:	83 c4 10             	add    esp,0x10
c001c56d:	39 c7                	cmp    edi,eax
c001c56f:	7d 02                	jge    c001c573 <SoundCard::getSamples16(int, short*)+0x59>
c001c571:	89 c7                	mov    edi,eax
c001c573:	43                   	inc    ebx
c001c574:	83 fb 20             	cmp    ebx,0x20
c001c577:	75 d0                	jne    c001c549 <SoundCard::getSamples16(int, short*)+0x2f>
c001c579:	83 c4 0c             	add    esp,0xc
c001c57c:	89 f8                	mov    eax,edi
c001c57e:	5b                   	pop    ebx
c001c57f:	5e                   	pop    esi
c001c580:	5f                   	pop    edi
c001c581:	5d                   	pop    ebp
c001c582:	c3                   	ret    
c001c583:	90                   	nop

c001c584 <SoundCard::getSamples32(int, int*)>:
c001c584:	55                   	push   ebp
c001c585:	57                   	push   edi
c001c586:	31 ff                	xor    edi,edi
c001c588:	56                   	push   esi
c001c589:	31 f6                	xor    esi,esi
c001c58b:	53                   	push   ebx
c001c58c:	83 ec 10             	sub    esp,0x10
c001c58f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c593:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c597:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c59b:	c1 e0 02             	shl    eax,0x2
c001c59e:	50                   	push   eax
c001c59f:	6a 00                	push   0x0
c001c5a1:	55                   	push   ebp
c001c5a2:	e8 dd 40 fe ff       	call   c0000684 <memset>
c001c5a7:	83 c4 10             	add    esp,0x10
c001c5aa:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c5b1:	85 c0                	test   eax,eax
c001c5b3:	74 1b                	je     c001c5d0 <SoundCard::getSamples32(int, int*)+0x4c>
c001c5b5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c5b9:	75 15                	jne    c001c5d0 <SoundCard::getSamples32(int, int*)+0x4c>
c001c5bb:	53                   	push   ebx
c001c5bc:	55                   	push   ebp
c001c5bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c5c1:	50                   	push   eax
c001c5c2:	e8 f9 03 00 00       	call   c001c9c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	39 c6                	cmp    esi,eax
c001c5cc:	7d 02                	jge    c001c5d0 <SoundCard::getSamples32(int, int*)+0x4c>
c001c5ce:	89 c6                	mov    esi,eax
c001c5d0:	47                   	inc    edi
c001c5d1:	83 ff 20             	cmp    edi,0x20
c001c5d4:	75 d4                	jne    c001c5aa <SoundCard::getSamples32(int, int*)+0x26>
c001c5d6:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c5dc:	85 f6                	test   esi,esi
c001c5de:	75 0f                	jne    c001c5ef <SoundCard::getSamples32(int, int*)+0x6b>
c001c5e0:	84 c0                	test   al,al
c001c5e2:	74 1b                	je     c001c5ff <SoundCard::getSamples32(int, int*)+0x7b>
c001c5e4:	83 ec 0c             	sub    esp,0xc
c001c5e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5e9:	53                   	push   ebx
c001c5ea:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c5ed:	eb 0d                	jmp    c001c5fc <SoundCard::getSamples32(int, int*)+0x78>
c001c5ef:	84 c0                	test   al,al
c001c5f1:	75 0c                	jne    c001c5ff <SoundCard::getSamples32(int, int*)+0x7b>
c001c5f3:	83 ec 0c             	sub    esp,0xc
c001c5f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5f8:	53                   	push   ebx
c001c5f9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c5fc:	83 c4 10             	add    esp,0x10
c001c5ff:	83 c4 0c             	add    esp,0xc
c001c602:	89 f0                	mov    eax,esi
c001c604:	5b                   	pop    ebx
c001c605:	5e                   	pop    esi
c001c606:	5f                   	pop    edi
c001c607:	5d                   	pop    ebp
c001c608:	c3                   	ret    
c001c609:	90                   	nop

c001c60a <SoundCard::addChannel(SoundPort*)>:
c001c60a:	56                   	push   esi
c001c60b:	53                   	push   ebx
c001c60c:	53                   	push   ebx
c001c60d:	31 db                	xor    ebx,ebx
c001c60f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c613:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c61b:	74 27                	je     c001c644 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c61d:	43                   	inc    ebx
c001c61e:	83 fb 20             	cmp    ebx,0x20
c001c621:	75 f0                	jne    c001c613 <SoundCard::addChannel(SoundPort*)+0x9>
c001c623:	83 ec 0c             	sub    esp,0xc
c001c626:	83 cb ff             	or     ebx,0xffffffff
c001c629:	68 bd 4a 02 c0       	push   0xc0024abd
c001c62e:	e8 38 04 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c633:	c7 04 24 b6 4a 02 c0 	mov    DWORD PTR [esp],0xc0024ab6
c001c63a:	e8 cc 7c ff ff       	call   c001430b <Krnl::panic(char const*)>
c001c63f:	83 c4 10             	add    esp,0x10
c001c642:	eb 1b                	jmp    c001c65f <SoundCard::addChannel(SoundPort*)+0x55>
c001c644:	51                   	push   ecx
c001c645:	51                   	push   ecx
c001c646:	53                   	push   ebx
c001c647:	68 d5 4a 02 c0       	push   0xc0024ad5
c001c64c:	e8 1a 04 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c651:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c655:	83 c4 10             	add    esp,0x10
c001c658:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c65f:	89 d8                	mov    eax,ebx
c001c661:	5a                   	pop    edx
c001c662:	5b                   	pop    ebx
c001c663:	5e                   	pop    esi
c001c664:	c3                   	ret    
c001c665:	90                   	nop

c001c666 <SoundCard::removeChannel(int)>:
c001c666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c66a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c66e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c679:	c3                   	ret    
c001c67a:	66 90                	xchg   ax,ax

c001c67c <SoundPort::SoundPort(int, int, int, int)>:
c001c67c:	83 ec 0c             	sub    esp,0xc
c001c67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c683:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c69a:	89 10                	mov    DWORD PTR [eax],edx
c001c69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c6a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6af:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6b2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c6b7:	75 13                	jne    c001c6cc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6bf:	05 a0 0f 00 00       	add    eax,0xfa0
c001c6c4:	01 c0                	add    eax,eax
c001c6c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c6ca:	66 90                	xchg   ax,ax
c001c6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c6d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6db:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c6e9:	c1 e0 02             	shl    eax,0x2
c001c6ec:	83 ec 0c             	sub    esp,0xc
c001c6ef:	50                   	push   eax
c001c6f0:	e8 ce d2 fe ff       	call   c00099c3 <malloc>
c001c6f5:	83 c4 10             	add    esp,0x10
c001c6f8:	89 c2                	mov    edx,eax
c001c6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c701:	90                   	nop
c001c702:	83 c4 0c             	add    esp,0xc
c001c705:	c3                   	ret    
c001c706:	66 90                	xchg   ax,ax

c001c708 <SoundPort::~SoundPort()>:
c001c708:	83 ec 0c             	sub    esp,0xc
c001c70b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c712:	85 c0                	test   eax,eax
c001c714:	74 1e                	je     c001c734 <SoundPort::~SoundPort()+0x2c>
c001c716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c71d:	83 ec 0c             	sub    esp,0xc
c001c720:	50                   	push   eax
c001c721:	e8 ad d2 fe ff       	call   c00099d3 <free>
c001c726:	83 c4 10             	add    esp,0x10
c001c729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c734:	90                   	nop
c001c735:	83 c4 0c             	add    esp,0xc
c001c738:	c3                   	ret    
c001c739:	90                   	nop
c001c73a:	66 90                	xchg   ax,ax

c001c73c <SoundPort::unpause()>:
c001c73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c740:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c744:	c3                   	ret    
c001c745:	90                   	nop
c001c746:	66 90                	xchg   ax,ax

c001c748 <SoundPort::pause()>:
c001c748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c74c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c750:	c3                   	ret    
c001c751:	90                   	nop
c001c752:	66 90                	xchg   ax,ax

c001c754 <SoundPort::getBufferUsed()>:
c001c754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c758:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c75b:	c3                   	ret    

c001c75c <SoundPort::getBufferSize()>:
c001c75c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c760:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c763:	c3                   	ret    

c001c764 <SoundPort::buffer16(short*, int)>:
c001c764:	55                   	push   ebp
c001c765:	57                   	push   edi
c001c766:	56                   	push   esi
c001c767:	53                   	push   ebx
c001c768:	83 ec 1c             	sub    esp,0x1c
c001c76b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c76f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c773:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c776:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c779:	0f 84 85 00 00 00    	je     c001c804 <SoundPort::buffer16(short*, int)+0xa0>
c001c77f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c783:	85 c9                	test   ecx,ecx
c001c785:	7e 7d                	jle    c001c804 <SoundPort::buffer16(short*, int)+0xa0>
c001c787:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c78b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c78e:	c1 e1 0f             	shl    ecx,0xf
c001c791:	8d 70 01             	lea    esi,[eax+0x1]
c001c794:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c797:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c79a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c79d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7a0:	74 6e                	je     c001c810 <SoundPort::buffer16(short*, int)+0xac>
c001c7a2:	31 f6                	xor    esi,esi
c001c7a4:	eb 22                	jmp    c001c7c8 <SoundPort::buffer16(short*, int)+0x64>
c001c7a6:	66 90                	xchg   ax,ax
c001c7a8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c7ad:	8d 79 01             	lea    edi,[ecx+0x1]
c001c7b0:	c1 e3 0f             	shl    ebx,0xf
c001c7b3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c7b6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c7b9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c7bc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7bf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7c2:	74 1c                	je     c001c7e0 <SoundPort::buffer16(short*, int)+0x7c>
c001c7c4:	89 c6                	mov    esi,eax
c001c7c6:	66 90                	xchg   ax,ax
c001c7c8:	8d 46 01             	lea    eax,[esi+0x1]
c001c7cb:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c7cf:	75 d7                	jne    c001c7a8 <SoundPort::buffer16(short*, int)+0x44>
c001c7d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7d5:	83 c4 1c             	add    esp,0x1c
c001c7d8:	5b                   	pop    ebx
c001c7d9:	5e                   	pop    esi
c001c7da:	5f                   	pop    edi
c001c7db:	5d                   	pop    ebp
c001c7dc:	c3                   	ret    
c001c7dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c7e0:	8d 46 02             	lea    eax,[esi+0x2]
c001c7e3:	90                   	nop
c001c7e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7e8:	83 ec 0c             	sub    esp,0xc
c001c7eb:	68 28 4b 02 c0       	push   0xc0024b28
c001c7f0:	e8 76 02 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7fc:	83 c4 1c             	add    esp,0x1c
c001c7ff:	5b                   	pop    ebx
c001c800:	5e                   	pop    esi
c001c801:	5f                   	pop    edi
c001c802:	5d                   	pop    ebp
c001c803:	c3                   	ret    
c001c804:	83 c4 1c             	add    esp,0x1c
c001c807:	31 c0                	xor    eax,eax
c001c809:	5b                   	pop    ebx
c001c80a:	5e                   	pop    esi
c001c80b:	5f                   	pop    edi
c001c80c:	5d                   	pop    ebp
c001c80d:	c3                   	ret    
c001c80e:	66 90                	xchg   ax,ax
c001c810:	b8 01 00 00 00       	mov    eax,0x1
c001c815:	eb cd                	jmp    c001c7e4 <SoundPort::buffer16(short*, int)+0x80>
c001c817:	90                   	nop

c001c818 <SoundPort::buffer32(int*, int)>:
c001c818:	55                   	push   ebp
c001c819:	57                   	push   edi
c001c81a:	56                   	push   esi
c001c81b:	53                   	push   ebx
c001c81c:	83 ec 1c             	sub    esp,0x1c
c001c81f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c823:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c827:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c82a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c82e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c832:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c835:	74 79                	je     c001c8b0 <SoundPort::buffer32(int*, int)+0x98>
c001c837:	85 c0                	test   eax,eax
c001c839:	7e 75                	jle    c001c8b0 <SoundPort::buffer32(int*, int)+0x98>
c001c83b:	8d 71 01             	lea    esi,[ecx+0x1]
c001c83e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c841:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c844:	8b 37                	mov    esi,DWORD PTR [edi]
c001c846:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c849:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c84c:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c84f:	74 6b                	je     c001c8bc <SoundPort::buffer32(int*, int)+0xa4>
c001c851:	31 f6                	xor    esi,esi
c001c853:	eb 1f                	jmp    c001c874 <SoundPort::buffer32(int*, int)+0x5c>
c001c855:	8d 76 00             	lea    esi,[esi+0x0]
c001c858:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c85b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c85e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c861:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c864:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c868:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c86b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c86e:	74 1c                	je     c001c88c <SoundPort::buffer32(int*, int)+0x74>
c001c870:	89 de                	mov    esi,ebx
c001c872:	66 90                	xchg   ax,ax
c001c874:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c877:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c87b:	75 db                	jne    c001c858 <SoundPort::buffer32(int*, int)+0x40>
c001c87d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c881:	83 c4 1c             	add    esp,0x1c
c001c884:	5b                   	pop    ebx
c001c885:	5e                   	pop    esi
c001c886:	5f                   	pop    edi
c001c887:	5d                   	pop    ebp
c001c888:	c3                   	ret    
c001c889:	8d 76 00             	lea    esi,[esi+0x0]
c001c88c:	8d 46 02             	lea    eax,[esi+0x2]
c001c88f:	90                   	nop
c001c890:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c894:	83 ec 0c             	sub    esp,0xc
c001c897:	68 43 4b 02 c0       	push   0xc0024b43
c001c89c:	e8 ca 01 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c8a1:	83 c4 10             	add    esp,0x10
c001c8a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8a8:	83 c4 1c             	add    esp,0x1c
c001c8ab:	5b                   	pop    ebx
c001c8ac:	5e                   	pop    esi
c001c8ad:	5f                   	pop    edi
c001c8ae:	5d                   	pop    ebp
c001c8af:	c3                   	ret    
c001c8b0:	83 c4 1c             	add    esp,0x1c
c001c8b3:	31 c0                	xor    eax,eax
c001c8b5:	5b                   	pop    ebx
c001c8b6:	5e                   	pop    esi
c001c8b7:	5f                   	pop    edi
c001c8b8:	5d                   	pop    ebp
c001c8b9:	c3                   	ret    
c001c8ba:	66 90                	xchg   ax,ax
c001c8bc:	b8 01 00 00 00       	mov    eax,0x1
c001c8c1:	eb cd                	jmp    c001c890 <SoundPort::buffer32(int*, int)+0x78>
c001c8c3:	90                   	nop

c001c8c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c8c4:	57                   	push   edi
c001c8c5:	56                   	push   esi
c001c8c6:	53                   	push   ebx
c001c8c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c8cf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c8d5:	39 03                	cmp    DWORD PTR [ebx],eax
c001c8d7:	74 13                	je     c001c8ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c8d9:	83 ec 0c             	sub    esp,0xc
c001c8dc:	68 98 4b 02 c0       	push   0xc0024b98
c001c8e1:	e8 25 7a ff ff       	call   c001430b <Krnl::panic(char const*)>
c001c8e6:	83 c4 10             	add    esp,0x10
c001c8e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8ec:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c8f2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c8f5:	74 11                	je     c001c908 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c8f7:	83 ec 0c             	sub    esp,0xc
c001c8fa:	68 5e 4b 02 c0       	push   0xc0024b5e
c001c8ff:	e8 07 7a ff ff       	call   c001430b <Krnl::panic(char const*)>
c001c904:	83 c4 10             	add    esp,0x10
c001c907:	90                   	nop
c001c908:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c90e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c911:	74 11                	je     c001c924 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c913:	83 ec 0c             	sub    esp,0xc
c001c916:	68 5e 4b 02 c0       	push   0xc0024b5e
c001c91b:	e8 eb 79 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001c920:	83 c4 10             	add    esp,0x10
c001c923:	90                   	nop
c001c924:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c927:	89 c6                	mov    esi,eax
c001c929:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c92d:	7e 05                	jle    c001c934 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c92f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c933:	90                   	nop
c001c934:	85 f6                	test   esi,esi
c001c936:	7e 30                	jle    c001c968 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c93c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c93f:	31 c9                	xor    ecx,ecx
c001c941:	01 d7                	add    edi,edx
c001c943:	90                   	nop
c001c944:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c947:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c94a:	85 c0                	test   eax,eax
c001c94c:	79 06                	jns    c001c954 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c94e:	05 ff 7f 00 00       	add    eax,0x7fff
c001c953:	90                   	nop
c001c954:	c1 f8 0f             	sar    eax,0xf
c001c957:	83 c1 04             	add    ecx,0x4
c001c95a:	66 01 02             	add    WORD PTR [edx],ax
c001c95d:	83 c2 02             	add    edx,0x2
c001c960:	39 d7                	cmp    edi,edx
c001c962:	75 e0                	jne    c001c944 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c964:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c967:	90                   	nop
c001c968:	56                   	push   esi
c001c969:	89 c2                	mov    edx,eax
c001c96b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c972:	29 f2                	sub    edx,esi
c001c974:	52                   	push   edx
c001c975:	50                   	push   eax
c001c976:	68 b8 4b 02 c0       	push   0xc0024bb8
c001c97b:	e8 eb 00 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c980:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c983:	50                   	push   eax
c001c984:	01 f8                	add    eax,edi
c001c986:	50                   	push   eax
c001c987:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c98a:	29 f0                	sub    eax,esi
c001c98c:	c1 e0 02             	shl    eax,0x2
c001c98f:	50                   	push   eax
c001c990:	68 e8 4b 02 c0       	push   0xc0024be8
c001c995:	e8 d1 00 ff ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001c99a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c99d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9a0:	83 c4 1c             	add    esp,0x1c
c001c9a3:	01 d7                	add    edi,edx
c001c9a5:	29 f0                	sub    eax,esi
c001c9a7:	c1 e0 02             	shl    eax,0x2
c001c9aa:	50                   	push   eax
c001c9ab:	57                   	push   edi
c001c9ac:	52                   	push   edx
c001c9ad:	e8 0a 3c fe ff       	call   c00005bc <memmove>
c001c9b2:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001c9b5:	83 c4 10             	add    esp,0x10
c001c9b8:	89 f0                	mov    eax,esi
c001c9ba:	5b                   	pop    ebx
c001c9bb:	5e                   	pop    esi
c001c9bc:	5f                   	pop    edi
c001c9bd:	c3                   	ret    
c001c9be:	66 90                	xchg   ax,ax

c001c9c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c9c0:	57                   	push   edi
c001c9c1:	56                   	push   esi
c001c9c2:	53                   	push   ebx
c001c9c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c9cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c9cf:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c9d5:	39 06                	cmp    DWORD PTR [esi],eax
c001c9d7:	74 13                	je     c001c9ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001c9d9:	83 ec 0c             	sub    esp,0xc
c001c9dc:	68 0c 4c 02 c0       	push   0xc0024c0c
c001c9e1:	e8 25 79 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001c9e6:	83 c4 10             	add    esp,0x10
c001c9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c9ec:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c9f2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c9f5:	74 11                	je     c001ca08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001c9f7:	83 ec 0c             	sub    esp,0xc
c001c9fa:	68 7a 4b 02 c0       	push   0xc0024b7a
c001c9ff:	e8 07 79 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	90                   	nop
c001ca08:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ca0e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ca11:	74 11                	je     c001ca24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ca13:	83 ec 0c             	sub    esp,0xc
c001ca16:	68 7a 4b 02 c0       	push   0xc0024b7a
c001ca1b:	e8 eb 78 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001ca20:	83 c4 10             	add    esp,0x10
c001ca23:	90                   	nop
c001ca24:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ca27:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ca2b:	7e 07                	jle    c001ca34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ca2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ca31:	8d 76 00             	lea    esi,[esi+0x0]
c001ca34:	85 ff                	test   edi,edi
c001ca36:	7e 1c                	jle    c001ca54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ca38:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ca3f:	31 c0                	xor    eax,eax
c001ca41:	8d 76 00             	lea    esi,[esi+0x0]
c001ca44:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ca47:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ca4a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ca4d:	83 c0 04             	add    eax,0x4
c001ca50:	39 c1                	cmp    ecx,eax
c001ca52:	75 f0                	jne    c001ca44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ca54:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ca57:	50                   	push   eax
c001ca58:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca5b:	29 f8                	sub    eax,edi
c001ca5d:	c1 e0 02             	shl    eax,0x2
c001ca60:	50                   	push   eax
c001ca61:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ca64:	50                   	push   eax
c001ca65:	52                   	push   edx
c001ca66:	e8 51 3b fe ff       	call   c00005bc <memmove>
c001ca6b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001ca6e:	83 c4 10             	add    esp,0x10
c001ca71:	89 f8                	mov    eax,edi
c001ca73:	5b                   	pop    ebx
c001ca74:	5e                   	pop    esi
c001ca75:	5f                   	pop    edi
c001ca76:	c3                   	ret    
c001ca77:	90                   	nop

c001ca78 <PCI::open(int, int, void*)>:
c001ca78:	83 ec 18             	sub    esp,0x18
c001ca7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca83:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ca89:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca8b:	50                   	push   eax
c001ca8c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ca8f:	31 c0                	xor    eax,eax
c001ca91:	83 c4 1c             	add    esp,0x1c
c001ca94:	c3                   	ret    
c001ca95:	90                   	nop

c001ca96 <PCI::close(int, int, void*)>:
c001ca96:	31 c0                	xor    eax,eax
c001ca98:	c3                   	ret    
c001ca99:	90                   	nop

c001ca9a <PCI::PCI()>:
c001ca9a:	83 ec 0c             	sub    esp,0xc
c001ca9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa1:	83 ec 08             	sub    esp,0x8
c001caa4:	68 2b 4c 02 c0       	push   0xc0024c2b
c001caa9:	50                   	push   eax
c001caaa:	e8 69 0c ff ff       	call   c000d718 <Bus::Bus(char const*)>
c001caaf:	83 c4 10             	add    esp,0x10
c001cab2:	ba 14 4d 02 c0       	mov    edx,0xc0024d14
c001cab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cabb:	89 10                	mov    DWORD PTR [eax],edx
c001cabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cacf:	a3 60 80 02 c0       	mov    ds:0xc0028060,eax
c001cad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cade:	0f b6 d0             	movzx  edx,al
c001cae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001caec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001caf6:	0f b6 d0             	movzx  edx,al
c001caf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb0c:	8d 50 01             	lea    edx,[eax+0x1]
c001cb0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb13:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cb19:	0f b6 d0             	movzx  edx,al
c001cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb20:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cb24:	83 c9 c0             	or     ecx,0xffffffc0
c001cb27:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cb2b:	90                   	nop
c001cb2c:	83 c4 0c             	add    esp,0xc
c001cb2f:	c3                   	ret    

c001cb30 <PCI::readBAR8(unsigned int, int)>:
c001cb30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb38:	f6 c2 01             	test   dl,0x1
c001cb3b:	74 07                	je     c001cb44 <PCI::readBAR8(unsigned int, int)+0x14>
c001cb3d:	83 e2 fc             	and    edx,0xfffffffc
c001cb40:	01 c2                	add    edx,eax
c001cb42:	ec                   	in     al,dx
c001cb43:	c3                   	ret    
c001cb44:	83 e2 f0             	and    edx,0xfffffff0
c001cb47:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cb4a:	c3                   	ret    
c001cb4b:	90                   	nop

c001cb4c <PCI::readBAR16(unsigned int, int)>:
c001cb4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb54:	f6 c2 01             	test   dl,0x1
c001cb57:	74 08                	je     c001cb61 <PCI::readBAR16(unsigned int, int)+0x15>
c001cb59:	83 e2 fc             	and    edx,0xfffffffc
c001cb5c:	01 c2                	add    edx,eax
c001cb5e:	66 ed                	in     ax,dx
c001cb60:	c3                   	ret    
c001cb61:	83 e2 f0             	and    edx,0xfffffff0
c001cb64:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cb68:	c3                   	ret    
c001cb69:	90                   	nop

c001cb6a <PCI::readBAR32(unsigned int, int)>:
c001cb6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb72:	f6 c2 01             	test   dl,0x1
c001cb75:	74 07                	je     c001cb7e <PCI::readBAR32(unsigned int, int)+0x14>
c001cb77:	83 e2 fc             	and    edx,0xfffffffc
c001cb7a:	01 c2                	add    edx,eax
c001cb7c:	ed                   	in     eax,dx
c001cb7d:	c3                   	ret    
c001cb7e:	83 e2 f0             	and    edx,0xfffffff0
c001cb81:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cb84:	c3                   	ret    
c001cb85:	90                   	nop

c001cb86 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cb86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb92:	f6 c2 01             	test   dl,0x1
c001cb95:	74 07                	je     c001cb9e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cb97:	83 e2 fc             	and    edx,0xfffffffc
c001cb9a:	01 ca                	add    edx,ecx
c001cb9c:	ee                   	out    dx,al
c001cb9d:	c3                   	ret    
c001cb9e:	83 e2 f0             	and    edx,0xfffffff0
c001cba1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cba4:	c3                   	ret    
c001cba5:	90                   	nop

c001cba6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cba6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbb2:	f6 c2 01             	test   dl,0x1
c001cbb5:	74 08                	je     c001cbbf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cbb7:	83 e2 fc             	and    edx,0xfffffffc
c001cbba:	01 ca                	add    edx,ecx
c001cbbc:	66 ef                	out    dx,ax
c001cbbe:	c3                   	ret    
c001cbbf:	83 e2 f0             	and    edx,0xfffffff0
c001cbc2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cbc6:	c3                   	ret    
c001cbc7:	90                   	nop

c001cbc8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cbc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbd4:	f6 c2 01             	test   dl,0x1
c001cbd7:	74 07                	je     c001cbe0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cbd9:	83 e2 fc             	and    edx,0xfffffffc
c001cbdc:	01 ca                	add    edx,ecx
c001cbde:	ef                   	out    dx,eax
c001cbdf:	c3                   	ret    
c001cbe0:	83 e2 f0             	and    edx,0xfffffff0
c001cbe3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cbe6:	c3                   	ret    
c001cbe7:	90                   	nop

c001cbe8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cbe8:	55                   	push   ebp
c001cbe9:	57                   	push   edi
c001cbea:	56                   	push   esi
c001cbeb:	53                   	push   ebx
c001cbec:	83 ec 0c             	sub    esp,0xc
c001cbef:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cbf3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cbf7:	89 f0                	mov    eax,esi
c001cbf9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cbfd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cc01:	3c 07                	cmp    al,0x7
c001cc03:	76 10                	jbe    c001cc15 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cc05:	83 ec 0c             	sub    esp,0xc
c001cc08:	68 33 4c 02 c0       	push   0xc0024c33
c001cc0d:	e8 f9 76 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001cc12:	83 c4 10             	add    esp,0x10
c001cc15:	80 fb 0f             	cmp    bl,0xf
c001cc18:	76 10                	jbe    c001cc2a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cc1a:	83 ec 0c             	sub    esp,0xc
c001cc1d:	68 63 4c 02 c0       	push   0xc0024c63
c001cc22:	e8 e4 76 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001cc27:	83 c4 10             	add    esp,0x10
c001cc2a:	8d 04 36             	lea    eax,[esi+esi*1]
c001cc2d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc32:	83 c8 f0             	or     eax,0xfffffff0
c001cc35:	ee                   	out    dx,al
c001cc36:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cc3b:	89 e8                	mov    eax,ebp
c001cc3d:	ee                   	out    dx,al
c001cc3e:	83 c4 0c             	add    esp,0xc
c001cc41:	89 d8                	mov    eax,ebx
c001cc43:	66 81 e7 fc 00       	and    di,0xfc
c001cc48:	5b                   	pop    ebx
c001cc49:	c1 e0 08             	shl    eax,0x8
c001cc4c:	5e                   	pop    esi
c001cc4d:	09 f8                	or     eax,edi
c001cc4f:	5f                   	pop    edi
c001cc50:	66 0d 00 c0          	or     ax,0xc000
c001cc54:	5d                   	pop    ebp
c001cc55:	c3                   	ret    

c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc56:	57                   	push   edi
c001cc57:	56                   	push   esi
c001cc58:	53                   	push   ebx
c001cc59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc61:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cc67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cc6b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc73:	83 ff 01             	cmp    edi,0x1
c001cc76:	75 3e                	jne    c001ccb6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cc78:	89 de                	mov    esi,ebx
c001cc7a:	0f b6 c0             	movzx  eax,al
c001cc7d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cc83:	c1 e0 10             	shl    eax,0x10
c001cc86:	0f b6 c9             	movzx  ecx,cl
c001cc89:	09 f0                	or     eax,esi
c001cc8b:	c1 e1 08             	shl    ecx,0x8
c001cc8e:	0f b6 d2             	movzx  edx,dl
c001cc91:	09 c8                	or     eax,ecx
c001cc93:	c1 e2 0b             	shl    edx,0xb
c001cc96:	09 d0                	or     eax,edx
c001cc98:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc9d:	0d 00 00 00 80       	or     eax,0x80000000
c001cca2:	ef                   	out    dx,eax
c001cca3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cca8:	ed                   	in     eax,dx
c001cca9:	83 e3 02             	and    ebx,0x2
c001ccac:	0f b6 cb             	movzx  ecx,bl
c001ccaf:	c1 e1 03             	shl    ecx,0x3
c001ccb2:	d3 e8                	shr    eax,cl
c001ccb4:	eb 43                	jmp    c001ccf9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ccb6:	83 ff 02             	cmp    edi,0x2
c001ccb9:	75 2c                	jne    c001cce7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001ccbb:	83 ec 0c             	sub    esp,0xc
c001ccbe:	0f b6 c9             	movzx  ecx,cl
c001ccc1:	0f b6 d2             	movzx  edx,dl
c001ccc4:	0f b6 fb             	movzx  edi,bl
c001ccc7:	0f b6 c0             	movzx  eax,al
c001ccca:	57                   	push   edi
c001cccb:	51                   	push   ecx
c001cccc:	52                   	push   edx
c001cccd:	50                   	push   eax
c001ccce:	56                   	push   esi
c001cccf:	e8 14 ff ff ff       	call   c001cbe8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccd4:	89 c2                	mov    edx,eax
c001ccd6:	ed                   	in     eax,dx
c001ccd7:	83 e3 02             	and    ebx,0x2
c001ccda:	83 c4 20             	add    esp,0x20
c001ccdd:	0f b6 cb             	movzx  ecx,bl
c001cce0:	c1 e1 03             	shl    ecx,0x3
c001cce3:	d3 e8                	shr    eax,cl
c001cce5:	eb 12                	jmp    c001ccf9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cce7:	83 ec 0c             	sub    esp,0xc
c001ccea:	68 93 4c 02 c0       	push   0xc0024c93
c001ccef:	e8 17 76 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001ccf4:	83 c4 10             	add    esp,0x10
c001ccf7:	31 c0                	xor    eax,eax
c001ccf9:	5b                   	pop    ebx
c001ccfa:	5e                   	pop    esi
c001ccfb:	5f                   	pop    edi
c001ccfc:	c3                   	ret    
c001ccfd:	90                   	nop

c001ccfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ccfe:	83 ec 18             	sub    esp,0x18
c001cd01:	6a 00                	push   0x0
c001cd03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd08:	50                   	push   eax
c001cd09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd0e:	50                   	push   eax
c001cd0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd14:	50                   	push   eax
c001cd15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd19:	e8 38 ff ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd1e:	83 c4 2c             	add    esp,0x2c
c001cd21:	c3                   	ret    

c001cd22 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cd22:	83 ec 18             	sub    esp,0x18
c001cd25:	6a 0e                	push   0xe
c001cd27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd2c:	50                   	push   eax
c001cd2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd32:	50                   	push   eax
c001cd33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd38:	50                   	push   eax
c001cd39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd3d:	e8 14 ff ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd42:	83 c4 2c             	add    esp,0x2c
c001cd45:	0f b6 c0             	movzx  eax,al
c001cd48:	c3                   	ret    
c001cd49:	90                   	nop

c001cd4a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cd4a:	55                   	push   ebp
c001cd4b:	57                   	push   edi
c001cd4c:	56                   	push   esi
c001cd4d:	53                   	push   ebx
c001cd4e:	83 ec 18             	sub    esp,0x18
c001cd51:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cd56:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cd5b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cd60:	6a 0a                	push   0xa
c001cd62:	56                   	push   esi
c001cd63:	55                   	push   ebp
c001cd64:	57                   	push   edi
c001cd65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd69:	e8 e8 fe ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd6e:	83 c4 14             	add    esp,0x14
c001cd71:	89 c3                	mov    ebx,eax
c001cd73:	6a 0a                	push   0xa
c001cd75:	0f b6 db             	movzx  ebx,bl
c001cd78:	56                   	push   esi
c001cd79:	55                   	push   ebp
c001cd7a:	57                   	push   edi
c001cd7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd7f:	e8 d2 fe ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd84:	83 c4 2c             	add    esp,0x2c
c001cd87:	25 00 ff 00 00       	and    eax,0xff00
c001cd8c:	09 d8                	or     eax,ebx
c001cd8e:	5b                   	pop    ebx
c001cd8f:	5e                   	pop    esi
c001cd90:	5f                   	pop    edi
c001cd91:	5d                   	pop    ebp
c001cd92:	c3                   	ret    
c001cd93:	90                   	nop

c001cd94 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cd94:	83 ec 18             	sub    esp,0x18
c001cd97:	6a 08                	push   0x8
c001cd99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd9e:	50                   	push   eax
c001cd9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda4:	50                   	push   eax
c001cda5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdaa:	50                   	push   eax
c001cdab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdaf:	e8 a2 fe ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdb4:	83 c4 2c             	add    esp,0x2c
c001cdb7:	0f b6 c4             	movzx  eax,ah
c001cdba:	c3                   	ret    
c001cdbb:	90                   	nop

c001cdbc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cdbc:	83 ec 18             	sub    esp,0x18
c001cdbf:	6a 08                	push   0x8
c001cdc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdc6:	50                   	push   eax
c001cdc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdcc:	50                   	push   eax
c001cdcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdd2:	50                   	push   eax
c001cdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdd7:	e8 7a fe ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cddc:	83 c4 2c             	add    esp,0x2c
c001cddf:	c3                   	ret    

c001cde0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cde0:	83 ec 18             	sub    esp,0x18
c001cde3:	6a 3c                	push   0x3c
c001cde5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdea:	50                   	push   eax
c001cdeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdf0:	50                   	push   eax
c001cdf1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdf6:	50                   	push   eax
c001cdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdfb:	e8 56 fe ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce00:	83 c4 2c             	add    esp,0x2c
c001ce03:	c3                   	ret    

c001ce04 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ce04:	83 ec 18             	sub    esp,0x18
c001ce07:	6a 18                	push   0x18
c001ce09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce0e:	50                   	push   eax
c001ce0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce14:	50                   	push   eax
c001ce15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce1a:	50                   	push   eax
c001ce1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce1f:	e8 32 fe ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce24:	83 c4 2c             	add    esp,0x2c
c001ce27:	0f b6 c4             	movzx  eax,ah
c001ce2a:	c3                   	ret    
c001ce2b:	90                   	nop

c001ce2c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ce2c:	55                   	push   ebp
c001ce2d:	57                   	push   edi
c001ce2e:	56                   	push   esi
c001ce2f:	53                   	push   ebx
c001ce30:	83 ec 28             	sub    esp,0x28
c001ce33:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ce37:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ce3c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ce41:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001ce46:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ce4d:	8d 43 12             	lea    eax,[ebx+0x12]
c001ce50:	83 c3 10             	add    ebx,0x10
c001ce53:	0f b6 c0             	movzx  eax,al
c001ce56:	0f b6 db             	movzx  ebx,bl
c001ce59:	50                   	push   eax
c001ce5a:	51                   	push   ecx
c001ce5b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ce5f:	57                   	push   edi
c001ce60:	55                   	push   ebp
c001ce61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce65:	e8 ec fd ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce6a:	83 c4 14             	add    esp,0x14
c001ce6d:	89 c6                	mov    esi,eax
c001ce6f:	53                   	push   ebx
c001ce70:	c1 e6 10             	shl    esi,0x10
c001ce73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce77:	51                   	push   ecx
c001ce78:	57                   	push   edi
c001ce79:	55                   	push   ebp
c001ce7a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce7e:	e8 d3 fd ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce83:	83 c4 3c             	add    esp,0x3c
c001ce86:	0f b7 c0             	movzx  eax,ax
c001ce89:	5b                   	pop    ebx
c001ce8a:	09 f0                	or     eax,esi
c001ce8c:	5e                   	pop    esi
c001ce8d:	5f                   	pop    edi
c001ce8e:	5d                   	pop    ebp
c001ce8f:	c3                   	ret    

c001ce90 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ce90:	55                   	push   ebp
c001ce91:	57                   	push   edi
c001ce92:	56                   	push   esi
c001ce93:	53                   	push   ebx
c001ce94:	83 ec 0c             	sub    esp,0xc
c001ce97:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce9b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ce9f:	89 f5                	mov    ebp,esi
c001cea1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cea7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ceab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ceaf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ceb3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ceb7:	83 f9 01             	cmp    ecx,0x1
c001ceba:	75 5d                	jne    c001cf19 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cebc:	0f b6 c8             	movzx  ecx,al
c001cebf:	0f b6 d2             	movzx  edx,dl
c001cec2:	c1 e1 10             	shl    ecx,0x10
c001cec5:	c1 e2 0b             	shl    edx,0xb
c001cec8:	89 f0                	mov    eax,esi
c001ceca:	25 fc 00 00 00       	and    eax,0xfc
c001cecf:	09 c1                	or     ecx,eax
c001ced1:	89 e8                	mov    eax,ebp
c001ced3:	0f b6 c0             	movzx  eax,al
c001ced6:	c1 e0 08             	shl    eax,0x8
c001ced9:	09 c1                	or     ecx,eax
c001cedb:	09 d1                	or     ecx,edx
c001cedd:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cee2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cee8:	89 c8                	mov    eax,ecx
c001ceea:	ef                   	out    dx,eax
c001ceeb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cef0:	ed                   	in     eax,dx
c001cef1:	0f b7 db             	movzx  ebx,bx
c001cef4:	83 e6 02             	and    esi,0x2
c001cef7:	74 0a                	je     c001cf03 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cef9:	0f b7 d0             	movzx  edx,ax
c001cefc:	c1 e3 10             	shl    ebx,0x10
c001ceff:	09 d3                	or     ebx,edx
c001cf01:	eb 05                	jmp    c001cf08 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cf03:	66 31 c0             	xor    ax,ax
c001cf06:	09 c3                	or     ebx,eax
c001cf08:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf0d:	89 c8                	mov    eax,ecx
c001cf0f:	ef                   	out    dx,eax
c001cf10:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf15:	89 d8                	mov    eax,ebx
c001cf17:	eb 41                	jmp    c001cf5a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf19:	83 f9 02             	cmp    ecx,0x2
c001cf1c:	75 45                	jne    c001cf63 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cf1e:	83 ec 0c             	sub    esp,0xc
c001cf21:	0f b6 d2             	movzx  edx,dl
c001cf24:	89 f1                	mov    ecx,esi
c001cf26:	0f b6 c0             	movzx  eax,al
c001cf29:	0f b6 f1             	movzx  esi,cl
c001cf2c:	89 e9                	mov    ecx,ebp
c001cf2e:	56                   	push   esi
c001cf2f:	0f b6 c9             	movzx  ecx,cl
c001cf32:	51                   	push   ecx
c001cf33:	52                   	push   edx
c001cf34:	50                   	push   eax
c001cf35:	57                   	push   edi
c001cf36:	e8 ad fc ff ff       	call   c001cbe8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf3b:	89 c2                	mov    edx,eax
c001cf3d:	ed                   	in     eax,dx
c001cf3e:	83 c4 20             	add    esp,0x20
c001cf41:	0f b7 db             	movzx  ebx,bx
c001cf44:	f6 c2 02             	test   dl,0x2
c001cf47:	74 0c                	je     c001cf55 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cf49:	0f b7 c8             	movzx  ecx,ax
c001cf4c:	89 d8                	mov    eax,ebx
c001cf4e:	c1 e0 10             	shl    eax,0x10
c001cf51:	09 c8                	or     eax,ecx
c001cf53:	eb 05                	jmp    c001cf5a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf55:	66 31 c0             	xor    ax,ax
c001cf58:	09 d8                	or     eax,ebx
c001cf5a:	ef                   	out    dx,eax
c001cf5b:	83 c4 0c             	add    esp,0xc
c001cf5e:	5b                   	pop    ebx
c001cf5f:	5e                   	pop    esi
c001cf60:	5f                   	pop    edi
c001cf61:	5d                   	pop    ebp
c001cf62:	c3                   	ret    
c001cf63:	c7 44 24 20 93 4c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024c93
c001cf6b:	83 c4 0c             	add    esp,0xc
c001cf6e:	5b                   	pop    ebx
c001cf6f:	5e                   	pop    esi
c001cf70:	5f                   	pop    edi
c001cf71:	5d                   	pop    ebp
c001cf72:	e9 94 73 ff ff       	jmp    c001430b <Krnl::panic(char const*)>
c001cf77:	90                   	nop

c001cf78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cf78:	55                   	push   ebp
c001cf79:	57                   	push   edi
c001cf7a:	56                   	push   esi
c001cf7b:	53                   	push   ebx
c001cf7c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cf82:	80 3d 6c 80 02 c0 00 	cmp    BYTE PTR ds:0xc002806c,0x0
c001cf89:	0f 85 84 00 00 00    	jne    c001d013 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001cf8f:	83 ec 0c             	sub    esp,0xc
c001cf92:	68 14 01 00 00       	push   0x114
c001cf97:	e8 27 ca fe ff       	call   c00099c3 <malloc>
c001cf9c:	83 c4 0c             	add    esp,0xc
c001cf9f:	89 c3                	mov    ebx,eax
c001cfa1:	ff 35 70 76 02 c0    	push   DWORD PTR ds:0xc0027670
c001cfa7:	68 99 4c 02 c0       	push   0xc0024c99
c001cfac:	50                   	push   eax
c001cfad:	e8 24 00 ff ff       	call   c000cfd6 <File::File(char const*, Process*)>
c001cfb2:	5a                   	pop    edx
c001cfb3:	59                   	pop    ecx
c001cfb4:	6a 01                	push   0x1
c001cfb6:	53                   	push   ebx
c001cfb7:	e8 7e 00 ff ff       	call   c000d03a <File::open(FileOpenMode)>
c001cfbc:	83 c4 0c             	add    esp,0xc
c001cfbf:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001cfc3:	50                   	push   eax
c001cfc4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cfc8:	50                   	push   eax
c001cfc9:	53                   	push   ebx
c001cfca:	e8 17 03 ff ff       	call   c000d2e6 <File::stat(unsigned long long*, bool*)>
c001cfcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfd3:	40                   	inc    eax
c001cfd4:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfd7:	e8 e7 c9 fe ff       	call   c00099c3 <malloc>
c001cfdc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfe0:	a3 68 80 02 c0       	mov    ds:0xc0028068,eax
c001cfe5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cfe9:	5e                   	pop    esi
c001cfea:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cfec:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001cff0:	51                   	push   ecx
c001cff1:	50                   	push   eax
c001cff2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cff6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cffa:	53                   	push   ebx
c001cffb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cffe:	83 c4 14             	add    esp,0x14
c001d001:	53                   	push   ebx
c001d002:	e8 91 00 ff ff       	call   c000d098 <File::close()>
c001d007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d00b:	83 c4 10             	add    esp,0x10
c001d00e:	a3 64 80 02 c0       	mov    ds:0xc0028064,eax
c001d013:	a1 64 80 02 c0       	mov    eax,ds:0xc0028064
c001d018:	8b 15 68 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028068
c001d01e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d021:	31 ff                	xor    edi,edi
c001d023:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d02b:	31 f6                	xor    esi,esi
c001d02d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d032:	31 db                	xor    ebx,ebx
c001d034:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d03c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d041:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d048:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d04c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d053:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d057:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d05a:	0f 8e 6b 01 00 00    	jle    c001d1cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d060:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d063:	d4 40                	aam    0x40
c001d065:	d5 39                	aad    0x39
c001d067:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d06b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d06f:	d4 40                	aam    0x40
c001d071:	d5 39                	aad    0x39
c001d073:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d077:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d07b:	d4 40                	aam    0x40
c001d07d:	d5 39                	aad    0x39
c001d07f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d083:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d087:	d4 40                	aam    0x40
c001d089:	d5 39                	aad    0x39
c001d08b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d08f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d093:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d097:	3c 56                	cmp    al,0x56
c001d099:	74 45                	je     c001d0e0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d09b:	d4 40                	aam    0x40
c001d09d:	d5 39                	aad    0x39
c001d09f:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d0a2:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d0a6:	0f b6 c9             	movzx  ecx,cl
c001d0a9:	c1 e1 04             	shl    ecx,0x4
c001d0ac:	d4 40                	aam    0x40
c001d0ae:	d5 39                	aad    0x39
c001d0b0:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d0b3:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d0b7:	0f b6 db             	movzx  ebx,bl
c001d0ba:	09 cb                	or     ebx,ecx
c001d0bc:	c1 e3 04             	shl    ebx,0x4
c001d0bf:	d4 40                	aam    0x40
c001d0c1:	d5 39                	aad    0x39
c001d0c3:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d0c6:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d0ca:	0f b6 c9             	movzx  ecx,cl
c001d0cd:	09 cb                	or     ebx,ecx
c001d0cf:	c1 e3 04             	shl    ebx,0x4
c001d0d2:	89 d9                	mov    ecx,ebx
c001d0d4:	d4 40                	aam    0x40
c001d0d6:	d5 39                	aad    0x39
c001d0d8:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d0db:	0f b6 db             	movzx  ebx,bl
c001d0de:	09 cb                	or     ebx,ecx
c001d0e0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d0e4:	80 f9 44             	cmp    cl,0x44
c001d0e7:	74 47                	je     c001d130 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d0e9:	88 c8                	mov    al,cl
c001d0eb:	d4 40                	aam    0x40
c001d0ed:	d5 39                	aad    0x39
c001d0ef:	83 e8 30             	sub    eax,0x30
c001d0f2:	0f b6 e8             	movzx  ebp,al
c001d0f5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d0f9:	c1 e5 04             	shl    ebp,0x4
c001d0fc:	d4 40                	aam    0x40
c001d0fe:	d5 39                	aad    0x39
c001d100:	83 e8 30             	sub    eax,0x30
c001d103:	0f b6 f0             	movzx  esi,al
c001d106:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d10a:	09 ee                	or     esi,ebp
c001d10c:	c1 e6 04             	shl    esi,0x4
c001d10f:	d4 40                	aam    0x40
c001d111:	d5 39                	aad    0x39
c001d113:	83 e8 30             	sub    eax,0x30
c001d116:	0f b6 e8             	movzx  ebp,al
c001d119:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d11d:	09 ee                	or     esi,ebp
c001d11f:	c1 e6 04             	shl    esi,0x4
c001d122:	89 f5                	mov    ebp,esi
c001d124:	d4 40                	aam    0x40
c001d126:	d5 39                	aad    0x39
c001d128:	83 e8 30             	sub    eax,0x30
c001d12b:	0f b6 f0             	movzx  esi,al
c001d12e:	09 ee                	or     esi,ebp
c001d130:	83 c7 10             	add    edi,0x10
c001d133:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d137:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d13a:	3c 0a                	cmp    al,0xa
c001d13c:	74 09                	je     c001d147 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d13e:	45                   	inc    ebp
c001d13f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d142:	75 16                	jne    c001d15a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d144:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d147:	3c 0a                	cmp    al,0xa
c001d149:	0f 94 c0             	sete   al
c001d14c:	0f b6 c0             	movzx  eax,al
c001d14f:	01 c7                	add    edi,eax
c001d151:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d156:	75 0c                	jne    c001d164 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d158:	eb 15                	jmp    c001d16f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d15a:	47                   	inc    edi
c001d15b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d15e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d162:	eb d3                	jmp    c001d137 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d164:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d169:	0f 85 e8 fe ff ff    	jne    c001d057 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d16f:	80 f9 44             	cmp    cl,0x44
c001d172:	74 0b                	je     c001d17f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d174:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d179:	0f 85 d8 fe ff ff    	jne    c001d057 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d17f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d183:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d187:	c1 e1 04             	shl    ecx,0x4
c001d18a:	83 e8 30             	sub    eax,0x30
c001d18d:	09 c8                	or     eax,ecx
c001d18f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d193:	0f 85 be fe ff ff    	jne    c001d057 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d199:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d19d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d1a1:	c1 e1 04             	shl    ecx,0x4
c001d1a4:	83 e8 30             	sub    eax,0x30
c001d1a7:	09 c8                	or     eax,ecx
c001d1a9:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d1ad:	0f 85 a4 fe ff ff    	jne    c001d057 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1b3:	50                   	push   eax
c001d1b4:	50                   	push   eax
c001d1b5:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d1b9:	50                   	push   eax
c001d1ba:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d1c1:	e8 7a 35 fe ff       	call   c0000740 <strcpy>
c001d1c6:	83 c4 10             	add    esp,0x10
c001d1c9:	eb 15                	jmp    c001d1e0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d1cb:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d1d2:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d1dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d1e0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d1e7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d1ed:	5b                   	pop    ebx
c001d1ee:	5e                   	pop    esi
c001d1ef:	5f                   	pop    edi
c001d1f0:	5d                   	pop    ebp
c001d1f1:	c3                   	ret    

c001d1f2 <PCI::checkBus(unsigned char)>:
c001d1f2:	56                   	push   esi
c001d1f3:	53                   	push   ebx
c001d1f4:	31 db                	xor    ebx,ebx
c001d1f6:	51                   	push   ecx
c001d1f7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d1fc:	52                   	push   edx
c001d1fd:	53                   	push   ebx
c001d1fe:	43                   	inc    ebx
c001d1ff:	56                   	push   esi
c001d200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d204:	e8 37 03 00 00       	call   c001d540 <PCI::checkDevice(unsigned char, unsigned char)>
c001d209:	83 c4 10             	add    esp,0x10
c001d20c:	83 fb 20             	cmp    ebx,0x20
c001d20f:	75 eb                	jne    c001d1fc <PCI::checkBus(unsigned char)+0xa>
c001d211:	58                   	pop    eax
c001d212:	5b                   	pop    ebx
c001d213:	5e                   	pop    esi
c001d214:	c3                   	ret    
c001d215:	90                   	nop

c001d216 <PCI::foundDevice(PCIDeviceInfo)>:
c001d216:	55                   	push   ebp
c001d217:	57                   	push   edi
c001d218:	56                   	push   esi
c001d219:	53                   	push   ebx
c001d21a:	83 ec 1c             	sub    esp,0x1c
c001d21d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d221:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d227:	0f 84 52 01 00 00    	je     c001d37f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d22d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d231:	66 81 f9 06 04       	cmp    cx,0x406
c001d236:	75 2c                	jne    c001d264 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d238:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d23d:	50                   	push   eax
c001d23e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d243:	50                   	push   eax
c001d244:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d249:	50                   	push   eax
c001d24a:	56                   	push   esi
c001d24b:	e8 b4 fb ff ff       	call   c001ce04 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d250:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d254:	0f b6 c0             	movzx  eax,al
c001d257:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d25b:	83 c4 2c             	add    esp,0x2c
c001d25e:	5b                   	pop    ebx
c001d25f:	5e                   	pop    esi
c001d260:	5f                   	pop    edi
c001d261:	5d                   	pop    ebp
c001d262:	eb 8e                	jmp    c001d1f2 <PCI::checkBus(unsigned char)>
c001d264:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d268:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d26e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d272:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d276:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d27a:	88 d3                	mov    bl,dl
c001d27c:	85 c0                	test   eax,eax
c001d27e:	74 33                	je     c001d2b3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d280:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d283:	85 d2                	test   edx,edx
c001d285:	74 28                	je     c001d2af <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d287:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d28d:	31 ef                	xor    edi,ebp
c001d28f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d295:	75 18                	jne    c001d2af <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d297:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d29b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d2a1:	75 0c                	jne    c001d2af <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d2a3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d2a9:	0f 84 d0 00 00 00    	je     c001d37f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d2af:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2b1:	eb c9                	jmp    c001d27c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d2b3:	66 81 f9 01 06       	cmp    cx,0x601
c001d2b8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d2bc:	75 19                	jne    c001d2d7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d2be:	83 ec 0c             	sub    esp,0xc
c001d2c1:	68 64 01 00 00       	push   0x164
c001d2c6:	e8 f8 c6 fe ff       	call   c00099c3 <malloc>
c001d2cb:	89 c5                	mov    ebp,eax
c001d2cd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2d0:	e8 7b 0e 00 00       	call   c001e150 <SATABus::SATABus()>
c001d2d5:	eb 1e                	jmp    c001d2f5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d2d7:	66 81 f9 01 01       	cmp    cx,0x101
c001d2dc:	75 60                	jne    c001d33e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d2de:	83 ec 0c             	sub    esp,0xc
c001d2e1:	68 70 02 00 00       	push   0x270
c001d2e6:	e8 d8 c6 fe ff       	call   c00099c3 <malloc>
c001d2eb:	89 c5                	mov    ebp,eax
c001d2ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2f0:	e8 0f 03 00 00       	call   c001d604 <IDE::IDE()>
c001d2f5:	58                   	pop    eax
c001d2f6:	5a                   	pop    edx
c001d2f7:	55                   	push   ebp
c001d2f8:	56                   	push   esi
c001d2f9:	e8 b4 0b ff ff       	call   c000deb2 <Device::addChild(Device*)>
c001d2fe:	83 ec 1c             	sub    esp,0x1c
c001d301:	b9 09 00 00 00       	mov    ecx,0x9
c001d306:	fc                   	cld    
c001d307:	89 e7                	mov    edi,esp
c001d309:	89 de                	mov    esi,ebx
c001d30b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d30d:	55                   	push   ebp
c001d30e:	e8 b1 0a ff ff       	call   c000ddc4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d313:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d316:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d31a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d322:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d32a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d332:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d335:	83 c4 4c             	add    esp,0x4c
c001d338:	5b                   	pop    ebx
c001d339:	5e                   	pop    esi
c001d33a:	5f                   	pop    edi
c001d33b:	5d                   	pop    ebp
c001d33c:	ff e0                	jmp    eax
c001d33e:	83 ec 0c             	sub    esp,0xc
c001d341:	68 58 01 00 00       	push   0x158
c001d346:	e8 78 c6 fe ff       	call   c00099c3 <malloc>
c001d34b:	89 c5                	mov    ebp,eax
c001d34d:	58                   	pop    eax
c001d34e:	5a                   	pop    edx
c001d34f:	68 b2 4c 02 c0       	push   0xc0024cb2
c001d354:	55                   	push   ebp
c001d355:	e8 62 0e ff ff       	call   c000e1bc <DriverlessDevice::DriverlessDevice(char const*)>
c001d35a:	59                   	pop    ecx
c001d35b:	5f                   	pop    edi
c001d35c:	55                   	push   ebp
c001d35d:	56                   	push   esi
c001d35e:	e8 4f 0b ff ff       	call   c000deb2 <Device::addChild(Device*)>
c001d363:	b9 09 00 00 00       	mov    ecx,0x9
c001d368:	fc                   	cld    
c001d369:	89 df                	mov    edi,ebx
c001d36b:	89 de                	mov    esi,ebx
c001d36d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d36f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d373:	83 c4 2c             	add    esp,0x2c
c001d376:	5b                   	pop    ebx
c001d377:	5e                   	pop    esi
c001d378:	5f                   	pop    edi
c001d379:	5d                   	pop    ebp
c001d37a:	e9 45 0a ff ff       	jmp    c000ddc4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d37f:	83 c4 1c             	add    esp,0x1c
c001d382:	5b                   	pop    ebx
c001d383:	5e                   	pop    esi
c001d384:	5f                   	pop    edi
c001d385:	5d                   	pop    ebp
c001d386:	c3                   	ret    
c001d387:	90                   	nop

c001d388 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d388:	55                   	push   ebp
c001d389:	57                   	push   edi
c001d38a:	56                   	push   esi
c001d38b:	53                   	push   ebx
c001d38c:	83 ec 68             	sub    esp,0x68
c001d38f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d393:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d39a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d39e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d3a5:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d3aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3ae:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d3b5:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d3ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3be:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d3c3:	6a 0c                	push   0xc
c001d3c5:	57                   	push   edi
c001d3c6:	53                   	push   ebx
c001d3c7:	56                   	push   esi
c001d3c8:	55                   	push   ebp
c001d3c9:	e8 88 f8 ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3ce:	83 c4 20             	add    esp,0x20
c001d3d1:	57                   	push   edi
c001d3d2:	53                   	push   ebx
c001d3d3:	56                   	push   esi
c001d3d4:	55                   	push   ebp
c001d3d5:	e8 70 f9 ff ff       	call   c001cd4a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d3da:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d3df:	57                   	push   edi
c001d3e0:	53                   	push   ebx
c001d3e1:	56                   	push   esi
c001d3e2:	55                   	push   ebp
c001d3e3:	e8 f8 f9 ff ff       	call   c001cde0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d3e8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d3ec:	83 c4 14             	add    esp,0x14
c001d3ef:	6a 3c                	push   0x3c
c001d3f1:	57                   	push   edi
c001d3f2:	53                   	push   ebx
c001d3f3:	56                   	push   esi
c001d3f4:	55                   	push   ebp
c001d3f5:	e8 5c f8 ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3fa:	0f b6 c4             	movzx  eax,ah
c001d3fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d401:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d405:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d409:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c001d40e:	83 c4 20             	add    esp,0x20
c001d411:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d417:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d41e:	74 7c                	je     c001d49c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d420:	31 c0                	xor    eax,eax
c001d422:	8b 15 88 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026188
c001d428:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d42e:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d434:	7e 66                	jle    c001d49c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d436:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d439:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d440:	39 cb                	cmp    ebx,ecx
c001d442:	75 55                	jne    c001d499 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d444:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d44b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d44f:	75 48                	jne    c001d499 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d451:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d455:	83 ec 0c             	sub    esp,0xc
c001d458:	68 cc 4c 02 c0       	push   0xc0024ccc
c001d45d:	e8 09 f6 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001d462:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d466:	8b 15 88 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026188
c001d46c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d470:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d476:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d47e:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d482:	52                   	push   edx
c001d483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d487:	53                   	push   ebx
c001d488:	68 f1 4c 02 c0       	push   0xc0024cf1
c001d48d:	e8 d9 f5 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001d492:	83 c4 20             	add    esp,0x20
c001d495:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d499:	40                   	inc    eax
c001d49a:	eb 86                	jmp    c001d422 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d49c:	31 d2                	xor    edx,edx
c001d49e:	83 ec 0c             	sub    esp,0xc
c001d4a1:	57                   	push   edi
c001d4a2:	53                   	push   ebx
c001d4a3:	56                   	push   esi
c001d4a4:	52                   	push   edx
c001d4a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d4a9:	55                   	push   ebp
c001d4aa:	e8 7d f9 ff ff       	call   c001ce2c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d4b3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d4b7:	42                   	inc    edx
c001d4b8:	83 c4 20             	add    esp,0x20
c001d4bb:	83 fa 06             	cmp    edx,0x6
c001d4be:	75 de                	jne    c001d49e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d4c0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d4c5:	83 ec 0c             	sub    esp,0xc
c001d4c8:	86 e0                	xchg   al,ah
c001d4ca:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d4cf:	6a 02                	push   0x2
c001d4d1:	57                   	push   edi
c001d4d2:	53                   	push   ebx
c001d4d3:	56                   	push   esi
c001d4d4:	55                   	push   ebp
c001d4d5:	e8 7c f7 ff ff       	call   c001cc56 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4da:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d4df:	83 c4 20             	add    esp,0x20
c001d4e2:	57                   	push   edi
c001d4e3:	53                   	push   ebx
c001d4e4:	56                   	push   esi
c001d4e5:	55                   	push   ebp
c001d4e6:	e8 a9 f8 ff ff       	call   c001cd94 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d4eb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d4ef:	57                   	push   edi
c001d4f0:	53                   	push   ebx
c001d4f1:	56                   	push   esi
c001d4f2:	55                   	push   ebp
c001d4f3:	e8 06 f8 ff ff       	call   c001ccfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d4f8:	b9 09 00 00 00       	mov    ecx,0x9
c001d4fd:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d502:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d506:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d50a:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d50e:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d512:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d516:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d51a:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d51e:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d522:	83 ec 0c             	sub    esp,0xc
c001d525:	fc                   	cld    
c001d526:	89 e7                	mov    edi,esp
c001d528:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d52c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d52e:	55                   	push   ebp
c001d52f:	e8 e2 fc ff ff       	call   c001d216 <PCI::foundDevice(PCIDeviceInfo)>
c001d534:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d53a:	5b                   	pop    ebx
c001d53b:	5e                   	pop    esi
c001d53c:	5f                   	pop    edi
c001d53d:	5d                   	pop    ebp
c001d53e:	c3                   	ret    
c001d53f:	90                   	nop

c001d540 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d540:	55                   	push   ebp
c001d541:	57                   	push   edi
c001d542:	56                   	push   esi
c001d543:	53                   	push   ebx
c001d544:	83 ec 0c             	sub    esp,0xc
c001d547:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d54b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d550:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d555:	6a 00                	push   0x0
c001d557:	56                   	push   esi
c001d558:	57                   	push   edi
c001d559:	55                   	push   ebp
c001d55a:	e8 9f f7 ff ff       	call   c001ccfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d55f:	6a 00                	push   0x0
c001d561:	56                   	push   esi
c001d562:	57                   	push   edi
c001d563:	55                   	push   ebp
c001d564:	e8 1f fe ff ff       	call   c001d388 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d569:	83 c4 20             	add    esp,0x20
c001d56c:	6a 00                	push   0x0
c001d56e:	56                   	push   esi
c001d56f:	57                   	push   edi
c001d570:	55                   	push   ebp
c001d571:	e8 ac f7 ff ff       	call   c001cd22 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d576:	83 c4 10             	add    esp,0x10
c001d579:	84 c0                	test   al,al
c001d57b:	79 27                	jns    c001d5a4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d57d:	bb 01 00 00 00       	mov    ebx,0x1
c001d582:	53                   	push   ebx
c001d583:	56                   	push   esi
c001d584:	57                   	push   edi
c001d585:	55                   	push   ebp
c001d586:	e8 73 f7 ff ff       	call   c001ccfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d58b:	83 c4 10             	add    esp,0x10
c001d58e:	66 40                	inc    ax
c001d590:	74 0c                	je     c001d59e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d592:	53                   	push   ebx
c001d593:	56                   	push   esi
c001d594:	57                   	push   edi
c001d595:	55                   	push   ebp
c001d596:	e8 ed fd ff ff       	call   c001d388 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d59b:	83 c4 10             	add    esp,0x10
c001d59e:	43                   	inc    ebx
c001d59f:	83 fb 08             	cmp    ebx,0x8
c001d5a2:	75 de                	jne    c001d582 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d5a4:	83 c4 0c             	add    esp,0xc
c001d5a7:	5b                   	pop    ebx
c001d5a8:	5e                   	pop    esi
c001d5a9:	5f                   	pop    edi
c001d5aa:	5d                   	pop    ebp
c001d5ab:	c3                   	ret    

c001d5ac <PCI::detect()>:
c001d5ac:	56                   	push   esi
c001d5ad:	53                   	push   ebx
c001d5ae:	53                   	push   ebx
c001d5af:	31 db                	xor    ebx,ebx
c001d5b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5b5:	6a 00                	push   0x0
c001d5b7:	6a 00                	push   0x0
c001d5b9:	6a 00                	push   0x0
c001d5bb:	56                   	push   esi
c001d5bc:	e8 61 f7 ff ff       	call   c001cd22 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d5c1:	83 c4 10             	add    esp,0x10
c001d5c4:	a8 80                	test   al,0x80
c001d5c6:	75 21                	jne    c001d5e9 <PCI::detect()+0x3d>
c001d5c8:	51                   	push   ecx
c001d5c9:	51                   	push   ecx
c001d5ca:	6a 00                	push   0x0
c001d5cc:	56                   	push   esi
c001d5cd:	e8 20 fc ff ff       	call   c001d1f2 <PCI::checkBus(unsigned char)>
c001d5d2:	83 c4 10             	add    esp,0x10
c001d5d5:	eb 24                	jmp    c001d5fb <PCI::detect()+0x4f>
c001d5d7:	52                   	push   edx
c001d5d8:	52                   	push   edx
c001d5d9:	53                   	push   ebx
c001d5da:	43                   	inc    ebx
c001d5db:	56                   	push   esi
c001d5dc:	e8 11 fc ff ff       	call   c001d1f2 <PCI::checkBus(unsigned char)>
c001d5e1:	83 c4 10             	add    esp,0x10
c001d5e4:	83 fb 08             	cmp    ebx,0x8
c001d5e7:	74 12                	je     c001d5fb <PCI::detect()+0x4f>
c001d5e9:	53                   	push   ebx
c001d5ea:	6a 00                	push   0x0
c001d5ec:	6a 00                	push   0x0
c001d5ee:	56                   	push   esi
c001d5ef:	e8 0a f7 ff ff       	call   c001ccfe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5f4:	83 c4 10             	add    esp,0x10
c001d5f7:	66 40                	inc    ax
c001d5f9:	74 dc                	je     c001d5d7 <PCI::detect()+0x2b>
c001d5fb:	58                   	pop    eax
c001d5fc:	5b                   	pop    ebx
c001d5fd:	5e                   	pop    esi
c001d5fe:	c3                   	ret    
c001d5ff:	90                   	nop

c001d600 <IDE::close(int, int, void*)>:
c001d600:	83 c8 ff             	or     eax,0xffffffff
c001d603:	c3                   	ret    

c001d604 <IDE::IDE()>:
c001d604:	83 ec 0c             	sub    esp,0xc
c001d607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60b:	83 ec 08             	sub    esp,0x8
c001d60e:	68 38 4d 02 c0       	push   0xc0024d38
c001d613:	50                   	push   eax
c001d614:	e8 47 0c ff ff       	call   c000e260 <HardDiskController::HardDiskController(char const*)>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	ba c8 4d 02 c0       	mov    edx,0xc0024dc8
c001d621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d625:	89 10                	mov    DWORD PTR [eax],edx
c001d627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d632:	90                   	nop
c001d633:	83 c4 0c             	add    esp,0xc
c001d636:	c3                   	ret    
c001d637:	90                   	nop

c001d638 <IDE::prepareInterrupt(unsigned char)>:
c001d638:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d63d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d641:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d649:	c3                   	ret    

c001d64a <selectDrive(unsigned char, unsigned char)>:
c001d64a:	c3                   	ret    
c001d64b:	90                   	nop

c001d64c <IDE::getBase(unsigned char)>:
c001d64c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d655:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d65d:	c3                   	ret    

c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d65e:	55                   	push   ebp
c001d65f:	57                   	push   edi
c001d660:	56                   	push   esi
c001d661:	53                   	push   ebx
c001d662:	83 ec 1c             	sub    esp,0x1c
c001d665:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d669:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d66d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d670:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d674:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d678:	80 f9 03             	cmp    cl,0x3
c001d67b:	77 51                	ja     c001d6ce <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d67d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d681:	0f b6 f2             	movzx  esi,dl
c001d684:	0f b6 db             	movzx  ebx,bl
c001d687:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d68a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d68e:	83 ca 80             	or     edx,0xffffff80
c001d691:	0f b6 d2             	movzx  edx,dl
c001d694:	52                   	push   edx
c001d695:	6a 0c                	push   0xc
c001d697:	56                   	push   esi
c001d698:	57                   	push   edi
c001d699:	e8 c0 ff ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d69e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d6a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6a7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d6ab:	ee                   	out    dx,al
c001d6ac:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d6b1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d6b5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d6b9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d6bd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d6c5:	83 c4 2c             	add    esp,0x2c
c001d6c8:	5b                   	pop    ebx
c001d6c9:	5e                   	pop    esi
c001d6ca:	5f                   	pop    edi
c001d6cb:	5d                   	pop    ebp
c001d6cc:	eb 90                	jmp    c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ce:	80 fb 07             	cmp    bl,0x7
c001d6d1:	77 12                	ja     c001d6e5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d6d3:	0f b6 d2             	movzx  edx,dl
c001d6d6:	0f b6 db             	movzx  ebx,bl
c001d6d9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d6e1:	89 da                	mov    edx,ebx
c001d6e3:	eb 2f                	jmp    c001d714 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d6e5:	80 fb 0d             	cmp    bl,0xd
c001d6e8:	77 13                	ja     c001d6fd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d6ea:	0f b6 d2             	movzx  edx,dl
c001d6ed:	0f b6 db             	movzx  ebx,bl
c001d6f0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d6f7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d6fb:	eb 17                	jmp    c001d714 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d6fd:	80 fb 15             	cmp    bl,0x15
c001d700:	77 13                	ja     c001d715 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d702:	0f b6 d2             	movzx  edx,dl
c001d705:	0f b6 db             	movzx  ebx,bl
c001d708:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d710:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d714:	ee                   	out    dx,al
c001d715:	83 c4 1c             	add    esp,0x1c
c001d718:	5b                   	pop    ebx
c001d719:	5e                   	pop    esi
c001d71a:	5f                   	pop    edi
c001d71b:	5d                   	pop    ebp
c001d71c:	c3                   	ret    
c001d71d:	90                   	nop

c001d71e <IDE::read(unsigned char, unsigned char)>:
c001d71e:	55                   	push   ebp
c001d71f:	57                   	push   edi
c001d720:	56                   	push   esi
c001d721:	53                   	push   ebx
c001d722:	83 ec 1c             	sub    esp,0x1c
c001d725:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d729:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d72d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d730:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d734:	3c 03                	cmp    al,0x3
c001d736:	77 43                	ja     c001d77b <IDE::read(unsigned char, unsigned char)+0x5d>
c001d738:	0f b6 f2             	movzx  esi,dl
c001d73b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d73e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d742:	83 c8 80             	or     eax,0xffffff80
c001d745:	0f b6 c0             	movzx  eax,al
c001d748:	50                   	push   eax
c001d749:	6a 0c                	push   0xc
c001d74b:	56                   	push   esi
c001d74c:	57                   	push   edi
c001d74d:	e8 0c ff ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d752:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d757:	0f b6 c3             	movzx  eax,bl
c001d75a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d75e:	ec                   	in     al,dx
c001d75f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d763:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d768:	52                   	push   edx
c001d769:	6a 0c                	push   0xc
c001d76b:	56                   	push   esi
c001d76c:	57                   	push   edi
c001d76d:	e8 ec fe ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d772:	83 c4 20             	add    esp,0x20
c001d775:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d779:	eb 49                	jmp    c001d7c4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d77b:	80 fb 07             	cmp    bl,0x7
c001d77e:	77 12                	ja     c001d792 <IDE::read(unsigned char, unsigned char)+0x74>
c001d780:	0f b6 d2             	movzx  edx,dl
c001d783:	0f b6 c3             	movzx  eax,bl
c001d786:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d78e:	89 c2                	mov    edx,eax
c001d790:	eb 31                	jmp    c001d7c3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d792:	80 fb 0d             	cmp    bl,0xd
c001d795:	77 13                	ja     c001d7aa <IDE::read(unsigned char, unsigned char)+0x8c>
c001d797:	0f b6 d2             	movzx  edx,dl
c001d79a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d7a1:	0f b6 d3             	movzx  edx,bl
c001d7a4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d7a8:	eb 19                	jmp    c001d7c3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d7aa:	31 c0                	xor    eax,eax
c001d7ac:	80 fb 15             	cmp    bl,0x15
c001d7af:	77 13                	ja     c001d7c4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d7b1:	0f b6 d2             	movzx  edx,dl
c001d7b4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d7bc:	0f b6 d3             	movzx  edx,bl
c001d7bf:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d7c3:	ec                   	in     al,dx
c001d7c4:	83 c4 1c             	add    esp,0x1c
c001d7c7:	5b                   	pop    ebx
c001d7c8:	5e                   	pop    esi
c001d7c9:	5f                   	pop    edi
c001d7ca:	5d                   	pop    ebp
c001d7cb:	c3                   	ret    

c001d7cc <IDE::waitInterrupt(unsigned char)>:
c001d7cc:	55                   	push   ebp
c001d7cd:	57                   	push   edi
c001d7ce:	56                   	push   esi
c001d7cf:	53                   	push   ebx
c001d7d0:	31 db                	xor    ebx,ebx
c001d7d2:	83 ec 0c             	sub    esp,0xc
c001d7d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d7d9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d7de:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d7e6:	89 e8                	mov    eax,ebp
c001d7e8:	84 c0                	test   al,al
c001d7ea:	75 30                	jne    c001d81c <IDE::waitInterrupt(unsigned char)+0x50>
c001d7ec:	50                   	push   eax
c001d7ed:	6a 0c                	push   0xc
c001d7ef:	56                   	push   esi
c001d7f0:	57                   	push   edi
c001d7f1:	e8 28 ff ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001d7f6:	83 c4 10             	add    esp,0x10
c001d7f9:	a8 01                	test   al,0x1
c001d7fb:	75 27                	jne    c001d824 <IDE::waitInterrupt(unsigned char)+0x58>
c001d7fd:	f6 c3 04             	test   bl,0x4
c001d800:	75 12                	jne    c001d814 <IDE::waitInterrupt(unsigned char)+0x48>
c001d802:	83 fb 32             	cmp    ebx,0x32
c001d805:	7e 0d                	jle    c001d814 <IDE::waitInterrupt(unsigned char)+0x48>
c001d807:	83 ec 0c             	sub    esp,0xc
c001d80a:	6a 64                	push   0x64
c001d80c:	e8 c3 a9 ff ff       	call   c00181d4 <milliTenthSleep(unsigned int)>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	83 fb 3c             	cmp    ebx,0x3c
c001d817:	74 0b                	je     c001d824 <IDE::waitInterrupt(unsigned char)+0x58>
c001d819:	43                   	inc    ebx
c001d81a:	eb c2                	jmp    c001d7de <IDE::waitInterrupt(unsigned char)+0x12>
c001d81c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d824:	83 c4 0c             	add    esp,0xc
c001d827:	89 e8                	mov    eax,ebp
c001d829:	5b                   	pop    ebx
c001d82a:	5e                   	pop    esi
c001d82b:	5f                   	pop    edi
c001d82c:	5d                   	pop    ebp
c001d82d:	c3                   	ret    

c001d82e <ideChannel0IRQHandler(regs*, void*)>:
c001d82e:	83 ec 10             	sub    esp,0x10
c001d831:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d835:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d83c:	6a 07                	push   0x7
c001d83e:	6a 00                	push   0x0
c001d840:	50                   	push   eax
c001d841:	e8 d8 fe ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001d846:	83 c4 1c             	add    esp,0x1c
c001d849:	c3                   	ret    

c001d84a <ideChannel1IRQHandler(regs*, void*)>:
c001d84a:	83 ec 10             	sub    esp,0x10
c001d84d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d851:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d858:	6a 07                	push   0x7
c001d85a:	6a 01                	push   0x1
c001d85c:	50                   	push   eax
c001d85d:	e8 bc fe ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001d862:	83 c4 1c             	add    esp,0x1c
c001d865:	c3                   	ret    

c001d866 <IDE::enableIRQs(unsigned char, bool)>:
c001d866:	57                   	push   edi
c001d867:	56                   	push   esi
c001d868:	be 04 00 00 00       	mov    esi,0x4
c001d86d:	53                   	push   ebx
c001d86e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d877:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d87c:	0f 94 c0             	sete   al
c001d87f:	d1 e0                	shl    eax,1
c001d881:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d888:	0f b6 c0             	movzx  eax,al
c001d88b:	50                   	push   eax
c001d88c:	6a 0c                	push   0xc
c001d88e:	57                   	push   edi
c001d88f:	53                   	push   ebx
c001d890:	e8 c9 fd ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d895:	83 c4 10             	add    esp,0x10
c001d898:	50                   	push   eax
c001d899:	6a 0c                	push   0xc
c001d89b:	57                   	push   edi
c001d89c:	53                   	push   ebx
c001d89d:	e8 7c fe ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001d8a2:	83 c4 10             	add    esp,0x10
c001d8a5:	4e                   	dec    esi
c001d8a6:	75 f0                	jne    c001d898 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d8a8:	5b                   	pop    ebx
c001d8a9:	5e                   	pop    esi
c001d8aa:	5f                   	pop    edi
c001d8ab:	c3                   	ret    

c001d8ac <IDE::open(int, int, void*)>:
c001d8ac:	55                   	push   ebp
c001d8ad:	57                   	push   edi
c001d8ae:	56                   	push   esi
c001d8af:	53                   	push   ebx
c001d8b0:	83 ec 1c             	sub    esp,0x1c
c001d8b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d8b7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d8c0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d8c9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d8d0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d8d7:	0f 85 b0 02 00 00    	jne    c001db8d <IDE::open(int, int, void*)+0x2e1>
c001d8dd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d8e3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d8e7:	83 e0 7f             	and    eax,0x7f
c001d8ea:	3c 05                	cmp    al,0x5
c001d8ec:	74 04                	je     c001d8f2 <IDE::open(int, int, void*)+0x46>
c001d8ee:	3c 0f                	cmp    al,0xf
c001d8f0:	75 32                	jne    c001d924 <IDE::open(int, int, void*)+0x78>
c001d8f2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d8f8:	83 e0 fc             	and    eax,0xfffffffc
c001d8fb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d902:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d908:	83 e0 fc             	and    eax,0xfffffffc
c001d90b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d912:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d918:	83 e0 fc             	and    eax,0xfffffffc
c001d91b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d922:	eb 14                	jmp    c001d938 <IDE::open(int, int, void*)+0x8c>
c001d924:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d92e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d938:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d93f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d946:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d94a:	89 c6                	mov    esi,eax
c001d94c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d951:	c1 e6 10             	shl    esi,0x10
c001d954:	89 e8                	mov    eax,ebp
c001d956:	89 fa                	mov    edx,edi
c001d958:	c1 e0 0b             	shl    eax,0xb
c001d95b:	09 f0                	or     eax,esi
c001d95d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001d964:	c1 e6 08             	shl    esi,0x8
c001d967:	09 c6                	or     esi,eax
c001d969:	89 f0                	mov    eax,esi
c001d96b:	0d 08 00 00 80       	or     eax,0x80000008
c001d970:	ef                   	out    dx,eax
c001d971:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001d976:	89 ca                	mov    edx,ecx
c001d978:	ed                   	in     eax,dx
c001d979:	c1 e8 10             	shr    eax,0x10
c001d97c:	3d ff ff 00 00       	cmp    eax,0xffff
c001d981:	0f 84 f5 00 00 00    	je     c001da7c <IDE::open(int, int, void*)+0x1d0>
c001d987:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001d98d:	89 fa                	mov    edx,edi
c001d98f:	89 f0                	mov    eax,esi
c001d991:	ef                   	out    dx,eax
c001d992:	b0 fe                	mov    al,0xfe
c001d994:	89 ca                	mov    edx,ecx
c001d996:	ee                   	out    dx,al
c001d997:	89 f0                	mov    eax,esi
c001d999:	89 fa                	mov    edx,edi
c001d99b:	ef                   	out    dx,eax
c001d99c:	89 ca                	mov    edx,ecx
c001d99e:	ed                   	in     eax,dx
c001d99f:	3c fe                	cmp    al,0xfe
c001d9a1:	0f 85 a9 00 00 00    	jne    c001da50 <IDE::open(int, int, void*)+0x1a4>
c001d9a7:	8b 15 88 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026188
c001d9ad:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001d9b4:	74 33                	je     c001d9e9 <IDE::open(int, int, void*)+0x13d>
c001d9b6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001d9bc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001d9c0:	40                   	inc    eax
c001d9c1:	83 ec 0c             	sub    esp,0xc
c001d9c4:	0f b6 c0             	movzx  eax,al
c001d9c7:	50                   	push   eax
c001d9c8:	55                   	push   ebp
c001d9c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9cd:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001d9d3:	51                   	push   ecx
c001d9d4:	e8 0b 44 ff ff       	call   c0011de4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001d9d9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001d9de:	83 c4 1c             	add    esp,0x1c
c001d9e1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d9e7:	eb 0a                	jmp    c001d9f3 <IDE::open(int, int, void*)+0x147>
c001d9e9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001d9f3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d9fa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da01:	c1 e1 10             	shl    ecx,0x10
c001da04:	c1 e0 08             	shl    eax,0x8
c001da07:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da0c:	09 c1                	or     ecx,eax
c001da0e:	89 fa                	mov    edx,edi
c001da10:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da17:	c1 e0 0b             	shl    eax,0xb
c001da1a:	09 c1                	or     ecx,eax
c001da1c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001da22:	89 c8                	mov    eax,ecx
c001da24:	ef                   	out    dx,eax
c001da25:	be fc 0c 00 00       	mov    esi,0xcfc
c001da2a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001da30:	89 f2                	mov    edx,esi
c001da32:	ee                   	out    dx,al
c001da33:	89 c8                	mov    eax,ecx
c001da35:	89 fa                	mov    edx,edi
c001da37:	ef                   	out    dx,eax
c001da38:	89 f2                	mov    edx,esi
c001da3a:	ed                   	in     eax,dx
c001da3b:	0f b6 c0             	movzx  eax,al
c001da3e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001da44:	74 46                	je     c001da8c <IDE::open(int, int, void*)+0x1e0>
c001da46:	83 ec 0c             	sub    esp,0xc
c001da49:	68 50 4d 02 c0       	push   0xc0024d50
c001da4e:	eb 34                	jmp    c001da84 <IDE::open(int, int, void*)+0x1d8>
c001da50:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001da59:	75 17                	jne    c001da72 <IDE::open(int, int, void*)+0x1c6>
c001da5b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001da60:	74 07                	je     c001da69 <IDE::open(int, int, void*)+0x1bd>
c001da62:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001da67:	75 09                	jne    c001da72 <IDE::open(int, int, void*)+0x1c6>
c001da69:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001da70:	eb 1a                	jmp    c001da8c <IDE::open(int, int, void*)+0x1e0>
c001da72:	83 ec 0c             	sub    esp,0xc
c001da75:	68 58 4d 02 c0       	push   0xc0024d58
c001da7a:	eb 08                	jmp    c001da84 <IDE::open(int, int, void*)+0x1d8>
c001da7c:	83 ec 0c             	sub    esp,0xc
c001da7f:	68 89 4d 02 c0       	push   0xc0024d89
c001da84:	e8 82 68 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001da89:	83 c4 10             	add    esp,0x10
c001da8c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001da93:	79 1a                	jns    c001daaf <IDE::open(int, int, void*)+0x203>
c001da95:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001da9b:	83 e0 fc             	and    eax,0xfffffffc
c001da9e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001daa5:	83 c0 08             	add    eax,0x8
c001daa8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001daaf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001dab5:	89 c2                	mov    edx,eax
c001dab7:	83 e2 0f             	and    edx,0xf
c001daba:	66 83 fa 08          	cmp    dx,0x8
c001dabe:	75 0a                	jne    c001daca <IDE::open(int, int, void*)+0x21e>
c001dac0:	83 e8 02             	sub    eax,0x2
c001dac3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001daca:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001dad0:	89 c2                	mov    edx,eax
c001dad2:	83 e2 0f             	and    edx,0xf
c001dad5:	66 83 fa 08          	cmp    dx,0x8
c001dad9:	75 0a                	jne    c001dae5 <IDE::open(int, int, void*)+0x239>
c001dadb:	83 e8 02             	sub    eax,0x2
c001dade:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dae5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001daec:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001daf3:	89 d0                	mov    eax,edx
c001daf5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001daf8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dafc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001db00:	8d 4a 01             	lea    ecx,[edx+0x1]
c001db03:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db08:	0f b6 c9             	movzx  ecx,cl
c001db0b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001db12:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db15:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db19:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001db1d:	8d 50 02             	lea    edx,[eax+0x2]
c001db20:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001db25:	0f b6 d2             	movzx  edx,dl
c001db28:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001db2e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db31:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db35:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001db39:	8d 48 03             	lea    ecx,[eax+0x3]
c001db3c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db41:	0f b6 c9             	movzx  ecx,cl
c001db44:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001db4a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db4d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db51:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001db55:	8d 50 04             	lea    edx,[eax+0x4]
c001db58:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001db5e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001db63:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001db6a:	66 85 f6             	test   si,si
c001db6d:	74 5b                	je     c001dbca <IDE::open(int, int, void*)+0x31e>
c001db6f:	0f b6 d2             	movzx  edx,dl
c001db72:	83 c0 05             	add    eax,0x5
c001db75:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db78:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db7c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001db80:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001db86:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db8b:	eb 3d                	jmp    c001dbca <IDE::open(int, int, void*)+0x31e>
c001db8d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001db93:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001db9a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dba1:	66 05 06 02          	add    ax,0x206
c001dba5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dbac:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dbb3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dbba:	66 05 06 02          	add    ax,0x206
c001dbbe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dbc5:	e9 e5 fe ff ff       	jmp    c001daaf <IDE::open(int, int, void*)+0x203>
c001dbca:	50                   	push   eax
c001dbcb:	50                   	push   eax
c001dbcc:	6a 00                	push   0x0
c001dbce:	53                   	push   ebx
c001dbcf:	e8 64 fa ff ff       	call   c001d638 <IDE::prepareInterrupt(unsigned char)>
c001dbd4:	5a                   	pop    edx
c001dbd5:	59                   	pop    ecx
c001dbd6:	6a 01                	push   0x1
c001dbd8:	53                   	push   ebx
c001dbd9:	e8 5a fa ff ff       	call   c001d638 <IDE::prepareInterrupt(unsigned char)>
c001dbde:	83 c4 0c             	add    esp,0xc
c001dbe1:	6a 00                	push   0x0
c001dbe3:	6a 00                	push   0x0
c001dbe5:	53                   	push   ebx
c001dbe6:	e8 7b fc ff ff       	call   c001d866 <IDE::enableIRQs(unsigned char, bool)>
c001dbeb:	83 c4 0c             	add    esp,0xc
c001dbee:	6a 00                	push   0x0
c001dbf0:	6a 01                	push   0x1
c001dbf2:	53                   	push   ebx
c001dbf3:	e8 6e fc ff ff       	call   c001d866 <IDE::enableIRQs(unsigned char, bool)>
c001dbf8:	83 c4 10             	add    esp,0x10
c001dbfb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dc02:	74 34                	je     c001dc38 <IDE::open(int, int, void*)+0x38c>
c001dc04:	83 ec 0c             	sub    esp,0xc
c001dc07:	53                   	push   ebx
c001dc08:	6a 01                	push   0x1
c001dc0a:	68 2e d8 01 c0       	push   0xc001d82e
c001dc0f:	6a 0e                	push   0xe
c001dc11:	53                   	push   ebx
c001dc12:	e8 13 02 ff ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc17:	83 c4 14             	add    esp,0x14
c001dc1a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dc20:	53                   	push   ebx
c001dc21:	6a 01                	push   0x1
c001dc23:	68 4a d8 01 c0       	push   0xc001d84a
c001dc28:	6a 0f                	push   0xf
c001dc2a:	53                   	push   ebx
c001dc2b:	e8 fa 01 ff ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc30:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dc36:	eb 38                	jmp    c001dc70 <IDE::open(int, int, void*)+0x3c4>
c001dc38:	83 ec 0c             	sub    esp,0xc
c001dc3b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dc45:	53                   	push   ebx
c001dc46:	6a 00                	push   0x0
c001dc48:	68 2e d8 01 c0       	push   0xc001d82e
c001dc4d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dc53:	53                   	push   ebx
c001dc54:	e8 d1 01 ff ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc59:	83 c4 14             	add    esp,0x14
c001dc5c:	53                   	push   ebx
c001dc5d:	6a 00                	push   0x0
c001dc5f:	68 4a d8 01 c0       	push   0xc001d84a
c001dc64:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dc6a:	53                   	push   ebx
c001dc6b:	e8 ba 01 ff ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc70:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dc72:	83 c4 20             	add    esp,0x20
c001dc75:	83 ec 0c             	sub    esp,0xc
c001dc78:	53                   	push   ebx
c001dc79:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dc7c:	83 c4 0c             	add    esp,0xc
c001dc7f:	6a 07                	push   0x7
c001dc81:	6a 00                	push   0x0
c001dc83:	53                   	push   ebx
c001dc84:	e8 95 fa ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001dc89:	83 c4 0c             	add    esp,0xc
c001dc8c:	6a 07                	push   0x7
c001dc8e:	6a 01                	push   0x1
c001dc90:	53                   	push   ebx
c001dc91:	e8 88 fa ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001dc96:	83 c4 0c             	add    esp,0xc
c001dc99:	6a 01                	push   0x1
c001dc9b:	6a 00                	push   0x0
c001dc9d:	53                   	push   ebx
c001dc9e:	e8 c3 fb ff ff       	call   c001d866 <IDE::enableIRQs(unsigned char, bool)>
c001dca3:	83 c4 0c             	add    esp,0xc
c001dca6:	6a 01                	push   0x1
c001dca8:	6a 01                	push   0x1
c001dcaa:	53                   	push   ebx
c001dcab:	e8 b6 fb ff ff       	call   c001d866 <IDE::enableIRQs(unsigned char, bool)>
c001dcb0:	83 c4 2c             	add    esp,0x2c
c001dcb3:	31 c0                	xor    eax,eax
c001dcb5:	5b                   	pop    ebx
c001dcb6:	5e                   	pop    esi
c001dcb7:	5f                   	pop    edi
c001dcb8:	5d                   	pop    ebp
c001dcb9:	c3                   	ret    

c001dcba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dcba:	55                   	push   ebp
c001dcbb:	57                   	push   edi
c001dcbc:	56                   	push   esi
c001dcbd:	53                   	push   ebx
c001dcbe:	83 ec 1c             	sub    esp,0x1c
c001dcc1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dcc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dcc9:	8d 50 f8             	lea    edx,[eax-0x8]
c001dccc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dcd0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dcd4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dcd8:	80 fa 03             	cmp    dl,0x3
c001dcdb:	77 5d                	ja     c001dd3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dcdd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dce5:	0f b6 db             	movzx  ebx,bl
c001dce8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dceb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dcef:	83 ca 80             	or     edx,0xffffff80
c001dcf2:	0f b6 d2             	movzx  edx,dl
c001dcf5:	52                   	push   edx
c001dcf6:	6a 0c                	push   0xc
c001dcf8:	53                   	push   ebx
c001dcf9:	56                   	push   esi
c001dcfa:	e8 5f f9 ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcff:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001dd04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd0c:	0f b6 c0             	movzx  eax,al
c001dd0f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dd13:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd15:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dd1a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dd1e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dd22:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dd26:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dd2e:	83 c4 2c             	add    esp,0x2c
c001dd31:	5b                   	pop    ebx
c001dd32:	5e                   	pop    esi
c001dd33:	5f                   	pop    edi
c001dd34:	5d                   	pop    ebp
c001dd35:	e9 24 f9 ff ff       	jmp    c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd3a:	3c 07                	cmp    al,0x7
c001dd3c:	77 10                	ja     c001dd4e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001dd3e:	0f b6 db             	movzx  ebx,bl
c001dd41:	0f b6 d0             	movzx  edx,al
c001dd44:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001dd4c:	eb 2d                	jmp    c001dd7b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dd4e:	3c 0d                	cmp    al,0xd
c001dd50:	77 13                	ja     c001dd65 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001dd52:	0f b6 db             	movzx  ebx,bl
c001dd55:	0f b6 c0             	movzx  eax,al
c001dd58:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001dd5f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001dd63:	eb 16                	jmp    c001dd7b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dd65:	3c 15                	cmp    al,0x15
c001dd67:	77 14                	ja     c001dd7d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001dd69:	0f b6 db             	movzx  ebx,bl
c001dd6c:	0f b6 c0             	movzx  eax,al
c001dd6f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001dd77:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001dd7b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd7d:	83 c4 1c             	add    esp,0x1c
c001dd80:	5b                   	pop    ebx
c001dd81:	5e                   	pop    esi
c001dd82:	5f                   	pop    edi
c001dd83:	5d                   	pop    ebp
c001dd84:	c3                   	ret    
c001dd85:	90                   	nop

c001dd86 <IDE::detect()>:
c001dd86:	55                   	push   ebp
c001dd87:	57                   	push   edi
c001dd88:	56                   	push   esi
c001dd89:	53                   	push   ebx
c001dd8a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001dd90:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001dd97:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001dd9e:	0f 85 97 02 00 00    	jne    c001e03b <IDE::detect()+0x2b5>
c001dda4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ddab:	31 f6                	xor    esi,esi
c001ddad:	31 ed                	xor    ebp,ebp
c001ddaf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ddb7:	89 e8                	mov    eax,ebp
c001ddb9:	c1 e0 06             	shl    eax,0x6
c001ddbc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ddc4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ddc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ddcc:	c1 e0 04             	shl    eax,0x4
c001ddcf:	83 c8 a0             	or     eax,0xffffffa0
c001ddd2:	0f b6 c0             	movzx  eax,al
c001ddd5:	50                   	push   eax
c001ddd6:	6a 06                	push   0x6
c001ddd8:	56                   	push   esi
c001ddd9:	53                   	push   ebx
c001ddda:	e8 7f f8 ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dddf:	83 c4 0c             	add    esp,0xc
c001dde2:	6a 0c                	push   0xc
c001dde4:	56                   	push   esi
c001dde5:	53                   	push   ebx
c001dde6:	e8 33 f9 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001ddeb:	83 c4 0c             	add    esp,0xc
c001ddee:	6a 0c                	push   0xc
c001ddf0:	56                   	push   esi
c001ddf1:	53                   	push   ebx
c001ddf2:	e8 27 f9 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001ddf7:	83 c4 0c             	add    esp,0xc
c001ddfa:	6a 0c                	push   0xc
c001ddfc:	56                   	push   esi
c001ddfd:	53                   	push   ebx
c001ddfe:	e8 1b f9 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001de03:	83 c4 0c             	add    esp,0xc
c001de06:	6a 0c                	push   0xc
c001de08:	56                   	push   esi
c001de09:	53                   	push   ebx
c001de0a:	e8 0f f9 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001de0f:	68 ec 00 00 00       	push   0xec
c001de14:	6a 07                	push   0x7
c001de16:	56                   	push   esi
c001de17:	53                   	push   ebx
c001de18:	e8 41 f8 ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de1d:	83 c4 1c             	add    esp,0x1c
c001de20:	6a 0c                	push   0xc
c001de22:	56                   	push   esi
c001de23:	53                   	push   ebx
c001de24:	e8 f5 f8 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001de29:	83 c4 0c             	add    esp,0xc
c001de2c:	6a 0c                	push   0xc
c001de2e:	56                   	push   esi
c001de2f:	53                   	push   ebx
c001de30:	e8 e9 f8 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001de35:	83 c4 0c             	add    esp,0xc
c001de38:	6a 0c                	push   0xc
c001de3a:	56                   	push   esi
c001de3b:	53                   	push   ebx
c001de3c:	e8 dd f8 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001de41:	83 c4 0c             	add    esp,0xc
c001de44:	6a 0c                	push   0xc
c001de46:	56                   	push   esi
c001de47:	53                   	push   ebx
c001de48:	e8 d1 f8 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001de4d:	83 c4 0c             	add    esp,0xc
c001de50:	6a 0c                	push   0xc
c001de52:	56                   	push   esi
c001de53:	53                   	push   ebx
c001de54:	e8 c5 f8 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001de59:	83 c4 10             	add    esp,0x10
c001de5c:	84 c0                	test   al,al
c001de5e:	0f 84 5f 01 00 00    	je     c001dfc3 <IDE::detect()+0x23d>
c001de64:	31 ff                	xor    edi,edi
c001de66:	50                   	push   eax
c001de67:	6a 0c                	push   0xc
c001de69:	56                   	push   esi
c001de6a:	53                   	push   ebx
c001de6b:	e8 ae f8 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001de70:	83 c4 10             	add    esp,0x10
c001de73:	a8 01                	test   al,0x1
c001de75:	0f 85 69 01 00 00    	jne    c001dfe4 <IDE::detect()+0x25e>
c001de7b:	84 c0                	test   al,al
c001de7d:	78 04                	js     c001de83 <IDE::detect()+0xfd>
c001de7f:	a8 08                	test   al,0x8
c001de81:	75 23                	jne    c001dea6 <IDE::detect()+0x120>
c001de83:	47                   	inc    edi
c001de84:	81 ff 17 01 00 00    	cmp    edi,0x117
c001de8a:	7e da                	jle    c001de66 <IDE::detect()+0xe0>
c001de8c:	83 ec 0c             	sub    esp,0xc
c001de8f:	6a 32                	push   0x32
c001de91:	e8 3e a3 ff ff       	call   c00181d4 <milliTenthSleep(unsigned int)>
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001de9f:	75 c5                	jne    c001de66 <IDE::detect()+0xe0>
c001dea1:	e9 3e 01 00 00       	jmp    c001dfe4 <IDE::detect()+0x25e>
c001dea6:	31 c9                	xor    ecx,ecx
c001dea8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001deac:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001deb0:	83 ec 0c             	sub    esp,0xc
c001deb3:	68 80 00 00 00       	push   0x80
c001deb8:	57                   	push   edi
c001deb9:	6a 00                	push   0x0
c001debb:	56                   	push   esi
c001debc:	53                   	push   ebx
c001debd:	e8 f8 fd ff ff       	call   c001dcba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001dec2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001dec7:	89 e8                	mov    eax,ebp
c001dec9:	89 d1                	mov    ecx,edx
c001decb:	c1 e0 06             	shl    eax,0x6
c001dece:	01 d8                	add    eax,ebx
c001ded0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ded7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001dede:	89 f2                	mov    edx,esi
c001dee0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001dee6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001deea:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001def0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001def4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001defb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001df03:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001df0a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001df12:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001df18:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001df1f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001df25:	8d 54 24 58          	lea    edx,[esp+0x58]
c001df29:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001df2d:	83 c4 20             	add    esp,0x20
c001df30:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001df33:	83 c0 02             	add    eax,0x2
c001df36:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001df3c:	83 c7 02             	add    edi,0x2
c001df3f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001df42:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001df48:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001df4c:	75 e2                	jne    c001df30 <IDE::detect()+0x1aa>
c001df4e:	89 e8                	mov    eax,ebp
c001df50:	c1 e0 06             	shl    eax,0x6
c001df53:	01 d8                	add    eax,ebx
c001df55:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001df5b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001df62:	66 c1 ea 09          	shr    dx,0x9
c001df66:	83 e2 01             	and    edx,0x1
c001df69:	84 c9                	test   cl,cl
c001df6b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001df71:	75 22                	jne    c001df95 <IDE::detect()+0x20f>
c001df73:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001df7a:	74 46                	je     c001dfc2 <IDE::detect()+0x23c>
c001df7c:	83 ec 0c             	sub    esp,0xc
c001df7f:	68 7c 01 00 00       	push   0x17c
c001df84:	e8 3a ba fe ff       	call   c00099c3 <malloc>
c001df89:	89 c7                	mov    edi,eax
c001df8b:	89 04 24             	mov    DWORD PTR [esp],eax
c001df8e:	e8 13 05 00 00       	call   c001e4a6 <ATA::ATA()>
c001df93:	eb 17                	jmp    c001dfac <IDE::detect()+0x226>
c001df95:	83 ec 0c             	sub    esp,0xc
c001df98:	68 80 01 00 00       	push   0x180
c001df9d:	e8 21 ba fe ff       	call   c00099c3 <malloc>
c001dfa2:	89 c7                	mov    edi,eax
c001dfa4:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfa7:	e8 82 0b 00 00       	call   c001eb2e <ATAPI::ATAPI()>
c001dfac:	5a                   	pop    edx
c001dfad:	59                   	pop    ecx
c001dfae:	57                   	push   edi
c001dfaf:	53                   	push   ebx
c001dfb0:	e8 fd fe fe ff       	call   c000deb2 <Device::addChild(Device*)>
c001dfb5:	8b 07                	mov    eax,DWORD PTR [edi]
c001dfb7:	53                   	push   ebx
c001dfb8:	55                   	push   ebp
c001dfb9:	6a 00                	push   0x0
c001dfbb:	57                   	push   edi
c001dfbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dfbf:	83 c4 20             	add    esp,0x20
c001dfc2:	45                   	inc    ebp
c001dfc3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001dfc8:	74 0d                	je     c001dfd7 <IDE::detect()+0x251>
c001dfca:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001dfd2:	e9 e0 fd ff ff       	jmp    c001ddb7 <IDE::detect()+0x31>
c001dfd7:	4e                   	dec    esi
c001dfd8:	74 61                	je     c001e03b <IDE::detect()+0x2b5>
c001dfda:	be 01 00 00 00       	mov    esi,0x1
c001dfdf:	e9 cb fd ff ff       	jmp    c001ddaf <IDE::detect()+0x29>
c001dfe4:	50                   	push   eax
c001dfe5:	6a 04                	push   0x4
c001dfe7:	56                   	push   esi
c001dfe8:	53                   	push   ebx
c001dfe9:	e8 30 f7 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001dfee:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dff2:	83 c4 0c             	add    esp,0xc
c001dff5:	6a 05                	push   0x5
c001dff7:	56                   	push   esi
c001dff8:	53                   	push   ebx
c001dff9:	e8 20 f7 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001dffe:	83 c4 10             	add    esp,0x10
c001e001:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e005:	80 fa 14             	cmp    dl,0x14
c001e008:	75 04                	jne    c001e00e <IDE::detect()+0x288>
c001e00a:	3c eb                	cmp    al,0xeb
c001e00c:	eb 07                	jmp    c001e015 <IDE::detect()+0x28f>
c001e00e:	3c 96                	cmp    al,0x96
c001e010:	75 b1                	jne    c001dfc3 <IDE::detect()+0x23d>
c001e012:	80 fa 69             	cmp    dl,0x69
c001e015:	75 ac                	jne    c001dfc3 <IDE::detect()+0x23d>
c001e017:	68 a1 00 00 00       	push   0xa1
c001e01c:	6a 07                	push   0x7
c001e01e:	56                   	push   esi
c001e01f:	53                   	push   ebx
c001e020:	e8 39 f6 ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e025:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e02c:	e8 a3 a1 ff ff       	call   c00181d4 <milliTenthSleep(unsigned int)>
c001e031:	83 c4 10             	add    esp,0x10
c001e034:	b1 01                	mov    cl,0x1
c001e036:	e9 6d fe ff ff       	jmp    c001dea8 <IDE::detect()+0x122>
c001e03b:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e041:	5b                   	pop    ebx
c001e042:	5e                   	pop    esi
c001e043:	5f                   	pop    edi
c001e044:	5d                   	pop    ebp
c001e045:	c3                   	ret    

c001e046 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e046:	55                   	push   ebp
c001e047:	57                   	push   edi
c001e048:	56                   	push   esi
c001e049:	53                   	push   ebx
c001e04a:	83 ec 1c             	sub    esp,0x1c
c001e04d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e051:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e055:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e059:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e05d:	88 c3                	mov    bl,al
c001e05f:	84 c0                	test   al,al
c001e061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e065:	0f 84 81 00 00 00    	je     c001e0ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e06b:	83 ec 0c             	sub    esp,0xc
c001e06e:	68 b3 4d 02 c0       	push   0xc0024db3
c001e073:	e8 f3 e9 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e078:	83 c4 10             	add    esp,0x10
c001e07b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e07f:	3c 01                	cmp    al,0x1
c001e081:	74 63                	je     c001e0e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e083:	3c 02                	cmp    al,0x2
c001e085:	75 53                	jne    c001e0da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e087:	d1 e6                	shl    esi,1
c001e089:	09 ee                	or     esi,ebp
c001e08b:	50                   	push   eax
c001e08c:	89 f0                	mov    eax,esi
c001e08e:	6a 01                	push   0x1
c001e090:	0f b6 f0             	movzx  esi,al
c001e093:	c1 e6 06             	shl    esi,0x6
c001e096:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e09e:	50                   	push   eax
c001e09f:	57                   	push   edi
c001e0a0:	e8 79 f6 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001e0a5:	83 c4 10             	add    esp,0x10
c001e0a8:	a8 01                	test   al,0x1
c001e0aa:	74 02                	je     c001e0ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e0ac:	b3 07                	mov    bl,0x7
c001e0ae:	a8 02                	test   al,0x2
c001e0b0:	74 02                	je     c001e0b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e0b2:	b3 03                	mov    bl,0x3
c001e0b4:	a8 04                	test   al,0x4
c001e0b6:	74 02                	je     c001e0ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e0b8:	b3 14                	mov    bl,0x14
c001e0ba:	a8 08                	test   al,0x8
c001e0bc:	74 02                	je     c001e0c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e0be:	b3 03                	mov    bl,0x3
c001e0c0:	a8 10                	test   al,0x10
c001e0c2:	74 02                	je     c001e0c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e0c4:	b3 15                	mov    bl,0x15
c001e0c6:	a8 20                	test   al,0x20
c001e0c8:	74 02                	je     c001e0cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e0ca:	b3 03                	mov    bl,0x3
c001e0cc:	a8 40                	test   al,0x40
c001e0ce:	74 02                	je     c001e0d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e0d0:	b3 16                	mov    bl,0x16
c001e0d2:	84 c0                	test   al,al
c001e0d4:	79 16                	jns    c001e0ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0d6:	b3 0d                	mov    bl,0xd
c001e0d8:	eb 12                	jmp    c001e0ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0da:	3c 03                	cmp    al,0x3
c001e0dc:	74 0c                	je     c001e0ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e0de:	3c 04                	cmp    al,0x4
c001e0e0:	75 0a                	jne    c001e0ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0e2:	b3 08                	mov    bl,0x8
c001e0e4:	eb 06                	jmp    c001e0ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0e6:	b3 13                	mov    bl,0x13
c001e0e8:	eb 02                	jmp    c001e0ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0ea:	b3 17                	mov    bl,0x17
c001e0ec:	83 c4 1c             	add    esp,0x1c
c001e0ef:	88 d8                	mov    al,bl
c001e0f1:	5b                   	pop    ebx
c001e0f2:	5e                   	pop    esi
c001e0f3:	5f                   	pop    edi
c001e0f4:	5d                   	pop    ebp
c001e0f5:	c3                   	ret    

c001e0f6 <IDE::polling(unsigned char, unsigned int)>:
c001e0f6:	57                   	push   edi
c001e0f7:	56                   	push   esi
c001e0f8:	53                   	push   ebx
c001e0f9:	bb 04 00 00 00       	mov    ebx,0x4
c001e0fe:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e102:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e107:	52                   	push   edx
c001e108:	6a 0c                	push   0xc
c001e10a:	56                   	push   esi
c001e10b:	57                   	push   edi
c001e10c:	e8 0d f6 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001e111:	83 c4 10             	add    esp,0x10
c001e114:	4b                   	dec    ebx
c001e115:	75 f0                	jne    c001e107 <IDE::polling(unsigned char, unsigned int)+0x11>
c001e117:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e11c:	50                   	push   eax
c001e11d:	6a 0c                	push   0xc
c001e11f:	56                   	push   esi
c001e120:	57                   	push   edi
c001e121:	e8 f8 f5 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001e126:	83 c4 10             	add    esp,0x10
c001e129:	a8 01                	test   al,0x1
c001e12b:	75 17                	jne    c001e144 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e12d:	a8 20                	test   al,0x20
c001e12f:	75 0f                	jne    c001e140 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e131:	4b                   	dec    ebx
c001e132:	74 10                	je     c001e144 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e134:	84 c0                	test   al,al
c001e136:	78 e4                	js     c001e11c <IDE::polling(unsigned char, unsigned int)+0x26>
c001e138:	a8 08                	test   al,0x8
c001e13a:	74 e0                	je     c001e11c <IDE::polling(unsigned char, unsigned int)+0x26>
c001e13c:	31 c0                	xor    eax,eax
c001e13e:	eb 06                	jmp    c001e146 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e140:	b0 01                	mov    al,0x1
c001e142:	eb 02                	jmp    c001e146 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e144:	b0 02                	mov    al,0x2
c001e146:	5b                   	pop    ebx
c001e147:	5e                   	pop    esi
c001e148:	5f                   	pop    edi
c001e149:	c3                   	ret    

c001e14a <SATABus::close(int, int, void*)>:
c001e14a:	31 c0                	xor    eax,eax
c001e14c:	c3                   	ret    
c001e14d:	90                   	nop

c001e14e <SATABus::detect()>:
c001e14e:	c3                   	ret    
c001e14f:	90                   	nop

c001e150 <SATABus::SATABus()>:
c001e150:	83 ec 0c             	sub    esp,0xc
c001e153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e157:	83 ec 08             	sub    esp,0x8
c001e15a:	68 ec 4d 02 c0       	push   0xc0024dec
c001e15f:	50                   	push   eax
c001e160:	e8 fb 00 ff ff       	call   c000e260 <HardDiskController::HardDiskController(char const*)>
c001e165:	83 c4 10             	add    esp,0x10
c001e168:	ba 40 4e 02 c0       	mov    edx,0xc0024e40
c001e16d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e171:	89 10                	mov    DWORD PTR [eax],edx
c001e173:	83 ec 0c             	sub    esp,0xc
c001e176:	6a 50                	push   0x50
c001e178:	e8 9e bd fe ff       	call   c0009f1b <Phys::allocateContiguousPages(int)>
c001e17d:	83 c4 10             	add    esp,0x10
c001e180:	89 c2                	mov    edx,eax
c001e182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e186:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e18c:	83 ec 0c             	sub    esp,0xc
c001e18f:	6a 50                	push   0x50
c001e191:	e8 af d5 fe ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c001e196:	83 c4 10             	add    esp,0x10
c001e199:	89 c2                	mov    edx,eax
c001e19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e19f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e1a5:	a1 b0 62 02 c0       	mov    eax,ds:0xc00262b0
c001e1aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1ae:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e1b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1b8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e1be:	83 ec 0c             	sub    esp,0xc
c001e1c1:	6a 03                	push   0x3
c001e1c3:	6a 50                	push   0x50
c001e1c5:	51                   	push   ecx
c001e1c6:	52                   	push   edx
c001e1c7:	50                   	push   eax
c001e1c8:	e8 15 df fe ff       	call   c000c0e2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e1cd:	83 c4 20             	add    esp,0x20
c001e1d0:	90                   	nop
c001e1d1:	83 c4 0c             	add    esp,0xc
c001e1d4:	c3                   	ret    
c001e1d5:	90                   	nop

c001e1d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1dd:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e1e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e1e3:	09 c2                	or     edx,eax
c001e1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e1ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e1f1:	31 c0                	xor    eax,eax
c001e1f3:	c1 e9 08             	shr    ecx,0x8
c001e1f6:	83 e1 0f             	and    ecx,0xf
c001e1f9:	39 c8                	cmp    eax,ecx
c001e1fb:	74 0a                	je     c001e207 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e1fd:	f6 c2 01             	test   dl,0x1
c001e200:	74 18                	je     c001e21a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e202:	d1 ea                	shr    edx,1
c001e204:	40                   	inc    eax
c001e205:	eb f2                	jmp    c001e1f9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e207:	83 ec 0c             	sub    esp,0xc
c001e20a:	68 10 4e 02 c0       	push   0xc0024e10
c001e20f:	e8 f7 60 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001e214:	83 c4 10             	add    esp,0x10
c001e217:	83 c8 ff             	or     eax,0xffffffff
c001e21a:	83 c4 0c             	add    esp,0xc
c001e21d:	c3                   	ret    

c001e21e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e21e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e222:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e225:	89 c2                	mov    edx,eax
c001e227:	c1 ea 08             	shr    edx,0x8
c001e22a:	83 e2 0f             	and    edx,0xf
c001e22d:	fe ca                	dec    dl
c001e22f:	75 31                	jne    c001e262 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e231:	83 e0 0f             	and    eax,0xf
c001e234:	3c 03                	cmp    al,0x3
c001e236:	75 2a                	jne    c001e262 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e238:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e23b:	b8 02 00 00 00       	mov    eax,0x2
c001e240:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e246:	74 1c                	je     c001e264 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e248:	b8 04 00 00 00       	mov    eax,0x4
c001e24d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e253:	74 0f                	je     c001e264 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e255:	31 c0                	xor    eax,eax
c001e257:	83 fa 03             	cmp    edx,0x3
c001e25a:	0f 94 c0             	sete   al
c001e25d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e261:	c3                   	ret    
c001e262:	31 c0                	xor    eax,eax
c001e264:	c3                   	ret    
c001e265:	90                   	nop

c001e266 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e266:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e26a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e26d:	0f ba e2 0f          	bt     edx,0xf
c001e271:	72 f7                	jb     c001e26a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e273:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e276:	83 ca 10             	or     edx,0x10
c001e279:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e27c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e27f:	83 ca 01             	or     edx,0x1
c001e282:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e285:	c3                   	ret    

c001e286 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e28a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e28d:	83 e2 fe             	and    edx,0xfffffffe
c001e290:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e293:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e296:	83 e2 ef             	and    edx,0xffffffef
c001e299:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e29c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e29f:	0f ba e2 0e          	bt     edx,0xe
c001e2a3:	72 f7                	jb     c001e29c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e2a5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2a8:	0f ba e2 0f          	bt     edx,0xf
c001e2ac:	72 ee                	jb     c001e29c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e2ae:	c3                   	ret    
c001e2af:	90                   	nop

c001e2b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e2b0:	55                   	push   ebp
c001e2b1:	57                   	push   edi
c001e2b2:	56                   	push   esi
c001e2b3:	53                   	push   ebx
c001e2b4:	83 ec 1c             	sub    esp,0x1c
c001e2b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e2bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e2c3:	53                   	push   ebx
c001e2c4:	89 fd                	mov    ebp,edi
c001e2c6:	56                   	push   esi
c001e2c7:	c1 e5 0a             	shl    ebp,0xa
c001e2ca:	e8 b7 ff ff ff       	call   c001e286 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e2cf:	83 ec 0c             	sub    esp,0xc
c001e2d2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e2d8:	01 e8                	add    eax,ebp
c001e2da:	89 03                	mov    DWORD PTR [ebx],eax
c001e2dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2de:	68 00 04 00 00       	push   0x400
c001e2e3:	6a 00                	push   0x0
c001e2e5:	50                   	push   eax
c001e2e6:	e8 99 23 fe ff       	call   c0000684 <memset>
c001e2eb:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e2f1:	89 fa                	mov    edx,edi
c001e2f3:	01 e8                	add    eax,ebp
c001e2f5:	c1 e7 0d             	shl    edi,0xd
c001e2f8:	89 03                	mov    DWORD PTR [ebx],eax
c001e2fa:	c1 e2 08             	shl    edx,0x8
c001e2fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e304:	81 c2 00 80 00 00    	add    edx,0x8000
c001e30a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e30e:	89 d0                	mov    eax,edx
c001e310:	83 c4 1c             	add    esp,0x1c
c001e313:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e319:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e31c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e31f:	68 00 01 00 00       	push   0x100
c001e324:	6a 00                	push   0x0
c001e326:	50                   	push   eax
c001e327:	e8 58 23 fe ff       	call   c0000684 <memset>
c001e32c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e330:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e336:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e33c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e340:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e343:	83 c4 10             	add    esp,0x10
c001e346:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e34d:	31 ff                	xor    edi,edi
c001e34f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e355:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e35b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e35f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e365:	83 c5 20             	add    ebp,0x20
c001e368:	01 f8                	add    eax,edi
c001e36a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e36d:	52                   	push   edx
c001e36e:	68 00 01 00 00       	push   0x100
c001e373:	6a 00                	push   0x0
c001e375:	50                   	push   eax
c001e376:	e8 09 23 fe ff       	call   c0000684 <memset>
c001e37b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e37f:	83 c4 10             	add    esp,0x10
c001e382:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e388:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e38f:	01 f8                	add    eax,edi
c001e391:	81 c7 00 01 00 00    	add    edi,0x100
c001e397:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e39a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e3a0:	75 b3                	jne    c001e355 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e3a2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e3a6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e3aa:	83 c4 1c             	add    esp,0x1c
c001e3ad:	5b                   	pop    ebx
c001e3ae:	5e                   	pop    esi
c001e3af:	5f                   	pop    edi
c001e3b0:	5d                   	pop    ebp
c001e3b1:	e9 b0 fe ff ff       	jmp    c001e266 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e3b6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e3b6:	55                   	push   ebp
c001e3b7:	57                   	push   edi
c001e3b8:	56                   	push   esi
c001e3b9:	53                   	push   ebx
c001e3ba:	31 db                	xor    ebx,ebx
c001e3bc:	83 ec 0c             	sub    esp,0xc
c001e3bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e3c3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e3c7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e3ca:	f7 c7 01 00 00 00    	test   edi,0x1
c001e3d0:	74 7a                	je     c001e44c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e3d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e3d6:	89 d8                	mov    eax,ebx
c001e3d8:	c1 e0 07             	shl    eax,0x7
c001e3db:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e3e2:	55                   	push   ebp
c001e3e3:	56                   	push   esi
c001e3e4:	e8 35 fe ff ff       	call   c001e21e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e3e9:	5a                   	pop    edx
c001e3ea:	83 f8 01             	cmp    eax,0x1
c001e3ed:	59                   	pop    ecx
c001e3ee:	75 21                	jne    c001e411 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e3f0:	50                   	push   eax
c001e3f1:	53                   	push   ebx
c001e3f2:	55                   	push   ebp
c001e3f3:	56                   	push   esi
c001e3f4:	e8 b7 fe ff ff       	call   c001e2b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e3f9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e400:	e8 be b5 fe ff       	call   c00099c3 <malloc>
c001e405:	89 c5                	mov    ebp,eax
c001e407:	89 04 24             	mov    DWORD PTR [esp],eax
c001e40a:	e8 7f 0d 00 00       	call   c001f18e <SATA::SATA()>
c001e40f:	eb 24                	jmp    c001e435 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e411:	83 f8 04             	cmp    eax,0x4
c001e414:	75 36                	jne    c001e44c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e416:	51                   	push   ecx
c001e417:	53                   	push   ebx
c001e418:	55                   	push   ebp
c001e419:	56                   	push   esi
c001e41a:	e8 91 fe ff ff       	call   c001e2b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e41f:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e426:	e8 98 b5 fe ff       	call   c00099c3 <malloc>
c001e42b:	89 c5                	mov    ebp,eax
c001e42d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e430:	e8 cf 10 00 00       	call   c001f504 <SATAPI::SATAPI()>
c001e435:	58                   	pop    eax
c001e436:	5a                   	pop    edx
c001e437:	55                   	push   ebp
c001e438:	56                   	push   esi
c001e439:	e8 74 fa fe ff       	call   c000deb2 <Device::addChild(Device*)>
c001e43e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e441:	56                   	push   esi
c001e442:	6a 00                	push   0x0
c001e444:	53                   	push   ebx
c001e445:	55                   	push   ebp
c001e446:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e449:	83 c4 20             	add    esp,0x20
c001e44c:	d1 ef                	shr    edi,1
c001e44e:	43                   	inc    ebx
c001e44f:	83 fb 20             	cmp    ebx,0x20
c001e452:	0f 85 72 ff ff ff    	jne    c001e3ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e458:	83 c4 0c             	add    esp,0xc
c001e45b:	5b                   	pop    ebx
c001e45c:	5e                   	pop    esi
c001e45d:	5f                   	pop    edi
c001e45e:	5d                   	pop    ebp
c001e45f:	c3                   	ret    

c001e460 <SATABus::open(int, int, void*)>:
c001e460:	83 ec 14             	sub    esp,0x14
c001e463:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e467:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e46d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e473:	52                   	push   edx
c001e474:	50                   	push   eax
c001e475:	e8 3c ff ff ff       	call   c001e3b6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e47a:	31 c0                	xor    eax,eax
c001e47c:	83 c4 1c             	add    esp,0x1c
c001e47f:	c3                   	ret    

c001e480 <ATA::close(int, int, void*)>:
c001e480:	83 ec 0c             	sub    esp,0xc
c001e483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e487:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e48d:	85 c0                	test   eax,eax
c001e48f:	74 0c                	je     c001e49d <ATA::close(int, int, void*)+0x1d>
c001e491:	83 ec 0c             	sub    esp,0xc
c001e494:	8b 10                	mov    edx,DWORD PTR [eax]
c001e496:	50                   	push   eax
c001e497:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e49a:	83 c4 10             	add    esp,0x10
c001e49d:	31 c0                	xor    eax,eax
c001e49f:	83 c4 0c             	add    esp,0xc
c001e4a2:	c3                   	ret    
c001e4a3:	90                   	nop

c001e4a4 <ATA::powerSaving(PowerSavingLevel)>:
c001e4a4:	c3                   	ret    
c001e4a5:	90                   	nop

c001e4a6 <ATA::ATA()>:
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ad:	83 ec 04             	sub    esp,0x4
c001e4b0:	68 00 02 00 00       	push   0x200
c001e4b5:	68 35 4f 02 c0       	push   0xc0024f35
c001e4ba:	50                   	push   eax
c001e4bb:	e8 2a fe fe ff       	call   c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e4c0:	83 c4 10             	add    esp,0x10
c001e4c3:	ba b8 4e 02 c0       	mov    edx,0xc0024eb8
c001e4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4cc:	89 10                	mov    DWORD PTR [eax],edx
c001e4ce:	90                   	nop
c001e4cf:	83 c4 0c             	add    esp,0xc
c001e4d2:	c3                   	ret    
c001e4d3:	90                   	nop

c001e4d4 <ATA::flush(bool)>:
c001e4d4:	53                   	push   ebx
c001e4d5:	83 ec 08             	sub    esp,0x8
c001e4d8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e4dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4e1:	19 c0                	sbb    eax,eax
c001e4e3:	83 e0 fd             	and    eax,0xfffffffd
c001e4e6:	05 ea 00 00 00       	add    eax,0xea
c001e4eb:	50                   	push   eax
c001e4ec:	6a 07                	push   0x7
c001e4ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e4f5:	50                   	push   eax
c001e4f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e4fc:	e8 5d f1 ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e501:	83 c4 0c             	add    esp,0xc
c001e504:	6a 00                	push   0x0
c001e506:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e50d:	50                   	push   eax
c001e50e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e514:	e8 dd fb ff ff       	call   c001e0f6 <IDE::polling(unsigned char, unsigned int)>
c001e519:	83 c4 18             	add    esp,0x18
c001e51c:	5b                   	pop    ebx
c001e51d:	c3                   	ret    

c001e51e <ATA::readyForCommand()>:
c001e51e:	56                   	push   esi
c001e51f:	53                   	push   ebx
c001e520:	53                   	push   ebx
c001e521:	31 db                	xor    ebx,ebx
c001e523:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e527:	51                   	push   ecx
c001e528:	6a 0c                	push   0xc
c001e52a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e531:	50                   	push   eax
c001e532:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e538:	e8 e1 f1 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001e53d:	83 c4 10             	add    esp,0x10
c001e540:	a8 88                	test   al,0x88
c001e542:	74 1f                	je     c001e563 <ATA::readyForCommand()+0x45>
c001e544:	43                   	inc    ebx
c001e545:	83 fb 63             	cmp    ebx,0x63
c001e548:	7e dd                	jle    c001e527 <ATA::readyForCommand()+0x9>
c001e54a:	83 ec 0c             	sub    esp,0xc
c001e54d:	6a 0a                	push   0xa
c001e54f:	e8 80 9c ff ff       	call   c00181d4 <milliTenthSleep(unsigned int)>
c001e554:	83 c4 10             	add    esp,0x10
c001e557:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e55d:	75 c8                	jne    c001e527 <ATA::readyForCommand()+0x9>
c001e55f:	31 c0                	xor    eax,eax
c001e561:	eb 02                	jmp    c001e565 <ATA::readyForCommand()+0x47>
c001e563:	b0 01                	mov    al,0x1
c001e565:	5a                   	pop    edx
c001e566:	5b                   	pop    ebx
c001e567:	5e                   	pop    esi
c001e568:	c3                   	ret    
c001e569:	90                   	nop

c001e56a <ATA::access(unsigned long long, int, void*, bool)>:
c001e56a:	55                   	push   ebp
c001e56b:	57                   	push   edi
c001e56c:	56                   	push   esi
c001e56d:	53                   	push   ebx
c001e56e:	83 ec 38             	sub    esp,0x38
c001e571:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e575:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e579:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e57d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e581:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e585:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e589:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e58d:	68 64 4e 02 c0       	push   0xc0024e64
c001e592:	e8 d4 e4 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e597:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e59d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e5a1:	83 c4 10             	add    esp,0x10
c001e5a4:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e5aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e5ae:	c1 e0 06             	shl    eax,0x6
c001e5b1:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e5b9:	74 5d                	je     c001e618 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e5bb:	89 fa                	mov    edx,edi
c001e5bd:	89 f0                	mov    eax,esi
c001e5bf:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e5c3:	c1 ea 1c             	shr    edx,0x1c
c001e5c6:	89 d1                	mov    ecx,edx
c001e5c8:	09 c1                	or     ecx,eax
c001e5ca:	74 25                	je     c001e5f1 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e5cc:	31 ed                	xor    ebp,ebp
c001e5ce:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e5d5:	89 fa                	mov    edx,edi
c001e5d7:	89 f0                	mov    eax,esi
c001e5d9:	0f ad d0             	shrd   eax,edx,cl
c001e5dc:	d3 ea                	shr    edx,cl
c001e5de:	f6 c1 20             	test   cl,0x20
c001e5e1:	74 02                	je     c001e5e5 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e5e3:	89 d0                	mov    eax,edx
c001e5e5:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e5e9:	45                   	inc    ebp
c001e5ea:	83 fd 06             	cmp    ebp,0x6
c001e5ed:	75 df                	jne    c001e5ce <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e5ef:	eb 76                	jmp    c001e667 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e5f1:	89 f0                	mov    eax,esi
c001e5f3:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e5f8:	89 fa                	mov    edx,edi
c001e5fa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e601:	0f ac d0 10          	shrd   eax,edx,0x10
c001e605:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e60a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e60e:	c1 ee 18             	shr    esi,0x18
c001e611:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e616:	eb 56                	jmp    c001e66e <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e618:	6a 00                	push   0x0
c001e61a:	6a 3f                	push   0x3f
c001e61c:	57                   	push   edi
c001e61d:	56                   	push   esi
c001e61e:	e8 91 29 00 00       	call   c0020fb4 <__umoddi3>
c001e623:	83 c4 10             	add    esp,0x10
c001e626:	40                   	inc    eax
c001e627:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e62b:	6a 00                	push   0x0
c001e62d:	68 f0 03 00 00       	push   0x3f0
c001e632:	57                   	push   edi
c001e633:	56                   	push   esi
c001e634:	e8 7b 28 00 00       	call   c0020eb4 <__udivdi3>
c001e639:	83 c4 10             	add    esp,0x10
c001e63c:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e641:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e648:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e64d:	6a 00                	push   0x0
c001e64f:	6a 3f                	push   0x3f
c001e651:	57                   	push   edi
c001e652:	56                   	push   esi
c001e653:	e8 5c 28 00 00       	call   c0020eb4 <__udivdi3>
c001e658:	83 c4 10             	add    esp,0x10
c001e65b:	89 c6                	mov    esi,eax
c001e65d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e662:	83 e6 0f             	and    esi,0xf
c001e665:	eb 07                	jmp    c001e66e <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e667:	31 f6                	xor    esi,esi
c001e669:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e66e:	bf 01 00 00 00       	mov    edi,0x1
c001e673:	50                   	push   eax
c001e674:	6a 00                	push   0x0
c001e676:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e67d:	50                   	push   eax
c001e67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e682:	e8 df f1 ff ff       	call   c001d866 <IDE::enableIRQs(unsigned char, bool)>
c001e687:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e68a:	e8 8f fe ff ff       	call   c001e51e <ATA::readyForCommand()>
c001e68f:	83 c4 10             	add    esp,0x10
c001e692:	84 c0                	test   al,al
c001e694:	0f 84 bc 02 00 00    	je     c001e956 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e69a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e6a0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e6a6:	c1 e0 04             	shl    eax,0x4
c001e6a9:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e6b0:	09 c6                	or     esi,eax
c001e6b2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e6b7:	75 05                	jne    c001e6be <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e6b9:	83 ce a0             	or     esi,0xffffffa0
c001e6bc:	eb 03                	jmp    c001e6c1 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e6be:	83 ce e0             	or     esi,0xffffffe0
c001e6c1:	89 f0                	mov    eax,esi
c001e6c3:	0f b6 f0             	movzx  esi,al
c001e6c6:	56                   	push   esi
c001e6c7:	6a 06                	push   0x6
c001e6c9:	51                   	push   ecx
c001e6ca:	52                   	push   edx
c001e6cb:	e8 8e ef ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6d0:	83 c4 10             	add    esp,0x10
c001e6d3:	6a 00                	push   0x0
c001e6d5:	6a 01                	push   0x1
c001e6d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6de:	50                   	push   eax
c001e6df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e6e5:	e8 74 ef ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6ea:	83 c4 10             	add    esp,0x10
c001e6ed:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e6f2:	75 6e                	jne    c001e762 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e6f4:	6a 00                	push   0x0
c001e6f6:	6a 08                	push   0x8
c001e6f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6ff:	50                   	push   eax
c001e700:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e706:	e8 53 ef ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e70b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e710:	50                   	push   eax
c001e711:	6a 09                	push   0x9
c001e713:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e71a:	50                   	push   eax
c001e71b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e721:	e8 38 ef ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e726:	83 c4 20             	add    esp,0x20
c001e729:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e72e:	50                   	push   eax
c001e72f:	6a 0a                	push   0xa
c001e731:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e738:	50                   	push   eax
c001e739:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e73f:	e8 1a ef ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e744:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e749:	50                   	push   eax
c001e74a:	6a 0b                	push   0xb
c001e74c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e753:	50                   	push   eax
c001e754:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e75a:	e8 ff ee ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e75f:	83 c4 20             	add    esp,0x20
c001e762:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e767:	50                   	push   eax
c001e768:	6a 02                	push   0x2
c001e76a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e771:	50                   	push   eax
c001e772:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e778:	e8 e1 ee ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e77d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e782:	50                   	push   eax
c001e783:	6a 03                	push   0x3
c001e785:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e78c:	50                   	push   eax
c001e78d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e793:	e8 c6 ee ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e798:	83 c4 20             	add    esp,0x20
c001e79b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e7a0:	50                   	push   eax
c001e7a1:	6a 04                	push   0x4
c001e7a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7aa:	50                   	push   eax
c001e7ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7b1:	e8 a8 ee ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7b6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7bb:	50                   	push   eax
c001e7bc:	6a 05                	push   0x5
c001e7be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7c5:	50                   	push   eax
c001e7c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7cc:	e8 8d ee ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7d1:	83 c4 20             	add    esp,0x20
c001e7d4:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e7d9:	0f 94 c0             	sete   al
c001e7dc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e7e1:	74 09                	je     c001e7ec <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e7e3:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e7ea:	eb 07                	jmp    c001e7f3 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e7ec:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e7f3:	0f b6 c0             	movzx  eax,al
c001e7f6:	50                   	push   eax
c001e7f7:	6a 07                	push   0x7
c001e7f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e800:	50                   	push   eax
c001e801:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e807:	e8 52 ee ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e80c:	c7 04 24 71 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e71
c001e813:	e8 53 e2 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e818:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e81c:	83 c4 10             	add    esp,0x10
c001e81f:	85 f6                	test   esi,esi
c001e821:	0f 84 f7 00 00 00    	je     c001e91e <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e827:	83 ec 0c             	sub    esp,0xc
c001e82a:	68 74 4e 02 c0       	push   0xc0024e74
c001e82f:	e8 37 e2 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e834:	83 c4 0c             	add    esp,0xc
c001e837:	6a 01                	push   0x1
c001e839:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e840:	50                   	push   eax
c001e841:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e847:	e8 aa f8 ff ff       	call   c001e0f6 <IDE::polling(unsigned char, unsigned int)>
c001e84c:	c7 04 24 77 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e77
c001e853:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e857:	e8 0f e2 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e85c:	83 c4 10             	add    esp,0x10
c001e85f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e863:	84 c0                	test   al,al
c001e865:	74 2b                	je     c001e892 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e867:	0f b6 f8             	movzx  edi,al
c001e86a:	57                   	push   edi
c001e86b:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e872:	50                   	push   eax
c001e873:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e87a:	50                   	push   eax
c001e87b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e881:	e8 c0 f7 ff ff       	call   c001e046 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e886:	c7 04 24 7a 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e7a
c001e88d:	e9 bc 00 00 00       	jmp    c001e94e <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e892:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e897:	74 50                	je     c001e8e9 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e899:	83 ec 0c             	sub    esp,0xc
c001e89c:	31 ed                	xor    ebp,ebp
c001e89e:	68 85 4e 02 c0       	push   0xc0024e85
c001e8a3:	e8 c3 e1 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e8a8:	83 c4 10             	add    esp,0x10
c001e8ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e8af:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e8b3:	50                   	push   eax
c001e8b4:	50                   	push   eax
c001e8b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8bc:	50                   	push   eax
c001e8bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8c3:	e8 84 ed ff ff       	call   c001d64c <IDE::getBase(unsigned char)>
c001e8c8:	89 c2                	mov    edx,eax
c001e8ca:	89 f8                	mov    eax,edi
c001e8cc:	66 ef                	out    dx,ax
c001e8ce:	45                   	inc    ebp
c001e8cf:	83 c4 10             	add    esp,0x10
c001e8d2:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e8d8:	75 d1                	jne    c001e8ab <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e8da:	83 ec 0c             	sub    esp,0xc
c001e8dd:	68 88 4e 02 c0       	push   0xc0024e88
c001e8e2:	e8 84 e1 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e8e7:	eb 24                	jmp    c001e90d <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e8e9:	51                   	push   ecx
c001e8ea:	51                   	push   ecx
c001e8eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8f2:	50                   	push   eax
c001e8f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8f9:	e8 4e ed ff ff       	call   c001d64c <IDE::getBase(unsigned char)>
c001e8fe:	b9 00 01 00 00       	mov    ecx,0x100
c001e903:	89 c2                	mov    edx,eax
c001e905:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e909:	fc                   	cld    
c001e90a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e90d:	83 c4 10             	add    esp,0x10
c001e910:	4e                   	dec    esi
c001e911:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e919:	e9 01 ff ff ff       	jmp    c001e81f <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e91e:	31 ff                	xor    edi,edi
c001e920:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e925:	74 2f                	je     c001e956 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e927:	83 ec 0c             	sub    esp,0xc
c001e92a:	68 8b 4e 02 c0       	push   0xc0024e8b
c001e92f:	e8 37 e1 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e934:	58                   	pop    eax
c001e935:	31 c0                	xor    eax,eax
c001e937:	5a                   	pop    edx
c001e938:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e93d:	0f 94 c0             	sete   al
c001e940:	50                   	push   eax
c001e941:	53                   	push   ebx
c001e942:	e8 8d fb ff ff       	call   c001e4d4 <ATA::flush(bool)>
c001e947:	c7 04 24 8e 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e8e
c001e94e:	e8 18 e1 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e953:	83 c4 10             	add    esp,0x10
c001e956:	83 c4 2c             	add    esp,0x2c
c001e959:	89 f8                	mov    eax,edi
c001e95b:	5b                   	pop    ebx
c001e95c:	5e                   	pop    esi
c001e95d:	5f                   	pop    edi
c001e95e:	5d                   	pop    ebp
c001e95f:	c3                   	ret    

c001e960 <ATA::read(unsigned long long, int, void*)>:
c001e960:	57                   	push   edi
c001e961:	b8 04 00 00 00       	mov    eax,0x4
c001e966:	56                   	push   esi
c001e967:	53                   	push   ebx
c001e968:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e96c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e970:	8d 7a ff             	lea    edi,[edx-0x1]
c001e973:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e977:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e97b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e981:	77 25                	ja     c001e9a8 <ATA::read(unsigned long long, int, void*)+0x48>
c001e983:	b8 06 00 00 00       	mov    eax,0x6
c001e988:	85 f6                	test   esi,esi
c001e98a:	74 1c                	je     c001e9a8 <ATA::read(unsigned long long, int, void*)+0x48>
c001e98c:	50                   	push   eax
c001e98d:	50                   	push   eax
c001e98e:	6a 00                	push   0x0
c001e990:	56                   	push   esi
c001e991:	52                   	push   edx
c001e992:	53                   	push   ebx
c001e993:	51                   	push   ecx
c001e994:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e998:	e8 cd fb ff ff       	call   c001e56a <ATA::access(unsigned long long, int, void*, bool)>
c001e99d:	83 c4 20             	add    esp,0x20
c001e9a0:	85 c0                	test   eax,eax
c001e9a2:	0f 95 c0             	setne  al
c001e9a5:	0f b6 c0             	movzx  eax,al
c001e9a8:	5b                   	pop    ebx
c001e9a9:	5e                   	pop    esi
c001e9aa:	5f                   	pop    edi
c001e9ab:	c3                   	ret    

c001e9ac <ATA::write(unsigned long long, int, void*)>:
c001e9ac:	55                   	push   ebp
c001e9ad:	57                   	push   edi
c001e9ae:	56                   	push   esi
c001e9af:	53                   	push   ebx
c001e9b0:	83 ec 18             	sub    esp,0x18
c001e9b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e9b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e9bb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e9bf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e9c3:	68 91 4e 02 c0       	push   0xc0024e91
c001e9c8:	e8 9e e0 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001e9cd:	8d 53 ff             	lea    edx,[ebx-0x1]
c001e9d0:	83 c4 10             	add    esp,0x10
c001e9d3:	b8 04 00 00 00       	mov    eax,0x4
c001e9d8:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001e9de:	77 25                	ja     c001ea05 <ATA::write(unsigned long long, int, void*)+0x59>
c001e9e0:	b8 06 00 00 00       	mov    eax,0x6
c001e9e5:	85 f6                	test   esi,esi
c001e9e7:	74 1c                	je     c001ea05 <ATA::write(unsigned long long, int, void*)+0x59>
c001e9e9:	50                   	push   eax
c001e9ea:	50                   	push   eax
c001e9eb:	6a 01                	push   0x1
c001e9ed:	56                   	push   esi
c001e9ee:	53                   	push   ebx
c001e9ef:	55                   	push   ebp
c001e9f0:	57                   	push   edi
c001e9f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e9f5:	e8 70 fb ff ff       	call   c001e56a <ATA::access(unsigned long long, int, void*, bool)>
c001e9fa:	83 c4 20             	add    esp,0x20
c001e9fd:	85 c0                	test   eax,eax
c001e9ff:	0f 95 c0             	setne  al
c001ea02:	0f b6 c0             	movzx  eax,al
c001ea05:	83 c4 0c             	add    esp,0xc
c001ea08:	5b                   	pop    ebx
c001ea09:	5e                   	pop    esi
c001ea0a:	5f                   	pop    edi
c001ea0b:	5d                   	pop    ebp
c001ea0c:	c3                   	ret    
c001ea0d:	90                   	nop

c001ea0e <ATA::detectCHS()>:
c001ea0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea12:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ea18:	c1 e0 06             	shl    eax,0x6
c001ea1b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ea21:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ea2b:	c7 44 24 04 9d 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e9d
c001ea33:	e9 d3 58 ff ff       	jmp    c001430b <Krnl::panic(char const*)>

c001ea38 <ATA::open(int, int, void*)>:
c001ea38:	53                   	push   ebx
c001ea39:	83 ec 08             	sub    esp,0x8
c001ea3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea48:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ea4e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ea54:	c1 e0 06             	shl    eax,0x6
c001ea57:	01 d0                	add    eax,edx
c001ea59:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ea60:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ea66:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ea6d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ea77:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ea7d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ea84:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ea8b:	75 0c                	jne    c001ea99 <ATA::open(int, int, void*)+0x61>
c001ea8d:	83 ec 0c             	sub    esp,0xc
c001ea90:	53                   	push   ebx
c001ea91:	e8 78 ff ff ff       	call   c001ea0e <ATA::detectCHS()>
c001ea96:	83 c4 10             	add    esp,0x10
c001ea99:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ea9f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eaa5:	c1 e0 06             	shl    eax,0x6
c001eaa8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eaaf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eab9:	d1 e8                	shr    eax,1
c001eabb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eac1:	6a 04                	push   0x4
c001eac3:	6a 0c                	push   0xc
c001eac5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eacc:	50                   	push   eax
c001eacd:	52                   	push   edx
c001eace:	e8 8b eb ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ead3:	90                   	nop
c001ead4:	90                   	nop
c001ead5:	6a 00                	push   0x0
c001ead7:	6a 0c                	push   0xc
c001ead9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eae0:	50                   	push   eax
c001eae1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eae7:	e8 72 eb ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaec:	83 c4 14             	add    esp,0x14
c001eaef:	53                   	push   ebx
c001eaf0:	e8 5d f8 fe ff       	call   c000e352 <PhysicalDisk::startCache()>
c001eaf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eaf8:	e8 91 18 ff ff       	call   c001038e <createPartitionsForDisk(PhysicalDisk*)>
c001eafd:	31 c0                	xor    eax,eax
c001eaff:	83 c4 18             	add    esp,0x18
c001eb02:	5b                   	pop    ebx
c001eb03:	c3                   	ret    

c001eb04 <ATAPI::write(unsigned long long, int, void*)>:
c001eb04:	b8 03 00 00 00       	mov    eax,0x3
c001eb09:	c3                   	ret    

c001eb0a <ATAPI::close(int, int, void*)>:
c001eb0a:	83 ec 0c             	sub    esp,0xc
c001eb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb11:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb17:	85 c0                	test   eax,eax
c001eb19:	74 0c                	je     c001eb27 <ATAPI::close(int, int, void*)+0x1d>
c001eb1b:	83 ec 0c             	sub    esp,0xc
c001eb1e:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb20:	50                   	push   eax
c001eb21:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eb24:	83 c4 10             	add    esp,0x10
c001eb27:	31 c0                	xor    eax,eax
c001eb29:	83 c4 0c             	add    esp,0xc
c001eb2c:	c3                   	ret    
c001eb2d:	90                   	nop

c001eb2e <ATAPI::ATAPI()>:
c001eb2e:	83 ec 0c             	sub    esp,0xc
c001eb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb35:	83 ec 04             	sub    esp,0x4
c001eb38:	68 00 08 00 00       	push   0x800
c001eb3d:	68 d5 4f 02 c0       	push   0xc0024fd5
c001eb42:	50                   	push   eax
c001eb43:	e8 a2 f7 fe ff       	call   c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001eb48:	83 c4 10             	add    esp,0x10
c001eb4b:	ba f0 4e 02 c0       	mov    edx,0xc0024ef0
c001eb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb54:	89 10                	mov    DWORD PTR [eax],edx
c001eb56:	90                   	nop
c001eb57:	83 c4 0c             	add    esp,0xc
c001eb5a:	c3                   	ret    
c001eb5b:	90                   	nop

c001eb5c <ATAPI::readyForCommand()>:
c001eb5c:	56                   	push   esi
c001eb5d:	53                   	push   ebx
c001eb5e:	53                   	push   ebx
c001eb5f:	31 db                	xor    ebx,ebx
c001eb61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb65:	51                   	push   ecx
c001eb66:	6a 0c                	push   0xc
c001eb68:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001eb6f:	50                   	push   eax
c001eb70:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001eb76:	e8 a3 eb ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001eb7b:	83 c4 10             	add    esp,0x10
c001eb7e:	a8 88                	test   al,0x88
c001eb80:	74 1f                	je     c001eba1 <ATAPI::readyForCommand()+0x45>
c001eb82:	43                   	inc    ebx
c001eb83:	83 fb 63             	cmp    ebx,0x63
c001eb86:	7e dd                	jle    c001eb65 <ATAPI::readyForCommand()+0x9>
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	6a 0a                	push   0xa
c001eb8d:	e8 42 96 ff ff       	call   c00181d4 <milliTenthSleep(unsigned int)>
c001eb92:	83 c4 10             	add    esp,0x10
c001eb95:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001eb9b:	75 c8                	jne    c001eb65 <ATAPI::readyForCommand()+0x9>
c001eb9d:	31 c0                	xor    eax,eax
c001eb9f:	eb 02                	jmp    c001eba3 <ATAPI::readyForCommand()+0x47>
c001eba1:	b0 01                	mov    al,0x1
c001eba3:	5a                   	pop    edx
c001eba4:	5b                   	pop    ebx
c001eba5:	5e                   	pop    esi
c001eba6:	c3                   	ret    
c001eba7:	90                   	nop

c001eba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001eba8:	55                   	push   ebp
c001eba9:	57                   	push   edi
c001ebaa:	56                   	push   esi
c001ebab:	53                   	push   ebx
c001ebac:	83 ec 20             	sub    esp,0x20
c001ebaf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ebb3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ebb7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ebbb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebbf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ebc3:	6a 01                	push   0x1
c001ebc5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ebcc:	50                   	push   eax
c001ebcd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ebd3:	e8 8e ec ff ff       	call   c001d866 <IDE::enableIRQs(unsigned char, bool)>
c001ebd8:	5e                   	pop    esi
c001ebd9:	58                   	pop    eax
c001ebda:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ebe1:	50                   	push   eax
c001ebe2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ebe8:	e8 4b ea ff ff       	call   c001d638 <IDE::prepareInterrupt(unsigned char)>
c001ebed:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ebf0:	e8 67 ff ff ff       	call   c001eb5c <ATAPI::readyForCommand()>
c001ebf5:	83 c4 10             	add    esp,0x10
c001ebf8:	84 c0                	test   al,al
c001ebfa:	75 0a                	jne    c001ec06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ebfc:	bb 01 00 00 00       	mov    ebx,0x1
c001ec01:	e9 57 02 00 00       	jmp    c001ee5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ec06:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ec0c:	c1 e0 04             	shl    eax,0x4
c001ec0f:	0f b6 c0             	movzx  eax,al
c001ec12:	50                   	push   eax
c001ec13:	6a 06                	push   0x6
c001ec15:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec1c:	50                   	push   eax
c001ec1d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec23:	e8 36 ea ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec28:	6a 00                	push   0x0
c001ec2a:	6a 01                	push   0x1
c001ec2c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec33:	50                   	push   eax
c001ec34:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec3a:	e8 1f ea ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec3f:	83 c4 20             	add    esp,0x20
c001ec42:	0f b6 c3             	movzx  eax,bl
c001ec45:	0f b6 df             	movzx  ebx,bh
c001ec48:	50                   	push   eax
c001ec49:	6a 04                	push   0x4
c001ec4b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec52:	50                   	push   eax
c001ec53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec59:	e8 00 ea ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec5e:	53                   	push   ebx
c001ec5f:	6a 05                	push   0x5
c001ec61:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec68:	50                   	push   eax
c001ec69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec6f:	e8 ea e9 ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec74:	83 c4 20             	add    esp,0x20
c001ec77:	68 a0 00 00 00       	push   0xa0
c001ec7c:	6a 07                	push   0x7
c001ec7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec85:	50                   	push   eax
c001ec86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec8c:	e8 cd e9 ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec91:	83 c4 0c             	add    esp,0xc
c001ec94:	6a 01                	push   0x1
c001ec96:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec9d:	50                   	push   eax
c001ec9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eca4:	e8 4d f4 ff ff       	call   c001e0f6 <IDE::polling(unsigned char, unsigned int)>
c001eca9:	83 c4 10             	add    esp,0x10
c001ecac:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ecb2:	84 c0                	test   al,al
c001ecb4:	74 23                	je     c001ecd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ecb6:	0f b6 d8             	movzx  ebx,al
c001ecb9:	0f b6 d2             	movzx  edx,dl
c001ecbc:	53                   	push   ebx
c001ecbd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ecc4:	50                   	push   eax
c001ecc5:	52                   	push   edx
c001ecc6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eccc:	e8 75 f3 ff ff       	call   c001e046 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ecd1:	83 c4 10             	add    esp,0x10
c001ecd4:	e9 84 01 00 00       	jmp    c001ee5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ecd9:	0f b6 d2             	movzx  edx,dl
c001ecdc:	53                   	push   ebx
c001ecdd:	53                   	push   ebx
c001ecde:	52                   	push   edx
c001ecdf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ece5:	e8 62 e9 ff ff       	call   c001d64c <IDE::getBase(unsigned char)>
c001ecea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ecee:	b9 06 00 00 00       	mov    ecx,0x6
c001ecf3:	89 c2                	mov    edx,eax
c001ecf5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ecf8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ecfc:	83 c4 10             	add    esp,0x10
c001ecff:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ed05:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed0c:	85 db                	test   ebx,ebx
c001ed0e:	0f 84 ec 00 00 00    	je     c001ee00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ed14:	51                   	push   ecx
c001ed15:	51                   	push   ecx
c001ed16:	52                   	push   edx
c001ed17:	50                   	push   eax
c001ed18:	e8 af ea ff ff       	call   c001d7cc <IDE::waitInterrupt(unsigned char)>
c001ed1d:	83 c4 10             	add    esp,0x10
c001ed20:	84 c0                	test   al,al
c001ed22:	0f 84 d4 fe ff ff    	je     c001ebfc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ed28:	56                   	push   esi
c001ed29:	56                   	push   esi
c001ed2a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed31:	50                   	push   eax
c001ed32:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed38:	e8 fb e8 ff ff       	call   c001d638 <IDE::prepareInterrupt(unsigned char)>
c001ed3d:	83 c4 0c             	add    esp,0xc
c001ed40:	6a 04                	push   0x4
c001ed42:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed49:	50                   	push   eax
c001ed4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed50:	e8 c9 e9 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001ed55:	83 c4 0c             	add    esp,0xc
c001ed58:	89 c6                	mov    esi,eax
c001ed5a:	6a 05                	push   0x5
c001ed5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed63:	50                   	push   eax
c001ed64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed6a:	e8 af e9 ff ff       	call   c001d71e <IDE::read(unsigned char, unsigned char)>
c001ed6f:	89 f1                	mov    ecx,esi
c001ed71:	0f b6 c0             	movzx  eax,al
c001ed74:	0f b6 f1             	movzx  esi,cl
c001ed77:	c1 e0 08             	shl    eax,0x8
c001ed7a:	09 c6                	or     esi,eax
c001ed7c:	d1 fe                	sar    esi,1
c001ed7e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ed82:	83 c4 10             	add    esp,0x10
c001ed85:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ed8a:	74 41                	je     c001edcd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ed8c:	31 c9                	xor    ecx,ecx
c001ed8e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ed94:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed9b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ed9f:	75 0a                	jne    c001edab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001eda1:	01 c9                	add    ecx,ecx
c001eda3:	01 cd                	add    ebp,ecx
c001eda5:	4b                   	dec    ebx
c001eda6:	e9 54 ff ff ff       	jmp    c001ecff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001edab:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001edb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edb4:	51                   	push   ecx
c001edb5:	51                   	push   ecx
c001edb6:	52                   	push   edx
c001edb7:	50                   	push   eax
c001edb8:	e8 8f e8 ff ff       	call   c001d64c <IDE::getBase(unsigned char)>
c001edbd:	89 c2                	mov    edx,eax
c001edbf:	89 f0                	mov    eax,esi
c001edc1:	66 ef                	out    dx,ax
c001edc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001edc7:	83 c4 10             	add    esp,0x10
c001edca:	41                   	inc    ecx
c001edcb:	eb c1                	jmp    c001ed8e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001edcd:	31 f6                	xor    esi,esi
c001edcf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001edd5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001eddc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ede0:	75 06                	jne    c001ede8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ede2:	01 f6                	add    esi,esi
c001ede4:	01 f5                	add    ebp,esi
c001ede6:	eb bd                	jmp    c001eda5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ede8:	51                   	push   ecx
c001ede9:	51                   	push   ecx
c001edea:	52                   	push   edx
c001edeb:	50                   	push   eax
c001edec:	e8 5b e8 ff ff       	call   c001d64c <IDE::getBase(unsigned char)>
c001edf1:	89 c2                	mov    edx,eax
c001edf3:	66 ed                	in     ax,dx
c001edf5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001edfa:	83 c4 10             	add    esp,0x10
c001edfd:	46                   	inc    esi
c001edfe:	eb cf                	jmp    c001edcf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ee00:	51                   	push   ecx
c001ee01:	51                   	push   ecx
c001ee02:	52                   	push   edx
c001ee03:	50                   	push   eax
c001ee04:	e8 c3 e9 ff ff       	call   c001d7cc <IDE::waitInterrupt(unsigned char)>
c001ee09:	83 c4 10             	add    esp,0x10
c001ee0c:	84 c0                	test   al,al
c001ee0e:	0f 84 e8 fd ff ff    	je     c001ebfc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ee14:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee19:	52                   	push   edx
c001ee1a:	52                   	push   edx
c001ee1b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee22:	50                   	push   eax
c001ee23:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee29:	e8 0a e8 ff ff       	call   c001d638 <IDE::prepareInterrupt(unsigned char)>
c001ee2e:	83 c4 10             	add    esp,0x10
c001ee31:	50                   	push   eax
c001ee32:	50                   	push   eax
c001ee33:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee3a:	50                   	push   eax
c001ee3b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee41:	e8 06 e8 ff ff       	call   c001d64c <IDE::getBase(unsigned char)>
c001ee46:	8d 50 07             	lea    edx,[eax+0x7]
c001ee49:	ec                   	in     al,dx
c001ee4a:	83 c4 10             	add    esp,0x10
c001ee4d:	a8 88                	test   al,0x88
c001ee4f:	74 0a                	je     c001ee5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ee51:	4b                   	dec    ebx
c001ee52:	75 dd                	jne    c001ee31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ee54:	bb 02 00 00 00       	mov    ebx,0x2
c001ee59:	eb 02                	jmp    c001ee5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ee5b:	31 db                	xor    ebx,ebx
c001ee5d:	83 c4 1c             	add    esp,0x1c
c001ee60:	89 d8                	mov    eax,ebx
c001ee62:	5b                   	pop    ebx
c001ee63:	5e                   	pop    esi
c001ee64:	5f                   	pop    edi
c001ee65:	5d                   	pop    ebp
c001ee66:	c3                   	ret    
c001ee67:	90                   	nop

c001ee68 <ATAPI::diskRemoved()>:
c001ee68:	83 ec 18             	sub    esp,0x18
c001ee6b:	68 e1 4f 02 c0       	push   0xc0024fe1
c001ee70:	e8 f6 db fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001ee75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee79:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ee80:	83 c4 1c             	add    esp,0x1c
c001ee83:	c3                   	ret    

c001ee84 <ATAPI::eject()>:
c001ee84:	57                   	push   edi
c001ee85:	b9 03 00 00 00       	mov    ecx,0x3
c001ee8a:	53                   	push   ebx
c001ee8b:	83 ec 14             	sub    esp,0x14
c001ee8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ee92:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ee96:	fc                   	cld    
c001ee97:	31 c0                	xor    eax,eax
c001ee99:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ee9b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001eea0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001eea5:	50                   	push   eax
c001eea6:	50                   	push   eax
c001eea7:	6a 00                	push   0x0
c001eea9:	6a 00                	push   0x0
c001eeab:	6a 00                	push   0x0
c001eead:	6a 02                	push   0x2
c001eeaf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001eeb3:	50                   	push   eax
c001eeb4:	53                   	push   ebx
c001eeb5:	e8 ee fc ff ff       	call   c001eba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001eeba:	83 c4 14             	add    esp,0x14
c001eebd:	53                   	push   ebx
c001eebe:	e8 a5 ff ff ff       	call   c001ee68 <ATAPI::diskRemoved()>
c001eec3:	83 c4 24             	add    esp,0x24
c001eec6:	31 c0                	xor    eax,eax
c001eec8:	5b                   	pop    ebx
c001eec9:	5f                   	pop    edi
c001eeca:	c3                   	ret    
c001eecb:	90                   	nop

c001eecc <ATAPI::diskInserted()>:
c001eecc:	53                   	push   ebx
c001eecd:	83 ec 14             	sub    esp,0x14
c001eed0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001eed4:	68 f8 4f 02 c0       	push   0xc0024ff8
c001eed9:	e8 8d db fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001eede:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001eee5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eee8:	e8 65 f4 fe ff       	call   c000e352 <PhysicalDisk::startCache()>
c001eeed:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001eef1:	83 c4 18             	add    esp,0x18
c001eef4:	5b                   	pop    ebx
c001eef5:	e9 94 14 ff ff       	jmp    c001038e <createPartitionsForDisk(PhysicalDisk*)>

c001eefa <ATAPI::detectMedia()>:
c001eefa:	56                   	push   esi
c001eefb:	53                   	push   ebx
c001eefc:	83 ec 28             	sub    esp,0x28
c001eeff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef03:	6a 0c                	push   0xc
c001ef05:	6a 00                	push   0x0
c001ef07:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ef0b:	56                   	push   esi
c001ef0c:	e8 73 17 fe ff       	call   c0000684 <memset>
c001ef11:	58                   	pop    eax
c001ef12:	5a                   	pop    edx
c001ef13:	6a 00                	push   0x0
c001ef15:	6a 00                	push   0x0
c001ef17:	6a 00                	push   0x0
c001ef19:	6a 00                	push   0x0
c001ef1b:	56                   	push   esi
c001ef1c:	53                   	push   ebx
c001ef1d:	e8 86 fc ff ff       	call   c001eba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef22:	83 c4 1c             	add    esp,0x1c
c001ef25:	6a 0c                	push   0xc
c001ef27:	6a 00                	push   0x0
c001ef29:	56                   	push   esi
c001ef2a:	e8 55 17 fe ff       	call   c0000684 <memset>
c001ef2f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ef34:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ef39:	59                   	pop    ecx
c001ef3a:	58                   	pop    eax
c001ef3b:	6a 01                	push   0x1
c001ef3d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ef41:	50                   	push   eax
c001ef42:	6a 00                	push   0x0
c001ef44:	6a 12                	push   0x12
c001ef46:	56                   	push   esi
c001ef47:	53                   	push   ebx
c001ef48:	e8 5b fc ff ff       	call   c001eba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef4d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ef51:	83 c4 20             	add    esp,0x20
c001ef54:	83 e0 7f             	and    eax,0x7f
c001ef57:	3c 70                	cmp    al,0x70
c001ef59:	74 15                	je     c001ef70 <ATAPI::detectMedia()+0x76>
c001ef5b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ef62:	75 0c                	jne    c001ef70 <ATAPI::detectMedia()+0x76>
c001ef64:	83 ec 0c             	sub    esp,0xc
c001ef67:	53                   	push   ebx
c001ef68:	e8 5f ff ff ff       	call   c001eecc <ATAPI::diskInserted()>
c001ef6d:	83 c4 10             	add    esp,0x10
c001ef70:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ef74:	83 e0 0f             	and    eax,0xf
c001ef77:	3c 02                	cmp    al,0x2
c001ef79:	75 1b                	jne    c001ef96 <ATAPI::detectMedia()+0x9c>
c001ef7b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ef80:	75 2d                	jne    c001efaf <ATAPI::detectMedia()+0xb5>
c001ef82:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ef89:	74 24                	je     c001efaf <ATAPI::detectMedia()+0xb5>
c001ef8b:	83 ec 0c             	sub    esp,0xc
c001ef8e:	53                   	push   ebx
c001ef8f:	e8 d4 fe ff ff       	call   c001ee68 <ATAPI::diskRemoved()>
c001ef94:	eb 16                	jmp    c001efac <ATAPI::detectMedia()+0xb2>
c001ef96:	84 c0                	test   al,al
c001ef98:	75 15                	jne    c001efaf <ATAPI::detectMedia()+0xb5>
c001ef9a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001efa1:	75 0c                	jne    c001efaf <ATAPI::detectMedia()+0xb5>
c001efa3:	83 ec 0c             	sub    esp,0xc
c001efa6:	53                   	push   ebx
c001efa7:	e8 20 ff ff ff       	call   c001eecc <ATAPI::diskInserted()>
c001efac:	83 c4 10             	add    esp,0x10
c001efaf:	83 c4 24             	add    esp,0x24
c001efb2:	5b                   	pop    ebx
c001efb3:	5e                   	pop    esi
c001efb4:	c3                   	ret    
c001efb5:	90                   	nop

c001efb6 <ATAPI::open(int, int, void*)>:
c001efb6:	53                   	push   ebx
c001efb7:	83 ec 08             	sub    esp,0x8
c001efba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001efbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001efc6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001efcc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001efd2:	c1 e0 06             	shl    eax,0x6
c001efd5:	01 d0                	add    eax,edx
c001efd7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001efde:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001efe4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001efeb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001eff5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001effb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f002:	6a 04                	push   0x4
c001f004:	6a 0c                	push   0xc
c001f006:	51                   	push   ecx
c001f007:	52                   	push   edx
c001f008:	e8 51 e6 ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f00d:	90                   	nop
c001f00e:	90                   	nop
c001f00f:	6a 00                	push   0x0
c001f011:	6a 0c                	push   0xc
c001f013:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f01a:	50                   	push   eax
c001f01b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f021:	e8 38 e6 ff ff       	call   c001d65e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f026:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f02d:	83 c4 14             	add    esp,0x14
c001f030:	53                   	push   ebx
c001f031:	e8 c4 fe ff ff       	call   c001eefa <ATAPI::detectMedia()>
c001f036:	31 c0                	xor    eax,eax
c001f038:	83 c4 18             	add    esp,0x18
c001f03b:	5b                   	pop    ebx
c001f03c:	c3                   	ret    
c001f03d:	90                   	nop

c001f03e <ATAPI::read(unsigned long long, int, void*)>:
c001f03e:	55                   	push   ebp
c001f03f:	57                   	push   edi
c001f040:	56                   	push   esi
c001f041:	53                   	push   ebx
c001f042:	83 ec 1c             	sub    esp,0x1c
c001f045:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f049:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f04d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f051:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f058:	74 41                	je     c001f09b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f05a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f05e:	b9 03 00 00 00       	mov    ecx,0x3
c001f063:	fc                   	cld    
c001f064:	31 c0                	xor    eax,eax
c001f066:	86 fb                	xchg   bl,bh
c001f068:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f06a:	c1 c3 10             	rol    ebx,0x10
c001f06d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f072:	89 e8                	mov    eax,ebp
c001f074:	86 fb                	xchg   bl,bh
c001f076:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f07a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f07e:	50                   	push   eax
c001f07f:	50                   	push   eax
c001f080:	55                   	push   ebp
c001f081:	c1 e5 0b             	shl    ebp,0xb
c001f084:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f088:	6a 00                	push   0x0
c001f08a:	55                   	push   ebp
c001f08b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f08f:	50                   	push   eax
c001f090:	56                   	push   esi
c001f091:	e8 12 fb ff ff       	call   c001eba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f096:	83 c4 20             	add    esp,0x20
c001f099:	eb 1a                	jmp    c001f0b5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f09b:	83 ec 0c             	sub    esp,0xc
c001f09e:	56                   	push   esi
c001f09f:	e8 56 fe ff ff       	call   c001eefa <ATAPI::detectMedia()>
c001f0a4:	83 c4 10             	add    esp,0x10
c001f0a7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f0ae:	75 aa                	jne    c001f05a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f0b0:	b8 02 00 00 00       	mov    eax,0x2
c001f0b5:	83 c4 1c             	add    esp,0x1c
c001f0b8:	5b                   	pop    ebx
c001f0b9:	5e                   	pop    esi
c001f0ba:	5f                   	pop    edi
c001f0bb:	5d                   	pop    ebp
c001f0bc:	c3                   	ret    
c001f0bd:	90                   	nop

c001f0be <SATA::close(int, int, void*)>:
c001f0be:	83 ec 0c             	sub    esp,0xc
c001f0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f0cb:	85 c0                	test   eax,eax
c001f0cd:	74 0c                	je     c001f0db <SATA::close(int, int, void*)+0x1d>
c001f0cf:	83 ec 0c             	sub    esp,0xc
c001f0d2:	8b 10                	mov    edx,DWORD PTR [eax]
c001f0d4:	50                   	push   eax
c001f0d5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f0d8:	83 c4 10             	add    esp,0x10
c001f0db:	31 c0                	xor    eax,eax
c001f0dd:	83 c4 0c             	add    esp,0xc
c001f0e0:	c3                   	ret    
c001f0e1:	90                   	nop

c001f0e2 <SATA::powerSaving(PowerSavingLevel)>:
c001f0e2:	c3                   	ret    
c001f0e3:	90                   	nop

c001f0e4 <SATA::open(int, int, void*)>:
c001f0e4:	56                   	push   esi
c001f0e5:	53                   	push   ebx
c001f0e6:	50                   	push   eax
c001f0e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f0ef:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f0f9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f0ff:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f109:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f10d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f117:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f11d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f124:	e8 07 ad fe ff       	call   c0009e30 <Phys::allocatePage()>
c001f129:	89 c6                	mov    esi,eax
c001f12b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f131:	81 c6 00 10 00 00    	add    esi,0x1000
c001f137:	e8 f4 ac fe ff       	call   c0009e30 <Phys::allocatePage()>
c001f13c:	39 c6                	cmp    esi,eax
c001f13e:	74 10                	je     c001f150 <SATA::open(int, int, void*)+0x6c>
c001f140:	83 ec 0c             	sub    esp,0xc
c001f143:	68 20 4f 02 c0       	push   0xc0024f20
c001f148:	e8 be 51 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001f14d:	83 c4 10             	add    esp,0x10
c001f150:	83 ec 0c             	sub    esp,0xc
c001f153:	6a 02                	push   0x2
c001f155:	e8 eb c5 fe ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c001f15a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f160:	6a 03                	push   0x3
c001f162:	50                   	push   eax
c001f163:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f169:	ff 35 b0 62 02 c0    	push   DWORD PTR ds:0xc00262b0
c001f16f:	e8 78 cc fe ff       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c001f174:	83 c4 14             	add    esp,0x14
c001f177:	53                   	push   ebx
c001f178:	e8 d5 f1 fe ff       	call   c000e352 <PhysicalDisk::startCache()>
c001f17d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f180:	e8 09 12 ff ff       	call   c001038e <createPartitionsForDisk(PhysicalDisk*)>
c001f185:	83 c4 14             	add    esp,0x14
c001f188:	31 c0                	xor    eax,eax
c001f18a:	5b                   	pop    ebx
c001f18b:	5e                   	pop    esi
c001f18c:	c3                   	ret    
c001f18d:	90                   	nop

c001f18e <SATA::SATA()>:
c001f18e:	83 ec 0c             	sub    esp,0xc
c001f191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f195:	83 ec 04             	sub    esp,0x4
c001f198:	68 00 02 00 00       	push   0x200
c001f19d:	68 34 4f 02 c0       	push   0xc0024f34
c001f1a2:	50                   	push   eax
c001f1a3:	e8 42 f1 fe ff       	call   c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f1a8:	83 c4 10             	add    esp,0x10
c001f1ab:	ba a4 4f 02 c0       	mov    edx,0xc0024fa4
c001f1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b4:	89 10                	mov    DWORD PTR [eax],edx
c001f1b6:	90                   	nop
c001f1b7:	83 c4 0c             	add    esp,0xc
c001f1ba:	c3                   	ret    
c001f1bb:	90                   	nop

c001f1bc <SATA::access(unsigned long long, int, void*, bool)>:
c001f1bc:	55                   	push   ebp
c001f1bd:	57                   	push   edi
c001f1be:	56                   	push   esi
c001f1bf:	53                   	push   ebx
c001f1c0:	83 ec 2c             	sub    esp,0x2c
c001f1c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f1c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f1cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f1cf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f1d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f1d7:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f1dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1e0:	7e 10                	jle    c001f1f2 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f1e2:	83 ec 0c             	sub    esp,0xc
c001f1e5:	68 44 4f 02 c0       	push   0xc0024f44
c001f1ea:	e8 1c 51 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001f1ef:	83 c4 10             	add    esp,0x10
c001f1f2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f1f8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f1fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f204:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f208:	89 d0                	mov    eax,edx
c001f20a:	c1 e0 07             	shl    eax,0x7
c001f20d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f211:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f21b:	51                   	push   ecx
c001f21c:	8d 42 02             	lea    eax,[edx+0x2]
c001f21f:	51                   	push   ecx
c001f220:	c1 e0 07             	shl    eax,0x7
c001f223:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f227:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f22b:	50                   	push   eax
c001f22c:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f232:	e8 9f ef ff ff       	call   c001e1d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f237:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f23b:	83 c4 10             	add    esp,0x10
c001f23e:	b8 01 00 00 00       	mov    eax,0x1
c001f243:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f248:	0f 84 cb 01 00 00    	je     c001f419 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f24e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f252:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f256:	c1 e0 09             	shl    eax,0x9
c001f259:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f25e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f262:	74 0e                	je     c001f272 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f264:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f26a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f26e:	89 c1                	mov    ecx,eax
c001f270:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f276:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f27c:	8d 42 02             	lea    eax,[edx+0x2]
c001f27f:	c1 e0 07             	shl    eax,0x7
c001f282:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f286:	8b 00                	mov    eax,DWORD PTR [eax]
c001f288:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f28e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f294:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f298:	c1 e1 05             	shl    ecx,0x5
c001f29b:	01 c8                	add    eax,ecx
c001f29d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f2a1:	83 e1 01             	and    ecx,0x1
c001f2a4:	89 ce                	mov    esi,ecx
c001f2a6:	8a 08                	mov    cl,BYTE PTR [eax]
c001f2a8:	c1 e6 06             	shl    esi,0x6
c001f2ab:	83 e1 bf             	and    ecx,0xffffffbf
c001f2ae:	09 f1                	or     ecx,esi
c001f2b0:	88 08                	mov    BYTE PTR [eax],cl
c001f2b2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f2b4:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f2ba:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f2c0:	89 08                	mov    DWORD PTR [eax],ecx
c001f2c2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f2c8:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f2ce:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f2d4:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f2d7:	50                   	push   eax
c001f2d8:	68 90 00 00 00       	push   0x90
c001f2dd:	6a 00                	push   0x0
c001f2df:	56                   	push   esi
c001f2e0:	e8 9f 13 fe ff       	call   c0000684 <memset>
c001f2e5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f2eb:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f2ef:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f2f5:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f2f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f2fd:	83 c4 10             	add    esp,0x10
c001f300:	48                   	dec    eax
c001f301:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f306:	89 c1                	mov    ecx,eax
c001f308:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f30e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f313:	09 c8                	or     eax,ecx
c001f315:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f31b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f31e:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f325:	66 25 00 7f          	and    ax,0x7f00
c001f329:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f32d:	66 0d 27 80          	or     ax,0x8027
c001f331:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f336:	66 89 06             	mov    WORD PTR [esi],ax
c001f339:	19 c0                	sbb    eax,eax
c001f33b:	83 e0 f0             	and    eax,0xfffffff0
c001f33e:	83 c0 35             	add    eax,0x35
c001f341:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f344:	89 e8                	mov    eax,ebp
c001f346:	c1 e8 10             	shr    eax,0x10
c001f349:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f34c:	89 e8                	mov    eax,ebp
c001f34e:	c1 e8 18             	shr    eax,0x18
c001f351:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f354:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f358:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f35b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f35f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f362:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f366:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f36a:	89 d6                	mov    esi,edx
c001f36c:	31 c0                	xor    eax,eax
c001f36e:	c1 e6 07             	shl    esi,0x7
c001f371:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f375:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f37b:	80 e1 88             	and    cl,0x88
c001f37e:	74 0a                	je     c001f38a <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f380:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f385:	74 0a                	je     c001f391 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f387:	40                   	inc    eax
c001f388:	eb eb                	jmp    c001f375 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f38a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f38f:	75 0a                	jne    c001f39b <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f391:	83 ec 0c             	sub    esp,0xc
c001f394:	68 7d 4f 02 c0       	push   0xc0024f7d
c001f399:	eb 56                	jmp    c001f3f1 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f39b:	b8 01 00 00 00       	mov    eax,0x1
c001f3a0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f3a4:	c1 e2 07             	shl    edx,0x7
c001f3a7:	d3 e0                	shl    eax,cl
c001f3a9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f3ad:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f3b3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f3b9:	85 c8                	test   eax,ecx
c001f3bb:	74 20                	je     c001f3dd <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f3bd:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f3c3:	0f ba e1 1e          	bt     ecx,0x1e
c001f3c7:	73 ea                	jae    c001f3b3 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f3c9:	83 ec 0c             	sub    esp,0xc
c001f3cc:	68 8b 4f 02 c0       	push   0xc0024f8b
c001f3d1:	e8 35 4f ff ff       	call   c001430b <Krnl::panic(char const*)>
c001f3d6:	83 c4 10             	add    esp,0x10
c001f3d9:	31 c0                	xor    eax,eax
c001f3db:	eb 3c                	jmp    c001f419 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f3dd:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f3e3:	0f ba e0 1e          	bt     eax,0x1e
c001f3e7:	73 17                	jae    c001f400 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f3e9:	83 ec 0c             	sub    esp,0xc
c001f3ec:	68 8b 4f 02 c0       	push   0xc0024f8b
c001f3f1:	e8 15 4f ff ff       	call   c001430b <Krnl::panic(char const*)>
c001f3f6:	83 c4 10             	add    esp,0x10
c001f3f9:	b8 01 00 00 00       	mov    eax,0x1
c001f3fe:	eb 19                	jmp    c001f419 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f400:	31 c0                	xor    eax,eax
c001f402:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f407:	75 10                	jne    c001f419 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f409:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f40f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f413:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f417:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f419:	83 c4 2c             	add    esp,0x2c
c001f41c:	5b                   	pop    ebx
c001f41d:	5e                   	pop    esi
c001f41e:	5f                   	pop    edi
c001f41f:	5d                   	pop    ebp
c001f420:	c3                   	ret    
c001f421:	90                   	nop

c001f422 <SATA::read(unsigned long long, int, void*)>:
c001f422:	57                   	push   edi
c001f423:	b8 04 00 00 00       	mov    eax,0x4
c001f428:	56                   	push   esi
c001f429:	53                   	push   ebx
c001f42a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f42e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f432:	8d 7a ff             	lea    edi,[edx-0x1]
c001f435:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f439:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f43d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f443:	77 25                	ja     c001f46a <SATA::read(unsigned long long, int, void*)+0x48>
c001f445:	b8 06 00 00 00       	mov    eax,0x6
c001f44a:	85 f6                	test   esi,esi
c001f44c:	74 1c                	je     c001f46a <SATA::read(unsigned long long, int, void*)+0x48>
c001f44e:	50                   	push   eax
c001f44f:	50                   	push   eax
c001f450:	6a 00                	push   0x0
c001f452:	56                   	push   esi
c001f453:	52                   	push   edx
c001f454:	53                   	push   ebx
c001f455:	51                   	push   ecx
c001f456:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f45a:	e8 5d fd ff ff       	call   c001f1bc <SATA::access(unsigned long long, int, void*, bool)>
c001f45f:	83 c4 20             	add    esp,0x20
c001f462:	85 c0                	test   eax,eax
c001f464:	0f 95 c0             	setne  al
c001f467:	0f b6 c0             	movzx  eax,al
c001f46a:	5b                   	pop    ebx
c001f46b:	5e                   	pop    esi
c001f46c:	5f                   	pop    edi
c001f46d:	c3                   	ret    

c001f46e <SATA::write(unsigned long long, int, void*)>:
c001f46e:	55                   	push   ebp
c001f46f:	b8 04 00 00 00       	mov    eax,0x4
c001f474:	57                   	push   edi
c001f475:	56                   	push   esi
c001f476:	53                   	push   ebx
c001f477:	83 ec 0c             	sub    esp,0xc
c001f47a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f47e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f482:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f485:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f489:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f48d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f493:	77 3d                	ja     c001f4d2 <SATA::write(unsigned long long, int, void*)+0x64>
c001f495:	b8 06 00 00 00       	mov    eax,0x6
c001f49a:	85 ed                	test   ebp,ebp
c001f49c:	74 34                	je     c001f4d2 <SATA::write(unsigned long long, int, void*)+0x64>
c001f49e:	c1 e3 09             	shl    ebx,0x9
c001f4a1:	01 eb                	add    ebx,ebp
c001f4a3:	89 d6                	mov    esi,edx
c001f4a5:	89 cf                	mov    edi,ecx
c001f4a7:	83 c6 01             	add    esi,0x1
c001f4aa:	83 d7 00             	adc    edi,0x0
c001f4ad:	50                   	push   eax
c001f4ae:	50                   	push   eax
c001f4af:	6a 01                	push   0x1
c001f4b1:	55                   	push   ebp
c001f4b2:	81 c5 00 02 00 00    	add    ebp,0x200
c001f4b8:	6a 01                	push   0x1
c001f4ba:	51                   	push   ecx
c001f4bb:	52                   	push   edx
c001f4bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f4c0:	e8 f7 fc ff ff       	call   c001f1bc <SATA::access(unsigned long long, int, void*, bool)>
c001f4c5:	83 c4 20             	add    esp,0x20
c001f4c8:	89 f2                	mov    edx,esi
c001f4ca:	89 f9                	mov    ecx,edi
c001f4cc:	39 dd                	cmp    ebp,ebx
c001f4ce:	75 d3                	jne    c001f4a3 <SATA::write(unsigned long long, int, void*)+0x35>
c001f4d0:	31 c0                	xor    eax,eax
c001f4d2:	83 c4 0c             	add    esp,0xc
c001f4d5:	5b                   	pop    ebx
c001f4d6:	5e                   	pop    esi
c001f4d7:	5f                   	pop    edi
c001f4d8:	5d                   	pop    ebp
c001f4d9:	c3                   	ret    

c001f4da <SATAPI::write(unsigned long long, int, void*)>:
c001f4da:	b8 03 00 00 00       	mov    eax,0x3
c001f4df:	c3                   	ret    

c001f4e0 <SATAPI::close(int, int, void*)>:
c001f4e0:	83 ec 0c             	sub    esp,0xc
c001f4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f4ed:	85 c0                	test   eax,eax
c001f4ef:	74 0c                	je     c001f4fd <SATAPI::close(int, int, void*)+0x1d>
c001f4f1:	83 ec 0c             	sub    esp,0xc
c001f4f4:	8b 10                	mov    edx,DWORD PTR [eax]
c001f4f6:	50                   	push   eax
c001f4f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f4fa:	83 c4 10             	add    esp,0x10
c001f4fd:	31 c0                	xor    eax,eax
c001f4ff:	83 c4 0c             	add    esp,0xc
c001f502:	c3                   	ret    
c001f503:	90                   	nop

c001f504 <SATAPI::SATAPI()>:
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50b:	83 ec 04             	sub    esp,0x4
c001f50e:	68 00 08 00 00       	push   0x800
c001f513:	68 d4 4f 02 c0       	push   0xc0024fd4
c001f518:	50                   	push   eax
c001f519:	e8 cc ed fe ff       	call   c000e2ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f51e:	83 c4 10             	add    esp,0x10
c001f521:	ba 80 50 02 c0       	mov    edx,0xc0025080
c001f526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52a:	89 10                	mov    DWORD PTR [eax],edx
c001f52c:	90                   	nop
c001f52d:	83 c4 0c             	add    esp,0xc
c001f530:	c3                   	ret    
c001f531:	90                   	nop

c001f532 <SATAPI::diskRemoved()>:
c001f532:	83 ec 18             	sub    esp,0x18
c001f535:	68 e0 4f 02 c0       	push   0xc0024fe0
c001f53a:	e8 2c d5 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001f53f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f543:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f54a:	83 c4 1c             	add    esp,0x1c
c001f54d:	c3                   	ret    

c001f54e <SATAPI::diskInserted()>:
c001f54e:	53                   	push   ebx
c001f54f:	83 ec 14             	sub    esp,0x14
c001f552:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f556:	68 f7 4f 02 c0       	push   0xc0024ff7
c001f55b:	e8 0b d5 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001f560:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f567:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f56a:	e8 e3 ed fe ff       	call   c000e352 <PhysicalDisk::startCache()>
c001f56f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f573:	83 c4 18             	add    esp,0x18
c001f576:	5b                   	pop    ebx
c001f577:	e9 12 0e ff ff       	jmp    c001038e <createPartitionsForDisk(PhysicalDisk*)>

c001f57c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f57c:	55                   	push   ebp
c001f57d:	57                   	push   edi
c001f57e:	56                   	push   esi
c001f57f:	53                   	push   ebx
c001f580:	83 ec 34             	sub    esp,0x34
c001f583:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f587:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f58b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f58f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f593:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f597:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f59d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f5a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f5a7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f5ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f5b1:	c1 e0 07             	shl    eax,0x7
c001f5b4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f5b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f5bc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f5c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f5ca:	8d 58 02             	lea    ebx,[eax+0x2]
c001f5cd:	c1 e3 07             	shl    ebx,0x7
c001f5d0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f5d4:	53                   	push   ebx
c001f5d5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f5db:	e8 f6 eb ff ff       	call   c001e1d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f5e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f5e4:	83 c4 10             	add    esp,0x10
c001f5e7:	b8 01 00 00 00       	mov    eax,0x1
c001f5ec:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f5f1:	0f 84 85 01 00 00    	je     c001f77c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f5f7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f5fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f5ff:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f605:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f60b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f60f:	c1 e1 05             	shl    ecx,0x5
c001f612:	01 c8                	add    eax,ecx
c001f614:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f616:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f61c:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f622:	89 08                	mov    DWORD PTR [eax],ecx
c001f624:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f62a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f630:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f636:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f639:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f63c:	50                   	push   eax
c001f63d:	68 90 00 00 00       	push   0x90
c001f642:	6a 00                	push   0x0
c001f644:	53                   	push   ebx
c001f645:	e8 3a 10 fe ff       	call   c0000684 <memset>
c001f64a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f64e:	b9 0c 00 00 00       	mov    ecx,0xc
c001f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f655:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f65b:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f65f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f665:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f669:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f66d:	48                   	dec    eax
c001f66e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f673:	89 c1                	mov    ecx,eax
c001f675:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f67b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f680:	09 c8                	or     eax,ecx
c001f682:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f688:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f68b:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f692:	66 25 00 7f          	and    ax,0x7f00
c001f696:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f69a:	66 0d 27 80          	or     ax,0x8027
c001f69e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f6a2:	66 89 03             	mov    WORD PTR [ebx],ax
c001f6a5:	89 d0                	mov    eax,edx
c001f6a7:	c1 ea 18             	shr    edx,0x18
c001f6aa:	c1 e8 10             	shr    eax,0x10
c001f6ad:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f6b0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f6b3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f6b7:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f6ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f6be:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f6c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f6c5:	83 c4 10             	add    esp,0x10
c001f6c8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f6cc:	31 c0                	xor    eax,eax
c001f6ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6d2:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f6d8:	80 e2 88             	and    dl,0x88
c001f6db:	74 0a                	je     c001f6e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f6dd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f6e2:	74 0a                	je     c001f6ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f6e4:	40                   	inc    eax
c001f6e5:	eb eb                	jmp    c001f6d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f6e7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f6ec:	75 0f                	jne    c001f6fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f6ee:	83 ec 0c             	sub    esp,0xc
c001f6f1:	68 7d 4f 02 c0       	push   0xc0024f7d
c001f6f6:	e8 10 4c ff ff       	call   c001430b <Krnl::panic(char const*)>
c001f6fb:	eb 3f                	jmp    c001f73c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f6fd:	ba 01 00 00 00       	mov    edx,0x1
c001f702:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f706:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f70a:	d3 e2                	shl    edx,cl
c001f70c:	c1 e0 07             	shl    eax,0x7
c001f70f:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f715:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f719:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f71f:	85 ca                	test   edx,ecx
c001f721:	74 23                	je     c001f746 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f723:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f729:	0f ba e1 1e          	bt     ecx,0x1e
c001f72d:	73 ea                	jae    c001f719 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f72f:	83 ec 0c             	sub    esp,0xc
c001f732:	68 0f 50 02 c0       	push   0xc002500f
c001f737:	e8 2f d3 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001f73c:	83 c4 10             	add    esp,0x10
c001f73f:	b8 01 00 00 00       	mov    eax,0x1
c001f744:	eb 36                	jmp    c001f77c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f746:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f74c:	0f ba e0 1e          	bt     eax,0x1e
c001f750:	73 0a                	jae    c001f75c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f752:	83 ec 0c             	sub    esp,0xc
c001f755:	68 22 50 02 c0       	push   0xc0025022
c001f75a:	eb db                	jmp    c001f737 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f75c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f761:	74 17                	je     c001f77a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f763:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f768:	74 10                	je     c001f77a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f76a:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f770:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f774:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f778:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f77a:	31 c0                	xor    eax,eax
c001f77c:	83 c4 2c             	add    esp,0x2c
c001f77f:	5b                   	pop    ebx
c001f780:	5e                   	pop    esi
c001f781:	5f                   	pop    edi
c001f782:	5d                   	pop    ebp
c001f783:	c3                   	ret    

c001f784 <SATAPI::eject()>:
c001f784:	57                   	push   edi
c001f785:	b9 03 00 00 00       	mov    ecx,0x3
c001f78a:	53                   	push   ebx
c001f78b:	83 ec 14             	sub    esp,0x14
c001f78e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f792:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f796:	fc                   	cld    
c001f797:	31 c0                	xor    eax,eax
c001f799:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f79b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f7a0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f7a5:	50                   	push   eax
c001f7a6:	6a 00                	push   0x0
c001f7a8:	6a 00                	push   0x0
c001f7aa:	6a 00                	push   0x0
c001f7ac:	6a 00                	push   0x0
c001f7ae:	6a 02                	push   0x2
c001f7b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7b4:	50                   	push   eax
c001f7b5:	53                   	push   ebx
c001f7b6:	e8 c1 fd ff ff       	call   c001f57c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f7bb:	83 c4 14             	add    esp,0x14
c001f7be:	53                   	push   ebx
c001f7bf:	e8 6e fd ff ff       	call   c001f532 <SATAPI::diskRemoved()>
c001f7c4:	83 c4 24             	add    esp,0x24
c001f7c7:	31 c0                	xor    eax,eax
c001f7c9:	5b                   	pop    ebx
c001f7ca:	5f                   	pop    edi
c001f7cb:	c3                   	ret    

c001f7cc <SATAPI::detectMedia()>:
c001f7cc:	56                   	push   esi
c001f7cd:	53                   	push   ebx
c001f7ce:	83 ec 28             	sub    esp,0x28
c001f7d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7d5:	6a 0c                	push   0xc
c001f7d7:	6a 00                	push   0x0
c001f7d9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f7dd:	56                   	push   esi
c001f7de:	e8 a1 0e fe ff       	call   c0000684 <memset>
c001f7e3:	83 c4 0c             	add    esp,0xc
c001f7e6:	6a 00                	push   0x0
c001f7e8:	6a 00                	push   0x0
c001f7ea:	6a 00                	push   0x0
c001f7ec:	6a 00                	push   0x0
c001f7ee:	6a 00                	push   0x0
c001f7f0:	56                   	push   esi
c001f7f1:	53                   	push   ebx
c001f7f2:	e8 85 fd ff ff       	call   c001f57c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f7f7:	83 c4 1c             	add    esp,0x1c
c001f7fa:	6a 0c                	push   0xc
c001f7fc:	6a 00                	push   0x0
c001f7fe:	56                   	push   esi
c001f7ff:	e8 80 0e fe ff       	call   c0000684 <memset>
c001f804:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f809:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f80e:	83 c4 0c             	add    esp,0xc
c001f811:	6a 01                	push   0x1
c001f813:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f817:	50                   	push   eax
c001f818:	6a 00                	push   0x0
c001f81a:	6a 00                	push   0x0
c001f81c:	6a 12                	push   0x12
c001f81e:	56                   	push   esi
c001f81f:	53                   	push   ebx
c001f820:	e8 57 fd ff ff       	call   c001f57c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f825:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f829:	83 c4 20             	add    esp,0x20
c001f82c:	83 e0 7f             	and    eax,0x7f
c001f82f:	3c 70                	cmp    al,0x70
c001f831:	74 15                	je     c001f848 <SATAPI::detectMedia()+0x7c>
c001f833:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f83a:	75 0c                	jne    c001f848 <SATAPI::detectMedia()+0x7c>
c001f83c:	83 ec 0c             	sub    esp,0xc
c001f83f:	53                   	push   ebx
c001f840:	e8 09 fd ff ff       	call   c001f54e <SATAPI::diskInserted()>
c001f845:	83 c4 10             	add    esp,0x10
c001f848:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f84c:	83 e0 0f             	and    eax,0xf
c001f84f:	3c 02                	cmp    al,0x2
c001f851:	75 1b                	jne    c001f86e <SATAPI::detectMedia()+0xa2>
c001f853:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f858:	75 2d                	jne    c001f887 <SATAPI::detectMedia()+0xbb>
c001f85a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f861:	74 24                	je     c001f887 <SATAPI::detectMedia()+0xbb>
c001f863:	83 ec 0c             	sub    esp,0xc
c001f866:	53                   	push   ebx
c001f867:	e8 c6 fc ff ff       	call   c001f532 <SATAPI::diskRemoved()>
c001f86c:	eb 16                	jmp    c001f884 <SATAPI::detectMedia()+0xb8>
c001f86e:	84 c0                	test   al,al
c001f870:	75 15                	jne    c001f887 <SATAPI::detectMedia()+0xbb>
c001f872:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f879:	75 0c                	jne    c001f887 <SATAPI::detectMedia()+0xbb>
c001f87b:	83 ec 0c             	sub    esp,0xc
c001f87e:	53                   	push   ebx
c001f87f:	e8 ca fc ff ff       	call   c001f54e <SATAPI::diskInserted()>
c001f884:	83 c4 10             	add    esp,0x10
c001f887:	83 c4 24             	add    esp,0x24
c001f88a:	5b                   	pop    ebx
c001f88b:	5e                   	pop    esi
c001f88c:	c3                   	ret    
c001f88d:	90                   	nop

c001f88e <SATAPI::open(int, int, void*)>:
c001f88e:	56                   	push   esi
c001f88f:	53                   	push   ebx
c001f890:	50                   	push   eax
c001f891:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f895:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f899:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f8a3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f8a9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f8b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8b7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f8c1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f8c7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f8ce:	e8 5d a5 fe ff       	call   c0009e30 <Phys::allocatePage()>
c001f8d3:	89 c6                	mov    esi,eax
c001f8d5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f8db:	81 c6 00 10 00 00    	add    esi,0x1000
c001f8e1:	e8 4a a5 fe ff       	call   c0009e30 <Phys::allocatePage()>
c001f8e6:	39 c6                	cmp    esi,eax
c001f8e8:	74 10                	je     c001f8fa <SATAPI::open(int, int, void*)+0x6c>
c001f8ea:	83 ec 0c             	sub    esp,0xc
c001f8ed:	68 37 50 02 c0       	push   0xc0025037
c001f8f2:	e8 14 4a ff ff       	call   c001430b <Krnl::panic(char const*)>
c001f8f7:	83 c4 10             	add    esp,0x10
c001f8fa:	83 ec 0c             	sub    esp,0xc
c001f8fd:	6a 02                	push   0x2
c001f8ff:	e8 41 be fe ff       	call   c000b745 <Virt::allocateKernelVirtualPages(int)>
c001f904:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f90a:	6a 03                	push   0x3
c001f90c:	50                   	push   eax
c001f90d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f913:	ff 35 b0 62 02 c0    	push   DWORD PTR ds:0xc00262b0
c001f919:	e8 ce c4 fe ff       	call   c000bdec <VAS::mapPage(unsigned long, unsigned long, int)>
c001f91e:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f925:	83 c4 14             	add    esp,0x14
c001f928:	53                   	push   ebx
c001f929:	e8 9e fe ff ff       	call   c001f7cc <SATAPI::detectMedia()>
c001f92e:	83 c4 14             	add    esp,0x14
c001f931:	31 c0                	xor    eax,eax
c001f933:	5b                   	pop    ebx
c001f934:	5e                   	pop    esi
c001f935:	c3                   	ret    

c001f936 <SATAPI::read(unsigned long long, int, void*)>:
c001f936:	55                   	push   ebp
c001f937:	57                   	push   edi
c001f938:	56                   	push   esi
c001f939:	53                   	push   ebx
c001f93a:	83 ec 1c             	sub    esp,0x1c
c001f93d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f941:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f945:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f949:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f950:	74 19                	je     c001f96b <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f952:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001f957:	7e 2e                	jle    c001f987 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f959:	83 ec 0c             	sub    esp,0xc
c001f95c:	68 4d 50 02 c0       	push   0xc002504d
c001f961:	e8 a5 49 ff ff       	call   c001430b <Krnl::panic(char const*)>
c001f966:	83 c4 10             	add    esp,0x10
c001f969:	eb 1c                	jmp    c001f987 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f96b:	83 ec 0c             	sub    esp,0xc
c001f96e:	55                   	push   ebp
c001f96f:	e8 58 fe ff ff       	call   c001f7cc <SATAPI::detectMedia()>
c001f974:	83 c4 10             	add    esp,0x10
c001f977:	b8 02 00 00 00       	mov    eax,0x2
c001f97c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f983:	75 cd                	jne    c001f952 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001f985:	eb 49                	jmp    c001f9d0 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001f987:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f98b:	b9 03 00 00 00       	mov    ecx,0x3
c001f990:	fc                   	cld    
c001f991:	31 c0                	xor    eax,eax
c001f993:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f995:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f99a:	89 d8                	mov    eax,ebx
c001f99c:	86 e0                	xchg   al,ah
c001f99e:	c1 c0 10             	rol    eax,0x10
c001f9a1:	86 e0                	xchg   al,ah
c001f9a3:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001f9a7:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001f9ab:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f9af:	50                   	push   eax
c001f9b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f9b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f9b8:	56                   	push   esi
c001f9b9:	53                   	push   ebx
c001f9ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f9be:	c1 e0 0b             	shl    eax,0xb
c001f9c1:	50                   	push   eax
c001f9c2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9c6:	50                   	push   eax
c001f9c7:	55                   	push   ebp
c001f9c8:	e8 af fb ff ff       	call   c001f57c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f9cd:	83 c4 20             	add    esp,0x20
c001f9d0:	83 c4 1c             	add    esp,0x1c
c001f9d3:	5b                   	pop    ebx
c001f9d4:	5e                   	pop    esi
c001f9d5:	5f                   	pop    edi
c001f9d6:	5d                   	pop    ebp
c001f9d7:	c3                   	ret    

c001f9d8 <AVX::open(int, int, void*)>:
c001f9d8:	83 ec 0c             	sub    esp,0xc
c001f9db:	e8 38 11 00 00       	call   c0020b18 <avxInit>
c001f9e0:	b8 00 00 00 00       	mov    eax,0x0
c001f9e5:	83 c4 0c             	add    esp,0xc
c001f9e8:	c3                   	ret    
c001f9e9:	90                   	nop
c001f9ea:	66 90                	xchg   ax,ax

c001f9ec <AVX::close(int, int, void*)>:
c001f9ec:	83 ec 0c             	sub    esp,0xc
c001f9ef:	e8 25 11 00 00       	call   c0020b19 <avxClose>
c001f9f4:	b8 00 00 00 00       	mov    eax,0x0
c001f9f9:	83 c4 0c             	add    esp,0xc
c001f9fc:	c3                   	ret    
c001f9fd:	90                   	nop
c001f9fe:	66 90                	xchg   ax,ax

c001fa00 <AVX::available()>:
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	e8 08 11 00 00       	call   c0020b10 <avxDetect>
c001fa08:	85 c0                	test   eax,eax
c001fa0a:	0f 95 c0             	setne  al
c001fa0d:	83 c4 0c             	add    esp,0xc
c001fa10:	c3                   	ret    
c001fa11:	90                   	nop
c001fa12:	66 90                	xchg   ax,ax

c001fa14 <AVX::save(void*)>:
c001fa14:	83 ec 0c             	sub    esp,0xc
c001fa17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa1b:	83 ec 0c             	sub    esp,0xc
c001fa1e:	50                   	push   eax
c001fa1f:	e8 f2 10 00 00       	call   c0020b16 <avxSave>
c001fa24:	83 c4 10             	add    esp,0x10
c001fa27:	90                   	nop
c001fa28:	83 c4 0c             	add    esp,0xc
c001fa2b:	c3                   	ret    

c001fa2c <AVX::load(void*)>:
c001fa2c:	83 ec 0c             	sub    esp,0xc
c001fa2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa33:	83 ec 0c             	sub    esp,0xc
c001fa36:	50                   	push   eax
c001fa37:	e8 db 10 00 00       	call   c0020b17 <avxLoad>
c001fa3c:	83 c4 10             	add    esp,0x10
c001fa3f:	90                   	nop
c001fa40:	83 c4 0c             	add    esp,0xc
c001fa43:	c3                   	ret    

c001fa44 <AVX::AVX()>:
c001fa44:	83 ec 0c             	sub    esp,0xc
c001fa47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4b:	83 ec 08             	sub    esp,0x8
c001fa4e:	68 b0 50 02 c0       	push   0xc00250b0
c001fa53:	50                   	push   eax
c001fa54:	e8 6f e9 fe ff       	call   c000e3c8 <FPU::FPU(char const*)>
c001fa59:	83 c4 10             	add    esp,0x10
c001fa5c:	ba c0 50 02 c0       	mov    edx,0xc00250c0
c001fa61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa65:	89 10                	mov    DWORD PTR [eax],edx
c001fa67:	90                   	nop
c001fa68:	83 c4 0c             	add    esp,0xc
c001fa6b:	c3                   	ret    

c001fa6c <MMX::available()>:
c001fa6c:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c001fa71:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fa77:	83 e0 20             	and    eax,0x20
c001fa7a:	84 c0                	test   al,al
c001fa7c:	0f 95 c0             	setne  al
c001fa7f:	c3                   	ret    

c001fa80 <MMX::open(int, int, void*)>:
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	e8 1a 11 00 00       	call   c0020ba2 <x87Init>
c001fa88:	b8 00 00 00 00       	mov    eax,0x0
c001fa8d:	83 c4 0c             	add    esp,0xc
c001fa90:	c3                   	ret    
c001fa91:	90                   	nop
c001fa92:	66 90                	xchg   ax,ax

c001fa94 <MMX::close(int, int, void*)>:
c001fa94:	83 ec 0c             	sub    esp,0xc
c001fa97:	e8 20 11 00 00       	call   c0020bbc <x87Close>
c001fa9c:	b8 00 00 00 00       	mov    eax,0x0
c001faa1:	83 c4 0c             	add    esp,0xc
c001faa4:	c3                   	ret    
c001faa5:	90                   	nop
c001faa6:	66 90                	xchg   ax,ax

c001faa8 <MMX::save(void*)>:
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faaf:	83 ec 0c             	sub    esp,0xc
c001fab2:	50                   	push   eax
c001fab3:	e8 d9 10 00 00       	call   c0020b91 <x87Save>
c001fab8:	83 c4 10             	add    esp,0x10
c001fabb:	90                   	nop
c001fabc:	83 c4 0c             	add    esp,0xc
c001fabf:	c3                   	ret    

c001fac0 <MMX::load(void*)>:
c001fac0:	83 ec 0c             	sub    esp,0xc
c001fac3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fac7:	83 ec 0c             	sub    esp,0xc
c001faca:	50                   	push   eax
c001facb:	e8 ca 10 00 00       	call   c0020b9a <x87Load>
c001fad0:	83 c4 10             	add    esp,0x10
c001fad3:	90                   	nop
c001fad4:	83 c4 0c             	add    esp,0xc
c001fad7:	c3                   	ret    

c001fad8 <MMX::MMX()>:
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadf:	83 ec 08             	sub    esp,0x8
c001fae2:	68 f0 50 02 c0       	push   0xc00250f0
c001fae7:	50                   	push   eax
c001fae8:	e8 db e8 fe ff       	call   c000e3c8 <FPU::FPU(char const*)>
c001faed:	83 c4 10             	add    esp,0x10
c001faf0:	ba 00 51 02 c0       	mov    edx,0xc0025100
c001faf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf9:	89 10                	mov    DWORD PTR [eax],edx
c001fafb:	90                   	nop
c001fafc:	83 c4 0c             	add    esp,0xc
c001faff:	c3                   	ret    

c001fb00 <SSE::open(int, int, void*)>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	e8 4c 10 00 00       	call   c0020b54 <sseInit>
c001fb08:	b8 00 00 00 00       	mov    eax,0x0
c001fb0d:	83 c4 0c             	add    esp,0xc
c001fb10:	c3                   	ret    
c001fb11:	90                   	nop
c001fb12:	66 90                	xchg   ax,ax

c001fb14 <SSE::close(int, int, void*)>:
c001fb14:	83 ec 0c             	sub    esp,0xc
c001fb17:	e8 48 10 00 00       	call   c0020b64 <sseClose>
c001fb1c:	b8 00 00 00 00       	mov    eax,0x0
c001fb21:	83 c4 0c             	add    esp,0xc
c001fb24:	c3                   	ret    
c001fb25:	90                   	nop
c001fb26:	66 90                	xchg   ax,ax

c001fb28 <SSE::available()>:
c001fb28:	83 ec 1c             	sub    esp,0x1c
c001fb2b:	e8 00 10 00 00       	call   c0020b30 <absolutelyNoChanceInHell>
c001fb30:	85 c0                	test   eax,eax
c001fb32:	0f 95 c0             	setne  al
c001fb35:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fb39:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fb3d:	83 c4 1c             	add    esp,0x1c
c001fb40:	c3                   	ret    
c001fb41:	90                   	nop
c001fb42:	66 90                	xchg   ax,ax

c001fb44 <SSE::save(void*)>:
c001fb44:	83 ec 0c             	sub    esp,0xc
c001fb47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb4b:	83 ec 0c             	sub    esp,0xc
c001fb4e:	50                   	push   eax
c001fb4f:	e8 f4 0f 00 00       	call   c0020b48 <sseSave>
c001fb54:	83 c4 10             	add    esp,0x10
c001fb57:	90                   	nop
c001fb58:	83 c4 0c             	add    esp,0xc
c001fb5b:	c3                   	ret    

c001fb5c <SSE::load(void*)>:
c001fb5c:	83 ec 0c             	sub    esp,0xc
c001fb5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb63:	83 ec 0c             	sub    esp,0xc
c001fb66:	50                   	push   eax
c001fb67:	e8 e2 0f 00 00       	call   c0020b4e <sseLoad>
c001fb6c:	83 c4 10             	add    esp,0x10
c001fb6f:	90                   	nop
c001fb70:	83 c4 0c             	add    esp,0xc
c001fb73:	c3                   	ret    

c001fb74 <SSE::SSE()>:
c001fb74:	83 ec 0c             	sub    esp,0xc
c001fb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7b:	83 ec 08             	sub    esp,0x8
c001fb7e:	68 30 51 02 c0       	push   0xc0025130
c001fb83:	50                   	push   eax
c001fb84:	e8 3f e8 fe ff       	call   c000e3c8 <FPU::FPU(char const*)>
c001fb89:	83 c4 10             	add    esp,0x10
c001fb8c:	ba 40 51 02 c0       	mov    edx,0xc0025140
c001fb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb95:	89 10                	mov    DWORD PTR [eax],edx
c001fb97:	90                   	nop
c001fb98:	83 c4 0c             	add    esp,0xc
c001fb9b:	c3                   	ret    

c001fb9c <x87::open(int, int, void*)>:
c001fb9c:	83 ec 0c             	sub    esp,0xc
c001fb9f:	e8 fe 0f 00 00       	call   c0020ba2 <x87Init>
c001fba4:	b8 00 00 00 00       	mov    eax,0x0
c001fba9:	83 c4 0c             	add    esp,0xc
c001fbac:	c3                   	ret    
c001fbad:	90                   	nop
c001fbae:	66 90                	xchg   ax,ax

c001fbb0 <x87::close(int, int, void*)>:
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	e8 04 10 00 00       	call   c0020bbc <x87Close>
c001fbb8:	b8 00 00 00 00       	mov    eax,0x0
c001fbbd:	83 c4 0c             	add    esp,0xc
c001fbc0:	c3                   	ret    
c001fbc1:	90                   	nop
c001fbc2:	66 90                	xchg   ax,ax

c001fbc4 <x87::available()>:
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	e8 aa 0f 00 00       	call   c0020b76 <x87Detect>
c001fbcc:	85 c0                	test   eax,eax
c001fbce:	0f 95 c0             	setne  al
c001fbd1:	83 c4 0c             	add    esp,0xc
c001fbd4:	c3                   	ret    
c001fbd5:	90                   	nop
c001fbd6:	66 90                	xchg   ax,ax

c001fbd8 <x87::save(void*)>:
c001fbd8:	83 ec 0c             	sub    esp,0xc
c001fbdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbdf:	83 ec 0c             	sub    esp,0xc
c001fbe2:	50                   	push   eax
c001fbe3:	e8 a9 0f 00 00       	call   c0020b91 <x87Save>
c001fbe8:	83 c4 10             	add    esp,0x10
c001fbeb:	90                   	nop
c001fbec:	83 c4 0c             	add    esp,0xc
c001fbef:	c3                   	ret    

c001fbf0 <x87::load(void*)>:
c001fbf0:	83 ec 0c             	sub    esp,0xc
c001fbf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbf7:	83 ec 0c             	sub    esp,0xc
c001fbfa:	50                   	push   eax
c001fbfb:	e8 9a 0f 00 00       	call   c0020b9a <x87Load>
c001fc00:	83 c4 10             	add    esp,0x10
c001fc03:	90                   	nop
c001fc04:	83 c4 0c             	add    esp,0xc
c001fc07:	c3                   	ret    

c001fc08 <x87::x87()>:
c001fc08:	83 ec 0c             	sub    esp,0xc
c001fc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0f:	83 ec 08             	sub    esp,0x8
c001fc12:	68 70 51 02 c0       	push   0xc0025170
c001fc17:	50                   	push   eax
c001fc18:	e8 ab e7 fe ff       	call   c000e3c8 <FPU::FPU(char const*)>
c001fc1d:	83 c4 10             	add    esp,0x10
c001fc20:	ba 80 51 02 c0       	mov    edx,0xc0025180
c001fc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc29:	89 10                	mov    DWORD PTR [eax],edx
c001fc2b:	90                   	nop
c001fc2c:	83 c4 0c             	add    esp,0xc
c001fc2f:	c3                   	ret    

c001fc30 <APIC::disable()>:
c001fc30:	90                   	nop
c001fc31:	c3                   	ret    

c001fc32 <APIC::close(int, int, void*)>:
c001fc32:	55                   	push   ebp
c001fc33:	89 e5                	mov    ebp,esp
c001fc35:	83 ec 08             	sub    esp,0x8
c001fc38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fc3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc3d:	83 c0 3c             	add    eax,0x3c
c001fc40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc42:	83 ec 0c             	sub    esp,0xc
c001fc45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fc48:	ff d0                	call   eax
c001fc4a:	83 c4 10             	add    esp,0x10
c001fc4d:	b8 00 00 00 00       	mov    eax,0x0
c001fc52:	c9                   	leave  
c001fc53:	c3                   	ret    

c001fc54 <IOAPIC::close(int, int, void*)>:
c001fc54:	b8 00 00 00 00       	mov    eax,0x0
c001fc59:	c3                   	ret    

c001fc5a <APIC::io_wait()>:
c001fc5a:	eb 00                	jmp    c001fc5c <APIC::io_wait()+0x2>
c001fc5c:	eb 00                	jmp    c001fc5e <APIC::io_wait()+0x4>
c001fc5e:	90                   	nop
c001fc5f:	c3                   	ret    

c001fc60 <APIC::getBase()>:
c001fc60:	55                   	push   ebp
c001fc61:	89 e5                	mov    ebp,esp
c001fc63:	83 ec 18             	sub    esp,0x18
c001fc66:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c001fc6b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fc71:	83 e0 08             	and    eax,0x8
c001fc74:	84 c0                	test   al,al
c001fc76:	75 07                	jne    c001fc7f <APIC::getBase()+0x1f>
c001fc78:	b8 00 00 00 00       	mov    eax,0x0
c001fc7d:	eb 21                	jmp    c001fca0 <APIC::getBase()+0x40>
c001fc7f:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c001fc84:	83 ec 08             	sub    esp,0x8
c001fc87:	6a 1b                	push   0x1b
c001fc89:	50                   	push   eax
c001fc8a:	e8 95 92 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fc8f:	83 c4 10             	add    esp,0x10
c001fc92:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fc95:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fc98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fc9b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fca0:	c9                   	leave  
c001fca1:	c3                   	ret    

c001fca2 <APIC::eoi(unsigned char)>:
c001fca2:	55                   	push   ebp
c001fca3:	89 e5                	mov    ebp,esp
c001fca5:	83 ec 28             	sub    esp,0x28
c001fca8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fcab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fcae:	83 ec 0c             	sub    esp,0xc
c001fcb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fcb4:	e8 a7 ff ff ff       	call   c001fc60 <APIC::getBase()>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	05 b0 00 00 00       	add    eax,0xb0
c001fcc1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fcc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fcc7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fccd:	90                   	nop
c001fcce:	c9                   	leave  
c001fccf:	c3                   	ret    

c001fcd0 <APIC::open(int, int, void*)>:
c001fcd0:	55                   	push   ebp
c001fcd1:	89 e5                	mov    ebp,esp
c001fcd3:	57                   	push   edi
c001fcd4:	56                   	push   esi
c001fcd5:	53                   	push   ebx
c001fcd6:	83 ec 2c             	sub    esp,0x2c
c001fcd9:	83 ec 0c             	sub    esp,0xc
c001fcdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fcdf:	e8 7c ff ff ff       	call   c001fc60 <APIC::getBase()>
c001fce4:	83 c4 10             	add    esp,0x10
c001fce7:	89 c2                	mov    edx,eax
c001fce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fcec:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fcf2:	0f b6 f8             	movzx  edi,al
c001fcf5:	89 d0                	mov    eax,edx
c001fcf7:	ba 00 00 00 00       	mov    edx,0x0
c001fcfc:	89 c1                	mov    ecx,eax
c001fcfe:	80 e5 ff             	and    ch,0xff
c001fd01:	89 cb                	mov    ebx,ecx
c001fd03:	0f b6 f2             	movzx  esi,dl
c001fd06:	89 d8                	mov    eax,ebx
c001fd08:	89 f2                	mov    edx,esi
c001fd0a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd0d:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fd10:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fd14:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fd18:	83 e0 00             	and    eax,0x0
c001fd1b:	09 d0                	or     eax,edx
c001fd1d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fd21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd24:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd2a:	8d 50 01             	lea    edx,[eax+0x1]
c001fd2d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd30:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fd36:	0f b6 d0             	movzx  edx,al
c001fd39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd3c:	83 c2 08             	add    edx,0x8
c001fd3f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fd43:	0f b6 c9             	movzx  ecx,cl
c001fd46:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fd4c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fd50:	83 ec 0c             	sub    esp,0xc
c001fd53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd56:	e8 05 ff ff ff       	call   c001fc60 <APIC::getBase()>
c001fd5b:	83 c4 10             	add    esp,0x10
c001fd5e:	05 f0 00 00 00       	add    eax,0xf0
c001fd63:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fd66:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fd69:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd6b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fd6e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fd75:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fd7c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fd7f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fd82:	89 10                	mov    DWORD PTR [eax],edx
c001fd84:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fd8b:	a1 f0 69 02 c0       	mov    eax,ds:0xc00269f0
c001fd90:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fd93:	7d 7c                	jge    c001fe11 <APIC::open(int, int, void*)+0x141>
c001fd95:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fd98:	8b 04 85 00 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9600]
c001fd9f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fda2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fda5:	8b 04 85 00 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9600]
c001fdac:	c1 e8 08             	shr    eax,0x8
c001fdaf:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fdb3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fdb6:	8b 04 85 00 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9600]
c001fdbd:	c1 e8 18             	shr    eax,0x18
c001fdc0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fdc3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fdc7:	75 40                	jne    c001fe09 <APIC::open(int, int, void*)+0x139>
c001fdc9:	83 ec 0c             	sub    esp,0xc
c001fdcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdcf:	e8 8c fe ff ff       	call   c001fc60 <APIC::getBase()>
c001fdd4:	83 c4 10             	add    esp,0x10
c001fdd7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fddb:	75 07                	jne    c001fde4 <APIC::open(int, int, void*)+0x114>
c001fddd:	ba 60 03 00 00       	mov    edx,0x360
c001fde2:	eb 05                	jmp    c001fde9 <APIC::open(int, int, void*)+0x119>
c001fde4:	ba 50 03 00 00       	mov    edx,0x350
c001fde9:	01 d0                	add    eax,edx
c001fdeb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fdee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fdf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdf3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fdf6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fdfd:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fe01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe04:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fe07:	89 10                	mov    DWORD PTR [eax],edx
c001fe09:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fe0c:	e9 7a ff ff ff       	jmp    c001fd8b <APIC::open(int, int, void*)+0xbb>
c001fe11:	b8 00 00 00 00       	mov    eax,0x0
c001fe16:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fe19:	5b                   	pop    ebx
c001fe1a:	5e                   	pop    esi
c001fe1b:	5f                   	pop    edi
c001fe1c:	5d                   	pop    ebp
c001fe1d:	c3                   	ret    

c001fe1e <IOAPIC::IOAPIC()>:
c001fe1e:	83 ec 0c             	sub    esp,0xc
c001fe21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe25:	83 ec 08             	sub    esp,0x8
c001fe28:	68 b0 51 02 c0       	push   0xc00251b0
c001fe2d:	50                   	push   eax
c001fe2e:	e8 83 e2 fe ff       	call   c000e0b6 <Device::Device(char const*)>
c001fe33:	83 c4 10             	add    esp,0x10
c001fe36:	ba d8 52 02 c0       	mov    edx,0xc00252d8
c001fe3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3f:	89 10                	mov    DWORD PTR [eax],edx
c001fe41:	90                   	nop
c001fe42:	83 c4 0c             	add    esp,0xc
c001fe45:	c3                   	ret    

c001fe46 <APIC::APIC()>:
c001fe46:	53                   	push   ebx
c001fe47:	83 ec 18             	sub    esp,0x18
c001fe4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe4e:	83 ec 08             	sub    esp,0x8
c001fe51:	68 b8 51 02 c0       	push   0xc00251b8
c001fe56:	50                   	push   eax
c001fe57:	e8 d2 e9 fe ff       	call   c000e82e <InterruptController::InterruptController(char const*)>
c001fe5c:	83 c4 10             	add    esp,0x10
c001fe5f:	ba 90 52 02 c0       	mov    edx,0xc0025290
c001fe64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe68:	89 10                	mov    DWORD PTR [eax],edx
c001fe6a:	a0 c0 80 02 c0       	mov    al,ds:0xc00280c0
c001fe6f:	83 f0 01             	xor    eax,0x1
c001fe72:	84 c0                	test   al,al
c001fe74:	0f 84 a1 00 00 00    	je     c001ff1b <APIC::APIC()+0xd5>
c001fe7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001fe7f:	a0 a0 6a 02 c0       	mov    al,ds:0xc0026aa0
c001fe84:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001fe88:	0f 83 86 00 00 00    	jae    c001ff14 <APIC::APIC()+0xce>
c001fe8e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001fe96:	83 ec 0c             	sub    esp,0xc
c001fe99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fe9d:	e8 21 9b fe ff       	call   c00099c3 <malloc>
c001fea2:	83 c4 10             	add    esp,0x10
c001fea5:	89 c3                	mov    ebx,eax
c001fea7:	83 ec 0c             	sub    esp,0xc
c001feaa:	53                   	push   ebx
c001feab:	e8 6e ff ff ff       	call   c001fe1e <IOAPIC::IOAPIC()>
c001feb0:	83 c4 10             	add    esp,0x10
c001feb3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001feb7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001febc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fec0:	89 14 85 a0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f60],edx
c001fec7:	a1 80 80 02 c0       	mov    eax,ds:0xc0028080
c001fecc:	40                   	inc    eax
c001fecd:	a3 80 80 02 c0       	mov    ds:0xc0028080,eax
c001fed2:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c001fed7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001fedd:	83 ec 08             	sub    esp,0x8
c001fee0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fee4:	50                   	push   eax
c001fee5:	e8 c8 df fe ff       	call   c000deb2 <Device::addChild(Device*)>
c001feea:	83 c4 10             	add    esp,0x10
c001feed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fef1:	8b 00                	mov    eax,DWORD PTR [eax]
c001fef3:	83 c0 08             	add    eax,0x8
c001fef6:	8b 00                	mov    eax,DWORD PTR [eax]
c001fef8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001fefd:	6a 00                	push   0x0
c001feff:	6a 00                	push   0x0
c001ff01:	52                   	push   edx
c001ff02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff06:	ff d0                	call   eax
c001ff08:	83 c4 10             	add    esp,0x10
c001ff0b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ff0f:	e9 6b ff ff ff       	jmp    c001fe7f <APIC::APIC()+0x39>
c001ff14:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c001ff1b:	90                   	nop
c001ff1c:	83 c4 18             	add    esp,0x18
c001ff1f:	5b                   	pop    ebx
c001ff20:	c3                   	ret    
c001ff21:	90                   	nop

c001ff22 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ff22:	55                   	push   ebp
c001ff23:	89 e5                	mov    ebp,esp
c001ff25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ff2e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ff31:	72 1d                	jb     c001ff50 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ff33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff36:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ff3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff3f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ff45:	01 d0                	add    eax,edx
c001ff47:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ff4a:	73 04                	jae    c001ff50 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ff4c:	b0 01                	mov    al,0x1
c001ff4e:	eb 02                	jmp    c001ff52 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ff50:	b0 00                	mov    al,0x0
c001ff52:	5d                   	pop    ebp
c001ff53:	c3                   	ret    

c001ff54 <IOAPIC::read(int)>:
c001ff54:	55                   	push   ebp
c001ff55:	89 e5                	mov    ebp,esp
c001ff57:	83 ec 10             	sub    esp,0x10
c001ff5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ff63:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ff66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ff69:	0f b6 d0             	movzx  edx,al
c001ff6c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ff6f:	89 10                	mov    DWORD PTR [eax],edx
c001ff71:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ff74:	83 c0 10             	add    eax,0x10
c001ff77:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff79:	c9                   	leave  
c001ff7a:	c3                   	ret    
c001ff7b:	90                   	nop

c001ff7c <IOAPIC::open(int, int, void*)>:
c001ff7c:	55                   	push   ebp
c001ff7d:	89 e5                	mov    ebp,esp
c001ff7f:	57                   	push   edi
c001ff80:	56                   	push   esi
c001ff81:	53                   	push   ebx
c001ff82:	83 ec 0c             	sub    esp,0xc
c001ff85:	83 ec 0c             	sub    esp,0xc
c001ff88:	68 e3 51 02 c0       	push   0xc00251e3
c001ff8d:	e8 d9 ca fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c001ff92:	83 c4 10             	add    esp,0x10
c001ff95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff98:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ff9b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ffa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffa4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ffaa:	8b 14 85 e0 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9520]
c001ffb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffb4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ffba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffbd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ffc3:	8b 14 85 60 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd94a0]
c001ffca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffcd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ffd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffd6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ffdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffdf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ffe5:	0f b6 f8             	movzx  edi,al
c001ffe8:	89 d0                	mov    eax,edx
c001ffea:	ba 00 00 00 00       	mov    edx,0x0
c001ffef:	89 c1                	mov    ecx,eax
c001fff1:	80 e5 ff             	and    ch,0xff
c001fff4:	89 cb                	mov    ebx,ecx
c001fff6:	0f b6 f2             	movzx  esi,dl
c001fff9:	89 d8                	mov    eax,ebx
c001fffb:	89 f2                	mov    edx,esi
c001fffd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020000:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020003:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020007:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002000b:	83 e0 00             	and    eax,0x0
c002000e:	09 d0                	or     eax,edx
c0020010:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020017:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002001d:	8d 50 01             	lea    edx,[eax+0x1]
c0020020:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020023:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020029:	0f b6 d0             	movzx  edx,al
c002002c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002002f:	83 c2 08             	add    edx,0x8
c0020032:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020036:	0f b6 c9             	movzx  ecx,cl
c0020039:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002003f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020043:	83 ec 08             	sub    esp,0x8
c0020046:	6a 01                	push   0x1
c0020048:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002004b:	e8 04 ff ff ff       	call   c001ff54 <IOAPIC::read(int)>
c0020050:	83 c4 10             	add    esp,0x10
c0020053:	c1 f8 10             	sar    eax,0x10
c0020056:	0f b6 c0             	movzx  eax,al
c0020059:	8d 50 01             	lea    edx,[eax+0x1]
c002005c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002005f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020065:	b8 00 00 00 00       	mov    eax,0x0
c002006a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002006d:	5b                   	pop    ebx
c002006e:	5e                   	pop    esi
c002006f:	5f                   	pop    edi
c0020070:	5d                   	pop    ebp
c0020071:	c3                   	ret    

c0020072 <IOAPIC::write(int, int)>:
c0020072:	55                   	push   ebp
c0020073:	89 e5                	mov    ebp,esp
c0020075:	83 ec 10             	sub    esp,0x10
c0020078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002007b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020081:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020084:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020087:	0f b6 d0             	movzx  edx,al
c002008a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002008d:	89 10                	mov    DWORD PTR [eax],edx
c002008f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020092:	8d 50 10             	lea    edx,[eax+0x10]
c0020095:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020098:	89 02                	mov    DWORD PTR [edx],eax
c002009a:	90                   	nop
c002009b:	c9                   	leave  
c002009c:	c3                   	ret    
c002009d:	90                   	nop

c002009e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002009e:	55                   	push   ebp
c002009f:	89 e5                	mov    ebp,esp
c00200a1:	53                   	push   ebx
c00200a2:	83 ec 2c             	sub    esp,0x2c
c00200a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00200a8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00200ab:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00200ae:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00200b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00200b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00200b7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00200ba:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00200bd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00200c0:	88 d8                	mov    al,bl
c00200c2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00200c5:	88 c8                	mov    al,cl
c00200c7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00200ca:	88 d0                	mov    al,dl
c00200cc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00200cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00200d3:	83 c0 08             	add    eax,0x8
c00200d6:	01 c0                	add    eax,eax
c00200d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00200db:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00200df:	83 c0 08             	add    eax,0x8
c00200e2:	01 c0                	add    eax,eax
c00200e4:	40                   	inc    eax
c00200e5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00200e8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00200eb:	50                   	push   eax
c00200ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200ef:	e8 60 fe ff ff       	call   c001ff54 <IOAPIC::read(int)>
c00200f4:	83 c4 08             	add    esp,0x8
c00200f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00200fa:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020101:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020104:	c1 e0 18             	shl    eax,0x18
c0020107:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002010a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002010d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020110:	52                   	push   edx
c0020111:	50                   	push   eax
c0020112:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020115:	e8 58 ff ff ff       	call   c0020072 <IOAPIC::write(int, int)>
c002011a:	83 c4 0c             	add    esp,0xc
c002011d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020120:	50                   	push   eax
c0020121:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020124:	e8 2b fe ff ff       	call   c001ff54 <IOAPIC::read(int)>
c0020129:	83 c4 08             	add    esp,0x8
c002012c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002012f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020136:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002013d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020144:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020148:	74 09                	je     c0020153 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002014a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020151:	eb 07                	jmp    c002015a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020153:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002015a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002015e:	74 09                	je     c0020169 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020160:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020167:	eb 07                	jmp    c0020170 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0020169:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020170:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020177:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002017b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002017e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020181:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020184:	52                   	push   edx
c0020185:	50                   	push   eax
c0020186:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020189:	e8 e4 fe ff ff       	call   c0020072 <IOAPIC::write(int, int)>
c002018e:	83 c4 0c             	add    esp,0xc
c0020191:	90                   	nop
c0020192:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020195:	c9                   	leave  
c0020196:	c3                   	ret    
c0020197:	90                   	nop

c0020198 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0020198:	55                   	push   ebp
c0020199:	89 e5                	mov    ebp,esp
c002019b:	57                   	push   edi
c002019c:	56                   	push   esi
c002019d:	53                   	push   ebx
c002019e:	83 ec 2c             	sub    esp,0x2c
c00201a1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00201a4:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00201a7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00201ab:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00201af:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00201b3:	74 5a                	je     c002020f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00201b5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00201b9:	7f 44                	jg     c00201ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00201bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201be:	05 80 58 02 c0       	add    eax,0xc0025880
c00201c3:	8a 00                	mov    al,BYTE PTR [eax]
c00201c5:	0f b6 c0             	movzx  eax,al
c00201c8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00201cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201ce:	66 8b 84 00 80 6a 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9580]
c00201d6:	0f b7 c0             	movzx  eax,ax
c00201d9:	83 e0 02             	and    eax,0x2
c00201dc:	85 c0                	test   eax,eax
c00201de:	74 04                	je     c00201e4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00201e0:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00201e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201e7:	66 8b 84 00 80 6a 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9580]
c00201ef:	0f b7 c0             	movzx  eax,ax
c00201f2:	83 e0 08             	and    eax,0x8
c00201f5:	85 c0                	test   eax,eax
c00201f7:	74 16                	je     c002020f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00201f9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00201fd:	eb 10                	jmp    c002020f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00201ff:	83 ec 0c             	sub    esp,0xc
c0020202:	68 f4 51 02 c0       	push   0xc00251f4
c0020207:	e8 ff 40 ff ff       	call   c001430b <Krnl::panic(char const*)>
c002020c:	83 c4 10             	add    esp,0x10
c002020f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0020213:	a1 80 80 02 c0       	mov    eax,ds:0xc0028080
c0020218:	83 ec 08             	sub    esp,0x8
c002021b:	50                   	push   eax
c002021c:	68 2c 52 02 c0       	push   0xc002522c
c0020221:	e8 45 c8 fe ff       	call   c000ca6b <Dbg::kprintf(char const*, ...)>
c0020226:	83 c4 10             	add    esp,0x10
c0020229:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0020230:	a1 80 80 02 c0       	mov    eax,ds:0xc0028080
c0020235:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0020238:	7d 67                	jge    c00202a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002023a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002023d:	8b 04 85 a0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f60]
c0020244:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020247:	83 ec 08             	sub    esp,0x8
c002024a:	52                   	push   edx
c002024b:	50                   	push   eax
c002024c:	e8 d1 fc ff ff       	call   c001ff22 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0020251:	83 c4 10             	add    esp,0x10
c0020254:	84 c0                	test   al,al
c0020256:	74 44                	je     c002029c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0020258:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002025b:	8b 1c 85 a0 80 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7f60]
c0020262:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0020266:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0020269:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002026d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020270:	83 c0 20             	add    eax,0x20
c0020273:	0f b6 f0             	movzx  esi,al
c0020276:	b8 00 00 00 00       	mov    eax,0x0
c002027b:	99                   	cdq    
c002027c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002027f:	0f b6 c9             	movzx  ecx,cl
c0020282:	83 ec 04             	sub    esp,0x4
c0020285:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020288:	57                   	push   edi
c0020289:	56                   	push   esi
c002028a:	52                   	push   edx
c002028b:	50                   	push   eax
c002028c:	51                   	push   ecx
c002028d:	53                   	push   ebx
c002028e:	e8 0b fe ff ff       	call   c002009e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0020293:	83 c4 20             	add    esp,0x20
c0020296:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002029a:	eb 05                	jmp    c00202a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002029c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002029f:	eb 8f                	jmp    c0020230 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00202a1:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00202a4:	83 f0 01             	xor    eax,0x1
c00202a7:	84 c0                	test   al,al
c00202a9:	74 10                	je     c00202bb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00202ab:	83 ec 0c             	sub    esp,0xc
c00202ae:	68 43 52 02 c0       	push   0xc0025243
c00202b3:	e8 53 40 ff ff       	call   c001430b <Krnl::panic(char const*)>
c00202b8:	83 c4 10             	add    esp,0x10
c00202bb:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00202bf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00202c6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00202ca:	7f 65                	jg     c0020331 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00202cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00202cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202d2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00202d9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00202dc:	01 ca                	add    edx,ecx
c00202de:	83 c2 54             	add    edx,0x54
c00202e1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00202e5:	85 c0                	test   eax,eax
c00202e7:	75 43                	jne    c002032c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00202e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00202ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202ef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00202f6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00202f9:	01 ca                	add    edx,ecx
c00202fb:	8d 4a 54             	lea    ecx,[edx+0x54]
c00202fe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020301:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020308:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002030b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020312:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020315:	01 ca                	add    edx,ecx
c0020317:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002031d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020320:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020324:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020327:	83 e8 20             	sub    eax,0x20
c002032a:	eb 1a                	jmp    c0020346 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002032c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002032f:	eb 95                	jmp    c00202c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0020331:	83 ec 0c             	sub    esp,0xc
c0020334:	68 50 52 02 c0       	push   0xc0025250
c0020339:	e8 cd 3f ff ff       	call   c001430b <Krnl::panic(char const*)>
c002033e:	83 c4 10             	add    esp,0x10
c0020341:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020346:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020349:	5b                   	pop    ebx
c002034a:	5e                   	pop    esi
c002034b:	5f                   	pop    edi
c002034c:	5d                   	pop    ebp
c002034d:	c3                   	ret    

c002034e <PIC::disable()>:
c002034e:	55                   	push   ebp
c002034f:	89 e5                	mov    ebp,esp
c0020351:	83 ec 10             	sub    esp,0x10
c0020354:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002035a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002035e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020361:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020365:	ee                   	out    dx,al
c0020366:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002036c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0020370:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020373:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0020377:	ee                   	out    dx,al
c0020378:	90                   	nop
c0020379:	c9                   	leave  
c002037a:	c3                   	ret    
c002037b:	90                   	nop

c002037c <PIC::close(int, int, void*)>:
c002037c:	55                   	push   ebp
c002037d:	89 e5                	mov    ebp,esp
c002037f:	83 ec 08             	sub    esp,0x8
c0020382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020385:	8b 00                	mov    eax,DWORD PTR [eax]
c0020387:	83 c0 3c             	add    eax,0x3c
c002038a:	8b 00                	mov    eax,DWORD PTR [eax]
c002038c:	83 ec 0c             	sub    esp,0xc
c002038f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020392:	ff d0                	call   eax
c0020394:	83 c4 10             	add    esp,0x10
c0020397:	b8 00 00 00 00       	mov    eax,0x0
c002039c:	c9                   	leave  
c002039d:	c3                   	ret    

c002039e <PIC::PIC()>:
c002039e:	83 ec 0c             	sub    esp,0xc
c00203a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a5:	83 ec 08             	sub    esp,0x8
c00203a8:	68 fc 52 02 c0       	push   0xc00252fc
c00203ad:	50                   	push   eax
c00203ae:	e8 7b e4 fe ff       	call   c000e82e <InterruptController::InterruptController(char const*)>
c00203b3:	83 c4 10             	add    esp,0x10
c00203b6:	ba 28 53 02 c0       	mov    edx,0xc0025328
c00203bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203bf:	89 10                	mov    DWORD PTR [eax],edx
c00203c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00203cb:	0f b6 d0             	movzx  edx,al
c00203ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00203d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00203e3:	0f b6 d0             	movzx  edx,al
c00203e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ea:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00203ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00203f9:	8d 50 01             	lea    edx,[eax+0x1]
c00203fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020400:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020406:	0f b6 d0             	movzx  edx,al
c0020409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020411:	83 e1 3f             	and    ecx,0x3f
c0020414:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020422:	0f b6 d0             	movzx  edx,al
c0020425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020429:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0020430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020434:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002043a:	0f b6 d0             	movzx  edx,al
c002043d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020441:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002044a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020450:	8d 50 01             	lea    edx,[eax+0x1]
c0020453:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020457:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002045d:	0f b6 d0             	movzx  edx,al
c0020460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020464:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020468:	83 e1 3f             	and    ecx,0x3f
c002046b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002046f:	90                   	nop
c0020470:	83 c4 0c             	add    esp,0xc
c0020473:	c3                   	ret    

c0020474 <PIC::ioWait()>:
c0020474:	eb 00                	jmp    c0020476 <PIC::ioWait()+0x2>
c0020476:	eb 00                	jmp    c0020478 <PIC::ioWait()+0x4>
c0020478:	90                   	nop
c0020479:	c3                   	ret    

c002047a <PIC::getIRQReg(int)>:
c002047a:	55                   	push   ebp
c002047b:	89 e5                	mov    ebp,esp
c002047d:	83 ec 10             	sub    esp,0x10
c0020480:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020483:	0f b6 c0             	movzx  eax,al
c0020486:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002048c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002048f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020492:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020496:	ee                   	out    dx,al
c0020497:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002049a:	0f b6 c0             	movzx  eax,al
c002049d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00204a3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00204a6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00204a9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00204ad:	ee                   	out    dx,al
c00204ae:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00204b4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00204b8:	89 c2                	mov    edx,eax
c00204ba:	ec                   	in     al,dx
c00204bb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00204be:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00204c1:	0f b6 c0             	movzx  eax,al
c00204c4:	c1 e0 08             	shl    eax,0x8
c00204c7:	89 c1                	mov    ecx,eax
c00204c9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00204cf:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00204d3:	89 c2                	mov    edx,eax
c00204d5:	ec                   	in     al,dx
c00204d6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00204d9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00204dc:	0f b6 c0             	movzx  eax,al
c00204df:	09 c8                	or     eax,ecx
c00204e1:	c9                   	leave  
c00204e2:	c3                   	ret    
c00204e3:	90                   	nop

c00204e4 <PIC::eoi(unsigned char)>:
c00204e4:	55                   	push   ebp
c00204e5:	89 e5                	mov    ebp,esp
c00204e7:	83 ec 14             	sub    esp,0x14
c00204ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00204ed:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00204f0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00204f4:	75 1e                	jne    c0020514 <PIC::eoi(unsigned char)+0x30>
c00204f6:	6a 0b                	push   0xb
c00204f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00204fb:	e8 7a ff ff ff       	call   c002047a <PIC::getIRQReg(int)>
c0020500:	83 c4 08             	add    esp,0x8
c0020503:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0020507:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002050b:	25 80 00 00 00       	and    eax,0x80
c0020510:	85 c0                	test   eax,eax
c0020512:	74 5f                	je     c0020573 <PIC::eoi(unsigned char)+0x8f>
c0020514:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0020518:	75 2d                	jne    c0020547 <PIC::eoi(unsigned char)+0x63>
c002051a:	6a 0b                	push   0xb
c002051c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002051f:	e8 56 ff ff ff       	call   c002047a <PIC::getIRQReg(int)>
c0020524:	83 c4 08             	add    esp,0x8
c0020527:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002052b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002052e:	66 85 c0             	test   ax,ax
c0020531:	78 14                	js     c0020547 <PIC::eoi(unsigned char)+0x63>
c0020533:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0020539:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002053d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020540:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020544:	ee                   	out    dx,al
c0020545:	eb 2d                	jmp    c0020574 <PIC::eoi(unsigned char)+0x90>
c0020547:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002054b:	76 12                	jbe    c002055f <PIC::eoi(unsigned char)+0x7b>
c002054d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020553:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0020557:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002055a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002055e:	ee                   	out    dx,al
c002055f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020565:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0020569:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002056c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020570:	ee                   	out    dx,al
c0020571:	eb 01                	jmp    c0020574 <PIC::eoi(unsigned char)+0x90>
c0020573:	90                   	nop
c0020574:	c9                   	leave  
c0020575:	c3                   	ret    

c0020576 <PIC::remap()>:
c0020576:	55                   	push   ebp
c0020577:	89 e5                	mov    ebp,esp
c0020579:	83 ec 48             	sub    esp,0x48
c002057c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0020583:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002058a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0020590:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0020593:	89 c2                	mov    edx,eax
c0020595:	ec                   	in     al,dx
c0020596:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0020599:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002059c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002059f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00205a5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00205a8:	89 c2                	mov    edx,eax
c00205aa:	ec                   	in     al,dx
c00205ab:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00205ae:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00205b1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00205b4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00205ba:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00205be:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00205c1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00205c4:	ee                   	out    dx,al
c00205c5:	83 ec 0c             	sub    esp,0xc
c00205c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205cb:	e8 a4 fe ff ff       	call   c0020474 <PIC::ioWait()>
c00205d0:	83 c4 10             	add    esp,0x10
c00205d3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00205d9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00205dd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00205e0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00205e3:	ee                   	out    dx,al
c00205e4:	83 ec 0c             	sub    esp,0xc
c00205e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205ea:	e8 85 fe ff ff       	call   c0020474 <PIC::ioWait()>
c00205ef:	83 c4 10             	add    esp,0x10
c00205f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00205f5:	0f b6 c0             	movzx  eax,al
c00205f8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00205fe:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0020601:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0020604:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0020607:	ee                   	out    dx,al
c0020608:	83 ec 0c             	sub    esp,0xc
c002060b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002060e:	e8 61 fe ff ff       	call   c0020474 <PIC::ioWait()>
c0020613:	83 c4 10             	add    esp,0x10
c0020616:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020619:	0f b6 c0             	movzx  eax,al
c002061c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0020622:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0020625:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0020628:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002062b:	ee                   	out    dx,al
c002062c:	83 ec 0c             	sub    esp,0xc
c002062f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020632:	e8 3d fe ff ff       	call   c0020474 <PIC::ioWait()>
c0020637:	83 c4 10             	add    esp,0x10
c002063a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0020640:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0020644:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0020647:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002064a:	ee                   	out    dx,al
c002064b:	83 ec 0c             	sub    esp,0xc
c002064e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020651:	e8 1e fe ff ff       	call   c0020474 <PIC::ioWait()>
c0020656:	83 c4 10             	add    esp,0x10
c0020659:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002065f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0020663:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0020666:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020669:	ee                   	out    dx,al
c002066a:	83 ec 0c             	sub    esp,0xc
c002066d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020670:	e8 ff fd ff ff       	call   c0020474 <PIC::ioWait()>
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002067e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0020682:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0020685:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0020688:	ee                   	out    dx,al
c0020689:	83 ec 0c             	sub    esp,0xc
c002068c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002068f:	e8 e0 fd ff ff       	call   c0020474 <PIC::ioWait()>
c0020694:	83 c4 10             	add    esp,0x10
c0020697:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002069d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00206a1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00206a4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00206a7:	ee                   	out    dx,al
c00206a8:	83 ec 0c             	sub    esp,0xc
c00206ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206ae:	e8 c1 fd ff ff       	call   c0020474 <PIC::ioWait()>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00206ba:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00206c0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00206c3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00206c6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00206c9:	ee                   	out    dx,al
c00206ca:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00206ce:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00206d4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00206d7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00206da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00206dd:	ee                   	out    dx,al
c00206de:	90                   	nop
c00206df:	c9                   	leave  
c00206e0:	c3                   	ret    
c00206e1:	90                   	nop

c00206e2 <PIC::open(int, int, void*)>:
c00206e2:	55                   	push   ebp
c00206e3:	89 e5                	mov    ebp,esp
c00206e5:	83 ec 18             	sub    esp,0x18
c00206e8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00206ee:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00206f2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00206f5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00206f9:	ee                   	out    dx,al
c00206fa:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0020700:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0020704:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020707:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002070b:	ee                   	out    dx,al
c002070c:	83 ec 0c             	sub    esp,0xc
c002070f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020712:	e8 5f fe ff ff       	call   c0020576 <PIC::remap()>
c0020717:	83 c4 10             	add    esp,0x10
c002071a:	b8 00 00 00 00       	mov    eax,0x0
c002071f:	c9                   	leave  
c0020720:	c3                   	ret    
c0020721:	66 90                	xchg   ax,ax
c0020723:	90                   	nop

c0020724 <APICTimer::close(int, int, void*)>:
c0020724:	b8 00 00 00 00       	mov    eax,0x0
c0020729:	c3                   	ret    
c002072a:	66 90                	xchg   ax,ax

c002072c <apicTimerHandler(regs*, void*)>:
c002072c:	83 ec 0c             	sub    esp,0xc
c002072f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020733:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020735:	b8 10 27 00 00       	mov    eax,0x2710
c002073a:	ba 00 00 00 00       	mov    edx,0x0
c002073f:	f7 f1                	div    ecx
c0020741:	83 ec 0c             	sub    esp,0xc
c0020744:	50                   	push   eax
c0020745:	e8 ef ff fe ff       	call   c0010739 <timerHandler(unsigned int)>
c002074a:	83 c4 10             	add    esp,0x10
c002074d:	90                   	nop
c002074e:	83 c4 0c             	add    esp,0xc
c0020751:	c3                   	ret    
c0020752:	66 90                	xchg   ax,ax

c0020754 <APICTimer::write(int)>:
c0020754:	83 ec 1c             	sub    esp,0x1c
c0020757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002075b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002075f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020765:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c002076a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020770:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0020776:	83 ec 0c             	sub    esp,0xc
c0020779:	50                   	push   eax
c002077a:	e8 e1 f4 ff ff       	call   c001fc60 <APIC::getBase()>
c002077f:	83 c4 10             	add    esp,0x10
c0020782:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020786:	a1 ac 67 02 c0       	mov    eax,ds:0xc00267ac
c002078b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002078f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020793:	05 e0 03 00 00       	add    eax,0x3e0
c0020798:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002079e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207a2:	05 80 03 00 00       	add    eax,0x380
c00207a7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00207ad:	fb                   	sti    
c00207ae:	66 90                	xchg   ax,ax
c00207b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207b4:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00207ba:	a1 ac 67 02 c0       	mov    eax,ds:0xc00267ac
c00207bf:	39 c2                	cmp    edx,eax
c00207c1:	76 05                	jbe    c00207c8 <APICTimer::write(int)+0x74>
c00207c3:	eb eb                	jmp    c00207b0 <APICTimer::write(int)+0x5c>
c00207c5:	8d 76 00             	lea    esi,[esi+0x0]
c00207c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207cc:	05 20 03 00 00       	add    eax,0x320
c00207d1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00207d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207db:	05 90 03 00 00       	add    eax,0x390
c00207e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00207e2:	f7 d0                	not    eax
c00207e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207e8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00207ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207f0:	ba 00 00 00 00       	mov    edx,0x0
c00207f5:	f7 f1                	div    ecx
c00207f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00207fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020804:	0d 00 00 02 00       	or     eax,0x20000
c0020809:	89 c2                	mov    edx,eax
c002080b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002080f:	05 20 03 00 00       	add    eax,0x320
c0020814:	89 10                	mov    DWORD PTR [eax],edx
c0020816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002081a:	05 e0 03 00 00       	add    eax,0x3e0
c002081f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020825:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020829:	05 80 03 00 00       	add    eax,0x380
c002082e:	89 c2                	mov    edx,eax
c0020830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020833:	89 02                	mov    DWORD PTR [edx],eax
c0020835:	90                   	nop
c0020836:	83 c4 1c             	add    esp,0x1c
c0020839:	c3                   	ret    
c002083a:	66 90                	xchg   ax,ax

c002083c <APICTimer::open(int, int, void*)>:
c002083c:	57                   	push   edi
c002083d:	56                   	push   esi
c002083e:	53                   	push   ebx
c002083f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020843:	8b 00                	mov    eax,DWORD PTR [eax]
c0020845:	83 c0 24             	add    eax,0x24
c0020848:	8b 00                	mov    eax,DWORD PTR [eax]
c002084a:	83 ec 08             	sub    esp,0x8
c002084d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020855:	ff d0                	call   eax
c0020857:	83 c4 10             	add    esp,0x10
c002085a:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c002085f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020865:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002086b:	83 ec 0c             	sub    esp,0xc
c002086e:	50                   	push   eax
c002086f:	e8 ec f3 ff ff       	call   c001fc60 <APIC::getBase()>
c0020874:	83 c4 10             	add    esp,0x10
c0020877:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002087d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020881:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020887:	0f b6 f8             	movzx  edi,al
c002088a:	89 d0                	mov    eax,edx
c002088c:	ba 00 00 00 00       	mov    edx,0x0
c0020891:	89 c1                	mov    ecx,eax
c0020893:	80 e5 ff             	and    ch,0xff
c0020896:	89 cb                	mov    ebx,ecx
c0020898:	0f b6 f2             	movzx  esi,dl
c002089b:	89 d8                	mov    eax,ebx
c002089d:	89 f2                	mov    edx,esi
c002089f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208a3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00208a6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00208aa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00208ae:	83 e0 00             	and    eax,0x0
c00208b1:	09 d0                	or     eax,edx
c00208b3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00208b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208bb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00208c1:	8d 50 01             	lea    edx,[eax+0x1]
c00208c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208c8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00208ce:	0f b6 d0             	movzx  edx,al
c00208d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208d5:	83 c2 08             	add    edx,0x8
c00208d8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00208dc:	0f b6 c9             	movzx  ecx,cl
c00208df:	81 c9 00 00 01 00    	or     ecx,0x10000
c00208e5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00208e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00208f1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00208f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00208ff:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020905:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020909:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002090f:	83 ec 0c             	sub    esp,0xc
c0020912:	51                   	push   ecx
c0020913:	6a 01                	push   0x1
c0020915:	68 2c 07 02 c0       	push   0xc002072c
c002091a:	52                   	push   edx
c002091b:	50                   	push   eax
c002091c:	e8 09 d5 fe ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020921:	83 c4 20             	add    esp,0x20
c0020924:	89 c2                	mov    edx,eax
c0020926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002092a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020930:	b8 00 00 00 00       	mov    eax,0x0
c0020935:	5b                   	pop    ebx
c0020936:	5e                   	pop    esi
c0020937:	5f                   	pop    edi
c0020938:	c3                   	ret    
c0020939:	90                   	nop
c002093a:	66 90                	xchg   ax,ax

c002093c <APICTimer::APICTimer()>:
c002093c:	83 ec 0c             	sub    esp,0xc
c002093f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020943:	83 ec 08             	sub    esp,0x8
c0020946:	68 68 53 02 c0       	push   0xc0025368
c002094b:	50                   	push   eax
c002094c:	e8 57 fd fe ff       	call   c00106a8 <Timer::Timer(char const*)>
c0020951:	83 c4 10             	add    esp,0x10
c0020954:	ba 7c 53 02 c0       	mov    edx,0xc002537c
c0020959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002095d:	89 10                	mov    DWORD PTR [eax],edx
c002095f:	90                   	nop
c0020960:	83 c4 0c             	add    esp,0xc
c0020963:	c3                   	ret    

c0020964 <PIT::write(int)>:
c0020964:	83 ec 10             	sub    esp,0x10
c0020967:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002096b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002096f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020975:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020979:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c002097e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020983:	99                   	cdq    
c0020984:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020988:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002098c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020993:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020998:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002099c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00209a1:	ee                   	out    dx,al
c00209a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209a6:	0f b6 c0             	movzx  eax,al
c00209a9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00209b0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00209b4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00209b8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00209bd:	ee                   	out    dx,al
c00209be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209c2:	c1 f8 08             	sar    eax,0x8
c00209c5:	0f b6 c0             	movzx  eax,al
c00209c8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00209cf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00209d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00209d7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00209dc:	ee                   	out    dx,al
c00209dd:	90                   	nop
c00209de:	83 c4 10             	add    esp,0x10
c00209e1:	c3                   	ret    
c00209e2:	66 90                	xchg   ax,ax

c00209e4 <pitHandler(regs*, void*)>:
c00209e4:	83 ec 0c             	sub    esp,0xc
c00209e7:	8b 0d c4 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280c4
c00209ed:	b8 a0 86 01 00       	mov    eax,0x186a0
c00209f2:	99                   	cdq    
c00209f3:	f7 f9                	idiv   ecx
c00209f5:	83 ec 0c             	sub    esp,0xc
c00209f8:	50                   	push   eax
c00209f9:	e8 3b fd fe ff       	call   c0010739 <timerHandler(unsigned int)>
c00209fe:	83 c4 10             	add    esp,0x10
c0020a01:	90                   	nop
c0020a02:	83 c4 0c             	add    esp,0xc
c0020a05:	c3                   	ret    
c0020a06:	66 90                	xchg   ax,ax

c0020a08 <PIT::open(int, int, void*)>:
c0020a08:	83 ec 0c             	sub    esp,0xc
c0020a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a11:	83 c0 24             	add    eax,0x24
c0020a14:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a16:	83 ec 08             	sub    esp,0x8
c0020a19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a21:	ff d0                	call   eax
c0020a23:	83 c4 10             	add    esp,0x10
c0020a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a2a:	83 ec 0c             	sub    esp,0xc
c0020a2d:	6a 00                	push   0x0
c0020a2f:	6a 01                	push   0x1
c0020a31:	68 e4 09 02 c0       	push   0xc00209e4
c0020a36:	6a 00                	push   0x0
c0020a38:	50                   	push   eax
c0020a39:	e8 ec d3 fe ff       	call   c000de2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020a3e:	83 c4 20             	add    esp,0x20
c0020a41:	89 c2                	mov    edx,eax
c0020a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a47:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020a4d:	b8 00 00 00 00       	mov    eax,0x0
c0020a52:	83 c4 0c             	add    esp,0xc
c0020a55:	c3                   	ret    
c0020a56:	66 90                	xchg   ax,ax

c0020a58 <PIT::close(int, int, void*)>:
c0020a58:	83 ec 0c             	sub    esp,0xc
c0020a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a5f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a6d:	6a 01                	push   0x1
c0020a6f:	68 e4 09 02 c0       	push   0xc00209e4
c0020a74:	6a 00                	push   0x0
c0020a76:	50                   	push   eax
c0020a77:	e8 f8 d3 fe ff       	call   c000de74 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020a7c:	83 c4 10             	add    esp,0x10
c0020a7f:	b8 00 00 00 00       	mov    eax,0x0
c0020a84:	83 c4 0c             	add    esp,0xc
c0020a87:	c3                   	ret    

c0020a88 <PIT::PIT()>:
c0020a88:	83 ec 0c             	sub    esp,0xc
c0020a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a8f:	83 ec 08             	sub    esp,0x8
c0020a92:	68 a4 53 02 c0       	push   0xc00253a4
c0020a97:	50                   	push   eax
c0020a98:	e8 0b fc fe ff       	call   c00106a8 <Timer::Timer(char const*)>
c0020a9d:	83 c4 10             	add    esp,0x10
c0020aa0:	ba cc 53 02 c0       	mov    edx,0xc00253cc
c0020aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aa9:	89 10                	mov    DWORD PTR [eax],edx
c0020aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aaf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ab5:	0f b6 d0             	movzx  edx,al
c0020ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020abc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020acd:	0f b6 d0             	movzx  edx,al
c0020ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ad4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020add:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ae3:	8d 50 01             	lea    edx,[eax+0x1]
c0020ae6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020aea:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020af0:	0f b6 d0             	movzx  edx,al
c0020af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020af7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020afb:	83 e1 3f             	and    ecx,0x3f
c0020afe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020b02:	90                   	nop
c0020b03:	83 c4 0c             	add    esp,0xc
c0020b06:	c3                   	ret    
c0020b07:	66 90                	xchg   ax,ax
c0020b09:	66 90                	xchg   ax,ax
c0020b0b:	66 90                	xchg   ax,ax
c0020b0d:	66 90                	xchg   ax,ax
c0020b0f:	90                   	nop

c0020b10 <avxDetect>:
c0020b10:	b8 00 00 00 00       	mov    eax,0x0
c0020b15:	c3                   	ret    

c0020b16 <avxSave>:
c0020b16:	c3                   	ret    

c0020b17 <avxLoad>:
c0020b17:	c3                   	ret    

c0020b18 <avxInit>:
c0020b18:	c3                   	ret    

c0020b19 <avxClose>:
c0020b19:	c3                   	ret    

c0020b1a <wouldSheSayYes>:
c0020b1a:	c3                   	ret    
c0020b1b:	49                   	dec    ecx
c0020b1c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020b20:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020b24:	75 20                	jne    c0020b46 <sseDetect.noSSE+0x1>
c0020b26:	4e                   	dec    esi
c0020b27:	79 61                	jns    c0020b8a <x87Detect+0x14>
c0020b29:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020b2e:	66 90                	xchg   ax,ax

c0020b30 <absolutelyNoChanceInHell>:
c0020b30:	b8 01 00 00 00       	mov    eax,0x1
c0020b35:	0f a2                	cpuid  
c0020b37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020b3d:	74 06                	je     c0020b45 <sseDetect.noSSE>
c0020b3f:	b8 01 00 00 00       	mov    eax,0x1
c0020b44:	c3                   	ret    

c0020b45 <sseDetect.noSSE>:
c0020b45:	31 c0                	xor    eax,eax
c0020b47:	c3                   	ret    

c0020b48 <sseSave>:
c0020b48:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020b4d:	c3                   	ret    

c0020b4e <sseLoad>:
c0020b4e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020b53:	c3                   	ret    

c0020b54 <sseInit>:
c0020b54:	e8 49 00 00 00       	call   c0020ba2 <x87Init>
c0020b59:	0f 20 e0             	mov    eax,cr4
c0020b5c:	66 0d 00 06          	or     ax,0x600
c0020b60:	0f 22 e0             	mov    cr4,eax
c0020b63:	c3                   	ret    

c0020b64 <sseClose>:
c0020b64:	c3                   	ret    
c0020b65:	66 90                	xchg   ax,ax
c0020b67:	66 90                	xchg   ax,ax
c0020b69:	66 90                	xchg   ax,ax
c0020b6b:	66 90                	xchg   ax,ax
c0020b6d:	66 90                	xchg   ax,ax
c0020b6f:	90                   	nop

c0020b70 <value_37F>:
c0020b70:	7f 03                	jg     c0020b75 <value_37A+0x1>

c0020b72 <value_37E>:
c0020b72:	7e 03                	jle    c0020b77 <x87Detect+0x1>

c0020b74 <value_37A>:
c0020b74:	7a 03                	jp     c0020b79 <x87Detect+0x3>

c0020b76 <x87Detect>:
c0020b76:	b8 01 00 00 00       	mov    eax,0x1
c0020b7b:	0f a2                	cpuid  
c0020b7d:	f7 c2 01 00 00 00    	test   edx,0x1
c0020b83:	74 06                	je     c0020b8b <x87Detect.nox87>
c0020b85:	b8 01 00 00 00       	mov    eax,0x1
c0020b8a:	c3                   	ret    

c0020b8b <x87Detect.nox87>:
c0020b8b:	b8 00 00 00 00       	mov    eax,0x0
c0020b90:	c3                   	ret    

c0020b91 <x87Save>:
c0020b91:	55                   	push   ebp
c0020b92:	89 e5                	mov    ebp,esp
c0020b94:	9b dd 75 08          	fsave  [ebp+0x8]
c0020b98:	c9                   	leave  
c0020b99:	c3                   	ret    

c0020b9a <x87Load>:
c0020b9a:	55                   	push   ebp
c0020b9b:	89 e5                	mov    ebp,esp
c0020b9d:	dd 65 08             	frstor [ebp+0x8]
c0020ba0:	c9                   	leave  
c0020ba1:	c3                   	ret    

c0020ba2 <x87Init>:
c0020ba2:	9b db e3             	finit  
c0020ba5:	0f 20 c0             	mov    eax,cr0
c0020ba8:	66 25 fb ff          	and    ax,0xfffb
c0020bac:	66 0d 22 00          	or     ax,0x22
c0020bb0:	0f 22 c0             	mov    cr0,eax
c0020bb3:	0f 06                	clts   
c0020bb5:	d9 2d 74 0b 02 c0    	fldcw  WORD PTR ds:0xc0020b74
c0020bbb:	c3                   	ret    

c0020bbc <x87Close>:
c0020bbc:	c3                   	ret    
c0020bbd:	66 90                	xchg   ax,ax
c0020bbf:	90                   	nop

c0020bc0 <__do_global_ctors_aux>:
c0020bc0:	a1 5c 1d 02 c0       	mov    eax,ds:0xc0021d5c
c0020bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0020bc8:	74 1a                	je     c0020be4 <__do_global_ctors_aux+0x24>
c0020bca:	55                   	push   ebp
c0020bcb:	89 e5                	mov    ebp,esp
c0020bcd:	53                   	push   ebx
c0020bce:	52                   	push   edx
c0020bcf:	bb 5c 1d 02 c0       	mov    ebx,0xc0021d5c
c0020bd4:	ff d0                	call   eax
c0020bd6:	83 eb 04             	sub    ebx,0x4
c0020bd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020bdb:	83 f8 ff             	cmp    eax,0xffffffff
c0020bde:	75 f4                	jne    c0020bd4 <__do_global_ctors_aux+0x14>
c0020be0:	58                   	pop    eax
c0020be1:	5b                   	pop    ebx
c0020be2:	5d                   	pop    ebp
c0020be3:	c3                   	ret    
c0020be4:	c3                   	ret    
c0020be5:	66 90                	xchg   ax,ax
c0020be7:	90                   	nop

c0020be8 <__divdi3>:
c0020be8:	55                   	push   ebp
c0020be9:	57                   	push   edi
c0020bea:	56                   	push   esi
c0020beb:	53                   	push   ebx
c0020bec:	83 ec 1c             	sub    esp,0x1c
c0020bef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020bf3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020bf7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020bfa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020bfe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020c06:	85 db                	test   ebx,ebx
c0020c08:	0f 88 8e 00 00 00    	js     c0020c9c <__divdi3+0xb4>
c0020c0e:	89 dd                	mov    ebp,ebx
c0020c10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020c18:	89 d3                	mov    ebx,edx
c0020c1a:	85 d2                	test   edx,edx
c0020c1c:	79 0d                	jns    c0020c2b <__divdi3+0x43>
c0020c1e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020c22:	f7 d8                	neg    eax
c0020c24:	83 d2 00             	adc    edx,0x0
c0020c27:	f7 da                	neg    edx
c0020c29:	89 d3                	mov    ebx,edx
c0020c2b:	89 c7                	mov    edi,eax
c0020c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c30:	85 db                	test   ebx,ebx
c0020c32:	75 48                	jne    c0020c7c <__divdi3+0x94>
c0020c34:	39 ef                	cmp    edi,ebp
c0020c36:	76 24                	jbe    c0020c5c <__divdi3+0x74>
c0020c38:	89 ea                	mov    edx,ebp
c0020c3a:	f7 f7                	div    edi
c0020c3c:	89 c1                	mov    ecx,eax
c0020c3e:	31 f6                	xor    esi,esi
c0020c40:	89 c8                	mov    eax,ecx
c0020c42:	89 f2                	mov    edx,esi
c0020c44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020c48:	85 c9                	test   ecx,ecx
c0020c4a:	74 07                	je     c0020c53 <__divdi3+0x6b>
c0020c4c:	f7 d8                	neg    eax
c0020c4e:	83 d2 00             	adc    edx,0x0
c0020c51:	f7 da                	neg    edx
c0020c53:	83 c4 1c             	add    esp,0x1c
c0020c56:	5b                   	pop    ebx
c0020c57:	5e                   	pop    esi
c0020c58:	5f                   	pop    edi
c0020c59:	5d                   	pop    ebp
c0020c5a:	c3                   	ret    
c0020c5b:	90                   	nop
c0020c5c:	85 ff                	test   edi,edi
c0020c5e:	75 0b                	jne    c0020c6b <__divdi3+0x83>
c0020c60:	b8 01 00 00 00       	mov    eax,0x1
c0020c65:	31 d2                	xor    edx,edx
c0020c67:	f7 f3                	div    ebx
c0020c69:	89 c7                	mov    edi,eax
c0020c6b:	31 d2                	xor    edx,edx
c0020c6d:	89 e8                	mov    eax,ebp
c0020c6f:	f7 f7                	div    edi
c0020c71:	89 c6                	mov    esi,eax
c0020c73:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c76:	f7 f7                	div    edi
c0020c78:	89 c1                	mov    ecx,eax
c0020c7a:	eb c4                	jmp    c0020c40 <__divdi3+0x58>
c0020c7c:	39 eb                	cmp    ebx,ebp
c0020c7e:	77 3c                	ja     c0020cbc <__divdi3+0xd4>
c0020c80:	0f bd f3             	bsr    esi,ebx
c0020c83:	83 f6 1f             	xor    esi,0x1f
c0020c86:	75 40                	jne    c0020cc8 <__divdi3+0xe0>
c0020c88:	39 eb                	cmp    ebx,ebp
c0020c8a:	72 09                	jb     c0020c95 <__divdi3+0xad>
c0020c8c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020c8f:	0f 87 97 00 00 00    	ja     c0020d2c <__divdi3+0x144>
c0020c95:	b9 01 00 00 00       	mov    ecx,0x1
c0020c9a:	eb a4                	jmp    c0020c40 <__divdi3+0x58>
c0020c9c:	f7 d9                	neg    ecx
c0020c9e:	83 d3 00             	adc    ebx,0x0
c0020ca1:	f7 db                	neg    ebx
c0020ca3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020ca6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020caa:	89 dd                	mov    ebp,ebx
c0020cac:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020cb4:	e9 5f ff ff ff       	jmp    c0020c18 <__divdi3+0x30>
c0020cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0020cbc:	31 f6                	xor    esi,esi
c0020cbe:	31 c9                	xor    ecx,ecx
c0020cc0:	e9 7b ff ff ff       	jmp    c0020c40 <__divdi3+0x58>
c0020cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0020cc8:	b8 20 00 00 00       	mov    eax,0x20
c0020ccd:	29 f0                	sub    eax,esi
c0020ccf:	89 f1                	mov    ecx,esi
c0020cd1:	d3 e3                	shl    ebx,cl
c0020cd3:	89 fa                	mov    edx,edi
c0020cd5:	88 c1                	mov    cl,al
c0020cd7:	d3 ea                	shr    edx,cl
c0020cd9:	09 da                	or     edx,ebx
c0020cdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020cdf:	89 f1                	mov    ecx,esi
c0020ce1:	d3 e7                	shl    edi,cl
c0020ce3:	89 eb                	mov    ebx,ebp
c0020ce5:	88 c1                	mov    cl,al
c0020ce7:	d3 eb                	shr    ebx,cl
c0020ce9:	89 f1                	mov    ecx,esi
c0020ceb:	d3 e5                	shl    ebp,cl
c0020ced:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020cf0:	88 c1                	mov    cl,al
c0020cf2:	d3 ea                	shr    edx,cl
c0020cf4:	09 d5                	or     ebp,edx
c0020cf6:	89 e8                	mov    eax,ebp
c0020cf8:	89 da                	mov    edx,ebx
c0020cfa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020cfe:	89 d3                	mov    ebx,edx
c0020d00:	89 c5                	mov    ebp,eax
c0020d02:	f7 e7                	mul    edi
c0020d04:	39 d3                	cmp    ebx,edx
c0020d06:	72 18                	jb     c0020d20 <__divdi3+0x138>
c0020d08:	74 0a                	je     c0020d14 <__divdi3+0x12c>
c0020d0a:	89 e9                	mov    ecx,ebp
c0020d0c:	31 f6                	xor    esi,esi
c0020d0e:	e9 2d ff ff ff       	jmp    c0020c40 <__divdi3+0x58>
c0020d13:	90                   	nop
c0020d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020d17:	89 f1                	mov    ecx,esi
c0020d19:	d3 e7                	shl    edi,cl
c0020d1b:	39 c7                	cmp    edi,eax
c0020d1d:	73 eb                	jae    c0020d0a <__divdi3+0x122>
c0020d1f:	90                   	nop
c0020d20:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020d23:	31 f6                	xor    esi,esi
c0020d25:	e9 16 ff ff ff       	jmp    c0020c40 <__divdi3+0x58>
c0020d2a:	66 90                	xchg   ax,ax
c0020d2c:	31 c9                	xor    ecx,ecx
c0020d2e:	e9 0d ff ff ff       	jmp    c0020c40 <__divdi3+0x58>
c0020d33:	90                   	nop

c0020d34 <__moddi3>:
c0020d34:	55                   	push   ebp
c0020d35:	57                   	push   edi
c0020d36:	56                   	push   esi
c0020d37:	53                   	push   ebx
c0020d38:	83 ec 2c             	sub    esp,0x2c
c0020d3b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020d3f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020d43:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020d47:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020d4b:	85 db                	test   ebx,ebx
c0020d4d:	0f 88 85 00 00 00    	js     c0020dd8 <__moddi3+0xa4>
c0020d53:	89 de                	mov    esi,ebx
c0020d55:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020d5d:	89 d7                	mov    edi,edx
c0020d5f:	85 d2                	test   edx,edx
c0020d61:	79 09                	jns    c0020d6c <__moddi3+0x38>
c0020d63:	f7 d8                	neg    eax
c0020d65:	83 d2 00             	adc    edx,0x0
c0020d68:	f7 da                	neg    edx
c0020d6a:	89 d7                	mov    edi,edx
c0020d6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d70:	89 cd                	mov    ebp,ecx
c0020d72:	85 ff                	test   edi,edi
c0020d74:	75 52                	jne    c0020dc8 <__moddi3+0x94>
c0020d76:	89 c3                	mov    ebx,eax
c0020d78:	39 f0                	cmp    eax,esi
c0020d7a:	76 24                	jbe    c0020da0 <__moddi3+0x6c>
c0020d7c:	89 c8                	mov    eax,ecx
c0020d7e:	89 f2                	mov    edx,esi
c0020d80:	f7 f3                	div    ebx
c0020d82:	89 d6                	mov    esi,edx
c0020d84:	89 f0                	mov    eax,esi
c0020d86:	31 d2                	xor    edx,edx
c0020d88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d8c:	85 c9                	test   ecx,ecx
c0020d8e:	74 07                	je     c0020d97 <__moddi3+0x63>
c0020d90:	f7 d8                	neg    eax
c0020d92:	83 d2 00             	adc    edx,0x0
c0020d95:	f7 da                	neg    edx
c0020d97:	83 c4 2c             	add    esp,0x2c
c0020d9a:	5b                   	pop    ebx
c0020d9b:	5e                   	pop    esi
c0020d9c:	5f                   	pop    edi
c0020d9d:	5d                   	pop    ebp
c0020d9e:	c3                   	ret    
c0020d9f:	90                   	nop
c0020da0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020da4:	85 db                	test   ebx,ebx
c0020da6:	75 0d                	jne    c0020db5 <__moddi3+0x81>
c0020da8:	b8 01 00 00 00       	mov    eax,0x1
c0020dad:	31 d2                	xor    edx,edx
c0020daf:	f7 f7                	div    edi
c0020db1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020db5:	89 f0                	mov    eax,esi
c0020db7:	31 d2                	xor    edx,edx
c0020db9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020dbd:	f7 f7                	div    edi
c0020dbf:	89 e8                	mov    eax,ebp
c0020dc1:	f7 f7                	div    edi
c0020dc3:	89 d6                	mov    esi,edx
c0020dc5:	eb bd                	jmp    c0020d84 <__moddi3+0x50>
c0020dc7:	90                   	nop
c0020dc8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020dcc:	39 f7                	cmp    edi,esi
c0020dce:	76 20                	jbe    c0020df0 <__moddi3+0xbc>
c0020dd0:	89 c8                	mov    eax,ecx
c0020dd2:	89 f2                	mov    edx,esi
c0020dd4:	eb b2                	jmp    c0020d88 <__moddi3+0x54>
c0020dd6:	66 90                	xchg   ax,ax
c0020dd8:	f7 d9                	neg    ecx
c0020dda:	83 d3 00             	adc    ebx,0x0
c0020ddd:	f7 db                	neg    ebx
c0020ddf:	89 de                	mov    esi,ebx
c0020de1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020de9:	e9 6f ff ff ff       	jmp    c0020d5d <__moddi3+0x29>
c0020dee:	66 90                	xchg   ax,ax
c0020df0:	0f bd c7             	bsr    eax,edi
c0020df3:	83 f0 1f             	xor    eax,0x1f
c0020df6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020dfa:	75 24                	jne    c0020e20 <__moddi3+0xec>
c0020dfc:	39 f7                	cmp    edi,esi
c0020dfe:	72 06                	jb     c0020e06 <__moddi3+0xd2>
c0020e00:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020e04:	77 0c                	ja     c0020e12 <__moddi3+0xde>
c0020e06:	89 e9                	mov    ecx,ebp
c0020e08:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020e0c:	19 fe                	sbb    esi,edi
c0020e0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e16:	89 f2                	mov    edx,esi
c0020e18:	e9 6b ff ff ff       	jmp    c0020d88 <__moddi3+0x54>
c0020e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0020e20:	b8 20 00 00 00       	mov    eax,0x20
c0020e25:	89 c2                	mov    edx,eax
c0020e27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020e2b:	29 da                	sub    edx,ebx
c0020e2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020e31:	88 d9                	mov    cl,bl
c0020e33:	d3 e7                	shl    edi,cl
c0020e35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e39:	88 d1                	mov    cl,dl
c0020e3b:	d3 e8                	shr    eax,cl
c0020e3d:	09 c7                	or     edi,eax
c0020e3f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020e43:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e47:	89 d8                	mov    eax,ebx
c0020e49:	88 d9                	mov    cl,bl
c0020e4b:	d3 e7                	shl    edi,cl
c0020e4d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020e51:	89 f3                	mov    ebx,esi
c0020e53:	88 d1                	mov    cl,dl
c0020e55:	d3 eb                	shr    ebx,cl
c0020e57:	89 c7                	mov    edi,eax
c0020e59:	88 c1                	mov    cl,al
c0020e5b:	d3 e6                	shl    esi,cl
c0020e5d:	89 e8                	mov    eax,ebp
c0020e5f:	88 d1                	mov    cl,dl
c0020e61:	d3 e8                	shr    eax,cl
c0020e63:	09 f0                	or     eax,esi
c0020e65:	89 f9                	mov    ecx,edi
c0020e67:	d3 e5                	shl    ebp,cl
c0020e69:	89 da                	mov    edx,ebx
c0020e6b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020e6f:	89 d3                	mov    ebx,edx
c0020e71:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020e75:	89 c6                	mov    esi,eax
c0020e77:	89 d1                	mov    ecx,edx
c0020e79:	39 d3                	cmp    ebx,edx
c0020e7b:	72 27                	jb     c0020ea4 <__moddi3+0x170>
c0020e7d:	74 21                	je     c0020ea0 <__moddi3+0x16c>
c0020e7f:	29 f5                	sub    ebp,esi
c0020e81:	19 cb                	sbb    ebx,ecx
c0020e83:	89 de                	mov    esi,ebx
c0020e85:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020e89:	d3 e6                	shl    esi,cl
c0020e8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020e8f:	89 f9                	mov    ecx,edi
c0020e91:	d3 ed                	shr    ebp,cl
c0020e93:	09 ee                	or     esi,ebp
c0020e95:	89 f0                	mov    eax,esi
c0020e97:	d3 eb                	shr    ebx,cl
c0020e99:	89 da                	mov    edx,ebx
c0020e9b:	e9 e8 fe ff ff       	jmp    c0020d88 <__moddi3+0x54>
c0020ea0:	39 c5                	cmp    ebp,eax
c0020ea2:	73 db                	jae    c0020e7f <__moddi3+0x14b>
c0020ea4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020ea8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020eac:	89 d1                	mov    ecx,edx
c0020eae:	89 c6                	mov    esi,eax
c0020eb0:	eb cd                	jmp    c0020e7f <__moddi3+0x14b>
c0020eb2:	66 90                	xchg   ax,ax

c0020eb4 <__udivdi3>:
c0020eb4:	55                   	push   ebp
c0020eb5:	57                   	push   edi
c0020eb6:	56                   	push   esi
c0020eb7:	53                   	push   ebx
c0020eb8:	83 ec 1c             	sub    esp,0x1c
c0020ebb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020ebf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020ec3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020ec7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020ecb:	85 d2                	test   edx,edx
c0020ecd:	75 41                	jne    c0020f10 <__udivdi3+0x5c>
c0020ecf:	39 f7                	cmp    edi,esi
c0020ed1:	76 15                	jbe    c0020ee8 <__udivdi3+0x34>
c0020ed3:	89 e8                	mov    eax,ebp
c0020ed5:	89 f2                	mov    edx,esi
c0020ed7:	f7 f7                	div    edi
c0020ed9:	31 db                	xor    ebx,ebx
c0020edb:	89 da                	mov    edx,ebx
c0020edd:	83 c4 1c             	add    esp,0x1c
c0020ee0:	5b                   	pop    ebx
c0020ee1:	5e                   	pop    esi
c0020ee2:	5f                   	pop    edi
c0020ee3:	5d                   	pop    ebp
c0020ee4:	c3                   	ret    
c0020ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ee8:	89 f9                	mov    ecx,edi
c0020eea:	85 ff                	test   edi,edi
c0020eec:	75 0b                	jne    c0020ef9 <__udivdi3+0x45>
c0020eee:	b8 01 00 00 00       	mov    eax,0x1
c0020ef3:	31 d2                	xor    edx,edx
c0020ef5:	f7 f7                	div    edi
c0020ef7:	89 c1                	mov    ecx,eax
c0020ef9:	31 d2                	xor    edx,edx
c0020efb:	89 f0                	mov    eax,esi
c0020efd:	f7 f1                	div    ecx
c0020eff:	89 c3                	mov    ebx,eax
c0020f01:	89 e8                	mov    eax,ebp
c0020f03:	f7 f1                	div    ecx
c0020f05:	89 da                	mov    edx,ebx
c0020f07:	83 c4 1c             	add    esp,0x1c
c0020f0a:	5b                   	pop    ebx
c0020f0b:	5e                   	pop    esi
c0020f0c:	5f                   	pop    edi
c0020f0d:	5d                   	pop    ebp
c0020f0e:	c3                   	ret    
c0020f0f:	90                   	nop
c0020f10:	39 f2                	cmp    edx,esi
c0020f12:	77 1c                	ja     c0020f30 <__udivdi3+0x7c>
c0020f14:	0f bd da             	bsr    ebx,edx
c0020f17:	83 f3 1f             	xor    ebx,0x1f
c0020f1a:	75 24                	jne    c0020f40 <__udivdi3+0x8c>
c0020f1c:	39 f2                	cmp    edx,esi
c0020f1e:	72 08                	jb     c0020f28 <__udivdi3+0x74>
c0020f20:	39 ef                	cmp    edi,ebp
c0020f22:	0f 87 84 00 00 00    	ja     c0020fac <__udivdi3+0xf8>
c0020f28:	b8 01 00 00 00       	mov    eax,0x1
c0020f2d:	eb ac                	jmp    c0020edb <__udivdi3+0x27>
c0020f2f:	90                   	nop
c0020f30:	31 db                	xor    ebx,ebx
c0020f32:	31 c0                	xor    eax,eax
c0020f34:	89 da                	mov    edx,ebx
c0020f36:	83 c4 1c             	add    esp,0x1c
c0020f39:	5b                   	pop    ebx
c0020f3a:	5e                   	pop    esi
c0020f3b:	5f                   	pop    edi
c0020f3c:	5d                   	pop    ebp
c0020f3d:	c3                   	ret    
c0020f3e:	66 90                	xchg   ax,ax
c0020f40:	b8 20 00 00 00       	mov    eax,0x20
c0020f45:	29 d8                	sub    eax,ebx
c0020f47:	88 d9                	mov    cl,bl
c0020f49:	d3 e2                	shl    edx,cl
c0020f4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020f4f:	89 fa                	mov    edx,edi
c0020f51:	88 c1                	mov    cl,al
c0020f53:	d3 ea                	shr    edx,cl
c0020f55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020f59:	09 d1                	or     ecx,edx
c0020f5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020f5f:	88 d9                	mov    cl,bl
c0020f61:	d3 e7                	shl    edi,cl
c0020f63:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020f67:	89 f7                	mov    edi,esi
c0020f69:	88 c1                	mov    cl,al
c0020f6b:	d3 ef                	shr    edi,cl
c0020f6d:	88 d9                	mov    cl,bl
c0020f6f:	d3 e6                	shl    esi,cl
c0020f71:	89 ea                	mov    edx,ebp
c0020f73:	88 c1                	mov    cl,al
c0020f75:	d3 ea                	shr    edx,cl
c0020f77:	09 d6                	or     esi,edx
c0020f79:	89 f0                	mov    eax,esi
c0020f7b:	89 fa                	mov    edx,edi
c0020f7d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020f81:	89 d7                	mov    edi,edx
c0020f83:	89 c6                	mov    esi,eax
c0020f85:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020f89:	39 d7                	cmp    edi,edx
c0020f8b:	72 13                	jb     c0020fa0 <__udivdi3+0xec>
c0020f8d:	74 09                	je     c0020f98 <__udivdi3+0xe4>
c0020f8f:	89 f0                	mov    eax,esi
c0020f91:	31 db                	xor    ebx,ebx
c0020f93:	e9 43 ff ff ff       	jmp    c0020edb <__udivdi3+0x27>
c0020f98:	88 d9                	mov    cl,bl
c0020f9a:	d3 e5                	shl    ebp,cl
c0020f9c:	39 c5                	cmp    ebp,eax
c0020f9e:	73 ef                	jae    c0020f8f <__udivdi3+0xdb>
c0020fa0:	8d 46 ff             	lea    eax,[esi-0x1]
c0020fa3:	31 db                	xor    ebx,ebx
c0020fa5:	e9 31 ff ff ff       	jmp    c0020edb <__udivdi3+0x27>
c0020faa:	66 90                	xchg   ax,ax
c0020fac:	31 c0                	xor    eax,eax
c0020fae:	e9 28 ff ff ff       	jmp    c0020edb <__udivdi3+0x27>
c0020fb3:	90                   	nop

c0020fb4 <__umoddi3>:
c0020fb4:	55                   	push   ebp
c0020fb5:	57                   	push   edi
c0020fb6:	56                   	push   esi
c0020fb7:	53                   	push   ebx
c0020fb8:	83 ec 1c             	sub    esp,0x1c
c0020fbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020fbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020fc3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020fc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020fcb:	89 da                	mov    edx,ebx
c0020fcd:	85 c0                	test   eax,eax
c0020fcf:	75 37                	jne    c0021008 <__umoddi3+0x54>
c0020fd1:	39 df                	cmp    edi,ebx
c0020fd3:	76 13                	jbe    c0020fe8 <__umoddi3+0x34>
c0020fd5:	89 f0                	mov    eax,esi
c0020fd7:	f7 f7                	div    edi
c0020fd9:	89 d0                	mov    eax,edx
c0020fdb:	31 d2                	xor    edx,edx
c0020fdd:	83 c4 1c             	add    esp,0x1c
c0020fe0:	5b                   	pop    ebx
c0020fe1:	5e                   	pop    esi
c0020fe2:	5f                   	pop    edi
c0020fe3:	5d                   	pop    ebp
c0020fe4:	c3                   	ret    
c0020fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0020fe8:	89 fd                	mov    ebp,edi
c0020fea:	85 ff                	test   edi,edi
c0020fec:	75 0b                	jne    c0020ff9 <__umoddi3+0x45>
c0020fee:	b8 01 00 00 00       	mov    eax,0x1
c0020ff3:	31 d2                	xor    edx,edx
c0020ff5:	f7 f7                	div    edi
c0020ff7:	89 c5                	mov    ebp,eax
c0020ff9:	89 d8                	mov    eax,ebx
c0020ffb:	31 d2                	xor    edx,edx
c0020ffd:	f7 f5                	div    ebp
c0020fff:	89 f0                	mov    eax,esi
c0021001:	f7 f5                	div    ebp
c0021003:	89 d0                	mov    eax,edx
c0021005:	eb d4                	jmp    c0020fdb <__umoddi3+0x27>
c0021007:	90                   	nop
c0021008:	89 f1                	mov    ecx,esi
c002100a:	39 d8                	cmp    eax,ebx
c002100c:	76 0a                	jbe    c0021018 <__umoddi3+0x64>
c002100e:	89 f0                	mov    eax,esi
c0021010:	83 c4 1c             	add    esp,0x1c
c0021013:	5b                   	pop    ebx
c0021014:	5e                   	pop    esi
c0021015:	5f                   	pop    edi
c0021016:	5d                   	pop    ebp
c0021017:	c3                   	ret    
c0021018:	0f bd e8             	bsr    ebp,eax
c002101b:	83 f5 1f             	xor    ebp,0x1f
c002101e:	75 1c                	jne    c002103c <__umoddi3+0x88>
c0021020:	39 d8                	cmp    eax,ebx
c0021022:	72 04                	jb     c0021028 <__umoddi3+0x74>
c0021024:	39 f7                	cmp    edi,esi
c0021026:	77 08                	ja     c0021030 <__umoddi3+0x7c>
c0021028:	89 da                	mov    edx,ebx
c002102a:	29 fe                	sub    esi,edi
c002102c:	19 c2                	sbb    edx,eax
c002102e:	89 f1                	mov    ecx,esi
c0021030:	89 c8                	mov    eax,ecx
c0021032:	83 c4 1c             	add    esp,0x1c
c0021035:	5b                   	pop    ebx
c0021036:	5e                   	pop    esi
c0021037:	5f                   	pop    edi
c0021038:	5d                   	pop    ebp
c0021039:	c3                   	ret    
c002103a:	66 90                	xchg   ax,ax
c002103c:	ba 20 00 00 00       	mov    edx,0x20
c0021041:	29 ea                	sub    edx,ebp
c0021043:	89 e9                	mov    ecx,ebp
c0021045:	d3 e0                	shl    eax,cl
c0021047:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002104b:	89 f8                	mov    eax,edi
c002104d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021051:	88 d1                	mov    cl,dl
c0021053:	d3 e8                	shr    eax,cl
c0021055:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021059:	09 c1                	or     ecx,eax
c002105b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002105f:	89 e9                	mov    ecx,ebp
c0021061:	d3 e7                	shl    edi,cl
c0021063:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021067:	89 d8                	mov    eax,ebx
c0021069:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002106d:	88 d1                	mov    cl,dl
c002106f:	d3 e8                	shr    eax,cl
c0021071:	89 c7                	mov    edi,eax
c0021073:	89 e9                	mov    ecx,ebp
c0021075:	d3 e3                	shl    ebx,cl
c0021077:	89 f0                	mov    eax,esi
c0021079:	88 d1                	mov    cl,dl
c002107b:	d3 e8                	shr    eax,cl
c002107d:	09 d8                	or     eax,ebx
c002107f:	89 e9                	mov    ecx,ebp
c0021081:	d3 e6                	shl    esi,cl
c0021083:	89 f3                	mov    ebx,esi
c0021085:	89 fa                	mov    edx,edi
c0021087:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002108b:	89 d1                	mov    ecx,edx
c002108d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021091:	89 c6                	mov    esi,eax
c0021093:	89 d7                	mov    edi,edx
c0021095:	39 d1                	cmp    ecx,edx
c0021097:	72 27                	jb     c00210c0 <__umoddi3+0x10c>
c0021099:	74 21                	je     c00210bc <__umoddi3+0x108>
c002109b:	89 ca                	mov    edx,ecx
c002109d:	29 f3                	sub    ebx,esi
c002109f:	19 fa                	sbb    edx,edi
c00210a1:	89 d0                	mov    eax,edx
c00210a3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00210a7:	d3 e0                	shl    eax,cl
c00210a9:	89 e9                	mov    ecx,ebp
c00210ab:	d3 eb                	shr    ebx,cl
c00210ad:	09 d8                	or     eax,ebx
c00210af:	d3 ea                	shr    edx,cl
c00210b1:	83 c4 1c             	add    esp,0x1c
c00210b4:	5b                   	pop    ebx
c00210b5:	5e                   	pop    esi
c00210b6:	5f                   	pop    edi
c00210b7:	5d                   	pop    ebp
c00210b8:	c3                   	ret    
c00210b9:	8d 76 00             	lea    esi,[esi+0x0]
c00210bc:	39 c3                	cmp    ebx,eax
c00210be:	73 db                	jae    c002109b <__umoddi3+0xe7>
c00210c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00210c4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00210c8:	89 d7                	mov    edi,edx
c00210ca:	89 c6                	mov    esi,eax
c00210cc:	eb cd                	jmp    c002109b <__umoddi3+0xe7>

Disassembly of section .init:

c00210ce <_init>:
c00210ce:	55                   	push   ebp
c00210cf:	89 e5                	mov    ebp,esp
c00210d1:	e8 42 f0 fd ff       	call   c0000118 <frame_dummy>
c00210d6:	e8 e5 fa ff ff       	call   c0020bc0 <__do_global_ctors_aux>
c00210db:	5d                   	pop    ebp
c00210dc:	c3                   	ret    

Disassembly of section .fini:

c00210dd <_fini>:
c00210dd:	55                   	push   ebp
c00210de:	89 e5                	mov    ebp,esp
c00210e0:	e8 c3 ef fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00210e5:	5d                   	pop    ebp
c00210e6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00210e8 <Computer::~Computer()>:
c00210e8:	83 ec 0c             	sub    esp,0xc
c00210eb:	ba 14 27 02 c0       	mov    edx,0xc0022714
c00210f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f4:	89 10                	mov    DWORD PTR [eax],edx
c00210f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210fa:	83 ec 0c             	sub    esp,0xc
c00210fd:	50                   	push   eax
c00210fe:	e8 7d cc fe ff       	call   c000dd80 <Device::~Device()>
c0021103:	83 c4 10             	add    esp,0x10
c0021106:	90                   	nop
c0021107:	83 c4 0c             	add    esp,0xc
c002110a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002110c <Computer::~Computer()>:
c002110c:	83 ec 0c             	sub    esp,0xc
c002110f:	83 ec 0c             	sub    esp,0xc
c0021112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021116:	e8 cd ff ff ff       	call   c00210e8 <Computer::~Computer()>
c002111b:	83 c4 10             	add    esp,0x10
c002111e:	83 ec 08             	sub    esp,0x8
c0021121:	68 ec 01 00 00       	push   0x1ec
c0021126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002112a:	e8 5b b8 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c002112f:	83 c4 10             	add    esp,0x10
c0021132:	83 c4 0c             	add    esp,0xc
c0021135:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021136 <idleCommon()>:
c0021136:	83 ec 0c             	sub    esp,0xc
c0021139:	fa                   	cli    
c002113a:	ff 05 48 76 02 c0    	inc    DWORD PTR ds:0xc0027648
c0021140:	e8 97 6d ff ff       	call   c0017edc <schedule()>
c0021145:	a1 48 76 02 c0       	mov    eax,ds:0xc0027648
c002114a:	48                   	dec    eax
c002114b:	a3 48 76 02 c0       	mov    ds:0xc0027648,eax
c0021150:	75 01                	jne    c0021153 <idleCommon()+0x1d>
c0021152:	fb                   	sti    
c0021153:	83 c4 0c             	add    esp,0xc
c0021156:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021158 <LinkedList<UnixFile>::~LinkedList()>:
c0021158:	90                   	nop
c0021159:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002115a <LinkedList<UnixFile>::LinkedList()>:
c002115a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002115e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021168:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002116f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021173:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002117a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002117e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021188:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002118f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021193:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002119a:	90                   	nop
c002119b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002119c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002119c:	83 ec 0c             	sub    esp,0xc
c002119f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00211a4:	75 10                	jne    c00211b6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00211a6:	83 ec 0c             	sub    esp,0xc
c00211a9:	68 80 2a 02 c0       	push   0xc0022a80
c00211ae:	e8 58 31 ff ff       	call   c001430b <Krnl::panic(char const*)>
c00211b3:	83 c4 10             	add    esp,0x10
c00211b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00211bc:	85 c0                	test   eax,eax
c00211be:	74 34                	je     c00211f4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00211c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211c7:	85 c0                	test   eax,eax
c00211c9:	74 29                	je     c00211f4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00211cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00211d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00211e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00211e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211f2:	eb 65                	jmp    c0021259 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00211f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00211fa:	85 c0                	test   eax,eax
c00211fc:	75 4b                	jne    c0021249 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00211fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021202:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021205:	85 c0                	test   eax,eax
c0021207:	75 40                	jne    c0021249 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002120d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021211:	89 10                	mov    DWORD PTR [eax],edx
c0021213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021217:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002121b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002121e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021225:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002122c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021230:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021233:	85 c0                	test   eax,eax
c0021235:	74 22                	je     c0021259 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021237:	83 ec 0c             	sub    esp,0xc
c002123a:	68 a2 2a 02 c0       	push   0xc0022aa2
c002123f:	e8 c7 30 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0021244:	83 c4 10             	add    esp,0x10
c0021247:	eb 10                	jmp    c0021259 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021249:	83 ec 0c             	sub    esp,0xc
c002124c:	68 ac 2a 02 c0       	push   0xc0022aac
c0021251:	e8 b5 30 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0021256:	83 c4 10             	add    esp,0x10
c0021259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002125d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021260:	8d 50 01             	lea    edx,[eax+0x1]
c0021263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021267:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002126a:	90                   	nop
c002126b:	83 c4 0c             	add    esp,0xc
c002126e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021270 <LinkedList<UnixFile>::getFirstElement()>:
c0021270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021274:	8b 00                	mov    eax,DWORD PTR [eax]
c0021276:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021278 <LinkedList<UnixFile>::removeFirst()>:
c0021278:	83 ec 0c             	sub    esp,0xc
c002127b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002127f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021281:	85 c0                	test   eax,eax
c0021283:	75 12                	jne    c0021297 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021285:	83 ec 0c             	sub    esp,0xc
c0021288:	68 b8 2a 02 c0       	push   0xc0022ab8
c002128d:	e8 79 30 ff ff       	call   c001430b <Krnl::panic(char const*)>
c0021292:	83 c4 10             	add    esp,0x10
c0021295:	eb 7e                	jmp    c0021315 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002129b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002129e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212a1:	85 c0                	test   eax,eax
c00212a3:	74 10                	je     c00212b5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00212a5:	83 ec 0c             	sub    esp,0xc
c00212a8:	68 03 2b 02 c0       	push   0xc0022b03
c00212ad:	e8 59 30 ff ff       	call   c001430b <Krnl::panic(char const*)>
c00212b2:	83 c4 10             	add    esp,0x10
c00212b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00212bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212be:	85 c0                	test   eax,eax
c00212c0:	75 33                	jne    c00212f5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00212c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212de:	83 f8 01             	cmp    eax,0x1
c00212e1:	74 21                	je     c0021304 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00212e3:	83 ec 0c             	sub    esp,0xc
c00212e6:	68 dc 2a 02 c0       	push   0xc0022adc
c00212eb:	e8 1b 30 ff ff       	call   c001430b <Krnl::panic(char const*)>
c00212f0:	83 c4 10             	add    esp,0x10
c00212f3:	eb 0f                	jmp    c0021304 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00212f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00212fb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00212fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021302:	89 10                	mov    DWORD PTR [eax],edx
c0021304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021308:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002130b:	8d 50 ff             	lea    edx,[eax-0x1]
c002130e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021312:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021315:	83 c4 0c             	add    esp,0xc
c0021318:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002131a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002131a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002131e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021321:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021322 <DriverlessDevice::~DriverlessDevice()>:
c0021322:	ba 9c 32 02 c0       	mov    edx,0xc002329c
c0021327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002132b:	89 10                	mov    DWORD PTR [eax],edx
c002132d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021331:	50                   	push   eax
c0021332:	e8 49 ca fe ff       	call   c000dd80 <Device::~Device()>
c0021337:	83 c4 04             	add    esp,0x4
c002133a:	90                   	nop
c002133b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002133c <DriverlessDevice::~DriverlessDevice()>:
c002133c:	83 ec 0c             	sub    esp,0xc
c002133f:	83 ec 0c             	sub    esp,0xc
c0021342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021346:	e8 d7 ff ff ff       	call   c0021322 <DriverlessDevice::~DriverlessDevice()>
c002134b:	83 c4 10             	add    esp,0x10
c002134e:	83 ec 08             	sub    esp,0x8
c0021351:	68 58 01 00 00       	push   0x158
c0021356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002135a:	e8 2b b6 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c002135f:	83 c4 10             	add    esp,0x10
c0021362:	83 c4 0c             	add    esp,0xc
c0021365:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021366 <LinkedList<Device>::addElement(Device*)>:
c0021366:	83 ec 0c             	sub    esp,0xc
c0021369:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002136e:	75 10                	jne    c0021380 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021370:	83 ec 0c             	sub    esp,0xc
c0021373:	68 80 2a 02 c0       	push   0xc0022a80
c0021378:	e8 8e 2f ff ff       	call   c001430b <Krnl::panic(char const*)>
c002137d:	83 c4 10             	add    esp,0x10
c0021380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021384:	8b 00                	mov    eax,DWORD PTR [eax]
c0021386:	85 c0                	test   eax,eax
c0021388:	74 3a                	je     c00213c4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002138a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002138e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021391:	85 c0                	test   eax,eax
c0021393:	74 2f                	je     c00213c4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021399:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002139c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213a0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00213a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00213b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213b8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00213c2:	eb 68                	jmp    c002142c <LinkedList<Device>::addElement(Device*)+0xc6>
c00213c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00213ca:	85 c0                	test   eax,eax
c00213cc:	75 4e                	jne    c002141c <LinkedList<Device>::addElement(Device*)+0xb6>
c00213ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213d5:	85 c0                	test   eax,eax
c00213d7:	75 43                	jne    c002141c <LinkedList<Device>::addElement(Device*)+0xb6>
c00213d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213e1:	89 10                	mov    DWORD PTR [eax],edx
c00213e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00213ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213f5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00213ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021403:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021406:	85 c0                	test   eax,eax
c0021408:	74 22                	je     c002142c <LinkedList<Device>::addElement(Device*)+0xc6>
c002140a:	83 ec 0c             	sub    esp,0xc
c002140d:	68 a2 2a 02 c0       	push   0xc0022aa2
c0021412:	e8 f4 2e ff ff       	call   c001430b <Krnl::panic(char const*)>
c0021417:	83 c4 10             	add    esp,0x10
c002141a:	eb 10                	jmp    c002142c <LinkedList<Device>::addElement(Device*)+0xc6>
c002141c:	83 ec 0c             	sub    esp,0xc
c002141f:	68 ac 2a 02 c0       	push   0xc0022aac
c0021424:	e8 e2 2e ff ff       	call   c001430b <Krnl::panic(char const*)>
c0021429:	83 c4 10             	add    esp,0x10
c002142c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021430:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021433:	8d 50 01             	lea    edx,[eax+0x1]
c0021436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002143a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002143d:	90                   	nop
c002143e:	83 c4 0c             	add    esp,0xc
c0021441:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021442 <LinkedList<Device>::LinkedList()>:
c0021442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021446:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002144c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021450:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021457:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002145b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021466:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002146c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021470:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002147b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021482:	90                   	nop
c0021483:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021484 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021488:	8b 00                	mov    eax,DWORD PTR [eax]
c002148a:	85 c0                	test   eax,eax
c002148c:	75 0e                	jne    c002149c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002148e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021492:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021495:	85 c0                	test   eax,eax
c0021497:	75 03                	jne    c002149c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021499:	b0 01                	mov    al,0x1
c002149b:	c3                   	ret    
c002149c:	b0 00                	mov    al,0x0
c002149e:	90                   	nop
c002149f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00214a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00214a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00214a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00214a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00214a8:	83 ec 0c             	sub    esp,0xc
c00214ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214af:	8b 00                	mov    eax,DWORD PTR [eax]
c00214b1:	85 c0                	test   eax,eax
c00214b3:	75 17                	jne    c00214cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00214b5:	83 ec 0c             	sub    esp,0xc
c00214b8:	68 b8 2a 02 c0       	push   0xc0022ab8
c00214bd:	e8 49 2e ff ff       	call   c001430b <Krnl::panic(char const*)>
c00214c2:	83 c4 10             	add    esp,0x10
c00214c5:	e9 92 00 00 00       	jmp    c002155c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00214ca:	66 90                	xchg   ax,ax
c00214cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214d6:	85 c0                	test   eax,eax
c00214d8:	0f 95 c0             	setne  al
c00214db:	84 c0                	test   al,al
c00214dd:	74 11                	je     c00214f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00214df:	83 ec 0c             	sub    esp,0xc
c00214e2:	68 03 2b 02 c0       	push   0xc0022b03
c00214e7:	e8 1f 2e ff ff       	call   c001430b <Krnl::panic(char const*)>
c00214ec:	83 c4 10             	add    esp,0x10
c00214ef:	90                   	nop
c00214f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00214f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214f9:	85 c0                	test   eax,eax
c00214fb:	0f 94 c0             	sete   al
c00214fe:	84 c0                	test   al,al
c0021500:	74 36                	je     c0021538 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021506:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002150c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021510:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002151b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002151e:	83 f8 01             	cmp    eax,0x1
c0021521:	74 25                	je     c0021548 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021523:	83 ec 0c             	sub    esp,0xc
c0021526:	68 dc 2a 02 c0       	push   0xc0022adc
c002152b:	e8 db 2d ff ff       	call   c001430b <Krnl::panic(char const*)>
c0021530:	83 c4 10             	add    esp,0x10
c0021533:	eb 13                	jmp    c0021548 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021535:	8d 76 00             	lea    esi,[esi+0x0]
c0021538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002153c:	8b 00                	mov    eax,DWORD PTR [eax]
c002153e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021545:	89 10                	mov    DWORD PTR [eax],edx
c0021547:	90                   	nop
c0021548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002154c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002154f:	8d 50 ff             	lea    edx,[eax-0x1]
c0021552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021556:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021559:	8d 76 00             	lea    esi,[esi+0x0]
c002155c:	83 c4 0c             	add    esp,0xc
c002155f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021560:	83 ec 0c             	sub    esp,0xc
c0021563:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021568:	75 12                	jne    c002157c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002156a:	83 ec 0c             	sub    esp,0xc
c002156d:	68 80 2a 02 c0       	push   0xc0022a80
c0021572:	e8 94 2d ff ff       	call   c001430b <Krnl::panic(char const*)>
c0021577:	83 c4 10             	add    esp,0x10
c002157a:	66 90                	xchg   ax,ax
c002157c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021580:	8b 00                	mov    eax,DWORD PTR [eax]
c0021582:	85 c0                	test   eax,eax
c0021584:	74 36                	je     c00215bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002158a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002158d:	85 c0                	test   eax,eax
c002158f:	74 2b                	je     c00215bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021595:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021598:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002159c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002159f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00215aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215b1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00215b8:	eb 6a                	jmp    c0021624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00215ba:	66 90                	xchg   ax,ax
c00215bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00215c2:	85 c0                	test   eax,eax
c00215c4:	75 4e                	jne    c0021614 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00215c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215cd:	85 c0                	test   eax,eax
c00215cf:	75 43                	jne    c0021614 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00215d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215d9:	89 10                	mov    DWORD PTR [eax],edx
c00215db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00215e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00215f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215fb:	85 c0                	test   eax,eax
c00215fd:	74 25                	je     c0021624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00215ff:	83 ec 0c             	sub    esp,0xc
c0021602:	68 a2 2a 02 c0       	push   0xc0022aa2
c0021607:	e8 ff 2c ff ff       	call   c001430b <Krnl::panic(char const*)>
c002160c:	83 c4 10             	add    esp,0x10
c002160f:	eb 13                	jmp    c0021624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021611:	8d 76 00             	lea    esi,[esi+0x0]
c0021614:	83 ec 0c             	sub    esp,0xc
c0021617:	68 ac 2a 02 c0       	push   0xc0022aac
c002161c:	e8 ea 2c ff ff       	call   c001430b <Krnl::panic(char const*)>
c0021621:	83 c4 10             	add    esp,0x10
c0021624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021628:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002162b:	8d 50 01             	lea    edx,[eax+0x1]
c002162e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021632:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021635:	90                   	nop
c0021636:	83 c4 0c             	add    esp,0xc
c0021639:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002163c <ACPI::~ACPI()>:
c002163c:	83 ec 0c             	sub    esp,0xc
c002163f:	ba 4c 3c 02 c0       	mov    edx,0xc0023c4c
c0021644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021648:	89 10                	mov    DWORD PTR [eax],edx
c002164a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164e:	83 ec 0c             	sub    esp,0xc
c0021651:	50                   	push   eax
c0021652:	e8 29 c7 fe ff       	call   c000dd80 <Device::~Device()>
c0021657:	83 c4 10             	add    esp,0x10
c002165a:	90                   	nop
c002165b:	83 c4 0c             	add    esp,0xc
c002165e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021660 <ACPI::~ACPI()>:
c0021660:	83 ec 0c             	sub    esp,0xc
c0021663:	83 ec 0c             	sub    esp,0xc
c0021666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002166a:	e8 cd ff ff ff       	call   c002163c <ACPI::~ACPI()>
c002166f:	83 c4 10             	add    esp,0x10
c0021672:	83 ec 08             	sub    esp,0x8
c0021675:	68 64 12 00 00       	push   0x1264
c002167a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002167e:	e8 07 b3 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021683:	83 c4 10             	add    esp,0x10
c0021686:	83 c4 0c             	add    esp,0xc
c0021689:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002168c <LinkedList<Device>::~LinkedList()>:
c002168c:	90                   	nop
c002168d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021690 <LinkedList<Device>::isEmpty()>:
c0021690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021694:	8b 00                	mov    eax,DWORD PTR [eax]
c0021696:	85 c0                	test   eax,eax
c0021698:	75 0e                	jne    c00216a8 <LinkedList<Device>::isEmpty()+0x18>
c002169a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216a1:	85 c0                	test   eax,eax
c00216a3:	75 03                	jne    c00216a8 <LinkedList<Device>::isEmpty()+0x18>
c00216a5:	b0 01                	mov    al,0x1
c00216a7:	c3                   	ret    
c00216a8:	b0 00                	mov    al,0x0
c00216aa:	90                   	nop
c00216ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00216ac <LinkedList<Device>::getFirstElement()>:
c00216ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00216b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00216b4 <LinkedList<Device>::removeFirst()>:
c00216b4:	83 ec 0c             	sub    esp,0xc
c00216b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00216bd:	85 c0                	test   eax,eax
c00216bf:	75 17                	jne    c00216d8 <LinkedList<Device>::removeFirst()+0x24>
c00216c1:	83 ec 0c             	sub    esp,0xc
c00216c4:	68 b8 2a 02 c0       	push   0xc0022ab8
c00216c9:	e8 3d 2c ff ff       	call   c001430b <Krnl::panic(char const*)>
c00216ce:	83 c4 10             	add    esp,0x10
c00216d1:	e9 92 00 00 00       	jmp    c0021768 <LinkedList<Device>::removeFirst()+0xb4>
c00216d6:	66 90                	xchg   ax,ax
c00216d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216df:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00216e5:	85 c0                	test   eax,eax
c00216e7:	74 13                	je     c00216fc <LinkedList<Device>::removeFirst()+0x48>
c00216e9:	83 ec 0c             	sub    esp,0xc
c00216ec:	68 03 2b 02 c0       	push   0xc0022b03
c00216f1:	e8 15 2c ff ff       	call   c001430b <Krnl::panic(char const*)>
c00216f6:	83 c4 10             	add    esp,0x10
c00216f9:	8d 76 00             	lea    esi,[esi+0x0]
c00216fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021700:	8b 00                	mov    eax,DWORD PTR [eax]
c0021702:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021708:	85 c0                	test   eax,eax
c002170a:	75 34                	jne    c0021740 <LinkedList<Device>::removeFirst()+0x8c>
c002170c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021710:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002171a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021725:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021728:	83 f8 01             	cmp    eax,0x1
c002172b:	74 27                	je     c0021754 <LinkedList<Device>::removeFirst()+0xa0>
c002172d:	83 ec 0c             	sub    esp,0xc
c0021730:	68 dc 2a 02 c0       	push   0xc0022adc
c0021735:	e8 d1 2b ff ff       	call   c001430b <Krnl::panic(char const*)>
c002173a:	83 c4 10             	add    esp,0x10
c002173d:	eb 15                	jmp    c0021754 <LinkedList<Device>::removeFirst()+0xa0>
c002173f:	90                   	nop
c0021740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021744:	8b 00                	mov    eax,DWORD PTR [eax]
c0021746:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002174c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021750:	89 10                	mov    DWORD PTR [eax],edx
c0021752:	66 90                	xchg   ax,ax
c0021754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021758:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002175b:	8d 50 ff             	lea    edx,[eax-0x1]
c002175e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021762:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021765:	8d 76 00             	lea    esi,[esi+0x0]
c0021768:	83 c4 0c             	add    esp,0xc
c002176b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002176c <CPU::~CPU()>:
c002176c:	83 ec 0c             	sub    esp,0xc
c002176f:	ba 28 40 02 c0       	mov    edx,0xc0024028
c0021774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021778:	89 10                	mov    DWORD PTR [eax],edx
c002177a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002177e:	83 ec 0c             	sub    esp,0xc
c0021781:	50                   	push   eax
c0021782:	e8 f9 c5 fe ff       	call   c000dd80 <Device::~Device()>
c0021787:	83 c4 10             	add    esp,0x10
c002178a:	90                   	nop
c002178b:	83 c4 0c             	add    esp,0xc
c002178e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021790 <CPU::~CPU()>:
c0021790:	83 ec 0c             	sub    esp,0xc
c0021793:	83 ec 0c             	sub    esp,0xc
c0021796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002179a:	e8 cd ff ff ff       	call   c002176c <CPU::~CPU()>
c002179f:	83 c4 10             	add    esp,0x10
c00217a2:	83 ec 08             	sub    esp,0x8
c00217a5:	68 98 11 00 00       	push   0x1198
c00217aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217ae:	e8 d7 b1 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00217b3:	83 c4 10             	add    esp,0x10
c00217b6:	83 c4 0c             	add    esp,0xc
c00217b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00217bc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00217bc:	90                   	nop
c00217bd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00217c0 <ThreadControlBlock::ThreadControlBlock()>:
c00217c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217c4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00217cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217cf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00217d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217da:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00217e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217e5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00217ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217f0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00217f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217fb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00217ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021803:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021807:	90                   	nop
c0021808:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002180c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002180c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021810:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002181a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021821:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021825:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002182c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021830:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002183a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021845:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002184c:	90                   	nop
c002184d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021850 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021854:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021857:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021858 <Vm::_FPUState::_FPUState()>:
c0021858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002185c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021863:	90                   	nop
c0021864:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021866 <PCI::~PCI()>:
c0021866:	83 ec 0c             	sub    esp,0xc
c0021869:	ba 14 4d 02 c0       	mov    edx,0xc0024d14
c002186e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021872:	89 10                	mov    DWORD PTR [eax],edx
c0021874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021878:	83 ec 0c             	sub    esp,0xc
c002187b:	50                   	push   eax
c002187c:	e8 cf be fe ff       	call   c000d750 <Bus::~Bus()>
c0021881:	83 c4 10             	add    esp,0x10
c0021884:	90                   	nop
c0021885:	83 c4 0c             	add    esp,0xc
c0021888:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002188a <PCI::~PCI()>:
c002188a:	83 ec 0c             	sub    esp,0xc
c002188d:	83 ec 0c             	sub    esp,0xc
c0021890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021894:	e8 cd ff ff ff       	call   c0021866 <PCI::~PCI()>
c0021899:	83 c4 10             	add    esp,0x10
c002189c:	83 ec 08             	sub    esp,0x8
c002189f:	68 5c 01 00 00       	push   0x15c
c00218a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218a8:	e8 dd b0 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00218ad:	83 c4 10             	add    esp,0x10
c00218b0:	83 c4 0c             	add    esp,0xc
c00218b3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00218b4 <IDE::~IDE()>:
c00218b4:	83 ec 0c             	sub    esp,0xc
c00218b7:	ba c8 4d 02 c0       	mov    edx,0xc0024dc8
c00218bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c0:	89 10                	mov    DWORD PTR [eax],edx
c00218c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c6:	83 ec 0c             	sub    esp,0xc
c00218c9:	50                   	push   eax
c00218ca:	e8 c9 c9 fe ff       	call   c000e298 <HardDiskController::~HardDiskController()>
c00218cf:	83 c4 10             	add    esp,0x10
c00218d2:	90                   	nop
c00218d3:	83 c4 0c             	add    esp,0xc
c00218d6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00218d8 <IDE::~IDE()>:
c00218d8:	83 ec 0c             	sub    esp,0xc
c00218db:	83 ec 0c             	sub    esp,0xc
c00218de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218e2:	e8 cd ff ff ff       	call   c00218b4 <IDE::~IDE()>
c00218e7:	83 c4 10             	add    esp,0x10
c00218ea:	83 ec 08             	sub    esp,0x8
c00218ed:	68 70 02 00 00       	push   0x270
c00218f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218f6:	e8 8f b0 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00218fb:	83 c4 10             	add    esp,0x10
c00218fe:	83 c4 0c             	add    esp,0xc
c0021901:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021902 <SATABus::~SATABus()>:
c0021902:	83 ec 0c             	sub    esp,0xc
c0021905:	ba 40 4e 02 c0       	mov    edx,0xc0024e40
c002190a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002190e:	89 10                	mov    DWORD PTR [eax],edx
c0021910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021914:	83 ec 0c             	sub    esp,0xc
c0021917:	50                   	push   eax
c0021918:	e8 7b c9 fe ff       	call   c000e298 <HardDiskController::~HardDiskController()>
c002191d:	83 c4 10             	add    esp,0x10
c0021920:	90                   	nop
c0021921:	83 c4 0c             	add    esp,0xc
c0021924:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021926 <SATABus::~SATABus()>:
c0021926:	83 ec 0c             	sub    esp,0xc
c0021929:	83 ec 0c             	sub    esp,0xc
c002192c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021930:	e8 cd ff ff ff       	call   c0021902 <SATABus::~SATABus()>
c0021935:	83 c4 10             	add    esp,0x10
c0021938:	83 ec 08             	sub    esp,0x8
c002193b:	68 64 01 00 00       	push   0x164
c0021940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021944:	e8 41 b0 fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021949:	83 c4 10             	add    esp,0x10
c002194c:	83 c4 0c             	add    esp,0xc
c002194f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021950 <ATA::~ATA()>:
c0021950:	83 ec 0c             	sub    esp,0xc
c0021953:	ba b8 4e 02 c0       	mov    edx,0xc0024eb8
c0021958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002195c:	89 10                	mov    DWORD PTR [eax],edx
c002195e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021962:	83 ec 0c             	sub    esp,0xc
c0021965:	50                   	push   eax
c0021966:	e8 0f ca fe ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c002196b:	83 c4 10             	add    esp,0x10
c002196e:	90                   	nop
c002196f:	83 c4 0c             	add    esp,0xc
c0021972:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021974 <ATA::~ATA()>:
c0021974:	83 ec 0c             	sub    esp,0xc
c0021977:	83 ec 0c             	sub    esp,0xc
c002197a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002197e:	e8 cd ff ff ff       	call   c0021950 <ATA::~ATA()>
c0021983:	83 c4 10             	add    esp,0x10
c0021986:	83 ec 08             	sub    esp,0x8
c0021989:	68 7c 01 00 00       	push   0x17c
c002198e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021992:	e8 f3 af fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021997:	83 c4 10             	add    esp,0x10
c002199a:	83 c4 0c             	add    esp,0xc
c002199d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002199e <ATAPI::~ATAPI()>:
c002199e:	83 ec 0c             	sub    esp,0xc
c00219a1:	ba f0 4e 02 c0       	mov    edx,0xc0024ef0
c00219a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219aa:	89 10                	mov    DWORD PTR [eax],edx
c00219ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219b0:	83 ec 0c             	sub    esp,0xc
c00219b3:	50                   	push   eax
c00219b4:	e8 c1 c9 fe ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c00219b9:	83 c4 10             	add    esp,0x10
c00219bc:	90                   	nop
c00219bd:	83 c4 0c             	add    esp,0xc
c00219c0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00219c2 <ATAPI::~ATAPI()>:
c00219c2:	83 ec 0c             	sub    esp,0xc
c00219c5:	83 ec 0c             	sub    esp,0xc
c00219c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219cc:	e8 cd ff ff ff       	call   c002199e <ATAPI::~ATAPI()>
c00219d1:	83 c4 10             	add    esp,0x10
c00219d4:	83 ec 08             	sub    esp,0x8
c00219d7:	68 80 01 00 00       	push   0x180
c00219dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219e0:	e8 a5 af fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c00219e5:	83 c4 10             	add    esp,0x10
c00219e8:	83 c4 0c             	add    esp,0xc
c00219eb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00219ec <SATA::~SATA()>:
c00219ec:	83 ec 0c             	sub    esp,0xc
c00219ef:	ba a4 4f 02 c0       	mov    edx,0xc0024fa4
c00219f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f8:	89 10                	mov    DWORD PTR [eax],edx
c00219fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219fe:	83 ec 0c             	sub    esp,0xc
c0021a01:	50                   	push   eax
c0021a02:	e8 73 c9 fe ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c0021a07:	83 c4 10             	add    esp,0x10
c0021a0a:	90                   	nop
c0021a0b:	83 c4 0c             	add    esp,0xc
c0021a0e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021a10 <SATA::~SATA()>:
c0021a10:	83 ec 0c             	sub    esp,0xc
c0021a13:	83 ec 0c             	sub    esp,0xc
c0021a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a1a:	e8 cd ff ff ff       	call   c00219ec <SATA::~SATA()>
c0021a1f:	83 c4 10             	add    esp,0x10
c0021a22:	83 ec 08             	sub    esp,0x8
c0021a25:	68 7c 01 00 00       	push   0x17c
c0021a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a2e:	e8 57 af fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021a33:	83 c4 10             	add    esp,0x10
c0021a36:	83 c4 0c             	add    esp,0xc
c0021a39:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021a3a <SATAPI::~SATAPI()>:
c0021a3a:	83 ec 0c             	sub    esp,0xc
c0021a3d:	ba 80 50 02 c0       	mov    edx,0xc0025080
c0021a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a46:	89 10                	mov    DWORD PTR [eax],edx
c0021a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a4c:	83 ec 0c             	sub    esp,0xc
c0021a4f:	50                   	push   eax
c0021a50:	e8 25 c9 fe ff       	call   c000e37a <PhysicalDisk::~PhysicalDisk()>
c0021a55:	83 c4 10             	add    esp,0x10
c0021a58:	90                   	nop
c0021a59:	83 c4 0c             	add    esp,0xc
c0021a5c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021a5e <SATAPI::~SATAPI()>:
c0021a5e:	83 ec 0c             	sub    esp,0xc
c0021a61:	83 ec 0c             	sub    esp,0xc
c0021a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a68:	e8 cd ff ff ff       	call   c0021a3a <SATAPI::~SATAPI()>
c0021a6d:	83 c4 10             	add    esp,0x10
c0021a70:	83 ec 08             	sub    esp,0x8
c0021a73:	68 80 01 00 00       	push   0x180
c0021a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a7c:	e8 09 af fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021a81:	83 c4 10             	add    esp,0x10
c0021a84:	83 c4 0c             	add    esp,0xc
c0021a87:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021a88 <AVX::~AVX()>:
c0021a88:	83 ec 0c             	sub    esp,0xc
c0021a8b:	ba c0 50 02 c0       	mov    edx,0xc00250c0
c0021a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a94:	89 10                	mov    DWORD PTR [eax],edx
c0021a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9a:	83 ec 0c             	sub    esp,0xc
c0021a9d:	50                   	push   eax
c0021a9e:	e8 5d c9 fe ff       	call   c000e400 <FPU::~FPU()>
c0021aa3:	83 c4 10             	add    esp,0x10
c0021aa6:	90                   	nop
c0021aa7:	83 c4 0c             	add    esp,0xc
c0021aaa:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021aac <AVX::~AVX()>:
c0021aac:	83 ec 0c             	sub    esp,0xc
c0021aaf:	83 ec 0c             	sub    esp,0xc
c0021ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ab6:	e8 cd ff ff ff       	call   c0021a88 <AVX::~AVX()>
c0021abb:	83 c4 10             	add    esp,0x10
c0021abe:	83 ec 08             	sub    esp,0x8
c0021ac1:	68 58 01 00 00       	push   0x158
c0021ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aca:	e8 bb ae fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021acf:	83 c4 10             	add    esp,0x10
c0021ad2:	83 c4 0c             	add    esp,0xc
c0021ad5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021ad8 <MMX::~MMX()>:
c0021ad8:	83 ec 0c             	sub    esp,0xc
c0021adb:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0021ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae4:	89 10                	mov    DWORD PTR [eax],edx
c0021ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aea:	83 ec 0c             	sub    esp,0xc
c0021aed:	50                   	push   eax
c0021aee:	e8 0d c9 fe ff       	call   c000e400 <FPU::~FPU()>
c0021af3:	83 c4 10             	add    esp,0x10
c0021af6:	90                   	nop
c0021af7:	83 c4 0c             	add    esp,0xc
c0021afa:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021afc <MMX::~MMX()>:
c0021afc:	83 ec 0c             	sub    esp,0xc
c0021aff:	83 ec 0c             	sub    esp,0xc
c0021b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b06:	e8 cd ff ff ff       	call   c0021ad8 <MMX::~MMX()>
c0021b0b:	83 c4 10             	add    esp,0x10
c0021b0e:	83 ec 08             	sub    esp,0x8
c0021b11:	68 58 01 00 00       	push   0x158
c0021b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b1a:	e8 6b ae fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021b1f:	83 c4 10             	add    esp,0x10
c0021b22:	83 c4 0c             	add    esp,0xc
c0021b25:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021b28 <SSE::~SSE()>:
c0021b28:	83 ec 0c             	sub    esp,0xc
c0021b2b:	ba 40 51 02 c0       	mov    edx,0xc0025140
c0021b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b34:	89 10                	mov    DWORD PTR [eax],edx
c0021b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b3a:	83 ec 0c             	sub    esp,0xc
c0021b3d:	50                   	push   eax
c0021b3e:	e8 bd c8 fe ff       	call   c000e400 <FPU::~FPU()>
c0021b43:	83 c4 10             	add    esp,0x10
c0021b46:	90                   	nop
c0021b47:	83 c4 0c             	add    esp,0xc
c0021b4a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021b4c <SSE::~SSE()>:
c0021b4c:	83 ec 0c             	sub    esp,0xc
c0021b4f:	83 ec 0c             	sub    esp,0xc
c0021b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b56:	e8 cd ff ff ff       	call   c0021b28 <SSE::~SSE()>
c0021b5b:	83 c4 10             	add    esp,0x10
c0021b5e:	83 ec 08             	sub    esp,0x8
c0021b61:	68 58 01 00 00       	push   0x158
c0021b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b6a:	e8 1b ae fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021b6f:	83 c4 10             	add    esp,0x10
c0021b72:	83 c4 0c             	add    esp,0xc
c0021b75:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021b78 <x87::~x87()>:
c0021b78:	83 ec 0c             	sub    esp,0xc
c0021b7b:	ba 80 51 02 c0       	mov    edx,0xc0025180
c0021b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b84:	89 10                	mov    DWORD PTR [eax],edx
c0021b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8a:	83 ec 0c             	sub    esp,0xc
c0021b8d:	50                   	push   eax
c0021b8e:	e8 6d c8 fe ff       	call   c000e400 <FPU::~FPU()>
c0021b93:	83 c4 10             	add    esp,0x10
c0021b96:	90                   	nop
c0021b97:	83 c4 0c             	add    esp,0xc
c0021b9a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021b9c <x87::~x87()>:
c0021b9c:	83 ec 0c             	sub    esp,0xc
c0021b9f:	83 ec 0c             	sub    esp,0xc
c0021ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ba6:	e8 cd ff ff ff       	call   c0021b78 <x87::~x87()>
c0021bab:	83 c4 10             	add    esp,0x10
c0021bae:	83 ec 08             	sub    esp,0x8
c0021bb1:	68 58 01 00 00       	push   0x158
c0021bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bba:	e8 cb ad fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021bbf:	83 c4 10             	add    esp,0x10
c0021bc2:	83 c4 0c             	add    esp,0xc
c0021bc5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021bc6 <IOAPIC::~IOAPIC()>:
c0021bc6:	83 ec 0c             	sub    esp,0xc
c0021bc9:	ba d8 52 02 c0       	mov    edx,0xc00252d8
c0021bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd2:	89 10                	mov    DWORD PTR [eax],edx
c0021bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd8:	83 ec 0c             	sub    esp,0xc
c0021bdb:	50                   	push   eax
c0021bdc:	e8 9f c1 fe ff       	call   c000dd80 <Device::~Device()>
c0021be1:	83 c4 10             	add    esp,0x10
c0021be4:	90                   	nop
c0021be5:	83 c4 0c             	add    esp,0xc
c0021be8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021bea <IOAPIC::~IOAPIC()>:
c0021bea:	83 ec 0c             	sub    esp,0xc
c0021bed:	83 ec 0c             	sub    esp,0xc
c0021bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bf4:	e8 cd ff ff ff       	call   c0021bc6 <IOAPIC::~IOAPIC()>
c0021bf9:	83 c4 10             	add    esp,0x10
c0021bfc:	83 ec 08             	sub    esp,0x8
c0021bff:	68 68 01 00 00       	push   0x168
c0021c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c08:	e8 7d ad fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021c0d:	83 c4 10             	add    esp,0x10
c0021c10:	83 c4 0c             	add    esp,0xc
c0021c13:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021c14 <APIC::~APIC()>:
c0021c14:	83 ec 0c             	sub    esp,0xc
c0021c17:	ba 90 52 02 c0       	mov    edx,0xc0025290
c0021c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c20:	89 10                	mov    DWORD PTR [eax],edx
c0021c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c26:	83 ec 0c             	sub    esp,0xc
c0021c29:	50                   	push   eax
c0021c2a:	e8 a5 cc fe ff       	call   c000e8d4 <InterruptController::~InterruptController()>
c0021c2f:	83 c4 10             	add    esp,0x10
c0021c32:	90                   	nop
c0021c33:	83 c4 0c             	add    esp,0xc
c0021c36:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021c38 <APIC::~APIC()>:
c0021c38:	83 ec 0c             	sub    esp,0xc
c0021c3b:	83 ec 0c             	sub    esp,0xc
c0021c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c42:	e8 cd ff ff ff       	call   c0021c14 <APIC::~APIC()>
c0021c47:	83 c4 10             	add    esp,0x10
c0021c4a:	83 ec 08             	sub    esp,0x8
c0021c4d:	68 58 21 00 00       	push   0x2158
c0021c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c56:	e8 2f ad fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021c5b:	83 c4 10             	add    esp,0x10
c0021c5e:	83 c4 0c             	add    esp,0xc
c0021c61:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021c62 <PIC::~PIC()>:
c0021c62:	83 ec 0c             	sub    esp,0xc
c0021c65:	ba 28 53 02 c0       	mov    edx,0xc0025328
c0021c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c6e:	89 10                	mov    DWORD PTR [eax],edx
c0021c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c74:	83 ec 0c             	sub    esp,0xc
c0021c77:	50                   	push   eax
c0021c78:	e8 57 cc fe ff       	call   c000e8d4 <InterruptController::~InterruptController()>
c0021c7d:	83 c4 10             	add    esp,0x10
c0021c80:	90                   	nop
c0021c81:	83 c4 0c             	add    esp,0xc
c0021c84:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021c86 <PIC::~PIC()>:
c0021c86:	83 ec 0c             	sub    esp,0xc
c0021c89:	83 ec 0c             	sub    esp,0xc
c0021c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c90:	e8 cd ff ff ff       	call   c0021c62 <PIC::~PIC()>
c0021c95:	83 c4 10             	add    esp,0x10
c0021c98:	83 ec 08             	sub    esp,0x8
c0021c9b:	68 58 21 00 00       	push   0x2158
c0021ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ca4:	e8 e1 ac fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021ca9:	83 c4 10             	add    esp,0x10
c0021cac:	83 c4 0c             	add    esp,0xc
c0021caf:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021cb0 <APICTimer::~APICTimer()>:
c0021cb0:	83 ec 0c             	sub    esp,0xc
c0021cb3:	ba 7c 53 02 c0       	mov    edx,0xc002537c
c0021cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cbc:	89 10                	mov    DWORD PTR [eax],edx
c0021cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc2:	83 ec 0c             	sub    esp,0xc
c0021cc5:	50                   	push   eax
c0021cc6:	e8 15 ea fe ff       	call   c00106e0 <Timer::~Timer()>
c0021ccb:	83 c4 10             	add    esp,0x10
c0021cce:	90                   	nop
c0021ccf:	83 c4 0c             	add    esp,0xc
c0021cd2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021cd4 <APICTimer::~APICTimer()>:
c0021cd4:	83 ec 0c             	sub    esp,0xc
c0021cd7:	83 ec 0c             	sub    esp,0xc
c0021cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cde:	e8 cd ff ff ff       	call   c0021cb0 <APICTimer::~APICTimer()>
c0021ce3:	83 c4 10             	add    esp,0x10
c0021ce6:	83 ec 08             	sub    esp,0x8
c0021ce9:	68 60 01 00 00       	push   0x160
c0021cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cf2:	e8 93 ac fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021cf7:	83 c4 10             	add    esp,0x10
c0021cfa:	83 c4 0c             	add    esp,0xc
c0021cfd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021d00 <PIT::~PIT()>:
c0021d00:	83 ec 0c             	sub    esp,0xc
c0021d03:	ba cc 53 02 c0       	mov    edx,0xc00253cc
c0021d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d0c:	89 10                	mov    DWORD PTR [eax],edx
c0021d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d12:	83 ec 0c             	sub    esp,0xc
c0021d15:	50                   	push   eax
c0021d16:	e8 c5 e9 fe ff       	call   c00106e0 <Timer::~Timer()>
c0021d1b:	83 c4 10             	add    esp,0x10
c0021d1e:	90                   	nop
c0021d1f:	83 c4 0c             	add    esp,0xc
c0021d22:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021d24 <PIT::~PIT()>:
c0021d24:	83 ec 0c             	sub    esp,0xc
c0021d27:	83 ec 0c             	sub    esp,0xc
c0021d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d2e:	e8 cd ff ff ff       	call   c0021d00 <PIT::~PIT()>
c0021d33:	83 c4 10             	add    esp,0x10
c0021d36:	83 ec 08             	sub    esp,0x8
c0021d39:	68 5c 01 00 00       	push   0x15c
c0021d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d42:	e8 43 ac fe ff       	call   c000c98a <operator delete(void*, unsigned long)>
c0021d47:	83 c4 10             	add    esp,0x10
c0021d4a:	83 c4 0c             	add    esp,0xc
c0021d4d:	c3                   	ret    
